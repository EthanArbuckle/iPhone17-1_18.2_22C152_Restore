unint64_t sub_100119500(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, void *a8)
{
  return sub_100119650(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&unk_1003052D8, (uint64_t)&unk_100343768, (void (*)(uint64_t *__return_ptr, uint64_t, id))sub_1001B1164) & 1;
}

uint64_t sub_100119554(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  return sub_10011803C(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_100305238, (uint64_t)&unk_100343730, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1001B4914) & 1;
}

uint64_t sub_1001195A8(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  return sub_10011803C(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_1003051E8, (uint64_t)&unk_100343718, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1001B59BC) & 1;
}

unint64_t sub_1001195FC(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, void *a8)
{
  return sub_100119650(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&unk_1003051C0, (uint64_t)&unk_100343710, (void (*)(uint64_t *__return_ptr, uint64_t, id))sub_1001B603C) & 1;
}

unint64_t sub_100119650(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t *__return_ptr, uint64_t, id))
{
  v12 = v11;
  id v124 = a8;
  LODWORD(v120) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  v121 = a1;
  uint64_t v122 = a2;
  LODWORD(v123) = a3;
  v19 = sub_10010D0A4(a1, a2, a3);
  swift_beginAccess();
  v20 = swift_unknownObjectRetain();
  os_activity_scope_enter(v20, (os_activity_scope_state_t)(v19 + 24));
  swift_endAccess();
  swift_unknownObjectRelease();
  v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Checking for first unlock.", v23, 2u);
    v12 = v11;
    swift_slowDealloc();
  }

  if (!MKBUserUnlockedSinceBoot())
  {
    v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v39, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    goto LABEL_19;
  }
  uint64_t v24 = type metadata accessor for ScreenTimeFeatureFlags();
  v126[3] = v24;
  v126[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  v25 = sub_1000C532C(v126);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v25, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v24);
  char v26 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v126);
  v27 = Logger.logObject.getter();
  if ((v26 & 1) == 0)
  {
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      v126[0] = swift_slowAlloc();
      *(_DWORD *)v43 = 136446210;
      v117 = (uint64_t *)(v43 + 4);
      uint64_t v44 = StaticString.description.getter();
      uint64_t v45 = a4;
      uint64_t v46 = a7;
      uint64_t v47 = v45;
      uint64_t v127 = sub_1000A2E70(v44, v48, v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v49 = v47;
      a7 = v46;
      a4 = v49;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v42, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    unint64_t v40 = swift_allocError();
    unsigned char *v50 = 1;
    goto LABEL_23;
  }
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  if (a5)
  {
    if (v29)
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Starting preflight.", v30, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Preflight complete", v33, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "The preflight did not complete as expected.", v36, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      unint64_t v40 = swift_allocError();
      unsigned char *v41 = 0;
LABEL_23:
      swift_willThrow();
      swift_release();
LABEL_24:
      v126[0] = v40;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      sub_10009EE78(&qword_100341D40);
      if (swift_dynamicCast() && (v127 & 1) == 0)
      {
        swift_errorRelease();
        unint64_t v40 = Logger.logObject.getter();
        os_log_type_t v63 = static os_log_type_t.error.getter();
        if (os_log_type_enabled((os_log_t)v40, v63))
        {
          v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v64 = 0;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v40, v63, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v64, 2u);
          swift_slowDealloc();
        }

        sub_10019055C(&qword_100341D48, &qword_100341D40);
        swift_allocError();
        unsigned char *v65 = 0;
        swift_willThrow();
        uint64_t v66 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v66 - 8) + 8))(a4, v66);
        swift_errorRelease();

        goto LABEL_77;
      }
      swift_errorRelease();
      v126[0] = v40;
      uint64_t v51 = type metadata accessor for DataStore.DataStoreError(0);
      uint64_t v52 = *(void *)(*(void *)(v51 - 8) + 64);
      __chkstk_darwin(v51);
      v53 = (id *)((char *)&v115 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
      swift_errorRetain();
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 37)
        {
          uint64_t v118 = a7;
          swift_errorRelease();
          id v54 = *v53;
          id v55 = *v53;
          uint64_t v119 = a4;
          unint64_t v40 = Logger.logObject.getter();
          os_log_type_t v56 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled((os_log_t)v40, v56))
          {
            uint64_t v57 = swift_slowAlloc();
            v116 = (uint64_t *)swift_slowAlloc();
            v117 = (uint64_t *)swift_slowAlloc();
            uint64_t v127 = (uint64_t)v117;
            *(_DWORD *)uint64_t v57 = 136446466;
            uint64_t v120 = (uint64_t)v54;
            uint64_t v58 = StaticString.description.getter();
            uint64_t v125 = sub_1000A2E70(v58, v59, &v127);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v57 + 12) = 2114;
            sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
            swift_allocError();
            void *v60 = v120;
            swift_storeEnumTagMultiPayload();
            id v61 = v55;
            uint64_t v62 = _swift_stdlib_bridgeErrorToNSError();
            uint64_t v125 = v62;
            id v54 = (id)v120;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t *v116 = v62;

            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v40, v56, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v57, 0x16u);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v104 = v54;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          uint64_t v105 = type metadata accessor for Logger();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(v119, v105);
          swift_errorRelease();

          goto LABEL_77;
        }
        sub_1000C9DB4((uint64_t)&v115 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
      }
      swift_errorRelease();
      v126[0] = v40;
      swift_errorRetain();
      if (swift_dynamicCast() && (v125 & 1) == 0)
      {
        swift_errorRelease();
        if (qword_10034B2B0)
        {
          unint64_t v40 = qword_10034B2B0;
        }
        else
        {
          sub_1000C51B4();
          unint64_t v40 = swift_allocError();
          unsigned char *v108 = 0;
        }
        swift_errorRetain();
        swift_errorRetain();
        swift_errorRetain();
        v109 = Logger.logObject.getter();
        os_log_type_t v110 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v109, v110))
        {
          v111 = (uint8_t *)swift_slowAlloc();
          v123 = (void *)swift_slowAlloc();
          *(_DWORD *)v111 = 138412290;
          swift_errorRetain();
          uint64_t v112 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v127 = v112;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v123 = v112;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v109, v110, "The preflight error %@ did not result in a TTR", v111, 0xCu);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        sub_10023C5AC(v40);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v113 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v113 - 8) + 8))(a4, v113);
        swift_errorRelease();

        goto LABEL_77;
      }
      uint64_t v67 = swift_errorRelease();
      v126[0] = v40;
      __chkstk_darwin(v67);
      v68 = (uint64_t *)((char *)&v115 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
      swift_errorRetain();
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 22)
        {
          swift_errorRelease();
          v69 = (void *)*v68;
          unint64_t v40 = v68[1];
          swift_bridgeObjectRetain_n();
          v70 = Logger.logObject.getter();
          os_log_type_t v71 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v70, v71))
          {
            v72 = (uint8_t *)swift_slowAlloc();
            uint64_t v73 = swift_slowAlloc();
            v123 = v69;
            uint64_t v127 = v73;
            uint64_t v118 = a7;
            uint64_t v119 = a4;
            *(_DWORD *)v72 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v125 = sub_1000A2E70((uint64_t)v123, v40, &v127);
            a4 = v119;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v70, v71, "askForTime response handling did not find ask request identifier %s", v72, 0xCu);
            swift_arrayDestroy();
            v69 = v123;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }

          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v106 = v69;
          v106[1] = v40;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          uint64_t v107 = type metadata accessor for Logger();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 8))(a4, v107);
          swift_errorRelease();
          goto LABEL_71;
        }
        sub_1000C9DB4((uint64_t)&v115 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
      }
      swift_errorRelease();
      swift_errorRetain();
      swift_errorRetain();
      v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.fault.getter();
      BOOL v82 = os_log_type_enabled(v80, v81);
      uint64_t v118 = a7;
      uint64_t v119 = a4;
      if (v82)
      {
        uint64_t v83 = swift_slowAlloc();
        v84 = (void *)swift_slowAlloc();
        v126[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v83 = 136446466;
        uint64_t v85 = StaticString.description.getter();
        uint64_t v127 = sub_1000A2E70(v85, v86, v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v83 + 12) = 2114;
        swift_errorRetain();
        uint64_t v87 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v127 = v87;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v84 = v87;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v83, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        if (v120) {
          goto LABEL_65;
        }
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        if (v120)
        {
LABEL_65:
          sub_10023C5AC(v40);
          swift_willThrow();
          swift_errorRelease();
          uint64_t v102 = type metadata accessor for Logger();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(v119, v102);
LABEL_71:

LABEL_77:
          swift_release();
          return v40 & 1;
        }
      }
      if (&class metadata base offset for TapToRadarService) {
        BOOL v88 = &type metadata accessor for TapToRadarService == 0;
      }
      else {
        BOOL v88 = 1;
      }
      if (!v88 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
      {
        uint64_t v120 = a10;
        uint64_t v91 = sub_10009EE78(&qword_100340F10);
        v117 = &v115;
        __chkstk_darwin(v91 - 8);
        v93 = (char *)&v115 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v94 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 56))(v93, 1, 1, v94);
        uint64_t v95 = type metadata accessor for Logger();
        v116 = &v115;
        uint64_t v96 = *(void *)(v95 - 8);
        uint64_t v97 = *(void *)(v96 + 64);
        __chkstk_darwin(v95);
        (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))((char *)&v115 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0), v119, v95);
        unint64_t v98 = (*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
        uint64_t v99 = swift_allocObject();
        *(void *)(v99 + 16) = 0;
        *(void *)(v99 + 24) = 0;
        (*(void (**)(unint64_t, char *, uint64_t))(v96 + 32))(v99 + v98, (char *)&v115 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0), v95);
        unint64_t v100 = v99 + ((v98 + v97 + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v101 = v122;
        *(void *)unint64_t v100 = v121;
        *(void *)(v100 + 8) = v101;
        *(unsigned char *)(v100 + 16) = (_BYTE)v123;
        *(void *)(v99 + ((v98 + v97 + 31) & 0xFFFFFFFFFFFFFFF8)) = v40;
        swift_errorRetain();
        sub_1000A27A0((uint64_t)v93, v120, v99);
        swift_release();
      }
      goto LABEL_65;
    }
  }
  else
  {
    if (v29)
    {
      v117 = (uint64_t *)v19;
      v74 = (uint8_t *)swift_slowAlloc();
      v116 = v12;
      v126[0] = swift_slowAlloc();
      *(_DWORD *)v74 = 136446210;
      uint64_t v75 = StaticString.description.getter();
      uint64_t v127 = sub_1000A2E70(v75, v76, v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s has opted out of preflight.", v74, 0xCu);
      swift_arrayDestroy();
      v12 = v116;
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v77, v78))
  {
    v79 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v79 = 0;
    _os_log_impl((void *)&_mh_execute_header, v77, v78, "Starting the activity.", v79, 2u);
    swift_slowDealloc();
  }

  a11(v126, a7, v124);
  if (v12)
  {
    swift_release();
    unint64_t v40 = (unint64_t)v12;
    goto LABEL_24;
  }
  uint64_t v103 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8))(a4, v103);
  swift_release();
  LOBYTE(v40) = v126[0];

  swift_release();
  return v40 & 1;
}

uint64_t sub_10011ABA4(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  return sub_10011803C(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_100305148, (uint64_t)&unk_1003436F8, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1001B7B9C) & 1;
}

uint64_t sub_10011ABF8(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  return sub_10011803C(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_100305008, (uint64_t)&unk_100343680, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1001BD61C) & 1;
}

uint64_t sub_10011AC4C(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  return sub_10011803C(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_100304FB8, (uint64_t)&unk_100343670, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1001C0568) & 1;
}

unint64_t sub_10011ACA0(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, void *a8)
{
  return sub_100119650(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&unk_100304CE8, (uint64_t)&unk_100343550, (void (*)(uint64_t *__return_ptr, uint64_t, id))sub_1001D1614) & 1;
}

uint64_t sub_10011ACF4(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, uint64_t *a8, uint64_t a9)
{
  return sub_10011C33C(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_1003050F8, (uint64_t)&unk_1003436E0, (void (*)(uint64_t, uint64_t *, uint64_t))sub_1001B92A0);
}

uint64_t sub_10011AD4C(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, void *a8)
{
  return sub_10011ECA8(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&unk_100305670, (uint64_t)&unk_100343898, (void (*)(uint64_t, id))sub_1000D25F4);
}

void sub_10011AD9C(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, char *a7)
{
  LODWORD(v122) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  v123 = a1;
  uint64_t v124 = a2;
  LODWORD(v125) = a3;
  v13 = (os_activity_scope_state_s *)(sub_10010D0A4(a1, a2, a3) + 24);
  swift_beginAccess();
  v14 = swift_unknownObjectRetain();
  os_activity_scope_enter(v14, v13);
  swift_endAccess();
  swift_unknownObjectRelease();
  v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Checking for first unlock.", v17, 2u);
    swift_slowDealloc();
  }

  if (!MKBUserUnlockedSinceBoot())
  {
    v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v33, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v18 = type metadata accessor for ScreenTimeFeatureFlags();
  v128[3] = v18;
  v128[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  v19 = sub_1000C532C(v128);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v19, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v18);
  char v20 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v128);
  v21 = Logger.logObject.getter();
  if (v20)
  {
    os_log_type_t v22 = static os_log_type_t.default.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    if (a5)
    {
      if (v23)
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Starting preflight.", v24, 2u);
        swift_slowDealloc();
      }

      if (qword_100340D70 != -1) {
        swift_once();
      }
      v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Preflight complete", v27, 2u);
        swift_slowDealloc();
      }

      if ((byte_10034B308 & 1) == 0)
      {
        os_log_type_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "The preflight did not complete as expected.", v30, 2u);
          swift_slowDealloc();
        }

        sub_1000C51B4();
LABEL_19:
        uint64_t v35 = swift_allocError();
        char v36 = 0;
        goto LABEL_23;
      }
    }
    else
    {
      if (v23)
      {
        uint64_t v126 = a4;
        id v61 = (uint8_t *)swift_slowAlloc();
        v128[0] = swift_slowAlloc();
        *(_DWORD *)id v61 = 136446210;
        uint64_t v122 = (uint64_t)(v61 + 4);
        uint64_t v62 = StaticString.description.getter();
        uint64_t v129 = sub_1000A2E70(v62, v63, v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        a4 = v126;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s has opted out of preflight.", v61, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
    v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Starting the activity.", v66, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D60 != -1) {
      swift_once();
    }
    id v67 = [a7 unsignedIntegerValue];
    swift_beginAccess();
    uint64_t v68 = qword_10034B2D0;
    uint64_t v69 = unk_10034B2D8;
    sub_1000C5908((uint64_t)qword_10034B2B8, qword_10034B2D0);
    (*(void (**)(id, uint64_t, uint64_t))(v69 + 24))(v67, v68, v69);
    swift_endAccess();
    uint64_t v70 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v70 - 8) + 8))(a4, v70);
    swift_release();
    goto LABEL_76;
  }
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v37))
  {
    uint64_t v126 = a4;
    os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
    v128[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v38 = 136446210;
    uint64_t v39 = StaticString.description.getter();
    uint64_t v129 = sub_1000A2E70(v39, v40, v128);
    a4 = v126;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v37, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_10009EE78(&qword_100341D58);
  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  uint64_t v35 = swift_allocError();
  char v36 = 1;
LABEL_23:
  char *v34 = v36;
  swift_willThrow();
  swift_release();
  v128[0] = v35;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (v129 & 1) == 0)
  {
    swift_errorRelease();
    os_log_type_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v58, 2u);
      swift_slowDealloc();
    }

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    *unint64_t v59 = 0;
    swift_willThrow();
    uint64_t v60 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(a4, v60);
    goto LABEL_75;
  }
  swift_errorRelease();
  v128[0] = v35;
  uint64_t v41 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v42 = *(void *)(*(void *)(v41 - 8) + 64);
  __chkstk_darwin(v41);
  v43 = (id *)((char *)&v118 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    if (swift_getEnumCaseMultiPayload() == 37)
    {
      swift_errorRelease();
      id v44 = *v43;
      id v45 = *v43;
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.fault.getter();
      int v48 = v47;
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v49 = swift_slowAlloc();
        LODWORD(v120) = v48;
        uint64_t v50 = v49;
        uint64_t v119 = (void *)swift_slowAlloc();
        uint64_t v122 = swift_slowAlloc();
        uint64_t v129 = v122;
        *(_DWORD *)uint64_t v50 = 136446466;
        uint64_t v126 = a4;
        uint64_t v51 = StaticString.description.getter();
        v121 = a7;
        uint64_t v127 = sub_1000A2E70(v51, v52, &v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v50 + 12) = 2114;
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v53 = v44;
        swift_storeEnumTagMultiPayload();
        id v54 = v45;
        uint64_t v55 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v127 = v55;
        a4 = v126;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v119 = v55;
        a7 = v121;

        _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v120, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v50, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
      swift_allocError();
      void *v106 = v44;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      uint64_t v107 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 8))(a4, v107);
LABEL_75:
      swift_errorRelease();
      goto LABEL_76;
    }
    sub_1000C9DB4((uint64_t)&v118 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  }
  swift_errorRelease();
  v128[0] = v35;
  swift_errorRetain();
  int v71 = swift_dynamicCast();
  uint64_t v126 = a4;
  if (v71 && (v127 & 1) == 0)
  {
    swift_errorRelease();
    if (qword_10034B2B0)
    {
      uint64_t v79 = qword_10034B2B0;
    }
    else
    {
      sub_1000C51B4();
      uint64_t v79 = swift_allocError();
      *os_log_type_t v110 = 0;
    }
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    v111 = Logger.logObject.getter();
    os_log_type_t v112 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v111, v112))
    {
      uint64_t v113 = (uint8_t *)swift_slowAlloc();
      v114 = a7;
      uint64_t v115 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v113 = 138412290;
      swift_errorRetain();
      uint64_t v116 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v129 = v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v115 = v116;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "The preflight error %@ did not result in a TTR", v113, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      a7 = v114;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    sub_10023C5AC(v79);
    swift_willThrow();
    swift_errorRelease();
    uint64_t v117 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v117 - 8) + 8))(v126, v117);
    goto LABEL_75;
  }
  uint64_t v72 = swift_errorRelease();
  v128[0] = v35;
  __chkstk_darwin(v72);
  uint64_t v73 = (uint64_t *)((char *)&v118 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_50:
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v82 = swift_slowAlloc();
      uint64_t v83 = (void *)swift_slowAlloc();
      v128[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v82 = 136446466;
      uint64_t v84 = StaticString.description.getter();
      v121 = a7;
      uint64_t v129 = sub_1000A2E70(v84, v85, v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v82 + 12) = 2114;
      swift_errorRetain();
      uint64_t v86 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v129 = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v83 = v86;
      a7 = v121;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v82, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v122) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v122)
      {
LABEL_65:
        sub_10023C5AC(v35);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v105 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(v126, v105);
LABEL_76:

        return;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v87 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v87 = 1;
    }
    if (!v87 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      uint64_t v90 = sub_10009EE78(&qword_100340F10);
      uint64_t v122 = (uint64_t)&v118;
      __chkstk_darwin(v90 - 8);
      uint64_t v92 = (char *)&v118 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
      v121 = v92;
      uint64_t v93 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56))(v92, 1, 1, v93);
      uint64_t v94 = type metadata accessor for Logger();
      uint64_t v120 = &v118;
      uint64_t v95 = *(void *)(v94 - 8);
      uint64_t v96 = *(void *)(v95 + 64);
      __chkstk_darwin(v94);
      uint64_t v97 = (char *)&v118 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v97, v126, v94);
      unint64_t v98 = (*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80);
      uint64_t v99 = a7;
      unint64_t v100 = (v98 + v96 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v101 = (v98 + v96 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v102 = swift_allocObject();
      *(void *)(v102 + 16) = 0;
      *(void *)(v102 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v95 + 32))(v102 + v98, v97, v94);
      unint64_t v103 = v102 + v100;
      a7 = v99;
      uint64_t v104 = v124;
      *(void *)unint64_t v103 = v123;
      *(void *)(v103 + 8) = v104;
      *(unsigned char *)(v103 + 16) = v125;
      *(void *)(v102 + v101) = v35;
      swift_errorRetain();
      sub_1000A27A0((uint64_t)v121, (uint64_t)&unk_100343818, v102);
      swift_release();
    }
    goto LABEL_65;
  }
  if (swift_getEnumCaseMultiPayload() != 22)
  {
    sub_1000C9DB4((uint64_t)&v118 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
    goto LABEL_50;
  }
  v121 = a7;
  swift_errorRelease();
  uint64_t v75 = *v73;
  unint64_t v74 = v73[1];
  swift_bridgeObjectRetain_n();
  unint64_t v76 = Logger.logObject.getter();
  os_log_type_t v77 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v76, v77))
  {
    uint64_t v125 = v75;
    os_log_type_t v78 = (uint8_t *)swift_slowAlloc();
    uint64_t v129 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v78 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v127 = sub_1000A2E70(v125, v74, &v129);
    uint64_t v75 = v125;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "askForTime response handling did not find ask request identifier %s", v78, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v126;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  uint64_t *v108 = v75;
  v108[1] = v74;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v109 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v109 - 8) + 8))(a4, v109);
  swift_errorRelease();
}

uint64_t sub_10011C2E4(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, uint64_t *a8, uint64_t a9)
{
  return sub_10011C33C(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_100305328, (uint64_t)&unk_100343778, (void (*)(uint64_t, uint64_t *, uint64_t))sub_1001053C8);
}

uint64_t sub_10011C33C(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t, uint64_t *, uint64_t))
{
  v114 = a8;
  uint64_t v121 = a7;
  LODWORD(v116) = a6;
  uint64_t v17 = a9;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v117 = a1;
  uint64_t v118 = a2;
  LODWORD(v119) = a3;
  uint64_t v18 = (os_activity_scope_state_s *)(sub_10010D0A4(a1, a2, a3) + 24);
  swift_beginAccess();
  v19 = swift_unknownObjectRetain();
  os_activity_scope_enter(v19, v18);
  swift_endAccess();
  swift_unknownObjectRelease();
  char v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  uint64_t v122 = a4;
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Checking for first unlock.", v22, 2u);
    a4 = v122;
    swift_slowDealloc();
  }

  uint64_t v120 = a9;
  if (!MKBUserUnlockedSinceBoot())
  {
    char v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v38, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v23 = type metadata accessor for ScreenTimeFeatureFlags();
  v124[3] = v23;
  v124[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v24 = sub_1000C532C(v124);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v24, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v23);
  char v25 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v124);
  os_log_type_t v26 = Logger.logObject.getter();
  if ((v25 & 1) == 0)
  {
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      v124[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136446210;
      uint64_t v43 = StaticString.description.getter();
      uint64_t v125 = sub_1000A2E70(v43, v44, v124);
      a4 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v41, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v39 = swift_allocError();
    *id v45 = 1;
    goto LABEL_23;
  }
  os_log_type_t v27 = static os_log_type_t.default.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  if (a5)
  {
    if (v28)
    {
      os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Starting preflight.", v29, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Preflight complete", v32, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "The preflight did not complete as expected.", v35, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v39 = swift_allocError();
      *unint64_t v40 = 0;
LABEL_23:
      swift_willThrow();
      goto LABEL_24;
    }
  }
  else
  {
    if (v28)
    {
      int v71 = (uint8_t *)swift_slowAlloc();
      v124[0] = swift_slowAlloc();
      *(_DWORD *)int v71 = 136446210;
      uint64_t v72 = StaticString.description.getter();
      uint64_t v125 = sub_1000A2E70(v72, v73, v124);
      uint64_t v17 = v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s has opted out of preflight.", v71, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a4 = v122;
      swift_slowDealloc();
    }
  }
  unint64_t v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    unint64_t v76 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v76 = 0;
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Starting the activity.", v76, 2u);
    swift_slowDealloc();
  }

  a12(v121, v114, v17);
  if (!v115)
  {
    uint64_t v100 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8))(a4, v100);
    swift_release();
    goto LABEL_77;
  }
  uint64_t v39 = (uint64_t)v115;
LABEL_24:
  swift_release();
  v124[0] = v39;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (v125 & 1) == 0)
  {
    swift_errorRelease();
    unint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      id v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v61, 2u);
      swift_slowDealloc();
    }

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    *uint64_t v62 = 0;
    swift_willThrow();
    uint64_t v63 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(a4, v63);
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    v124[0] = v39;
    uint64_t v46 = type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v47 = *(void *)(*(void *)(v46 - 8) + 64);
    __chkstk_darwin(v46);
    int v48 = (id *)((char *)&v113 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v49 = *v48;
        id v50 = *v48;
        uint64_t v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = swift_slowAlloc();
          v114 = (uint64_t *)swift_slowAlloc();
          uint64_t v115 = (uint64_t *)swift_slowAlloc();
          uint64_t v125 = (uint64_t)v115;
          *(_DWORD *)uint64_t v53 = 136446466;
          uint64_t v116 = (uint64_t)v49;
          uint64_t v54 = StaticString.description.getter();
          uint64_t v123 = sub_1000A2E70(v54, v55, &v125);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v53 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *os_log_type_t v56 = v116;
          swift_storeEnumTagMultiPayload();
          id v57 = v50;
          uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v123 = v58;
          id v49 = (id)v116;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t *v114 = v58;

          _os_log_impl((void *)&_mh_execute_header, v51, v52, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v53, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v101 = v49;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v102 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(v122, v102);
        swift_errorRelease();
        goto LABEL_77;
      }
      sub_1000C9DB4((uint64_t)&v113 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    swift_errorRelease();
    v124[0] = v39;
    swift_errorRetain();
    if (swift_dynamicCast() && (v123 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v77 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v77 = swift_allocError();
        *uint64_t v105 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v106, v107))
      {
        v108 = (uint8_t *)swift_slowAlloc();
        uint64_t v109 = (void *)swift_slowAlloc();
        *(_DWORD *)v108 = 138412290;
        swift_errorRetain();
        uint64_t v110 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v125 = v110;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v109 = v110;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v106, v107, "The preflight error %@ did not result in a TTR", v108, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        a4 = v122;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      sub_10023C5AC(v77);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v111 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v111 - 8) + 8))(a4, v111);
      goto LABEL_76;
    }
    uint64_t v64 = swift_errorRelease();
    v124[0] = v39;
    __chkstk_darwin(v64);
    os_log_type_t v65 = (uint64_t *)((char *)&v113 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v67 = *v65;
        unint64_t v66 = v65[1];
        swift_bridgeObjectRetain_n();
        uint64_t v68 = Logger.logObject.getter();
        os_log_type_t v69 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v68, v69))
        {
          uint64_t v70 = (uint8_t *)swift_slowAlloc();
          uint64_t v125 = swift_slowAlloc();
          *(_DWORD *)uint64_t v70 = 136315138;
          uint64_t v119 = v70 + 4;
          swift_bridgeObjectRetain();
          uint64_t v123 = sub_1000A2E70(v67, v66, &v125);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "askForTime response handling did not find ask request identifier %s", v70, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v103 = v67;
        v103[1] = v66;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v104 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v104 - 8) + 8))(v122, v104);
LABEL_76:
        swift_errorRelease();
        goto LABEL_77;
      }
      sub_1000C9DB4((uint64_t)&v113 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = swift_slowAlloc();
      os_log_type_t v81 = (void *)swift_slowAlloc();
      v124[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v80 = 136446466;
      uint64_t v82 = StaticString.description.getter();
      uint64_t v125 = sub_1000A2E70(v82, v83, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v80 + 12) = 2114;
      swift_errorRetain();
      uint64_t v84 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v125 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v81 = v84;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v80, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    if ((v116 & 1) == 0)
    {
      BOOL v85 = !&class metadata base offset for TapToRadarService || &type metadata accessor for TapToRadarService == 0;
      BOOL v86 = v85 || &type metadata for TapToRadarService == 0;
      if (!v86 && &nominal type descriptor for TapToRadarService != 0)
      {
        uint64_t v116 = a11;
        uint64_t v88 = sub_10009EE78(&qword_100340F10);
        uint64_t v115 = &v113;
        __chkstk_darwin(v88 - 8);
        uint64_t v90 = (char *)&v113 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v91 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v90, 1, 1, v91);
        uint64_t v92 = type metadata accessor for Logger();
        v114 = &v113;
        uint64_t v93 = *(void *)(v92 - 8);
        uint64_t v94 = *(void *)(v93 + 64);
        __chkstk_darwin(v92);
        (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))((char *)&v113 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0), v122, v92);
        unint64_t v95 = (*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
        uint64_t v96 = swift_allocObject();
        *(void *)(v96 + 16) = 0;
        *(void *)(v96 + 24) = 0;
        (*(void (**)(unint64_t, char *, uint64_t))(v93 + 32))(v96 + v95, (char *)&v113 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0), v92);
        unint64_t v97 = v96 + ((v95 + v94 + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v98 = v118;
        *(void *)unint64_t v97 = v117;
        *(void *)(v97 + 8) = v98;
        *(unsigned char *)(v97 + 16) = (_BYTE)v119;
        *(void *)(v96 + ((v95 + v94 + 31) & 0xFFFFFFFFFFFFFFF8)) = v39;
        swift_errorRetain();
        sub_1000A27A0((uint64_t)v90, v116, v96);
        swift_release();
      }
    }
    sub_10023C5AC(v39);
    swift_willThrow();
    swift_errorRelease();
    uint64_t v99 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v122, v99);
  }
LABEL_77:
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10011D7EC(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  return sub_100120228(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_100305198, (uint64_t)&unk_100343708, sub_1001B6A90);
}

uint64_t sub_10011D83C(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, int a7, uint64_t a8, void *a9)
{
  uint64_t v120 = a8;
  LODWORD(v113) = a7;
  LODWORD(v115) = a6;
  id v14 = a9;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v116 = a1;
  uint64_t v117 = a2;
  LODWORD(v118) = a3;
  v15 = (os_activity_scope_state_s *)(sub_10010D0A4(a1, a2, a3) + 24);
  swift_beginAccess();
  os_log_type_t v16 = swift_unknownObjectRetain();
  os_activity_scope_enter(v16, v15);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  uint64_t v121 = a4;
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Checking for first unlock.", v19, 2u);
    a4 = v121;
    swift_slowDealloc();
  }

  id v119 = a9;
  if (!MKBUserUnlockedSinceBoot())
  {
    v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v35, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v20 = type metadata accessor for ScreenTimeFeatureFlags();
  v123[3] = v20;
  v123[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  os_log_type_t v21 = sub_1000C532C(v123);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v21, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v20);
  char v22 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v123);
  uint64_t v23 = Logger.logObject.getter();
  if ((v22 & 1) == 0)
  {
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      v123[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136446210;
      uint64_t v40 = StaticString.description.getter();
      uint64_t v124 = sub_1000A2E70(v40, v41, v123);
      a4 = v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v38, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v36 = swift_allocError();
    *uint64_t v42 = 1;
    goto LABEL_23;
  }
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  if (a5)
  {
    if (v25)
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Starting preflight.", v26, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Preflight complete", v29, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "The preflight did not complete as expected.", v32, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v36 = swift_allocError();
      unsigned char *v37 = 0;
LABEL_23:
      swift_willThrow();
LABEL_24:
      swift_release();
      v123[0] = v36;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      sub_10009EE78(&qword_100341D58);
      if (swift_dynamicCast() && (v124 & 1) == 0)
      {
        swift_errorRelease();
        os_log_type_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v58 = 0;
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v58, 2u);
          swift_slowDealloc();
        }

        sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
        swift_allocError();
        *unint64_t v59 = 0;
        swift_willThrow();
      }
      else
      {
        swift_errorRelease();
        v123[0] = v36;
        uint64_t v43 = type metadata accessor for DataStore.DataStoreError(0);
        uint64_t v44 = *(void *)(*(void *)(v43 - 8) + 64);
        __chkstk_darwin(v43);
        id v45 = (id *)((char *)&v112 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
        swift_errorRetain();
        if (swift_dynamicCast())
        {
          if (swift_getEnumCaseMultiPayload() == 37)
          {
            swift_errorRelease();
            uint64_t v46 = (uint64_t *)*v45;
            id v47 = *v45;
            int v48 = Logger.logObject.getter();
            os_log_type_t v49 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v48, v49))
            {
              uint64_t v50 = swift_slowAlloc();
              uint64_t v113 = swift_slowAlloc();
              v114 = (uint64_t *)swift_slowAlloc();
              uint64_t v124 = (uint64_t)v114;
              *(_DWORD *)uint64_t v50 = 136446466;
              uint64_t v115 = v46;
              uint64_t v51 = StaticString.description.getter();
              uint64_t v122 = sub_1000A2E70(v51, v52, &v124);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v50 + 12) = 2114;
              sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
              swift_allocError();
              void *v53 = v115;
              swift_storeEnumTagMultiPayload();
              id v54 = v47;
              uint64_t v55 = _swift_stdlib_bridgeErrorToNSError();
              uint64_t v122 = v55;
              uint64_t v46 = v115;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(void *)uint64_t v113 = v55;

              _os_log_impl((void *)&_mh_execute_header, v48, v49, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v50, 0x16u);
              sub_10009EE78(&qword_100342AB0);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
            }
            sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
            swift_allocError();
            *unint64_t v101 = v46;
LABEL_71:
            swift_storeEnumTagMultiPayload();
            swift_willThrow();
            uint64_t v103 = type metadata accessor for Logger();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8))(v121, v103);
LABEL_78:
            swift_errorRelease();
LABEL_79:

            return swift_release();
          }
          sub_1000C9DB4((uint64_t)&v112 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
        }
        swift_errorRelease();
        v123[0] = v36;
        swift_errorRetain();
        if (!swift_dynamicCast() || (v122 & 1) != 0)
        {
          uint64_t v60 = swift_errorRelease();
          v123[0] = v36;
          __chkstk_darwin(v60);
          id v61 = (uint64_t *)((char *)&v112 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
          swift_errorRetain();
          if (swift_dynamicCast())
          {
            if (swift_getEnumCaseMultiPayload() == 22)
            {
              swift_errorRelease();
              uint64_t v63 = *v61;
              unint64_t v62 = v61[1];
              swift_bridgeObjectRetain_n();
              uint64_t v64 = Logger.logObject.getter();
              os_log_type_t v65 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v64, v65))
              {
                uint64_t v118 = v63;
                unint64_t v66 = (uint8_t *)swift_slowAlloc();
                uint64_t v124 = swift_slowAlloc();
                *(_DWORD *)unint64_t v66 = 136315138;
                swift_bridgeObjectRetain();
                uint64_t v122 = sub_1000A2E70(v118, v62, &v124);
                uint64_t v63 = v118;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v64, v65, "askForTime response handling did not find ask request identifier %s", v66, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                swift_bridgeObjectRelease_n();
              }

              sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
              swift_allocError();
              *uint64_t v102 = v63;
              v102[1] = v62;
              goto LABEL_71;
            }
            sub_1000C9DB4((uint64_t)&v112 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
          }
          swift_errorRelease();
          swift_errorRetain();
          swift_errorRetain();
          unint64_t v74 = Logger.logObject.getter();
          os_log_type_t v75 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v74, v75))
          {
            uint64_t v76 = swift_slowAlloc();
            uint64_t v77 = (void *)swift_slowAlloc();
            v123[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v76 = 136446466;
            uint64_t v78 = StaticString.description.getter();
            uint64_t v124 = sub_1000A2E70(v78, v79, v123);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v76 + 12) = 2114;
            swift_errorRetain();
            uint64_t v80 = _swift_stdlib_bridgeErrorToNSError();
            uint64_t v124 = v80;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v77 = v80;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v74, v75, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v76, 0x16u);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_errorRelease();
            swift_errorRelease();
          }
          uint64_t v81 = v121;
          if ((v115 & 1) == 0)
          {
            BOOL v82 = !&class metadata base offset for TapToRadarService
               || &type metadata accessor for TapToRadarService == 0;
            BOOL v83 = v82 || &type metadata for TapToRadarService == 0;
            if (!v83 && &nominal type descriptor for TapToRadarService != 0)
            {
              uint64_t v85 = sub_10009EE78(&qword_100340F10);
              uint64_t v115 = &v112;
              __chkstk_darwin(v85 - 8);
              BOOL v87 = (char *)&v112 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
              uint64_t v88 = type metadata accessor for TaskPriority();
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v87, 1, 1, v88);
              uint64_t v89 = type metadata accessor for Logger();
              v114 = &v112;
              uint64_t v90 = *(void *)(v89 - 8);
              uint64_t v91 = *(void *)(v90 + 64);
              __chkstk_darwin(v89);
              uint64_t v92 = (char *)&v112 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v92, v81, v89);
              unint64_t v93 = (*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
              unint64_t v94 = (v93 + v91 + 7) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v95 = (v93 + v91 + 31) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v96 = swift_allocObject();
              *(void *)(v96 + 16) = 0;
              *(void *)(v96 + 24) = 0;
              (*(void (**)(unint64_t, char *, uint64_t))(v90 + 32))(v96 + v93, v92, v89);
              unint64_t v97 = v96 + v94;
              uint64_t v81 = v121;
              uint64_t v98 = v117;
              *(void *)unint64_t v97 = v116;
              *(void *)(v97 + 8) = v98;
              *(unsigned char *)(v97 + 16) = v118;
              *(void *)(v96 + v95) = v36;
              swift_errorRetain();
              sub_1000A27A0((uint64_t)v87, (uint64_t)&unk_1003436C0, v96);
              swift_release();
            }
          }
          sub_10023C5AC(v36);
          swift_willThrow();
          swift_errorRelease();
          uint64_t v99 = type metadata accessor for Logger();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v81, v99);
          goto LABEL_79;
        }
        swift_errorRelease();
        if (qword_10034B2B0)
        {
          uint64_t v73 = qword_10034B2B0;
        }
        else
        {
          sub_1000C51B4();
          uint64_t v73 = swift_allocError();
          unsigned char *v104 = 0;
        }
        swift_errorRetain();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v105 = Logger.logObject.getter();
        os_log_type_t v106 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v105, v106))
        {
          os_log_type_t v107 = (uint8_t *)swift_slowAlloc();
          v108 = (void *)swift_slowAlloc();
          *(_DWORD *)os_log_type_t v107 = 138412290;
          swift_errorRetain();
          uint64_t v109 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v124 = v109;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v108 = v109;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v105, v106, "The preflight error %@ did not result in a TTR", v107, 0xCu);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          a4 = v121;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        sub_10023C5AC(v73);
        swift_willThrow();
        swift_errorRelease();
      }
      uint64_t v110 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(a4, v110);
      goto LABEL_78;
    }
  }
  else
  {
    if (v25)
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      v123[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136446210;
      uint64_t v68 = StaticString.description.getter();
      uint64_t v124 = sub_1000A2E70(v68, v69, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v14 = v119;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s has opted out of preflight.", v67, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a4 = v121;
      swift_slowDealloc();
    }
  }
  uint64_t v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v70, v71))
  {
    uint64_t v72 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v72 = 0;
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "Starting the activity.", v72, 2u);
    swift_slowDealloc();
  }

  sub_1001BB38C(v113 & 1, v120, v14);
  if (v114)
  {
    uint64_t v36 = (uint64_t)v114;
    goto LABEL_24;
  }
  uint64_t v100 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8))(a4, v100);
  swift_release();

  return swift_release();
}

uint64_t sub_10011EC58(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, void *a8)
{
  return sub_10011ECA8(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&unk_100305080, (uint64_t)&unk_1003436B8, sub_1001BBBF0);
}

uint64_t sub_10011ECA8(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t, id))
{
  v12 = v11;
  id v128 = a8;
  LODWORD(v124) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v125 = a1;
  uint64_t v126 = a2;
  LODWORD(v127) = a3;
  v19 = sub_10010D0A4(a1, a2, a3);
  swift_beginAccess();
  uint64_t v20 = swift_unknownObjectRetain();
  os_activity_scope_enter(v20, (os_activity_scope_state_t)(v19 + 24));
  swift_endAccess();
  swift_unknownObjectRelease();
  os_log_type_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Checking for first unlock.", v23, 2u);
    v12 = v11;
    swift_slowDealloc();
  }

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v39, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v24 = type metadata accessor for ScreenTimeFeatureFlags();
  v130[3] = v24;
  v130[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  BOOL v25 = sub_1000C532C(v130);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v25, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v24);
  char v26 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v130);
  os_log_type_t v27 = Logger.logObject.getter();
  if ((v26 & 1) == 0)
  {
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      v130[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136446210;
      uint64_t v121 = (uint64_t *)(v43 + 4);
      uint64_t v44 = StaticString.description.getter();
      uint64_t v45 = a4;
      uint64_t v46 = a7;
      uint64_t v47 = v45;
      uint64_t v131 = sub_1000A2E70(v44, v48, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v49 = v47;
      a7 = v46;
      a4 = v49;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v42, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v40 = swift_allocError();
    unsigned char *v50 = 1;
    goto LABEL_23;
  }
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  if (a5)
  {
    if (v29)
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Starting preflight.", v30, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Preflight complete", v33, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "The preflight did not complete as expected.", v36, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v40 = swift_allocError();
      unsigned char *v41 = 0;
LABEL_23:
      swift_willThrow();
      goto LABEL_24;
    }
  }
  else
  {
    if (v29)
    {
      uint64_t v121 = (uint64_t *)v19;
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      uint64_t v120 = v12;
      v130[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v77 = 136446210;
      uint64_t v78 = StaticString.description.getter();
      uint64_t v131 = sub_1000A2E70(v78, v79, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s has opted out of preflight.", v77, 0xCu);
      swift_arrayDestroy();
      v12 = v120;
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v80 = Logger.logObject.getter();
  os_log_type_t v81 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v80, v81))
  {
    BOOL v82 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v82 = 0;
    _os_log_impl((void *)&_mh_execute_header, v80, v81, "Starting the activity.", v82, 2u);
    swift_slowDealloc();
  }

  a11(a7, v128);
  if (!v12)
  {
    uint64_t v107 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 8))(a4, v107);
    swift_release();
LABEL_67:

    return swift_release();
  }
  uint64_t v40 = (uint64_t)v12;
LABEL_24:
  swift_release();
  v130[0] = v40;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (v131 & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      unint64_t v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v66, 2u);
      swift_slowDealloc();
    }

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    *uint64_t v67 = 0;
    swift_willThrow();
    uint64_t v68 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v68 - 8) + 8))(a4, v68);
    swift_errorRelease();
    goto LABEL_67;
  }
  swift_errorRelease();
  v130[0] = v40;
  uint64_t v51 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v52 = *(void *)(*(void *)(v51 - 8) + 64);
  __chkstk_darwin(v51);
  uint64_t v53 = (id *)((char *)&v119 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    if (swift_getEnumCaseMultiPayload() == 37)
    {
      uint64_t v122 = a7;
      swift_errorRelease();
      id v54 = *v53;
      id v55 = *v53;
      uint64_t v123 = a4;
      os_log_type_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = swift_slowAlloc();
        uint64_t v120 = (uint64_t *)swift_slowAlloc();
        uint64_t v121 = (uint64_t *)swift_slowAlloc();
        uint64_t v131 = (uint64_t)v121;
        *(_DWORD *)uint64_t v58 = 136446466;
        uint64_t v124 = (uint64_t)v54;
        uint64_t v59 = StaticString.description.getter();
        uint64_t v129 = sub_1000A2E70(v59, v60, &v131);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v58 + 12) = 2114;
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *id v61 = v124;
        swift_storeEnumTagMultiPayload();
        id v62 = v55;
        uint64_t v63 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v129 = v63;
        id v54 = (id)v124;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v120 = v63;

        _os_log_impl((void *)&_mh_execute_header, v56, v57, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v58, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
      swift_allocError();
      void *v108 = v54;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      uint64_t v109 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v109 - 8) + 8))(v123, v109);
      swift_errorRelease();

      return swift_release();
    }
    sub_1000C9DB4((uint64_t)&v119 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
  }
  swift_errorRelease();
  v130[0] = v40;
  swift_errorRetain();
  if (!swift_dynamicCast() || (v129 & 1) != 0)
  {
    uint64_t v69 = swift_errorRelease();
    v130[0] = v40;
    __chkstk_darwin(v69);
    uint64_t v70 = (uint64_t *)((char *)&v119 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v72 = (void *)*v70;
        unint64_t v71 = v70[1];
        swift_bridgeObjectRetain_n();
        uint64_t v73 = Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v73, v74))
        {
          os_log_type_t v75 = (uint8_t *)swift_slowAlloc();
          uint64_t v76 = swift_slowAlloc();
          uint64_t v127 = v72;
          uint64_t v131 = v76;
          uint64_t v122 = a7;
          uint64_t v123 = a4;
          *(_DWORD *)os_log_type_t v75 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v129 = sub_1000A2E70((uint64_t)v127, v71, &v131);
          a4 = v123;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v73, v74, "askForTime response handling did not find ask request identifier %s", v75, 0xCu);
          swift_arrayDestroy();
          uint64_t v72 = v127;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v110 = v72;
        v110[1] = v71;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v111 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v111 - 8) + 8))(a4, v111);
        swift_errorRelease();
        goto LABEL_72;
      }
      sub_1000C9DB4((uint64_t)&v119 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.fault.getter();
    BOOL v86 = os_log_type_enabled(v84, v85);
    uint64_t v122 = a7;
    uint64_t v123 = a4;
    if (v86)
    {
      uint64_t v87 = swift_slowAlloc();
      uint64_t v88 = (void *)swift_slowAlloc();
      v130[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v87 = 136446466;
      uint64_t v89 = StaticString.description.getter();
      uint64_t v131 = sub_1000A2E70(v89, v90, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v87 + 12) = 2114;
      swift_errorRetain();
      uint64_t v91 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v131 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v88 = v91;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v87, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v124) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v124)
      {
LABEL_65:
        sub_10023C5AC(v40);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v106 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v106 - 8) + 8))(v123, v106);
LABEL_72:

        return swift_release();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v92 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v92 = 1;
    }
    if (!v92 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      uint64_t v124 = a10;
      uint64_t v95 = sub_10009EE78(&qword_100340F10);
      uint64_t v121 = &v119;
      __chkstk_darwin(v95 - 8);
      unint64_t v97 = (char *)&v119 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v98 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v97, 1, 1, v98);
      uint64_t v99 = type metadata accessor for Logger();
      uint64_t v120 = &v119;
      uint64_t v100 = *(void *)(v99 - 8);
      uint64_t v101 = *(void *)(v100 + 64);
      __chkstk_darwin(v99);
      (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))((char *)&v119 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0), v123, v99);
      unint64_t v102 = (*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
      uint64_t v103 = swift_allocObject();
      *(void *)(v103 + 16) = 0;
      *(void *)(v103 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v100 + 32))(v103 + v102, (char *)&v119 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0), v99);
      unint64_t v104 = v103 + ((v102 + v101 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v105 = v126;
      *(void *)unint64_t v104 = v125;
      *(void *)(v104 + 8) = v105;
      *(unsigned char *)(v104 + 16) = (_BYTE)v127;
      *(void *)(v103 + ((v102 + v101 + 31) & 0xFFFFFFFFFFFFFFF8)) = v40;
      swift_errorRetain();
      sub_1000A27A0((uint64_t)v97, v124, v103);
      swift_release();
    }
    goto LABEL_65;
  }
  swift_errorRelease();
  if (qword_10034B2B0)
  {
    uint64_t v83 = qword_10034B2B0;
  }
  else
  {
    sub_1000C51B4();
    uint64_t v83 = swift_allocError();
    *uint64_t v112 = 0;
  }
  swift_errorRetain();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v113 = Logger.logObject.getter();
  os_log_type_t v114 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v113, v114))
  {
    uint64_t v115 = (uint8_t *)swift_slowAlloc();
    uint64_t v127 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v115 = 138412290;
    swift_errorRetain();
    uint64_t v116 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v131 = v116;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v127 = v116;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v113, v114, "The preflight error %@ did not result in a TTR", v115, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10023C5AC(v83);
  swift_willThrow();
  swift_errorRelease();
  uint64_t v117 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v117 - 8) + 8))(a4, v117);
  swift_errorRelease();

  return swift_release();
}

uint64_t sub_1001201D8(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  return sub_100120228(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_100304FE0, (uint64_t)&unk_100343678, (void (*)(uint64_t))sub_1001BE348);
}

uint64_t sub_100120228(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t))
{
  uint64_t v123 = a8;
  v11 = v10;
  LODWORD(v124) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v127 = a1;
  uint64_t v128 = a2;
  os_log_type_t v18 = (os_activity_scope_state_s *)(sub_10010D0A4(a1, a2, a3) + 24);
  swift_beginAccess();
  v19 = swift_unknownObjectRetain();
  os_activity_scope_enter(v19, v18);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Checking for first unlock.", v22, 2u);
    v11 = v10;
    swift_slowDealloc();
  }

  int v126 = a3;
  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v38, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v23 = type metadata accessor for ScreenTimeFeatureFlags();
  v130[3] = v23;
  v130[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v24 = sub_1000C532C(v130);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v24, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v23);
  char v25 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v130);
  char v26 = Logger.logObject.getter();
  if ((v25 & 1) == 0)
  {
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v41))
    {
      uint64_t v125 = a7;
      os_log_type_t v42 = (uint8_t *)swift_slowAlloc();
      v130[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v42 = 136446210;
      uint64_t v43 = StaticString.description.getter();
      uint64_t v131 = sub_1000A2E70(v43, v44, v130);
      a7 = v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v41, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v39 = swift_allocError();
    *uint64_t v45 = 1;
    goto LABEL_23;
  }
  os_log_type_t v27 = static os_log_type_t.default.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  if (a5)
  {
    if (v28)
    {
      BOOL v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Starting preflight.", v29, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Preflight complete", v32, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "The preflight did not complete as expected.", v35, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v39 = swift_allocError();
      *uint64_t v40 = 0;
LABEL_23:
      swift_willThrow();
      goto LABEL_24;
    }
  }
  else
  {
    if (v28)
    {
      uint64_t v122 = a4;
      unint64_t v71 = (uint8_t *)swift_slowAlloc();
      uint64_t v121 = v11;
      v130[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v71 = 136446210;
      uint64_t v72 = StaticString.description.getter();
      uint64_t v131 = sub_1000A2E70(v72, v73, v130);
      a4 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s has opted out of preflight.", v71, 0xCu);
      swift_arrayDestroy();
      v11 = v121;
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  os_log_type_t v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v76 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v76 = 0;
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Starting the activity.", v76, 2u);
    swift_slowDealloc();
  }

  a10(a7);
  if (!v11)
  {
    uint64_t v106 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v106 - 8) + 8))(a4, v106);
    swift_release();
    return swift_release();
  }
  uint64_t v39 = (uint64_t)v11;
LABEL_24:
  swift_release();
  v130[0] = v39;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (v131 & 1) == 0)
  {
    swift_errorRelease();
    unint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      id v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v62, 2u);
      swift_slowDealloc();
    }

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    *uint64_t v63 = 0;
    swift_willThrow();
    goto LABEL_76;
  }
  swift_errorRelease();
  v130[0] = v39;
  uint64_t v46 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v47 = *(void *)(*(void *)(v46 - 8) + 64);
  __chkstk_darwin(v46);
  unint64_t v48 = (id *)((char *)v120 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_34:
    swift_errorRelease();
    v130[0] = v39;
    swift_errorRetain();
    if (!swift_dynamicCast() || (v129 & 1) != 0)
    {
      uint64_t v64 = swift_errorRelease();
      v130[0] = v39;
      __chkstk_darwin(v64);
      os_log_type_t v65 = (void *)((char *)v120 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
      swift_errorRetain();
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 22)
        {
          swift_errorRelease();
          uint64_t v67 = *v65;
          unint64_t v66 = v65[1];
          swift_bridgeObjectRetain_n();
          uint64_t v122 = a4;
          uint64_t v68 = Logger.logObject.getter();
          os_log_type_t v69 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v68, v69))
          {
            uint64_t v128 = v67;
            uint64_t v70 = (uint8_t *)swift_slowAlloc();
            uint64_t v131 = swift_slowAlloc();
            uint64_t v125 = a7;
            *(_DWORD *)uint64_t v70 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v129 = sub_1000A2E70(v128, v66, &v131);
            uint64_t v67 = v128;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v68, v69, "askForTime response handling did not find ask request identifier %s", v70, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }

          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          uint64_t *v109 = v67;
          v109[1] = v66;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          uint64_t v110 = type metadata accessor for Logger();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v122, v110);
          goto LABEL_77;
        }
        sub_1000C9DB4((uint64_t)v65);
      }
      swift_errorRelease();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v78 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.fault.getter();
      BOOL v80 = os_log_type_enabled(v78, v79);
      uint64_t v125 = a7;
      if (v80)
      {
        uint64_t v81 = swift_slowAlloc();
        BOOL v82 = (void *)swift_slowAlloc();
        v130[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v81 = 136446466;
        uint64_t v83 = StaticString.description.getter();
        uint64_t v122 = a4;
        uint64_t v131 = sub_1000A2E70(v83, v84, v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v81 + 12) = 2114;
        swift_errorRetain();
        uint64_t v85 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v131 = v85;
        a4 = v122;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *BOOL v82 = v85;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v81, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        if (v124) {
          goto LABEL_65;
        }
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        if (v124)
        {
LABEL_65:
          sub_10023C5AC(v39);
          swift_willThrow();
          swift_errorRelease();
          uint64_t v105 = type metadata accessor for Logger();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(a4, v105);
          return swift_release();
        }
      }
      if (&class metadata base offset for TapToRadarService) {
        BOOL v86 = &type metadata accessor for TapToRadarService == 0;
      }
      else {
        BOOL v86 = 1;
      }
      if (!v86 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
      {
        uint64_t v122 = a9;
        uint64_t v89 = sub_10009EE78(&qword_100340F10);
        uint64_t v124 = v120;
        __chkstk_darwin(v89 - 8);
        uint64_t v91 = (char *)v120 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v121 = v91;
        uint64_t v92 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v91, 1, 1, v92);
        uint64_t v93 = type metadata accessor for Logger();
        v120[1] = v120;
        uint64_t v94 = *(void *)(v93 - 8);
        uint64_t v95 = *(void *)(v94 + 64);
        __chkstk_darwin(v93);
        uint64_t v96 = (char *)v120 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v96, a4, v93);
        uint64_t v97 = a4;
        unint64_t v98 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
        unint64_t v99 = (v98 + v95 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v100 = (v98 + v95 + 31) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v101 = swift_allocObject();
        unint64_t v102 = v101 + v98;
        a4 = v97;
        *(void *)(v101 + 16) = 0;
        *(void *)(v101 + 24) = 0;
        (*(void (**)(unint64_t, char *, uint64_t))(v94 + 32))(v102, v96, v93);
        unint64_t v103 = v101 + v99;
        uint64_t v104 = v128;
        *(void *)unint64_t v103 = v127;
        *(void *)(v103 + 8) = v104;
        *(unsigned char *)(v103 + 16) = v126;
        *(void *)(v101 + v100) = v39;
        swift_errorRetain();
        sub_1000A27A0((uint64_t)v121, v122, v101);
        swift_release();
      }
      goto LABEL_65;
    }
    swift_errorRelease();
    if (qword_10034B2B0)
    {
      uint64_t v77 = qword_10034B2B0;
    }
    else
    {
      sub_1000C51B4();
      uint64_t v77 = swift_allocError();
      unsigned char *v111 = 0;
    }
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v112 = Logger.logObject.getter();
    os_log_type_t v113 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v112, v113))
    {
      os_log_type_t v114 = (uint8_t *)swift_slowAlloc();
      uint64_t v115 = swift_slowAlloc();
      uint64_t v122 = a4;
      uint64_t v116 = (void *)v115;
      *(_DWORD *)os_log_type_t v114 = 138412290;
      swift_errorRetain();
      uint64_t v117 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v131 = v117;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v116 = v117;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v112, v113, "The preflight error %@ did not result in a TTR", v114, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      a4 = v122;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    sub_10023C5AC(v77);
    swift_willThrow();
    swift_errorRelease();
LABEL_76:
    uint64_t v118 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v118 - 8) + 8))(a4, v118);
LABEL_77:
    swift_errorRelease();
    return swift_release();
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v120 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
    goto LABEL_34;
  }
  uint64_t v125 = a7;
  swift_errorRelease();
  uint64_t v49 = *v48;
  id v50 = *v48;
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = swift_slowAlloc();
    uint64_t v124 = v49;
    uint64_t v54 = v53;
    uint64_t v121 = (void *)swift_slowAlloc();
    uint64_t v123 = swift_slowAlloc();
    uint64_t v131 = v123;
    *(_DWORD *)uint64_t v54 = 136446466;
    uint64_t v55 = StaticString.description.getter();
    uint64_t v129 = sub_1000A2E70(v55, v56, &v131);
    uint64_t v122 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v54 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    *os_log_type_t v57 = v124;
    swift_storeEnumTagMultiPayload();
    id v58 = v50;
    uint64_t v59 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v129 = v59;
    a4 = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v121 = v59;

    _os_log_impl((void *)&_mh_execute_header, v51, v52, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v54, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v49 = v124;
    swift_slowDealloc();
  }
  else
  {
  }
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *uint64_t v107 = v49;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v108 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v108 - 8) + 8))(a4, v108);
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_1001216D0(char *a1, uint64_t a2, int a3, char *a4, char a5, int a6, uint64_t a7)
{
  LODWORD(v126) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v127 = a1;
  uint64_t v128 = a2;
  LODWORD(v129) = a3;
  v13 = sub_10010D0A4(a1, a2, a3);
  swift_beginAccess();
  id v14 = swift_unknownObjectRetain();
  os_activity_scope_enter(v14, (os_activity_scope_state_t)(v13 + 24));
  swift_endAccess();
  swift_unknownObjectRelease();
  v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Checking for first unlock.", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v130 = a7;
  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v33, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v18 = type metadata accessor for ScreenTimeFeatureFlags();
  v132[3] = v18;
  v132[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  v19 = sub_1000C532C(v132);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v19, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v18);
  char v20 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v132);
  os_log_type_t v21 = Logger.logObject.getter();
  if ((v20 & 1) == 0)
  {
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v37))
    {
      os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
      v132[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v38 = 136446210;
      uint64_t v39 = StaticString.description.getter();
      uint64_t v133 = sub_1000A2E70(v39, v40, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v37, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v35 = swift_allocError();
    char v36 = 1;
    goto LABEL_23;
  }
  os_log_type_t v22 = static os_log_type_t.default.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v125 = a4;
  if ((a5 & 1) == 0)
  {
    if (v23)
    {
      os_log_type_t v61 = (uint8_t *)swift_slowAlloc();
      v132[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v61 = 136446210;
      uint64_t v62 = StaticString.description.getter();
      uint64_t v133 = sub_1000A2E70(v62, v63, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s has opted out of preflight.", v61, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    goto LABEL_35;
  }
  if (v23)
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Starting preflight.", v24, 2u);
    swift_slowDealloc();
  }

  if (qword_100340D70 != -1) {
    swift_once();
  }
  char v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Preflight complete", v27, 2u);
    swift_slowDealloc();
  }

  if (byte_10034B308)
  {
LABEL_35:
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      unint64_t v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Starting the activity.", v66, 2u);
      swift_slowDealloc();
    }

    uint64_t v67 = type metadata accessor for Logger();
    uint64_t v68 = *(void *)(v67 - 8);
    __chkstk_darwin(v67);
    uint64_t v70 = (char *)&v122 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_1001B0858((uint64_t)v70);
    unint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v71, v72))
    {
      unint64_t v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Apply Introduction Model.. NOT IMPLEMENTED", v73, 2u);
      swift_slowDealloc();
    }

    os_log_type_t v74 = *(void (**)(char *, uint64_t))(v68 + 8);
    v74(v70, v67);
    v74(v125, v67);
    swift_release();
    return swift_release();
  }
  BOOL v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "The preflight did not complete as expected.", v30, 2u);
    swift_slowDealloc();
  }

  sub_1000C51B4();
LABEL_19:
  uint64_t v35 = swift_allocError();
  char v36 = 0;
LABEL_23:
  char *v34 = v36;
  swift_willThrow();
  swift_release();
  v132[0] = v35;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (v133 & 1) == 0)
  {
    swift_errorRelease();
    unint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      id v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v58, 2u);
      swift_slowDealloc();
    }

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    *uint64_t v59 = 0;
    swift_willThrow();
    uint64_t v60 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t))(*(void *)(v60 - 8) + 8))(a4, v60);
    goto LABEL_70;
  }
  swift_errorRelease();
  v132[0] = v35;
  uint64_t v41 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v42 = *(void *)(*(void *)(v41 - 8) + 64);
  __chkstk_darwin(v41);
  uint64_t v43 = (id *)((char *)&v122 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    if (swift_getEnumCaseMultiPayload() == 37)
    {
      swift_errorRelease();
      id v44 = *v43;
      id v45 = *v43;
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.fault.getter();
      int v48 = v47;
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v49 = swift_slowAlloc();
        LODWORD(v124) = v48;
        uint64_t v50 = v49;
        uint64_t v123 = (uint64_t *)swift_slowAlloc();
        uint64_t v126 = swift_slowAlloc();
        uint64_t v133 = v126;
        *(_DWORD *)uint64_t v50 = 136446466;
        uint64_t v51 = StaticString.description.getter();
        uint64_t v125 = a4;
        uint64_t v131 = sub_1000A2E70(v51, v52, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v50 + 12) = 2114;
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v53 = v44;
        swift_storeEnumTagMultiPayload();
        id v54 = v45;
        uint64_t v55 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v131 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t *v123 = v55;
        a4 = v125;

        _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v124, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v50, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
      swift_allocError();
      void *v109 = v44;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      uint64_t v110 = type metadata accessor for Logger();
      (*(void (**)(char *, uint64_t))(*(void *)(v110 - 8) + 8))(a4, v110);
LABEL_70:
      swift_errorRelease();
      return swift_release();
    }
    sub_1000C9DB4((uint64_t)&v122 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  }
  swift_errorRelease();
  v132[0] = v35;
  swift_errorRetain();
  if (!swift_dynamicCast() || (v131 & 1) != 0)
  {
    uint64_t v75 = swift_errorRelease();
    v132[0] = v35;
    __chkstk_darwin(v75);
    uint64_t v76 = (uint64_t *)((char *)&v122 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v78 = *v76;
        unint64_t v77 = v76[1];
        swift_bridgeObjectRetain_n();
        uint64_t v125 = a4;
        os_log_type_t v79 = Logger.logObject.getter();
        os_log_type_t v80 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v79, v80))
        {
          uint64_t v129 = v78;
          uint64_t v81 = (uint8_t *)swift_slowAlloc();
          uint64_t v133 = swift_slowAlloc();
          *(_DWORD *)uint64_t v81 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v131 = sub_1000A2E70(v129, v77, &v133);
          uint64_t v78 = v129;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v79, v80, "askForTime response handling did not find ask request identifier %s", v81, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        uint64_t *v111 = v78;
        v111[1] = v77;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v112 = type metadata accessor for Logger();
        (*(void (**)(char *, uint64_t))(*(void *)(v112 - 8) + 8))(v125, v112);
        goto LABEL_70;
      }
      sub_1000C9DB4((uint64_t)&v122 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = swift_slowAlloc();
      BOOL v86 = (void *)swift_slowAlloc();
      v132[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v85 = 136446466;
      uint64_t v87 = StaticString.description.getter();
      uint64_t v125 = a4;
      uint64_t v133 = sub_1000A2E70(v87, v88, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v85 + 12) = 2114;
      swift_errorRetain();
      uint64_t v89 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v133 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v86 = v89;
      a4 = v125;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v85, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v126) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v126)
      {
LABEL_65:
        sub_10023C5AC(v35);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v108 = type metadata accessor for Logger();
        (*(void (**)(char *, uint64_t))(*(void *)(v108 - 8) + 8))(a4, v108);
        return swift_release();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v90 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v90 = 1;
    }
    if (!v90 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      uint64_t v93 = sub_10009EE78(&qword_100340F10);
      uint64_t v126 = (uint64_t)&v122;
      __chkstk_darwin(v93 - 8);
      uint64_t v95 = (char *)&v122 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v124 = v95;
      uint64_t v96 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v95, 1, 1, v96);
      uint64_t v97 = type metadata accessor for Logger();
      uint64_t v123 = &v122;
      uint64_t v98 = *(void *)(v97 - 8);
      uint64_t v99 = *(void *)(v98 + 64);
      __chkstk_darwin(v97);
      unint64_t v100 = (char *)&v122 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v100, a4, v97);
      unint64_t v101 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
      unint64_t v102 = a4;
      unint64_t v103 = (v101 + v99 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v104 = (v101 + v99 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v105 = swift_allocObject();
      *(void *)(v105 + 16) = 0;
      *(void *)(v105 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v98 + 32))(v105 + v101, v100, v97);
      unint64_t v106 = v105 + v103;
      a4 = v102;
      uint64_t v107 = v128;
      *(void *)unint64_t v106 = v127;
      *(void *)(v106 + 8) = v107;
      *(unsigned char *)(v106 + 16) = v129;
      *(void *)(v105 + v104) = v35;
      swift_errorRetain();
      sub_1000A27A0((uint64_t)v124, (uint64_t)&unk_100343668, v105);
      swift_release();
    }
    goto LABEL_65;
  }
  swift_errorRelease();
  if (qword_10034B2B0)
  {
    uint64_t v82 = qword_10034B2B0;
  }
  else
  {
    sub_1000C51B4();
    uint64_t v82 = swift_allocError();
    unsigned char *v114 = 0;
  }
  swift_errorRetain();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v115 = Logger.logObject.getter();
  os_log_type_t v116 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v115, v116))
  {
    uint64_t v117 = (uint8_t *)swift_slowAlloc();
    uint64_t v118 = a4;
    uint64_t v119 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v117 = 138412290;
    swift_errorRetain();
    uint64_t v120 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v133 = v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v119 = v120;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v115, v116, "The preflight error %@ did not result in a TTR", v117, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    a4 = v118;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10023C5AC(v82);
  swift_willThrow();
  swift_errorRelease();
  uint64_t v121 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t))(*(void *)(v121 - 8) + 8))(a4, v121);
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_100122C7C(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  return sub_100122D2C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&unk_100304D60, (uint64_t)&unk_100343568, (void (*)(uint64_t, uint64_t *, uint64_t, uint64_t))sub_1001C39AC);
}

uint64_t sub_100122CD4(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  return sub_100122D2C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&unk_100304D38, (uint64_t)&unk_100343560, (void (*)(uint64_t, uint64_t *, uint64_t, uint64_t))sub_1001C3E5C);
}

uint64_t sub_100122D2C(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t, uint64_t *, uint64_t, uint64_t))
{
  uint64_t v115 = a8;
  uint64_t v122 = a7;
  LODWORD(v117) = a6;
  uint64_t v18 = a9;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v118 = a1;
  uint64_t v119 = a2;
  LODWORD(v120) = a3;
  v19 = (os_activity_scope_state_s *)(sub_10010D0A4(a1, a2, a3) + 24);
  swift_beginAccess();
  char v20 = swift_unknownObjectRetain();
  os_activity_scope_enter(v20, v19);
  swift_endAccess();
  swift_unknownObjectRelease();
  os_log_type_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  uint64_t v123 = a4;
  if (os_log_type_enabled(v21, v22))
  {
    BOOL v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Checking for first unlock.", v23, 2u);
    a4 = v123;
    swift_slowDealloc();
  }

  uint64_t v121 = a9;
  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v39, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v24 = type metadata accessor for ScreenTimeFeatureFlags();
  v125[3] = v24;
  v125[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  char v25 = sub_1000C532C(v125);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v25, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v24);
  char v26 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v125);
  os_log_type_t v27 = Logger.logObject.getter();
  if ((v26 & 1) == 0)
  {
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      v125[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136446210;
      uint64_t v44 = StaticString.description.getter();
      uint64_t v126 = sub_1000A2E70(v44, v45, v125);
      a4 = v123;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v42, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v40 = swift_allocError();
    *uint64_t v46 = 1;
    goto LABEL_23;
  }
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  if (a5)
  {
    if (v29)
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Starting preflight.", v30, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Preflight complete", v33, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        char v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "The preflight did not complete as expected.", v36, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v40 = swift_allocError();
      unsigned char *v41 = 0;
LABEL_23:
      swift_willThrow();
      goto LABEL_24;
    }
  }
  else
  {
    if (v29)
    {
      os_log_type_t v72 = (uint8_t *)swift_slowAlloc();
      v125[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v72 = 136446210;
      uint64_t v73 = StaticString.description.getter();
      uint64_t v126 = sub_1000A2E70(v73, v74, v125);
      uint64_t v18 = v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s has opted out of preflight.", v72, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v75, v76))
  {
    unint64_t v77 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v77 = 0;
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "Starting the activity.", v77, 2u);
    swift_slowDealloc();
  }

  a13(v122, v115, v18, a10);
  if (!v116)
  {
    uint64_t v101 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v101 - 8) + 8))(v123, v101);
    swift_release();
    goto LABEL_77;
  }
  uint64_t v40 = (uint64_t)v116;
  a4 = v123;
LABEL_24:
  swift_release();
  v125[0] = v40;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (v126 & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v62, 2u);
      swift_slowDealloc();
    }

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    *unint64_t v63 = 0;
    swift_willThrow();
    uint64_t v64 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v64 - 8) + 8))(a4, v64);
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    v125[0] = v40;
    uint64_t v47 = type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v48 = *(void *)(*(void *)(v47 - 8) + 64);
    __chkstk_darwin(v47);
    uint64_t v49 = (id *)((char *)&v114 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v50 = *v49;
        id v51 = *v49;
        unint64_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v52, v53))
        {
          uint64_t v54 = swift_slowAlloc();
          uint64_t v115 = (uint64_t *)swift_slowAlloc();
          os_log_type_t v116 = (uint64_t *)swift_slowAlloc();
          uint64_t v126 = (uint64_t)v116;
          *(_DWORD *)uint64_t v54 = 136446466;
          uint64_t v117 = (uint64_t)v50;
          uint64_t v55 = StaticString.description.getter();
          uint64_t v124 = sub_1000A2E70(v55, v56, &v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v54 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *os_log_type_t v57 = v117;
          swift_storeEnumTagMultiPayload();
          id v58 = v51;
          uint64_t v59 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v124 = v59;
          id v50 = (id)v117;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v115 = v59;

          _os_log_impl((void *)&_mh_execute_header, v52, v53, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v54, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v102 = v50;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v103 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8))(v123, v103);
        swift_errorRelease();
        goto LABEL_77;
      }
      sub_1000C9DB4((uint64_t)&v114 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    swift_errorRelease();
    v125[0] = v40;
    swift_errorRetain();
    if (swift_dynamicCast() && (v124 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v78 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v78 = swift_allocError();
        unsigned char *v106 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v107 = Logger.logObject.getter();
      os_log_type_t v108 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = (uint8_t *)swift_slowAlloc();
        uint64_t v110 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v109 = 138412290;
        swift_errorRetain();
        uint64_t v111 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v126 = v111;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v110 = v111;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v107, v108, "The preflight error %@ did not result in a TTR", v109, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        a4 = v123;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      sub_10023C5AC(v78);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v112 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v112 - 8) + 8))(a4, v112);
      goto LABEL_76;
    }
    uint64_t v65 = swift_errorRelease();
    v125[0] = v40;
    __chkstk_darwin(v65);
    unint64_t v66 = (uint64_t *)((char *)&v114 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v68 = *v66;
        unint64_t v67 = v66[1];
        swift_bridgeObjectRetain_n();
        uint64_t v69 = Logger.logObject.getter();
        os_log_type_t v70 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v69, v70))
        {
          unint64_t v71 = (uint8_t *)swift_slowAlloc();
          uint64_t v126 = swift_slowAlloc();
          *(_DWORD *)unint64_t v71 = 136315138;
          uint64_t v120 = v71 + 4;
          swift_bridgeObjectRetain();
          uint64_t v124 = sub_1000A2E70(v68, v67, &v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "askForTime response handling did not find ask request identifier %s", v71, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        uint64_t *v104 = v68;
        v104[1] = v67;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v105 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(v123, v105);
LABEL_76:
        swift_errorRelease();
        goto LABEL_77;
      }
      sub_1000C9DB4((uint64_t)&v114 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v79, v80))
    {
      uint64_t v81 = swift_slowAlloc();
      uint64_t v82 = (void *)swift_slowAlloc();
      v125[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v81 = 136446466;
      uint64_t v83 = StaticString.description.getter();
      uint64_t v126 = sub_1000A2E70(v83, v84, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v81 + 12) = 2114;
      swift_errorRetain();
      uint64_t v85 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v126 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v82 = v85;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v81, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    if ((v117 & 1) == 0)
    {
      BOOL v86 = !&class metadata base offset for TapToRadarService || &type metadata accessor for TapToRadarService == 0;
      BOOL v87 = v86 || &type metadata for TapToRadarService == 0;
      if (!v87 && &nominal type descriptor for TapToRadarService != 0)
      {
        uint64_t v117 = a12;
        uint64_t v89 = sub_10009EE78(&qword_100340F10);
        os_log_type_t v116 = &v114;
        __chkstk_darwin(v89 - 8);
        uint64_t v91 = (char *)&v114 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v92 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v91, 1, 1, v92);
        uint64_t v93 = type metadata accessor for Logger();
        uint64_t v115 = &v114;
        uint64_t v94 = *(void *)(v93 - 8);
        uint64_t v95 = *(void *)(v94 + 64);
        __chkstk_darwin(v93);
        (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))((char *)&v114 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0), v123, v93);
        unint64_t v96 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
        uint64_t v97 = swift_allocObject();
        *(void *)(v97 + 16) = 0;
        *(void *)(v97 + 24) = 0;
        (*(void (**)(unint64_t, char *, uint64_t))(v94 + 32))(v97 + v96, (char *)&v114 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0), v93);
        unint64_t v98 = v97 + ((v96 + v95 + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v99 = v119;
        *(void *)unint64_t v98 = v118;
        *(void *)(v98 + 8) = v99;
        *(unsigned char *)(v98 + 16) = (_BYTE)v120;
        *(void *)(v97 + ((v96 + v95 + 31) & 0xFFFFFFFFFFFFFFF8)) = v40;
        swift_errorRetain();
        sub_1000A27A0((uint64_t)v91, v117, v97);
        swift_release();
      }
    }
    sub_10023C5AC(v40);
    swift_willThrow();
    swift_errorRelease();
    uint64_t v100 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8))(v123, v100);
  }
LABEL_77:
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1001241E8(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  return sub_100122D2C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&unk_100304D10, (uint64_t)&unk_100343558, (void (*)(uint64_t, uint64_t *, uint64_t, uint64_t))sub_1001C499C);
}

void sub_100124240(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, void *a7)
{
  v8 = v7;
  LODWORD(v121) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v123 = a1;
  uint64_t v124 = a2;
  v15 = (os_activity_scope_state_s *)(sub_10010D0A4(a1, a2, a3) + 24);
  swift_beginAccess();
  os_log_type_t v16 = swift_unknownObjectRetain();
  os_activity_scope_enter(v16, v15);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Checking for first unlock.", v19, 2u);
    v8 = v7;
    swift_slowDealloc();
  }

  int v122 = a3;
  if (!MKBUserUnlockedSinceBoot())
  {
    v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v35, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v20 = type metadata accessor for ScreenTimeFeatureFlags();
  v126[3] = v20;
  v126[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  os_log_type_t v21 = sub_1000C532C(v126);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v21, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v20);
  char v22 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v126);
  BOOL v23 = Logger.logObject.getter();
  if ((v22 & 1) == 0)
  {
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v38))
    {
      uint64_t v120 = (char *)a4;
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      v126[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136446210;
      uint64_t v40 = StaticString.description.getter();
      uint64_t v127 = sub_1000A2E70(v40, v41, v126);
      a4 = (uint64_t)v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v38, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v36 = swift_allocError();
    *os_log_type_t v42 = 1;
    goto LABEL_23;
  }
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  if (a5)
  {
    if (v25)
    {
      char v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Starting preflight.", v26, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      BOOL v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Preflight complete", v29, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "The preflight did not complete as expected.", v32, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v36 = swift_allocError();
      unsigned char *v37 = 0;
LABEL_23:
      swift_willThrow();
      goto LABEL_24;
    }
  }
  else
  {
    if (v25)
    {
      uint64_t v120 = (char *)a4;
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      uint64_t v118 = v8;
      v126[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v69 = 136446210;
      uint64_t v70 = StaticString.description.getter();
      uint64_t v127 = sub_1000A2E70(v70, v71, v126);
      a4 = (uint64_t)v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s has opted out of preflight.", v69, 0xCu);
      swift_arrayDestroy();
      v8 = v118;
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  os_log_type_t v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v72, v73))
  {
    unint64_t v74 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v74 = 0;
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "Starting the activity.", v74, 2u);
    swift_slowDealloc();
  }

  sub_10021A4FC();
  if (!v8)
  {
    uint64_t v103 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8))(a4, v103);
    swift_release();
    goto LABEL_78;
  }
  uint64_t v36 = (uint64_t)v8;
LABEL_24:
  swift_release();
  v126[0] = v36;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (v127 & 1) == 0)
  {
    swift_errorRelease();
    os_log_type_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v59, 2u);
      swift_slowDealloc();
    }

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    unsigned char *v60 = 0;
    swift_willThrow();
    goto LABEL_76;
  }
  swift_errorRelease();
  v126[0] = v36;
  uint64_t v43 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v44 = *(void *)(*(void *)(v43 - 8) + 64);
  __chkstk_darwin(v43);
  unint64_t v45 = (id *)((char *)&v116 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    if (swift_getEnumCaseMultiPayload() == 37)
    {
      swift_errorRelease();
      uint64_t v46 = (uint64_t *)*v45;
      id v47 = *v45;
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = swift_slowAlloc();
        uint64_t v121 = v46;
        uint64_t v51 = v50;
        uint64_t v117 = (void *)swift_slowAlloc();
        uint64_t v118 = (uint64_t *)swift_slowAlloc();
        uint64_t v127 = (uint64_t)v118;
        *(_DWORD *)uint64_t v51 = 136446466;
        uint64_t v119 = a7;
        uint64_t v52 = StaticString.description.getter();
        uint64_t v125 = sub_1000A2E70(v52, v53, &v127);
        uint64_t v120 = (char *)a4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v51 + 12) = 2114;
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v54 = v121;
        swift_storeEnumTagMultiPayload();
        id v55 = v47;
        uint64_t v56 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v125 = v56;
        a4 = (uint64_t)v120;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v117 = v56;
        a7 = v119;

        _os_log_impl((void *)&_mh_execute_header, v48, v49, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v51, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v46 = v121;
        swift_slowDealloc();
      }
      else
      {
      }
      sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
      swift_allocError();
      uint64_t *v104 = v46;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      uint64_t v105 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(a4, v105);
      goto LABEL_77;
    }
    sub_1000C9DB4((uint64_t)&v116 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  }
  swift_errorRelease();
  v126[0] = v36;
  swift_errorRetain();
  if (swift_dynamicCast() && (v125 & 1) == 0)
  {
    swift_errorRelease();
    if (qword_10034B2B0)
    {
      uint64_t v75 = qword_10034B2B0;
    }
    else
    {
      sub_1000C51B4();
      uint64_t v75 = swift_allocError();
      unsigned char *v108 = 0;
    }
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v109 = Logger.logObject.getter();
    os_log_type_t v110 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v109, v110))
    {
      uint64_t v111 = (uint8_t *)swift_slowAlloc();
      uint64_t v112 = swift_slowAlloc();
      uint64_t v120 = (char *)a4;
      os_log_type_t v113 = (void *)v112;
      *(_DWORD *)uint64_t v111 = 138412290;
      swift_errorRetain();
      uint64_t v114 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v127 = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v113 = v114;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "The preflight error %@ did not result in a TTR", v111, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      a4 = (uint64_t)v120;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    sub_10023C5AC(v75);
    swift_willThrow();
    swift_errorRelease();
LABEL_76:
    uint64_t v115 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v115 - 8) + 8))(a4, v115);
LABEL_77:
    swift_errorRelease();
    goto LABEL_78;
  }
  uint64_t v61 = swift_errorRelease();
  v126[0] = v36;
  __chkstk_darwin(v61);
  uint64_t v62 = (uint64_t *)((char *)&v116 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    if (swift_getEnumCaseMultiPayload() == 22)
    {
      swift_errorRelease();
      uint64_t v64 = *v62;
      unint64_t v63 = v62[1];
      swift_bridgeObjectRetain_n();
      uint64_t v120 = (char *)a4;
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v124 = v64;
        unint64_t v67 = (uint8_t *)swift_slowAlloc();
        uint64_t v68 = swift_slowAlloc();
        uint64_t v119 = a7;
        uint64_t v127 = v68;
        *(_DWORD *)unint64_t v67 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v125 = sub_1000A2E70(v124, v63, &v127);
        uint64_t v64 = v124;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "askForTime response handling did not find ask request identifier %s", v67, 0xCu);
        swift_arrayDestroy();
        a7 = v119;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
      swift_allocError();
      uint64_t *v106 = v64;
      v106[1] = v63;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      uint64_t v107 = type metadata accessor for Logger();
      (*(void (**)(char *, uint64_t))(*(void *)(v107 - 8) + 8))(v120, v107);
      goto LABEL_77;
    }
    sub_1000C9DB4((uint64_t)v62);
  }
  swift_errorRelease();
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v76 = Logger.logObject.getter();
  os_log_type_t v77 = static os_log_type_t.fault.getter();
  BOOL v78 = os_log_type_enabled(v76, v77);
  uint64_t v119 = a7;
  if (v78)
  {
    uint64_t v79 = swift_slowAlloc();
    os_log_type_t v80 = (void *)swift_slowAlloc();
    v126[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v79 = 136446466;
    uint64_t v81 = StaticString.description.getter();
    uint64_t v120 = (char *)a4;
    uint64_t v127 = sub_1000A2E70(v81, v82, v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v79 + 12) = 2114;
    swift_errorRetain();
    uint64_t v83 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v127 = v83;
    a4 = (uint64_t)v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v80 = v83;
    a7 = v119;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v79, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (v121) {
      goto LABEL_65;
    }
LABEL_54:
    if (&class metadata base offset for TapToRadarService) {
      BOOL v84 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v84 = 1;
    }
    if (!v84 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      uint64_t v87 = sub_10009EE78(&qword_100340F10);
      uint64_t v121 = &v116;
      __chkstk_darwin(v87 - 8);
      uint64_t v89 = (char *)&v116 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v120 = v89;
      uint64_t v90 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v89, 1, 1, v90);
      uint64_t v91 = type metadata accessor for Logger();
      uint64_t v118 = &v116;
      uint64_t v92 = *(void *)(v91 - 8);
      uint64_t v93 = *(void *)(v92 + 64);
      __chkstk_darwin(v91);
      uint64_t v94 = (char *)&v116 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v94, a4, v91);
      unint64_t v95 = (*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
      unint64_t v96 = (v95 + v93 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v97 = a4;
      unint64_t v98 = (v95 + v93 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v99 = swift_allocObject();
      *(void *)(v99 + 16) = 0;
      *(void *)(v99 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v92 + 32))(v99 + v95, v94, v91);
      unint64_t v100 = v99 + v96;
      uint64_t v101 = v124;
      *(void *)unint64_t v100 = v123;
      *(void *)(v100 + 8) = v101;
      *(unsigned char *)(v100 + 16) = v122;
      *(void *)(v99 + v98) = v36;
      a4 = v97;
      a7 = v119;
      swift_errorRetain();
      sub_1000A27A0((uint64_t)v120, (uint64_t)&unk_100343538, v99);
      swift_release();
    }
    goto LABEL_65;
  }

  swift_errorRelease();
  swift_errorRelease();
  if ((v121 & 1) == 0) {
    goto LABEL_54;
  }
LABEL_65:
  sub_10023C5AC(v36);
  swift_willThrow();
  swift_errorRelease();
  uint64_t v102 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(a4, v102);
LABEL_78:
}

void sub_1001256CC(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, void *a7, uint64_t a8)
{
}

void sub_10012571C(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, void *a7, uint64_t a8)
{
}

void sub_10012576C(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void *, uint64_t))
{
  v12 = v11;
  uint64_t v130 = a8;
  LODWORD(v126) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v127 = a1;
  uint64_t v128 = a2;
  LODWORD(v129) = a3;
  v19 = sub_10010D0A4(a1, a2, a3);
  swift_beginAccess();
  uint64_t v20 = swift_unknownObjectRetain();
  os_activity_scope_enter(v20, (os_activity_scope_state_t)(v19 + 24));
  swift_endAccess();
  swift_unknownObjectRelease();
  os_log_type_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    BOOL v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Checking for first unlock.", v23, 2u);
    v12 = v11;
    swift_slowDealloc();
  }

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v39, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v24 = type metadata accessor for ScreenTimeFeatureFlags();
  v132[3] = v24;
  v132[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  BOOL v25 = sub_1000C532C(v132);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v25, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v24);
  char v26 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v132);
  os_log_type_t v27 = Logger.logObject.getter();
  if ((v26 & 1) == 0)
  {
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      v132[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136446210;
      uint64_t v123 = (uint64_t *)(v43 + 4);
      uint64_t v44 = StaticString.description.getter();
      uint64_t v45 = a4;
      uint64_t v46 = a7;
      uint64_t v47 = v45;
      uint64_t v133 = sub_1000A2E70(v44, v48, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v49 = v47;
      a7 = v46;
      a4 = v49;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v42, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v40 = swift_allocError();
    unsigned char *v50 = 1;
    goto LABEL_23;
  }
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  if (a5)
  {
    if (v29)
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Starting preflight.", v30, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Preflight complete", v33, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "The preflight did not complete as expected.", v36, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v40 = swift_allocError();
      unsigned char *v41 = 0;
LABEL_23:
      swift_willThrow();
      goto LABEL_24;
    }
  }
  else
  {
    if (v29)
    {
      uint64_t v123 = (uint64_t *)v19;
      BOOL v78 = (uint8_t *)swift_slowAlloc();
      int v122 = v12;
      v132[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v78 = 136446210;
      uint64_t v79 = StaticString.description.getter();
      uint64_t v133 = sub_1000A2E70(v79, v80, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s has opted out of preflight.", v78, 0xCu);
      swift_arrayDestroy();
      v12 = v122;
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v81 = Logger.logObject.getter();
  os_log_type_t v82 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v81, v82))
  {
    uint64_t v83 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v83 = 0;
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "Starting the activity.", v83, 2u);
    swift_slowDealloc();
  }

  a11(a7, v130);
  if (!v12)
  {
    uint64_t v108 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v108 - 8) + 8))(a4, v108);
    swift_release();
LABEL_67:
    swift_unknownObjectRelease();

    return;
  }
  uint64_t v40 = (uint64_t)v12;
LABEL_24:
  swift_release();
  v132[0] = v40;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (v133 & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      unint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v67, 2u);
      swift_slowDealloc();
    }

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    unsigned char *v68 = 0;
    swift_willThrow();
    uint64_t v69 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(a4, v69);
    swift_errorRelease();
    goto LABEL_67;
  }
  id v51 = a7;
  swift_errorRelease();
  v132[0] = v40;
  uint64_t v52 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v53 = *(void *)(*(void *)(v52 - 8) + 64);
  __chkstk_darwin(v52);
  uint64_t v54 = (id *)((char *)&v121 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    if (swift_getEnumCaseMultiPayload() == 37)
    {
      id v124 = a7;
      swift_errorRelease();
      id v55 = *v54;
      id v56 = *v54;
      uint64_t v125 = a4;
      os_log_type_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = swift_slowAlloc();
        int v122 = (uint64_t *)swift_slowAlloc();
        uint64_t v123 = (uint64_t *)swift_slowAlloc();
        uint64_t v133 = (uint64_t)v123;
        *(_DWORD *)uint64_t v59 = 136446466;
        uint64_t v126 = (uint64_t)v55;
        uint64_t v60 = StaticString.description.getter();
        uint64_t v131 = sub_1000A2E70(v60, v61, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v59 + 12) = 2114;
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v62 = v126;
        swift_storeEnumTagMultiPayload();
        id v63 = v56;
        uint64_t v64 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v131 = v64;
        id v55 = (id)v126;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *int v122 = v64;

        _os_log_impl((void *)&_mh_execute_header, v57, v58, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v59, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
      swift_allocError();
      void *v109 = v55;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      uint64_t v110 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v125, v110);
      swift_errorRelease();
      swift_unknownObjectRelease();

      return;
    }
    sub_1000C9DB4((uint64_t)&v121 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  }
  swift_errorRelease();
  v132[0] = v40;
  swift_errorRetain();
  if (!swift_dynamicCast() || (v131 & 1) != 0)
  {
    uint64_t v70 = swift_errorRelease();
    v132[0] = v40;
    __chkstk_darwin(v70);
    unint64_t v71 = (uint64_t *)((char *)&v121 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        os_log_type_t v73 = (void *)*v71;
        unint64_t v72 = v71[1];
        swift_bridgeObjectRetain_n();
        unint64_t v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v74, v75))
        {
          os_log_type_t v76 = (uint8_t *)swift_slowAlloc();
          uint64_t v77 = swift_slowAlloc();
          uint64_t v129 = v73;
          uint64_t v133 = v77;
          id v124 = a7;
          uint64_t v125 = a4;
          *(_DWORD *)os_log_type_t v76 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v131 = sub_1000A2E70((uint64_t)v129, v72, &v133);
          id v51 = v124;
          a4 = v125;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v74, v75, "askForTime response handling did not find ask request identifier %s", v76, 0xCu);
          swift_arrayDestroy();
          os_log_type_t v73 = v129;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v111 = v73;
        v111[1] = v72;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v112 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v112 - 8) + 8))(a4, v112);
        swift_errorRelease();
        goto LABEL_72;
      }
      sub_1000C9DB4((uint64_t)&v121 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v85 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.fault.getter();
    BOOL v87 = os_log_type_enabled(v85, v86);
    id v124 = a7;
    uint64_t v125 = a4;
    if (v87)
    {
      uint64_t v88 = swift_slowAlloc();
      uint64_t v89 = (void *)swift_slowAlloc();
      v132[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v88 = 136446466;
      uint64_t v90 = StaticString.description.getter();
      uint64_t v133 = sub_1000A2E70(v90, v91, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v88 + 12) = 2114;
      swift_errorRetain();
      uint64_t v92 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v133 = v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v89 = v92;
      id v51 = v124;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v88, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v126) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v126)
      {
LABEL_65:
        sub_10023C5AC(v40);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v107 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 8))(v125, v107);
LABEL_72:
        swift_unknownObjectRelease();

        return;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v93 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v93 = 1;
    }
    if (!v93 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      uint64_t v126 = a10;
      uint64_t v96 = sub_10009EE78(&qword_100340F10);
      uint64_t v123 = &v121;
      __chkstk_darwin(v96 - 8);
      unint64_t v98 = (char *)&v121 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v99 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56))(v98, 1, 1, v99);
      uint64_t v100 = type metadata accessor for Logger();
      int v122 = &v121;
      uint64_t v101 = *(void *)(v100 - 8);
      uint64_t v102 = *(void *)(v101 + 64);
      __chkstk_darwin(v100);
      (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))((char *)&v121 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0), v125, v100);
      unint64_t v103 = (*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80);
      uint64_t v104 = swift_allocObject();
      *(void *)(v104 + 16) = 0;
      *(void *)(v104 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v101 + 32))(v104 + v103, (char *)&v121 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0), v100);
      id v51 = v124;
      unint64_t v105 = v104 + ((v103 + v102 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v106 = v128;
      *(void *)unint64_t v105 = v127;
      *(void *)(v105 + 8) = v106;
      *(unsigned char *)(v105 + 16) = (_BYTE)v129;
      *(void *)(v104 + ((v103 + v102 + 31) & 0xFFFFFFFFFFFFFFF8)) = v40;
      swift_errorRetain();
      sub_1000A27A0((uint64_t)v98, v126, v104);
      swift_release();
    }
    goto LABEL_65;
  }
  swift_errorRelease();
  if (qword_10034B2B0)
  {
    uint64_t v84 = qword_10034B2B0;
  }
  else
  {
    sub_1000C51B4();
    uint64_t v84 = swift_allocError();
    *os_log_type_t v113 = 0;
  }
  uint64_t v114 = a7;
  swift_errorRetain();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v115 = Logger.logObject.getter();
  os_log_type_t v116 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v115, v116))
  {
    uint64_t v117 = (uint8_t *)swift_slowAlloc();
    uint64_t v129 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v117 = 138412290;
    uint64_t v118 = a7;
    swift_errorRetain();
    uint64_t v119 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v133 = v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v129 = v119;
    uint64_t v114 = v118;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v115, v116, "The preflight error %@ did not result in a TTR", v117, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10023C5AC(v84);
  swift_willThrow();
  swift_errorRelease();
  uint64_t v120 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v120 - 8) + 8))(a4, v120);
  swift_errorRelease();
  swift_unknownObjectRelease();
}

void sub_100126CA0(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, void *a7, uint64_t *a8, uint64_t a9)
{
}

void sub_100126CF8(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, void *a7, uint64_t *a8, uint64_t a9)
{
}

void sub_100126D50(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, void *a7, uint64_t *a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(id, uint64_t *, uint64_t))
{
  os_log_type_t v113 = a8;
  id v120 = a7;
  LODWORD(v115) = a6;
  uint64_t v17 = a9;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  os_log_type_t v116 = a1;
  uint64_t v117 = a2;
  LODWORD(v118) = a3;
  os_log_type_t v18 = (os_activity_scope_state_s *)(sub_10010D0A4(a1, a2, a3) + 24);
  swift_beginAccess();
  v19 = swift_unknownObjectRetain();
  os_activity_scope_enter(v19, v18);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  uint64_t v121 = a4;
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Checking for first unlock.", v22, 2u);
    a4 = v121;
    swift_slowDealloc();
  }

  uint64_t v119 = a9;
  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v38, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v23 = type metadata accessor for ScreenTimeFeatureFlags();
  v123[3] = v23;
  v123[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v24 = sub_1000C532C(v123);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v24, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v23);
  char v25 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v123);
  char v26 = Logger.logObject.getter();
  if ((v25 & 1) == 0)
  {
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v41))
    {
      os_log_type_t v42 = (uint8_t *)swift_slowAlloc();
      v123[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v42 = 136446210;
      uint64_t v43 = StaticString.description.getter();
      uint64_t v124 = sub_1000A2E70(v43, v44, v123);
      a4 = v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v41, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v39 = swift_allocError();
    *uint64_t v45 = 1;
    goto LABEL_23;
  }
  os_log_type_t v27 = static os_log_type_t.default.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  if (a5)
  {
    if (v28)
    {
      BOOL v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Starting preflight.", v29, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Preflight complete", v32, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "The preflight did not complete as expected.", v35, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v39 = swift_allocError();
      *uint64_t v40 = 0;
LABEL_23:
      swift_willThrow();
      goto LABEL_24;
    }
  }
  else
  {
    if (v28)
    {
      unint64_t v71 = (uint8_t *)swift_slowAlloc();
      v123[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v71 = 136446210;
      uint64_t v72 = StaticString.description.getter();
      uint64_t v124 = sub_1000A2E70(v72, v73, v123);
      uint64_t v17 = v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s has opted out of preflight.", v71, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a4 = v121;
      swift_slowDealloc();
    }
  }
  unint64_t v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    os_log_type_t v76 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v76 = 0;
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Starting the activity.", v76, 2u);
    swift_slowDealloc();
  }

  a12(v120, v113, v17);
  if (!v114)
  {
    uint64_t v100 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8))(a4, v100);
    swift_release();
    goto LABEL_77;
  }
  uint64_t v39 = (uint64_t)v114;
LABEL_24:
  swift_release();
  v123[0] = v39;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (v124 & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      unint64_t v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v61, 2u);
      swift_slowDealloc();
    }

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    *uint64_t v62 = 0;
    swift_willThrow();
    uint64_t v63 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(a4, v63);
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    v123[0] = v39;
    uint64_t v46 = type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v47 = *(void *)(*(void *)(v46 - 8) + 64);
    __chkstk_darwin(v46);
    unint64_t v48 = (id *)((char *)&v112 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v49 = *v48;
        id v50 = *v48;
        id v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = swift_slowAlloc();
          os_log_type_t v113 = (uint64_t *)swift_slowAlloc();
          uint64_t v114 = (uint64_t *)swift_slowAlloc();
          uint64_t v124 = (uint64_t)v114;
          *(_DWORD *)uint64_t v53 = 136446466;
          uint64_t v115 = (uint64_t)v49;
          uint64_t v54 = StaticString.description.getter();
          uint64_t v122 = sub_1000A2E70(v54, v55, &v124);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v53 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *id v56 = v115;
          swift_storeEnumTagMultiPayload();
          id v57 = v50;
          uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v122 = v58;
          id v49 = (id)v115;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *os_log_type_t v113 = v58;

          _os_log_impl((void *)&_mh_execute_header, v51, v52, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v53, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v101 = v49;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v102 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(v121, v102);
        swift_errorRelease();
        goto LABEL_77;
      }
      sub_1000C9DB4((uint64_t)&v112 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    swift_errorRelease();
    v123[0] = v39;
    swift_errorRetain();
    if (swift_dynamicCast() && (v122 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v77 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v77 = swift_allocError();
        *unint64_t v105 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v106, v107))
      {
        uint64_t v108 = (uint8_t *)swift_slowAlloc();
        uint64_t v109 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v108 = 138412290;
        swift_errorRetain();
        uint64_t v110 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v124 = v110;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v109 = v110;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v106, v107, "The preflight error %@ did not result in a TTR", v108, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        a4 = v121;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      sub_10023C5AC(v77);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v111 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v111 - 8) + 8))(a4, v111);
      goto LABEL_76;
    }
    uint64_t v64 = swift_errorRelease();
    v123[0] = v39;
    __chkstk_darwin(v64);
    uint64_t v65 = (uint64_t *)((char *)&v112 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v67 = *v65;
        unint64_t v66 = v65[1];
        swift_bridgeObjectRetain_n();
        uint64_t v68 = Logger.logObject.getter();
        os_log_type_t v69 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v68, v69))
        {
          uint64_t v70 = (uint8_t *)swift_slowAlloc();
          uint64_t v124 = swift_slowAlloc();
          *(_DWORD *)uint64_t v70 = 136315138;
          uint64_t v118 = v70 + 4;
          swift_bridgeObjectRetain();
          uint64_t v122 = sub_1000A2E70(v67, v66, &v124);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "askForTime response handling did not find ask request identifier %s", v70, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v103 = v67;
        v103[1] = v66;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v104 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v104 - 8) + 8))(v121, v104);
LABEL_76:
        swift_errorRelease();
        goto LABEL_77;
      }
      sub_1000C9DB4((uint64_t)&v112 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    BOOL v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = swift_slowAlloc();
      uint64_t v81 = (void *)swift_slowAlloc();
      v123[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v80 = 136446466;
      uint64_t v82 = StaticString.description.getter();
      uint64_t v124 = sub_1000A2E70(v82, v83, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v80 + 12) = 2114;
      swift_errorRetain();
      uint64_t v84 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v124 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v81 = v84;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v80, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    if ((v115 & 1) == 0)
    {
      BOOL v85 = !&class metadata base offset for TapToRadarService || &type metadata accessor for TapToRadarService == 0;
      BOOL v86 = v85 || &type metadata for TapToRadarService == 0;
      if (!v86 && &nominal type descriptor for TapToRadarService != 0)
      {
        uint64_t v115 = a11;
        uint64_t v88 = sub_10009EE78(&qword_100340F10);
        uint64_t v114 = &v112;
        __chkstk_darwin(v88 - 8);
        uint64_t v90 = (char *)&v112 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v91 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v90, 1, 1, v91);
        uint64_t v92 = type metadata accessor for Logger();
        os_log_type_t v113 = &v112;
        uint64_t v93 = *(void *)(v92 - 8);
        uint64_t v94 = *(void *)(v93 + 64);
        __chkstk_darwin(v92);
        (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))((char *)&v112 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0), v121, v92);
        unint64_t v95 = (*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
        uint64_t v96 = swift_allocObject();
        *(void *)(v96 + 16) = 0;
        *(void *)(v96 + 24) = 0;
        (*(void (**)(unint64_t, char *, uint64_t))(v93 + 32))(v96 + v95, (char *)&v112 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0), v92);
        unint64_t v97 = v96 + ((v95 + v94 + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v98 = v117;
        *(void *)unint64_t v97 = v116;
        *(void *)(v97 + 8) = v98;
        *(unsigned char *)(v97 + 16) = (_BYTE)v118;
        *(void *)(v96 + ((v95 + v94 + 31) & 0xFFFFFFFFFFFFFFF8)) = v39;
        swift_errorRetain();
        sub_1000A27A0((uint64_t)v90, v115, v96);
        swift_release();
      }
    }
    sub_10023C5AC(v39);
    swift_willThrow();
    swift_errorRelease();
    uint64_t v99 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v121, v99);
  }
LABEL_77:
  swift_release();
}

void sub_100128200(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, void *a7, uint64_t *a8, uint64_t a9)
{
}

uint64_t sub_100128258(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, void *a8)
{
  return sub_10011ECA8(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&unk_100304A40, (uint64_t)&unk_100343478, (void (*)(uint64_t, id))sub_100230190);
}

uint64_t sub_1001282A8@<X0>(char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  LODWORD(v128) = a6;
  uint64_t v15 = sub_10009EE78(&qword_100343598);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v124 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v129 = a1;
  uint64_t v130 = a2;
  LODWORD(v131) = a3;
  os_log_type_t v18 = (os_activity_scope_state_s *)(sub_10010D0A4(a1, a2, a3) + 24);
  swift_beginAccess();
  v19 = swift_unknownObjectRetain();
  os_activity_scope_enter(v19, v18);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v132 = a4;
  if (v22)
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Checking for first unlock.", v23, 2u);
    a4 = v132;
    swift_slowDealloc();
  }

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v39, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_1003435A0);
    sub_10019055C(&qword_1003435A8, &qword_1003435A0);
    goto LABEL_19;
  }
  uint64_t v24 = type metadata accessor for ScreenTimeFeatureFlags();
  v134[3] = v24;
  v134[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  char v25 = sub_1000C532C(v134);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v25, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v24);
  char v26 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v134);
  os_log_type_t v27 = Logger.logObject.getter();
  if ((v26 & 1) == 0)
  {
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      v134[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136446210;
      uint64_t v44 = StaticString.description.getter();
      uint64_t v135 = sub_1000A2E70(v44, v45, v134);
      a4 = v132;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v42, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_1003435A0);
    sub_10019055C(&qword_1003435A8, &qword_1003435A0);
    uint64_t v40 = swift_allocError();
    *uint64_t v46 = 1;
    goto LABEL_23;
  }
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  if (a5)
  {
    if (v29)
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Starting preflight.", v30, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Preflight complete", v33, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "The preflight did not complete as expected.", v36, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v40 = swift_allocError();
      unsigned char *v41 = 0;
LABEL_23:
      swift_willThrow();
      swift_release();
      goto LABEL_24;
    }
  }
  else
  {
    if (v29)
    {
      uint64_t v126 = a7;
      unint64_t v74 = (uint8_t *)swift_slowAlloc();
      v134[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v74 = 136446210;
      uint64_t v125 = a8;
      uint64_t v75 = StaticString.description.getter();
      uint64_t v135 = sub_1000A2E70(v75, v76, v134);
      a8 = v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a7 = v126;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s has opted out of preflight.", v74, 0xCu);
      swift_arrayDestroy();
      a4 = v132;
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v77, v78))
  {
    os_log_type_t v79 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v79 = 0;
    _os_log_impl((void *)&_mh_execute_header, v77, v78, "Starting the activity.", v79, 2u);
    swift_slowDealloc();
  }

  uint64_t v80 = sub_10009EE78(&qword_1003435B8);
  __chkstk_darwin(v80 - 8);
  uint64_t v82 = (uint64_t *)((char *)&v124 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v83 = v127;
  sub_1001BA080(v82);
  if (!v83)
  {
    uint64_t v111 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v111 - 8) + 8))(a4, v111);
    swift_release();
    sub_1000FDE9C((uint64_t)v82, (uint64_t)v17, &qword_1003435B8);
    sub_1000FDE9C((uint64_t)v17, a8, &qword_100343598);
    return swift_release();
  }
  swift_release();
  uint64_t v40 = (uint64_t)v83;
LABEL_24:
  v134[0] = v40;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_1003435A0);
  if (swift_dynamicCast() && (v135 & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v64, 2u);
      swift_slowDealloc();
    }

    sub_10019055C(&qword_1003435A8, &qword_1003435A0);
    swift_allocError();
    unsigned char *v65 = 0;
    swift_willThrow();
    goto LABEL_76;
  }
  swift_errorRelease();
  v134[0] = v40;
  uint64_t v47 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v48 = *(void *)(*(void *)(v47 - 8) + 64);
  __chkstk_darwin(v47);
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_34:
    swift_errorRelease();
    v134[0] = v40;
    swift_errorRetain();
    if (!swift_dynamicCast() || (v133 & 1) != 0)
    {
      uint64_t v66 = swift_errorRelease();
      v134[0] = v40;
      __chkstk_darwin(v66);
      uint64_t v67 = (uint64_t *)((char *)&v124 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
      swift_errorRetain();
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 22)
        {
          swift_errorRelease();
          uint64_t v69 = *v67;
          unint64_t v68 = v67[1];
          swift_bridgeObjectRetain_n();
          uint64_t v70 = Logger.logObject.getter();
          os_log_type_t v71 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v70, v71))
          {
            uint64_t v131 = v69;
            uint64_t v72 = (uint8_t *)swift_slowAlloc();
            uint64_t v73 = swift_slowAlloc();
            uint64_t v126 = a7;
            uint64_t v135 = v73;
            *(_DWORD *)uint64_t v72 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v133 = sub_1000A2E70(v131, v68, &v135);
            uint64_t v69 = v131;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v70, v71, "askForTime response handling did not find ask request identifier %s", v72, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }

          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          uint64_t *v114 = v69;
          v114[1] = v68;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          uint64_t v115 = type metadata accessor for Logger();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v115 - 8) + 8))(v132, v115);
          goto LABEL_77;
        }
        sub_1000C9DB4((uint64_t)v67);
      }
      swift_errorRelease();
      swift_errorRetain();
      swift_errorRetain();
      BOOL v85 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.fault.getter();
      BOOL v87 = os_log_type_enabled(v85, v86);
      uint64_t v126 = a7;
      if (v87)
      {
        uint64_t v88 = swift_slowAlloc();
        uint64_t v89 = (void *)swift_slowAlloc();
        v134[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v88 = 136446466;
        uint64_t v90 = StaticString.description.getter();
        uint64_t v135 = sub_1000A2E70(v90, v91, v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v88 + 12) = 2114;
        swift_errorRetain();
        uint64_t v92 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v135 = v92;
        a4 = v132;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v89 = v92;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v88, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        if (v128) {
          goto LABEL_65;
        }
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        if (v128)
        {
LABEL_65:
          sub_10023C5AC(v40);
          swift_willThrow();
          swift_errorRelease();
          uint64_t v110 = type metadata accessor for Logger();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(a4, v110);
          return swift_release();
        }
      }
      if (&class metadata base offset for TapToRadarService) {
        BOOL v93 = &type metadata accessor for TapToRadarService == 0;
      }
      else {
        BOOL v93 = 1;
      }
      if (!v93 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
      {
        uint64_t v96 = sub_10009EE78(&qword_100340F10);
        uint64_t v128 = &v124;
        __chkstk_darwin(v96 - 8);
        uint64_t v98 = (char *)&v124 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v99 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56))(v98, 1, 1, v99);
        uint64_t v100 = type metadata accessor for Logger();
        uint64_t v127 = &v124;
        uint64_t v101 = *(void *)(v100 - 8);
        uint64_t v102 = *(void *)(v101 + 64);
        __chkstk_darwin(v100);
        unint64_t v103 = (char *)&v124 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v103, a4, v100);
        unint64_t v104 = (*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80);
        unint64_t v105 = (v104 + v102 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v106 = (v104 + v102 + 31) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v107 = swift_allocObject();
        *(void *)(v107 + 16) = 0;
        *(void *)(v107 + 24) = 0;
        (*(void (**)(unint64_t, char *, uint64_t))(v101 + 32))(v107 + v104, v103, v100);
        unint64_t v108 = v107 + v105;
        uint64_t v109 = v130;
        *(void *)unint64_t v108 = v129;
        *(void *)(v108 + 8) = v109;
        *(unsigned char *)(v108 + 16) = v131;
        *(void *)(v107 + v106) = v40;
        a4 = v132;
        swift_errorRetain();
        sub_1000A27A0((uint64_t)v98, (uint64_t)&unk_1003435B0, v107);
        swift_release();
      }
      goto LABEL_65;
    }
    swift_errorRelease();
    if (qword_10034B2B0)
    {
      uint64_t v84 = qword_10034B2B0;
    }
    else
    {
      sub_1000C51B4();
      uint64_t v84 = swift_allocError();
      unsigned char *v116 = 0;
    }
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v117 = Logger.logObject.getter();
    os_log_type_t v118 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v117, v118))
    {
      uint64_t v119 = (uint8_t *)swift_slowAlloc();
      id v120 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v119 = 138412290;
      swift_errorRetain();
      uint64_t v121 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v135 = v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v120 = v121;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v117, v118, "The preflight error %@ did not result in a TTR", v119, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      a4 = v132;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    sub_10023C5AC(v84);
    swift_willThrow();
    swift_errorRelease();
LABEL_76:
    uint64_t v122 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v122 - 8) + 8))(a4, v122);
LABEL_77:
    swift_errorRelease();
    return swift_release();
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)&v124 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
    goto LABEL_34;
  }
  uint64_t v126 = a7;
  swift_errorRelease();
  id v49 = *(uint64_t **)((char *)&v124 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v50 = v49;
  id v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.fault.getter();
  int v53 = v52;
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v54 = swift_slowAlloc();
    LODWORD(v125) = v53;
    uint64_t v55 = v54;
    id v56 = (void *)swift_slowAlloc();
    uint64_t v127 = (uint64_t *)swift_slowAlloc();
    uint64_t v135 = (uint64_t)v127;
    *(_DWORD *)uint64_t v55 = 136446466;
    uint64_t v128 = v49;
    uint64_t v57 = StaticString.description.getter();
    uint64_t v133 = sub_1000A2E70(v57, v58, &v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v55 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    *uint64_t v59 = v128;
    swift_storeEnumTagMultiPayload();
    os_log_type_t v60 = v50;
    uint64_t v61 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v133 = v61;
    a4 = v132;
    id v49 = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v56 = v61;

    _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v125, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v55, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *uint64_t v112 = v49;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v113 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v113 - 8) + 8))(a4, v113);
  swift_errorRelease();
  return swift_release();
}

NSObject *sub_100129804(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  v8 = v7;
  LODWORD(v117) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v119 = a1;
  uint64_t v120 = a2;
  uint64_t v15 = (os_activity_scope_state_s *)(sub_10010D0A4(a1, a2, a3) + 24);
  swift_beginAccess();
  uint64_t v16 = swift_unknownObjectRetain();
  os_activity_scope_enter(v16, v15);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Checking for first unlock.", v19, 2u);
    v8 = v7;
    swift_slowDealloc();
  }

  int v118 = a3;
  if (!MKBUserUnlockedSinceBoot())
  {
    v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v35, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_1003438A0);
    sub_10019055C(&qword_1003438A8, &qword_1003438A0);
    goto LABEL_19;
  }
  uint64_t v20 = type metadata accessor for ScreenTimeFeatureFlags();
  v122[3] = v20;
  v122[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  os_log_type_t v21 = sub_1000C532C(v122);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v21, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v20);
  char v22 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v122);
  uint64_t v23 = Logger.logObject.getter();
  if ((v22 & 1) == 0)
  {
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v38))
    {
      os_log_type_t v116 = (char *)a4;
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      v122[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136446210;
      uint64_t v40 = StaticString.description.getter();
      uint64_t v123 = sub_1000A2E70(v40, v41, v122);
      a4 = (uint64_t)v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v38, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_1003438A0);
    sub_10019055C(&qword_1003438A8, &qword_1003438A0);
    uint64_t v36 = swift_allocError();
    *os_log_type_t v42 = 1;
    goto LABEL_23;
  }
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  if (a5)
  {
    if (v25)
    {
      char v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Starting preflight.", v26, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      BOOL v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Preflight complete", v29, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "The preflight did not complete as expected.", v32, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v36 = swift_allocError();
      unsigned char *v37 = 0;
LABEL_23:
      swift_willThrow();
      swift_release();
LABEL_24:
      v122[0] = v36;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      sub_10009EE78(&qword_1003438A0);
      if (swift_dynamicCast() && (v123 & 1) == 0)
      {
        swift_errorRelease();
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v46, v57))
        {
          unint64_t v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v58 = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, v57, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v58, 2u);
          swift_slowDealloc();
        }

        sub_10019055C(&qword_1003438A8, &qword_1003438A0);
        swift_allocError();
        *uint64_t v59 = 0;
        swift_willThrow();
      }
      else
      {
        swift_errorRelease();
        v122[0] = v36;
        uint64_t v43 = type metadata accessor for DataStore.DataStoreError(0);
        uint64_t v44 = *(void *)(*(void *)(v43 - 8) + 64);
        __chkstk_darwin(v43);
        unint64_t v45 = (id *)((char *)&v112 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
        swift_errorRetain();
        if (swift_dynamicCast())
        {
          if (swift_getEnumCaseMultiPayload() == 37)
          {
            swift_errorRelease();
            uint64_t v46 = *v45;
            id v47 = *v45;
            uint64_t v48 = Logger.logObject.getter();
            os_log_type_t v49 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v48, v49))
            {
              uint64_t v50 = swift_slowAlloc();
              uint64_t v117 = v46;
              uint64_t v51 = v50;
              uint64_t v113 = (void *)swift_slowAlloc();
              uint64_t v114 = (uint64_t *)swift_slowAlloc();
              uint64_t v123 = (uint64_t)v114;
              *(_DWORD *)uint64_t v51 = 136446466;
              uint64_t v115 = a7;
              uint64_t v52 = StaticString.description.getter();
              uint64_t v121 = sub_1000A2E70(v52, v53, &v123);
              os_log_type_t v116 = (char *)a4;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v51 + 12) = 2114;
              sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
              swift_allocError();
              *uint64_t v54 = v117;
              swift_storeEnumTagMultiPayload();
              id v55 = v47;
              uint64_t v56 = _swift_stdlib_bridgeErrorToNSError();
              uint64_t v121 = v56;
              a4 = (uint64_t)v116;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v113 = v56;

              _os_log_impl((void *)&_mh_execute_header, v48, v49, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v51, 0x16u);
              sub_10009EE78(&qword_100342AB0);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v46 = v117;
              swift_slowDealloc();
            }
            else
            {
            }
            sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
            swift_allocError();
            *uint64_t v99 = v46;
            swift_storeEnumTagMultiPayload();
            swift_willThrow();
            uint64_t v100 = type metadata accessor for Logger();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8))(a4, v100);
            goto LABEL_77;
          }
          sub_1000C9DB4((uint64_t)&v112 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
        }
        swift_errorRelease();
        v122[0] = v36;
        swift_errorRetain();
        if (!swift_dynamicCast() || (v121 & 1) != 0)
        {
          uint64_t v60 = swift_errorRelease();
          v122[0] = v36;
          __chkstk_darwin(v60);
          uint64_t v61 = (uint64_t *)((char *)&v112 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
          swift_errorRetain();
          if (swift_dynamicCast())
          {
            if (swift_getEnumCaseMultiPayload() == 22)
            {
              swift_errorRelease();
              uint64_t v62 = *v61;
              uint64_t v46 = v61[1];
              swift_bridgeObjectRetain_n();
              os_log_type_t v116 = (char *)a4;
              os_log_type_t v63 = Logger.logObject.getter();
              os_log_type_t v64 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v63, v64))
              {
                uint64_t v120 = v62;
                uint64_t v65 = (uint8_t *)swift_slowAlloc();
                uint64_t v66 = swift_slowAlloc();
                uint64_t v115 = a7;
                uint64_t v123 = v66;
                *(_DWORD *)uint64_t v65 = 136315138;
                swift_bridgeObjectRetain();
                uint64_t v121 = sub_1000A2E70(v120, (unint64_t)v46, &v123);
                uint64_t v62 = v120;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v63, v64, "askForTime response handling did not find ask request identifier %s", v65, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                swift_bridgeObjectRelease_n();
              }

              sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
              swift_allocError();
              *uint64_t v101 = v62;
              v101[1] = (uint64_t)v46;
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              uint64_t v102 = type metadata accessor for Logger();
              (*(void (**)(char *, uint64_t))(*(void *)(v102 - 8) + 8))(v116, v102);
              goto LABEL_77;
            }
            sub_1000C9DB4((uint64_t)v61);
          }
          swift_errorRelease();
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v46 = Logger.logObject.getter();
          os_log_type_t v73 = static os_log_type_t.fault.getter();
          BOOL v74 = os_log_type_enabled(v46, v73);
          uint64_t v115 = a7;
          if (v74)
          {
            uint64_t v75 = swift_slowAlloc();
            unint64_t v76 = (void *)swift_slowAlloc();
            v122[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v75 = 136446466;
            uint64_t v77 = StaticString.description.getter();
            os_log_type_t v116 = (char *)a4;
            uint64_t v123 = sub_1000A2E70(v77, v78, v122);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v75 + 12) = 2114;
            swift_errorRetain();
            uint64_t v79 = _swift_stdlib_bridgeErrorToNSError();
            uint64_t v123 = v79;
            a4 = (uint64_t)v116;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *unint64_t v76 = v79;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v46, v73, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v75, 0x16u);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            if (v117) {
              goto LABEL_65;
            }
          }
          else
          {

            swift_errorRelease();
            swift_errorRelease();
            if (v117)
            {
LABEL_65:
              sub_10023C5AC(v36);
              swift_willThrow();
              swift_errorRelease();
              uint64_t v97 = type metadata accessor for Logger();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v97 - 8) + 8))(a4, v97);
LABEL_78:
              swift_release();
              return v46;
            }
          }
          if (&class metadata base offset for TapToRadarService) {
            BOOL v80 = &type metadata accessor for TapToRadarService == 0;
          }
          else {
            BOOL v80 = 1;
          }
          if (!v80
            && &type metadata for TapToRadarService != 0
            && &nominal type descriptor for TapToRadarService != 0)
          {
            uint64_t v83 = sub_10009EE78(&qword_100340F10);
            uint64_t v117 = &v112;
            __chkstk_darwin(v83 - 8);
            BOOL v85 = (char *)&v112 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
            os_log_type_t v116 = v85;
            uint64_t v86 = type metadata accessor for TaskPriority();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v85, 1, 1, v86);
            uint64_t v87 = type metadata accessor for Logger();
            uint64_t v114 = &v112;
            uint64_t v88 = *(void *)(v87 - 8);
            uint64_t v89 = *(void *)(v88 + 64);
            __chkstk_darwin(v87);
            uint64_t v90 = (char *)&v112 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v90, a4, v87);
            unint64_t v91 = (*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
            unint64_t v92 = (v91 + v89 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v46 = a4;
            unint64_t v93 = (v91 + v89 + 31) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v94 = swift_allocObject();
            *(void *)(v94 + 16) = 0;
            *(void *)(v94 + 24) = 0;
            (*(void (**)(unint64_t, char *, uint64_t))(v88 + 32))(v94 + v91, v90, v87);
            unint64_t v95 = v94 + v92;
            uint64_t v96 = v120;
            *(void *)unint64_t v95 = v119;
            *(void *)(v95 + 8) = v96;
            *(unsigned char *)(v95 + 16) = v118;
            *(void *)(v94 + v93) = v36;
            a4 = (uint64_t)v46;
            swift_errorRetain();
            sub_1000A27A0((uint64_t)v116, (uint64_t)&unk_1003438B0, v94);
            swift_release();
          }
          goto LABEL_65;
        }
        swift_errorRelease();
        if (qword_10034B2B0)
        {
          uint64_t v46 = qword_10034B2B0;
        }
        else
        {
          sub_1000C51B4();
          uint64_t v46 = swift_allocError();
          *unint64_t v103 = 0;
        }
        swift_errorRetain();
        swift_errorRetain();
        swift_errorRetain();
        unint64_t v104 = Logger.logObject.getter();
        os_log_type_t v105 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v104, v105))
        {
          unint64_t v106 = (uint8_t *)swift_slowAlloc();
          uint64_t v107 = swift_slowAlloc();
          os_log_type_t v116 = (char *)a4;
          unint64_t v108 = (void *)v107;
          *(_DWORD *)unint64_t v106 = 138412290;
          swift_errorRetain();
          uint64_t v109 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v123 = v109;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v108 = v109;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v104, v105, "The preflight error %@ did not result in a TTR", v106, 0xCu);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          a4 = (uint64_t)v116;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        sub_10023C5AC(v46);
        swift_willThrow();
        swift_errorRelease();
      }
      uint64_t v110 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(a4, v110);
LABEL_77:
      swift_errorRelease();
      goto LABEL_78;
    }
  }
  else
  {
    if (v25)
    {
      os_log_type_t v116 = (char *)a4;
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      uint64_t v114 = v8;
      v122[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136446210;
      uint64_t v68 = StaticString.description.getter();
      uint64_t v123 = sub_1000A2E70(v68, v69, v122);
      a4 = (uint64_t)v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s has opted out of preflight.", v67, 0xCu);
      swift_arrayDestroy();
      v8 = v114;
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v70, v71))
  {
    uint64_t v72 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v72 = 0;
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "Starting the activity.", v72, 2u);
    swift_slowDealloc();
  }

  sub_1000D1AF0(v122);
  if (v8)
  {
    swift_release();
    uint64_t v36 = (uint64_t)v8;
    goto LABEL_24;
  }
  uint64_t v98 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v98 - 8) + 8))(a4, v98);
  swift_release();
  uint64_t v46 = v122[0];
  swift_release();
  return v46;
}

uint64_t sub_10012ACB0(char *a1, uint64_t a2, int a3, uint64_t *a4, char a5, int a6, uint64_t a7)
{
  LODWORD(v131) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v132 = a1;
  uint64_t v133 = a2;
  v13 = sub_10010D0A4(a1, a2, a3);
  swift_beginAccess();
  id v14 = swift_unknownObjectRetain();
  os_activity_scope_enter(v14, (os_activity_scope_state_t)(v13 + 24));
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Checking for first unlock.", v17, 2u);
    swift_slowDealloc();
  }

  if (!MKBUserUnlockedSinceBoot())
  {
    int v130 = a3;
    os_log_type_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v33, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100343878);
    sub_10019055C(&qword_100343880, &qword_100343878);
    goto LABEL_19;
  }
  uint64_t v18 = type metadata accessor for ScreenTimeFeatureFlags();
  v135[3] = v18;
  v135[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  v19 = sub_1000C532C(v135);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v19, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v18);
  char v20 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v135);
  os_log_type_t v21 = Logger.logObject.getter();
  if (v20)
  {
    os_log_type_t v22 = static os_log_type_t.default.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    if (a5)
    {
      if (v23)
      {
        os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Starting preflight.", v24, 2u);
        swift_slowDealloc();
      }

      if (qword_100340D70 != -1) {
        swift_once();
      }
      BOOL v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Preflight complete", v27, 2u);
        swift_slowDealloc();
      }

      if ((byte_10034B308 & 1) == 0)
      {
        int v130 = a3;
        os_log_type_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "The preflight did not complete as expected.", v30, 2u);
          swift_slowDealloc();
        }

        sub_1000C51B4();
LABEL_19:
        uint64_t v34 = swift_allocError();
        *os_log_type_t v35 = 0;
        goto LABEL_35;
      }
    }
    else
    {
      if (v23)
      {
        uint64_t v128 = a4;
        unint64_t v41 = (uint8_t *)swift_slowAlloc();
        v135[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v41 = 136446210;
        uint64_t v42 = StaticString.description.getter();
        uint64_t v126 = v13;
        uint64_t v136 = sub_1000A2E70(v42, v43, v135);
        a4 = v128;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s has opted out of preflight.", v41, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Starting the activity.", v46, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D98 != -1) {
      swift_once();
    }
    if (qword_100342480)
    {
      id v47 = [(id)qword_100342480 endpoint];
      uint64_t v48 = type metadata accessor for Logger();
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v48 - 8) + 8))(a4, v48);
      swift_release();
      swift_release();
      return (uint64_t)v47;
    }
    int v130 = a3;
    uint64_t v128 = a4;
    uint64_t v50 = type metadata accessor for Logger();
    uint64_t v51 = a7;
    uint64_t v52 = *(void *)(v50 - 8);
    __chkstk_darwin(v50);
    uint64_t v54 = (char *)&v125 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v55 = v51;
    sub_1000D4DF8((uint64_t)v54);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      unint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Server listener is nil. An error will be thrown.", v58, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v50);
    sub_100190504();
    uint64_t v34 = swift_allocError();
    a7 = v55;
    a4 = v128;
  }
  else
  {
    os_log_type_t v36 = static os_log_type_t.error.getter();
    int v130 = a3;
    if (os_log_type_enabled(v21, v36))
    {
      uint64_t v126 = v13;
      os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
      v135[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v37 = 136446210;
      uint64_t v38 = StaticString.description.getter();
      uint64_t v136 = sub_1000A2E70(v38, v39, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v36, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100343878);
    sub_10019055C(&qword_100343880, &qword_100343878);
    uint64_t v34 = swift_allocError();
    *uint64_t v40 = 1;
  }
LABEL_35:
  swift_willThrow();
  swift_release();
  v135[0] = v34;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100343878);
  if (swift_dynamicCast() && (v136 & 1) == 0)
  {
    swift_errorRelease();
    os_log_type_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v75, 2u);
      swift_slowDealloc();
    }

    sub_10019055C(&qword_100343880, &qword_100343878);
    swift_allocError();
    *unint64_t v76 = 0;
    swift_willThrow();
    goto LABEL_79;
  }
  swift_errorRelease();
  v135[0] = v34;
  uint64_t v59 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v60 = *(void *)(*(void *)(v59 - 8) + 64);
  __chkstk_darwin(v59);
  uint64_t v61 = (id *)((char *)&v125 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    if (swift_getEnumCaseMultiPayload() == 37)
    {
      swift_errorRelease();
      uint64_t v62 = (uint64_t *)*v61;
      id v63 = *v61;
      os_log_type_t v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = swift_slowAlloc();
        uint64_t v131 = v62;
        uint64_t v67 = v66;
        uint64_t v126 = (void *)swift_slowAlloc();
        uint64_t v129 = (char *)swift_slowAlloc();
        uint64_t v136 = (uint64_t)v129;
        *(_DWORD *)uint64_t v67 = 136446466;
        uint64_t v127 = a7;
        uint64_t v68 = StaticString.description.getter();
        uint64_t v134 = sub_1000A2E70(v68, v69, &v136);
        uint64_t v128 = a4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v67 + 12) = 2114;
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        NSObject *v70 = v131;
        swift_storeEnumTagMultiPayload();
        id v71 = v63;
        uint64_t v72 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v134 = v72;
        a4 = v128;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v126 = v72;

        _os_log_impl((void *)&_mh_execute_header, v64, v65, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v67, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v62 = v131;
        swift_slowDealloc();
      }
      else
      {
      }
      sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
      swift_allocError();
      *uint64_t v113 = v62;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      uint64_t v114 = type metadata accessor for Logger();
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v114 - 8) + 8))(a4, v114);
      goto LABEL_80;
    }
    sub_1000C9DB4((uint64_t)&v125 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0));
  }
  swift_errorRelease();
  v135[0] = v34;
  swift_errorRetain();
  if (swift_dynamicCast() && (v134 & 1) == 0)
  {
    swift_errorRelease();
    if (qword_10034B2B0)
    {
      uint64_t v85 = qword_10034B2B0;
    }
    else
    {
      sub_1000C51B4();
      uint64_t v85 = swift_allocError();
      unsigned char *v117 = 0;
    }
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    int v118 = Logger.logObject.getter();
    os_log_type_t v119 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v118, v119))
    {
      uint64_t v120 = (uint8_t *)swift_slowAlloc();
      uint64_t v121 = swift_slowAlloc();
      uint64_t v128 = a4;
      uint64_t v122 = (void *)v121;
      *(_DWORD *)uint64_t v120 = 138412290;
      swift_errorRetain();
      uint64_t v123 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v136 = v123;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v122 = v123;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v118, v119, "The preflight error %@ did not result in a TTR", v120, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      a4 = v128;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    sub_10023C5AC(v85);
    swift_willThrow();
    swift_errorRelease();
LABEL_79:
    uint64_t v124 = type metadata accessor for Logger();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v124 - 8) + 8))(a4, v124);
LABEL_80:
    swift_errorRelease();
    return swift_release();
  }
  uint64_t v77 = swift_errorRelease();
  v135[0] = v34;
  __chkstk_darwin(v77);
  unint64_t v78 = (uint64_t *)((char *)&v125 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    if (swift_getEnumCaseMultiPayload() == 22)
    {
      swift_errorRelease();
      uint64_t v80 = *v78;
      unint64_t v79 = v78[1];
      swift_bridgeObjectRetain_n();
      uint64_t v128 = a4;
      uint64_t v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v81, v82))
      {
        uint64_t v133 = v80;
        uint64_t v83 = (uint8_t *)swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        uint64_t v127 = a7;
        uint64_t v136 = v84;
        *(_DWORD *)uint64_t v83 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v134 = sub_1000A2E70(v133, v79, &v136);
        uint64_t v80 = v133;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "askForTime response handling did not find ask request identifier %s", v83, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
      swift_allocError();
      *uint64_t v115 = v80;
      v115[1] = v79;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      uint64_t v116 = type metadata accessor for Logger();
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v116 - 8) + 8))(v128, v116);
      goto LABEL_80;
    }
    sub_1000C9DB4((uint64_t)v78);
  }
  swift_errorRelease();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v86 = Logger.logObject.getter();
  os_log_type_t v87 = static os_log_type_t.fault.getter();
  BOOL v88 = os_log_type_enabled(v86, v87);
  uint64_t v127 = a7;
  if (v88)
  {
    uint64_t v89 = swift_slowAlloc();
    uint64_t v90 = (void *)swift_slowAlloc();
    v135[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v89 = 136446466;
    uint64_t v91 = StaticString.description.getter();
    uint64_t v128 = a4;
    uint64_t v136 = sub_1000A2E70(v91, v92, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v89 + 12) = 2114;
    swift_errorRetain();
    uint64_t v93 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v136 = v93;
    a4 = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v90 = v93;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v89, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (v131) {
      goto LABEL_69;
    }
LABEL_58:
    if (&class metadata base offset for TapToRadarService) {
      BOOL v94 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v94 = 1;
    }
    if (!v94 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      uint64_t v97 = sub_10009EE78(&qword_100340F10);
      uint64_t v131 = &v125;
      __chkstk_darwin(v97 - 8);
      uint64_t v99 = (char *)&v125 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v129 = v99;
      uint64_t v100 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v99, 1, 1, v100);
      uint64_t v101 = type metadata accessor for Logger();
      uint64_t v128 = &v125;
      uint64_t v102 = *(void *)(v101 - 8);
      uint64_t v103 = *(void *)(v102 + 64);
      __chkstk_darwin(v101);
      unint64_t v104 = (char *)&v125 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t *, uint64_t))(v102 + 16))(v104, a4, v101);
      unint64_t v105 = (*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
      unint64_t v106 = (v105 + v103 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v107 = a4;
      unint64_t v108 = (v105 + v103 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v109 = swift_allocObject();
      *(void *)(v109 + 16) = 0;
      *(void *)(v109 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v102 + 32))(v109 + v105, v104, v101);
      unint64_t v110 = v109 + v106;
      uint64_t v111 = v133;
      *(void *)unint64_t v110 = v132;
      *(void *)(v110 + 8) = v111;
      *(unsigned char *)(v110 + 16) = v130;
      *(void *)(v109 + v108) = v34;
      a4 = v107;
      swift_errorRetain();
      sub_1000A27A0((uint64_t)v129, (uint64_t)&unk_100343888, v109);
      swift_release();
    }
    goto LABEL_69;
  }

  swift_errorRelease();
  swift_errorRelease();
  if ((v131 & 1) == 0) {
    goto LABEL_58;
  }
LABEL_69:
  sub_10023C5AC(v34);
  swift_willThrow();
  swift_errorRelease();
  uint64_t v112 = type metadata accessor for Logger();
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v112 - 8) + 8))(a4, v112);
  return swift_release();
}

NSObject *sub_10012C2E0(char *a1, uint64_t a2, int a3, NSObject *a4, char a5, int a6)
{
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v116 = a1;
  uint64_t v117 = a2;
  v12 = sub_10010D0A4(a1, a2, a3);
  swift_beginAccess();
  v13 = swift_unknownObjectRetain();
  os_activity_scope_enter(v13, (os_activity_scope_state_t)(v12 + 24));
  swift_endAccess();
  swift_unknownObjectRelease();
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Checking for first unlock.", v16, 2u);
    swift_slowDealloc();
  }

  if (!MKBUserUnlockedSinceBoot())
  {
    v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v32, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100343650);
    sub_10019055C(&qword_100343658, &qword_100343650);
    goto LABEL_19;
  }
  uint64_t v17 = type metadata accessor for ScreenTimeFeatureFlags();
  v119[3] = v17;
  v119[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v18 = sub_1000C532C(v119);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v18, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v17);
  char v19 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v119);
  char v20 = Logger.logObject.getter();
  uint64_t v115 = v12;
  if ((v19 & 1) == 0)
  {
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v36))
    {
      LODWORD(v114) = a6;
      os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
      v119[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v37 = 136446210;
      uint64_t v38 = StaticString.description.getter();
      uint64_t v120 = sub_1000A2E70(v38, v39, v119);
      a6 = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v36, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100343650);
    sub_10019055C(&qword_100343658, &qword_100343650);
    uint64_t v34 = swift_allocError();
    char v35 = 1;
LABEL_23:
    char *v33 = v35;
    swift_willThrow();
    swift_release();
    v119[0] = v34;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100343650);
    if (swift_dynamicCast() && (v120 & 1) == 0)
    {
      swift_errorRelease();
      os_log_type_t v45 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v55, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v56, 2u);
        swift_slowDealloc();
      }

      sub_10019055C(&qword_100343658, &qword_100343650);
      swift_allocError();
      *os_log_type_t v57 = 0;
      swift_willThrow();
      uint64_t v58 = type metadata accessor for Logger();
      (*(void (**)(NSObject *, uint64_t))(*(void *)(v58 - 8) + 8))(a4, v58);
      goto LABEL_76;
    }
    LODWORD(v114) = a6;
    swift_errorRelease();
    v119[0] = v34;
    uint64_t v40 = type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v41 = *(void *)(*(void *)(v40 - 8) + 64);
    __chkstk_darwin(v40);
    uint64_t v42 = (id *)((char *)&v111 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v43 = *v42;
        id v44 = *v42;
        os_log_type_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.fault.getter();
        int v47 = v46;
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v48 = swift_slowAlloc();
          LODWORD(v112) = v47;
          uint64_t v49 = v48;
          uint64_t v111 = (void *)swift_slowAlloc();
          uint64_t v114 = swift_slowAlloc();
          uint64_t v120 = v114;
          *(_DWORD *)uint64_t v49 = 136446466;
          uint64_t v50 = StaticString.description.getter();
          uint64_t v115 = (char *)a4;
          uint64_t v118 = sub_1000A2E70(v50, v51, &v120);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v49 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *uint64_t v52 = v43;
          swift_storeEnumTagMultiPayload();
          id v53 = v44;
          uint64_t v54 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v118 = v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v111 = v54;
          a4 = v115;

          _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v112, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v49, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v100 = v43;
LABEL_70:
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v102 = type metadata accessor for Logger();
        (*(void (**)(NSObject *, uint64_t))(*(void *)(v102 - 8) + 8))(a4, v102);
LABEL_76:
        swift_errorRelease();
        return v45;
      }
      sub_1000C9DB4((uint64_t)&v111 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    swift_errorRelease();
    v119[0] = v34;
    swift_errorRetain();
    if (swift_dynamicCast() && (v118 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v74 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v74 = swift_allocError();
        *uint64_t v103 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      unint64_t v104 = a4;
      os_log_type_t v45 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v45, v105))
      {
        unint64_t v106 = (uint8_t *)swift_slowAlloc();
        uint64_t v107 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v106 = 138412290;
        swift_errorRetain();
        uint64_t v108 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v120 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v107 = v108;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v45, v105, "The preflight error %@ did not result in a TTR", v106, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      sub_10023C5AC(v74);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v109 = type metadata accessor for Logger();
      (*(void (**)(NSObject *, uint64_t))(*(void *)(v109 - 8) + 8))(v104, v109);
      goto LABEL_76;
    }
    uint64_t v67 = swift_errorRelease();
    v119[0] = v34;
    __chkstk_darwin(v67);
    uint64_t v68 = (uint64_t *)((char *)&v111 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v70 = *v68;
        unint64_t v69 = v68[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v45 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v45, v71))
        {
          uint64_t v117 = v70;
          uint64_t v72 = swift_slowAlloc();
          uint64_t v115 = (char *)a4;
          os_log_type_t v73 = (uint8_t *)v72;
          uint64_t v120 = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v73 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v118 = sub_1000A2E70(v117, v69, &v120);
          uint64_t v70 = v117;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v45, v71, "askForTime response handling did not find ask request identifier %s", v73, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          a4 = v115;
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v101 = v70;
        v101[1] = v69;
        goto LABEL_70;
      }
      sub_1000C9DB4((uint64_t)v68);
    }
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v45 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.fault.getter();
    BOOL v76 = os_log_type_enabled(v45, v75);
    int v113 = a3;
    if (v76)
    {
      uint64_t v77 = swift_slowAlloc();
      unint64_t v78 = (void *)swift_slowAlloc();
      v119[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v77 = 136446466;
      uint64_t v79 = StaticString.description.getter();
      uint64_t v115 = (char *)a4;
      uint64_t v120 = sub_1000A2E70(v79, v80, v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v77 + 12) = 2114;
      swift_errorRetain();
      uint64_t v81 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v120 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v78 = v81;
      a4 = v115;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, v75, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v77, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v114) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v114)
      {
LABEL_65:
        sub_10023C5AC(v34);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v99 = type metadata accessor for Logger();
        (*(void (**)(NSObject *, uint64_t))(*(void *)(v99 - 8) + 8))(a4, v99);
        return v45;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v82 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v82 = 1;
    }
    if (!v82 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      uint64_t v85 = sub_10009EE78(&qword_100340F10);
      uint64_t v115 = (char *)&v111;
      __chkstk_darwin(v85 - 8);
      os_log_type_t v87 = (char *)&v111 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v114 = (uint64_t)v87;
      uint64_t v88 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v87, 1, 1, v88);
      uint64_t v89 = type metadata accessor for Logger();
      uint64_t v112 = &v111;
      uint64_t v90 = *(void *)(v89 - 8);
      uint64_t v91 = *(void *)(v90 + 64);
      __chkstk_darwin(v89);
      unint64_t v92 = (char *)&v111 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, NSObject *, uint64_t))(v90 + 16))(v92, a4, v89);
      unint64_t v93 = (*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
      os_log_type_t v45 = a4;
      unint64_t v94 = (v93 + v91 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v95 = (v93 + v91 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v96 = swift_allocObject();
      *(void *)(v96 + 16) = 0;
      *(void *)(v96 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v90 + 32))(v96 + v93, v92, v89);
      unint64_t v97 = v96 + v94;
      a4 = v45;
      uint64_t v98 = v117;
      *(void *)unint64_t v97 = v116;
      *(void *)(v97 + 8) = v98;
      *(unsigned char *)(v97 + 16) = v113;
      *(void *)(v96 + v95) = v34;
      swift_errorRetain();
      sub_1000A27A0(v114, (uint64_t)&unk_100343820, v96);
      swift_release();
    }
    goto LABEL_65;
  }
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  if (a5)
  {
    if (v22)
    {
      BOOL v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Starting preflight.", v23, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Preflight complete", v26, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "The preflight did not complete as expected.", v29, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v34 = swift_allocError();
      char v35 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v22)
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      v119[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v59 = 136446210;
      uint64_t v60 = StaticString.description.getter();
      uint64_t v120 = sub_1000A2E70(v60, v61, v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s has opted out of preflight.", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    os_log_type_t v64 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Starting the activity.", v64, 2u);
    swift_slowDealloc();
  }

  if (qword_100340D60 != -1) {
    swift_once();
  }
  swift_beginAccess();
  sub_1000C5860(qword_10034B2B8, qword_10034B2D0);
  uint64_t v65 = sub_1000BD1DC();
  swift_endAccess();
  os_log_type_t v45 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:v65];
  uint64_t v66 = type metadata accessor for Logger();
  (*(void (**)(NSObject *, uint64_t))(*(void *)(v66 - 8) + 8))(a4, v66);
  swift_release();
  return v45;
}

NSObject *sub_10012D7AC(char *a1, uint64_t a2, int a3, NSObject *a4, char a5, int a6)
{
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v122 = a1;
  uint64_t v123 = a2;
  v12 = sub_10010D0A4(a1, a2, a3);
  swift_beginAccess();
  v13 = swift_unknownObjectRetain();
  os_activity_scope_enter(v13, (os_activity_scope_state_t)(v12 + 24));
  swift_endAccess();
  swift_unknownObjectRelease();
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Checking for first unlock.", v16, 2u);
    swift_slowDealloc();
  }

  if (!MKBUserUnlockedSinceBoot())
  {
    v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v32, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100343650);
    sub_10019055C(&qword_100343658, &qword_100343650);
    goto LABEL_19;
  }
  uint64_t v17 = type metadata accessor for ScreenTimeFeatureFlags();
  v125[3] = v17;
  v125[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v18 = sub_1000C532C(v125);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v18, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v17);
  char v19 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v125);
  char v20 = Logger.logObject.getter();
  uint64_t v121 = v12;
  if ((v19 & 1) == 0)
  {
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v36))
    {
      LODWORD(v120) = a6;
      os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
      v125[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v37 = 136446210;
      uint64_t v38 = StaticString.description.getter();
      uint64_t v126 = sub_1000A2E70(v38, v39, v125);
      a6 = v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v36, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100343650);
    sub_10019055C(&qword_100343658, &qword_100343650);
    uint64_t v34 = swift_allocError();
    char v35 = 1;
LABEL_23:
    char *v33 = v35;
    swift_willThrow();
    swift_release();
    v125[0] = v34;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100343650);
    if (swift_dynamicCast() && (v126 & 1) == 0)
    {
      swift_errorRelease();
      os_log_type_t v45 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v55, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v56, 2u);
        swift_slowDealloc();
      }

      sub_10019055C(&qword_100343658, &qword_100343650);
      swift_allocError();
      *os_log_type_t v57 = 0;
      swift_willThrow();
      uint64_t v58 = type metadata accessor for Logger();
      (*(void (**)(NSObject *, uint64_t))(*(void *)(v58 - 8) + 8))(a4, v58);
      goto LABEL_76;
    }
    LODWORD(v120) = a6;
    swift_errorRelease();
    v125[0] = v34;
    uint64_t v40 = type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v41 = *(void *)(*(void *)(v40 - 8) + 64);
    __chkstk_darwin(v40);
    uint64_t v42 = (id *)((char *)&v117 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v43 = *v42;
        id v44 = *v42;
        os_log_type_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.fault.getter();
        int v47 = v46;
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v48 = swift_slowAlloc();
          LODWORD(v118) = v47;
          uint64_t v49 = v48;
          uint64_t v117 = (void *)swift_slowAlloc();
          uint64_t v120 = swift_slowAlloc();
          uint64_t v126 = v120;
          *(_DWORD *)uint64_t v49 = 136446466;
          uint64_t v50 = StaticString.description.getter();
          uint64_t v121 = (char *)a4;
          uint64_t v124 = sub_1000A2E70(v50, v51, &v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v49 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *uint64_t v52 = v43;
          swift_storeEnumTagMultiPayload();
          id v53 = v44;
          uint64_t v54 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v124 = v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v117 = v54;
          a4 = v121;

          _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v118, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v49, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v106 = v43;
LABEL_70:
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v108 = type metadata accessor for Logger();
        (*(void (**)(NSObject *, uint64_t))(*(void *)(v108 - 8) + 8))(a4, v108);
LABEL_76:
        swift_errorRelease();
        return v45;
      }
      sub_1000C9DB4((uint64_t)&v117 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    swift_errorRelease();
    v125[0] = v34;
    swift_errorRetain();
    if (swift_dynamicCast() && (v124 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v80 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v80 = swift_allocError();
        unsigned char *v109 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      unint64_t v110 = a4;
      os_log_type_t v45 = Logger.logObject.getter();
      os_log_type_t v111 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v45, v111))
      {
        uint64_t v112 = (uint8_t *)swift_slowAlloc();
        int v113 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v112 = 138412290;
        swift_errorRetain();
        uint64_t v114 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v126 = v114;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *int v113 = v114;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v45, v111, "The preflight error %@ did not result in a TTR", v112, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      sub_10023C5AC(v80);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v115 = type metadata accessor for Logger();
      (*(void (**)(NSObject *, uint64_t))(*(void *)(v115 - 8) + 8))(v110, v115);
      goto LABEL_76;
    }
    uint64_t v73 = swift_errorRelease();
    v125[0] = v34;
    __chkstk_darwin(v73);
    uint64_t v74 = (uint64_t *)((char *)&v117 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v76 = *v74;
        unint64_t v75 = v74[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v45 = Logger.logObject.getter();
        os_log_type_t v77 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v45, v77))
        {
          uint64_t v123 = v76;
          uint64_t v78 = swift_slowAlloc();
          uint64_t v121 = (char *)a4;
          uint64_t v79 = (uint8_t *)v78;
          uint64_t v126 = swift_slowAlloc();
          *(_DWORD *)uint64_t v79 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v124 = sub_1000A2E70(v123, v75, &v126);
          uint64_t v76 = v123;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v45, v77, "askForTime response handling did not find ask request identifier %s", v79, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          a4 = v121;
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v107 = v76;
        v107[1] = v75;
        goto LABEL_70;
      }
      sub_1000C9DB4((uint64_t)v74);
    }
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v45 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.fault.getter();
    BOOL v82 = os_log_type_enabled(v45, v81);
    int v119 = a3;
    if (v82)
    {
      uint64_t v83 = swift_slowAlloc();
      uint64_t v84 = (void *)swift_slowAlloc();
      v125[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v83 = 136446466;
      uint64_t v85 = StaticString.description.getter();
      uint64_t v121 = (char *)a4;
      uint64_t v126 = sub_1000A2E70(v85, v86, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v83 + 12) = 2114;
      swift_errorRetain();
      uint64_t v87 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v126 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v84 = v87;
      a4 = v121;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, v81, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v83, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v120) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v120)
      {
LABEL_65:
        sub_10023C5AC(v34);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v105 = type metadata accessor for Logger();
        (*(void (**)(NSObject *, uint64_t))(*(void *)(v105 - 8) + 8))(a4, v105);
        return v45;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v88 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v88 = 1;
    }
    if (!v88 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      uint64_t v91 = sub_10009EE78(&qword_100340F10);
      uint64_t v121 = (char *)&v117;
      __chkstk_darwin(v91 - 8);
      unint64_t v93 = (char *)&v117 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v120 = (uint64_t)v93;
      uint64_t v94 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 56))(v93, 1, 1, v94);
      uint64_t v95 = type metadata accessor for Logger();
      uint64_t v118 = &v117;
      uint64_t v96 = *(void *)(v95 - 8);
      uint64_t v97 = *(void *)(v96 + 64);
      __chkstk_darwin(v95);
      uint64_t v98 = (char *)&v117 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, NSObject *, uint64_t))(v96 + 16))(v98, a4, v95);
      unint64_t v99 = (*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
      os_log_type_t v45 = a4;
      unint64_t v100 = (v99 + v97 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v101 = (v99 + v97 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v102 = swift_allocObject();
      *(void *)(v102 + 16) = 0;
      *(void *)(v102 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v96 + 32))(v102 + v99, v98, v95);
      unint64_t v103 = v102 + v100;
      a4 = v45;
      uint64_t v104 = v123;
      *(void *)unint64_t v103 = v122;
      *(void *)(v103 + 8) = v104;
      *(unsigned char *)(v103 + 16) = v119;
      *(void *)(v102 + v101) = v34;
      swift_errorRetain();
      sub_1000A27A0(v120, (uint64_t)&unk_100343810, v102);
      swift_release();
    }
    goto LABEL_65;
  }
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  if (a5)
  {
    if (v22)
    {
      BOOL v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Starting preflight.", v23, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Preflight complete", v26, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "The preflight did not complete as expected.", v29, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v34 = swift_allocError();
      char v35 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v22)
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      v125[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v59 = 136446210;
      uint64_t v60 = StaticString.description.getter();
      uint64_t v126 = sub_1000A2E70(v60, v61, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s has opted out of preflight.", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    os_log_type_t v64 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Starting the activity.", v64, 2u);
    swift_slowDealloc();
  }
  uint64_t v65 = a4;

  if (qword_100340D60 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v66 = qword_10034B2D0;
  uint64_t v67 = sub_1000C5860(qword_10034B2B8, qword_10034B2D0);
  uint64_t v68 = *(void *)(v66 - 8);
  __chkstk_darwin(v67);
  uint64_t v70 = (char *)&v117 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v68 + 16))(v70);
  uint64_t v71 = *((void *)v70 + 2);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v70, v66);
  os_log_type_t v45 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:v71];
  uint64_t v72 = type metadata accessor for Logger();
  (*(void (**)(NSObject *, uint64_t))(*(void *)(v72 - 8) + 8))(v65, v72);
  swift_release();
  return v45;
}

objc_class *sub_10012ED1C(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, void *a8)
{
  v9 = v8;
  uint64_t v124 = a8;
  LODWORD(v120) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v121 = a1;
  uint64_t v122 = a2;
  LODWORD(v123) = a3;
  os_log_type_t v16 = sub_10010D0A4(a1, a2, a3);
  swift_beginAccess();
  uint64_t v17 = swift_unknownObjectRetain();
  os_activity_scope_enter(v17, (os_activity_scope_state_t)(v16 + 24));
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    char v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Checking for first unlock.", v20, 2u);
    v9 = v8;
    swift_slowDealloc();
  }

  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      os_log_type_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v36, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100343650);
    sub_10019055C(&qword_100343658, &qword_100343650);
    goto LABEL_19;
  }
  os_log_type_t v21 = (objc_class *)type metadata accessor for ScreenTimeFeatureFlags();
  v126[3] = v21;
  v126[4] = (Class)sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  BOOL v22 = sub_1000C532C((uint64_t *)v126);
  (*(void (**)(uint64_t *, void, objc_class *))(*((void *)v21 - 1) + 104))(v22, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v21);
  char v23 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v126);
  os_log_type_t v24 = Logger.logObject.getter();
  if ((v23 & 1) == 0)
  {
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      v126[0] = (Class)swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136446210;
      uint64_t v117 = (uint64_t *)(v40 + 4);
      uint64_t v41 = StaticString.description.getter();
      uint64_t v42 = a4;
      uint64_t v43 = a7;
      uint64_t v44 = v42;
      uint64_t v127 = sub_1000A2E70(v41, v45, (uint64_t *)v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v46 = v44;
      a7 = v43;
      a4 = v46;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v39, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100343650);
    sub_10019055C(&qword_100343658, &qword_100343650);
    os_log_type_t v37 = (objc_class *)swift_allocError();
    *int v47 = 1;
    goto LABEL_23;
  }
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  if (a5)
  {
    if (v26)
    {
      os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Starting preflight.", v27, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Preflight complete", v30, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "The preflight did not complete as expected.", v33, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      os_log_type_t v37 = (objc_class *)swift_allocError();
      *uint64_t v38 = 0;
LABEL_23:
      swift_willThrow();
      swift_release();
LABEL_24:
      v126[0] = v37;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      sub_10009EE78(&qword_100343650);
      if (swift_dynamicCast() && (v127 & 1) == 0)
      {
        swift_errorRelease();
        os_log_type_t v37 = (objc_class *)Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.error.getter();
        if (os_log_type_enabled((os_log_t)v37, v60))
        {
          unint64_t v61 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v61 = 0;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v37, v60, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v61, 2u);
          swift_slowDealloc();
        }

        sub_10019055C(&qword_100343658, &qword_100343650);
        swift_allocError();
        *uint64_t v62 = 0;
        swift_willThrow();
        uint64_t v63 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(a4, v63);
        swift_errorRelease();

        goto LABEL_76;
      }
      swift_errorRelease();
      v126[0] = v37;
      uint64_t v48 = type metadata accessor for DataStore.DataStoreError(0);
      uint64_t v49 = *(void *)(*(void *)(v48 - 8) + 64);
      __chkstk_darwin(v48);
      uint64_t v50 = (id *)((char *)&v115 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
      swift_errorRetain();
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 37)
        {
          uint64_t v118 = a7;
          swift_errorRelease();
          unint64_t v51 = (uint64_t *)*v50;
          id v52 = *v50;
          uint64_t v119 = a4;
          os_log_type_t v37 = (objc_class *)Logger.logObject.getter();
          os_log_type_t v53 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled((os_log_t)v37, v53))
          {
            uint64_t v54 = swift_slowAlloc();
            uint64_t v116 = (void *)swift_slowAlloc();
            uint64_t v117 = (uint64_t *)swift_slowAlloc();
            uint64_t v127 = (uint64_t)v117;
            *(_DWORD *)uint64_t v54 = 136446466;
            uint64_t v120 = v51;
            uint64_t v55 = StaticString.description.getter();
            uint64_t v125 = sub_1000A2E70(v55, v56, &v127);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v54 + 12) = 2114;
            sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
            swift_allocError();
            *os_log_type_t v57 = v120;
            swift_storeEnumTagMultiPayload();
            id v58 = v52;
            uint64_t v59 = _swift_stdlib_bridgeErrorToNSError();
            uint64_t v125 = v59;
            unint64_t v51 = v120;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v116 = v59;

            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v37, v53, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v54, 0x16u);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          NSObject *v104 = v51;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          uint64_t v105 = type metadata accessor for Logger();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(v119, v105);
          swift_errorRelease();

LABEL_76:
          swift_release();
          return v37;
        }
        sub_1000C9DB4((uint64_t)&v115 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
      }
      swift_errorRelease();
      v126[0] = v37;
      swift_errorRetain();
      if (swift_dynamicCast() && (v125 & 1) == 0)
      {
        swift_errorRelease();
        if (qword_10034B2B0)
        {
          os_log_type_t v37 = (objc_class *)qword_10034B2B0;
        }
        else
        {
          sub_1000C51B4();
          os_log_type_t v37 = (objc_class *)swift_allocError();
          unsigned char *v108 = 0;
        }
        swift_errorRetain();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v109 = Logger.logObject.getter();
        os_log_type_t v110 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v109, v110))
        {
          os_log_type_t v111 = (uint8_t *)swift_slowAlloc();
          uint64_t v123 = (void *)swift_slowAlloc();
          *(_DWORD *)os_log_type_t v111 = 138412290;
          swift_errorRetain();
          uint64_t v112 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v127 = v112;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v123 = v112;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v109, v110, "The preflight error %@ did not result in a TTR", v111, 0xCu);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        sub_10023C5AC(v37);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v113 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v113 - 8) + 8))(a4, v113);
        swift_errorRelease();

        goto LABEL_76;
      }
      uint64_t v64 = swift_errorRelease();
      v126[0] = v37;
      __chkstk_darwin(v64);
      uint64_t v65 = (uint64_t *)((char *)&v115 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
      swift_errorRetain();
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 22)
        {
          swift_errorRelease();
          uint64_t v66 = (void *)*v65;
          os_log_type_t v37 = (objc_class *)v65[1];
          swift_bridgeObjectRetain_n();
          uint64_t v67 = Logger.logObject.getter();
          os_log_type_t v68 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v67, v68))
          {
            uint64_t v69 = (uint8_t *)swift_slowAlloc();
            uint64_t v70 = swift_slowAlloc();
            uint64_t v123 = v66;
            uint64_t v127 = v70;
            uint64_t v118 = a7;
            uint64_t v119 = a4;
            *(_DWORD *)uint64_t v69 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v125 = sub_1000A2E70((uint64_t)v123, (unint64_t)v37, &v127);
            a4 = v119;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v67, v68, "askForTime response handling did not find ask request identifier %s", v69, 0xCu);
            swift_arrayDestroy();
            uint64_t v66 = v123;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }

          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v106 = v66;
          v106[1] = v37;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          uint64_t v107 = type metadata accessor for Logger();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 8))(a4, v107);
          swift_errorRelease();

          goto LABEL_76;
        }
        sub_1000C9DB4((uint64_t)&v115 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
      }
      swift_errorRelease();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.fault.getter();
      BOOL v79 = os_log_type_enabled(v77, v78);
      uint64_t v118 = a7;
      uint64_t v119 = a4;
      if (v79)
      {
        uint64_t v80 = swift_slowAlloc();
        os_log_type_t v81 = (void *)swift_slowAlloc();
        v126[0] = (Class)swift_slowAlloc();
        *(_DWORD *)uint64_t v80 = 136446466;
        uint64_t v82 = StaticString.description.getter();
        uint64_t v127 = sub_1000A2E70(v82, v83, (uint64_t *)v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v80 + 12) = 2114;
        swift_errorRetain();
        uint64_t v84 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v127 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v81 = v84;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v80, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      if ((v120 & 1) == 0)
      {
        BOOL v85 = !&class metadata base offset for TapToRadarService || &type metadata accessor for TapToRadarService == 0;
        BOOL v86 = v85 || &type metadata for TapToRadarService == 0;
        if (!v86 && &nominal type descriptor for TapToRadarService != 0)
        {
          uint64_t v88 = sub_10009EE78(&qword_100340F10);
          uint64_t v120 = &v115;
          __chkstk_darwin(v88 - 8);
          uint64_t v90 = (char *)&v115 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v91 = type metadata accessor for TaskPriority();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v90, 1, 1, v91);
          uint64_t v92 = type metadata accessor for Logger();
          uint64_t v117 = &v115;
          uint64_t v93 = *(void *)(v92 - 8);
          uint64_t v94 = *(void *)(v93 + 64);
          __chkstk_darwin(v92);
          uint64_t v95 = (char *)&v115 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v95, v119, v92);
          unint64_t v96 = (*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
          unint64_t v97 = (v96 + v94 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v98 = (v96 + v94 + 31) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v99 = swift_allocObject();
          *(void *)(v99 + 16) = 0;
          *(void *)(v99 + 24) = 0;
          (*(void (**)(unint64_t, char *, uint64_t))(v93 + 32))(v99 + v96, v95, v92);
          unint64_t v100 = v99 + v97;
          uint64_t v101 = v122;
          *(void *)unint64_t v100 = v121;
          *(void *)(v100 + 8) = v101;
          *(unsigned char *)(v100 + 16) = (_BYTE)v123;
          *(void *)(v99 + v98) = v37;
          swift_errorRetain();
          sub_1000A27A0((uint64_t)v90, (uint64_t)&unk_100343660, v99);
          swift_release();
        }
      }
      sub_10023C5AC(v37);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v102 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(v119, v102);

      goto LABEL_76;
    }
  }
  else
  {
    if (v26)
    {
      uint64_t v117 = (uint64_t *)v16;
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      uint64_t v116 = v9;
      v126[0] = (Class)swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 136446210;
      uint64_t v72 = StaticString.description.getter();
      uint64_t v127 = sub_1000A2E70(v72, v73, (uint64_t *)v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s has opted out of preflight.", v71, 0xCu);
      swift_arrayDestroy();
      v9 = v116;
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v76 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v76 = 0;
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Starting the activity.", v76, 2u);
    swift_slowDealloc();
  }

  sub_1001C1E04(a7, v124, v126);
  if (v9)
  {
    swift_release();
    os_log_type_t v37 = (objc_class *)v9;
    goto LABEL_24;
  }
  uint64_t v103 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8))(a4, v103);
  swift_release();
  os_log_type_t v37 = v126[0];

  swift_release();
  return v37;
}

NSObject *sub_100130278(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  v8 = v7;
  LODWORD(v117) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v119 = a1;
  uint64_t v120 = a2;
  os_log_type_t v15 = (os_activity_scope_state_s *)(sub_10010D0A4(a1, a2, a3) + 24);
  swift_beginAccess();
  os_log_type_t v16 = swift_unknownObjectRetain();
  os_activity_scope_enter(v16, v15);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Checking for first unlock.", v19, 2u);
    v8 = v7;
    swift_slowDealloc();
  }

  int v118 = a3;
  if (!MKBUserUnlockedSinceBoot())
  {
    v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v35, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_1003436C8);
    sub_10019055C(&qword_1003436D0, &qword_1003436C8);
    goto LABEL_19;
  }
  uint64_t v20 = type metadata accessor for ScreenTimeFeatureFlags();
  uint64_t v123 = v20;
  uint64_t v124 = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  os_log_type_t v21 = sub_1000C532C((uint64_t *)&v122);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v21, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v20);
  char v22 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)&v122);
  char v23 = Logger.logObject.getter();
  if ((v22 & 1) == 0)
  {
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v38))
    {
      uint64_t v116 = (char *)a4;
      os_log_type_t v39 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v122 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v39 = 136446210;
      uint64_t v40 = StaticString.description.getter();
      uint64_t v125 = sub_1000A2E70(v40, v41, (uint64_t *)&v122);
      a4 = (uint64_t)v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v38, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_1003436C8);
    sub_10019055C(&qword_1003436D0, &qword_1003436C8);
    uint64_t v36 = swift_allocError();
    *uint64_t v42 = 1;
    goto LABEL_23;
  }
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  if (a5)
  {
    if (v25)
    {
      BOOL v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Starting preflight.", v26, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Preflight complete", v29, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "The preflight did not complete as expected.", v32, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v36 = swift_allocError();
      unsigned char *v37 = 0;
LABEL_23:
      swift_willThrow();
      swift_release();
LABEL_24:
      *(void *)&long long v122 = v36;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      sub_10009EE78(&qword_1003436C8);
      if (swift_dynamicCast() && (v125 & 1) == 0)
      {
        swift_errorRelease();
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v46, v57))
        {
          id v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v58 = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, v57, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v58, 2u);
          swift_slowDealloc();
        }

        sub_10019055C(&qword_1003436D0, &qword_1003436C8);
        swift_allocError();
        *uint64_t v59 = 0;
        swift_willThrow();
      }
      else
      {
        swift_errorRelease();
        *(void *)&long long v122 = v36;
        uint64_t v43 = type metadata accessor for DataStore.DataStoreError(0);
        uint64_t v44 = *(void *)(*(void *)(v43 - 8) + 64);
        __chkstk_darwin(v43);
        unint64_t v45 = (id *)((char *)&v112 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
        swift_errorRetain();
        if (swift_dynamicCast())
        {
          if (swift_getEnumCaseMultiPayload() == 37)
          {
            swift_errorRelease();
            uint64_t v46 = *v45;
            id v47 = *v45;
            uint64_t v48 = Logger.logObject.getter();
            os_log_type_t v49 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v48, v49))
            {
              uint64_t v50 = swift_slowAlloc();
              uint64_t v117 = v46;
              uint64_t v51 = v50;
              uint64_t v113 = (void *)swift_slowAlloc();
              uint64_t v114 = (uint64_t *)swift_slowAlloc();
              uint64_t v125 = (uint64_t)v114;
              *(_DWORD *)uint64_t v51 = 136446466;
              uint64_t v115 = a7;
              uint64_t v52 = StaticString.description.getter();
              uint64_t v121 = sub_1000A2E70(v52, v53, &v125);
              uint64_t v116 = (char *)a4;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v51 + 12) = 2114;
              sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
              swift_allocError();
              *uint64_t v54 = v117;
              swift_storeEnumTagMultiPayload();
              id v55 = v47;
              uint64_t v56 = _swift_stdlib_bridgeErrorToNSError();
              uint64_t v121 = v56;
              a4 = (uint64_t)v116;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v113 = v56;

              _os_log_impl((void *)&_mh_execute_header, v48, v49, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v51, 0x16u);
              sub_10009EE78(&qword_100342AB0);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v46 = v117;
              swift_slowDealloc();
            }
            else
            {
            }
            sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
            swift_allocError();
            *uint64_t v99 = v46;
            swift_storeEnumTagMultiPayload();
            swift_willThrow();
            uint64_t v100 = type metadata accessor for Logger();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8))(a4, v100);
            goto LABEL_77;
          }
          sub_1000C9DB4((uint64_t)&v112 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
        }
        swift_errorRelease();
        *(void *)&long long v122 = v36;
        swift_errorRetain();
        if (!swift_dynamicCast() || (v121 & 1) != 0)
        {
          uint64_t v60 = swift_errorRelease();
          *(void *)&long long v122 = v36;
          __chkstk_darwin(v60);
          unint64_t v61 = (uint64_t *)((char *)&v112 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
          swift_errorRetain();
          if (swift_dynamicCast())
          {
            if (swift_getEnumCaseMultiPayload() == 22)
            {
              swift_errorRelease();
              uint64_t v62 = *v61;
              uint64_t v46 = v61[1];
              swift_bridgeObjectRetain_n();
              uint64_t v116 = (char *)a4;
              uint64_t v63 = Logger.logObject.getter();
              os_log_type_t v64 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v63, v64))
              {
                uint64_t v120 = v62;
                uint64_t v65 = (uint8_t *)swift_slowAlloc();
                uint64_t v66 = swift_slowAlloc();
                uint64_t v115 = a7;
                uint64_t v125 = v66;
                *(_DWORD *)uint64_t v65 = 136315138;
                swift_bridgeObjectRetain();
                uint64_t v121 = sub_1000A2E70(v120, (unint64_t)v46, &v125);
                uint64_t v62 = v120;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v63, v64, "askForTime response handling did not find ask request identifier %s", v65, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                swift_bridgeObjectRelease_n();
              }

              sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
              swift_allocError();
              *uint64_t v101 = v62;
              v101[1] = (uint64_t)v46;
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              uint64_t v102 = type metadata accessor for Logger();
              (*(void (**)(char *, uint64_t))(*(void *)(v102 - 8) + 8))(v116, v102);
              goto LABEL_77;
            }
            sub_1000C9DB4((uint64_t)v61);
          }
          swift_errorRelease();
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v46 = Logger.logObject.getter();
          os_log_type_t v73 = static os_log_type_t.fault.getter();
          BOOL v74 = os_log_type_enabled(v46, v73);
          uint64_t v115 = a7;
          if (v74)
          {
            uint64_t v75 = swift_slowAlloc();
            uint64_t v76 = (void *)swift_slowAlloc();
            *(void *)&long long v122 = swift_slowAlloc();
            *(_DWORD *)uint64_t v75 = 136446466;
            uint64_t v77 = StaticString.description.getter();
            uint64_t v116 = (char *)a4;
            uint64_t v125 = sub_1000A2E70(v77, v78, (uint64_t *)&v122);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v75 + 12) = 2114;
            swift_errorRetain();
            uint64_t v79 = _swift_stdlib_bridgeErrorToNSError();
            uint64_t v125 = v79;
            a4 = (uint64_t)v116;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v76 = v79;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v46, v73, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v75, 0x16u);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            if (v117) {
              goto LABEL_65;
            }
          }
          else
          {

            swift_errorRelease();
            swift_errorRelease();
            if (v117)
            {
LABEL_65:
              sub_10023C5AC(v36);
              swift_willThrow();
              swift_errorRelease();
              uint64_t v97 = type metadata accessor for Logger();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v97 - 8) + 8))(a4, v97);
LABEL_78:
              swift_release();
              return v46;
            }
          }
          if (&class metadata base offset for TapToRadarService) {
            BOOL v80 = &type metadata accessor for TapToRadarService == 0;
          }
          else {
            BOOL v80 = 1;
          }
          if (!v80
            && &type metadata for TapToRadarService != 0
            && &nominal type descriptor for TapToRadarService != 0)
          {
            uint64_t v83 = sub_10009EE78(&qword_100340F10);
            uint64_t v117 = &v112;
            __chkstk_darwin(v83 - 8);
            BOOL v85 = (char *)&v112 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v116 = v85;
            uint64_t v86 = type metadata accessor for TaskPriority();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v85, 1, 1, v86);
            uint64_t v87 = type metadata accessor for Logger();
            uint64_t v114 = &v112;
            uint64_t v88 = *(void *)(v87 - 8);
            uint64_t v89 = *(void *)(v88 + 64);
            __chkstk_darwin(v87);
            uint64_t v90 = (char *)&v112 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v90, a4, v87);
            unint64_t v91 = (*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
            unint64_t v92 = (v91 + v89 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v46 = a4;
            unint64_t v93 = (v91 + v89 + 31) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v94 = swift_allocObject();
            *(void *)(v94 + 16) = 0;
            *(void *)(v94 + 24) = 0;
            (*(void (**)(unint64_t, char *, uint64_t))(v88 + 32))(v94 + v91, v90, v87);
            unint64_t v95 = v94 + v92;
            uint64_t v96 = v120;
            *(void *)unint64_t v95 = v119;
            *(void *)(v95 + 8) = v96;
            *(unsigned char *)(v95 + 16) = v118;
            *(void *)(v94 + v93) = v36;
            a4 = (uint64_t)v46;
            swift_errorRetain();
            sub_1000A27A0((uint64_t)v116, (uint64_t)&unk_1003436D8, v94);
            swift_release();
          }
          goto LABEL_65;
        }
        swift_errorRelease();
        if (qword_10034B2B0)
        {
          uint64_t v46 = qword_10034B2B0;
        }
        else
        {
          sub_1000C51B4();
          uint64_t v46 = swift_allocError();
          *uint64_t v103 = 0;
        }
        swift_errorRetain();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v104 = Logger.logObject.getter();
        os_log_type_t v105 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v104, v105))
        {
          unint64_t v106 = (uint8_t *)swift_slowAlloc();
          uint64_t v107 = swift_slowAlloc();
          uint64_t v116 = (char *)a4;
          uint64_t v108 = (void *)v107;
          *(_DWORD *)unint64_t v106 = 138412290;
          swift_errorRetain();
          uint64_t v109 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v125 = v109;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v108 = v109;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v104, v105, "The preflight error %@ did not result in a TTR", v106, 0xCu);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          a4 = (uint64_t)v116;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        sub_10023C5AC(v46);
        swift_willThrow();
        swift_errorRelease();
      }
      uint64_t v110 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(a4, v110);
LABEL_77:
      swift_errorRelease();
      goto LABEL_78;
    }
  }
  else
  {
    if (v25)
    {
      uint64_t v116 = (char *)a4;
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      uint64_t v114 = v8;
      *(void *)&long long v122 = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136446210;
      uint64_t v68 = StaticString.description.getter();
      uint64_t v125 = sub_1000A2E70(v68, v69, (uint64_t *)&v122);
      a4 = (uint64_t)v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s has opted out of preflight.", v67, 0xCu);
      swift_arrayDestroy();
      v8 = v114;
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v70, v71))
  {
    uint64_t v72 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v72 = 0;
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "Starting the activity.", v72, 2u);
    swift_slowDealloc();
  }

  sub_1001BA918(a7, &v122);
  if (v8)
  {
    swift_release();
    uint64_t v36 = (uint64_t)v8;
    goto LABEL_24;
  }
  uint64_t v98 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v98 - 8) + 8))(a4, v98);
  swift_release();
  uint64_t v46 = v122;
  swift_release();
  return v46;
}

NSObject *sub_100131728(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, void *a8)
{
  v9 = v8;
  uint64_t v124 = a8;
  LODWORD(v120) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v121 = a1;
  uint64_t v122 = a2;
  LODWORD(v123) = a3;
  os_log_type_t v16 = sub_10010D0A4(a1, a2, a3);
  swift_beginAccess();
  uint64_t v17 = swift_unknownObjectRetain();
  os_activity_scope_enter(v17, (os_activity_scope_state_t)(v16 + 24));
  swift_endAccess();
  swift_unknownObjectRelease();
  os_log_type_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Checking for first unlock.", v20, 2u);
    v9 = v8;
    swift_slowDealloc();
  }

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v36, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_1003436A0);
    sub_10019055C(&qword_1003436A8, &qword_1003436A0);
    goto LABEL_19;
  }
  os_log_type_t v21 = type metadata accessor for ScreenTimeFeatureFlags();
  v126[3] = v21;
  v126[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  char v22 = sub_1000C532C((uint64_t *)v126);
  (*((void (**)(uint64_t *, void, NSObject *))v21[-1].isa + 13))(v22, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v21);
  char v23 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v126);
  os_log_type_t v24 = Logger.logObject.getter();
  if ((v23 & 1) == 0)
  {
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      v126[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136446210;
      uint64_t v117 = (uint64_t *)(v40 + 4);
      uint64_t v41 = StaticString.description.getter();
      uint64_t v42 = a4;
      uint64_t v43 = a7;
      uint64_t v44 = v42;
      uint64_t v127 = sub_1000A2E70(v41, v45, (uint64_t *)v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v46 = v44;
      a7 = v43;
      a4 = v46;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v39, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_1003436A0);
    sub_10019055C(&qword_1003436A8, &qword_1003436A0);
    os_log_type_t v37 = swift_allocError();
    *id v47 = 1;
    goto LABEL_23;
  }
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  if (a5)
  {
    if (v26)
    {
      os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Starting preflight.", v27, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Preflight complete", v30, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "The preflight did not complete as expected.", v33, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      os_log_type_t v37 = swift_allocError();
      *os_log_type_t v38 = 0;
LABEL_23:
      swift_willThrow();
      swift_release();
LABEL_24:
      v126[0] = v37;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      sub_10009EE78(&qword_1003436A0);
      if (swift_dynamicCast() && (v127 & 1) == 0)
      {
        swift_errorRelease();
        os_log_type_t v37 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v60))
        {
          unint64_t v61 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v61 = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, v60, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v61, 2u);
          swift_slowDealloc();
        }

        sub_10019055C(&qword_1003436A8, &qword_1003436A0);
        swift_allocError();
        *uint64_t v62 = 0;
        swift_willThrow();
        uint64_t v63 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(a4, v63);
        swift_errorRelease();

        goto LABEL_76;
      }
      swift_errorRelease();
      v126[0] = v37;
      uint64_t v48 = type metadata accessor for DataStore.DataStoreError(0);
      uint64_t v49 = *(void *)(*(void *)(v48 - 8) + 64);
      __chkstk_darwin(v48);
      uint64_t v50 = (id *)((char *)&v115 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
      swift_errorRetain();
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 37)
        {
          uint64_t v118 = a7;
          swift_errorRelease();
          uint64_t v51 = (uint64_t *)*v50;
          id v52 = *v50;
          uint64_t v119 = a4;
          os_log_type_t v37 = Logger.logObject.getter();
          os_log_type_t v53 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v37, v53))
          {
            uint64_t v54 = swift_slowAlloc();
            uint64_t v116 = swift_slowAlloc();
            uint64_t v117 = (uint64_t *)swift_slowAlloc();
            uint64_t v127 = (uint64_t)v117;
            *(_DWORD *)uint64_t v54 = 136446466;
            uint64_t v120 = v51;
            uint64_t v55 = StaticString.description.getter();
            uint64_t v125 = sub_1000A2E70(v55, v56, &v127);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v54 + 12) = 2114;
            sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
            swift_allocError();
            *os_log_type_t v57 = v120;
            swift_storeEnumTagMultiPayload();
            id v58 = v52;
            uint64_t v59 = _swift_stdlib_bridgeErrorToNSError();
            uint64_t v125 = v59;
            uint64_t v51 = v120;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v116->isa = (Class)v59;

            _os_log_impl((void *)&_mh_execute_header, v37, v53, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v54, 0x16u);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          NSObject *v104 = v51;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          uint64_t v105 = type metadata accessor for Logger();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(v119, v105);
          swift_errorRelease();

LABEL_76:
          swift_release();
          return v37;
        }
        sub_1000C9DB4((uint64_t)&v115 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
      }
      swift_errorRelease();
      v126[0] = v37;
      swift_errorRetain();
      if (swift_dynamicCast() && (v125 & 1) == 0)
      {
        swift_errorRelease();
        if (qword_10034B2B0)
        {
          os_log_type_t v37 = qword_10034B2B0;
        }
        else
        {
          sub_1000C51B4();
          os_log_type_t v37 = swift_allocError();
          unsigned char *v108 = 0;
        }
        swift_errorRetain();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v109 = Logger.logObject.getter();
        os_log_type_t v110 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v109, v110))
        {
          os_log_type_t v111 = (uint8_t *)swift_slowAlloc();
          uint64_t v123 = (void *)swift_slowAlloc();
          *(_DWORD *)os_log_type_t v111 = 138412290;
          swift_errorRetain();
          uint64_t v112 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v127 = v112;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v123 = v112;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v109, v110, "The preflight error %@ did not result in a TTR", v111, 0xCu);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        sub_10023C5AC(v37);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v113 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v113 - 8) + 8))(a4, v113);
        swift_errorRelease();

        goto LABEL_76;
      }
      uint64_t v64 = swift_errorRelease();
      v126[0] = v37;
      __chkstk_darwin(v64);
      uint64_t v65 = (uint64_t *)((char *)&v115 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
      swift_errorRetain();
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 22)
        {
          swift_errorRelease();
          uint64_t v66 = (void *)*v65;
          os_log_type_t v37 = v65[1];
          swift_bridgeObjectRetain_n();
          uint64_t v67 = Logger.logObject.getter();
          os_log_type_t v68 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v67, v68))
          {
            unint64_t v69 = (uint8_t *)swift_slowAlloc();
            uint64_t v70 = swift_slowAlloc();
            uint64_t v123 = v66;
            uint64_t v127 = v70;
            uint64_t v118 = a7;
            uint64_t v119 = a4;
            *(_DWORD *)unint64_t v69 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v125 = sub_1000A2E70((uint64_t)v123, (unint64_t)v37, &v127);
            a4 = v119;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v67, v68, "askForTime response handling did not find ask request identifier %s", v69, 0xCu);
            swift_arrayDestroy();
            uint64_t v66 = v123;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }

          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v106 = v66;
          v106[1] = v37;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          uint64_t v107 = type metadata accessor for Logger();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 8))(a4, v107);
          swift_errorRelease();

          goto LABEL_76;
        }
        sub_1000C9DB4((uint64_t)&v115 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
      }
      swift_errorRelease();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.fault.getter();
      BOOL v79 = os_log_type_enabled(v77, v78);
      uint64_t v118 = a7;
      uint64_t v119 = a4;
      if (v79)
      {
        uint64_t v80 = swift_slowAlloc();
        os_log_type_t v81 = (void *)swift_slowAlloc();
        v126[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v80 = 136446466;
        uint64_t v82 = StaticString.description.getter();
        uint64_t v127 = sub_1000A2E70(v82, v83, (uint64_t *)v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v80 + 12) = 2114;
        swift_errorRetain();
        uint64_t v84 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v127 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v81 = v84;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v80, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      if ((v120 & 1) == 0)
      {
        BOOL v85 = !&class metadata base offset for TapToRadarService || &type metadata accessor for TapToRadarService == 0;
        BOOL v86 = v85 || &type metadata for TapToRadarService == 0;
        if (!v86 && &nominal type descriptor for TapToRadarService != 0)
        {
          uint64_t v88 = sub_10009EE78(&qword_100340F10);
          uint64_t v120 = &v115;
          __chkstk_darwin(v88 - 8);
          uint64_t v90 = (char *)&v115 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v91 = type metadata accessor for TaskPriority();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v90, 1, 1, v91);
          uint64_t v92 = type metadata accessor for Logger();
          uint64_t v117 = &v115;
          uint64_t v93 = *(void *)(v92 - 8);
          uint64_t v94 = *(void *)(v93 + 64);
          __chkstk_darwin(v92);
          unint64_t v95 = (char *)&v115 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v95, v119, v92);
          unint64_t v96 = (*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
          unint64_t v97 = (v96 + v94 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v98 = (v96 + v94 + 31) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v99 = swift_allocObject();
          *(void *)(v99 + 16) = 0;
          *(void *)(v99 + 24) = 0;
          (*(void (**)(unint64_t, char *, uint64_t))(v93 + 32))(v99 + v96, v95, v92);
          unint64_t v100 = v99 + v97;
          uint64_t v101 = v122;
          *(void *)unint64_t v100 = v121;
          *(void *)(v100 + 8) = v101;
          *(unsigned char *)(v100 + 16) = (_BYTE)v123;
          *(void *)(v99 + v98) = v37;
          swift_errorRetain();
          sub_1000A27A0((uint64_t)v90, (uint64_t)&unk_1003436B0, v99);
          swift_release();
        }
      }
      sub_10023C5AC(v37);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v102 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(v119, v102);

      goto LABEL_76;
    }
  }
  else
  {
    if (v26)
    {
      uint64_t v117 = (uint64_t *)v16;
      os_log_type_t v71 = (uint8_t *)swift_slowAlloc();
      uint64_t v116 = v9;
      v126[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v71 = 136446210;
      uint64_t v72 = StaticString.description.getter();
      uint64_t v127 = sub_1000A2E70(v72, v73, (uint64_t *)v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s has opted out of preflight.", v71, 0xCu);
      swift_arrayDestroy();
      v9 = v116;
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  BOOL v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v76 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v76 = 0;
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Starting the activity.", v76, 2u);
    swift_slowDealloc();
  }

  sub_1001BC3FC(v124, v126);
  if (v9)
  {
    swift_release();
    os_log_type_t v37 = v9;
    goto LABEL_24;
  }
  uint64_t v103 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8))(a4, v103);
  swift_release();
  os_log_type_t v37 = v126[0];

  swift_release();
  return v37;
}

NSObject *sub_100132C84(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  v8 = v7;
  LODWORD(v117) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v119 = a1;
  uint64_t v120 = a2;
  os_log_type_t v15 = (os_activity_scope_state_s *)(sub_10010D0A4(a1, a2, a3) + 24);
  swift_beginAccess();
  os_log_type_t v16 = swift_unknownObjectRetain();
  os_activity_scope_enter(v16, v15);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Checking for first unlock.", v19, 2u);
    v8 = v7;
    swift_slowDealloc();
  }

  int v118 = a3;
  if (!MKBUserUnlockedSinceBoot())
  {
    v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v35, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100343688);
    sub_10019055C(&qword_100343690, &qword_100343688);
    goto LABEL_19;
  }
  uint64_t v20 = type metadata accessor for ScreenTimeFeatureFlags();
  v122[3] = v20;
  v122[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  os_log_type_t v21 = sub_1000C532C(v122);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v21, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v20);
  char v22 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v122);
  char v23 = Logger.logObject.getter();
  if ((v22 & 1) == 0)
  {
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v38))
    {
      uint64_t v116 = (char *)a4;
      os_log_type_t v39 = (uint8_t *)swift_slowAlloc();
      v122[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v39 = 136446210;
      uint64_t v40 = StaticString.description.getter();
      uint64_t v123 = sub_1000A2E70(v40, v41, v122);
      a4 = (uint64_t)v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v38, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100343688);
    sub_10019055C(&qword_100343690, &qword_100343688);
    uint64_t v36 = swift_allocError();
    *uint64_t v42 = 1;
    goto LABEL_23;
  }
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  if (a5)
  {
    if (v25)
    {
      BOOL v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Starting preflight.", v26, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Preflight complete", v29, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "The preflight did not complete as expected.", v32, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v36 = swift_allocError();
      unsigned char *v37 = 0;
LABEL_23:
      swift_willThrow();
      swift_release();
LABEL_24:
      v122[0] = v36;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      sub_10009EE78(&qword_100343688);
      if (swift_dynamicCast() && (v123 & 1) == 0)
      {
        swift_errorRelease();
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v46, v57))
        {
          id v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v58 = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, v57, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v58, 2u);
          swift_slowDealloc();
        }

        sub_10019055C(&qword_100343690, &qword_100343688);
        swift_allocError();
        *uint64_t v59 = 0;
        swift_willThrow();
      }
      else
      {
        swift_errorRelease();
        v122[0] = v36;
        uint64_t v43 = type metadata accessor for DataStore.DataStoreError(0);
        uint64_t v44 = *(void *)(*(void *)(v43 - 8) + 64);
        __chkstk_darwin(v43);
        unint64_t v45 = (id *)((char *)&v112 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
        swift_errorRetain();
        if (swift_dynamicCast())
        {
          if (swift_getEnumCaseMultiPayload() == 37)
          {
            swift_errorRelease();
            uint64_t v46 = *v45;
            id v47 = *v45;
            uint64_t v48 = Logger.logObject.getter();
            os_log_type_t v49 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v48, v49))
            {
              uint64_t v50 = swift_slowAlloc();
              uint64_t v117 = v46;
              uint64_t v51 = v50;
              uint64_t v113 = (void *)swift_slowAlloc();
              uint64_t v114 = (uint64_t *)swift_slowAlloc();
              uint64_t v123 = (uint64_t)v114;
              *(_DWORD *)uint64_t v51 = 136446466;
              uint64_t v115 = a7;
              uint64_t v52 = StaticString.description.getter();
              uint64_t v121 = sub_1000A2E70(v52, v53, &v123);
              uint64_t v116 = (char *)a4;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v51 + 12) = 2114;
              sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
              swift_allocError();
              *uint64_t v54 = v117;
              swift_storeEnumTagMultiPayload();
              id v55 = v47;
              uint64_t v56 = _swift_stdlib_bridgeErrorToNSError();
              uint64_t v121 = v56;
              a4 = (uint64_t)v116;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v113 = v56;

              _os_log_impl((void *)&_mh_execute_header, v48, v49, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v51, 0x16u);
              sub_10009EE78(&qword_100342AB0);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v46 = v117;
              swift_slowDealloc();
            }
            else
            {
            }
            sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
            swift_allocError();
            *uint64_t v99 = v46;
            swift_storeEnumTagMultiPayload();
            swift_willThrow();
            uint64_t v100 = type metadata accessor for Logger();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8))(a4, v100);
            goto LABEL_77;
          }
          sub_1000C9DB4((uint64_t)&v112 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
        }
        swift_errorRelease();
        v122[0] = v36;
        swift_errorRetain();
        if (!swift_dynamicCast() || (v121 & 1) != 0)
        {
          uint64_t v60 = swift_errorRelease();
          v122[0] = v36;
          __chkstk_darwin(v60);
          unint64_t v61 = (uint64_t *)((char *)&v112 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
          swift_errorRetain();
          if (swift_dynamicCast())
          {
            if (swift_getEnumCaseMultiPayload() == 22)
            {
              swift_errorRelease();
              uint64_t v62 = *v61;
              uint64_t v46 = v61[1];
              swift_bridgeObjectRetain_n();
              uint64_t v116 = (char *)a4;
              uint64_t v63 = Logger.logObject.getter();
              os_log_type_t v64 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v63, v64))
              {
                uint64_t v120 = v62;
                uint64_t v65 = (uint8_t *)swift_slowAlloc();
                uint64_t v66 = swift_slowAlloc();
                uint64_t v115 = a7;
                uint64_t v123 = v66;
                *(_DWORD *)uint64_t v65 = 136315138;
                swift_bridgeObjectRetain();
                uint64_t v121 = sub_1000A2E70(v120, (unint64_t)v46, &v123);
                uint64_t v62 = v120;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v63, v64, "askForTime response handling did not find ask request identifier %s", v65, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                swift_bridgeObjectRelease_n();
              }

              sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
              swift_allocError();
              *uint64_t v101 = v62;
              v101[1] = (uint64_t)v46;
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              uint64_t v102 = type metadata accessor for Logger();
              (*(void (**)(char *, uint64_t))(*(void *)(v102 - 8) + 8))(v116, v102);
              goto LABEL_77;
            }
            sub_1000C9DB4((uint64_t)v61);
          }
          swift_errorRelease();
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v46 = Logger.logObject.getter();
          os_log_type_t v73 = static os_log_type_t.fault.getter();
          BOOL v74 = os_log_type_enabled(v46, v73);
          uint64_t v115 = a7;
          if (v74)
          {
            uint64_t v75 = swift_slowAlloc();
            uint64_t v76 = (void *)swift_slowAlloc();
            v122[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v75 = 136446466;
            uint64_t v77 = StaticString.description.getter();
            uint64_t v116 = (char *)a4;
            uint64_t v123 = sub_1000A2E70(v77, v78, v122);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v75 + 12) = 2114;
            swift_errorRetain();
            uint64_t v79 = _swift_stdlib_bridgeErrorToNSError();
            uint64_t v123 = v79;
            a4 = (uint64_t)v116;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v76 = v79;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v46, v73, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v75, 0x16u);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            if (v117) {
              goto LABEL_65;
            }
          }
          else
          {

            swift_errorRelease();
            swift_errorRelease();
            if (v117)
            {
LABEL_65:
              sub_10023C5AC(v36);
              swift_willThrow();
              swift_errorRelease();
              uint64_t v97 = type metadata accessor for Logger();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v97 - 8) + 8))(a4, v97);
LABEL_78:
              swift_release();
              return v46;
            }
          }
          if (&class metadata base offset for TapToRadarService) {
            BOOL v80 = &type metadata accessor for TapToRadarService == 0;
          }
          else {
            BOOL v80 = 1;
          }
          if (!v80
            && &type metadata for TapToRadarService != 0
            && &nominal type descriptor for TapToRadarService != 0)
          {
            uint64_t v83 = sub_10009EE78(&qword_100340F10);
            uint64_t v117 = &v112;
            __chkstk_darwin(v83 - 8);
            BOOL v85 = (char *)&v112 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v116 = v85;
            uint64_t v86 = type metadata accessor for TaskPriority();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v85, 1, 1, v86);
            uint64_t v87 = type metadata accessor for Logger();
            uint64_t v114 = &v112;
            uint64_t v88 = *(void *)(v87 - 8);
            uint64_t v89 = *(void *)(v88 + 64);
            __chkstk_darwin(v87);
            uint64_t v90 = (char *)&v112 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v90, a4, v87);
            unint64_t v91 = (*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
            unint64_t v92 = (v91 + v89 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v46 = a4;
            unint64_t v93 = (v91 + v89 + 31) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v94 = swift_allocObject();
            *(void *)(v94 + 16) = 0;
            *(void *)(v94 + 24) = 0;
            (*(void (**)(unint64_t, char *, uint64_t))(v88 + 32))(v94 + v91, v90, v87);
            unint64_t v95 = v94 + v92;
            uint64_t v96 = v120;
            *(void *)unint64_t v95 = v119;
            *(void *)(v95 + 8) = v96;
            *(unsigned char *)(v95 + 16) = v118;
            *(void *)(v94 + v93) = v36;
            a4 = (uint64_t)v46;
            swift_errorRetain();
            sub_1000A27A0((uint64_t)v116, (uint64_t)&unk_100343698, v94);
            swift_release();
          }
          goto LABEL_65;
        }
        swift_errorRelease();
        if (qword_10034B2B0)
        {
          uint64_t v46 = qword_10034B2B0;
        }
        else
        {
          sub_1000C51B4();
          uint64_t v46 = swift_allocError();
          *uint64_t v103 = 0;
        }
        swift_errorRetain();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v104 = Logger.logObject.getter();
        os_log_type_t v105 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v104, v105))
        {
          unint64_t v106 = (uint8_t *)swift_slowAlloc();
          uint64_t v107 = swift_slowAlloc();
          uint64_t v116 = (char *)a4;
          uint64_t v108 = (void *)v107;
          *(_DWORD *)unint64_t v106 = 138412290;
          swift_errorRetain();
          uint64_t v109 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v123 = v109;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v108 = v109;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v104, v105, "The preflight error %@ did not result in a TTR", v106, 0xCu);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          a4 = (uint64_t)v116;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        sub_10023C5AC(v46);
        swift_willThrow();
        swift_errorRelease();
      }
      uint64_t v110 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(a4, v110);
LABEL_77:
      swift_errorRelease();
      goto LABEL_78;
    }
  }
  else
  {
    if (v25)
    {
      uint64_t v116 = (char *)a4;
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      uint64_t v114 = v8;
      v122[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136446210;
      uint64_t v68 = StaticString.description.getter();
      uint64_t v123 = sub_1000A2E70(v68, v69, v122);
      a4 = (uint64_t)v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s has opted out of preflight.", v67, 0xCu);
      swift_arrayDestroy();
      v8 = v114;
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v70, v71))
  {
    uint64_t v72 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v72 = 0;
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "Starting the activity.", v72, 2u);
    swift_slowDealloc();
  }

  sub_1001BCC5C(v122);
  if (v8)
  {
    swift_release();
    uint64_t v36 = (uint64_t)v8;
    goto LABEL_24;
  }
  uint64_t v98 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v98 - 8) + 8))(a4, v98);
  swift_release();
  uint64_t v46 = v122[0];
  swift_release();
  return v46;
}

void sub_100134134(char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>)
{
}

void sub_100134184(char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>)
{
}

void sub_1001341D4(char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(uint64_t, id))
{
  uint64_t v122 = (void *)a9;
  uint64_t v130 = a7;
  LODWORD(v124) = a6;
  uint64_t v18 = sub_10009EE78(&qword_100343570);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v126 = a1;
  uint64_t v127 = a2;
  LODWORD(v128) = a3;
  os_log_type_t v21 = (os_activity_scope_state_s *)(sub_10010D0A4(a1, a2, a3) + 24);
  swift_beginAccess();
  char v22 = swift_unknownObjectRetain();
  os_activity_scope_enter(v22, v21);
  swift_endAccess();
  swift_unknownObjectRelease();
  char v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    BOOL v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Checking for first unlock.", v25, 2u);
    swift_slowDealloc();
  }

  int v26 = MKBUserUnlockedSinceBoot();
  id v129 = a8;
  if (!v26)
  {
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v42, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100343578);
    sub_10019055C(&qword_100343580, &qword_100343578);
    goto LABEL_19;
  }
  uint64_t v27 = type metadata accessor for ScreenTimeFeatureFlags();
  v132[3] = v27;
  v132[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  os_log_type_t v28 = sub_1000C532C(v132);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v27 - 8) + 104))(v28, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v27);
  char v29 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v132);
  v30 = Logger.logObject.getter();
  if ((v29 & 1) == 0)
  {
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      v132[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 136446210;
      uint64_t v47 = StaticString.description.getter();
      uint64_t v133 = sub_1000A2E70(v47, v48, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v45, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100343578);
    sub_10019055C(&qword_100343580, &qword_100343578);
    uint64_t v43 = swift_allocError();
    *os_log_type_t v49 = 1;
    goto LABEL_23;
  }
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  if (a5)
  {
    if (v32)
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Starting preflight.", v33, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Preflight complete", v36, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        os_log_type_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "The preflight did not complete as expected.", v39, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v43 = swift_allocError();
      *uint64_t v44 = 0;
LABEL_23:
      swift_willThrow();
      swift_release();
      goto LABEL_24;
    }
  }
  else
  {
    if (v32)
    {
      BOOL v74 = (uint8_t *)swift_slowAlloc();
      v132[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v74 = 136446210;
      uint64_t v121 = v74 + 4;
      uint64_t v75 = StaticString.description.getter();
      uint64_t v133 = sub_1000A2E70(v75, v76, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%{public}s has opted out of preflight.", v74, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v125 = a4;
  uint64_t v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v77, v78))
  {
    uint64_t v79 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v79 = 0;
    _os_log_impl((void *)&_mh_execute_header, v77, v78, "Starting the activity.", v79, 2u);
    swift_slowDealloc();
  }

  uint64_t v80 = type metadata accessor for Date();
  uint64_t v81 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v83 = (char *)&v121 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v84 = v129;
  BOOL v85 = v123;
  a12(v130, v129);
  if (!v85)
  {
    uint64_t v110 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v125, v110);
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v20, v83, v80);
    sub_1000FDE9C((uint64_t)v20, (uint64_t)v122, &qword_100343570);
    swift_release();

    return;
  }
  swift_release();
  uint64_t v43 = (uint64_t)v85;
  a4 = v125;
LABEL_24:
  v132[0] = v43;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100343578);
  if (swift_dynamicCast() && (v133 & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v65, 2u);
      swift_slowDealloc();
    }

    sub_10019055C(&qword_100343580, &qword_100343578);
    swift_allocError();
    *uint64_t v66 = 0;
    swift_willThrow();
    goto LABEL_77;
  }
  swift_errorRelease();
  v132[0] = v43;
  uint64_t v50 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v51 = *(void *)(*(void *)(v50 - 8) + 64);
  __chkstk_darwin(v50);
  uint64_t v52 = (id *)((char *)&v121 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    if (swift_getEnumCaseMultiPayload() == 37)
    {
      swift_errorRelease();
      id v53 = *v52;
      id v54 = *v52;
      id v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = swift_slowAlloc();
        uint64_t v122 = (void *)swift_slowAlloc();
        uint64_t v123 = (void *)swift_slowAlloc();
        uint64_t v133 = (uint64_t)v123;
        *(_DWORD *)uint64_t v57 = 136446466;
        uint64_t v124 = (uint64_t)v53;
        uint64_t v58 = StaticString.description.getter();
        uint64_t v125 = a4;
        uint64_t v131 = sub_1000A2E70(v58, v59, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v57 + 12) = 2114;
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v60 = v124;
        swift_storeEnumTagMultiPayload();
        id v61 = v54;
        uint64_t v62 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v131 = v62;
        id v53 = (id)v124;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v122 = v62;
        a4 = v125;

        _os_log_impl((void *)&_mh_execute_header, v55, v56, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v57, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
      swift_allocError();
      void *v111 = v53;
LABEL_71:
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      uint64_t v113 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v113 - 8) + 8))(a4, v113);
LABEL_78:
      swift_errorRelease();
      goto LABEL_79;
    }
    sub_1000C9DB4((uint64_t)&v121 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  }
  swift_errorRelease();
  v132[0] = v43;
  swift_errorRetain();
  if (swift_dynamicCast() && (v131 & 1) == 0)
  {
    swift_errorRelease();
    if (qword_10034B2B0)
    {
      uint64_t v86 = qword_10034B2B0;
    }
    else
    {
      sub_1000C51B4();
      uint64_t v86 = swift_allocError();
      unsigned char *v114 = 0;
    }
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v115 = Logger.logObject.getter();
    os_log_type_t v116 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v115, v116))
    {
      uint64_t v117 = (uint8_t *)swift_slowAlloc();
      int v118 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v117 = 138412290;
      swift_errorRetain();
      uint64_t v119 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v133 = v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int v118 = v119;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v115, v116, "The preflight error %@ did not result in a TTR", v117, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    sub_10023C5AC(v86);
    swift_willThrow();
    swift_errorRelease();
LABEL_77:
    uint64_t v120 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v120 - 8) + 8))(a4, v120);
    goto LABEL_78;
  }
  uint64_t v67 = swift_errorRelease();
  v132[0] = v43;
  __chkstk_darwin(v67);
  uint64_t v68 = (uint64_t *)((char *)&v121 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    if (swift_getEnumCaseMultiPayload() == 22)
    {
      swift_errorRelease();
      uint64_t v70 = *v68;
      unint64_t v69 = v68[1];
      swift_bridgeObjectRetain_n();
      os_log_type_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v128 = v70;
        os_log_type_t v73 = (uint8_t *)swift_slowAlloc();
        uint64_t v133 = swift_slowAlloc();
        uint64_t v125 = a4;
        *(_DWORD *)os_log_type_t v73 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v131 = sub_1000A2E70(v128, v69, &v133);
        uint64_t v70 = v128;
        a4 = v125;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "askForTime response handling did not find ask request identifier %s", v73, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
      swift_allocError();
      *uint64_t v112 = v70;
      v112[1] = v69;
      goto LABEL_71;
    }
    sub_1000C9DB4((uint64_t)&v121 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  }
  swift_errorRelease();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v87 = Logger.logObject.getter();
  os_log_type_t v88 = static os_log_type_t.fault.getter();
  BOOL v89 = os_log_type_enabled(v87, v88);
  uint64_t v125 = a4;
  if (v89)
  {
    uint64_t v90 = swift_slowAlloc();
    unint64_t v91 = (void *)swift_slowAlloc();
    v132[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v90 = 136446466;
    uint64_t v92 = StaticString.description.getter();
    uint64_t v133 = sub_1000A2E70(v92, v93, v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v90 + 12) = 2114;
    swift_errorRetain();
    uint64_t v94 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v133 = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v91 = v94;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v87, v88, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v90, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (v124) {
      goto LABEL_65;
    }
LABEL_54:
    if (&class metadata base offset for TapToRadarService) {
      BOOL v95 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v95 = 1;
    }
    if (!v95 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      uint64_t v124 = a11;
      uint64_t v98 = sub_10009EE78(&qword_100340F10);
      uint64_t v123 = &v121;
      __chkstk_darwin(v98 - 8);
      uint64_t v100 = (char *)&v121 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v101 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v100, 1, 1, v101);
      uint64_t v102 = type metadata accessor for Logger();
      uint64_t v122 = &v121;
      uint64_t v103 = *(void *)(v102 - 8);
      uint64_t v104 = *(void *)(v103 + 64);
      __chkstk_darwin(v102);
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))((char *)&v121 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0), v125, v102);
      unint64_t v105 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
      uint64_t v106 = swift_allocObject();
      *(void *)(v106 + 16) = 0;
      *(void *)(v106 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v103 + 32))(v106 + v105, (char *)&v121 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0), v102);
      unint64_t v107 = v106 + ((v105 + v104 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v108 = v127;
      *(void *)unint64_t v107 = v126;
      *(void *)(v107 + 8) = v108;
      *(unsigned char *)(v107 + 16) = v128;
      *(void *)(v106 + ((v105 + v104 + 31) & 0xFFFFFFFFFFFFFFF8)) = v43;
      swift_errorRetain();
      sub_1000A27A0((uint64_t)v100, v124, v106);
      swift_release();
    }
    goto LABEL_65;
  }

  swift_errorRelease();
  swift_errorRelease();
  if ((v124 & 1) == 0) {
    goto LABEL_54;
  }
LABEL_65:
  sub_10023C5AC(v43);
  swift_willThrow();
  swift_errorRelease();
  uint64_t v109 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v109 - 8) + 8))(v125, v109);
LABEL_79:

  swift_release();
}

uint64_t sub_10013570C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  *(unsigned char *)(v7 + 284) = a6;
  *(unsigned char *)(v7 + 283) = a5;
  *(void *)(v7 + 232) = a4;
  *(void *)(v7 + 240) = a7;
  *(unsigned char *)(v7 + 282) = a3;
  *(void *)(v7 + 216) = a1;
  *(void *)(v7 + 224) = a2;
  return _swift_task_switch(sub_10013573C, 0, 0);
}

uint64_t sub_10013573C()
{
  uint64_t v119 = v0;
  uint64_t v1 = v0 + 216;
  v2 = *(char **)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  char v4 = *(unsigned char *)(v0 + 282);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 248) = swift_initStackObject();
  v5 = sub_10010D0A4(v2, v3, v4);
  *(void *)(v0 + 256) = v5;
  v6 = (os_activity_scope_state_s *)(v5 + 24);
  swift_beginAccess();
  uint64_t v7 = swift_unknownObjectRetain();
  os_activity_scope_enter(v7, v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking for first unlock.", v10, 2u);
    swift_slowDealloc();
  }
  v11 = (unsigned char *)(v0 + 280);

  if (!MKBUserUnlockedSinceBoot())
  {
    int v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v12 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  v13 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v12);
  LOBYTE(v12) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  id v14 = Logger.logObject.getter();
  if ((v12 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v31))
    {
      BOOL v32 = (uint8_t *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      v11 = (unsigned char *)(v0 + 280);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v29 = swift_allocError();
    *os_log_type_t v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v1 + 65) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        os_log_type_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v1 - 88) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        os_log_type_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          id v114 = v37;
          uint64_t v41 = swift_slowAlloc();
          uint64_t v112 = (void *)swift_slowAlloc();
          v118[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136446466;
          uint64_t v42 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v42, v43, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *uint64_t v44 = v37;
          swift_storeEnumTagMultiPayload();
          id v45 = v38;
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v112 = v46;
          id v37 = v114;

          _os_log_impl((void *)&_mh_execute_header, v39, v40, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v41, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v97 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v98 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v99 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v97, v99);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    uint64_t v115 = (uint64_t *)(v1 - 40);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v1 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v11 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v63 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v63 = swift_allocError();
        unsigned char *v104 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      unint64_t v105 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v105, v106))
      {
        unint64_t v107 = (uint8_t *)swift_slowAlloc();
        uint64_t v108 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v107 = 138412290;
        swift_errorRetain();
        uint64_t v109 = _swift_stdlib_bridgeErrorToNSError();
        *uint64_t v115 = v109;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v108 = v109;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v105, v106, "The preflight error %@ did not result in a TTR.", v107, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v110 = *(void *)(v0 + 232);
      sub_10023C5AC(v63);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v111 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v111 - 8) + 8))(v110, v111);
      swift_errorRelease();
      goto LABEL_69;
    }
    os_log_type_t v56 = (uint64_t *)(v1 - 48);
    swift_errorRelease();
    *(void *)(v1 - 72) = v29;
    uint64_t v57 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v59 = *v57;
        unint64_t v58 = v57[1];
        swift_bridgeObjectRetain_n();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          v118[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = 136315138;
          swift_bridgeObjectRetain();
          *os_log_type_t v56 = sub_1000A2E70(v59, v58, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "askForTime response handling did not find ask request identifier %s", v62, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v101 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v102 = v59;
        v102[1] = v58;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v103 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8))(v101, v103);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v57);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = swift_slowAlloc();
      uint64_t v67 = (void *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 136446466;
      uint64_t v68 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v68, v69, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v66 + 12) = 2114;
      swift_errorRetain();
      uint64_t v70 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v67 = v70;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v66, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v11[4]) {
        goto LABEL_59;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v11[4])
      {
LABEL_59:
        uint64_t v89 = *(void *)(v0 + 232);
        sub_10023C5AC(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v90 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v89, v90);
LABEL_69:
        swift_release();
        uint64_t v100 = *(uint64_t (**)(void))(v0 + 8);
        return v100();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v71 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v71 = 1;
    }
    if (!v71 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v117 = *(unsigned char *)(v0 + 282);
      uint64_t v74 = *(void *)(v0 + 232);
      uint64_t v113 = *(void *)(v0 + 216);
      uint64_t v116 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v75 = swift_task_alloc();
      uint64_t v76 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v75, 1, 1, v76);
      uint64_t v77 = type metadata accessor for Logger();
      uint64_t v78 = *(void *)(v77 - 8);
      uint64_t v79 = *(void *)(v78 + 64);
      uint64_t v80 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v80, v74, v77);
      uint64_t v81 = v0;
      unint64_t v82 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
      uint64_t v83 = v82 + v79;
      unint64_t v84 = (v82 + v79 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v85 = (v83 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v86 = swift_allocObject();
      unint64_t v87 = v86 + v82;
      uint64_t v0 = v81;
      *(void *)(v86 + 16) = 0;
      *(void *)(v86 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v78 + 32))(v87, v80, v77);
      unint64_t v88 = v86 + v84;
      *(void *)unint64_t v88 = v113;
      *(void *)(v88 + 8) = v116;
      *(unsigned char *)(v88 + 16) = v117;
      *(void *)(v86 + v85) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v75, (uint64_t)&unk_100343870, v86);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_59;
  }
  uint64_t v15 = v0;
  char v16 = *(unsigned char *)(v0 + 283);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v14, v17);
  if (v16)
  {
    if (v18)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v17, "Starting preflight.", v19, 2u);
      swift_slowDealloc();
    }

    uint64_t v0 = v15;
    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      char v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      v11 = (unsigned char *)(v1 + 64);
      char v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        BOOL v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        v11 = (unsigned char *)(v1 + 64);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      unsigned char *v30 = 0;
      goto LABEL_23;
    }
  }
  else if (v18)
  {
    id v53 = (uint8_t *)swift_slowAlloc();
    v118[0] = swift_slowAlloc();
    *(_DWORD *)id v53 = 136446210;
    uint64_t v0 = v15;
    uint64_t v54 = StaticString.description.getter();
    *(void *)(v15 + 208) = sub_1000A2E70(v54, v55, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v17, "%{public}s has opted out of preflight", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v0 = v15;
  }
  unint64_t v91 = Logger.logObject.getter();
  os_log_type_t v92 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v91, v92))
  {
    unint64_t v93 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v93 = 0;
    _os_log_impl((void *)&_mh_execute_header, v91, v92, "Starting the activity.", v93, 2u);
    swift_slowDealloc();
  }

  uint64_t v94 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v94;
  *uint64_t v94 = v0;
  v94[1] = sub_100136C98;
  uint64_t v95 = *(void *)(v0 + 240);
  return sub_1000D5004((uint64_t)v94, v95);
}

uint64_t sub_100136C98()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    v2 = sub_100136DAC;
  }
  else {
    v2 = sub_100190D8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100136DAC()
{
  uint64_t v70 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 272);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 281) & 1) == 0)
  {
    swift_errorRelease();
    v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 280) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        char v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v21, v20, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    int v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 284)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 284))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v68 = *(unsigned char *)(v0 + 282);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v68;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_100343870, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    v69[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    void *v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *os_log_type_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  swift_release();
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

uint64_t sub_100137B90(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 285) = a8;
  *(unsigned char *)(v8 + 284) = a6;
  *(unsigned char *)(v8 + 283) = a5;
  *(void *)(v8 + 232) = a4;
  *(void *)(v8 + 240) = a7;
  *(unsigned char *)(v8 + 282) = a3;
  *(void *)(v8 + 216) = a1;
  *(void *)(v8 + 224) = a2;
  return _swift_task_switch(sub_100137BC4, 0, 0);
}

uint64_t sub_100137BC4()
{
  uint64_t v121 = v0;
  uint64_t v2 = v0 + 216;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  char v4 = *(unsigned char *)(v0 + 282);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 248) = swift_initStackObject();
  v5 = sub_10010D0A4(v1, v3, v4);
  *(void *)(v0 + 256) = v5;
  os_log_type_t v6 = (os_activity_scope_state_s *)(v5 + 24);
  swift_beginAccess();
  uint64_t v7 = swift_unknownObjectRetain();
  os_activity_scope_enter(v7, v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking for first unlock.", v10, 2u);
    swift_slowDealloc();
  }
  id v11 = (unsigned char *)(v0 + 280);

  if (!MKBUserUnlockedSinceBoot())
  {
    int v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v12 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  v13 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v12);
  LOBYTE(v12) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  os_log_type_t v14 = Logger.logObject.getter();
  if ((v12 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v31))
    {
      BOOL v32 = (uint8_t *)swift_slowAlloc();
      v120[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v11 = (unsigned char *)(v0 + 280);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v29 = swift_allocError();
    *uint64_t v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v2 + 65) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v2 - 88) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          id v115 = v37;
          os_log_type_t type = v40;
          uint64_t v41 = swift_slowAlloc();
          uint64_t v113 = (void *)swift_slowAlloc();
          v120[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136446466;
          uint64_t v42 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v42, v43, v120);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v44 = v37;
          swift_storeEnumTagMultiPayload();
          id v45 = v38;
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v113 = v46;
          id v37 = v115;

          _os_log_impl((void *)&_mh_execute_header, v39, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v41, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v98 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v99 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v100 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8))(v98, v100);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    char v117 = (uint64_t *)(v2 - 40);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v2 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v11 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v63 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v63 = swift_allocError();
        *unint64_t v105 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v106, v107))
      {
        uint64_t v108 = (uint8_t *)swift_slowAlloc();
        uint64_t v109 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v108 = 138412290;
        swift_errorRetain();
        uint64_t v110 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t *v117 = v110;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v109 = v110;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v106, v107, "The preflight error %@ did not result in a TTR.", v108, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v111 = *(void *)(v0 + 232);
      sub_10023C5AC(v63);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v112 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v112 - 8) + 8))(v111, v112);
      swift_errorRelease();
      goto LABEL_69;
    }
    os_log_type_t v56 = (uint64_t *)(v2 - 48);
    swift_errorRelease();
    *(void *)(v2 - 72) = v29;
    uint64_t v57 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v59 = *v57;
        unint64_t v58 = v57[1];
        swift_bridgeObjectRetain_n();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          v120[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = 136315138;
          swift_bridgeObjectRetain();
          *os_log_type_t v56 = sub_1000A2E70(v59, v58, v120);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "askForTime response handling did not find ask request identifier %s", v62, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v102 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v103 = v59;
        v103[1] = v58;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v104 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v104 - 8) + 8))(v102, v104);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v57);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = swift_slowAlloc();
      uint64_t v67 = (void *)swift_slowAlloc();
      v120[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 136446466;
      uint64_t v68 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v68, v69, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v66 + 12) = 2114;
      swift_errorRetain();
      uint64_t v70 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v67 = v70;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v66, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v11[4]) {
        goto LABEL_59;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v11[4])
      {
LABEL_59:
        uint64_t v89 = *(void *)(v0 + 232);
        sub_10023C5AC(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v90 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v89, v90);
LABEL_69:
        swift_release();
        uint64_t v101 = *(uint64_t (**)(void))(v0 + 8);
        return v101();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v71 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v71 = 1;
    }
    if (!v71 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v119 = *(unsigned char *)(v0 + 282);
      uint64_t v74 = *(void *)(v0 + 232);
      uint64_t v116 = *(void *)(v0 + 216);
      uint64_t v118 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v75 = swift_task_alloc();
      uint64_t v76 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v75, 1, 1, v76);
      uint64_t v77 = type metadata accessor for Logger();
      uint64_t v78 = *(void *)(v77 - 8);
      uint64_t v79 = *(void *)(v78 + 64);
      uint64_t v80 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v80, v74, v77);
      uint64_t v81 = v0;
      unint64_t v82 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
      uint64_t v83 = v82 + v79;
      unint64_t v84 = (v82 + v79 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v85 = (v83 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v86 = swift_allocObject();
      unint64_t v87 = v86 + v82;
      uint64_t v0 = v81;
      *(void *)(v86 + 16) = 0;
      *(void *)(v86 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v78 + 32))(v87, v80, v77);
      unint64_t v88 = v86 + v84;
      *(void *)unint64_t v88 = v116;
      *(void *)(v88 + 8) = v118;
      *(unsigned char *)(v88 + 16) = v119;
      *(void *)(v86 + v85) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v75, (uint64_t)&unk_100343840, v86);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_59;
  }
  uint64_t v15 = v0;
  char v16 = *(unsigned char *)(v0 + 283);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v14, v17);
  if (v16)
  {
    if (v18)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v17, "Starting preflight.", v19, 2u);
      id v11 = (unsigned char *)(v2 + 64);
      swift_slowDealloc();
    }

    uint64_t v0 = v15;
    if (qword_100340D70 != -1) {
      swift_once();
    }
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      char v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      unsigned char *v30 = 0;
      goto LABEL_23;
    }
  }
  else if (v18)
  {
    id v53 = (uint8_t *)swift_slowAlloc();
    v120[0] = swift_slowAlloc();
    *(_DWORD *)id v53 = 136446210;
    uint64_t v0 = v15;
    uint64_t v54 = StaticString.description.getter();
    *(void *)(v15 + 208) = sub_1000A2E70(v54, v55, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v17, "%{public}s has opted out of preflight", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v11 = (unsigned char *)(v2 + 64);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v0 = v15;
  }
  unint64_t v91 = Logger.logObject.getter();
  os_log_type_t v92 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v91, v92))
  {
    unint64_t v93 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v93 = 0;
    _os_log_impl((void *)&_mh_execute_header, v91, v92, "Starting the activity.", v93, 2u);
    swift_slowDealloc();
  }

  uint64_t v94 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v94;
  *uint64_t v94 = v0;
  v94[1] = sub_100139134;
  char v95 = v11[5];
  uint64_t v96 = *(void *)(v0 + 240);
  return sub_1000D8454((uint64_t)v94, v96, v95);
}

uint64_t sub_100139134()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100139248;
  }
  else {
    uint64_t v2 = sub_100190D8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100139248()
{
  uint64_t v70 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 272);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 281) & 1) == 0)
  {
    swift_errorRelease();
    v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 280) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        char v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v21, v20, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    int v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 284)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 284))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v68 = *(unsigned char *)(v0 + 282);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v68;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_100343840, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    v69[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    void *v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *os_log_type_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  swift_release();
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

uint64_t sub_10013A02C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 285) = a8;
  *(unsigned char *)(v8 + 284) = a6;
  *(unsigned char *)(v8 + 283) = a5;
  *(void *)(v8 + 232) = a4;
  *(void *)(v8 + 240) = a7;
  *(unsigned char *)(v8 + 282) = a3;
  *(void *)(v8 + 216) = a1;
  *(void *)(v8 + 224) = a2;
  return _swift_task_switch(sub_10013A060, 0, 0);
}

uint64_t sub_10013A060()
{
  uint64_t v121 = v0;
  uint64_t v2 = v0 + 216;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  char v4 = *(unsigned char *)(v0 + 282);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 248) = swift_initStackObject();
  v5 = sub_10010D0A4(v1, v3, v4);
  *(void *)(v0 + 256) = v5;
  os_log_type_t v6 = (os_activity_scope_state_s *)(v5 + 24);
  swift_beginAccess();
  uint64_t v7 = swift_unknownObjectRetain();
  os_activity_scope_enter(v7, v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking for first unlock.", v10, 2u);
    swift_slowDealloc();
  }
  id v11 = (unsigned char *)(v0 + 280);

  if (!MKBUserUnlockedSinceBoot())
  {
    int v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v12 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  v13 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v12);
  LOBYTE(v12) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  os_log_type_t v14 = Logger.logObject.getter();
  if ((v12 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v31))
    {
      BOOL v32 = (uint8_t *)swift_slowAlloc();
      v120[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v11 = (unsigned char *)(v0 + 280);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v29 = swift_allocError();
    *uint64_t v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v2 + 65) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v2 - 88) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          id v115 = v37;
          os_log_type_t type = v40;
          uint64_t v41 = swift_slowAlloc();
          uint64_t v113 = (void *)swift_slowAlloc();
          v120[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136446466;
          uint64_t v42 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v42, v43, v120);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v44 = v37;
          swift_storeEnumTagMultiPayload();
          id v45 = v38;
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v113 = v46;
          id v37 = v115;

          _os_log_impl((void *)&_mh_execute_header, v39, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v41, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v98 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v99 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v100 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8))(v98, v100);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    char v117 = (uint64_t *)(v2 - 40);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v2 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v11 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v63 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v63 = swift_allocError();
        *unint64_t v105 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v106, v107))
      {
        uint64_t v108 = (uint8_t *)swift_slowAlloc();
        uint64_t v109 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v108 = 138412290;
        swift_errorRetain();
        uint64_t v110 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t *v117 = v110;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v109 = v110;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v106, v107, "The preflight error %@ did not result in a TTR.", v108, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v111 = *(void *)(v0 + 232);
      sub_10023C5AC(v63);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v112 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v112 - 8) + 8))(v111, v112);
      swift_errorRelease();
      goto LABEL_69;
    }
    os_log_type_t v56 = (uint64_t *)(v2 - 48);
    swift_errorRelease();
    *(void *)(v2 - 72) = v29;
    uint64_t v57 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v59 = *v57;
        unint64_t v58 = v57[1];
        swift_bridgeObjectRetain_n();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          v120[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = 136315138;
          swift_bridgeObjectRetain();
          *os_log_type_t v56 = sub_1000A2E70(v59, v58, v120);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "askForTime response handling did not find ask request identifier %s", v62, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v102 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v103 = v59;
        v103[1] = v58;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v104 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v104 - 8) + 8))(v102, v104);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v57);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = swift_slowAlloc();
      uint64_t v67 = (void *)swift_slowAlloc();
      v120[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 136446466;
      uint64_t v68 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v68, v69, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v66 + 12) = 2114;
      swift_errorRetain();
      uint64_t v70 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v67 = v70;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v66, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v11[4]) {
        goto LABEL_59;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v11[4])
      {
LABEL_59:
        uint64_t v89 = *(void *)(v0 + 232);
        sub_10023C5AC(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v90 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v89, v90);
LABEL_69:
        swift_release();
        uint64_t v101 = *(uint64_t (**)(void))(v0 + 8);
        return v101();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v71 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v71 = 1;
    }
    if (!v71 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v119 = *(unsigned char *)(v0 + 282);
      uint64_t v74 = *(void *)(v0 + 232);
      uint64_t v116 = *(void *)(v0 + 216);
      uint64_t v118 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v75 = swift_task_alloc();
      uint64_t v76 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v75, 1, 1, v76);
      uint64_t v77 = type metadata accessor for Logger();
      uint64_t v78 = *(void *)(v77 - 8);
      uint64_t v79 = *(void *)(v78 + 64);
      uint64_t v80 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v80, v74, v77);
      uint64_t v81 = v0;
      unint64_t v82 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
      uint64_t v83 = v82 + v79;
      unint64_t v84 = (v82 + v79 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v85 = (v83 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v86 = swift_allocObject();
      unint64_t v87 = v86 + v82;
      uint64_t v0 = v81;
      *(void *)(v86 + 16) = 0;
      *(void *)(v86 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v78 + 32))(v87, v80, v77);
      unint64_t v88 = v86 + v84;
      *(void *)unint64_t v88 = v116;
      *(void *)(v88 + 8) = v118;
      *(unsigned char *)(v88 + 16) = v119;
      *(void *)(v86 + v85) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v75, (uint64_t)&unk_100343760, v86);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_59;
  }
  uint64_t v15 = v0;
  char v16 = *(unsigned char *)(v0 + 283);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v14, v17);
  if (v16)
  {
    if (v18)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v17, "Starting preflight.", v19, 2u);
      id v11 = (unsigned char *)(v2 + 64);
      swift_slowDealloc();
    }

    uint64_t v0 = v15;
    if (qword_100340D70 != -1) {
      swift_once();
    }
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      char v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      unsigned char *v30 = 0;
      goto LABEL_23;
    }
  }
  else if (v18)
  {
    id v53 = (uint8_t *)swift_slowAlloc();
    v120[0] = swift_slowAlloc();
    *(_DWORD *)id v53 = 136446210;
    uint64_t v0 = v15;
    uint64_t v54 = StaticString.description.getter();
    *(void *)(v15 + 208) = sub_1000A2E70(v54, v55, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v17, "%{public}s has opted out of preflight", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v11 = (unsigned char *)(v2 + 64);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v0 = v15;
  }
  unint64_t v91 = Logger.logObject.getter();
  os_log_type_t v92 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v91, v92))
  {
    unint64_t v93 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v93 = 0;
    _os_log_impl((void *)&_mh_execute_header, v91, v92, "Starting the activity.", v93, 2u);
    swift_slowDealloc();
  }

  uint64_t v94 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v94;
  *uint64_t v94 = v0;
  v94[1] = sub_10013B5D0;
  char v95 = v11[5];
  uint64_t v96 = *(void *)(v0 + 240);
  return sub_1001B1E18((uint64_t)v94, v96, v95);
}

uint64_t sub_10013B5D0()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10013B6E4;
  }
  else {
    uint64_t v2 = sub_100190D8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10013B6E4()
{
  uint64_t v70 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 272);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 281) & 1) == 0)
  {
    swift_errorRelease();
    v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 280) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        char v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v21, v20, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    int v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 284)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 284))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v68 = *(unsigned char *)(v0 + 282);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v68;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_100343760, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    v69[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    void *v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *os_log_type_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  swift_release();
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

uint64_t sub_10013C4C8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, char a8)
{
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = v10;
  *(unsigned char *)(v8 + 293) = a8;
  *(unsigned char *)(v8 + 292) = a6;
  *(unsigned char *)(v8 + 291) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 290) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_10013C508, 0, 0);
}

uint64_t sub_10013C508()
{
  uint64_t v116 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 290);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 256) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 264) = v4;
  v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 288);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      int v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
    uint64_t v10 = (unsigned char *)(v0 + 288);
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 289) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      os_log_type_t v48 = *(void **)(v0 + 248);
      uint64_t v49 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      unsigned char *v50 = 0;
      swift_willThrow();
      uint64_t v51 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    unint64_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          os_log_type_t type = v38;
          uint64_t v39 = swift_slowAlloc();
          uint64_t v108 = (void *)swift_slowAlloc();
          uint64_t v110 = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          id v113 = v35;
          v115[0] = v110;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v108 = v44;

          id v35 = v113;
          _os_log_impl((void *)&_mh_execute_header, v37, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        os_log_type_t v48 = *(void **)(v0 + 248);
        uint64_t v92 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v93 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v94 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v94 - 8) + 8))(v92, v94);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v69 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v69 = swift_allocError();
        *uint64_t v99 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v100, v101))
      {
        uint64_t v102 = (uint8_t *)swift_slowAlloc();
        uint64_t v103 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v102 = 138412290;
        swift_errorRetain();
        uint64_t v104 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v103 = v104;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "The preflight error %@ did not result in a TTR.", v102, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      char v95 = *(void **)(v0 + 248);
      uint64_t v105 = *(void *)(v0 + 232);
      sub_10023C5AC(v69);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v106 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v106 - 8) + 8))(v105, v106);
      swift_errorRelease();
      goto LABEL_77;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v63 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v65 = *v63;
        unint64_t v64 = v63[1];
        swift_bridgeObjectRetain_n();
        uint64_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v67))
        {
          char v68 = (uint8_t *)swift_slowAlloc();
          v115[0] = swift_slowAlloc();
          *(_DWORD *)char v68 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v65, v64, v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "askForTime response handling did not find ask request identifier %s", v68, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        char v95 = *(void **)(v0 + 248);
        uint64_t v96 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v97 = v65;
        v97[1] = v64;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v98 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v98 - 8) + 8))(v96, v98);
        swift_task_dealloc();
        swift_errorRelease();
LABEL_77:
        swift_release();

        goto LABEL_78;
      }
      sub_1000C9DB4((uint64_t)v63);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = swift_slowAlloc();
      os_log_type_t v73 = (void *)swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 136446466;
      uint64_t v74 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v74, v75, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 12) = 2114;
      swift_errorRetain();
      uint64_t v76 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v73 = v76;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v72, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        os_log_type_t v48 = *(void **)(v0 + 248);
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_69:
        swift_release();

LABEL_78:
        os_log_type_t v107 = *(uint64_t (**)(void))(v0 + 8);
        return v107();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v77 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v77 = 1;
    }
    if (!v77 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v114 = *(unsigned char *)(v0 + 290);
      uint64_t v80 = *(void *)(v0 + 232);
      uint64_t v111 = *(void *)(v0 + 216);
      uint64_t v112 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v81 = swift_task_alloc();
      uint64_t v82 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v81, 1, 1, v82);
      uint64_t v83 = type metadata accessor for Logger();
      uint64_t v84 = *(void *)(v83 - 8);
      uint64_t v85 = *(void *)(v84 + 64);
      uint64_t v86 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v86, v80, v83);
      unint64_t v87 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      uint64_t v88 = swift_allocObject();
      *(void *)(v88 + 16) = 0;
      *(void *)(v88 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v84 + 32))(v88 + v87, v86, v83);
      unint64_t v89 = v88 + ((v87 + v85 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v89 = v111;
      *(void *)(v89 + 8) = v112;
      *(unsigned char *)(v89 + 16) = v114;
      *(void *)(v88 + ((v87 + v85 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v81, (uint64_t)&unk_100343750, v88);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 291);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      swift_slowDealloc();
    }

    uint64_t v10 = (unsigned char *)(v0 + 288);
    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        uint64_t v10 = (unsigned char *)(v0 + 288);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *uint64_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136446210;
      uint64_t v53 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v53, v54, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v10 = (unsigned char *)(v0 + 288);
  }
  os_log_type_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Starting the activity.", v57, 2u);
    uint64_t v10 = (unsigned char *)(v0 + 288);
    swift_slowDealloc();
  }

  uint64_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v58;
  *uint64_t v58 = v0;
  v58[1] = sub_10013DA50;
  char v59 = v10[5];
  uint64_t v60 = *(void *)(v0 + 240);
  uint64_t v61 = *(void *)(v0 + 248);
  return sub_1001B2B9C((uint64_t)v58, v60, v59, v61);
}

uint64_t sub_10013DA50()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10013DB64;
  }
  else {
    uint64_t v2 = sub_100190D90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10013DB64()
{
  uint64_t v73 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 280);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 289) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          uint64_t v66 = (void *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v66 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        os_log_type_t v46 = *(void **)(v0 + 248);
        uint64_t v49 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v50 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v51 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 288) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v26 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v26 = swift_allocError();
        *os_log_type_t v56 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v57, v58))
      {
        char v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v60 = (void *)swift_slowAlloc();
        *(_DWORD *)char v59 = 138412290;
        swift_errorRetain();
        uint64_t v61 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v60 = v61;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "The preflight error %@ did not result in a TTR.", v59, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      os_log_type_t v46 = *(void **)(v0 + 248);
      uint64_t v62 = *(void *)(v0 + 232);
      sub_10023C5AC(v26);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v63 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v62, v63);
      swift_errorRelease();
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    unint64_t v20 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v22 = *v20;
        unint64_t v21 = v20[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v25 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v22, v21, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "askForTime response handling did not find ask request identifier %s", v25, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v52 = *(void **)(v0 + 248);
        uint64_t v53 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v54 = v22;
        v54[1] = v21;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v55 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v53, v55);
        swift_task_dealloc();
        swift_errorRelease();
        swift_release();

        goto LABEL_46;
      }
      sub_1000C9DB4((uint64_t)v20);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v72[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446466;
      uint64_t v30 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v30, v31, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v29, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 292)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 292))
      {
LABEL_35:
        os_log_type_t v46 = *(void **)(v0 + 248);
        uint64_t v47 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v48 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v47, v48);
LABEL_45:
        swift_release();

        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v33 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (!v33 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v71 = *(unsigned char *)(v0 + 290);
      uint64_t v36 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v70 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v37 = swift_task_alloc();
      uint64_t v38 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(void *)(v40 + 64);
      uint64_t v42 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v42, v36, v39);
      unint64_t v43 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = 0;
      *(void *)(v44 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v40 + 32))(v44 + v43, v42, v39);
      unint64_t v45 = v44 + ((v43 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v45 = loga;
      *(void *)(v45 + 8) = v70;
      *(unsigned char *)(v45 + 16) = v71;
      *(void *)(v44 + ((v43 + v41 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v37, (uint64_t)&unk_100343750, v44);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  BOOL v16 = *(void **)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  *uint64_t v18 = 0;
  swift_willThrow();
  uint64_t v19 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v17, v19);
  swift_errorRelease();
  swift_release();

LABEL_46:
  unint64_t v64 = *(uint64_t (**)(void))(v0 + 8);
  return v64();
}

uint64_t sub_10013E970(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 292) = a6;
  *(unsigned char *)(v8 + 291) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 290) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_10013E9A4, 0, 0);
}

uint64_t sub_10013E9A4()
{
  uint64_t v113 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 290);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 256) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 264) = v4;
  v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 288);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 289) & 1) == 0)
    {
      swift_errorRelease();
      unint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void **)(v0 + 248);
      uint64_t v49 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      unsigned char *v50 = 0;
      swift_willThrow();
      uint64_t v51 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    unint64_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v108 = v35;
          uint64_t v39 = swift_slowAlloc();
          os_log_type_t v107 = (void *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *uint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *os_log_type_t v107 = v44;

          id v35 = v108;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v48 = *(void **)(v0 + 248);
        uint64_t v91 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v92 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v93 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8))(v91, v93);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v68 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v68 = swift_allocError();
        *uint64_t v98 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v99, v100))
      {
        os_log_type_t v101 = (uint8_t *)swift_slowAlloc();
        uint64_t v102 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v101 = 138412290;
        swift_errorRetain();
        uint64_t v103 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v103;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v102 = v103;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "The preflight error %@ did not result in a TTR.", v101, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v94 = *(void **)(v0 + 248);
      uint64_t v104 = *(void *)(v0 + 232);
      sub_10023C5AC(v68);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v105 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(v104, v105);
      swift_errorRelease();
      goto LABEL_77;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v62 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v64 = *v62;
        unint64_t v63 = v62[1];
        swift_bridgeObjectRetain_n();
        uint64_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v65, v66))
        {
          os_log_type_t v67 = (uint8_t *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v67 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v64, v63, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "askForTime response handling did not find ask request identifier %s", v67, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v94 = *(void **)(v0 + 248);
        uint64_t v95 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v96 = v64;
        v96[1] = v63;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v97 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v97 - 8) + 8))(v95, v97);
        swift_task_dealloc();
        swift_errorRelease();
LABEL_77:
        swift_release();

        goto LABEL_78;
      }
      sub_1000C9DB4((uint64_t)v62);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      uint64_t v72 = (void *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 136446466;
      uint64_t v73 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v73, v74, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 12) = 2114;
      swift_errorRetain();
      uint64_t v75 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v72 = v75;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v71, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v48 = *(void **)(v0 + 248);
        uint64_t v89 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v90 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v89, v90);
LABEL_69:
        swift_release();

LABEL_78:
        uint64_t v106 = *(uint64_t (**)(void))(v0 + 8);
        return v106();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v76 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v76 = 1;
    }
    if (!v76 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v111 = *(unsigned char *)(v0 + 290);
      uint64_t v79 = *(void *)(v0 + 232);
      uint64_t v109 = *(void *)(v0 + 216);
      uint64_t v110 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v80 = swift_task_alloc();
      uint64_t v81 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 1, 1, v81);
      uint64_t v82 = type metadata accessor for Logger();
      uint64_t v83 = *(void *)(v82 - 8);
      uint64_t v84 = *(void *)(v83 + 64);
      uint64_t v85 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v85, v79, v82);
      unint64_t v86 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v83 + 32))(v87 + v86, v85, v82);
      unint64_t v88 = v87 + ((v86 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v88 = v109;
      *(void *)(v88 + 8) = v110;
      *(unsigned char *)(v88 + 16) = v111;
      *(void *)(v87 + ((v86 + v84 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v80, (uint64_t)&unk_100343740, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 291);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      uint64_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      unint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *os_log_type_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136446210;
      uint64_t v53 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v53, v54, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Starting the activity.", v57, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v58;
  *os_log_type_t v58 = v0;
  v58[1] = sub_10013FEE8;
  uint64_t v59 = *(void *)(v0 + 240);
  uint64_t v60 = *(void *)(v0 + 248);
  return sub_1001B3CEC((uint64_t)v58, v59, v60);
}

uint64_t sub_10013FEE8()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10013FFFC;
  }
  else {
    uint64_t v2 = sub_100190D90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10013FFFC()
{
  uint64_t v73 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 280);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 289) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          os_log_type_t v66 = (void *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *os_log_type_t v66 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        os_log_type_t v46 = *(void **)(v0 + 248);
        uint64_t v49 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v50 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v51 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 288) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v26 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v26 = swift_allocError();
        *os_log_type_t v56 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v60 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 138412290;
        swift_errorRetain();
        uint64_t v61 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v60 = v61;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "The preflight error %@ did not result in a TTR.", v59, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      os_log_type_t v46 = *(void **)(v0 + 248);
      uint64_t v62 = *(void *)(v0 + 232);
      sub_10023C5AC(v26);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v63 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v62, v63);
      swift_errorRelease();
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    unint64_t v20 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v22 = *v20;
        unint64_t v21 = v20[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v25 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v22, v21, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "askForTime response handling did not find ask request identifier %s", v25, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v52 = *(void **)(v0 + 248);
        uint64_t v53 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v54 = v22;
        v54[1] = v21;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v55 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v53, v55);
        swift_task_dealloc();
        swift_errorRelease();
        swift_release();

        goto LABEL_46;
      }
      sub_1000C9DB4((uint64_t)v20);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v72[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446466;
      uint64_t v30 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v30, v31, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v29, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 292)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 292))
      {
LABEL_35:
        os_log_type_t v46 = *(void **)(v0 + 248);
        uint64_t v47 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v48 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v47, v48);
LABEL_45:
        swift_release();

        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v33 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (!v33 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v71 = *(unsigned char *)(v0 + 290);
      uint64_t v36 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v70 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v37 = swift_task_alloc();
      uint64_t v38 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(void *)(v40 + 64);
      uint64_t v42 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v42, v36, v39);
      unint64_t v43 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = 0;
      *(void *)(v44 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v40 + 32))(v44 + v43, v42, v39);
      unint64_t v45 = v44 + ((v43 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v45 = loga;
      *(void *)(v45 + 8) = v70;
      *(unsigned char *)(v45 + 16) = v71;
      *(void *)(v44 + ((v43 + v41 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v37, (uint64_t)&unk_100343740, v44);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  BOOL v16 = *(void **)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  *uint64_t v18 = 0;
  swift_willThrow();
  uint64_t v19 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v17, v19);
  swift_errorRelease();
  swift_release();

LABEL_46:
  uint64_t v64 = *(uint64_t (**)(void))(v0 + 8);
  return v64();
}

uint64_t sub_100140E08(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 285) = a8;
  *(unsigned char *)(v8 + 284) = a6;
  *(unsigned char *)(v8 + 283) = a5;
  *(void *)(v8 + 232) = a4;
  *(void *)(v8 + 240) = a7;
  *(unsigned char *)(v8 + 282) = a3;
  *(void *)(v8 + 216) = a1;
  *(void *)(v8 + 224) = a2;
  return _swift_task_switch(sub_100140E3C, 0, 0);
}

uint64_t sub_100140E3C()
{
  uint64_t v121 = v0;
  uint64_t v2 = v0 + 216;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  char v4 = *(unsigned char *)(v0 + 282);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 248) = swift_initStackObject();
  v5 = sub_10010D0A4(v1, v3, v4);
  *(void *)(v0 + 256) = v5;
  os_log_type_t v6 = (os_activity_scope_state_s *)(v5 + 24);
  swift_beginAccess();
  uint64_t v7 = swift_unknownObjectRetain();
  os_activity_scope_enter(v7, v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking for first unlock.", v10, 2u);
    swift_slowDealloc();
  }
  id v11 = (unsigned char *)(v0 + 280);

  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v12 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  v13 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v12);
  LOBYTE(v12) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  os_log_type_t v14 = Logger.logObject.getter();
  if ((v12 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      v120[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v11 = (unsigned char *)(v0 + 280);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v29 = swift_allocError();
    *id v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v2 + 65) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v2 - 88) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          id v115 = v37;
          os_log_type_t type = v40;
          uint64_t v41 = swift_slowAlloc();
          uint64_t v113 = (void *)swift_slowAlloc();
          v120[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136446466;
          uint64_t v42 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v42, v43, v120);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *uint64_t v44 = v37;
          swift_storeEnumTagMultiPayload();
          id v45 = v38;
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v113 = v46;
          id v37 = v115;

          _os_log_impl((void *)&_mh_execute_header, v39, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v41, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v98 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v99 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v100 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8))(v98, v100);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    uint64_t v117 = (uint64_t *)(v2 - 40);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v2 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v11 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v63 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v63 = swift_allocError();
        *uint64_t v105 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v106, v107))
      {
        id v108 = (uint8_t *)swift_slowAlloc();
        uint64_t v109 = (void *)swift_slowAlloc();
        *(_DWORD *)id v108 = 138412290;
        swift_errorRetain();
        uint64_t v110 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t *v117 = v110;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v109 = v110;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v106, v107, "The preflight error %@ did not result in a TTR.", v108, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v111 = *(void *)(v0 + 232);
      sub_10023C5AC(v63);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v112 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v112 - 8) + 8))(v111, v112);
      swift_errorRelease();
      goto LABEL_69;
    }
    os_log_type_t v56 = (uint64_t *)(v2 - 48);
    swift_errorRelease();
    *(void *)(v2 - 72) = v29;
    uint64_t v57 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v59 = *v57;
        unint64_t v58 = v57[1];
        swift_bridgeObjectRetain_n();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          v120[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = 136315138;
          swift_bridgeObjectRetain();
          *os_log_type_t v56 = sub_1000A2E70(v59, v58, v120);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "askForTime response handling did not find ask request identifier %s", v62, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v102 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v103 = v59;
        v103[1] = v58;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v104 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v104 - 8) + 8))(v102, v104);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v57);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = swift_slowAlloc();
      os_log_type_t v67 = (void *)swift_slowAlloc();
      v120[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 136446466;
      uint64_t v68 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v68, v69, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v66 + 12) = 2114;
      swift_errorRetain();
      uint64_t v70 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v67 = v70;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v66, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v11[4]) {
        goto LABEL_59;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v11[4])
      {
LABEL_59:
        uint64_t v89 = *(void *)(v0 + 232);
        sub_10023C5AC(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v90 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v89, v90);
LABEL_69:
        swift_release();
        os_log_type_t v101 = *(uint64_t (**)(void))(v0 + 8);
        return v101();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v71 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v71 = 1;
    }
    if (!v71 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v119 = *(unsigned char *)(v0 + 282);
      uint64_t v74 = *(void *)(v0 + 232);
      uint64_t v116 = *(void *)(v0 + 216);
      uint64_t v118 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v75 = swift_task_alloc();
      uint64_t v76 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v75, 1, 1, v76);
      uint64_t v77 = type metadata accessor for Logger();
      uint64_t v78 = *(void *)(v77 - 8);
      uint64_t v79 = *(void *)(v78 + 64);
      uint64_t v80 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v80, v74, v77);
      uint64_t v81 = v0;
      unint64_t v82 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
      uint64_t v83 = v82 + v79;
      unint64_t v84 = (v82 + v79 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v85 = (v83 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v86 = swift_allocObject();
      unint64_t v87 = v86 + v82;
      uint64_t v0 = v81;
      *(void *)(v86 + 16) = 0;
      *(void *)(v86 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v78 + 32))(v87, v80, v77);
      unint64_t v88 = v86 + v84;
      *(void *)unint64_t v88 = v116;
      *(void *)(v88 + 8) = v118;
      *(unsigned char *)(v88 + 16) = v119;
      *(void *)(v86 + v85) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v75, (uint64_t)&unk_100343728, v86);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_59;
  }
  uint64_t v15 = v0;
  char v16 = *(unsigned char *)(v0 + 283);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v14, v17);
  if (v16)
  {
    if (v18)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v17, "Starting preflight.", v19, 2u);
      id v11 = (unsigned char *)(v2 + 64);
      swift_slowDealloc();
    }

    uint64_t v0 = v15;
    if (qword_100340D70 != -1) {
      swift_once();
    }
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      unsigned char *v30 = 0;
      goto LABEL_23;
    }
  }
  else if (v18)
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    v120[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 136446210;
    uint64_t v0 = v15;
    uint64_t v54 = StaticString.description.getter();
    *(void *)(v15 + 208) = sub_1000A2E70(v54, v55, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v17, "%{public}s has opted out of preflight", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v11 = (unsigned char *)(v2 + 64);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v0 = v15;
  }
  uint64_t v91 = Logger.logObject.getter();
  os_log_type_t v92 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v91, v92))
  {
    uint64_t v93 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v93 = 0;
    _os_log_impl((void *)&_mh_execute_header, v91, v92, "Starting the activity.", v93, 2u);
    swift_slowDealloc();
  }

  uint64_t v94 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v94;
  *uint64_t v94 = v0;
  v94[1] = sub_1001423AC;
  char v95 = v11[5];
  uint64_t v96 = *(void *)(v0 + 240);
  return sub_1001B5120((uint64_t)v94, v96, v95);
}

uint64_t sub_1001423AC()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100142568;
  }
  else {
    uint64_t v2 = sub_1001424C0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001424C0()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100142568()
{
  uint64_t v70 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 272);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 281) & 1) == 0)
  {
    swift_errorRelease();
    v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 280) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v21, v20, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 284)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 284))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v68 = *(unsigned char *)(v0 + 282);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v68;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_100343728, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    v69[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    void *v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *os_log_type_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  swift_release();
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

uint64_t sub_10014334C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 248) = a8;
  *(void *)(v8 + 256) = v10;
  *(unsigned char *)(v8 + 300) = a6;
  *(unsigned char *)(v8 + 299) = a5;
  *(void *)(v8 + 232) = a4;
  *(void *)(v8 + 240) = a7;
  *(unsigned char *)(v8 + 298) = a3;
  *(void *)(v8 + 216) = a1;
  *(void *)(v8 + 224) = a2;
  return _swift_task_switch(sub_100143388, 0, 0);
}

uint64_t sub_100143388()
{
  uint64_t v112 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 298);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 264) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 272) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 296);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      v111[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = (unsigned char *)(v0 + 296);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 297) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v49 = 0;
      swift_willThrow();
      uint64_t v50 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v48, v50);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    unint64_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v107 = v35;
          uint64_t v39 = swift_slowAlloc();
          uint64_t v106 = (void *)swift_slowAlloc();
          v111[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v111);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v106 = v44;

          id v35 = v107;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v91 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v92 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v93 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8))(v91, v93);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v68 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v68 = swift_allocError();
        *uint64_t v98 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v99, v100))
      {
        os_log_type_t v101 = (uint8_t *)swift_slowAlloc();
        uint64_t v102 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v101 = 138412290;
        swift_errorRetain();
        uint64_t v103 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v103;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v102 = v103;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "The preflight error %@ did not result in a TTR.", v101, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v104 = *(void *)(v0 + 232);
      sub_10023C5AC(v68);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v105 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(v104, v105);
      swift_errorRelease();
      swift_release();
      goto LABEL_70;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v62 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v64 = *v62;
        unint64_t v63 = v62[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v65, v66))
        {
          uint64_t v67 = (uint8_t *)swift_slowAlloc();
          v111[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v67 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v64, v63, v111);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "askForTime response handling did not find ask request identifier %s", v67, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v95 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v96 = v64;
        v96[1] = v63;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v97 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v97 - 8) + 8))(v95, v97);
        swift_task_dealloc();
        swift_errorRelease();
        swift_release();
        goto LABEL_70;
      }
      sub_1000C9DB4((uint64_t)v62);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      uint64_t v72 = (void *)swift_slowAlloc();
      v111[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 136446466;
      uint64_t v73 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v73, v74, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 12) = 2114;
      swift_errorRetain();
      uint64_t v75 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v72 = v75;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v71, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v89 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v90 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v89, v90);
LABEL_69:
        swift_release();
LABEL_70:
        swift_bridgeObjectRelease();
        uint64_t v94 = *(uint64_t (**)(void))(v0 + 8);
        return v94();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v76 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v76 = 1;
    }
    if (!v76 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v110 = *(unsigned char *)(v0 + 298);
      uint64_t v79 = *(void *)(v0 + 232);
      uint64_t v108 = *(void *)(v0 + 216);
      uint64_t v109 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v80 = swift_task_alloc();
      uint64_t v81 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 1, 1, v81);
      uint64_t v82 = type metadata accessor for Logger();
      uint64_t v83 = *(void *)(v82 - 8);
      uint64_t v84 = *(void *)(v83 + 64);
      uint64_t v85 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v85, v79, v82);
      unint64_t v86 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v83 + 32))(v87 + v86, v85, v82);
      unint64_t v88 = v87 + ((v86 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v88 = v108;
      *(void *)(v88 + 8) = v109;
      *(unsigned char *)(v88 + 16) = v110;
      *(void *)(v87 + ((v86 + v84 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v80, (uint64_t)&unk_1003436F0, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 299);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      uint64_t v10 = (unsigned char *)(v0 + 296);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *uint64_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      v111[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136446210;
      uint64_t v52 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v52, v53, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Starting the activity.", v56, 2u);
    swift_slowDealloc();
  }

  uint64_t v57 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v57;
  *uint64_t v57 = v0;
  v57[1] = sub_1001448DC;
  uint64_t v58 = *(void *)(v0 + 248);
  uint64_t v59 = *(void *)(v0 + 256);
  uint64_t v60 = *(void *)(v0 + 240);
  return sub_1001B82AC((uint64_t)v57, v60, v58, v59);
}

uint64_t sub_1001448DC()
{
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100144AAC;
  }
  else {
    uint64_t v2 = sub_1001449F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001449F0()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  char v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100144AAC()
{
  uint64_t v70 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 288);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 297) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          unint64_t v63 = (void *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v63 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v47 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v48 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v49 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 296) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      swift_errorRelease();
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    os_log_type_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v21, v20, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 300)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 300))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_45;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v68 = *(unsigned char *)(v0 + 298);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v68;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_1003436F0, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  uint64_t v16 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  unsigned char *v17 = 0;
  swift_willThrow();
  uint64_t v18 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
  swift_errorRelease();
LABEL_45:
  swift_release();
  swift_bridgeObjectRelease();
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

uint64_t sub_1001458B4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, char a8)
{
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = v10;
  *(unsigned char *)(v8 + 293) = a8;
  *(unsigned char *)(v8 + 292) = a6;
  *(unsigned char *)(v8 + 291) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 290) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_1001458F4, 0, 0);
}

uint64_t sub_1001458F4()
{
  uint64_t v116 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 290);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 256) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 264) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 288);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
    uint64_t v10 = (unsigned char *)(v0 + 288);
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 289) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void **)(v0 + 248);
      uint64_t v49 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      unsigned char *v50 = 0;
      swift_willThrow();
      uint64_t v51 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    unint64_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          os_log_type_t type = v38;
          uint64_t v39 = swift_slowAlloc();
          uint64_t v108 = (void *)swift_slowAlloc();
          uint64_t v110 = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          id v113 = v35;
          v115[0] = v110;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v108 = v44;

          id v35 = v113;
          _os_log_impl((void *)&_mh_execute_header, v37, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v48 = *(void **)(v0 + 248);
        uint64_t v92 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v93 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v94 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v94 - 8) + 8))(v92, v94);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v69 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v69 = swift_allocError();
        *uint64_t v99 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v100, v101))
      {
        uint64_t v102 = (uint8_t *)swift_slowAlloc();
        uint64_t v103 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v102 = 138412290;
        swift_errorRetain();
        uint64_t v104 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v103 = v104;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "The preflight error %@ did not result in a TTR.", v102, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v95 = *(void **)(v0 + 248);
      uint64_t v105 = *(void *)(v0 + 232);
      sub_10023C5AC(v69);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v106 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v106 - 8) + 8))(v105, v106);
      swift_errorRelease();
      goto LABEL_77;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    unint64_t v63 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v65 = *v63;
        unint64_t v64 = v63[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v67))
        {
          char v68 = (uint8_t *)swift_slowAlloc();
          v115[0] = swift_slowAlloc();
          *(_DWORD *)char v68 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v65, v64, v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "askForTime response handling did not find ask request identifier %s", v68, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v95 = *(void **)(v0 + 248);
        uint64_t v96 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v97 = v65;
        v97[1] = v64;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v98 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v98 - 8) + 8))(v96, v98);
        swift_task_dealloc();
        swift_errorRelease();
LABEL_77:
        swift_release();

        goto LABEL_78;
      }
      sub_1000C9DB4((uint64_t)v63);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = swift_slowAlloc();
      uint64_t v73 = (void *)swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 136446466;
      uint64_t v74 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v74, v75, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 12) = 2114;
      swift_errorRetain();
      uint64_t v76 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v73 = v76;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v72, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v48 = *(void **)(v0 + 248);
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_69:
        swift_release();

LABEL_78:
        id v107 = *(uint64_t (**)(void))(v0 + 8);
        return v107();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v77 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v77 = 1;
    }
    if (!v77 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v114 = *(unsigned char *)(v0 + 290);
      uint64_t v80 = *(void *)(v0 + 232);
      uint64_t v111 = *(void *)(v0 + 216);
      uint64_t v112 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v81 = swift_task_alloc();
      uint64_t v82 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v81, 1, 1, v82);
      uint64_t v83 = type metadata accessor for Logger();
      uint64_t v84 = *(void *)(v83 - 8);
      uint64_t v85 = *(void *)(v84 + 64);
      uint64_t v86 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v86, v80, v83);
      unint64_t v87 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      uint64_t v88 = swift_allocObject();
      *(void *)(v88 + 16) = 0;
      *(void *)(v88 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v84 + 32))(v88 + v87, v86, v83);
      unint64_t v89 = v88 + ((v87 + v85 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v89 = v111;
      *(void *)(v89 + 8) = v112;
      *(unsigned char *)(v89 + 16) = v114;
      *(void *)(v88 + ((v87 + v85 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v81, (uint64_t)&unk_100343648, v88);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 291);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      swift_slowDealloc();
    }

    uint64_t v10 = (unsigned char *)(v0 + 288);
    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        uint64_t v10 = (unsigned char *)(v0 + 288);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *uint64_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136446210;
      uint64_t v53 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v53, v54, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v10 = (unsigned char *)(v0 + 288);
  }
  os_log_type_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Starting the activity.", v57, 2u);
    uint64_t v10 = (unsigned char *)(v0 + 288);
    swift_slowDealloc();
  }

  uint64_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v58;
  *uint64_t v58 = v0;
  v58[1] = sub_100146E3C;
  char v59 = v10[5];
  uint64_t v60 = *(void *)(v0 + 240);
  uint64_t v61 = *(void *)(v0 + 248);
  return sub_1001C2928((uint64_t)v58, v60, v59, v61);
}

uint64_t sub_100146E3C()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100147008;
  }
  else {
    uint64_t v2 = sub_100146F50;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100146F50()
{
  uint64_t v1 = (void *)v0[31];
  uint64_t v2 = v0[29];
  swift_release();
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100147008()
{
  uint64_t v73 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 280);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 289) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          os_log_type_t v66 = (void *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *os_log_type_t v66 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        os_log_type_t v46 = *(void **)(v0 + 248);
        uint64_t v49 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v50 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v51 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 288) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v26 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v26 = swift_allocError();
        *os_log_type_t v56 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v57, v58))
      {
        char v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v60 = (void *)swift_slowAlloc();
        *(_DWORD *)char v59 = 138412290;
        swift_errorRetain();
        uint64_t v61 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v60 = v61;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "The preflight error %@ did not result in a TTR.", v59, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      os_log_type_t v46 = *(void **)(v0 + 248);
      uint64_t v62 = *(void *)(v0 + 232);
      sub_10023C5AC(v26);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v63 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v62, v63);
      swift_errorRelease();
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    unint64_t v20 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v22 = *v20;
        unint64_t v21 = v20[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v25 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v22, v21, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "askForTime response handling did not find ask request identifier %s", v25, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v52 = *(void **)(v0 + 248);
        uint64_t v53 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v54 = v22;
        v54[1] = v21;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v55 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v53, v55);
        swift_task_dealloc();
        swift_errorRelease();
        swift_release();

        goto LABEL_46;
      }
      sub_1000C9DB4((uint64_t)v20);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v72[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446466;
      uint64_t v30 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v30, v31, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v29, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 292)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 292))
      {
LABEL_35:
        os_log_type_t v46 = *(void **)(v0 + 248);
        uint64_t v47 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v48 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v47, v48);
LABEL_45:
        swift_release();

        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v33 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (!v33 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v71 = *(unsigned char *)(v0 + 290);
      uint64_t v36 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v70 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v37 = swift_task_alloc();
      uint64_t v38 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(void *)(v40 + 64);
      uint64_t v42 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v42, v36, v39);
      unint64_t v43 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = 0;
      *(void *)(v44 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v40 + 32))(v44 + v43, v42, v39);
      unint64_t v45 = v44 + ((v43 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v45 = loga;
      *(void *)(v45 + 8) = v70;
      *(unsigned char *)(v45 + 16) = v71;
      *(void *)(v44 + ((v43 + v41 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v37, (uint64_t)&unk_100343648, v44);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  BOOL v16 = *(void **)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  *uint64_t v18 = 0;
  swift_willThrow();
  uint64_t v19 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v17, v19);
  swift_errorRelease();
  swift_release();

LABEL_46:
  unint64_t v64 = *(uint64_t (**)(void))(v0 + 8);
  return v64();
}

uint64_t sub_100147E14(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  *(unsigned char *)(v7 + 284) = a6;
  *(unsigned char *)(v7 + 283) = a5;
  *(void *)(v7 + 232) = a4;
  *(void *)(v7 + 240) = a7;
  *(unsigned char *)(v7 + 282) = a3;
  *(void *)(v7 + 216) = a1;
  *(void *)(v7 + 224) = a2;
  return _swift_task_switch(sub_100147E44, 0, 0);
}

uint64_t sub_100147E44()
{
  uint64_t v119 = v0;
  uint64_t v1 = v0 + 216;
  uint64_t v2 = *(char **)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  char v4 = *(unsigned char *)(v0 + 282);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 248) = swift_initStackObject();
  uint64_t v5 = sub_10010D0A4(v2, v3, v4);
  *(void *)(v0 + 256) = v5;
  os_log_type_t v6 = (os_activity_scope_state_s *)(v5 + 24);
  swift_beginAccess();
  uint64_t v7 = swift_unknownObjectRetain();
  os_activity_scope_enter(v7, v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking for first unlock.", v10, 2u);
    swift_slowDealloc();
  }
  id v11 = (unsigned char *)(v0 + 280);

  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v12 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  v13 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v12);
  LOBYTE(v12) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  os_log_type_t v14 = Logger.logObject.getter();
  if ((v12 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v11 = (unsigned char *)(v0 + 280);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v29 = swift_allocError();
    *id v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v1 + 65) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v1 - 88) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          id v114 = v37;
          uint64_t v41 = swift_slowAlloc();
          uint64_t v112 = (void *)swift_slowAlloc();
          v118[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136446466;
          uint64_t v42 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v42, v43, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *uint64_t v44 = v37;
          swift_storeEnumTagMultiPayload();
          id v45 = v38;
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v112 = v46;
          id v37 = v114;

          _os_log_impl((void *)&_mh_execute_header, v39, v40, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v41, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v97 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v98 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v99 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v97, v99);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    id v115 = (uint64_t *)(v1 - 40);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v1 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v11 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v63 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v63 = swift_allocError();
        unsigned char *v104 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v105 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v105, v106))
      {
        id v107 = (uint8_t *)swift_slowAlloc();
        uint64_t v108 = (void *)swift_slowAlloc();
        *(_DWORD *)id v107 = 138412290;
        swift_errorRetain();
        uint64_t v109 = _swift_stdlib_bridgeErrorToNSError();
        *id v115 = v109;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v108 = v109;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v105, v106, "The preflight error %@ did not result in a TTR.", v107, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v110 = *(void *)(v0 + 232);
      sub_10023C5AC(v63);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v111 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v111 - 8) + 8))(v110, v111);
      swift_errorRelease();
      goto LABEL_69;
    }
    os_log_type_t v56 = (uint64_t *)(v1 - 48);
    swift_errorRelease();
    *(void *)(v1 - 72) = v29;
    uint64_t v57 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v59 = *v57;
        unint64_t v58 = v57[1];
        swift_bridgeObjectRetain_n();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          v118[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = 136315138;
          swift_bridgeObjectRetain();
          *os_log_type_t v56 = sub_1000A2E70(v59, v58, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "askForTime response handling did not find ask request identifier %s", v62, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v101 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v102 = v59;
        v102[1] = v58;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v103 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8))(v101, v103);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v57);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = swift_slowAlloc();
      os_log_type_t v67 = (void *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 136446466;
      uint64_t v68 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v68, v69, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v66 + 12) = 2114;
      swift_errorRetain();
      uint64_t v70 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v67 = v70;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v66, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v11[4]) {
        goto LABEL_59;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v11[4])
      {
LABEL_59:
        uint64_t v89 = *(void *)(v0 + 232);
        sub_10023C5AC(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v90 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v89, v90);
LABEL_69:
        swift_release();
        os_log_type_t v100 = *(uint64_t (**)(void))(v0 + 8);
        return v100();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v71 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v71 = 1;
    }
    if (!v71 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v117 = *(unsigned char *)(v0 + 282);
      uint64_t v74 = *(void *)(v0 + 232);
      uint64_t v113 = *(void *)(v0 + 216);
      uint64_t v116 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v75 = swift_task_alloc();
      uint64_t v76 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v75, 1, 1, v76);
      uint64_t v77 = type metadata accessor for Logger();
      uint64_t v78 = *(void *)(v77 - 8);
      uint64_t v79 = *(void *)(v78 + 64);
      uint64_t v80 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v80, v74, v77);
      uint64_t v81 = v0;
      unint64_t v82 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
      uint64_t v83 = v82 + v79;
      unint64_t v84 = (v82 + v79 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v85 = (v83 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v86 = swift_allocObject();
      unint64_t v87 = v86 + v82;
      uint64_t v0 = v81;
      *(void *)(v86 + 16) = 0;
      *(void *)(v86 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v78 + 32))(v87, v80, v77);
      unint64_t v88 = v86 + v84;
      *(void *)unint64_t v88 = v113;
      *(void *)(v88 + 8) = v116;
      *(unsigned char *)(v88 + 16) = v117;
      *(void *)(v86 + v85) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v75, (uint64_t)&unk_100343638, v86);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_59;
  }
  uint64_t v15 = v0;
  char v16 = *(unsigned char *)(v0 + 283);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v14, v17);
  if (v16)
  {
    if (v18)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v17, "Starting preflight.", v19, 2u);
      swift_slowDealloc();
    }

    uint64_t v0 = v15;
    if (qword_100340D70 != -1) {
      swift_once();
    }
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      id v11 = (unsigned char *)(v1 + 64);
      os_log_type_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        id v11 = (unsigned char *)(v1 + 64);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      unsigned char *v30 = 0;
      goto LABEL_23;
    }
  }
  else if (v18)
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    v118[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 136446210;
    uint64_t v0 = v15;
    uint64_t v54 = StaticString.description.getter();
    *(void *)(v15 + 208) = sub_1000A2E70(v54, v55, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v17, "%{public}s has opted out of preflight", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v0 = v15;
  }
  uint64_t v91 = Logger.logObject.getter();
  os_log_type_t v92 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v91, v92))
  {
    uint64_t v93 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v93 = 0;
    _os_log_impl((void *)&_mh_execute_header, v91, v92, "Starting the activity.", v93, 2u);
    swift_slowDealloc();
  }

  uint64_t v94 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v94;
  *uint64_t v94 = v0;
  v94[1] = sub_1001493A0;
  uint64_t v95 = *(void *)(v0 + 240);
  return sub_1001C4C34((uint64_t)v94, v95);
}

uint64_t sub_1001493A0()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001494B4;
  }
  else {
    uint64_t v2 = sub_100190D8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001494B4()
{
  uint64_t v70 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 272);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 281) & 1) == 0)
  {
    swift_errorRelease();
    v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 280) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v21, v20, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 284)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 284))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v68 = *(unsigned char *)(v0 + 282);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v68;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_100343638, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    v69[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    void *v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *os_log_type_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  swift_release();
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

uint64_t sub_10014A298(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 248) = a8;
  *(void *)(v8 + 256) = v10;
  *(unsigned char *)(v8 + 300) = a6;
  *(unsigned char *)(v8 + 299) = a5;
  *(void *)(v8 + 232) = a4;
  *(void *)(v8 + 240) = a7;
  *(unsigned char *)(v8 + 298) = a3;
  *(void *)(v8 + 216) = a1;
  *(void *)(v8 + 224) = a2;
  return _swift_task_switch(sub_10014A2D4, 0, 0);
}

uint64_t sub_10014A2D4()
{
  uint64_t v112 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 298);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 264) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 272) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 296);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      v111[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = (unsigned char *)(v0 + 296);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 297) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v49 = 0;
      swift_willThrow();
      uint64_t v50 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v48, v50);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    unint64_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v107 = v35;
          uint64_t v39 = swift_slowAlloc();
          os_log_type_t v106 = (void *)swift_slowAlloc();
          v111[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v111);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v106 = v44;

          id v35 = v107;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v91 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v92 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v93 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8))(v91, v93);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v68 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v68 = swift_allocError();
        *uint64_t v98 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v99, v100))
      {
        uint64_t v101 = (uint8_t *)swift_slowAlloc();
        uint64_t v102 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v101 = 138412290;
        swift_errorRetain();
        uint64_t v103 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v103;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v102 = v103;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "The preflight error %@ did not result in a TTR.", v101, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v104 = *(void *)(v0 + 232);
      sub_10023C5AC(v68);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v105 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(v104, v105);
      swift_errorRelease();
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v62 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v64 = *v62;
        unint64_t v63 = v62[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v65, v66))
        {
          uint64_t v67 = (uint8_t *)swift_slowAlloc();
          v111[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v67 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v64, v63, v111);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "askForTime response handling did not find ask request identifier %s", v67, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v95 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v96 = v64;
        v96[1] = v63;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v97 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v97 - 8) + 8))(v95, v97);
        swift_task_dealloc();
        swift_errorRelease();
        swift_bridgeObjectRelease();
        goto LABEL_70;
      }
      sub_1000C9DB4((uint64_t)v62);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      uint64_t v72 = (void *)swift_slowAlloc();
      v111[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 136446466;
      uint64_t v73 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v73, v74, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 12) = 2114;
      swift_errorRetain();
      uint64_t v75 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v72 = v75;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v71, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v89 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v90 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v89, v90);
LABEL_69:
        swift_bridgeObjectRelease();
LABEL_70:
        swift_bridgeObjectRelease();
        uint64_t v94 = *(uint64_t (**)(void))(v0 + 8);
        return v94();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v76 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v76 = 1;
    }
    if (!v76 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v110 = *(unsigned char *)(v0 + 298);
      uint64_t v79 = *(void *)(v0 + 232);
      uint64_t v108 = *(void *)(v0 + 216);
      uint64_t v109 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v80 = swift_task_alloc();
      uint64_t v81 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 1, 1, v81);
      uint64_t v82 = type metadata accessor for Logger();
      uint64_t v83 = *(void *)(v82 - 8);
      uint64_t v84 = *(void *)(v83 + 64);
      uint64_t v85 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v85, v79, v82);
      unint64_t v86 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v83 + 32))(v87 + v86, v85, v82);
      unint64_t v88 = v87 + ((v86 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v88 = v108;
      *(void *)(v88 + 8) = v109;
      *(unsigned char *)(v88 + 16) = v110;
      *(void *)(v87 + ((v86 + v84 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v80, (uint64_t)&unk_100343628, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 299);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      uint64_t v10 = (unsigned char *)(v0 + 296);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *uint64_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      v111[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136446210;
      uint64_t v52 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v52, v53, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Starting the activity.", v56, 2u);
    swift_slowDealloc();
  }

  uint64_t v57 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v57;
  *uint64_t v57 = v0;
  v57[1] = sub_10014B828;
  uint64_t v58 = *(void *)(v0 + 248);
  uint64_t v59 = *(void *)(v0 + 256);
  uint64_t v60 = *(void *)(v0 + 240);
  return sub_1001C5FF4((uint64_t)v57, v60, v58, v59);
}

uint64_t sub_10014B828()
{
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10014B9F8;
  }
  else {
    uint64_t v2 = sub_10014B93C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014B93C()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10014B9F8()
{
  uint64_t v70 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 288);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 297) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          unint64_t v63 = (void *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v63 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v47 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v48 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v49 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 296) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      swift_errorRelease();
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    os_log_type_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v21, v20, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 300)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 300))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_45;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v68 = *(unsigned char *)(v0 + 298);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v68;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_100343628, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  uint64_t v16 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  unsigned char *v17 = 0;
  swift_willThrow();
  uint64_t v18 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
  swift_errorRelease();
LABEL_45:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

uint64_t sub_10014C800(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 256) = v10;
  *(void *)(v8 + 264) = v11;
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 308) = a6;
  *(unsigned char *)(v8 + 307) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 306) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_10014C840, 0, 0);
}

uint64_t sub_10014C840()
{
  uint64_t v113 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 306);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 272) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 280) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 304);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = (unsigned char *)(v0 + 304);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 305) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v49 = 0;
      swift_willThrow();
      uint64_t v50 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v48, v50);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    unint64_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v108 = v35;
          uint64_t v39 = swift_slowAlloc();
          id v107 = (void *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v107 = v44;

          id v35 = v108;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v92 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v93 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v94 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v94 - 8) + 8))(v92, v94);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v69 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v69 = swift_allocError();
        *uint64_t v99 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v100, v101))
      {
        uint64_t v102 = (uint8_t *)swift_slowAlloc();
        uint64_t v103 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v102 = 138412290;
        swift_errorRetain();
        uint64_t v104 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v103 = v104;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "The preflight error %@ did not result in a TTR.", v102, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v105 = *(void *)(v0 + 232);
      sub_10023C5AC(v69);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v106 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v106 - 8) + 8))(v105, v106);
      swift_errorRelease();
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    unint64_t v63 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v65 = *v63;
        unint64_t v64 = v63[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v67))
        {
          char v68 = (uint8_t *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)char v68 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v65, v64, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "askForTime response handling did not find ask request identifier %s", v68, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v96 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v97 = v65;
        v97[1] = v64;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v98 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v98 - 8) + 8))(v96, v98);
        swift_task_dealloc();
        swift_errorRelease();
        swift_bridgeObjectRelease();
        goto LABEL_70;
      }
      sub_1000C9DB4((uint64_t)v63);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = swift_slowAlloc();
      uint64_t v73 = (void *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 136446466;
      uint64_t v74 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v74, v75, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 12) = 2114;
      swift_errorRetain();
      uint64_t v76 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v73 = v76;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v72, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_69:
        swift_bridgeObjectRelease();
LABEL_70:
        swift_bridgeObjectRelease();
        uint64_t v95 = *(uint64_t (**)(void))(v0 + 8);
        return v95();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v77 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v77 = 1;
    }
    if (!v77 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v111 = *(unsigned char *)(v0 + 306);
      uint64_t v80 = *(void *)(v0 + 232);
      uint64_t v109 = *(void *)(v0 + 216);
      uint64_t v110 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v81 = swift_task_alloc();
      uint64_t v82 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v81, 1, 1, v82);
      uint64_t v83 = type metadata accessor for Logger();
      uint64_t v84 = *(void *)(v83 - 8);
      uint64_t v85 = *(void *)(v84 + 64);
      uint64_t v86 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v86, v80, v83);
      unint64_t v87 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      uint64_t v88 = swift_allocObject();
      *(void *)(v88 + 16) = 0;
      *(void *)(v88 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v84 + 32))(v88 + v87, v86, v83);
      unint64_t v89 = v88 + ((v87 + v85 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v89 = v109;
      *(void *)(v89 + 8) = v110;
      *(unsigned char *)(v89 + 16) = v111;
      *(void *)(v88 + ((v87 + v85 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v81, (uint64_t)&unk_100343618, v88);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 307);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      uint64_t v10 = (unsigned char *)(v0 + 304);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *uint64_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136446210;
      uint64_t v52 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v52, v53, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Starting the activity.", v56, 2u);
    swift_slowDealloc();
  }

  uint64_t v57 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v57;
  *uint64_t v57 = v0;
  v57[1] = sub_10014DDA8;
  uint64_t v58 = *(void *)(v0 + 256);
  uint64_t v59 = *(void *)(v0 + 264);
  uint64_t v60 = *(void *)(v0 + 240);
  uint64_t v61 = *(void *)(v0 + 248);
  return sub_1001C68CC((uint64_t)v57, v60, v61, v58, v59);
}

uint64_t sub_10014DDA8()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10014DF7C;
  }
  else {
    uint64_t v2 = sub_10014DEBC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014DEBC()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10014DF7C()
{
  uint64_t v70 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 296);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 305) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          unint64_t v63 = (void *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v63 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v47 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v48 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v49 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 304) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      swift_errorRelease();
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    os_log_type_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v21, v20, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 308)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 308))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_45;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v68 = *(unsigned char *)(v0 + 306);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v68;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_100343618, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  uint64_t v16 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  unsigned char *v17 = 0;
  swift_willThrow();
  uint64_t v18 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
  swift_errorRelease();
LABEL_45:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

uint64_t sub_10014ED98(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 292) = a6;
  *(unsigned char *)(v8 + 291) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 290) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_10014EDCC, 0, 0);
}

uint64_t sub_10014EDCC()
{
  uint64_t v116 = v0;
  uint64_t v1 = (void *)v0;
  uint64_t v2 = v0 + 216;
  id v3 = *(char **)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 224);
  char v5 = *(unsigned char *)(v0 + 290);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 256) = swift_initStackObject();
  os_log_type_t v6 = sub_10010D0A4(v3, v4, v5);
  *(void *)(v0 + 264) = v6;
  uint64_t v7 = (os_activity_scope_state_s *)(v6 + 24);
  swift_beginAccess();
  uint64_t v8 = swift_unknownObjectRetain();
  os_activity_scope_enter(v8, v7);
  swift_endAccess();
  swift_unknownObjectRelease();
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Checking for first unlock.", v11, 2u);
    swift_slowDealloc();
  }
  uint64_t v12 = (unsigned char *)(v0 + 288);

  uint64_t v114 = v0;
  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v13 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v13;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  os_log_type_t v14 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v14, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v13);
  LOBYTE(v13) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  os_log_type_t v15 = Logger.logObject.getter();
  if ((v13 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v31))
    {
      BOOL v32 = (uint8_t *)swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v12 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v29 = swift_allocError();
    *uint64_t v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 289) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v50, 2u);
        swift_slowDealloc();
      }
      uint64_t v51 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v52 = 0;
      swift_willThrow();
      uint64_t v53 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(v51, v53);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          id v41 = v37;
          uint64_t v42 = swift_slowAlloc();
          char v111 = (void *)swift_slowAlloc();
          v115[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v42 = 136446466;
          uint64_t v43 = StaticString.description.getter();
          v1[23] = sub_1000A2E70(v43, v44, v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v42 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *uint64_t v45 = v37;
          swift_storeEnumTagMultiPayload();
          id v46 = v38;
          uint64_t v47 = _swift_stdlib_bridgeErrorToNSError();
          v1[24] = v47;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v111 = v47;
          id v37 = v41;

          _os_log_impl((void *)&_mh_execute_header, v39, v40, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v42, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v96 = v1[29];
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v97 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v98 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v98 - 8) + 8))(v96, v98);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    unint64_t v64 = (uint64_t *)(v0 + 176);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v2 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v12 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v72 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v72 = swift_allocError();
        *uint64_t v103 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v106 = (uint8_t *)swift_slowAlloc();
        id v107 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v106 = 138412290;
        swift_errorRetain();
        uint64_t v108 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t *v64 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v107 = v108;
        uint64_t v1 = (void *)v114;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "The preflight error %@ did not result in a TTR.", v106, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v109 = v1[29];
      sub_10023C5AC(v72);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v110 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v109, v110);
      swift_errorRelease();
      goto LABEL_69;
    }
    uint64_t v65 = (uint64_t *)(v2 - 48);
    swift_errorRelease();
    *(void *)(v2 - 72) = v29;
    os_log_type_t v66 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v68 = *v66;
        unint64_t v67 = v66[1];
        swift_bridgeObjectRetain_n();
        uint64_t v69 = Logger.logObject.getter();
        os_log_type_t v70 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v69, v70))
        {
          uint64_t v71 = (uint8_t *)swift_slowAlloc();
          v115[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v71 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t *v65 = sub_1000A2E70(v68, v67, v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "askForTime response handling did not find ask request identifier %s", v71, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v100 = *(void *)(v114 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v101 = v68;
        v101[1] = v67;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v102 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(v100, v102);
        uint64_t v1 = (void *)v114;
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v66);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = swift_slowAlloc();
      uint64_t v76 = (void *)swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v75 = 136446466;
      uint64_t v77 = StaticString.description.getter();
      *(void *)(v114 + 152) = sub_1000A2E70(v77, v78, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v75 + 12) = 2114;
      swift_errorRetain();
      uint64_t v79 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v114 + 160) = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v76 = v79;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v75, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v12[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v12[4])
      {
LABEL_65:
        uint64_t v1 = (void *)v114;
        uint64_t v94 = *(void *)(v114 + 232);
        sub_10023C5AC(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v95 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v95 - 8) + 8))(v94, v95);
LABEL_69:
        swift_bridgeObjectRelease();
        uint64_t v99 = (uint64_t (*)(void))v1[1];
        return v99();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v80 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v80 = 1;
    }
    if (!v80 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      uint64_t v83 = *(void *)(v114 + 232);
      char v84 = *(unsigned char *)(v114 + 290);
      uint64_t v112 = *(void *)(v114 + 216);
      uint64_t v113 = *(void *)(v114 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v85 = swift_task_alloc();
      uint64_t v86 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v85, 1, 1, v86);
      uint64_t v87 = type metadata accessor for Logger();
      uint64_t v88 = *(void *)(v87 - 8);
      uint64_t v89 = *(void *)(v88 + 64);
      uint64_t v90 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16))(v90, v83, v87);
      unint64_t v91 = (*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
      uint64_t v92 = swift_allocObject();
      *(void *)(v92 + 16) = 0;
      *(void *)(v92 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v88 + 32))(v92 + v91, v90, v87);
      unint64_t v93 = v92 + ((v91 + v89 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v93 = v112;
      *(void *)(v93 + 8) = v113;
      *(unsigned char *)(v93 + 16) = v84;
      *(void *)(v92 + ((v91 + v89 + 31) & 0xFFFFFFFFFFFFFFF8)) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v85, (uint64_t)&unk_100343608, v92);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v16 = *(unsigned char *)(v0 + 291);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v15, v17);
  if (v16)
  {
    if (v18)
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v17, "Starting preflight.", v19, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      uint64_t v12 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      unsigned char *v30 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v18)
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136446210;
      uint64_t v55 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v55, v56, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v17, "%{public}s has opted out of preflight", v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v57, v58))
  {
    uint64_t v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Starting the activity.", v59, 2u);
    swift_slowDealloc();
  }

  uint64_t v60 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v60;
  void *v60 = v0;
  v60[1] = sub_100150364;
  uint64_t v61 = *(void *)(v0 + 240);
  uint64_t v62 = *(void *)(v0 + 248);
  return sub_1001C7928((uint64_t)v60, v61, v62);
}

uint64_t sub_100150364()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100150524;
  }
  else {
    uint64_t v2 = sub_100150478;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100150478()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  id v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100150524()
{
  uint64_t v70 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 280);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 289) & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 288) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        unint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    os_log_type_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v21, v20, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 292)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 292))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v68 = *(unsigned char *)(v0 + 290);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v68;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_100343608, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    unint64_t v63 = (void *)swift_slowAlloc();
    v69[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    void *v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *uint64_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  swift_bridgeObjectRelease();
  uint64_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

uint64_t sub_10015131C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 256) = v10;
  *(void *)(v8 + 264) = v11;
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 308) = a6;
  *(unsigned char *)(v8 + 307) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 306) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_10015135C, 0, 0);
}

uint64_t sub_10015135C()
{
  uint64_t v113 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 306);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 272) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 280) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 304);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = (unsigned char *)(v0 + 304);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 305) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v49 = 0;
      swift_willThrow();
      uint64_t v50 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v48, v50);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    unint64_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v108 = v35;
          uint64_t v39 = swift_slowAlloc();
          id v107 = (void *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v107 = v44;

          id v35 = v108;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v92 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v93 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v94 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v94 - 8) + 8))(v92, v94);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v69 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v69 = swift_allocError();
        *uint64_t v99 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v100, v101))
      {
        uint64_t v102 = (uint8_t *)swift_slowAlloc();
        uint64_t v103 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v102 = 138412290;
        swift_errorRetain();
        uint64_t v104 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v103 = v104;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "The preflight error %@ did not result in a TTR.", v102, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v105 = *(void *)(v0 + 232);
      sub_10023C5AC(v69);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v106 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v106 - 8) + 8))(v105, v106);
      swift_errorRelease();
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    unint64_t v63 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v65 = *v63;
        unint64_t v64 = v63[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v67))
        {
          char v68 = (uint8_t *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)char v68 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v65, v64, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "askForTime response handling did not find ask request identifier %s", v68, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v96 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v97 = v65;
        v97[1] = v64;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v98 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v98 - 8) + 8))(v96, v98);
        swift_task_dealloc();
        swift_errorRelease();
        swift_bridgeObjectRelease();
        goto LABEL_70;
      }
      sub_1000C9DB4((uint64_t)v63);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = swift_slowAlloc();
      uint64_t v73 = (void *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 136446466;
      uint64_t v74 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v74, v75, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 12) = 2114;
      swift_errorRetain();
      uint64_t v76 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v73 = v76;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v72, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_69:
        swift_bridgeObjectRelease();
LABEL_70:
        swift_bridgeObjectRelease();
        uint64_t v95 = *(uint64_t (**)(void))(v0 + 8);
        return v95();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v77 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v77 = 1;
    }
    if (!v77 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v111 = *(unsigned char *)(v0 + 306);
      uint64_t v80 = *(void *)(v0 + 232);
      uint64_t v109 = *(void *)(v0 + 216);
      uint64_t v110 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v81 = swift_task_alloc();
      uint64_t v82 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v81, 1, 1, v82);
      uint64_t v83 = type metadata accessor for Logger();
      uint64_t v84 = *(void *)(v83 - 8);
      uint64_t v85 = *(void *)(v84 + 64);
      uint64_t v86 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v86, v80, v83);
      unint64_t v87 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      uint64_t v88 = swift_allocObject();
      *(void *)(v88 + 16) = 0;
      *(void *)(v88 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v84 + 32))(v88 + v87, v86, v83);
      unint64_t v89 = v88 + ((v87 + v85 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v89 = v109;
      *(void *)(v89 + 8) = v110;
      *(unsigned char *)(v89 + 16) = v111;
      *(void *)(v88 + ((v87 + v85 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v81, (uint64_t)&unk_1003435D8, v88);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 307);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      uint64_t v10 = (unsigned char *)(v0 + 304);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *uint64_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136446210;
      uint64_t v52 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v52, v53, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    unint64_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Starting the activity.", v56, 2u);
    swift_slowDealloc();
  }

  uint64_t v57 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v57;
  *uint64_t v57 = v0;
  v57[1] = sub_1001528C4;
  uint64_t v58 = *(void *)(v0 + 256);
  uint64_t v59 = *(void *)(v0 + 264);
  uint64_t v60 = *(void *)(v0 + 240);
  uint64_t v61 = *(void *)(v0 + 248);
  return sub_1001CA7E8((uint64_t)v57, v60, v61, v58, v59);
}

uint64_t sub_1001528C4()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001529D8;
  }
  else {
    uint64_t v2 = sub_10014DEBC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001529D8()
{
  uint64_t v70 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 296);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 305) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          unint64_t v63 = (void *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v63 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v47 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v48 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v49 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 304) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        unint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      swift_errorRelease();
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    os_log_type_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v21, v20, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 308)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 308))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_45;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v68 = *(unsigned char *)(v0 + 306);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v68;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_1003435D8, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  uint64_t v16 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  unsigned char *v17 = 0;
  swift_willThrow();
  uint64_t v18 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
  swift_errorRelease();
LABEL_45:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

uint64_t sub_1001537F4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 292) = a6;
  *(unsigned char *)(v8 + 291) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 290) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_100153828, 0, 0);
}

uint64_t sub_100153828()
{
  uint64_t v113 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 290);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 256) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 264) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 288);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 289) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void **)(v0 + 248);
      uint64_t v49 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      unsigned char *v50 = 0;
      swift_willThrow();
      uint64_t v51 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    unint64_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v108 = v35;
          uint64_t v39 = swift_slowAlloc();
          id v107 = (void *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v107 = v44;

          id v35 = v108;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v48 = *(void **)(v0 + 248);
        uint64_t v91 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v92 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v93 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8))(v91, v93);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v68 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v68 = swift_allocError();
        *uint64_t v98 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v99, v100))
      {
        os_log_type_t v101 = (uint8_t *)swift_slowAlloc();
        uint64_t v102 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v101 = 138412290;
        swift_errorRetain();
        uint64_t v103 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v103;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v102 = v103;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "The preflight error %@ did not result in a TTR.", v101, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v94 = *(void **)(v0 + 248);
      uint64_t v104 = *(void *)(v0 + 232);
      sub_10023C5AC(v68);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v105 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(v104, v105);
      swift_errorRelease();
      goto LABEL_77;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v62 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v64 = *v62;
        unint64_t v63 = v62[1];
        swift_bridgeObjectRetain_n();
        uint64_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v65, v66))
        {
          uint64_t v67 = (uint8_t *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v67 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v64, v63, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "askForTime response handling did not find ask request identifier %s", v67, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v94 = *(void **)(v0 + 248);
        uint64_t v95 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v96 = v64;
        v96[1] = v63;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v97 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v97 - 8) + 8))(v95, v97);
        swift_task_dealloc();
        swift_errorRelease();
LABEL_77:
        swift_release();

        goto LABEL_78;
      }
      sub_1000C9DB4((uint64_t)v62);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      uint64_t v72 = (void *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 136446466;
      uint64_t v73 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v73, v74, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 12) = 2114;
      swift_errorRetain();
      uint64_t v75 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v72 = v75;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v71, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v48 = *(void **)(v0 + 248);
        uint64_t v89 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v90 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v89, v90);
LABEL_69:
        swift_release();

LABEL_78:
        uint64_t v106 = *(uint64_t (**)(void))(v0 + 8);
        return v106();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v76 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v76 = 1;
    }
    if (!v76 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v111 = *(unsigned char *)(v0 + 290);
      uint64_t v79 = *(void *)(v0 + 232);
      uint64_t v109 = *(void *)(v0 + 216);
      uint64_t v110 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v80 = swift_task_alloc();
      uint64_t v81 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 1, 1, v81);
      uint64_t v82 = type metadata accessor for Logger();
      uint64_t v83 = *(void *)(v82 - 8);
      uint64_t v84 = *(void *)(v83 + 64);
      uint64_t v85 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v85, v79, v82);
      unint64_t v86 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v83 + 32))(v87 + v86, v85, v82);
      unint64_t v88 = v87 + ((v86 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v88 = v109;
      *(void *)(v88 + 8) = v110;
      *(unsigned char *)(v88 + 16) = v111;
      *(void *)(v87 + ((v86 + v84 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v80, (uint64_t)&unk_100343548, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 291);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      uint64_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *uint64_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136446210;
      uint64_t v53 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v53, v54, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  os_log_type_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Starting the activity.", v57, 2u);
    swift_slowDealloc();
  }

  uint64_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v58;
  *uint64_t v58 = v0;
  v58[1] = sub_100154D6C;
  uint64_t v59 = *(void *)(v0 + 240);
  uint64_t v60 = *(void *)(v0 + 248);
  return sub_1001D20F4((uint64_t)v58, v59, v60);
}

uint64_t sub_100154D6C()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100154E80;
  }
  else {
    uint64_t v2 = sub_100190D90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100154E80()
{
  uint64_t v73 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 280);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 289) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          os_log_type_t v66 = (void *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *os_log_type_t v66 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        os_log_type_t v46 = *(void **)(v0 + 248);
        uint64_t v49 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v50 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v51 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 288) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v26 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v26 = swift_allocError();
        *os_log_type_t v56 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v60 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 138412290;
        swift_errorRetain();
        uint64_t v61 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v60 = v61;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "The preflight error %@ did not result in a TTR.", v59, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      os_log_type_t v46 = *(void **)(v0 + 248);
      uint64_t v62 = *(void *)(v0 + 232);
      sub_10023C5AC(v26);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v63 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v62, v63);
      swift_errorRelease();
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    unint64_t v20 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v22 = *v20;
        unint64_t v21 = v20[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v25 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v22, v21, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "askForTime response handling did not find ask request identifier %s", v25, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v52 = *(void **)(v0 + 248);
        uint64_t v53 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v54 = v22;
        v54[1] = v21;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v55 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v53, v55);
        swift_task_dealloc();
        swift_errorRelease();
        swift_release();

        goto LABEL_46;
      }
      sub_1000C9DB4((uint64_t)v20);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v72[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446466;
      uint64_t v30 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v30, v31, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v29, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 292)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 292))
      {
LABEL_35:
        os_log_type_t v46 = *(void **)(v0 + 248);
        uint64_t v47 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v48 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v47, v48);
LABEL_45:
        swift_release();

        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v33 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (!v33 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v71 = *(unsigned char *)(v0 + 290);
      uint64_t v36 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v70 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v37 = swift_task_alloc();
      uint64_t v38 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(void *)(v40 + 64);
      uint64_t v42 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v42, v36, v39);
      unint64_t v43 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = 0;
      *(void *)(v44 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v40 + 32))(v44 + v43, v42, v39);
      unint64_t v45 = v44 + ((v43 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v45 = loga;
      *(void *)(v45 + 8) = v70;
      *(unsigned char *)(v45 + 16) = v71;
      *(void *)(v44 + ((v43 + v41 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v37, (uint64_t)&unk_100343548, v44);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  BOOL v16 = *(void **)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  *uint64_t v18 = 0;
  swift_willThrow();
  uint64_t v19 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v17, v19);
  swift_errorRelease();
  swift_release();

LABEL_46:
  uint64_t v64 = *(uint64_t (**)(void))(v0 + 8);
  return v64();
}

uint64_t sub_100155C8C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  *(unsigned char *)(v7 + 284) = a6;
  *(unsigned char *)(v7 + 283) = a5;
  *(void *)(v7 + 232) = a4;
  *(void *)(v7 + 240) = a7;
  *(unsigned char *)(v7 + 282) = a3;
  *(void *)(v7 + 216) = a1;
  *(void *)(v7 + 224) = a2;
  return _swift_task_switch(sub_100155CBC, 0, 0);
}

uint64_t sub_100155CBC()
{
  uint64_t v113 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 282);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 248) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 256) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 280);

  uint64_t v111 = v0;
  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = (unsigned char *)(v0 + 280);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 281) & 1) == 0)
    {
      swift_errorRelease();
      unint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void *)(v0 + 232);
      uint64_t v49 = *(void **)(v0 + 240);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      unsigned char *v50 = 0;
      swift_willThrow();
      uint64_t v51 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v48, v51);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    unint64_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v108 = v35;
          uint64_t v39 = swift_slowAlloc();
          id v107 = (void *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *uint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v107 = v44;
          id v35 = v108;

          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v91 = *(void *)(v0 + 232);
        uint64_t v49 = *(void **)(v0 + 240);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v92 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v93 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8))(v91, v93);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v67 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v67 = swift_allocError();
        *uint64_t v98 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v99, v100))
      {
        os_log_type_t v101 = (uint8_t *)swift_slowAlloc();
        uint64_t v102 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v101 = 138412290;
        swift_errorRetain();
        uint64_t v103 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v103;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v102 = v103;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "The preflight error %@ did not result in a TTR.", v101, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v104 = *(void *)(v0 + 232);
      uint64_t v95 = *(void **)(v0 + 240);
      sub_10023C5AC(v67);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v105 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(v104, v105);
      goto LABEL_77;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v61 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v63 = *v61;
        unint64_t v62 = v61[1];
        swift_bridgeObjectRetain_n();
        uint64_t v64 = Logger.logObject.getter();
        os_log_type_t v65 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v64, v65))
        {
          os_log_type_t v66 = (uint8_t *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v66 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v63, v62, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v64, v65, "askForTime response handling did not find ask request identifier %s", v66, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v94 = *(void *)(v0 + 232);
        uint64_t v95 = *(void **)(v0 + 240);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v96 = v63;
        v96[1] = v62;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v97 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v97 - 8) + 8))(v94, v97);
        swift_task_dealloc();
LABEL_77:
        swift_errorRelease();

        goto LABEL_78;
      }
      sub_1000C9DB4((uint64_t)v61);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = swift_slowAlloc();
      char v71 = (void *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v70 = 136446466;
      uint64_t v72 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v72, v73, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v70 + 12) = 2114;
      swift_errorRetain();
      uint64_t v74 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v71 = v74;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v70, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v0 = v111;
        uint64_t v89 = *(void *)(v111 + 232);
        uint64_t v49 = *(void **)(v111 + 240);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v90 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v89, v90);
LABEL_69:

LABEL_78:
        uint64_t v106 = *(uint64_t (**)(void))(v0 + 8);
        return v106();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v75 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v75 = 1;
    }
    if (!v75 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v110 = *(unsigned char *)(v0 + 282);
      uint64_t v78 = *(void *)(v0 + 232);
      uint64_t v109 = *(void *)(v0 + 224);
      uint64_t v79 = *(void *)(v0 + 216);
      sub_10009EE78(&qword_100340F10);
      uint64_t v80 = swift_task_alloc();
      uint64_t v81 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 1, 1, v81);
      uint64_t v82 = type metadata accessor for Logger();
      uint64_t v83 = *(void *)(v82 - 8);
      uint64_t v84 = *(void *)(v83 + 64);
      uint64_t v85 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v85, v78, v82);
      unint64_t v86 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v83 + 32))(v87 + v86, v85, v82);
      unint64_t v88 = v87 + ((v86 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v88 = v79;
      *(void *)(v88 + 8) = v109;
      *(unsigned char *)(v88 + 16) = v110;
      *(void *)(v87 + ((v86 + v84 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v80, (uint64_t)&unk_100343530, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 283);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      uint64_t v10 = (unsigned char *)(v0 + 280);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      unint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *os_log_type_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136446210;
      uint64_t v53 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v53, v54, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Starting the activity.", v57, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v58;
  *os_log_type_t v58 = v0;
  v58[1] = sub_10015722C;
  uint64_t v59 = *(void *)(v0 + 240);
  return sub_100219CAC((uint64_t)v58, v59);
}

uint64_t sub_10015722C()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001573E4;
  }
  else {
    uint64_t v2 = sub_100157340;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100157340()
{
  uint64_t v2 = v0[29];
  uint64_t v1 = (void *)v0[30];
  swift_release();
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001573E4()
{
  uint64_t v73 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 272);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 281) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          os_log_type_t v66 = (void *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *os_log_type_t v66 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v49 = *(void *)(v0 + 232);
        uint64_t v47 = *(void **)(v0 + 240);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v50 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v51 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
        swift_task_dealloc();
LABEL_45:
        swift_errorRelease();
        goto LABEL_46;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 280) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v26 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v26 = swift_allocError();
        *os_log_type_t v56 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v60 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 138412290;
        swift_errorRetain();
        uint64_t v61 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v60 = v61;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "The preflight error %@ did not result in a TTR.", v59, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v62 = *(void *)(v0 + 232);
      uint64_t v47 = *(void **)(v0 + 240);
      sub_10023C5AC(v26);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v63 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v62, v63);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    unint64_t v20 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v22 = *v20;
        unint64_t v21 = v20[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v25 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v22, v21, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "askForTime response handling did not find ask request identifier %s", v25, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v52 = *(void *)(v0 + 232);
        uint64_t v53 = *(void **)(v0 + 240);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v54 = v22;
        v54[1] = v21;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v55 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v52, v55);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_47;
      }
      sub_1000C9DB4((uint64_t)v20);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v72[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446466;
      uint64_t v30 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v30, v31, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v29, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 284)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 284))
      {
LABEL_35:
        uint64_t v46 = *(void *)(v0 + 232);
        uint64_t v47 = *(void **)(v0 + 240);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v48 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v46, v48);
LABEL_46:

        goto LABEL_47;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v33 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (!v33 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v71 = *(unsigned char *)(v0 + 282);
      uint64_t v36 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v70 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v37 = swift_task_alloc();
      uint64_t v38 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(void *)(v40 + 64);
      uint64_t v42 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v42, v36, v39);
      unint64_t v43 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = 0;
      *(void *)(v44 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v40 + 32))(v44 + v43, v42, v39);
      unint64_t v45 = v44 + ((v43 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v45 = loga;
      *(void *)(v45 + 8) = v70;
      *(unsigned char *)(v45 + 16) = v71;
      *(void *)(v44 + ((v43 + v41 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v37, (uint64_t)&unk_100343530, v44);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  uint64_t v16 = *(void *)(v0 + 232);
  uint64_t v17 = *(void **)(v0 + 240);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  *uint64_t v18 = 0;
  swift_willThrow();
  uint64_t v19 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v16, v19);
  swift_errorRelease();

LABEL_47:
  uint64_t v64 = *(uint64_t (**)(void))(v0 + 8);
  return v64();
}

uint64_t sub_1001581CC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 292) = a6;
  *(unsigned char *)(v8 + 291) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 290) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_100158200, 0, 0);
}

uint64_t sub_100158200()
{
  uint64_t v119 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 290);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 256) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 264) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 288);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 289) & 1) == 0)
    {
      swift_errorRelease();
      unint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void **)(v0 + 240);
      uint64_t v49 = *(void **)(v0 + 248);
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    unint64_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v114 = v35;
          uint64_t v39 = swift_slowAlloc();
          uint64_t v113 = (void *)swift_slowAlloc();
          v118[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *uint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v113 = v44;

          id v35 = v114;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v48 = *(void **)(v0 + 240);
        uint64_t v49 = *(void **)(v0 + 248);
        uint64_t v94 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v95 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v96 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v96 - 8) + 8))(v94, v96);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();

        goto LABEL_76;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v69 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v69 = swift_allocError();
        *uint64_t v102 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v103 = Logger.logObject.getter();
      os_log_type_t v104 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v103, v104))
      {
        uint64_t v105 = (uint8_t *)swift_slowAlloc();
        uint64_t v106 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v105 = 138412290;
        swift_errorRetain();
        uint64_t v107 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v107;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v106 = v107;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v103, v104, "The preflight error %@ did not result in a TTR.", v105, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v109 = *(void **)(v0 + 240);
      id v108 = *(void **)(v0 + 248);
      uint64_t v110 = *(void *)(v0 + 232);
      sub_10023C5AC(v69);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v111 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v111 - 8) + 8))(v110, v111);
      swift_errorRelease();

      goto LABEL_76;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v63 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v65 = *v63;
        unint64_t v64 = v63[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v67))
        {
          uint64_t v68 = (uint8_t *)swift_slowAlloc();
          v118[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v68 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v65, v64, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "askForTime response handling did not find ask request identifier %s", v68, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v97 = *(void **)(v0 + 240);
        uint64_t v98 = *(void **)(v0 + 248);
        uint64_t v99 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v100 = v65;
        v100[1] = v64;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v101 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v101 - 8) + 8))(v99, v101);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_76;
      }
      sub_1000C9DB4((uint64_t)v63);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = swift_slowAlloc();
      uint64_t v73 = (void *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 136446466;
      uint64_t v74 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v74, v75, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 12) = 2114;
      swift_errorRetain();
      uint64_t v76 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v73 = v76;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v72, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v91 = *(void **)(v0 + 240);
        uint64_t v90 = *(void **)(v0 + 248);
        uint64_t v92 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v93 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8))(v92, v93);

LABEL_76:
        uint64_t v112 = *(uint64_t (**)(void))(v0 + 8);
        return v112();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v77 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v77 = 1;
    }
    if (!v77 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v117 = *(unsigned char *)(v0 + 290);
      uint64_t v80 = *(void *)(v0 + 232);
      uint64_t v115 = *(void *)(v0 + 216);
      uint64_t v116 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v81 = swift_task_alloc();
      uint64_t v82 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v81, 1, 1, v82);
      uint64_t v83 = type metadata accessor for Logger();
      uint64_t v84 = *(void *)(v83 - 8);
      uint64_t v85 = *(void *)(v84 + 64);
      uint64_t v86 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v86, v80, v83);
      unint64_t v87 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      uint64_t v88 = swift_allocObject();
      *(void *)(v88 + 16) = 0;
      *(void *)(v88 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v84 + 32))(v88 + v87, v86, v83);
      unint64_t v89 = v88 + ((v87 + v85 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v89 = v115;
      *(void *)(v89 + 8) = v116;
      *(unsigned char *)(v89 + 16) = v117;
      *(void *)(v88 + ((v87 + v85 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v81, (uint64_t)&unk_1003434D8, v88);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 291);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      uint64_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      unint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *os_log_type_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v53 = 136446210;
      uint64_t v54 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v54, v55, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v53, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  os_log_type_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v56, v57))
  {
    os_log_type_t v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v58 = 0;
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Starting the activity.", v58, 2u);
    swift_slowDealloc();
  }

  uint64_t v59 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v59;
  *uint64_t v59 = v0;
  v59[1] = sub_100159748;
  uint64_t v60 = *(void *)(v0 + 240);
  uint64_t v61 = *(void *)(v0 + 248);
  return sub_100221ADC((uint64_t)v59, v60, v61);
}

uint64_t sub_100159748()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100159910;
  }
  else {
    uint64_t v2 = sub_10015985C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10015985C()
{
  uint64_t v2 = (void *)v0[30];
  uint64_t v1 = (void *)v0[31];
  uint64_t v3 = v0[29];
  swift_release();
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100159910()
{
  uint64_t v77 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 280);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 289) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          uint64_t v70 = (void *)swift_slowAlloc();
          v76[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v70 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v51 = *(void **)(v0 + 240);
        uint64_t v52 = *(void **)(v0 + 248);
        uint64_t v53 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v54 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v55 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v53, v55);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_47;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 288) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v27 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v27 = swift_allocError();
        unsigned char *v60 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        unint64_t v64 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 138412290;
        swift_errorRetain();
        uint64_t v65 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v64 = v65;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "The preflight error %@ did not result in a TTR.", v63, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v48 = *(void **)(v0 + 240);
      uint64_t v47 = *(void **)(v0 + 248);
      uint64_t v66 = *(void *)(v0 + 232);
      sub_10023C5AC(v27);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v67 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v67 - 8) + 8))(v66, v67);
      swift_errorRelease();
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    unint64_t v21 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v23 = *v21;
        unint64_t v22 = v21[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = (uint8_t *)swift_slowAlloc();
          v76[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v26 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v23, v22, v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "askForTime response handling did not find ask request identifier %s", v26, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v48 = *(void **)(v0 + 240);
        os_log_type_t v56 = *(void **)(v0 + 248);
        uint64_t v57 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v58 = v23;
        v58[1] = v22;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v59 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v57, v59);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_46;
      }
      sub_1000C9DB4((uint64_t)v21);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v76[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136446466;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v31, v32, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2114;
      swift_errorRetain();
      uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v33;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v30, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 292)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 292))
      {
LABEL_35:
        uint64_t v48 = *(void **)(v0 + 240);
        uint64_t v47 = *(void **)(v0 + 248);
        uint64_t v49 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v50 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v49, v50);
LABEL_45:

LABEL_46:
        goto LABEL_47;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v34 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v34 = 1;
    }
    if (!v34 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v75 = *(unsigned char *)(v0 + 290);
      uint64_t v37 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v74 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v38 = swift_task_alloc();
      uint64_t v39 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
      uint64_t v40 = type metadata accessor for Logger();
      uint64_t v41 = *(void *)(v40 - 8);
      uint64_t v42 = *(void *)(v41 + 64);
      uint64_t v43 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v43, v37, v40);
      unint64_t v44 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      uint64_t v45 = swift_allocObject();
      *(void *)(v45 + 16) = 0;
      *(void *)(v45 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v41 + 32))(v45 + v44, v43, v40);
      unint64_t v46 = v45 + ((v44 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v46 = loga;
      *(void *)(v46 + 8) = v74;
      *(unsigned char *)(v46 + 16) = v75;
      *(void *)(v45 + ((v44 + v42 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v38, (uint64_t)&unk_1003434D8, v45);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  BOOL v16 = *(void **)(v0 + 240);
  uint64_t v17 = *(void **)(v0 + 248);
  uint64_t v18 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  unsigned char *v19 = 0;
  swift_willThrow();
  uint64_t v20 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v18, v20);
  swift_errorRelease();

LABEL_47:
  uint64_t v68 = *(uint64_t (**)(void))(v0 + 8);
  return v68();
}

uint64_t sub_10015A710(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  *(unsigned char *)(v6 + 276) = a6;
  *(unsigned char *)(v6 + 275) = a5;
  *(void *)(v6 + 224) = a2;
  *(void *)(v6 + 232) = a4;
  *(unsigned char *)(v6 + 274) = a3;
  *(void *)(v6 + 216) = a1;
  return _swift_task_switch(sub_10015A740, 0, 0);
}

uint64_t sub_10015A740()
{
  uint64_t v119 = v0;
  uint64_t v1 = v0 + 216;
  uint64_t v2 = *(char **)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  char v4 = *(unsigned char *)(v0 + 274);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 240) = swift_initStackObject();
  uint64_t v5 = sub_10010D0A4(v2, v3, v4);
  *(void *)(v0 + 248) = v5;
  uint64_t v6 = (os_activity_scope_state_s *)(v5 + 24);
  swift_beginAccess();
  uint64_t v7 = swift_unknownObjectRetain();
  os_activity_scope_enter(v7, v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking for first unlock.", v10, 2u);
    swift_slowDealloc();
  }
  id v11 = (unsigned char *)(v0 + 272);

  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v12 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v13 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v12);
  LOBYTE(v12) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  os_log_type_t v14 = Logger.logObject.getter();
  if ((v12 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v31))
    {
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v11 = (unsigned char *)(v0 + 272);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v29 = swift_allocError();
    *id v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v1 + 57) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_75;
    }
    swift_errorRelease();
    *(void *)(v1 - 88) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    id v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          os_log_type_t type = v40;
          uint64_t v41 = swift_slowAlloc();
          uint64_t v112 = (void *)swift_slowAlloc();
          v118[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136446466;
          uint64_t v42 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v42, v43, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v44 = v37;
          swift_storeEnumTagMultiPayload();
          id v45 = v38;
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v112 = v46;

          _os_log_impl((void *)&_mh_execute_header, v39, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v41, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v97 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v98 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v99 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v97, v99);
        swift_task_dealloc();
LABEL_75:
        swift_errorRelease();
        goto LABEL_76;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    uint64_t v115 = (uint64_t *)(v1 - 40);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v1 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v11 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v64 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v64 = swift_allocError();
        *uint64_t v103 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v106 = (uint8_t *)swift_slowAlloc();
        uint64_t v107 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v106 = 138412290;
        swift_errorRetain();
        uint64_t v108 = _swift_stdlib_bridgeErrorToNSError();
        *uint64_t v115 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v107 = v108;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "The preflight error %@ did not result in a TTR.", v106, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v109 = *(void *)(v0 + 232);
      sub_10023C5AC(v64);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v110 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v109, v110);
      goto LABEL_75;
    }
    os_log_type_t v56 = (uint64_t *)(v1 - 48);
    swift_errorRelease();
    *(void *)(v1 - 72) = v29;
    uint64_t v57 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v59 = *v57;
        unint64_t v58 = v57[1];
        swift_bridgeObjectRetain_n();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          os_log_type_t v62 = (uint8_t *)swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v62 = 136315138;
          v118[0] = v63;
          swift_bridgeObjectRetain();
          *os_log_type_t v56 = sub_1000A2E70(v59, v58, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "askForTime response handling did not find ask request identifier %s", v62, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v100 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v101 = v59;
        v101[1] = v58;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v102 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(v100, v102);
        swift_task_dealloc();
        goto LABEL_75;
      }
      sub_1000C9DB4((uint64_t)v57);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v68 = (void *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136446466;
      uint64_t v69 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v69, v70, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 12) = 2114;
      swift_errorRetain();
      uint64_t v71 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v68 = v71;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v67, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v11[4]) {
        goto LABEL_59;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v11[4])
      {
LABEL_59:
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5AC(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_76:
        uint64_t v111 = *(uint64_t (**)(void))(v0 + 8);
        return v111();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v72 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v72 = 1;
    }
    if (!v72 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v117 = *(unsigned char *)(v0 + 274);
      uint64_t v75 = *(void *)(v0 + 232);
      uint64_t v114 = *(void *)(v0 + 216);
      uint64_t v116 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v76 = swift_task_alloc();
      uint64_t v77 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v76, 1, 1, v77);
      uint64_t v78 = type metadata accessor for Logger();
      uint64_t v79 = *(void *)(v78 - 8);
      uint64_t v80 = *(void *)(v79 + 64);
      uint64_t v81 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v81, v75, v78);
      uint64_t v82 = v0;
      unint64_t v83 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
      uint64_t v84 = v83 + v80;
      unint64_t v85 = (v83 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v86 = (v84 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v87 = swift_allocObject();
      unint64_t v88 = v87 + v83;
      uint64_t v0 = v82;
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v79 + 32))(v88, v81, v78);
      unint64_t v89 = v87 + v85;
      *(void *)unint64_t v89 = v114;
      *(void *)(v89 + 8) = v116;
      *(unsigned char *)(v89 + 16) = v117;
      *(void *)(v87 + v86) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v76, (uint64_t)&unk_1003434C8, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_59;
  }
  uint64_t v15 = v0;
  char v16 = *(unsigned char *)(v0 + 275);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v14, v17);
  if (v16)
  {
    if (v18)
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v17, "Starting preflight.", v19, 2u);
      swift_slowDealloc();
    }

    uint64_t v0 = v15;
    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      id v11 = (unsigned char *)(v1 + 56);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        id v11 = (unsigned char *)(v1 + 56);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      unsigned char *v30 = 0;
      goto LABEL_23;
    }
  }
  else if (v18)
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    v118[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 136446210;
    uint64_t v0 = v15;
    uint64_t v54 = StaticString.description.getter();
    *(void *)(v15 + 208) = sub_1000A2E70(v54, v55, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v17, "%{public}s has opted out of preflight", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v0 = v15;
  }
  uint64_t v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Starting the activity.", v94, 2u);
    swift_slowDealloc();
  }

  uint64_t v95 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v95;
  *uint64_t v95 = v0;
  v95[1] = sub_10015BC90;
  return sub_1002239D4();
}

uint64_t sub_10015BC90()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10015BE44;
  }
  else {
    uint64_t v2 = sub_10015BDA4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10015BDA4()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10015BE44()
{
  uint64_t v71 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 264);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 273) & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 272) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    os_log_type_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        unint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v68 = v21;
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v70[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v68, v20, v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v21 = v68;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 276)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 276))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v69 = *(unsigned char *)(v0 + 274);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v69;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_1003434C8, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    v70[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    void *v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *os_log_type_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

uint64_t sub_10015CC0C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 292) = a6;
  *(unsigned char *)(v8 + 291) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 290) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_10015CC40, 0, 0);
}

uint64_t sub_10015CC40()
{
  uint64_t v115 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 290);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 256) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 264) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 288);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 289) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v49 = *(void **)(v0 + 240);
      os_log_type_t v48 = *(void **)(v0 + 248);
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    unint64_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v110 = v35;
          uint64_t v39 = swift_slowAlloc();
          uint64_t v109 = (void *)swift_slowAlloc();
          v114[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v109 = v44;

          id v35 = v110;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v49 = *(void **)(v0 + 240);
        os_log_type_t v48 = *(void **)(v0 + 248);
        uint64_t v92 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v93 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v94 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v94 - 8) + 8))(v92, v94);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v69 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v69 = swift_allocError();
        *uint64_t v100 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v101 = Logger.logObject.getter();
      os_log_type_t v102 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v101, v102))
      {
        uint64_t v103 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v104 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v103 = 138412290;
        swift_errorRetain();
        uint64_t v105 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v104 = v105;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v101, v102, "The preflight error %@ did not result in a TTR.", v103, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v96 = *(void **)(v0 + 240);
      uint64_t v95 = *(void **)(v0 + 248);
      uint64_t v106 = *(void *)(v0 + 232);
      sub_10023C5AC(v69);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v107 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 8))(v106, v107);
      goto LABEL_77;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v63 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v65 = *v63;
        unint64_t v64 = v63[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v67))
        {
          uint64_t v68 = (uint8_t *)swift_slowAlloc();
          v114[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v68 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v65, v64, v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "askForTime response handling did not find ask request identifier %s", v68, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v96 = *(void **)(v0 + 240);
        uint64_t v95 = *(void **)(v0 + 248);
        uint64_t v97 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v98 = v65;
        v98[1] = v64;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v99 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v97, v99);
        swift_task_dealloc();
LABEL_77:
        swift_errorRelease();

        goto LABEL_78;
      }
      sub_1000C9DB4((uint64_t)v63);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = swift_slowAlloc();
      uint64_t v73 = (void *)swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 136446466;
      uint64_t v74 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v74, v75, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 12) = 2114;
      swift_errorRetain();
      uint64_t v76 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v73 = v76;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v72, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v49 = *(void **)(v0 + 240);
        os_log_type_t v48 = *(void **)(v0 + 248);
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_69:

LABEL_78:
        uint64_t v108 = *(uint64_t (**)(void))(v0 + 8);
        return v108();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v77 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v77 = 1;
    }
    if (!v77 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v113 = *(unsigned char *)(v0 + 290);
      uint64_t v80 = *(void *)(v0 + 232);
      uint64_t v111 = *(void *)(v0 + 216);
      uint64_t v112 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v81 = swift_task_alloc();
      uint64_t v82 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v81, 1, 1, v82);
      uint64_t v83 = type metadata accessor for Logger();
      uint64_t v84 = *(void *)(v83 - 8);
      uint64_t v85 = *(void *)(v84 + 64);
      uint64_t v86 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v86, v80, v83);
      unint64_t v87 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      uint64_t v88 = swift_allocObject();
      *(void *)(v88 + 16) = 0;
      *(void *)(v88 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v84 + 32))(v88 + v87, v86, v83);
      unint64_t v89 = v88 + ((v87 + v85 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v89 = v111;
      *(void *)(v89 + 8) = v112;
      *(unsigned char *)(v89 + 16) = v113;
      *(void *)(v88 + ((v87 + v85 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v81, (uint64_t)&unk_1003434B8, v88);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 291);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      uint64_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *uint64_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v53 = 136446210;
      uint64_t v54 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v54, v55, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v53, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  os_log_type_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v58 = 0;
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Starting the activity.", v58, 2u);
    swift_slowDealloc();
  }

  uint64_t v59 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v59;
  *uint64_t v59 = v0;
  v59[1] = sub_10015E174;
  uint64_t v60 = *(void *)(v0 + 240);
  uint64_t v61 = *(void *)(v0 + 248);
  return sub_100224EF0((uint64_t)v59, v60, v61);
}

uint64_t sub_10015E174()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10015E33C;
  }
  else {
    uint64_t v2 = sub_10015E288;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10015E288()
{
  uint64_t v2 = (void *)v0[30];
  uint64_t v1 = (void *)v0[31];
  uint64_t v3 = v0[29];
  swift_release();
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10015E33C()
{
  uint64_t v76 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 280);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 289) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          uint64_t v69 = (void *)swift_slowAlloc();
          v75[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v69 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        os_log_type_t v48 = *(void **)(v0 + 240);
        uint64_t v47 = *(void **)(v0 + 248);
        uint64_t v51 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v52 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v53 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(v51, v53);
        swift_task_dealloc();
LABEL_45:
        swift_errorRelease();
        goto LABEL_46;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 288) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v27 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v27 = swift_allocError();
        *uint64_t v59 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v60, v61))
      {
        os_log_type_t v62 = (uint8_t *)swift_slowAlloc();
        uint64_t v63 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v62 = 138412290;
        swift_errorRetain();
        uint64_t v64 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v63 = v64;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "The preflight error %@ did not result in a TTR.", v62, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      os_log_type_t v48 = *(void **)(v0 + 240);
      uint64_t v47 = *(void **)(v0 + 248);
      uint64_t v65 = *(void *)(v0 + 232);
      sub_10023C5AC(v27);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v66 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v66 - 8) + 8))(v65, v66);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v21 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v23 = *v21;
        unint64_t v22 = v21[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = (uint8_t *)swift_slowAlloc();
          v75[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v26 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v23, v22, v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "askForTime response handling did not find ask request identifier %s", v26, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        unint64_t v55 = *(void **)(v0 + 240);
        uint64_t v54 = *(void **)(v0 + 248);
        uint64_t v56 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v57 = v23;
        v57[1] = v22;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v58 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8))(v56, v58);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_47;
      }
      sub_1000C9DB4((uint64_t)v21);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v75[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136446466;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v31, v32, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2114;
      swift_errorRetain();
      uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v33;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v30, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 292)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 292))
      {
LABEL_35:
        os_log_type_t v48 = *(void **)(v0 + 240);
        uint64_t v47 = *(void **)(v0 + 248);
        uint64_t v49 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v50 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v49, v50);
LABEL_46:

        goto LABEL_47;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v34 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v34 = 1;
    }
    if (!v34 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v74 = *(unsigned char *)(v0 + 290);
      uint64_t v37 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v73 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v38 = swift_task_alloc();
      uint64_t v39 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
      uint64_t v40 = type metadata accessor for Logger();
      uint64_t v41 = *(void *)(v40 - 8);
      uint64_t v42 = *(void *)(v41 + 64);
      uint64_t v43 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v43, v37, v40);
      unint64_t v44 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      uint64_t v45 = swift_allocObject();
      *(void *)(v45 + 16) = 0;
      *(void *)(v45 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v41 + 32))(v45 + v44, v43, v40);
      unint64_t v46 = v45 + ((v44 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v46 = loga;
      *(void *)(v46 + 8) = v73;
      *(unsigned char *)(v46 + 16) = v74;
      *(void *)(v45 + ((v44 + v42 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v38, (uint64_t)&unk_1003434B8, v45);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  os_log_type_t v17 = *(void **)(v0 + 240);
  BOOL v16 = *(void **)(v0 + 248);
  uint64_t v18 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  unsigned char *v19 = 0;
  swift_willThrow();
  uint64_t v20 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v18, v20);
  swift_errorRelease();

LABEL_47:
  os_log_type_t v67 = *(uint64_t (**)(void))(v0 + 8);
  return v67();
}

uint64_t sub_10015F134(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 292) = a6;
  *(unsigned char *)(v8 + 291) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 290) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_10015F168, 0, 0);
}

uint64_t sub_10015F168()
{
  uint64_t v114 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 290);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 256) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 264) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 288);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 289) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      os_log_type_t v48 = *(void **)(v0 + 240);
      uint64_t v49 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      unsigned char *v50 = 0;
      swift_willThrow();
      uint64_t v51 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    BOOL v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v109 = v35;
          uint64_t v39 = swift_slowAlloc();
          uint64_t v108 = (void *)swift_slowAlloc();
          v113[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *uint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v108 = v44;

          id v35 = v109;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        os_log_type_t v48 = *(void **)(v0 + 240);
        uint64_t v91 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v92 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v93 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8))(v91, v93);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v68 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v68 = swift_allocError();
        *uint64_t v99 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v100, v101))
      {
        os_log_type_t v102 = (uint8_t *)swift_slowAlloc();
        uint64_t v103 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v102 = 138412290;
        swift_errorRetain();
        uint64_t v104 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v103 = v104;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "The preflight error %@ did not result in a TTR.", v102, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v105 = *(void **)(v0 + 240);
      uint64_t v106 = *(void *)(v0 + 232);
      sub_10023C5AC(v68);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v107 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 8))(v106, v107);
      swift_errorRelease();

      goto LABEL_70;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    os_log_type_t v62 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v64 = *v62;
        unint64_t v63 = v62[1];
        swift_bridgeObjectRetain_n();
        uint64_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v65, v66))
        {
          os_log_type_t v67 = (uint8_t *)swift_slowAlloc();
          v113[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v67 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v64, v63, v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "askForTime response handling did not find ask request identifier %s", v67, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v95 = *(void **)(v0 + 240);
        uint64_t v96 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v97 = v64;
        v97[1] = v63;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v98 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v98 - 8) + 8))(v96, v98);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_70;
      }
      sub_1000C9DB4((uint64_t)v62);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      uint64_t v72 = (void *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 136446466;
      uint64_t v73 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v73, v74, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 12) = 2114;
      swift_errorRetain();
      uint64_t v75 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v72 = v75;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v71, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        os_log_type_t v48 = *(void **)(v0 + 240);
        uint64_t v89 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v90 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v89, v90);
LABEL_69:

LABEL_70:
        swift_release();
        uint64_t v94 = *(uint64_t (**)(void))(v0 + 8);
        return v94();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v76 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v76 = 1;
    }
    if (!v76 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v112 = *(unsigned char *)(v0 + 290);
      uint64_t v79 = *(void *)(v0 + 232);
      uint64_t v110 = *(void *)(v0 + 216);
      uint64_t v111 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v80 = swift_task_alloc();
      uint64_t v81 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 1, 1, v81);
      uint64_t v82 = type metadata accessor for Logger();
      uint64_t v83 = *(void *)(v82 - 8);
      uint64_t v84 = *(void *)(v83 + 64);
      uint64_t v85 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v85, v79, v82);
      unint64_t v86 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v83 + 32))(v87 + v86, v85, v82);
      unint64_t v88 = v87 + ((v86 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v88 = v110;
      *(void *)(v88 + 8) = v111;
      *(unsigned char *)(v88 + 16) = v112;
      *(void *)(v87 + ((v86 + v84 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v80, (uint64_t)&unk_100343488, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 291);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      uint64_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *uint64_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136446210;
      uint64_t v53 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v53, v54, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  unint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    os_log_type_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Starting the activity.", v57, 2u);
    swift_slowDealloc();
  }

  uint64_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v58;
  *uint64_t v58 = v0;
  v58[1] = sub_1001606AC;
  uint64_t v59 = *(void *)(v0 + 240);
  uint64_t v60 = *(void *)(v0 + 248);
  return sub_10022F014((uint64_t)v58, v59, v60);
}

uint64_t sub_1001606AC()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100160878;
  }
  else {
    uint64_t v2 = sub_1001607C0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001607C0()
{
  uint64_t v1 = (void *)v0[30];
  uint64_t v2 = v0[29];
  swift_release();
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  swift_release();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100160878()
{
  uint64_t v74 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 280);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 289) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          os_log_type_t v67 = (void *)swift_slowAlloc();
          v73[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *os_log_type_t v67 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v49 = *(void **)(v0 + 240);
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_47;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 288) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v26 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v26 = swift_allocError();
        *os_log_type_t v57 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v61 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 138412290;
        swift_errorRetain();
        uint64_t v62 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v61 = v62;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "The preflight error %@ did not result in a TTR.", v60, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      os_log_type_t v46 = *(void **)(v0 + 240);
      uint64_t v63 = *(void *)(v0 + 232);
      sub_10023C5AC(v26);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v64 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v64 - 8) + 8))(v63, v64);
      swift_errorRelease();
      goto LABEL_46;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v20 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v22 = *v20;
        unint64_t v21 = v20[1];
        swift_bridgeObjectRetain_n();
        uint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
          v73[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v25 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v22, v21, v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "askForTime response handling did not find ask request identifier %s", v25, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v53 = *(void **)(v0 + 240);
        uint64_t v54 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v55 = v22;
        v55[1] = v21;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v56 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v54, v56);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_47;
      }
      sub_1000C9DB4((uint64_t)v20);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v73[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446466;
      uint64_t v30 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v30, v31, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v29, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 292)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 292))
      {
LABEL_35:
        os_log_type_t v46 = *(void **)(v0 + 240);
        uint64_t v47 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v48 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v47, v48);
LABEL_46:

        goto LABEL_47;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v33 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (!v33 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v72 = *(unsigned char *)(v0 + 290);
      uint64_t v36 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v71 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v37 = swift_task_alloc();
      uint64_t v38 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(void *)(v40 + 64);
      uint64_t v42 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v42, v36, v39);
      unint64_t v43 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = 0;
      *(void *)(v44 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v40 + 32))(v44 + v43, v42, v39);
      unint64_t v45 = v44 + ((v43 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v45 = loga;
      *(void *)(v45 + 8) = v71;
      *(unsigned char *)(v45 + 16) = v72;
      *(void *)(v44 + ((v43 + v41 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v37, (uint64_t)&unk_100343488, v44);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  BOOL v16 = *(void **)(v0 + 240);
  uint64_t v17 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  *uint64_t v18 = 0;
  swift_willThrow();
  uint64_t v19 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v17, v19);
  swift_errorRelease();

LABEL_47:
  swift_release();
  uint64_t v65 = *(uint64_t (**)(void))(v0 + 8);
  return v65();
}

uint64_t sub_100161678(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 292) = a6;
  *(unsigned char *)(v8 + 291) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 290) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_1001616AC, 0, 0);
}

uint64_t sub_1001616AC()
{
  uint64_t v113 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 290);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 256) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 264) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 288);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 289) & 1) == 0)
    {
      swift_errorRelease();
      unint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void **)(v0 + 248);
      uint64_t v49 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      unsigned char *v50 = 0;
      swift_willThrow();
      uint64_t v51 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    BOOL v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v108 = v35;
          uint64_t v39 = swift_slowAlloc();
          uint64_t v107 = (void *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *uint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v107 = v44;

          id v35 = v108;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v48 = *(void **)(v0 + 248);
        uint64_t v91 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v92 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v93 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8))(v91, v93);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v68 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v68 = swift_allocError();
        *uint64_t v98 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v99, v100))
      {
        os_log_type_t v101 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v102 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v101 = 138412290;
        swift_errorRetain();
        uint64_t v103 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v103;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v102 = v103;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "The preflight error %@ did not result in a TTR.", v101, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v94 = *(void **)(v0 + 248);
      uint64_t v104 = *(void *)(v0 + 232);
      sub_10023C5AC(v68);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v105 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(v104, v105);
      swift_errorRelease();
      goto LABEL_77;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v62 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v64 = *v62;
        unint64_t v63 = v62[1];
        swift_bridgeObjectRetain_n();
        uint64_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v65, v66))
        {
          os_log_type_t v67 = (uint8_t *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v67 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v64, v63, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "askForTime response handling did not find ask request identifier %s", v67, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v94 = *(void **)(v0 + 248);
        uint64_t v95 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v96 = v64;
        v96[1] = v63;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v97 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v97 - 8) + 8))(v95, v97);
        swift_task_dealloc();
        swift_errorRelease();
LABEL_77:
        swift_release();

        goto LABEL_78;
      }
      sub_1000C9DB4((uint64_t)v62);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      char v72 = (void *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 136446466;
      uint64_t v73 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v73, v74, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 12) = 2114;
      swift_errorRetain();
      uint64_t v75 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v72 = v75;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v71, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v48 = *(void **)(v0 + 248);
        uint64_t v89 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v90 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v89, v90);
LABEL_69:
        swift_release();

LABEL_78:
        uint64_t v106 = *(uint64_t (**)(void))(v0 + 8);
        return v106();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v76 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v76 = 1;
    }
    if (!v76 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v111 = *(unsigned char *)(v0 + 290);
      uint64_t v79 = *(void *)(v0 + 232);
      uint64_t v109 = *(void *)(v0 + 216);
      uint64_t v110 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v80 = swift_task_alloc();
      uint64_t v81 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 1, 1, v81);
      uint64_t v82 = type metadata accessor for Logger();
      uint64_t v83 = *(void *)(v82 - 8);
      uint64_t v84 = *(void *)(v83 + 64);
      uint64_t v85 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v85, v79, v82);
      unint64_t v86 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v83 + 32))(v87 + v86, v85, v82);
      unint64_t v88 = v87 + ((v86 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v88 = v109;
      *(void *)(v88 + 8) = v110;
      *(unsigned char *)(v88 + 16) = v111;
      *(void *)(v87 + ((v86 + v84 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v80, (uint64_t)&unk_100343470, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 291);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      uint64_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      unint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *os_log_type_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136446210;
      uint64_t v53 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v53, v54, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  unint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    os_log_type_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Starting the activity.", v57, 2u);
    swift_slowDealloc();
  }

  uint64_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v58;
  *uint64_t v58 = v0;
  v58[1] = sub_100162BF0;
  uint64_t v59 = *(void *)(v0 + 240);
  uint64_t v60 = *(void *)(v0 + 248);
  return sub_10023CB08((uint64_t)v58, v59, v60);
}

uint64_t sub_100162BF0()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100162D04;
  }
  else {
    uint64_t v2 = sub_100190D90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100162D04()
{
  uint64_t v73 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 280);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 289) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          os_log_type_t v66 = (void *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *os_log_type_t v66 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        os_log_type_t v46 = *(void **)(v0 + 248);
        uint64_t v49 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v50 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v51 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 288) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v26 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v26 = swift_allocError();
        *os_log_type_t v56 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v60 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 138412290;
        swift_errorRetain();
        uint64_t v61 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v60 = v61;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "The preflight error %@ did not result in a TTR.", v59, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      os_log_type_t v46 = *(void **)(v0 + 248);
      uint64_t v62 = *(void *)(v0 + 232);
      sub_10023C5AC(v26);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v63 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v62, v63);
      swift_errorRelease();
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v20 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v22 = *v20;
        unint64_t v21 = v20[1];
        swift_bridgeObjectRetain_n();
        uint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v25 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v22, v21, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "askForTime response handling did not find ask request identifier %s", v25, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v52 = *(void **)(v0 + 248);
        uint64_t v53 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v54 = v22;
        v54[1] = v21;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v55 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v53, v55);
        swift_task_dealloc();
        swift_errorRelease();
        swift_release();

        goto LABEL_46;
      }
      sub_1000C9DB4((uint64_t)v20);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v72[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446466;
      uint64_t v30 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v30, v31, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v29, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 292)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 292))
      {
LABEL_35:
        os_log_type_t v46 = *(void **)(v0 + 248);
        uint64_t v47 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v48 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v47, v48);
LABEL_45:
        swift_release();

        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v33 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (!v33 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v71 = *(unsigned char *)(v0 + 290);
      uint64_t v36 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v70 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v37 = swift_task_alloc();
      uint64_t v38 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(void *)(v40 + 64);
      uint64_t v42 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v42, v36, v39);
      unint64_t v43 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = 0;
      *(void *)(v44 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v40 + 32))(v44 + v43, v42, v39);
      unint64_t v45 = v44 + ((v43 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v45 = loga;
      *(void *)(v45 + 8) = v70;
      *(unsigned char *)(v45 + 16) = v71;
      *(void *)(v44 + ((v43 + v41 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v37, (uint64_t)&unk_100343470, v44);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  BOOL v16 = *(void **)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  *uint64_t v18 = 0;
  swift_willThrow();
  uint64_t v19 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v17, v19);
  swift_errorRelease();
  swift_release();

LABEL_46:
  uint64_t v64 = *(uint64_t (**)(void))(v0 + 8);
  return v64();
}

uint64_t sub_100163B10(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 256) = v10;
  *(void *)(v8 + 264) = v11;
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 308) = a6;
  *(unsigned char *)(v8 + 307) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 306) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_100163B50, 0, 0);
}

uint64_t sub_100163B50()
{
  uint64_t v113 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 306);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 272) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 280) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 304);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = (unsigned char *)(v0 + 304);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 305) & 1) == 0)
    {
      swift_errorRelease();
      unint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v49 = 0;
      swift_willThrow();
      uint64_t v50 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v48, v50);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    BOOL v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v108 = v35;
          uint64_t v39 = swift_slowAlloc();
          uint64_t v107 = (void *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *uint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v107 = v44;

          id v35 = v108;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v92 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v93 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v94 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v94 - 8) + 8))(v92, v94);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v69 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v69 = swift_allocError();
        *uint64_t v99 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v100, v101))
      {
        os_log_type_t v102 = (uint8_t *)swift_slowAlloc();
        uint64_t v103 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v102 = 138412290;
        swift_errorRetain();
        uint64_t v104 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v103 = v104;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "The preflight error %@ did not result in a TTR.", v102, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v105 = *(void *)(v0 + 232);
      sub_10023C5AC(v69);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v106 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v106 - 8) + 8))(v105, v106);
      swift_errorRelease();
      swift_release();
      goto LABEL_70;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v63 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v65 = *v63;
        unint64_t v64 = v63[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v67))
        {
          uint64_t v68 = (uint8_t *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v68 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v65, v64, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "askForTime response handling did not find ask request identifier %s", v68, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v96 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v97 = v65;
        v97[1] = v64;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v98 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v98 - 8) + 8))(v96, v98);
        swift_task_dealloc();
        swift_errorRelease();
        swift_release();
        goto LABEL_70;
      }
      sub_1000C9DB4((uint64_t)v63);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = swift_slowAlloc();
      uint64_t v73 = (void *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 136446466;
      uint64_t v74 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v74, v75, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 12) = 2114;
      swift_errorRetain();
      uint64_t v76 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v73 = v76;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v72, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_69:
        swift_release();
LABEL_70:
        swift_bridgeObjectRelease();
        uint64_t v95 = *(uint64_t (**)(void))(v0 + 8);
        return v95();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v77 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v77 = 1;
    }
    if (!v77 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v111 = *(unsigned char *)(v0 + 306);
      uint64_t v80 = *(void *)(v0 + 232);
      uint64_t v109 = *(void *)(v0 + 216);
      uint64_t v110 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v81 = swift_task_alloc();
      uint64_t v82 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v81, 1, 1, v82);
      uint64_t v83 = type metadata accessor for Logger();
      uint64_t v84 = *(void *)(v83 - 8);
      uint64_t v85 = *(void *)(v84 + 64);
      uint64_t v86 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v86, v80, v83);
      unint64_t v87 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      uint64_t v88 = swift_allocObject();
      *(void *)(v88 + 16) = 0;
      *(void *)(v88 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v84 + 32))(v88 + v87, v86, v83);
      unint64_t v89 = v88 + ((v87 + v85 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v89 = v109;
      *(void *)(v89 + 8) = v110;
      *(unsigned char *)(v89 + 16) = v111;
      *(void *)(v88 + ((v87 + v85 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v81, (uint64_t)&unk_100341D68, v88);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 307);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      uint64_t v10 = (unsigned char *)(v0 + 304);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      unint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *os_log_type_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136446210;
      uint64_t v52 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v52, v53, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  unint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Starting the activity.", v56, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v57 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v57;
  *os_log_type_t v57 = v0;
  v57[1] = sub_1001650A4;
  uint64_t v58 = *(void *)(v0 + 256);
  uint64_t v59 = *(void *)(v0 + 264);
  uint64_t v60 = *(void *)(v0 + 240);
  uint64_t v61 = *(void *)(v0 + 248);
  return sub_10024113C((uint64_t)v57, v60, v61, v58, v59);
}

uint64_t sub_1001650A4()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100165274;
  }
  else {
    uint64_t v2 = sub_1001651B8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001651B8()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  char v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100165274()
{
  uint64_t v70 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 296);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 305) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          uint64_t v63 = (void *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v63 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v47 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v48 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v49 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 304) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      unint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      swift_errorRelease();
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    os_log_type_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v21, v20, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 308)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 308))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_45;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v68 = *(unsigned char *)(v0 + 306);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v68;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_100341D68, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  uint64_t v16 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  unsigned char *v17 = 0;
  swift_willThrow();
  uint64_t v18 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
  swift_errorRelease();
LABEL_45:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

uint64_t sub_10016607C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 292) = a6;
  *(unsigned char *)(v8 + 291) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 290) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_1001660B0, 0, 0);
}

uint64_t sub_1001660B0()
{
  uint64_t v113 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 290);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 256) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 264) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 288);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 289) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void **)(v0 + 248);
      uint64_t v49 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      unsigned char *v50 = 0;
      swift_willThrow();
      uint64_t v51 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    BOOL v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v108 = v35;
          uint64_t v39 = swift_slowAlloc();
          uint64_t v107 = (void *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v107 = v44;

          id v35 = v108;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v48 = *(void **)(v0 + 248);
        uint64_t v91 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v92 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v93 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8))(v91, v93);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v68 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v68 = swift_allocError();
        *uint64_t v98 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v99, v100))
      {
        os_log_type_t v101 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v102 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v101 = 138412290;
        swift_errorRetain();
        uint64_t v103 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v103;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v102 = v103;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "The preflight error %@ did not result in a TTR.", v101, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v94 = *(void **)(v0 + 248);
      uint64_t v104 = *(void *)(v0 + 232);
      sub_10023C5AC(v68);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v105 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(v104, v105);
      swift_errorRelease();
      goto LABEL_77;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v62 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v64 = *v62;
        unint64_t v63 = v62[1];
        swift_bridgeObjectRetain_n();
        uint64_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v65, v66))
        {
          uint64_t v67 = (uint8_t *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v67 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v64, v63, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "askForTime response handling did not find ask request identifier %s", v67, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v94 = *(void **)(v0 + 248);
        uint64_t v95 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v96 = v64;
        v96[1] = v63;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v97 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v97 - 8) + 8))(v95, v97);
        swift_task_dealloc();
        swift_errorRelease();
LABEL_77:
        swift_release();

        goto LABEL_78;
      }
      sub_1000C9DB4((uint64_t)v62);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      uint64_t v72 = (void *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 136446466;
      uint64_t v73 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v73, v74, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 12) = 2114;
      swift_errorRetain();
      uint64_t v75 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v72 = v75;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v71, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v48 = *(void **)(v0 + 248);
        uint64_t v89 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v90 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v89, v90);
LABEL_69:
        swift_release();

LABEL_78:
        uint64_t v106 = *(uint64_t (**)(void))(v0 + 8);
        return v106();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v76 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v76 = 1;
    }
    if (!v76 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v111 = *(unsigned char *)(v0 + 290);
      uint64_t v79 = *(void *)(v0 + 232);
      uint64_t v109 = *(void *)(v0 + 216);
      uint64_t v110 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v80 = swift_task_alloc();
      uint64_t v81 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 1, 1, v81);
      uint64_t v82 = type metadata accessor for Logger();
      uint64_t v83 = *(void *)(v82 - 8);
      uint64_t v84 = *(void *)(v83 + 64);
      uint64_t v85 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v85, v79, v82);
      unint64_t v86 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v83 + 32))(v87 + v86, v85, v82);
      unint64_t v88 = v87 + ((v86 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v88 = v109;
      *(void *)(v88 + 8) = v110;
      *(unsigned char *)(v88 + 16) = v111;
      *(void *)(v87 + ((v86 + v84 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v80, (uint64_t)&unk_100341D50, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 291);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      uint64_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *uint64_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136446210;
      uint64_t v53 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v53, v54, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  os_log_type_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    os_log_type_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Starting the activity.", v57, 2u);
    swift_slowDealloc();
  }

  uint64_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v58;
  *uint64_t v58 = v0;
  v58[1] = sub_1001675F4;
  uint64_t v59 = *(void *)(v0 + 240);
  uint64_t v60 = *(void *)(v0 + 248);
  return sub_1002449D8((uint64_t)v58, v59, v60);
}

uint64_t sub_1001675F4()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100167708;
  }
  else {
    uint64_t v2 = sub_100190D90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100167708()
{
  uint64_t v73 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 280);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 289) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          os_log_type_t v66 = (void *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *os_log_type_t v66 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        os_log_type_t v46 = *(void **)(v0 + 248);
        uint64_t v49 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v50 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v51 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 288) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v26 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v26 = swift_allocError();
        *os_log_type_t v56 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v60 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 138412290;
        swift_errorRetain();
        uint64_t v61 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v60 = v61;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "The preflight error %@ did not result in a TTR.", v59, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      os_log_type_t v46 = *(void **)(v0 + 248);
      uint64_t v62 = *(void *)(v0 + 232);
      sub_10023C5AC(v26);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v63 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v62, v63);
      swift_errorRelease();
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    unint64_t v20 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v22 = *v20;
        unint64_t v21 = v20[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v25 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v22, v21, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "askForTime response handling did not find ask request identifier %s", v25, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v52 = *(void **)(v0 + 248);
        uint64_t v53 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v54 = v22;
        v54[1] = v21;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v55 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v53, v55);
        swift_task_dealloc();
        swift_errorRelease();
        swift_release();

        goto LABEL_46;
      }
      sub_1000C9DB4((uint64_t)v20);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v72[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446466;
      uint64_t v30 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v30, v31, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v29, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 292)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 292))
      {
LABEL_35:
        os_log_type_t v46 = *(void **)(v0 + 248);
        uint64_t v47 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v48 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v47, v48);
LABEL_45:
        swift_release();

        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v33 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (!v33 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v71 = *(unsigned char *)(v0 + 290);
      uint64_t v36 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v70 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v37 = swift_task_alloc();
      uint64_t v38 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(void *)(v40 + 64);
      uint64_t v42 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v42, v36, v39);
      unint64_t v43 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = 0;
      *(void *)(v44 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v40 + 32))(v44 + v43, v42, v39);
      unint64_t v45 = v44 + ((v43 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v45 = loga;
      *(void *)(v45 + 8) = v70;
      *(unsigned char *)(v45 + 16) = v71;
      *(void *)(v44 + ((v43 + v41 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v37, (uint64_t)&unk_100341D50, v44);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  BOOL v16 = *(void **)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  *uint64_t v18 = 0;
  swift_willThrow();
  uint64_t v19 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v17, v19);
  swift_errorRelease();
  swift_release();

LABEL_46:
  uint64_t v64 = *(uint64_t (**)(void))(v0 + 8);
  return v64();
}

uint64_t sub_100168514(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  *(unsigned char *)(v7 + 285) = a6;
  *(unsigned char *)(v7 + 284) = a5;
  *(void *)(v7 + 232) = a4;
  *(void *)(v7 + 240) = a7;
  *(unsigned char *)(v7 + 283) = a3;
  *(void *)(v7 + 216) = a1;
  *(void *)(v7 + 224) = a2;
  return _swift_task_switch(sub_100168544, 0, 0);
}

uint64_t sub_100168544()
{
  uint64_t v115 = v0;
  uint64_t v1 = (void *)v0;
  uint64_t v2 = v0 + 216;
  id v3 = *(char **)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 224);
  char v5 = *(unsigned char *)(v0 + 283);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 248) = swift_initStackObject();
  os_log_type_t v6 = sub_10010D0A4(v3, v4, v5);
  *(void *)(v0 + 256) = v6;
  uint64_t v7 = (os_activity_scope_state_s *)(v6 + 24);
  swift_beginAccess();
  uint64_t v8 = swift_unknownObjectRetain();
  os_activity_scope_enter(v8, v7);
  swift_endAccess();
  swift_unknownObjectRelease();
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Checking for first unlock.", v11, 2u);
    swift_slowDealloc();
  }
  uint64_t v12 = (unsigned char *)(v0 + 280);

  uint64_t v113 = v0;
  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    goto LABEL_19;
  }
  uint64_t v13 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v13;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  os_log_type_t v14 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v14, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v13);
  LOBYTE(v13) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  os_log_type_t v15 = Logger.logObject.getter();
  if ((v13 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v12 = (unsigned char *)(v0 + 280);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    uint64_t v29 = swift_allocError();
    *id v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D40);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 282) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v50, 2u);
        swift_slowDealloc();
      }
      uint64_t v51 = *(void *)(v0 + 232);

      sub_10019055C(&qword_100341D48, &qword_100341D40);
      swift_allocError();
      *uint64_t v52 = 0;
      swift_willThrow();
      uint64_t v53 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(v51, v53);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          id v41 = v37;
          uint64_t v42 = swift_slowAlloc();
          uint64_t v110 = (void *)swift_slowAlloc();
          v114[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v42 = 136446466;
          uint64_t v43 = StaticString.description.getter();
          v1[23] = sub_1000A2E70(v43, v44, v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v42 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v45 = v37;
          swift_storeEnumTagMultiPayload();
          id v46 = v38;
          uint64_t v47 = _swift_stdlib_bridgeErrorToNSError();
          v1[24] = v47;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v110 = v47;
          id v37 = v41;

          _os_log_impl((void *)&_mh_execute_header, v39, v40, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v42, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v95 = v1[29];
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v96 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v97 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v97 - 8) + 8))(v95, v97);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    uint64_t v63 = (uint64_t *)(v0 + 176);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v2 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v12 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v71 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v71 = swift_allocError();
        *os_log_type_t v102 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v103 = Logger.logObject.getter();
      os_log_type_t v104 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v103, v104))
      {
        uint64_t v105 = (uint8_t *)swift_slowAlloc();
        uint64_t v106 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v105 = 138412290;
        swift_errorRetain();
        uint64_t v107 = _swift_stdlib_bridgeErrorToNSError();
        *uint64_t v63 = v107;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v106 = v107;
        uint64_t v1 = (void *)v113;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v103, v104, "The preflight error %@ did not result in a TTR.", v105, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v108 = v1[29];
      sub_10023C5AC(v71);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v109 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v109 - 8) + 8))(v108, v109);
      swift_errorRelease();
      goto LABEL_69;
    }
    uint64_t v64 = (uint64_t *)(v2 - 48);
    swift_errorRelease();
    *(void *)(v2 - 72) = v29;
    uint64_t v65 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v67 = *v65;
        unint64_t v66 = v65[1];
        swift_bridgeObjectRetain_n();
        uint64_t v68 = Logger.logObject.getter();
        os_log_type_t v69 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v68, v69))
        {
          uint64_t v70 = (uint8_t *)swift_slowAlloc();
          v114[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v70 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t *v64 = sub_1000A2E70(v67, v66, v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "askForTime response handling did not find ask request identifier %s", v70, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v99 = *(void *)(v113 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v100 = v67;
        v100[1] = v66;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v101 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v101 - 8) + 8))(v99, v101);
        uint64_t v1 = (void *)v113;
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v65);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = swift_slowAlloc();
      uint64_t v75 = (void *)swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v74 = 136446466;
      uint64_t v76 = StaticString.description.getter();
      *(void *)(v113 + 152) = sub_1000A2E70(v76, v77, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v74 + 12) = 2114;
      swift_errorRetain();
      uint64_t v78 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v113 + 160) = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v75 = v78;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v74, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v12[5]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v12[5])
      {
LABEL_65:
        uint64_t v1 = (void *)v113;
        uint64_t v93 = *(void *)(v113 + 232);
        sub_10023C5AC(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v94 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v94 - 8) + 8))(v93, v94);
LABEL_69:
        swift_release();
        uint64_t v98 = (uint64_t (*)(void))v1[1];
        return v98(0);
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v79 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v79 = 1;
    }
    if (!v79 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      uint64_t v82 = *(void *)(v113 + 232);
      char v83 = *(unsigned char *)(v113 + 283);
      uint64_t v111 = *(void *)(v113 + 216);
      uint64_t v112 = *(void *)(v113 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v84 = swift_task_alloc();
      uint64_t v85 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v84, 1, 1, v85);
      uint64_t v86 = type metadata accessor for Logger();
      uint64_t v87 = *(void *)(v86 - 8);
      uint64_t v88 = *(void *)(v87 + 64);
      uint64_t v89 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 16))(v89, v82, v86);
      unint64_t v90 = (*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
      uint64_t v91 = swift_allocObject();
      *(void *)(v91 + 16) = 0;
      *(void *)(v91 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v87 + 32))(v91 + v90, v89, v86);
      unint64_t v92 = v91 + ((v90 + v88 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v92 = v111;
      *(void *)(v92 + 8) = v112;
      *(unsigned char *)(v92 + 16) = v83;
      *(void *)(v91 + ((v90 + v88 + 31) & 0xFFFFFFFFFFFFFFF8)) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v84, (uint64_t)&unk_100343860, v91);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v16 = *(unsigned char *)(v0 + 284);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v15, v17);
  if (v16)
  {
    if (v18)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v17, "Starting preflight.", v19, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      uint64_t v12 = (unsigned char *)(v0 + 280);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      unsigned char *v30 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v18)
    {
      unint64_t v54 = (uint8_t *)swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v54 = 136446210;
      uint64_t v55 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v55, v56, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v17, "%{public}s has opted out of preflight", v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  os_log_type_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v57, v58))
  {
    uint64_t v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Starting the activity.", v59, 2u);
    swift_slowDealloc();
  }

  uint64_t v60 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v60;
  void *v60 = v0;
  v60[1] = sub_100169AD8;
  uint64_t v61 = *(void *)(v0 + 240);
  return sub_1000D655C(v0 + 281, v61);
}

uint64_t sub_100169AD8()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100169C9C;
  }
  else {
    uint64_t v2 = sub_100169BEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100169BEC()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 281);
  swift_release();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

uint64_t sub_100169C9C()
{
  uint64_t v70 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 272);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D40);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 282) & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_10019055C(&qword_100341D48, &qword_100341D40);
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 280) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      unint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        unint64_t v56 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v21, v20, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 285)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 285))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v68 = *(unsigned char *)(v0 + 283);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v68;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_100343860, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    v69[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    void *v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *uint64_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  swift_release();
  uint64_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61(0);
}

uint64_t sub_10016AA84(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 293) = a6;
  *(unsigned char *)(v8 + 292) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 291) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_10016AAB8, 0, 0);
}

uint64_t sub_10016AAB8()
{
  uint64_t v114 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 291);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 256) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 264) = v4;
  char v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  os_log_type_t v10 = (unsigned char *)(v0 + 288);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      os_log_type_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D40);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 290) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void **)(v0 + 240);
      uint64_t v49 = *(void *)(v0 + 232);

      sub_10019055C(&qword_100341D48, &qword_100341D40);
      swift_allocError();
      unsigned char *v50 = 0;
      swift_willThrow();
      uint64_t v51 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    unint64_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v109 = v35;
          uint64_t v39 = swift_slowAlloc();
          uint64_t v108 = (void *)swift_slowAlloc();
          v113[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v108 = v44;

          id v35 = v109;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v48 = *(void **)(v0 + 240);
        uint64_t v91 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v92 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v93 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8))(v91, v93);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v68 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v68 = swift_allocError();
        *uint64_t v99 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v100, v101))
      {
        os_log_type_t v102 = (uint8_t *)swift_slowAlloc();
        uint64_t v103 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v102 = 138412290;
        swift_errorRetain();
        uint64_t v104 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v103 = v104;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "The preflight error %@ did not result in a TTR.", v102, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v105 = *(void **)(v0 + 240);
      uint64_t v106 = *(void *)(v0 + 232);
      sub_10023C5AC(v68);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v107 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 8))(v106, v107);
      swift_errorRelease();

      goto LABEL_70;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v62 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v64 = *v62;
        unint64_t v63 = v62[1];
        swift_bridgeObjectRetain_n();
        uint64_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v65, v66))
        {
          uint64_t v67 = (uint8_t *)swift_slowAlloc();
          v113[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v67 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v64, v63, v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "askForTime response handling did not find ask request identifier %s", v67, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v95 = *(void **)(v0 + 240);
        uint64_t v96 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v97 = v64;
        v97[1] = v63;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v98 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v98 - 8) + 8))(v96, v98);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_70;
      }
      sub_1000C9DB4((uint64_t)v62);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      uint64_t v72 = (void *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 136446466;
      uint64_t v73 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v73, v74, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 12) = 2114;
      swift_errorRetain();
      uint64_t v75 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v72 = v75;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v71, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[5]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[5])
      {
LABEL_65:
        uint64_t v48 = *(void **)(v0 + 240);
        uint64_t v89 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v90 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v89, v90);
LABEL_69:

LABEL_70:
        swift_release();
        uint64_t v94 = *(uint64_t (**)(void))(v0 + 8);
        return v94(0);
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v76 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v76 = 1;
    }
    if (!v76 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v112 = *(unsigned char *)(v0 + 291);
      uint64_t v79 = *(void *)(v0 + 232);
      uint64_t v110 = *(void *)(v0 + 216);
      uint64_t v111 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v80 = swift_task_alloc();
      uint64_t v81 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 1, 1, v81);
      uint64_t v82 = type metadata accessor for Logger();
      uint64_t v83 = *(void *)(v82 - 8);
      uint64_t v84 = *(void *)(v83 + 64);
      uint64_t v85 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v85, v79, v82);
      unint64_t v86 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v83 + 32))(v87 + v86, v85, v82);
      unint64_t v88 = v87 + ((v86 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v88 = v110;
      *(void *)(v88 + 8) = v111;
      *(unsigned char *)(v88 + 16) = v112;
      *(void *)(v87 + ((v86 + v84 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v80, (uint64_t)&unk_100343850, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 292);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      os_log_type_t v10 = (unsigned char *)(v0 + 288);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *uint64_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136446210;
      uint64_t v53 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v53, v54, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  os_log_type_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    os_log_type_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Starting the activity.", v57, 2u);
    swift_slowDealloc();
  }

  uint64_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v58;
  *uint64_t v58 = v0;
  v58[1] = sub_10016C00C;
  uint64_t v59 = *(void *)(v0 + 240);
  uint64_t v60 = *(void *)(v0 + 248);
  return sub_1000D7024(v0 + 289, v59, v60);
}

uint64_t sub_10016C00C()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10016C1E0;
  }
  else {
    uint64_t v2 = sub_10016C120;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10016C120()
{
  uint64_t v1 = *(void **)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 232);
  swift_release();
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 289);

  swift_release();
  char v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

uint64_t sub_10016C1E0()
{
  uint64_t v74 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 280);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D40);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 290) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        char v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          uint64_t v67 = (void *)swift_slowAlloc();
          v73[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v67 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v49 = *(void **)(v0 + 240);
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_47;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 288) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v26 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v26 = swift_allocError();
        *os_log_type_t v57 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        uint64_t v61 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 138412290;
        swift_errorRetain();
        uint64_t v62 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v61 = v62;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "The preflight error %@ did not result in a TTR.", v60, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      os_log_type_t v46 = *(void **)(v0 + 240);
      uint64_t v63 = *(void *)(v0 + 232);
      sub_10023C5AC(v26);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v64 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v64 - 8) + 8))(v63, v64);
      swift_errorRelease();
      goto LABEL_46;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    unint64_t v20 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v22 = *v20;
        unint64_t v21 = v20[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
          v73[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v25 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v22, v21, v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "askForTime response handling did not find ask request identifier %s", v25, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v53 = *(void **)(v0 + 240);
        uint64_t v54 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v55 = v22;
        v55[1] = v21;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v56 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v54, v56);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_47;
      }
      sub_1000C9DB4((uint64_t)v20);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v73[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446466;
      uint64_t v30 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v30, v31, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v29, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 293)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 293))
      {
LABEL_35:
        os_log_type_t v46 = *(void **)(v0 + 240);
        uint64_t v47 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v48 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v47, v48);
LABEL_46:

        goto LABEL_47;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v33 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (!v33 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v72 = *(unsigned char *)(v0 + 291);
      uint64_t v36 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v71 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v37 = swift_task_alloc();
      uint64_t v38 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(void *)(v40 + 64);
      uint64_t v42 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v42, v36, v39);
      unint64_t v43 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = 0;
      *(void *)(v44 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v40 + 32))(v44 + v43, v42, v39);
      unint64_t v45 = v44 + ((v43 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v45 = loga;
      *(void *)(v45 + 8) = v71;
      *(unsigned char *)(v45 + 16) = v72;
      *(void *)(v44 + ((v43 + v41 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v37, (uint64_t)&unk_100343850, v44);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  BOOL v16 = *(void **)(v0 + 240);
  uint64_t v17 = *(void *)(v0 + 232);

  sub_10019055C(&qword_100341D48, &qword_100341D40);
  swift_allocError();
  *uint64_t v18 = 0;
  swift_willThrow();
  uint64_t v19 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v17, v19);
  swift_errorRelease();

LABEL_47:
  swift_release();
  uint64_t v65 = *(uint64_t (**)(void))(v0 + 8);
  return v65(0);
}

uint64_t sub_10016CFE4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  *(unsigned char *)(v6 + 277) = a6;
  *(unsigned char *)(v6 + 276) = a5;
  *(void *)(v6 + 224) = a2;
  *(void *)(v6 + 232) = a4;
  *(unsigned char *)(v6 + 275) = a3;
  *(void *)(v6 + 216) = a1;
  return _swift_task_switch(sub_10016D014, 0, 0);
}

uint64_t sub_10016D014()
{
  uint64_t v119 = v0;
  uint64_t v1 = v0 + 216;
  uint64_t v2 = *(char **)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  char v4 = *(unsigned char *)(v0 + 275);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 240) = swift_initStackObject();
  char v5 = sub_10010D0A4(v2, v3, v4);
  *(void *)(v0 + 248) = v5;
  uint64_t v6 = (os_activity_scope_state_s *)(v5 + 24);
  swift_beginAccess();
  uint64_t v7 = swift_unknownObjectRetain();
  os_activity_scope_enter(v7, v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking for first unlock.", v10, 2u);
    swift_slowDealloc();
  }
  id v11 = (unsigned char *)(v0 + 272);

  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    goto LABEL_19;
  }
  uint64_t v12 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v13 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v12);
  LOBYTE(v12) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  os_log_type_t v14 = Logger.logObject.getter();
  if ((v12 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v11 = (unsigned char *)(v0 + 272);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    uint64_t v29 = swift_allocError();
    *id v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D40);
    if (swift_dynamicCast() && (*(unsigned char *)(v1 + 58) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C(&qword_100341D48, &qword_100341D40);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_75;
    }
    swift_errorRelease();
    *(void *)(v1 - 88) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          os_log_type_t type = v40;
          uint64_t v41 = swift_slowAlloc();
          char v112 = (void *)swift_slowAlloc();
          v118[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136446466;
          uint64_t v42 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v42, v43, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *uint64_t v44 = v37;
          swift_storeEnumTagMultiPayload();
          id v45 = v38;
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *char v112 = v46;

          _os_log_impl((void *)&_mh_execute_header, v39, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v41, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v97 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v98 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v99 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v97, v99);
        swift_task_dealloc();
LABEL_75:
        swift_errorRelease();
        goto LABEL_76;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    uint64_t v115 = (uint64_t *)(v1 - 40);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v1 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v11 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v64 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v64 = swift_allocError();
        *uint64_t v103 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v106 = (uint8_t *)swift_slowAlloc();
        uint64_t v107 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v106 = 138412290;
        swift_errorRetain();
        uint64_t v108 = _swift_stdlib_bridgeErrorToNSError();
        *uint64_t v115 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v107 = v108;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "The preflight error %@ did not result in a TTR.", v106, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v109 = *(void *)(v0 + 232);
      sub_10023C5AC(v64);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v110 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v109, v110);
      goto LABEL_75;
    }
    uint64_t v56 = (uint64_t *)(v1 - 48);
    swift_errorRelease();
    *(void *)(v1 - 72) = v29;
    os_log_type_t v57 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v59 = *v57;
        unint64_t v58 = v57[1];
        swift_bridgeObjectRetain_n();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = 136315138;
          v118[0] = v63;
          swift_bridgeObjectRetain();
          *uint64_t v56 = sub_1000A2E70(v59, v58, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "askForTime response handling did not find ask request identifier %s", v62, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v100 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v101 = v59;
        v101[1] = v58;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v102 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(v100, v102);
        swift_task_dealloc();
        goto LABEL_75;
      }
      sub_1000C9DB4((uint64_t)v57);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v68 = (void *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136446466;
      uint64_t v69 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v69, v70, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 12) = 2114;
      swift_errorRetain();
      uint64_t v71 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v68 = v71;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v67, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v11[5]) {
        goto LABEL_59;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v11[5])
      {
LABEL_59:
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5AC(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_76:
        uint64_t v111 = *(uint64_t (**)(void))(v0 + 8);
        return v111(0);
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v72 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v72 = 1;
    }
    if (!v72 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v117 = *(unsigned char *)(v0 + 275);
      uint64_t v75 = *(void *)(v0 + 232);
      uint64_t v114 = *(void *)(v0 + 216);
      uint64_t v116 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v76 = swift_task_alloc();
      uint64_t v77 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v76, 1, 1, v77);
      uint64_t v78 = type metadata accessor for Logger();
      uint64_t v79 = *(void *)(v78 - 8);
      uint64_t v80 = *(void *)(v79 + 64);
      uint64_t v81 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v81, v75, v78);
      uint64_t v82 = v0;
      unint64_t v83 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
      uint64_t v84 = v83 + v80;
      unint64_t v85 = (v83 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v86 = (v84 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v87 = swift_allocObject();
      unint64_t v88 = v87 + v83;
      uint64_t v0 = v82;
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v79 + 32))(v88, v81, v78);
      unint64_t v89 = v87 + v85;
      *(void *)unint64_t v89 = v114;
      *(void *)(v89 + 8) = v116;
      *(unsigned char *)(v89 + 16) = v117;
      *(void *)(v87 + v86) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v76, (uint64_t)&unk_100343800, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_59;
  }
  uint64_t v15 = v0;
  char v16 = *(unsigned char *)(v0 + 276);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v14, v17);
  if (v16)
  {
    if (v18)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v17, "Starting preflight.", v19, 2u);
      swift_slowDealloc();
    }

    uint64_t v0 = v15;
    if (qword_100340D70 != -1) {
      swift_once();
    }
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      id v11 = (unsigned char *)(v1 + 56);
      os_log_type_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        id v11 = (unsigned char *)(v1 + 56);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      unsigned char *v30 = 0;
      goto LABEL_23;
    }
  }
  else if (v18)
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    v118[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 136446210;
    uint64_t v0 = v15;
    uint64_t v54 = StaticString.description.getter();
    *(void *)(v15 + 208) = sub_1000A2E70(v54, v55, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v17, "%{public}s has opted out of preflight", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v0 = v15;
  }
  unint64_t v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Starting the activity.", v94, 2u);
    swift_slowDealloc();
  }

  uint64_t v95 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v95;
  *uint64_t v95 = v0;
  v95[1] = sub_10016E574;
  return sub_1001009C4(v0 + 273);
}

uint64_t sub_10016E574()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10016E72C;
  }
  else {
    uint64_t v2 = sub_10016E688;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10016E688()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 273);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

uint64_t sub_10016E72C()
{
  uint64_t v71 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 264);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D40);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 274) & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_10019055C(&qword_100341D48, &qword_100341D40);
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 272) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v68 = v21;
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v70[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v68, v20, v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v21 = v68;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 277)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 277))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v69 = *(unsigned char *)(v0 + 275);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v69;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_100343800, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    v70[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    void *v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *os_log_type_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61(0);
}

uint64_t sub_10016F4F8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  *(unsigned char *)(v6 + 277) = a6;
  *(unsigned char *)(v6 + 276) = a5;
  *(void *)(v6 + 224) = a2;
  *(void *)(v6 + 232) = a4;
  *(unsigned char *)(v6 + 275) = a3;
  *(void *)(v6 + 216) = a1;
  return _swift_task_switch(sub_10016F528, 0, 0);
}

uint64_t sub_10016F528()
{
  uint64_t v119 = v0;
  uint64_t v1 = v0 + 216;
  uint64_t v2 = *(char **)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  char v4 = *(unsigned char *)(v0 + 275);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 240) = swift_initStackObject();
  char v5 = sub_10010D0A4(v2, v3, v4);
  *(void *)(v0 + 248) = v5;
  uint64_t v6 = (os_activity_scope_state_s *)(v5 + 24);
  swift_beginAccess();
  uint64_t v7 = swift_unknownObjectRetain();
  os_activity_scope_enter(v7, v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking for first unlock.", v10, 2u);
    swift_slowDealloc();
  }
  id v11 = (unsigned char *)(v0 + 272);

  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    goto LABEL_19;
  }
  uint64_t v12 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v13 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v12);
  LOBYTE(v12) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  os_log_type_t v14 = Logger.logObject.getter();
  if ((v12 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v31))
    {
      BOOL v32 = (uint8_t *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v11 = (unsigned char *)(v0 + 272);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    uint64_t v29 = swift_allocError();
    *uint64_t v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D40);
    if (swift_dynamicCast() && (*(unsigned char *)(v1 + 58) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C(&qword_100341D48, &qword_100341D40);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_75;
    }
    swift_errorRelease();
    *(void *)(v1 - 88) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          os_log_type_t type = v40;
          uint64_t v41 = swift_slowAlloc();
          char v112 = (void *)swift_slowAlloc();
          v118[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136446466;
          uint64_t v42 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v42, v43, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v44 = v37;
          swift_storeEnumTagMultiPayload();
          id v45 = v38;
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *char v112 = v46;

          _os_log_impl((void *)&_mh_execute_header, v39, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v41, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v97 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v98 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v99 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v97, v99);
        swift_task_dealloc();
LABEL_75:
        swift_errorRelease();
        goto LABEL_76;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    uint64_t v115 = (uint64_t *)(v1 - 40);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v1 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v11 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v64 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v64 = swift_allocError();
        *uint64_t v103 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v106 = (uint8_t *)swift_slowAlloc();
        uint64_t v107 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v106 = 138412290;
        swift_errorRetain();
        uint64_t v108 = _swift_stdlib_bridgeErrorToNSError();
        *uint64_t v115 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v107 = v108;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "The preflight error %@ did not result in a TTR.", v106, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v109 = *(void *)(v0 + 232);
      sub_10023C5AC(v64);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v110 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v109, v110);
      goto LABEL_75;
    }
    uint64_t v56 = (uint64_t *)(v1 - 48);
    swift_errorRelease();
    *(void *)(v1 - 72) = v29;
    os_log_type_t v57 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v59 = *v57;
        unint64_t v58 = v57[1];
        swift_bridgeObjectRetain_n();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = 136315138;
          v118[0] = v63;
          swift_bridgeObjectRetain();
          *uint64_t v56 = sub_1000A2E70(v59, v58, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "askForTime response handling did not find ask request identifier %s", v62, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v100 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v101 = v59;
        v101[1] = v58;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v102 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(v100, v102);
        swift_task_dealloc();
        goto LABEL_75;
      }
      sub_1000C9DB4((uint64_t)v57);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v68 = (void *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136446466;
      uint64_t v69 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v69, v70, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 12) = 2114;
      swift_errorRetain();
      uint64_t v71 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v68 = v71;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v67, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v11[5]) {
        goto LABEL_59;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v11[5])
      {
LABEL_59:
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5AC(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_76:
        uint64_t v111 = *(uint64_t (**)(void))(v0 + 8);
        return v111(0);
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v72 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v72 = 1;
    }
    if (!v72 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v117 = *(unsigned char *)(v0 + 275);
      uint64_t v75 = *(void *)(v0 + 232);
      uint64_t v114 = *(void *)(v0 + 216);
      uint64_t v116 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v76 = swift_task_alloc();
      uint64_t v77 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v76, 1, 1, v77);
      uint64_t v78 = type metadata accessor for Logger();
      uint64_t v79 = *(void *)(v78 - 8);
      uint64_t v80 = *(void *)(v79 + 64);
      uint64_t v81 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v81, v75, v78);
      uint64_t v82 = v0;
      unint64_t v83 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
      uint64_t v84 = v83 + v80;
      unint64_t v85 = (v83 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v86 = (v84 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v87 = swift_allocObject();
      unint64_t v88 = v87 + v83;
      uint64_t v0 = v82;
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v79 + 32))(v88, v81, v78);
      unint64_t v89 = v87 + v85;
      *(void *)unint64_t v89 = v114;
      *(void *)(v89 + 8) = v116;
      *(unsigned char *)(v89 + 16) = v117;
      *(void *)(v87 + v86) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v76, (uint64_t)&unk_1003437F0, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_59;
  }
  uint64_t v15 = v0;
  char v16 = *(unsigned char *)(v0 + 276);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v14, v17);
  if (v16)
  {
    if (v18)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v17, "Starting preflight.", v19, 2u);
      swift_slowDealloc();
    }

    uint64_t v0 = v15;
    if (qword_100340D70 != -1) {
      swift_once();
    }
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      id v11 = (unsigned char *)(v1 + 56);
      os_log_type_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        id v11 = (unsigned char *)(v1 + 56);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      unsigned char *v30 = 0;
      goto LABEL_23;
    }
  }
  else if (v18)
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    v118[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 136446210;
    uint64_t v0 = v15;
    uint64_t v54 = StaticString.description.getter();
    *(void *)(v15 + 208) = sub_1000A2E70(v54, v55, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v17, "%{public}s has opted out of preflight", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v0 = v15;
  }
  unint64_t v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Starting the activity.", v94, 2u);
    swift_slowDealloc();
  }

  uint64_t v95 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v95;
  *uint64_t v95 = v0;
  v95[1] = sub_100170A88;
  return sub_1001011E8(v0 + 273);
}

uint64_t sub_100170A88()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100170B9C;
  }
  else {
    uint64_t v2 = sub_100190D88;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100170B9C()
{
  uint64_t v71 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 264);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D40);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 274) & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_10019055C(&qword_100341D48, &qword_100341D40);
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 272) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v68 = v21;
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v70[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v68, v20, v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v21 = v68;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 277)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 277))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v69 = *(unsigned char *)(v0 + 275);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v69;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_1003437F0, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    v70[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    void *v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *os_log_type_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61(0);
}

uint64_t sub_100171968(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  *(unsigned char *)(v6 + 277) = a6;
  *(unsigned char *)(v6 + 276) = a5;
  *(void *)(v6 + 224) = a2;
  *(void *)(v6 + 232) = a4;
  *(unsigned char *)(v6 + 275) = a3;
  *(void *)(v6 + 216) = a1;
  return _swift_task_switch(sub_100171998, 0, 0);
}

uint64_t sub_100171998()
{
  uint64_t v119 = v0;
  uint64_t v1 = v0 + 216;
  uint64_t v2 = *(char **)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  char v4 = *(unsigned char *)(v0 + 275);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 240) = swift_initStackObject();
  char v5 = sub_10010D0A4(v2, v3, v4);
  *(void *)(v0 + 248) = v5;
  uint64_t v6 = (os_activity_scope_state_s *)(v5 + 24);
  swift_beginAccess();
  uint64_t v7 = swift_unknownObjectRetain();
  os_activity_scope_enter(v7, v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking for first unlock.", v10, 2u);
    swift_slowDealloc();
  }
  id v11 = (unsigned char *)(v0 + 272);

  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    goto LABEL_19;
  }
  uint64_t v12 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v13 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v12);
  LOBYTE(v12) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  os_log_type_t v14 = Logger.logObject.getter();
  if ((v12 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v31))
    {
      BOOL v32 = (uint8_t *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v11 = (unsigned char *)(v0 + 272);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    uint64_t v29 = swift_allocError();
    *uint64_t v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D40);
    if (swift_dynamicCast() && (*(unsigned char *)(v1 + 58) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C(&qword_100341D48, &qword_100341D40);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_75;
    }
    swift_errorRelease();
    *(void *)(v1 - 88) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          os_log_type_t type = v40;
          uint64_t v41 = swift_slowAlloc();
          char v112 = (void *)swift_slowAlloc();
          v118[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136446466;
          uint64_t v42 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v42, v43, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v44 = v37;
          swift_storeEnumTagMultiPayload();
          id v45 = v38;
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *char v112 = v46;

          _os_log_impl((void *)&_mh_execute_header, v39, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v41, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v97 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v98 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v99 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v97, v99);
        swift_task_dealloc();
LABEL_75:
        swift_errorRelease();
        goto LABEL_76;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    uint64_t v115 = (uint64_t *)(v1 - 40);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v1 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v11 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v64 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v64 = swift_allocError();
        *uint64_t v103 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v106 = (uint8_t *)swift_slowAlloc();
        uint64_t v107 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v106 = 138412290;
        swift_errorRetain();
        uint64_t v108 = _swift_stdlib_bridgeErrorToNSError();
        *uint64_t v115 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v107 = v108;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "The preflight error %@ did not result in a TTR.", v106, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v109 = *(void *)(v0 + 232);
      sub_10023C5AC(v64);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v110 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v109, v110);
      goto LABEL_75;
    }
    uint64_t v56 = (uint64_t *)(v1 - 48);
    swift_errorRelease();
    *(void *)(v1 - 72) = v29;
    os_log_type_t v57 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v59 = *v57;
        unint64_t v58 = v57[1];
        swift_bridgeObjectRetain_n();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = 136315138;
          v118[0] = v63;
          swift_bridgeObjectRetain();
          *uint64_t v56 = sub_1000A2E70(v59, v58, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "askForTime response handling did not find ask request identifier %s", v62, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v100 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v101 = v59;
        v101[1] = v58;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v102 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(v100, v102);
        swift_task_dealloc();
        goto LABEL_75;
      }
      sub_1000C9DB4((uint64_t)v57);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v68 = (void *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136446466;
      uint64_t v69 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v69, v70, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 12) = 2114;
      swift_errorRetain();
      uint64_t v71 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v68 = v71;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v67, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v11[5]) {
        goto LABEL_59;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v11[5])
      {
LABEL_59:
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5AC(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_76:
        uint64_t v111 = *(uint64_t (**)(void))(v0 + 8);
        return v111(0);
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v72 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v72 = 1;
    }
    if (!v72 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v117 = *(unsigned char *)(v0 + 275);
      uint64_t v75 = *(void *)(v0 + 232);
      uint64_t v114 = *(void *)(v0 + 216);
      uint64_t v116 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v76 = swift_task_alloc();
      uint64_t v77 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v76, 1, 1, v77);
      uint64_t v78 = type metadata accessor for Logger();
      uint64_t v79 = *(void *)(v78 - 8);
      uint64_t v80 = *(void *)(v79 + 64);
      uint64_t v81 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v81, v75, v78);
      uint64_t v82 = v0;
      unint64_t v83 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
      uint64_t v84 = v83 + v80;
      unint64_t v85 = (v83 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v86 = (v84 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v87 = swift_allocObject();
      unint64_t v88 = v87 + v83;
      uint64_t v0 = v82;
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v79 + 32))(v88, v81, v78);
      unint64_t v89 = v87 + v85;
      *(void *)unint64_t v89 = v114;
      *(void *)(v89 + 8) = v116;
      *(unsigned char *)(v89 + 16) = v117;
      *(void *)(v87 + v86) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v76, (uint64_t)&unk_1003437E0, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_59;
  }
  uint64_t v15 = v0;
  char v16 = *(unsigned char *)(v0 + 276);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v14, v17);
  if (v16)
  {
    if (v18)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v17, "Starting preflight.", v19, 2u);
      swift_slowDealloc();
    }

    uint64_t v0 = v15;
    if (qword_100340D70 != -1) {
      swift_once();
    }
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      id v11 = (unsigned char *)(v1 + 56);
      os_log_type_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        id v11 = (unsigned char *)(v1 + 56);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      unsigned char *v30 = 0;
      goto LABEL_23;
    }
  }
  else if (v18)
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    v118[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 136446210;
    uint64_t v0 = v15;
    uint64_t v54 = StaticString.description.getter();
    *(void *)(v15 + 208) = sub_1000A2E70(v54, v55, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v17, "%{public}s has opted out of preflight", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v0 = v15;
  }
  unint64_t v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Starting the activity.", v94, 2u);
    swift_slowDealloc();
  }

  uint64_t v95 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v95;
  *uint64_t v95 = v0;
  v95[1] = sub_100172EF8;
  return sub_1001018F4(v0 + 273);
}

uint64_t sub_100172EF8()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10017300C;
  }
  else {
    uint64_t v2 = sub_100190D88;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10017300C()
{
  uint64_t v71 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 264);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D40);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 274) & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_10019055C(&qword_100341D48, &qword_100341D40);
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 272) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v68 = v21;
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v70[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v68, v20, v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v21 = v68;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 277)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 277))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v69 = *(unsigned char *)(v0 + 275);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v69;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_1003437E0, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    v70[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    void *v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *os_log_type_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61(0);
}

uint64_t sub_100173DD8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  *(unsigned char *)(v6 + 277) = a6;
  *(unsigned char *)(v6 + 276) = a5;
  *(void *)(v6 + 224) = a2;
  *(void *)(v6 + 232) = a4;
  *(unsigned char *)(v6 + 275) = a3;
  *(void *)(v6 + 216) = a1;
  return _swift_task_switch(sub_100173E08, 0, 0);
}

uint64_t sub_100173E08()
{
  uint64_t v119 = v0;
  uint64_t v1 = v0 + 216;
  uint64_t v2 = *(char **)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  char v4 = *(unsigned char *)(v0 + 275);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 240) = swift_initStackObject();
  char v5 = sub_10010D0A4(v2, v3, v4);
  *(void *)(v0 + 248) = v5;
  uint64_t v6 = (os_activity_scope_state_s *)(v5 + 24);
  swift_beginAccess();
  uint64_t v7 = swift_unknownObjectRetain();
  os_activity_scope_enter(v7, v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking for first unlock.", v10, 2u);
    swift_slowDealloc();
  }
  id v11 = (unsigned char *)(v0 + 272);

  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    goto LABEL_19;
  }
  uint64_t v12 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v13 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v12);
  LOBYTE(v12) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  os_log_type_t v14 = Logger.logObject.getter();
  if ((v12 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v31))
    {
      BOOL v32 = (uint8_t *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v11 = (unsigned char *)(v0 + 272);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    uint64_t v29 = swift_allocError();
    *uint64_t v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D40);
    if (swift_dynamicCast() && (*(unsigned char *)(v1 + 58) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C(&qword_100341D48, &qword_100341D40);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_75;
    }
    swift_errorRelease();
    *(void *)(v1 - 88) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          os_log_type_t type = v40;
          uint64_t v41 = swift_slowAlloc();
          char v112 = (void *)swift_slowAlloc();
          v118[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136446466;
          uint64_t v42 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v42, v43, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v44 = v37;
          swift_storeEnumTagMultiPayload();
          id v45 = v38;
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *char v112 = v46;

          _os_log_impl((void *)&_mh_execute_header, v39, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v41, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v97 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v98 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v99 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v97, v99);
        swift_task_dealloc();
LABEL_75:
        swift_errorRelease();
        goto LABEL_76;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    uint64_t v115 = (uint64_t *)(v1 - 40);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v1 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v11 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v64 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v64 = swift_allocError();
        *uint64_t v103 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v106 = (uint8_t *)swift_slowAlloc();
        uint64_t v107 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v106 = 138412290;
        swift_errorRetain();
        uint64_t v108 = _swift_stdlib_bridgeErrorToNSError();
        *uint64_t v115 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v107 = v108;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "The preflight error %@ did not result in a TTR.", v106, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v109 = *(void *)(v0 + 232);
      sub_10023C5AC(v64);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v110 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v109, v110);
      goto LABEL_75;
    }
    uint64_t v56 = (uint64_t *)(v1 - 48);
    swift_errorRelease();
    *(void *)(v1 - 72) = v29;
    os_log_type_t v57 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v59 = *v57;
        unint64_t v58 = v57[1];
        swift_bridgeObjectRetain_n();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = 136315138;
          v118[0] = v63;
          swift_bridgeObjectRetain();
          *uint64_t v56 = sub_1000A2E70(v59, v58, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "askForTime response handling did not find ask request identifier %s", v62, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v100 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v101 = v59;
        v101[1] = v58;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v102 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(v100, v102);
        swift_task_dealloc();
        goto LABEL_75;
      }
      sub_1000C9DB4((uint64_t)v57);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v68 = (void *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136446466;
      uint64_t v69 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v69, v70, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 12) = 2114;
      swift_errorRetain();
      uint64_t v71 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v68 = v71;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v67, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v11[5]) {
        goto LABEL_59;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v11[5])
      {
LABEL_59:
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5AC(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_76:
        uint64_t v111 = *(uint64_t (**)(void))(v0 + 8);
        return v111(0);
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v72 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v72 = 1;
    }
    if (!v72 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v117 = *(unsigned char *)(v0 + 275);
      uint64_t v75 = *(void *)(v0 + 232);
      uint64_t v114 = *(void *)(v0 + 216);
      uint64_t v116 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v76 = swift_task_alloc();
      uint64_t v77 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v76, 1, 1, v77);
      uint64_t v78 = type metadata accessor for Logger();
      uint64_t v79 = *(void *)(v78 - 8);
      uint64_t v80 = *(void *)(v79 + 64);
      uint64_t v81 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v81, v75, v78);
      uint64_t v82 = v0;
      unint64_t v83 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
      uint64_t v84 = v83 + v80;
      unint64_t v85 = (v83 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v86 = (v84 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v87 = swift_allocObject();
      unint64_t v88 = v87 + v83;
      uint64_t v0 = v82;
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v79 + 32))(v88, v81, v78);
      unint64_t v89 = v87 + v85;
      *(void *)unint64_t v89 = v114;
      *(void *)(v89 + 8) = v116;
      *(unsigned char *)(v89 + 16) = v117;
      *(void *)(v87 + v86) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v76, (uint64_t)&unk_1003437D0, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_59;
  }
  uint64_t v15 = v0;
  char v16 = *(unsigned char *)(v0 + 276);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v14, v17);
  if (v16)
  {
    if (v18)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v17, "Starting preflight.", v19, 2u);
      swift_slowDealloc();
    }

    uint64_t v0 = v15;
    if (qword_100340D70 != -1) {
      swift_once();
    }
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      id v11 = (unsigned char *)(v1 + 56);
      os_log_type_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        id v11 = (unsigned char *)(v1 + 56);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      unsigned char *v30 = 0;
      goto LABEL_23;
    }
  }
  else if (v18)
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    v118[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 136446210;
    uint64_t v0 = v15;
    uint64_t v54 = StaticString.description.getter();
    *(void *)(v15 + 208) = sub_1000A2E70(v54, v55, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v17, "%{public}s has opted out of preflight", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v0 = v15;
  }
  unint64_t v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Starting the activity.", v94, 2u);
    swift_slowDealloc();
  }

  uint64_t v95 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v95;
  *uint64_t v95 = v0;
  v95[1] = sub_100175368;
  return sub_100102000(v0 + 273);
}

uint64_t sub_100175368()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10017547C;
  }
  else {
    uint64_t v2 = sub_100190D88;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10017547C()
{
  uint64_t v71 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 264);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D40);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 274) & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_10019055C(&qword_100341D48, &qword_100341D40);
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 272) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v68 = v21;
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v70[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v68, v20, v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v21 = v68;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 277)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 277))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v69 = *(unsigned char *)(v0 + 275);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v69;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_1003437D0, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    v70[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    void *v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *os_log_type_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61(0);
}

uint64_t sub_100176248(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  *(unsigned char *)(v6 + 277) = a6;
  *(unsigned char *)(v6 + 276) = a5;
  *(void *)(v6 + 224) = a2;
  *(void *)(v6 + 232) = a4;
  *(unsigned char *)(v6 + 275) = a3;
  *(void *)(v6 + 216) = a1;
  return _swift_task_switch(sub_100176278, 0, 0);
}

uint64_t sub_100176278()
{
  uint64_t v119 = v0;
  uint64_t v1 = v0 + 216;
  uint64_t v2 = *(char **)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  char v4 = *(unsigned char *)(v0 + 275);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 240) = swift_initStackObject();
  char v5 = sub_10010D0A4(v2, v3, v4);
  *(void *)(v0 + 248) = v5;
  uint64_t v6 = (os_activity_scope_state_s *)(v5 + 24);
  swift_beginAccess();
  uint64_t v7 = swift_unknownObjectRetain();
  os_activity_scope_enter(v7, v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking for first unlock.", v10, 2u);
    swift_slowDealloc();
  }
  id v11 = (unsigned char *)(v0 + 272);

  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    goto LABEL_19;
  }
  uint64_t v12 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v13 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v12);
  LOBYTE(v12) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  os_log_type_t v14 = Logger.logObject.getter();
  if ((v12 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v31))
    {
      BOOL v32 = (uint8_t *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v11 = (unsigned char *)(v0 + 272);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    uint64_t v29 = swift_allocError();
    *uint64_t v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D40);
    if (swift_dynamicCast() && (*(unsigned char *)(v1 + 58) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C(&qword_100341D48, &qword_100341D40);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_75;
    }
    swift_errorRelease();
    *(void *)(v1 - 88) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          os_log_type_t type = v40;
          uint64_t v41 = swift_slowAlloc();
          char v112 = (void *)swift_slowAlloc();
          v118[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136446466;
          uint64_t v42 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v42, v43, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v44 = v37;
          swift_storeEnumTagMultiPayload();
          id v45 = v38;
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *char v112 = v46;

          _os_log_impl((void *)&_mh_execute_header, v39, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v41, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v97 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v98 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v99 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v97, v99);
        swift_task_dealloc();
LABEL_75:
        swift_errorRelease();
        goto LABEL_76;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    uint64_t v115 = (uint64_t *)(v1 - 40);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v1 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v11 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v64 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v64 = swift_allocError();
        *uint64_t v103 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v106 = (uint8_t *)swift_slowAlloc();
        uint64_t v107 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v106 = 138412290;
        swift_errorRetain();
        uint64_t v108 = _swift_stdlib_bridgeErrorToNSError();
        *uint64_t v115 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v107 = v108;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "The preflight error %@ did not result in a TTR.", v106, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v109 = *(void *)(v0 + 232);
      sub_10023C5AC(v64);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v110 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v109, v110);
      goto LABEL_75;
    }
    uint64_t v56 = (uint64_t *)(v1 - 48);
    swift_errorRelease();
    *(void *)(v1 - 72) = v29;
    os_log_type_t v57 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v59 = *v57;
        unint64_t v58 = v57[1];
        swift_bridgeObjectRetain_n();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = 136315138;
          v118[0] = v63;
          swift_bridgeObjectRetain();
          *uint64_t v56 = sub_1000A2E70(v59, v58, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "askForTime response handling did not find ask request identifier %s", v62, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v100 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v101 = v59;
        v101[1] = v58;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v102 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(v100, v102);
        swift_task_dealloc();
        goto LABEL_75;
      }
      sub_1000C9DB4((uint64_t)v57);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v68 = (void *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136446466;
      uint64_t v69 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v69, v70, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 12) = 2114;
      swift_errorRetain();
      uint64_t v71 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v68 = v71;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v67, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v11[5]) {
        goto LABEL_59;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v11[5])
      {
LABEL_59:
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5AC(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_76:
        uint64_t v111 = *(uint64_t (**)(void))(v0 + 8);
        return v111(0);
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v72 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v72 = 1;
    }
    if (!v72 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v117 = *(unsigned char *)(v0 + 275);
      uint64_t v75 = *(void *)(v0 + 232);
      uint64_t v114 = *(void *)(v0 + 216);
      uint64_t v116 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v76 = swift_task_alloc();
      uint64_t v77 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v76, 1, 1, v77);
      uint64_t v78 = type metadata accessor for Logger();
      uint64_t v79 = *(void *)(v78 - 8);
      uint64_t v80 = *(void *)(v79 + 64);
      uint64_t v81 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v81, v75, v78);
      uint64_t v82 = v0;
      unint64_t v83 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
      uint64_t v84 = v83 + v80;
      unint64_t v85 = (v83 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v86 = (v84 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v87 = swift_allocObject();
      unint64_t v88 = v87 + v83;
      uint64_t v0 = v82;
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v79 + 32))(v88, v81, v78);
      unint64_t v89 = v87 + v85;
      *(void *)unint64_t v89 = v114;
      *(void *)(v89 + 8) = v116;
      *(unsigned char *)(v89 + 16) = v117;
      *(void *)(v87 + v86) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v76, (uint64_t)&unk_1003437C0, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_59;
  }
  uint64_t v15 = v0;
  char v16 = *(unsigned char *)(v0 + 276);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v14, v17);
  if (v16)
  {
    if (v18)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v17, "Starting preflight.", v19, 2u);
      swift_slowDealloc();
    }

    uint64_t v0 = v15;
    if (qword_100340D70 != -1) {
      swift_once();
    }
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      id v11 = (unsigned char *)(v1 + 56);
      os_log_type_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        id v11 = (unsigned char *)(v1 + 56);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      unsigned char *v30 = 0;
      goto LABEL_23;
    }
  }
  else if (v18)
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    v118[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 136446210;
    uint64_t v0 = v15;
    uint64_t v54 = StaticString.description.getter();
    *(void *)(v15 + 208) = sub_1000A2E70(v54, v55, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v17, "%{public}s has opted out of preflight", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v0 = v15;
  }
  unint64_t v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Starting the activity.", v94, 2u);
    swift_slowDealloc();
  }

  uint64_t v95 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v95;
  *uint64_t v95 = v0;
  v95[1] = sub_1001777D8;
  return sub_10010270C(v0 + 273);
}

uint64_t sub_1001777D8()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001778EC;
  }
  else {
    uint64_t v2 = sub_100190D88;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001778EC()
{
  uint64_t v71 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 264);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D40);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 274) & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_10019055C(&qword_100341D48, &qword_100341D40);
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 272) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v68 = v21;
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v70[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v68, v20, v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v21 = v68;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 277)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 277))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v69 = *(unsigned char *)(v0 + 275);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v69;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_1003437C0, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    v70[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    void *v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *os_log_type_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61(0);
}

uint64_t sub_1001786B8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  *(unsigned char *)(v6 + 277) = a6;
  *(unsigned char *)(v6 + 276) = a5;
  *(void *)(v6 + 224) = a2;
  *(void *)(v6 + 232) = a4;
  *(unsigned char *)(v6 + 275) = a3;
  *(void *)(v6 + 216) = a1;
  return _swift_task_switch(sub_1001786E8, 0, 0);
}

uint64_t sub_1001786E8()
{
  uint64_t v119 = v0;
  uint64_t v1 = v0 + 216;
  uint64_t v2 = *(char **)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  char v4 = *(unsigned char *)(v0 + 275);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 240) = swift_initStackObject();
  char v5 = sub_10010D0A4(v2, v3, v4);
  *(void *)(v0 + 248) = v5;
  uint64_t v6 = (os_activity_scope_state_s *)(v5 + 24);
  swift_beginAccess();
  uint64_t v7 = swift_unknownObjectRetain();
  os_activity_scope_enter(v7, v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking for first unlock.", v10, 2u);
    swift_slowDealloc();
  }
  id v11 = (unsigned char *)(v0 + 272);

  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    goto LABEL_19;
  }
  uint64_t v12 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v13 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v12);
  LOBYTE(v12) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  os_log_type_t v14 = Logger.logObject.getter();
  if ((v12 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v31))
    {
      BOOL v32 = (uint8_t *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v11 = (unsigned char *)(v0 + 272);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    uint64_t v29 = swift_allocError();
    *uint64_t v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D40);
    if (swift_dynamicCast() && (*(unsigned char *)(v1 + 58) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C(&qword_100341D48, &qword_100341D40);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_75;
    }
    swift_errorRelease();
    *(void *)(v1 - 88) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          os_log_type_t type = v40;
          uint64_t v41 = swift_slowAlloc();
          char v112 = (void *)swift_slowAlloc();
          v118[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136446466;
          uint64_t v42 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v42, v43, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v44 = v37;
          swift_storeEnumTagMultiPayload();
          id v45 = v38;
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *char v112 = v46;

          _os_log_impl((void *)&_mh_execute_header, v39, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v41, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v97 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v98 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v99 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v97, v99);
        swift_task_dealloc();
LABEL_75:
        swift_errorRelease();
        goto LABEL_76;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    uint64_t v115 = (uint64_t *)(v1 - 40);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v1 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v11 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v64 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v64 = swift_allocError();
        *uint64_t v103 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v106 = (uint8_t *)swift_slowAlloc();
        uint64_t v107 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v106 = 138412290;
        swift_errorRetain();
        uint64_t v108 = _swift_stdlib_bridgeErrorToNSError();
        *uint64_t v115 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v107 = v108;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "The preflight error %@ did not result in a TTR.", v106, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v109 = *(void *)(v0 + 232);
      sub_10023C5AC(v64);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v110 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v109, v110);
      goto LABEL_75;
    }
    uint64_t v56 = (uint64_t *)(v1 - 48);
    swift_errorRelease();
    *(void *)(v1 - 72) = v29;
    os_log_type_t v57 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v59 = *v57;
        unint64_t v58 = v57[1];
        swift_bridgeObjectRetain_n();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = 136315138;
          v118[0] = v63;
          swift_bridgeObjectRetain();
          *uint64_t v56 = sub_1000A2E70(v59, v58, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "askForTime response handling did not find ask request identifier %s", v62, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v100 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v101 = v59;
        v101[1] = v58;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v102 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(v100, v102);
        swift_task_dealloc();
        goto LABEL_75;
      }
      sub_1000C9DB4((uint64_t)v57);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v68 = (void *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136446466;
      uint64_t v69 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v69, v70, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 12) = 2114;
      swift_errorRetain();
      uint64_t v71 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v68 = v71;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v67, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v11[5]) {
        goto LABEL_59;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v11[5])
      {
LABEL_59:
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5AC(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_76:
        uint64_t v111 = *(uint64_t (**)(void))(v0 + 8);
        return v111(0);
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v72 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v72 = 1;
    }
    if (!v72 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v117 = *(unsigned char *)(v0 + 275);
      uint64_t v75 = *(void *)(v0 + 232);
      uint64_t v114 = *(void *)(v0 + 216);
      uint64_t v116 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v76 = swift_task_alloc();
      uint64_t v77 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v76, 1, 1, v77);
      uint64_t v78 = type metadata accessor for Logger();
      uint64_t v79 = *(void *)(v78 - 8);
      uint64_t v80 = *(void *)(v79 + 64);
      uint64_t v81 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v81, v75, v78);
      uint64_t v82 = v0;
      unint64_t v83 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
      uint64_t v84 = v83 + v80;
      unint64_t v85 = (v83 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v86 = (v84 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v87 = swift_allocObject();
      unint64_t v88 = v87 + v83;
      uint64_t v0 = v82;
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v79 + 32))(v88, v81, v78);
      unint64_t v89 = v87 + v85;
      *(void *)unint64_t v89 = v114;
      *(void *)(v89 + 8) = v116;
      *(unsigned char *)(v89 + 16) = v117;
      *(void *)(v87 + v86) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v76, (uint64_t)&unk_1003437B0, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_59;
  }
  uint64_t v15 = v0;
  char v16 = *(unsigned char *)(v0 + 276);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v14, v17);
  if (v16)
  {
    if (v18)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v17, "Starting preflight.", v19, 2u);
      swift_slowDealloc();
    }

    uint64_t v0 = v15;
    if (qword_100340D70 != -1) {
      swift_once();
    }
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      id v11 = (unsigned char *)(v1 + 56);
      os_log_type_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        id v11 = (unsigned char *)(v1 + 56);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      unsigned char *v30 = 0;
      goto LABEL_23;
    }
  }
  else if (v18)
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    v118[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 136446210;
    uint64_t v0 = v15;
    uint64_t v54 = StaticString.description.getter();
    *(void *)(v15 + 208) = sub_1000A2E70(v54, v55, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v17, "%{public}s has opted out of preflight", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v0 = v15;
  }
  unint64_t v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Starting the activity.", v94, 2u);
    swift_slowDealloc();
  }

  uint64_t v95 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v95;
  *uint64_t v95 = v0;
  v95[1] = sub_100179C48;
  return sub_100102000(v0 + 273);
}

uint64_t sub_100179C48()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100179D5C;
  }
  else {
    uint64_t v2 = sub_100190D88;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100179D5C()
{
  uint64_t v71 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 264);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D40);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 274) & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_10019055C(&qword_100341D48, &qword_100341D40);
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 272) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v68 = v21;
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v70[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v68, v20, v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v21 = v68;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 277)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 277))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v69 = *(unsigned char *)(v0 + 275);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v69;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_1003437B0, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    v70[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    void *v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *os_log_type_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61(0);
}

uint64_t sub_10017AB28(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  *(unsigned char *)(v6 + 277) = a6;
  *(unsigned char *)(v6 + 276) = a5;
  *(void *)(v6 + 224) = a2;
  *(void *)(v6 + 232) = a4;
  *(unsigned char *)(v6 + 275) = a3;
  *(void *)(v6 + 216) = a1;
  return _swift_task_switch(sub_10017AB58, 0, 0);
}

uint64_t sub_10017AB58()
{
  uint64_t v119 = v0;
  uint64_t v1 = v0 + 216;
  uint64_t v2 = *(char **)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  char v4 = *(unsigned char *)(v0 + 275);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 240) = swift_initStackObject();
  char v5 = sub_10010D0A4(v2, v3, v4);
  *(void *)(v0 + 248) = v5;
  uint64_t v6 = (os_activity_scope_state_s *)(v5 + 24);
  swift_beginAccess();
  uint64_t v7 = swift_unknownObjectRetain();
  os_activity_scope_enter(v7, v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking for first unlock.", v10, 2u);
    swift_slowDealloc();
  }
  id v11 = (unsigned char *)(v0 + 272);

  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v28, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    goto LABEL_19;
  }
  uint64_t v12 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v13 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v12);
  LOBYTE(v12) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  os_log_type_t v14 = Logger.logObject.getter();
  if ((v12 & 1) == 0)
  {
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v31))
    {
      BOOL v32 = (uint8_t *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v32 = 136446210;
      uint64_t v33 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v33, v34, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v31, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v11 = (unsigned char *)(v0 + 272);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    uint64_t v29 = swift_allocError();
    *uint64_t v35 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v29;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D40);
    if (swift_dynamicCast() && (*(unsigned char *)(v1 + 58) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C(&qword_100341D48, &qword_100341D40);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_75;
    }
    swift_errorRelease();
    *(void *)(v1 - 88) = v29;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v36 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v37 = *v36;
        id v38 = *v36;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          os_log_type_t type = v40;
          uint64_t v41 = swift_slowAlloc();
          char v112 = (void *)swift_slowAlloc();
          v118[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136446466;
          uint64_t v42 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v42, v43, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v44 = v37;
          swift_storeEnumTagMultiPayload();
          id v45 = v38;
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *char v112 = v46;

          _os_log_impl((void *)&_mh_execute_header, v39, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v41, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v97 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v98 = v37;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v99 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v97, v99);
        swift_task_dealloc();
LABEL_75:
        swift_errorRelease();
        goto LABEL_76;
      }
      sub_1000C9DB4((uint64_t)v36);
    }
    uint64_t v115 = (uint64_t *)(v1 - 40);
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v1 - 80) = v29;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v11 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v64 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v64 = swift_allocError();
        *uint64_t v103 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v106 = (uint8_t *)swift_slowAlloc();
        uint64_t v107 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v106 = 138412290;
        swift_errorRetain();
        uint64_t v108 = _swift_stdlib_bridgeErrorToNSError();
        *uint64_t v115 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v107 = v108;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "The preflight error %@ did not result in a TTR.", v106, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v109 = *(void *)(v0 + 232);
      sub_10023C5AC(v64);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v110 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v109, v110);
      goto LABEL_75;
    }
    uint64_t v56 = (uint64_t *)(v1 - 48);
    swift_errorRelease();
    *(void *)(v1 - 72) = v29;
    os_log_type_t v57 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v59 = *v57;
        unint64_t v58 = v57[1];
        swift_bridgeObjectRetain_n();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = 136315138;
          v118[0] = v63;
          swift_bridgeObjectRetain();
          *uint64_t v56 = sub_1000A2E70(v59, v58, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "askForTime response handling did not find ask request identifier %s", v62, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v100 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v101 = v59;
        v101[1] = v58;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v102 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(v100, v102);
        swift_task_dealloc();
        goto LABEL_75;
      }
      sub_1000C9DB4((uint64_t)v57);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v68 = (void *)swift_slowAlloc();
      v118[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136446466;
      uint64_t v69 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v69, v70, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 12) = 2114;
      swift_errorRetain();
      uint64_t v71 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v68 = v71;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v67, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v11[5]) {
        goto LABEL_59;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v11[5])
      {
LABEL_59:
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5AC(v29);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_76:
        uint64_t v111 = *(uint64_t (**)(void))(v0 + 8);
        return v111(0);
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v72 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v72 = 1;
    }
    if (!v72 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v117 = *(unsigned char *)(v0 + 275);
      uint64_t v75 = *(void *)(v0 + 232);
      uint64_t v114 = *(void *)(v0 + 216);
      uint64_t v116 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v76 = swift_task_alloc();
      uint64_t v77 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v76, 1, 1, v77);
      uint64_t v78 = type metadata accessor for Logger();
      uint64_t v79 = *(void *)(v78 - 8);
      uint64_t v80 = *(void *)(v79 + 64);
      uint64_t v81 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v81, v75, v78);
      uint64_t v82 = v0;
      unint64_t v83 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
      uint64_t v84 = v83 + v80;
      unint64_t v85 = (v83 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v86 = (v84 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v87 = swift_allocObject();
      unint64_t v88 = v87 + v83;
      uint64_t v0 = v82;
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v79 + 32))(v88, v81, v78);
      unint64_t v89 = v87 + v85;
      *(void *)unint64_t v89 = v114;
      *(void *)(v89 + 8) = v116;
      *(unsigned char *)(v89 + 16) = v117;
      *(void *)(v87 + v86) = v29;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v76, (uint64_t)&unk_1003437A0, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_59;
  }
  uint64_t v15 = v0;
  char v16 = *(unsigned char *)(v0 + 276);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v14, v17);
  if (v16)
  {
    if (v18)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v17, "Starting preflight.", v19, 2u);
      swift_slowDealloc();
    }

    uint64_t v0 = v15;
    if (qword_100340D70 != -1) {
      swift_once();
    }
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Preflight complete", v22, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      id v11 = (unsigned char *)(v1 + 56);
      os_log_type_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "The preflight did not complete as expected.", v25, 2u);
        id v11 = (unsigned char *)(v1 + 56);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v29 = swift_allocError();
      unsigned char *v30 = 0;
      goto LABEL_23;
    }
  }
  else if (v18)
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    v118[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 136446210;
    uint64_t v0 = v15;
    uint64_t v54 = StaticString.description.getter();
    *(void *)(v15 + 208) = sub_1000A2E70(v54, v55, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v17, "%{public}s has opted out of preflight", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v0 = v15;
  }
  unint64_t v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Starting the activity.", v94, 2u);
    swift_slowDealloc();
  }

  uint64_t v95 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v95;
  *uint64_t v95 = v0;
  v95[1] = sub_10017C0B8;
  return sub_1001034C0(v0 + 273);
}

uint64_t sub_10017C0B8()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10017C1CC;
  }
  else {
    uint64_t v2 = sub_100190D88;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10017C1CC()
{
  uint64_t v71 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 264);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D40);
  if (swift_dynamicCast() && (*(unsigned char *)(v0 + 274) & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void *)(v0 + 232);

    sub_10019055C(&qword_100341D48, &qword_100341D40);
    swift_allocError();
    unsigned char *v17 = 0;
    swift_willThrow();
    uint64_t v18 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
    goto LABEL_45;
  }
  swift_errorRelease();
  *(void *)(v0 + 128) = v1;
  type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v2 = (id *)swift_task_alloc();
  swift_errorRetain();
  if (!swift_dynamicCast())
  {
LABEL_11:
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 272) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v68 = v21;
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v70[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v68, v20, v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v21 = v68;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 277)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 277))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_46;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v69 = *(unsigned char *)(v0 + 275);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v69;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_1003437A0, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  if (swift_getEnumCaseMultiPayload() != 37)
  {
    sub_1000C9DB4((uint64_t)v2);
    goto LABEL_11;
  }
  swift_errorRelease();
  id v3 = *v2;
  id v4 = *v2;
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    v70[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = StaticString.description.getter();
    *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2114;
    sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    void *v10 = v3;
    swift_storeEnumTagMultiPayload();
    id v11 = v4;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void *)(v0 + 232);
  sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  *os_log_type_t v48 = v3;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  uint64_t v49 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
  swift_task_dealloc();
LABEL_45:
  swift_errorRelease();
LABEL_46:
  os_log_type_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61(0);
}

uint64_t sub_10017CF98(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  *(unsigned char *)(v7 + 284) = a6;
  *(unsigned char *)(v7 + 283) = a5;
  *(void *)(v7 + 232) = a4;
  *(void *)(v7 + 240) = a7;
  *(unsigned char *)(v7 + 282) = a3;
  *(void *)(v7 + 216) = a1;
  *(void *)(v7 + 224) = a2;
  return _swift_task_switch(sub_10017CFC8, 0, 0);
}

uint64_t sub_10017CFC8()
{
  uint64_t v113 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 282);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 248) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 256) = v4;
  char v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  os_log_type_t v10 = (unsigned char *)(v0 + 280);

  uint64_t v111 = v0;
  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      os_log_type_t v10 = (unsigned char *)(v0 + 280);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D40);
    sub_10019055C(&qword_100341D48, &qword_100341D40);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D40);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 281) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void *)(v0 + 232);
      uint64_t v49 = *(void **)(v0 + 240);

      sub_10019055C(&qword_100341D48, &qword_100341D40);
      swift_allocError();
      unsigned char *v50 = 0;
      swift_willThrow();
      uint64_t v51 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v48, v51);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    unint64_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v108 = v35;
          uint64_t v39 = swift_slowAlloc();
          uint64_t v107 = (void *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v107 = v44;
          id v35 = v108;

          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v90 = *(void *)(v0 + 232);
        uint64_t v49 = *(void **)(v0 + 240);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v91 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v92 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v92 - 8) + 8))(v90, v92);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v66 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v66 = swift_allocError();
        *uint64_t v97 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v98 = Logger.logObject.getter();
      os_log_type_t v99 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v98, v99))
      {
        uint64_t v100 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v101 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v100 = 138412290;
        swift_errorRetain();
        uint64_t v102 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v102;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v101 = v102;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v98, v99, "The preflight error %@ did not result in a TTR.", v100, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v103 = *(void *)(v0 + 232);
      uint64_t v94 = *(void **)(v0 + 240);
      sub_10023C5AC(v66);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v104 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v104 - 8) + 8))(v103, v104);
      goto LABEL_77;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v60 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v62 = *v60;
        unint64_t v61 = v60[1];
        swift_bridgeObjectRetain_n();
        uint64_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = (uint8_t *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v65 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v62, v61, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "askForTime response handling did not find ask request identifier %s", v65, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v93 = *(void *)(v0 + 232);
        uint64_t v94 = *(void **)(v0 + 240);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v95 = v62;
        v95[1] = v61;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v96 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v96 - 8) + 8))(v93, v96);
        swift_task_dealloc();
LABEL_77:
        swift_errorRelease();

        goto LABEL_78;
      }
      sub_1000C9DB4((uint64_t)v60);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = swift_slowAlloc();
      unint64_t v70 = (void *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v69 = 136446466;
      uint64_t v71 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v71, v72, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v69 + 12) = 2114;
      swift_errorRetain();
      uint64_t v73 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v70 = v73;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v69, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v0 = v111;
        uint64_t v88 = *(void *)(v111 + 232);
        uint64_t v49 = *(void **)(v111 + 240);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v89 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v89 - 8) + 8))(v88, v89);
LABEL_69:

LABEL_78:
        os_log_type_t v105 = *(uint64_t (**)(void))(v0 + 8);
        return v105(0);
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v74 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v74 = 1;
    }
    if (!v74 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v110 = *(unsigned char *)(v0 + 282);
      uint64_t v77 = *(void *)(v0 + 232);
      uint64_t v109 = *(void *)(v0 + 224);
      uint64_t v78 = *(void *)(v0 + 216);
      sub_10009EE78(&qword_100340F10);
      uint64_t v79 = swift_task_alloc();
      uint64_t v80 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v79, 1, 1, v80);
      uint64_t v81 = type metadata accessor for Logger();
      uint64_t v82 = *(void *)(v81 - 8);
      uint64_t v83 = *(void *)(v82 + 64);
      uint64_t v84 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v84, v77, v81);
      unint64_t v85 = (*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
      uint64_t v86 = swift_allocObject();
      *(void *)(v86 + 16) = 0;
      *(void *)(v86 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v82 + 32))(v86 + v85, v84, v81);
      unint64_t v87 = v86 + ((v85 + v83 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v87 = v78;
      *(void *)(v87 + 8) = v109;
      *(unsigned char *)(v87 + 16) = v110;
      *(void *)(v86 + ((v85 + v83 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v79, (uint64_t)&unk_100343790, v86);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 283);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      os_log_type_t v10 = (unsigned char *)(v0 + 280);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *uint64_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136446210;
      uint64_t v53 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v53, v54, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  os_log_type_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    os_log_type_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Starting the activity.", v57, 2u);
    swift_slowDealloc();
  }

  uint64_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v58;
  *uint64_t v58 = v0;
  v58[1] = sub_10017E544;
  uint64_t v59 = *(void *)(v0 + 240);
  return static STUserNotifications.postNotification(context:)(v59);
}

uint64_t sub_10017E544()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10017E700;
  }
  else {
    uint64_t v2 = sub_10017E658;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10017E658()
{
  uint64_t v2 = v0[29];
  uint64_t v1 = (void *)v0[30];
  swift_release();
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  return v4(1);
}

uint64_t sub_10017E700()
{
  uint64_t v73 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 272);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D40);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 281) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        char v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          uint64_t v66 = (void *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v66 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v49 = *(void *)(v0 + 232);
        uint64_t v47 = *(void **)(v0 + 240);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v50 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v51 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
        swift_task_dealloc();
LABEL_45:
        swift_errorRelease();
        goto LABEL_46;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 280) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v26 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v26 = swift_allocError();
        *os_log_type_t v56 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v60 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 138412290;
        swift_errorRetain();
        uint64_t v61 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v60 = v61;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "The preflight error %@ did not result in a TTR.", v59, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v62 = *(void *)(v0 + 232);
      uint64_t v47 = *(void **)(v0 + 240);
      sub_10023C5AC(v26);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v63 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v62, v63);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    unint64_t v20 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v22 = *v20;
        unint64_t v21 = v20[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v25 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v22, v21, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "askForTime response handling did not find ask request identifier %s", v25, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v52 = *(void *)(v0 + 232);
        uint64_t v53 = *(void **)(v0 + 240);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v54 = v22;
        v54[1] = v21;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v55 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v52, v55);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_47;
      }
      sub_1000C9DB4((uint64_t)v20);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v72[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446466;
      uint64_t v30 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v30, v31, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v29, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 284)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 284))
      {
LABEL_35:
        uint64_t v46 = *(void *)(v0 + 232);
        uint64_t v47 = *(void **)(v0 + 240);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v48 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v46, v48);
LABEL_46:

        goto LABEL_47;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v33 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (!v33 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v71 = *(unsigned char *)(v0 + 282);
      uint64_t v36 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v70 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v37 = swift_task_alloc();
      uint64_t v38 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(void *)(v40 + 64);
      uint64_t v42 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v42, v36, v39);
      unint64_t v43 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = 0;
      *(void *)(v44 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v40 + 32))(v44 + v43, v42, v39);
      unint64_t v45 = v44 + ((v43 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v45 = loga;
      *(void *)(v45 + 8) = v70;
      *(unsigned char *)(v45 + 16) = v71;
      *(void *)(v44 + ((v43 + v41 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v37, (uint64_t)&unk_100343790, v44);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  uint64_t v16 = *(void *)(v0 + 232);
  os_log_type_t v17 = *(void **)(v0 + 240);

  sub_10019055C(&qword_100341D48, &qword_100341D40);
  swift_allocError();
  *uint64_t v18 = 0;
  swift_willThrow();
  uint64_t v19 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v16, v19);
  swift_errorRelease();

LABEL_47:
  os_log_type_t v64 = *(uint64_t (**)(void))(v0 + 8);
  return v64(0);
}

uint64_t sub_10017F4EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 248) = a7;
  *(void *)(v8 + 256) = a8;
  *(unsigned char *)(v8 + 300) = a6;
  *(unsigned char *)(v8 + 299) = a5;
  *(void *)(v8 + 232) = a2;
  *(void *)(v8 + 240) = a4;
  *(unsigned char *)(v8 + 298) = a3;
  *(void *)(v8 + 224) = a1;
  return _swift_task_switch(sub_10017F520, 0, 0);
}

uint64_t sub_10017F520()
{
  uint64_t v114 = v0;
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(char **)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 298);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 264) = swift_initStackObject();
  id v4 = sub_10010D0A4(v2, v1, v3);
  *(void *)(v0 + 272) = v4;
  char v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  os_log_type_t v10 = (unsigned char *)(v0 + 296);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100343498);
    sub_10019055C(&qword_1003434A0, &qword_100343498);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100343498);
    sub_10019055C(&qword_1003434A0, &qword_100343498);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
    os_log_type_t v10 = (unsigned char *)(v0 + 296);
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100343498);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 297) & 1) == 0)
    {
      swift_errorRelease();
      unint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void **)(v0 + 248);
      uint64_t v49 = *(void *)(v0 + 240);

      sub_10019055C(&qword_1003434A0, &qword_100343498);
      swift_allocError();
      unsigned char *v50 = 0;
      swift_willThrow();
      uint64_t v51 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v49, v51);
      swift_errorRelease();
      goto LABEL_66;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    unint64_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          os_log_type_t type = v38;
          uint64_t v39 = swift_slowAlloc();
          id v108 = (void *)swift_slowAlloc();
          v113[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *uint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v108 = v44;

          _os_log_impl((void *)&_mh_execute_header, v37, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v91 = *(void **)(v0 + 248);
        uint64_t v92 = *(void *)(v0 + 240);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v93 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v94 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v94 - 8) + 8))(v92, v94);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_77;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v68 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v68 = swift_allocError();
        *os_log_type_t v99 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v100, v101))
      {
        uint64_t v102 = (uint8_t *)swift_slowAlloc();
        uint64_t v103 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v102 = 138412290;
        swift_errorRetain();
        uint64_t v104 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v103 = v104;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "The preflight error %@ did not result in a TTR.", v102, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v95 = *(void **)(v0 + 248);
      uint64_t v105 = *(void *)(v0 + 240);
      sub_10023C5AC(v68);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v106 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v106 - 8) + 8))(v105, v106);
      goto LABEL_76;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v62 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v64 = *v62;
        unint64_t v63 = v62[1];
        swift_bridgeObjectRetain_n();
        uint64_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v65, v66))
        {
          uint64_t v67 = (uint8_t *)swift_slowAlloc();
          v113[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v67 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v64, v63, v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "askForTime response handling did not find ask request identifier %s", v67, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v95 = *(void **)(v0 + 248);
        uint64_t v96 = *(void *)(v0 + 240);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v97 = v64;
        v97[1] = v63;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v98 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v98 - 8) + 8))(v96, v98);
        swift_task_dealloc();
LABEL_76:
        swift_errorRelease();

        goto LABEL_77;
      }
      sub_1000C9DB4((uint64_t)v62);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      unint64_t v72 = (void *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 136446466;
      uint64_t v73 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v73, v74, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 12) = 2114;
      swift_errorRetain();
      uint64_t v75 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v72 = v75;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v71, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v48 = *(void **)(v0 + 248);
        uint64_t v89 = *(void *)(v0 + 240);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v90 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v89, v90);
LABEL_66:

LABEL_77:
        swift_release();
        uint64_t v107 = *(uint64_t (**)(void))(v0 + 8);
        return v107();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v76 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v76 = 1;
    }
    if (!v76 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v112 = *(unsigned char *)(v0 + 298);
      uint64_t v79 = *(void *)(v0 + 240);
      uint64_t v110 = *(void *)(v0 + 224);
      uint64_t v111 = *(void *)(v0 + 232);
      sub_10009EE78(&qword_100340F10);
      uint64_t v80 = swift_task_alloc();
      uint64_t v81 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 1, 1, v81);
      uint64_t v82 = type metadata accessor for Logger();
      uint64_t v83 = *(void *)(v82 - 8);
      uint64_t v84 = *(void *)(v83 + 64);
      uint64_t v85 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v85, v79, v82);
      unint64_t v86 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = 0;
      *(void *)(v87 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v83 + 32))(v87 + v86, v85, v82);
      unint64_t v88 = v87 + ((v86 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v88 = v110;
      *(void *)(v88 + 8) = v111;
      *(unsigned char *)(v88 + 16) = v112;
      *(void *)(v87 + ((v86 + v84 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v80, (uint64_t)&unk_1003434A8, v87);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 299);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v10 = (unsigned char *)(v0 + 296);
      unint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        os_log_type_t v10 = (unsigned char *)(v0 + 296);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *os_log_type_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136446210;
      uint64_t v53 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v53, v54, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    os_log_type_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Starting the activity.", v57, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v58;
  *os_log_type_t v58 = v0;
  v58[1] = sub_100180A68;
  uint64_t v59 = *(void *)(v0 + 248);
  uint64_t v60 = *(void *)(v0 + 256);
  return sub_10022E030(v0 + 216, v59, v60);
}

uint64_t sub_100180A68()
{
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100180C3C;
  }
  else {
    uint64_t v2 = sub_100180B7C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100180B7C()
{
  uint64_t v1 = (void *)v0[31];
  uint64_t v2 = v0[30];
  swift_release();
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = v0[27];

  swift_release();
  char v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v4);
}

uint64_t sub_100180C3C()
{
  uint64_t v74 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 288);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100343498);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 297) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        char v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          uint64_t v67 = (void *)swift_slowAlloc();
          v73[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v67 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v49 = *(void **)(v0 + 248);
        uint64_t v50 = *(void *)(v0 + 240);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_47;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 296) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v26 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v26 = swift_allocError();
        *os_log_type_t v57 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        uint64_t v61 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 138412290;
        swift_errorRetain();
        uint64_t v62 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v61 = v62;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "The preflight error %@ did not result in a TTR.", v60, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      os_log_type_t v46 = *(void **)(v0 + 248);
      uint64_t v63 = *(void *)(v0 + 240);
      sub_10023C5AC(v26);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v64 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v64 - 8) + 8))(v63, v64);
      swift_errorRelease();
      goto LABEL_46;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    unint64_t v20 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v22 = *v20;
        unint64_t v21 = v20[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
          v73[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v25 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v22, v21, v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "askForTime response handling did not find ask request identifier %s", v25, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v53 = *(void **)(v0 + 248);
        uint64_t v54 = *(void *)(v0 + 240);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v55 = v22;
        v55[1] = v21;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v56 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v54, v56);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_47;
      }
      sub_1000C9DB4((uint64_t)v20);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v73[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446466;
      uint64_t v30 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v30, v31, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v29, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 300)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 300))
      {
LABEL_35:
        os_log_type_t v46 = *(void **)(v0 + 248);
        uint64_t v47 = *(void *)(v0 + 240);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v48 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v47, v48);
LABEL_46:

        goto LABEL_47;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v33 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (!v33 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v72 = *(unsigned char *)(v0 + 298);
      uint64_t v36 = *(void *)(v0 + 240);
      os_log_t loga = *(os_log_t *)(v0 + 224);
      uint64_t v71 = *(void *)(v0 + 232);
      sub_10009EE78(&qword_100340F10);
      uint64_t v37 = swift_task_alloc();
      uint64_t v38 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(void *)(v40 + 64);
      uint64_t v42 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v42, v36, v39);
      unint64_t v43 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = 0;
      *(void *)(v44 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v40 + 32))(v44 + v43, v42, v39);
      unint64_t v45 = v44 + ((v43 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v45 = loga;
      *(void *)(v45 + 8) = v71;
      *(unsigned char *)(v45 + 16) = v72;
      *(void *)(v44 + ((v43 + v41 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v37, (uint64_t)&unk_1003434A8, v44);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  BOOL v16 = *(void **)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 240);

  sub_10019055C(&qword_1003434A0, &qword_100343498);
  swift_allocError();
  *uint64_t v18 = 0;
  swift_willThrow();
  uint64_t v19 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v17, v19);
  swift_errorRelease();

LABEL_47:
  swift_release();
  uint64_t v65 = *(uint64_t (**)(void))(v0 + 8);
  return v65();
}

BOOL sub_100181A3C(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_100181A4C(uint64_t a1, char a2)
{
}

Swift::Int sub_100181A74(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_100181ABC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100181A3C(*a1, *a2);
}

Swift::Int sub_100181AC8()
{
  return sub_100181A74(*v0);
}

void sub_100181AD0(uint64_t a1)
{
  sub_100181A4C(a1, *v1);
}

Swift::Int sub_100181AD8()
{
  Hasher.init(_seed:)();
  sub_100181A4C((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

void sub_100181B3C(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, char *a8)
{
  LODWORD(v117) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  _Block_copy(a8);
  uint64_t v118 = a1;
  uint64_t v119 = a2;
  LODWORD(v120) = a3;
  BOOL v16 = (os_activity_scope_state_s *)(sub_10010D0A4(a1, a2, a3) + 24);
  swift_beginAccess();
  uint64_t v17 = swift_unknownObjectRetain();
  os_activity_scope_enter(v17, v16);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Checking for first unlock.", v20, 2u);
    swift_slowDealloc();
  }

  uint64_t v121 = a7;
  uint64_t v122 = a4;
  if (!MKBUserUnlockedSinceBoot())
  {
    BOOL v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      id v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v35, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v21 = type metadata accessor for ScreenTimeFeatureFlags();
  v124[3] = v21;
  v124[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v22 = sub_1000C532C(v124);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v22, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v21);
  LOBYTE(v21) = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v124);
  os_log_type_t v23 = Logger.logObject.getter();
  if ((v21 & 1) == 0)
  {
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      v124[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136446210;
      uint64_t v40 = StaticString.description.getter();
      uint64_t v125 = sub_1000A2E70(v40, v41, v124);
      a4 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v38, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v36 = swift_allocError();
    *uint64_t v42 = 1;
    goto LABEL_23;
  }
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  if (a5)
  {
    if (v25)
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Starting preflight.", v26, 2u);
      a4 = v122;
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Preflight complete", v29, 2u);
      a4 = v122;
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "The preflight did not complete as expected.", v32, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v36 = swift_allocError();
      unsigned char *v37 = 0;
LABEL_23:
      swift_willThrow();
      goto LABEL_24;
    }
  }
  else
  {
    if (v25)
    {
      uint64_t v116 = a8;
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      v124[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v69 = 136446210;
      uint64_t v70 = StaticString.description.getter();
      uint64_t v125 = sub_1000A2E70(v70, v71, v124);
      a8 = v116;
      a4 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s has opted out of preflight.", v69, 0xCu);
      swift_arrayDestroy();
      a7 = v121;
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  char v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v72, v73))
  {
    uint64_t v74 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v74 = 0;
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "Starting the activity.", v74, 2u);
    a4 = v122;
    swift_slowDealloc();
  }

  _Block_copy(a8);
  sub_1000CF574(a7, (void (**)(void, void, void))a8);
  if (!v8)
  {
    uint64_t v102 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(a4, v102);
    swift_release();
    goto LABEL_78;
  }
  uint64_t v36 = v8;
LABEL_24:
  swift_release();
  v124[0] = v36;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (v125 & 1) == 0)
  {
    swift_errorRelease();
    os_log_type_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      os_log_type_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v59, 2u);
      swift_slowDealloc();
    }

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    unsigned char *v60 = 0;
    swift_willThrow();
    goto LABEL_77;
  }
  swift_errorRelease();
  v124[0] = v36;
  uint64_t v43 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v44 = *(void *)(*(void *)(v43 - 8) + 64);
  __chkstk_darwin(v43);
  unint64_t v45 = (id *)((char *)&v113 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    if (swift_getEnumCaseMultiPayload() == 37)
    {
      swift_errorRelease();
      os_log_type_t v46 = (uint64_t *)*v45;
      id v47 = *v45;
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = swift_slowAlloc();
        char v117 = v46;
        uint64_t v51 = v50;
        uint64_t v114 = (void *)swift_slowAlloc();
        uint64_t v115 = (uint64_t *)swift_slowAlloc();
        uint64_t v125 = (uint64_t)v115;
        *(_DWORD *)uint64_t v51 = 136446466;
        uint64_t v52 = StaticString.description.getter();
        uint64_t v123 = sub_1000A2E70(v52, v53, &v125);
        uint64_t v116 = a8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v51 + 12) = 2114;
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v54 = v117;
        swift_storeEnumTagMultiPayload();
        id v55 = v47;
        uint64_t v56 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v123 = v56;
        a8 = v116;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v114 = v56;

        _os_log_impl((void *)&_mh_execute_header, v48, v49, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v51, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        os_log_type_t v46 = v117;
        swift_slowDealloc();
      }
      else
      {
      }
      sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
      swift_allocError();
      *uint64_t v103 = v46;
LABEL_71:
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      uint64_t v105 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(v122, v105);
      swift_errorRelease();
      goto LABEL_78;
    }
    sub_1000C9DB4((uint64_t)&v113 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  }
  swift_errorRelease();
  v124[0] = v36;
  swift_errorRetain();
  if (swift_dynamicCast() && (v123 & 1) == 0)
  {
    swift_errorRelease();
    if (qword_10034B2B0)
    {
      uint64_t v75 = qword_10034B2B0;
    }
    else
    {
      sub_1000C51B4();
      uint64_t v75 = swift_allocError();
      unsigned char *v106 = 0;
    }
    a4 = v122;
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v107 = Logger.logObject.getter();
    os_log_type_t v108 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v107, v108))
    {
      uint64_t v109 = (uint8_t *)swift_slowAlloc();
      uint64_t v110 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v109 = 138412290;
      swift_errorRetain();
      uint64_t v111 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v125 = v111;
      a4 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v110 = v111;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "The preflight error %@ did not result in a TTR", v109, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    sub_10023C5AC(v75);
    swift_willThrow();
    swift_errorRelease();
LABEL_77:
    uint64_t v112 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v112 - 8) + 8))(a4, v112);
    swift_errorRelease();
    goto LABEL_78;
  }
  uint64_t v61 = swift_errorRelease();
  v124[0] = v36;
  __chkstk_darwin(v61);
  uint64_t v62 = (uint64_t *)((char *)&v113 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    if (swift_getEnumCaseMultiPayload() == 22)
    {
      swift_errorRelease();
      uint64_t v64 = *v62;
      unint64_t v63 = v62[1];
      swift_bridgeObjectRetain_n();
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v120 = v64;
        uint64_t v67 = (uint8_t *)swift_slowAlloc();
        uint64_t v68 = swift_slowAlloc();
        uint64_t v116 = a8;
        uint64_t v125 = v68;
        *(_DWORD *)uint64_t v67 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v123 = sub_1000A2E70(v120, v63, &v125);
        uint64_t v64 = v120;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "askForTime response handling did not find ask request identifier %s", v67, 0xCu);
        swift_arrayDestroy();
        a8 = v116;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
      swift_allocError();
      uint64_t *v104 = v64;
      v104[1] = v63;
      goto LABEL_71;
    }
    sub_1000C9DB4((uint64_t)v62);
  }
  swift_errorRelease();
  swift_errorRetain();
  swift_errorRetain();
  BOOL v76 = Logger.logObject.getter();
  os_log_type_t v77 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v76, v77))
  {
    uint64_t v78 = swift_slowAlloc();
    uint64_t v79 = (void *)swift_slowAlloc();
    v124[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v78 = 136446466;
    uint64_t v80 = StaticString.description.getter();
    uint64_t v116 = a8;
    uint64_t v125 = sub_1000A2E70(v80, v81, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v78 + 12) = 2114;
    swift_errorRetain();
    uint64_t v82 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v125 = v82;
    a8 = v116;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v79 = v82;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v78, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  if ((v117 & 1) == 0)
  {
    BOOL v83 = !&class metadata base offset for TapToRadarService || &type metadata accessor for TapToRadarService == 0;
    BOOL v84 = v83 || &type metadata for TapToRadarService == 0;
    if (!v84 && &nominal type descriptor for TapToRadarService != 0)
    {
      uint64_t v86 = sub_10009EE78(&qword_100340F10);
      char v117 = &v113;
      __chkstk_darwin(v86 - 8);
      unint64_t v88 = (char *)&v113 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v116 = v88;
      uint64_t v89 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v88, 1, 1, v89);
      uint64_t v90 = type metadata accessor for Logger();
      uint64_t v115 = &v113;
      uint64_t v91 = *(void *)(v90 - 8);
      uint64_t v92 = *(void *)(v91 + 64);
      __chkstk_darwin(v90);
      uint64_t v93 = (char *)&v113 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v93, v122, v90);
      unint64_t v94 = (*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
      unint64_t v95 = (v94 + v92 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v96 = a8;
      unint64_t v97 = (v94 + v92 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v98 = swift_allocObject();
      *(void *)(v98 + 16) = 0;
      *(void *)(v98 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v91 + 32))(v98 + v94, v93, v90);
      unint64_t v99 = v98 + v95;
      uint64_t v100 = v119;
      *(void *)unint64_t v99 = v118;
      *(void *)(v99 + 8) = v100;
      *(unsigned char *)(v99 + 16) = v120;
      *(void *)(v98 + v97) = v36;
      a8 = v96;
      swift_errorRetain();
      sub_1000A27A0((uint64_t)v116, (uint64_t)&unk_1003438C0, v98);
      swift_release();
    }
  }
  sub_10023C5AC(v36);
  swift_willThrow();
  swift_errorRelease();
  uint64_t v101 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v101 - 8) + 8))(v122, v101);
LABEL_78:
  swift_release();
  _Block_release(a8);
}

void sub_100182FB4(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9, void *a10, unsigned char *a11)
{
  uint64_t v124 = (unsigned char *)a8;
  LODWORD(v126) = a6;
  id v17 = a10;
  uint64_t v18 = a11;
  unint64_t v132 = a9;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  _Block_copy(a11);
  uint64_t v127 = a1;
  uint64_t v128 = a2;
  LODWORD(v129) = a3;
  os_log_type_t v19 = (os_activity_scope_state_s *)(sub_10010D0A4(a1, a2, a3) + 24);
  swift_beginAccess();
  unint64_t v20 = swift_unknownObjectRetain();
  os_activity_scope_enter(v20, v19);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  uint64_t v133 = a4;
  if (os_log_type_enabled(v21, v22))
  {
    os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Checking for first unlock.", v23, 2u);
    a4 = v133;
    swift_slowDealloc();
  }

  id v130 = a10;
  uint64_t v131 = a7;
  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v39, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v24 = type metadata accessor for ScreenTimeFeatureFlags();
  v135[3] = v24;
  v135[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  BOOL v25 = sub_1000C532C(v135);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v25, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v24);
  char v26 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v135);
  uint64_t v27 = Logger.logObject.getter();
  if ((v26 & 1) == 0)
  {
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      v135[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136446210;
      uint64_t v44 = StaticString.description.getter();
      uint64_t v136 = sub_1000A2E70(v44, v45, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a4 = v133;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v42, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v40 = swift_allocError();
    *os_log_type_t v46 = 1;
    goto LABEL_23;
  }
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  if (a5)
  {
    if (v29)
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Starting preflight.", v30, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      BOOL v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Preflight complete", v33, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      os_log_type_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "The preflight did not complete as expected.", v36, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v40 = swift_allocError();
      unsigned char *v41 = 0;
LABEL_23:
      swift_willThrow();
LABEL_24:
      swift_release();
      v135[0] = v40;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      sub_10009EE78(&qword_100341D58);
      if (swift_dynamicCast() && (v136 & 1) == 0)
      {
        swift_errorRelease();
        uint64_t v62 = Logger.logObject.getter();
        os_log_type_t v63 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v62, v63))
        {
          uint64_t v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v64 = 0;
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v64, 2u);
          swift_slowDealloc();
        }

        sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
        swift_allocError();
        unsigned char *v65 = 0;
        swift_willThrow();
        uint64_t v66 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v66 - 8) + 8))(a4, v66);
        swift_errorRelease();
        swift_bridgeObjectRelease();
        goto LABEL_70;
      }
      swift_errorRelease();
      v135[0] = v40;
      uint64_t v47 = type metadata accessor for DataStore.DataStoreError(0);
      uint64_t v48 = *(void *)(*(void *)(v47 - 8) + 64);
      __chkstk_darwin(v47);
      swift_errorRetain();
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 37)
        {
          swift_errorRelease();
          os_log_type_t v49 = *(void **)&v122[-((v48 + 15) & 0xFFFFFFFFFFFFFFF0)];
          id v50 = v49;
          uint64_t v51 = Logger.logObject.getter();
          os_log_type_t v52 = static os_log_type_t.fault.getter();
          int v53 = v52;
          if (os_log_type_enabled(v51, v52))
          {
            uint64_t v54 = swift_slowAlloc();
            int v123 = v53;
            uint64_t v55 = v54;
            uint64_t v56 = (void *)swift_slowAlloc();
            uint64_t v124 = (unsigned char *)swift_slowAlloc();
            uint64_t v136 = (uint64_t)v124;
            *(_DWORD *)uint64_t v55 = 136446466;
            uint64_t v126 = v49;
            uint64_t v57 = StaticString.description.getter();
            uint64_t v134 = sub_1000A2E70(v57, v58, &v136);
            uint64_t v125 = a11;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v55 + 12) = 2114;
            sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
            swift_allocError();
            *os_log_type_t v59 = v126;
            swift_storeEnumTagMultiPayload();
            id v60 = v50;
            uint64_t v61 = _swift_stdlib_bridgeErrorToNSError();
            uint64_t v134 = v61;
            uint64_t v18 = v125;
            os_log_type_t v49 = v126;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v56 = v61;

            _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v123, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v55, 0x16u);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *uint64_t v110 = v49;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          uint64_t v111 = type metadata accessor for Logger();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v111 - 8) + 8))(v133, v111);
          swift_errorRelease();
LABEL_69:
          swift_bridgeObjectRelease();
LABEL_70:
          swift_release();

          goto LABEL_79;
        }
        sub_1000C9DB4((uint64_t)&v122[-((v48 + 15) & 0xFFFFFFFFFFFFFFF0)]);
      }
      swift_errorRelease();
      v135[0] = v40;
      swift_errorRetain();
      if (!swift_dynamicCast() || (v134 & 1) != 0)
      {
        uint64_t v67 = swift_errorRelease();
        v135[0] = v40;
        __chkstk_darwin(v67);
        uint64_t v68 = (uint64_t *)&v122[-((v48 + 15) & 0xFFFFFFFFFFFFFFF0)];
        swift_errorRetain();
        if (swift_dynamicCast())
        {
          if (swift_getEnumCaseMultiPayload() == 22)
          {
            swift_errorRelease();
            uint64_t v70 = *v68;
            unint64_t v69 = v68[1];
            swift_bridgeObjectRetain_n();
            unint64_t v71 = Logger.logObject.getter();
            os_log_type_t v72 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v71, v72))
            {
              uint64_t v73 = swift_slowAlloc();
              uint64_t v129 = v70;
              uint64_t v74 = (uint8_t *)v73;
              uint64_t v136 = swift_slowAlloc();
              uint64_t v125 = a11;
              *(_DWORD *)uint64_t v74 = 136315138;
              swift_bridgeObjectRetain();
              uint64_t v134 = sub_1000A2E70(v129, v69, &v136);
              uint64_t v18 = v125;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v71, v72, "askForTime response handling did not find ask request identifier %s", v74, 0xCu);
              swift_arrayDestroy();
              a4 = v133;
              swift_slowDealloc();
              uint64_t v70 = v129;
              swift_slowDealloc();
            }
            else
            {
              swift_bridgeObjectRelease_n();
            }

            id v112 = v130;
            sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
            swift_allocError();
            *uint64_t v113 = v70;
            v113[1] = v69;
            swift_storeEnumTagMultiPayload();
            swift_willThrow();
            uint64_t v114 = type metadata accessor for Logger();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v114 - 8) + 8))(a4, v114);
LABEL_78:
            swift_errorRelease();
            swift_bridgeObjectRelease();
            swift_release();

            goto LABEL_79;
          }
          sub_1000C9DB4((uint64_t)v68);
        }
        swift_errorRelease();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v82 = Logger.logObject.getter();
        os_log_type_t v83 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v82, v83))
        {
          uint64_t v84 = swift_slowAlloc();
          uint64_t v85 = (void *)swift_slowAlloc();
          v135[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v84 = 136446466;
          uint64_t v86 = StaticString.description.getter();
          uint64_t v125 = a11;
          uint64_t v136 = sub_1000A2E70(v86, v87, v135);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v84 + 12) = 2114;
          swift_errorRetain();
          uint64_t v88 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v136 = v88;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v85 = v88;
          uint64_t v18 = v125;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v82, v83, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v84, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        if ((v126 & 1) == 0)
        {
          BOOL v89 = !&class metadata base offset for TapToRadarService
             || &type metadata accessor for TapToRadarService == 0;
          BOOL v90 = v89 || &type metadata for TapToRadarService == 0;
          if (!v90 && &nominal type descriptor for TapToRadarService != 0)
          {
            uint64_t v92 = sub_10009EE78(&qword_100340F10);
            uint64_t v126 = v122;
            __chkstk_darwin(v92 - 8);
            unint64_t v94 = &v122[-((v93 + 15) & 0xFFFFFFFFFFFFFFF0)];
            uint64_t v125 = v94;
            uint64_t v95 = type metadata accessor for TaskPriority();
            (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v94, 1, 1, v95);
            uint64_t v96 = type metadata accessor for Logger();
            uint64_t v124 = v122;
            uint64_t v97 = *(void *)(v96 - 8);
            uint64_t v98 = *(void *)(v97 + 64);
            __chkstk_darwin(v96);
            unint64_t v99 = &v122[-((v98 + 15) & 0xFFFFFFFFFFFFFFF0)];
            (*(void (**)(unsigned char *, uint64_t, uint64_t))(v97 + 16))(v99, v133, v96);
            uint64_t v100 = v18;
            unint64_t v101 = (*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
            unint64_t v102 = (v101 + v98 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v103 = (v101 + v98 + 31) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v104 = swift_allocObject();
            unint64_t v105 = v104 + v101;
            uint64_t v18 = v100;
            *(void *)(v104 + 16) = 0;
            *(void *)(v104 + 24) = 0;
            (*(void (**)(unint64_t, unsigned char *, uint64_t))(v97 + 32))(v105, v99, v96);
            unint64_t v106 = v104 + v102;
            uint64_t v107 = v128;
            *(void *)unint64_t v106 = v127;
            *(void *)(v106 + 8) = v107;
            *(unsigned char *)(v106 + 16) = v129;
            *(void *)(v104 + v103) = v40;
            swift_errorRetain();
            sub_1000A27A0((uint64_t)v125, (uint64_t)&unk_1003438B8, v104);
            swift_release();
          }
        }
        sub_10023C5AC(v40);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v108 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v108 - 8) + 8))(v133, v108);
        goto LABEL_69;
      }
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v81 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v81 = swift_allocError();
        *uint64_t v115 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v116 = Logger.logObject.getter();
      os_log_type_t v117 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v116, v117))
      {
        uint64_t v118 = (uint8_t *)swift_slowAlloc();
        uint64_t v119 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v118 = 138412290;
        swift_errorRetain();
        uint64_t v120 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v136 = v120;
        a4 = v133;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v119 = v120;
        uint64_t v18 = a11;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v116, v117, "The preflight error %@ did not result in a TTR", v118, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      id v112 = v130;
      sub_10023C5AC(v81);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v121 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v121 - 8) + 8))(a4, v121);
      goto LABEL_78;
    }
  }
  else
  {
    if (v29)
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc();
      v135[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v75 = 136446210;
      uint64_t v76 = StaticString.description.getter();
      uint64_t v136 = sub_1000A2E70(v76, v77, v135);
      a7 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v17 = v130;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s has opted out of preflight.", v75, 0xCu);
      swift_arrayDestroy();
      a4 = v133;
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v78 = Logger.logObject.getter();
  os_log_type_t v79 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v78, v79))
  {
    uint64_t v80 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v80 = 0;
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "Starting the activity.", v80, 2u);
    swift_slowDealloc();
  }

  _Block_copy(a11);
  sub_1000D0810(a7, (uint64_t)v124, v132, v17, (void (**)(void, void))a11);
  if (v125)
  {
    uint64_t v40 = (uint64_t)v125;
    goto LABEL_24;
  }
  uint64_t v109 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v109 - 8) + 8))(a4, v109);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

LABEL_79:
  _Block_release(v18);
}

void sub_100184504(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, void *a7, void *a8, uint64_t a9, uint64_t a10, NSObject *a11, char a12, uint64_t a13)
{
  LODWORD(v129) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  id v130 = a1;
  uint64_t v131 = a2;
  unint64_t v20 = sub_10010D0A4(a1, a2, a3);
  swift_beginAccess();
  uint64_t v21 = swift_unknownObjectRetain();
  os_activity_scope_enter(v21, (os_activity_scope_state_t)(v20 + 24));
  swift_endAccess();
  swift_unknownObjectRelease();
  os_log_type_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Checking for first unlock.", v24, 2u);
    swift_slowDealloc();
  }

  id v132 = a8;
  if (!MKBUserUnlockedSinceBoot())
  {
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      os_log_type_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v42, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v38 = swift_allocError();
    unsigned char *v43 = 0;
    goto LABEL_22;
  }
  uint64_t v25 = type metadata accessor for ScreenTimeFeatureFlags();
  v135[3] = v25;
  v135[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  char v26 = sub_1000C532C(v135);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v26, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v25);
  char v27 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v135);
  os_log_type_t v28 = Logger.logObject.getter();
  if ((v27 & 1) == 0)
  {
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v44))
    {
      unint64_t v45 = (uint8_t *)swift_slowAlloc();
      v135[0] = swift_slowAlloc();
      uint64_t v128 = v20;
      *(_DWORD *)unint64_t v45 = 136446210;
      uint64_t v126 = v45 + 4;
      uint64_t v46 = StaticString.description.getter();
      uint64_t v136 = sub_1000A2E70(v46, v47, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v44, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v38 = swift_allocError();
    *uint64_t v48 = 1;
LABEL_22:
    swift_willThrow();
    goto LABEL_23;
  }
  os_log_type_t v29 = static os_log_type_t.default.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v127 = a7;
  uint64_t v133 = a4;
  if (a5)
  {
    if (v30)
    {
      os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Starting preflight.", v31, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      os_log_type_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Preflight complete", v34, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      a4 = v133;
      os_log_type_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "The preflight did not complete as expected.", v37, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
      uint64_t v38 = swift_allocError();
      unsigned char *v39 = 0;
      swift_willThrow();
      a7 = v127;
LABEL_23:
      swift_release();
      v135[0] = v38;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      sub_10009EE78(&qword_100341D58);
      if (swift_dynamicCast() && (v136 & 1) == 0)
      {
        swift_errorRelease();
        uint64_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v65, v66))
        {
          uint64_t v67 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v67 = 0;
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v67, 2u);
          swift_slowDealloc();
        }

        sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
        swift_allocError();
        unsigned char *v68 = 0;
        swift_willThrow();
      }
      else
      {
        LODWORD(v128) = a3;
        swift_errorRelease();
        v135[0] = v38;
        uint64_t v49 = type metadata accessor for DataStore.DataStoreError(0);
        uint64_t v50 = *(void *)(*(void *)(v49 - 8) + 64);
        __chkstk_darwin(v49);
        uint64_t v51 = (id *)((char *)&v124 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
        swift_errorRetain();
        if (swift_dynamicCast())
        {
          if (swift_getEnumCaseMultiPayload() == 37)
          {
            swift_errorRelease();
            os_log_type_t v52 = *v51;
            id v53 = *v51;
            uint64_t v133 = a4;
            uint64_t v54 = Logger.logObject.getter();
            os_log_type_t v55 = static os_log_type_t.fault.getter();
            int v56 = v55;
            if (os_log_type_enabled(v54, v55))
            {
              uint64_t v57 = swift_slowAlloc();
              LODWORD(v125) = v56;
              uint64_t v58 = v57;
              uint64_t v124 = (void *)swift_slowAlloc();
              uint64_t v126 = (uint8_t *)swift_slowAlloc();
              uint64_t v136 = (uint64_t)v126;
              *(_DWORD *)uint64_t v58 = 136446466;
              uint64_t v129 = v52;
              uint64_t v59 = StaticString.description.getter();
              uint64_t v134 = sub_1000A2E70(v59, v60, &v136);
              uint64_t v127 = a7;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v58 + 12) = 2114;
              sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
              swift_allocError();
              *uint64_t v61 = v129;
              swift_storeEnumTagMultiPayload();
              id v62 = v53;
              uint64_t v63 = _swift_stdlib_bridgeErrorToNSError();
              uint64_t v134 = v63;
              uint64_t v64 = v127;
              os_log_type_t v52 = v129;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v124 = v63;

              _os_log_impl((void *)&_mh_execute_header, v54, (os_log_type_t)v125, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v58, 0x16u);
              sub_10009EE78(&qword_100342AB0);
              a7 = v64;
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
            }
            sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
            swift_allocError();
            *uint64_t v113 = v52;
            swift_storeEnumTagMultiPayload();
            swift_willThrow();
            uint64_t v114 = type metadata accessor for Logger();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v114 - 8) + 8))(v133, v114);
            goto LABEL_76;
          }
          sub_1000C9DB4((uint64_t)&v124 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
        }
        swift_errorRelease();
        v135[0] = v38;
        swift_errorRetain();
        if (!swift_dynamicCast() || (v134 & 1) != 0)
        {
          uint64_t v69 = swift_errorRelease();
          v135[0] = v38;
          __chkstk_darwin(v69);
          uint64_t v70 = (uint64_t *)((char *)&v124 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
          swift_errorRetain();
          if (swift_dynamicCast())
          {
            if (swift_getEnumCaseMultiPayload() == 22)
            {
              swift_errorRelease();
              uint64_t v72 = *v70;
              unint64_t v71 = v70[1];
              swift_bridgeObjectRetain_n();
              uint64_t v73 = Logger.logObject.getter();
              os_log_type_t v74 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v73, v74))
              {
                uint64_t v131 = v72;
                uint64_t v75 = (uint8_t *)swift_slowAlloc();
                uint64_t v76 = swift_slowAlloc();
                uint64_t v127 = a7;
                uint64_t v136 = v76;
                uint64_t v133 = a4;
                *(_DWORD *)uint64_t v75 = 136315138;
                swift_bridgeObjectRetain();
                uint64_t v134 = sub_1000A2E70(v131, v71, &v136);
                uint64_t v72 = v131;
                a4 = v133;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v73, v74, "askForTime response handling did not find ask request identifier %s", v75, 0xCu);
                swift_arrayDestroy();
                a7 = v127;
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                swift_bridgeObjectRelease_n();
              }

              sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
              swift_allocError();
              *uint64_t v115 = v72;
              v115[1] = v71;
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              uint64_t v116 = type metadata accessor for Logger();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v116 - 8) + 8))(a4, v116);
              goto LABEL_76;
            }
            sub_1000C9DB4((uint64_t)&v124 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
          }
          swift_errorRelease();
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v85 = Logger.logObject.getter();
          os_log_type_t v86 = static os_log_type_t.fault.getter();
          BOOL v87 = os_log_type_enabled(v85, v86);
          uint64_t v133 = a4;
          if (v87)
          {
            uint64_t v88 = swift_slowAlloc();
            BOOL v89 = (void *)swift_slowAlloc();
            v135[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v88 = 136446466;
            uint64_t v127 = a7;
            uint64_t v90 = StaticString.description.getter();
            uint64_t v136 = sub_1000A2E70(v90, v91, v135);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v88 + 12) = 2114;
            swift_errorRetain();
            uint64_t v92 = _swift_stdlib_bridgeErrorToNSError();
            uint64_t v136 = v92;
            a7 = v127;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *BOOL v89 = v92;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v85, v86, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v88, 0x16u);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            if (v129) {
              goto LABEL_64;
            }
          }
          else
          {

            swift_errorRelease();
            swift_errorRelease();
            if (v129)
            {
LABEL_64:
              sub_10023C5AC(v38);
              swift_willThrow();
              swift_errorRelease();
              uint64_t v111 = type metadata accessor for Logger();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v111 - 8) + 8))(v133, v111);
LABEL_77:

              goto LABEL_78;
            }
          }
          if (&class metadata base offset for TapToRadarService) {
            BOOL v93 = &type metadata accessor for TapToRadarService == 0;
          }
          else {
            BOOL v93 = 1;
          }
          if (!v93
            && &type metadata for TapToRadarService != 0
            && &nominal type descriptor for TapToRadarService != 0)
          {
            uint64_t v96 = sub_10009EE78(&qword_100340F10);
            uint64_t v129 = &v124;
            __chkstk_darwin(v96 - 8);
            uint64_t v98 = (uint8_t *)&v124 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v126 = v98;
            uint64_t v99 = type metadata accessor for TaskPriority();
            (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56))(v98, 1, 1, v99);
            uint64_t v100 = type metadata accessor for Logger();
            uint64_t v125 = &v124;
            uint64_t v101 = *(void *)(v100 - 8);
            uint64_t v102 = *(void *)(v101 + 64);
            __chkstk_darwin(v100);
            unint64_t v103 = (char *)&v124 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v103, v133, v100);
            unint64_t v104 = (*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80);
            unint64_t v105 = (v104 + v102 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v106 = a7;
            unint64_t v107 = (v104 + v102 + 31) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v108 = swift_allocObject();
            *(void *)(v108 + 16) = 0;
            *(void *)(v108 + 24) = 0;
            (*(void (**)(unint64_t, char *, uint64_t))(v101 + 32))(v108 + v104, v103, v100);
            unint64_t v109 = v108 + v105;
            uint64_t v110 = v131;
            *(void *)unint64_t v109 = v130;
            *(void *)(v109 + 8) = v110;
            *(unsigned char *)(v109 + 16) = (_BYTE)v128;
            *(void *)(v108 + v107) = v38;
            a7 = v106;
            swift_errorRetain();
            sub_1000A27A0((uint64_t)v126, (uint64_t)&unk_1003434F0, v108);
            swift_release();
          }
          goto LABEL_64;
        }
        swift_errorRelease();
        if (qword_10034B2B0)
        {
          uint64_t v84 = qword_10034B2B0;
        }
        else
        {
          sub_1000C51B4();
          uint64_t v84 = swift_allocError();
          unsigned char *v117 = 0;
        }
        swift_errorRetain();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v118 = Logger.logObject.getter();
        os_log_type_t v119 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v118, v119))
        {
          uint64_t v133 = a4;
          uint64_t v120 = (uint8_t *)swift_slowAlloc();
          uint64_t v121 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v120 = 138412290;
          swift_errorRetain();
          uint64_t v122 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v136 = v122;
          a4 = v133;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v121 = v122;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v118, v119, "The preflight error %@ did not result in a TTR", v120, 0xCu);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        sub_10023C5AC(v84);
        swift_willThrow();
        swift_errorRelease();
      }
      uint64_t v123 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v123 - 8) + 8))(a4, v123);
LABEL_76:
      swift_errorRelease();
      goto LABEL_77;
    }
  }
  else
  {
    if (v30)
    {
      unint64_t v77 = (uint8_t *)swift_slowAlloc();
      v135[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v77 = 136446210;
      uint64_t v78 = StaticString.description.getter();
      uint64_t v136 = sub_1000A2E70(v78, v79, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%{public}s has opted out of preflight.", v77, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v80 = (void *)a9;
  uint64_t v81 = Logger.logObject.getter();
  os_log_type_t v82 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v81, v82))
  {
    os_log_type_t v83 = (uint8_t *)swift_slowAlloc();
    uint64_t v126 = (uint8_t *)a9;
    *(_WORD *)os_log_type_t v83 = 0;
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "Starting the activity.", v83, 2u);
    uint64_t v80 = v126;
    swift_slowDealloc();
  }

  a7 = v127;
  sub_10021C884(v127, (uint64_t)v132, v80, a10, a11, a12 & 1, a13);
  if (v128)
  {
    uint64_t v38 = (uint64_t)v128;
    a4 = v133;
    goto LABEL_23;
  }
  uint64_t v112 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v112 - 8) + 8))(v133, v112);
  swift_release();

LABEL_78:
}

void sub_100185A3C(char *a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, void *a7)
{
  uint64_t v8 = v7;
  LODWORD(v121) = a6;
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v123 = a1;
  uint64_t v124 = a2;
  os_log_type_t v15 = (os_activity_scope_state_s *)(sub_10010D0A4(a1, a2, a3) + 24);
  swift_beginAccess();
  BOOL v16 = swift_unknownObjectRetain();
  os_activity_scope_enter(v16, v15);
  swift_endAccess();
  swift_unknownObjectRelease();
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Checking for first unlock.", v19, 2u);
    uint64_t v8 = v7;
    swift_slowDealloc();
  }

  int v122 = a3;
  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v35, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v20 = type metadata accessor for ScreenTimeFeatureFlags();
  v126[3] = v20;
  v126[4] = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v21 = sub_1000C532C(v126);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v21, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v20);
  char v22 = isFeatureEnabled(_:)();
  sub_1000A4F28((uint64_t)v126);
  os_log_type_t v23 = Logger.logObject.getter();
  if ((v22 & 1) == 0)
  {
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v38))
    {
      uint64_t v120 = (char *)a4;
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      v126[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136446210;
      uint64_t v40 = StaticString.description.getter();
      uint64_t v127 = sub_1000A2E70(v40, v41, v126);
      a4 = (uint64_t)v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v38, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v36 = swift_allocError();
    *os_log_type_t v42 = 1;
    goto LABEL_23;
  }
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  if (a5)
  {
    if (v25)
    {
      char v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Starting preflight.", v26, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    char v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Preflight complete", v29, 2u);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      BOOL v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "The preflight did not complete as expected.", v32, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v36 = swift_allocError();
      unsigned char *v37 = 0;
LABEL_23:
      swift_willThrow();
      goto LABEL_24;
    }
  }
  else
  {
    if (v25)
    {
      uint64_t v120 = (char *)a4;
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      uint64_t v118 = v8;
      v126[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v69 = 136446210;
      uint64_t v70 = StaticString.description.getter();
      uint64_t v127 = sub_1000A2E70(v70, v71, v126);
      a4 = (uint64_t)v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s has opted out of preflight.", v69, 0xCu);
      swift_arrayDestroy();
      uint64_t v8 = v118;
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v72, v73))
  {
    os_log_type_t v74 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v74 = 0;
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "Starting the activity.", v74, 2u);
    swift_slowDealloc();
  }

  sub_1002379D8(a7);
  if (!v8)
  {
    uint64_t v103 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8))(a4, v103);
    swift_release();
    goto LABEL_78;
  }
  uint64_t v36 = (uint64_t)v8;
LABEL_24:
  swift_release();
  v126[0] = v36;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (swift_dynamicCast() && (v127 & 1) == 0)
  {
    swift_errorRelease();
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v59, 2u);
      swift_slowDealloc();
    }

    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    swift_allocError();
    unsigned char *v60 = 0;
    swift_willThrow();
    goto LABEL_76;
  }
  swift_errorRelease();
  v126[0] = v36;
  uint64_t v43 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v44 = *(void *)(*(void *)(v43 - 8) + 64);
  __chkstk_darwin(v43);
  unint64_t v45 = (id *)((char *)&v116 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    if (swift_getEnumCaseMultiPayload() == 37)
    {
      swift_errorRelease();
      uint64_t v46 = (uint64_t *)*v45;
      id v47 = *v45;
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = swift_slowAlloc();
        uint64_t v121 = v46;
        uint64_t v51 = v50;
        os_log_type_t v117 = (void *)swift_slowAlloc();
        uint64_t v118 = (uint64_t *)swift_slowAlloc();
        uint64_t v127 = (uint64_t)v118;
        *(_DWORD *)uint64_t v51 = 136446466;
        os_log_type_t v119 = a7;
        uint64_t v52 = StaticString.description.getter();
        uint64_t v125 = sub_1000A2E70(v52, v53, &v127);
        uint64_t v120 = (char *)a4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v51 + 12) = 2114;
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v54 = v121;
        swift_storeEnumTagMultiPayload();
        id v55 = v47;
        uint64_t v56 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v125 = v56;
        a4 = (uint64_t)v120;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v117 = v56;
        a7 = v119;

        _os_log_impl((void *)&_mh_execute_header, v48, v49, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v51, 0x16u);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v46 = v121;
        swift_slowDealloc();
      }
      else
      {
      }
      sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
      swift_allocError();
      uint64_t *v104 = v46;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      uint64_t v105 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(a4, v105);
      goto LABEL_77;
    }
    sub_1000C9DB4((uint64_t)&v116 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  }
  swift_errorRelease();
  v126[0] = v36;
  swift_errorRetain();
  if (swift_dynamicCast() && (v125 & 1) == 0)
  {
    swift_errorRelease();
    if (qword_10034B2B0)
    {
      uint64_t v75 = qword_10034B2B0;
    }
    else
    {
      sub_1000C51B4();
      uint64_t v75 = swift_allocError();
      unsigned char *v108 = 0;
    }
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v109 = Logger.logObject.getter();
    os_log_type_t v110 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v109, v110))
    {
      uint64_t v111 = (uint8_t *)swift_slowAlloc();
      uint64_t v112 = swift_slowAlloc();
      uint64_t v120 = (char *)a4;
      uint64_t v113 = (void *)v112;
      *(_DWORD *)uint64_t v111 = 138412290;
      swift_errorRetain();
      uint64_t v114 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v127 = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v113 = v114;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "The preflight error %@ did not result in a TTR", v111, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      a4 = (uint64_t)v120;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    sub_10023C5AC(v75);
    swift_willThrow();
    swift_errorRelease();
LABEL_76:
    uint64_t v115 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v115 - 8) + 8))(a4, v115);
LABEL_77:
    swift_errorRelease();
    goto LABEL_78;
  }
  uint64_t v61 = swift_errorRelease();
  v126[0] = v36;
  __chkstk_darwin(v61);
  id v62 = (uint64_t *)((char *)&v116 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    if (swift_getEnumCaseMultiPayload() == 22)
    {
      swift_errorRelease();
      uint64_t v64 = *v62;
      unint64_t v63 = v62[1];
      swift_bridgeObjectRetain_n();
      uint64_t v120 = (char *)a4;
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v124 = v64;
        uint64_t v67 = (uint8_t *)swift_slowAlloc();
        uint64_t v68 = swift_slowAlloc();
        os_log_type_t v119 = a7;
        uint64_t v127 = v68;
        *(_DWORD *)uint64_t v67 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v125 = sub_1000A2E70(v124, v63, &v127);
        uint64_t v64 = v124;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "askForTime response handling did not find ask request identifier %s", v67, 0xCu);
        swift_arrayDestroy();
        a7 = v119;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
      swift_allocError();
      uint64_t *v106 = v64;
      v106[1] = v63;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      uint64_t v107 = type metadata accessor for Logger();
      (*(void (**)(char *, uint64_t))(*(void *)(v107 - 8) + 8))(v120, v107);
      goto LABEL_77;
    }
    sub_1000C9DB4((uint64_t)v62);
  }
  swift_errorRelease();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v76 = Logger.logObject.getter();
  os_log_type_t v77 = static os_log_type_t.fault.getter();
  BOOL v78 = os_log_type_enabled(v76, v77);
  os_log_type_t v119 = a7;
  if (v78)
  {
    uint64_t v79 = swift_slowAlloc();
    uint64_t v80 = (void *)swift_slowAlloc();
    v126[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v79 = 136446466;
    uint64_t v81 = StaticString.description.getter();
    uint64_t v120 = (char *)a4;
    uint64_t v127 = sub_1000A2E70(v81, v82, v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v79 + 12) = 2114;
    swift_errorRetain();
    uint64_t v83 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v127 = v83;
    a4 = (uint64_t)v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v80 = v83;
    a7 = v119;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v79, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (v121) {
      goto LABEL_65;
    }
LABEL_54:
    if (&class metadata base offset for TapToRadarService) {
      BOOL v84 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v84 = 1;
    }
    if (!v84 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      uint64_t v87 = sub_10009EE78(&qword_100340F10);
      uint64_t v121 = &v116;
      __chkstk_darwin(v87 - 8);
      BOOL v89 = (char *)&v116 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v120 = v89;
      uint64_t v90 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v89, 1, 1, v90);
      uint64_t v91 = type metadata accessor for Logger();
      uint64_t v118 = &v116;
      uint64_t v92 = *(void *)(v91 - 8);
      uint64_t v93 = *(void *)(v92 + 64);
      __chkstk_darwin(v91);
      unint64_t v94 = (char *)&v116 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v94, a4, v91);
      unint64_t v95 = (*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
      unint64_t v96 = (v95 + v93 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v97 = a4;
      unint64_t v98 = (v95 + v93 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v99 = swift_allocObject();
      *(void *)(v99 + 16) = 0;
      *(void *)(v99 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v92 + 32))(v99 + v95, v94, v91);
      unint64_t v100 = v99 + v96;
      uint64_t v101 = v124;
      *(void *)unint64_t v100 = v123;
      *(void *)(v100 + 8) = v101;
      *(unsigned char *)(v100 + 16) = v122;
      *(void *)(v99 + v98) = v36;
      a4 = v97;
      a7 = v119;
      swift_errorRetain();
      sub_1000A27A0((uint64_t)v120, (uint64_t)&unk_1003434F8, v99);
      swift_release();
    }
    goto LABEL_65;
  }

  swift_errorRelease();
  swift_errorRelease();
  if ((v121 & 1) == 0) {
    goto LABEL_54;
  }
LABEL_65:
  sub_10023C5AC(v36);
  swift_willThrow();
  swift_errorRelease();
  uint64_t v102 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 - 8) + 8))(a4, v102);
LABEL_78:
}

uint64_t sub_100186EC8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 272) = v11;
  *(_OWORD *)(v8 + 256) = v10;
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 316) = a6;
  *(unsigned char *)(v8 + 315) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 314) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_100186F10, 0, 0);
}

uint64_t sub_100186F10()
{
  uint64_t v114 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 314);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 280) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 288) = v4;
  char v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  long long v10 = (unsigned char *)(v0 + 312);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      char v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      BOOL v30 = (uint8_t *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      long long v10 = (unsigned char *)(v0 + 312);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 313) & 1) == 0)
    {
      swift_errorRelease();
      unint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        id v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *os_log_type_t v49 = 0;
      swift_willThrow();
      uint64_t v50 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v48, v50);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    os_log_type_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v109 = v35;
          uint64_t v39 = swift_slowAlloc();
          uint64_t v108 = (void *)swift_slowAlloc();
          v113[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *os_log_type_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v108 = v44;

          id v35 = v109;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v93 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v94 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v95 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v95 - 8) + 8))(v93, v95);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v70 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v70 = swift_allocError();
        *unint64_t v100 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v101 = Logger.logObject.getter();
      os_log_type_t v102 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v101, v102))
      {
        uint64_t v103 = (uint8_t *)swift_slowAlloc();
        unint64_t v104 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v103 = 138412290;
        swift_errorRetain();
        uint64_t v105 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v104 = v105;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v101, v102, "The preflight error %@ did not result in a TTR.", v103, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v106 = *(void *)(v0 + 232);
      sub_10023C5AC(v70);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v107 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 8))(v106, v107);
      swift_errorRelease();
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v64 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v66 = *v64;
        unint64_t v65 = v64[1];
        swift_bridgeObjectRetain_n();
        uint64_t v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v69 = (uint8_t *)swift_slowAlloc();
          v113[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v69 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v66, v65, v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "askForTime response handling did not find ask request identifier %s", v69, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v97 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *unint64_t v98 = v66;
        v98[1] = v65;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v99 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v97, v99);
        swift_task_dealloc();
        swift_errorRelease();
        swift_bridgeObjectRelease();
        goto LABEL_70;
      }
      sub_1000C9DB4((uint64_t)v64);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = swift_slowAlloc();
      os_log_type_t v74 = (void *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v73 = 136446466;
      uint64_t v75 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v75, v76, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v73 + 12) = 2114;
      swift_errorRetain();
      uint64_t v77 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v74 = v77;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v73, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v91 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v92 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v92 - 8) + 8))(v91, v92);
LABEL_69:
        swift_bridgeObjectRelease();
LABEL_70:
        swift_bridgeObjectRelease();
        unint64_t v96 = *(uint64_t (**)(void))(v0 + 8);
        return v96();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v78 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v78 = 1;
    }
    if (!v78 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v112 = *(unsigned char *)(v0 + 314);
      uint64_t v81 = *(void *)(v0 + 232);
      uint64_t v110 = *(void *)(v0 + 216);
      uint64_t v111 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v82 = swift_task_alloc();
      uint64_t v83 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v82, 1, 1, v83);
      uint64_t v84 = type metadata accessor for Logger();
      uint64_t v85 = *(void *)(v84 - 8);
      uint64_t v86 = *(void *)(v85 + 64);
      uint64_t v87 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16))(v87, v81, v84);
      unint64_t v88 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
      uint64_t v89 = swift_allocObject();
      *(void *)(v89 + 16) = 0;
      *(void *)(v89 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v85 + 32))(v89 + v88, v87, v84);
      unint64_t v90 = v89 + ((v88 + v86 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v90 = v110;
      *(void *)(v90 + 8) = v111;
      *(unsigned char *)(v90 + 16) = v112;
      *(void *)(v89 + ((v88 + v86 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v82, (uint64_t)&unk_1003435F8, v89);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 315);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    os_log_type_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      long long v10 = (unsigned char *)(v0 + 312);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *os_log_type_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136446210;
      uint64_t v52 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v52, v53, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Starting the activity.", v56, 2u);
    swift_slowDealloc();
  }

  uint64_t v57 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v57;
  *uint64_t v57 = v0;
  v57[1] = sub_100188468;
  uint64_t v58 = *(void *)(v0 + 264);
  uint64_t v59 = *(void *)(v0 + 272);
  uint64_t v60 = *(void *)(v0 + 248);
  uint64_t v61 = *(void *)(v0 + 256);
  uint64_t v62 = *(void *)(v0 + 240);
  return sub_1001C8C98((uint64_t)v57, v62, v60, v61, v58, v59);
}

uint64_t sub_100188468()
{
  *(void *)(*(void *)v1 + 304) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100188638;
  }
  else {
    uint64_t v2 = sub_10018857C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10018857C()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100188638()
{
  uint64_t v70 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 304);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 313) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          unint64_t v63 = (void *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v63 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v47 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v48 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v49 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 312) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      swift_errorRelease();
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    os_log_type_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v21, v20, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    char v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 316)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 316))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_45;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v68 = *(unsigned char *)(v0 + 314);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v68;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_1003435F8, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  uint64_t v16 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  unsigned char *v17 = 0;
  swift_willThrow();
  uint64_t v18 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
  swift_errorRelease();
LABEL_45:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

uint64_t sub_100189440(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 272) = v11;
  *(void *)(v8 + 280) = v12;
  *(_OWORD *)(v8 + 256) = v10;
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 324) = a6;
  *(unsigned char *)(v8 + 323) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 322) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_100189488, 0, 0);
}

uint64_t sub_100189488()
{
  uint64_t v115 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 322);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 288) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 296) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  long long v10 = (unsigned char *)(v0 + 320);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      char v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      long long v10 = (unsigned char *)(v0 + 320);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 321) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v49 = 0;
      swift_willThrow();
      uint64_t v50 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v48, v50);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    os_log_type_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v110 = v35;
          uint64_t v39 = swift_slowAlloc();
          id v109 = (void *)swift_slowAlloc();
          v114[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v109 = v44;

          id v35 = v110;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v94 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v95 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v96 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v96 - 8) + 8))(v94, v96);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v71 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v71 = swift_allocError();
        *uint64_t v101 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v102 = Logger.logObject.getter();
      os_log_type_t v103 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v102, v103))
      {
        unint64_t v104 = (uint8_t *)swift_slowAlloc();
        uint64_t v105 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v104 = 138412290;
        swift_errorRetain();
        uint64_t v106 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v105 = v106;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v102, v103, "The preflight error %@ did not result in a TTR.", v104, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v107 = *(void *)(v0 + 232);
      sub_10023C5AC(v71);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v108 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v108 - 8) + 8))(v107, v108);
      swift_errorRelease();
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    unint64_t v65 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v67 = *v65;
        unint64_t v66 = v65[1];
        swift_bridgeObjectRetain_n();
        char v68 = Logger.logObject.getter();
        os_log_type_t v69 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v68, v69))
        {
          uint64_t v70 = (uint8_t *)swift_slowAlloc();
          v114[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v70 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v67, v66, v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "askForTime response handling did not find ask request identifier %s", v70, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v98 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v99 = v67;
        v99[1] = v66;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v100 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8))(v98, v100);
        swift_task_dealloc();
        swift_errorRelease();
        swift_bridgeObjectRelease();
        goto LABEL_70;
      }
      sub_1000C9DB4((uint64_t)v65);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = swift_slowAlloc();
      uint64_t v75 = (void *)swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v74 = 136446466;
      uint64_t v76 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v76, v77, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v74 + 12) = 2114;
      swift_errorRetain();
      uint64_t v78 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v75 = v78;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v74, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v92 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v93 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8))(v92, v93);
LABEL_69:
        swift_bridgeObjectRelease();
LABEL_70:
        swift_bridgeObjectRelease();
        uint64_t v97 = *(uint64_t (**)(void))(v0 + 8);
        return v97();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v79 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v79 = 1;
    }
    if (!v79 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v113 = *(unsigned char *)(v0 + 322);
      uint64_t v82 = *(void *)(v0 + 232);
      uint64_t v111 = *(void *)(v0 + 216);
      uint64_t v112 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v83 = swift_task_alloc();
      uint64_t v84 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v83, 1, 1, v84);
      uint64_t v85 = type metadata accessor for Logger();
      uint64_t v86 = *(void *)(v85 - 8);
      uint64_t v87 = *(void *)(v86 + 64);
      uint64_t v88 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v88, v82, v85);
      unint64_t v89 = (*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
      uint64_t v90 = swift_allocObject();
      *(void *)(v90 + 16) = 0;
      *(void *)(v90 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v86 + 32))(v90 + v89, v88, v85);
      unint64_t v91 = v90 + ((v89 + v87 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v91 = v111;
      *(void *)(v91 + 8) = v112;
      *(unsigned char *)(v91 + 16) = v113;
      *(void *)(v90 + ((v89 + v87 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v83, (uint64_t)&unk_1003435E8, v90);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 323);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      long long v10 = (unsigned char *)(v0 + 320);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *uint64_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      v114[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136446210;
      uint64_t v52 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v52, v53, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Starting the activity.", v56, 2u);
    swift_slowDealloc();
  }

  uint64_t v57 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v57;
  *uint64_t v57 = v0;
  v57[1] = sub_10018A9F4;
  uint64_t v58 = *(void *)(v0 + 272);
  uint64_t v59 = *(void *)(v0 + 280);
  uint64_t v60 = *(void *)(v0 + 256);
  uint64_t v61 = *(void *)(v0 + 264);
  uint64_t v62 = *(void *)(v0 + 240);
  uint64_t v63 = *(void *)(v0 + 248);
  return sub_1001C9644((uint64_t)v57, v62, v63, v60, v61, v58, v59);
}

uint64_t sub_10018A9F4()
{
  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10018ABC8;
  }
  else {
    uint64_t v2 = sub_10018AB08;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10018AB08()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10018ABC8()
{
  uint64_t v70 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 312);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 321) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          uint64_t v63 = (void *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v63 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v47 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v48 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v49 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 320) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      swift_errorRelease();
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    os_log_type_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v21, v20, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    char v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 324)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 324))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_45;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v68 = *(unsigned char *)(v0 + 322);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v68;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_1003435E8, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  uint64_t v16 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  unsigned char *v17 = 0;
  swift_willThrow();
  uint64_t v18 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
  swift_errorRelease();
LABEL_45:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

uint64_t sub_10018B9E4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 256) = v10;
  *(void *)(v8 + 264) = v11;
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 308) = a6;
  *(unsigned char *)(v8 + 307) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 306) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_10018BA24, 0, 0);
}

uint64_t sub_10018BA24()
{
  uint64_t v113 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 306);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 272) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 280) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = (unsigned char *)(v0 + 304);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      char v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = (unsigned char *)(v0 + 304);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 305) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v48 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v49 = 0;
      swift_willThrow();
      uint64_t v50 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v48, v50);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    os_log_type_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v108 = v35;
          uint64_t v39 = swift_slowAlloc();
          uint64_t v107 = (void *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v107 = v44;

          id v35 = v108;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v92 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        void *v93 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v94 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v94 - 8) + 8))(v92, v94);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v69 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v69 = swift_allocError();
        *uint64_t v99 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v100, v101))
      {
        os_log_type_t v102 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v103 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v102 = 138412290;
        swift_errorRetain();
        uint64_t v104 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v103 = v104;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "The preflight error %@ did not result in a TTR.", v102, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v105 = *(void *)(v0 + 232);
      sub_10023C5AC(v69);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v106 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v106 - 8) + 8))(v105, v106);
      swift_errorRelease();
      swift_release();
      goto LABEL_70;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    uint64_t v63 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v65 = *v63;
        unint64_t v64 = v63[1];
        swift_bridgeObjectRetain_n();
        unint64_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v67))
        {
          char v68 = (uint8_t *)swift_slowAlloc();
          v112[0] = swift_slowAlloc();
          *(_DWORD *)char v68 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v65, v64, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "askForTime response handling did not find ask request identifier %s", v68, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v96 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v97 = v65;
        v97[1] = v64;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v98 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v98 - 8) + 8))(v96, v98);
        swift_task_dealloc();
        swift_errorRelease();
        swift_release();
        goto LABEL_70;
      }
      sub_1000C9DB4((uint64_t)v63);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = swift_slowAlloc();
      os_log_type_t v73 = (void *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 136446466;
      uint64_t v74 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v74, v75, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 12) = 2114;
      swift_errorRetain();
      uint64_t v76 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v73 = v76;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v72, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v90 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(v90, v91);
LABEL_69:
        swift_release();
LABEL_70:
        swift_bridgeObjectRelease();
        uint64_t v95 = *(uint64_t (**)(void))(v0 + 8);
        return v95();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v77 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v77 = 1;
    }
    if (!v77 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v111 = *(unsigned char *)(v0 + 306);
      uint64_t v80 = *(void *)(v0 + 232);
      uint64_t v109 = *(void *)(v0 + 216);
      uint64_t v110 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v81 = swift_task_alloc();
      uint64_t v82 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v81, 1, 1, v82);
      uint64_t v83 = type metadata accessor for Logger();
      uint64_t v84 = *(void *)(v83 - 8);
      uint64_t v85 = *(void *)(v84 + 64);
      uint64_t v86 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v86, v80, v83);
      unint64_t v87 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      uint64_t v88 = swift_allocObject();
      *(void *)(v88 + 16) = 0;
      *(void *)(v88 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v84 + 32))(v88 + v87, v86, v83);
      unint64_t v89 = v88 + ((v87 + v85 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v89 = v109;
      *(void *)(v89 + 8) = v110;
      *(unsigned char *)(v89 + 16) = v111;
      *(void *)(v88 + ((v87 + v85 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v81, (uint64_t)&unk_1003435C8, v88);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 307);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      uint64_t v10 = (unsigned char *)(v0 + 304);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *uint64_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136446210;
      uint64_t v52 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v52, v53, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Starting the activity.", v56, 2u);
    swift_slowDealloc();
  }

  uint64_t v57 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v57;
  *uint64_t v57 = v0;
  v57[1] = sub_10018CF78;
  uint64_t v58 = *(void *)(v0 + 256);
  uint64_t v59 = *(void *)(v0 + 264);
  uint64_t v60 = *(void *)(v0 + 240);
  uint64_t v61 = *(void *)(v0 + 248);
  return sub_1001CCDAC((uint64_t)v57, v60, v61, v58, v59);
}

uint64_t sub_10018CF78()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10018D08C;
  }
  else {
    uint64_t v2 = sub_100190D94;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10018D08C()
{
  uint64_t v70 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 296);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 305) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          uint64_t v63 = (void *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v63 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v47 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v48 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v49 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v47, v49);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 304) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v25 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v25 = swift_allocError();
        unsigned char *v53 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 138412290;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "The preflight error %@ did not result in a TTR.", v56, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v59 = *(void *)(v0 + 232);
      sub_10023C5AC(v25);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v60 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
      swift_errorRelease();
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    os_log_type_t v19 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
          v69[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v21, v20, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "askForTime response handling did not find ask request identifier %s", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v50 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v51 = v21;
        v51[1] = v20;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v52 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
        swift_task_dealloc();
        swift_errorRelease();
        goto LABEL_45;
      }
      sub_1000C9DB4((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    char v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v29 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v29, v30, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2114;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v28, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 308)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 308))
      {
LABEL_35:
        uint64_t v45 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v46 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
        goto LABEL_45;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v32 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v68 = *(unsigned char *)(v0 + 306);
      uint64_t v35 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(void *)(v39 + 64);
      uint64_t v41 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v35, v38);
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v43 + v42, v41, v38);
      unint64_t v44 = v43 + ((v42 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v44 = loga;
      *(void *)(v44 + 8) = v67;
      *(unsigned char *)(v44 + 16) = v68;
      *(void *)(v43 + ((v42 + v40 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v36, (uint64_t)&unk_1003435C8, v43);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  uint64_t v16 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  unsigned char *v17 = 0;
  swift_willThrow();
  uint64_t v18 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16, v18);
  swift_errorRelease();
LABEL_45:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

uint64_t sub_10018DE94(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 288) = v12;
  *(void *)(v8 + 296) = v13;
  *(_OWORD *)(v8 + 256) = v10;
  *(_OWORD *)(v8 + 272) = v11;
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 248) = a8;
  *(unsigned char *)(v8 + 340) = a6;
  *(unsigned char *)(v8 + 339) = a5;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 338) = a3;
  *(void *)(v8 + 216) = a1;
  return _swift_task_switch(sub_10018DEDC, 0, 0);
}

uint64_t sub_10018DEDC()
{
  uint64_t v120 = v0;
  uint64_t v1 = *(char **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  char v3 = *(unsigned char *)(v0 + 338);
  type metadata accessor for OSActivity();
  *(void *)(v0 + 304) = swift_initStackObject();
  id v4 = sub_10010D0A4(v1, v2, v3);
  *(void *)(v0 + 312) = v4;
  uint64_t v5 = (os_activity_scope_state_s *)(v4 + 24);
  swift_beginAccess();
  os_log_type_t v6 = swift_unknownObjectRetain();
  os_activity_scope_enter(v6, v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for first unlock.", v9, 2u);
    swift_slowDealloc();
  }
  long long v10 = (unsigned char *)(v0 + 336);

  if (!MKBUserUnlockedSinceBoot())
  {
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      char v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Device has not been unlocked, and STAgent has been called. The caller will receive an error.", v26, 2u);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    goto LABEL_19;
  }
  uint64_t v11 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 88) = sub_1000C5528(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v12 = sub_1000C532C((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v11);
  LOBYTE(v11) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 56);
  uint64_t v13 = Logger.logObject.getter();
  if ((v11 & 1) == 0)
  {
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v119 = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136446210;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 200) = sub_1000A2E70(v31, v32, &v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "Device does not have the simplified_agent feature flag enabled. ScreenTimeAgent shouldn't run the DaemonActivity for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      long long v10 = (unsigned char *)(v0 + 336);
      swift_slowDealloc();
    }

    sub_10009EE78(&qword_100341D58);
    sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
    uint64_t v27 = swift_allocError();
    unsigned char *v33 = 1;
LABEL_23:
    swift_willThrow();
    swift_release();
    *(void *)(v0 + 120) = v27;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    sub_10009EE78(&qword_100341D58);
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 337) & 1) == 0)
    {
      swift_errorRelease();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v47, 2u);
        swift_slowDealloc();
      }
      uint64_t v49 = *(void **)(v0 + 240);
      uint64_t v48 = *(void **)(v0 + 248);
      uint64_t v50 = *(void *)(v0 + 232);

      sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
      swift_allocError();
      *uint64_t v51 = 0;
      swift_willThrow();
      uint64_t v52 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v50, v52);
      goto LABEL_68;
    }
    swift_errorRelease();
    *(void *)(v0 + 128) = v27;
    type metadata accessor for DataStore.DataStoreError(0);
    os_log_type_t v34 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v35 = *v34;
        id v36 = *v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v115 = v35;
          uint64_t v39 = swift_slowAlloc();
          uint64_t v114 = (void *)swift_slowAlloc();
          uint64_t v119 = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446466;
          uint64_t v40 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v40, v41, &v119);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          *unint64_t v42 = v35;
          swift_storeEnumTagMultiPayload();
          id v43 = v36;
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v114 = v44;

          id v35 = v115;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v39, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v49 = *(void **)(v0 + 240);
        uint64_t v48 = *(void **)(v0 + 248);
        uint64_t v97 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v98 = v35;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v99 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v97, v99);
        swift_task_dealloc();
LABEL_68:
        swift_errorRelease();
        goto LABEL_69;
      }
      sub_1000C9DB4((uint64_t)v34);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v27;
    swift_errorRetain();
    if (swift_dynamicCast() && (*v10 & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v74 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v74 = swift_allocError();
        *uint64_t v105 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v106, v107))
      {
        id v108 = (uint8_t *)swift_slowAlloc();
        uint64_t v109 = (void *)swift_slowAlloc();
        *(_DWORD *)id v108 = 138412290;
        swift_errorRetain();
        uint64_t v110 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v110;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v109 = v110;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v106, v107, "The preflight error %@ did not result in a TTR.", v108, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      os_log_type_t v101 = *(void **)(v0 + 240);
      uint64_t v100 = *(void **)(v0 + 248);
      uint64_t v111 = *(void *)(v0 + 232);
      sub_10023C5AC(v74);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v112 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v112 - 8) + 8))(v111, v112);
      goto LABEL_77;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v27;
    char v68 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v70 = *v68;
        unint64_t v69 = v68[1];
        swift_bridgeObjectRetain_n();
        uint64_t v71 = Logger.logObject.getter();
        os_log_type_t v72 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v71, v72))
        {
          os_log_type_t v73 = (uint8_t *)swift_slowAlloc();
          uint64_t v119 = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v73 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v70, v69, &v119);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v71, v72, "askForTime response handling did not find ask request identifier %s", v73, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        os_log_type_t v101 = *(void **)(v0 + 240);
        uint64_t v100 = *(void **)(v0 + 248);
        uint64_t v102 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v103 = v70;
        v103[1] = v69;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v104 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v104 - 8) + 8))(v102, v104);
        swift_task_dealloc();
LABEL_77:
        swift_errorRelease();

        goto LABEL_78;
      }
      sub_1000C9DB4((uint64_t)v68);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = swift_slowAlloc();
      uint64_t v78 = (void *)swift_slowAlloc();
      uint64_t v119 = swift_slowAlloc();
      *(_DWORD *)uint64_t v77 = 136446466;
      uint64_t v79 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v79, v80, &v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v77 + 12) = 2114;
      swift_errorRetain();
      uint64_t v81 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v78 = v81;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v77, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v10[4]) {
        goto LABEL_65;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (v10[4])
      {
LABEL_65:
        uint64_t v49 = *(void **)(v0 + 240);
        uint64_t v48 = *(void **)(v0 + 248);
        uint64_t v95 = *(void *)(v0 + 232);
        sub_10023C5AC(v27);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v96 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v96 - 8) + 8))(v95, v96);
LABEL_69:

LABEL_78:
        uint64_t v113 = *(uint64_t (**)(void))(v0 + 8);
        return v113();
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v82 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v82 = 1;
    }
    if (!v82 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v118 = *(unsigned char *)(v0 + 338);
      uint64_t v85 = *(void *)(v0 + 232);
      uint64_t v116 = *(void *)(v0 + 216);
      uint64_t v117 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v86 = swift_task_alloc();
      uint64_t v87 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v86, 1, 1, v87);
      uint64_t v88 = type metadata accessor for Logger();
      uint64_t v89 = *(void *)(v88 - 8);
      uint64_t v90 = *(void *)(v89 + 64);
      uint64_t v91 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 16))(v91, v85, v88);
      unint64_t v92 = (*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
      uint64_t v93 = swift_allocObject();
      *(void *)(v93 + 16) = 0;
      *(void *)(v93 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v89 + 32))(v93 + v92, v91, v88);
      unint64_t v94 = v93 + ((v92 + v90 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v94 = v116;
      *(void *)(v94 + 8) = v117;
      *(unsigned char *)(v94 + 16) = v118;
      *(void *)(v93 + ((v92 + v90 + 31) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v86, (uint64_t)&unk_1003434E8, v93);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_65;
  }
  char v14 = *(unsigned char *)(v0 + 339);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v13, v15);
  if (v14)
  {
    if (v16)
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Starting preflight.", v17, 2u);
      swift_slowDealloc();
    }

    if (qword_100340D70 != -1) {
      swift_once();
    }
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preflight complete", v20, 2u);
      long long v10 = (unsigned char *)(v0 + 336);
      swift_slowDealloc();
    }

    if ((byte_10034B308 & 1) == 0)
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "The preflight did not complete as expected.", v23, 2u);
        swift_slowDealloc();
      }

      sub_1000C51B4();
LABEL_19:
      uint64_t v27 = swift_allocError();
      *uint64_t v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    if (v16)
    {
      unint64_t v53 = (uint8_t *)swift_slowAlloc();
      uint64_t v119 = swift_slowAlloc();
      *(_DWORD *)unint64_t v53 = 136446210;
      uint64_t v54 = StaticString.description.getter();
      *(void *)(v0 + 208) = sub_1000A2E70(v54, v55, &v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s has opted out of preflight", v53, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v58 = 0;
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Starting the activity.", v58, 2u);
    swift_slowDealloc();
  }

  uint64_t v59 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v59;
  *uint64_t v59 = v0;
  v59[1] = sub_10018F424;
  uint64_t v60 = *(void *)(v0 + 288);
  uint64_t v61 = *(void *)(v0 + 272);
  uint64_t v62 = *(void *)(v0 + 280);
  uint64_t v63 = *(void *)(v0 + 256);
  uint64_t v64 = *(void *)(v0 + 264);
  uint64_t v65 = *(void *)(v0 + 240);
  uint64_t v66 = *(void *)(v0 + 248);
  uint64_t v122 = *(void *)(v0 + 296);
  return sub_10021D838((uint64_t)v59, v65, v66, v63, v64, v61, v62, v60);
}

uint64_t sub_10018F424()
{
  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10018F5EC;
  }
  else {
    uint64_t v2 = sub_10018F538;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10018F538()
{
  uint64_t v2 = (void *)v0[30];
  uint64_t v1 = (void *)v0[31];
  uint64_t v3 = v0[29];
  swift_release();
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10018F5EC()
{
  uint64_t v76 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 328);
  *(void *)(v0 + 120) = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  sub_10009EE78(&qword_100341D58);
  if (!swift_dynamicCast() || (*(unsigned char *)(v0 + 337) & 1) != 0)
  {
    swift_errorRelease();
    *(void *)(v0 + 128) = v1;
    type metadata accessor for DataStore.DataStoreError(0);
    uint64_t v2 = (id *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();
        id v3 = *v2;
        id v4 = *v2;
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v5, v6))
        {
          os_log_type_t type = v6;
          uint64_t v7 = swift_slowAlloc();
          unint64_t v69 = (void *)swift_slowAlloc();
          v75[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 136446466;
          uint64_t v8 = StaticString.description.getter();
          *(void *)(v0 + 184) = sub_1000A2E70(v8, v9, v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v7 + 12) = 2114;
          sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
          swift_allocError();
          void *v10 = v3;
          swift_storeEnumTagMultiPayload();
          id v11 = v4;
          uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 192) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v69 = v12;

          _os_log_impl((void *)&_mh_execute_header, v5, type, "DaemonActivity %{public}s failed with unknown user: %{public}@", (uint8_t *)v7, 0x16u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v48 = *(void **)(v0 + 240);
        uint64_t v47 = *(void **)(v0 + 248);
        uint64_t v51 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v52 = v3;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v53 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(v51, v53);
        swift_task_dealloc();
LABEL_45:
        swift_errorRelease();
        goto LABEL_46;
      }
      sub_1000C9DB4((uint64_t)v2);
    }
    swift_task_dealloc();
    swift_errorRelease();
    *(void *)(v0 + 136) = v1;
    swift_errorRetain();
    if (swift_dynamicCast() && (*(unsigned char *)(v0 + 336) & 1) == 0)
    {
      swift_errorRelease();
      if (qword_10034B2B0)
      {
        uint64_t v27 = qword_10034B2B0;
      }
      else
      {
        sub_1000C51B4();
        uint64_t v27 = swift_allocError();
        *uint64_t v59 = 0;
      }
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = (uint8_t *)swift_slowAlloc();
        uint64_t v63 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v62 = 138412290;
        swift_errorRetain();
        uint64_t v64 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 176) = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v63 = v64;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "The preflight error %@ did not result in a TTR.", v62, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v48 = *(void **)(v0 + 240);
      uint64_t v47 = *(void **)(v0 + 248);
      uint64_t v65 = *(void *)(v0 + 232);
      sub_10023C5AC(v27);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v66 = type metadata accessor for Logger();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v66 - 8) + 8))(v65, v66);
      goto LABEL_45;
    }
    swift_errorRelease();
    *(void *)(v0 + 144) = v1;
    uint64_t v21 = (uint64_t *)swift_task_alloc();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        swift_errorRelease();
        uint64_t v23 = *v21;
        unint64_t v22 = v21[1];
        swift_bridgeObjectRetain_n();
        os_log_type_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          char v26 = (uint8_t *)swift_slowAlloc();
          v75[0] = swift_slowAlloc();
          *(_DWORD *)char v26 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 168) = sub_1000A2E70(v23, v22, v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "askForTime response handling did not find ask request identifier %s", v26, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        unint64_t v55 = *(void **)(v0 + 240);
        uint64_t v54 = *(void **)(v0 + 248);
        uint64_t v56 = *(void *)(v0 + 232);
        sub_1000C5528((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *os_log_type_t v57 = v23;
        v57[1] = v22;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        uint64_t v58 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8))(v56, v58);
        swift_task_dealloc();
        swift_errorRelease();

        goto LABEL_47;
      }
      sub_1000C9DB4((uint64_t)v21);
    }
    swift_task_dealloc();
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v75[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136446466;
      uint64_t v31 = StaticString.description.getter();
      *(void *)(v0 + 152) = sub_1000A2E70(v31, v32, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2114;
      swift_errorRetain();
      uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      log->isa = (Class)v33;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "DaemonActivity %{public}s failed with: %{public}@.", (uint8_t *)v30, 0x16u);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(unsigned char *)(v0 + 340)) {
        goto LABEL_35;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (*(unsigned char *)(v0 + 340))
      {
LABEL_35:
        uint64_t v48 = *(void **)(v0 + 240);
        uint64_t v47 = *(void **)(v0 + 248);
        uint64_t v49 = *(void *)(v0 + 232);
        sub_10023C5AC(v1);
        swift_willThrow();
        swift_errorRelease();
        uint64_t v50 = type metadata accessor for Logger();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v49, v50);
LABEL_46:

        goto LABEL_47;
      }
    }
    if (&class metadata base offset for TapToRadarService) {
      BOOL v34 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v34 = 1;
    }
    if (!v34 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      char v74 = *(unsigned char *)(v0 + 338);
      uint64_t v37 = *(void *)(v0 + 232);
      os_log_t loga = *(os_log_t *)(v0 + 216);
      uint64_t v73 = *(void *)(v0 + 224);
      sub_10009EE78(&qword_100340F10);
      uint64_t v38 = swift_task_alloc();
      uint64_t v39 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
      uint64_t v40 = type metadata accessor for Logger();
      uint64_t v41 = *(void *)(v40 - 8);
      uint64_t v42 = *(void *)(v41 + 64);
      uint64_t v43 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v43, v37, v40);
      unint64_t v44 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      uint64_t v45 = swift_allocObject();
      *(void *)(v45 + 16) = 0;
      *(void *)(v45 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v41 + 32))(v45 + v44, v43, v40);
      unint64_t v46 = v45 + ((v44 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)unint64_t v46 = loga;
      *(void *)(v46 + 8) = v73;
      *(unsigned char *)(v46 + 16) = v74;
      *(void *)(v45 + ((v44 + v42 + 31) & 0xFFFFFFFFFFFFFFF8)) = v1;
      swift_task_dealloc();
      swift_errorRetain();
      sub_1000A27A0(v38, (uint64_t)&unk_1003434E8, v45);
      swift_release();
      swift_task_dealloc();
    }
    goto LABEL_35;
  }
  swift_errorRelease();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ScreenTimeAgent was started before first unlock. An error will be returned to our caller.", v15, 2u);
    swift_slowDealloc();
  }
  id v17 = *(void **)(v0 + 240);
  BOOL v16 = *(void **)(v0 + 248);
  uint64_t v18 = *(void *)(v0 + 232);

  sub_10019055C((unint64_t *)&qword_100341D60, &qword_100341D58);
  swift_allocError();
  unsigned char *v19 = 0;
  swift_willThrow();
  uint64_t v20 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v18, v20);
  swift_errorRelease();

LABEL_47:
  uint64_t v67 = *(uint64_t (**)(void))(v0 + 8);
  return v67();
}

unint64_t sub_100190504()
{
  unint64_t result = qword_100343890;
  if (!qword_100343890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100343890);
  }
  return result;
}

uint64_t sub_10019055C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000C5390(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001905B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_1001905C0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100190650(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  id v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *id v3 = *a2;
    id v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_100190708(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_100190734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100190784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1001907D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100190824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100190874(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_1001909D0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x100190BE8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        BOOL v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for DaemonActivity()
{
  return sub_100190D58();
}

uint64_t sub_100190C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

unsigned char *sub_100190C30(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100190CFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for DaemonActivity.DaemonActivityError()
{
  return sub_100190D58();
}

uint64_t sub_100190D3C()
{
  return swift_getWitnessTable();
}

uint64_t sub_100190D58()
{
  return swift_getGenericMetadata();
}

void sub_100190D98(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  *(void *)&long long v116 = (char *)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  id v115 = (char *)&v104 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v114 = (char *)&v104 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v121 = (char *)&v104 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v113 = (char *)&v104 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v110 = (char *)&v104 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v104 - v19;
  __chkstk_darwin(v18);
  unint64_t v22 = (char *)&v104 - v21;
  sub_1001D7700((uint64_t)&v104 - v21);
  id v23 = a2;
  swift_retain_n();
  os_log_type_t v24 = v23;
  os_log_type_t v25 = Logger.logObject.getter();
  int v26 = static os_log_type_t.default.getter();
  BOOL v27 = os_log_type_enabled(v25, (os_log_type_t)v26);
  uint64_t v112 = v4;
  uint64_t v117 = a1;
  id v122 = v24;
  uint64_t v123 = a2;
  unint64_t v120 = (unint64_t)v20;
  if (v27)
  {
    LODWORD(v111) = v26;
    uint64_t v118 = v5;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v119 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 138412546;
    if (a2)
    {
      id v29 = v122;
      unint64_t v126 = (unint64_t)v122;
      id v30 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      unint64_t v126 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v29 = v122;
    }
    *uint64_t v119 = a2;

    *(_WORD *)(v28 + 12) = 2112;
    uint64_t v31 = sub_1001D7910();
    id v32 = sub_1001D75D4();
    sub_10009EE78(&qword_1003415D8);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_100286230;
    *(void *)(v33 + 56) = sub_1000A0760(0, (unint64_t *)&qword_100342B90);
    *(void *)(v33 + 32) = v31;
    id v34 = v31;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v36 = [v32 currentPersistentHistoryTokenFromStores:isa];

    if (v36) {
      unint64_t v126 = (unint64_t)v36;
    }
    else {
      unint64_t v126 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v4 = v112;
    uint64_t v5 = v118;
    os_log_type_t v37 = v111;
    v119[1] = v36;
    a1 = v117;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v25, v37, "Beginning export to cloud, since local token:%@, current local token: %@", (uint8_t *)v28, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v20 = (char *)v120;
  }
  else
  {

    swift_release_n();
    os_log_type_t v25 = v24;
  }

  uint64_t v38 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v118 = v5 + 8;
  v38(v22, v4);
  id v39 = sub_1001D7640();
  __chkstk_darwin(v39);
  uint64_t v40 = (uint64_t)v123;
  *(&v104 - 2) = a1;
  *(&v104 - 1) = v40;
  sub_10009EE78((uint64_t *)&unk_1003439D0);
  uint64_t v41 = v124;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v41)
  {

    uint64_t v42 = (void *)_convertErrorToNSError(_:)();
    if ([v42 code] != (id)134301)
    {
      swift_willThrow();

      return;
    }
    uint64_t v43 = (char *)v116;
    sub_1001D7700(v116);
    unint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      unint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Hit NSPersistentHistoryTokenExpiredError while to retrieve transactions from the local store. Will process from start.", v46, 2u);
      swift_slowDealloc();
    }

    v38(v43, v4);
    uint64_t v47 = v117;
    id v48 = sub_1001D7640();
    __chkstk_darwin(v48);
    *(&v104 - 2) = v47;
    *(&v104 - 1) = 0;
    NSManagedObjectContext.performAndWait<A>(_:)();

    swift_errorRelease();
    uint64_t v124 = v38;
    unint64_t v49 = v126;
    uint64_t v20 = (char *)v120;
  }
  else
  {
    uint64_t v124 = v38;

    unint64_t v49 = v126;
  }
  sub_1001D7700((uint64_t)v20);
  id v50 = v122;
  swift_bridgeObjectRetain_n();
  id v51 = v50;
  uint64_t v52 = Logger.logObject.getter();
  uint64_t v53 = v20;
  unint64_t v54 = v49;
  int v55 = static os_log_type_t.default.getter();
  BOOL v56 = os_log_type_enabled(v52, (os_log_type_t)v55);
  unint64_t v109 = v49;
  if (v56)
  {
    LODWORD(v119) = v55;
    uint64_t v57 = swift_slowAlloc();
    uint64_t v58 = (void *)swift_slowAlloc();
    id v122 = (id)swift_slowAlloc();
    unint64_t v126 = (unint64_t)v122;
    *(_DWORD *)uint64_t v57 = 138412546;
    if (v123)
    {
      uint64_t v125 = (uint64_t)v51;
      id v59 = v51;
    }
    else
    {
      uint64_t v125 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v58 = v123;

    *(_WORD *)(v57 + 12) = 2080;
    sub_1000A0760(0, &qword_100343AA0);
    unint64_t v61 = v109;
    swift_bridgeObjectRetain();
    uint64_t v62 = Array.description.getter();
    unint64_t v64 = v63;
    swift_bridgeObjectRelease();
    uint64_t v125 = sub_1000A2E70(v62, v64, (uint64_t *)&v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    unint64_t v54 = v61;
    _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v119, "Changes found since local token:%@: %s", (uint8_t *)v57, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v4 = v112;
    v124((char *)v120, v112);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    v124(v53, v4);
  }
  if (v54 >> 62) {
    goto LABEL_68;
  }
  uint64_t v65 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v65)
  {
LABEL_25:
    unint64_t v66 = 0;
    unint64_t v111 = v54 & 0xC000000000000001;
    uint64_t v107 = v54 & 0xFFFFFFFFFFFFFF8;
    unint64_t v106 = v54 + 32;
    *(void *)&long long v60 = 138412290;
    long long v116 = v60;
    uint64_t v105 = v65;
    while (1)
    {
      if (v111)
      {
        id v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v66 >= *(void *)(v107 + 16)) {
          goto LABEL_67;
        }
        id v67 = *(id *)(v106 + 8 * v66);
      }
      char v68 = v67;
      if (__OFADD__(v66++, 1)) {
        goto LABEL_66;
      }
      id v70 = [v67 changes];
      uint64_t v71 = v68;
      if (v70) {
        break;
      }

LABEL_27:
      if (v66 == v65) {
        goto LABEL_69;
      }
    }
    os_log_type_t v72 = v70;
    uint64_t v123 = v71;
    sub_1000A0760(0, &qword_100342B98);
    unint64_t v73 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v74 = v73;
    if (!(v73 >> 62))
    {
      uint64_t v75 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v76 = v123;
      if (v75) {
        goto LABEL_36;
      }
      goto LABEL_64;
    }
    swift_bridgeObjectRetain();
    uint64_t v75 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v76 = v123;
    if (!v75)
    {
LABEL_64:

      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
LABEL_36:
    unint64_t v108 = v66;
    id v122 = (id)v74;
    uint64_t v119 = (void *)v75;
    unint64_t v120 = v74 & 0xC000000000000001;
    uint64_t v77 = 4;
    while (1)
    {
      if (v120) {
        id v80 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v80 = *((id *)v122 + v77);
      }
      uint64_t v81 = v80;
      unint64_t v54 = v77 - 3;
      if (__OFADD__(v77 - 4, 1))
      {
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        swift_bridgeObjectRetain();
        uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v65) {
          break;
        }
        goto LABEL_25;
      }
      id v82 = [v80 changeType];
      if (v82 == (id)2)
      {
        sub_1001D7700((uint64_t)v114);
        uint64_t v88 = v81;
        uint64_t v89 = Logger.logObject.getter();
        os_log_type_t v90 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v89, v90))
        {
          uint64_t v91 = swift_slowAlloc();
          unint64_t v92 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v91 = v116;
          *(void *)(v91 + 4) = v88;
          *unint64_t v92 = v88;

          _os_log_impl((void *)&_mh_execute_header, v89, v90, "Detected deleted local object in history: %@", (uint8_t *)v91, 0xCu);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v89 = v88;
        }
        uint64_t v79 = v123;

        v124(v114, v4);
        sub_100191DD0(v88);
      }
      else
      {
        if (v82 != (id)1)
        {
          if (v82)
          {
            sub_1001D7700((uint64_t)v115);
            uint64_t v93 = v81;
            uint64_t v78 = Logger.logObject.getter();
            os_log_type_t v94 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v78, v94))
            {
              uint64_t v95 = swift_slowAlloc();
              uint64_t v96 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v95 = v116;
              *(void *)(v95 + 4) = v93;
              *uint64_t v96 = v93;
              _os_log_impl((void *)&_mh_execute_header, v78, v94, "Unknown NSPersistentChangeHistory type detected %@", (uint8_t *)v95, 0xCu);
              sub_10009EE78(&qword_100342AB0);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              uint64_t v78 = v93;
            }
            uint64_t v79 = v123;

            v124(v115, v4);
            goto LABEL_39;
          }
          sub_1001D7700((uint64_t)v113);
          uint64_t v83 = v81;
          uint64_t v84 = Logger.logObject.getter();
          os_log_type_t v85 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v84, v85))
          {
            uint64_t v86 = swift_slowAlloc();
            uint64_t v87 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v86 = v116;
            *(void *)(v86 + 4) = v83;
            *uint64_t v87 = v83;
            _os_log_impl((void *)&_mh_execute_header, v84, v85, "Detected new local object in history: %@", (uint8_t *)v86, 0xCu);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            uint64_t v84 = v83;
          }

          uint64_t v4 = v112;
          v124(v113, v112);
        }
        sub_1001D7700((uint64_t)v121);
        uint64_t v88 = v81;
        uint64_t v97 = Logger.logObject.getter();
        os_log_type_t v98 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v97, v98))
        {
          uint64_t v99 = swift_slowAlloc();
          uint64_t v100 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v99 = v116;
          *(void *)(v99 + 4) = v88;
          *uint64_t v100 = v88;

          _os_log_impl((void *)&_mh_execute_header, v97, v98, "Detected updated local object in history: %@", (uint8_t *)v99, 0xCu);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v97 = v88;
        }
        uint64_t v79 = v123;

        v124(v121, v4);
        sub_100192630(v88);
      }

LABEL_39:
      ++v77;
      if ((void *)v54 == v119)
      {

        swift_bridgeObjectRelease();
        unint64_t v66 = v108;
        unint64_t v54 = v109;
        uint64_t v65 = v105;
        goto LABEL_27;
      }
    }
  }
LABEL_69:
  swift_bridgeObjectRelease();
  sub_1001D7700((uint64_t)v110);
  os_log_type_t v101 = Logger.logObject.getter();
  os_log_type_t v102 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v101, v102))
  {
    os_log_type_t v103 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v103 = 0;
    _os_log_impl((void *)&_mh_execute_header, v101, v102, "Ending export to cloud", v103, 2u);
    swift_slowDealloc();
  }

  v124(v110, v4);
}

uint64_t sub_100191DD0(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v72 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v61 - v7;
  id v9 = [a1 tombstone];
  if (!v9)
  {
    long long v70 = 0u;
    long long v71 = 0u;
LABEL_11:
    sub_1000D3920((uint64_t)&v70);
    goto LABEL_12;
  }
  uint64_t v10 = v9;
  uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v67 = v12;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v11 + 16) && (unint64_t v13 = sub_10010A0C0((uint64_t)&v68), (v14 & 1) != 0))
  {
    sub_1000A4F78(*(void *)(v11 + 56) + 32 * v13, (uint64_t)&v70);
  }
  else
  {
    long long v70 = 0u;
    long long v71 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000FD990((uint64_t)&v68);
  if (!*((void *)&v71 + 1)) {
    goto LABEL_11;
  }
  if (!swift_dynamicCast())
  {
LABEL_12:
    sub_1001D7700(v72);
    uint64_t v20 = a1;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      unint64_t v63 = (void *)swift_slowAlloc();
      uint64_t v65 = v1;
      *(_DWORD *)id v23 = 138412290;
      id v68 = v20;
      os_log_type_t v24 = v20;
      uint64_t v64 = v4;
      os_log_type_t v25 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v63 = v20;

      uint64_t v4 = v64;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Local change %@ does not contain uniqueIdentifier in the tombstone. No cloud activation associated with this local object.", v23, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v21 = v20;
    }

    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v72, v3);
  }
  uint64_t v16 = v68;
  unint64_t v15 = v69;
  uint64_t v17 = (void *)sub_100197ACC((uint64_t)v68, v69);
  uint64_t v65 = v1;
  if (v1) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v63 = v17;
  uint64_t v64 = v4;
  uint64_t v62 = v3;
  uint64_t v72 = v18;
  id v26 = [self serializableClassName];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  uint64_t v30 = v72;
  if ((void *)v27 == v63 && v29 == v72) {
    goto LABEL_18;
  }
  uint64_t v31 = v63;
  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v32) {
    goto LABEL_20;
  }
  id v33 = [self serializableClassName];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v61 = v35;

  if ((void *)v34 == v31 && v61 == v30) {
    goto LABEL_18;
  }
  char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v36) {
    goto LABEL_20;
  }
  id v37 = [self serializableClassName];
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v61 = v39;

  if ((void *)v38 == v31 && v61 == v30)
  {
LABEL_18:
    swift_bridgeObjectRelease();
LABEL_20:
    swift_bridgeObjectRelease();
    sub_100197DC0(v16, v15);
    return swift_bridgeObjectRelease();
  }
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v40) {
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  id v41 = [self serializableClassName];
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v44 = v43;

  if ((void *)v42 == v31 && v44 == v30) {
    return swift_bridgeObjectRelease_n();
  }
  os_log_type_t v45 = v31;
  char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v46) {
    return swift_bridgeObjectRelease();
  }
  id v47 = [self serializableClassName];
  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v50 = v49;

  if ((void *)v48 == v45 && v50 == v30) {
    return swift_bridgeObjectRelease_n();
  }
  char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v51) {
    return swift_bridgeObjectRelease();
  }
  id v52 = [self serializableClassName];
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;

  if ((void *)v53 == v45 && v55 == v72) {
    return swift_bridgeObjectRelease_n();
  }
  char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v56) {
    return swift_bridgeObjectRelease();
  }
  sub_1001D7700((uint64_t)v8);
  swift_bridgeObjectRetain();
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    id v59 = (uint8_t *)swift_slowAlloc();
    id v68 = (id)swift_slowAlloc();
    *(_DWORD *)id v59 = 136315138;
    unint64_t v60 = v72;
    swift_bridgeObjectRetain();
    *(void *)&long long v70 = sub_1000A2E70((uint64_t)v63, v60, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Class type in dictionary representation %s is not expected. Do not delete.", v59, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v64 + 8))(v8, v62);
  type metadata accessor for DataStore.DataStoreError(0);
  sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

void sub_100192630(void *a1)
{
  uint64_t v3 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v3);
  v158 = (char *)&v146 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v164 = v5;
  uint64_t v165 = v6;
  uint64_t v7 = __chkstk_darwin(v5);
  v151 = (char *)&v146 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  v152 = (char *)&v146 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v146 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  v160 = (uint8_t *)&v146 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v156 = (uint64_t)&v146 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v155 = (uint64_t)&v146 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v153 = (uint64_t)&v146 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v154 = (uint64_t)&v146 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v157 = (char *)&v146 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v159 = (char *)&v146 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v146 - v29;
  __chkstk_darwin(v28);
  char v32 = (char *)&v146 - v31;
  v163 = v1;
  id v33 = sub_1001D7640();
  p_Class isa = a1;
  id v34 = [a1 changedObjectID];
  *(void *)&v168[0] = 0;
  id v35 = [v33 existingObjectWithID:v34 error:v168];

  if (v35)
  {
    uint64_t v150 = v3;
    id v166 = v35;
    id v36 = *(id *)&v168[0];
    id v37 = v35;
    if ([v37 conformsToProtocol:&OBJC_PROTOCOL___STSyncableSubObject])
    {
      v167 = &OBJC_PROTOCOL___STSyncableSubObject;
      uint64_t v38 = (void (*)(char *, uint64_t))[(id)swift_dynamicCastObjCProtocolUnconditional() syncableRootObject];

      if (v38)
      {
        sub_1001D7700((uint64_t)v32);
        uint64_t v39 = p_isa;
        char v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v40, v41))
        {
          v149 = v38;
          uint64_t v42 = (uint8_t *)swift_slowAlloc();
          v147 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v42 = 138412290;
          *(void *)&v168[0] = v39;
          uint64_t v43 = v39;
          os_log_t v148 = v40;
          id v44 = v43;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v147 = v39;

          char v40 = v148;
          _os_log_impl((void *)&_mh_execute_header, v148, v41, "Found a change to a syncable sub-object for export: %@", v42, 0xCu);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        char v56 = *(void (**)(char *, uint64_t))(v165 + 8);
        v56(v32, v164);

        self;
        uint64_t v57 = (void *)swift_dynamicCastObjCClassUnconditional();
        id v166 = v57;
        swift_unknownObjectRetain_n();
        sub_1001D7700((uint64_t)v30);
        swift_unknownObjectRetain();
        os_log_type_t v58 = Logger.logObject.getter();
        os_log_type_t v59 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v58, v59))
        {
          v149 = v56;
          unint64_t v60 = (uint8_t *)swift_slowAlloc();
          os_log_t v148 = (os_log_t)swift_slowAlloc();
          *(_DWORD *)unint64_t v60 = 138412290;
          *(void *)&v168[0] = v57;
          swift_unknownObjectRetain();
          char v56 = v149;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v148->Class isa = (Class)v57;
          swift_unknownObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v58, v59, "Found the parent object. Will export: %@", v60, 0xCu);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_unknownObjectRelease();
        }
        else
        {

          swift_unknownObjectRelease_n();
        }
        v56(v30, v164);
      }
    }
    else
    {
    }
    swift_beginAccess();
    id v61 = v166;
    id v62 = [v166 entity];
    id v63 = [v62 userInfo];

    if (!v63
      || (uint64_t v64 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(),
          v63,
          unint64_t v65 = sub_1001D61E8(v64),
          swift_bridgeObjectRelease(),
          !v65))
    {
      long long v71 = (char *)v160;
      sub_1001D7700((uint64_t)v160);
      uint64_t v72 = p_isa;
      unint64_t v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v75 = (uint8_t *)swift_slowAlloc();
        uint64_t v76 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v75 = 138412290;
        *(void *)&v168[0] = v72;
        uint64_t v77 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v76 = v72;

        _os_log_impl((void *)&_mh_execute_header, v73, v74, "The coredata entity referenced by %@ does not have userInfo. Skipping export.", v75, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint8_t *, uint64_t))(v165 + 8))(v160, v164);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v165 + 8))(v71, v164);
      }
      goto LABEL_64;
    }
    if (*(void *)(v65 + 16) && (uint64_t v66 = sub_10010A024(0x726F7272694D7369, 0xEA00000000006465), (v67 & 1) != 0))
    {
      id v68 = (uint64_t *)(*(void *)(v65 + 56) + 16 * v66);
      uint64_t v70 = *v68;
      uint64_t v69 = v68[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v69)
      {
        if (v70 == 5457241 && v69 == 0xE300000000000000)
        {
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
        char v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v85)
        {
LABEL_33:
          id v86 = v61;
          uint64_t v87 = v161;
          unsigned __int8 v88 = sub_100198D84((uint64_t)v86);
          if (v87)
          {

            return;
          }
          unsigned __int8 v89 = v88;

          if (v89)
          {
            v170 = &OBJC_PROTOCOL___STSerializableManagedObject;
            uint64_t v90 = swift_dynamicCastObjCProtocolConditional();
            if (!v90)
            {
              uint64_t v100 = v156;
              sub_1001D7700(v156);
              os_log_type_t v101 = p_isa;
              os_log_type_t v102 = Logger.logObject.getter();
              os_log_type_t v103 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v102, v103))
              {
                uint64_t v104 = (uint8_t *)swift_slowAlloc();
                uint64_t v105 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v104 = 138412290;
                *(void *)&v168[0] = v101;
                unint64_t v106 = v101;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *uint64_t v105 = v101;

                uint64_t v100 = v156;
                _os_log_impl((void *)&_mh_execute_header, v102, v103, "The coredata entity referenced by %@ does not support STSerializableManagedObject. Skipping export.", v104, 0xCu);
                sub_10009EE78(&qword_100342AB0);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                os_log_type_t v102 = v101;
              }

              (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v100, v164);
              sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
              swift_allocError();
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              goto LABEL_64;
            }
            uint64_t v91 = (char *)v90;
            self;
            unint64_t v92 = (void *)swift_dynamicCastObjCClass();
            uint64_t v93 = (uint8_t *)v86;
            if (!v92)
            {
              v163 = v93;
              uint64_t v107 = v155;
              sub_1001D7700(v155);
              unint64_t v108 = p_isa;
              unint64_t v109 = Logger.logObject.getter();
              os_log_type_t v110 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v109, v110))
              {
                unint64_t v111 = (uint8_t *)swift_slowAlloc();
                uint64_t v112 = (void *)swift_slowAlloc();
                *(_DWORD *)unint64_t v111 = 138412290;
                *(void *)&v168[0] = v108;
                uint64_t v113 = v108;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *uint64_t v112 = v108;

                _os_log_impl((void *)&_mh_execute_header, v109, v110, "The coredata entity referenced by %@ does not support STUniquedManagedObject. Skipping export.", v111, 0xCu);
                sub_10009EE78(&qword_100342AB0);
                swift_arrayDestroy();
                swift_slowDealloc();
                uint64_t v107 = v155;
                swift_slowDealloc();
              }
              else
              {

                unint64_t v109 = v108;
              }

              (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v107, v164);
              sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
              swift_allocError();
              swift_storeEnumTagMultiPayload();
              swift_willThrow();

              goto LABEL_64;
            }
            v160 = v93;
            id v94 = [v92 uniqueIdentifier];
            v159 = v91;
            if (v94)
            {

              id v95 = [v92 uniqueIdentifier];
              if (!v95)
              {
                __break(1u);
                goto LABEL_41;
              }
            }
            else
            {
              id v95 = [v92 computeUniqueIdentifier];
            }
            uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v116 = v115;

            uint64_t v117 = (void *)sub_10019A2FC(v114, v116);
            swift_bridgeObjectRelease();
            id v118 = v117;
            sub_1001D7700(v154);
            uint64_t v119 = p_isa;
            unint64_t v120 = v118;
            uint64_t v121 = Logger.logObject.getter();
            os_log_type_t v122 = static os_log_type_t.default.getter();
            int v123 = v122;
            BOOL v124 = os_log_type_enabled(v121, v122);
            p_Class isa = &v120->isa;
            if (v124)
            {
              uint64_t v125 = swift_slowAlloc();
              uint64_t v161 = 0;
              uint64_t v126 = v125;
              uint64_t v127 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v126 = 138412546;
              uint64_t v156 = v126 + 4;
              *(void *)&v168[0] = v120;
              v157 = (char *)v168 + 8;
              uint64_t v128 = v120;
              LODWORD(v158) = v123;
              uint64_t v129 = v128;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v127 = v120;

              *(_WORD *)(v126 + 12) = 2112;
              *(void *)&v168[0] = v119;
              id v130 = v119;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              v127[1] = v119;

              _os_log_impl((void *)&_mh_execute_header, v121, (os_log_type_t)v158, "Found existing activation object: %@ for %@.", (uint8_t *)v126, 0x16u);
              sub_10009EE78(&qword_100342AB0);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              uint64_t v121 = v120;
            }

            uint64_t v131 = *(uint8_t **)(v165 + 8);
            ((void (*)(uint64_t, uint64_t))v131)(v154, v164);
            id v132 = [v159 dictionaryRepresentation];
            uint64_t v133 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            unint64_t v134 = sub_1001D5E14(v133);
            swift_bridgeObjectRelease();
            if (v134)
            {
              unint64_t v169 = v134;
              self;
              uint64_t v135 = swift_dynamicCastObjCClass();
              id v136 = p_isa;
              if (v135)
              {
                sub_1000F83E4(0x656C6C6174736E69, 0xED00007370704164, v168);
                sub_1000D3920((uint64_t)v168);
                unint64_t v134 = v169;
              }
              sub_10019D15C(v136, v134);

              v137 = v160;
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v138 = v153;
              sub_1001D7700(v153);
              v139 = v166;
              v140 = Logger.logObject.getter();
              os_log_type_t v141 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v140, v141))
              {
                v142 = (uint8_t *)swift_slowAlloc();
                v143 = (void *)swift_slowAlloc();
                v163 = v131;
                *(_DWORD *)v142 = 138412290;
                *(void *)&v168[0] = v139;
                v144 = v139;
                uint64_t v131 = v163;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                void *v143 = v139;

                _os_log_impl((void *)&_mh_execute_header, v140, v141, "The serializable object %@ did not return a valid dictionary representation.", v142, 0xCu);
                sub_10009EE78(&qword_100342AB0);
                swift_arrayDestroy();
                swift_slowDealloc();
                uint64_t v138 = v153;
                swift_slowDealloc();
              }
              else
              {

                v140 = v139;
              }

              ((void (*)(uint64_t, uint64_t))v131)(v138, v164);
              sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
              swift_allocError();
              swift_storeEnumTagMultiPayload();
              swift_willThrow();

              v145 = v160;
            }
            goto LABEL_64;
          }
LABEL_41:
          uint64_t v161 = 0;
          uint64_t v78 = v157;
          sub_1001D7700((uint64_t)v157);
          uint64_t v79 = p_isa;
          id v80 = Logger.logObject.getter();
          os_log_type_t v96 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v80, v96))
          {
            uint64_t v97 = (uint8_t *)swift_slowAlloc();
            os_log_type_t v98 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v97 = 138412290;
            *(void *)&v168[0] = v79;
            uint64_t v99 = v79;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *os_log_type_t v98 = v79;

            _os_log_impl((void *)&_mh_execute_header, v80, v96, "The coredata entity referenced by %@ should not be synced to cloud. Skipping export.", v97, 0xCu);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v165 + 8))(v157, v164);
            goto LABEL_64;
          }
          goto LABEL_43;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v78 = v159;
    sub_1001D7700((uint64_t)v159);
    uint64_t v79 = p_isa;
    id v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v80, v81))
    {
      id v82 = (uint8_t *)swift_slowAlloc();
      uint64_t v83 = (void *)swift_slowAlloc();
      *(_DWORD *)id v82 = 138412290;
      *(void *)&v168[0] = v79;
      uint64_t v84 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v83 = v79;

      _os_log_impl((void *)&_mh_execute_header, v80, v81, "The coredata entity referenced by %@ should not be mirrored. Skipping export.", v82, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v165 + 8))(v159, v164);
LABEL_64:

      return;
    }
LABEL_43:

    (*(void (**)(char *, uint64_t))(v165 + 8))(v78, v164);
    goto LABEL_64;
  }
  id v45 = *(id *)&v168[0];
  _convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t v46 = type metadata accessor for CocoaError.Code();
  uint64_t v47 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v49 = (char *)&v146 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_errorRetain();
  static CocoaError.managedObjectReferentialIntegrity.getter();
  sub_10019D0C8();
  char v50 = static _ErrorCodeProtocol.~= infix(_:_:)();
  swift_errorRelease();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v46);
  if (v50)
  {
    swift_errorRelease();
    sub_1001D7700((uint64_t)v13);
    char v51 = p_isa;
    id v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      p_Class isa = (void *)swift_slowAlloc();
      v163 = v54;
      *(_DWORD *)uint64_t v54 = 138412290;
      *(void *)&v168[0] = v51;
      uint64_t v55 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *p_Class isa = v51;

      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Local object for change: %@ no longer exists. Skipping update.", v163, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v52 = v51;
    }

    (*(void (**)(char *, uint64_t))(v165 + 8))(v13, v164);
  }
}

void sub_1001941F0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v22 = (uint64_t)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - v9;
  sub_1001D7700((uint64_t)&v21 - v9);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Beginning import from cloud store", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v10, v5);
  id v15 = sub_1001D7640();
  __chkstk_darwin(v15);
  *((unsigned char *)&v21 - 32) = 1;
  *(&v21 - 3) = a1;
  *(&v21 - 2) = a2;
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (!v2)
  {
    id v16 = sub_1001D7640();
    __chkstk_darwin(v16);
    *((unsigned char *)&v21 - 32) = 0;
    *(&v21 - 3) = a1;
    *(&v21 - 2) = a2;
    NSManagedObjectContext.performAndWait<A>(_:)();

    uint64_t v17 = v22;
    sub_1001D7700(v22);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Ending import from cloud store", v20, 2u);
      swift_slowDealloc();
    }

    v14((char *)v17, v5);
  }
}

void sub_1001944E4(int a1, unint64_t a2, unint64_t a3)
{
  uint64_t v101 = type metadata accessor for Logger();
  unint64_t v6 = *(void *)(v101 - 8);
  uint64_t v7 = __chkstk_darwin(v101);
  unint64_t v106 = (unint64_t)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v100 = (uint64_t)&v89 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v96 = (uint64_t)&v89 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v99 = (uint64_t)&v89 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v107 = (uint64_t)&v89 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v98 = (uint64_t)&v89 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v89 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v89 - v22;
  int v102 = a1;
  if (a1)
  {
    sub_1001D7700((uint64_t)&v89 - v22);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "First pass import from cloud store", v26, 2u);
      swift_slowDealloc();
    }

    unint64_t v27 = v6;
    uint64_t v28 = *(void (**)(void, void))(v6 + 8);
    uint64_t v29 = v23;
  }
  else
  {
    sub_1001D7700((uint64_t)v21);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      char v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Second pass import from cloud store", v32, 2u);
      swift_slowDealloc();
    }

    unint64_t v27 = v6;
    uint64_t v28 = *(void (**)(void, void))(v6 + 8);
    uint64_t v29 = v21;
  }
  id v33 = v28;
  v28(v29, v101);
  id v34 = sub_1001D7640();
  __chkstk_darwin(v34);
  *(&v89 - 2) = a2;
  *(&v89 - 1) = a3;
  sub_10009EE78((uint64_t *)&unk_1003439D0);
  unint64_t v35 = v109;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v35)
  {

    id v36 = (void *)_convertErrorToNSError(_:)();
    if ([v36 code] != (id)134301)
    {
      swift_willThrow();

      return;
    }
    unint64_t v108 = v35;
    unint64_t v37 = v106;
    sub_1001D7700(v106);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      char v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Hit NSPersistentHistoryTokenExpiredError while attempting to retrieve transactions from the cloudStore. Will process from start.", v40, 2u);
      swift_slowDealloc();
    }

    unint64_t v41 = v27;
    uint64_t v42 = v33;
    v33(v37, v101);
    id v43 = sub_1001D7640();
    __chkstk_darwin(v43);
    *(&v89 - 2) = a2;
    *(&v89 - 1) = 0;
    NSManagedObjectContext.performAndWait<A>(_:)();

    swift_errorRelease();
    unint64_t v27 = v41;
    unint64_t v45 = v110;
    unint64_t v108 = 0;
  }
  else
  {
    unint64_t v108 = 0;

    unint64_t v45 = v110;
    uint64_t v42 = v33;
  }
  uint64_t v46 = v101;
  unint64_t v47 = v27;
  if (v45 >> 62) {
    goto LABEL_68;
  }
  uint64_t v48 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v48)
  {
LABEL_17:
    unint64_t v49 = 0;
    unint64_t v94 = v45 & 0xC000000000000001;
    uint64_t v90 = v45 & 0xFFFFFFFFFFFFFF8;
    unint64_t v89 = v45 + 32;
    unint64_t v109 = v47 + 8;
    *(void *)&long long v44 = 138412290;
    long long v97 = v44;
    uint64_t v92 = v48;
    unint64_t v93 = a2;
    unint64_t v91 = v45;
    while (1)
    {
      if (v94)
      {
        id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v49 >= *(void *)(v90 + 16)) {
          goto LABEL_67;
        }
        id v50 = *(id *)(v89 + 8 * v49);
      }
      char v51 = v50;
      BOOL v52 = __OFADD__(v49, 1);
      unint64_t v53 = v49 + 1;
      if (v52) {
        goto LABEL_66;
      }
      unint64_t v95 = v53;
      id v54 = [v50 changes];
      if (v54) {
        break;
      }

LABEL_19:
      unint64_t v49 = v95;
      if (v95 == v92) {
        goto LABEL_69;
      }
    }
    uint64_t v55 = v54;
    sub_1000A0760(0, &qword_100342B98);
    unint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v56 >> 62))
    {
      uint64_t v57 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v57) {
        goto LABEL_28;
      }
      goto LABEL_63;
    }
    swift_bridgeObjectRetain();
    uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v57)
    {
LABEL_63:

      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
LABEL_28:
    id v105 = v51;
    unint64_t v106 = v56 & 0xC000000000000001;
    unint64_t v45 = 4;
    uint64_t v103 = v57;
    unint64_t v104 = v56;
    while (1)
    {
      if (v106) {
        id v61 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v61 = *(id *)(v56 + 8 * v45);
      }
      id v62 = v61;
      unint64_t v47 = v45 - 3;
      if (__OFADD__(v45 - 4, 1))
      {
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        swift_bridgeObjectRetain();
        uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v48) {
          break;
        }
        goto LABEL_17;
      }
      id v63 = [v61 changeType];
      if (v63 == (id)2)
      {
        uint64_t v70 = v42;
        sub_1001D7700(v99);
        long long v71 = v62;
        uint64_t v72 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v72, v73))
        {
          uint64_t v74 = swift_slowAlloc();
          uint64_t v75 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v74 = v97;
          *(void *)(v74 + 4) = v71;
          *uint64_t v75 = v71;

          _os_log_impl((void *)&_mh_execute_header, v72, v73, "Detected deleted cloud object in history: %@", (uint8_t *)v74, 0xCu);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          uint64_t v46 = v101;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v72 = v71;
        }

        uint64_t v42 = v70;
        v70(v99, v46);
        if (v102)
        {
          unint64_t v84 = v108;
          sub_1001950E8(v71);
          unint64_t v108 = v84;
          if (v84) {
            goto LABEL_64;
          }
          goto LABEL_52;
        }
        sub_1001D7700(v96);
        char v85 = Logger.logObject.getter();
        os_log_type_t v86 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v85, v86))
        {
          uint64_t v87 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v87 = 0;
          _os_log_impl((void *)&_mh_execute_header, v85, v86, "Skipping local object deletes during second pass.", v87, 2u);
          uint64_t v42 = v70;
          swift_slowDealloc();
          unsigned __int8 v88 = v71;
        }
        else
        {
          unsigned __int8 v88 = v85;
          char v85 = v71;
        }

        uint64_t v60 = v96;
      }
      else
      {
        if (v63 == (id)1) {
          goto LABEL_48;
        }
        if (!v63)
        {
          uint64_t v64 = v42;
          sub_1001D7700(v98);
          unint64_t v65 = v62;
          uint64_t v66 = Logger.logObject.getter();
          os_log_type_t v67 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v66, v67))
          {
            uint64_t v68 = swift_slowAlloc();
            uint64_t v69 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v68 = v97;
            *(void *)(v68 + 4) = v65;
            void *v69 = v65;
            _os_log_impl((void *)&_mh_execute_header, v66, v67, "Detected new cloud object in history: %@", (uint8_t *)v68, 0xCu);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            uint64_t v46 = v101;
            swift_slowDealloc();
            a2 = v93;
            swift_slowDealloc();
          }
          else
          {

            uint64_t v66 = v65;
          }

          uint64_t v42 = v64;
          v64(v98, v46);
LABEL_48:
          uint64_t v78 = v42;
          sub_1001D7700(v107);
          long long v71 = v62;
          uint64_t v79 = Logger.logObject.getter();
          os_log_type_t v80 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v79, v80))
          {
            uint64_t v81 = swift_slowAlloc();
            id v82 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v81 = v97;
            *(void *)(v81 + 4) = v71;
            *id v82 = v71;

            _os_log_impl((void *)&_mh_execute_header, v79, v80, "Detected updated cloud object in history: %@", (uint8_t *)v81, 0xCu);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            uint64_t v46 = v101;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            uint64_t v79 = v71;
          }

          uint64_t v42 = v78;
          v78(v107, v46);
          unint64_t v83 = v108;
          sub_1001958A0(v71, v102 & 1);
          unint64_t v108 = v83;
          if (v83)
          {
LABEL_64:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            return;
          }
LABEL_52:

          goto LABEL_32;
        }
        sub_1001D7700(v100);
        uint64_t v76 = Logger.logObject.getter();
        os_log_type_t v77 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v76, v77))
        {
          os_log_type_t v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v58 = 0;
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "Unknown NSPersistentChangeHistory type detected", v58, 2u);
          swift_slowDealloc();
          os_log_type_t v59 = v62;
        }
        else
        {
          os_log_type_t v59 = v76;
          uint64_t v76 = v62;
        }

        uint64_t v60 = v100;
      }
      v42(v60, v46);
LABEL_32:
      unint64_t v56 = v104;
      ++v45;
      if (v47 == v103)
      {

        swift_bridgeObjectRelease();
        unint64_t v45 = v91;
        goto LABEL_19;
      }
    }
  }
LABEL_69:
  swift_bridgeObjectRelease();
}

uint64_t sub_1001950E8(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v69 = (uint64_t)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v58 - v7;
  id v9 = [a1 tombstone];
  if (!v9)
  {
    long long v67 = 0u;
    long long v68 = 0u;
LABEL_13:
    sub_1000D3920((uint64_t)&v67);
    goto LABEL_14;
  }
  uint64_t v10 = v9;
  uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v64 = v12;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v11 + 16) && (unint64_t v13 = sub_10010A0C0((uint64_t)&v65), (v14 & 1) != 0))
  {
    sub_1000A4F78(*(void *)(v11 + 56) + 32 * v13, (uint64_t)&v67);
  }
  else
  {
    long long v67 = 0u;
    long long v68 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000FD990((uint64_t)&v65);
  if (!*((void *)&v68 + 1)) {
    goto LABEL_13;
  }
  if (!swift_dynamicCast())
  {
LABEL_14:
    uint64_t v24 = v69;
    sub_1001D7700(v69);
    os_log_type_t v25 = a1;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = (void *)swift_slowAlloc();
      uint64_t v62 = v4;
      *(_DWORD *)uint64_t v28 = 138412290;
      uint64_t v65 = (uint64_t)v25;
      uint64_t v29 = v25;
      uint64_t v61 = v3;
      uint64_t v30 = v29;
      uint64_t v24 = v69;
      uint64_t v4 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v60 = v25;

      uint64_t v3 = v61;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Cloud change %@ does not contain uniqueIdentifier in the tombstone. The delete change in the cloud will be ignored.", v28, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v26 = v25;
    }

    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v24, v3);
  }
  uint64_t v62 = v4;
  uint64_t v16 = v65;
  unint64_t v15 = v66;
  uint64_t v17 = sub_100197ACC(v65, v66);
  if (v1) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v60 = 0;
  uint64_t v61 = v3;
  unint64_t v19 = v18;
  uint64_t v69 = v17;
  id v20 = [self serializableClassName];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  if (v21 == v69 && v23 == v19)
  {
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    sub_10019A810(v16, v15);
    return swift_bridgeObjectRelease();
  }
  uint64_t v32 = v69;
  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v33) {
    goto LABEL_19;
  }
  id v34 = [self serializableClassName];
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v59 = v36;

  if (v35 == v32 && v59 == v19)
  {
    swift_bridgeObjectRelease();
LABEL_25:
    swift_bridgeObjectRelease();
    sub_10019B404(v16, v15);
    return swift_bridgeObjectRelease();
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v37) {
    goto LABEL_25;
  }
  id v38 = [self serializableClassName];
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v59 = v40;

  if (v39 == v32 && v59 == v19)
  {
    swift_bridgeObjectRelease();
LABEL_30:
    swift_bridgeObjectRelease();
    sub_10019BA0C(v16, v15);
    return swift_bridgeObjectRelease();
  }
  unint64_t v41 = v19;
  char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v42) {
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
  id v43 = [self serializableClassName];
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v69;
  uint64_t v47 = v46;

  if (v44 == v45 && v47 == v41) {
    return swift_bridgeObjectRelease_n();
  }
  unint64_t v48 = v41;
  char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v49) {
    return swift_bridgeObjectRelease();
  }
  id v50 = [self serializableClassName];
  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v53 = v52;

  if (v51 == v45 && v53 == v48) {
    return swift_bridgeObjectRelease_n();
  }
  char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v54) {
    return swift_bridgeObjectRelease();
  }
  sub_1001D7700((uint64_t)v8);
  swift_bridgeObjectRetain();
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    *(_DWORD *)uint64_t v57 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&long long v67 = sub_1000A2E70(v69, v48, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Class type in deletion of dictionary representation %s is not expected. Ignore the deletion.", v57, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v8, v61);
}

void sub_1001958A0(void *a1, int a2)
{
  LODWORD(v232) = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v234 = *(void (***)(char *, uint64_t))(v5 - 8);
  uint64_t v235 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v228 = (uint64_t)&v218 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v218 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  unint64_t v13 = (char *)&v218 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v218 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  v229 = (char *)&v218 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v223 = (uint64_t)&v218 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v224 = (uint64_t)&v218 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v222 = (uint64_t)&v218 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v225 = (char *)&v218 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v226 = (char *)&v218 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v227 = (char *)&v218 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v230 = (char *)&v218 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  v231 = (uint8_t *)&v218 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  char v37 = (char *)&v218 - v36;
  __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v218 - v38;
  v236 = v2;
  id v40 = sub_1001D7640();
  v233 = a1;
  id v41 = [a1 changedObjectID];
  *(void *)&long long v241 = 0;
  id v42 = [v40 existingObjectWithID:v41 error:&v241];

  id v43 = (void *)v241;
  if (v42)
  {
    self;
    uint64_t v44 = (void *)swift_dynamicCastObjCClassUnconditional();
    id v45 = v42;
    id v46 = v43;
    v221 = v44;
    id v47 = [v44 dictionaryRepresentation];
    uint64_t v48 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v49 = sub_1001D5E14(v48);
    swift_bridgeObjectRelease();
    if (v49)
    {
      id v220 = v45;
      unint64_t v238 = v49;
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v49 + 16))
      {
        uint64_t v52 = sub_10010A024(v50, v51);
        uint64_t v53 = v3;
        if (v54)
        {
          sub_1000A4F78(*(void *)(v49 + 56) + 32 * v52, (uint64_t)&v241);
        }
        else
        {
          long long v241 = 0u;
          long long v242 = 0u;
        }
      }
      else
      {
        long long v241 = 0u;
        long long v242 = 0u;
        uint64_t v53 = v3;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v242 + 1))
      {
        if (swift_dynamicCast())
        {
          long long v71 = v240[0];
          uint64_t v72 = self;
          id v73 = [v72 serializableClassName];
          uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v76 = v75;

          uint64_t v219 = v53;
          if (v71 == __PAIR128__(v76, v74))
          {
            unint64_t v77 = *((void *)&v71 + 1);
            swift_bridgeObjectRelease();
            char v78 = v232;
            if ((v232 & 1) == 0) {
              goto LABEL_34;
            }
          }
          else
          {
            unint64_t v77 = *((void *)&v71 + 1);
            char v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            char v78 = v232;
            if ((v89 & 1) == 0 || (v232 & 1) == 0)
            {
LABEL_34:
              id v94 = [v72 serializableClassName];
              uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v97 = v96;

              if ((void)v71 == v95 && v77 == v97)
              {
                unint64_t v98 = v77;
                swift_bridgeObjectRelease();
              }
              else
              {
                unint64_t v98 = v77;
                char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v99 & 1) == 0 && (v78 & 1) == 0)
                {
                  id v100 = v220;

                  sub_1001D7700((uint64_t)v37);
                  swift_bridgeObjectRetain();
                  uint64_t v101 = Logger.logObject.getter();
                  os_log_type_t v102 = static os_log_type_t.default.getter();
                  if (os_log_type_enabled(v101, v102))
                  {
                    uint64_t v103 = (uint8_t *)swift_slowAlloc();
                    *(void *)&long long v241 = swift_slowAlloc();
                    *(_DWORD *)uint64_t v103 = 136315138;
                    swift_bridgeObjectRetain();
                    *(void *)&v240[0] = sub_1000A2E70(v71, v77, (uint64_t *)&v241);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease_n();
                    _os_log_impl((void *)&_mh_execute_header, v101, v102, "Found %s on second pass. Skipping.", v103, 0xCu);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();
                  }
                  else
                  {

                    swift_bridgeObjectRelease_n();
                  }
                  v234[1](v37, v235);
                  goto LABEL_33;
                }
              }
              uint64_t v104 = sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
              v105.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
              *((void *)&v242 + 1) = v104;
              *(NSNumber *)&long long v241 = v105;
              sub_1000B8B44(&v241, v240);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v107 = v238;
              unint64_t v238 = 0x8000000000000000;
              uint64_t v239 = v107;
              sub_1001AE914(v240, 0x756F6C436D6F7266, 0xE900000000000064, isUniquelyReferenced_nonNull_native);
              unint64_t v238 = v239;
              swift_bridgeObjectRelease();
              uint64_t v108 = swift_bridgeObjectRetain();
              uint64_t v109 = v219;
              char v110 = sub_10019C3D4(v108);
              if (v109)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                id v111 = v220;

                swift_bridgeObjectRelease();
                return;
              }
              char v112 = v110;
              swift_bridgeObjectRelease();
              if ((v112 & 1) == 0)
              {
                swift_bridgeObjectRelease();
                unint64_t v120 = v229;
                sub_1001D7700((uint64_t)v229);
                uint64_t v121 = Logger.logObject.getter();
                os_log_type_t v122 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v121, v122))
                {
                  int v123 = (uint8_t *)swift_slowAlloc();
                  *(void *)&v240[0] = swift_slowAlloc();
                  *(_DWORD *)int v123 = 136315138;
                  v233 = v123 + 4;
                  swift_beginAccess();
                  swift_bridgeObjectRetain();
                  uint64_t v219 = 0;
                  uint64_t v124 = Dictionary.description.getter();
                  unint64_t v126 = v125;
                  swift_bridgeObjectRelease();
                  uint64_t v239 = sub_1000A2E70(v124, v126, (uint64_t *)v240);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v121, v122, "Cloud activation for:\n %s \n should not be in CloudKit. Deleting it.", v123, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  v234[1](v229, v235);
                }
                else
                {

                  v234[1](v120, v235);
                }
                goto LABEL_54;
              }
              uint64_t v232 = v98;
              sub_1001D7700((uint64_t)v231);
              uint64_t v113 = v233;
              uint64_t v114 = Logger.logObject.getter();
              os_log_type_t v115 = static os_log_type_t.default.getter();
              BOOL v116 = os_log_type_enabled(v114, v115);
              uint64_t v219 = 0;
              v229 = (char *)v113;
              uint64_t v218 = v71;
              if (v116)
              {
                uint64_t v117 = (uint8_t *)swift_slowAlloc();
                id v118 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v117 = 138412290;
                *(void *)&long long v241 = v113;
                uint64_t v119 = v113;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *id v118 = v113;

                _os_log_impl((void *)&_mh_execute_header, v114, v115, "Updating local object with change %@.", v117, 0xCu);
                sub_10009EE78(&qword_100342AB0);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                uint64_t v114 = v113;
              }
              uint64_t v128 = v234;
              uint64_t v127 = v235;
              uint64_t v129 = (uint64_t)v230;

              id v132 = v128[1];
              uint64_t v131 = v128 + 1;
              id v130 = v132;
              v132((char *)v231, v127);
              sub_1001D7700(v129);
              uint64_t v133 = Logger.logObject.getter();
              os_log_type_t v134 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v133, v134))
              {
                uint64_t v135 = (uint8_t *)swift_slowAlloc();
                *(void *)&long long v241 = swift_slowAlloc();
                *(_DWORD *)uint64_t v135 = 136315138;
                v231 = v135 + 4;
                swift_beginAccess();
                swift_bridgeObjectRetain();
                v234 = (void (**)(char *, uint64_t))((char *)&type metadata for Any + 8);
                uint64_t v136 = Dictionary.description.getter();
                v233 = v130;
                unint64_t v138 = v137;
                swift_bridgeObjectRelease();
                *(void *)&v240[0] = sub_1000A2E70(v136, v138, (uint64_t *)&v241);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                id v130 = (void (*)(char *, uint64_t))v233;
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v133, v134, "Incoming: %s", v135, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                v130(v230, v235);
              }
              else
              {

                v130((char *)v129, v127);
              }
              uint64_t v140 = v219;
              uint64_t v141 = 0xEC0000006E6F6974;
              uint64_t v142 = 0x617A696E6167726FLL;
              id v143 = [self serializableClassName];
              uint64_t v144 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v146 = v145;

              if (v218 == v144 && v232 == v146)
              {
                uint64_t v147 = v235;
              }
              else
              {
                char v148 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                uint64_t v147 = v235;
                if (v148) {
                  goto LABEL_64;
                }
                uint64_t v142 = 0xD000000000000012;
                id v149 = [self serializableClassName];
                uint64_t v150 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v152 = v151;

                uint64_t v141 = 0x8000000100293660;
                if (v218 != v150 || v232 != v152)
                {
                  char v160 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((v160 & 1) == 0)
                  {
                    uint64_t v161 = (uint64_t)v226;
                    sub_1001D7700((uint64_t)v226);
                    unint64_t v162 = v232;
                    swift_bridgeObjectRetain();
                    v163 = Logger.logObject.getter();
                    os_log_type_t v164 = static os_log_type_t.default.getter();
                    if (os_log_type_enabled(v163, v164))
                    {
                      v233 = v130;
                      uint64_t v165 = (uint8_t *)swift_slowAlloc();
                      *(void *)&long long v241 = swift_slowAlloc();
                      *(_DWORD *)uint64_t v165 = 136315138;
                      swift_bridgeObjectRetain();
                      *(void *)&v240[0] = sub_1000A2E70(v218, v162, (uint64_t *)&v241);
                      id v130 = (void (*)(char *, uint64_t))v233;
                      uint64_t v147 = v235;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease_n();
                      _os_log_impl((void *)&_mh_execute_header, v163, v164, "Updating local object of type %s", v165, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();

                      v130(v226, v147);
                    }
                    else
                    {

                      swift_bridgeObjectRelease_n();
                      v130((char *)v161, v147);
                    }
                    goto LABEL_86;
                  }
LABEL_64:
                  swift_beginAccess();
                  unint64_t v153 = v238;
                  if (*(void *)(v238 + 16))
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v154 = sub_10010A024(v142, v141);
                    if (v155)
                    {
                      sub_1000A4F78(*(void *)(v153 + 56) + 32 * v154, (uint64_t)&v241);
                    }
                    else
                    {
                      long long v241 = 0u;
                      long long v242 = 0u;
                    }
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    long long v241 = 0u;
                    long long v242 = 0u;
                  }
                  swift_endAccess();
                  if (*((void *)&v242 + 1))
                  {
                    if (swift_dynamicCast())
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      long long v156 = v240[0];
                      if (v240[0] != __PAIR128__(0x8000000100293680, 0xD000000000000014)
                        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                      {

                        uint64_t v166 = (uint64_t)v227;
                        sub_1001D7700((uint64_t)v227);
                        swift_bridgeObjectRetain();
                        v167 = Logger.logObject.getter();
                        os_log_type_t v168 = static os_log_type_t.error.getter();
                        int v169 = v168;
                        if (os_log_type_enabled(v167, v168))
                        {
                          uint64_t v170 = swift_slowAlloc();
                          LODWORD(v236) = v169;
                          uint64_t v171 = v170;
                          v233 = (void *)swift_slowAlloc();
                          *(void *)&long long v241 = v233;
                          *(_DWORD *)uint64_t v171 = 136315394;
                          v234 = v131;
                          swift_bridgeObjectRetain();
                          *(void *)&v240[0] = sub_1000A2E70(v156, *((unint64_t *)&v156 + 1), (uint64_t *)&v241);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          swift_bridgeObjectRelease_n();
                          *(_WORD *)(v171 + 12) = 2080;
                          swift_bridgeObjectRetain();
                          uint64_t v172 = Dictionary.description.getter();
                          unint64_t v174 = v173;
                          swift_bridgeObjectRelease();
                          *(void *)&v240[0] = sub_1000A2E70(v172, v174, (uint64_t *)&v241);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          swift_bridgeObjectRelease();
                          _os_log_impl((void *)&_mh_execute_header, v167, (os_log_type_t)v236, "Received %s change via cloud. Dropping the change. \nDictionary Representation of cloudChange: %s", (uint8_t *)v171, 0x16u);
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          swift_slowDealloc();

                          v130(v227, v235);
                        }
                        else
                        {

                          swift_bridgeObjectRelease_n();
                          v130((char *)v166, v147);
                        }
                        goto LABEL_33;
                      }
                      swift_bridgeObjectRelease();
LABEL_86:
                      swift_beginAccess();
                      uint64_t v175 = swift_bridgeObjectRetain();
                      id v176 = sub_10019CE3C(v175);
                      if (v140)
                      {
                        swift_bridgeObjectRelease();
                        type metadata accessor for Code(0);
                        *(void *)&v240[0] = 11;
                        swift_errorRetain();
                        sub_10019D114(&qword_100341180, type metadata accessor for Code);
                        char v177 = static _ErrorCodeProtocol.~= infix(_:_:)();
                        swift_errorRelease();
                        if (v177)
                        {
                          swift_errorRelease();
                          uint64_t v178 = v228;
                          sub_1001D7700(v228);
                          v179 = Logger.logObject.getter();
                          os_log_type_t v180 = static os_log_type_t.error.getter();
                          if (os_log_type_enabled(v179, v180))
                          {
                            v233 = v130;
                            v181 = (uint8_t *)swift_slowAlloc();
                            *(void *)&v240[0] = swift_slowAlloc();
                            *(_DWORD *)v181 = 136315138;
                            uint64_t v232 = (uint64_t)(v181 + 4);
                            v234 = v131;
                            swift_bridgeObjectRetain();
                            uint64_t v219 = 0;
                            uint64_t v182 = Dictionary.description.getter();
                            unint64_t v184 = v183;
                            swift_bridgeObjectRelease();
                            uint64_t v237 = sub_1000A2E70(v182, v184, (uint64_t *)v240);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)();
                            swift_bridgeObjectRelease();
                            _os_log_impl((void *)&_mh_execute_header, v179, v180, "Cloud activation for:\n %s \n references a user that does not exist. Deleting it.", v181, 0xCu);
                            swift_arrayDestroy();
                            swift_slowDealloc();
                            swift_slowDealloc();

                            ((void (*)(uint64_t, uint64_t))v233)(v228, v235);
                          }
                          else
                          {

                            v130((char *)v178, v147);
                          }
LABEL_54:
                          id v139 = sub_1001D7640();
                          [v139 deleteObject:v221];

LABEL_55:
                          id v84 = v220;
LABEL_22:

LABEL_33:
                          swift_bridgeObjectRelease();
                          return;
                        }
                        id v157 = v220;

                        goto LABEL_78;
                      }
                      v185 = v176;
                      swift_bridgeObjectRelease();
                      self;
                      if (swift_dynamicCastObjCClass())
                      {
                        self;
                        v186 = (void *)swift_dynamicCastObjCClassUnconditional();
                        swift_unknownObjectRetain();
                        id v187 = [v186 localDevice];

                        if (v187)
                        {
                          id v188 = v220;

                          sub_1001D7700((uint64_t)v225);
                          v189 = Logger.logObject.getter();
                          os_log_type_t v190 = static os_log_type_t.default.getter();
                          if (os_log_type_enabled(v189, v190))
                          {
                            v191 = (uint8_t *)swift_slowAlloc();
                            *(_WORD *)v191 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v189, v190, "Skipping update of local UserDeviceState from CloudKit.", v191, 2u);
                            swift_slowDealloc();
                          }

                          swift_unknownObjectRelease_n();
                          v130(v225, v147);
                          goto LABEL_33;
                        }
                        id v192 = sub_10020B2D4(0);
                        v233 = v130;
                        uint64_t v219 = 0;
                        v193 = (char *)v131;
                        id v194 = [v186 user];
                        if (!v194) {
                          goto LABEL_111;
                        }
                        v195 = v194;
                        sub_1000A0760(0, &qword_1003431E0);
                        id v196 = v192;
                        id v197 = v195;
                        LOBYTE(v195) = static NSObject.== infix(_:_:)();

                        if ((v195 & 1) == 0)
                        {
LABEL_111:

                          sub_1001D7700(v222);
                          v214 = Logger.logObject.getter();
                          os_log_type_t v215 = static os_log_type_t.default.getter();
                          if (os_log_type_enabled(v214, v215))
                          {
                            v216 = (uint8_t *)swift_slowAlloc();
                            *(_WORD *)v216 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v214, v215, "Skipping update of UserDeviceState from CloudKit - doesn't belong to local user. Deleting it.", v216, 2u);
                            swift_slowDealloc();
                          }

                          ((void (*)(uint64_t, uint64_t))v233)(v222, v235);
                          id v217 = sub_1001D7640();
                          [v217 deleteObject:v186];
                          swift_unknownObjectRelease_n();

                          goto LABEL_114;
                        }
                        swift_unknownObjectRelease();

                        uint64_t v131 = (void (**)(char *, uint64_t))v193;
                        uint64_t v140 = v219;
                        id v130 = (void (*)(char *, uint64_t))v233;
                      }
                      uint64_t v198 = swift_bridgeObjectRetain();
                      sub_10023BA40(v198);
                      swift_bridgeObjectRelease();
                      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease();
                      unsigned __int8 v200 = [v185 updateWithDictionaryRepresentation:isa];

                      if (v200)
                      {
                        swift_unknownObjectRelease();
                        goto LABEL_55;
                      }
                      v233 = v130;
                      uint64_t v219 = v140;
                      v234 = v131;
                      id v201 = sub_1001D7640();
                      [v201 deleteObject:v221];

                      uint64_t v202 = v224;
                      sub_1001D7700(v224);
                      v203 = v229;
                      v204 = Logger.logObject.getter();
                      os_log_type_t v205 = static os_log_type_t.default.getter();
                      if (os_log_type_enabled(v204, v205))
                      {
                        v206 = (uint8_t *)swift_slowAlloc();
                        uint64_t v232 = swift_slowAlloc();
                        *(_DWORD *)v206 = 138412290;
                        *(void *)&v240[0] = v203;
                        v207 = v203;
                        uint64_t v202 = v224;
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        *(void *)uint64_t v232 = v203;

                        _os_log_impl((void *)&_mh_execute_header, v204, v205, "Cloud Activation for %@ is older than local object. Deleting the cloud activation.", v206, 0xCu);
                        sub_10009EE78(&qword_100342AB0);
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_slowDealloc();
                      }
                      else
                      {

                        v204 = v203;
                      }

                      ((void (*)(uint64_t, uint64_t))v233)(v202, v235);
                      self;
                      if (swift_dynamicCastObjCClass())
                      {
                        self;
                        uint64_t v208 = swift_dynamicCastObjCClassUnconditional();
                        swift_unknownObjectRetain();
                        sub_1001D7700(v223);
                        swift_unknownObjectRetain_n();
                        v209 = Logger.logObject.getter();
                        os_log_type_t v210 = static os_log_type_t.default.getter();
                        if (os_log_type_enabled(v209, v210))
                        {
                          v211 = (uint8_t *)swift_slowAlloc();
                          v212 = (void *)swift_slowAlloc();
                          *(_DWORD *)v211 = 138412290;
                          *(void *)&v240[0] = v208;
                          swift_unknownObjectRetain();
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          void *v212 = v208;
                          swift_unknownObjectRelease_n();
                          _os_log_impl((void *)&_mh_execute_header, v209, v210, "STInstalledApp %@ does not have a matching uds. Deleting this orphaned app.", v211, 0xCu);
                          sub_10009EE78(&qword_100342AB0);
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          swift_slowDealloc();
                        }
                        else
                        {

                          swift_unknownObjectRelease_n();
                        }
                        ((void (*)(uint64_t, uint64_t))v233)(v223, v235);
                        id v213 = sub_1001D7640();
                        [v213 deleteObject:v208];
                        swift_unknownObjectRelease_n();
                      }
                      else
                      {
                        swift_unknownObjectRelease();
                      }
LABEL_114:

                      goto LABEL_33;
                    }
                    id v157 = v220;
                  }
                  else
                  {
                    id v157 = v220;

                    sub_1000D3920((uint64_t)&v241);
                  }
                  type metadata accessor for DataStore.DataStoreError(0);
                  sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
                  swift_allocError();
                  uint64_t *v158 = v142;
                  v158[1] = v141;
                  uint64_t v159 = v232;
                  v158[2] = v218;
                  v158[3] = v159;
                  swift_storeEnumTagMultiPayload();
                  swift_willThrow();
LABEL_78:

                  swift_bridgeObjectRelease();
                  return;
                }
              }
              swift_bridgeObjectRelease();
              goto LABEL_64;
            }
          }
          id v90 = v220;

          swift_bridgeObjectRelease();
          sub_1001D7700((uint64_t)v39);
          unint64_t v91 = Logger.logObject.getter();
          os_log_type_t v92 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v91, v92))
          {
            unint64_t v93 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v93 = 0;
            _os_log_impl((void *)&_mh_execute_header, v91, v92, "Found STInstalledApp on first pass. Skipping.", v93, 2u);
            swift_slowDealloc();
          }

          v234[1](v39, v235);
          goto LABEL_33;
        }
      }
      else
      {
        sub_1000D3920((uint64_t)&v241);
      }
      sub_1001D7700((uint64_t)v16);
      uint64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.default.getter();
      BOOL v81 = os_log_type_enabled(v79, v80);
      id v82 = v234;
      uint64_t v83 = v235;
      id v84 = v220;
      if (v81)
      {
        char v85 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v85 = 0;
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "Cloud activation does not have a serializableClassKey in its dictionary. It will be removed from the cloud.", v85, 2u);
        swift_slowDealloc();
      }

      v82[1](v16, v83);
      id v86 = sub_1001D7640();
      [v86 deleteObject:v221];

      goto LABEL_22;
    }

    sub_1001D7700((uint64_t)v13);
    unint64_t v66 = v233;
    long long v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      v233 = (void *)swift_slowAlloc();
      v236 = v69;
      *(_DWORD *)uint64_t v69 = 138412290;
      *(void *)&long long v241 = v66;
      uint64_t v70 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v233 = v66;

      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Cloud activation for change: %@ does not have a dictionaryRepresentation.", v236, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      long long v67 = v66;
    }
    uint64_t v87 = v234;

    v87[1](v13, v235);
    type metadata accessor for DataStore.DataStoreError(0);
    sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  else
  {
    id v55 = (id)v241;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v56 = type metadata accessor for CocoaError.Code();
    uint64_t v57 = *(void *)(v56 - 8);
    __chkstk_darwin(v56);
    uint64_t v59 = (char *)&v218 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_errorRetain();
    static CocoaError.managedObjectReferentialIntegrity.getter();
    sub_10019D0C8();
    char v60 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v56);
    if (v60)
    {
      swift_errorRelease();
      sub_1001D7700((uint64_t)v10);
      uint64_t v61 = v233;
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = (uint8_t *)swift_slowAlloc();
        v236 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v64 = 138412290;
        *(void *)&long long v241 = v61;
        uint64_t v65 = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(void *)v236 = v61;

        _os_log_impl((void *)&_mh_execute_header, v62, v63, "Cloud activation for change: %@ no longer exists. Skipping update.", v64, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v62 = v61;
      }
      unsigned __int8 v88 = v234;

      v88[1](v10, v235);
    }
  }
}

uint64_t sub_100197ACC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = a1;
  v17[1] = a2;
  uint64_t v15 = 58;
  unint64_t v16 = 0xE100000000000000;
  sub_1000DA39C();
  uint64_t v8 = StringProtocol.components<A>(separatedBy:)();
  if (*(void *)(v8 + 16))
  {
    uint64_t v9 = *(void *)(v8 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1001D7700((uint64_t)v7);
    swift_bridgeObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      v17[0] = v18;
      *(_DWORD *)uint64_t v12 = 136315138;
      v14[1] = v12 + 4;
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_1000A2E70(a1, a2, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "uniqueIdentifier %s does not have a properly formatted class name.", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v9 = type metadata accessor for DataStore.DataStoreError(0);
    sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return v9;
}

void sub_100197DC0(void *a1, unint64_t a2)
{
  uint64_t v65 = type metadata accessor for Logger();
  unint64_t v63 = *(void *)(v65 - 8);
  uint64_t v4 = __chkstk_darwin(v65);
  uint64_t v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v64 = (uint64_t *)((char *)&v58 - v8);
  uint64_t v9 = __chkstk_darwin(v7);
  *(void *)&long long v61 = (char *)&v58 - v10;
  __chkstk_darwin(v9);
  uint64_t v59 = (uint8_t *)&v58 - v11;
  id v12 = [self fetchRequest];
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  sub_10009EE78(&qword_1003414D8);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100284C10;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v17 = sub_1000A5124();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  *(void *)(v13 + 96) = &type metadata for String;
  *(void *)(v13 + 104) = v17;
  *(void *)(v13 + 64) = v17;
  *(void *)(v13 + 72) = a1;
  id v60 = a1;
  *(void *)(v13 + 80) = a2;
  swift_bridgeObjectRetain();
  uint64_t v18 = v12;
  uint64_t v19 = NSPredicate.init(format:_:)();
  [v12 setPredicate:v19];

  id v67 = 0;
  id v20 = [v12 execute:&v67];
  id v21 = v67;
  if (!v20)
  {
    id v31 = v67;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_36;
  }
  uint64_t v22 = v20;
  sub_1000A0760(0, &qword_100343B78);
  unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v24 = v21;

  unint64_t v62 = v23;
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v26 = (void (*)(void, void))v64;
  if (v25 == 1)
  {
    if ((v62 & 0xC000000000000001) != 0)
    {
      id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_40;
      }
      id v32 = *(id *)(v62 + 32);
    }
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    sub_1001D7700(v61);
    uint64_t v34 = v33;
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      char v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = (uint64_t *)swift_slowAlloc();
      *(_DWORD *)char v37 = 138412290;
      id v67 = v34;
      uint64_t v38 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t *v64 = (uint64_t)v34;

      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Deleting cloud activation %@", v37, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v35 = v34;
    }
    unint64_t v56 = v63;

    (*(void (**)(void, uint64_t))(v56 + 8))(v61, v65);
    id v57 = sub_1001D7640();
    [v57 deleteObject:v34];

LABEL_36:
    return;
  }
  if (v25)
  {
    sub_1001D7700((uint64_t)v64);
    swift_bridgeObjectRetain_n();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v61 = swift_slowAlloc();
      id v67 = (id)v61;
      *(_DWORD *)id v41 = 136315138;
      uint64_t v59 = v41 + 4;
      swift_bridgeObjectRetain();
      uint64_t v66 = sub_1000A2E70((uint64_t)v60, a2, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Multiple cloud activations exist for: %s.", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      id v42 = (void (*)(void, void))v64;
      id v43 = *(uint64_t **)(v63 + 8);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      id v43 = *(uint64_t **)(v63 + 8);
      id v42 = v26;
    }
    uint64_t v64 = v43;
    ((void (*)(void, uint64_t))v43)(v42, v65);
    if (v23 >> 62)
    {
      unint64_t v45 = v62;
      swift_bridgeObjectRetain();
      uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v46)
      {
LABEL_21:
        id v60 = v18;
        if (v46 >= 1)
        {
          uint64_t v47 = 0;
          unint64_t v63 = v45 & 0xC000000000000001;
          *(void *)&long long v44 = 138412290;
          long long v61 = v44;
          do
          {
            if (v63) {
              id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v50 = *(id *)(v45 + 8 * v47 + 32);
            }
            uint64_t v51 = v50;
            sub_1001D7700((uint64_t)v6);
            uint64_t v52 = v51;
            uint64_t v48 = Logger.logObject.getter();
            os_log_type_t v53 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v48, v53))
            {
              uint64_t v54 = swift_slowAlloc();
              id v55 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v54 = v61;
              *(void *)(v54 + 4) = v52;
              *id v55 = v52;
              _os_log_impl((void *)&_mh_execute_header, v48, v53, "Deleting cloud activation %@", (uint8_t *)v54, 0xCu);
              sub_10009EE78(&qword_100342AB0);
              swift_arrayDestroy();
              unint64_t v45 = v62;
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              uint64_t v48 = v52;
            }
            ++v47;

            ((void (*)(char *, uint64_t))v64)(v6, v65);
            id v49 = sub_1001D7640();
            [v49 deleteObject:v52];
          }
          while (v46 != v47);

          goto LABEL_33;
        }
LABEL_40:
        __break(1u);
      }
    }
    else
    {
      unint64_t v45 = v62;
      uint64_t v46 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v46) {
        goto LABEL_21;
      }
    }

LABEL_33:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = (uint64_t)v59;
  sub_1001D7700((uint64_t)v59);
  swift_bridgeObjectRetain_n();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    id v67 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v66 = sub_1000A2E70((uint64_t)v60, a2, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Cloud activation referenced by %s has already been deleted. No need to delete.", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v27, v65);
}

void sub_100198754(uint64_t a1, unint64_t a2)
{
  uint64_t v46 = type metadata accessor for Logger();
  long long v44 = *(char **)(v46 - 8);
  uint64_t v4 = __chkstk_darwin(v46);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v45 = (unint64_t)&v39 - v7;
  uint64_t v8 = (char *)[self fetchRequest];
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  sub_10009EE78(&qword_1003414D8);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100284C10;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v13 = sub_1000A5124();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v13;
  uint64_t v14 = v8;
  *(void *)(v9 + 64) = v13;
  *(void *)(v9 + 72) = a1;
  uint64_t v15 = a1;
  *(void *)(v9 + 80) = a2;
  swift_bridgeObjectRetain();
  uint64_t v16 = NSPredicate.init(format:_:)();
  [v8 setPredicate:v16];

  id v48 = 0;
  id v17 = [v8 execute:&v48];
  id v18 = v48;
  if (!v17)
  {
    id v28 = v48;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  uint64_t v19 = v17;
  sub_1000A0760(0, &qword_100343B78);
  unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v21 = v18;

  unint64_t v43 = v20;
  if (v20 >> 62) {
    goto LABEL_27;
  }
  uint64_t v23 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
  if (v23 == 1)
  {
    swift_bridgeObjectRelease();

    return;
  }
  if (!v23)
  {
    swift_bridgeObjectRelease();
    unint64_t v24 = v45;
    sub_1001D7700(v45);
    swift_bridgeObjectRetain_n();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      id v48 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_1000A2E70(v15, a2, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Cloud activation referenced by %s has already been deleted. No need to delete.", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*((void (**)(unint64_t, uint64_t))v44 + 1))(v45, v46);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*((void (**)(unint64_t, uint64_t))v44 + 1))(v24, v46);
    }
    return;
  }
  if (__OFSUB__(v23, 1))
  {
    __break(1u);
LABEL_29:
    __break(1u);
  }
  os_log_type_t v40 = v14;
  uint64_t v15 = v43;
  if (v23 - 1 < 1) {
    goto LABEL_29;
  }
  uint64_t v14 = 0;
  uint64_t v41 = v43 & 0xFFFFFFFFFFFFFF8;
  os_log_type_t v29 = (void (**)(char *, uint64_t))(v44 + 8);
  long long v44 = (char *)(v23 - 2);
  unint64_t v45 = v43 & 0xC000000000000001;
  *(void *)&long long v22 = 138412290;
  long long v42 = v22;
  do
  {
    uint64_t v30 = v14 + 1;
    if (v45)
    {
      id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if ((unint64_t)v30 >= *(void *)(v41 + 16))
      {
        __break(1u);
LABEL_27:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      id v31 = *(id *)(v15 + 8 * (void)v14 + 40);
    }
    id v32 = v31;
    sub_1001D7700((uint64_t)v6);
    uint64_t v33 = v32;
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    a2 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      char v37 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = v42;
      *(void *)(v36 + 4) = v33;
      void *v37 = v33;
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)a2, "Deleting cloud activation %@", (uint8_t *)v36, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v15 = v43;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v34 = v33;
    }

    (*v29)(v6, v46);
    id v38 = sub_1001D7640();
    [v38 deleteObject:v33];

    if (v44 == v14) {
      goto LABEL_24;
    }
    ++v14;
  }
  while (!__OFADD__(v30, 1));
  __break(1u);
LABEL_24:
  swift_bridgeObjectRelease();
}

void *sub_100198D84(uint64_t a1)
{
  uint64_t v3 = (void *)type metadata accessor for Logger();
  uint64_t v4 = *(v3 - 1);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v152 = (char *)v150 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v153 = (char *)v150 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v150 - v10;
  __chkstk_darwin(v9);
  uint64_t v154 = (char *)v150 - v12;
  id v13 = [(id)a1 entity];
  id v14 = [v13 name];

  id v155 = v3;
  uint64_t v156 = v4;
  if (v14)
  {
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0;
  }
  sub_1000A0760(0, &qword_100343A70);
  uint64_t v18 = (uint64_t)&selRef_setPartitionTimeInterval_;
  id v19 = [(id)swift_getObjCClassFromMetadata() entityName];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  if (!v17)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if (v20 != v15 || v17 != v22)
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v23) {
      goto LABEL_10;
    }
LABEL_12:
    sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
    id v28 = [(id)swift_getObjCClassFromMetadata() entityName];
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v30;

    if (!v17)
    {
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    if (v29 == v15 && v17 == v31)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v43 & 1) == 0) {
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
    self;
    uint64_t v44 = swift_dynamicCastObjCClass();
    if (!v44)
    {
      sub_1001D7700((uint64_t)v11);
      id v55 = (id)a1;
      unint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = swift_slowAlloc();
        id v157 = (void *)swift_slowAlloc();
        v161[0] = v157;
        *(_DWORD *)uint64_t v58 = 136315394;
        id v59 = [v55 debugDescription];
        uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v62 = v61;

        uint64_t v158 = sub_1000A2E70(v60, v62, (uint64_t *)v161);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v58 + 12) = 2080;
        id v63 = [v55 entity];
        id v64 = [v63 name];

        if (v64)
        {
          uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v67 = v66;
        }
        else
        {
          uint64_t v65 = 7104878;
          unint64_t v67 = 0xE300000000000000;
        }
        uint64_t v158 = sub_1000A2E70(v65, v67, (uint64_t *)v161);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Implicit unwrap to STBlueprint failed for NSManagedObject %s with entity name %s.", (uint8_t *)v58, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      (*(void (**)(char *, id))(v156 + 8))(v11, v155);
      LOBYTE(v26) = type metadata accessor for DataStore.DataStoreError(0);
      sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
      swift_allocError();
      unint64_t v147 = 0x727065756C425453;
      unint64_t v148 = 0xEB00000000746E69;
      goto LABEL_100;
    }
    unint64_t v45 = (void *)v44;
    uint64_t v46 = (char *)(id)a1;
    id v155 = v45;
    id v47 = [v45 users];
    uint64_t v151 = v1;
    if (v47)
    {
      id v48 = v47;
      uint64_t v154 = v46;
      sub_1000A0760(0, &qword_1003431E0);
      sub_10019D808();
      a1 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((a1 & 0xC000000000000001) != 0)
      {
        if (a1 < 0) {
          uint64_t v15 = a1;
        }
        else {
          uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8;
        }
        uint64_t v49 = __CocoaSet.count.getter();
        if (v49)
        {
          uint64_t v18 = v49;
          uint64_t v165 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)();
          uint64_t v158 = __CocoaSet.startIndex.getter();
          uint64_t v159 = v50;
          unsigned __int8 v160 = 1;
          if (v18 < 0)
          {
            __break(1u);
LABEL_30:
            sub_1000A0760(0, &qword_1003415E0);
            id v51 = [(id)swift_getObjCClassFromMetadata() *(SEL *)(v18 + 1976)];
            uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v54 = v53;

            if (v17)
            {
              if (v52 == v15 && v17 == v54)
              {
                swift_bridgeObjectRelease();
LABEL_39:
                swift_bridgeObjectRelease();
                self;
                uint64_t v69 = (void *)swift_dynamicCastObjCClass();
                if (v69)
                {
                  os_log_type_t v26 = [v69 localUser];

                  LOBYTE(v26) = v26 != 0;
                  return (void *)(v26 & 1);
                }
                char v89 = v153;
                sub_1001D7700((uint64_t)v153);
                id v90 = (id)a1;
                unint64_t v91 = Logger.logObject.getter();
                os_log_type_t v92 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v91, v92))
                {
                  uint64_t v93 = swift_slowAlloc();
                  v161[0] = (id)swift_slowAlloc();
                  *(_DWORD *)uint64_t v93 = 136315394;
                  id v94 = [v90 debugDescription];
                  uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v97 = v96;

                  uint64_t v158 = sub_1000A2E70(v95, v97, (uint64_t *)v161);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();

                  swift_bridgeObjectRelease();
                  *(_WORD *)(v93 + 12) = 2080;
                  id v98 = [v90 entity];
                  id v99 = [v98 name];

                  if (v99)
                  {
                    uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v102 = v101;
                  }
                  else
                  {
                    uint64_t v100 = 7104878;
                    unint64_t v102 = 0xE300000000000000;
                  }
                  uint64_t v158 = sub_1000A2E70(v100, v102, (uint64_t *)v161);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();

                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v91, v92, "Implicit unwrap to STUserDeviceState failed for NSManagedObject %s with entity name %s.", (uint8_t *)v93, 0x16u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  (*(void (**)(char *, id))(v156 + 8))(v153, v155);
                }
                else
                {

                  (*(void (**)(char *, id))(v156 + 8))(v89, v155);
                }
                LOBYTE(v26) = type metadata accessor for DataStore.DataStoreError(0);
                sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
                swift_allocError();
                unint64_t v147 = 0xD000000000000011;
                unint64_t v148 = 0x80000001002936C0;
LABEL_100:
                *uint64_t v146 = v147;
                v146[1] = v148;
                swift_storeEnumTagMultiPayload();
                swift_willThrow();
                return (void *)(v26 & 1);
              }
              char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v68) {
                goto LABEL_39;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            sub_1000A0760(0, (unint64_t *)&unk_100343A60);
            id v70 = [(id)swift_getObjCClassFromMetadata() *(SEL *)(v18 + 1976)];
            uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v73 = v72;

            if (!v17)
            {
              swift_bridgeObjectRelease();
              LOBYTE(v26) = 0;
              return (void *)(v26 & 1);
            }
            if (v71 == v15 && v17 == v73)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              char v103 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v103 & 1) == 0)
              {
                LOBYTE(v26) = 0;
                return (void *)(v26 & 1);
              }
            }
            self;
            uint64_t v104 = swift_dynamicCastObjCClass();
            if (v104)
            {
              NSNumber v105 = (void *)v104;
              os_log_type_t v26 = (id)a1;
              id v106 = [v105 userDeviceState];
              if (v106)
              {
                unint64_t v107 = v106;
                id v108 = [v106 localUser];

                LOBYTE(v26) = v108 != 0;
              }
              else
              {

                LOBYTE(v26) = 0;
              }
              return (void *)(v26 & 1);
            }
            uint64_t v132 = (uint64_t)v152;
            sub_1001D7700((uint64_t)v152);
            id v133 = (id)a1;
            os_log_type_t v134 = Logger.logObject.getter();
            os_log_type_t v135 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v134, v135))
            {
              uint64_t v136 = swift_slowAlloc();
              v161[0] = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v136 = 136315394;
              id v137 = [v133 debugDescription];
              uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v140 = v139;

              uint64_t v158 = sub_1000A2E70(v138, v140, (uint64_t *)v161);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              *(_WORD *)(v136 + 12) = 2080;
              id v141 = [v133 entity];
              id v142 = [v141 name];

              if (v142)
              {
                uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v145 = v144;
              }
              else
              {
                uint64_t v143 = 7104878;
                unint64_t v145 = 0xE300000000000000;
              }
              uint64_t v158 = sub_1000A2E70(v143, v145, (uint64_t *)v161);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v134, v135, "Implicit unwrap to STInstalledApp failed for NSManagedObject %s with entity name %s.", (uint8_t *)v136, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(char *, id))(v156 + 8))(v152, v155);
            }
            else
            {

              (*(void (**)(uint64_t, id))(v156 + 8))(v132, v155);
            }
            LOBYTE(v26) = type metadata accessor for DataStore.DataStoreError(0);
            sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
            swift_allocError();
            unint64_t v147 = 0x6C6174736E495453;
            unint64_t v148 = 0xEE0070704164656CLL;
            goto LABEL_100;
          }
LABEL_60:
          uint64_t v111 = a1 & 0xFFFFFFFFFFFFFF8;
          if (a1 < 0) {
            uint64_t v111 = a1;
          }
          uint64_t v156 = v111;
          while (1)
          {
            while (1)
            {
              uint64_t v117 = v158;
              uint64_t v118 = v159;
              uint64_t v119 = v160;
              sub_100209954(v158, v159, v160, a1);
              uint64_t v121 = v120;
              id v122 = [v120 dsid];

              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              uint64_t result = (void *)specialized ContiguousArray._endMutation()();
              if ((a1 & 0xC000000000000001) != 0) {
                break;
              }
              uint64_t v112 = sub_10020986C(v117, v118, v119, a1);
              uint64_t v114 = v113;
              char v116 = v115;
              sub_10019D864(v117, v118, v119);
              uint64_t v158 = v112;
              uint64_t v159 = v114;
              unsigned __int8 v160 = v116 & 1;
              if (!--v18) {
                goto LABEL_69;
              }
            }
            if ((v119 & 1) == 0) {
              break;
            }
            if (__CocoaSet.Index.handleBitPattern.getter()) {
              swift_isUniquelyReferenced_nonNull_native();
            }
            sub_10009EE78(&qword_100343B88);
            int v123 = (void (*)(id *, void))Set.Index._asCocoa.modify();
            __CocoaSet.formIndex(after:isUnique:)();
            v123(v161, 0);
            if (!--v18)
            {
LABEL_69:
              sub_10019D864(v158, v159, v160);
              unsigned __int8 v88 = v165;
              swift_bridgeObjectRelease();
              goto LABEL_71;
            }
          }
          __break(1u);
          goto LABEL_103;
        }
      }
      else
      {
        uint64_t v18 = *(void *)(a1 + 16);
        if (v18)
        {
          uint64_t v165 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)();
          uint64_t v158 = sub_100209BD8(a1);
          uint64_t v159 = v109;
          unsigned __int8 v160 = v110 & 1;
          goto LABEL_60;
        }
      }
      swift_bridgeObjectRelease();
      unsigned __int8 v88 = _swiftEmptyArrayStorage;
LABEL_71:
      uint64_t v46 = v154;
    }
    else
    {
      unsigned __int8 v88 = 0;
    }
    uint64_t v124 = v151;
    id v125 = sub_1001D7640();
    os_log_type_t v26 = v150;
    __chkstk_darwin(v125);
    v150[-2] = v124;
    v150[-1] = 0;
    unint64_t v126 = v157;
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (!v126)
    {
      id v157 = 0;

      id v127 = v161[0];
      uint64_t v156 = (uint64_t)v162;
      uint64_t v128 = v164;
      if (v88
        && (id v129 = v161[0],
            char v130 = sub_1000CA324((uint64_t)v129, (unint64_t)v88),
            swift_bridgeObjectRelease(),
            v129,
            (v130 & 1) == 0))
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        id v131 = [v155 organization];

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v131)
        {
          self;
          LOBYTE(v26) = swift_dynamicCastObjCClass() != 0;

          return (void *)(v26 & 1);
        }
      }
      LOBYTE(v26) = 0;
      return (void *)(v26 & 1);
    }

    swift_bridgeObjectRelease();
    return (void *)(v26 & 1);
  }
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();
  unint64_t v24 = v1;
  id v25 = sub_1001D7640();
  os_log_type_t v26 = v150;
  __chkstk_darwin(v25);
  v150[-2] = v24;
  v150[-1] = 0;
  uint64_t v27 = v157;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v27)
  {

    return (void *)(v26 & 1);
  }

  id v32 = v161[0];
  id v33 = v161[2];
  uint64_t v34 = (char *)v161[4];
  id v157 = v162;
  uint64_t v36 = v163;
  os_log_type_t v35 = v164;
  self;
  uint64_t v37 = swift_dynamicCastObjCClass();
  unint64_t v153 = v35;
  if (!v37)
  {
    v150[0] = v36;
    v150[1] = v33;
    uint64_t v152 = v34;
    uint64_t v74 = (uint64_t)v154;
    sub_1001D7700((uint64_t)v154);
    id v75 = (id)a1;
    unint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = swift_slowAlloc();
      uint64_t v151 = (void *)swift_slowAlloc();
      v161[0] = v151;
      *(_DWORD *)uint64_t v78 = 136315394;
      id v79 = [v75 debugDescription];
      uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v82 = v81;

      uint64_t v158 = sub_1000A2E70(v80, v82, (uint64_t *)v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v78 + 12) = 2080;
      id v83 = [v75 entity];
      id v84 = [v83 name];

      if (v84)
      {
        uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v87 = v86;
      }
      else
      {
        uint64_t v85 = 7104878;
        unint64_t v87 = 0xE300000000000000;
      }
      uint64_t v158 = sub_1000A2E70(v85, v87, (uint64_t *)v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Implicit unwrap to STCloudOrganizationSettings failed for NSManagedObject %s with entity name %s.", (uint8_t *)v78, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, id))(v156 + 8))(v154, v155);
    }
    else
    {

      (*(void (**)(uint64_t, id))(v156 + 8))(v74, v155);
    }
    LOBYTE(v26) = type metadata accessor for DataStore.DataStoreError(0);
    sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    *id v149 = 0xD00000000000001CLL;
    v149[1] = 0x80000001002936E0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)(v26 & 1);
  }
  id v38 = (void *)v37;
  id v39 = (id)a1;
  id v40 = v32;
  uint64_t result = [v38 user];
  if (result)
  {
    os_log_type_t v26 = result;
    sub_1000A0760(0, (unint64_t *)&unk_100343B90);
    id v42 = [v26 dsid];

    LOBYTE(v26) = static NSObject.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)(v26 & 1);
  }
LABEL_103:
  __break(1u);
  return result;
}

unint64_t sub_10019A2FC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v26 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [self fetchRequest];
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  sub_10009EE78(&qword_1003414D8);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100286230;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1000A5124();
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v9 = NSPredicate.init(format:_:)();
  [v7 setPredicate:v9];

  id v28 = 0;
  id v10 = [v7 execute:&v28];
  id v11 = v28;
  if (!v10)
  {
    id v17 = v28;
    _convertNSErrorToError(_:)();

LABEL_12:
    swift_willThrow();

    return a2;
  }
  uint64_t v12 = v10;
  sub_1000A0760(0, &qword_100343B78);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = v11;

  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15 != 1) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15 != 1)
    {
LABEL_4:
      if (v15)
      {
        swift_bridgeObjectRelease();
        sub_1001D7700((uint64_t)v6);
        swift_bridgeObjectRetain_n();
        uint64_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = (uint8_t *)swift_slowAlloc();
          id v25 = (void *)swift_slowAlloc();
          id v28 = v25;
          *(_DWORD *)uint64_t v20 = 136315138;
          unint64_t v24 = v20 + 4;
          swift_bridgeObjectRetain();
          uint64_t v27 = sub_1000A2E70(a1, a2, (uint64_t *)&v28);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "Too many activation objects for unique identifier %s", v20, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v4);
        type metadata accessor for DataStore.DataStoreError(0);
        sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        uint64_t *v21 = a1;
        v21[1] = a2;
      }
      else
      {
        swift_bridgeObjectRelease();
        type metadata accessor for DataStore.DataStoreError(0);
        sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        *uint64_t v16 = a1;
        v16[1] = a2;
      }
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      goto LABEL_12;
    }
  }
  if ((v13 & 0xC000000000000001) != 0)
  {
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v22 = *(id *)(v13 + 32);
  }
  a2 = (unint64_t)v22;

  swift_bridgeObjectRelease();
  return a2;
}

void sub_10019A810(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v77 = v4;
  uint64_t v78 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v71 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v70 = (uint64_t)&v69 - v9;
  __chkstk_darwin(v8);
  uint64_t v75 = (uint64_t)&v69 - v10;
  id v11 = [self fetchRequest];
  uint64_t v12 = sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  uint64_t v74 = sub_10009EE78(&qword_1003414D8);
  uint64_t v13 = swift_allocObject();
  long long v73 = xmmword_100284C10;
  *(_OWORD *)(v13 + 16) = xmmword_100284C10;
  uint64_t v72 = STUniqueIdentifierAttributeName;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v17 = sub_1000A5124();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  *(void *)(v13 + 96) = &type metadata for String;
  *(void *)(v13 + 104) = v17;
  *(void *)(v13 + 64) = v17;
  *(void *)(v13 + 72) = a1;
  uint64_t v79 = a1;
  unint64_t v80 = a2;
  *(void *)(v13 + 80) = a2;
  swift_bridgeObjectRetain();
  uint64_t v18 = NSPredicate.init(format:_:)();
  [v11 setPredicate:v18];

  id v82 = 0;
  id v19 = [v11 execute:&v82];
  id v20 = v82;
  if (!v19)
  {
    id v30 = v82;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  uint64_t v21 = v19;
  id v76 = v11;
  sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
  unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v23 = v20;

  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v24 != 1)
    {
LABEL_4:
      if (v24)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for DataStore.DataStoreError(0);
        sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
        swift_allocError();
        id v32 = v31;
        uint64_t v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = v73;
        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v33 + 56) = &type metadata for String;
        *(void *)(v33 + 64) = v17;
        *(void *)(v33 + 32) = v34;
        *(void *)(v33 + 40) = v35;
        *(void *)(v33 + 96) = &type metadata for String;
        *(void *)(v33 + 104) = v17;
        unint64_t v36 = v80;
        *(void *)(v33 + 72) = v79;
        *(void *)(v33 + 80) = v36;
        swift_bridgeObjectRetain();
        *id v32 = NSPredicate.init(format:_:)();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v25 = v75;
        sub_1001D7700(v75);
        unint64_t v26 = v80;
        swift_bridgeObjectRetain_n();
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = (uint8_t *)swift_slowAlloc();
          id v82 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v29 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v81 = sub_1000A2E70(v79, v26, (uint64_t *)&v82);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "Blueprint referenced by %s has already been deleted. No need to delete.", v29, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v25, v77);
      }
      return;
    }
  }
  else
  {
    uint64_t v24 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v24 != 1) {
      goto LABEL_4;
    }
  }
  if ((v22 & 0xC000000000000001) != 0)
  {
    id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v37 = v80;
LABEL_15:
    swift_bridgeObjectRelease();
    id v38 = [v11 type];
    if (v38)
    {
      id v39 = v38;
      a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v40;

      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (v12)
      {
        if (v41 == a1 && v12 == v42) {
          goto LABEL_22;
        }
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v43) {
          goto LABEL_30;
        }
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v12 == v44) {
          goto LABEL_22;
        }
        char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v49)
        {
LABEL_30:

          goto LABEL_31;
        }
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v12 == v50) {
          goto LABEL_22;
        }
        char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v51) {
          goto LABEL_30;
        }
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v12 == v52)
        {
LABEL_22:

          swift_bridgeObjectRelease();
LABEL_31:
          swift_bridgeObjectRelease();
          return;
        }
        char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v53) {
          goto LABEL_30;
        }
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v12 == v54) {
          goto LABEL_42;
        }
        char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v55) {
          goto LABEL_44;
        }
        goto LABEL_51;
      }
    }
    else
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  unint64_t v37 = v80;
  if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v11 = *(id *)(v22 + 32);
    goto LABEL_15;
  }
  __break(1u);
LABEL_51:
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v12 == v67)
  {
LABEL_42:
    swift_bridgeObjectRelease();
LABEL_44:
    swift_bridgeObjectRelease();
LABEL_45:
    uint64_t v56 = v70;
    sub_1001D7700(v70);
    os_log_type_t v57 = v11;
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      unint64_t v61 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 138412290;
      id v82 = v57;
      unint64_t v62 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v61 = v57;

      uint64_t v56 = v70;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Deleting blueprint %@", v60, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v58 = v57;
    }
    id v63 = v76;
    uint64_t v65 = v77;
    uint64_t v64 = v78;

    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v56, v65);
    id v66 = sub_1001D7640();
    [v66 deleteObject:v57];

    return;
  }
  char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v68) {
    goto LABEL_45;
  }
LABEL_25:
  uint64_t v45 = v71;
  sub_1001D7700(v71);
  swift_bridgeObjectRetain_n();
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    id v48 = (uint8_t *)swift_slowAlloc();
    id v82 = (id)swift_slowAlloc();
    *(_DWORD *)id v48 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v81 = sub_1000A2E70(v79, v37, (uint64_t *)&v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Cloud object of identifier: %s is not expected. Do not import.", v48, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v71, v77);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v45, v77);
  }
  type metadata accessor for DataStore.DataStoreError(0);
  sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
}

void sub_10019B404(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v36 = (uint64_t)v33 - v7;
  id v8 = [self fetchRequest];
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  uint64_t v35 = sub_10009EE78(&qword_1003414D8);
  uint64_t v9 = swift_allocObject();
  long long v34 = xmmword_100284C10;
  *(_OWORD *)(v9 + 16) = xmmword_100284C10;
  v33[1] = STUniqueIdentifierAttributeName;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v13 = sub_1000A5124();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v13;
  *(void *)(v9 + 64) = v13;
  *(void *)(v9 + 72) = a1;
  uint64_t v38 = a1;
  unint64_t v14 = a2;
  *(void *)(v9 + 80) = a2;
  swift_bridgeObjectRetain();
  uint64_t v15 = NSPredicate.init(format:_:)();
  [v8 setPredicate:v15];

  id v43 = 0;
  id v41 = v8;
  id v16 = [v8 execute:&v43];
  id v17 = v43;
  if (!v16)
  {
    id v27 = v43;
    _convertNSErrorToError(_:)();

LABEL_13:
    swift_willThrow();

    return;
  }
  uint64_t v18 = v16;
  sub_1000A0760(0, &qword_1003415E0);
  unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v20 = v17;

  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v21 == 1)
  {
    uint64_t v22 = v37;
    sub_1001D7700(v37);
    swift_bridgeObjectRetain_n();
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v23, v24))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_16;
    }
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    id v43 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v42 = sub_1000A2E70(v38, v14, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    unint64_t v26 = "User device state referenced by %s was deleted from CloudKit. The local device will delete during a future mai"
          "ntainence routine.";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v23, v24, v26, v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_16:
    goto LABEL_17;
  }
  if (v21)
  {
    type metadata accessor for DataStore.DataStoreError(0);
    sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    uint64_t v29 = v28;
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = v34;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 64) = v13;
    *(void *)(v30 + 32) = v31;
    *(void *)(v30 + 40) = v32;
    *(void *)(v30 + 96) = &type metadata for String;
    *(void *)(v30 + 104) = v13;
    *(void *)(v30 + 72) = v38;
    *(void *)(v30 + 80) = v14;
    swift_bridgeObjectRetain();
    *uint64_t v29 = NSPredicate.init(format:_:)();
    swift_storeEnumTagMultiPayload();
    goto LABEL_13;
  }
  uint64_t v22 = v36;
  sub_1001D7700(v36);
  swift_bridgeObjectRetain_n();
  id v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    id v43 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v42 = sub_1000A2E70(v38, v14, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    unint64_t v26 = "User device state referenced by %s has already been deleted. No need to delete";
    goto LABEL_11;
  }

  swift_bridgeObjectRelease_n();
LABEL_17:
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v22, v40);
}

void sub_10019BA0C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v65 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  id v63 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v67 = (uint64_t)&v56 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v64 = (unint64_t)&v56 - v10;
  __chkstk_darwin(v9);
  id v66 = (uint64_t *)((char *)&v56 - v11);
  id v12 = [self fetchRequest];
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  sub_10009EE78(&qword_1003414D8);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100284C10;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v17 = sub_1000A5124();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  *(void *)(v13 + 96) = &type metadata for String;
  *(void *)(v13 + 104) = v17;
  *(void *)(v13 + 64) = v17;
  *(void *)(v13 + 72) = a1;
  uint64_t v61 = a1;
  *(void *)(v13 + 80) = a2;
  swift_bridgeObjectRetain();
  uint64_t v18 = NSPredicate.init(format:_:)();
  [v12 setPredicate:v18];

  id v70 = 0;
  id v19 = [v12 execute:&v70];
  id v20 = v70;
  if (!v19)
  {
    id v32 = v70;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  uint64_t v21 = v19;
  id v57 = v12;
  sub_1000A0760(0, (unint64_t *)&unk_100343A60);
  unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v23 = v20;

  os_log_type_t v24 = (void (*)(void, void))v66;
  sub_1001D7700((uint64_t)v66);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  *(void *)&long long v60 = v22 >> 62;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    id v70 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_1000A2E70(v61, a2, (uint64_t *)&v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 12) = 2048;
    if (v22 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v29 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v69 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Delete local Installed App referenced by %s, count %ld", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v30 = (void (*)(void, void))v66;
    id v66 = *(uint64_t **)(v65 + 8);
    ((void (*)(void, uint64_t))v66)(v30, v4);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    id v66 = *(uint64_t **)(v65 + 8);
    ((void (*)(void, uint64_t))v66)(v24, v4);
  }
  id v33 = v57;
  uint64_t v62 = v4;
  unint64_t v34 = a2;
  uint64_t v35 = (uint64_t)v63;
  unint64_t v68 = v22;
  if ((void)v60)
  {
    swift_bridgeObjectRetain();
    uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v50)
    {
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v36)
      {

LABEL_25:
        swift_bridgeObjectRelease();
        return;
      }
      if (v36 >= 1)
      {
        uint64_t v4 = v62;
        uint64_t v35 = (uint64_t)v63;
LABEL_10:
        uint64_t v37 = 0;
        unint64_t v64 = v68 & 0xC000000000000001;
        v65 += 8;
        *(void *)&long long v31 = 136315138;
        long long v60 = v31;
        os_log_type_t v59 = (char *)&type metadata for Any + 8;
        *(void *)&long long v31 = 138412290;
        long long v58 = v31;
        do
        {
          if (v64) {
            id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v40 = *(id *)(v68 + 8 * v37 + 32);
          }
          id v41 = v40;
          if ([v40 installedLocally])
          {
            sub_1001D7700(v35);
            swift_bridgeObjectRetain_n();
            uint64_t v42 = Logger.logObject.getter();
            uint64_t v43 = v35;
            os_log_type_t v44 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v42, v44))
            {
              uint64_t v45 = swift_slowAlloc();
              id v70 = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v45 = v60;
              swift_bridgeObjectRetain();
              *(void *)(v45 + 4) = sub_1000A2E70(v61, v34, (uint64_t *)&v70);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v42, v44, "Installed App referenced by %s is a local device app. Skipping delete.", (uint8_t *)v45, 0xCu);
              swift_arrayDestroy();
              uint64_t v4 = v62;
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            ((void (*)(uint64_t, uint64_t))v66)(v43, v4);
            uint64_t v35 = v43;
          }
          else
          {
            sub_1001D7700(v67);
            uint64_t v46 = v41;
            uint64_t v38 = Logger.logObject.getter();
            os_log_type_t v47 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v38, v47))
            {
              uint64_t v48 = swift_slowAlloc();
              char v49 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v48 = v58;
              *(void *)(v48 + 4) = v46;
              *char v49 = v46;
              _os_log_impl((void *)&_mh_execute_header, v38, v47, "Deleting installed app object %@", (uint8_t *)v48, 0xCu);
              sub_10009EE78(&qword_100342AB0);
              swift_arrayDestroy();
              uint64_t v4 = v62;
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              uint64_t v38 = v46;
            }

            ((void (*)(uint64_t, uint64_t))v66)(v67, v4);
            id v39 = sub_1001D7640();
            [v39 deleteObject:v46];

            uint64_t v35 = (uint64_t)v63;
          }
          ++v37;
        }
        while (v36 != v37);

        goto LABEL_25;
      }
      __break(1u);
    }
  }
  else
  {
    uint64_t v36 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v36) {
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v51 = v64;
  sub_1001D7700(v64);
  swift_bridgeObjectRetain_n();
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    id v70 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_1000A2E70(v61, a2, (uint64_t *)&v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Installed App referenced by %s has already been deleted. No need to delete", v54, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v55 = v64;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    unint64_t v55 = v51;
  }
  ((void (*)(unint64_t, uint64_t))v66)(v55, v4);
}

uint64_t sub_10019C3D4(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(a1 + 16) || (uint64_t v11 = sub_10010A024(v9, v10), (v12 & 1) == 0))
  {
    long long v77 = 0u;
    long long v78 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_1000A4F78(*(void *)(a1 + 56) + 32 * v11, (uint64_t)&v77);
  swift_bridgeObjectRelease();
  if (!*((void *)&v78 + 1))
  {
LABEL_9:
    sub_1000D3920((uint64_t)&v77);
    goto LABEL_10;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    type metadata accessor for DataStore.DataStoreError(0);
    sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return v5 & 1;
  }
  uint64_t v76 = v6;
  id v84 = v3;
  uint64_t v14 = v82;
  unint64_t v13 = v83;
  id v15 = [self serializableClassName];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  if (v16 == v14 && v18 == v13)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v20)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    if (!*(void *)(a1 + 16)) {
      goto LABEL_50;
    }
    uint64_t v21 = sub_10010A024(0xD000000000000012, 0x8000000100293660);
    if ((v22 & 1) == 0) {
      goto LABEL_50;
    }
    sub_1000A4F78(*(void *)(a1 + 56) + 32 * v21, (uint64_t)&v77);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_50;
    }
    uint64_t v23 = v82;
    uint64_t v5 = v83;
    id v24 = [self serializableClassName];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    if (v23 == v25 && v5 == v27)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v28 = (uint64_t)v84;
    }
    else
    {
      char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v28 = (uint64_t)v84;
      if ((v47 & 1) == 0) {
        goto LABEL_50;
      }
    }
    if (*(void *)(a1 + 16))
    {
      uint64_t v48 = sub_10010A024(0x7372657375, 0xE500000000000000);
      if (v49)
      {
        sub_1000A4F78(*(void *)(a1 + 56) + 32 * v48, (uint64_t)&v77);
        sub_10009EE78(&qword_100343A78);
        if (swift_dynamicCast())
        {
          unint64_t v50 = v82;
          id v51 = sub_1001D7640();
          __chkstk_darwin(v51);
          *(&v75 - 2) = v28;
          *(&v75 - 1) = 0;
          NSManagedObjectContext.performAndWait<A>(_:)();
          if (v2)
          {
            swift_bridgeObjectRelease();
LABEL_38:

            return v5 & 1;
          }

          id v63 = v80;
          uint64_t v62 = v81;
          id v64 = (id)v77;
          char v65 = sub_1000CA324((uint64_t)v64, v50);

          if (v65)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_43;
          }
          id v69 = [objc_allocWithZone((Class)NSNumber) initWithInteger:0];
          id v84 = v63;
          id v70 = v69;
          LOBYTE(v5) = sub_1000CA324((uint64_t)v69, v50);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_61:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v5 & 1;
        }
      }
    }
LABEL_50:
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  id v29 = [self serializableClassName];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  if (v30 == v14 && v32 == v13)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v33)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    if (!*(void *)(a1 + 16)) {
      goto LABEL_50;
    }
    uint64_t v34 = sub_10010A024(0x617A696E6167726FLL, 0xEC0000006E6F6974);
    if ((v35 & 1) == 0) {
      goto LABEL_50;
    }
    sub_1000A4F78(*(void *)(a1 + 56) + 32 * v34, (uint64_t)&v77);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_50;
    }
    uint64_t v37 = v82;
    unint64_t v36 = v83;
    id v38 = [self serializableClassName];
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;

    if (v37 == v39 && v36 == v41)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v42 = (uint64_t)v84;
    }
    else
    {
      char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v42 = (uint64_t)v84;
      if ((v58 & 1) == 0) {
        goto LABEL_50;
      }
    }
    if (*(void *)(a1 + 16))
    {
      uint64_t v59 = sub_10010A024(1919251317, 0xE400000000000000);
      if (v60)
      {
        sub_1000A4F78(*(void *)(a1 + 56) + 32 * v59, (uint64_t)&v77);
        LOBYTE(v5) = sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
        if (swift_dynamicCast())
        {
          uint64_t v61 = (void *)v82;
          id v51 = sub_1001D7640();
          __chkstk_darwin(v51);
          *(&v75 - 2) = v42;
          *(&v75 - 1) = 0;
          NSManagedObjectContext.performAndWait<A>(_:)();
          if (v2)
          {

            goto LABEL_38;
          }

          uint64_t v76 = v79;
          uint64_t v71 = v81;
          id v84 = v80;
          id v72 = (id)v77;
          char v73 = static NSObject.== infix(_:_:)();

          if (v73)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_43;
          }
          id v74 = [objc_allocWithZone((Class)NSNumber) initWithInteger:0];
          LOBYTE(v5) = static NSObject.== infix(_:_:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_61;
        }
      }
    }
    goto LABEL_50;
  }
  id v43 = [self serializableClassName];
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v45;

  if (v44 == v14 && v46 == v13) {
    goto LABEL_31;
  }
  char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v52) {
    goto LABEL_43;
  }
  id v53 = [self serializableClassName];
  uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v56 = v55;

  if (v54 == v14 && v56 == v13)
  {
LABEL_31:
    swift_bridgeObjectRelease_n();
    LOBYTE(v5) = 1;
    return v5 & 1;
  }
  uint64_t v75 = v14;
  char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v57)
  {
LABEL_43:
    swift_bridgeObjectRelease();
    LOBYTE(v5) = 1;
    return v5 & 1;
  }
  sub_1001D7700((uint64_t)v8);
  swift_bridgeObjectRetain();
  id v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v66, v67))
  {
    unint64_t v68 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v77 = swift_slowAlloc();
    *(_DWORD *)unint64_t v68 = 136315138;
    id v84 = v68 + 4;
    swift_bridgeObjectRetain();
    uint64_t v82 = sub_1000A2E70(v75, v13, (uint64_t *)&v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "Class type in dictionary respresentation %s is not expected. Do not import.", v68, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v76 + 8))(v8, v5);
  LOBYTE(v5) = 0;
  return v5 & 1;
}

id sub_10019CE3C(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(a1 + 16) || (uint64_t v4 = sub_10010A024(v2, v3), (v5 & 1) == 0))
  {
    long long v16 = 0u;
    long long v17 = 0u;
    swift_bridgeObjectRelease();
LABEL_14:
    __break(1u);
  }
  sub_1000A4F78(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  if (!*((void *)&v17 + 1)) {
    goto LABEL_14;
  }
  sub_1000B8B44(&v16, v18);
  swift_dynamicCast();
  uint64_t v6 = sub_10019D378(v14, v15);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    uint64_t v7 = 0;
    goto LABEL_9;
  }
  uint64_t v7 = swift_dynamicCastTypeToObjCProtocolConditional();
  if (!v7)
  {
LABEL_9:
    id v11 = (id)type metadata accessor for DataStore.DataStoreError(v7);
    sub_10019D114((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
LABEL_10:
    swift_willThrow();
    return v11;
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_10023BA40(a1);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = sub_1001D7640();
  *(void *)&v18[0] = 0;
  id v11 = [ObjCClassFromMetadata fetchOrCreateWithDictionaryRepresentation:isa inContext:v10 error:v18];

  if (!v11)
  {
    id v11 = *(id *)&v18[0];
    _convertNSErrorToError(_:)();

    goto LABEL_10;
  }
  id v12 = *(id *)&v18[0];
  return v11;
}

void sub_10019D08C()
{
  sub_1001944E4(*(unsigned __int8 *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

void sub_10019D0AC(void *a1@<X8>)
{
  sub_1000D33B8(*(void *)(v1 + 24), a1);
}

unint64_t sub_10019D0C8()
{
  unint64_t result = qword_100341D70;
  if (!qword_100341D70)
  {
    type metadata accessor for CocoaError.Code();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100341D70);
  }
  return result;
}

uint64_t sub_10019D114(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10019D15C(void *a1, uint64_t a2)
{
  uint64_t v4 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v19 = 0;
  id v6 = [v4 dataWithPropertyList:isa format:200 options:0 error:&v19];

  id v7 = (id)v19;
  if (!v6)
  {
    long long v16 = v7;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a2 + 16) && (uint64_t v13 = sub_10010A024(v11, v12), (v14 & 1) != 0))
  {
    sub_1000A4F78(*(void *)(a2 + 56) + 32 * v13, (uint64_t)&v19);
  }
  else
  {
    long long v19 = 0u;
    long long v20 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v20 + 1))
  {
    sub_1000D3920((uint64_t)&v19);
    goto LABEL_11;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    NSString v15 = 0;
    goto LABEL_12;
  }
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_12:
  [a1 setIdentifier:v15];

  [a1 setActivationType:1];
  Class v18 = Data._bridgeToObjectiveC()().super.isa;
  [a1 setActivationPlist:v18];

  return sub_1000A0168(v8, v10);
}

uint64_t sub_10019D378(uint64_t a1, uint64_t a2)
{
  id v4 = [self serializableClassName];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  if (v5 == a1 && v7 == a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v9)
  {
LABEL_15:
    long long v20 = (unint64_t *)&unk_100342BB0;
    return sub_1000A0760(0, v20);
  }
  id v10 = [self serializableClassName];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  if (v11 == a1 && v13 == a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v15)
  {
LABEL_18:
    long long v20 = (unint64_t *)&unk_100342B80;
    return sub_1000A0760(0, v20);
  }
  id v16 = [self serializableClassName];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  if (v17 == a1 && v19 == a2)
  {
    swift_bridgeObjectRelease();
LABEL_20:
    long long v20 = &qword_100343A70;
    return sub_1000A0760(0, v20);
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v22) {
    goto LABEL_20;
  }
  id v23 = [self serializableClassName];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;

  if (v24 == a1 && v26 == a2)
  {
    swift_bridgeObjectRelease();
LABEL_25:
    long long v20 = &qword_1003415E0;
    return sub_1000A0760(0, v20);
  }
  char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v27) {
    goto LABEL_25;
  }
  id v28 = [self serializableClassName];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  if (v29 == a1 && v31 == a2)
  {
    swift_bridgeObjectRelease();
LABEL_30:
    long long v20 = (unint64_t *)&unk_100343A60;
    return sub_1000A0760(0, v20);
  }
  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v32) {
    goto LABEL_30;
  }
  id v33 = [self serializableClassName];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  if (v34 == a1 && v36 == a2)
  {
    swift_bridgeObjectRelease();
LABEL_35:
    long long v20 = &qword_100343A58;
    return sub_1000A0760(0, v20);
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v37) {
    goto LABEL_35;
  }
  id v38 = [self serializableClassName];
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v41 = v40;

  if (v39 == a1 && v41 == a2)
  {
    swift_bridgeObjectRelease();
LABEL_40:
    long long v20 = &qword_100343A50;
    return sub_1000A0760(0, v20);
  }
  char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v42) {
    goto LABEL_40;
  }
  id v43 = [self serializableClassName];
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v45;

  if (v44 == a1 && v46 == a2)
  {
    swift_bridgeObjectRelease();
LABEL_45:
    long long v20 = &qword_100343A48;
    return sub_1000A0760(0, v20);
  }
  char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v47) {
    goto LABEL_45;
  }
  return 0;
}

void sub_10019D7EC(void *a1@<X8>)
{
  sub_1000D2F58(*(void *)(v1 + 24), a1);
}

unint64_t sub_10019D808()
{
  unint64_t result = qword_100343B80;
  if (!qword_100343B80)
  {
    sub_1000A0760(255, &qword_1003431E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100343B80);
  }
  return result;
}

uint64_t sub_10019D864(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10019D870(void *a1@<X8>)
{
}

void sub_10019D888(void *a1@<X8>)
{
}

void sub_10019D8A0()
{
}

uint64_t sub_10019D8B8()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Repairing restrictions blueprint.", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  uint64_t result = NSManagedObjectContext.performAndWait<A>(_:)();
  if (!v0)
  {
    uint64_t v7 = __chkstk_darwin(result);
    __chkstk_darwin(v7);
    uint64_t v8 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v9 = __chkstk_darwin(v8);
    __chkstk_darwin(v9);
    uint64_t v10 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v11 = __chkstk_darwin(v10);
    __chkstk_darwin(v11);
    uint64_t v12 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v13 = __chkstk_darwin(v12);
    __chkstk_darwin(v13);
    uint64_t v14 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v15 = __chkstk_darwin(v14);
    __chkstk_darwin(v15);
    uint64_t v16 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v17 = __chkstk_darwin(v16);
    __chkstk_darwin(v17);
    uint64_t v18 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v19 = __chkstk_darwin(v18);
    __chkstk_darwin(v19);
    uint64_t v20 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v21 = __chkstk_darwin(v20);
    __chkstk_darwin(v21);
    uint64_t v22 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v23 = __chkstk_darwin(v22);
    __chkstk_darwin(v23);
    uint64_t v24 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v25 = __chkstk_darwin(v24);
    __chkstk_darwin(v25);
    uint64_t v26 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v27 = __chkstk_darwin(v26);
    __chkstk_darwin(v27);
    uint64_t v28 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v29 = __chkstk_darwin(v28);
    __chkstk_darwin(v29);
    uint64_t v30 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v31 = __chkstk_darwin(v30);
    __chkstk_darwin(v31);
    uint64_t v32 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v33 = __chkstk_darwin(v32);
    __chkstk_darwin(v33);
    uint64_t v34 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v35 = __chkstk_darwin(v34);
    __chkstk_darwin(v35);
    uint64_t v36 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v37 = __chkstk_darwin(v36);
    __chkstk_darwin(v37);
    uint64_t v38 = NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v39 = __chkstk_darwin(v38);
    __chkstk_darwin(v39);
    return NSManagedObjectContext.performAndWait<A>(_:)();
  }
  return result;
}

uint64_t sub_10019E3CC()
{
  return type metadata accessor for Restrictions();
}

uint64_t type metadata accessor for Restrictions()
{
  uint64_t result = qword_100343BC8;
  if (!qword_100343BC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10019E420()
{
  sub_10009EE78(&qword_100340F40);
  uint64_t v0 = type metadata accessor for Calendar.Component();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002874C0;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v6(v5, enum case for Calendar.Component.year(_:), v0);
  v6(v5 + v2, enum case for Calendar.Component.month(_:), v0);
  v6(v5 + 2 * v2, enum case for Calendar.Component.day(_:), v0);
  v6(v5 + 3 * v2, enum case for Calendar.Component.hour(_:), v0);
  v6(v5 + 4 * v2, enum case for Calendar.Component.minute(_:), v0);
  v6(v5 + 5 * v2, enum case for Calendar.Component.second(_:), v0);
  v6(v5 + 6 * v2, enum case for Calendar.Component.nanosecond(_:), v0);
  uint64_t v7 = sub_10009EFAC(v4);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t result = swift_deallocClassInstance();
  qword_100343C80 = (uint64_t)v7;
  return result;
}

uint64_t sub_10019E61C()
{
  type metadata accessor for LocalDevice();
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t result = Logger.init(subsystem:category:)();
  qword_10034B370 = v0;
  return result;
}

uint64_t sub_10019E6A0()
{
  uint64_t v0 = type metadata accessor for DateComponents();
  sub_10009EEBC(v0, qword_100343C88);
  sub_10009DA74(v0, (uint64_t)qword_100343C88);
  uint64_t v1 = sub_10009EE78(&qword_100341960);
  __chkstk_darwin(v1 - 8);
  unint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Calendar();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = sub_10009EE78((uint64_t *)&unk_100340F30);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TimeZone();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
}

uint64_t sub_10019E894(char a1, char a2, char a3)
{
  *(void *)(v4 + 16) = v3;
  *(unsigned char *)(v4 + 90) = a3;
  *(unsigned char *)(v4 + 89) = a2;
  *(unsigned char *)(v4 + 88) = a1;
  uint64_t v5 = type metadata accessor for DeviceActivityCenter();
  *(void *)(v4 + 24) = v5;
  *(void *)(v4 + 32) = *(void *)(v5 - 8);
  *(void *)(v4 + 40) = swift_task_alloc();
  return _swift_task_switch(sub_10019E960, v3, 0);
}

uint64_t sub_10019E960()
{
  char v1 = sub_1001AF2FC();
  if ((v1 & 1) != *(unsigned char *)(v0 + 88))
  {
    id v3 = [self standardUserDefaults];
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    [v3 setValue:isa forKey:@"ScreenTimeEnabled"];

    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Posting management state did change notification.", v7, 2u);
      swift_slowDealloc();
    }

    notify_post(STManagementStateStateDidChange);
    if (*(unsigned char *)(v0 + 88)) {
      goto LABEL_9;
    }
LABEL_14:
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v8;
    void *v8 = v0;
    v8[1] = sub_10019EEC8;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)();
  }
  if (*(unsigned char *)(v0 + 90) == 1)
  {
    if (*(unsigned char *)(v0 + 88))
    {
LABEL_9:
      return _swift_task_switch(sub_10019EBE8, 0, 0);
    }
    goto LABEL_14;
  }
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10019EBE8()
{
  BOOL v1 = (*(unsigned char *)(v0 + 89) & 1) == 0;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *(void *)(v2 + 16) = v1;
  id v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *id v3 = v0;
  v3[1] = sub_10019ECDC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_10019ECDC()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10019EE5C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10019EDF8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10019EDF8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10019EE5C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10019EEC8()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10019F10C;
  }
  else {
    uint64_t v2 = sub_10019EFDC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10019EFDC()
{
  return _swift_task_switch(sub_10019EFF8, *(void *)(v0 + 16), 0);
}

uint64_t sub_10019EFF8()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  type metadata accessor for LocalRestrictions();
  swift_allocObject();
  LocalRestrictions.init()();
  dispatch thunk of LocalRestrictions.deleteAppAndWebsiteActivityStores()();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  DeviceActivityCenter.init(clientIdentifier:extensionIdentifier:)();
  DeviceActivityCenter.stopMonitoring(_:)((Swift::OpaquePointer)_swiftEmptyArrayStorage);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10019F10C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10019F170(char a1)
{
  *(void *)(v2 + 88) = v1;
  *(unsigned char *)(v2 + 364) = a1;
  uint64_t v3 = type metadata accessor for OSSignpostError();
  *(void *)(v2 + 96) = v3;
  *(void *)(v2 + 104) = *(void *)(v3 - 8);
  *(void *)(v2 + 112) = swift_task_alloc();
  type metadata accessor for LocalDeviceManagement();
  *(void *)(v2 + 120) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DeviceActivityCenter();
  *(void *)(v2 + 128) = v4;
  *(void *)(v2 + 136) = *(void *)(v4 - 8);
  *(void *)(v2 + 144) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OSSignpostID();
  *(void *)(v2 + 152) = v5;
  *(void *)(v2 + 160) = *(void *)(v5 - 8);
  *(void *)(v2 + 168) = swift_task_alloc();
  *(void *)(v2 + 176) = swift_task_alloc();
  *(void *)(v2 + 184) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v2 + 192) = v6;
  *(void *)(v2 + 200) = *(void *)(v6 - 8);
  *(void *)(v2 + 208) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OSSignposter();
  *(void *)(v2 + 216) = v7;
  *(void *)(v2 + 224) = *(void *)(v7 - 8);
  *(void *)(v2 + 232) = swift_task_alloc();
  return _swift_task_switch(sub_10019F3EC, v1, 0);
}

uint64_t sub_10019F3EC()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = OBJC_IVAR____TtC15ScreenTimeAgent11LocalDevice_logger;
  *(void *)(v0 + 240) = OBJC_IVAR____TtC15ScreenTimeAgent11LocalDevice_logger;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4 + v5, v3);
  OSSignposter.init(logger:)();
  static OSSignpostID.exclusive.getter();
  uint64_t v6 = OSSignposter.logHandle.getter();
  os_signpost_type_t v7 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v8 = *(void *)(v0 + 176);
    uint64_t v9 = *(void *)(v0 + 152);
    uint64_t v10 = *(void *)(v0 + 160);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    unint64_t v12 = (v10 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v11(v8, *(void *)(v0 + 184), v9);
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    os_signpost_id_t v14 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, v7, v14, "st-daemon-localdevice-update", "", v13, 2u);
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 160);

    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    unint64_t v12 = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  }
  uint64_t v16 = *(void *)(v0 + 176);
  uint64_t v17 = *(void *)(v0 + 184);
  uint64_t v18 = *(void *)(v0 + 152);
  uint64_t v19 = *(void *)(v0 + 160);
  *(void *)(v0 + 248) = v11;
  *(void *)(v0 + 256) = v12;
  v11(v16, v17, v18);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  *(void *)(v0 + 264) = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  *(void *)(v0 + 272) = v20;
  *(void *)(v0 + 280) = (v19 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v20(v17, v18);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Updating local device from datastore", v23, 2u);
    swift_slowDealloc();
  }

  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v24 = *(void *)(v0 + 192);
  uint64_t v25 = *(void *)(v0 + 200);
  uint64_t v26 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v27 = (void *)swift_allocObject();
  *(void *)(v0 + 288) = v27;
  v27[3] = 0;
  v27[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))((uint64_t)v27 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v24);
  if (byte_10034B308 != 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  v27[2] = v26;
  *(unsigned char *)(v0 + 360) = 0;
  id v28 = v26;
  id v29 = sub_1001D7640();
  uint64_t v30 = (void *)swift_task_alloc();
  v30[2] = v27;
  v30[3] = 0;
  v30[4] = v0 + 360;
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_task_dealloc();
  char v31 = *(unsigned char *)(v0 + 360);
  *(unsigned char *)(v0 + 365) = v31;
  id v32 = sub_1001D7640();
  uint64_t v33 = swift_task_alloc();
  *(void *)(v33 + 16) = 0;
  *(void *)(v33 + 24) = v27;
  *(unsigned char *)(v33 + 32) = v31;
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_task_dealloc();
  char v34 = *(unsigned char *)(v0 + 362);
  id v35 = sub_1001D7640();
  uint64_t v36 = swift_task_alloc();
  *(void *)(v36 + 16) = v27;
  *(void *)(v36 + 24) = 0;
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_task_dealloc();
  char v38 = *(unsigned char *)(v0 + 361);
  uint64_t v39 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v39;
  void *v39 = v0;
  v39[1] = sub_10019FA04;
  char v40 = *(unsigned char *)(v0 + 364);
  return sub_10019E894(v34, v38, v40);
}

uint64_t sub_10019FA04()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v4 = sub_1001A17CC;
  }
  else {
    uint64_t v4 = sub_10019FB30;
  }
  return _swift_task_switch(v4, v3, 0);
}

void sub_10019FB30()
{
  type metadata accessor for LocalRestrictions();
  swift_allocObject();
  uint64_t v1 = LocalRestrictions.init()();
  *(void *)(v0 + 312) = v1;
  uint64_t v2 = type metadata accessor for ScreenTimeFeatureFlags();
  *(void *)(v0 + 40) = v2;
  *(void *)(v0 + 48) = sub_1001B01A4(&qword_100341D38, (void (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags);
  uint64_t v3 = sub_1000C532C((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v3, enum case for ScreenTimeFeatureFlags.screentimeAPI(_:), v2);
  LOBYTE(v2) = isFeatureEnabled(_:)();
  sub_1000A4F28(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 304);
  if (v2)
  {
    sub_1001A36B8(*(void *)(v0 + 288), v1);
    uint64_t v5 = v4;
    uint64_t v6 = *(id **)(v0 + 288);
    if (!v5)
    {
      sub_1001A3A30();
      sub_1001AF44C();
      char v18 = *(unsigned char *)(v0 + 365);
      uint64_t v19 = *(void *)(v0 + 288);
      id v20 = sub_1001D7640();
      uint64_t v21 = swift_task_alloc();
      *(void *)(v21 + 16) = 0;
      *(void *)(v21 + 24) = v19;
      *(unsigned char *)(v21 + 32) = v18;
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_task_dealloc();
      if (*(unsigned char *)(v0 + 363))
      {
        sub_1001A284C(*(void *)(v0 + 288), v1);
        sub_1001A41DC(*(void *)(v0 + 288));
        uint64_t v22 = *(void *)(v0 + 288);
        uint64_t v23 = *(void *)(v0 + 144);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        DeviceActivityCenter.init(clientIdentifier:extensionIdentifier:)();
        DeviceActivityCenter.allowShortIntervals.setter();
        sub_1001A6538(v22, v23, v1);
        sub_1001A5690(*(void *)(v0 + 288), *(void *)(v0 + 144));
        sub_1001A44F8(*(char **)(v0 + 288), *(void *)(v0 + 144));
        sub_1001A79D4(*(void *)(v0 + 288), *(void *)(v0 + 144), v1);
        (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 128));
      }
      sub_1001A3318();
      sub_1001A3D70();
      uint64_t v24 = (void *)sub_1001AF58C();
      uint64_t v25 = *(void *)(v0 + 288);
      id v26 = sub_1001D7640();
      uint64_t v27 = swift_task_alloc();
      *(void *)(v27 + 16) = v25;
      *(void *)(v27 + 24) = v24;
      sub_10009EE78(&qword_100342418);
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_task_dealloc();
      sub_1001AF8C4(*(void *)(v0 + 80));
      swift_bridgeObjectRelease();
      id v28 = sub_1001D7910();
      id v29 = sub_1001D75D4();
      sub_10009EE78(&qword_1003415D8);
      uint64_t v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_100286230;
      *(void *)(v30 + 56) = sub_1000A0760(0, (unint64_t *)&qword_100342B90);
      *(void *)(v30 + 32) = v28;
      id v31 = v28;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v33 = [v29 currentPersistentHistoryTokenFromStores:isa];

      if (!v33)
      {
        __break(1u);
        return;
      }
      sub_1001AD2D8(v33);

      sub_1002379D8(0);
      char v34 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v55 = static os_signpost_type_t.end.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        uint64_t v35 = *(void *)(v0 + 104);
        uint64_t v36 = *(void *)(v0 + 112);
        uint64_t v37 = *(void *)(v0 + 96);
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        if ((*(unsigned int (**)(uint64_t, uint64_t))(v35 + 88))(v36, v37) == enum case for OSSignpostError.doubleEnd(_:))
        {
          char v38 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
          char v38 = "";
        }
        format = (char *)v38;
        id v43 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
        uint64_t v44 = *(void *)(v0 + 224);
        uint64_t v53 = *(void *)(v0 + 232);
        uint64_t v51 = *(void *)(v0 + 216);
        uint64_t v46 = *(void *)(v0 + 168);
        uint64_t v45 = *(void *)(v0 + 176);
        uint64_t v47 = *(void *)(v0 + 152);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248))(v45, v46, v47);
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        os_signpost_id_t v49 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v34, v55, v49, "st-daemon-localdevice-update", format, v48, 2u);
        swift_slowDealloc();

        swift_release();
        swift_release();

        v43(v46, v47);
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v53, v51);
        swift_release();
        v43(v45, v47);
      }
      else
      {
        uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
        uint64_t v40 = *(void *)(v0 + 224);
        uint64_t v54 = *(void *)(v0 + 232);
        uint64_t v52 = *(void *)(v0 + 216);
        uint64_t v41 = *(void *)(v0 + 168);
        uint64_t v42 = *(void *)(v0 + 152);

        swift_release();
        swift_release();

        v39(v41, v42);
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v54, v52);
        swift_release();
      }
      goto LABEL_7;
    }
    (*(void (**)(void, void))(*(void *)(v0 + 224) + 8))(*(void *)(v0 + 232), *(void *)(v0 + 216));
    swift_release();
    swift_release();
    swift_setDeallocating();

    sub_1000A4FD8((uint64_t)v6 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
LABEL_6:
    swift_deallocClassInstance();
LABEL_7:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(void (**)(void))(v0 + 8);
    v15();
    return;
  }
  char v7 = *(unsigned char *)(v0 + 365);
  uint64_t v8 = *(void *)(v0 + 288);
  *(void *)(v0 + 56) = _swiftEmptyArrayStorage;
  id v9 = sub_1001D7640();
  uint64_t v10 = swift_task_alloc();
  *(void *)(v10 + 16) = v8;
  *(void *)(v10 + 24) = 0;
  *(unsigned char *)(v10 + 32) = v7;
  *(void *)(v10 + 40) = v0 + 56;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v4)
  {
    uint64_t v11 = *(id **)(v0 + 288);
    uint64_t v13 = *(void *)(v0 + 224);
    uint64_t v12 = *(void *)(v0 + 232);
    uint64_t v14 = *(void *)(v0 + 216);

    swift_task_dealloc();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_release();
    swift_release();
    swift_setDeallocating();

    sub_1000A4FD8((uint64_t)v11 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
    goto LABEL_6;
  }

  swift_task_dealloc();
  uint64_t v16 = *(void *)(v0 + 56);
  *(void *)(v0 + 320) = v16;
  Logger.init(subsystem:category:)();
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v17;
  void *v17 = v0;
  v17[1] = sub_1001A0BF8;
  sub_1000C7964(v16);
}

uint64_t sub_1001A0BF8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 88);
    uint64_t v4 = sub_1001A1930;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 88);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1001A0D20;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

void sub_1001A0D20()
{
  uint64_t v1 = *(void *)(v0 + 336);
  sub_1001B0244(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for LocalDeviceManagement);
  sub_1001A3318();
  if (v1)
  {
    uint64_t v2 = *(id **)(v0 + 288);
    (*(void (**)(void, void))(*(void *)(v0 + 224) + 8))(*(void *)(v0 + 232), *(void *)(v0 + 216));
    swift_release();
    swift_setDeallocating();

    sub_1000A4FD8((uint64_t)v2 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
    swift_deallocClassInstance();
    swift_release();
  }
  else
  {
    sub_1001A3D70();
    uint64_t v4 = (void *)sub_1001AF58C();
    uint64_t v5 = *(void *)(v0 + 288);
    id v6 = sub_1001D7640();
    uint64_t v7 = swift_task_alloc();
    *(void *)(v7 + 16) = v5;
    *(void *)(v7 + 24) = v4;
    sub_10009EE78(&qword_100342418);
    NSManagedObjectContext.performAndWait<A>(_:)();

    swift_task_dealloc();
    sub_1001AF8C4(*(void *)(v0 + 80));
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_1001D7910();
    id v9 = sub_1001D75D4();
    sub_10009EE78(&qword_1003415D8);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_100286230;
    *(void *)(v10 + 56) = sub_1000A0760(0, (unint64_t *)&qword_100342B90);
    *(void *)(v10 + 32) = v8;
    id v11 = v8;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v13 = [v9 currentPersistentHistoryTokenFromStores:isa];

    if (!v13)
    {
      __break(1u);
      return;
    }
    sub_1001AD2D8(v13);

    sub_1002379D8(0);
    uint64_t v14 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v35 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v15 = *(void *)(v0 + 104);
      uint64_t v16 = *(void *)(v0 + 112);
      uint64_t v17 = *(void *)(v0 + 96);
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v15 + 88))(v16, v17) == enum case for OSSignpostError.doubleEnd(_:))
      {
        char v18 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
        char v18 = "";
      }
      format = (char *)v18;
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
      uint64_t v25 = *(void *)(v0 + 224);
      uint64_t v33 = *(void *)(v0 + 232);
      uint64_t v32 = *(void *)(v0 + 216);
      uint64_t v27 = *(void *)(v0 + 168);
      uint64_t v26 = *(void *)(v0 + 176);
      uint64_t v28 = *(void *)(v0 + 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248))(v26, v27, v28);
      id v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v29 = 0;
      os_signpost_id_t v30 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, v35, v30, "st-daemon-localdevice-update", format, v29, 2u);
      swift_slowDealloc();
      swift_release();
      swift_release();

      v24(v27, v28);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v33, v32);
      swift_release();
      v24(v26, v28);
    }
    else
    {
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
      uint64_t v20 = *(void *)(v0 + 224);
      uint64_t v34 = *(void *)(v0 + 232);
      uint64_t v21 = *(void *)(v0 + 216);
      uint64_t v22 = *(void *)(v0 + 168);
      uint64_t v23 = *(void *)(v0 + 152);
      swift_release();
      swift_release();

      v19(v22, v23);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v34, v21);
      swift_release();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(void (**)(void))(v0 + 8);
  v3();
}

uint64_t sub_1001A17CC()
{
  uint64_t v1 = (id *)v0[36];
  uint64_t v3 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v4 = v0[27];
  swift_setDeallocating();

  sub_1000A4FD8((uint64_t)v1 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
  swift_deallocClassInstance();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1001A1930()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DMD set declarations failed with: %{public}@. Will retry.", v3, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  id v6 = (void *)swift_task_alloc();
  v0[43] = v6;
  void *v6 = v0;
  v6[1] = sub_1001A1B1C;
  uint64_t v7 = v0[40];
  return sub_1000C7964(v7);
}

uint64_t sub_1001A1B1C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 352) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 88);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v4 = sub_1001A2718;
  }
  else {
    uint64_t v4 = sub_1001A1C64;
  }
  return _swift_task_switch(v4, v3, 0);
}

void sub_1001A1C64()
{
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 352);
  sub_1001B0244(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for LocalDeviceManagement);
  sub_1001A3318();
  if (v1)
  {
    uint64_t v2 = *(id **)(v0 + 288);
    (*(void (**)(void, void))(*(void *)(v0 + 224) + 8))(*(void *)(v0 + 232), *(void *)(v0 + 216));
    swift_release();
    swift_setDeallocating();

    sub_1000A4FD8((uint64_t)v2 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
    swift_deallocClassInstance();
    swift_release();
  }
  else
  {
    sub_1001A3D70();
    uint64_t v4 = (void *)sub_1001AF58C();
    uint64_t v5 = *(void *)(v0 + 288);
    id v6 = sub_1001D7640();
    uint64_t v7 = swift_task_alloc();
    *(void *)(v7 + 16) = v5;
    *(void *)(v7 + 24) = v4;
    sub_10009EE78(&qword_100342418);
    NSManagedObjectContext.performAndWait<A>(_:)();

    swift_task_dealloc();
    sub_1001AF8C4(*(void *)(v0 + 80));
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_1001D7910();
    id v9 = sub_1001D75D4();
    sub_10009EE78(&qword_1003415D8);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_100286230;
    *(void *)(v10 + 56) = sub_1000A0760(0, (unint64_t *)&qword_100342B90);
    *(void *)(v10 + 32) = v8;
    id v11 = v8;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v13 = [v9 currentPersistentHistoryTokenFromStores:isa];

    if (!v13)
    {
      __break(1u);
      return;
    }
    sub_1001AD2D8(v13);

    sub_1002379D8(0);
    uint64_t v14 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v35 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v15 = *(void *)(v0 + 104);
      uint64_t v16 = *(void *)(v0 + 112);
      uint64_t v17 = *(void *)(v0 + 96);
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v15 + 88))(v16, v17) == enum case for OSSignpostError.doubleEnd(_:))
      {
        char v18 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
        char v18 = "";
      }
      format = (char *)v18;
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
      uint64_t v25 = *(void *)(v0 + 224);
      uint64_t v33 = *(void *)(v0 + 232);
      uint64_t v32 = *(void *)(v0 + 216);
      uint64_t v27 = *(void *)(v0 + 168);
      uint64_t v26 = *(void *)(v0 + 176);
      uint64_t v28 = *(void *)(v0 + 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248))(v26, v27, v28);
      id v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v29 = 0;
      os_signpost_id_t v30 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, v35, v30, "st-daemon-localdevice-update", format, v29, 2u);
      swift_slowDealloc();
      swift_release();
      swift_release();

      v24(v27, v28);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v33, v32);
      swift_release();
      v24(v26, v28);
    }
    else
    {
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
      uint64_t v20 = *(void *)(v0 + 224);
      uint64_t v34 = *(void *)(v0 + 232);
      uint64_t v21 = *(void *)(v0 + 216);
      uint64_t v22 = *(void *)(v0 + 168);
      uint64_t v23 = *(void *)(v0 + 152);
      swift_release();
      swift_release();

      v19(v22, v23);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v34, v21);
      swift_release();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(void (**)(void))(v0 + 8);
  v3();
}

uint64_t sub_1001A2718()
{
  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[15];
  swift_release();
  swift_release();
  swift_release();
  swift_errorRelease();
  sub_1001B0244(v4, (uint64_t (*)(void))type metadata accessor for LocalDeviceManagement);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

void sub_1001A284C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[3] = v2 + OBJC_IVAR____TtC15ScreenTimeAgent11LocalDevice_logger;
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Applying the always allowed list.", v11, 2u);
    swift_slowDealloc();
  }

  LOBYTE(v26) = 0;
  id v12 = sub_1001D7640();
  __chkstk_darwin(v12);
  v25[-4] = a1;
  v25[-3] = 0;
  v25[-2] = &v26;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (!v3)
  {
    v25[2] = a2;

    char v13 = (char)v26;
    id v14 = [self registeredIdentifier];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    id v18 = sub_1001D7640();
    v25[1] = v25;
    __chkstk_darwin(v18);
    v25[-6] = v15;
    v25[-5] = v17;
    v25[-4] = a1;
    v25[-3] = 0;
    LOBYTE(v25[-2]) = v13;
    sub_1000A0760(0, &qword_1003415C8);
    NSManagedObjectContext.performAndWait<A>(_:)();
    swift_bridgeObjectRelease();

    uint64_t v23 = v26;
    self;
    swift_dynamicCastObjCClassUnconditional();
    id v24 = v23;
    dispatch thunk of LocalRestrictions.updateAlwaysAllow(with:)();

    return;
  }

  uint64_t v26 = v3;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  if (!swift_dynamicCast()) {
    goto LABEL_12;
  }
  if (swift_getEnumCaseMultiPayload() != 26)
  {
    sub_1001B0244((uint64_t)v8, type metadata accessor for DataStore.DataStoreError);
LABEL_12:
    swift_errorRelease();
    return;
  }
  swift_errorRelease();
  uint64_t v19 = (void *)*((void *)v8 + 2);
  swift_bridgeObjectRelease();

  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "No always allow blueprint exists for the local user. This might be intentional. The UIs have to create the blueprint. Applying default always allow list.", v22, 2u);
    swift_slowDealloc();
  }

  dispatch thunk of LocalRestrictions.updateAlwaysAllow(with:)();
  swift_errorRelease();
}

void sub_1001A2C38(id *a1)
{
  id v1 = *a1;
  id v2 = [*a1 changedObjectID];
  id v3 = [v2 entity];

  id v4 = [v3 name];
  if (v4)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  sub_1000A0760(0, (unint64_t *)&unk_100342B80);
  id v8 = [(id)swift_getObjCClassFromMetadata() entityName];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  if (!v7)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    id v13 = [v1 changedObjectID];
    id v14 = [v13 entity];

    id v15 = [v14 name];
    if (v15)
    {
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v18 = 0;
    }
    sub_1000A0760(0, &qword_100343A70);
    id v19 = [(id)swift_getObjCClassFromMetadata() entityName];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    if (!v18)
    {
      swift_bridgeObjectRelease();
      return;
    }
    if (v16 != v20 || v18 != v22)
    {
      char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v54 & 1) == 0) {
        return;
      }
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v5 != v9 || v7 != v11)
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_17:
  id v23 = [v1 updatedProperties];
  if (!v23) {
    return;
  }
  id v24 = v23;
  sub_1000A0760(0, &qword_100343EB8);
  sub_1001B02A4(&qword_100343EC0, &qword_100343EB8);
  uint64_t v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v25 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    Set.Iterator.init(_cocoa:)();
    uint64_t v25 = v57;
    uint64_t v56 = v58;
    uint64_t v26 = v59;
    uint64_t v27 = v60;
    unint64_t v28 = v61;
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v29 = -1 << *(unsigned char *)(v25 + 32);
    uint64_t v56 = v25 + 56;
    uint64_t v26 = ~v29;
    uint64_t v30 = -v29;
    if (v30 < 64) {
      uint64_t v31 = ~(-1 << v30);
    }
    else {
      uint64_t v31 = -1;
    }
    unint64_t v28 = v31 & *(void *)(v25 + 56);
  }
  int64_t v55 = (unint64_t)(v26 + 64) >> 6;
  while (1)
  {
    uint64_t v33 = v27;
    if ((v25 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_62;
    }
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v36 = v62;
    swift_unknownObjectRelease();
    if (!v62) {
      goto LABEL_62;
    }
LABEL_48:
    id v40 = [v36 name];
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v43 = v42;

    if (v41 == 0xD000000000000013 && v43 == 0x80000001002937E0) {
      goto LABEL_60;
    }
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v44) {
      goto LABEL_59;
    }
    id v45 = [v36 name];
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v48 = v47;

    if (v46 == 0xD00000000000001FLL && v48 == 0x8000000100293800)
    {
LABEL_60:

      swift_bridgeObjectRelease();
      goto LABEL_61;
    }
    char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v49)
    {
LABEL_59:

      goto LABEL_61;
    }
    id v50 = [v36 name];
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v53 = v52;

    if (v51 == 0x65646F6373736170 && v53 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();

LABEL_61:
      sub_1000AA60C();
      return;
    }
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();

    if (v32) {
      goto LABEL_61;
    }
  }
  if (v28)
  {
    unint64_t v34 = __clz(__rbit64(v28));
    v28 &= v28 - 1;
    unint64_t v35 = v34 | (v27 << 6);
    goto LABEL_47;
  }
  int64_t v37 = v27 + 1;
  if (__OFADD__(v27, 1))
  {
    __break(1u);
    return;
  }
  if (v37 >= v55) {
    goto LABEL_62;
  }
  unint64_t v38 = *(void *)(v56 + 8 * v37);
  ++v27;
  if (v38) {
    goto LABEL_46;
  }
  uint64_t v27 = v33 + 2;
  if (v33 + 2 >= v55) {
    goto LABEL_62;
  }
  unint64_t v38 = *(void *)(v56 + 8 * v27);
  if (v38) {
    goto LABEL_46;
  }
  uint64_t v27 = v33 + 3;
  if (v33 + 3 >= v55) {
    goto LABEL_62;
  }
  unint64_t v38 = *(void *)(v56 + 8 * v27);
  if (v38) {
    goto LABEL_46;
  }
  uint64_t v27 = v33 + 4;
  if (v33 + 4 >= v55) {
    goto LABEL_62;
  }
  unint64_t v38 = *(void *)(v56 + 8 * v27);
  if (v38)
  {
LABEL_46:
    unint64_t v28 = (v38 - 1) & v38;
    unint64_t v35 = __clz(__rbit64(v38)) + (v27 << 6);
LABEL_47:
    id v36 = *(id *)(*(void *)(v25 + 48) + 8 * v35);
    if (!v36) {
      goto LABEL_62;
    }
    goto LABEL_48;
  }
  uint64_t v39 = v33 + 5;
  while (v55 != v39)
  {
    unint64_t v38 = *(void *)(v56 + 8 * v39++);
    if (v38)
    {
      uint64_t v27 = v39 - 1;
      goto LABEL_46;
    }
  }
LABEL_62:
  sub_1000AA60C();
}

void sub_1001A3318()
{
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Applying communication safety settings.", v3, 2u);
    swift_slowDealloc();
  }

  LOBYTE(v17) = 0;
  id v4 = sub_1001D7640();
  __chkstk_darwin(v4);
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (!v0)
  {
    id v5 = sub_1001D7640();
    __chkstk_darwin(v5);
    sub_10009EE78(&qword_100343EB0);
    NSManagedObjectContext.performAndWait<A>(_:)();

    if ((BYTE1(v17) & 1) == 0)
    {
      id v6 = [self nonePolicy];
      dispatch thunk of LocalRestrictions.communicationSafetyPolicy.setter();
      return;
    }
    id v7 = sub_1001D7640();
    __chkstk_darwin(v7);
    NSManagedObjectContext.performAndWait<A>(_:)();

    id v8 = (void *)MOUserSafetyInterventionTypeChild;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
    if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
    {
      id v13 = v8;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      id v15 = v8;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0)
      {
LABEL_11:
        id v16 = objc_msgSend(self, "communicationSafetyWithInterventionType:", v15, v18);
        dispatch thunk of LocalRestrictions.communicationSafetyPolicy.setter();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
    }
    id v15 = MOUserSafetyInterventionTypeTeen;

    goto LABEL_11;
  }
}

uint64_t sub_1001A36B8(uint64_t a1, uint64_t a2)
{
  v20[1] = a2;
  uint64_t v5 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v5);
  id v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v2 + OBJC_IVAR____TtC15ScreenTimeAgent11LocalDevice_logger;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Applying the content and privacy restrictions.", v11, 2u);
    swift_slowDealloc();
  }

  LOBYTE(v21) = 0;
  id v12 = sub_1001D7640();
  __chkstk_darwin(v12);
  v20[-4] = a1;
  v20[-3] = 0;
  v20[-2] = &v21;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (!v3)
  {
    v20[0] = v8;

    char v13 = (char)v21;
    uint64_t v21 = _swiftEmptyArrayStorage;
    id v14 = sub_1001D7640();
    __chkstk_darwin(v14);
    v20[-4] = a1;
    v20[-3] = 0;
    LOBYTE(v20[-2]) = v13;
    v20[-1] = &v21;
    NSManagedObjectContext.performAndWait<A>(_:)();

    dispatch thunk of LocalRestrictions.update(with:clearAllExistingRestrictions:)();
    return swift_bridgeObjectRelease();
  }

  uint64_t v21 = v3;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  if (!swift_dynamicCast()) {
    return swift_errorRelease();
  }
  if (swift_getEnumCaseMultiPayload() != 23)
  {
    sub_1001B0244((uint64_t)v7, type metadata accessor for DataStore.DataStoreError);
    return swift_errorRelease();
  }
  swift_errorRelease();
  id v15 = (void *)*((void *)v7 + 1);

  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "No content and privacy blueprint exists for the local user. This might be intentional. The UIs have to create the blueprint.", v18, 2u);
    swift_slowDealloc();
  }

  return swift_errorRelease();
}

void sub_1001A3A30()
{
  type metadata accessor for SettingsModelProvider();
  uint64_t inited = swift_initStackObject();
  if (qword_100340D90 != -1) {
    swift_once();
  }
  id v1 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v2 = (void *)swift_allocObject();
  v2[3] = 0;
  v2[4] = 0;
  id v3 = (char *)v2 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger;
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  if (byte_10034B308 == 1)
  {
    v2[2] = v1;
    *(void *)(inited + 16) = v2;
    id v5 = v1;
    char v6 = sub_1000C99B0();
    swift_release();
    if ((v6 & 0xFE) == 2 && (id v7 = sub_1000C9720(v6)) != 0)
    {
      id v8 = v7;
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Applying default web content restrictions", v11, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      id v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        id v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Disabling default web content restrictions", v14, 2u);
        swift_slowDealloc();
      }

      id v15 = self;
      NSString v16 = [v15 registeredIdentifier];
      if (!v16)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v16 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
      Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
      id v8 = [v15 buildRequiredOnlyWithIdentifier:v16 withRestrictWeb:isa];

      uint64_t v9 = NSNumber.init(integerLiteral:)(0).super.super.isa;
      [v8 setPayloadRestrictWeb:v9];
    }

    dispatch thunk of LocalRestrictions.updateDefaultWebContentRestrictions(with:)();
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void sub_1001A3D70()
{
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Applying screen distance settings.", v3, 2u);
    swift_slowDealloc();
  }

  id v4 = sub_1001D7640();
  __chkstk_darwin(v4);
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (!v0)
  {
    int v5 = v25;
    char v6 = self;
    unsigned int v7 = [v6 isScreenDistanceEnabled];
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315394;
      if (v5) {
        uint64_t v11 = 20047;
      }
      else {
        uint64_t v11 = 4605519;
      }
      int v24 = v5;
      if (v5) {
        unint64_t v12 = 0xE200000000000000;
      }
      else {
        unint64_t v12 = 0xE300000000000000;
      }
      id v23 = v6;
      sub_1000A2E70(v11, v12, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      if (v7) {
        uint64_t v13 = 20047;
      }
      else {
        uint64_t v13 = 4605519;
      }
      if (v7) {
        unint64_t v14 = 0xE200000000000000;
      }
      else {
        unint64_t v14 = 0xE300000000000000;
      }
      sub_1000A2E70(v13, v14, &v25);
      int v5 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      char v6 = v23;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Screen Distance should be %s, and it is %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    if (v5 != v7)
    {
      unsigned int v15 = [v6 toggleDistanceSampling];
      NSString v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315394;
        if (v15) {
          uint64_t v19 = 0xD000000000000014;
        }
        else {
          uint64_t v19 = 0xD000000000000010;
        }
        if (v15) {
          unint64_t v20 = 0x80000001002937A0;
        }
        else {
          unint64_t v20 = 0x8000000100293780;
        }
        sub_1000A2E70(v19, v20, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v18 + 12) = 2080;
        if (v5) {
          uint64_t v21 = 20047;
        }
        else {
          uint64_t v21 = 4605519;
        }
        if (v5) {
          unint64_t v22 = 0xE200000000000000;
        }
        else {
          unint64_t v22 = 0xE300000000000000;
        }
        sub_1000A2E70(v21, v22, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s Screen Distance %s", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
  }
}

uint64_t sub_1001A41DC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v3);
  int v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LOBYTE(v19) = 0;
  id v6 = sub_1001D7640();
  uint64_t v16 = a1;
  uint64_t v17 = 0;
  uint64_t v18 = &v19;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (!v1)
  {

    char v7 = v19;
    id v8 = sub_1001D7640();
    __chkstk_darwin(v8);
    *(void *)&v15[-32] = a1;
    *(void *)&v15[-24] = 0;
    v15[-16] = v7;
    NSManagedObjectContext.performAndWait<A>(_:)();

    id v9 = sub_1001D7640();
    __chkstk_darwin(v9);
    *(void *)&v15[-16] = a1;
    *(void *)&v15[-8] = 0;
    NSManagedObjectContext.performAndWait<A>(_:)();

    return dispatch thunk of LocalRestrictions.setDowntimeShieldPolicy(with:isManaged:)();
  }

  uint64_t v19 = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  if (!swift_dynamicCast()) {
    return swift_errorRelease();
  }
  if (swift_getEnumCaseMultiPayload() != 26)
  {
    sub_1001B0244((uint64_t)v5, type metadata accessor for DataStore.DataStoreError);
    return swift_errorRelease();
  }
  swift_errorRelease();
  uint64_t v10 = (void *)*((void *)v5 + 2);
  swift_bridgeObjectRelease();

  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "No Downtime blueprint exists for the local user. This might be intentional. The UIs have to create the blueprint.", v13, 2u);
    swift_slowDealloc();
  }

  return swift_errorRelease();
}

void sub_1001A44F8(char *a1, uint64_t a2)
{
  uint64_t v112 = a2;
  uint64_t v5 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v5);
  char v7 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for DeviceActivityName();
  id v8 = *(uint64_t **)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v111 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10009EE78(&qword_100343E90);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  char v116 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  char v115 = (char *)&v84 - v14;
  __chkstk_darwin(v13);
  uint64_t v119 = (char *)&v84 - v15;
  uint64_t v117 = type metadata accessor for DeviceActivitySchedule();
  uint64_t v16 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v118 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = v2 + OBJC_IVAR____TtC15ScreenTimeAgent11LocalDevice_logger;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Start monitoring of downtime schedule.", v20, 2u);
    swift_slowDealloc();
  }

  LOBYTE(v121) = 0;
  id v21 = sub_1001D7640();
  __chkstk_darwin(v21);
  *(&v84 - 4) = a1;
  *(&v84 - 3) = 0;
  *(&v84 - 2) = (char *)&v121;
  NSManagedObjectContext.performAndWait<A>(_:)();
  Class isa = v3;
  if (v3)
  {

    goto LABEL_6;
  }

  char v23 = (char)v121;
  id v24 = sub_1001D7640();
  __chkstk_darwin(v24);
  *(&v84 - 4) = a1;
  *(&v84 - 3) = 0;
  *((unsigned char *)&v84 - 16) = v23;
  NSManagedObjectContext.performAndWait<A>(_:)();

  if ((v121 & 1) == 0)
  {
    sub_10009EE78(&qword_100343E08);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_1002874C0;
    static DeviceActivityName.downtime_weekday_1.getter();
    static DeviceActivityName.downtime_weekday_2.getter();
    static DeviceActivityName.downtime_weekday_3.getter();
    static DeviceActivityName.downtime_weekday_4.getter();
    static DeviceActivityName.downtime_weekday_5.getter();
    static DeviceActivityName.downtime_weekday_6.getter();
    static DeviceActivityName.downtime_weekday_7.getter();
    DeviceActivityCenter.stopMonitoring(_:)((Swift::OpaquePointer)v30);
    swift_bridgeObjectRelease();
    return;
  }
  id v29 = sub_1001D7640();
  uint64_t v114 = (id *)&v84;
  __chkstk_darwin(v29);
  *(&v84 - 4) = a1;
  *(&v84 - 3) = 0;
  *((unsigned char *)&v84 - 16) = v23;
  sub_10009EE78(&qword_100343EA0);
  NSManagedObjectContext.performAndWait<A>(_:)();

  id v84 = v121;
  if (v121)
  {
    id v31 = objc_msgSend(v121, "customScheduleItems", v84);
    sub_1000A0760(0, &qword_100343EA8);
    unint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v32 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v32 >> 62) {
    goto LABEL_67;
  }
  uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v33)
  {
LABEL_68:
    swift_bridgeObjectRelease();

    return;
  }
  while (1)
  {
    unint64_t v96 = v32 & 0xC000000000000001;
    unint64_t v107 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 7);
    os_log_type_t v92 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 6);
    unint64_t v86 = (void (**)(char *, uint64_t, uint64_t))(v8 + 4);
    uint64_t v85 = (void (**)(char *, uint64_t))(v8 + 1);
    uint64_t v93 = (void (**)(char *, uint64_t))(v16 + 8);
    uint64_t v16 = 4;
    unint64_t v34 = &selRef_setOrganizationIdentifier_;
    uint64_t v95 = v7;
    unint64_t v94 = v32;
    uint64_t v87 = v5;
    uint64_t v91 = v33;
LABEL_24:
    uint64_t v37 = v16 - 4;
    if (v96) {
      break;
    }
    id v38 = *(id *)(v32 + 8 * v16);
    uint64_t v39 = v16 - 3;
    if (!__OFADD__(v37, 1)) {
      goto LABEL_29;
    }
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    swift_bridgeObjectRetain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v33) {
      goto LABEL_68;
    }
  }
  id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  uint64_t v39 = v16 - 3;
  if (__OFADD__(v37, 1)) {
    goto LABEL_59;
  }
LABEL_29:
  uint64_t v98 = v39;
  id v40 = v38;
  uint64_t v41 = type metadata accessor for DateComponents();
  NSNumber v105 = (id *)&v84;
  uint64_t v114 = (id *)v41;
  char v110 = *(id **)(v41 - 8);
  char v7 = (char *)v110[8];
  __chkstk_darwin(v41);
  id v8 = (uint64_t *)((unint64_t)(v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v32 = (char *)&v84 - (char *)v8;
  id v42 = [v40 v34[204]];
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = (uint64_t)&selRef_setPartitionTimeInterval_;
  uint64_t v43 = (char *)[v40 day];
  BOOL v44 = __OFADD__(v43, 1);
  id v45 = v43 + 1;
  if (v44) {
    goto LABEL_60;
  }
  uint64_t v97 = v16;
  id v99 = isa;
  uint64_t v100 = v45;
  uint64_t v109 = (uint64_t *)((char *)&v84 - (char *)v8);
  uint64_t v46 = DateComponents.weekday.setter();
  uint64_t v104 = (id *)&v84;
  __chkstk_darwin(v46);
  uint64_t v47 = (char *)((char *)&v84 - (char *)v8);
  id v48 = [v40 endTime];
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  id v49 = [v40 startTime];
  id v106 = (id *)v7;
  __chkstk_darwin(v49);
  id v50 = (char *)((char *)&v84 - (char *)v8);
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = (char *)DateComponents._bridgeToObjectiveC()().super.isa;
  id v8 = (uint64_t *)(v110 + 1);
  unint64_t v101 = (void (*)(char *, id *))v110[1];
  v101(v50, v114);
  id v108 = v47;
  unint64_t v32 = (unint64_t)DateComponents._bridgeToObjectiveC()().super.isa;
  uint64_t v16 = STCompareHourMinuteTimeComponents();

  id v103 = v40;
  id v51 = [v40 day];
  uint64_t v5 = (uint64_t)v51 + 1;
  BOOL v52 = __OFADD__(v51, 1);
  unint64_t v102 = v8;
  if (v16 == 1)
  {
    if (v52) {
      goto LABEL_61;
    }
    uint64_t v89 = type metadata accessor for Calendar();
    id v90 = (id *)&v84;
    uint64_t v53 = *(void *)(v89 - 8);
    __chkstk_darwin(v89);
    id v8 = (uint64_t *)((char *)&v84 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
    static Calendar.current.getter();
    char v7 = (char *)type metadata accessor for Calendar.Component();
    unsigned __int8 v88 = (id *)&v84;
    uint64_t v55 = *((void *)v7 - 1);
    __chkstk_darwin(v7);
    Class isa = (char *)&v84 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, void, char *))(v55 + 104))(isa, enum case for Calendar.Component.weekday(_:), v7);
    unint64_t v32 = Calendar.maximumRange(of:)();
    uint64_t v16 = v57;
    char v59 = v58;
    (*(void (**)(char *, char *))(v55 + 8))(isa, v7);
    (*(void (**)(uint64_t *, uint64_t))(v53 + 8))(v8, v89);
    uint64_t v60 = v106;
    if (v59)
    {
      __break(1u);
      JUMPOUT(0x1001A5674);
    }
    int64_t v61 = v16 - v32;
    if (__OFSUB__(v16, v32)) {
      goto LABEL_63;
    }
    id v8 = v109;
    uint64_t v16 = (uint64_t)v110;
    if (!v61) {
      goto LABEL_64;
    }
    if (v5 == 0x8000000000000000 && v61 == -1) {
      goto LABEL_66;
    }
    uint64_t v62 = v5 % v61;
    uint64_t v5 = v62 + 1;
    if (__OFADD__(v62, 1)) {
      goto LABEL_65;
    }
  }
  else
  {
    id v8 = v109;
    uint64_t v16 = (uint64_t)v110;
    uint64_t v60 = v106;
    if (v52) {
      goto LABEL_62;
    }
  }
  id v63 = v108;
  uint64_t v64 = DateComponents.weekday.setter();
  char v110 = (id *)&v84;
  __chkstk_darwin(v64);
  unint64_t v65 = ((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v66 = *(uint64_t (**)(char *, uint64_t *, id *))(v16 + 16);
  uint64_t v67 = (uint64_t)v114;
  uint64_t v68 = v66((char *)&v84 - v65, v8, v114);
  id v106 = (id *)&v84;
  __chkstk_darwin(v68);
  v66((char *)&v84 - v65, (uint64_t *)v63, (id *)v67);
  uint64_t v69 = sub_10009EE78(&qword_100343E68);
  __chkstk_darwin(v69 - 8);
  uint64_t v71 = (char *)&v84 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100340E08 != -1) {
    swift_once();
  }
  uint64_t v72 = sub_10009DA74(v67, (uint64_t)qword_100343C88);
  v66(v71, (uint64_t *)v72, (id *)v67);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v71, 0, 1, v67);
  char v73 = v118;
  DeviceActivitySchedule.init(intervalStart:intervalEnd:repeats:warningTime:)();
  id v74 = *v107;
  uint64_t v75 = (uint64_t)v119;
  uint64_t v76 = v120;
  (*v107)(v119, 1, 1, v120);
  char v7 = v95;
  switch((unint64_t)v100)
  {
    case 1uLL:
      uint64_t v5 = (uint64_t)v115;
      static DeviceActivityName.downtime_weekday_1.getter();
      goto LABEL_54;
    case 2uLL:
      uint64_t v5 = (uint64_t)v115;
      static DeviceActivityName.downtime_weekday_2.getter();
      goto LABEL_54;
    case 3uLL:
      uint64_t v5 = (uint64_t)v115;
      static DeviceActivityName.downtime_weekday_3.getter();
      goto LABEL_54;
    case 4uLL:
      uint64_t v5 = (uint64_t)v115;
      static DeviceActivityName.downtime_weekday_4.getter();
      goto LABEL_54;
    case 5uLL:
      uint64_t v5 = (uint64_t)v115;
      static DeviceActivityName.downtime_weekday_5.getter();
      goto LABEL_54;
    case 6uLL:
      uint64_t v5 = (uint64_t)v115;
      static DeviceActivityName.downtime_weekday_6.getter();
      goto LABEL_54;
    case 7uLL:
      uint64_t v5 = (uint64_t)v115;
      static DeviceActivityName.downtime_weekday_7.getter();
LABEL_54:
      Class isa = v99;
      uint64_t v77 = (uint64_t)v116;
      id v8 = &qword_100343E90;
      sub_1000A4FD8(v75, &qword_100343E90);
      v74((char *)v5, 0, 1, v76);
      sub_1001B0074(v5, v75);
      sub_1000D9F9C(v75, v77, &qword_100343E90);
      if ((*v92)(v77, 1, v76) == 1)
      {

        sub_1000A4FD8(v75, &qword_100343E90);
        (*v93)(v73, v117);
        unint64_t v35 = v114;
        id v36 = (void (*)(uint64_t *, id *))v101;
        v101(v108, v114);
        v36(v109, v35);
        sub_1000A4FD8(v77, &qword_100343E90);
LABEL_23:
        uint64_t v16 = v97 + 1;
        unint64_t v32 = v94;
        unint64_t v34 = &selRef_setOrganizationIdentifier_;
        if (v98 == v91) {
          goto LABEL_68;
        }
        goto LABEL_24;
      }
      long long v78 = v111;
      (*v86)(v111, v77, v76);
      sub_1001AD954((uint64_t)_swiftEmptyArrayStorage);
      DeviceActivityCenter.startMonitoring(_:during:events:)();
      uint64_t v5 = v87;
      if (!isa)
      {

        swift_bridgeObjectRelease();
        (*v85)(v78, v76);
        sub_1000A4FD8(v75, &qword_100343E90);
        (*v93)(v73, v117);
        uint64_t v79 = v114;
        id v8 = (uint64_t *)v101;
        v101(v108, v114);
        ((void (*)(uint64_t *, id *))v8)(v109, v79);
        goto LABEL_23;
      }

      swift_bridgeObjectRelease();
      (*v85)(v78, v76);
      sub_1000A4FD8(v75, &qword_100343E90);
      (*v93)(v73, v117);
      unint64_t v80 = v114;
      uint64_t v81 = (void (*)(uint64_t *, id *))v101;
      v101(v108, v114);
      v81(v109, v80);
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t v121 = isa;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      if (!swift_dynamicCast())
      {
LABEL_12:
        swift_errorRelease();
        return;
      }
      if (swift_getEnumCaseMultiPayload() != 23)
      {
        sub_1001B0244((uint64_t)v7, type metadata accessor for DataStore.DataStoreError);
        goto LABEL_12;
      }
      swift_errorRelease();
      uint64_t v25 = (void *)*((void *)v7 + 1);

      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        unint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "No Downtime blueprint exists for the local user. This might be intentional. The UIs have to create the blueprint.", v28, 2u);
        swift_slowDealloc();
      }

      swift_errorRelease();
      return;
    default:
      swift_bridgeObjectRelease();
      sub_1001AFF38();
      Class isa = (char *)swift_allocError();
      *uint64_t v82 = 1;
      swift_willThrow();

      sub_1000A4FD8(v75, &qword_100343E90);
      (*v93)(v73, v117);
      unint64_t v83 = (void (*)(uint64_t *, uint64_t))v101;
      v101(v108, (id *)v67);
      v83(v109, v67);
      char v7 = v95;
      goto LABEL_6;
  }
}

uint64_t sub_1001A5690(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v100 = a2;
  uint64_t v104 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v104);
  char v7 = (char *)v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DeviceActivitySchedule();
  uint64_t v97 = *(void *)(v8 - 8);
  uint64_t v98 = v8;
  __chkstk_darwin(v8);
  unint64_t v96 = (char *)v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for DeviceActivityName();
  uint64_t v10 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  id v99 = (char *)v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10009EE78(&qword_100343E90);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v81 - v17;
  __chkstk_darwin(v16);
  uint64_t v101 = (uint64_t)v81 - v19;
  uint64_t v103 = v2 + OBJC_IVAR____TtC15ScreenTimeAgent11LocalDevice_logger;
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    unint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Start monitoring of on-demand downtime.", v22, 2u);
    swift_slowDealloc();
  }

  LOBYTE(v105) = 0;
  id v23 = sub_1001D7640();
  __chkstk_darwin(v23);
  v81[-4] = a1;
  v81[-3] = 0;
  v81[-2] = &v105;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v3)
  {

    goto LABEL_6;
  }
  uint64_t v95 = v10;

  char v24 = (char)v105;
  id v25 = sub_1001D7640();
  __chkstk_darwin(v25);
  v81[-4] = a1;
  v81[-3] = 0;
  LOBYTE(v81[-2]) = v24;
  sub_10009EE78(&qword_100343E98);
  NSManagedObjectContext.performAndWait<A>(_:)();

  id v31 = v105;
  if (!v105)
  {
    sub_10009EE78(&qword_100343E08);
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_100284C10;
    static DeviceActivityName.downtime_enable_override.getter();
    static DeviceActivityName.downtime_disable_override.getter();
    DeviceActivityCenter.stopMonitoring(_:)((Swift::OpaquePointer)v37);
    return swift_bridgeObjectRelease();
  }
  uint64_t v32 = v95;
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56);
  uint64_t v34 = v101;
  v33(v101, 1, 1, v102);
  id v35 = v31;
  id v36 = [v35 state];
  if (v36)
  {
    if (v36 != (id)1)
    {
      sub_1001AFF38();
      uint64_t v4 = swift_allocError();
      *id v40 = 2;
      swift_willThrow();

      sub_1000A4FD8(v34, &qword_100343E90);
LABEL_6:
      NSNumber v105 = (void *)v4;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 23)
        {
          swift_errorRelease();
          uint64_t v26 = (void *)*((void *)v7 + 1);

          os_log_type_t v27 = Logger.logObject.getter();
          os_log_type_t v28 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v27, v28))
          {
            id v29 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v29 = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, v28, "No Downtime blueprint exists for the local user. This might be intentional. The UIs have to create the blueprint.", v29, 2u);
            swift_slowDealloc();
          }

          return swift_errorRelease();
        }
        sub_1001B0244((uint64_t)v7, type metadata accessor for DataStore.DataStoreError);
      }
      return swift_errorRelease();
    }
    id v93 = v35;
    static DeviceActivityName.downtime_enable_override.getter();
  }
  else
  {
    id v93 = v35;
    static DeviceActivityName.downtime_disable_override.getter();
  }
  sub_1000A4FD8(v34, &qword_100343E90);
  uint64_t v38 = v102;
  v33((uint64_t)v18, 0, 1, v102);
  sub_1001B0074((uint64_t)v18, v34);
  sub_1000D9F9C(v34, (uint64_t)v15, &qword_100343E90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v15, 1, v38) == 1)
  {
    sub_1000A4FD8(v34, &qword_100343E90);
    id v39 = v93;

    return sub_1000A4FD8((uint64_t)v15, &qword_100343E90);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v99, v15, v38);
    uint64_t v41 = type metadata accessor for Calendar();
    uint64_t v85 = v81;
    uint64_t v83 = v41;
    uint64_t v82 = *(void *)(v41 - 8);
    __chkstk_darwin(v41);
    uint64_t v91 = (char *)v81 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
    static Calendar.current.getter();
    uint64_t v92 = type metadata accessor for Date();
    id v84 = v81;
    uint64_t v94 = *(void *)(v92 - 8);
    uint64_t v43 = *(void *)(v94 + 64);
    __chkstk_darwin(v92);
    uint64_t v86 = v43;
    BOOL v44 = (char *)v81 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
    unsigned __int8 v88 = (char *)((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v45 = v93;
    id v46 = [v93 creationDate];
    __chkstk_darwin(v46);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v90 = *(void (**)(char *, uint64_t))(v94 + 8);
    v94 += 8;
    v90(v44, v92);
    Class v48 = Calendar._bridgeToObjectiveC()().super.isa;
    id v49 = (id)STLocalDateFromUTCErasedDate();

    uint64_t v87 = v44;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v81[1] = v81;
    __chkstk_darwin(v50);
    id v51 = v88;
    uint64_t v89 = (char *)((char *)v81 - v88);
    id v52 = [v45 endDate];
    __chkstk_darwin(v52);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    Class v53 = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v54 = v92;
    uint64_t v55 = v90;
    v90((char *)((char *)v81 - v51), v92);
    uint64_t v56 = v91;
    Class v57 = Calendar._bridgeToObjectiveC()().super.isa;
    id v58 = (id)STLocalDateFromUTCErasedDate();

    char v59 = v89;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    __chkstk_darwin(v60);
    int64_t v61 = (char *)((char *)v81 - v88);
    Date.init()();
    char v62 = static Date.< infix(_:_:)();
    v55(v61, v54);
    if (v62)
    {
      uint64_t v63 = type metadata accessor for DateComponents();
      unsigned __int8 v88 = (char *)v81;
      uint64_t v86 = v63;
      uint64_t v64 = *(void *)(v63 - 8);
      __chkstk_darwin(v63);
      if (qword_100340DF8 != -1) {
        swift_once();
      }
      uint64_t v65 = Calendar.dateComponents(_:from:)();
      __chkstk_darwin(v65);
      Calendar.dateComponents(_:from:)();
      uint64_t v66 = sub_10009EE78(&qword_100343E68);
      __chkstk_darwin(v66 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))((char *)v81 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v86);
      uint64_t v68 = v96;
      DeviceActivitySchedule.init(intervalStart:intervalEnd:repeats:warningTime:)();
      sub_1001AD954((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v69 = v99;
      DeviceActivityCenter.startMonitoring(_:during:events:)();
      id v78 = v93;

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v97 + 8))(v68, v98);
      uint64_t v79 = v90;
      uint64_t v80 = v92;
      v90(v89, v92);
      v79(v87, v80);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v91, v83);
      (*(void (**)(char *, uint64_t))(v95 + 8))(v69, v102);
      return sub_1000A4FD8(v101, &qword_100343E90);
    }
    else
    {
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v72 = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "On-Demand Downtime is in the past. Will not monitor.", v72, 2u);
        swift_slowDealloc();
      }

      sub_10009EE78(&qword_100343E08);
      uint64_t v73 = v95;
      uint64_t v74 = swift_allocObject();
      *(_OWORD *)(v74 + 16) = xmmword_100284C10;
      static DeviceActivityName.downtime_enable_override.getter();
      static DeviceActivityName.downtime_disable_override.getter();
      DeviceActivityCenter.stopMonitoring(_:)((Swift::OpaquePointer)v74);
      id v75 = v93;

      swift_bridgeObjectRelease();
      uint64_t v76 = v92;
      uint64_t v77 = v90;
      v90(v59, v92);
      v77(v87, v76);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v56, v83);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v99, v102);
      return sub_1000A4FD8(v101, &qword_100343E90);
    }
  }
}

void sub_1001A6538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v130 = a3;
  uint64_t v135 = a2;
  uint64_t v5 = type metadata accessor for DeviceActivityName();
  uint64_t v132 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v7 = (char *)v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DeviceActivitySchedule();
  uint64_t v138 = *(void **)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v144) = 0;
  id v11 = sub_1001D7640();
  uint64_t v141 = a1;
  uint64_t v142 = 0;
  uint64_t v143 = &v144;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v3)
  {

    return;
  }
  uint64_t v114 = v5;
  uint64_t v117 = v10;
  uint64_t v113 = v8;
  char v115 = v7;

  int v12 = v144;
  unint64_t v144 = _swiftEmptyArrayStorage;
  id v13 = sub_1001D7640();
  __chkstk_darwin(v13);
  v99[-4] = a1;
  v99[-3] = 0;
  v99[-2] = &v144;
  NSManagedObjectContext.performAndWait<A>(_:)();
  uint64_t v14 = a1;
  uint64_t v140 = 0;
  int v133 = v12;

  uint64_t v16 = v144[2];
  if (!v16)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v112 = (char *)v139 + OBJC_IVAR____TtC15ScreenTimeAgent11LocalDevice_logger;
  uint64_t v104 = (void (**)(char *, uint64_t))(v132 + 8);
  uint64_t v103 = (void (**)(char *, uint64_t))(v138 + 1);
  uint64_t v101 = &v146;
  uint64_t v17 = v144 + 5;
  *(void *)&long long v15 = 136446722;
  long long v100 = v15;
  v99[1] = (char *)&type metadata for Any + 8;
  *(void *)&long long v15 = 136446210;
  long long v102 = v15;
  long long v105 = xmmword_100286230;
  char v18 = v133;
  char v116 = v144;
  uint64_t v118 = a1;
  while (1)
  {
    uint64_t v124 = v16;
    id v25 = *(v17 - 1);
    unint64_t v26 = *v17;
    int v123 = v17;
    uint64_t v27 = sub_10009EE78(&qword_100342B30);
    id v127 = v99;
    __chkstk_darwin(v27);
    unint64_t v139 = v28;
    unint64_t v29 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    swift_bridgeObjectRetain();
    id v30 = sub_1001D7640();
    __chkstk_darwin(v30);
    v99[-6] = v14;
    v99[-5] = 0;
    LOBYTE(v99[-4]) = v18;
    v99[-3] = v25;
    v99[-2] = v26;
    uint64_t v136 = (uint64_t)v99 - v29;
    uint64_t v138 = (void *)v27;
    uint64_t v31 = v140;
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (v31)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }

    __chkstk_darwin(v32);
    id v33 = sub_1001D7640();
    __chkstk_darwin(v33);
    v99[-6] = v14;
    v99[-5] = 0;
    LOBYTE(v99[-4]) = v133;
    v99[-3] = v25;
    v99[-2] = v26;
    unint64_t v126 = v26;
    uint64_t v134 = (uint64_t)v99 - v29;
    NSManagedObjectContext.performAndWait<A>(_:)();
    os_log_t v131 = v25;
    uint64_t v140 = 0;
    id v125 = v99;

    uint64_t v34 = type metadata accessor for Date();
    id v35 = *(void **)(v34 - 8);
    uint64_t v36 = __chkstk_darwin(v34);
    id v137 = v37;
    id v122 = (char *)(((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v38 = (char *)((char *)v99 - v122);
    __chkstk_darwin(v36);
    unint64_t v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF0;
    sub_1000D9F9C(v136, (uint64_t)v99 - v40, &qword_100342B30);
    uint64_t v121 = (unsigned int (*)(char *, uint64_t, uint64_t))v35[6];
    if (v121((char *)v99 - v40, 1, v34) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000A4FD8((uint64_t)v99 - v40, &qword_100342B30);
LABEL_26:
      sub_1001AFF38();
      swift_allocError();
      *uint64_t v94 = 0;
      swift_willThrow();
      sub_1000A4FD8(v134, &qword_100342B30);
      sub_1000A4FD8(v136, &qword_100342B30);
      return;
    }
    uint64_t v120 = v99;
    uint64_t v138 = v99;
    uint64_t v41 = (uint64_t (*)(char *, char *, uint64_t))v35[4];
    uint64_t v128 = v38;
    uint64_t v42 = v41(v38, (char *)v99 - v40, v34);
    uint64_t v138 = v99;
    uint64_t v43 = __chkstk_darwin(v42);
    id v129 = v35;
    BOOL v44 = (char *)((char *)v99 - v122);
    id v122 = (char *)v99;
    __chkstk_darwin(v43);
    sub_1000D9F9C(v134, (uint64_t)v99 - v40, &qword_100342B30);
    uint64_t v45 = v34;
    if (v121((char *)v99 - v40, 1, v34) == 1)
    {
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v129[1])(v128, v34);
      swift_bridgeObjectRelease();
      sub_1000A4FD8((uint64_t)v99 - v40, &qword_100342B30);
      goto LABEL_26;
    }
    uint64_t v46 = v41(v44, (char *)v99 - v40, v34);
    __chkstk_darwin(v46);
    Class v48 = (char *)v99 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
    Date.init()();
    char v49 = static Date.< infix(_:_:)();
    uint64_t v50 = (char *)v129[1];
    unint64_t v139 = v129 + 1;
    id v122 = v50;
    ((void (*)(char *, uint64_t))v50)(v48, v45);
    unint64_t v51 = v126;
    id v52 = v44;
    uint64_t v119 = v45;
    if ((v49 & 1) == 0)
    {
      swift_bridgeObjectRetain_n();
      unsigned __int8 v88 = Logger.logObject.getter();
      os_log_type_t v89 = static os_log_type_t.default.getter();
      BOOL v90 = os_log_type_enabled(v88, v89);
      unint64_t v91 = v51;
      uint64_t v14 = v118;
      if (v90)
      {
        uint64_t v92 = swift_slowAlloc();
        unint64_t v144 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v92 = v102;
        swift_bridgeObjectRetain();
        *(void *)(v92 + 4) = sub_1000A2E70((uint64_t)v131, v91, (uint64_t *)&v144);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "Override %{public}s is in the past. Will not monitor.", (uint8_t *)v92, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v19 = v128;
      sub_10009EE78(&qword_100343E08);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = v105;
      DeviceActivityName.init(_:)();
      DeviceActivityCenter.stopMonitoring(_:)((Swift::OpaquePointer)v20);
      swift_bridgeObjectRelease();
      uint64_t v21 = v119;
      unint64_t v22 = v122;
      ((void (*)(char *, uint64_t))v122)(v52, v119);
      ((void (*)(char *, uint64_t))v22)(v19, v21);
      sub_1000A4FD8(v134, &qword_100342B30);
      sub_1000A4FD8(v136, &qword_100342B30);
      uint64_t v23 = v124;
      char v24 = v123;
      char v18 = v133;
      goto LABEL_7;
    }
    uint64_t v53 = v118;
    id v54 = sub_1001D7640();
    __chkstk_darwin(v54);
    v99[-6] = v53;
    v99[-5] = 0;
    LOBYTE(v99[-4]) = v133;
    v99[-3] = v131;
    v99[-2] = v51;
    sub_10009EE78(&qword_100343E78);
    uint64_t v55 = v140;
    NSManagedObjectContext.performAndWait<A>(_:)();
    uint64_t v140 = v55;
    if (v55)
    {

      swift_bridgeObjectRelease();
      uint64_t v95 = v119;
      unint64_t v96 = v122;
      ((void (*)(char *, uint64_t))v122)(v44, v119);
      ((void (*)(char *, uint64_t))v96)(v128, v95);
      sub_1000A4FD8(v134, &qword_100342B30);
      sub_1000A4FD8(v136, &qword_100342B30);
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v121 = (unsigned int (*)(char *, uint64_t, uint64_t))v44;

    dispatch thunk of LocalRestrictions.setUpOverrideStore(with:applications:webDomains:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v56 = type metadata accessor for Calendar();
    uint64_t v109 = v99;
    uint64_t v108 = v56;
    uint64_t v107 = *(void *)(v56 - 8);
    __chkstk_darwin(v56);
    id v58 = (char *)v99 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
    static Calendar.current.getter();
    uint64_t v59 = type metadata accessor for DateComponents();
    uint64_t v111 = v99;
    uint64_t v60 = *(void *)(v59 - 8);
    __chkstk_darwin(v59);
    unint64_t v61 = v51;
    if (qword_100340DF8 != -1) {
      swift_once();
    }
    char v62 = v128;
    uint64_t v63 = Calendar.dateComponents(_:from:)();
    char v110 = v99;
    __chkstk_darwin(v63);
    id v106 = v58;
    Calendar.dateComponents(_:from:)();
    uint64_t v64 = sub_10009EE78(&qword_100343E68);
    __chkstk_darwin(v64 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))((char *)v99 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v59);
    uint64_t v66 = v117;
    DeviceActivitySchedule.init(intervalStart:intervalEnd:repeats:warningTime:)();
    swift_bridgeObjectRetain();
    uint64_t v67 = v115;
    DeviceActivityName.init(_:)();
    sub_1001AD954((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v68 = v140;
    DeviceActivityCenter.startMonitoring(_:during:events:)();
    unint64_t v69 = v61;
    if (v68) {
      break;
    }
    uint64_t v140 = 0;
    (*v104)(v67, v114);
    uint64_t v70 = swift_bridgeObjectRelease();
    uint64_t v111 = v99;
    os_log_type_t v71 = v137;
    __chkstk_darwin(v70);
    uint64_t v72 = (char *)v99 - (((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v73 = (uint64_t (*)(char *, char *, uint64_t))v129[2];
    uint64_t v74 = v119;
    uint64_t v75 = v73(v72, v62, v119);
    id v129 = v99;
    __chkstk_darwin(v75);
    v73(v72, (char *)v121, v74);
    swift_bridgeObjectRetain();
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.default.getter();
    int v78 = v77;
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v79 = swift_slowAlloc();
      id v137 = (void *)swift_slowAlloc();
      unint64_t v144 = v137;
      *(_DWORD *)uint64_t v79 = v100;
      LODWORD(v110) = v78;
      swift_bridgeObjectRetain();
      uint64_t v145 = sub_1000A2E70((uint64_t)v131, v69, (uint64_t *)&v144);
      os_log_t v131 = v76;
      uint64_t v80 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v79 + 12) = 2082;
      sub_10010B660();
      uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v145 = sub_1000A2E70(v81, v82, (uint64_t *)&v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v83 = v74;
      id v84 = v122;
      ((void (*)(char *, uint64_t))v122)(v72, v83);
      *(_WORD *)(v79 + 22) = 2082;
      uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v145 = sub_1000A2E70(v85, v86, (uint64_t *)&v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v84)(v72, v80);
      os_log_t v87 = v131;
      _os_log_impl((void *)&_mh_execute_header, v131, (os_log_type_t)v110, "Monitoring %{public}s with startDate: %{public}s endDate: %{public}s", (uint8_t *)v79, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*v103)(v117, v113);
      (*(void (**)(char *, uint64_t))(v107 + 8))(v106, v108);
      ((void (*)(unsigned int (*)(char *, uint64_t, uint64_t), uint64_t))v84)(v121, v80);
      ((void (*)(char *, uint64_t))v84)(v128, v80);
    }
    else
    {

      id v93 = v122;
      ((void (*)(char *, uint64_t))v122)(v72, v74);
      ((void (*)(char *, uint64_t))v93)(v72, v74);
      swift_bridgeObjectRelease_n();
      (*v103)(v66, v113);
      (*(void (**)(char *, uint64_t))(v107 + 8))(v106, v108);
      ((void (*)(unsigned int (*)(char *, uint64_t, uint64_t), uint64_t))v93)(v121, v74);
      ((void (*)(char *, uint64_t))v93)(v62, v74);
    }
    sub_1000A4FD8(v134, &qword_100342B30);
    sub_1000A4FD8(v136, &qword_100342B30);
    uint64_t v14 = v118;
    char v18 = v133;
    uint64_t v23 = v124;
    char v24 = v123;
LABEL_7:
    uint64_t v17 = v24 + 2;
    uint64_t v16 = v23 - 1;
    if (!v16) {
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*v104)(v67, v114);
  (*v103)(v66, v113);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v106, v108);
  uint64_t v97 = v119;
  uint64_t v98 = v122;
  ((void (*)(unsigned int (*)(char *, uint64_t, uint64_t), uint64_t))v122)(v121, v119);
  ((void (*)(char *, uint64_t))v98)(v62, v97);
  sub_1000A4FD8(v134, &qword_100342B30);
  sub_1000A4FD8(v136, &qword_100342B30);
  swift_bridgeObjectRelease();
}

void sub_1001A79D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v497 = a3;
  uint64_t v518 = a2;
  uint64_t v520 = type metadata accessor for DeviceActivityName();
  uint64_t v496 = *(void *)(v520 - 8);
  uint64_t v6 = __chkstk_darwin(v520);
  v519 = (char *)v460 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v528 = (char *)v460 - v8;
  uint64_t v517 = type metadata accessor for DeviceActivitySchedule();
  uint64_t v495 = *(void *)(v517 - 8);
  __chkstk_darwin(v517);
  v529 = (char *)v460 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10009EE78(&qword_100343E10);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  v494 = (char *)v460 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  v505 = (char *)v460 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v493 = (char *)v460 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v504 = (char *)v460 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v492 = (char *)v460 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v503 = (char *)v460 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v491 = (char *)v460 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v502 = (char *)v460 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v490 = (char *)v460 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v501 = (char *)v460 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v489 = (char *)v460 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  v500 = (char *)v460 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v488 = (char *)v460 - v36;
  __chkstk_darwin(v35);
  v499 = (char *)v460 - v37;
  uint64_t v551 = type metadata accessor for DeviceActivityEvent.Name();
  uint64_t v550 = *(void *)(v551 - 8);
  uint64_t v38 = __chkstk_darwin(v551);
  v553 = (char *)v460 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __chkstk_darwin(v38);
  v512 = (char *)v460 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  v511 = (char *)v460 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  v510 = (char *)v460 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  v509 = (char *)v460 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  v507 = (char *)v460 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  v506 = (char *)v460 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  v545 = (char *)v460 - v53;
  __chkstk_darwin(v52);
  v514 = (char *)v460 - v54;
  uint64_t v55 = type metadata accessor for DeviceActivityEvent();
  uint64_t v548 = *(void *)(v55 - 8);
  uint64_t v56 = __chkstk_darwin(v55);
  v549 = (char *)v460 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __chkstk_darwin(v56);
  uint64_t v498 = (uint64_t)v460 - v59;
  __chkstk_darwin(v58);
  v531 = (void (**)(char *, uint64_t))((char *)v460 - v60);
  int64_t v559 = type metadata accessor for WebDomain();
  *(void *)&long long v522 = *(void *)(v559 - 8);
  uint64_t v61 = __chkstk_darwin(v559);
  v563 = (char *)v460 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __chkstk_darwin(v61);
  v556 = (char *)v460 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  v560 = (char *)v460 - v66;
  __chkstk_darwin(v65);
  v487 = (char *)v460 - v67;
  uint64_t v555 = type metadata accessor for ActivityCategory();
  uint64_t v523 = *(void *)(v555 - 8);
  uint64_t v68 = __chkstk_darwin(v555);
  v564 = (char *)v460 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __chkstk_darwin(v68);
  v557 = (char *)v460 - v71;
  uint64_t v72 = __chkstk_darwin(v70);
  v561 = (char *)v460 - v73;
  __chkstk_darwin(v72);
  v486 = (char *)v460 - v74;
  v526 = (char *)type metadata accessor for Application();
  uint64_t v524 = *((void *)v526 - 1);
  uint64_t v75 = __chkstk_darwin(v526);
  v565 = (char *)v460 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = __chkstk_darwin(v75);
  v558 = (char *)v460 - v78;
  uint64_t v79 = __chkstk_darwin(v77);
  v562 = (char *)v460 - v80;
  __chkstk_darwin(v79);
  v485 = (char *)v460 - v81;
  uint64_t v536 = v3 + OBJC_IVAR____TtC15ScreenTimeAgent11LocalDevice_logger;
  unint64_t v82 = Logger.logObject.getter();
  os_log_type_t v83 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v82, v83))
  {
    id v84 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v84 = 0;
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "Start monitoring of usage limits.", v84, 2u);
    swift_slowDealloc();
  }

  LOBYTE(v576[0]) = 0;
  id v85 = sub_1001D7640();
  __chkstk_darwin(v85);
  NSManagedObjectContext.performAndWait<A>(_:)();
  uint64_t v86 = a1;
  uint64_t v87 = v4;
  if (v4)
  {

    return;
  }

  int v88 = LOBYTE(v576[0]);
  v576[0] = &_swiftEmptyDictionarySingleton;
  id v89 = sub_1001D7640();
  __chkstk_darwin(v89);
  NSManagedObjectContext.performAndWait<A>(_:)();
  int v466 = v88;

  BOOL v90 = v576[0];
  id v91 = sub_1001D7640();
  __chkstk_darwin(v91);
  NSManagedObjectContext.performAndWait<A>(_:)();

  id v93 = 0;
  os_log_t v525 = v90;
  Class isa = v90[8].isa;
  v513 = v90 + 8;
  uint64_t v95 = 1 << LOBYTE(v90[4].isa);
  int v462 = LOBYTE(v576[0]);
  if (v95 < 64) {
    uint64_t v96 = ~(-1 << v95);
  }
  else {
    uint64_t v96 = -1;
  }
  unint64_t v97 = v96 & (unint64_t)isa;
  v515 = (void *)((unint64_t)(v95 + 63) >> 6);
  v539 = (char *)(v524 + 32);
  v538 = (void (**)(unint64_t, char *, uint64_t))(v523 + 32);
  v537 = (void (**)(unint64_t, char *, int64_t))(v522 + 32);
  v568 = (void (**)(char *, char *))(v524 + 8);
  v570 = (void *)(v523 + 16);
  v571 = (void *)(v524 + 16);
  uint64_t v569 = v522 + 16;
  v566 = (char *)(v522 + 8);
  uint64_t v567 = v523 + 8;
  v541 = (void (**)(char *, char *, uint64_t))(v548 + 16);
  v480 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v548 + 56);
  v477 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v548 + 48);
  v473 = (void (**)(void, void, void))(v548 + 32);
  v478 = (void (**)(char *, uint64_t))(v550 + 8);
  v542 = (void (**)(char *, uint64_t))(v548 + 8);
  v540 = (void (**)(char *, char *, uint64_t))(v550 + 16);
  v460[1] = v548 + 40;
  *(void *)&long long v92 = 136446210;
  long long v521 = v92;
  v481 = (char *)&type metadata for Any + 8;
  uint64_t v98 = &_swiftEmptyDictionarySingleton;
  v471 = &_swiftEmptyDictionarySingleton;
  v470 = &_swiftEmptyDictionarySingleton;
  v469 = &_swiftEmptyDictionarySingleton;
  v468 = &_swiftEmptyDictionarySingleton;
  v472 = &_swiftEmptyDictionarySingleton;
  v467 = &_swiftEmptyDictionarySingleton;
  uint64_t v543 = v55;
  uint64_t v463 = v86;
  while (1)
  {
    v534 = v98;
    if (!v97) {
      break;
    }
    v532 = (void (**)(void, void, void))((v97 - 1) & v97);
    v533 = v93;
    unint64_t v99 = __clz(__rbit64(v97)) | ((void)v93 << 6);
LABEL_24:
    uint64_t v104 = v87;
    long long v105 = (uint64_t *)((char *)v525[6].isa + 16 * v99);
    uint64_t v107 = *v105;
    unint64_t v106 = v105[1];
    int v108 = *((unsigned __int8 *)v525[7].isa + v99);
    swift_bridgeObjectRetain_n();
    uint64_t v109 = Logger.logObject.getter();
    os_log_type_t v110 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v109, v110))
    {
      uint64_t v111 = swift_slowAlloc();
      v576[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v111 = v521;
      swift_bridgeObjectRetain();
      uint64_t v112 = v107;
      *(void *)(v111 + 4) = sub_1000A2E70(v107, v106, (uint64_t *)v576);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "Configuring usage limit: %{public}s.", (uint8_t *)v111, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v112 = v107;

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain();
    v535 = (void (**)(void, void))v106;
    if (v108)
    {
      unint64_t v117 = swift_bridgeObjectRetain();
      uint64_t v118 = Logger.logObject.getter();
      os_log_type_t v119 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v118, v119))
      {
        uint64_t v120 = swift_slowAlloc();
        v576[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v120 = v521;
        swift_bridgeObjectRetain();
        *(void *)(v120 + 4) = sub_1000A2E70(v112, v117, (uint64_t *)v576);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v118, v119, "Usage limit: %{public}s is on.", (uint8_t *)v120, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v121 = sub_1001D7640();
      __chkstk_darwin(v121);
      uint64_t v479 = v112;
      sub_10009EE78(&qword_100343E18);
      NSManagedObjectContext.performAndWait<A>(_:)();
      if (v104) {
        goto LABEL_277;
      }

      id v461 = v576[0];
      if (v576[0])
      {
        id v122 = [v576[0] customScheduleItems];
        sub_1000A0760(0, &qword_100343E60);
        uint64_t v123 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v123 = 0;
      }
      id v124 = sub_1001D7640();
      __chkstk_darwin(v124);
      sub_10009EE78(&qword_100343E20);
      NSManagedObjectContext.performAndWait<A>(_:)();
      v554 = (char *)v123;
      uint64_t v530 = 0;

      id v125 = v576[0];
      unint64_t v126 = (char *)v576[1];
      unint64_t v127 = v577;
      uint64_t v128 = _swiftEmptyArrayStorage;
      id v129 = _swiftEmptyArrayStorage;
      uint64_t v130 = _swiftEmptyArrayStorage;
      unint64_t v572 = v577;
      if (v576[0] != (id)1)
      {
        swift_bridgeObjectRetain();
        if (v125)
        {
          int64_t v131 = v125[2];
          if (v131)
          {
            v576[0] = _swiftEmptyArrayStorage;
            sub_100208144(0, v131, 0);
            uint64_t v130 = v576[0];
            uint64_t v132 = (char *)(v125 + 5);
            int v133 = v485;
            do
            {
              swift_bridgeObjectRetain();
              Application.init(bundleIdentifier:)();
              v576[0] = v130;
              unint64_t v135 = v130[2];
              unint64_t v134 = v130[3];
              if (v135 >= v134 >> 1)
              {
                sub_100208144(v134 > 1, v135 + 1, 1);
                uint64_t v130 = v576[0];
              }
              v132 += 16;
              v130[2] = v135 + 1;
              (*(void (**)(unint64_t, char *, char *))(v524 + 32))((unint64_t)v130+ ((*(unsigned __int8 *)(v524 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v524 + 80))+ *(void *)(v524 + 72) * v135, v133, v526);
              --v131;
            }
            while (v131);
            swift_bridgeObjectRelease();
            unint64_t v127 = v572;
            goto LABEL_51;
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v130 = _swiftEmptyArrayStorage;
LABEL_51:
        if (v126 && (int64_t v136 = *((void *)v126 + 2)) != 0)
        {
          v576[0] = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain();
          sub_100208108(0, v136, 0);
          id v137 = v576[0];
          v552 = v126;
          uint64_t v138 = v126 + 40;
          unint64_t v139 = v486;
          do
          {
            swift_bridgeObjectRetain();
            ActivityCategory.init(identifier:)();
            v576[0] = v137;
            unint64_t v141 = v137[2];
            unint64_t v140 = v137[3];
            if (v141 >= v140 >> 1)
            {
              sub_100208108(v140 > 1, v141 + 1, 1);
              id v137 = v576[0];
            }
            v138 += 16;
            v137[2] = v141 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v523 + 32))((unint64_t)v137+ ((*(unsigned __int8 *)(v523 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v523 + 80))+ *(void *)(v523 + 72) * v141, v139, v555);
            --v136;
          }
          while (v136);
          unint64_t v126 = v552;
          swift_bridgeObjectRelease();
          id v129 = v137;
          unint64_t v127 = v572;
        }
        else
        {
          id v129 = _swiftEmptyArrayStorage;
        }
        if (v127 && (int64_t v142 = *(void *)(v127 + 16)) != 0)
        {
          v552 = v126;
          v482 = v129;
          v576[0] = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain();
          sub_1002080CC(0, v142, 0);
          uint64_t v128 = v576[0];
          unint64_t v143 = v127 + 40;
          unint64_t v144 = v487;
          do
          {
            swift_bridgeObjectRetain();
            WebDomain.init(domain:)();
            v576[0] = v128;
            unint64_t v146 = v128[2];
            unint64_t v145 = v128[3];
            if (v146 >= v145 >> 1)
            {
              sub_1002080CC(v145 > 1, v146 + 1, 1);
              uint64_t v128 = v576[0];
            }
            v143 += 16;
            v128[2] = v146 + 1;
            (*(void (**)(unint64_t, char *, int64_t))(v522 + 32))((unint64_t)v128+ ((*(unsigned __int8 *)(v522 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v522 + 80))+ *(void *)(v522 + 72) * v146, v144, v559);
            --v142;
          }
          while (v142);
          swift_bridgeObjectRelease();
          id v129 = v482;
        }
        else
        {
          uint64_t v128 = _swiftEmptyArrayStorage;
        }
      }
      v482 = v129;
      v508 = v130;
      id v147 = sub_1001D7640();
      __chkstk_darwin(v147);
      uint64_t v148 = v530;
      NSManagedObjectContext.performAndWait<A>(_:)();
      if (v148)
      {

        swift_bridgeObjectRelease();
        sub_1001AFEE8((uint64_t)v125);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }

      dispatch thunk of LocalRestrictions.setUpUsageLimitStore(with:applications:categories:webDomains:blockAtEndOfLimit:isManaged:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v554) {
        unint64_t v149 = (unint64_t)v554;
      }
      else {
        unint64_t v149 = (unint64_t)_swiftEmptyArrayStorage;
      }
      unint64_t v474 = v149;
      if (v149 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v150 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v150 = *(void *)((v149 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v87 = 0;
      if (v150)
      {
        v547 = (char *)v508[2];
        unint64_t v476 = v474 & 0xC000000000000001;
        uint64_t v465 = v474 & 0xFFFFFFFFFFFFFF8;
        unint64_t v464 = v474 + 32;
        uint64_t v475 = v150;
        unint64_t v151 = 0;
        v516 = v128;
        while (1)
        {
          if (v476)
          {
            id v527 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            os_log_type_t v164 = v526;
            BOOL v100 = __OFADD__(v151, 1);
            unint64_t v165 = v151 + 1;
            if (v100) {
              goto LABEL_282;
            }
          }
          else
          {
            os_log_type_t v164 = v526;
            if (v151 >= *(void *)(v465 + 16)) {
              goto LABEL_286;
            }
            id v527 = *(id *)(v464 + 8 * v151);
            BOOL v100 = __OFADD__(v151, 1);
            unint64_t v165 = v151 + 1;
            if (v100) {
              goto LABEL_282;
            }
          }
          uint64_t v530 = v87;
          uint64_t v166 = sub_1001B01A4(&qword_100343E28, (void (*)(uint64_t))&type metadata accessor for Application);
          v167 = v508;
          swift_bridgeObjectRetain();
          os_log_type_t v168 = v547;
          v552 = (char *)v166;
          int v169 = (char *)Set.init(minimumCapacity:)();
          unint64_t v484 = v165;
          if (v168)
          {
            uint64_t v170 = 0;
            v546 = (char *)v167
                 + ((*(unsigned __int8 *)(v524 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v524 + 80));
            unint64_t v572 = *(void *)(v524 + 72);
            uint64_t v171 = *(void (**)(void, void, void))(v524 + 16);
            do
            {
              v554 = v170;
              v171(v562, &v546[(void)v170 * v572], v164);
              swift_bridgeObjectRetain();
              uint64_t v172 = dispatch thunk of Hashable._rawHashValue(seed:)();
              uint64_t v173 = -1 << v169[32];
              unint64_t v174 = v172 & ~v173;
              uint64_t v175 = v169 + 56;
              if ((*(void *)&v169[((v174 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v174))
              {
                uint64_t v176 = ~v173;
                while (1)
                {
                  char v177 = v169;
                  unint64_t v178 = *((void *)v169 + 6) + v174 * v572;
                  v179 = v565;
                  v171(v565, v178, v164);
                  sub_1001B01A4(&qword_100343E30, (void (*)(uint64_t))&type metadata accessor for Application);
                  char v180 = dispatch thunk of static Equatable.== infix(_:_:)();
                  v181 = *v568;
                  (*v568)(v179, v164);
                  if (v180) {
                    break;
                  }
                  unint64_t v174 = (v174 + 1) & v176;
                  int v169 = v177;
                  if (((*(void *)&v175[(v174 >> 3) & 0xFFFFFFFFFFFFFF8] >> v174) & 1) == 0) {
                    goto LABEL_97;
                  }
                }
                int v169 = v177;
                swift_bridgeObjectRelease();
                v181(v562, v164);
              }
              else
              {
LABEL_97:
                swift_bridgeObjectRelease();
                int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v171(v558, v562, v164);
                v576[0] = v169;
                if (*((void *)v169 + 3) <= *((void *)v169 + 2))
                {
                  if (isUniquelyReferenced_nonNull_native) {
                    sub_100256C68();
                  }
                  else {
                    sub_100255574();
                  }
                  unint64_t v183 = v576[0];
                  uint64_t v184 = dispatch thunk of Hashable._rawHashValue(seed:)();
                  uint64_t v185 = -1 << v183[32];
                  unint64_t v174 = v184 & ~v185;
                  if ((*(void *)&v183[((v174 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v174))
                  {
                    uint64_t v186 = ~v185;
                    while (1)
                    {
                      id v187 = v565;
                      v171(v565, *((void *)v183 + 6) + v174 * v572, v164);
                      sub_1001B01A4(&qword_100343E30, (void (*)(uint64_t))&type metadata accessor for Application);
                      char v188 = dispatch thunk of static Equatable.== infix(_:_:)();
                      (*v568)(v187, v164);
                      if (v188) {
                        break;
                      }
                      unint64_t v174 = (v174 + 1) & v186;
                      if (((*(void *)&v183[((v174 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v174) & 1) == 0) {
                        goto LABEL_107;
                      }
                    }
LABEL_292:
                    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                    __break(1u);
                    goto LABEL_293;
                  }
                }
                else if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  sub_100254274();
                }
LABEL_107:
                int v169 = (char *)v576[0];
                *(void *)((char *)v576[0] + ((v174 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v174;
                (*(void (**)(unint64_t, char *, char *))v539)(*((void *)v169 + 6) + v174 * v572, v558, v164);
                uint64_t v189 = *((void *)v169 + 2);
                BOOL v100 = __OFADD__(v189, 1);
                uint64_t v190 = v189 + 1;
                if (v100) {
                  goto LABEL_272;
                }
                *((void *)v169 + 2) = v190;
                swift_bridgeObjectRelease();
                (*v568)(v562, v164);
              }
              uint64_t v170 = v554 + 1;
            }
            while (v554 + 1 != v547);
          }
          v483 = v169;
          swift_bridgeObjectRelease();
          v191 = v482;
          uint64_t v192 = sub_1001B01A4(&qword_100343E38, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
          swift_bridgeObjectRetain();
          uint64_t v193 = v555;
          v552 = (char *)v192;
          uint64_t v194 = Set.init(minimumCapacity:)();
          v195 = (char *)v194;
          v546 = (char *)v191[2];
          if (v546)
          {
            id v196 = 0;
            v544 = (char *)v191
                 + ((*(unsigned __int8 *)(v523 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v523 + 80));
            unint64_t v572 = *(void *)(v523 + 72);
            id v197 = *(void (**)(void, void, void))(v523 + 16);
            do
            {
              v554 = v196;
              v197(v561, &v544[(void)v196 * v572], v193);
              swift_bridgeObjectRetain();
              uint64_t v198 = dispatch thunk of Hashable._rawHashValue(seed:)();
              uint64_t v199 = -1 << v195[32];
              unint64_t v200 = v198 & ~v199;
              id v201 = v195 + 56;
              if ((*(void *)&v195[((v200 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v200))
              {
                uint64_t v202 = ~v199;
                while (1)
                {
                  v203 = v195;
                  unint64_t v204 = *((void *)v195 + 6) + v200 * v572;
                  os_log_type_t v205 = v564;
                  v197(v564, v204, v193);
                  sub_1001B01A4(&qword_100343E40, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
                  char v206 = dispatch thunk of static Equatable.== infix(_:_:)();
                  v207 = *(void (**)(char *, void))v567;
                  (*(void (**)(char *, uint64_t))v567)(v205, v193);
                  if (v206) {
                    break;
                  }
                  unint64_t v200 = (v200 + 1) & v202;
                  v195 = v203;
                  if (((*(void *)&v201[(v200 >> 3) & 0xFFFFFFFFFFFFFF8] >> v200) & 1) == 0) {
                    goto LABEL_117;
                  }
                }
                v195 = v203;
                swift_bridgeObjectRelease();
                v207(v561, v193);
              }
              else
              {
LABEL_117:
                swift_bridgeObjectRelease();
                int v208 = swift_isUniquelyReferenced_nonNull_native();
                v197(v557, v561, v193);
                v576[0] = v195;
                if (*((void *)v195 + 3) <= *((void *)v195 + 2))
                {
                  if (v208) {
                    sub_10025686C();
                  }
                  else {
                    sub_1002551C4();
                  }
                  v209 = v576[0];
                  uint64_t v210 = dispatch thunk of Hashable._rawHashValue(seed:)();
                  uint64_t v211 = -1 << v209[32];
                  unint64_t v200 = v210 & ~v211;
                  if ((*(void *)&v209[((v200 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v200))
                  {
                    uint64_t v212 = ~v211;
                    while (1)
                    {
                      id v213 = v564;
                      uint64_t v214 = v555;
                      v197(v564, *((void *)v209 + 6) + v200 * v572, v555);
                      sub_1001B01A4(&qword_100343E40, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
                      char v215 = dispatch thunk of static Equatable.== infix(_:_:)();
                      (*(void (**)(char *, uint64_t))v567)(v213, v214);
                      if (v215) {
                        break;
                      }
                      unint64_t v200 = (v200 + 1) & v212;
                      if (((*(void *)&v209[((v200 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v200) & 1) == 0) {
                        goto LABEL_127;
                      }
                    }
LABEL_293:
                    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                    __break(1u);
                    goto LABEL_294;
                  }
                }
                else if ((v208 & 1) == 0)
                {
                  sub_100254254();
                }
LABEL_127:
                v195 = (char *)v576[0];
                *(void *)((char *)v576[0] + ((v200 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v200;
                uint64_t v193 = v555;
                (*v538)(*((void *)v195 + 6) + v200 * v572, v557, v555);
                uint64_t v216 = *((void *)v195 + 2);
                BOOL v100 = __OFADD__(v216, 1);
                uint64_t v217 = v216 + 1;
                if (v100) {
                  goto LABEL_273;
                }
                *((void *)v195 + 2) = v217;
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))v567)(v561, v193);
              }
              id v196 = v554 + 1;
            }
            while (v554 + 1 != v546);
            v544 = v195;
          }
          else
          {
            v544 = (unsigned char *)v194;
          }
          swift_bridgeObjectRelease();
          uint64_t v218 = v516;
          uint64_t v219 = sub_1001B01A4(&qword_100343E48, (void (*)(uint64_t))&type metadata accessor for WebDomain);
          swift_bridgeObjectRetain();
          int64_t v220 = v559;
          v554 = (char *)v219;
          v221 = (unsigned char *)Set.init(minimumCapacity:)();
          v552 = (char *)v218[2];
          if (v552)
          {
            unint64_t v222 = 0;
            v546 = (char *)v218
                 + ((*(unsigned __int8 *)(v522 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v522 + 80));
            uint64_t v223 = *(void *)(v522 + 72);
            uint64_t v224 = *(void (**)(void, void, void))(v522 + 16);
            do
            {
              unint64_t v572 = v222;
              v224(v560, &v546[v222 * v223], v220);
              swift_bridgeObjectRetain();
              uint64_t v226 = dispatch thunk of Hashable._rawHashValue(seed:)();
              uint64_t v227 = -1 << v221[32];
              unint64_t v228 = v226 & ~v227;
              if ((*(void *)&v221[((v228 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v228))
              {
                uint64_t v229 = ~v227;
                while (1)
                {
                  v230 = v563;
                  v224(v563, *((void *)v221 + 6) + v228 * v223, v220);
                  sub_1001B01A4(&qword_100343E50, (void (*)(uint64_t))&type metadata accessor for WebDomain);
                  char v231 = dispatch thunk of static Equatable.== infix(_:_:)();
                  int64_t v232 = v220;
                  v233 = *(void (**)(void, void))v566;
                  (*(void (**)(char *, int64_t))v566)(v230, v232);
                  if (v231) {
                    break;
                  }
                  unint64_t v228 = (v228 + 1) & v229;
                  int64_t v220 = v559;
                  if (((*(void *)&v221[((v228 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v228) & 1) == 0) {
                    goto LABEL_139;
                  }
                }
                swift_bridgeObjectRelease();
                int64_t v225 = v559;
                v233(v560, v559);
                int64_t v220 = v225;
              }
              else
              {
LABEL_139:
                swift_bridgeObjectRelease();
                int v234 = swift_isUniquelyReferenced_nonNull_native();
                v224(v556, v560, v220);
                v576[0] = v221;
                if (*((void *)v221 + 3) <= *((void *)v221 + 2))
                {
                  if (v234) {
                    sub_100256470();
                  }
                  else {
                    sub_100254E14();
                  }
                  uint64_t v235 = v576[0];
                  uint64_t v236 = dispatch thunk of Hashable._rawHashValue(seed:)();
                  uint64_t v237 = -1 << v235[32];
                  unint64_t v228 = v236 & ~v237;
                  if ((*(void *)&v235[((v228 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v228))
                  {
                    uint64_t v238 = ~v237;
                    while (1)
                    {
                      uint64_t v239 = v563;
                      v224(v563, *((void *)v235 + 6) + v228 * v223, v220);
                      sub_1001B01A4(&qword_100343E50, (void (*)(uint64_t))&type metadata accessor for WebDomain);
                      char v240 = dispatch thunk of static Equatable.== infix(_:_:)();
                      (*(void (**)(char *, int64_t))v566)(v239, v220);
                      if (v240) {
                        break;
                      }
                      unint64_t v228 = (v228 + 1) & v238;
                      if (((*(void *)&v235[((v228 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v228) & 1) == 0) {
                        goto LABEL_149;
                      }
                    }
LABEL_294:
                    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                    __break(1u);
LABEL_295:
                    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                    __break(1u);
                    JUMPOUT(0x1001ACE1CLL);
                  }
                }
                else if ((v234 & 1) == 0)
                {
                  sub_100254234();
                }
LABEL_149:
                v221 = v576[0];
                *(void *)((char *)v576[0] + ((v228 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v228;
                (*v537)(*((void *)v221 + 6) + v228 * v223, v556, v220);
                uint64_t v241 = *((void *)v221 + 2);
                BOOL v100 = __OFADD__(v241, 1);
                uint64_t v242 = v241 + 1;
                if (v100) {
                  goto LABEL_274;
                }
                *((void *)v221 + 2) = v242;
                swift_bridgeObjectRelease();
                (*(void (**)(char *, int64_t))v566)(v560, v220);
              }
              unint64_t v222 = v572 + 1;
            }
            while ((char *)(v572 + 1) != v552);
          }
          swift_bridgeObjectRelease();
          uint64_t v243 = type metadata accessor for DateComponents();
          __chkstk_darwin(v243 - 8);
          [v527 budgetLimit];
          if ((~*(void *)&v244 & 0x7FF0000000000000) == 0) {
            goto LABEL_283;
          }
          if (v244 <= -9.22337204e18) {
            goto LABEL_284;
          }
          if (v244 >= 9.22337204e18) {
            goto LABEL_285;
          }
          uint64_t v245 = sub_10009EE78(&qword_100341960);
          __chkstk_darwin(v245 - 8);
          v247 = (char *)v460 - ((v246 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v248 = type metadata accessor for Calendar();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v248 - 8) + 56))(v247, 1, 1, v248);
          uint64_t v249 = sub_10009EE78((uint64_t *)&unk_100340F30);
          __chkstk_darwin(v249 - 8);
          v251 = (char *)v460 - ((v250 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v252 = type metadata accessor for TimeZone();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v252 - 8) + 56))(v251, 1, 1, v252);
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
          DeviceActivityEvent.init(untokenizedApplications:untokenizedCategories:untokenizedWebDomains:threshold:includesPastActivity:)();
          id v253 = [v527 day];
          uint64_t v254 = v543;
          switch((unint64_t)v253)
          {
            case 1uLL:
              swift_bridgeObjectRetain();
              uint64_t v255 = (uint64_t)v514;
              DeviceActivityEvent.Name.init(_:)();
              uint64_t v256 = (uint64_t)v499;
              (*v541)(v499, (char *)v531, v254);
              v257 = *v480;
              (*v480)(v256, 0, 1, v254);
              int v258 = (*v477)(v256, 1, v254);
              uint64_t v87 = v530;
              if (v258 != 1)
              {
                (*v473)(v498, v256, v254);
                v345 = v472;
                int v346 = swift_isUniquelyReferenced_nonNull_native();
                v576[0] = v345;
                unint64_t v348 = sub_10010A198(v255);
                uint64_t v349 = v345[2];
                BOOL v350 = (v347 & 1) == 0;
                uint64_t v351 = v349 + v350;
                if (__OFADD__(v349, v350))
                {
                  __break(1u);
                  goto LABEL_292;
                }
                char v352 = v347;
                if (v345[3] >= v351)
                {
                  uint64_t v355 = v551;
                  if ((v346 & 1) == 0)
                  {
                    sub_100235B64();
                    goto LABEL_195;
                  }
                }
                else
                {
                  sub_100234984(v351, v346);
                  unint64_t v353 = sub_10010A198(v255);
                  if ((v352 & 1) != (v354 & 1)) {
                    goto LABEL_295;
                  }
                  unint64_t v348 = v353;
LABEL_195:
                  uint64_t v355 = v551;
                }
                v367 = v576[0];
                if (v352)
                {
                  (*(void (**)(unint64_t, uint64_t, uint64_t))(v548 + 40))(*((void *)v576[0] + 7) + *(void *)(v548 + 72) * v348, v498, v254);
                }
                else
                {
                  v368 = v545;
                  (*v540)(v545, v514, v355);
                  uint64_t v369 = (uint64_t)v368;
                  uint64_t v255 = (uint64_t)v514;
                  sub_1001AED40(v348, v369, v498, v367);
                }
                v472 = v576[0];
                swift_bridgeObjectRelease();
                (*v478)((char *)v255, v355);
                goto LABEL_82;
              }
              sub_1000A4FD8(v256, &qword_100343E10);
              uint64_t v259 = v255;
              v260 = v472;
              swift_bridgeObjectRetain();
              unint64_t v261 = sub_10010A198(v259);
              char v263 = v262;
              swift_bridgeObjectRelease();
              if (v263)
              {
                char v264 = swift_isUniquelyReferenced_nonNull_native();
                v576[0] = v260;
                if ((v264 & 1) == 0)
                {
                  sub_100235B64();
                  v260 = v576[0];
                }
                unint64_t v265 = v260[6] + *(void *)(v550 + 72) * v261;
                unint64_t v572 = *(void *)(v550 + 8);
                uint64_t v154 = v551;
                ((void (*)(unint64_t, uint64_t))v572)(v265, v551);
                v266 = v576[0];
                uint64_t v156 = v488;
                (*(void (**)(char *, unint64_t, uint64_t))(v548 + 32))(v488, *((void *)v576[0] + 7) + *(void *)(v548 + 72) * v261, v254);
                v472 = v266;
                sub_1001AE190(v261, (uint64_t)v266);
                swift_bridgeObjectRelease();
                v257(v156, 0, 1, v254);
                id v157 = (void (*)(char *, uint64_t))v572;
              }
              else
              {
                uint64_t v156 = v488;
                v257(v488, 1, 1, v254);
                id v157 = *v478;
                uint64_t v154 = v551;
              }
              unsigned __int8 v160 = v514;
LABEL_80:
              v157(v160, v154);
              uint64_t v161 = (uint64_t)v156;
LABEL_81:
              sub_1000A4FD8(v161, &qword_100343E10);
LABEL_82:
              uint64_t v162 = v475;

              (*v542)((char *)v531, v254);
              BOOL v163 = v484 == v162;
              unint64_t v151 = v484;
              if (v163) {
                goto LABEL_220;
              }
              break;
            case 2uLL:
              swift_bridgeObjectRetain();
              uint64_t v159 = (uint64_t)v506;
              DeviceActivityEvent.Name.init(_:)();
              uint64_t v300 = (uint64_t)v500;
              (*v541)(v500, (char *)v531, v254);
              v280 = *v480;
              (*v480)(v300, 0, 1, v254);
              int v301 = (*v477)(v300, 1, v254);
              uint64_t v87 = v530;
              if (v301 != 1)
              {
                uint64_t v356 = (uint64_t)v549;
                (*v473)(v549, v300, v254);
                v357 = v534;
                char v358 = swift_isUniquelyReferenced_nonNull_native();
                v576[0] = v357;
                sub_1001AEA68(v356, v159, v358);
                v340 = (char *)v576[0];
                v341 = &v566;
                goto LABEL_197;
              }
              sub_1000A4FD8(v300, &qword_100343E10);
              v370 = v534;
              swift_bridgeObjectRetain();
              unint64_t v302 = sub_10010A198(v159);
              char v304 = v303;
              swift_bridgeObjectRelease();
              if ((v304 & 1) == 0)
              {
                v305 = (char *)&v521;
                goto LABEL_205;
              }
              char v152 = swift_isUniquelyReferenced_nonNull_native();
              v576[0] = v370;
              if ((v152 & 1) == 0)
              {
                sub_100235B64();
                v370 = v576[0];
              }
              unint64_t v153 = v370[6] + *(void *)(v550 + 72) * v302;
              unint64_t v572 = *(void *)(v550 + 8);
              uint64_t v154 = v551;
              ((void (*)(unint64_t, uint64_t))v572)(v153, v551);
              id v155 = v576[0];
              uint64_t v156 = v489;
              (*(void (**)(char *, unint64_t, uint64_t))(v548 + 32))(v489, *((void *)v576[0] + 7) + *(void *)(v548 + 72) * v302, v254);
              v534 = v155;
              sub_1001AE190(v302, (uint64_t)v155);
              swift_bridgeObjectRelease();
              v280(v156, 0, 1, v254);
              id v157 = (void (*)(char *, uint64_t))v572;
              uint64_t v158 = (uint64_t *)&v535;
              goto LABEL_78;
            case 3uLL:
              swift_bridgeObjectRetain();
              uint64_t v159 = (uint64_t)v507;
              DeviceActivityEvent.Name.init(_:)();
              uint64_t v279 = (uint64_t)v501;
              (*v541)(v501, (char *)v531, v254);
              v280 = *v480;
              (*v480)(v279, 0, 1, v254);
              int v281 = (*v477)(v279, 1, v254);
              uint64_t v87 = v530;
              if (v281 != 1)
              {
                uint64_t v337 = (uint64_t)v549;
                (*v473)(v549, v279, v254);
                v338 = v471;
                char v339 = swift_isUniquelyReferenced_nonNull_native();
                v576[0] = v338;
                sub_1001AEA68(v337, v159, v339);
                v340 = (char *)v576[0];
                v341 = &v503;
LABEL_197:
                *(v341 - 32) = v340;
                swift_bridgeObjectRelease();
                v359 = *v478;
                uint64_t v360 = v159;
                goto LABEL_201;
              }
              sub_1000A4FD8(v279, &qword_100343E10);
              v282 = v471;
              swift_bridgeObjectRetain();
              unint64_t v283 = sub_10010A198(v159);
              char v285 = v284;
              swift_bridgeObjectRelease();
              if (v285)
              {
                char v286 = swift_isUniquelyReferenced_nonNull_native();
                v576[0] = v282;
                if ((v286 & 1) == 0)
                {
                  sub_100235B64();
                  v282 = v576[0];
                }
                unint64_t v287 = v282[6] + *(void *)(v550 + 72) * v283;
                unint64_t v572 = *(void *)(v550 + 8);
                uint64_t v154 = v551;
                ((void (*)(unint64_t, uint64_t))v572)(v287, v551);
                id v288 = v576[0];
                uint64_t v156 = v490;
                (*(void (**)(char *, unint64_t, uint64_t))(v548 + 32))(v490, *((void *)v576[0] + 7) + *(void *)(v548 + 72) * v283, v254);
                v471 = v288;
                sub_1001AE190(v283, (uint64_t)v288);
                swift_bridgeObjectRelease();
                v280(v156, 0, 1, v254);
                id v157 = (void (*)(char *, uint64_t))v572;
                uint64_t v158 = &v536;
LABEL_78:
                uint64_t v159 = *(v158 - 32);
              }
              else
              {
                v305 = (char *)&v521 + 8;
LABEL_205:
                uint64_t v156 = (char *)*((void *)v305 - 32);
                v280(v156, 1, 1, v254);
                id v157 = *v478;
                uint64_t v154 = v551;
              }
              unsigned __int8 v160 = (char *)v159;
              goto LABEL_80;
            case 4uLL:
              swift_bridgeObjectRetain();
              uint64_t v267 = (uint64_t)v509;
              DeviceActivityEvent.Name.init(_:)();
              uint64_t v289 = (uint64_t)v502;
              (*v541)(v502, (char *)v531, v254);
              v290 = *v480;
              (*v480)(v289, 0, 1, v254);
              int v291 = (*v477)(v289, 1, v254);
              uint64_t v87 = v530;
              if (v291 != 1)
              {
                uint64_t v342 = (uint64_t)v549;
                (*v473)(v549, v289, v254);
                v343 = v470;
                char v344 = swift_isUniquelyReferenced_nonNull_native();
                v576[0] = v343;
                sub_1001AEA68(v342, v267, v344);
                v335 = (char *)v576[0];
                v336 = &v502;
                goto LABEL_200;
              }
              sub_1000A4FD8(v289, &qword_100343E10);
              uint64_t v292 = v267;
              v293 = v470;
              swift_bridgeObjectRetain();
              unint64_t v294 = sub_10010A198(v292);
              char v296 = v295;
              swift_bridgeObjectRelease();
              if (v296)
              {
                char v297 = swift_isUniquelyReferenced_nonNull_native();
                v576[0] = v293;
                if ((v297 & 1) == 0)
                {
                  sub_100235B64();
                  v293 = v576[0];
                }
                unint64_t v298 = v293[6] + *(void *)(v550 + 72) * v294;
                unint64_t v572 = *(void *)(v550 + 8);
                uint64_t v154 = v551;
                ((void (*)(unint64_t, uint64_t))v572)(v298, v551);
                id v299 = v576[0];
                uint64_t v156 = v491;
                (*(void (**)(char *, unint64_t, uint64_t))(v548 + 32))(v491, *((void *)v576[0] + 7) + *(void *)(v548 + 72) * v294, v254);
                v470 = v299;
                sub_1001AE190(v294, (uint64_t)v299);
                swift_bridgeObjectRelease();
                v290(v156, 0, 1, v254);
                id v157 = (void (*)(char *, uint64_t))v572;
              }
              else
              {
                uint64_t v156 = v491;
                v290(v491, 1, 1, v254);
                id v157 = *v478;
                uint64_t v154 = v551;
              }
              unsigned __int8 v160 = v509;
              goto LABEL_80;
            case 5uLL:
              swift_bridgeObjectRetain();
              uint64_t v267 = (uint64_t)v510;
              DeviceActivityEvent.Name.init(_:)();
              uint64_t v268 = (uint64_t)v503;
              (*v541)(v503, (char *)v531, v254);
              v269 = *v480;
              (*v480)(v268, 0, 1, v254);
              int v270 = (*v477)(v268, 1, v254);
              uint64_t v87 = v530;
              if (v270 != 1)
              {
                uint64_t v332 = (uint64_t)v549;
                (*v473)(v549, v268, v254);
                v333 = v469;
                char v334 = swift_isUniquelyReferenced_nonNull_native();
                v576[0] = v333;
                sub_1001AEA68(v332, v267, v334);
                v335 = (char *)v576[0];
                v336 = &v501;
                goto LABEL_200;
              }
              sub_1000A4FD8(v268, &qword_100343E10);
              uint64_t v271 = v267;
              v272 = v469;
              swift_bridgeObjectRetain();
              unint64_t v273 = sub_10010A198(v271);
              char v275 = v274;
              swift_bridgeObjectRelease();
              if (v275)
              {
                char v276 = swift_isUniquelyReferenced_nonNull_native();
                v576[0] = v272;
                if ((v276 & 1) == 0)
                {
                  sub_100235B64();
                  v272 = v576[0];
                }
                unint64_t v277 = v272[6] + *(void *)(v550 + 72) * v273;
                unint64_t v572 = *(void *)(v550 + 8);
                uint64_t v154 = v551;
                ((void (*)(unint64_t, uint64_t))v572)(v277, v551);
                id v278 = v576[0];
                uint64_t v156 = v492;
                (*(void (**)(char *, unint64_t, uint64_t))(v548 + 32))(v492, *((void *)v576[0] + 7) + *(void *)(v548 + 72) * v273, v254);
                v469 = v278;
                sub_1001AE190(v273, (uint64_t)v278);
                swift_bridgeObjectRelease();
                v269(v156, 0, 1, v254);
                id v157 = (void (*)(char *, uint64_t))v572;
              }
              else
              {
                uint64_t v156 = v492;
                v269(v492, 1, 1, v254);
                id v157 = *v478;
                uint64_t v154 = v551;
              }
              unsigned __int8 v160 = v510;
              goto LABEL_80;
            case 6uLL:
              swift_bridgeObjectRetain();
              uint64_t v267 = (uint64_t)v511;
              DeviceActivityEvent.Name.init(_:)();
              uint64_t v306 = (uint64_t)v504;
              (*v541)(v504, (char *)v531, v254);
              v307 = *v480;
              (*v480)(v306, 0, 1, v254);
              int v308 = (*v477)(v306, 1, v254);
              uint64_t v87 = v530;
              if (v308 != 1)
              {
                uint64_t v361 = (uint64_t)v549;
                (*v473)(v549, v306, v254);
                v362 = v468;
                char v363 = swift_isUniquelyReferenced_nonNull_native();
                v576[0] = v362;
                sub_1001AEA68(v361, v267, v363);
                v335 = (char *)v576[0];
                v336 = &v500;
                goto LABEL_200;
              }
              sub_1000A4FD8(v306, &qword_100343E10);
              uint64_t v309 = v267;
              v310 = v468;
              swift_bridgeObjectRetain();
              unint64_t v311 = sub_10010A198(v309);
              char v313 = v312;
              swift_bridgeObjectRelease();
              if (v313)
              {
                char v314 = swift_isUniquelyReferenced_nonNull_native();
                v576[0] = v310;
                if ((v314 & 1) == 0)
                {
                  sub_100235B64();
                  v310 = v576[0];
                }
                unint64_t v315 = v310[6] + *(void *)(v550 + 72) * v311;
                unint64_t v572 = *(void *)(v550 + 8);
                uint64_t v154 = v551;
                ((void (*)(unint64_t, uint64_t))v572)(v315, v551);
                id v316 = v576[0];
                uint64_t v156 = v493;
                (*(void (**)(char *, unint64_t, uint64_t))(v548 + 32))(v493, *((void *)v576[0] + 7) + *(void *)(v548 + 72) * v311, v254);
                v468 = v316;
                sub_1001AE190(v311, (uint64_t)v316);
                swift_bridgeObjectRelease();
                v307(v156, 0, 1, v254);
                id v157 = (void (*)(char *, uint64_t))v572;
              }
              else
              {
                uint64_t v156 = v493;
                v307(v493, 1, 1, v254);
                id v157 = *v478;
                uint64_t v154 = v551;
              }
              unsigned __int8 v160 = v511;
              goto LABEL_80;
            case 7uLL:
              swift_bridgeObjectRetain();
              uint64_t v267 = (uint64_t)v512;
              DeviceActivityEvent.Name.init(_:)();
              uint64_t v317 = (uint64_t)v505;
              (*v541)(v505, (char *)v531, v254);
              v318 = *v480;
              (*v480)(v317, 0, 1, v254);
              int v319 = (*v477)(v317, 1, v254);
              uint64_t v87 = v530;
              if (v319 == 1)
              {
                sub_1000A4FD8(v317, &qword_100343E10);
                v320 = v467;
                swift_bridgeObjectRetain();
                unint64_t v321 = sub_10010A198(v267);
                char v323 = v322;
                swift_bridgeObjectRelease();
                v324 = v478;
                if (v323)
                {
                  char v325 = swift_isUniquelyReferenced_nonNull_native();
                  v576[0] = v320;
                  if ((v325 & 1) == 0)
                  {
                    sub_100235B64();
                    v320 = v576[0];
                  }
                  unint64_t v326 = v320[6] + *(void *)(v550 + 72) * v321;
                  unint64_t v572 = *(void *)(v550 + 8);
                  uint64_t v327 = v551;
                  ((void (*)(unint64_t, uint64_t))v572)(v326, v551);
                  v328 = v576[0];
                  unint64_t v329 = *((void *)v576[0] + 7) + *(void *)(v548 + 72) * v321;
                  int64_t v330 = v321;
                  v331 = v494;
                  (*(void (**)(char *, unint64_t, uint64_t))(v548 + 32))(v494, v329, v254);
                  v467 = v328;
                  sub_1001AE190(v330, (uint64_t)v328);
                  swift_bridgeObjectRelease();
                  v318(v331, 0, 1, v254);
                  ((void (*)(char *, uint64_t))v572)(v512, v327);
                }
                else
                {
                  v331 = v494;
                  v318(v494, 1, 1, v254);
                  (*v324)(v512, v551);
                }
                uint64_t v161 = (uint64_t)v331;
                goto LABEL_81;
              }
              uint64_t v364 = (uint64_t)v549;
              (*v473)(v549, v317, v254);
              v365 = v467;
              char v366 = swift_isUniquelyReferenced_nonNull_native();
              v576[0] = v365;
              sub_1001AEA68(v364, v267, v366);
              v335 = (char *)v576[0];
              v336 = &v499;
LABEL_200:
              *(v336 - 32) = v335;
              swift_bridgeObjectRelease();
              v359 = *v478;
              uint64_t v360 = v267;
LABEL_201:
              v359((char *)v360, v551);
              goto LABEL_82;
            default:
              goto LABEL_275;
          }
        }
      }
LABEL_220:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      uint64_t v98 = v534;
      id v93 = v533;
      unint64_t v97 = (unint64_t)v532;
    }
    else
    {
      uint64_t v113 = Logger.logObject.getter();
      os_log_type_t v114 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v113, v114))
      {
        uint64_t v115 = swift_slowAlloc();
        v576[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v115 = v521;
        unint64_t v116 = (unint64_t)v535;
        swift_bridgeObjectRetain();
        *(void *)(v115 + 4) = sub_1000A2E70(v112, v116, (uint64_t *)v576);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v113, v114, "Usage limit: %{public}s is off.", (uint8_t *)v115, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v98 = v534;
      id v93 = v533;
      unint64_t v97 = (unint64_t)v532;
      uint64_t v87 = v104;
    }
  }
  BOOL v100 = __OFADD__(v93, 1);
  uint64_t v101 = (uint64_t)v93 + 1;
  if (v100) {
    goto LABEL_281;
  }
  if (v101 < (uint64_t)v515)
  {
    unint64_t v102 = (unint64_t)v513[v101].isa;
    if (!v102)
    {
      uint64_t v103 = v101 + 1;
      if (v101 + 1 >= (uint64_t)v515) {
        goto LABEL_222;
      }
      unint64_t v102 = (unint64_t)v513[v103].isa;
      if (!v102)
      {
        uint64_t v103 = v101 + 2;
        if (v101 + 2 >= (uint64_t)v515) {
          goto LABEL_222;
        }
        unint64_t v102 = (unint64_t)v513[v103].isa;
        if (!v102)
        {
          uint64_t v103 = v101 + 3;
          if (v101 + 3 >= (uint64_t)v515) {
            goto LABEL_222;
          }
          unint64_t v102 = (unint64_t)v513[v103].isa;
          if (!v102)
          {
            while (1)
            {
              uint64_t v101 = v103 + 1;
              if (__OFADD__(v103, 1)) {
                goto LABEL_287;
              }
              if (v101 >= (uint64_t)v515) {
                goto LABEL_222;
              }
              unint64_t v102 = (unint64_t)v513[v101].isa;
              ++v103;
              if (v102) {
                goto LABEL_23;
              }
            }
          }
        }
      }
      uint64_t v101 = v103;
    }
LABEL_23:
    v532 = (void (**)(void, void, void))((v102 - 1) & v102);
    v533 = (void (**)(char *, void, uint64_t, uint64_t))v101;
    unint64_t v99 = __clz(__rbit64(v102)) + (v101 << 6);
    goto LABEL_24;
  }
LABEL_222:
  swift_release();
  uint64_t v530 = v87;
  if (!v472[2]
    && !v534[2]
    && !*((void *)v471 + 2)
    && !*((void *)v470 + 2)
    && !*((void *)v469 + 2)
    && !*((void *)v468 + 2)
    && !v467[2])
  {
    goto LABEL_288;
  }
  v563 = (char *)type metadata accessor for DateComponents();
  v516 = v460;
  v562 = (char *)*((void *)v563 - 1);
  v371 = (void (**)(char *, char *))*((void *)v562 + 8);
  __chkstk_darwin(v563);
  v539 = (char *)(((unint64_t)v371 + 15) & 0xFFFFFFFFFFFFFFF0);
  v372 = (void (**)(unint64_t, char *, uint64_t))((char *)v460 - v539);
  uint64_t v373 = sub_10009EE78(&qword_100341960);
  v570 = v460;
  v571 = *(void **)(*(void *)(v373 - 8) + 64);
  __chkstk_darwin(v373 - 8);
  unint64_t v572 = (v374 + 15) & 0xFFFFFFFFFFFFFFF0;
  v375 = (char *)v460 - v572;
  v565 = (char *)type metadata accessor for Calendar();
  uint64_t v376 = *((void *)v565 - 1);
  uint64_t v567 = *(void *)(v376 + 56);
  uint64_t v569 = v376 + 56;
  ((void (*)(char *, uint64_t, uint64_t, char *))v567)(v375, 1, 1, v565);
  uint64_t v377 = sub_10009EE78((uint64_t *)&unk_100340F30);
  uint64_t v378 = *(void *)(*(void *)(v377 - 8) + 64);
  __chkstk_darwin(v377 - 8);
  v566 = (char *)((v378 + 15) & 0xFFFFFFFFFFFFFFF0);
  v379 = (char *)((char *)v460 - v566);
  uint64_t v380 = type metadata accessor for TimeZone();
  uint64_t v381 = *(void *)(v380 - 8);
  v382 = *(void (**)(void, void, void, void))(v381 + 56);
  v564 = (char *)(v381 + 56);
  v382(v379, 1, 1, v380);
  v538 = v372;
  uint64_t v383 = DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  v515 = v460;
  v568 = v371;
  uint64_t v384 = __chkstk_darwin(v383);
  v385 = (void (**)(unint64_t, char *, int64_t))((char *)v460 - v539);
  v570 = v460;
  __chkstk_darwin(v384);
  uint64_t v386 = ((uint64_t (*)(char *, uint64_t, uint64_t, char *))v567)((char *)v460 - v572, 1, 1, v565);
  __chkstk_darwin(v386);
  uint64_t v387 = (uint64_t)v563;
  v382((char *)v460 - v566, 1, 1, v380);
  v537 = v385;
  uint64_t v388 = DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  id v389 = (id)*((void *)v562 + 2);
  v533 = (void (**)(char *, void, uint64_t, uint64_t))(v562 + 56);
  v532 = (void (**)(void, void, void))(v496 + 16);
  v531 = (void (**)(char *, uint64_t))(v495 + 8);
  v535 = (void (**)(void, void))(v562 + 8);
  v526 = &v574;
  v561 = (char *)(v550 + 32);
  v560 = v562 + 32;
  *(void *)&long long v390 = 136446466;
  long long v522 = v390;
  *(void *)&long long v521 = (char *)&type metadata for Any + 8;
  uint64_t v391 = 1;
  uint64_t v392 = v530;
  v547 = (char *)(v496 + 8);
  v546 = v562 + 16;
  id v527 = v389;
LABEL_232:
  uint64_t v530 = v392;
  v557 = (char *)v460;
  __chkstk_darwin(v388);
  v395 = v539;
  v396 = (char *)((char *)v460 - v539);
  ((void (*)(int64_t, void, uint64_t))v389)((char *)v460 - v539, v538, v387);
  uint64_t v397 = DateComponents.weekday.setter();
  v556 = (char *)v460;
  __chkstk_darwin(v397);
  ((void (*)(int64_t, void, uint64_t))v389)((char *)v460 - v395, v537, v387);
  uint64_t v398 = DateComponents.weekday.setter();
  unint64_t v572 = (unint64_t)v460;
  __chkstk_darwin(v398);
  uint64_t v555 = (uint64_t)v396;
  uint64_t v399 = ((uint64_t (*)(int64_t, int64_t, uint64_t))v389)((char *)v460 - v395, (char *)v460 - v395, v387);
  v571 = v460;
  __chkstk_darwin(v399);
  v554 = (char *)((char *)v460 - v395);
  ((void (*)(int64_t, int64_t, uint64_t))v389)((char *)v460 - v395, (char *)v460 - v395, v387);
  uint64_t v400 = sub_10009EE78(&qword_100343E68);
  __chkstk_darwin(v400 - 8);
  v402 = (char *)v460 - ((v401 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100340E08 != -1) {
    swift_once();
  }
  uint64_t v403 = sub_10009DA74(v387, (uint64_t)qword_100343C88);
  ((void (*)(char *, uint64_t, uint64_t))v389)(v402, v403, v387);
  (*v533)(v402, 0, 1, v387);
  DeviceActivitySchedule.init(intervalStart:intervalEnd:repeats:warningTime:)();
  v552 = (char *)v391;
  v404 = v528;
  v405 = v519;
  v406 = v547;
  uint64_t v407 = v530;
  switch(v391)
  {
    case 1:
      static DeviceActivityName.usagelimit_weekday_1.getter();
      v408 = &v504;
      goto LABEL_244;
    case 2:
      static DeviceActivityName.usagelimit_weekday_2.getter();
      v408 = &v566;
      goto LABEL_244;
    case 3:
      static DeviceActivityName.usagelimit_weekday_3.getter();
      v408 = &v503;
      goto LABEL_244;
    case 4:
      static DeviceActivityName.usagelimit_weekday_4.getter();
      v408 = &v502;
      goto LABEL_244;
    case 5:
      static DeviceActivityName.usagelimit_weekday_5.getter();
      v408 = &v501;
      goto LABEL_244;
    case 6:
      static DeviceActivityName.usagelimit_weekday_6.getter();
      v408 = &v500;
      goto LABEL_244;
    default:
      v404 = v528;
      v405 = v519;
      v406 = v547;
      uint64_t v407 = v530;
      if (v528 != (char *)7)
      {
        swift_bridgeObjectRelease();
        sub_1001AFF38();
        swift_allocError();
        unsigned char *v454 = 3;
        swift_willThrow();
        (*v531)(v529, v517);
        v455 = *v535;
        (*v535)(v554, v387);
        v455(v555, v387);
        v455(v537, v387);
        v455(v538, v387);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      static DeviceActivityName.usagelimit_weekday_7.getter();
      v408 = &v499;
LABEL_244:
      uint64_t v121 = *(v408 - 32);
      v578 = v121;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      v409 = v404;
      uint64_t v410 = v520;
      (*v532)(v405, v409, v520);
      swift_bridgeObjectRetain();
      DeviceActivityCenter.startMonitoring(_:during:events:)();
      uint64_t v392 = v407;
      if (v407)
      {
        swift_bridgeObjectRelease();
        uint64_t v450 = v410;
        v451 = *(char **)v406;
        (*(void (**)(char *, uint64_t))v406)(v405, v450);
        (*v531)(v529, v517);
        v452 = *v535;
        (*v535)(v554, v387);
        v452(v555, v387);
        v452(v537, v387);
        v452(v538, v387);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v451)(v528, v450);
        return;
      }
      v411 = *(char **)v406;
      (*(void (**)(char *, uint64_t))v406)(v405, v410);
      swift_bridgeObjectRelease();
      v412 = Logger.logObject.getter();
      LODWORD(v544) = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v412, (os_log_type_t)v544))
      {

        (*v531)(v529, v517);
        uint64_t v393 = v410;
        v394 = *v535;
        (*v535)(v554, v387);
        v394(v555, v387);
        swift_bridgeObjectRelease();
        uint64_t v388 = ((uint64_t (*)(char *, uint64_t))v411)(v528, v393);
        goto LABEL_231;
      }
      os_log_t v525 = v412;
      uint64_t v530 = 0;
      uint64_t v413 = swift_slowAlloc();
      uint64_t v523 = swift_slowAlloc();
      uint64_t v575 = v523;
      *(_DWORD *)uint64_t v413 = v522;
      swift_beginAccess();
      uint64_t v414 = DeviceActivityName.rawValue.getter();
      unint64_t v416 = v415;
      swift_endAccess();
      uint64_t v573 = sub_1000A2E70(v414, v416, &v575);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v524 = v413;
      *(_WORD *)(v413 + 12) = 2082;
      swift_beginAccess();
      v417 = v578;
      sub_10009EE78(&qword_100343E70);
      uint64_t v418 = static _DictionaryStorage.copy(original:)();
      v419 = (char *)v418;
      uint64_t v420 = 1 << *((unsigned char *)v417 + 32);
      uint64_t v421 = v417[8];
      v558 = (char *)(v417 + 8);
      if (v420 < 64) {
        uint64_t v422 = ~(-1 << v420);
      }
      else {
        uint64_t v422 = -1;
      }
      unint64_t v423 = v422 & v421;
      int64_t v559 = (unint64_t)(v420 + 63) >> 6;
      v565 = (char *)(v418 + 64);
      uint64_t v567 = (uint64_t)v417;
      swift_bridgeObjectRetain();
      v424 = 0;
      v564 = v411;
      v566 = v419;
      if (v423)
      {
LABEL_250:
        uint64_t v569 = (v423 - 1) & v423;
        v570 = v424;
        unint64_t v425 = __clz(__rbit64(v423)) | ((void)v424 << 6);
        goto LABEL_265;
      }
      break;
  }
  while (1)
  {
    int64_t v426 = (int64_t)v424 + 1;
    if (__OFADD__(v424, 1))
    {
      __break(1u);
LABEL_277:

      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_278;
    }
    if (v426 >= v559) {
      goto LABEL_268;
    }
    unint64_t v427 = *(void *)&v558[8 * v426];
    int64_t v428 = (int64_t)v424 + 1;
    if (!v427)
    {
      int64_t v428 = (int64_t)v424 + 2;
      if ((uint64_t)v424 + 2 >= v559) {
        goto LABEL_268;
      }
      unint64_t v427 = *(void *)&v558[8 * v428];
      if (!v427)
      {
        int64_t v428 = (int64_t)v424 + 3;
        if ((uint64_t)v424 + 3 >= v559) {
          goto LABEL_268;
        }
        unint64_t v427 = *(void *)&v558[8 * v428];
        if (!v427)
        {
          v429 = (char *)v424 + 4;
          if ((uint64_t)v424 + 4 < v559)
          {
            unint64_t v427 = *(void *)&v558[8 * (void)v429];
            if (v427)
            {
              int64_t v428 = (int64_t)v424 + 4;
              goto LABEL_264;
            }
            while (1)
            {
              int64_t v428 = (int64_t)(v429 + 1);
              if (__OFADD__(v429, 1)) {
                break;
              }
              if (v428 >= v559) {
                goto LABEL_268;
              }
              unint64_t v427 = *(void *)&v558[8 * v428];
              ++v429;
              if (v427) {
                goto LABEL_264;
              }
            }
            __break(1u);
LABEL_281:
            __break(1u);
LABEL_282:
            __break(1u);
LABEL_283:
            __break(1u);
LABEL_284:
            __break(1u);
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            swift_bridgeObjectRelease();
            sub_10009EE78(&qword_100343E08);
            uint64_t v456 = swift_allocObject();
            *(_OWORD *)(v456 + 16) = xmmword_1002874C0;
            static DeviceActivityName.usagelimit_weekday_1.getter();
            static DeviceActivityName.usagelimit_weekday_2.getter();
            static DeviceActivityName.usagelimit_weekday_3.getter();
            static DeviceActivityName.usagelimit_weekday_4.getter();
            static DeviceActivityName.usagelimit_weekday_5.getter();
            static DeviceActivityName.usagelimit_weekday_6.getter();
            static DeviceActivityName.usagelimit_weekday_7.getter();
            DeviceActivityCenter.stopMonitoring(_:)((Swift::OpaquePointer)v456);
            swift_bridgeObjectRelease();
            v457 = Logger.logObject.getter();
            os_log_type_t v458 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v457, v458))
            {
              v459 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v459 = 0;
              _os_log_impl((void *)&_mh_execute_header, v457, v458, "No enabled usage limits. Stopping usage limit monitoring.", v459, 2u);
              swift_slowDealloc();
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
LABEL_268:
          swift_bridgeObjectRelease();
          v445 = (uint8_t *)v524;
          sub_1001B01A4((unint64_t *)&qword_1003431F0, (void (*)(uint64_t))&type metadata accessor for DeviceActivityEvent.Name);
          uint64_t v446 = Dictionary.description.getter();
          unint64_t v448 = v447;
          swift_release();
          uint64_t v573 = sub_1000A2E70(v446, v448, &v575);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          os_log_t v449 = v525;
          _os_log_impl((void *)&_mh_execute_header, v525, (os_log_type_t)v544, "Monitoring %{public}s with events: %{public}s", v445, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*v531)(v529, v517);
          v394 = *v535;
          (*v535)(v554, v387);
          v394(v555, v387);
          swift_bridgeObjectRelease();
          uint64_t v388 = ((uint64_t (*)(char *, uint64_t))v411)(v528, v520);
          uint64_t v392 = v530;
LABEL_231:
          id v389 = v527;
          uint64_t v391 = (uint64_t)(v552 + 1);
          if (v552 == (char *)7)
          {
            v394(v537, v387);
            v394(v538, v387);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
          goto LABEL_232;
        }
      }
    }
LABEL_264:
    uint64_t v569 = (v427 - 1) & v427;
    v570 = (void *)v428;
    unint64_t v425 = __clz(__rbit64(v427)) + (v428 << 6);
LABEL_265:
    uint64_t v430 = v567;
    uint64_t v431 = *(void *)(v567 + 48);
    uint64_t v432 = v550;
    unint64_t v572 = *(void *)(v550 + 72) * v425;
    v433 = v545;
    uint64_t v434 = v551;
    (*(void (**)(char *, unint64_t, uint64_t))(v550 + 16))(v545, v431 + v572, v551);
    uint64_t v435 = v548;
    unint64_t v436 = *(void *)(v430 + 56) + *(void *)(v548 + 72) * v425;
    v437 = v549;
    uint64_t v438 = v543;
    (*(void (**)(char *, unint64_t, uint64_t))(v548 + 16))(v549, v436, v543);
    v571 = *(void **)(v432 + 32);
    uint64_t v439 = ((uint64_t (*)(char *, char *, uint64_t))v571)(v553, v433, v434);
    uint64_t v121 = v460;
    __chkstk_darwin(v439);
    v441 = (char *)v460 - ((v440 + 15) & 0xFFFFFFFFFFFFFFF0);
    DeviceActivityEvent.threshold.getter();
    (*(void (**)(char *, uint64_t))(v435 + 8))(v437, v438);
    v442 = v566;
    *(void *)&v565[(v425 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v425;
    ((void (*)(unint64_t, char *, uint64_t))v571)(*((void *)v442 + 6) + v572, v553, v434);
    uint64_t v387 = (uint64_t)v563;
    (*((void (**)(unint64_t, char *, char *))v562 + 4))(*((void *)v442 + 7) + *((void *)v562 + 9) * v425, v441, v563);
    uint64_t v443 = *((void *)v442 + 2);
    BOOL v100 = __OFADD__(v443, 1);
    uint64_t v444 = v443 + 1;
    if (v100) {
      break;
    }
    *((void *)v442 + 2) = v444;
    v411 = v564;
    unint64_t v423 = v569;
    v424 = v570;
    if (v569) {
      goto LABEL_250;
    }
  }
  __break(1u);
LABEL_272:
  __break(1u);
LABEL_273:
  __break(1u);
LABEL_274:
  __break(1u);
LABEL_275:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001AFF38();
  swift_allocError();
  unsigned char *v453 = 3;
  swift_willThrow();

  (*v542)((char *)v531, v543);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_278:
  swift_bridgeObjectRelease();
}

void sub_1001ACE50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10009EE78(&qword_100341950);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  id v7 = [self sharedCenter];
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1001B02F4;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001AD024;
  aBlock[3] = &unk_1003057F0;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [v7 requestInternalAuthorizationForMember:a2 completionHandler:v10];
  _Block_release(v10);
}

void sub_1001AD024(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_1001AD09C(uint64_t a1)
{
  uint64_t v2 = sub_10009EE78(&qword_100341950);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  id v5 = [self sharedCenter];
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = sub_1001B02F4;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001AD024;
  aBlock[3] = &unk_100305840;
  unint64_t v8 = _Block_copy(aBlock);
  swift_release();
  [v5 revokeInternalAuthorizationWithCompletionHandler:v8];
  _Block_release(v8);
}

uint64_t sub_1001AD268(uint64_t result, uint64_t a2)
{
  if (result)
  {
    sub_10009EE78(&qword_100341950);
    return CheckedContinuation.resume(returning:)();
  }
  else if (a2)
  {
    swift_errorRetain();
    sub_10009EE78(&qword_100341950);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1001AD2D8(void *a1)
{
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  uint64_t v4 = v3 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger;
  uint64_t v5 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  if (byte_10034B308 != 1) {
    goto LABEL_14;
  }
  *(void *)(v3 + 16) = v2;
  unint64_t v6 = sub_1001D7910();
  swift_setDeallocating();

  sub_1000A4FD8(v3 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
  swift_deallocClassInstance();
  *(void *)&v30[0] = 0;
  id v7 = [self archivedDataWithRootObject:a1 requiringSecureCoding:1 error:v30];
  id v8 = *(id *)&v30[0];
  if (!v7)
  {
    uint64_t v17 = v8;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  uint64_t v29 = &type metadata for Data;
  *(void *)&long long v28 = v9;
  *((void *)&v28 + 1) = v11;
  sub_1000B88B8(v9, v11);
  id v12 = [v6 metadata];
  if (!v12)
  {
    __break(1u);
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  uint64_t v13 = v12;
  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1001AEE34(&v28, 0xD000000000000010, 0x8000000100293760, isUniquelyReferenced_nonNull_native, v30);
  swift_bridgeObjectRelease();
  sub_1000A4FD8((uint64_t)v30, &qword_100341CD8);
  if (v14)
  {
    v16.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v16.super.Class isa = 0;
  }
  [v6 setMetadata:v16.super.isa];

  id v18 = a1;
  id v19 = v6;
  id v20 = v18;
  id v21 = v19;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 138412546;
    *(void *)&v30[0] = v20;
    id v26 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v25 = v20;

    *(_WORD *)(v24 + 12) = 2112;
    *(void *)&v30[0] = v21;
    id v27 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v25[1] = v21;

    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Updated History Token %@ for %@", (uint8_t *)v24, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_1000A0168(v9, v11);
  }
  else
  {
    sub_1000A0168(v9, v11);
  }
}

uint64_t sub_1001AD7E8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ScreenTimeAgent11LocalDevice_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();
  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1001AD864()
{
  return type metadata accessor for LocalDevice();
}

uint64_t type metadata accessor for LocalDevice()
{
  uint64_t result = qword_100343CD0;
  if (!qword_100343CD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001AD8B8()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1001AD954(uint64_t a1)
{
  uint64_t v2 = sub_10009EE78(&qword_100343E80);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    id v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10009EE78(&qword_100343E88);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000D9F9C(v12, (uint64_t)v5, &qword_100343E80);
    unint64_t result = sub_1001ADB88((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for DeviceActivityEvent.Name();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7];
    uint64_t v20 = type metadata accessor for DeviceActivityEvent();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19 + *(void *)(*(void *)(v20 - 8) + 72) * v16, v9, v20);
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001ADB88(uint64_t a1)
{
  type metadata accessor for DeviceActivityEvent.Name();
  sub_1001B01A4((unint64_t *)&qword_1003431F0, (void (*)(uint64_t))&type metadata accessor for DeviceActivityEvent.Name);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_1001ADC20(a1, v2);
}

unint64_t sub_1001ADC20(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for DeviceActivityEvent.Name();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    unint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_1001B01A4(&qword_1003431F8, (void (*)(uint64_t))&type metadata accessor for DeviceActivityEvent.Name);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_1001ADDE0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          char v15 = (_OWORD *)(v14 + 16 * v3);
          unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            _OWORD *v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001ADFB8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *unint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001AE190(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeviceActivityEvent.Name();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      uint64_t v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      uint64_t v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_1001B01A4((unint64_t *)&qword_1003431F0, (void (*)(uint64_t))&type metadata accessor for DeviceActivityEvent.Name);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for DeviceActivityEvent() - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    uint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *uint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1001AE4D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10010A024(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100235440();
LABEL_7:
    int64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100233D08(v15, a4 & 1);
  uint64_t v21 = sub_10010A024(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  int64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v18[2] = v26;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1001AE648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10010A024(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1002357E0();
LABEL_7:
    unint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      void *v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_100234320(v17, a5 & 1);
  uint64_t v23 = sub_10010A024(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  BOOL v25 = (uint64_t *)(v20[6] + 16 * v14);
  uint64_t *v25 = a3;
  v25[1] = a4;
  uint64_t v26 = (void *)(v20[7] + 16 * v14);
  *uint64_t v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v29;
  return swift_bridgeObjectRetain();
}

_OWORD *sub_1001AE7D0(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_10010A104((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_10023599C();
      goto LABEL_7;
    }
    sub_100234648(v12, a3 & 1);
    unint64_t v18 = sub_10010A104((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for STUnifiedTransportPayloadDictionaryKey(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    BOOL v16 = (_OWORD *)(v15[7] + 32 * v9);
    sub_1000A4F28((uint64_t)v16);
    return sub_1000B8B44(a1, v16);
  }
LABEL_13:
  sub_1001AECD8(v9, (uint64_t)a2, a1, v15);
  return a2;
}

_OWORD *sub_1001AE914(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10010A024(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1002355F8();
      goto LABEL_7;
    }
    sub_100234020(v15, a4 & 1);
    uint64_t v21 = sub_10010A024(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    char v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_1000A4F28((uint64_t)v19);
    return sub_1000B8B44(a1, v19);
  }
LABEL_13:
  sub_1001AEC6C(v12, a2, a3, a1, v18);
  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_1001AEA68(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for DeviceActivityEvent.Name();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10010A198(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100235B64();
      goto LABEL_7;
    }
    sub_100234984(v17, a3 & 1);
    unint64_t v28 = sub_10010A198(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1001AED40(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for DeviceActivityEvent();
  uint64_t v23 = *(void *)(v22 - 8);
  char v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;
  return v24(v26, a1, v25);
}

_OWORD *sub_1001AEC6C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1000B8B44(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

_OWORD *sub_1001AECD8(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_1000B8B44(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_1001AED40(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for DeviceActivityEvent.Name();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for DeviceActivityEvent();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

_OWORD *sub_1001AEE34@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _OWORD *a5@<X8>)
{
  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = sub_10010A024(a2, a3);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a4 & 1) == 0)
  {
    if (v19 >= v17 && (a4 & 1) == 0)
    {
      sub_1002355F8();
      goto LABEL_7;
    }
    sub_100234020(v17, a4 & 1);
    uint64_t v23 = sub_10010A024(a2, a3);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v6;
      if (v18) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v6;
  if (v18)
  {
LABEL_8:
    sub_1000B8B44((_OWORD *)(v20[7] + 32 * v14), a5);
    uint64_t v21 = (_OWORD *)(v20[7] + 32 * v14);
    return sub_1000B8B44(a1, v21);
  }
LABEL_13:
  sub_1001AEC6C(v14, a2, a3, a1, v20);
  *a5 = 0u;
  a5[1] = 0u;
  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t (*sub_1001AEFAC(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1001AF0C8(v6, a2, a3);
  return sub_1001AF014;
}

uint64_t (*sub_1001AF018(void (**a1)(id *), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1001AF150(v6, a2, a3);
  return sub_1001AF014;
}

void sub_1001AF080(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1001AF0C8(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  int64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)int64_t v3 = v4;
    return destroy for DataStore.UserID;
  }
  __break(1u);
  return result;
}

void destroy for DataStore.UserID(id *a1)
{
}

void (*sub_1001AF150(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  int64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)int64_t v3 = v4;
    return j__s15ScreenTimeAgent9DataStoreC6UserIDOwxx;
  }
  __break(1u);
  return result;
}

id sub_1001AF1D0()
{
  return sub_1001AF1F0((uint64_t *)off_1002FE040, 0);
}

id sub_1001AF1E0()
{
  return sub_1001AF1F0((uint64_t *)off_1002FE048, 1);
}

id sub_1001AF1F0(uint64_t *a1, char a2)
{
  id v4 = [self standardUserDefaults];
  sub_10009EE78(&qword_100342A70);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100286230;
  uint64_t v6 = *a1;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v7;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = a2;
  sub_100238610(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 registerDefaults:isa];

  id v9 = [v4 BOOLForKey:v6];
  return v9;
}

uint64_t sub_1001AF2FC()
{
  id v0 = [objc_allocWithZone((Class)MOEffectiveSettingsStore) init];
  id v1 = [v0 deviceActivity];
  id v2 = [v1 allowedClients];

  if (v2)
  {
    sub_1000A0760(0, &qword_100343EC8);
    sub_1001B02A4(&qword_100343ED0, &qword_100343EC8);
    uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    id v4 = objc_allocWithZone((Class)MOApplication);
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v4 initWithBundleIdentifier:v5];

    LOBYTE(v5) = sub_1001D6844(v6, v3);
    swift_bridgeObjectRelease();
    return v5 & 1;
  }
  else
  {

    return 0;
  }
}

void sub_1001AF44C()
{
  id v1 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (!v0)
  {
    id v2 = sub_1001D7640();
    __chkstk_darwin(v2);
    sub_10009EE78(&qword_100342288);
    NSManagedObjectContext.performAndWait<A>(_:)();

    if (v3) {
      swift_bridgeObjectRelease();
    }
    dispatch thunk of LocalRestrictions.denyiCloudLogoutAndRequireAutomaticDateAndTime(deny:)();
  }
}

uint64_t sub_1001AF58C()
{
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  uint64_t v2 = v1 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  if (byte_10034B308 != 1) {
    goto LABEL_15;
  }
  *(void *)(v1 + 16) = v0;
  id v4 = sub_1001D7910();
  swift_setDeallocating();

  sub_1000A4FD8(v1 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, &qword_100341930);
  swift_deallocClassInstance();
  id v5 = [v4 metadata];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v7 + 16) && (uint64_t v8 = sub_10010A024(0xD000000000000010, 0x8000000100293760), (v9 & 1) != 0))
    {
      sub_1000A4F78(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v17);
      swift_bridgeObjectRelease();
      if (*((void *)&v18 + 1))
      {
        sub_1000D9F9C((uint64_t)&v17, (uint64_t)&v14, &qword_100341CD8);
        if (v15)
        {
          sub_1000A0760(0, (unint64_t *)&unk_100342BD0);
          sub_1000A0760(0, &qword_100341CE0);
          sub_1000B8B44(&v14, &v16);
          swift_dynamicCast();
          uint64_t v10 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
          sub_1000A0168(v12, v13);

          sub_1000A4FD8((uint64_t)&v17, &qword_100341CD8);
          return v10;
        }
        goto LABEL_14;
      }
    }
    else
    {
      long long v17 = 0u;
      long long v18 = 0u;
      swift_bridgeObjectRelease();
    }

    sub_1000A4FD8((uint64_t)&v17, &qword_100341CD8);
    return 0;
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001AF8C4(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v15 = _swiftEmptyArrayStorage;
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_18:
    unint64_t v11 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_19:
    swift_bridgeObjectRelease();
    if ((v11 & 0x8000000000000000) != 0 || (v11 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    uint64_t result = swift_release();
    if (v12 > 0) {
      return notify_post(STSettingsDidChangeNotification);
    }
    return result;
  }
LABEL_17:
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_18;
  }
LABEL_3:
  unint64_t v5 = 0;
  uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v5 >= *(void *)(v6 + 16)) {
        goto LABEL_16;
      }
      id v7 = *(id *)(a1 + 8 * v5 + 32);
    }
    uint64_t v8 = v7;
    unint64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    id v14 = v7;
    sub_1001A2C38(&v14);
    if (v2) {
      break;
    }
    uint64_t v2 = 0;
    if (v10)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    else
    {
    }
    ++v5;
    if (v9 == v4)
    {
      unint64_t v11 = (unint64_t)v15;
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();

  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1001AFAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DeviceActivityCenter();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LocalRestrictions();
  swift_allocObject();
  LocalRestrictions.init()();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  DeviceActivityCenter.init(clientIdentifier:extensionIdentifier:)();
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a3 && v12 == a4)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v14)
  {
LABEL_13:
    sub_10009EE78(&qword_100342120);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100286230;
    *(void *)(inited + 32) = a1;
    *(void *)(inited + 40) = a2;
    swift_bridgeObjectRetain();
    sub_1000A0220(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    dispatch thunk of LocalRestrictions.deleteStores(with:)();
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a3 && v15 == a4)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return swift_release();
    }
  }
  sub_10009EE78(&qword_100342120);
  uint64_t v20 = swift_initStackObject();
  long long v22 = xmmword_100286230;
  *(_OWORD *)(v20 + 16) = xmmword_100286230;
  *(void *)(v20 + 32) = a1;
  *(void *)(v20 + 40) = a2;
  swift_bridgeObjectRetain();
  sub_1000A0220(v20);
  swift_setDeallocating();
  swift_arrayDestroy();
  dispatch thunk of LocalRestrictions.deleteStores(with:)();
  swift_bridgeObjectRelease();
  sub_10009EE78(&qword_100343E08);
  type metadata accessor for DeviceActivityName();
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = v22;
  swift_bridgeObjectRetain();
  DeviceActivityName.init(_:)();
  DeviceActivityCenter.stopMonitoring(_:)((Swift::OpaquePointer)v21);
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_1001AFE5C()
{
  sub_1001E3CF0(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

void sub_1001AFE7C(void *a1@<X8>)
{
  sub_1001E4B58(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

void sub_1001AFEA0(uint64_t *a1@<X8>)
{
  sub_1001E44C0(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

void sub_1001AFEC4(unsigned char *a1@<X8>)
{
  sub_1001E4C9C(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t sub_1001AFEE8(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1001AFF38()
{
  unint64_t result = qword_100343E58;
  if (!qword_100343E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100343E58);
  }
  return result;
}

void sub_1001AFF8C()
{
  sub_1001E4FE8(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001AFFAC()
{
  return sub_1001B0004((uint64_t (*)(void, void, void, void, void))sub_1001E56A0);
}

uint64_t sub_1001AFFD8()
{
  return sub_1001B0004((uint64_t (*)(void, void, void, void, void))sub_1001E56C0);
}

uint64_t sub_1001B0004(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

void sub_1001B0030(uint64_t *a1@<X8>)
{
  sub_1001E5878(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

void sub_1001B0054(void *a1@<X8>)
{
  sub_1001E379C(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), a1);
}

uint64_t sub_1001B0074(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10009EE78(&qword_100343E90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1001B00DC(unsigned __int8 *a1@<X8>)
{
  sub_1001E3434(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), a1);
}

void sub_1001B00FC(void *a1@<X8>)
{
  sub_1001E3BB8(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), a1);
}

void sub_1001B011C(unsigned char *a1@<X8>)
{
}

void sub_1001B013C(unsigned __int8 *a1@<X8>)
{
  sub_1001FC014(*(void **)(v1 + 24), a1);
}

uint64_t sub_1001B0158()
{
  return sub_1001B0218((uint64_t (*)(void, void, void, void))sub_1001F8824);
}

void sub_1001B0184(unsigned char *a1@<X8>)
{
  sub_1001E7038(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), a1);
}

uint64_t sub_1001B01A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001B01EC()
{
  return sub_1001B0218((uint64_t (*)(void, void, void, void))sub_1001F7AA0);
}

uint64_t sub_1001B0218(uint64_t (*a1)(void, void, void, void))
{
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1001B0244(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001B02A4(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000A0760(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1001B02E8(uint64_t a1)
{
  sub_1001ACE50(a1, *(void *)(v1 + 16));
}

uint64_t sub_1001B02F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001B0308()
{
  return swift_release();
}

uint64_t sub_1001B0314()
{
  uint64_t v1 = sub_10009EE78(&qword_100341950);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001B03A8(uint64_t a1, uint64_t a2)
{
  return sub_1001AD268(a1, a2);
}

uint64_t getEnumTagSinglePayload for LocalDevice.LocalDeviceError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LocalDevice.LocalDeviceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B057CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalDevice.LocalDeviceError()
{
  return &type metadata for LocalDevice.LocalDeviceError;
}

unint64_t sub_1001B05B8()
{
  unint64_t result = qword_100343ED8;
  if (!qword_100343ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100343ED8);
  }
  return result;
}

void sub_1001B060C(unsigned __int8 *a1@<X8>)
{
}

void sub_1001B062C()
{
}

uint64_t sub_1001B0648(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    uint64_t v4 = swift_allocError();
    void *v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(v7);
  }
}

uint64_t sub_1001B06E0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v17 = *(void *)(a3 + 16);
  if (v17)
  {
    uint64_t v5 = (uint64_t (*)(void *))result;
    unint64_t v6 = 0;
    uint64_t v7 = (uint64_t *)(a3 + 40);
    int v8 = _swiftEmptyArrayStorage;
    uint64_t v15 = (uint64_t (*)(void *))result;
    while (v6 < *(void *)(v4 + 16))
    {
      uint64_t v10 = *(v7 - 1);
      uint64_t v9 = *v7;
      v18[0] = v10;
      v18[1] = v9;
      swift_bridgeObjectRetain();
      char v11 = v5(v18);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      if (v11)
      {
        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v19 = v8;
        if ((result & 1) == 0)
        {
          unint64_t result = sub_1002080AC(0, v8[2] + 1, 1);
          int v8 = v19;
        }
        unint64_t v13 = v8[2];
        unint64_t v12 = v8[3];
        if (v13 >= v12 >> 1)
        {
          unint64_t result = sub_1002080AC(v12 > 1, v13 + 1, 1);
          int v8 = v19;
        }
        v8[2] = v13 + 1;
        char v14 = &v8[2 * v13];
        v14[4] = v10;
        v14[5] = v9;
        uint64_t v4 = a3;
        uint64_t v5 = v15;
      }
      else
      {
        unint64_t result = swift_bridgeObjectRelease();
      }
      ++v6;
      v7 += 2;
      if (v17 == v6) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
    int v8 = _swiftEmptyArrayStorage;
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v8;
  }
  return result;
}

uint64_t sub_1001B0858@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10009EE78(&qword_100341930);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  unint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  int v8 = &v13[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC15ScreenTimeAgent14PrivateService____lazy_storage___logger;
  swift_beginAccess();
  sub_1000D10B8(v9, (uint64_t)v8);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(a1, v8, v10);
  }
  sub_1000B6270((uint64_t)v8);
  Logger.init(subsystem:category:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  sub_1000D1120((uint64_t)v6, v9);
  return swift_endAccess();
}

void sub_1001B0A54(unsigned char *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1001B0858((uint64_t)v6);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Getting screentime status for local user", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v11 = (id *)swift_allocObject();
  v11[3] = 0;
  v11[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))((uint64_t)v11 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v3);
  if (byte_10034B308 == 1)
  {
    v11[2] = v10;
    char v18 = 0;
    id v12 = v10;
    id v13 = sub_1001D7640();
    __chkstk_darwin(v13);
    *(void *)&v17[-32] = v11;
    *(void *)&v17[-24] = 0;
    long long v16 = &v18;
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (v1)
    {
      swift_release();
    }
    else
    {

      char v14 = v18;
      id v15 = sub_1001D7640();
      __chkstk_darwin(v15);
      *(void *)&v17[-32] = 0;
      *(void *)&v17[-24] = v11;
      LOBYTE(v16) = v14;
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_setDeallocating();
      sub_1000B6270((uint64_t)v11 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
      swift_deallocClassInstance();
      *a1 = v17[14];
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_1001B0F68(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  type metadata accessor for Logger();
  v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1001B1018, 0, 0);
}

uint64_t sub_1001B1018()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  Logger.init(subsystem:category:)();
  char v3 = sub_100117FE8("PrivateService.isScreenTimeEnabledForLocalUser", 46, 2, v1, 1, 0, v2);
  swift_release();
  (*(void (**)(void, void, void))(*(void *)(v0 + 32) + 16))(*(void *)(v0 + 32), v3 & 1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void sub_1001B1164(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v37 = a3;
  uint64_t v7 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v7);
  uint64_t v38 = &v32[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v41 = *(NSObject **)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  id v12 = &v32[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  char v14 = &v32[-v13];
  uint64_t v35 = a1;
  sub_1001B0858((uint64_t)&v32[-v13]);
  id v15 = a2;
  long long v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v36 = v12;
  uint64_t v39 = v7;
  if (v18)
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v40 = v9;
    BOOL v33 = (void *)v20;
    uint64_t v34 = v3;
    *(_DWORD *)uint64_t v19 = 138412290;
    uint64_t v42 = v15;
    uint64_t v21 = v15;
    uint64_t v4 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v33 = v15;

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Getting screentime status for dsid %@", v19, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    uint64_t v9 = v40;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    long long v16 = v15;
  }

  long long v22 = v41;
  ((void (*)(unsigned char *, uint64_t))v41[1].isa)(v14, v9);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v23 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  char v24 = (id *)swift_allocObject();
  v24[3] = 0;
  v24[4] = 0;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v22[7].isa)((uint64_t)v24 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v9);
  if (byte_10034B308 == 1)
  {
    void v24[2] = v23;
    id v25 = v23;
    sub_1001DE3B0(v15);
    if (v4)
    {
      swift_release();
    }
    else
    {
      uint64_t v27 = v26;
      uint64_t v41 = v15;
      LOBYTE(v42) = 0;
      id v28 = sub_1001D7640();
      __chkstk_darwin(v28);
      *(void *)&v32[-32] = v24;
      *(void *)&v32[-24] = v27;
      uint64_t v31 = &v42;
      NSManagedObjectContext.performAndWait<A>(_:)();
      uint64_t v40 = v9;

      char v29 = (char)v42;
      id v30 = sub_1001D7640();
      __chkstk_darwin(v30);
      *(void *)&v32[-32] = v27;
      *(void *)&v32[-24] = v24;
      LOBYTE(v31) = v29;
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_setDeallocating();
      sub_1000B6270((uint64_t)v24 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
      swift_deallocClassInstance();
      unsigned char *v37 = (_BYTE)v42;
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_1001B1BF8(void *a1, const void *a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  type metadata accessor for Logger();
  v3[4] = swift_task_alloc();
  v3[5] = _Block_copy(a2);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_1001B1CB8, 0, 0);
}

uint64_t sub_1001B1CB8()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  id v3 = *(id *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  char v4 = sub_100119500("PrivateService.isScreenTimeEnabledForRemoteUser", 47, 2, v1, 1, 0, v2, v3);
  swift_release();

  (*(void (**)(void, void, void))(*(void *)(v0 + 40) + 16))(*(void *)(v0 + 40), v4 & 1, 0);
  _Block_release(*(const void **)(v0 + 40));
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1001B1E18(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 102) = a3;
  *(void *)(v3 + 16) = a2;
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v3 + 24) = v4;
  *(void *)(v3 + 32) = *(void *)(v4 - 8);
  *(void *)(v3 + 40) = swift_task_alloc();
  return _swift_task_switch(sub_1001B1EDC, 0, 0);
}

uint64_t sub_1001B1EDC()
{
  uint64_t v1 = (char *)(v0 + 100);
  sub_1001B0858(*(void *)(v0 + 40));
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(unsigned __int8 *)(v0 + 102);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    *(_DWORD *)(v0 + 96) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Setting screentime enabled to %{BOOL}d for local user", v5, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(void, void))(*(void *)(v0 + 32) + 8))(*(void *)(v0 + 40), *(void *)(v0 + 24));
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v8 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v9 = (void *)swift_allocObject();
  *(void *)(v0 + 48) = v9;
  v9[3] = 0;
  v9[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))((uint64_t)v9 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v6);
  if (byte_10034B308 != 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  v9[2] = v8;
  *uint64_t v1 = 0;
  id v10 = v8;
  id v11 = sub_1001D7640();
  id v12 = (void *)swift_task_alloc();
  v12[2] = v9;
  v12[3] = 0;
  v12[4] = v1;
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_task_dealloc();
  char v14 = *v1;
  id v15 = sub_1001D7640();
  uint64_t v16 = swift_task_alloc();
  *(void *)(v16 + 16) = 0;
  *(void *)(v16 + 24) = v9;
  *(unsigned char *)(v16 + 32) = v14;
  NSManagedObjectContext.performAndWait<A>(_:)();
  int v17 = *(unsigned __int8 *)(v0 + 102);

  swift_task_dealloc();
  if (v17 == *(unsigned __int8 *)(v0 + 101))
  {
    swift_release();
    swift_task_dealloc();
    long long v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  else
  {
    char v18 = *(unsigned char *)(v0 + 102);
    id v19 = sub_1001D7640();
    uint64_t v20 = swift_task_alloc();
    *(void *)(v20 + 16) = 0;
    *(void *)(v20 + 24) = v9;
    *(unsigned char *)(v20 + 32) = v18;
    *(unsigned char *)(v20 + 33) = v14;
    *(unsigned char *)(v20 + 34) = 1;
    NSManagedObjectContext.performAndWait<A>(_:)();

    swift_task_dealloc();
    id v21 = sub_1001D7640();
    NSManagedObjectContext.performAndWait<A>(_:)();

    if (qword_100340E00 != -1) {
      swift_once();
    }
    *(void *)(v0 + 56) = qword_10034B370;
    swift_retain();
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v23;
    void *v23 = v0;
    v23[1] = sub_1001B2390;
    return sub_10019F170(0);
  }
}

uint64_t sub_1001B2390()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001B2650;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1001B24AC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B24AC()
{
  if (qword_100340D58 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10034B2A8;
  *(void *)(v0 + 80) = qword_10034B2A8;
  swift_retain();
  return _swift_task_switch(sub_1001B2554, v1, 0);
}

uint64_t sub_1001B2554()
{
  uint64_t v1 = *(void *)(v0 + 72);
  sub_1000B6F8C();
  *(void *)(v0 + 88) = v1;
  swift_release();
  if (v1) {
    uint64_t v2 = sub_1001B26C4;
  }
  else {
    uint64_t v2 = sub_1001B25E4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B25E4()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001B2650()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001B26C4()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001B28AC(char a1, const void *a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a3;
  *(unsigned char *)(v3 + 56) = a1;
  type metadata accessor for Logger();
  *(void *)(v3 + 24) = swift_task_alloc();
  *(void *)(v3 + 32) = _Block_copy(a2);
  swift_retain();
  return _swift_task_switch(sub_1001B2960, 0, 0);
}

uint64_t sub_1001B2960()
{
  swift_retain();
  Logger.init(subsystem:category:)();
  uint64_t v6 = (char *)&dword_100343758 + dword_100343758;
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001B2A80;
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 56);
  return ((uint64_t (*)(const char *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))v6)("PrivateService.setScreenTimeEnabledForLocalUser", 47, 2, v2, 1, 0, v3, v4);
}

uint64_t sub_1001B2A80()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001D1404;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1001D13D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B2B9C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(unsigned char *)(v4 + 99) = a3;
  *(void *)(v4 + 120) = a2;
  *(void *)(v4 + 128) = a4;
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v4 + 136) = v5;
  *(void *)(v4 + 144) = *(void *)(v5 - 8);
  *(void *)(v4 + 152) = swift_task_alloc();
  *(void *)(v4 + 160) = swift_task_alloc();
  return _swift_task_switch(sub_1001B2C70, 0, 0);
}

uint64_t sub_1001B2C70()
{
  uint64_t v1 = *(void **)(v0 + 128);
  sub_1001B0858(*(void *)(v0 + 160));
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void **)(v0 + 128);
    int v6 = *(unsigned __int8 *)(v0 + 99);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v47 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109378;
    *(_DWORD *)(v0 + 100) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 8) = 2112;
    *(void *)(v0 + 112) = v5;
    id v8 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v47 = v5;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Setting screentime enabled to %{BOOL}d for dsid %@", (uint8_t *)v7, 0x12u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v9 = *(void **)(v0 + 128);
  }
  id v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 144) + 8);
  v10(*(void *)(v0 + 160), *(void *)(v0 + 136));
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v12 = *(void *)(v0 + 136);
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v13 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  char v14 = (void *)swift_allocObject();
  *(void *)(v0 + 168) = v14;
  v14[3] = 0;
  v14[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))((uint64_t)v14 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v12);
  if (byte_10034B308 != 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  id v15 = *(void **)(v0 + 128);
  void v14[2] = v13;
  id v16 = v13;
  sub_1001DE3B0(v15);
  *(void *)(v0 + 176) = v17;
  id v19 = v17;
  id v20 = sub_1001D7640();
  uint64_t v21 = swift_task_alloc();
  *(void *)(v21 + 16) = v14;
  *(void *)(v21 + 24) = v19;
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_task_dealloc();
  uint64_t v22 = *(void *)(v0 + 32);
  uint64_t v45 = *(void **)(v0 + 16);
  *(void *)(v0 + 184) = v45;
  *(void *)(v0 + 192) = v22;
  uint64_t v48 = *(void *)(v0 + 64);
  *(void *)(v0 + 200) = *(void *)(v0 + 48);
  *(void *)(v0 + 208) = v48;
  uint64_t v23 = *(void **)(v0 + 88);
  *(void *)(v0 + 216) = *(void *)(v0 + 80);
  *(void *)(v0 + 224) = v23;
  uint64_t v46 = v23;
  if (*(unsigned char *)(v0 + 96))
  {
    uint64_t v24 = *(void **)(v0 + 128);
    sub_1001B0858(*(void *)(v0 + 152));
    id v25 = v24;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    char v29 = *(void **)(v0 + 128);
    if (v28)
    {
      os_log_type_t type = v27;
      id v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = (void *)swift_slowAlloc();
      *(_DWORD *)id v30 = 138412290;
      *(void *)(v0 + 104) = v29;
      id v31 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v44 = v29;

      _os_log_impl((void *)&_mh_execute_header, v26, type, "Cannot turn on app & website activity for parent: %@", v30, 0xCu);
      sub_10009EE78(&qword_100342AB0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v26 = *(NSObject **)(v0 + 128);
    }
    uint64_t v37 = *(void *)(v0 + 152);
    uint64_t v38 = *(void *)(v0 + 136);

    v10(v37, v38);
    sub_1001CDEA4();
    swift_allocError();
    unsigned char *v39 = 3;
    swift_willThrow();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
    return v40();
  }
  else
  {
    char v32 = *(unsigned char *)(v0 + 99);
    id v33 = sub_1001D7640();
    uint64_t v34 = swift_task_alloc();
    *(void *)(v34 + 16) = v19;
    *(void *)(v34 + 24) = v14;
    *(unsigned char *)(v34 + 32) = v32;
    *(_WORD *)(v34 + 33) = 257;
    NSManagedObjectContext.performAndWait<A>(_:)();

    swift_task_dealloc();
    id v35 = sub_1001D7640();
    uint64_t v36 = swift_task_alloc();
    *(void *)(v36 + 16) = v14;
    *(void *)(v36 + 24) = v19;
    *(unsigned char *)(v36 + 32) = v32;
    NSManagedObjectContext.performAndWait<A>(_:)();

    swift_task_dealloc();
    id v41 = sub_1001D7640();
    NSManagedObjectContext.performAndWait<A>(_:)();

    if (qword_100340DB0 != -1) {
      swift_once();
    }
    *(void *)(v0 + 232) = qword_10034B338;
    swift_retain();
    uint64_t v42 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_1001B3468;
    return sub_1000E879C();
  }
}

uint64_t sub_1001B3468()
{
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_1001B36B4;
  }
  else
  {
    swift_release();
    id v2 = sub_1001B3584;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B3584()
{
  uint64_t v1 = *(void **)(v0 + 224);
  id v2 = *(id **)(v0 + 168);
  uint64_t v3 = *(void **)(v0 + 176);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_setDeallocating();
  sub_1000B6270((uint64_t)v2 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
  swift_deallocClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001B36B4()
{
  uint64_t v1 = (void *)v0[28];
  uint64_t v3 = (void *)v0[22];
  id v2 = (void *)v0[23];
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001B390C(void *a1, char a2, const void *a3, uint64_t a4)
{
  *(unsigned char *)(v4 + 64) = a2;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  type metadata accessor for Logger();
  *(void *)(v4 + 32) = swift_task_alloc();
  *(void *)(v4 + 40) = _Block_copy(a3);
  id v7 = a1;
  swift_retain();
  return _swift_task_switch(sub_1001B39D0, 0, 0);
}

void sub_1001B39D0()
{
  id v1 = *(id *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  uint64_t v5 = (char *)&dword_100343748 + dword_100343748;
  id v2 = v1;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001B3B10;
  __asm { BR              X8 }
}

uint64_t sub_1001B3B10()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1001B3C30;
  }
  else
  {
    uint64_t v4 = *(void **)(v2 + 16);
    swift_release();

    uint64_t v3 = sub_1000D6414;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001B3C30()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void **)(v0 + 16);

  swift_release_n();
  uint64_t v3 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);

  _Block_release(*(const void **)(v0 + 40));
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001B3CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  uint64_t v4 = type metadata accessor for Logger();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_1001B3DAC, 0, 0);
}

uint64_t sub_1001B3DAC()
{
  uint64_t v1 = (void *)v0[4];
  sub_1001B0858(v0[7]);
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (void *)v0[4];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    v0[2] = v5;
    id v7 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v22 = v5;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Enabling RemoteManagement for DSID: %@", v6, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    id v8 = (void *)v0[4];
  }
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v9 = v0[5];
  uint64_t v10 = v0[6];
  uint64_t v11 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v12 = (void *)swift_allocObject();
  v0[8] = v12;
  v12[3] = 0;
  v12[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))((uint64_t)v12 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v9);
  if (byte_10034B308 != 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v13 = (void *)v0[4];
  v12[2] = v11;
  id v14 = v11;
  sub_1001DE3B0(v13);
  v0[9] = v15;
  uint64_t v17 = v15;
  id v18 = sub_1001D7640();
  uint64_t v19 = swift_task_alloc();
  *(void *)(v19 + 16) = v12;
  *(void *)(v19 + 24) = v17;
  *(unsigned char *)(v19 + 32) = 1;
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_task_dealloc();
  id v20 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (qword_100340DB0 != -1) {
    swift_once();
  }
  v0[10] = qword_10034B338;
  swift_retain();
  uint64_t v21 = (void *)swift_task_alloc();
  v0[11] = v21;
  void *v21 = v0;
  v21[1] = sub_1001B4214;
  return sub_1000E879C();
}

uint64_t sub_1001B4214()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_1001B4404;
  }
  else
  {
    swift_release();
    id v2 = sub_1001B4330;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B4330()
{
  uint64_t v1 = *(id **)(v0 + 64);

  swift_setDeallocating();
  sub_1000B6270((uint64_t)v1 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
  swift_deallocClassInstance();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001B4404()
{
  uint64_t v1 = *(void **)(v0 + 72);
  swift_release();
  swift_release();

  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001B4600(void *a1, const void *a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  type metadata accessor for Logger();
  v3[4] = swift_task_alloc();
  v3[5] = _Block_copy(a2);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_1001B46C0, 0, 0);
}

uint64_t sub_1001B46C0()
{
  id v1 = *(id *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_100343738
                                                                                             + dword_100343738);
  id v2 = v1;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001B47F4;
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 16);
  return v8((uint64_t)"PrivateService.enableRemoteManagement", 37, 2, v4, 1, 0, v5, v6);
}

uint64_t sub_1001B47F4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1001D1400;
  }
  else
  {
    uint64_t v4 = *(void **)(v2 + 16);
    swift_release();

    uint64_t v3 = sub_1001D13F4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001B4914@<X0>(unsigned char *a1@<X8>)
{
  BOOL v28 = a1;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - v7;
  sub_1001B0858((uint64_t)&v24 - v7);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Getting screentime Sync status", v11, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v27 = *(void (**)(char *, uint64_t))(v3 + 8);
  v27(v8, v2);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v12 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v13 = (id *)swift_allocObject();
  v13[3] = 0;
  v13[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))((uint64_t)v13 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v2);
  if (byte_10034B308 == 1)
  {
    v13[2] = v12;
    id v14 = v12;
    id v15 = sub_1001D7640();
    NSManagedObjectContext.performAndWait<A>(_:)();

    swift_setDeallocating();
    sub_1000B6270((uint64_t)v13 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
    uint64_t result = swift_deallocClassInstance();
    if (!v1)
    {
      int v17 = v30;
      sub_1001B0858((uint64_t)v6);
      id v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        id v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        uint64_t v24 = v21;
        uint64_t v26 = v6;
        *(_DWORD *)id v20 = 136315138;
        uint64_t v30 = v21;
        if (v17) {
          uint64_t v22 = 0x64656C62616E45;
        }
        else {
          uint64_t v22 = 0x64656C6261736944;
        }
        if (v17) {
          unint64_t v23 = 0xE700000000000000;
        }
        else {
          unint64_t v23 = 0xE800000000000000;
        }
        int v25 = v17;
        uint64_t v29 = sub_1000A2E70(v22, v23, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Screentime Sync is %s", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t result = ((uint64_t (*)(char *, uint64_t))v27)(v26, v2);
        *BOOL v28 = v25;
      }
      else
      {

        uint64_t result = ((uint64_t (*)(char *, uint64_t))v27)(v6, v2);
        *BOOL v28 = v17;
      }
    }
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001B4F24(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  type metadata accessor for Logger();
  v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1001B4FD4, 0, 0);
}

uint64_t sub_1001B4FD4()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  Logger.init(subsystem:category:)();
  char v3 = sub_100119554("PrivateService.isScreenTimeSyncEnabled", 38, 2, v1, 1, 0, v2);
  swift_release();
  (*(void (**)(void, void, void))(*(void *)(v0 + 32) + 16))(*(void *)(v0 + 32), v3 & 1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001B5120(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 84) = a3;
  *(void *)(v3 + 24) = a2;
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = *(void *)(v4 - 8);
  *(void *)(v3 + 48) = swift_task_alloc();
  *(void *)(v3 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_1001B51F4, 0, 0);
}

uint64_t sub_1001B51F4()
{
  uint64_t v24 = v0;
  sub_1001B0858(*(void *)(v0 + 56));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v3 = *(unsigned __int8 *)(v0 + 84);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    *(_DWORD *)(v0 + 80) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Setting screentime sync enabled to %{BOOL}d for local user", v4, 8u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 40) + 8);
  v6(*(void *)(v0 + 56), *(void *)(v0 + 32));
  sub_1001B0858(v5);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 48);
  uint64_t v11 = *(void *)(v0 + 32);
  if (v9)
  {
    uint64_t v22 = *(void *)(v0 + 48);
    int v12 = *(unsigned __int8 *)(v0 + 84);
    uint64_t v21 = v6;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v23 = v14;
    if (v12) {
      uint64_t v15 = 20047;
    }
    else {
      uint64_t v15 = 4605519;
    }
    if (v12) {
      unint64_t v16 = 0xE200000000000000;
    }
    else {
      unint64_t v16 = 0xE300000000000000;
    }
    *(void *)(v0 + 16) = sub_1000A2E70(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "CloudSync: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v21(v22, v11);
  }
  else
  {

    v6(v10, v11);
  }
  if (*(unsigned char *)(v0 + 84) == 1)
  {
    if (qword_100340D58 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_10034B2A8;
    *(void *)(v0 + 64) = qword_10034B2A8;
    id v18 = sub_1001B553C;
  }
  else
  {
    if (qword_100340D58 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_10034B2A8;
    *(void *)(v0 + 72) = qword_10034B2A8;
    id v18 = sub_1001B55D4;
  }
  os_log_type_t v19 = v18;
  swift_retain();
  return _swift_task_switch(v19, v17, 0);
}

uint64_t sub_1001B553C()
{
  sub_1000B7E74();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001B55D4()
{
  sub_1000B83B0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001B57E8(char a1, const void *a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a3;
  *(unsigned char *)(v3 + 56) = a1;
  type metadata accessor for Logger();
  *(void *)(v3 + 24) = swift_task_alloc();
  *(void *)(v3 + 32) = _Block_copy(a2);
  swift_retain();
  return _swift_task_switch(sub_1001B589C, 0, 0);
}

uint64_t sub_1001B589C()
{
  swift_retain();
  Logger.init(subsystem:category:)();
  uint64_t v6 = (char *)&dword_100343720 + dword_100343720;
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D8C0C;
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 56);
  return ((uint64_t (*)(const char *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))v6)("PrivateService.setScreenTimeSyncEnabled", 39, 2, v2, 1, 0, v3, v4);
}

uint64_t sub_1001B59BC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1001B0858((uint64_t)v6);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    BOOL v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking if user is managed", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v11 = (id *)swift_allocObject();
  v11[3] = 0;
  v11[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))((uint64_t)v11 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v3);
  if (byte_10034B308 == 1)
  {
    v11[2] = v10;
    id v12 = v10;
    id v13 = sub_1001D7640();
    __chkstk_darwin(v13);
    NSManagedObjectContext.performAndWait<A>(_:)();

    swift_setDeallocating();
    sub_1000B6270((uint64_t)v11 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
    uint64_t result = swift_deallocClassInstance();
    if (!v1) {
      *a1 = v15[15];
    }
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001B5E40(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  type metadata accessor for Logger();
  v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1001B5EF0, 0, 0);
}

uint64_t sub_1001B5EF0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  Logger.init(subsystem:category:)();
  char v3 = sub_1001195A8("PrivateService.shouldRequestMoreTime", 36, 2, v1, 1, 0, v2);
  swift_release();
  (*(void (**)(void, void, void))(*(void *)(v0 + 32) + 16))(*(void *)(v0 + 32), v3 & 1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void sub_1001B603C(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v40 = a3;
  uint64_t v7 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v7);
  uint64_t v42 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v39 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v38 = a1;
  sub_1001B0858((uint64_t)&v34 - v13);
  uint64_t v15 = a2;
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v41 = v7;
  if (v18)
  {
    os_log_type_t v19 = v15;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v43 = v9;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v37 = v3;
    id v35 = (void *)v22;
    *(_DWORD *)uint64_t v21 = 138412290;
    uint64_t v36 = v10;
    uint64_t v44 = v15;
    uint64_t v23 = v15;
    uint64_t v10 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v24 = v19;
    *id v35 = v19;

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Checking if content privacy is enabled for %@", v21, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    uint64_t v4 = v37;
    swift_slowDealloc();
    uint64_t v9 = v43;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v24 = v15;
    unint64_t v16 = v15;
  }

  uint64_t v37 = *(void (**)(void, void))(v10 + 8);
  v37(v14, v9);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v25 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v26 = (id *)swift_allocObject();
  v26[3] = 0;
  v26[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))((uint64_t)v26 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v9);
  if (byte_10034B308 == 1)
  {
    v26[2] = v25;
    id v27 = v25;
    sub_1001DE3B0(v24);
    if (v4)
    {
      swift_release();
    }
    else
    {
      uint64_t v29 = v28;
      LOBYTE(v44) = 0;
      id v30 = sub_1001D7640();
      __chkstk_darwin(v30);
      *(&v34 - 4) = (uint64_t)v26;
      *(&v34 - 3) = (uint64_t)v29;
      id v33 = &v44;
      NSManagedObjectContext.performAndWait<A>(_:)();
      uint64_t v43 = v9;

      char v31 = (char)v44;
      id v32 = sub_1001D7640();
      __chkstk_darwin(v32);
      *(&v34 - 4) = (uint64_t)v26;
      *(&v34 - 3) = (uint64_t)v29;
      LOBYTE(v33) = v31;
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_setDeallocating();
      sub_1000B6270((uint64_t)v26 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
      swift_deallocClassInstance();
      *uint64_t v40 = (_BYTE)v44;
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_1001B6870(void *a1, const void *a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  type metadata accessor for Logger();
  v3[4] = swift_task_alloc();
  v3[5] = _Block_copy(a2);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_1001B6930, 0, 0);
}

uint64_t sub_1001B6930()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  id v3 = *(id *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  char v4 = sub_1001195FC("PrivateService.isContentPrivacyEnabled", 38, 2, v1, 1, 0, v2, v3);
  swift_release();

  (*(void (**)(void, void, void))(*(void *)(v0 + 40) + 16))(*(void *)(v0 + 40), v4 & 1, 0);
  _Block_release(*(const void **)(v0 + 40));
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

void sub_1001B6A90(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v27 - v8;
  v27[0] = a1;
  sub_1001B0858((uint64_t)v27 - v8);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Clearing Restrictions Passcode", v12, 2u);
    swift_slowDealloc();
  }

  uint64_t v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v9, v3);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v14 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v15 = (id *)swift_allocObject();
  v15[3] = 0;
  v15[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))((uint64_t)v15 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v3);
  if (byte_10034B308 == 1)
  {
    v15[2] = v14;
    id v16 = v14;
    id v17 = sub_1001D7640();
    __chkstk_darwin(v17);
    uint64_t v25 = v15;
    uint64_t v26 = 0;
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (v1)
    {
      swift_release();
    }
    else
    {

      if (v28)
      {
        sub_1001B0858((uint64_t)v7);
        BOOL v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v20 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "Ignoring attempt to clear restrictions passcode, user is managed", v20, 2u);
          swift_slowDealloc();
        }

        v13(v7, v3);
        type metadata accessor for STError(0);
        v27[1] = 23;
        sub_100109D9C((uint64_t)_swiftEmptyArrayStorage);
        sub_1001D0560((unint64_t *)&qword_100341160, type metadata accessor for STError);
        _BridgedStoredNSError.init(_:userInfo:)();
        swift_willThrow();
        swift_release();
      }
      else
      {
        id v21 = sub_1001D7640();
        __chkstk_darwin(v21);
        uint64_t v25 = v15;
        LOBYTE(v26) = 0;
        NSManagedObjectContext.performAndWait<A>(_:)();

        id v22 = sub_1001D7640();
        __chkstk_darwin(v22);
        v27[-4] = v15;
        v27[-3] = 0;
        LOBYTE(v25) = 0;
        NSManagedObjectContext.performAndWait<A>(_:)();

        id v23 = sub_1001D7640();
        __chkstk_darwin(v23);
        v27[-4] = v15;
        v27[-3] = 0;
        LOWORD(v25) = 0;
        NSManagedObjectContext.performAndWait<A>(_:)();

        id v24 = sub_1001D7640();
        NSManagedObjectContext.performAndWait<A>(_:)();

        swift_setDeallocating();
        sub_1000B6270((uint64_t)v15 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
        swift_deallocClassInstance();
      }
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_1001B71F8(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  type metadata accessor for Logger();
  v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1001B72A8, 0, 0);
}

uint64_t sub_1001B72A8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_retain();
  Logger.init(subsystem:category:)();
  sub_10011D7EC("PrivateService.clearRestrictionsPasscode", 40, 2, v2, 1, 0, v1);
  swift_release();
  (*(void (**)(void, void))(*(void *)(v0 + 32) + 16))(*(void *)(v0 + 32), 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

void sub_1001B73E0(BOOL *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B0858((uint64_t)v6);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking if restrictions passcode is set", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  os_log_type_t v11 = (id *)swift_allocObject();
  v11[3] = 0;
  v11[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))((uint64_t)v11 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v3);
  if (byte_10034B308 == 1)
  {
    v11[2] = v10;
    LOBYTE(v18[0]) = 0;
    id v12 = v10;
    id v13 = sub_1001D7640();
    __chkstk_darwin(v13);
    v18[-4] = v11;
    v18[-3] = 0;
    id v17 = v18;
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (v1)
    {
      swift_release();
    }
    else
    {

      char v14 = v18[0];
      id v15 = sub_1001D7640();
      __chkstk_darwin(v15);
      v18[-4] = v11;
      v18[-3] = 0;
      LOBYTE(v17) = v14;
      sub_10009EE78(&qword_100342288);
      NSManagedObjectContext.performAndWait<A>(_:)();

      if (v18[1])
      {
        uint64_t v16 = String.count.getter();
        swift_setDeallocating();

        sub_1000B6270((uint64_t)v11 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
        swift_deallocClassInstance();
        swift_bridgeObjectRelease();
        *a1 = v16 > 0;
      }
      else
      {
        swift_setDeallocating();

        sub_1000B6270((uint64_t)v11 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
        swift_deallocClassInstance();
        *a1 = 0;
      }
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_1001B79A0(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  type metadata accessor for Logger();
  v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1001B7A50, 0, 0);
}

uint64_t sub_1001B7A50()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  Logger.init(subsystem:category:)();
  char v3 = sub_100115588("PrivateService.isRestrictionsPasscodeSet", 40, 2, v1, 1, 0, v2);
  swift_release();
  (*(void (**)(void, void, void))(*(void *)(v0 + 32) + 16))(*(void *)(v0 + 32), v3 & 1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void sub_1001B7B9C(unsigned char *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1001B0858((uint64_t)v6);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Needs to set restrictions passcode", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  os_log_type_t v11 = (id *)swift_allocObject();
  v11[3] = 0;
  v11[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))((uint64_t)v11 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v3);
  if (byte_10034B308 == 1)
  {
    v11[2] = v10;
    char v18 = 0;
    id v12 = v10;
    id v13 = sub_1001D7640();
    __chkstk_darwin(v13);
    *(void *)&v17[-32] = v11;
    *(void *)&v17[-24] = 0;
    uint64_t v16 = &v18;
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (v1)
    {
      swift_release();
    }
    else
    {

      char v14 = v18;
      id v15 = sub_1001D7640();
      __chkstk_darwin(v15);
      *(void *)&v17[-32] = v11;
      *(void *)&v17[-24] = 0;
      LOBYTE(v16) = v14;
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_setDeallocating();
      sub_1000B6270((uint64_t)v11 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
      swift_deallocClassInstance();
      *a1 = v17[14];
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_1001B80B0(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  type metadata accessor for Logger();
  v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1001B8160, 0, 0);
}

uint64_t sub_1001B8160()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  Logger.init(subsystem:category:)();
  char v3 = sub_10011ABA4("PrivateService.needsToSetRestrictionsPasscode", 45, 2, v1, 1, 0, v2);
  swift_release();
  (*(void (**)(void, void, void))(*(void *)(v0 + 32) + 16))(*(void *)(v0 + 32), v3 & 1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001B82AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[5] = v5;
  v4[6] = *(void *)(v5 - 8);
  v4[7] = swift_task_alloc();
  v4[8] = swift_task_alloc();
  return _swift_task_switch(sub_1001B8380, 0, 0);
}

uint64_t sub_1001B8380()
{
  sub_1001B0858(*(void *)(v0 + 64));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    char v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Setting restrictions passcode", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 24);
  unint64_t v8 = *(void *)(v0 + 32);

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v4, v5);
  uint64_t v10 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    if (qword_100340D90 != -1) {
      swift_once();
    }
    uint64_t v11 = *(void *)(v0 + 40);
    uint64_t v12 = *(void *)(v0 + 48);
    id v13 = (void *)qword_10034B310;
    type metadata accessor for DataStore(0);
    char v14 = (void *)swift_allocObject();
    *(void *)(v0 + 72) = v14;
    v14[3] = 0;
    v14[4] = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))((uint64_t)v14 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v11);
    if (byte_10034B308 == 1)
    {
      void v14[2] = v13;
      *(unsigned char *)(v0 + 104) = 0;
      id v15 = v13;
      id v16 = sub_1001D7640();
      id v17 = (void *)swift_task_alloc();
      uint64_t v17[2] = v14;
      v17[3] = 0;
      v17[4] = v0 + 104;
      NSManagedObjectContext.performAndWait<A>(_:)();
      uint64_t v25 = *(void *)(v0 + 24);

      swift_task_dealloc();
      char v26 = *(unsigned char *)(v0 + 104);
      id v27 = sub_1001D7640();
      uint64_t v28 = swift_task_alloc();
      *(void *)(v28 + 16) = v14;
      *(void *)(v28 + 24) = 0;
      *(unsigned char *)(v28 + 32) = v26;
      *(void *)(v28 + 40) = v25;
      *(void *)(v28 + 48) = v8;
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_task_dealloc();
      id v29 = sub_1001D7640();
      uint64_t v30 = swift_task_alloc();
      *(void *)(v30 + 16) = v14;
      *(void *)(v30 + 24) = 0;
      *(unsigned char *)(v30 + 32) = v26;
      *(unsigned char *)(v30 + 33) = 1;
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_task_dealloc();
      id v32 = sub_1001D7640();
      NSManagedObjectContext.performAndWait<A>(_:)();

      if (qword_100340E00 != -1) {
        swift_once();
      }
      *(void *)(v0 + 80) = qword_10034B370;
      swift_retain();
      id v33 = (void *)swift_task_alloc();
      *(void *)(v0 + 88) = v33;
      void *v33 = v0;
      v33[1] = sub_1001B89C8;
      return sub_10019F170(0);
    }
    else
    {
      return _assertionFailure(_:_:file:line:flags:)();
    }
  }
  else
  {
    sub_1001B0858(*(void *)(v0 + 56));
    char v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Empty string is not a valid restrictions passcode", v20, 2u);
      swift_slowDealloc();
    }
    uint64_t v21 = *(void *)(v0 + 56);
    uint64_t v22 = *(void *)(v0 + 40);

    v9(v21, v22);
    sub_1001CDEA4();
    swift_allocError();
    unsigned char *v23 = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    char v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
}

uint64_t sub_1001B89C8()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1001B8BC4;
  }
  else
  {
    swift_release();
    os_log_type_t v2 = sub_1001B8AE4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B8AE4()
{
  uint64_t v1 = *(id **)(v0 + 72);
  swift_setDeallocating();

  sub_1000B6270((uint64_t)v1 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
  swift_deallocClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001B8BC4()
{
  uint64_t v1 = *(id **)(v0 + 72);
  swift_release();
  swift_setDeallocating();

  sub_1000B6270((uint64_t)v1 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
  swift_deallocClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001B8E1C(uint64_t a1, const void *a2, uint64_t a3)
{
  v3[2] = a3;
  type metadata accessor for Logger();
  v3[3] = swift_task_alloc();
  v3[4] = _Block_copy(a2);
  v3[5] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[6] = v5;
  swift_retain();
  return _swift_task_switch(sub_1001B8EE4, 0, 0);
}

void sub_1001B8EE4()
{
  swift_retain();
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  char v3 = (char *)&dword_1003436E8 + dword_1003436E8;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001B9024;
  __asm { BR              X8 }
}

uint64_t sub_1001B9024()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001B91E0;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1001B914C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B914C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001B91E0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release_n();
  swift_bridgeObjectRelease_n();
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);

  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  char v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

void sub_1001B92A0(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  v18[3] = a1;
  sub_1001B0858((uint64_t)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Authenticate Restrictions Passcode", v10, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19((char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v11 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v12 = (id *)swift_allocObject();
  v12[3] = 0;
  v12[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))((uint64_t)v12 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v5);
  if (byte_10034B308 == 1)
  {
    v12[2] = v11;
    char v22 = 0;
    id v13 = v11;
    id v14 = sub_1001D7640();
    __chkstk_darwin(v14);
    v18[-4] = v12;
    v18[-3] = 0;
    id v16 = &v22;
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (v3)
    {
      swift_release();
    }
    else
    {

      id v15 = sub_1001D7640();
      __chkstk_darwin(v15);
      v18[-4] = v12;
      v18[-3] = 0;
      id v16 = v20;
      uint64_t v17 = v21;
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_setDeallocating();
      sub_1000B6270((uint64_t)v12 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
      swift_deallocClassInstance();
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_1001B9B8C(uint64_t a1, const void *a2, uint64_t a3)
{
  v3[2] = a3;
  type metadata accessor for Logger();
  v3[3] = swift_task_alloc();
  v3[4] = _Block_copy(a2);
  v3[5] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[6] = v5;
  swift_retain();
  return _swift_task_switch(sub_1001B9C54, 0, 0);
}

uint64_t sub_1001B9C54()
{
  uint64_t v1 = *(uint64_t **)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  sub_10011ACF4("PrivateService.authenticateRestrictionsPasscode", 47, 2, v3, 1, 1, v4, v1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(void, void))(*(void *)(v0 + 32) + 16))(*(void *)(v0 + 32), 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1001B9DB0(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  type metadata accessor for Logger();
  v2[4] = swift_task_alloc();
  return _swift_task_switch(sub_1001B9E40, 0, 0);
}

uint64_t sub_1001B9E40()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  sub_10009EE78(&qword_100343598);
  uint64_t v3 = (uint64_t *)swift_task_alloc();
  swift_retain();
  Logger.init(subsystem:category:)();
  sub_1001282A8("PrivateService.fetchRestrictionsPasscodeEntryAttemptCountAndTimeoutDate", 71, 2, v1, 1, 0, v2, (uint64_t)v3);
  uint64_t v4 = (char *)v0[2];
  uint64_t v5 = *(int *)(sub_10009EE78(&qword_1003435B8) + 48);
  uint64_t v6 = (char *)v3 + v5;
  uint64_t v7 = (char *)(swift_task_alloc() + v5);
  uint64_t v8 = *v3;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v6, v9);
  v10(v4, v7, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(uint64_t))v0[1];
  return v11(v8);
}

uint64_t sub_1001BA080@<X0>(void *a1@<X8>)
{
  id v23 = a1;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B0858((uint64_t)v5);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Fetching Restrictions passcode entry attempt count and timeout date", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v10 = (id *)swift_allocObject();
  v10[3] = 0;
  v10[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))((uint64_t)v10 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v2);
  if (byte_10034B308 == 1)
  {
    v10[2] = v9;
    uint64_t v11 = sub_10009EE78(&qword_1003435B8);
    __chkstk_darwin(v11);
    uint64_t v13 = (uint64_t *)((char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    id v14 = v9;
    id v15 = sub_1001D7640();
    __chkstk_darwin(v15);
    NSManagedObjectContext.performAndWait<A>(_:)();

    if (v1)
    {
      swift_setDeallocating();

      sub_1000B6270((uint64_t)v10 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
      return swift_deallocClassInstance();
    }
    else
    {
      uint64_t v17 = v23;
      char v18 = (char *)v23 + *(int *)(v11 + 48);
      uint64_t v19 = *v13;
      uint64_t v20 = (char *)v13 + *(int *)(v11 + 48);
      uint64_t v21 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v18, v20, v21);
      swift_setDeallocating();

      sub_1000B6270((uint64_t)v10 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
      uint64_t result = swift_deallocClassInstance();
      void *v17 = v19;
    }
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001BA618(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  uint64_t v4 = type metadata accessor for Date();
  v2[3] = v4;
  v2[4] = *(void *)(v4 - 8);
  uint64_t v5 = swift_task_alloc();
  v2[5] = v5;
  v2[6] = _Block_copy(a1);
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v2[7] = v6;
  void *v6 = v2;
  v6[1] = sub_1001BA738;
  return sub_1001B9DB0(v5);
}

uint64_t sub_1001BA738(void *a1)
{
  uint64_t v5 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  uint64_t v6 = (void *)*v2;
  swift_task_dealloc();
  swift_release();
  os_log_type_t v7 = (void (**)(void, void, void, void))v4[6];
  if (v1)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void, void *))v7)[2](v7, 0, 0, v8);

    _Block_release(v7);
  }
  else
  {
    uint64_t v10 = v5[4];
    uint64_t v9 = v5[5];
    uint64_t v11 = v5[3];
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    ((void (**)(void, void *, Class, void))v7)[2](v7, a1, isa, 0);

    _Block_release(v7);
  }
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v6[1];
  return v13();
}

uint64_t sub_1001BA918@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v4 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (id *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v44 = (uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v36 - v11;
  uint64_t v43 = a1;
  sub_1001B0858((uint64_t)&v36 - v11);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Fetch communication policies", v15, 2u);
    swift_slowDealloc();
  }

  uint64_t v42 = *(void (**)(char *, uint64_t))(v8 + 8);
  v42(v12, v7);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  id v16 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v17 = (id *)swift_allocObject();
  v17[3] = 0;
  v17[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))((uint64_t)v17 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v7);
  if (byte_10034B308 != 1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v17[2] = v16;
  LOBYTE(v46) = 0;
  id v18 = v16;
  id v19 = sub_1001D7640();
  __chkstk_darwin(v19);
  *(&v36 - 4) = (uint64_t)v17;
  *(&v36 - 3) = 0;
  uint64_t v34 = (id *)&v46;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (!v2)
  {

    char v20 = v46;
    id v21 = sub_1001D7640();
    uint64_t v41 = &v36;
    __chkstk_darwin(v21);
    *(&v36 - 4) = (uint64_t)v17;
    *(&v36 - 3) = 0;
    LOBYTE(v34) = v20;
    sub_10009EE78(&qword_100344658);
    NSManagedObjectContext.performAndWait<A>(_:)();

    swift_setDeallocating();
    sub_1000B6270((uint64_t)v17 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
    uint64_t result = swift_deallocClassInstance();
    *uint64_t v45 = v46;
    return result;
  }

  uint64_t v52 = v2;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  if (!swift_dynamicCast())
  {
LABEL_12:
    swift_errorRelease();
    swift_willThrow();
    return swift_release();
  }
  if (swift_getEnumCaseMultiPayload() != 27)
  {
    sub_1000C9DB4((uint64_t)v6);
    goto LABEL_12;
  }
  swift_errorRelease();

  id v22 = sub_1001D7640();
  __chkstk_darwin(v22);
  uint64_t v34 = v17;
  uint64_t v35 = 0;
  NSManagedObjectContext.performAndWait<A>(_:)();

  id v24 = (void *)v46;
  uint64_t v25 = v50;
  if (v51)
  {
    uint64_t v37 = v50;
    uint64_t v38 = v46;
    uint64_t v39 = v47;
    uint64_t v40 = v48;
    uint64_t v41 = v49;
    uint64_t v26 = v44;
    sub_1001B0858(v44);
    id v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Missing family settings for local user.. user is the parent, returning false", v29, 2u);
      uint64_t v26 = v44;
      swift_slowDealloc();
      uint64_t v30 = v37;
      char v31 = v38;
    }
    else
    {
      uint64_t v30 = v27;
      char v31 = v37;
      id v27 = v38;
    }
    id v33 = v45;

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v42((char *)v26, v7);
    void *v33 = 0;
    v33[1] = 0;
  }
  else
  {
    sub_1001D0560((unint64_t *)&qword_1003439E0, (void (*)(uint64_t))type metadata accessor for DataStore.DataStoreError);
    swift_allocError();
    *id v32 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_errorRelease();
}

uint64_t sub_1001BB184(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  type metadata accessor for Logger();
  v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1001BB234, 0, 0);
}

uint64_t sub_1001BB234()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  uint64_t v4 = sub_100130278("PrivateService.fetchCommunicationPolicies", 41, 2, v1, 1, 0, v3);
  uint64_t v6 = v5;
  swift_release();
  (*(void (**)(void, NSObject *, uint64_t, void))(v2 + 16))(*(void *)(v0 + 32), v4, v6, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

void sub_1001BB38C(char a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1) {
    uint64_t v10 = 2;
  }
  else {
    uint64_t v10 = 0;
  }
  sub_1001B0858((uint64_t)v9);
  uint64_t v11 = a3;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  int v14 = v13;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v30 = v6;
    uint64_t v16 = v15;
    id v29 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 67109378;
    int v33 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 8) = 2112;
    v28[1] = v16 + 18;
    v28[2] = v16 + 10;
    char v31 = v11;
    int v32 = v14;
    uint64_t v17 = v11;
    id v18 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v29 = v17;

    uint64_t v11 = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v32, "Set manage contacts enabled to %{BOOL}d for dsid %@", (uint8_t *)v16, 0x12u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v30;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v12 = v11;
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  id v19 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  char v20 = (id *)swift_allocObject();
  v20[3] = 0;
  v20[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))((uint64_t)v20 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v6);
  if (byte_10034B308 == 1)
  {
    void v20[2] = v19;
    id v21 = v19;
    sub_1001DE3B0(v11);
    if (v3)
    {
      swift_release();
    }
    else
    {
      id v23 = v22;
      id v24 = sub_1001D7640();
      __chkstk_darwin(v24);
      v28[-4] = v20;
      v28[-3] = v23;
      LOBYTE(v26) = 1;
      uint64_t v27 = v10;
      NSManagedObjectContext.performAndWait<A>(_:)();

      id v25 = sub_1001D7640();
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_setDeallocating();
      sub_1000B6270((uint64_t)v20 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
      swift_deallocClassInstance();
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_1001BB9D0(char a1, void *a2, const void *a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a4;
  *(unsigned char *)(v4 + 48) = a1;
  type metadata accessor for Logger();
  *(void *)(v4 + 32) = swift_task_alloc();
  *(void *)(v4 + 40) = _Block_copy(a3);
  id v7 = a2;
  swift_retain();
  return _swift_task_switch(sub_1001BBA94, 0, 0);
}

uint64_t sub_1001BBA94()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  int v3 = *(unsigned __int8 *)(v0 + 48);
  id v4 = *(id *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  sub_10011D83C("PrivateService.setManageContactsEnabled", 39, 2, v2, 1, 0, v3, v1, v4);
  swift_release();

  (*(void (**)(void, void))(*(void *)(v0 + 40) + 16))(*(void *)(v0 + 40), 0);
  _Block_release(*(const void **)(v0 + 40));
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

void sub_1001BBBF0(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B0858((uint64_t)v6);
  uint64_t v7 = a2;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    id v25 = v10;
    uint64_t v26 = v4;
    *(_DWORD *)uint64_t v10 = 138412290;
    id v24 = v10 + 4;
    os_log_type_t v28 = v7;
    uint64_t v12 = v7;
    os_log_type_t v13 = v7;
    uint64_t v4 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v11 = v12;

    uint64_t v7 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Request to manage contacts for %@", v25, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v8 = v7;
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  int v14 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v15 = (id *)swift_allocObject();
  v15[3] = 0;
  v15[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))((uint64_t)v15 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v3);
  if (byte_10034B308 == 1)
  {
    v15[2] = v14;
    id v16 = v14;
    uint64_t v17 = v27;
    sub_1001DE3B0(v7);
    if (v17)
    {
      swift_release();
    }
    else
    {
      id v19 = v18;
      id v20 = sub_1001D7640();
      __chkstk_darwin(v20);
      *(&v24 - 4) = (uint8_t *)v15;
      *(&v24 - 3) = v19;
      LOBYTE(v22) = 1;
      uint64_t v23 = 1;
      NSManagedObjectContext.performAndWait<A>(_:)();

      id v21 = sub_1001D7640();
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_setDeallocating();
      sub_1000B6270((uint64_t)v15 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
      swift_deallocClassInstance();
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_1001BC1E8(void *a1, const void *a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  type metadata accessor for Logger();
  v3[4] = swift_task_alloc();
  v3[5] = _Block_copy(a2);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_1001BC2A8, 0, 0);
}

uint64_t sub_1001BC2A8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  id v3 = *(id *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  sub_10011EC58("PrivateService.requestToManageContacts", 38, 2, v2, 1, 0, v1, v3);
  swift_release();

  (*(void (**)(void, void))(*(void *)(v0 + 40) + 16))(*(void *)(v0 + 40), 0);
  _Block_release(*(const void **)(v0 + 40));
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void sub_1001BC3FC(void *a1@<X1>, NSObject **a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B0858((uint64_t)v6);
  uint64_t v7 = a1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    id v24 = (void *)swift_slowAlloc();
    id v25 = v10;
    uint64_t v26 = v4;
    *(_DWORD *)uint64_t v10 = 138412290;
    id v29 = v7;
    uint64_t v11 = v7;
    uint64_t v4 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v12 = v7;
    *id v24 = v7;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Fetch contact management state for %@", v25, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v12 = v7;
    uint64_t v8 = v7;
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  os_log_type_t v13 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  int v14 = (id *)swift_allocObject();
  v14[3] = 0;
  v14[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))((uint64_t)v14 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v3);
  if (byte_10034B308 == 1)
  {
    void v14[2] = v13;
    id v15 = v13;
    uint64_t v16 = v28;
    sub_1001DE3B0(v12);
    if (v16)
    {
      swift_release();
    }
    else
    {
      id v18 = v17;
      LOBYTE(v29) = 0;
      id v19 = sub_1001D7640();
      __chkstk_darwin(v19);
      *(&v23 - 4) = (uint64_t)v14;
      *(&v23 - 3) = (uint64_t)v18;
      uint64_t v22 = &v29;
      NSManagedObjectContext.performAndWait<A>(_:)();

      char v20 = (char)v29;
      id v21 = sub_1001D7640();
      __chkstk_darwin(v21);
      *(&v23 - 4) = (uint64_t)v14;
      *(&v23 - 3) = (uint64_t)v18;
      LOBYTE(v22) = v20;
      type metadata accessor for ContactManagementState(0);
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_setDeallocating();
      sub_1000B6270((uint64_t)v14 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
      swift_deallocClassInstance();
      NSObject *v27 = v29;
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_1001BCA40(void *a1, const void *a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  type metadata accessor for Logger();
  v3[4] = swift_task_alloc();
  v3[5] = _Block_copy(a2);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_1001BCB00, 0, 0);
}

uint64_t sub_1001BCB00()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  id v3 = *(id *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  uint64_t v4 = sub_100131728("PrivateService.fetchContactManagementState", 42, 2, v1, 1, 0, v2, v3);
  swift_release();

  (*(void (**)(void, NSObject *, void))(*(void *)(v0 + 40) + 16))(*(void *)(v0 + 40), v4, 0);
  _Block_release(*(const void **)(v0 + 40));
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

void sub_1001BCC5C(uint64_t *a1@<X8>)
{
  uint64_t v59 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v59 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  __chkstk_darwin(v59);
  sub_1001B0858((uint64_t)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Primary iCloud card DAV account identifier", v6, 2u);
    swift_slowDealloc();
  }

  uint64_t v7 = *(void (**)(char *, uint64_t))(v2 + 8);
  v7((char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v59);
  id v8 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v9 = objc_msgSend(v8, "aa_primaryAppleAccount");

  if (v9)
  {
    id v11 = v9;
    id v12 = [v11 childCardDAVAccountIdentifier];
    if (v12)
    {
      os_log_type_t v13 = v12;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      *a1 = v14;
      a1[1] = v16;
    }
    else
    {
      __chkstk_darwin(0);
      long long v46 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_1001B0858((uint64_t)v46);
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "User has Apple Account but no iCloudCardDAVAccountIdentifier", v49, 2u);
        swift_slowDealloc();
      }

      v7(v46, v59);
      sub_1001CDEA4();
      swift_allocError();
      unsigned char *v50 = 1;
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v58 = v7;
    uint64_t v56 = v2;
    uint64_t v57 = &v51;
    __chkstk_darwin(v10);
    unint64_t v17 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
    sub_1001B0858((uint64_t)&v51 - v17);
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      char v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "No apple account exists for user", v20, 2u);
      swift_slowDealloc();
    }

    uint64_t v21 = v59;
    uint64_t v22 = v58;
    uint64_t v23 = ((uint64_t (*)(char *, uint64_t))v58)((char *)&v51 - v17, v59);
    __chkstk_darwin(v23);
    id v24 = (char *)&v51 - v17;
    sub_1001B0858((uint64_t)&v51 - v17);
    unint64_t v25 = sub_1001CDEA4();
    uint64_t v26 = swift_allocError();
    unsigned char *v27 = 0;
    if (&class metadata base offset for TapToRadarService) {
      BOOL v28 = &type metadata accessor for TapToRadarService == 0;
    }
    else {
      BOOL v28 = 1;
    }
    if (!v28 && &type metadata for TapToRadarService != 0 && &nominal type descriptor for TapToRadarService != 0)
    {
      uint64_t v31 = sub_10009EE78(&qword_100340F10);
      uint64_t v53 = &v51;
      __chkstk_darwin(v31 - 8);
      int v33 = (char *)&v51 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v52 = v33;
      uint64_t v34 = type metadata accessor for TaskPriority();
      uint64_t v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 1, 1, v34);
      uint64_t v51 = (uint64_t)&v51;
      __chkstk_darwin(v35);
      uint64_t v36 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v54 = v26;
      uint64_t v37 = v56;
      (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v36, v24, v21);
      unint64_t v38 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
      unint64_t v55 = v25;
      unint64_t v39 = (v38 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v57 = &v51;
      unint64_t v40 = (v38 + v3 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = 0;
      *(void *)(v41 + 24) = 0;
      uint64_t v42 = v36;
      uint64_t v22 = v58;
      (*(void (**)(unint64_t, char *, uint64_t))(v37 + 32))(v41 + v38, v42, v21);
      unint64_t v43 = v41 + v39;
      uint64_t v44 = v54;
      *(void *)unint64_t v43 = "PrivateService.primaryiCloudCardDAVAccountIdentifier";
      *(void *)(v43 + 8) = 52;
      *(unsigned char *)(v43 + 16) = 2;
      *(void *)(v41 + v40) = v44;
      swift_errorRetain();
      sub_1000A27A0((uint64_t)v52, (uint64_t)&unk_100341D50, v41);
      swift_release();
    }
    v22(v24, v21);
    swift_errorRelease();
    swift_allocError();
    *uint64_t v45 = 0;
    swift_willThrow();
  }
}

uint64_t sub_1001BD40C(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  type metadata accessor for Logger();
  v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1001BD4BC, 0, 0);
}

uint64_t sub_1001BD4BC()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  swift_retain();
  Logger.init(subsystem:category:)();
  sub_100132C84("PrivateService.primaryiCloudCardDAVAccountIdentifier", 52, 2, v1, 1, 1, v2);
  swift_release();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void (**)(void, void, void))v0[4];
  ((void (**)(void, NSString, void))v4)[2](v4, v3, 0);

  _Block_release(v4);
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

void sub_1001BD61C(unsigned __int8 *a1@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  id v8 = (char *)&v37 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v37 - v9;
  sub_1001B0858((uint64_t)&v37 - v9);
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Fetch Contacts Editable", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  v14(v10, v1);
  id v15 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v16 = objc_msgSend(v15, "aa_primaryAppleAccount");

  if (!v16)
  {
    sub_1001B0858((uint64_t)v8);
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "No apple account exists for user", v31, 2u);
      swift_slowDealloc();
    }

    uint64_t v32 = v8;
    goto LABEL_16;
  }
  id v17 = v16;
  id v18 = [v17 childCardDAVAccountIdentifier];
  if (!v18)
  {
    sub_1001B0858((uint64_t)v5);
    int v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "No childCardDAVAccountIdentifer for user", v35, 2u);
      swift_slowDealloc();
    }

    uint64_t v32 = v5;
LABEL_16:
    v14(v32, v1);
    unsigned __int8 *v37 = 1;
    return;
  }
  os_log_type_t v19 = v18;
  id v20 = [self predicateForContainersInAccountWithExternalIdentifier:v18];

  id v21 = [objc_allocWithZone((Class)CNContactStore) init];
  id v38 = 0;
  id v22 = [v21 containersMatchingPredicate:v20 error:&v38];

  id v23 = v38;
  if (v22)
  {
    sub_1000A0760(0, &qword_1003445B0);
    uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v25 = v23;

    if ((v24 & 0xC000000000000001) != 0)
    {
      id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        __break(1u);
      }
      id v26 = *(id *)(v24 + 32);
    }
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
    unsigned __int8 v28 = [v27 isGuardianRestricted];

    unsigned __int8 *v37 = v28;
  }
  else
  {
    id v36 = v38;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t sub_1001BDC20(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  type metadata accessor for Logger();
  v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1001BDCD0, 0, 0);
}

uint64_t sub_1001BDCD0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  Logger.init(subsystem:category:)();
  char v3 = sub_10011ABF8("PrivateService.fetchContactsEditable", 36, 2, v1, 1, 0, v2);
  swift_release();
  (*(void (**)(void, void, void))(*(void *)(v0 + 32) + 16))(*(void *)(v0 + 32), v3 & 1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001BDE1C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  type metadata accessor for Logger();
  v3[5] = swift_task_alloc();
  return _swift_task_switch(sub_1001BDEB0, 0, 0);
}

uint64_t sub_1001BDEB0()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  char v3 = (void *)v0[3];
  sub_10009EE78(&qword_100343570);
  uint64_t v4 = swift_task_alloc();
  swift_retain();
  id v5 = v3;
  Logger.init(subsystem:category:)();
  sub_100134134("PrivateService.fetchLastCommunicationLimitsModificationDate", 59, 2, v2, 1, 0, v1, v5, v4);
  uint64_t v6 = v0[2];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, v4, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  id v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

void sub_1001BE050(void *a1@<X1>, uint64_t a2@<X8>)
{
}

uint64_t sub_1001BE218(void *a1, const void *a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  uint64_t v6 = type metadata accessor for Date();
  v3[4] = v6;
  v3[5] = *(void *)(v6 - 8);
  uint64_t v7 = swift_task_alloc();
  v3[6] = v7;
  v3[7] = _Block_copy(a2);
  id v8 = a1;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v3[8] = v9;
  void *v9 = v3;
  v9[1] = sub_1001D134C;
  return sub_1001BDE1C(v7, (uint64_t)v8);
}

void sub_1001BE348()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B0858((uint64_t)v4);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Apply default user policies", v7, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  id v8 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v9 = (id *)swift_allocObject();
  v9[3] = 0;
  v9[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))((uint64_t)v9 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v1);
  if (byte_10034B308 == 1)
  {
    v9[2] = v8;
    id v10 = v8;
    id v11 = sub_1001D7640();
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (v0)
    {
      swift_release();
    }
    else
    {

      id v12 = sub_1001D7640();
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_setDeallocating();
      sub_1000B6270((uint64_t)v9 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
      swift_deallocClassInstance();
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_1001BE7E0(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  type metadata accessor for Logger();
  v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1001BE890, 0, 0);
}

uint64_t sub_1001BE890()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_retain();
  Logger.init(subsystem:category:)();
  sub_1001201D8("PrivateService.applyDefaultUserPolicies", 39, 2, v2, 1, 0, v1);
  swift_release();
  (*(void (**)(void, void))(*(void *)(v0 + 32) + 16))(*(void *)(v0 + 32), 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001BE9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  uint64_t v6 = type metadata accessor for Logger();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = swift_task_alloc();
  return _swift_task_switch(sub_1001BEA9C, 0, 0);
}

uint64_t sub_1001BEA9C()
{
  int v88 = v0;
  uint64_t v1 = v0 + 5;
  uint64_t v2 = v0[6];
  sub_1001B0858(v0[12]);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v2, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    buf = (uint8_t *)v0[10];
    uint64_t v81 = v0[9];
    uint64_t v82 = v0[12];
    id v85 = v0;
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v87 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    sub_1000D1874((unint64_t *)&qword_100341D78, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v85[4] = sub_1000A2E70(v9, v10, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Permit WebFilter URL: url:%s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v0 = v85;
    swift_slowDealloc();

    id v11 = (void (*)(uint64_t, uint64_t))*((void *)buf + 1);
    v11(v82, v81);
    swift_task_dealloc();
  }
  else
  {
    uint64_t v12 = v0[12];
    uint64_t v13 = v0[9];
    uint64_t v14 = v0[10];
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v3);

    swift_task_dealloc();
    id v11 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v11(v12, v13);
  }
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v15 = v0[9];
  uint64_t v16 = v0[10];
  id v17 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  id v18 = (void *)swift_allocObject();
  v0[13] = v18;
  v18[3] = 0;
  void v18[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))((uint64_t)v18 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v15);
  if (byte_10034B308 != 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  void v18[2] = v17;
  *((unsigned char *)v1 + 128) = 0;
  id v19 = v17;
  id v20 = sub_1001D7640();
  id v21 = (void *)swift_task_alloc();
  v21[2] = v18;
  v21[3] = 0;
  v21[4] = v1 + 16;
  NSManagedObjectContext.performAndWait<A>(_:)();

  uint64_t v86 = v0;
  swift_task_dealloc();
  char v23 = *((unsigned char *)v1 + 128);
  id v24 = [self registeredIdentifier];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  id v28 = sub_1001D7640();
  uint64_t v29 = swift_task_alloc();
  *(void *)(v29 + 16) = v25;
  *(void *)(v29 + 24) = v27;
  *(void *)(v29 + 32) = v18;
  *(void *)(v29 + 40) = 0;
  *(unsigned char *)(v29 + 48) = v23;
  sub_1000A0760(0, &qword_1003415C8);
  NSManagedObjectContext.performAndWait<A>(_:)();
  swift_bridgeObjectRelease();

  char v83 = v23;
  swift_task_dealloc();
  uint64_t v31 = (void *)v0[2];
  v0[14] = v31;
  self;
  uint64_t v32 = (void *)swift_dynamicCastObjCClassUnconditional();
  id v33 = v31;
  id v34 = [v32 payloadUseContentFilter];
  uint64_t v35 = [v34 BOOLValue];

  id v36 = [v32 payloadWhiteListEnabled];
  unsigned int v37 = [v36 BOOLValue];

  if (v35)
  {
    if ((v37 & 1) == 0)
    {
      Class isa = (Class)[v32 payloadFilterBlackList];
      if (isa)
      {
        uint64_t v39 = v0[6];
        uint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v41 = swift_task_alloc();
        *(void *)(v41 + 16) = v39;
        sub_1001B06E0((uint64_t)sub_1001CFCD4, v41, v40);
        swift_task_dealloc();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      char v53 = v83;
      [v32 setPayloadFilterBlackList:isa];

      Class v54 = (Class)[v32 payloadFilterBlackList];
      if (v54)
      {
        uint64_t v55 = v0[6];
        uint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v57 = swift_task_alloc();
        *(void *)(v57 + 16) = v55;
        sub_1001B06E0((uint64_t)sub_1001CFCB4, v57, v56);
        swift_task_dealloc();
        Class v54 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      [v32 setPayloadFilterBlackList:v54];

      id v58 = [v32 payloadFilterWhiteList];
      if (v58)
      {

        id v59 = [v32 payloadFilterWhiteList];
        if (!v59)
        {
          [v32 setPayloadFilterWhiteList:0];
          goto LABEL_45;
        }
        uint64_t v60 = v59;
        uint64_t v61 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v62 = URL.absoluteString.getter();
        uint64_t v64 = v63;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v61 = sub_100207740(0, v61[2] + 1, 1, v61);
        }
        unint64_t v66 = v61[2];
        unint64_t v65 = v61[3];
        if (v66 >= v65 >> 1) {
          uint64_t v61 = sub_100207740((void *)(v65 > 1), v66 + 1, 1, v61);
        }
        v61[2] = v66 + 1;
        uint64_t v67 = &v61[2 * v66];
        v67[4] = v62;
        v67[5] = v64;
        v68.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      }
      else
      {
        sub_10009EE78(&qword_100342120);
        uint64_t v73 = swift_allocObject();
        *(_OWORD *)(v73 + 16) = xmmword_100286230;
        *(void *)(v73 + 32) = URL.absoluteString.getter();
        *(void *)(v73 + 40) = v74;
        v68.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      }
      swift_bridgeObjectRelease();
      [v32 setPayloadFilterWhiteList:v68.super.isa];

LABEL_45:
      [v32 updateServerHash];
      id v75 = sub_1001D7640();
      uint64_t v76 = swift_task_alloc();
      *(void *)(v76 + 16) = v32;
      *(void *)(v76 + 24) = v18;
      *(void *)(v76 + 32) = 0;
      *(unsigned char *)(v76 + 40) = v53;
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_task_dealloc();
      id v77 = sub_1001D7640();
      NSManagedObjectContext.performAndWait<A>(_:)();

      if (qword_100340E00 != -1) {
        swift_once();
      }
      v86[15] = qword_10034B370;
      swift_retain();
      uint64_t v78 = (void *)swift_task_alloc();
      v86[16] = v78;
      *uint64_t v78 = v86;
      v78[1] = sub_1001BF840;
      return sub_10019F170(0);
    }
  }
  else if (v37)
  {
    uint64_t v42 = v0[8];
    id v43 = [objc_allocWithZone((Class)CEMSystemBasicWebContentFilterDeclaration_SiteWhiteListItem) init];
    URL.absoluteString.getter();
    NSString v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v43 setPayloadAddress:v44];

    if (v42) {
      NSString v45 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v45 = 0;
    }
    char v53 = v83;
    [v43 setPayloadPageTitle:v45];

    id v69 = [v32 payloadSiteWhiteList];
    if (v69)
    {
      uint64_t v70 = v69;
      sub_1000A0760(0, &qword_100344548);
      uint64_t v71 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v87 = v71;
      id v43 = v43;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v87)
      {
        v72.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {
        v72.super.Class isa = 0;
      }
      [v32 setPayloadSiteWhiteList:v72.super.isa];
    }
    else
    {
      [v32 setPayloadSiteWhiteList:0];
      swift_bridgeObjectRelease();
    }

    goto LABEL_45;
  }
  sub_1001B0858(v0[11]);
  id v84 = v33;
  long long v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    os_log_type_t v48 = (uint8_t *)swift_slowAlloc();
    uint64_t v79 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v48 = 138412290;
    v0[3] = v32;
    uint64_t v49 = v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v79 = v32;

    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Unknown web content filter state: %@", v48, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    long long v46 = v84;
  }
  uint64_t v50 = v86[11];
  uint64_t v51 = v86[9];

  v11(v50, v51);
  sub_1001CDEA4();
  swift_allocError();
  *uint64_t v52 = 2;
  swift_willThrow();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v30 = (uint64_t (*)(void))v86[1];
  return v30();
}

uint64_t sub_1001BF840()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_1001BFC60;
  }
  else {
    uint64_t v2 = sub_1001BF974;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001BF974()
{
  if (qword_100340DB0 != -1) {
    swift_once();
  }
  *(void *)(v0 + 144) = qword_10034B338;
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001BFA48;
  return sub_1000E879C();
}

uint64_t sub_1001BFA48()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_1001BFCDC;
  }
  else {
    uint64_t v2 = sub_1001BFB7C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001BFB7C()
{
  uint64_t v1 = *(id **)(v0 + 104);

  swift_setDeallocating();
  sub_1000B6270((uint64_t)v1 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
  swift_deallocClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001BFC60()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001BFCDC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

BOOL sub_1001BFD58()
{
  URL.absoluteString.getter();
  sub_1000DA39C();
  uint64_t v0 = StringProtocol.caseInsensitiveCompare<A>(_:)();
  swift_bridgeObjectRelease();
  return v0 != 0;
}

BOOL sub_1001BFDDC()
{
  URL.host(percentEncoded:)(0);
  sub_1000DA39C();
  uint64_t v0 = StringProtocol.caseInsensitiveCompare<A>(_:)();
  swift_bridgeObjectRelease();
  return v0 != 0;
}

uint64_t sub_1001BFFF8(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  v4[2] = a4;
  type metadata accessor for Logger();
  v4[3] = swift_task_alloc();
  v4[4] = _Block_copy(a3);
  uint64_t v7 = type metadata accessor for URL();
  v4[5] = v7;
  v4[6] = *(void *)(v7 - 8);
  v4[7] = swift_task_alloc();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  v4[8] = v8;
  v4[9] = v9;
  swift_retain();
  return _swift_task_switch(sub_1001C013C, 0, 0);
}

uint64_t sub_1001C013C()
{
  uint64_t v1 = *(void *)(v0 + 72);
  long long v7 = *(_OWORD *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 80) = v3;
  *(void *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v7;
  *(void *)(v3 + 40) = v1;
  Logger.init(subsystem:category:)();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_1003467A8
                                                                                             + dword_1003467A8);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001C0294;
  uint64_t v5 = *(void *)(v0 + 24);
  return v8((uint64_t)"PrivateService.permitWebFilterURL", 33, 2, v5, 1, 0, (uint64_t)&unk_100344540, v3);
}

uint64_t sub_1001C0294()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001C0470;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001C03B0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C03B0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  (*(void (**)(void, void))(*(void *)(v0 + 48) + 8))(*(void *)(v0 + 56), *(void *)(v0 + 40));
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001C0470()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v5 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1001C0568@<X0>(unsigned char *a1@<X8>)
{
  os_log_type_t v30 = a1;
  uint64_t v2 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B0858((uint64_t)v8);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Is Explicit Content Restricted?", v11, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v12 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v13 = (id *)swift_allocObject();
  v13[3] = 0;
  v13[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))((uint64_t)v13 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v5);
  if (byte_10034B308 == 1)
  {
    v13[2] = v12;
    LOBYTE(v31) = 0;
    id v14 = v12;
    id v15 = sub_1001D7640();
    __chkstk_darwin(v15);
    *(&v29 - 4) = (uint64_t)v13;
    *(&v29 - 3) = 0;
    id v28 = &v31;
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (v1)
    {
      swift_release();

      uint64_t v31 = v1;
      swift_errorRetain();
      sub_10009EE78((uint64_t *)&unk_1003431B0);
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 26)
        {
          swift_errorRelease();
          id v22 = (void *)*((void *)v4 + 2);
          swift_bridgeObjectRelease();

          unsigned char *v30 = 0;
          return swift_errorRelease();
        }
        sub_1000C9DB4((uint64_t)v4);
      }
      return swift_errorRelease();
    }
    else
    {

      char v16 = (char)v31;
      id v17 = [self registeredIdentifier];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      id v21 = sub_1001D7640();
      uint64_t v29 = (uint64_t)&v29;
      __chkstk_darwin(v21);
      *(&v29 - 6) = v18;
      *(&v29 - 5) = v20;
      *(&v29 - 4) = (uint64_t)v13;
      *(&v29 - 3) = 0;
      LOBYTE(v28) = v16;
      sub_1000A0760(0, &qword_1003415C8);
      NSManagedObjectContext.performAndWait<A>(_:)();
      swift_bridgeObjectRelease();

      id v24 = v31;
      self;
      id v25 = [(id)swift_dynamicCastObjCClassUnconditional() payloadAllowExplicitContent];
      if (v25)
      {
        uint64_t v26 = v25;
        unsigned __int8 v27 = [v25 BOOLValue];

        swift_setDeallocating();
        sub_1000B6270((uint64_t)v13 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
        uint64_t result = swift_deallocClassInstance();
        unsigned char *v30 = v27 ^ 1;
      }
      else
      {

        swift_setDeallocating();
        sub_1000B6270((uint64_t)v13 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
        uint64_t result = swift_deallocClassInstance();
        unsigned char *v30 = 0;
      }
    }
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001C0CB8(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  type metadata accessor for Logger();
  v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1001C0D68, 0, 0);
}

uint64_t sub_1001C0D68()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  Logger.init(subsystem:category:)();
  char v3 = sub_10011AC4C("PrivateService.isExplicitContentRestricted", 42, 2, v1, 1, 0, v2);
  swift_release();
  (*(void (**)(void, void, void))(*(void *)(v0 + 32) + 16))(*(void *)(v0 + 32), v3 & 1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001C0EB4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  type metadata accessor for Logger();
  v3[5] = swift_task_alloc();
  return _swift_task_switch(sub_1001C0F48, 0, 0);
}

uint64_t sub_1001C0F48()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  char v3 = (void *)v0[3];
  sub_10009EE78(&qword_100343570);
  uint64_t v4 = swift_task_alloc();
  swift_retain();
  id v5 = v3;
  Logger.init(subsystem:category:)();
  sub_100134184("PrivateService.fetchLastModificationDate", 40, 2, v2, 1, 0, v1, v5, v4);
  uint64_t v6 = v0[2];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, v4, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

void sub_1001C10E8(void *a1@<X1>, uint64_t a2@<X8>)
{
}

void sub_1001C1130(void *a1@<X1>, const char *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v35 = a4;
  id v36 = a2;
  uint64_t v6 = v4;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B0858((uint64_t)v11);
  uint64_t v12 = a1;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  unsigned int v37 = v12;
  if (v15)
  {
    uint64_t v32 = v8;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v33 = v4;
    id v17 = (uint8_t *)v16;
    os_log_type_t v30 = (void *)swift_slowAlloc();
    *(_DWORD *)id v17 = 138412290;
    uint64_t v34 = a3;
    id v38 = v37;
    uint64_t v18 = v37;
    uint64_t v31 = v9;
    uint64_t v19 = v18;
    uint64_t v8 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v30 = v37;

    uint64_t v9 = v31;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v36, v17, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v33;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v13 = v12;
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v20 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  id v21 = (id *)swift_allocObject();
  v21[3] = 0;
  v21[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))((uint64_t)v21 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v8);
  if (byte_10034B308 == 1)
  {
    v21[2] = v20;
    id v22 = v20;
    sub_1001DE3B0(v37);
    if (v6)
    {
      swift_release();
    }
    else
    {
      id v24 = v23;
      char v39 = 0;
      id v25 = sub_1001D7640();
      __chkstk_darwin(v25);
      *(&v29 - 4) = (uint64_t)v21;
      *(&v29 - 3) = (uint64_t)v24;
      id v28 = &v39;
      NSManagedObjectContext.performAndWait<A>(_:)();

      char v26 = v39;
      id v27 = sub_1001D7640();
      __chkstk_darwin(v27);
      *(&v29 - 4) = (uint64_t)v21;
      *(&v29 - 3) = (uint64_t)v24;
      LOBYTE(v28) = v26;
      type metadata accessor for Date();
      NSManagedObjectContext.performAndWait<A>(_:)();

      swift_setDeallocating();
      sub_1000B6270((uint64_t)v21 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
      swift_deallocClassInstance();
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_1001C1768(void *a1, const void *a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  uint64_t v6 = type metadata accessor for Date();
  v3[4] = v6;
  v3[5] = *(void *)(v6 - 8);
  uint64_t v7 = swift_task_alloc();
  v3[6] = v7;
  v3[7] = _Block_copy(a2);
  id v8 = a1;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v3[8] = v9;
  void *v9 = v3;
  v9[1] = sub_1001C1898;
  return sub_1001C0EB4(v7, (uint64_t)v8);
}

uint64_t sub_1001C1898()
{
  uint64_t v2 = (void *)*v1;
  char v3 = *(void **)(*v1 + 16);
  uint64_t v4 = *v1;
  swift_task_dealloc();

  swift_release();
  if (v0)
  {
    uint64_t v5 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v7 = (void *)v5;
  }
  else
  {
    uint64_t v9 = v2[5];
    uint64_t v8 = v2[6];
    uint64_t v10 = v2[4];
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    uint64_t v5 = 0;
    uint64_t v7 = isa;
  }
  uint64_t v11 = (void (**)(void, void, void))v2[7];
  ((void (**)(void, Class, uint64_t))v11)[2](v11, isa, v5);

  _Block_release(v11);
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v4 + 8);
  return v12();
}

uint64_t sub_1001C1BE0(void *a1, void *a2, const void *a3, uint64_t a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  type metadata accessor for Logger();
  v4[5] = swift_task_alloc();
  v4[6] = _Block_copy(a3);
  id v8 = a1;
  id v9 = a2;
  swift_retain();
  return _swift_task_switch(sub_1001C1CAC, 0, 0);
}

uint64_t sub_1001C1CAC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(char **)(v0 + 40);
  uint64_t v4 = *(void **)(v0 + 16);
  char v3 = *(void **)(v0 + 24);
  swift_retain();
  Logger.init(subsystem:category:)();
  swift_retain();
  sub_1001216D0("PrivateService.applyIntrocutionModel", 36, 2, v2, 1, 0, v1);

  swift_release_n();
  (*(void (**)(void, void))(*(void *)(v0 + 48) + 16))(*(void *)(v0 + 48), 0);
  _Block_release(*(const void **)(v0 + 48));
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1001C1E04@<X0>(uint64_t a1@<X0>, void *a2@<X1>, Class *a3@<X8>)
{
  uint64_t v51 = a3;
  uint64_t v52 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v52);
  char v53 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint8_t *)type metadata accessor for Logger();
  uint64_t v54 = *((void *)v6 - 1);
  uint64_t v7 = __chkstk_darwin(v6);
  id v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v46 - v10;
  uint64_t v49 = a1;
  sub_1001B0858((uint64_t)&v46 - v10);
  uint64_t v12 = a2;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v50 = v9;
  if (v15)
  {
    uint64_t v16 = v12;
    id v17 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v47 = (void *)swift_slowAlloc();
    os_log_type_t v48 = v17;
    *(_DWORD *)id v17 = 138412290;
    uint64_t v56 = v12;
    uint64_t v18 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v19 = v16;
    *os_log_type_t v47 = v16;

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Is Allow Find My Friends modification set for %@?", v48, 0xCu);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v19 = v12;
    uint64_t v13 = v12;
  }

  uint64_t v20 = v54;
  id v21 = *(void (**)(char *, uint8_t *))(v54 + 8);
  v21(v11, v6);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  id v22 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  char v23 = (id *)swift_allocObject();
  v23[3] = 0;
  v23[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint8_t *))(v20 + 56))((uint64_t)v23 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v6);
  if (byte_10034B308 == 1)
  {
    v23[2] = v22;
    id v24 = v22;
    id v25 = v55;
    sub_1001DE3B0(v19);
    if (!v25)
    {
      id v27 = v26;
      LOBYTE(v56) = 0;
      id v28 = sub_1001D7640();
      __chkstk_darwin(v28);
      *(&v46 - 4) = (uint64_t)v23;
      *(&v46 - 3) = (uint64_t)v27;
      NSString v45 = (id *)&v56;
      NSManagedObjectContext.performAndWait<A>(_:)();
      os_log_type_t v48 = v6;

      LODWORD(v54) = v56;
      id v33 = [self registeredIdentifier];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v36 = v35;

      id v37 = sub_1001D7640();
      uint64_t v55 = &v46;
      __chkstk_darwin(v37);
      *(&v46 - 6) = v34;
      *(&v46 - 5) = v36;
      *(&v46 - 4) = (uint64_t)v23;
      *(&v46 - 3) = (uint64_t)v27;
      LOBYTE(v45) = v54;
      sub_1000A0760(0, &qword_1003415C8);
      NSManagedObjectContext.performAndWait<A>(_:)();
      swift_bridgeObjectRelease();

      id v43 = v56;
      self;
      Class isa = (Class)[(id)swift_dynamicCastObjCClassUnconditional() payloadAllowFindMyFriendsModification];

LABEL_22:
      uint64_t v42 = v51;
      swift_setDeallocating();

      sub_1000B6270((uint64_t)v23 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
      uint64_t result = swift_deallocClassInstance();
      *uint64_t v42 = isa;
      return result;
    }
    uint64_t v56 = v25;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    uint64_t v29 = (uint64_t)v53;
    if (swift_dynamicCast())
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      switch(EnumCaseMultiPayload)
      {
        case 23:
          swift_errorRelease();
          id v31 = *(id *)(v29 + 8);

          goto LABEL_19;
        case 25:
          swift_errorRelease();
          id v31 = *(id *)v29;
          goto LABEL_17;
        case 26:
          swift_errorRelease();
          id v31 = *(id *)(v29 + 16);
LABEL_17:
          swift_bridgeObjectRelease();
LABEL_19:

          swift_errorRelease();
          uint64_t v38 = (uint64_t)v50;
          sub_1001B0858((uint64_t)v50);
          char v39 = Logger.logObject.getter();
          os_log_type_t v40 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v39, v40))
          {
            uint64_t v41 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v41 = 0;
            _os_log_impl((void *)&_mh_execute_header, v39, v40, "Missing restrictions blueprint/declaration", v41, 2u);
            swift_slowDealloc();
          }

          v21((char *)v38, v6);
          sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
          Class isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
          goto LABEL_22;
      }
      swift_release();
      sub_1000C9DB4(v29);
    }
    else
    {
      swift_release();
    }
    return swift_errorRelease();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001C26FC(void *a1, const void *a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  type metadata accessor for Logger();
  v3[4] = swift_task_alloc();
  v3[5] = _Block_copy(a2);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_1001C27BC, 0, 0);
}

uint64_t sub_1001C27BC()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  id v3 = *(id *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  uint64_t v4 = sub_10012ED1C("PrivateService.isAllowFindMyFriendsModificationSet", 50, 2, v1, 1, 0, v2, v3);
  swift_release();

  uint64_t v5 = *(void (***)(void, void, void))(v0 + 40);
  ((void (**)(void, objc_class *, void))v5)[2](v5, v4, 0);
  _Block_release(v5);

  swift_task_dealloc();
  id v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1001C2928(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(unsigned char *)(v4 + 148) = a3;
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 48) = a4;
  *(void *)(v4 + 56) = type metadata accessor for DataStore.DataStoreError(0);
  *(void *)(v4 + 64) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v4 + 72) = v5;
  *(void *)(v4 + 80) = *(void *)(v5 - 8);
  *(void *)(v4 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_1001C2A1C, 0, 0);
}

uint64_t sub_1001C2A1C()
{
  uint64_t v1 = *(void **)(v0 + 48);
  sub_1001B0858(*(void *)(v0 + 88));
  id v2 = v1;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void **)(v0 + 48);
    int v6 = *(unsigned __int8 *)(v0 + 148);
    uint64_t v7 = swift_slowAlloc();
    id v31 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109378;
    *(_DWORD *)(v0 + 144) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 8) = 2112;
    *(void *)(v0 + 32) = v5;
    id v8 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v31 = v5;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Update Allow Find My Friends Modification to %{BOOL}d for dsid %@", (uint8_t *)v7, 0x12u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    id v9 = *(void **)(v0 + 48);
  }
  (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 88), *(void *)(v0 + 72));
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v10 = *(void *)(v0 + 72);
  uint64_t v11 = *(void *)(v0 + 80);
  uint64_t v12 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v13 = (void *)swift_allocObject();
  *(void *)(v0 + 96) = v13;
  v13[3] = 0;
  v13[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))((uint64_t)v13 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v10);
  if (byte_10034B308 != 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  os_log_type_t v14 = *(void **)(v0 + 48);
  v13[2] = v12;
  id v15 = v12;
  sub_1001DE3B0(v14);
  *(void *)(v0 + 104) = v16;
  uint64_t v18 = v16;
  id v19 = [self registeredIdentifier];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  id v23 = sub_1001D7640();
  uint64_t v24 = swift_task_alloc();
  *(void *)(v24 + 16) = v20;
  *(void *)(v24 + 24) = v22;
  *(void *)(v24 + 32) = v13;
  *(void *)(v24 + 40) = v18;
  *(unsigned char *)(v24 + 48) = 1;
  sub_1000A0760(0, &qword_1003415C8);
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  self;
  id v25 = (void *)swift_dynamicCastObjCClassUnconditional();
  *(void *)(v0 + 112) = v25;
  LOBYTE(v23) = *(unsigned char *)(v0 + 148);
  sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
  Class isa = NSNumber.init(BOOLeanLiteral:)((Swift::Bool)v23).super.super.isa;
  [v25 setPayloadAllowFindMyFriendsModification:isa];

  [v25 updateServerHash];
  id v27 = sub_1001D7640();
  uint64_t v28 = swift_task_alloc();
  *(void *)(v28 + 16) = v25;
  *(void *)(v28 + 24) = v13;
  *(void *)(v28 + 32) = v18;
  *(unsigned char *)(v28 + 40) = 1;
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_task_dealloc();
  id v29 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (qword_100340E00 != -1) {
    swift_once();
  }
  *(void *)(v0 + 120) = qword_10034B370;
  swift_retain();
  os_log_type_t v30 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v30;
  void *v30 = v0;
  v30[1] = sub_1001C3160;
  return sub_10019F170(0);
}

uint64_t sub_1001C3160()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    id v2 = sub_1001C3380;
  }
  else {
    id v2 = sub_1001C3294;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C3294()
{
  uint64_t v1 = *(void **)(v0 + 104);
  id v2 = *(id **)(v0 + 96);

  swift_setDeallocating();
  sub_1000B6270((uint64_t)v2 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
  swift_deallocClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001C3380()
{
  uint64_t v1 = *(void **)(v0 + 104);

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001C3590(char a1, void *a2, const void *a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a4;
  *(unsigned char *)(v4 + 64) = a1;
  type metadata accessor for Logger();
  *(void *)(v4 + 32) = swift_task_alloc();
  *(void *)(v4 + 40) = _Block_copy(a3);
  id v7 = a2;
  swift_retain();
  return _swift_task_switch(sub_1001C3654, 0, 0);
}

void sub_1001C3654()
{
  id v1 = *(id *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  uint64_t v5 = (char *)&dword_100343640 + dword_100343640;
  id v2 = v1;
  swift_retain();
  id v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *id v3 = v0;
  v3[1] = sub_1001B47F4;
  __asm { BR              X8 }
}

uint64_t sub_1001C3794(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  type metadata accessor for Logger();
  v3[5] = swift_task_alloc();
  return _swift_task_switch(sub_1001C3828, 0, 0);
}

uint64_t sub_1001C3828()
{
  uint64_t v9 = v0;
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = (uint64_t *)v0[2];
  uint64_t v3 = v0[3];
  v8[0] = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  sub_100122C7C("PrivateService.shouldAllowOneMoreMinuteForBundleIdentifier", 58, 2, v2, 1, 0, v1, v4, v3, (uint64_t)v8);
  sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
  v5.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)((v8[0] & 1) == 0).super.super.isa;
  swift_task_dealloc();
  int v6 = (uint64_t (*)(Class))v0[1];
  return v6(v5.super.super.isa);
}

uint64_t sub_1001C39AC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  return sub_1001C3EA0(a1, a2, a3, a4, "Should allow one more minute for app bundle identifier %s", (uint64_t)sub_1001D12BC, CEMPolicyAppDeclaration_ptr, (uint64_t)&selRef_payloadApps);
}

uint64_t sub_1001C3B70(int a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  v3[4] = v5;
  swift_retain();
  id v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  void *v7 = v3;
  v7[1] = sub_1001D1408;
  return sub_1001C3794(v4, v6);
}

uint64_t sub_1001C3C44(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  type metadata accessor for Logger();
  v3[5] = swift_task_alloc();
  return _swift_task_switch(sub_1001C3CD8, 0, 0);
}

uint64_t sub_1001C3CD8()
{
  uint64_t v9 = v0;
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = (uint64_t *)v0[2];
  uint64_t v3 = v0[3];
  v8[0] = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  sub_100122CD4("PrivateService.shouldAllowOneMoreMinuteForWebDomain", 51, 2, v2, 1, 0, v1, v4, v3, (uint64_t)v8);
  sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
  v5.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)((v8[0] & 1) == 0).super.super.isa;
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(Class))v0[1];
  return v6(v5.super.super.isa);
}

uint64_t sub_1001C3E5C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  return sub_1001C3EA0(a1, a2, a3, a4, "Should allow one more minute for web domain %s", (uint64_t)sub_1001D12BC, CEMPolicyWebSiteDeclaration_ptr, (uint64_t)&selRef_payloadHostnames);
}

uint64_t sub_1001C3EA0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, const char *a5, uint64_t a6, void *a7, uint64_t a8)
{
  id v37 = a7;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B0858((uint64_t)v15);
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v36 = a2;
  if (v18)
  {
    uint64_t v33 = v12;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v34 = a8;
    unint64_t v20 = a3;
    uint64_t v21 = (uint8_t *)v19;
    uint64_t v22 = (void *)swift_slowAlloc();
    uint64_t v35 = a4;
    uint64_t v42 = v22;
    uint64_t v32 = v13;
    *(_DWORD *)uint64_t v21 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_1000A2E70(a2, v20, (uint64_t *)&v42);
    uint64_t v12 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v38, v21, 0xCu);
    swift_arrayDestroy();
    a4 = v35;
    swift_slowDealloc();
    a3 = v20;
    a8 = v34;
    swift_slowDealloc();

    uint64_t v23 = v32;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v12);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v23 = v13;
  }
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v24 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  id v25 = (id *)swift_allocObject();
  v25[3] = 0;
  void v25[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))((uint64_t)v25 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v12);
  if (byte_10034B308 == 1)
  {
    v25[2] = v24;
    uint64_t v42 = _swiftEmptyArrayStorage;
    id v26 = v24;
    id v27 = sub_1001D7640();
    __chkstk_darwin(v27);
    uint64_t v28 = v40;
    NSManagedObjectContext.performAndWait<A>(_:)();

    if (v28)
    {
      swift_bridgeObjectRelease();
      swift_setDeallocating();

      sub_1000B6270((uint64_t)v25 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
      return swift_deallocClassInstance();
    }
    else
    {
      swift_setDeallocating();

      sub_1000B6270((uint64_t)v25 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
      swift_deallocClassInstance();
      unint64_t v30 = (unint64_t)v42;
      swift_bridgeObjectRetain();
      char v31 = sub_1001CE1F8(v30, v36, a3, v37, a8);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *a4 = v31 & 1;
    }
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001C44F0(int a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  v3[4] = v5;
  swift_retain();
  id v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  void *v7 = v3;
  v7[1] = sub_1001C45C4;
  return sub_1001C3C44(v4, v6);
}

uint64_t sub_1001C45C4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *v2;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  id v7 = *(void (***)(void, void, void))(v5 + 24);
  if (v3)
  {
    id v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v7)[2](v7, 0, v8);

    _Block_release(v7);
  }
  else
  {
    ((void (**)(void, void *, void))v7)[2](v7, a1, 0);
    _Block_release(v7);
  }
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_1001C4784(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  type metadata accessor for Logger();
  v3[5] = swift_task_alloc();
  return _swift_task_switch(sub_1001C4818, 0, 0);
}

uint64_t sub_1001C4818()
{
  uint64_t v9 = v0;
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = (uint64_t *)v0[2];
  uint64_t v3 = v0[3];
  v8[0] = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  sub_1001241E8("PrivateService.shouldAllowOneMoreMinuteForCategoryIdentifier", 60, 2, v2, 1, 0, v1, v4, v3, (uint64_t)v8);
  sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
  v5.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)((v8[0] & 1) == 0).super.super.isa;
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(Class))v0[1];
  return v6(v5.super.super.isa);
}

uint64_t sub_1001C499C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  return sub_1001C3EA0(a1, a2, a3, a4, "Should allow one more minute for category identifier %s", (uint64_t)sub_1001CE1DC, CEMPolicyCategoryDeclaration_ptr, (uint64_t)&selRef_payloadCategories);
}

uint64_t sub_1001C4B60(int a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  v3[4] = v5;
  swift_retain();
  id v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  void *v7 = v3;
  v7[1] = sub_1001D1408;
  return sub_1001C4784(v4, v6);
}

uint64_t sub_1001C4C34(uint64_t a1, uint64_t a2)
{
  v2[2] = a2;
  uint64_t v3 = type metadata accessor for Logger();
  v2[3] = v3;
  v2[4] = *(void *)(v3 - 8);
  v2[5] = swift_task_alloc();
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_1001C4D04, 0, 0);
}

uint64_t sub_1001C4D04()
{
  sub_1001B0858(v0[6]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Forcing a fetch of Family circle", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];

  id v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[7] = v7;
  v0[8] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  uint64_t v10 = (uint64_t (*)(void))((char *)&dword_100345A50 + dword_100345A50);
  id v8 = (void *)swift_task_alloc();
  v0[9] = v8;
  void *v8 = v0;
  v8[1] = sub_1001C4E5C;
  return v10();
}

uint64_t sub_1001C4E5C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[10] = a1;
  v3[11] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_1001C4FA0, 0, 0);
  }
}

uint64_t sub_1001C4FA0()
{
  if (qword_100340DB0 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10034B338;
  *(void *)(v0 + 96) = qword_10034B338;
  swift_retain();
  return _swift_task_switch(sub_1001C5048, v1, 0);
}

uint64_t sub_1001C5048()
{
  uint64_t v1 = *(void *)(v0 + 88);
  sub_1000F2650(*(uint64_t **)(v0 + 80));
  *(void *)(v0 + 104) = v1;
  swift_release();
  if (v1) {
    os_log_type_t v2 = sub_1001C51F8;
  }
  else {
    os_log_type_t v2 = sub_1001C50DC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C50DC()
{
  sub_1001B0858(*(void *)(v0 + 40));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done processing any Family circle changes", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 24);

  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  id v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1001C51F8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001C53D8(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  type metadata accessor for Logger();
  v2[3] = swift_task_alloc();
  v2[4] = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1001C5488, 0, 0);
}

uint64_t sub_1001C5488()
{
  swift_retain();
  Logger.init(subsystem:category:)();
  uint64_t v5 = (char *)&dword_100343630 + dword_100343630;
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001B2A80;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return ((uint64_t (*)(const char *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))v5)("PrivateService.forceFamilyFetch", 31, 2, v2, 1, 0, v3);
}

uint64_t sub_1001C55A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a3;
  v4[17] = a4;
  v4[15] = a2;
  return _swift_task_switch(sub_1001C55C8, 0, 0);
}

uint64_t sub_1001C55C8()
{
  id v1 = [objc_allocWithZone((Class)USWebHistory) init];
  v0[18] = v1;
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  v0[19] = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  v0[20] = v5;
  v0[2] = v0;
  v0[3] = sub_1001C5714;
  uint64_t v6 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001B0648;
  v0[13] = &unk_100306030;
  v0[14] = v6;
  [v1 deleteHistoryForURL:v4 webApplication:v5 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001C5714()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 168) = v1;
  if (v1) {
    uint64_t v2 = sub_1001C5894;
  }
  else {
    uint64_t v2 = sub_1001C5824;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C5824()
{
  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v2 = *(void **)(v0 + 160);

  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001C5894()
{
  uint64_t v1 = (void *)v0[20];
  uint64_t v3 = (void *)v0[18];
  uint64_t v2 = (void *)v0[19];
  swift_willThrow();

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001C5AA0(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  v4[2] = a4;
  type metadata accessor for Logger();
  v4[3] = swift_task_alloc();
  v4[4] = _Block_copy(a3);
  uint64_t v6 = type metadata accessor for URL();
  v4[5] = v6;
  v4[6] = *(void *)(v6 - 8);
  v4[7] = swift_task_alloc();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  v4[8] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[9] = v7;
  swift_retain();
  return _swift_task_switch(sub_1001C5BD4, 0, 0);
}

uint64_t sub_1001C5BD4()
{
  uint64_t v1 = *(void *)(v0 + 72);
  long long v6 = *(_OWORD *)(v0 + 56);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  *(_OWORD *)(v2 + 16) = v6;
  *(void *)(v2 + 32) = v1;
  Logger.init(subsystem:category:)();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_1003467A8
                                                                                             + dword_1003467A8);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001C5D20;
  uint64_t v4 = *(void *)(v0 + 24);
  return v7((uint64_t)"PrivateService.deleteWebHistoryForURL", 37, 2, v4, 1, 0, (uint64_t)&unk_1003443E0, v2);
}

uint64_t sub_1001C5D20()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001C5EFC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001C5E3C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C5E3C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  (*(void (**)(void, void))(*(void *)(v0 + 48) + 8))(*(void *)(v0 + 56), *(void *)(v0 + 40));
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001C5EFC()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  swift_task_dealloc();
  long long v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1001C5FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a3;
  v4[17] = a4;
  v4[15] = a2;
  return _swift_task_switch(sub_1001C6018, 0, 0);
}

uint64_t sub_1001C6018()
{
  id v1 = [objc_allocWithZone((Class)USWebHistory) init];
  v0[18] = v1;
  type metadata accessor for URL();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[19] = isa;
  NSString v3 = String._bridgeToObjectiveC()();
  v0[20] = v3;
  v0[2] = v0;
  v0[3] = sub_1001C6174;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001B0648;
  v0[13] = &unk_100305FA0;
  v0[14] = v4;
  [v1 deleteHistoryForURLs:isa webApplication:v3 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001C6174()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 168) = v1;
  if (v1) {
    uint64_t v2 = sub_1001D13C4;
  }
  else {
    uint64_t v2 = sub_1001D13FC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C640C(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  v4[2] = a4;
  type metadata accessor for Logger();
  v4[3] = swift_task_alloc();
  v4[4] = _Block_copy(a3);
  type metadata accessor for URL();
  v4[5] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[6] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[7] = v6;
  swift_retain();
  return _swift_task_switch(sub_1001C64F0, 0, 0);
}

void sub_1001C64F0()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  NSString v3 = (char *)&dword_100343620 + dword_100343620;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001C6638;
  __asm { BR              X8 }
}

uint64_t sub_1001C6638()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001C6804;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1001C6760;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C6760()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001C6804()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);

  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  NSString v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001C68CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  return _swift_task_switch(sub_1001C68F0, 0, 0);
}

uint64_t sub_1001C68F0()
{
  id v1 = [objc_allocWithZone((Class)USWebHistory) init];
  v0[19] = v1;
  NSString v2 = String._bridgeToObjectiveC()();
  v0[20] = v2;
  NSString v3 = String._bridgeToObjectiveC()();
  v0[21] = v3;
  v0[2] = v0;
  v0[3] = sub_1001C6A4C;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001B0648;
  v0[13] = &unk_100305F10;
  v0[14] = v4;
  [v1 deleteHistoryForDomain:v2 webApplication:v3 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001C6A4C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 176) = v1;
  if (v1) {
    NSString v2 = sub_1001C6BCC;
  }
  else {
    NSString v2 = sub_1001C6B5C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C6B5C()
{
  uint64_t v1 = *(void **)(v0 + 160);
  NSString v2 = *(void **)(v0 + 168);

  NSString v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001C6BCC()
{
  uint64_t v1 = (void *)v0[21];
  NSString v3 = (void *)v0[19];
  NSString v2 = (void *)v0[20];
  swift_willThrow();

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001C6DD8(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  v4[2] = a4;
  type metadata accessor for Logger();
  v4[3] = swift_task_alloc();
  v4[4] = _Block_copy(a3);
  v4[5] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[6] = v6;
  v4[7] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[8] = v7;
  swift_retain();
  return _swift_task_switch(sub_1001C6EB0, 0, 0);
}

void sub_1001C6EB0()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  NSString v2 = (char *)&dword_100343610 + dword_100343610;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001C6FF8;
  __asm { BR              X8; sub_10014C800 }
}

uint64_t sub_1001C6FF8()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    NSString v2 = sub_1001C71C8;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    NSString v2 = sub_1001C7120;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C7120()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  NSString v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001C71C8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  NSString v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);

  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001C7294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a3;
  v4[17] = a4;
  v4[15] = a2;
  return _swift_task_switch(sub_1001C72B8, 0, 0);
}

uint64_t sub_1001C72B8()
{
  id v1 = [objc_allocWithZone((Class)USWebHistory) init];
  v0[18] = v1;
  Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  v0[19] = isa;
  NSString v3 = String._bridgeToObjectiveC()();
  v0[20] = v3;
  v0[2] = v0;
  v0[3] = sub_1001C6174;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001B0648;
  v0[13] = &unk_100305E80;
  v0[14] = v4;
  [v1 deleteHistoryDuringInterval:isa webApplication:v3 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001C758C(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  v4[2] = a4;
  type metadata accessor for Logger();
  v4[3] = swift_task_alloc();
  v4[4] = _Block_copy(a3);
  uint64_t v6 = type metadata accessor for DateInterval();
  v4[5] = v6;
  v4[6] = *(void *)(v6 - 8);
  v4[7] = swift_task_alloc();
  static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();
  v4[8] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[9] = v7;
  swift_retain();
  return _swift_task_switch(sub_1001C76C0, 0, 0);
}

uint64_t sub_1001C76C0()
{
  uint64_t v1 = *(void *)(v0 + 72);
  long long v6 = *(_OWORD *)(v0 + 56);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  *(_OWORD *)(v2 + 16) = v6;
  *(void *)(v2 + 32) = v1;
  Logger.init(subsystem:category:)();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_1003467A8
                                                                                             + dword_1003467A8);
  NSString v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v3;
  *NSString v3 = v0;
  v3[1] = sub_1001C780C;
  uint64_t v4 = *(void *)(v0 + 24);
  return v7((uint64_t)"PrivateService.deleteWebHistoryDuringInterval", 45, 2, v4, 1, 0, (uint64_t)&unk_100344370, v2);
}

uint64_t sub_1001C780C()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001D13D4;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001D13D8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C7928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 120) = a2;
  *(void *)(v3 + 128) = a3;
  return _swift_task_switch(sub_1001C7948, 0, 0);
}

uint64_t sub_1001C7948()
{
  id v1 = [objc_allocWithZone((Class)USWebHistory) init];
  v0[17] = v1;
  NSString v2 = String._bridgeToObjectiveC()();
  v0[18] = v2;
  v0[2] = v0;
  v0[3] = sub_1001C7A80;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001B0648;
  v0[13] = &unk_100305DF0;
  v0[14] = v3;
  [v1 deleteAllHistoryForApplication:v2 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001C7A80()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    NSString v2 = sub_1001C7BF8;
  }
  else {
    NSString v2 = sub_1001C7B90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C7B90()
{
  uint64_t v1 = *(void **)(v0 + 144);

  NSString v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001C7BF8()
{
  uint64_t v1 = (void *)v0[18];
  NSString v2 = (void *)v0[17];
  swift_willThrow();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001C7DF0(uint64_t a1, const void *a2, uint64_t a3)
{
  v3[2] = a3;
  type metadata accessor for Logger();
  v3[3] = swift_task_alloc();
  v3[4] = _Block_copy(a2);
  v3[5] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[6] = v5;
  swift_retain();
  return _swift_task_switch(sub_1001C7EB8, 0, 0);
}

uint64_t sub_1001C7EB8()
{
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  long long v6 = (char *)&dword_100343600 + dword_100343600;
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001C7FDC;
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  return ((uint64_t (*)(const char *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))v6)("PrivateService.deleteAllWebApplicationHistory", 45, 2, v4, 1, 0, v2, v3);
}

uint64_t sub_1001C7FDC()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001C80F8;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1001D13F8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C80F8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);

  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001C81B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[18] = a5;
  v6[19] = a6;
  v6[16] = a3;
  v6[17] = a4;
  v6[15] = a2;
  return _swift_task_switch(sub_1001C81DC, 0, 0);
}

uint64_t sub_1001C81DC()
{
  uint64_t v1 = v0[19];
  id v2 = [objc_allocWithZone((Class)USWebHistory) init];
  v0[20] = v2;
  URL._bridgeToObjectiveC()(v3);
  uint64_t v5 = v4;
  v0[21] = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  v0[22] = v6;
  if (v1) {
    NSString v7 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v7 = 0;
  }
  v0[23] = v7;
  v0[2] = v0;
  v0[3] = sub_1001C8348;
  uint64_t v8 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001B0648;
  v0[13] = &unk_100305D60;
  v0[14] = v8;
  [v2 deleteHistoryForURL:v5 webApplication:v6 profileIdentifier:v7 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001C8348()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 192) = v1;
  if (v1) {
    id v2 = sub_1001C84D4;
  }
  else {
    id v2 = sub_1001C8458;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C8458()
{
  uint64_t v1 = *(void **)(v0 + 176);
  id v2 = *(void **)(v0 + 184);
  uint64_t v3 = *(void **)(v0 + 168);

  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001C84D4()
{
  uint64_t v1 = (void *)v0[23];
  uint64_t v3 = (void *)v0[21];
  id v2 = (void *)v0[22];
  uint64_t v4 = (void *)v0[20];
  swift_willThrow();

  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1001C86FC(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  v5[2] = a5;
  type metadata accessor for Logger();
  v5[3] = swift_task_alloc();
  v5[4] = _Block_copy(a4);
  uint64_t v8 = type metadata accessor for URL();
  v5[5] = v8;
  v5[6] = *(void *)(v8 - 8);
  v5[7] = swift_task_alloc();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  v5[8] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[9] = v9;
  if (a3)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  v5[10] = v10;
  v5[11] = v11;
  swift_retain();
  return _swift_task_switch(sub_1001C8858, 0, 0);
}

uint64_t sub_1001C8858()
{
  uint64_t v1 = *(void *)(v0 + 88);
  long long v6 = *(_OWORD *)(v0 + 56);
  long long v7 = *(_OWORD *)(v0 + 72);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 96) = v2;
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v7;
  *(void *)(v2 + 48) = v1;
  Logger.init(subsystem:category:)();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_1003467A8
                                                                                             + dword_1003467A8);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001C89AC;
  uint64_t v4 = *(void *)(v0 + 24);
  return v8((uint64_t)"PrivateService.deleteWebHistoryForURLWithProfileIdentifier", 58, 2, v4, 1, 0, (uint64_t)&unk_100344318, v2);
}

uint64_t sub_1001C89AC()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001C8B94;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001C8AC8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C8AC8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  (*(void (**)(void, void))(*(void *)(v0 + 48) + 8))(*(void *)(v0 + 56), *(void *)(v0 + 40));
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001C8B94()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  swift_task_dealloc();
  long long v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1001C8C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[18] = a5;
  v6[19] = a6;
  v6[16] = a3;
  v6[17] = a4;
  v6[15] = a2;
  return _swift_task_switch(sub_1001C8CC0, 0, 0);
}

uint64_t sub_1001C8CC0()
{
  Class isa = v0[19].super.isa;
  uint64_t v2 = (objc_class *)[objc_allocWithZone((Class)USWebHistory) init];
  v0[20].super.Class isa = v2;
  type metadata accessor for URL();
  v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[21].super.Class isa = v3.super.isa;
  uint64_t v4 = (objc_class *)String._bridgeToObjectiveC()();
  v0[22].super.Class isa = v4;
  if (isa) {
    uint64_t v5 = (objc_class *)String._bridgeToObjectiveC()();
  }
  else {
    uint64_t v5 = 0;
  }
  v0[23].super.Class isa = v5;
  v0[2].super.Class isa = (Class)v0;
  v0[3].super.Class isa = (Class)sub_1001C8E3C;
  uint64_t v6 = swift_continuation_init();
  v0[10].super.Class isa = (Class)_NSConcreteStackBlock;
  v0[11].super.Class isa = (Class)0x40000000;
  v0[12].super.Class isa = (Class)sub_1001B0648;
  v0[13].super.Class isa = (Class)&unk_100305CD0;
  v0[14].super.Class isa = (Class)v6;
  [(objc_class *)v2 deleteHistoryForURLs:v3.super.isa webApplication:v4 profileIdentifier:v5 completionHandler:&v0[10]];
  return _swift_continuation_await(&v0[2]);
}

uint64_t sub_1001C8E3C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 192) = v1;
  if (v1) {
    uint64_t v2 = sub_1001D13C8;
  }
  else {
    uint64_t v2 = sub_1001D140C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C90E8(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  v5[2] = a5;
  type metadata accessor for Logger();
  v5[3] = swift_task_alloc();
  v5[4] = _Block_copy(a4);
  type metadata accessor for URL();
  v5[5] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v5[6] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[7] = v8;
  if (a3)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  v5[8] = v9;
  v5[9] = v10;
  swift_retain();
  return _swift_task_switch(sub_1001C9384, 0, 0);
}

uint64_t sub_1001C91F4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001C92A4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);

  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  NSArray v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

void sub_1001C9384()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  uint64_t v2 = (char *)&dword_1003435F0 + dword_1003435F0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001C94EC;
  __asm { BR              X8 }
}

uint64_t sub_1001C94EC()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v2 = sub_1001C92A4;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v2 = sub_1001C91F4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C9644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[19] = a6;
  v7[20] = a7;
  v7[17] = a4;
  v7[18] = a5;
  v7[15] = a2;
  v7[16] = a3;
  return _swift_task_switch(sub_1001C966C, 0, 0);
}

uint64_t sub_1001C966C()
{
  uint64_t v1 = v0[20];
  id v2 = [objc_allocWithZone((Class)USWebHistory) init];
  v0[21] = v2;
  NSString v3 = String._bridgeToObjectiveC()();
  v0[22] = v3;
  NSString v4 = String._bridgeToObjectiveC()();
  v0[23] = v4;
  if (v1) {
    NSString v5 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v5 = 0;
  }
  v0[24] = v5;
  v0[2] = v0;
  v0[3] = sub_1001C97E0;
  uint64_t v6 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001B0648;
  v0[13] = &unk_100305C40;
  v0[14] = v6;
  [v2 deleteHistoryForDomain:v3 webApplication:v4 profileIdentifier:v5 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001C97E0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 200) = v1;
  if (v1) {
    id v2 = sub_1001C996C;
  }
  else {
    id v2 = sub_1001C98F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C98F0()
{
  uint64_t v1 = *(void **)(v0 + 184);
  id v2 = *(void **)(v0 + 192);
  NSString v3 = *(void **)(v0 + 176);

  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001C996C()
{
  uint64_t v1 = (void *)v0[24];
  NSString v3 = (void *)v0[22];
  id v2 = (void *)v0[23];
  uint64_t v4 = (void *)v0[21];
  swift_willThrow();

  NSString v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1001C9B94(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  v5[2] = a5;
  type metadata accessor for Logger();
  v5[3] = swift_task_alloc();
  v5[4] = _Block_copy(a4);
  v5[5] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[6] = v8;
  v5[7] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[8] = v9;
  if (a3)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  v5[9] = v10;
  v5[10] = v11;
  swift_retain();
  return _swift_task_switch(sub_1001C9E2C, 0, 0);
}

uint64_t sub_1001C9C94()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001C9D48()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  id v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);

  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  NSString v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

void sub_1001C9E2C()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  id v2 = (char *)&dword_1003435E0 + dword_1003435E0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001C9F94;
  __asm { BR              X8 }
}

uint64_t sub_1001C9F94()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    id v2 = sub_1001C9D48;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    id v2 = sub_1001C9C94;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CA0EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[18] = a5;
  v6[19] = a6;
  v6[16] = a3;
  v6[17] = a4;
  v6[15] = a2;
  return _swift_task_switch(sub_1001CA114, 0, 0);
}

uint64_t sub_1001CA114()
{
  Class isa = v0[19].super.isa;
  id v2 = (objc_class *)[objc_allocWithZone((Class)USWebHistory) init];
  v0[20].super.Class isa = v2;
  v3.super.Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  v0[21].super.Class isa = v3.super.isa;
  uint64_t v4 = (objc_class *)String._bridgeToObjectiveC()();
  v0[22].super.Class isa = v4;
  if (isa) {
    uint64_t v5 = (objc_class *)String._bridgeToObjectiveC()();
  }
  else {
    uint64_t v5 = 0;
  }
  v0[23].super.Class isa = v5;
  v0[2].super.Class isa = (Class)v0;
  v0[3].super.Class isa = (Class)sub_1001C8E3C;
  uint64_t v6 = swift_continuation_init();
  v0[10].super.Class isa = (Class)_NSConcreteStackBlock;
  v0[11].super.Class isa = (Class)0x40000000;
  v0[12].super.Class isa = (Class)sub_1001B0648;
  v0[13].super.Class isa = (Class)&unk_100305BB0;
  v0[14].super.Class isa = (Class)v6;
  [(objc_class *)v2 deleteHistoryDuringInterval:v3.super.isa webApplication:v4 profileIdentifier:v5 completionHandler:&v0[10]];
  return _swift_continuation_await(&v0[2]);
}

uint64_t sub_1001CA41C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  v5[2] = a5;
  type metadata accessor for Logger();
  v5[3] = swift_task_alloc();
  v5[4] = _Block_copy(a4);
  uint64_t v8 = type metadata accessor for DateInterval();
  v5[5] = v8;
  v5[6] = *(void *)(v8 - 8);
  v5[7] = swift_task_alloc();
  static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();
  v5[8] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[9] = v9;
  if (a3)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  v5[10] = v10;
  v5[11] = v11;
  swift_retain();
  return _swift_task_switch(sub_1001CA578, 0, 0);
}

uint64_t sub_1001CA578()
{
  uint64_t v1 = *(void *)(v0 + 88);
  long long v6 = *(_OWORD *)(v0 + 56);
  long long v7 = *(_OWORD *)(v0 + 72);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 96) = v2;
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v7;
  *(void *)(v2 + 48) = v1;
  Logger.init(subsystem:category:)();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_1003467A8
                                                                                             + dword_1003467A8);
  NSDateInterval v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v3;
  *NSDateInterval v3 = v0;
  v3[1] = sub_1001CA6CC;
  uint64_t v4 = *(void *)(v0 + 24);
  return v8((uint64_t)"PrivateService.deleteWebHistoryDuringIntervalWithProfileIdentifier", 66, 2, v4, 1, 0, (uint64_t)&unk_100344298, v2);
}

uint64_t sub_1001CA6CC()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001D12D4;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001D1410;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CA7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  return _swift_task_switch(sub_1001CA80C, 0, 0);
}

uint64_t sub_1001CA80C()
{
  uint64_t v1 = v0[18];
  id v2 = [objc_allocWithZone((Class)USWebHistory) init];
  v0[19] = v2;
  NSString v3 = String._bridgeToObjectiveC()();
  v0[20] = v3;
  if (v1) {
    NSString v4 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v4 = 0;
  }
  v0[21] = v4;
  v0[2] = v0;
  v0[3] = sub_1001C6A4C;
  uint64_t v5 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001B0648;
  v0[13] = &unk_100305B20;
  v0[14] = v5;
  [v2 deleteAllHistoryForApplication:v3 profileIdentifier:v4 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001CAAEC(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  v4[2] = a4;
  type metadata accessor for Logger();
  v4[3] = swift_task_alloc();
  v4[4] = _Block_copy(a3);
  v4[5] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[6] = v7;
  if (a2)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  v4[7] = v8;
  v4[8] = v9;
  swift_retain();
  return _swift_task_switch(sub_1001CABD4, 0, 0);
}

void sub_1001CABD4()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  id v2 = (char *)&dword_1003435D0 + dword_1003435D0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001CAD1C;
  __asm { BR              X8; sub_10015131C }
}

uint64_t sub_1001CAD1C()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_1001CAEEC;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v2 = sub_1001CAE44;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CAE44()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001CAEEC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  id v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);

  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001CAFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[22] = a5;
  v6[23] = a6;
  v6[20] = a3;
  v6[21] = a4;
  v6[19] = a2;
  uint64_t v7 = type metadata accessor for Logger();
  v6[24] = v7;
  v6[25] = *(void *)(v7 - 8);
  v6[26] = swift_task_alloc();
  return _swift_task_switch(sub_1001CB0AC, 0, 0);
}

uint64_t sub_1001CB0AC()
{
  uint64_t v52 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 152;
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void **)(v0 + 184);
  uint64_t v5 = *(void *)(v2 + 8);
  sub_1001B0858(v3);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v5, v6);
  id v9 = v4;
  swift_bridgeObjectRetain_n();
  id v10 = v9;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v49 = v12;
    NSString v45 = v11;
    unint64_t v13 = *(void *)(v1 + 176);
    uint64_t v47 = *(void *)(v1 + 184);
    uint64_t v46 = *(void *)(v1 + 168);
    uint64_t v14 = swift_slowAlloc();
    os_log_type_t v48 = (void *)swift_slowAlloc();
    v51[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315650;
    sub_1000D1874((unint64_t *)&qword_100341D78, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v1 + 120) = sub_1000A2E70(v15, v16, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v6);
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v1 + 128) = sub_1000A2E70(v46, v13, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 22) = 2112;
    if (v47)
    {
      os_log_type_t v17 = v10;
      *(void *)(v2 - 8) = v10;
      id v18 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v19 = v45;
    }
    else
    {
      *(void *)(v2 - 16) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v19 = v45;
      os_log_type_t v17 = v10;
    }
    uint64_t v23 = *(void *)(v1 + 200);
    uint64_t v22 = *(void *)(v1 + 208);
    uint64_t v24 = *(void *)(v1 + 192);
    *os_log_type_t v48 = *(void *)(v1 + 184);

    _os_log_impl((void *)&_mh_execute_header, v19, v49, "Deleting web history for url: %s, webApplication: %s, bundleURLWrapper: %@", (uint8_t *)v14, 0x20u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    swift_task_dealloc();
  }
  else
  {
    uint64_t v20 = *(void *)(v1 + 200);
    uint64_t v50 = *(void *)(v1 + 208);
    uint64_t v21 = *(void *)(v1 + 192);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v6);
    swift_bridgeObjectRelease_n();

    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v50, v21);
  }
  unint64_t v25 = sub_1001CDBC8();
  int v26 = v25;
  int v28 = v27;
  int v30 = v29;
  int v32 = v31;
  unint64_t v33 = HIDWORD(v31);
  unint64_t v34 = HIDWORD(v29);
  unint64_t v35 = HIDWORD(v27);
  unint64_t v36 = HIDWORD(v25);
  id v37 = objc_allocWithZone((Class)USWebHistory);
  *(_DWORD *)(v1 + 248) = v26;
  *(_DWORD *)(v1 + 252) = v36;
  *(_DWORD *)(v1 + 256) = v28;
  *(_DWORD *)(v1 + 260) = v35;
  *(_DWORD *)(v1 + 264) = v30;
  *(_DWORD *)(v1 + 268) = v34;
  *(_DWORD *)(v1 + 272) = v32;
  *(_DWORD *)(v1 + 276) = v33;
  id v38 = [v37 initWithAuditToken:v1 + 248];
  *(void *)(v1 + 216) = v38;
  URL._bridgeToObjectiveC()(v39);
  uint64_t v41 = v40;
  *(void *)(v1 + 224) = v40;
  NSString v42 = String._bridgeToObjectiveC()();
  *(void *)(v1 + 232) = v42;
  *(void *)(v1 + 16) = v1;
  *(void *)(v1 + 24) = sub_1001CB68C;
  uint64_t v43 = swift_continuation_init();
  *(void *)(v1 + 80) = _NSConcreteStackBlock;
  *(void *)(v1 + 88) = 0x40000000;
  *(void *)(v1 + 96) = sub_1001B0648;
  *(void *)(v1 + 104) = &unk_100305A90;
  *(void *)(v1 + 112) = v43;
  objc_msgSend(v38, "deleteHistoryForURL:webApplication:completionHandler:", v41, v42);
  return _swift_continuation_await(v1 + 16);
}

uint64_t sub_1001CB68C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 240) = v1;
  if (v1) {
    uint64_t v2 = sub_1001CB874;
  }
  else {
    uint64_t v2 = sub_1001CB7C8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CB7C8()
{
  uint64_t v2 = *(void **)(v0 + 224);
  uint64_t v1 = *(void **)(v0 + 232);

  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001CB874()
{
  uint64_t v1 = (void *)v0[29];
  uint64_t v3 = (void *)v0[27];
  uint64_t v2 = (void *)v0[28];
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001CBAC8(uint64_t a1, uint64_t a2, void *a3, const void *a4, uint64_t a5)
{
  v5[2] = a3;
  v5[3] = a5;
  type metadata accessor for Logger();
  v5[4] = swift_task_alloc();
  v5[5] = _Block_copy(a4);
  uint64_t v8 = type metadata accessor for URL();
  v5[6] = v8;
  v5[7] = *(void *)(v8 - 8);
  v5[8] = swift_task_alloc();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  v5[9] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[10] = v9;
  id v10 = a3;
  swift_retain();
  return _swift_task_switch(sub_1001CBC0C, 0, 0);
}

uint64_t sub_1001CBC0C()
{
  long long v8 = *(_OWORD *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  *(_OWORD *)(v4 + 32) = v8;
  *(void *)(v4 + 48) = v3;
  Logger.init(subsystem:category:)();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_1003467A8
                                                                                             + dword_1003467A8);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v5;
  void *v5 = v0;
  v5[1] = sub_1001CBD68;
  uint64_t v6 = *(void *)(v0 + 32);
  return v9((uint64_t)"PrivateService.deleteWebHistoryForURLWithClientBundleURLWrapper", 63, 2, v6, 1, 0, (uint64_t)&unk_100344240, v4);
}

uint64_t sub_1001CBD68()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001CBF48;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001CBE84;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CBE84()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void **)(v0 + 16);
  (*(void (**)(void, void))(*(void *)(v0 + 56) + 8))(*(void *)(v0 + 64), *(void *)(v0 + 48));

  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 40));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001CBF48()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v5 = *(void **)(v0 + 16);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v6);

  _Block_release(*(const void **)(v0 + 40));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1001CC044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[22] = a5;
  v6[23] = a6;
  v6[20] = a3;
  v6[21] = a4;
  v6[19] = a2;
  uint64_t v7 = type metadata accessor for Logger();
  v6[24] = v7;
  v6[25] = *(void *)(v7 - 8);
  v6[26] = swift_task_alloc();
  return _swift_task_switch(sub_1001CC138, 0, 0);
}

uint64_t sub_1001CC138()
{
  uint64_t v50 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 152;
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void **)(v0 + 184);
  uint64_t v5 = *(void *)(v2 + 8);
  sub_1001B0858(v3);
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v5, v6);
  id v9 = v4;
  swift_bridgeObjectRetain_n();
  id v10 = v9;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v47 = v12;
    uint64_t v43 = v11;
    unint64_t v13 = *(void *)(v1 + 176);
    uint64_t v45 = *(void *)(v1 + 184);
    uint64_t v44 = *(void *)(v1 + 168);
    uint64_t v14 = swift_slowAlloc();
    uint64_t v46 = (void *)swift_slowAlloc();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315650;
    sub_1000D1874(&qword_100342280, (void (*)(uint64_t))&type metadata accessor for DateInterval);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v1 + 120) = sub_1000A2E70(v15, v16, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v6);
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v1 + 128) = sub_1000A2E70(v44, v13, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 22) = 2112;
    if (v45)
    {
      os_log_type_t v17 = v10;
      *(void *)(v2 - 8) = v10;
      id v18 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v19 = v43;
    }
    else
    {
      *(void *)(v2 - 16) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v19 = v43;
      os_log_type_t v17 = v10;
    }
    uint64_t v23 = *(void *)(v1 + 200);
    uint64_t v22 = *(void *)(v1 + 208);
    uint64_t v24 = *(void *)(v1 + 192);
    *uint64_t v46 = *(void *)(v1 + 184);

    _os_log_impl((void *)&_mh_execute_header, v19, v47, "Deleting web history during interval: %s, webApplication: %s, bundleURLWrapper: %@", (uint8_t *)v14, 0x20u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    swift_task_dealloc();
  }
  else
  {
    uint64_t v20 = *(void *)(v1 + 200);
    uint64_t v48 = *(void *)(v1 + 208);
    uint64_t v21 = *(void *)(v1 + 192);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v6);
    swift_bridgeObjectRelease_n();

    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v48, v21);
  }
  unint64_t v25 = sub_1001CDBC8();
  int v26 = v25;
  int v28 = v27;
  int v30 = v29;
  int v32 = v31;
  unint64_t v33 = HIDWORD(v31);
  unint64_t v34 = HIDWORD(v29);
  unint64_t v35 = HIDWORD(v27);
  unint64_t v36 = HIDWORD(v25);
  id v37 = objc_allocWithZone((Class)USWebHistory);
  *(_DWORD *)(v1 + 248) = v26;
  *(_DWORD *)(v1 + 252) = v36;
  *(_DWORD *)(v1 + 256) = v28;
  *(_DWORD *)(v1 + 260) = v35;
  *(_DWORD *)(v1 + 264) = v30;
  *(_DWORD *)(v1 + 268) = v34;
  *(_DWORD *)(v1 + 272) = v32;
  *(_DWORD *)(v1 + 276) = v33;
  id v38 = [v37 initWithAuditToken:v1 + 248];
  *(void *)(v1 + 216) = v38;
  Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  *(void *)(v1 + 224) = isa;
  NSString v40 = String._bridgeToObjectiveC()();
  *(void *)(v1 + 232) = v40;
  *(void *)(v1 + 16) = v1;
  *(void *)(v1 + 24) = sub_1001CC718;
  uint64_t v41 = swift_continuation_init();
  *(void *)(v1 + 80) = _NSConcreteStackBlock;
  *(void *)(v1 + 88) = 0x40000000;
  *(void *)(v1 + 96) = sub_1001B0648;
  *(void *)(v1 + 104) = &unk_100305A00;
  *(void *)(v1 + 112) = v41;
  objc_msgSend(v38, "deleteHistoryDuringInterval:webApplication:completionHandler:", isa, v40);
  return _swift_continuation_await(v1 + 16);
}

uint64_t sub_1001CC718()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 240) = v1;
  if (v1) {
    uint64_t v2 = sub_1001D12D8;
  }
  else {
    uint64_t v2 = sub_1001D1350;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CC9F0(uint64_t a1, uint64_t a2, void *a3, const void *a4, uint64_t a5)
{
  v5[2] = a3;
  v5[3] = a5;
  type metadata accessor for Logger();
  v5[4] = swift_task_alloc();
  v5[5] = _Block_copy(a4);
  uint64_t v8 = type metadata accessor for DateInterval();
  v5[6] = v8;
  v5[7] = *(void *)(v8 - 8);
  v5[8] = swift_task_alloc();
  static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();
  v5[9] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[10] = v9;
  id v10 = a3;
  swift_retain();
  return _swift_task_switch(sub_1001CCB34, 0, 0);
}

uint64_t sub_1001CCB34()
{
  long long v8 = *(_OWORD *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  *(_OWORD *)(v4 + 32) = v8;
  *(void *)(v4 + 48) = v3;
  Logger.init(subsystem:category:)();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_1003467A8
                                                                                             + dword_1003467A8);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v5;
  void *v5 = v0;
  v5[1] = sub_1001CCC90;
  uint64_t v6 = *(void *)(v0 + 32);
  return v9((uint64_t)"PrivateService.deleteWebHistoryDuringIntervalWithClientBundleURLWrapper", 71, 2, v6, 1, 0, (uint64_t)&unk_100344210, v4);
}

uint64_t sub_1001CCC90()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001D13CC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001D1414;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CCDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[20] = a4;
  v5[21] = a5;
  v5[18] = a2;
  v5[19] = a3;
  uint64_t v6 = type metadata accessor for Logger();
  v5[22] = v6;
  v5[23] = *(void *)(v6 - 8);
  v5[24] = swift_task_alloc();
  return _swift_task_switch(sub_1001CCE9C, 0, 0);
}

uint64_t sub_1001CCE9C()
{
  uint64_t v36 = v0;
  uint64_t v1 = *(void **)(v0 + 168);
  sub_1001B0858(*(void *)(v0 + 192));
  id v2 = v1;
  swift_bridgeObjectRetain_n();
  id v3 = v2;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = *(void *)(v0 + 160);
    uint64_t v33 = *(void *)(v0 + 168);
    uint64_t v7 = *(void *)(v0 + 152);
    uint64_t v8 = swift_slowAlloc();
    unint64_t v34 = (void *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 120) = sub_1000A2E70(v7, v6, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2112;
    if (v33)
    {
      *(void *)(v0 + 136) = v3;
      id v9 = v3;
    }
    else
    {
      *(void *)(v0 + 128) = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v13 = *(void *)(v0 + 184);
    uint64_t v14 = *(void *)(v0 + 192);
    uint64_t v15 = *(void *)(v0 + 176);
    void *v34 = *(void *)(v0 + 168);

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Deleting web all history with bundle identifier: %s, bundleURLWrapper: %@", (uint8_t *)v8, 0x16u);
    sub_10009EE78(&qword_100342AB0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 184);
    uint64_t v10 = *(void *)(v0 + 192);
    uint64_t v12 = *(void *)(v0 + 176);
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  unint64_t v16 = sub_1001CDBC8();
  int v17 = v16;
  int v19 = v18;
  int v21 = v20;
  int v23 = v22;
  unint64_t v24 = HIDWORD(v22);
  unint64_t v25 = HIDWORD(v20);
  unint64_t v26 = HIDWORD(v18);
  unint64_t v27 = HIDWORD(v16);
  id v28 = objc_allocWithZone((Class)USWebHistory);
  *(_DWORD *)(v0 + 224) = v17;
  *(_DWORD *)(v0 + 228) = v27;
  *(_DWORD *)(v0 + 232) = v19;
  *(_DWORD *)(v0 + 236) = v26;
  *(_DWORD *)(v0 + 240) = v21;
  *(_DWORD *)(v0 + 244) = v25;
  *(_DWORD *)(v0 + 248) = v23;
  *(_DWORD *)(v0 + 252) = v24;
  id v29 = [v28 initWithAuditToken:v0 + 224];
  *(void *)(v0 + 200) = v29;
  NSString v30 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 208) = v30;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_1001CD2E8;
  uint64_t v31 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_1001B0648;
  *(void *)(v0 + 104) = &unk_100305970;
  *(void *)(v0 + 112) = v31;
  objc_msgSend(v29, "deleteAllHistoryForApplication:completionHandler:", v30);
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1001CD2E8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 216) = v1;
  if (v1) {
    id v2 = sub_1001CD4CC;
  }
  else {
    id v2 = sub_1001CD424;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CD424()
{
  uint64_t v1 = *(void **)(v0 + 208);

  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001CD4CC()
{
  uint64_t v1 = (void *)v0[26];
  id v2 = (void *)v0[25];
  swift_willThrow();

  swift_task_dealloc();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001CD700(uint64_t a1, void *a2, const void *a3, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a4;
  type metadata accessor for Logger();
  v4[4] = swift_task_alloc();
  v4[5] = _Block_copy(a3);
  v4[6] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[7] = v7;
  id v8 = a2;
  swift_retain();
  return _swift_task_switch(sub_1001CD7D0, 0, 0);
}

void sub_1001CD7D0()
{
  id v1 = *(id *)(v0 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  uint64_t v4 = (char *)&dword_1003435C0 + dword_1003435C0;
  id v2 = v1;
  swift_retain();
  swift_bridgeObjectRetain();
  id v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  *id v3 = v0;
  v3[1] = sub_1001CD928;
  __asm { BR              X8 }
}

uint64_t sub_1001CD928()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {

    id v3 = sub_1001CDB00;
  }
  else
  {
    uint64_t v4 = *(void **)(v2 + 16);
    swift_release();
    swift_bridgeObjectRelease();

    id v3 = sub_1001CDA60;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001CDA60()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void **)(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 40));
  swift_task_dealloc();
  id v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001CDB00()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void **)(v0 + 16);
  swift_release_n();
  swift_bridgeObjectRelease_n();

  id v3 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);

  _Block_release(*(const void **)(v0 + 40));
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

unint64_t sub_1001CDBC8()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [self currentConnection];
  if (v4)
  {
    uint64_t v5 = v4;
    [v4 auditToken];
    unint64_t v6 = v11[0];
  }
  else
  {
    sub_1001B0858((uint64_t)v3);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed fetching current xpc connection", v9, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    type metadata accessor for STError(0);
    v11[5] = 1;
    unint64_t v6 = sub_100109D9C((uint64_t)_swiftEmptyArrayStorage);
    sub_1001D0560((unint64_t *)&qword_100341160, type metadata accessor for STError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  return v6;
}

uint64_t sub_1001CDDE8()
{
  sub_1000B6270(v0 + OBJC_IVAR____TtC15ScreenTimeAgent14PrivateService____lazy_storage___logger);
  return swift_deallocClassInstance();
}

uint64_t sub_1001CDE4C()
{
  return type metadata accessor for PrivateService();
}

uint64_t type metadata accessor for PrivateService()
{
  uint64_t result = qword_100343F70;
  if (!qword_100343F70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1001CDEA4()
{
  unint64_t result = qword_1003441C8;
  if (!qword_1003441C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003441C8);
  }
  return result;
}

uint64_t sub_1001CDEF8(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v1 = (objc_class *)[self mainBundle];
      unint64_t v2 = 0xD000000000000051;
      unint64_t v10 = 0x8000000100293EE0;
      unint64_t v3 = 0x8000000100293E80;
      v4.super.Class isa = v1;
      uint64_t v5 = 0;
      unint64_t v6 = 0xE000000000000000;
      unint64_t v7 = 0xD000000000000016;
      break;
    case 2:
      uint64_t v1 = (objc_class *)[self mainBundle];
      unint64_t v10 = 0xED0000726F727245;
      unint64_t v2 = 0x206E776F6E6B6E55;
      unint64_t v3 = 0xED00006574617473;
      v4.super.Class isa = v1;
      uint64_t v5 = 0;
      unint64_t v6 = 0xE000000000000000;
      unint64_t v7 = 0x6C616E7265746E49;
      break;
    case 3:
      uint64_t v1 = (objc_class *)[self mainBundle];
      unint64_t v2 = 0xD00000000000003DLL;
      unint64_t v10 = 0xEF746E656D756772;
      unint64_t v3 = 0x8000000100293E40;
      v4.super.Class isa = v1;
      uint64_t v5 = 0;
      unint64_t v6 = 0xE000000000000000;
      unint64_t v7 = 0x4164696C61766E49;
      break;
    case 4:
      uint64_t v1 = (objc_class *)[self mainBundle];
      unint64_t v2 = 0xD000000000000042;
      unint64_t v10 = 0xEC0000004E495074;
      unint64_t v3 = 0x8000000100293DF0;
      v4.super.Class isa = v1;
      uint64_t v5 = 0;
      unint64_t v6 = 0xE000000000000000;
      unint64_t v7 = 0x636572726F636E49;
      break;
    default:
      uint64_t v1 = (objc_class *)[self mainBundle];
      unint64_t v2 = 0xD00000000000002CLL;
      unint64_t v10 = 0xEE00746E756F6363;
      unint64_t v3 = 0x8000000100293F00;
      v4.super.Class isa = v1;
      uint64_t v5 = 0;
      unint64_t v6 = 0xE000000000000000;
      unint64_t v7 = 0x41656C7070416F6ELL;
      break;
  }
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v2, (Swift::String_optional)0, v4, *(Swift::String *)&v5, *(Swift::String *)&v7)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1001CE1D4()
{
  return sub_1001CDEF8(*v0);
}

void sub_1001CE1DC()
{
  sub_1001F39BC(*(void **)(v0 + 16));
}

uint64_t sub_1001CE1F8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v8 = v5;
  unint64_t v11 = a1;
  if (a1 >> 62) {
    goto LABEL_35;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v13 = 0;
    unint64_t v30 = v11 & 0xC000000000000001;
    unint64_t v27 = a4;
    id v28 = (void *)(v11 + 32);
    uint64_t v29 = v12;
    while (1)
    {
      id v14 = v30 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : (id)v28[v13];
      uint64_t v15 = v14;
      if (__OFADD__(v13++, 1)) {
        break;
      }
      self;
      int v17 = (void *)swift_dynamicCastObjCClass();
      if (v17)
      {
        id v18 = [v17 *(SEL *)a5];
        if (v18)
        {
          int v19 = v18;
          a4 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v20 = a4[2];
          if (v20)
          {
            BOOL v21 = a4[4] == a2 && a4[5] == a3;
            if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_31:
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              return 1;
            }
            if (v20 != 1)
            {
              uint64_t v24 = a5;
              unint64_t v25 = (void *)v11;
              uint64_t v26 = v8;
              unint64_t v11 = (unint64_t)(a4 + 7);
              a5 = 1;
              while (1)
              {
                uint64_t v8 = a5 + 1;
                if (__OFADD__(a5, 1)) {
                  break;
                }
                BOOL v22 = *(void *)(v11 - 8) == a2 && *(void *)v11 == a3;
                if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_31;
                }
                v11 += 16;
                ++a5;
                if (v8 == v20)
                {

                  swift_bridgeObjectRelease();
                  unint64_t v11 = (unint64_t)v25;
                  uint64_t v8 = v26;
                  a5 = v24;
                  a4 = v27;
                  goto LABEL_21;
                }
              }
              __break(1u);
              break;
            }
          }

          swift_bridgeObjectRelease();
          a4 = v27;
        }
        else
        {
        }
LABEL_21:
        uint64_t v12 = v29;
      }
      else
      {
      }
      if (v13 == v12) {
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
  }
LABEL_36:
  swift_bridgeObjectRelease();
  return 0;
}

void sub_1001CE440(char *a1@<X8>)
{
  sub_1001D8010(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), a1);
}

id sub_1001CE460@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E6B14(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), a1);
}

id sub_1001CE480@<X0>(Class *a1@<X8>)
{
  return sub_1001E7908(*(void **)(v1 + 24), a1);
}

uint64_t sub_1001CE4A0()
{
  uint64_t v2 = v0[2];
  unint64_t v3 = (void *)v0[3];
  uint64_t v5 = (const void *)v0[4];
  uint64_t v4 = v0[5];
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000A516C;
  unint64_t v7 = (uint64_t (*)(uint64_t, void *, const void *, uint64_t))((char *)&dword_1003441D0 + dword_1003441D0);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1001CE56C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (const void *)v0[5];
  uint64_t v6 = v0[6];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_1000A516C;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, const void *, uint64_t))((char *)&dword_1003441E8
                                                                               + dword_1003441E8);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_1001CE63C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000A516C;
  return sub_1001CC044(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1001CE708()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (const void *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_1000A516C;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void *, const void *, uint64_t))((char *)&dword_100344218
                                                                               + dword_100344218);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_1001CE7D8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000A516C;
  return sub_1001CAFB8(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1001CE8A4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (const void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000A516C;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, const void *, uint64_t))((char *)&dword_100344248 + dword_100344248);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1001CE970()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (const void *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_1000A516C;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, const void *, uint64_t))((char *)&dword_100344270
                                                                                + dword_100344270);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_1001CEA40()
{
  long long v5 = *(_OWORD *)(v0 + 32);
  long long v6 = *(_OWORD *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_1000A516C;
  *(void *)(v3 + 152) = v2;
  *(_OWORD *)(v3 + 136) = v5;
  *(_OWORD *)(v3 + 120) = v6;
  return _swift_task_switch(sub_1001CA114, 0, 0);
}

uint64_t sub_1001CEB0C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  long long v5 = (const void *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_1000A516C;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, const void *, uint64_t))((char *)&dword_1003442A0
                                                                                + dword_1003442A0);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_1001CEBE0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  long long v5 = (const void *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_1000A516C;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, const void *, uint64_t))((char *)&dword_1003442C8
                                                                                + dword_1003442C8);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_1001CECB4()
{
  _Block_release(*(const void **)(v0 + 40));
  swift_release();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001CED0C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  long long v5 = (const void *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_1000A516C;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, const void *, uint64_t))((char *)&dword_1003442F0
                                                                                + dword_1003442F0);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_1001CEDDC()
{
  long long v5 = *(_OWORD *)(v0 + 32);
  long long v6 = *(_OWORD *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10009F840;
  *(void *)(v3 + 152) = v2;
  *(_OWORD *)(v3 + 136) = v5;
  *(_OWORD *)(v3 + 120) = v6;
  return _swift_task_switch(sub_1001C81DC, 0, 0);
}

uint64_t sub_1001CEEA8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  long long v6 = (uint64_t (*)(uint64_t, const void *, uint64_t))((char *)&dword_100344320 + dword_100344320);
  return v6(v2, v3, v4);
}

uint64_t sub_1001CEF68()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  long long v5 = (const void *)v0[4];
  uint64_t v4 = v0[5];
  long long v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000A516C;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, const void *, uint64_t))((char *)&dword_100344348 + dword_100344348);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1001CF030()
{
  long long v5 = *(_OWORD *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_1000A516C;
  *(void *)(v3 + 136) = v2;
  *(_OWORD *)(v3 + 120) = v5;
  return _swift_task_switch(sub_1001C72B8, 0, 0);
}

uint64_t sub_1001CF0F0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  long long v5 = (const void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000A516C;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, const void *, uint64_t))((char *)&dword_100344378 + dword_100344378);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1001CF1BC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  long long v5 = (const void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000A516C;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, const void *, uint64_t))((char *)&dword_100344390 + dword_100344390);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1001CF288()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  long long v5 = (const void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000A516C;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, const void *, uint64_t))((char *)&dword_1003443B8 + dword_1003443B8);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1001CF350()
{
  long long v5 = *(_OWORD *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_1000A516C;
  *(void *)(v3 + 136) = v2;
  *(_OWORD *)(v3 + 120) = v5;
  return _swift_task_switch(sub_1001C55C8, 0, 0);
}

uint64_t sub_1001CF410()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000A516C;
  long long v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1003443E8 + dword_1003443E8);
  return v5(v2, v3);
}

uint64_t sub_1001CF4C8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(int, void *, uint64_t))((char *)&dword_100344410 + dword_100344410);
  return v6(v2, v3, v4);
}

uint64_t sub_1001CF588()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(int, void *, uint64_t))((char *)&dword_100344430 + dword_100344430);
  return v6(v2, v3, v4);
}

uint64_t sub_1001CF648()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(int, void *, uint64_t))((char *)&dword_100344450 + dword_100344450);
  return v6(v2, v3, v4);
}

uint64_t sub_1001CF708()
{
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = *(const void **)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000A516C;
  uint64_t v7 = (uint64_t (*)(char, void *, const void *, uint64_t))((char *)&dword_100344470 + dword_100344470);
  return v7(v2, v3, v4, v5);
}

uint64_t sub_1001CF7D8()
{
  char v2 = (void *)v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(void *, const void *, uint64_t))((char *)&dword_100344498 + dword_100344498);
  return v6(v2, v3, v4);
}

uint64_t sub_1001CF898()
{
  char v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (const void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000A516C;
  uint64_t v7 = (uint64_t (*)(void *, void *, const void *, uint64_t))((char *)&dword_1003444B8 + dword_1003444B8);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1001CF964()
{
  char v2 = (void *)v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(void *, const void *, uint64_t))((char *)&dword_1003444D8 + dword_1003444D8);
  return v6(v2, v3, v4);
}

uint64_t sub_1001CFA24()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000A516C;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1003444F8 + dword_1003444F8);
  return v5(v2, v3);
}

uint64_t sub_1001CFADC()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001CFB2C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (const void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000A516C;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, const void *, uint64_t))((char *)&dword_100344518 + dword_100344518);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1001CFBF4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_1000A516C;
  return sub_1001BE9C8(a1, v4, v5, v7, v6);
}

BOOL sub_1001CFCB4()
{
  return sub_1001BFDDC();
}

BOOL sub_1001CFCD4()
{
  return sub_1001BFD58();
}

uint64_t sub_1001CFCF8()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000A516C;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100344550 + dword_100344550);
  return v5(v2, v3);
}

id sub_1001CFDAC()
{
  return sub_1001E71C4();
}

uint64_t sub_1001CFDCC()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(void *, const void *, uint64_t))((char *)&dword_100344570 + dword_100344570);
  return v6(v2, v3, v4);
}

uint64_t sub_1001CFE8C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000A516C;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100344590 + dword_100344590);
  return v5(v2, v3);
}

uint64_t sub_1001CFF44()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000A516C;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1003445B8 + dword_1003445B8);
  return v5(v2, v3);
}

uint64_t sub_1001D0000()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(void *, const void *, uint64_t))((char *)&dword_1003445D8 + dword_1003445D8);
  return v6(v2, v3, v4);
}

void sub_1001D00BC(void *a1@<X8>)
{
  sub_1001E6E2C(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), a1);
}

uint64_t sub_1001D00E0()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(void *, const void *, uint64_t))((char *)&dword_1003445F8 + dword_1003445F8);
  return v6(v2, v3, v4);
}

void sub_1001D019C()
{
}

uint64_t sub_1001D01B8()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001D0200()
{
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = *(const void **)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000A516C;
  uint64_t v7 = (uint64_t (*)(char, void *, const void *, uint64_t))((char *)&dword_100344618 + dword_100344618);
  return v7(v2, v3, v4, v5);
}

void sub_1001D02CC()
{
  sub_1001E6EB4(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001D02F4()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000A516C;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100344638 + dword_100344638);
  return v5(v2, v3);
}

void sub_1001D03A8(void *a1@<X8>)
{
  sub_1001E6D90(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), a1);
}

uint64_t sub_1001D03CC()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000A516C;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100344660 + dword_100344660);
  return v5(v2, v3);
}

uint64_t sub_1001D0484()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(uint64_t, const void *, uint64_t))((char *)&dword_100344680 + dword_100344680);
  return v6(v2, v3, v4);
}

void sub_1001D0540()
{
  sub_1001E7734(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001D0560(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001D05B0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(uint64_t, const void *, uint64_t))((char *)&dword_1003446A8 + dword_1003446A8);
  return v6(v2, v3, v4);
}

void sub_1001D066C()
{
  sub_1001E7D48(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32), *(void *)(v0 + 40), *(NSString *)(v0 + 48));
}

void sub_1001D0690()
{
}

uint64_t sub_1001D06AC()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000A516C;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1003446D0 + dword_1003446D0);
  return v5(v2, v3);
}

void sub_1001D0760(unsigned __int8 *a1@<X8>)
{
  sub_1001E7C0C(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), a1);
}

uint64_t sub_1001D0784()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000A516C;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1003446F0 + dword_1003446F0);
  return v5(v2, v3);
}

uint64_t sub_1001D083C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000A516C;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100344710 + dword_100344710);
  return v5(v2, v3);
}

void sub_1001D08F0()
{
  sub_1001E7C94(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));
}

void sub_1001D0910()
{
  sub_1001DC1B4(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32), *(unsigned char *)(v0 + 33));
}

uint64_t sub_1001D0938()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(void *, const void *, uint64_t))((char *)&dword_100344730 + dword_100344730);
  return v6(v2, v3, v4);
}

uint64_t sub_1001D09F8()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000A516C;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100344750 + dword_100344750);
  return v5(v2, v3);
}

uint64_t sub_1001D0AB0()
{
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = *(const void **)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(char, const void *, uint64_t))((char *)&dword_100344770 + dword_100344770);
  return v6(v2, v4, v3);
}

uint64_t sub_1001D0B70()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000A516C;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100344798 + dword_100344798);
  return v5(v2, v3);
}

uint64_t sub_1001D0C28()
{
  char v2 = (void *)v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(void *, const void *, uint64_t))((char *)&dword_1003447B8 + dword_1003447B8);
  return v6(v2, v3, v4);
}

void sub_1001D0CE4()
{
  sub_1001E7654(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_1001D0D04()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001D0D4C()
{
  char v2 = *(void **)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v5 = *(const void **)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000A516C;
  uint64_t v7 = (uint64_t (*)(void *, char, const void *, uint64_t))((char *)&dword_1003447E0 + dword_1003447E0);
  return v7(v2, v3, v5, v4);
}

void sub_1001D0E18()
{
}

uint64_t sub_1001D0E34()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D0E74()
{
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = *(const void **)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(char, const void *, uint64_t))((char *)&dword_100344808 + dword_100344808);
  return v6(v2, v4, v3);
}

void sub_1001D0F30()
{
  sub_1001E6160(*(void **)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(unsigned __int8 *)(v0 + 33), *(unsigned __int8 *)(v0 + 34));
}

uint64_t sub_1001D0F5C()
{
  char v2 = (void *)v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(void *, const void *, uint64_t))((char *)&dword_100344830 + dword_100344830);
  return v6(v2, v3, v4);
}

uint64_t sub_1001D101C()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000A516C;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100344850 + dword_100344850);
  return v5(v2, v3);
}

uint64_t getEnumTagSinglePayload for PrivateService.PrivateServiceError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PrivateService.PrivateServiceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001D122CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrivateService.PrivateServiceError()
{
  return &type metadata for PrivateService.PrivateServiceError;
}

unint64_t sub_1001D1268()
{
  unint64_t result = qword_100344870;
  if (!qword_100344870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100344870);
  }
  return result;
}

void sub_1001D12BC()
{
}

uint64_t sub_1001D12D8()
{
  return sub_1001CB874();
}

uint64_t sub_1001D1350()
{
  return sub_1001CB7C8();
}

void sub_1001D13DC()
{
}

uint64_t sub_1001D1418@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10009EE78(&qword_100341930);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  unsigned int v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  int v8 = &v13[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC15ScreenTimeAgent15DowntimeService____lazy_storage___logger;
  swift_beginAccess();
  sub_1000D10B8(v9, (uint64_t)v8);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(a1, v8, v10);
  }
  sub_1000B6270((uint64_t)v8);
  Logger.init(subsystem:category:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  sub_1000D1120((uint64_t)v6, v9);
  return swift_endAccess();
}

uint64_t sub_1001D1614@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v4 = v3;
  uint64_t v49 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v49);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v45 = (uint64_t)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v44 = (uint64_t)&v43 - v15;
  __chkstk_darwin(v14);
  int v17 = (char *)&v43 - v16;
  uint64_t v46 = a1;
  sub_1001D1418((uint64_t)&v43 - v16);
  id v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v48 = v9;
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Fetching downtime status", v20, 2u);
    unint64_t v4 = v3;
    uint64_t v9 = v48;
    swift_slowDealloc();
  }

  os_log_type_t v47 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v48 = (char *)(v11 + 8);
  v47(v17, v10);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  BOOL v21 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  BOOL v22 = (id *)swift_allocObject();
  v22[3] = 0;
  v22[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))((uint64_t)v22 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v10);
  if (byte_10034B308 != 1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v22[2] = v21;
  id v23 = v21;
  id v24 = [a2 dsid];
  sub_1001DE3B0(v24);
  if (v4)
  {
    swift_release();

    unint64_t v50 = v4;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 23)
      {
        swift_errorRelease();
        id v28 = (void *)*((void *)v9 + 1);

        uint64_t v29 = v45;
        sub_1001D1418(v45);
        unint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v30, v31))
        {
          int v32 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)int v32 = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Missing dowwntime blueprint", v32, 2u);
          swift_slowDealloc();
        }

        v47((char *)v29, v10);
        *a3 = 0;
        return swift_errorRelease();
      }
      sub_1000C9DB4((uint64_t)v9);
    }
    return swift_errorRelease();
  }
  uint64_t v26 = v25;

  LOBYTE(v50) = 0;
  id v27 = sub_1001D7640();
  __chkstk_darwin(v27);
  *(&v43 - 4) = (uint64_t)v22;
  *(&v43 - 3) = (uint64_t)v26;
  NSString v42 = &v50;
  NSManagedObjectContext.performAndWait<A>(_:)();
  uint64_t v43 = v10;

  char v34 = v50;
  id v35 = sub_1001D7640();
  __chkstk_darwin(v35);
  *(&v43 - 4) = (uint64_t)v22;
  *(&v43 - 3) = (uint64_t)v26;
  LOBYTE(v42) = v34;
  type metadata accessor for STDowntimeState(0);
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_setDeallocating();
  sub_1000B6270((uint64_t)v22 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
  uint64_t result = swift_deallocClassInstance();
  unint64_t v36 = v50;
  uint64_t v37 = v43;
  if (v50 >= 5)
  {
    uint64_t v38 = v44;
    sub_1001D1418(v44);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 134349056;
      uint64_t v37 = v43;
      unint64_t v50 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unhandled downtimeState: %{public}ld", v41, 0xCu);
      swift_slowDealloc();
    }

    v47((char *)v38, v37);
    unint64_t v50 = 56;
    type metadata accessor for Code(0);
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    swift_dynamicCast();
    return swift_willThrow();
  }
  else
  {
    *a3 = (0x14u >> v50) & 1;
  }
  return result;
}

uint64_t sub_1001D1ED4(void *a1, const void *a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  type metadata accessor for Logger();
  v3[4] = swift_task_alloc();
  v3[5] = _Block_copy(a2);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_1001D1F94, 0, 0);
}

uint64_t sub_1001D1F94()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  id v3 = *(id *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  char v4 = sub_10011ACA0("DowntimeService.isDowntimeEnabled", 33, 2, v1, 1, 0, v2, v3);
  swift_release();

  (*(void (**)(void, void, void))(*(void *)(v0 + 40) + 16))(*(void *)(v0 + 40), v4 & 1, 0);
  _Block_release(*(const void **)(v0 + 40));
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1001D20F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a2;
  v3[3] = a3;
  uint64_t v4 = type metadata accessor for Logger();
  v3[4] = v4;
  v3[5] = *(void *)(v4 - 8);
  v3[6] = swift_task_alloc();
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_1001D21C4, 0, 0);
}

uint64_t sub_1001D21C4()
{
  sub_1001D1418(v0[7]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Toggling downtime status", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[2];
  uint64_t v9 = (void *)v0[3];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
  swift_retain();
  id v10 = v9;
  Logger.init(subsystem:category:)();
  char v11 = sub_10011ACA0("DowntimeService.isDowntimeEnabled", 33, 2, v5, 1, 0, v8, v10);
  if (qword_100340D90 != -1) {
    swift_once();
  }
  uint64_t v12 = v0[4];
  uint64_t v13 = v0[5];
  uint64_t v14 = (void *)qword_10034B310;
  type metadata accessor for DataStore(0);
  uint64_t v15 = (void *)swift_allocObject();
  v0[8] = v15;
  v15[3] = 0;
  v15[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))((uint64_t)v15 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger, 1, 1, v12);
  if (byte_10034B308 != 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v16 = (void *)v0[3];
  v15[2] = v14;
  id v17 = v14;
  id v18 = [v16 dsid];
  sub_1001DE3B0(v18);
  uint64_t v20 = v19;
  v0[9] = v19;

  id v22 = sub_1001D7640();
  id v23 = (void *)swift_task_alloc();
  v23[2] = v15;
  v23[3] = v20;
  v23[4] = (v11 & 1) == 0;
  NSManagedObjectContext.performAndWait<A>(_:)();

  swift_task_dealloc();
  id v24 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (qword_100340E00 != -1) {
    swift_once();
  }
  v0[10] = qword_10034B370;
  swift_retain();
  unint64_t v25 = (void *)swift_task_alloc();
  v0[11] = v25;
  void *v25 = v0;
  v25[1] = sub_1001D26FC;
  return sub_10019F170(0);
}

uint64_t sub_1001D26FC()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1001D28FC;
  }
  else
  {
    swift_release();
    os_log_type_t v2 = sub_1001D2818;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001D2818()
{
  uint64_t v1 = *(id **)(v0 + 64);

  swift_setDeallocating();
  sub_1000B6270((uint64_t)v1 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
  swift_deallocClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001D28FC()
{
  uint64_t v1 = (void *)v0[9];
  os_log_type_t v2 = (id *)v0[8];
  swift_release();

  swift_setDeallocating();
  sub_1000B6270((uint64_t)v2 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger);
  swift_deallocClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001D2B5C(void *a1, const void *a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  type metadata accessor for Logger();
  v3[4] = swift_task_alloc();
  v3[5] = _Block_copy(a2);
  id v6 = a1;
  swift_retain();
  return _swift_task_switch(sub_1001D2C1C, 0, 0);
}

uint64_t sub_1001D2C1C()
{
  id v1 = *(id *)(v0 + 16);
  swift_retain();
  Logger.init(subsystem:category:)();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_100343540
                                                                                             + dword_100343540);
  id v2 = v1;
  swift_retain();
  id v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *id v3 = v0;
  v3[1] = sub_1001B3B10;
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 16);
  return v8((uint64_t)"DowntimeService.toggleOnDemandDowntime", 38, 2, v4, 1, 0, v5, v6);
}

uint64_t sub_1001D2D50()
{
  sub_1000B6270(v0 + OBJC_IVAR____TtC15ScreenTimeAgent15DowntimeService____lazy_storage___logger);
  return swift_deallocClassInstance();
}

uint64_t sub_1001D2DB4()
{
  return type metadata accessor for DowntimeService();
}

uint64_t type metadata accessor for DowntimeService()
{
  uint64_t result = qword_100344908;
  if (!qword_100344908) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001D2E0C()
{
  id v2 = (void *)v0[2];
  id v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10009F840;
  uint64_t v6 = (uint64_t (*)(void *, const void *, uint64_t))((char *)&dword_1003449B8 + dword_1003449B8);
  return v6(v2, v3, v4);
}

void sub_1001D2EC8()
{
  sub_1001E3950(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

void sub_1001D2EE8(void *a1@<X8>)
{
  sub_1001E3AA4(*(void **)(v1 + 24), *(unsigned char *)(v1 + 32), a1);
}

uint64_t sub_1001D2F0C()
{
  id v2 = (void *)v0[2];
  id v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000A516C;
  uint64_t v6 = (uint64_t (*)(void *, const void *, uint64_t))((char *)&dword_1003449D0 + dword_1003449D0);
  return v6(v2, v3, v4);
}

uint64_t sub_1001D2FC8()
{
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v0, v1))
  {
    id v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Repairing downtime blueprint.", v2, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  return NSManagedObjectContext.performAndWait<A>(_:)();
}

uint64_t sub_1001D3118()
{
  return type metadata accessor for Downtime();
}

uint64_t type metadata accessor for Downtime()
{
  uint64_t result = qword_100344A18;
  if (!qword_100344A18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001D316C()
{
  os_log_type_t v1 = *(void **)(v0 + 208);
  if (v1)
  {
    id v2 = self;
    sub_1001D590C();
    swift_allocError();
    *uint64_t v3 = 1;
    id v4 = v1;
    uint64_t v5 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    id v6 = [v2 failure:v5];

    [v4 resolve:v6];
  }
  sub_1000A4F28(v0 + 16);
  sub_1000A4F28(v0 + 56);
  sub_1000A4F28(v0 + 96);

  swift_unknownObjectRelease();
  swift_release();
  sub_1000A4F28(v0 + 160);

  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1001D3288()
{
  sub_1001D316C();
  return swift_deallocClassInstance();
}

id sub_1001D32BC()
{
  return sub_1001D3B40((uint64_t)&unk_1003072B8, (uint64_t)sub_1001D5AA4, (uint64_t)&unk_1003072D0);
}

uint64_t sub_1001D32E4(void *a1, void *a2)
{
  if (a1[27])
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  id v4 = (void *)a1[26];
  if (v4)
  {
    uint64_t v5 = self;
    sub_1001D590C();
    swift_allocError();
    unsigned char *v6 = 0;
    id v7 = v4;
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    id v9 = [v5 failure:v8];

    [v7 resolve:v9];
    id v10 = (void *)a1[26];
  }
  else
  {
    id v10 = 0;
  }
  a1[26] = a2;
  v32[0] = a2;

  char v11 = sub_1000C5860(a1 + 12, a1[15]);
  uint64_t v12 = *(void **)(*v11 + 24);
  *(void *)(*v11 + 24) = 0;

  uint64_t v13 = sub_10009EE78(&qword_100344C90);
  v32[1] = v32;
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1[10];
  uint64_t v18 = a1[11];
  sub_1000C5860(a1 + 7, v17);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  id v33 = (id)a1[17];
  id v20 = v33;
  uint64_t v34 = v19;
  uint64_t v21 = sub_10009EE78(&qword_100344C50);
  __chkstk_darwin(v21 - 8);
  id v23 = (char *)v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  id v25 = v20;
  sub_10009EE78(&qword_100344C98);
  sub_1001D51D8();
  sub_1001D59A4(&qword_100344CA0, &qword_100344C98);
  sub_1001D58B8((unint64_t *)&qword_100344C68, (void (*)(uint64_t))sub_1001D51D8);
  Publisher.receive<A>(on:options:)();
  sub_1001D5218((uint64_t)v23);

  swift_release();
  uint64_t v26 = swift_allocObject();
  swift_weakInit();
  uint64_t v27 = swift_allocObject();
  id v28 = (void *)v32[0];
  *(void *)(v27 + 16) = v32[0];
  *(void *)(v27 + 24) = v26;
  sub_1001D59A4(&qword_100344CA8, &qword_100344C90);
  id v29 = v28;
  uint64_t v30 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  a1[27] = v30;
  return swift_release();
}

void sub_1001D3704(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if ((~*a1 & 0xF000000000000007) != 0)
  {
    sub_1001D59E8();
    if (qword_100340E18 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10009DA74(v10, (uint64_t)qword_10034B3B8);
    sub_1001D59E8();
    sub_1001D59E8();
    char v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      sub_1001D5A0C();
      uint64_t v14 = Error.localizedDescription.getter();
      sub_1000A2E70(v14, v15, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D59F0(v3);
      sub_1001D59F0(v3);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "failed to start cloud syncing: %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001D59F0(v3);
      sub_1001D59F0(v3);
    }

    uint64_t v16 = self;
    sub_1001D5A0C();
    swift_allocError();
    uint64_t *v17 = v3;
    sub_1001D59E8();
    uint64_t v18 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    id v19 = [v16 failure:v18];

    [a2 resolve:v19];
    sub_1001D59F0(v3);
  }
  else
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      *(unsigned char *)(Strong + 200) = 1;
      swift_release();
    }
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_1001D4ED0();
      swift_release();
    }
    if (qword_100340E18 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10009DA74(v5, (uint64_t)qword_10034B3B8);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "successfully started cloud syncing", v8, 2u);
      swift_slowDealloc();
    }

    id v9 = [self success];
    [a2 resolve:v9];
  }
  swift_beginAccess();
  uint64_t v20 = swift_weakLoadStrong();
  if (v20)
  {
    uint64_t v21 = *(void **)(v20 + 208);
    *(void *)(v20 + 208) = 0;
    swift_release();
  }
}

id sub_1001D3B18()
{
  return sub_1001D3B40((uint64_t)&unk_100307218, (uint64_t)sub_1001D5904, (uint64_t)&unk_100307230);
}

id sub_1001D3B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *(void *)(v3 + 136);
  id v6 = [objc_allocWithZone((Class)STPromise) initPendingOnQueue:v20];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v3;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = a2;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100213F7C;
  aBlock[3] = a3;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  os_log_type_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  id v19 = v6;
  static DispatchQoS.unspecified.getter();
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = _swiftEmptyArrayStorage;
  sub_1001D58B8((unint64_t *)&qword_100346190, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10009EE78(&qword_100344C80);
  sub_1001D59A4((unint64_t *)&qword_1003461A0, &qword_100344C80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v8);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_release();
  return v19;
}

uint64_t sub_1001D3E00(void *a1, void *a2)
{
  if (a1[27])
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  id v4 = (void *)a1[26];
  if (v4)
  {
    uint64_t v5 = self;
    sub_1001D590C();
    swift_allocError();
    unsigned char *v6 = 0;
    id v7 = v4;
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    id v9 = [v5 failure:v8];

    [v7 resolve:v9];
    uint64_t v10 = (void *)a1[26];
  }
  else
  {
    uint64_t v10 = 0;
  }
  a1[26] = a2;
  v30[0] = a2;

  uint64_t v11 = sub_10009EE78(&qword_100344C90);
  v30[1] = v30;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a1[10];
  uint64_t v16 = a1[11];
  sub_1000C5860(a1 + 7, v15);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
  id v31 = (id)a1[17];
  id v18 = v31;
  uint64_t v32 = v17;
  uint64_t v19 = sub_10009EE78(&qword_100344C50);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  id v23 = v18;
  sub_10009EE78(&qword_100344C98);
  sub_1001D51D8();
  sub_1001D59A4(&qword_100344CA0, &qword_100344C98);
  sub_1001D58B8((unint64_t *)&qword_100344C68, (void (*)(uint64_t))sub_1001D51D8);
  Publisher.receive<A>(on:options:)();
  sub_1001D5218((uint64_t)v21);

  swift_release();
  uint64_t v24 = swift_allocObject();
  swift_weakInit();
  uint64_t v25 = swift_allocObject();
  uint64_t v26 = (void *)v30[0];
  *(void *)(v25 + 16) = v30[0];
  *(void *)(v25 + 24) = v24;
  sub_1001D59A4(&qword_100344CA8, &qword_100344C90);
  id v27 = v26;
  uint64_t v28 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  a1[27] = v28;
  return swift_release();
}

void sub_1001D4204(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if ((~*a1 & 0xF000000000000007) != 0)
  {
    sub_1001D59E8();
    if (qword_100340E18 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10009DA74(v21, (uint64_t)qword_10034B3B8);
    sub_1001D59E8();
    sub_1001D59E8();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      v33[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v34 = v3;
      sub_1001D5A0C();
      uint64_t v25 = Error.localizedDescription.getter();
      uint64_t v34 = sub_1000A2E70(v25, v26, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D59F0(v3);
      sub_1001D59F0(v3);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "failed to stop cloud syncing: %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001D59F0(v3);
      sub_1001D59F0(v3);
    }

    id v27 = self;
    sub_1001D5A0C();
    swift_allocError();
    *uint64_t v28 = v3;
    sub_1001D59E8();
    id v29 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    id v30 = [v27 failure:v29];

    [a2 resolve:v30];
    sub_1001D59F0(v3);
  }
  else
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      sub_1000C58A4(Strong + 96, (uint64_t)v33);
      swift_release();
      uint64_t v5 = *sub_1000C5860(v33, v33[3]);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v6 = *(void **)(v5 + 16);
      id v7 = objc_allocWithZone((Class)APSConnection);
      id v8 = v6;
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v10 = String._bridgeToObjectiveC()();
      id v11 = [v7 initWithEnvironmentName:v9 namedDelegatePort:v10 queue:v8];

      uint64_t v12 = *(void **)(v5 + 24);
      *(void *)(v5 + 24) = v11;

      sub_1000A4F28((uint64_t)v33);
    }
    swift_beginAccess();
    uint64_t v13 = swift_weakLoadStrong();
    if (v13)
    {
      *(unsigned char *)(v13 + 200) = 0;
      swift_release();
    }
    swift_beginAccess();
    uint64_t v14 = swift_weakLoadStrong();
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 224);
      swift_retain();
      swift_release();
      if (v15)
      {
        AnyCancellable.cancel()();
        swift_release();
      }
    }
    if (qword_100340E18 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10009DA74(v16, (uint64_t)qword_10034B3B8);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "successfully stopped cloud syncing", v19, 2u);
      swift_slowDealloc();
    }

    id v20 = [self success];
    [a2 resolve:v20];
  }
  swift_beginAccess();
  uint64_t v31 = swift_weakLoadStrong();
  if (v31)
  {
    uint64_t v32 = *(void **)(v31 + 208);
    *(void *)(v31 + 208) = 0;
    swift_release();
  }
}

id sub_1001D4728()
{
  uint64_t v15 = *(void *)(v0 + 136);
  id v1 = [objc_allocWithZone((Class)STPromise) initPendingOnQueue:v15];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = v0;
  aBlock[4] = sub_1001D58B0;
  aBlock[5] = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100213F7C;
  aBlock[3] = &unk_1003071E0;
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = v1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = _swiftEmptyArrayStorage;
  sub_1001D58B8((unint64_t *)&qword_100346190, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10009EE78(&qword_100344C80);
  sub_1001D59A4((unint64_t *)&qword_1003461A0, &qword_100344C80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_release();
  return v14;
}

void sub_1001D49F8(void *a1)
{
  uint64_t v2 = self;
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  id v4 = [v2 success:isa];

  [a1 resolve:v4];
}

id sub_1001D4AAC()
{
  uint64_t v1 = v0;
  if (qword_100340E18 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10009DA74(v2, (uint64_t)qword_10034B3B8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "forcing a mirroring sync", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = self;
  uint64_t v7 = *(void *)(v1 + 136);
  v11[4] = sub_1001D588C;
  v11[5] = v1;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1001D4CFC;
  v11[3] = &unk_100307190;
  uint64_t v8 = _Block_copy(v11);
  swift_retain();
  swift_release();
  id v9 = [v6 onQueue:v7 do:v8];
  _Block_release(v8);
  return v9;
}

uint64_t sub_1001D4C54@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 200) == 1)
  {
    id v4 = sub_1001D32BC();
  }
  else
  {
    id v5 = [self success];
    id v4 = [objc_allocWithZone((Class)STPromise) initWithResolution:v5 onQueue:*(void *)(a1 + 136)];
  }
  uint64_t result = sub_10009EE78(&qword_100344C78);
  a2[3] = result;
  *a2 = v4;
  return result;
}

id sub_1001D4CFC(uint64_t a1)
{
  void (*v1)(void *__return_ptr, uint64_t);
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void v10[3];
  uint64_t v11;
  uint64_t vars8;

  uint64_t v1 = *(void (**)(void *__return_ptr, uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v10, v2);
  swift_release();
  uint64_t v3 = v11;
  if (v11)
  {
    id v4 = sub_1000C5860(v10, v11);
    id v5 = *(void *)(v3 - 8);
    __chkstk_darwin(v4);
    uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v5 + 16))(v7);
    uint64_t v8 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
    sub_1000A4F28((uint64_t)v10);
  }
  else
  {
    uint64_t v8 = 0;
  }
  return v8;
}

id sub_1001D4E5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = swift_retain();
  id v5 = (void *)a3(v4);
  swift_release();
  return v5;
}

uint64_t type metadata accessor for AutomaticCloudMirroringMonitor()
{
  return self;
}

uint64_t sub_1001D4ED0()
{
  uint64_t v1 = v0;
  if (v0[28])
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  uint64_t v2 = sub_10009EE78(&qword_100344C48);
  v15[1] = v15;
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v0[19];
  id v16 = (id)v1[17];
  id v7 = v16;
  uint64_t v17 = v6;
  uint64_t v8 = sub_10009EE78(&qword_100344C50);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  swift_retain();
  id v12 = v7;
  sub_10009EE78(&qword_100344C58);
  sub_1001D51D8();
  sub_1001D59A4(&qword_100344C60, &qword_100344C58);
  sub_1001D58B8((unint64_t *)&qword_100344C68, (void (*)(uint64_t))sub_1001D51D8);
  Publisher.receive<A>(on:options:)();
  sub_1001D5218((uint64_t)v10);

  swift_release();
  sub_1001D59A4(&qword_100344C70, &qword_100344C48);
  swift_retain();
  uint64_t v13 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v1[28] = v13;
  swift_release();
  sub_1000C5860(v1 + 20, v1[23]);
  type metadata accessor for ConcreteStoreChangeSyncTrigger();
  return sub_100213A78();
}

unint64_t sub_1001D51D8()
{
  unint64_t result = qword_100340F00;
  if (!qword_100340F00)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100340F00);
  }
  return result;
}

uint64_t sub_1001D5218(uint64_t a1)
{
  uint64_t v2 = sub_10009EE78(&qword_100344C50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001D5278(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = *a1;
  if (qword_100340E18 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10009DA74(v4, (uint64_t)qword_10034B3B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)id v12 = 136315138;
    unint64_t v13 = 0x8000000100294B70;
    unint64_t v14 = 0x6C61756E616DLL;
    if (v8 == 1) {
      unint64_t v14 = 0xD000000000000012;
    }
    else {
      unint64_t v13 = 0xE600000000000000;
    }
    if (v8) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0xD000000000000012;
    }
    if (v8) {
      unint64_t v16 = v13;
    }
    else {
      unint64_t v16 = 0x8000000100294B90;
    }
    v19[1] = sub_1000A2E70(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "attempting to sync in response to %s trigger event", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v17 = [*(id *)(a2 + 144) transactionWithDescription:"com.apple.ScreenTimeAgent.mirroring-synchronizing-stores"];
  sub_1001D552C(a2);
  return swift_unknownObjectRelease();
}

uint64_t sub_1001D5524(unsigned __int8 *a1)
{
  return sub_1001D5278(a1, v1);
}

void sub_1001D552C(uint64_t a1)
{
  uint64_t v1 = (void **)sub_1000C5860((void *)(a1 + 16), *(void *)(a1 + 40));
  uint64_t v2 = sub_100211B04(*v1);
  if (!v2)
  {
    if (qword_100340E18 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10009DA74(v9, (uint64_t)qword_10034B3B8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v5, v6)) {
      goto LABEL_12;
    }
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v7 = 0;
    int v8 = "local store is up to date with cloud store";
    goto LABEL_11;
  }
  unint64_t v3 = v2;
  if (v2 == 1)
  {
    if (qword_100340E18 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10009DA74(v4, (uint64_t)qword_10034B3B8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v5, v6)) {
      goto LABEL_12;
    }
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v7 = 0;
    int v8 = "local store changes were exported to cloud store";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
    swift_slowDealloc();
LABEL_12:

    return;
  }
  if (qword_100340E18 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10009DA74(v10, (uint64_t)qword_10034B3B8);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)unint64_t v13 = 136315138;
    swift_getErrorValue();
    uint64_t v14 = Error.localizedDescription.getter();
    sub_1000A2E70(v14, v15, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001D587C(v3);
    sub_1001D587C(v3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "failed to synchronize stores: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_1001D587C(v3);
  }
  else
  {
    sub_1001D587C(v3);
    sub_1001D587C(v3);
    swift_errorRelease();
  }
}

unint64_t sub_1001D587C(unint64_t result)
{
  if (result >= 2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1001D588C@<X0>(void *a1@<X8>)
{
  return sub_1001D4C54(v1, a1);
}

uint64_t sub_1001D5894(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001D58A4()
{
  return swift_release();
}

void sub_1001D58B0()
{
  sub_1001D49F8(*(void **)(v0 + 16));
}

uint64_t sub_1001D58B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001D5904()
{
  return sub_1001D3E00(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_1001D590C()
{
  unint64_t result = qword_100344C88;
  if (!qword_100344C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100344C88);
  }
  return result;
}

uint64_t sub_1001D5960()
{
  swift_weakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001D599C(uint64_t *a1)
{
  sub_1001D4204(a1, *(void **)(v1 + 16));
}

uint64_t sub_1001D59A4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000C5390(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001D59E8()
{
  return swift_errorRetain();
}

uint64_t sub_1001D59F0(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return sub_1001D5A04();
  }
  return result;
}

uint64_t sub_1001D5A04()
{
  return swift_errorRelease();
}

unint64_t sub_1001D5A0C()
{
  unint64_t result = qword_100344CB0;
  if (!qword_100344CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100344CB0);
  }
  return result;
}

uint64_t sub_1001D5A64()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D5AA4()
{
  return sub_1001D32E4(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001D5AB0()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001D5AF0(uint64_t *a1)
{
  sub_1001D3704(a1, *(void **)(v1 + 16));
}

unsigned char *storeEnumTagSinglePayload for AutomaticCloudMirroringMonitor.MonitorError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001D5BC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomaticCloudMirroringMonitor.MonitorError()
{
  return &type metadata for AutomaticCloudMirroringMonitor.MonitorError;
}

unint64_t sub_1001D5C00()
{
  unint64_t result = qword_100344CB8;
  if (!qword_100344CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100344CB8);
  }
  return result;
}

uint64_t sub_1001D5C6C(uint64_t a1)
{
  uint64_t result = sub_1002097CC(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = sub_100209F5C(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_1001D5CEC(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = __CocoaSet.startIndex.getter();
    uint64_t v7 = v6;
    __CocoaSet.endIndex.getter();
    char v8 = static __CocoaSet.Index.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v8)
    {
LABEL_3:
      sub_10019D864(v5, v7, v4 != 0);
      return 0;
    }
LABEL_7:
    sub_100209968(v5, v7, v4 != 0, a1, a2);
    uint64_t v9 = v13;
    sub_10019D864(v5, v7, v4 != 0);
    return v9;
  }
  uint64_t result = sub_100209BDC(a1);
  if ((v12 & 1) == 0)
  {
    uint64_t v7 = v11;
    if (*(_DWORD *)(a1 + 36) == v11)
    {
      uint64_t v5 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1001D5E14(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10009EE78(&qword_1003431A0);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v23 = a1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v7 << 6);
      int64_t v12 = v7;
    }
    else
    {
      int64_t v13 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_37;
      }
      if (v13 >= v22)
      {
LABEL_33:
        sub_1000AA60C();
        return (unint64_t)v2;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v13);
      int64_t v12 = v7 + 1;
      if (!v14)
      {
        int64_t v12 = v7 + 2;
        if (v7 + 2 >= v22) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v23 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v7 + 3;
          if (v7 + 3 >= v22) {
            goto LABEL_33;
          }
          unint64_t v14 = *(void *)(v23 + 8 * v12);
          if (!v14)
          {
            int64_t v12 = v7 + 4;
            if (v7 + 4 >= v22) {
              goto LABEL_33;
            }
            unint64_t v14 = *(void *)(v23 + 8 * v12);
            if (!v14)
            {
              int64_t v15 = v7 + 5;
              if (v7 + 5 >= v22) {
                goto LABEL_33;
              }
              unint64_t v14 = *(void *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v12 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_38;
                  }
                  if (v12 >= v22) {
                    goto LABEL_33;
                  }
                  unint64_t v14 = *(void *)(v23 + 8 * v12);
                  ++v15;
                  if (v14) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v10 = (v14 - 1) & v14;
      unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    sub_10010B560(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    sub_1000A4F78(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    uint64_t v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    sub_10010B560((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      sub_1000A4FD8((uint64_t)v30, &qword_100345418);
      swift_bridgeObjectRelease();
      sub_1000AA60C();
      swift_release();
      return 0;
    }
    sub_1000A4F78((uint64_t)v31 + 8, (uint64_t)v25);
    sub_1000A4FD8((uint64_t)v30, &qword_100345418);
    sub_1000B8B44(v25, v26);
    long long v27 = v24;
    sub_1000B8B44(v26, v28);
    long long v16 = v27;
    sub_1000B8B44(v28, v29);
    sub_1000B8B44(v29, &v27);
    unint64_t result = sub_10010A024(v16, *((uint64_t *)&v16 + 1));
    unint64_t v17 = result;
    if (v18)
    {
      char v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      _OWORD *v8 = v16;
      uint64_t v9 = (_OWORD *)(v2[7] + 32 * v17);
      sub_1000A4F28((uint64_t)v9);
      unint64_t result = (unint64_t)sub_1000B8B44(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    unint64_t result = (unint64_t)sub_1000B8B44(&v27, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v19 = v2[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_36;
    }
    v2[2] = v21;
LABEL_8:
    int64_t v7 = v12;
    unint64_t v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

unint64_t sub_1001D61E8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10009EE78(&qword_100345430);
    uint64_t v1 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v1 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v23 = a1 + 64;
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  unint64_t v4 = v2 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(63 - v3) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (1)
  {
    if (v4)
    {
      uint64_t v10 = (v4 - 1) & v4;
      unint64_t v11 = __clz(__rbit64(v4)) | (v6 << 6);
      int64_t v12 = v6;
    }
    else
    {
      int64_t v13 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_40;
      }
      if (v13 >= v22)
      {
LABEL_36:
        sub_1000AA60C();
        return (unint64_t)v1;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v13);
      int64_t v12 = v6 + 1;
      if (!v14)
      {
        int64_t v12 = v6 + 2;
        if (v6 + 2 >= v22) {
          goto LABEL_36;
        }
        unint64_t v14 = *(void *)(v23 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v6 + 3;
          if (v6 + 3 >= v22) {
            goto LABEL_36;
          }
          unint64_t v14 = *(void *)(v23 + 8 * v12);
          if (!v14)
          {
            int64_t v12 = v6 + 4;
            if (v6 + 4 >= v22) {
              goto LABEL_36;
            }
            unint64_t v14 = *(void *)(v23 + 8 * v12);
            if (!v14)
            {
              int64_t v15 = v6 + 5;
              if (v6 + 5 >= v22) {
                goto LABEL_36;
              }
              unint64_t v14 = *(void *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v12 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_41;
                  }
                  if (v12 >= v22) {
                    goto LABEL_36;
                  }
                  unint64_t v14 = *(void *)(v23 + 8 * v12);
                  ++v15;
                  if (v14) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v12 = v6 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v10 = (v14 - 1) & v14;
      unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    sub_10010B560(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v31);
    sub_1000A4F78(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v32 + 8);
    v29[0] = v32[0];
    v29[1] = v32[1];
    uint64_t v30 = v33;
    v28[0] = v31[0];
    v28[1] = v31[1];
    sub_10010B560((uint64_t)v28, (uint64_t)v27);
    if (!swift_dynamicCast())
    {
      sub_1000A4FD8((uint64_t)v28, &qword_100345418);
LABEL_35:
      swift_bridgeObjectRelease();
      sub_1000AA60C();
      swift_release();
      return 0;
    }
    sub_1000A4F78((uint64_t)v29 + 8, (uint64_t)v27);
    sub_1000A4FD8((uint64_t)v28, &qword_100345418);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    unint64_t result = sub_10010A024(v25, v26);
    if (v16)
    {
      uint64_t v7 = 16 * result;
      char v8 = (uint64_t *)(v1[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v8 = v25;
      v8[1] = v26;
      uint64_t v9 = (uint64_t *)(v1[7] + v7);
      unint64_t result = swift_bridgeObjectRelease();
      uint64_t *v9 = v25;
      v9[1] = v26;
      goto LABEL_8;
    }
    if (v1[2] >= v1[3]) {
      break;
    }
    *(void *)((char *)v1 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v17 = (uint64_t *)(v1[6] + 16 * result);
    uint64_t *v17 = v25;
    v17[1] = v26;
    char v18 = (uint64_t *)(v1[7] + 16 * result);
    *char v18 = v25;
    v18[1] = v26;
    uint64_t v19 = v1[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_39;
    }
    v1[2] = v21;
LABEL_8:
    int64_t v6 = v12;
    unint64_t v4 = v10;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001D65B4()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t sub_1001D65EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10009EE78(&qword_100342B30);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [self standardUserDefaults];
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 objectForKey:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_1000FDE9C((uint64_t)v13, (uint64_t)v14, &qword_100341CD8);
  if (v15)
  {
    uint64_t v8 = type metadata accessor for Date();
    int v9 = swift_dynamicCast();
    uint64_t v10 = *(void *)(v8 - 8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v4, v9 ^ 1u, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v8) != 1) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v4, v8);
    }
  }
  else
  {
    sub_1000A4FD8((uint64_t)v14, &qword_100341CD8);
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 1, 1, v12);
  }
  sub_1000A4FD8((uint64_t)v4, &qword_100342B30);
  return static Date.now.getter();
}

uint64_t sub_1001D6844(void *a1, uint64_t a2)
{
  return sub_1001D6858(a1, a2, &qword_100343EC8);
}

uint64_t sub_1001D6858(void *a1, uint64_t a2, unint64_t *a3)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v4 = a1;
    char v5 = __CocoaSet.contains(_:)();

    return v5 & 1;
  }
  if (!*(void *)(a2 + 16)
    || (Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v9 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v10 = v8 & ~v9,
        uint64_t v11 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0))
  {
LABEL_11:
    char v14 = 0;
    return v14 & 1;
  }
  sub_1000A0760(0, a3);
  id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v10);
  char v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    uint64_t v15 = ~v9;
    unint64_t v16 = (v10 + 1) & v15;
    if ((*(void *)(v11 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16))
    {
      do
      {
        id v17 = *(id *)(*(void *)(a2 + 48) + 8 * v16);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          break;
        }
        unint64_t v16 = (v16 + 1) & v15;
      }
      while (((*(void *)(v11 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
      return v14 & 1;
    }
    goto LABEL_11;
  }
  char v14 = 1;
  return v14 & 1;
}

uint64_t sub_1001D69B8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10009EE78(&qword_100345368);
    uint64_t v2 = (void *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptySetSingleton;
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  uint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(63 - v4) >> 6;
  Swift::Int v8 = (char *)(v2 + 7);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_28;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v7) {
      goto LABEL_37;
    }
    uint64_t v14 = *(void *)(v3 + 8 * v13);
    int64_t v15 = v10 + 1;
    if (!v14)
    {
      int64_t v15 = v10 + 2;
      if (v10 + 2 >= v7) {
        goto LABEL_37;
      }
      uint64_t v14 = *(void *)(v3 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v10 + 3;
        if (v10 + 3 >= v7) {
          goto LABEL_37;
        }
        uint64_t v14 = *(void *)(v3 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v10 + 4;
          if (v10 + 4 >= v7) {
            goto LABEL_37;
          }
          uint64_t v14 = *(void *)(v3 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v6 = (v14 - 1) & v14;
    int64_t v10 = v15;
LABEL_28:
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v17 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)&v8[8 * (v18 >> 6)]) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v18) & ~*(void *)&v8[8 * (v18 >> 6)])) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v22 = v19 == v21;
        if (v19 == v21) {
          unint64_t v19 = 0;
        }
        v20 |= v22;
        uint64_t v23 = *(void *)&v8[8 * v19];
      }
      while (v23 == -1);
      unint64_t v11 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(void *)&v8[(v11 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v11;
    uint64_t v12 = v2[6] + 40 * v11;
    *(_OWORD *)uint64_t v12 = v24;
    *(_OWORD *)(v12 + 16) = v25;
    *(void *)(v12 + 32) = v26;
    ++v2[2];
  }
  int64_t v16 = v10 + 5;
  if (v10 + 5 >= v7)
  {
LABEL_37:
    swift_release();
    sub_1000AA60C();
    return (uint64_t)v2;
  }
  uint64_t v14 = *(void *)(v3 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v10 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v7) {
      goto LABEL_37;
    }
    uint64_t v14 = *(void *)(v3 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1001D6CAC(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter()) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v3 = &_swiftEmptySetSingleton;
    if (v2) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v8 = -1 << *(unsigned char *)(v1 + 32);
    uint64_t v30 = v1 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(v1 + 56);
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_6;
  }
LABEL_3:
  sub_10009EE78(&qword_100345368);
  uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)();
  if (!v2) {
    goto LABEL_7;
  }
LABEL_4:
  swift_bridgeObjectRetain();
  swift_retain();
  __CocoaSet.makeIterator()();
  sub_1000A0760(0, &qword_100345330);
  sub_1000AA614(&qword_100345338, &qword_100345330);
  uint64_t result = Set.Iterator.init(_cocoa:)();
  uint64_t v1 = v34;
  uint64_t v30 = v35;
  uint64_t v5 = v36;
  uint64_t v6 = v37;
  unint64_t v7 = v38;
LABEL_11:
  int64_t v29 = (unint64_t)(v5 + 64) >> 6;
  unint64_t v11 = (char *)(v3 + 7);
  while (v1 < 0)
  {
    uint64_t v16 = __CocoaSet.Iterator.next()();
    if (!v16) {
      goto LABEL_45;
    }
    *(void *)&long long v31 = v16;
    sub_1000A0760(0, &qword_100345330);
    swift_dynamicCast();
LABEL_36:
    sub_1000A0760(0, &qword_100345330);
    swift_dynamicCast();
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v22 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)&v11[8 * (v23 >> 6)]) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)&v11[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)&v11[8 * v24];
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)&v11[(v12 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v12;
    uint64_t v13 = v3[6] + 40 * v12;
    *(_OWORD *)uint64_t v13 = v31;
    *(_OWORD *)(v13 + 16) = v32;
    *(void *)(v13 + 32) = v33;
    ++v3[2];
  }
  if (v7)
  {
    unint64_t v14 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v15 = v14 | (v6 << 6);
LABEL_35:
    id v21 = *(id *)(*(void *)(v1 + 48) + 8 * v15);
    goto LABEL_36;
  }
  int64_t v17 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v17 >= v29) {
      goto LABEL_45;
    }
    unint64_t v18 = *(void *)(v30 + 8 * v17);
    uint64_t v19 = v6 + 1;
    if (!v18)
    {
      uint64_t v19 = v6 + 2;
      if (v6 + 2 >= v29) {
        goto LABEL_45;
      }
      unint64_t v18 = *(void *)(v30 + 8 * v19);
      if (!v18)
      {
        uint64_t v19 = v6 + 3;
        if (v6 + 3 >= v29) {
          goto LABEL_45;
        }
        unint64_t v18 = *(void *)(v30 + 8 * v19);
        if (!v18)
        {
          uint64_t v19 = v6 + 4;
          if (v6 + 4 >= v29) {
            goto LABEL_45;
          }
          unint64_t v18 = *(void *)(v30 + 8 * v19);
          if (!v18)
          {
            uint64_t v19 = v6 + 5;
            if (v6 + 5 >= v29) {
              goto LABEL_45;
            }
            unint64_t v18 = *(void *)(v30 + 8 * v19);
            if (!v18)
            {
              uint64_t v20 = v6 + 6;
              while (v29 != v20)
              {
                unint64_t v18 = *(void *)(v30 + 8 * v20++);
                if (v18)
                {
                  uint64_t v19 = v20 - 1;
                  goto LABEL_34;
                }
              }
LABEL_45:
              swift_release();
              sub_1000AA60C();
              return (uint64_t)v3;
            }
          }
        }
      }
    }
LABEL_34:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v19 << 6);
    uint64_t v6 = v19;
    goto LABEL_35;
  }
LABEL_46:
  __break(1u);
  return result;
}

Swift::Int sub_1001D70F4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    id v2 = v1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_1001D7160()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    Hasher._combine(_:)(1uLL);
    id v2 = v1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1001D71F0()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    id v2 = v1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

BOOL sub_1001D7258(void **a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *a2;
  BOOL result = ((unint64_t)*a1 | (unint64_t)*a2) == 0;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    sub_1000A0760(0, (unint64_t *)&unk_100343B90);
    id v6 = v2;
    id v7 = v3;
    char v8 = static NSObject.== infix(_:_:)();

    return v8 & 1;
  }
  return result;
}

uint64_t sub_1001D72E4(uint64_t a1, unint64_t a2, char a3)
{
  if (!a3)
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    unint64_t v5 = 0xD00000000000001BLL;
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    unint64_t v5 = 0xD000000000000010;
LABEL_5:
    unint64_t v9 = v5;
    v6._uint64_t countAndFlagsBits = a1;
    v6._object = (void *)a2;
    String.append(_:)(v6);
    v7._uint64_t countAndFlagsBits = 41;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    return v9;
  }
  if (a1 | a2) {
    return 7105633;
  }
  else {
    return 0x6C61636F6CLL;
  }
}

Swift::Int sub_1001D73EC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  int v3 = *((unsigned __int8 *)v0 + 16);
  Hasher.init(_seed:)();
  if (!v3)
  {
    Swift::UInt v4 = 1;
    goto LABEL_5;
  }
  if (v3 == 1)
  {
    Swift::UInt v4 = 2;
LABEL_5:
    Hasher._combine(_:)(v4);
    String.hash(into:)();
    return Hasher._finalize()();
  }
  if (v1 | v2) {
    Swift::UInt v5 = 3;
  }
  else {
    Swift::UInt v5 = 0;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void sub_1001D7488()
{
  if (!*(unsigned char *)(v0 + 16))
  {
    Swift::UInt v1 = 1;
    goto LABEL_5;
  }
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    Swift::UInt v1 = 2;
LABEL_5:
    Hasher._combine(_:)(v1);
    String.hash(into:)();
    return;
  }
  if (*(_OWORD *)v0 == 0) {
    Swift::UInt v2 = 0;
  }
  else {
    Swift::UInt v2 = 3;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int sub_1001D7520()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  int v3 = *((unsigned __int8 *)v0 + 16);
  Hasher.init(_seed:)();
  if (!v3)
  {
    Swift::UInt v4 = 1;
    goto LABEL_5;
  }
  if (v3 == 1)
  {
    Swift::UInt v4 = 2;
LABEL_5:
    Hasher._combine(_:)(v4);
    String.hash(into:)();
    return Hasher._finalize()();
  }
  if (v1 | v2) {
    Swift::UInt v5 = 3;
  }
  else {
    Swift::UInt v5 = 0;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t sub_1001D75B8(uint64_t a1, uint64_t a2)
{
  return sub_100209C64(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

id sub_1001D75D4()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    id v2 = *(id *)(v0 + 24);
  }
  else
  {
    id v3 = [*(id *)(v0 + 16) persistentStoreCoordinator];
    Swift::UInt v4 = *(void **)(v0 + 24);
    *(void *)(v0 + 24) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

id sub_1001D7640()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    id v2 = *(id *)(v0 + 32);
  }
  else
  {
    id v3 = [*(id *)(v0 + 16) newBackgroundContext];
    [v3 setMergePolicy:NSMergeByPropertyObjectTrumpMergePolicy];
    NSString v4 = String._bridgeToObjectiveC()();
    [v3 setTransactionAuthor:v4];

    id v5 = *(void **)(v0 + 32);
    *(void *)(v0 + 32) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v6 = v1;
  return v2;
}

uint64_t sub_1001D7700@<X0>(uint64_t a1@<X8>)
{
  sub_10009EE78(&qword_100341930);
  uint64_t v3 = ((uint64_t (*)(void))__chkstk_darwin)();
  id v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  Swift::String v7 = &v12[-v6];
  uint64_t v8 = v1 + OBJC_IVAR____TtC15ScreenTimeAgent9DataStore____lazy_storage___logger;
  swift_beginAccess();
  sub_1000D9F9C(v8, (uint64_t)v7, &qword_100341930);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v10 + 32))(a1, v7, v9);
  }
  sub_1000A4FD8((uint64_t)v7, &qword_100341930);
  Logger.init(subsystem:category:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v5, a1, v9);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v5, 0, 1, v9);
  swift_beginAccess();
  sub_1000D1120((uint64_t)v5, v8);
  return swift_endAccess();
}

void *sub_1001D7904()
{
  return sub_1001D791C(&STPersistenceConfigurationNameCloud);
}

void *sub_1001D7910()
{
  return sub_1001D791C(&STPersistenceConfigurationNameLocal);
}

void *sub_1001D791C(void *a1)
{
  id v3 = sub_1001D75D4();
  id v4 = [v3 persistentStores];

  sub_1000A0760(0, (unint64_t *)&qword_100342B90);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    a1 = (void *)*a1;
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (v5 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v5 + 8 * v7);
      uint64_t v1 = v8;
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v10 = [v8 configurationName];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14) {
        goto LABEL_15;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_16;
      }

      ++v7;
      if (v9 == v6) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_15:
  swift_bridgeObjectRelease_n();
LABEL_16:
  swift_bridgeObjectRelease_n();
  return v1;
}

void sub_1001D7AE4(unsigned __int8 *a1@<X8>)
{
  id v2 = sub_1001D7640();
  unsigned __int8 v3 = [v2 hasChanges];

  *a1 = v3;
}

void sub_1001D7B38()
{
  id v0 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();
}

void sub_1001D7BA4()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  unint64_t v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  id v8 = (char *)v29 - v7;
  __chkstk_darwin(v6);
  id v10 = (char *)v29 - v9;
  id v11 = sub_1001D7640();
  unsigned int v12 = [v11 hasChanges];

  if (v12)
  {
    type metadata accessor for STConsistencyChecker();
    id v13 = sub_1001D7640();
    static STConsistencyChecker.validate(managedObjectContext:)();

    if (!v0)
    {
      sub_1001D7700((uint64_t)v10);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        char v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saved changes", v16, 2u);
        swift_slowDealloc();
      }

      int64_t v17 = *(void (**)(char *, uint64_t))(v2 + 8);
      v17(v10, v1);
      id v18 = sub_1001D7640();
      id v32 = 0;
      unsigned int v19 = [v18 save:&v32];

      if (v19)
      {
        id v20 = v32;
      }
      else
      {
        id v24 = v32;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_1001D7700((uint64_t)v5);
        swift_errorRetain();
        swift_errorRetain();
        char v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v25, v26))
        {
          long long v31 = v17;
          BOOL v27 = (uint8_t *)swift_slowAlloc();
          uint64_t v30 = (void *)swift_slowAlloc();
          *(_DWORD *)BOOL v27 = 138412290;
          v29[1] = v27 + 4;
          swift_errorRetain();
          uint64_t v28 = (void *)_swift_stdlib_bridgeErrorToNSError();
          id v32 = v28;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v30 = v28;
          int64_t v17 = v31;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to save changes: %@", v27, 0xCu);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        v17(v5, v1);
        swift_willThrow();
      }
    }
  }
  else
  {
    sub_1001D7700((uint64_t)v8);
    id v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No changes to save", v23, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
  }
}

void sub_1001D8010(void *a1@<X1>, char a2@<W2>, char *a3@<X8>)
{
  id v6 = sub_10020B2D4(a1);
  if (!v3)
  {
    id v45 = v6;
    uint64_t v52 = a3;
    if (a2) {
      id v7 = sub_10020BA68();
    }
    else {
      id v7 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    uint64_t v43 = 0;
    id v44 = v7;
    id v8 = v7;
    id v9 = [self fetchRequestMatchingBlueprintsForUser:v45 fromOrganization:v7 includeTombstones:1];
    id v57 = 0;
    id v10 = [v9 execute:&v57];
    id v11 = v57;
    if (v10)
    {
      unsigned int v12 = v10;
      sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
      unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v14 = v11;

      os_log_type_t v15 = v52;
      static Date.distantPast.getter();
      if (v13 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v16 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v16)
        {
LABEL_7:
          if (v16 < 1) {
            __break(1u);
          }
          uint64_t v17 = 0;
          id v48 = v9;
          unint64_t v49 = v13 & 0xC000000000000001;
          unint64_t v47 = v13;
          uint64_t v50 = v16;
          while (1)
          {
            uint64_t v54 = v17;
            id v18 = v49
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                : *(id *)(v13 + 8 * v17 + 32);
            unsigned int v19 = v18;
            uint64_t v20 = type metadata accessor for Date();
            uint64_t v55 = &v43;
            uint64_t v21 = *(void *)(v20 - 8);
            uint64_t v22 = *(void *)(v21 + 64);
            __chkstk_darwin(v20);
            unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
            id v24 = (char *)&v43 - v23;
            id v56 = v19;
            id v25 = [v19 modificationDate];
            uint64_t v26 = sub_10009EE78(&qword_100342B30);
            uint64_t v53 = &v43;
            uint64_t v27 = *(void *)(*(void *)(v26 - 8) + 64);
            uint64_t v28 = __chkstk_darwin(v26 - 8);
            if (!v25) {
              break;
            }
            uint64_t v51 = (char *)&v43;
            __chkstk_darwin(v28);
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            int64_t v29 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
            v29((char *)&v43 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v43 - v23, v20);
            uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
            v30((char *)&v43 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v20);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))((char *)&v43 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v20) == 1)
            {
              os_log_type_t v15 = v52;
LABEL_18:
              (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v24, v15, v20);
              sub_1000A4FD8((uint64_t)&v43 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100342B30);
              goto LABEL_20;
            }
            v29(v24, (char *)&v43 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), v20);
LABEL_20:
            char v31 = static Date.> infix(_:_:)();
            id v32 = *(uint64_t (**)(char *, uint64_t))(v21 + 8);
            uint64_t v33 = v32(v24, v20);
            if (v31)
            {
              uint64_t v55 = &v43;
              __chkstk_darwin(v33);
              unint64_t v34 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
              uint64_t v51 = (char *)&v43 - v34;
              id v35 = [v56 modificationDate];
              uint64_t v53 = &v43;
              uint64_t v36 = __chkstk_darwin(v35);
              uint64_t v37 = (char *)&v43 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
              if (v36)
              {
                uint64_t v46 = &v43;
                __chkstk_darwin(v36);
                static Date._unconditionallyBridgeFromObjectiveC(_:)();

                unint64_t v38 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
                v38(v37, (char *)&v43 - v34, v20);
                v30(v37, 0, 1, v20);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v37, 1, v20) != 1)
                {

                  uint64_t v39 = v52;
                  v32(v52, v20);
                  os_log_type_t v40 = v51;
                  v38(v51, v37, v20);
LABEL_26:
                  unint64_t v13 = v47;
                  id v9 = v48;
                  v38(v39, v40, v20);
                  os_log_type_t v15 = v39;
                  goto LABEL_10;
                }
              }
              else
              {
                v30(v37, 1, 1, v20);
              }
              uint64_t v41 = v51;
              static Date.distantPast.getter();

              uint64_t v39 = v52;
              v32(v52, v20);
              os_log_type_t v40 = v41;
              sub_1000A4FD8((uint64_t)v37, &qword_100342B30);
              unint64_t v38 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
              goto LABEL_26;
            }

            os_log_type_t v15 = v52;
            unint64_t v13 = v47;
            id v9 = v48;
LABEL_10:
            uint64_t v17 = v54 + 1;
            if (v50 == v54 + 1) {
              goto LABEL_30;
            }
          }
          uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
          v30((char *)&v43 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v20);
          goto LABEL_18;
        }
      }
LABEL_30:

      swift_bridgeObjectRelease();
    }
    else
    {
      id v42 = v57;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

void sub_1001D86DC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(char **)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t)[self fetchRequestMatchingExpiredBlueprints];
  uint64_t v58 = a1;
  id v8 = sub_1001D7640();
  id v9 = (void *)sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
  uint64_t v10 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    return;
  }
  unint64_t v11 = v10;

  id v12 = sub_10020B2D4(0);
  id v13 = sub_10020BE78(v12);
  uint64_t v15 = 0;
  if (v11 >> 62)
  {
LABEL_36:
    id v51 = v13;
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v13 = v51;
    if (v16) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16)
    {
LABEL_5:
      uint64_t v50 = v9;
      id v51 = v13;
      id v48 = v12;
      uint64_t v44 = v7;
      uint64_t v45 = v15;
      uint64_t v54 = (void (**)(char *, uint64_t))(v4 + 8);
      unint64_t v55 = v11 & 0xC000000000000001;
      uint64_t v7 = 4;
      uint64_t v46 = STBlueprintTypeUsageLimitOverride;
      uint64_t v47 = STBlueprintTypeUsageLimit;
      *(void *)&long long v14 = 138412290;
      long long v49 = v14;
      uint64_t v57 = v3;
      uint64_t v52 = v16;
      unint64_t v53 = v11;
      while (1)
      {
        id v12 = (id)(v7 - 4);
        if (v55) {
          id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v13 = *(id *)(v11 + 8 * v7);
        }
        id v9 = v13;
        uint64_t v15 = v7 - 3;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
          goto LABEL_36;
        }
        sub_1001D7700((uint64_t)v6);
        uint64_t v22 = v9;
        unint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.default.getter();
        uint64_t v4 = (char *)v24;
        if (os_log_type_enabled(v23, v24))
        {
          uint64_t v25 = swift_slowAlloc();
          uint64_t v26 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v25 = v49;
          *(void *)(v25 + 4) = v22;
          *uint64_t v26 = v22;
          _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v4, "Deleting Expired Blueprint %@", (uint8_t *)v25, 0xCu);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          uint64_t v3 = v57;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          unint64_t v23 = v22;
        }

        (*v54)(v6, v3);
        id v27 = [v22 type];
        if (v27) {
          break;
        }
LABEL_9:
        id v21 = sub_1001D7640();
        [v21 deleteObject:v22];

        ++v7;
        unint64_t v11 = v53;
        if (v15 == v52)
        {

          swift_bridgeObjectRelease();
          uint64_t v7 = v44;
          id v12 = v48;
          goto LABEL_38;
        }
      }
      uint64_t v28 = v27;
      uint64_t v4 = v6;
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v30 = v29;

      id v31 = [v51 blueprints];
      if (!v31)
      {
        __break(1u);
        return;
      }
      id v32 = v31;
      sub_1000AA614(&qword_100345310, (unint64_t *)&unk_100342BB0);
      uint64_t v33 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v32) = sub_1001D6858(v22, v33, (unint64_t *)&unk_100342BB0);
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0) {
        goto LABEL_8;
      }
      id v34 = [v22 users];
      if (v34)
      {
        id v35 = v34;
        uint64_t v4 = (char *)STCoreUser_ptr;
        sub_1000A0760(0, &qword_1003431E0);
        sub_1000AA614((unint64_t *)&qword_100343B80, &qword_1003431E0);
        uint64_t v36 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v36 = &_swiftEmptySetSingleton;
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
          && _CocoaArrayWrapper.endIndex.getter())
        {
          sub_1000A03C4((unint64_t)_swiftEmptyArrayStorage);
          uint64_t v36 = v42;
        }
      }
      char v37 = sub_1001D6858(v48, (uint64_t)v36, &qword_1003431E0);
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0)
      {
LABEL_8:
        swift_bridgeObjectRelease();
        uint64_t v3 = v57;
        goto LABEL_9;
      }
      if (v56 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v30 != v38)
      {
        char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v39) {
          goto LABEL_7;
        }
        if (v56 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v30 != v40)
        {
          char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v41 & 1) == 0) {
            goto LABEL_8;
          }
          goto LABEL_7;
        }
      }
      swift_bridgeObjectRelease();
LABEL_7:
      id v17 = [v22 identifier];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      sub_1001AFAA4(v18, v20, v56, v30);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
  }

  swift_bridgeObjectRelease();
LABEL_38:
}

void sub_1001D8D3C(uint64_t a1)
{
  uint64_t v40 = a1;
  uint64_t v2 = type metadata accessor for Logger();
  id v3 = *(id *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = (id)type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
  if (!v1)
  {
    id v23 = v9;
    goto LABEL_32;
  }
  v41[1] = v1;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_24:
    swift_errorRelease();
    return;
  }
  if (swift_getEnumCaseMultiPayload() != 7)
  {
    sub_1000C9DB4(v8);
    goto LABEL_24;
  }
  swift_errorRelease();
  if (*(void *)v8)
  {
    id v6 = [self fetchRequest];
    v41[0] = 0;
    id v10 = [v6 execute:v41];
    uint64_t v8 = v41[0];
    if (!v10)
    {
LABEL_38:
      id v30 = (id)v8;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      goto LABEL_24;
    }
    unint64_t v11 = v10;
    sub_1000A0760(0, &qword_100343A50);
    unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v13 = (id)v8;
    uint64_t v8 = v12;

    unint64_t v39 = v12;
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if ((v14 & 0x8000000000000000) == 0) {
        goto LABEL_50;
      }
      __break(1u);
    }
    else
    {
      uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (1)
      {
        unint64_t v35 = v14 - 1;
        uint64_t v36 = (uint64_t)v6;
        uint64_t v15 = sub_1000DB2AC(0, (v14 - 1) & ~((v14 - 1) >> 63), v14, 0, v14);
        uint64_t v37 = v14;
        uint64_t v17 = (v16 & 1) != 0 ? v14 : v15;
        if (v17 < 0) {
          break;
        }
        if (v17)
        {
          unint64_t v38 = v8 & 0xC000000000000001;
          if ((v8 & 0xC000000000000001) == 0
            && (unint64_t)(v17 - 1) >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            goto LABEL_48;
          }
          uint64_t v18 = 0;
          uint64_t v14 = (uint64_t)v3 + 8;
          do
          {
            if (v38) {
              id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v19 = *(id *)(v8 + 8 * v18 + 32);
            }
            id v6 = v19;
            sub_1001D7700((uint64_t)v5);
            uint64_t v20 = Logger.logObject.getter();
            os_log_type_t v21 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v20, v21))
            {
              uint64_t v22 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v22 = 0;
              _os_log_impl((void *)&_mh_execute_header, v20, v21, "Deleting duplicate cloud org.", v22, 2u);
              swift_slowDealloc();
            }
            ++v18;

            (*(void (**)(char *, uint64_t))v14)(v5, v2);
            id v3 = sub_1001D7640();
            [v3 deleteObject:v6];

            uint64_t v8 = v39;
          }
          while (v17 != v18);
        }
        if (v37)
        {
          uint64_t v14 = v36;
          if ((v8 & 0xC000000000000001) != 0) {
            goto LABEL_46;
          }
          if (v35 >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_48:
            __break(1u);
          }
          id v24 = *(id *)(v8 + 8 * v35 + 32);
          goto LABEL_29;
        }
        swift_bridgeObjectRelease();
        __break(1u);
LABEL_50:
        uint64_t v8 = v39;
      }
    }
    __break(1u);
LABEL_46:
    id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_29:
    id v23 = v24;

    swift_bridgeObjectRelease();
  }
  else
  {
    id v25 = sub_1001D7640();
    id v23 = [objc_allocWithZone((Class)STiCloudOrganization) initWithContext:v25];
  }
  swift_errorRelease();
LABEL_32:
  id v26 = sub_10020B2D4(0);
  id v27 = [v26 cloudSettings];

  if (v27)
  {
    id v28 = [v26 cloudSettings];
    if (v28) {
      goto LABEL_40;
    }
    __break(1u);
  }
  id v29 = [v23 settings];

  if (v29)
  {
    id v28 = [v23 settings];
    if (!v28)
    {
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    id v31 = sub_1001D7640();
    id v28 = [objc_allocWithZone((Class)STiCloudOrganizationSettings) initWithContext:v31];
  }
LABEL_40:
  id v32 = [v28 organization];

  if (!v32) {
    [v28 setOrganization:v23];
  }
  id v33 = v28;
  [v26 setCloudSettings:v33];
}

void sub_1001D9340(unsigned __int8 *a1@<X8>)
{
  id v3 = sub_10020BC8C((uint64_t)STScreenTimeSettings_ptr, &qword_1003415C0, (id)0xD);
  if (!v1)
  {
    uint64_t v4 = v3;
    unsigned __int8 v5 = [v3 familySetupComplete];

    *a1 = v5;
  }
}

void sub_1001D93A8(uint64_t a1, char a2)
{
  id v4 = sub_10020BC8C((uint64_t)STScreenTimeSettings_ptr, &qword_1003415C0, (id)0xD);
  if (!v2)
  {
    unsigned __int8 v5 = v4;
    [v4 setFamilySetupComplete:a2 & 1];
  }
}

void sub_1001D940C()
{
  id v0 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();
}

void sub_1001D9488()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v5 = (void *)sub_1001E05E8(0, 0, 2);
  if (!v0)
  {
    id v6 = v5;
    id v7 = [v5 localUserDeviceState];
    if (v7)
    {
      id v8 = v7;
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      [v8 setLastFamilyCheckinDate:isa];
    }
    else
    {
      sub_1001D7700((uint64_t)v4);
      id v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        unint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Missing local user device state when setting last family checkin date", v12, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
  }
}

void sub_1001D9690(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = (void *)sub_1001E05E8(0, 0, 2);
  if (!v1)
  {
    id v8 = v7;
    id v9 = [v7 localUserDeviceState];
    if (v9)
    {
      id v10 = v9;
      id v11 = [v10 lastFamilyCheckinDate];
      if (v11)
      {
        unint64_t v12 = v11;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v13 = type metadata accessor for Date();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 0, 1, v13);
      }
      else
      {

        uint64_t v17 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a1, 1, 1, v17);
      }
    }
    else
    {
      sub_1001D7700((uint64_t)v6);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        char v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Missing local user device state when fetching last family checkin date", v16, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      type metadata accessor for DataStore.DataStoreError(0);
      sub_1000AA560();
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
  }
}

void sub_1001D991C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [self fetchRequest];
  sub_1000A0760(0, (unint64_t *)&unk_100343A80);
  sub_10009EE78(&qword_1003414D8);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100286230;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1000A5124();
  *(void *)(v8 + 32) = 0xD000000000000010;
  *(void *)(v8 + 40) = 0x80000001002960F0;
  id v9 = NSPredicate.init(format:_:)();
  [v7 setPredicate:v9];

  id v10 = sub_1001D7640();
  sub_1000A0760(0, &qword_1003415D0);
  uint64_t v11 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    return;
  }
  unint64_t v12 = v11;

  if (!(v12 >> 62))
  {
    uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v14) {
      goto LABEL_5;
    }
LABEL_16:

    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v14) {
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v32 = v14;
  if (v14 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v28 = 0;
    id v29 = v7;
    uint64_t v15 = v4;
    uint64_t v16 = 0;
    unint64_t v34 = v12 & 0xC000000000000001;
    id v33 = (void (**)(char *, uint64_t))(v15 + 8);
    *(void *)&long long v13 = 138412290;
    long long v30 = v13;
    uint64_t v17 = v32;
    id v31 = v6;
    do
    {
      if (v34) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v20 = *(id *)(v12 + 8 * v16 + 32);
      }
      os_log_type_t v21 = v20;
      sub_1001D7700((uint64_t)v6);
      uint64_t v22 = v21;
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v23))
      {
        uint64_t v24 = a1;
        uint64_t v25 = v3;
        uint64_t v26 = swift_slowAlloc();
        id v27 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = v30;
        *(void *)(v26 + 4) = v22;
        void *v27 = v22;
        _os_log_impl((void *)&_mh_execute_header, v18, v23, "Deleting Orphaned Device %@", (uint8_t *)v26, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        uint64_t v17 = v32;
        swift_slowDealloc();
        uint64_t v3 = v25;
        a1 = v24;
        id v6 = v31;
        swift_slowDealloc();
      }
      else
      {

        uint64_t v18 = v22;
      }
      ++v16;

      (*v33)(v6, v3);
      id v19 = sub_1001D7640();
      [v19 deleteObject:v22];
    }
    while (v17 != v16);

    swift_bridgeObjectRelease();
  }
}

void sub_1001D9D1C()
{
  uint64_t v1 = type metadata accessor for Logger();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DataStore.DataStoreError(0);
  __chkstk_darwin(v2);
  uint64_t v3 = sub_10020B2D4(0);
  if (v0) {
    return;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (void *)STBlueprintTypeDowntime;
  sub_1001DA288(STBlueprintTypeDowntime, v3, 0);
  id v27 = v5;
  id v6 = (void *)STBlueprintTypeAlwaysAllowedApps;
  sub_1001DA288(STBlueprintTypeAlwaysAllowedApps, v4, 0);
  uint64_t v26 = (void *)STBlueprintTypeRestrictions;
  sub_1001DA288(STBlueprintTypeRestrictions, v4, 0);
  uint64_t v25 = (void *)STBlueprintTypeManagedUser;
  sub_1001DA288(STBlueprintTypeManagedUser, v4, 0);
  uint64_t v22 = v6;

  id v7 = sub_1001D7640();
  sub_10009EE78((uint64_t *)&unk_100342B00);
  NSManagedObjectContext.performAndWait<A>(_:)();

  int64_t v8 = 0;
  uint64_t v9 = *(void *)(v28 + 56);
  uint64_t v23 = v28 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(v28 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v24 = (unint64_t)(v10 + 63) >> 6;
  if ((v11 & v9) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v13 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v13 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v8 << 6))
  {
    uint64_t v18 = *(void **)(*(void *)(v28 + 48) + 8 * i);
    id v19 = v18;
    id v20 = sub_10020B2D4(v18);
    sub_1001DA288(v27, v20, 1);
    sub_1001DA288(v6, v20, 1);
    sub_1001DA288(v26, v20, 1);
    sub_1001DA288(v25, v20, 1);

    if (v12) {
      goto LABEL_7;
    }
LABEL_8:
    if (__OFADD__(v8++, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v8 >= v24) {
      goto LABEL_27;
    }
    unint64_t v16 = *(void *)(v23 + 8 * v8);
    if (!v16) {
      break;
    }
LABEL_16:
    unint64_t v12 = (v16 - 1) & v16;
  }
  int64_t v17 = v8 + 1;
  if (v8 + 1 >= v24) {
    goto LABEL_27;
  }
  unint64_t v16 = *(void *)(v23 + 8 * v17);
  if (v16) {
    goto LABEL_15;
  }
  int64_t v17 = v8 + 2;
  if (v8 + 2 >= v24) {
    goto LABEL_27;
  }
  unint64_t v16 = *(void *)(v23 + 8 * v17);
  if (v16)
  {
LABEL_15:
    int64_t v8 = v17;
    goto LABEL_16;
  }
  int64_t v21 = v8 + 3;
  if (v8 + 3 >= v24)
  {
LABEL_27:

    swift_release();
    return;
  }
  unint64_t v16 = *(void *)(v23 + 8 * v21);
  if (v16)
  {
    v8 += 3;
    id v6 = v22;
    goto LABEL_16;
  }
  id v6 = v22;
  while (1)
  {
    int64_t v8 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v8 >= v24) {
      goto LABEL_27;
    }
    unint64_t v16 = *(void *)(v23 + 8 * v8);
    ++v21;
    if (v16) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
}

void sub_1001DA288(void *a1, NSObject *a2, char a3)
{
  uint64_t v5 = v3;
  uint64_t v103 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v103 - 8);
  uint64_t v10 = __chkstk_darwin(v103);
  unint64_t v12 = (char *)v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v102 = (char *)v87 - v13;
  if (a3)
  {
    id v14 = sub_10020BA68();
    uint64_t v15 = v4;
    if (v4) {
      return;
    }
  }
  else
  {
    id v14 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    uint64_t v15 = v4;
    if (v4) {
      return;
    }
  }
  unint64_t v16 = v14;
  uint64_t v88 = v9;
  uint64_t v101 = v12;
  uint64_t v92 = v15;
  int64_t v17 = a2;
  id v18 = [self fetchRequestMatchingBlueprintsForUser:a2 ofType:a1 fromOrganization:v14 includeTombstones:0];
  sub_10009EE78(&qword_100342BE0);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1002869B0;
  id v20 = objc_allocWithZone((Class)NSSortDescriptor);
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 initWithKey:v21 ascending:1];

  *(void *)(v19 + 32) = v22;
  id v104 = (id)v19;
  specialized Array._endMutation()();
  sub_1000A0760(0, &qword_100345378);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v18 setSortDescriptors:isa];

  id v104 = 0;
  id v24 = [v18 execute:&v104];
  id v25 = v104;
  if (!v24)
  {
    id v32 = v104;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  uint64_t v26 = v24;
  id v91 = v18;
  uint64_t v27 = sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
  unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v29 = v25;

  if (v28 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v31 = (uint64_t)v101;
  if (v30 == 1)
  {

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v33 = v92;
  id v34 = sub_1001FF2B4(a1, 0, v17, v16);
  if (!v33)
  {
    unint64_t v36 = (unint64_t)sub_10020A89C(v28, (uint64_t)v34, v35);
    uint64_t v92 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v36 >> 62) {
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v38 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v39 = (uint64_t)v102;
    v87[1] = v27;
    uint64_t v93 = v5;
    uint64_t v94 = v16;
    uint64_t v101 = (char *)v31;
    if (v38)
    {
      if (v38 < 1)
      {
        __break(1u);
        goto LABEL_52;
      }
      uint64_t v40 = 0;
      unint64_t v97 = (void (**)(uint64_t, uint64_t))(v88 + 8);
      uint64_t v98 = (void *)(v36 & 0xC000000000000001);
      *(void *)&long long v37 = 136446722;
      long long v90 = v37;
      uint64_t v89 = (char *)&type metadata for Any + 8;
      unint64_t v99 = (void (**)(char *, uint64_t))v38;
      BOOL v100 = (void *)v36;
      do
      {
        if (v98) {
          id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v42 = *(id *)(v36 + 8 * (void)v40 + 32);
        }
        uint64_t v43 = v42;
        sub_1001D7700(v39);
        id v44 = v43;
        id v45 = v16;
        id v46 = v44;
        id v47 = v45;
        id v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v50 = swift_slowAlloc();
          id v51 = (void *)swift_slowAlloc();
          uint64_t v96 = (void *)swift_slowAlloc();
          id v104 = v96;
          *(_DWORD *)uint64_t v50 = v90;
          id v52 = [v46 identifier];
          uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          *(void *)&long long v95 = v48;
          unint64_t v55 = v54;

          uint64_t v56 = v53;
          unint64_t v16 = v94;
          *(void *)(v50 + 4) = sub_1000A2E70(v56, v55, (uint64_t *)&v104);

          swift_bridgeObjectRelease();
          *(_WORD *)(v50 + 12) = 2114;
          *(void *)(v50 + 14) = v47;
          *id v51 = v16;

          *(_WORD *)(v50 + 22) = 2112;
          *(void *)(v50 + 24) = v46;
          v51[1] = v46;

          uint64_t v57 = (void *)v95;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v95, v49, "Blueprint Identifier:%{public}s shouldn't exist in %{public}@. Deleting blueprint: %@", (uint8_t *)v50, 0x20u);
          sub_10009EE78(&qword_100342AB0);
          swift_arrayDestroy();
          uint64_t v31 = (uint64_t)v101;
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v39 = (uint64_t)v102;
          swift_slowDealloc();
        }
        else
        {
        }
        (*v97)(v39, v103);
        uint64_t v40 = (void (**)(char *, uint64_t))((char *)v40 + 1);
        id v41 = sub_1001D7640();
        [v41 deleteObject:v46];

        unint64_t v36 = (unint64_t)v100;
      }
      while (v99 != v40);
    }
    swift_bridgeObjectRelease();
    id v104 = 0;
    id v58 = v91;
    id v59 = [v91 execute:&v104];
    id v60 = v104;
    if (!v59)
    {
      id v86 = v104;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return;
    }
    uint64_t v61 = v59;
    unint64_t v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v63 = v60;

    uint64_t v96 = (void *)v62;
    if (!(v62 >> 62))
    {
      uint64_t v64 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_29;
    }
LABEL_52:
    swift_bridgeObjectRetain();
    uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v64 < 0)
    {
      __break(1u);
      goto LABEL_54;
    }
    unint64_t v16 = v94;
    unint64_t v62 = (unint64_t)v96;
LABEL_29:
    if (v64 <= 1) {
      uint64_t v65 = 1;
    }
    else {
      uint64_t v65 = v64;
    }
    uint64_t v66 = sub_1000DB2AC(0, v65 - 1, v64, 0, v64);
    if (v68) {
      uint64_t v69 = v64;
    }
    else {
      uint64_t v69 = v66;
    }
    if ((v69 & 0x8000000000000000) == 0)
    {
      if (!v69)
      {
LABEL_47:

        swift_bridgeObjectRelease();
        return;
      }
      unint64_t v102 = (char *)(v62 & 0xC000000000000001);
      if ((v62 & 0xC000000000000001) != 0
        || (unint64_t)(v69 - 1) < *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v70 = 0;
        unint64_t v99 = (void (**)(char *, uint64_t))(v88 + 8);
        *(void *)&long long v67 = 136446466;
        long long v95 = v67;
        *(void *)&long long v90 = (char *)&type metadata for Any + 8;
        BOOL v100 = (void *)v69;
        do
        {
          if (v102) {
            id v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v72 = *(id *)(v62 + 8 * (void)v70 + 32);
          }
          uint64_t v73 = v72;
          sub_1001D7700(v31);
          id v74 = v16;
          id v75 = v73;
          id v76 = v74;
          id v77 = v75;
          uint64_t v78 = Logger.logObject.getter();
          uint64_t v79 = v31;
          os_log_type_t v80 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v78, v80))
          {
            uint64_t v81 = swift_slowAlloc();
            unint64_t v97 = (void (**)(uint64_t, uint64_t))swift_slowAlloc();
            uint64_t v98 = (void *)swift_slowAlloc();
            id v104 = v98;
            *(_DWORD *)uint64_t v81 = v95;
            id v82 = [v77 identifier];
            uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v85 = v84;

            unint64_t v16 = v94;
            *(void *)(v81 + 4) = sub_1000A2E70(v83, v85, (uint64_t *)&v104);

            unint64_t v62 = (unint64_t)v96;
            swift_bridgeObjectRelease();
            *(_WORD *)(v81 + 12) = 2114;
            *(void *)(v81 + 14) = v76;
            *unint64_t v97 = (void (*)(uint64_t, uint64_t))v16;

            _os_log_impl((void *)&_mh_execute_header, v78, v80, "Deleting duplicate blueprint: %{public}s from: %{public}@.", (uint8_t *)v81, 0x16u);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v31 = (uint64_t)v101;
            (*v99)(v101, v103);
          }
          else
          {

            (*v99)((char *)v79, v103);
            uint64_t v31 = v79;
          }
          uint64_t v70 = (void *)((char *)v70 + 1);
          id v71 = sub_1001D7640();
          [v71 deleteObject:v77];
        }
        while (v100 != v70);
        goto LABEL_47;
      }
LABEL_55:
      __break(1u);
    }
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }

  swift_bridgeObjectRelease();
}

void sub_1001DACD4(uint64_t a1, void *a2, char a3)
{
  int v6 = a3 & 1;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v81 = *(char **)(v7 - 8);
  id v82 = (char *)v7;
  uint64_t v8 = __chkstk_darwin(v7);
  id v76 = (char *)v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v78 = (uint64_t (**)(char *, uint64_t, uint64_t))((char *)v73 - v11);
  uint64_t v12 = __chkstk_darwin(v10);
  os_log_type_t v80 = (void (*)(char *, uint64_t, uint64_t))((char *)v73 - v13);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v73 - v14;
  uint64_t v16 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v17 = __chkstk_darwin(v16);
  id v77 = (void (**)(char *, uint64_t))((char *)v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v79 = (uint64_t (**)(char *, uint64_t, uint64_t))((char *)v73 - v20);
  uint64_t v21 = __chkstk_darwin(v19);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v73 - v22;
  id v24 = sub_1001D7640();
  uint64_t v85 = a1;
  uint64_t v86 = a1;
  uint64_t v87 = a2;
  uint64_t v83 = a2;
  unsigned int v84 = v6;
  char v88 = v6;
  type metadata accessor for Downtime();
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v3)
  {

    uint64_t v89 = v3;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 23)
      {
        swift_errorRelease();
        id v25 = (void *)*((void *)v23 + 1);

        sub_1001D7700((uint64_t)v15);
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          unint64_t v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v28 = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "No downtime blueprint during de-dupe of configurations.", v28, 2u);
          swift_slowDealloc();
        }

        (*((void (**)(char *, char *))v81 + 1))(v15, v82);
        swift_errorRelease();
        goto LABEL_10;
      }
      sub_1000C9DB4((uint64_t)v23);
    }
    swift_errorRelease();
    return;
  }

  sub_1001D2FC8();
  swift_release();
LABEL_10:
  uint64_t v29 = v85;
  id v30 = sub_1001D7640();
  __chkstk_darwin(v30);
  uint64_t v31 = v83;
  v73[-4] = v29;
  v73[-3] = v31;
  LOBYTE(v73[-2]) = v84;
  type metadata accessor for AlwaysAllowed();
  NSManagedObjectContext.performAndWait<A>(_:)();

  sub_1000A5170();
  swift_release();
  uint64_t v32 = v85;
  id v33 = sub_1001D7640();
  __chkstk_darwin(v33);
  v73[-4] = v32;
  v73[-3] = v31;
  char v34 = v84;
  LOBYTE(v73[-2]) = v84;
  type metadata accessor for ManagedUser();
  NSManagedObjectContext.performAndWait<A>(_:)();

  sub_10010CE34();
  swift_release();
  id v35 = sub_1001D7640();
  __chkstk_darwin(v35);
  v73[-4] = v32;
  v73[-3] = v31;
  LOBYTE(v73[-2]) = v34;
  type metadata accessor for Restrictions();
  NSManagedObjectContext.performAndWait<A>(_:)();

  sub_10019D8B8();
  swift_release();
  id v36 = sub_1001D7640();
  __chkstk_darwin(v36);
  v73[-4] = v32;
  v73[-3] = v31;
  LOBYTE(v73[-2]) = v34;
  uint64_t v37 = sub_10009EE78(&qword_100345408);
  NSManagedObjectContext.performAndWait<A>(_:)();
  v73[1] = v37;

  uint64_t v38 = v89;
  uint64_t v39 = sub_10009EE78(&qword_100342B20);
  v73[3] = v73;
  __chkstk_darwin(v39 - 8);
  v73[0] = v40;
  id v82 = (char *)v73 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = *(void *)(v38 + 16);
  uint64_t v73[2] = v38;
  if (v41)
  {
    uint64_t v42 = type metadata accessor for UUID();
    uint64_t v43 = *(char **)(v42 - 8);
    id v44 = v43;
    uint64_t v45 = v38 + ((v44[80] + 32) & ~(unint64_t)v44[80]);
    uint64_t v74 = *((void *)v43 + 9);
    uint64_t v81 = v43 + 56;
    id v47 = (uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 16);
    id v46 = (void (*)(char *, uint64_t, uint64_t))*((void *)v43 + 2);
    uint64_t v79 = v47;
    os_log_type_t v80 = v46;
    id v75 = v44 + 32;
    id v76 = v44;
    id v77 = (void (**)(char *, uint64_t))(v44 + 8);
    uint64_t v78 = (uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
    while (1)
    {
      id v48 = v82;
      v80(v82, v45, v42);
      (*(void (**)(char *, void, uint64_t, uint64_t))v81)(v48, 0, 1, v42);
      uint64_t v49 = (*v78)(v48, 1, v42);
      if (v49 == 1) {
        break;
      }
      __chkstk_darwin(v49);
      id v51 = (char *)v73 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v48, v42);
      id v53 = sub_1001D7640();
      __chkstk_darwin(v53);
      v73[-4] = v32;
      v73[-3] = v83;
      LOBYTE(v73[-2]) = v54;
      v73[-1] = v51;
      type metadata accessor for UsageLimit();
      NSManagedObjectContext.performAndWait<A>(_:)();

      sub_100211BC0();
      (*v77)(v51, v42);
      swift_release();
      v45 += v74;
      --v41;
      uint64_t v32 = v85;
      char v34 = v84;
      if (!v41) {
        goto LABEL_16;
      }
    }
  }
  else
  {
LABEL_16:
    uint64_t v55 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v82, 1, 1, v55);
  }
  swift_bridgeObjectRelease();
  id v56 = sub_1001D7640();
  __chkstk_darwin(v56);
  uint64_t v57 = v83;
  v73[-4] = v32;
  v73[-3] = v57;
  LOBYTE(v73[-2]) = v34;
  NSManagedObjectContext.performAndWait<A>(_:)();

  id v75 = v73;
  uint64_t v58 = v89;
  __chkstk_darwin(v59);
  uint64_t v61 = (char *)v73 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = *(void *)(v58 + 16);
  uint64_t v74 = v58;
  if (v62)
  {
    uint64_t v63 = type metadata accessor for UUID();
    uint64_t v64 = *(void *)(v63 - 8);
    uint64_t v65 = v64;
    uint64_t v66 = v58 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
    id v76 = *(char **)(v64 + 72);
    id v82 = (char *)(v64 + 56);
    char v68 = (void (*)(char *, uint64_t, uint64_t))(v64 + 16);
    long long v67 = *(char **)(v64 + 16);
    os_log_type_t v80 = v68;
    uint64_t v81 = v67;
    uint64_t v78 = (uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 32);
    uint64_t v79 = (uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48);
    id v77 = (void (**)(char *, uint64_t))(v65 + 8);
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v81)(v61, v66, v63);
      (*(void (**)(char *, void, uint64_t, uint64_t))v82)(v61, 0, 1, v63);
      uint64_t v69 = (*v79)(v61, 1, v63);
      if (v69 == 1) {
        break;
      }
      __chkstk_darwin(v69);
      id v71 = (void *)((char *)v73 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, char *, uint64_t))(v65 + 32))(v71, v61, v63);
      sub_1001E2B88(v71, v83, v84);
      sub_1000AA658();
      (*v77)((char *)v71, v63);
      swift_release();
      v66 += (uint64_t)v76;
      if (!--v62) {
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    uint64_t v72 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v61, 1, 1, v72);
  }
  swift_bridgeObjectRelease();
}

void sub_1001DBC4C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  unint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = sub_10020B2D4(0);
  if (!v1)
  {
    uint64_t v8 = v7;
    unint64_t v42 = v4;
    uint64_t v40 = v3;
    id v37 = [self fetchRequest];
    unsigned int v9 = [v8 isParent];
    sub_10009EE78(&qword_1003414D8);
    uint64_t v39 = a1;
    if (v9)
    {
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_100286550;
      sub_1000A0760(0, (unint64_t *)&unk_100343A80);
      *(void *)(v10 + 56) = &type metadata for String;
      unint64_t v11 = sub_1000A5124();
      *(void *)(v10 + 64) = v11;
      *(void *)(v10 + 32) = 1919251317;
      *(void *)(v10 + 40) = 0xE400000000000000;
      *(void *)(v10 + 96) = sub_1000A0760(0, &qword_1003431E0);
      uint64_t v12 = sub_1000AA614(&qword_1003452F0, &qword_1003431E0);
      *(void *)(v10 + 72) = v8;
      *(void *)(v10 + 136) = &type metadata for String;
      *(void *)(v10 + 144) = v11;
      *(void *)(v10 + 104) = v12;
      *(void *)(v10 + 112) = 0xD00000000000001DLL;
      *(void *)(v10 + 120) = 0x80000001002960B0;
    }
    else
    {
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_100284C10;
      sub_1000A0760(0, (unint64_t *)&unk_100343A80);
      *(void *)(v14 + 56) = &type metadata for String;
      *(void *)(v14 + 64) = sub_1000A5124();
      *(void *)(v14 + 32) = 1919251317;
      *(void *)(v14 + 40) = 0xE400000000000000;
      *(void *)(v14 + 96) = sub_1000A0760(0, &qword_1003431E0);
      *(void *)(v14 + 104) = sub_1000AA614(&qword_1003452F0, &qword_1003431E0);
      *(void *)(v14 + 72) = v8;
    }
    id v13 = v8;
    uint64_t v15 = NSPredicate.init(format:_:)();
    id v16 = v37;
    [v37 setPredicate:v15];

    id v17 = sub_1001D7640();
    sub_1000A0760(0, &qword_1003415E0);
    uint64_t v18 = NSManagedObjectContext.fetch<A>(_:)();
    uint64_t v19 = v40;
    unint64_t v20 = v18;

    if (v20 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v22) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v22 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v22)
      {
LABEL_7:
        id v35 = v8;
        uint64_t v36 = 0;
        if (v22 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v23 = 0;
        unint64_t v41 = v20 & 0xC000000000000001;
        id v24 = (void (**)(char *, uint64_t))(v42 + 8);
        *(void *)&long long v21 = 138412290;
        long long v38 = v21;
        unint64_t v42 = v20;
        uint64_t v25 = v22;
        do
        {
          if (v41) {
            id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v28 = *(id *)(v20 + 8 * v23 + 32);
          }
          uint64_t v29 = v28;
          sub_1001D7700((uint64_t)v6);
          id v30 = v29;
          uint64_t v26 = Logger.logObject.getter();
          os_log_type_t v31 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v26, v31))
          {
            uint64_t v32 = swift_slowAlloc();
            id v33 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v32 = v38;
            *(void *)(v32 + 4) = v30;
            void *v33 = v30;
            _os_log_impl((void *)&_mh_execute_header, v26, v31, "Deleting Unexpected UserDeviceState %@", (uint8_t *)v32, 0xCu);
            sub_10009EE78(&qword_100342AB0);
            swift_arrayDestroy();
            uint64_t v19 = v40;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            uint64_t v26 = v30;
          }
          ++v23;

          (*v24)(v6, v19);
          id v27 = sub_1001D7640();
          [v27 deleteObject:v30];

          unint64_t v20 = v42;
        }
        while (v25 != v23);

        swift_bridgeObjectRelease();
        id v16 = v37;
        goto LABEL_19;
      }
    }

    swift_bridgeObjectRelease();
LABEL_19:
  }
}

void sub_1001DC1B4(uint64_t a1, void *a2, char a3, char a4)
{
  id v8 = sub_10020B2D4(a2);
  if (!v4)
  {
    unsigned int v9 = v8;
    if (a3) {
      id v10 = sub_10020BA68();
    }
    else {
      id v10 = sub_10020BC8C((uint64_t)STiCloudOrganization_ptr, &qword_100343A50, (id)7);
    }
    unint64_t v11 = v10;
    uint64_t v12 = self;
    id v13 = [v9 dsid];
    uint64_t v14 = (void *)STBlueprintTypeManagedUser;
    id v39 = v12;
    id v15 = [v12 fetchRequestMatchingBlueprintsForUserWithDSID:v13 ofType:STBlueprintTypeManagedUser fromOrganization:v11];

    id v42 = 0;
    id v16 = [v15 execute:&v42];
    id v17 = v42;
    if (!v16)
    {
      id v32 = v42;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return;
    }
    uint64_t v18 = v16;
    uint64_t v40 = v11;
    id v41 = v15;
    sub_1000A0760(0, (unint64_t *)&unk_100342BB0);
    unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v20 = v17;

    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v21 != 1)
    {
      if (v21)
      {
        type metadata accessor for DataStore.DataStoreError(0);
        sub_1000AA560();
        swift_allocError();
        uint64_t v34 = v33;
        id v35 = a2;
        id v36 = v14;
        swift_bridgeObjectRelease();
        void *v34 = a2;
        v34[1] = v36;
        _OWORD v34[2] = v21;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();

        id v37 = v41;
LABEL_26:

        return;
      }
      swift_bridgeObjectRelease();
      id v42 = 0;
      id v22 = [v39 createManagedUserBlueprintForUser:v9 error:&v42];
      id v23 = v42;
      if (!v22)
      {
        id v38 = v42;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        return;
      }
      id v24 = v22;
      sub_10009EE78(&qword_100342BE0);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_1002869B0;
      *(void *)(v25 + 32) = v24;
      id v42 = (id)v25;
      specialized Array._endMutation()();
      unint64_t v19 = (unint64_t)v42;
      id v26 = v23;
    }
    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v27) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v27 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v27)
      {
LABEL_14:
        if (v27 < 1) {
          __break(1u);
        }
        uint64_t v28 = 0;
        uint64_t v29 = a4 & 1;
        do
        {
          if ((v19 & 0xC000000000000001) != 0) {
            id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v30 = *(id *)(v19 + 8 * v28 + 32);
          }
          os_log_type_t v31 = v30;
          ++v28;
          [v30 setEnabled:v29];
        }
        while (v27 != v28);
      }
    }

    swift_bridgeObjectRelease();
    id v37 = v40;
    goto LABEL_26;
  }
}

void sub_1001DC5A8(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    id v9 = sub_10020B2D4(a1);
    if (!v2)
    {
      id v10 = v9;
      sub_1001D7700((uint64_t)v8);
      unint64_t v11 = v10;
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      int v14 = v13;
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v23 = a2;
        uint64_t v15 = swift_slowAlloc();
        int v22 = v14;
        id v16 = (uint8_t *)v15;
        id v20 = (void *)swift_slowAlloc();
        uint64_t v21 = v16;
        *(_DWORD *)id v16 = 138412290;
        v19[1] = v16 + 4;
        id v24 = v11;
        id v17 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v20 = v11;

        _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v22, "Deleting core user %@", v21, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v12 = v11;
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      id v18 = sub_1001D7640();
      [v18 deleteObject:v11];
    }
  }
  else
  {
    type metadata accessor for DataStore.DataStoreError(0);
    sub_1000AA560();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

void sub_1001DC848(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  char v206 = a3;
  uint64_t v200 = a2;
  uint64_t v202 = type metadata accessor for Logger();
  uint64_t v199 = *(void *)(v202 - 8);
  uint64_t v6 = __chkstk_darwin(v202);
  id v8 = (char *)v191 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v11 = (char *)v191 - v10;
  __chkstk_darwin(v9);
  uint64_t v198 = (uint64_t)v191 - v12;
  uint64_t v203 = type metadata accessor for DataStore.DataStoreError(0);
  uint64_t v13 = __chkstk_darwin(v203);
  uint64_t v15 = (id *)((char *)v191 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  id v17 = (char *)v191 - v16;
  uint64_t v204 = a1;
  id v18 = *(void **)(a1 + 72);
  uint64_t v19 = STFamilyMemberTypeUnknown;
  os_log_type_t v205 = v18;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  uint64_t v201 = v19;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v25)
  {
LABEL_14:
    uint64_t v29 = v204;
    uint64_t v27 = v205;
    goto LABEL_15;
  }
  id v26 = sub_10020BA68();
  uint64_t v27 = v205;
  if (!v3)
  {

    uint64_t v29 = v204;
    goto LABEL_15;
  }
  id v197 = 0;
  id v210 = v3;
  swift_errorRetain();
  sub_10009EE78((uint64_t *)&unk_1003431B0);
  char v28 = swift_dynamicCast();
  uint64_t v29 = v204;
  if ((v28 & 1) == 0)
  {
LABEL_116:
    swift_errorRelease();
    id v47 = v206;
    uint64_t v49 = v197;
LABEL_17:
    id v210 = v4;
    swift_errorRetain();
    sub_10009EE78((uint64_t *)&unk_1003431B0);
    if (swift_dynamicCast())
    {
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        swift_errorRelease();

        if (v47)
        {
          uint64_t v50 = v49;
          uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v53 = v52;
          if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v53 == v54)
          {
            id v55 = v27;
            goto LABEL_23;
          }
          char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
          id v100 = v27;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v99) {
            goto LABEL_65;
          }
          uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v141 = v140;
          if (v139 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v141 == v142)
          {
LABEL_23:
            swift_bridgeObjectRelease_n();
LABEL_65:

            id v101 = sub_1001DE538(v29);
            if (v50) {
              goto LABEL_66;
            }
            id v207 = v101;
            id v137 = sub_1000C91FC();
            uint64_t v138 = v206;
            unsigned __int8 v160 = v137;
            uint64_t v161 = v200;
            id v162 = sub_1001D7640();
            __chkstk_darwin(v162);
            v191[-4] = v160;
            v191[-3] = v161;
            v191[-2] = v138;
            LOBYTE(v191[-1]) = 1;
            NSManagedObjectContext.performAndWait<A>(_:)();

            id v186 = sub_1000C9310();
            uint64_t v187 = v200;
            id v188 = sub_1001D7640();
            __chkstk_darwin(v188);
            v191[-4] = v186;
            v191[-3] = v187;
            v191[-2] = v206;
            LOBYTE(v191[-1]) = 1;
            NSManagedObjectContext.performAndWait<A>(_:)();

            goto LABEL_158;
          }
          char v143 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v143) {
            goto LABEL_65;
          }
          uint64_t v144 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v146 = v145;
          if (v144 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v146 == v147)
          {

            swift_bridgeObjectRelease_n();
LABEL_149:
            id v179 = sub_1001DE538(v29);
            if (v50) {
              goto LABEL_66;
            }
            id v207 = v179;
LABEL_158:
            swift_errorRelease();
            goto LABEL_29;
          }
          char v178 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v178) {
            goto LABEL_149;
          }
          sub_1000AA560();
          swift_allocError();
          void *v189 = v100;
          swift_storeEnumTagMultiPayload();
          id v190 = v100;
        }
        else
        {
          sub_1000AA560();
          swift_allocError();
          *uint64_t v98 = 0;
          swift_storeEnumTagMultiPayload();
        }
        swift_willThrow();
      }
      else
      {
        sub_1000C9DB4((uint64_t)v15);
      }
    }
LABEL_66:
    swift_errorRelease();
    return;
  }
  if (swift_getEnumCaseMultiPayload() != 49)
  {
    sub_1000C9DB4((uint64_t)v17);
    goto LABEL_116;
  }
  swift_errorRelease();
  sub_1001D7700((uint64_t)v11);
  id v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    id v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Creating family organization", v32, 2u);
    swift_slowDealloc();
  }

  uint64_t v33 = v199 + 8;
  id v196 = *(void (**)(char *, uint64_t))(v199 + 8);
  v196(v11, v202);
  id v34 = sub_1001D7640();
  id v35 = [objc_allocWithZone((Class)STFamilyOrganization) initWithContext:v34];

  id v36 = v35;
  sub_1001D7700((uint64_t)v8);
  id v37 = v36;
  id v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  int v40 = v39;
  if (os_log_type_enabled(v38, v39))
  {
    int v194 = v40;
    id v41 = (uint8_t *)swift_slowAlloc();
    uint64_t v193 = swift_slowAlloc();
    v209[0] = v193;
    uint64_t v195 = v33;
    *(_DWORD *)id v41 = 136315138;
    v191[1] = v41 + 4;
    uint64_t v192 = v41;
    id v42 = [v37 description];
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;

    uint64_t v46 = v43;
    uint64_t v29 = v204;
    uint64_t v27 = v205;
    uint64_t v208 = sub_1000A2E70(v46, v45, v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v194, "Created family organization: %s.", v192, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  v196(v8, v202);
  swift_errorRelease();
  uint64_t v4 = v197;
LABEL_15:
  id v47 = v206;
  id v48 = sub_10020B2D4(v206);
  if (v4)
  {
    uint64_t v49 = 0;
    goto LABEL_17;
  }
  id v56 = v48;
  id v207 = v48;
  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v59 = v58;
  if (v57 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v59 == v60)
  {
    swift_bridgeObjectRelease_n();
LABEL_29:
    uint64_t v62 = v202;
    goto LABEL_30;
  }
  char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v61) {
    goto LABEL_29;
  }
  uint64_t v62 = v202;
  if ((*(unsigned char *)(v29 + 80) & 1) == 0 && !v206)
  {
    id v78 = [v56 familySettings];

    if (!v78)
    {
      id v79 = sub_1001D7640();
      id v80 = [objc_allocWithZone((Class)STFamilyOrganizationSettings) initWithContext:v79];

      [v56 setFamilySettings:v80];
      id v173 = sub_10020BA68();
      [v80 setOrganization:v173];
    }
  }
LABEL_30:
  uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v65 = v64;
  if (v63 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v65 == v66)
  {
    id v67 = v27;
    swift_bridgeObjectRelease_n();
LABEL_34:

    id v70 = v207;
    if ([v207 isParent] != *(unsigned __int8 *)(v29 + 80)) {
      objc_msgSend(v70, "setIsParent:");
    }
    id v71 = [v70 familyMemberType];
    if (!v71) {
      goto LABEL_49;
    }
    uint64_t v72 = v71;
    uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v75 = v74;
    if (v73 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v75 == v76)
    {
      id v77 = v27;

      swift_bridgeObjectRelease_n();
      goto LABEL_50;
    }
    char v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
    id v86 = v27;

    uint64_t v27 = v205;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v85 & 1) == 0) {
LABEL_49:
    }
      [v70 setFamilyMemberType:v27];
LABEL_50:
    if ([v70 isFamilyOrganizer] == *(unsigned __int8 *)(v29 + 81)) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
  id v69 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v68) {
    goto LABEL_34;
  }
  uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v83 = v82;
  if (v81 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v83 == v84)
  {
    swift_bridgeObjectRelease_n();
LABEL_113:

    if (v206)
    {
      sub_1000AA560();
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();

      return;
    }
    id v148 = [v207 familySettings];

    if (v148)
    {
      uint64_t v149 = v198;
      sub_1001D7700(v198);
      uint64_t v150 = Logger.logObject.getter();
      os_log_type_t v151 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v150, v151))
      {
        char v152 = (uint8_t *)swift_slowAlloc();
        unint64_t v153 = (void *)swift_slowAlloc();
        *(_DWORD *)char v152 = 138412290;
        swift_beginAccess();
        id v154 = [v207 familySettings];
        id v155 = v154;
        if (v154) {
          id v210 = v154;
        }
        else {
          id v210 = 0;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v153 = v155;
        _os_log_impl((void *)&_mh_execute_header, v150, v151, "Deleting familysettings %@", v152, 0xCu);
        sub_10009EE78(&qword_100342AB0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v29 = v204;
        uint64_t v62 = v202;
        uint64_t v149 = v198;
      }

      (*(void (**)(uint64_t, uint64_t))(v199 + 8))(v149, v62);
      id v180 = sub_1001D7640();
      swift_beginAccess();
      id v181 = [v207 familySettings];
      if (!v181)
      {
        __break(1u);
        return;
      }
      uint64_t v182 = v181;
      [v180 deleteObject:v181];
    }
    id v183 = sub_1001D7640();
    NSManagedObjectContext.performAndWait<A>(_:)();

    id v184 = sub_1001D7640();
    NSManagedObjectContext.performAndWait<A>(_:)();

    goto LABEL_135;
  }
  char v136 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v136) {
    goto LABEL_113;
  }
  uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v158 = v157;
  if (v156 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v158 == v159)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v163 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v163 & 1) == 0)
    {
      uint64_t v174 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v176 = v175;
      if (v174 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v176 == v177)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v185 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v185 & 1) == 0) {
          goto LABEL_52;
        }
      }
      goto LABEL_135;
    }
  }

LABEL_135:
  swift_beginAccess();
  id v70 = v207;
  if ([v207 isParent]) {
    [v70 setIsParent:0];
  }
  id v164 = [v70 familyMemberType];
  if (!v164) {
    goto LABEL_142;
  }
  unint64_t v165 = v164;
  uint64_t v166 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v168 = v167;
  if (v166 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v168 == v169)
  {
    id v170 = v69;

    swift_bridgeObjectRelease_n();
    goto LABEL_143;
  }
  char v171 = _stringCompareWithSmolCheck(_:_:expecting:)();
  id v172 = v69;

  uint64_t v29 = v204;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v171 & 1) == 0) {
LABEL_142:
  }
    [v70 setFamilyMemberType:v69];
LABEL_143:
  if ([v70 isFamilyOrganizer]) {
LABEL_51:
  }
    objc_msgSend(v70, "setIsFamilyOrganizer:");
LABEL_52:
  swift_beginAccess();
  id v87 = v207;
  id v88 = [v207 dsid];
  uint64_t v89 = *(void **)v29;
  sub_1000A0760(0, (unint64_t *)&qword_100342AE0);
  id v90 = v89;
  char v91 = static NSObject.== infix(_:_:)();

  if ((v91 & 1) == 0) {
    [v87 setDsid:v90];
  }
  id v92 = [v87 altDSID];
  if (!v92)
  {
    sub_1000FDE9C(v29 + 8, (uint64_t)v218, &qword_100342288);
    sub_1000FDE9C((uint64_t)v218, (uint64_t)v219, &qword_100342288);
    if (!v220) {
      goto LABEL_72;
    }
    goto LABEL_68;
  }
  uint64_t v93 = v92;
  uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v96 = v95;

  uint64_t v97 = *(void *)(v29 + 16);
  if (!v97)
  {
    swift_bridgeObjectRelease();
LABEL_68:
    sub_1000FDE9C(v29 + 8, (uint64_t)v217, &qword_100342288);
    sub_1000FDE9C((uint64_t)v217, (uint64_t)&v221, &qword_100342288);
    NSString v103 = v222;
    if (v222)
    {
      id v104 = v87;
      NSString v103 = String._bridgeToObjectiveC()();
    }
    else
    {
      id v105 = v87;
    }
    [v87 setAltDSID:v103];

    goto LABEL_72;
  }
  if (v94 == *(void *)(v29 + 8) && v97 == v96)
  {
    swift_bridgeObjectRelease();
    goto LABEL_72;
  }
  char v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v102 & 1) == 0) {
    goto LABEL_68;
  }
LABEL_72:
  id v106 = [v87 familyName];
  if (!v106)
  {
    sub_1000FDE9C(v29 + 40, (uint64_t)v216, &qword_100342288);
    sub_1000FDE9C((uint64_t)v216, (uint64_t)v223, &qword_100342288);
    if (!v224) {
      goto LABEL_85;
    }
    goto LABEL_81;
  }
  uint64_t v107 = v106;
  uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v110 = v109;

  uint64_t v111 = *(void *)(v29 + 48);
  if (!v111)
  {
    swift_bridgeObjectRelease();
LABEL_81:
    sub_1000FDE9C(v29 + 40, (uint64_t)v215, &qword_100342288);
    sub_1000FDE9C((uint64_t)v215, (uint64_t)&v225, &qword_100342288);
    NSString v113 = v226;
    if (v226)
    {
      id v114 = v87;
      NSString v113 = String._bridgeToObjectiveC()();
    }
    else
    {
      id v115 = v87;
    }
    [v87 setFamilyName:v113];

    goto LABEL_85;
  }
  if (v108 == *(void *)(v29 + 40) && v111 == v110)
  {
    swift_bridgeObjectRelease();
    goto LABEL_85;
  }
  char v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v112 & 1) == 0) {
    goto LABEL_81;
  }
LABEL_85:
  id v116 = [v87 givenName];
  if (!v116)
  {
    sub_1000FDE9C(v29 + 56, (uint64_t)v214, &qword_100342288);
    sub_1000FDE9C((uint64_t)v214, (uint64_t)v227, &qword_100342288);
    if (!v228) {
      goto LABEL_98;
    }
    goto LABEL_94;
  }
  unint64_t v117 = v116;
  uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v120 = v119;

  uint64_t v121 = *(void *)(v29 + 64);
  if (!v121)
  {
    swift_bridgeObjectRelease();
    goto LABEL_94;
  }
  if (v118 != *(void *)(v29 + 56) || v121 != v120)
  {
    char v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v122) {
      goto LABEL_98;
    }
LABEL_94:
    sub_1000FDE9C(v29 + 56, (uint64_t)v213, &qword_100342288);
    sub_1000FDE9C((uint64_t)v213, (uint64_t)&v229, &qword_100342288);
    NSString v123 = v230;
    if (v230)
    {
      id v124 = v87;
      NSString v123 = String._bridgeToObjectiveC()();
    }
    else
    {
      id v125 = v87;
    }
    [v87 setGivenName:v123];

    goto LABEL_98;
  }
  swift_bridgeObjectRelease();
LABEL_98:
  id v126 = [v87 appleID];
  if (v126)
  {
    unint64_t v127 = v126;
    uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v130 = v129;

    uint64_t v131 = *(void *)(v29 + 32);
    if (v131)
    {
      if (v128 == *(void *)(v29 + 24) && v131 == v130)
      {

        swift_bridgeObjectRelease();
        return;
      }
      char v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v132) {
        goto LABEL_107;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1000FDE9C(v29 + 24, (uint64_t)v212, &qword_100342288);
    sub_1000FDE9C((uint64_t)v212, (uint64_t)v231, &qword_100342288);
    if (!v232)
    {
LABEL_107:

      return;
    }
  }
  sub_1000FDE9C(v29 + 24, (uint64_t)v211, &qword_100342288);
  sub_1000FDE9C((uint64_t)v211, (uint64_t)&v233, &qword_100342288);
  NSString v133 = v234;
  if (v234)
  {
    id v134 = v87;
    NSString v133 = String._bridgeToObjectiveC()();
  }
  else
  {
    id v135 = v87;
  }
  [v87 setAppleID:v133];
}

double sub_1001DDF1C@<D0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  id v4 = sub_10020B2D4(a1);
  if (!v2)
  {
    uint64_t v6 = v4;
    sub_10020BF94(v4, (uint64_t)v9);

    long long v7 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v7;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)v10;
    *(_DWORD *)(a2 + 79) = *(_DWORD *)&v10[15];
    double result = *(double *)v9;
    long long v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }
  return result;
}

void sub_1001DDF98(uint64_t *a1@<X8>)
{
  id v2 = [self fetchRequest];
  id v11 = 0;
  id v3 = [v2 execute:&v11];
  id v4 = v11;
  if (v3)
  {
    uint64_t v5 = v3;
    sub_1000A0760(0, &qword_1003431E0);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v7 = v4;

    swift_retain();
    long long v8 = sub_10020AA5C(v6);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v9 = sub_10020A0B4((uint64_t)v8);

    swift_bridgeObjectRelease();
    *a1 = v9;
  }
  else
  {
    id v10 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_1001DE100(uint64_t *a1@<X8>)
{
  id v3 = sub_1001D7640();
  sub_10009EE78((uint64_t *)&unk_100342B00);
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (!v1)
  {
    swift_retain();
    uint64_t v4 = sub_10020C43C(v5);
    swift_release();
    *a1 = v4;
  }
}

void sub_1001DE1C0()
{
  id v0 = sub_1001D7640();
  NSManagedObjectContext.performAndWait<A>(_:)();
}

void sub_1001DE258(void *a1@<X8>)
{
  id v2 = self;
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = sub_1001D7640();
  id v10 = 0;
  id v5 = [v2 fetchUserWithAppleID:v3 inContext:v4 error:&v10];

  if (v5)
  {
    id v6 = v10;
    id v7 = [v5 localUserDeviceState];

    if (v7)
    {

      *a1 = 0;
    }
    else
    {
      id v9 = [v5 dsid];

      *a1 = v9;
    }
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}