uint64_t sub_1C00263E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  CGFloat v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char isUniquelyReferenced_nonNull_native;
  void *v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  char v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  char v88;
  void *v89;
  uint64_t *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  int64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  CGFloat v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  long long v121;
  long long v122;
  uint64_t result;
  void v124[3];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  CGFloat v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  CGFloat v133;
  CGFloat v134;
  double v135;
  double v136;
  double v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  void v142[5];
  unsigned char v143[40];
  _OWORD v144[2];
  uint64_t v145;
  uint64_t v146;

  v129 = a5;
  v130 = a1;
  v126 = type metadata accessor for FormatOption();
  v125 = *(void *)(v126 - 8);
  MEMORY[0x1F4188790](v126);
  v138 = (uint64_t)v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1C151772C();
  v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  v12 = (char *)v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unownedRetainStrong();
  sub_1BFF81FF0();
  v14 = v13;
  sub_1C1517C7C();
  sub_1C1517AFC();
  v146 = v15;
  v137 = v16;
  swift_release();
  sub_1C1517C7C();
  sub_1C1517B5C();
  v136 = v17;
  v135 = v18;
  swift_release();
  sub_1C1517C7C();
  sub_1C1517B4C();
  v134 = v19;
  v133 = v20;
  v128 = v21;
  v127 = v22;
  swift_release();
  sub_1C1517C7C();
  sub_1C1517B6C();
  v24 = v23;
  v26 = v25;
  swift_release();
  sub_1C1517C7C();
  sub_1C1517B2C();
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  swift_release();
  v131 = v14;
  v132 = a2;
  sub_1C1517C7C();
  sub_1C1517B0C();
  swift_release();
  sub_1C151764C();
  v36 = v35;
  v38 = v37;
  v39 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v127 = sub_1C0027B78(*(double *)&v146, v137, v136, v135, v134, v133, v128, *(CGFloat *)&v127, v39, v40, v41, v42, v43, v44, v45, v46, v24, v26, v28,
           v30,
           v32,
           v34,
           v36,
           v38);
  swift_release();
  swift_unownedRetainStrong();
  swift_beginAccess();
  v47 = *(void *)(a3 + 48);
  swift_bridgeObjectRetain();
  v128 = *(double *)&a3;
  swift_release();
  v48 = *(double *)(v47 + 16);
  v124[1] = a4;
  v124[0] = v47;
  if (v48 == 0.0)
  {
    v51 = MEMORY[0x1E4FBC868];
LABEL_33:
    swift_bridgeObjectRelease();
    swift_unownedRetainStrong();
    v94 = swift_bridgeObjectRetain();
    v95 = sub_1C0026F88(v94);
    swift_release();
    *(void *)&v137 = v51;
    swift_bridgeObjectRelease();
    v96 = v127;
    v97 = *(void *)(v127 + 16);
    v146 = v95;
    if (v97)
    {
      v140 = MEMORY[0x1E4FBC860];
      sub_1BFF9524C(0, v97, 0);
      v98 = v140;
      v99 = v96 + ((*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80));
      v100 = *(void *)(v125 + 72);
      do
      {
        v101 = v138;
        sub_1C019FFF0(v99, v138);
        v102 = swift_allocBox();
        sub_1C00AB068(v101, v103);
        v140 = v98;
        v105 = *(void *)(v98 + 16);
        v104 = *(void *)(v98 + 24);
        if (v105 >= v104 >> 1)
        {
          sub_1BFF9524C(v104 > 1, v105 + 1, 1);
          v98 = v140;
        }
        *(void *)(v98 + 16) = v105 + 1;
        *(void *)(v98 + 8 * v105 + 32) = v102 | 0x9000000000000000;
        v99 += v100;
        --v97;
      }
      while (v97);
      swift_bridgeObjectRelease();
      v95 = v146;
    }
    else
    {
      swift_bridgeObjectRelease();
      v98 = MEMORY[0x1E4FBC860];
    }
    v106 = *(void *)(v95 + 16);
    v107 = MEMORY[0x1E4FBC860];
    if (v106)
    {
      v140 = MEMORY[0x1E4FBC860];
      sub_1BFF9524C(0, v106, 0);
      v107 = v140;
      v108 = v95 + ((*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80));
      v109 = *(void *)(v125 + 72);
      do
      {
        v110 = v138;
        sub_1C019FFF0(v108, v138);
        v111 = swift_allocBox();
        sub_1C00AB068(v110, v112);
        v140 = v107;
        v114 = *(void *)(v107 + 16);
        v113 = *(void *)(v107 + 24);
        if (v114 >= v113 >> 1)
        {
          sub_1BFF9524C(v113 > 1, v114 + 1, 1);
          v107 = v140;
        }
        *(void *)(v107 + 16) = v114 + 1;
        *(void *)(v107 + 8 * v114 + 32) = v111 | 0x9000000000000000;
        v108 += v109;
        --v106;
      }
      while (v106);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v140 = v98;
    sub_1BFF1B81C(v107);
    v115 = (uint64_t *)sub_1BFF20000(v140);
    swift_bridgeObjectRelease();
    v116 = v128;
    swift_unownedRetainStrong();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1C151745C();
    swift_unownedRetainStrong();
    swift_beginAccess();
    v117 = *(void *)(*(void *)&v116 + 56);
    swift_bridgeObjectRetain();
    swift_release();
    v118 = *(void *)(v117 + 16);
    if (v118)
    {
      v119 = 32;
      v120 = v124[2];
      while (1)
      {
        v121 = *(_OWORD *)(v117 + v119);
        v122 = *(_OWORD *)(v117 + v119 + 16);
        v145 = *(void *)(v117 + v119 + 32);
        v144[0] = v121;
        v144[1] = v122;
        sub_1BFF1BDBC((uint64_t)v144);
        sub_1BFF1BDFC(v130, v115, v129);
        if (v120) {
          break;
        }
        sub_1BFF1BD7C((uint64_t)v144);
        v119 += 40;
        if (!--v118) {
          goto LABEL_49;
        }
      }
      swift_bridgeObjectRelease();
      swift_release();
      return sub_1BFF1BD7C((uint64_t)v144);
    }
    else
    {
LABEL_49:
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  v49 = *(double *)(a4 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_namespace);
  v50 = (double *)(v47 + 40);
  v51 = MEMORY[0x1E4FBC868];
  v133 = v49;
  while (1)
  {
    v52 = *((void *)v50 - 1);
    v53 = *v50;
    v54 = *(void *)(*(void *)&v49 + 24);
    if (v54)
    {
      v140 = *(void *)(*(void *)&v49 + 16);
      v141 = v54;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1C151E80C();
      sub_1C151E80C();
      v146 = v140;
      v55 = v141;
      v56 = *(void *)(*(void *)&v49 + 56);
      if (!v56) {
        goto LABEL_20;
      }
    }
    else
    {
      swift_bridgeObjectRetain_n();
      v146 = v52;
      v55 = *(void *)&v53;
      v56 = *(void *)(*(void *)&v49 + 56);
      if (!v56) {
        goto LABEL_20;
      }
    }
    *(void *)&v134 = v52;
    v135 = v53;
    v136 = v48;
    *(void *)&v137 = v51;
    v57 = *(void *)(v56 + 32);
    v58 = *(void *)(*(void *)&v49 + 48);
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v139 = *(void **)(v57 + 16);
    v60 = v139;
    *(void *)(v57 + 16) = 0x8000000000000000;
    v62 = sub_1BFEF2D8C(v146, v55);
    v63 = v60[2];
    v64 = (v61 & 1) == 0;
    v65 = v63 + v64;
    if (__OFADD__(v63, v64)) {
      break;
    }
    v66 = v61;
    if (v60[3] >= v65)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1C106BC0C();
      }
    }
    else
    {
      sub_1C1056130(v65, isUniquelyReferenced_nonNull_native);
      v67 = sub_1BFEF2D8C(v146, v55);
      if ((v66 & 1) != (v68 & 1)) {
        goto LABEL_55;
      }
      v62 = v67;
    }
    v69 = v139;
    if (v66)
    {
      v70 = v139[7];
      swift_bridgeObjectRelease();
      *(void *)(v70 + 8 * v62) = v58;
    }
    else
    {
      v139[(v62 >> 6) + 8] |= 1 << v62;
      v71 = (void *)(v69[6] + 16 * v62);
      *v71 = v146;
      v71[1] = v55;
      *(void *)(v69[7] + 8 * v62) = v58;
      v72 = v69[2];
      v73 = __OFADD__(v72, 1);
      v74 = v72 + 1;
      if (v73) {
        goto LABEL_53;
      }
      v69[2] = v74;
      swift_bridgeObjectRetain();
    }
    *(void *)(v57 + 16) = v69;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v51 = *(void *)&v137;
    v48 = v136;
    v49 = v133;
    v53 = v135;
    v52 = *(void *)&v134;
LABEL_20:
    sub_1C1517C8C();
    sub_1C15175FC();
    v75 = v142[0];
    v76 = v142[1];
    v77 = v142[2];
    v78 = v142[3];
    swift_release();
    swift_bridgeObjectRelease();
    sub_1BFF5984C((uint64_t)v142, (uint64_t)v143);
    if (v143[32] == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v79 = swift_isUniquelyReferenced_nonNull_native();
      v140 = v51;
      v80 = v52;
      v82 = sub_1BFEF2D8C(v52, *(uint64_t *)&v53);
      v83 = *(void *)(v51 + 16);
      v84 = (v81 & 1) == 0;
      v85 = v83 + v84;
      if (__OFADD__(v83, v84)) {
        goto LABEL_52;
      }
      v86 = v81;
      if (*(void *)(v51 + 24) >= v85)
      {
        if ((v79 & 1) == 0) {
          sub_1C106C9A0();
        }
      }
      else
      {
        sub_1C105736C(v85, v79);
        v87 = sub_1BFEF2D8C(v80, *(uint64_t *)&v53);
        if ((v86 & 1) != (v88 & 1)) {
          goto LABEL_55;
        }
        v82 = v87;
      }
      v51 = v140;
      if (v86)
      {
        v89 = (void *)(*(void *)(v140 + 56) + 32 * v82);
        *v89 = v75;
        v89[1] = v76;
        v89[2] = v77;
        v89[3] = v78;
      }
      else
      {
        *(void *)(v140 + 8 * (v82 >> 6) + 64) |= 1 << v82;
        v90 = (uint64_t *)(*(void *)(v51 + 48) + 16 * v82);
        *v90 = v80;
        *((double *)v90 + 1) = v53;
        v91 = (void *)(*(void *)(v51 + 56) + 32 * v82);
        *v91 = v75;
        v91[1] = v76;
        v91[2] = v77;
        v91[3] = v78;
        v92 = *(void *)(v51 + 16);
        v73 = __OFADD__(v92, 1);
        v93 = v92 + 1;
        if (v73) {
          goto LABEL_54;
        }
        *(void *)(v51 + 16) = v93;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v49 = v133;
    }
    v50 += 2;
    --*(void *)&v48;
    if (v48 == 0.0) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  result = sub_1C1520CFC();
  __break(1u);
  return result;
}

uint64_t sub_1C0026F88(uint64_t a1)
{
  uint64_t v62 = MEMORY[0x1E4FBC860];
  uint64_t v71 = MEMORY[0x1E4FBC860];
  swift_beginAccess();
  uint64_t v64 = v1;
  uint64_t v3 = *(void *)(*(void *)(v1 + 48) + 16);
  if (v3)
  {
    v4 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    uint64_t v63 = a1;
    do
    {
      if (*(void *)(a1 + 16))
      {
        uint64_t v5 = *(v4 - 1);
        uint64_t v6 = *v4;
        swift_bridgeObjectRetain();
        unint64_t v7 = sub_1BFEF2D8C(v5, v6);
        if (v8)
        {
          uint64_t v9 = *(void *)(a1 + 56) + 32 * v7;
          CGFloat v10 = *(double *)v9;
          CGFloat v11 = *(double *)(v9 + 8);
          CGFloat v12 = *(double *)(v9 + 16);
          CGFloat v13 = *(double *)(v9 + 24);
          sub_1BFF1FDC8(0, &qword_1EB87A730, (uint64_t (*)(uint64_t))type metadata accessor for FormatOption, MEMORY[0x1E4FBBE00]);
          uint64_t v69 = type metadata accessor for FormatOption();
          unint64_t v14 = (*(unsigned __int8 *)(*(void *)(v69 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v69 - 8) + 80);
          uint64_t v68 = *(void *)(*(void *)(v69 - 8) + 72);
          uint64_t v15 = swift_allocObject();
          *(_OWORD *)(v15 + 16) = xmmword_1C154B600;
          sub_1C15200FC();
          swift_bridgeObjectRelease();
          sub_1C151E80C();
          sub_1C151E80C();
          uint64_t v17 = 0x797274656D6F6567;
          unint64_t v16 = 0xE90000000000002DLL;
          unint64_t v18 = *(void *)(v64 + 40);
          uint64_t v66 = *(void *)(v64 + 32);
          if (v18)
          {
            uint64_t v70 = *(void *)(v64 + 32);
            swift_bridgeObjectRetain();
            sub_1C151E80C();
            sub_1C151E80C();
            swift_bridgeObjectRelease();
            uint64_t v17 = v70;
            unint64_t v16 = v18;
          }
          uint64_t v65 = v15;
          v19 = (uint64_t *)(v15 + v14);
          v72.origin.x = v10;
          v72.origin.y = v11;
          v72.size.width = v12;
          v72.size.height = v13;
          CGFloat MinX = CGRectGetMinX(v72);
          uint64_t v21 = swift_allocObject();
          *(CGFloat *)(v21 + 16) = MinX;
          *(void *)(v21 + 24) = MEMORY[0x1E4FBC860];
          uint64_t *v19 = v17;
          v19[1] = v16;
          v19[2] = v21 | 0x3000000000000000;
          v19[3] = 1;
          v22 = (char *)v19 + *(int *)(v69 + 28);
          uint64_t v23 = type metadata accessor for FormatVersionRequirement(0);
          v67 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
          v67(v22, 1, 1, v23);
          sub_1C15200FC();
          swift_bridgeObjectRelease();
          sub_1C151E80C();
          sub_1C151E80C();
          uint64_t v25 = 0x797274656D6F6567;
          unint64_t v24 = 0xE90000000000002DLL;
          if (v18)
          {
            swift_bridgeObjectRetain();
            sub_1C151E80C();
            sub_1C151E80C();
            swift_bridgeObjectRelease();
            uint64_t v25 = v66;
            unint64_t v24 = v18;
          }
          v26 = (uint64_t *)((char *)v19 + v68);
          v73.origin.x = v10;
          v73.origin.y = v11;
          v73.size.width = v12;
          v73.size.height = v13;
          CGFloat MinY = CGRectGetMinY(v73);
          uint64_t v28 = swift_allocObject();
          *(CGFloat *)(v28 + 16) = MinY;
          *(void *)(v28 + 24) = MEMORY[0x1E4FBC860];
          uint64_t *v26 = v25;
          v26[1] = v24;
          v26[2] = v28 | 0x3000000000000000;
          v26[3] = 1;
          v67((char *)v19 + v68 + *(int *)(v69 + 28), 1, 1, v23);
          sub_1C15200FC();
          swift_bridgeObjectRelease();
          sub_1C151E80C();
          sub_1C151E80C();
          uint64_t v30 = 0x797274656D6F6567;
          unint64_t v29 = 0xE90000000000002DLL;
          if (v18)
          {
            swift_bridgeObjectRetain();
            sub_1C151E80C();
            sub_1C151E80C();
            swift_bridgeObjectRelease();
            uint64_t v30 = v66;
            unint64_t v29 = v18;
          }
          v31 = (uint64_t *)((char *)v19 + 2 * v68);
          v74.origin.x = v10;
          v74.origin.y = v11;
          v74.size.width = v12;
          v74.size.height = v13;
          CGFloat MaxX = CGRectGetMaxX(v74);
          uint64_t v33 = swift_allocObject();
          *(CGFloat *)(v33 + 16) = MaxX;
          *(void *)(v33 + 24) = MEMORY[0x1E4FBC860];
          uint64_t *v31 = v30;
          v31[1] = v29;
          v31[2] = v33 | 0x3000000000000000;
          v31[3] = 1;
          v67((char *)v31 + *(int *)(v69 + 28), 1, 1, v23);
          sub_1C15200FC();
          swift_bridgeObjectRelease();
          sub_1C151E80C();
          sub_1C151E80C();
          uint64_t v35 = 0x797274656D6F6567;
          unint64_t v34 = 0xE90000000000002DLL;
          if (v18)
          {
            swift_bridgeObjectRetain();
            sub_1C151E80C();
            sub_1C151E80C();
            swift_bridgeObjectRelease();
            uint64_t v35 = v66;
            unint64_t v34 = v18;
          }
          v36 = (uint64_t *)((char *)v19 + 3 * v68);
          v75.origin.x = v10;
          v75.origin.y = v11;
          v75.size.width = v12;
          v75.size.height = v13;
          CGFloat MaxY = CGRectGetMaxY(v75);
          uint64_t v38 = swift_allocObject();
          *(CGFloat *)(v38 + 16) = MaxY;
          *(void *)(v38 + 24) = MEMORY[0x1E4FBC860];
          uint64_t *v36 = v35;
          v36[1] = v34;
          v36[2] = v38 | 0x3000000000000000;
          v36[3] = 1;
          v67((char *)v36 + *(int *)(v69 + 28), 1, 1, v23);
          sub_1C15200FC();
          swift_bridgeObjectRelease();
          sub_1C151E80C();
          sub_1C151E80C();
          uint64_t v40 = 0x797274656D6F6567;
          unint64_t v39 = 0xE90000000000002DLL;
          if (v18)
          {
            swift_bridgeObjectRetain();
            sub_1C151E80C();
            sub_1C151E80C();
            swift_bridgeObjectRelease();
            uint64_t v40 = v66;
            unint64_t v39 = v18;
          }
          v41 = (uint64_t *)((char *)v19 + 4 * v68);
          sub_1C151F77C();
          uint64_t v43 = v42;
          uint64_t v44 = swift_allocObject();
          *(void *)(v44 + 16) = v43;
          *(void *)(v44 + 24) = MEMORY[0x1E4FBC860];
          uint64_t *v41 = v40;
          v41[1] = v39;
          v41[2] = v44 | 0x3000000000000000;
          v41[3] = 1;
          v67((char *)v41 + *(int *)(v69 + 28), 1, 1, v23);
          sub_1C15200FC();
          swift_bridgeObjectRelease();
          sub_1C151E80C();
          sub_1C151E80C();
          uint64_t v46 = 0x797274656D6F6567;
          unint64_t v45 = 0xE90000000000002DLL;
          if (v18)
          {
            swift_bridgeObjectRetain();
            sub_1C151E80C();
            sub_1C151E80C();
            swift_bridgeObjectRelease();
            uint64_t v46 = v66;
            unint64_t v45 = v18;
          }
          v47 = (uint64_t *)((char *)v19 + 5 * v68);
          sub_1C151F77C();
          uint64_t v49 = v48;
          uint64_t v50 = swift_allocObject();
          *(void *)(v50 + 16) = v49;
          *(void *)(v50 + 24) = MEMORY[0x1E4FBC860];
          uint64_t *v47 = v46;
          v47[1] = v45;
          v47[2] = v50 | 0x3000000000000000;
          v47[3] = 1;
          v67((char *)v47 + *(int *)(v69 + 28), 1, 1, v23);
          sub_1C15200FC();
          swift_bridgeObjectRelease();
          sub_1C151E80C();
          sub_1C151E80C();
          uint64_t v52 = 0x797274656D6F6567;
          unint64_t v51 = 0xE90000000000002DLL;
          if (v18)
          {
            swift_bridgeObjectRetain();
            sub_1C151E80C();
            sub_1C151E80C();
            swift_bridgeObjectRelease();
            uint64_t v52 = v66;
            unint64_t v51 = v18;
          }
          v53 = (uint64_t *)((char *)v19 + 6 * v68);
          v76.origin.x = v10;
          v76.origin.y = v11;
          v76.size.width = v12;
          v76.size.height = v13;
          CGFloat Width = CGRectGetWidth(v76);
          uint64_t v55 = swift_allocObject();
          *(CGFloat *)(v55 + 16) = Width;
          *(void *)(v55 + 24) = MEMORY[0x1E4FBC860];
          uint64_t *v53 = v52;
          v53[1] = v51;
          v53[2] = v55 | 0x3000000000000000;
          v53[3] = 1;
          v67((char *)v53 + *(int *)(v69 + 28), 1, 1, v23);
          sub_1C15200FC();
          swift_bridgeObjectRelease();
          sub_1C151E80C();
          swift_bridgeObjectRelease();
          sub_1C151E80C();
          uint64_t v57 = 0x797274656D6F6567;
          unint64_t v56 = 0xE90000000000002DLL;
          if (v18)
          {
            swift_bridgeObjectRetain();
            sub_1C151E80C();
            sub_1C151E80C();
            swift_bridgeObjectRelease();
            uint64_t v57 = v66;
            unint64_t v56 = v18;
          }
          a1 = v63;
          v58 = (uint64_t *)((char *)&v19[v68] - v68);
          v77.origin.x = v10;
          v77.origin.y = v11;
          v77.size.width = v12;
          v77.size.height = v13;
          CGFloat Height = CGRectGetHeight(v77);
          uint64_t v60 = swift_allocObject();
          *(CGFloat *)(v60 + 16) = Height;
          *(void *)(v60 + 24) = MEMORY[0x1E4FBC860];
          uint64_t *v58 = v57;
          v58[1] = v56;
          v58[2] = v60 | 0x3000000000000000;
          v58[3] = 1;
          v67((char *)v58 + *(int *)(v69 + 28), 1, 1, v23);
          sub_1BFEDB748(v65);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v71;
  }
  return v62;
}

uint64_t sub_1C0027B78(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CGFloat a19, CGFloat a20,CGFloat a21,CGFloat a22,uint64_t a23,uint64_t a24)
{
  sub_1BFF1FDC8(0, &qword_1EB87A730, (uint64_t (*)(uint64_t))type metadata accessor for FormatOption, MEMORY[0x1E4FBBE00]);
  uint64_t v160 = type metadata accessor for FormatOption();
  uint64_t v33 = *(void *)(*(void *)(v160 - 8) + 72);
  unint64_t v34 = (*(unsigned __int8 *)(*(void *)(v160 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v160 - 8) + 80);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1C15F88A0;
  uint64_t v158 = v35;
  v36 = (unint64_t *)(v35 + v34);
  unint64_t v38 = *(void *)(v24 + 32);
  unint64_t v37 = *(void *)(v24 + 40);
  unint64_t v39 = 0x80000001C1641C80;
  if (v37)
  {
    unint64_t v161 = *(void *)(v24 + 32);
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v40 = v161;
    unint64_t v39 = v37;
  }
  else
  {
    unint64_t v40 = 0xD00000000000001DLL;
  }
  uint64_t v41 = swift_allocObject();
  *(double *)(v41 + 16) = a1;
  *(void *)(v41 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v36 = v40;
  v36[1] = v39;
  v36[2] = v41 | 0x3000000000000000;
  v36[3] = 1;
  uint64_t v42 = (char *)v36 + *(int *)(v160 + 28);
  uint64_t v43 = type metadata accessor for FormatVersionRequirement(0);
  uint64_t v44 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56);
  v159 = *v44;
  (*v44)(v42, 1, 1, v43);
  unint64_t v45 = 0xD00000000000001DLL;
  unint64_t v46 = 0x80000001C1641CA0;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v45 = v38;
    unint64_t v46 = v37;
  }
  v47 = (unint64_t *)((char *)v36 + v33);
  uint64_t v48 = swift_allocObject();
  *(double *)(v48 + 16) = a2;
  *(void *)(v48 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v47 = v45;
  v47[1] = v46;
  v47[2] = v48 | 0x3000000000000000;
  v47[3] = 1;
  v159((char *)v36 + v33 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v49 = 0xD000000000000018;
  unint64_t v50 = 0x80000001C1641CC0;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v51 = v38;
    unint64_t v50 = v37;
  }
  else
  {
    unint64_t v51 = 0xD000000000000018;
  }
  uint64_t v52 = (unint64_t *)((char *)v36 + 2 * v33);
  uint64_t v53 = swift_allocObject();
  *(double *)(v53 + 16) = a3;
  *(void *)(v53 + 24) = MEMORY[0x1E4FBC860];
  *uint64_t v52 = v51;
  v52[1] = v50;
  v52[2] = v53 | 0x3000000000000000;
  v52[3] = 1;
  v159((char *)v52 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v54 = 0x80000001C1641CE0;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v49 = v38;
    unint64_t v54 = v37;
  }
  uint64_t v55 = (unint64_t *)((char *)v36 + 3 * v33);
  uint64_t v56 = swift_allocObject();
  *(double *)(v56 + 16) = a4;
  *(void *)(v56 + 24) = MEMORY[0x1E4FBC860];
  *uint64_t v55 = v49;
  v55[1] = v54;
  v55[2] = v56 | 0x3000000000000000;
  v55[3] = 1;
  v159((char *)v55 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v57 = 0x80000001C1641D00;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v58 = v38;
    unint64_t v57 = v37;
  }
  else
  {
    unint64_t v58 = 0xD00000000000001CLL;
  }
  v59 = (unint64_t *)((char *)v36 + 4 * v33);
  v162.origin.x = a5;
  v162.origin.y = a6;
  v162.size.width = a7;
  v162.size.height = a8;
  CGFloat MinX = CGRectGetMinX(v162);
  uint64_t v61 = swift_allocObject();
  *(CGFloat *)(v61 + 16) = MinX;
  *(void *)(v61 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v59 = v58;
  v59[1] = v57;
  v59[2] = v61 | 0x3000000000000000;
  v59[3] = 1;
  v159((char *)v59 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v62 = 0x80000001C1641D20;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v63 = v38;
    unint64_t v62 = v37;
  }
  else
  {
    unint64_t v63 = 0xD00000000000001CLL;
  }
  uint64_t v64 = (unint64_t *)((char *)v36 + 5 * v33);
  v163.origin.x = a5;
  v163.origin.y = a6;
  v163.size.width = a7;
  v163.size.height = a8;
  CGFloat MinY = CGRectGetMinY(v163);
  uint64_t v66 = swift_allocObject();
  *(CGFloat *)(v66 + 16) = MinY;
  *(void *)(v66 + 24) = MEMORY[0x1E4FBC860];
  *uint64_t v64 = v63;
  v64[1] = v62;
  v64[2] = v66 | 0x3000000000000000;
  v64[3] = 1;
  v159((char *)v64 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v67 = 0x80000001C1641D40;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v68 = v38;
    unint64_t v67 = v37;
  }
  else
  {
    unint64_t v68 = 0xD00000000000001CLL;
  }
  uint64_t v69 = (unint64_t *)((char *)v36 + 6 * v33);
  v164.origin.x = a5;
  v164.origin.y = a6;
  v164.size.width = a7;
  v164.size.height = a8;
  CGFloat MaxX = CGRectGetMaxX(v164);
  uint64_t v71 = swift_allocObject();
  *(CGFloat *)(v71 + 16) = MaxX;
  *(void *)(v71 + 24) = MEMORY[0x1E4FBC860];
  *uint64_t v69 = v68;
  v69[1] = v67;
  v69[2] = v71 | 0x3000000000000000;
  v69[3] = 1;
  v159((char *)v69 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v72 = 0x80000001C1641D60;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v73 = v38;
    unint64_t v72 = v37;
  }
  else
  {
    unint64_t v73 = 0xD00000000000001CLL;
  }
  CGRect v74 = (unint64_t *)((char *)&v36[v33] - v33);
  v165.origin.x = a5;
  v165.origin.y = a6;
  v165.size.width = a7;
  v165.size.height = a8;
  CGFloat MaxY = CGRectGetMaxY(v165);
  uint64_t v76 = swift_allocObject();
  *(CGFloat *)(v76 + 16) = MaxY;
  *(void *)(v76 + 24) = MEMORY[0x1E4FBC860];
  *CGRect v74 = v73;
  v74[1] = v72;
  v74[2] = v76 | 0x3000000000000000;
  v74[3] = 1;
  v159((char *)v74 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v77 = 0xD00000000000001FLL;
  unint64_t v78 = 0x80000001C1641D80;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v79 = v38;
    unint64_t v78 = v37;
  }
  else
  {
    unint64_t v79 = 0xD00000000000001FLL;
  }
  v80 = &v36[v33];
  sub_1C151F77C();
  uint64_t v82 = v81;
  uint64_t v83 = swift_allocObject();
  *(void *)(v83 + 16) = v82;
  *(void *)(v83 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v80 = v79;
  v80[1] = v78;
  v80[2] = v83 | 0x3000000000000000;
  v80[3] = 1;
  v159((char *)v80 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v84 = 0x80000001C1641DA0;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v77 = v38;
    unint64_t v84 = v37;
  }
  v85 = (unint64_t *)((char *)v36 + 9 * v33);
  sub_1C151F77C();
  uint64_t v87 = v86;
  uint64_t v88 = swift_allocObject();
  *(void *)(v88 + 16) = v87;
  *(void *)(v88 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v85 = v77;
  v85[1] = v84;
  v85[2] = v88 | 0x3000000000000000;
  v85[3] = 1;
  v159((char *)v85 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v89 = 0x80000001C1641DC0;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v90 = v38;
    unint64_t v89 = v37;
  }
  else
  {
    unint64_t v90 = 0xD00000000000001CLL;
  }
  v91 = (unint64_t *)((char *)v36 + 10 * v33);
  v166.origin.x = a5;
  v166.origin.y = a6;
  v166.size.width = a7;
  v166.size.height = a8;
  CGFloat Width = CGRectGetWidth(v166);
  uint64_t v93 = swift_allocObject();
  *(CGFloat *)(v93 + 16) = Width;
  *(void *)(v93 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v91 = v90;
  v91[1] = v89;
  v91[2] = v93 | 0x3000000000000000;
  v91[3] = 1;
  v159((char *)v91 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v94 = 0xD00000000000001DLL;
  unint64_t v95 = 0x80000001C1641DE0;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v94 = v38;
    unint64_t v95 = v37;
  }
  v96 = (unint64_t *)((char *)v36 + 11 * v33);
  v167.origin.x = a5;
  v167.origin.y = a6;
  v167.size.width = a7;
  v167.size.height = a8;
  CGFloat Height = CGRectGetHeight(v167);
  uint64_t v98 = swift_allocObject();
  *(CGFloat *)(v98 + 16) = Height;
  *(void *)(v98 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v96 = v94;
  v96[1] = v95;
  v96[2] = v98 | 0x3000000000000000;
  v96[3] = 1;
  v159((char *)v96 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v99 = 0xD00000000000001ALL;
  unint64_t v100 = 0x80000001C1641E00;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v101 = v38;
    unint64_t v100 = v37;
  }
  else
  {
    unint64_t v101 = 0xD00000000000001ALL;
  }
  v102 = (unint64_t *)((char *)v36 + 12 * v33);
  uint64_t v103 = swift_allocObject();
  *(void *)(v103 + 16) = a17;
  *(void *)(v103 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v102 = v101;
  v102[1] = v100;
  v102[2] = v103 | 0x3000000000000000;
  v102[3] = 1;
  v159((char *)v102 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v104 = 0x80000001C1641E20;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v99 = v38;
    unint64_t v104 = v37;
  }
  v105 = (unint64_t *)((char *)v36 + 13 * v33);
  uint64_t v106 = swift_allocObject();
  *(void *)(v106 + 16) = a18;
  *(void *)(v106 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v105 = v99;
  v105[1] = v104;
  v105[2] = v106 | 0x3000000000000000;
  v105[3] = 1;
  v159((char *)v105 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v107 = 0xD000000000000026;
  unint64_t v108 = 0x80000001C1641E40;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v109 = v38;
    unint64_t v108 = v37;
  }
  else
  {
    unint64_t v109 = 0xD000000000000026;
  }
  v110 = (unint64_t *)((char *)v36 + 14 * v33);
  v168.origin.x = a19;
  v168.origin.y = a20;
  v168.size.width = a21;
  v168.size.height = a22;
  CGFloat v111 = CGRectGetMinX(v168);
  uint64_t v112 = swift_allocObject();
  *(CGFloat *)(v112 + 16) = v111;
  *(void *)(v112 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v110 = v109;
  v110[1] = v108;
  v110[2] = v112 | 0x3000000000000000;
  v110[3] = 1;
  v159((char *)v110 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v113 = 0x80000001C1641E70;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v107 = v38;
    unint64_t v113 = v37;
  }
  v114 = (unint64_t *)((char *)&v36[2 * v33] - v33);
  v169.origin.x = a19;
  v169.origin.y = a20;
  v169.size.width = a21;
  v169.size.height = a22;
  CGFloat v115 = CGRectGetMinY(v169);
  uint64_t v116 = swift_allocObject();
  *(CGFloat *)(v116 + 16) = v115;
  *(void *)(v116 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v114 = v107;
  v114[1] = v113;
  v114[2] = v116 | 0x3000000000000000;
  v114[3] = 1;
  v159((char *)v114 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v117 = 0xD000000000000026;
  unint64_t v118 = 0x80000001C1641EA0;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v119 = v38;
    unint64_t v118 = v37;
  }
  else
  {
    unint64_t v119 = 0xD000000000000026;
  }
  v120 = &v36[2 * v33];
  v170.origin.x = a19;
  v170.origin.y = a20;
  v170.size.width = a21;
  v170.size.height = a22;
  CGFloat v121 = CGRectGetMaxX(v170);
  uint64_t v122 = swift_allocObject();
  *(CGFloat *)(v122 + 16) = v121;
  *(void *)(v122 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v120 = v119;
  v120[1] = v118;
  v120[2] = v122 | 0x3000000000000000;
  v120[3] = 1;
  v159((char *)v120 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v123 = 0x80000001C1641ED0;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v117 = v38;
    unint64_t v123 = v37;
  }
  v124 = (unint64_t *)((char *)v36 + 17 * v33);
  v171.origin.x = a19;
  v171.origin.y = a20;
  v171.size.width = a21;
  v171.size.height = a22;
  CGFloat v125 = CGRectGetMaxY(v171);
  uint64_t v126 = swift_allocObject();
  *(CGFloat *)(v126 + 16) = v125;
  *(void *)(v126 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v124 = v117;
  v124[1] = v123;
  v124[2] = v126 | 0x3000000000000000;
  v124[3] = 1;
  v159((char *)v124 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v127 = 0xD000000000000029;
  unint64_t v128 = 0x80000001C1641F00;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v129 = v38;
    unint64_t v128 = v37;
  }
  else
  {
    unint64_t v129 = 0xD000000000000029;
  }
  v130 = (unint64_t *)((char *)v36 + 18 * v33);
  sub_1C151F77C();
  uint64_t v132 = v131;
  uint64_t v133 = swift_allocObject();
  *(void *)(v133 + 16) = v132;
  *(void *)(v133 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v130 = v129;
  v130[1] = v128;
  v130[2] = v133 | 0x3000000000000000;
  v130[3] = 1;
  v159((char *)v130 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v134 = 0x80000001C1641F30;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v127 = v38;
    unint64_t v134 = v37;
  }
  v135 = (unint64_t *)((char *)v36 + 19 * v33);
  sub_1C151F77C();
  uint64_t v137 = v136;
  uint64_t v138 = swift_allocObject();
  *(void *)(v138 + 16) = v137;
  *(void *)(v138 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v135 = v127;
  v135[1] = v134;
  v135[2] = v138 | 0x3000000000000000;
  v135[3] = 1;
  v159((char *)v135 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v139 = 0xD000000000000026;
  unint64_t v140 = 0x80000001C1641F60;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v139 = v38;
    unint64_t v140 = v37;
  }
  v141 = (unint64_t *)((char *)v36 + 20 * v33);
  v172.origin.x = a19;
  v172.origin.y = a20;
  v172.size.width = a21;
  v172.size.height = a22;
  CGFloat v142 = CGRectGetWidth(v172);
  uint64_t v143 = swift_allocObject();
  *(CGFloat *)(v143 + 16) = v142;
  *(void *)(v143 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v141 = v139;
  v141[1] = v140;
  v141[2] = v143 | 0x3000000000000000;
  v141[3] = 1;
  v159((char *)v141 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v144 = 0xD000000000000027;
  unint64_t v145 = 0x80000001C1641F90;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v144 = v38;
    unint64_t v145 = v37;
  }
  v146 = (unint64_t *)((char *)v36 + 21 * v33);
  v173.origin.x = a19;
  v173.origin.y = a20;
  v173.size.width = a21;
  v173.size.height = a22;
  CGFloat v147 = CGRectGetHeight(v173);
  uint64_t v148 = swift_allocObject();
  *(CGFloat *)(v148 + 16) = v147;
  *(void *)(v148 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v146 = v144;
  v146[1] = v145;
  v146[2] = v148 | 0x3000000000000000;
  v146[3] = 1;
  v159((char *)v146 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v149 = 0xD000000000000015;
  unint64_t v150 = 0x80000001C1641FC0;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v149 = v38;
    unint64_t v150 = v37;
  }
  v151 = (unint64_t *)((char *)v36 + 22 * v33);
  uint64_t v152 = swift_allocObject();
  *(void *)(v152 + 16) = a23;
  *(void *)(v152 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v151 = v149;
  v151[1] = v150;
  v151[2] = v152 | 0x3000000000000000;
  v151[3] = 1;
  v159((char *)v151 + *(int *)(v160 + 28), 1, 1, v43);
  unint64_t v153 = 0xD000000000000016;
  unint64_t v154 = 0x80000001C1641FE0;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    unint64_t v153 = v38;
    unint64_t v154 = v37;
  }
  v155 = (unint64_t *)((char *)v36 + 23 * v33);
  uint64_t v156 = swift_allocObject();
  *(void *)(v156 + 16) = a24;
  *(void *)(v156 + 24) = MEMORY[0x1E4FBC860];
  unint64_t *v155 = v153;
  v155[1] = v154;
  v155[2] = v156 | 0x3000000000000000;
  v155[3] = 1;
  v159((char *)v155 + *(int *)(v160 + 28), 1, 1, v43);
  return v158;
}

void sub_1C0028FA4(uint64_t a1)
{
}

unint64_t sub_1C0028FD8()
{
  unint64_t result = qword_1EB875B48;
  if (!qword_1EB875B48)
  {
    sub_1BFEFF3E8(255, &qword_1EB875B50, (uint64_t (*)(void))sub_1C00745AC, (uint64_t)&type metadata for FormatButtonNodeAction, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatSwitchValue);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875B48);
  }
  return result;
}

unint64_t sub_1C0029068()
{
  unint64_t result = qword_1EB85B988;
  if (!qword_1EB85B988)
  {
    sub_1BFEFF3E8(255, &qword_1EB875B50, (uint64_t (*)(void))sub_1C00745AC, (uint64_t)&type metadata for FormatButtonNodeAction, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatSwitchValue);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B988);
  }
  return result;
}

uint64_t sub_1C00290F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  *(void *)&long long v245 = a1;
  v243 = a3;
  uint64_t v258 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1C1515FDC();
  *(void *)&long long v244 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v232 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BFF2918C();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v7);
  CGFloat v10 = (char *)&v232 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1C151631C();
  uint64_t v242 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  CGFloat v13 = (char *)&v232 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BFF29220();
  uint64_t v15 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v232 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 60)
  {
    case 1uLL:
      long long v43 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      long long v249 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      long long v250 = v43;
      uint64_t v251 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      sub_1C0E4852C((uint64_t)&v255);
      long long v245 = v255;
      uint64_t v44 = v256;
      long long v244 = v257;
      uint64_t v45 = swift_allocObject();
      uint64_t v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = v245;
      *(void *)(v46 + 32) = v44;
      *(_OWORD *)(v46 + 40) = v244;
      *(void *)(v45 + 16) = a2;
      *(void *)(v45 + 24) = v46 | 0x1000000000000000;
      unint64_t *v243 = v45 | 0x8000000000000000;
      return swift_retain();
    case 2uLL:
      *(void *)&long long v244 = a2 & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v23 = swift_projectBox();
      sub_1C0E5720C(v23, (uint64_t)v17, (uint64_t (*)(void))sub_1BFF29220);
      sub_1C027259C(v13);
      uint64_t v24 = swift_allocObject();
      uint64_t v25 = swift_allocBox();
      uint64_t v27 = v26;
      uint64_t v28 = v242;
      (*(void (**)(uint64_t, char *, uint64_t))(v242 + 16))(v26, v13, v11);
      *(void *)(v27 + *(int *)(v15 + 36)) = MEMORY[0x1E4FBC860];
      unint64_t v29 = *(void (**)(char *, uint64_t))(v28 + 8);
      swift_retain();
      v29(v13, v11);
      uint64_t result = sub_1C0E570EC((uint64_t)v17, (uint64_t (*)(void))sub_1BFF29220);
      *(void *)(v24 + 16) = a2;
      *(void *)(v24 + 24) = v25 | 0x2000000000000000;
      unint64_t v30 = v24 | 0x8000000000000000;
      goto LABEL_146;
    case 3uLL:
      unint64_t v236 = a2;
      uint64_t v31 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v237 = a2 & 0xFFFFFFFFFFFFFFFLL;
      if (!*(void *)(*(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18) + 16)) {
        goto LABEL_141;
      }
      uint64_t v235 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v32 = sub_1BFFC514C();
      uint64_t v33 = *(void *)(*(void *)(v32 + 40) + 16);
      swift_beginAccess();
      if (*(void *)(*(void *)(v33 + 16) + 16))
      {
        uint64_t v252 = *(void *)(v32 + 56);
        uint64_t v34 = swift_bridgeObjectRetain();
        uint64_t v35 = sub_1BFEF3B08(v34);
        sub_1BFEF3808(v35);
        swift_release();
        *(void *)&long long v245 = v252;
      }
      else
      {
        *(void *)&long long v245 = sub_1BFEF3784();
        swift_release();
      }
      uint64_t v239 = *(void *)(v235 + 16);
      if (!v239) {
        goto LABEL_140;
      }
      uint64_t v238 = v235 + 32;
      swift_bridgeObjectRetain();
      uint64_t v120 = 0;
      while (1)
      {
        CGFloat v121 = (uint64_t *)(v238 + 24 * v120);
        uint64_t v123 = *v121;
        uint64_t v122 = v121[1];
        uint64_t v124 = v121[2];
        uint64_t v125 = qword_1EB87F148;
        swift_bridgeObjectRetain();
        if (v125 != -1) {
          swift_once();
        }
        uint64_t v126 = qword_1EB93C770;
        uint64_t v127 = *(void *)(qword_1EB93C770 + 24);
        swift_bridgeObjectRetain();
        sub_1C1517E7C();
        unint64_t v128 = (uint64_t *)(v126 + 16);
        swift_beginAccess();
        uint64_t v129 = *(void *)(v126 + 16);
        uint64_t v130 = *(void *)(v129 + 16);
        uint64_t v242 = v120;
        if (!v130) {
          goto LABEL_73;
        }
        swift_bridgeObjectRetain();
        unint64_t v131 = sub_1BFEF2D8C(v123, v122);
        if ((v132 & 1) == 0) {
          break;
        }
        uint64_t v133 = *(void *)(*(void *)(v129 + 56) + 24 * v131 + 16);
        swift_endAccess();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_83:
        swift_bridgeObjectRelease();
        sub_1C1517E8C();
        swift_bridgeObjectRelease();
        uint64_t v156 = *(void *)(v133 + 16);
        if (!v156)
        {
LABEL_65:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_66;
        }
        uint64_t v241 = v122;
        *(void *)&long long v244 = v133;
        v157 = (uint64_t *)(v133 + 64);
        while (1)
        {
          uint64_t v158 = *(v157 - 1);
          uint64_t v159 = *v157;
          char v160 = *(unsigned char *)(v158 + 32);
          unsigned int v161 = v160 & 0x3F;
          unint64_t v162 = (unint64_t)((1 << v160) + 63) >> 6;
          size_t v163 = 8 * v162;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
          if (v161 <= 0xD
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
          {
            MEMORY[0x1F4188790](isStackAllocationSafe);
            unint64_t v113 = (char *)&v232 - ((v163 + 15) & 0x3FFFFFFFFFFFFFF0);
            bzero(v113, v163);
            id v165 = v246;
            uint64_t v166 = sub_1BFEFB09C((uint64_t)v113, v162, v158, v245);
            swift_bridgeObjectRelease();
            id v246 = v165;
            if (v165) {
              goto LABEL_153;
            }
          }
          else
          {
            unint64_t v113 = (char *)swift_slowAlloc();
            bzero(v113, v163);
            id v167 = v246;
            uint64_t v168 = sub_1BFEFB09C((uint64_t)v113, v162, v158, v245);
            id v246 = v167;
            if (v167) {
              goto LABEL_154;
            }
            uint64_t v166 = v168;
            swift_bridgeObjectRelease();
            MEMORY[0x1C18C9B00](v113, -1, -1);
          }
          char v169 = sub_1BFEFAE14(v166, v158);
          swift_release();
          if (v169) {
            break;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_86:
          v157 += 5;
          if (!--v156) {
            goto LABEL_65;
          }
        }
        char v170 = sub_1BFEFB810(v245, v159);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v170 & 1) == 0) {
          goto LABEL_86;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v31 = v124;
LABEL_66:
        uint64_t v120 = v242 + 1;
        if (v242 + 1 == v239)
        {
          swift_bridgeObjectRelease();
LABEL_140:
          swift_bridgeObjectRelease();
LABEL_141:
          uint64_t v225 = swift_allocObject();
          uint64_t v226 = swift_allocObject();
          *(void *)(v226 + 16) = v31;
          *(void *)(v226 + 24) = MEMORY[0x1E4FBC860];
          *(void *)(v225 + 16) = v236;
          *(void *)(v225 + 24) = v226 | 0x3000000000000000;
          unint64_t *v243 = v225 | 0x8000000000000000;
          return swift_retain();
        }
      }
      swift_bridgeObjectRelease();
LABEL_73:
      uint64_t v240 = v127;
      swift_endAccess();
      v247 = (void *)v123;
      uint64_t v248 = v122;
      swift_bridgeObjectRetain();
      sub_1BFF04A00((uint64_t *)&v247, &v252);
      uint64_t v134 = v253;
      uint64_t v241 = v252;
      uint64_t v135 = v254;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      *(void *)&long long v244 = v135;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v247 = (void *)*v128;
      uint64_t v137 = (uint64_t)v247;
      *unint64_t v128 = 0x8000000000000000;
      uint64_t v138 = v123;
      uint64_t v139 = v123;
      uint64_t v140 = v122;
      unint64_t v142 = sub_1BFEF2D8C(v139, v122);
      uint64_t v143 = *(void *)(v137 + 16);
      BOOL v144 = (v141 & 1) == 0;
      uint64_t v145 = v143 + v144;
      if (__OFADD__(v143, v144)) {
        goto LABEL_148;
      }
      char v146 = v141;
      if (*(void *)(v137 + 24) < v145)
      {
        sub_1BFFDF158(v145, isUniquelyReferenced_nonNull_native);
        unint64_t v147 = sub_1BFEF2D8C(v138, v140);
        if ((v146 & 1) != (v148 & 1)) {
          goto LABEL_157;
        }
        unint64_t v142 = v147;
        unint64_t v149 = v247;
        if ((v146 & 1) == 0) {
          goto LABEL_77;
        }
LABEL_81:
        unint64_t v154 = (uint64_t *)(v149[7] + 24 * v142);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *unint64_t v154 = v241;
        v154[1] = v134;
        uint64_t v155 = v244;
        v154[2] = v244;
        uint64_t v122 = v140;
        uint64_t v133 = v155;
LABEL_82:
        *unint64_t v128 = (uint64_t)v149;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
        goto LABEL_83;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        unint64_t v149 = v247;
        if (v141) {
          goto LABEL_81;
        }
      }
      else
      {
        sub_1C106B39C();
        unint64_t v149 = v247;
        if (v146) {
          goto LABEL_81;
        }
      }
LABEL_77:
      v149[(v142 >> 6) + 8] |= 1 << v142;
      unint64_t v150 = (uint64_t *)(v149[6] + 16 * v142);
      *unint64_t v150 = v138;
      v150[1] = v140;
      v151 = (uint64_t *)(v149[7] + 24 * v142);
      uint64_t *v151 = v241;
      v151[1] = v134;
      uint64_t v133 = v244;
      v151[2] = v244;
      uint64_t v152 = v149[2];
      BOOL v100 = __OFADD__(v152, 1);
      uint64_t v153 = v152 + 1;
      if (v100) {
        goto LABEL_151;
      }
      v149[2] = v153;
      swift_bridgeObjectRetain();
      uint64_t v122 = v140;
      goto LABEL_82;
    case 4uLL:
      unint64_t v236 = a2;
      uint64_t v235 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v234 = a2 & 0xFFFFFFFFFFFFFFFLL;
      if (!*(void *)(*(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18) + 16)) {
        goto LABEL_139;
      }
      uint64_t v233 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v19 = sub_1BFFC514C();
      uint64_t v20 = *(void *)(*(void *)(v19 + 40) + 16);
      swift_beginAccess();
      if (*(void *)(*(void *)(v20 + 16) + 16))
      {
        uint64_t v252 = *(void *)(v19 + 56);
        uint64_t v21 = swift_bridgeObjectRetain();
        uint64_t v22 = sub_1BFEF3B08(v21);
        sub_1BFEF3808(v22);
        swift_release();
        *(void *)&long long v245 = v252;
      }
      else
      {
        *(void *)&long long v245 = sub_1BFEF3784();
        swift_release();
      }
      uint64_t v238 = *(void *)(v233 + 16);
      if (!v238) {
        goto LABEL_138;
      }
      uint64_t v237 = v233 + 32;
      swift_bridgeObjectRetain();
      uint64_t v68 = 0;
      while (1)
      {
        uint64_t v69 = (uint64_t *)(v237 + 24 * v68);
        uint64_t v71 = *v69;
        uint64_t v70 = v69[1];
        uint64_t v72 = v69[2];
        uint64_t v73 = qword_1EB87F148;
        swift_bridgeObjectRetain();
        if (v73 != -1) {
          swift_once();
        }
        uint64_t v74 = qword_1EB93C770;
        uint64_t v75 = *(void *)(qword_1EB93C770 + 24);
        swift_bridgeObjectRetain();
        sub_1C1517E7C();
        uint64_t v76 = (uint64_t *)(v74 + 16);
        swift_beginAccess();
        uint64_t v77 = *(void *)(v74 + 16);
        uint64_t v78 = *(void *)(v77 + 16);
        uint64_t v242 = v68;
        uint64_t v239 = v72;
        if (!v78) {
          goto LABEL_35;
        }
        swift_bridgeObjectRetain();
        unint64_t v79 = sub_1BFEF2D8C(v71, v70);
        if ((v80 & 1) == 0) {
          break;
        }
        uint64_t v81 = *(void *)(*(void *)(v77 + 56) + 24 * v79 + 16);
        swift_endAccess();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_45:
        swift_bridgeObjectRelease();
        sub_1C1517E8C();
        swift_bridgeObjectRelease();
        uint64_t v104 = *(void *)(v81 + 16);
        if (!v104)
        {
LABEL_27:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_28;
        }
        uint64_t v241 = v70;
        *(void *)&long long v244 = v81;
        v105 = (uint64_t *)(v81 + 64);
        while (1)
        {
          uint64_t v106 = *(v105 - 1);
          uint64_t v107 = *v105;
          char v108 = *(unsigned char *)(v106 + 32);
          unsigned int v109 = v108 & 0x3F;
          unint64_t v110 = (unint64_t)((1 << v108) + 63) >> 6;
          size_t v111 = 8 * v110;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          uint64_t v112 = swift_bridgeObjectRetain();
          if (v109 <= 0xD || (uint64_t v112 = swift_stdlib_isStackAllocationSafe(), (v112 & 1) != 0))
          {
            MEMORY[0x1F4188790](v112);
            unint64_t v113 = (char *)&v232 - ((v111 + 15) & 0x3FFFFFFFFFFFFFF0);
            bzero(v113, v111);
            id v114 = v246;
            uint64_t v115 = sub_1BFEFB09C((uint64_t)v113, v110, v106, v245);
            swift_bridgeObjectRelease();
            id v246 = v114;
            if (v114) {
              goto LABEL_153;
            }
          }
          else
          {
            unint64_t v113 = (char *)swift_slowAlloc();
            bzero(v113, v111);
            id v116 = v246;
            uint64_t v117 = sub_1BFEFB09C((uint64_t)v113, v110, v106, v245);
            id v246 = v116;
            if (v116) {
              goto LABEL_154;
            }
            uint64_t v115 = v117;
            swift_bridgeObjectRelease();
            MEMORY[0x1C18C9B00](v113, -1, -1);
          }
          char v118 = sub_1BFEFAE14(v115, v106);
          swift_release();
          if (v118) {
            break;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_48:
          v105 += 5;
          if (!--v104) {
            goto LABEL_27;
          }
        }
        char v119 = sub_1BFEFB810(v245, v107);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v119 & 1) == 0) {
          goto LABEL_48;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v235 = v239;
LABEL_28:
        uint64_t v68 = v242 + 1;
        if (v242 + 1 == v238)
        {
          swift_bridgeObjectRelease();
LABEL_138:
          swift_bridgeObjectRelease();
LABEL_139:
          uint64_t v222 = swift_allocObject();
          uint64_t v223 = swift_allocObject();
          uint64_t v224 = MEMORY[0x1E4FBC860];
          *(void *)(v223 + 16) = v235;
          *(void *)(v223 + 24) = v224;
          *(void *)(v222 + 16) = v236;
          *(void *)(v222 + 24) = v223 | 0x4000000000000000;
          unint64_t *v243 = v222 | 0x8000000000000000;
          return swift_retain();
        }
      }
      swift_bridgeObjectRelease();
LABEL_35:
      uint64_t v240 = v75;
      swift_endAccess();
      v247 = (void *)v71;
      uint64_t v248 = v70;
      swift_bridgeObjectRetain();
      sub_1BFF04A00((uint64_t *)&v247, &v252);
      uint64_t v82 = v253;
      uint64_t v241 = v252;
      uint64_t v83 = v254;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      *(void *)&long long v244 = v83;
      swift_bridgeObjectRetain();
      char v84 = swift_isUniquelyReferenced_nonNull_native();
      v247 = (void *)*v76;
      uint64_t v85 = (uint64_t)v247;
      *uint64_t v76 = 0x8000000000000000;
      uint64_t v86 = v71;
      uint64_t v87 = v70;
      unint64_t v89 = sub_1BFEF2D8C(v71, v70);
      uint64_t v90 = *(void *)(v85 + 16);
      BOOL v91 = (v88 & 1) == 0;
      uint64_t v92 = v90 + v91;
      if (__OFADD__(v90, v91))
      {
        __break(1u);
LABEL_148:
        __break(1u);
        goto LABEL_149;
      }
      char v93 = v88;
      if (*(void *)(v85 + 24) < v92)
      {
        sub_1BFFDF158(v92, v84);
        unint64_t v94 = sub_1BFEF2D8C(v86, v87);
        if ((v93 & 1) != (v95 & 1)) {
          goto LABEL_157;
        }
        unint64_t v89 = v94;
        v96 = v247;
        if ((v93 & 1) == 0) {
          goto LABEL_39;
        }
LABEL_43:
        v102 = (uint64_t *)(v96[7] + 24 * v89);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t *v102 = v241;
        v102[1] = v82;
        uint64_t v103 = v244;
        v102[2] = v244;
        uint64_t v70 = v87;
        uint64_t v81 = v103;
LABEL_44:
        *uint64_t v76 = (uint64_t)v96;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
        goto LABEL_45;
      }
      if (v84)
      {
        v96 = v247;
        if (v88) {
          goto LABEL_43;
        }
      }
      else
      {
        sub_1C106B39C();
        v96 = v247;
        if (v93) {
          goto LABEL_43;
        }
      }
LABEL_39:
      v96[(v89 >> 6) + 8] |= 1 << v89;
      v97 = (uint64_t *)(v96[6] + 16 * v89);
      uint64_t *v97 = v86;
      v97[1] = v87;
      uint64_t v98 = (uint64_t *)(v96[7] + 24 * v89);
      *uint64_t v98 = v241;
      v98[1] = v82;
      uint64_t v81 = v244;
      v98[2] = v244;
      uint64_t v99 = v96[2];
      BOOL v100 = __OFADD__(v99, 1);
      uint64_t v101 = v99 + 1;
      if (v100) {
        goto LABEL_150;
      }
      v96[2] = v101;
      swift_bridgeObjectRetain();
      uint64_t v70 = v87;
      goto LABEL_44;
    case 5uLL:
      uint64_t v56 = sub_1C002AB98(v245, *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10), *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18), *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20));
      uint64_t v58 = v57;
      uint64_t v59 = swift_allocObject();
      uint64_t v60 = swift_allocObject();
      *(void *)(v60 + 16) = v56;
      *(void *)(v60 + 24) = v58;
      *(void *)(v60 + 32) = MEMORY[0x1E4FBC860];
      *(void *)(v59 + 16) = a2;
      *(void *)(v59 + 24) = v60 | 0x5000000000000000;
      unint64_t *v243 = v59 | 0x8000000000000000;
      return swift_retain();
    case 6uLL:
      uint64_t v242 = a2 & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v61 = swift_projectBox();
      sub_1C0E5720C(v61, (uint64_t)v10, (uint64_t (*)(void))sub_1BFF2918C);
      sub_1C0272E0C(v6);
      uint64_t v62 = swift_allocObject();
      uint64_t v63 = swift_allocBox();
      uint64_t v65 = v64;
      uint64_t v66 = v244;
      (*(void (**)(uint64_t, char *, uint64_t))(v244 + 16))(v64, v6, v4);
      *(void *)(v65 + *(int *)(v8 + 36)) = MEMORY[0x1E4FBC860];
      unint64_t v67 = *(void (**)(char *, uint64_t))(v66 + 8);
      swift_retain();
      v67(v6, v4);
      uint64_t result = sub_1C0E570EC((uint64_t)v10, (uint64_t (*)(void))sub_1BFF2918C);
      *(void *)(v62 + 16) = a2;
      *(void *)(v62 + 24) = v63 | 0x6000000000000000;
      unint64_t v30 = v62 | 0x8000000000000000;
      goto LABEL_146;
    case 7uLL:
      unint64_t v36 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v37 = swift_allocObject();
      id v38 = v246;
      uint64_t result = sub_1C027A474((void *)v245, v36, (void *)(v37 + 16));
      id v246 = v38;
      if (v38) {
        return swift_deallocUninitializedObject();
      }
      unint64_t v30 = v37 | 0x7000000000000000;
      goto LABEL_146;
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xDuLL:
      unint64_t *v243 = a2;
      return swift_retain();
    case 0xCuLL:
      unint64_t v47 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v48 = swift_allocObject();
      uint64_t v49 = v48;
      if (v47 >> 61 == 3)
      {
        uint64_t v50 = v47 & 0x1FFFFFFFFFFFFFFFLL;
        uint64_t v51 = *(void *)((v47 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
        uint64_t v52 = *(void *)(v50 + 24);
        uint64_t v53 = *(void *)(v50 + 32);
        char v54 = *(unsigned char *)(v50 + 40);
        sub_1BFF67F78(v51, v52, v53, v54);
        id v55 = v246;
        sub_1C021DBD0(v245, v51, v52, v53, v54, (uint64_t *)&v255);
        id v246 = v55;
        if (v55)
        {
          sub_1BFF05CCC(v51, v52, v53, v54);
          return swift_deallocUninitializedObject();
        }
        uint64_t v229 = v255;
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v51;
        *(void *)(result + 24) = v52;
        *(void *)(result + 32) = v53;
        *(unsigned char *)(result + 40) = v54;
        *(void *)(result + 48) = v229;
        *(void *)(v49 + 16) = result | 0x8000000000000000;
      }
      else
      {
        *(void *)(v48 + 16) = v47;
        uint64_t result = swift_retain();
      }
      unint64_t v30 = v49 | 0xC000000000000000;
LABEL_146:
      unint64_t *v243 = v30;
      return result;
    default:
      LODWORD(v235) = *(unsigned __int8 *)(a2 + 16);
      unint64_t v236 = a2;
      if (!*(void *)(*(void *)(a2 + 24) + 16)) {
        goto LABEL_143;
      }
      uint64_t v234 = *(void *)(a2 + 24);
      uint64_t v39 = sub_1BFFC514C();
      uint64_t v40 = *(void *)(*(void *)(v39 + 40) + 16);
      swift_beginAccess();
      if (*(void *)(*(void *)(v40 + 16) + 16))
      {
        uint64_t v252 = *(void *)(v39 + 56);
        uint64_t v41 = swift_bridgeObjectRetain();
        uint64_t v42 = sub_1BFEF3B08(v41);
        sub_1BFEF3808(v42);
        swift_release();
        *(void *)&long long v245 = v252;
      }
      else
      {
        *(void *)&long long v245 = sub_1BFEF3784();
        swift_release();
      }
      uint64_t v238 = *(void *)(v234 + 16);
      if (!v238) {
        goto LABEL_142;
      }
      uint64_t v237 = v234 + 32;
      swift_bridgeObjectRetain();
      uint64_t v171 = 0;
LABEL_105:
      uint64_t v172 = v237 + 24 * v171;
      uint64_t v174 = *(void *)v172;
      uint64_t v173 = *(void *)(v172 + 8);
      LODWORD(v239) = *(unsigned __int8 *)(v172 + 16);
      uint64_t v175 = qword_1EB87F148;
      swift_bridgeObjectRetain();
      if (v175 != -1) {
        swift_once();
      }
      uint64_t v176 = qword_1EB93C770;
      uint64_t v177 = *(void *)(qword_1EB93C770 + 24);
      swift_bridgeObjectRetain();
      sub_1C1517E7C();
      v178 = (uint64_t *)(v176 + 16);
      swift_beginAccess();
      uint64_t v179 = *(void *)(v176 + 16);
      uint64_t v180 = *(void *)(v179 + 16);
      *(void *)&long long v244 = v171;
      if (!v180) {
        goto LABEL_111;
      }
      swift_bridgeObjectRetain();
      unint64_t v181 = sub_1BFEF2D8C(v174, v173);
      if (v182)
      {
        uint64_t v183 = *(void *)(*(void *)(v179 + 56) + 24 * v181 + 16);
        swift_endAccess();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_121;
      }
      swift_bridgeObjectRelease();
LABEL_111:
      uint64_t v240 = v177;
      swift_endAccess();
      v247 = (void *)v174;
      uint64_t v248 = v173;
      swift_bridgeObjectRetain();
      sub_1BFF04A00((uint64_t *)&v247, &v252);
      uint64_t v184 = v253;
      uint64_t v241 = v252;
      uint64_t v185 = v254;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v242 = v184;
      swift_bridgeObjectRetain();
      uint64_t v186 = v185;
      swift_bridgeObjectRetain();
      char v187 = swift_isUniquelyReferenced_nonNull_native();
      v247 = (void *)*v178;
      uint64_t v188 = (uint64_t)v247;
      uint64_t *v178 = 0x8000000000000000;
      uint64_t v189 = v174;
      uint64_t v190 = v173;
      unint64_t v192 = sub_1BFEF2D8C(v174, v173);
      uint64_t v193 = *(void *)(v188 + 16);
      BOOL v194 = (v191 & 1) == 0;
      uint64_t v195 = v193 + v194;
      if (__OFADD__(v193, v194))
      {
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
      }
      char v196 = v191;
      if (*(void *)(v188 + 24) >= v195)
      {
        if (v187)
        {
          v199 = v247;
          if ((v191 & 1) == 0) {
            goto LABEL_115;
          }
        }
        else
        {
          sub_1C106B39C();
          v199 = v247;
          if ((v196 & 1) == 0) {
            goto LABEL_115;
          }
        }
LABEL_119:
        v205 = (uint64_t *)(v199[7] + 24 * v192);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v206 = v242;
        uint64_t *v205 = v241;
        v205[1] = v206;
        v205[2] = v186;
        uint64_t v173 = v190;
        uint64_t v183 = v186;
        goto LABEL_120;
      }
      sub_1BFFDF158(v195, v187);
      unint64_t v197 = sub_1BFEF2D8C(v189, v190);
      if ((v196 & 1) != (v198 & 1)) {
        goto LABEL_157;
      }
      unint64_t v192 = v197;
      v199 = v247;
      if (v196) {
        goto LABEL_119;
      }
LABEL_115:
      v199[(v192 >> 6) + 8] |= 1 << v192;
      v200 = (uint64_t *)(v199[6] + 16 * v192);
      uint64_t *v200 = v189;
      v200[1] = v190;
      v201 = (uint64_t *)(v199[7] + 24 * v192);
      uint64_t v202 = v242;
      uint64_t *v201 = v241;
      v201[1] = v202;
      v201[2] = v186;
      uint64_t v203 = v199[2];
      BOOL v100 = __OFADD__(v203, 1);
      uint64_t v204 = v203 + 1;
      if (v100) {
        goto LABEL_152;
      }
      uint64_t v183 = v186;
      v199[2] = v204;
      swift_bridgeObjectRetain();
      uint64_t v173 = v190;
LABEL_120:
      uint64_t *v178 = (uint64_t)v199;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
LABEL_121:
      swift_bridgeObjectRelease();
      sub_1C1517E8C();
      swift_bridgeObjectRelease();
      unint64_t v113 = *(char **)(v183 + 16);
      if (!v113)
      {
LABEL_103:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_104;
      }
      uint64_t v242 = v173;
      uint64_t v241 = v183;
      v207 = (uint64_t *)(v183 + 64);
      while (1)
      {
        uint64_t v208 = *(v207 - 1);
        uint64_t v209 = *v207;
        char v210 = *(unsigned char *)(v208 + 32);
        unsigned int v211 = v210 & 0x3F;
        unint64_t v212 = (unint64_t)((1 << v210) + 63) >> 6;
        size_t v213 = 8 * v212;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v214 = swift_bridgeObjectRetain();
        if (v211 <= 0xD) {
          break;
        }
        uint64_t v214 = swift_stdlib_isStackAllocationSafe();
        if (v214) {
          break;
        }
        v217 = (char *)swift_slowAlloc();
        bzero(v217, v213);
        id v218 = v246;
        uint64_t v219 = sub_1BFEFB09C((uint64_t)v217, v212, v208, v245);
        id v246 = v218;
        if (v218)
        {
          swift_bridgeObjectRelease();

          v231 = v217;
          goto LABEL_156;
        }
        uint64_t v216 = v219;
        swift_bridgeObjectRelease();
        MEMORY[0x1C18C9B00](v217, -1, -1);
LABEL_131:
        char v220 = sub_1BFEFAE14(v216, v208);
        swift_release();
        if (v220)
        {
          char v221 = sub_1BFEFB810(v245, v209);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v221)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            LODWORD(v235) = v239;
LABEL_104:
            uint64_t v171 = v244 + 1;
            if ((void)v244 + 1 == v238)
            {
              swift_bridgeObjectRelease();
LABEL_142:
              swift_bridgeObjectRelease();
LABEL_143:
              uint64_t v227 = swift_allocObject();
              uint64_t v228 = swift_allocObject();
              *(unsigned char *)(v228 + 16) = v235 & 1;
              *(void *)(v228 + 24) = MEMORY[0x1E4FBC860];
              *(void *)(v227 + 16) = v236;
              *(void *)(v227 + 24) = v228;
              unint64_t *v243 = v227 | 0x8000000000000000;
              return swift_retain();
            }
            goto LABEL_105;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v207 += 5;
        if (!--v113) {
          goto LABEL_103;
        }
      }
      MEMORY[0x1F4188790](v214);
      bzero((char *)&v232 - ((v213 + 15) & 0x3FFFFFFFFFFFFFF0), v213);
      id v215 = v246;
      uint64_t v216 = sub_1BFEFB09C((uint64_t)&v232 - ((v213 + 15) & 0x3FFFFFFFFFFFFFF0), v212, v208, v245);
      swift_bridgeObjectRelease();
      id v246 = v215;
      if (!v215) {
        goto LABEL_131;
      }
LABEL_153:
      id v230 = v246;
      swift_willThrow();

      __break(1u);
LABEL_154:
      swift_bridgeObjectRelease();

      v231 = v113;
LABEL_156:
      MEMORY[0x1C18C9B00](v231, -1, -1);
      __break(1u);
LABEL_157:
      uint64_t result = sub_1C1520CFC();
      __break(1u);
      return result;
  }
}

uint64_t sub_1C002AB98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v75[6] = *MEMORY[0x1E4F143B8];
  uint64_t v66 = *(void *)(a4 + 16);
  if (v66)
  {
    uint64_t v7 = sub_1BFFC514C();
    uint64_t v8 = *(void *)(*(void *)(v7 + 40) + 16);
    swift_beginAccess();
    uint64_t v9 = *(void *)(*(void *)(v8 + 16) + 16);
    uint64_t v63 = a2;
    if (v9)
    {
      v75[0] = *(void *)(v7 + 56);
      uint64_t v10 = swift_bridgeObjectRetain();
      uint64_t v11 = sub_1BFEF3B08(v10);
      sub_1BFEF3808(v11);
      swift_release();
      uint64_t v73 = v75[0];
    }
    else
    {
      uint64_t v73 = sub_1BFEF3784();
      swift_release();
    }
    uint64_t v65 = a4 + 32;
    v62[0] = a4;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v12 = 0;
    v62[1] = a3;
    uint64_t v64 = a3;
    while (1)
    {
      uint64_t v14 = (uint64_t *)(v65 + 32 * v12);
      uint64_t v16 = *v14;
      uint64_t v15 = v14[1];
      uint64_t v17 = v14[3];
      uint64_t v67 = v14[2];
      uint64_t v18 = qword_1EB87F148;
      swift_bridgeObjectRetain();
      uint64_t v70 = v17;
      swift_bridgeObjectRetain();
      if (v18 != -1) {
        swift_once();
      }
      uint64_t v19 = qword_1EB93C770;
      uint64_t v20 = *(void *)(qword_1EB93C770 + 24);
      swift_bridgeObjectRetain();
      sub_1C1517E7C();
      uint64_t v21 = (uint64_t *)(v19 + 16);
      swift_beginAccess();
      uint64_t v22 = *(void *)(v19 + 16);
      uint64_t v23 = *(void *)(v22 + 16);
      uint64_t v71 = v12;
      if (!v23) {
        goto LABEL_15;
      }
      swift_bridgeObjectRetain();
      unint64_t v24 = sub_1BFEF2D8C(v16, v15);
      if ((v25 & 1) == 0) {
        break;
      }
      uint64_t v26 = *(void *)(*(void *)(v22 + 56) + 24 * v24 + 16);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
LABEL_27:
      swift_bridgeObjectRelease();
      sub_1C1517E8C();
      swift_bridgeObjectRelease();
      uint64_t v48 = *(void *)(v26 + 16);
      if (!v48)
      {
LABEL_7:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v13 = v71;
        goto LABEL_8;
      }
      uint64_t v69 = v15;
      uint64_t v72 = v26;
      uint64_t v49 = (uint64_t *)(v26 + 64);
      while (1)
      {
        uint64_t v50 = *(v49 - 1);
        uint64_t v51 = *v49;
        char v52 = *(unsigned char *)(v50 + 32);
        unsigned int v53 = v52 & 0x3F;
        unint64_t v54 = (unint64_t)((1 << v52) + 63) >> 6;
        size_t v55 = 8 * v54;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
        if (v53 <= 0xD
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1F4188790](isStackAllocationSafe);
          bzero((char *)v62 - ((v55 + 15) & 0x3FFFFFFFFFFFFFF0), v55);
          uint64_t v57 = sub_1BFEFB09C((uint64_t)v62 - ((v55 + 15) & 0x3FFFFFFFFFFFFFF0), v54, v50, v73);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v58 = (void *)swift_slowAlloc();
          bzero(v58, v55);
          uint64_t v57 = sub_1BFEFB09C((uint64_t)v58, v54, v50, v73);
          swift_bridgeObjectRelease();
          MEMORY[0x1C18C9B00](v58, -1, -1);
        }
        char v59 = sub_1BFEFAE14(v57, v50);
        swift_release();
        if (v59) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_30:
        v49 += 5;
        if (!--v48) {
          goto LABEL_7;
        }
      }
      char v60 = sub_1BFEFB810(v73, v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v60 & 1) == 0) {
        goto LABEL_30;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = v71;
      uint64_t v63 = v67;
      uint64_t v64 = v70;
LABEL_8:
      swift_bridgeObjectRelease();
      uint64_t v12 = v13 + 1;
      if (v12 == v66)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        return v63;
      }
    }
    swift_bridgeObjectRelease();
LABEL_15:
    uint64_t v68 = v20;
    swift_endAccess();
    v74[0] = v16;
    v74[1] = v15;
    swift_bridgeObjectRetain();
    sub_1BFF04A00(v74, v75);
    uint64_t v27 = v75[1];
    uint64_t v69 = v75[0];
    uint64_t v28 = v75[2];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v72 = v28;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v74[0] = *v21;
    uint64_t v30 = v74[0];
    *uint64_t v21 = 0x8000000000000000;
    uint64_t v31 = v16;
    uint64_t v32 = v15;
    unint64_t v34 = sub_1BFEF2D8C(v16, v15);
    uint64_t v35 = *(void *)(v30 + 16);
    BOOL v36 = (v33 & 1) == 0;
    uint64_t v37 = v35 + v36;
    if (__OFADD__(v35, v36))
    {
      __break(1u);
LABEL_42:
      __break(1u);
    }
    char v38 = v33;
    if (*(void *)(v30 + 24) < v37)
    {
      sub_1BFFDF158(v37, isUniquelyReferenced_nonNull_native);
      unint64_t v39 = sub_1BFEF2D8C(v31, v32);
      if ((v38 & 1) != (v40 & 1))
      {
        uint64_t result = sub_1C1520CFC();
        __break(1u);
        return result;
      }
      unint64_t v34 = v39;
      uint64_t v41 = (void *)v74[0];
      if ((v38 & 1) == 0) {
        goto LABEL_24;
      }
LABEL_22:
      uint64_t v42 = (uint64_t *)(v41[7] + 24 * v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v42 = v69;
      v42[1] = v27;
      uint64_t v26 = v72;
      v42[2] = v72;
      uint64_t v15 = v32;
LABEL_26:
      *uint64_t v21 = (uint64_t)v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      goto LABEL_27;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v41 = (void *)v74[0];
      if (v33) {
        goto LABEL_22;
      }
    }
    else
    {
      sub_1C106B39C();
      uint64_t v41 = (void *)v74[0];
      if (v38) {
        goto LABEL_22;
      }
    }
LABEL_24:
    v41[(v34 >> 6) + 8] |= 1 << v34;
    long long v43 = (uint64_t *)(v41[6] + 16 * v34);
    *long long v43 = v31;
    v43[1] = v32;
    uint64_t v44 = (uint64_t *)(v41[7] + 24 * v34);
    *uint64_t v44 = v69;
    v44[1] = v27;
    uint64_t v26 = v72;
    v44[2] = v72;
    uint64_t v45 = v41[2];
    BOOL v46 = __OFADD__(v45, 1);
    uint64_t v47 = v45 + 1;
    if (v46) {
      goto LABEL_42;
    }
    uint64_t v15 = v32;
    v41[2] = v47;
    swift_bridgeObjectRetain();
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  return a2;
}

char *sub_1C002B228(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v40 = a2;
  sub_1BFF00BEC();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1C1515FDC();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v39 - v17;
  switch(a5)
  {
    case 1:
      type metadata accessor for FormatLayoutError();
      sub_1BFFBA7FC((unint64_t *)&qword_1EB875690, (void (*)(uint64_t))type metadata accessor for FormatLayoutError);
      swift_allocError();
      void *v22 = 0xD000000000000014;
      v22[1] = 0x80000001C15880D0;
      v22[5] = &type metadata for FormatVersions.StarSky;
      v22[6] = &off_1F1C39BA8;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      break;
    case 2:
      swift_bridgeObjectRetain();
      id v23 = objc_msgSend(a1, sel_identifier);
      if (!v23)
      {
        sub_1C151E62C();
        id v23 = (id)sub_1C151E5EC();
        swift_bridgeObjectRelease();
      }
      id v24 = objc_msgSend(self, sel_nss_NewsURLForTagID_, v23);

      sub_1C1515F1C();
      uint64_t v25 = v40;
      sub_1C002F714(v40, a3, (uint64_t)v18);
      sub_1C002B840(a3, a4, 2);
      uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
      v26(v15, v12);
      if (qword_1EB87B130 != -1) {
        swift_once();
      }
      uint64_t v27 = qword_1EB871698;
      uint64_t v28 = (void *)(v25 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_config);
      uint64_t v29 = *(void *)(v25 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_config + 16);
      if (v29)
      {
        uint64_t v30 = v28[4];
        uint64_t v40 = v28[3];
        uint64_t v31 = v26;
        uint64_t v32 = v28[1];
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v33 = v32;
        uint64_t v26 = v31;
        sub_1C0C5D594((uint64_t)v18, v33, v29, v40, v30, (uint64_t)v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v18, v12);
        swift_retain();
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
      type metadata accessor for FormatCommandAction();
      swift_allocObject();
      uint64_t v15 = (char *)sub_1C00257AC(v27, (uint64_t)v11);
      v26(v18, v12);
      break;
    case 3:
      if (a3 | a4)
      {
        if (qword_1EB85E4E0 != -1) {
          swift_once();
        }
        type metadata accessor for FormatCommandAction();
        swift_allocObject();
        swift_unknownObjectRetain();
        uint64_t v34 = swift_retain();
        uint64_t v35 = sub_1C0A3BEDC(v34, (uint64_t)a1);
      }
      else
      {
        if (qword_1EB87B188 != -1) {
          swift_once();
        }
        type metadata accessor for FormatCommandAction();
        swift_allocObject();
        swift_unknownObjectRetain();
        uint64_t v36 = swift_retain();
        uint64_t v35 = sub_1C0A3BBEC(v36, (uint64_t)a1);
      }
      goto LABEL_27;
    default:
      if (a3)
      {
        char v21 = 1;
      }
      else
      {
        swift_retain();
        sub_1C1517EFC();
        char v19 = *(unsigned char *)(v42 + 16);
        swift_release();
        char v41 = v19;
        if (FeedKind.rawValue.getter() == 0xD000000000000013 && v20 == 0x80000001C15FD3D0)
        {
          swift_release();
          swift_bridgeObjectRelease();
          char v21 = 1;
        }
        else
        {
          char v21 = sub_1C1520A9C();
          swift_release();
          swift_bridgeObjectRelease();
        }
      }
      if (qword_1EB87B198 != -1) {
        swift_once();
      }
      type metadata accessor for FormatCommandAction();
      swift_allocObject();
      swift_unknownObjectRetain();
      uint64_t v37 = swift_retain();
      uint64_t v35 = sub_1C0A3C1CC(v37, (uint64_t)a1, v21 & 1 | 0x100u);
LABEL_27:
      uint64_t v15 = (char *)v35;
      swift_release();
      break;
  }
  return v15;
}

uint64_t sub_1C002B840(uint64_t result, uint64_t a2, char a3)
{
  if (a3 != 2)
  {
    if (a3 != 1) {
      return result;
    }
    sub_1BFDC11BC(result);
  }
  return swift_bridgeObjectRelease();
}

BOOL sub_1C002B8A0(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:
    case 7:
      sub_1C151631C();
      sub_1C002F5C0((unint64_t *)&qword_1EB871160, MEMORY[0x1E4F27928]);
      return (sub_1C151E5CC() & 1) == 0;
    case 2:
    case 8:
      sub_1C151631C();
      sub_1C002F5C0((unint64_t *)&qword_1EB870780, MEMORY[0x1E4F27928]);
      char v3 = sub_1C151E57C();
      return v3 & 1;
    case 3:
    case 9:
      sub_1C151631C();
      sub_1C002F5C0((unint64_t *)&qword_1EB870780, MEMORY[0x1E4F27928]);
      char v3 = sub_1C151E59C();
      return v3 & 1;
    case 4:
    case 10:
      sub_1C151631C();
      sub_1C002F5C0((unint64_t *)&qword_1EB870780, MEMORY[0x1E4F27928]);
      char v3 = sub_1C151E56C();
      return v3 & 1;
    case 5:
    case 11:
      sub_1C151631C();
      sub_1C002F5C0((unint64_t *)&qword_1EB870780, MEMORY[0x1E4F27928]);
      char v3 = sub_1C151E58C();
      return v3 & 1;
    default:
      sub_1C151631C();
      sub_1C002F5C0((unint64_t *)&qword_1EB871160, MEMORY[0x1E4F27928]);
      char v3 = sub_1C151E5CC();
      return v3 & 1;
  }
}

uint64_t FormatShadow.color.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 32);
  return swift_retain();
}

uint64_t sub_1C002BB30@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 & 7)
  {
    case 1uLL:
      uint64_t result = sub_1BFF64090(a1, a2 & 0xFFFFFFFFFFFFFFF8, &v7);
      if (!v3)
      {
        uint64_t v6 = v7 | 1;
        goto LABEL_12;
      }
      break;
    case 2uLL:
      uint64_t result = sub_1BFF64090(a1, a2 & 0xFFFFFFFFFFFFFFF8, &v7);
      if (!v3)
      {
        uint64_t v6 = v7 | 2;
        goto LABEL_12;
      }
      break;
    case 3uLL:
      uint64_t result = sub_1BFF64090(a1, a2 & 0xFFFFFFFFFFFFFFF8, &v7);
      if (!v3)
      {
        uint64_t v6 = v7 | 3;
        goto LABEL_12;
      }
      break;
    case 4uLL:
      uint64_t result = sub_1BFF64090(a1, a2 & 0xFFFFFFFFFFFFFFF8, &v7);
      if (!v3)
      {
        uint64_t v6 = v7 | 4;
        goto LABEL_12;
      }
      break;
    default:
      uint64_t result = sub_1BFF64090(a1, a2, &v7);
      if (!v3)
      {
        uint64_t v6 = v7;
LABEL_12:
        *a3 = v6;
      }
      break;
  }
  return result;
}

uint64_t sub_1C002BBF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v53 = a2;
  char v60 = a1;
  uint64_t v46 = type metadata accessor for FeedBannerAd();
  MEMORY[0x1F4188790](v46);
  uint64_t v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BFEDE21C();
  uint64_t v59 = v5;
  uint64_t v57 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v58 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v56 = (char *)&v45 - v8;
  uint64_t v9 = sub_1C151D1EC();
  MEMORY[0x1F4188790](v9 - 8);
  unint64_t v54 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_1C151D33C();
  uint64_t v50 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1C151DBAC();
  uint64_t v61 = *(void *)(v13 - 8);
  uint64_t v62 = v13;
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v51 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v45 - v16;
  sub_1BFEE1610(0, (unint64_t *)&qword_1EB8717D8, (void (*)(uint64_t))sub_1C002D084);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v45 - v19;
  uint64_t v55 = v2;
  uint64_t v21 = *(void *)(v2 + *(void *)(*(void *)v2 + 176));
  sub_1C002D084();
  uint64_t v48 = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  uint64_t v49 = v23 + 56;
  v47(v20, 1, 1, v22);
  sub_1C151DB4C();
  uint64_t v45 = v21;
  sub_1C151DAAC();
  swift_bridgeObjectRelease();
  sub_1C002C7FC((uint64_t)v20, (unint64_t *)&qword_1EB8717D8, (void (*)(uint64_t))sub_1C002D084);
  sub_1C151DB4C();
  uint64_t v24 = *MEMORY[0x1E4F7A8A0];
  uint64_t v25 = sub_1C151D32C();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(v12, v24, v25);
  (*(void (**)(char *, void, uint64_t))(v50 + 104))(v12, *MEMORY[0x1E4F7A898], v52);
  sub_1C151DB4C();
  sub_1C151DA9C();
  uint64_t v26 = v57;
  swift_bridgeObjectRelease();
  uint64_t v27 = v56;
  sub_1C151DB5C();
  uint64_t v28 = v61;
  uint64_t v30 = *v60;
  uint64_t v29 = v60[1];
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
  uint64_t v32 = v51;
  char v60 = (uint64_t *)v17;
  uint64_t v33 = v17;
  uint64_t v34 = v62;
  v31(v51, v33, v62);
  uint64_t v35 = (int *)v46;
  *(void *)&v4[*(int *)(v46 + 24)] = qword_1F1B68A38;
  uint64_t v36 = &v4[v35[7]];
  *(void *)uint64_t v36 = 0;
  v36[8] = 1;
  *(_OWORD *)&v4[v35[8]] = xmmword_1C1533700;
  *(void *)uint64_t v4 = v30;
  *((void *)v4 + 1) = v29;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(&v4[v35[5]], v32, v34);
  v47(v20, 1, 1, v48);
  sub_1C002C724(&qword_1EB895030, (void (*)(uint64_t))type metadata accessor for FeedBannerAd);
  swift_bridgeObjectRetain();
  swift_retain();
  char v38 = v58;
  uint64_t v37 = v59;
  sub_1C151D39C();
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v38, v27, v37);
  uint64_t v39 = (unint64_t *)(v55 + *(void *)(*(void *)v55 + 192));
  swift_beginAccess();
  unint64_t v40 = *v39;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v39 = v40;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v40 = sub_1BFEDE1D4(0, *(void *)(v40 + 16) + 1, 1, v40);
    *uint64_t v39 = v40;
  }
  unint64_t v43 = *(void *)(v40 + 16);
  unint64_t v42 = *(void *)(v40 + 24);
  if (v43 >= v42 >> 1)
  {
    unint64_t v40 = sub_1BFEDE1D4(v42 > 1, v43 + 1, 1, v40);
    *uint64_t v39 = v40;
  }
  *(void *)(v40 + 16) = v43 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v26 + 32))(v40+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(void *)(v26 + 72) * v43, v38, v37);
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v37);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v61 + 8))(v60, v62);
}

uint64_t sub_1C002C2BC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a3;
  uint64_t v33 = a2;
  uint64_t v34 = (void (*)(uint64_t))MEMORY[0x1E4F7AEE8];
  sub_1BFEE1610(0, (unint64_t *)&unk_1EB871760, MEMORY[0x1E4F7AEE8]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v26 - v5;
  uint64_t v7 = sub_1C151D13C();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1C151D3FC();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a1[3];
  uint64_t v32 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4F7A818], v7);
  sub_1C151D3EC();
  sub_1C002C724(&qword_1EB871708, MEMORY[0x1E4F7A998]);
  sub_1C151D7EC();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v16 = a1[3];
  uint64_t v32 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  uint64_t v17 = *MEMORY[0x1E4F7AED0];
  uint64_t v18 = sub_1C151D8DC();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 104);
  uint64_t v31 = v19 + 104;
  v30(v6, v17, v18);
  unsigned int v29 = *MEMORY[0x1E4F7AEE0];
  uint64_t v20 = v29;
  uint64_t v21 = sub_1C151D8EC();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 104);
  v28(v6, v20, v21);
  uint64_t v27 = *(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56);
  v27(v6, 0, 1, v21);
  uint64_t v26 = sub_1C151D4AC();
  sub_1C002C724(&qword_1EB871718, MEMORY[0x1E4F7AC08]);
  sub_1C151D7DC();
  uint64_t v23 = v34;
  sub_1C002C7FC((uint64_t)v6, (unint64_t *)&unk_1EB871760, v34);
  uint64_t v24 = a1[3];
  uint64_t v33 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v24);
  v30(v6, *MEMORY[0x1E4F7AED8], v18);
  v28(v6, v29, v21);
  v27(v6, 0, 1, v21);
  sub_1C151D7DC();
  return sub_1C002C7FC((uint64_t)v6, (unint64_t *)&unk_1EB871760, v23);
}

uint64_t sub_1C002C724(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C002C76C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C002C7B4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C002C7FC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_1BFEE1610(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1C002C858(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v73 = a5;
  uint64_t v70 = a4;
  uint64_t v76 = a2;
  uint64_t v81 = a1;
  sub_1BFEE1610(0, (unint64_t *)&qword_1EB8717D8, (void (*)(uint64_t))sub_1C002D084);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v79 = (char *)&v65 - v8;
  uint64_t v75 = type metadata accessor for FeedBannerAd();
  MEMORY[0x1F4188790](v75);
  uint64_t v77 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BFEDE21C();
  uint64_t v67 = v10;
  uint64_t v72 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v65 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v78 = (char *)&v65 - v13;
  uint64_t v14 = sub_1C151D1EC();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v74 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_1C151D33C();
  uint64_t v68 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  uint64_t v66 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1C151DBAC();
  uint64_t v83 = *(void *)(v17 - 8);
  uint64_t v84 = v17;
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v69 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v82 = (char *)&v65 - v20;
  uint64_t v21 = sub_1C151D4AC();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v65 - v26;
  uint64_t v80 = v5;
  uint64_t v28 = (void *)(v5 + *(void *)(*(void *)v5 + 184));
  uint64_t v30 = v28[3];
  uint64_t v29 = v28[4];
  __swift_project_boxed_opaque_existential_1(v28, v30);
  objc_msgSend(a3, sel_frame);
  double v32 = v31;
  double v34 = v33;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v35(v27, v70, v21);
  v35(v25, v73, v21);
  uint64_t v36 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v37 = (v36 + 16) & ~v36;
  uint64_t v38 = (v23 + v36 + v37) & ~v36;
  uint64_t v39 = swift_allocObject();
  uint64_t v40 = v39 + v37;
  char v41 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 32);
  v41(v40, v27, v21);
  v41(v39 + v38, v25, v21);
  uint64_t v42 = v30;
  uint64_t v43 = v72;
  (*(void (**)(uint64_t *, uint64_t, uint64_t (*)@<X0>(void *@<X0>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t, double, double))(v29 + 24))(v81, v76, sub_1BFCD0A70, v39, v42, v29, v32, v34);
  swift_release();
  uint64_t v44 = (int *)v75;
  sub_1C151DB4C();
  sub_1C151DAEC();
  swift_bridgeObjectRelease();
  sub_1C151DB4C();
  (*(void (**)(char *, void, uint64_t))(v68 + 104))(v66, *MEMORY[0x1E4F7A8C0], v71);
  sub_1C151DB4C();
  sub_1C151DA9C();
  swift_bridgeObjectRelease();
  uint64_t v45 = v82;
  sub_1C151DB5C();
  uint64_t v46 = *v81;
  uint64_t v47 = v81[1];
  uint64_t v49 = v83;
  uint64_t v48 = v84;
  uint64_t v50 = v69;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v69, v45, v84);
  uint64_t v51 = v44;
  uint64_t v52 = v44[6];
  uint64_t v53 = v77;
  *(void *)&v77[v52] = qword_1F1B68A10;
  unint64_t v54 = &v53[v51[7]];
  *(void *)unint64_t v54 = 0;
  v54[8] = 1;
  *(_OWORD *)&v53[v51[8]] = xmmword_1C1533700;
  *(void *)uint64_t v53 = v46;
  *((void *)v53 + 1) = v47;
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))(&v53[v51[5]], v50, v48);
  sub_1C002D084();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v79, 1, 1, v55);
  sub_1C002C724(&qword_1EB895030, (void (*)(uint64_t))type metadata accessor for FeedBannerAd);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v56 = v78;
  sub_1C151D39C();
  uint64_t v57 = v65;
  uint64_t v58 = v67;
  (*(void (**)(void))(v43 + 16))();
  uint64_t v59 = (unint64_t *)(v80 + *(void *)(*(void *)v80 + 192));
  swift_beginAccess();
  unint64_t v60 = *v59;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v59 = v60;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v60 = sub_1BFEDE1D4(0, *(void *)(v60 + 16) + 1, 1, v60);
    unint64_t *v59 = v60;
  }
  unint64_t v63 = *(void *)(v60 + 16);
  unint64_t v62 = *(void *)(v60 + 24);
  if (v63 >= v62 >> 1)
  {
    unint64_t v60 = sub_1BFEDE1D4(v62 > 1, v63 + 1, 1, v60);
    unint64_t *v59 = v60;
  }
  *(void *)(v60 + 16) = v63 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v43 + 32))(v60+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(void *)(v43 + 72) * v63, v57, v58);
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v56, v58);
  return (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v82, v84);
}

void sub_1C002D084()
{
  if (!qword_1EB8717D0)
  {
    sub_1C151D7BC();
    sub_1C151D87C();
    sub_1C002C724(&qword_1EB894940, MEMORY[0x1E4F7AE10]);
    unint64_t v0 = sub_1C151DC2C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8717D0);
    }
  }
}

uint64_t sub_1C002D140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  return FeedBannerAdRequester.scheduleRequest(for:placement:position:createContext:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1C002D164(uint64_t a1)
{
  sub_1C002D1C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1C002D1C0()
{
  if (!qword_1EB872210)
  {
    sub_1C008B33C();
    unint64_t v0 = sub_1C151FD8C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB872210);
    }
  }
}

uint64_t sub_1C002D218(void *a1)
{
  void (*v16)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;

  sub_1BFEA5440(0, &qword_1EB87A070, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
  uint64_t v40 = v3;
  double v32 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v39 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v30 - v6;
  uint64_t v8 = type metadata accessor for FeedHeadline(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v1 + 16);
  double v34 = *(void *)(v12 + 16);
  if (v34)
  {
    double v33 = v12 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    double v31 = v12;
    while (v13 < *(void *)(v12 + 16))
    {
      uint64_t v15 = v33 + 16 * v13;
      uint64_t v16 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))v15;
      uint64_t v17 = *(void *)(v15 + 8);
      swift_retain_n();
      uint64_t v18 = swift_bridgeObjectRetain();
      uint64_t v19 = (void *)sub_1C002D65C(v18);
      swift_bridgeObjectRelease();
      char v41 = v19;
      sub_1C002DADC(&v41, v16, v17);
      uint64_t v38 = v14;
      if (v14) {
        goto LABEL_19;
      }
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v20 = v41;
      uint64_t v21 = v41[2];
      if (v21)
      {
        uint64_t v36 = v17;
        uint64_t v37 = v13;
        char v41 = (void *)MEMORY[0x1E4FBC860];
        sub_1BFFFCFC0(0, v21, 0);
        uint64_t v22 = *(unsigned __int8 *)(v32 + 80);
        uint64_t v35 = v20;
        uint64_t v23 = (uint64_t)v20 + ((v22 + 32) & ~v22);
        uint64_t v24 = *(void *)(v32 + 72);
        a1 = v41;
        do
        {
          sub_1BFEA5300(v23, (uint64_t)v7, (uint64_t)&qword_1EB87A070, (uint64_t)type metadata accessor for FeedHeadline, (uint64_t (*)(void, uint64_t, uint64_t))sub_1BFEA5440);
          uint64_t v25 = *(int *)(v40 + 48);
          uint64_t v26 = (uint64_t)&v39[v25];
          sub_1C063FDFC((uint64_t)&v7[v25], (uint64_t)&v39[v25], type metadata accessor for FeedHeadline);
          sub_1BFEA4850(v26, (uint64_t)v11, type metadata accessor for FeedHeadline);
          sub_1BFEA5370((uint64_t)v7, (uint64_t)&qword_1EB87A070, (uint64_t)type metadata accessor for FeedHeadline, (uint64_t (*)(void))sub_1BFEA5440);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1BFFFCFC0(0, a1[2] + 1, 1);
            a1 = v41;
          }
          uint64_t v28 = a1[2];
          uint64_t v27 = a1[3];
          if (v28 >= v27 >> 1)
          {
            sub_1BFFFCFC0(v27 > 1, v28 + 1, 1);
            a1 = v41;
          }
          a1[2] = v28 + 1;
          sub_1BFEA4850((uint64_t)v11, (uint64_t)a1+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v28, type metadata accessor for FeedHeadline);
          v23 += v24;
          --v21;
        }
        while (v21);
        swift_release();
        swift_release();
        uint64_t v12 = v31;
        unint64_t v13 = v37;
      }
      else
      {
        swift_release();
        swift_release();
        a1 = (void *)MEMORY[0x1E4FBC860];
      }
      ++v13;
      uint64_t v14 = v38;
      if (v13 == v34)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)a1;
      }
    }
    __break(1u);
LABEL_19:
    swift_release_n();
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    return (uint64_t)a1;
  }
  return result;
}

size_t sub_1C002D65C(uint64_t a1)
{
  sub_1BFEA5440(0, &qword_1EB87A070, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
  uint64_t v44 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v49 = (char *)v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v48 = (void *)((char *)v42 - v5);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v42 - v7;
  uint64_t v50 = v9;
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v47 = v11;
  v42[0] = a1;
  if (v11)
  {
    uint64_t v43 = (v10 + 32) & ~v10;
    uint64_t v13 = MEMORY[0x1E4FBC860] + v43;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(type metadata accessor for FeedHeadline(0) - 8);
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    uint64_t v18 = *(void *)(v16 + 72);
    uint64_t v45 = v8;
    uint64_t v46 = v18;
    v42[1] = v10 | 7;
    uint64_t v19 = v12;
    uint64_t v20 = v44;
    while (1)
    {
      uint64_t v22 = (uint64_t)&v49[*(int *)(v20 + 48)];
      sub_1C063FDFC(v17, v22, type metadata accessor for FeedHeadline);
      uint64_t v23 = (uint64_t)v48;
      uint64_t v24 = (uint64_t)v48 + *(int *)(v20 + 48);
      *uint64_t v48 = v14;
      sub_1BFEA4850(v22, v24, type metadata accessor for FeedHeadline);
      size_t result = sub_1C002DA70(v23, (uint64_t)v8, &qword_1EB87A070, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
      if (v15)
      {
        uint64_t v12 = v19;
        BOOL v21 = __OFSUB__(v15--, 1);
        if (v21) {
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v26 = v19[3];
        if ((uint64_t)((v26 >> 1) + 0x4000000000000000) < 0)
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
        int64_t v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
        if (v27 <= 1) {
          uint64_t v28 = 1;
        }
        else {
          uint64_t v28 = v27;
        }
        sub_1BFEA578C(0, &qword_1EB87A8E8, (uint64_t)&qword_1EB87A070, (uint64_t)type metadata accessor for FeedHeadline, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BFEA5440);
        uint64_t v29 = *(void *)(v50 + 72);
        uint64_t v30 = v43;
        uint64_t v12 = (void *)swift_allocObject();
        size_t result = _swift_stdlib_malloc_size(v12);
        if (!v29) {
          goto LABEL_34;
        }
        int64_t v31 = result - v30;
        if (result - v30 == 0x8000000000000000 && v29 == -1) {
          goto LABEL_35;
        }
        uint64_t v33 = v31 / v29;
        v12[2] = v28;
        v12[3] = 2 * (v31 / v29);
        double v34 = (char *)v12 + v30;
        uint64_t v35 = v19[3] >> 1;
        uint64_t v36 = v35 * v29;
        if (v19[2])
        {
          if (v12 < v19 || v34 >= (char *)v19 + v43 + v36)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v12 != v19)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v19[2] = 0;
        }
        uint64_t v13 = (uint64_t)&v34[v36];
        uint64_t v38 = (v33 & 0x7FFFFFFFFFFFFFFFLL) - v35;
        swift_release();
        uint64_t v20 = v44;
        BOOL v21 = __OFSUB__(v38, 1);
        uint64_t v15 = v38 - 1;
        if (v21)
        {
LABEL_27:
          __break(1u);
          break;
        }
      }
      ++v14;
      uint64_t v8 = v45;
      sub_1C002DA70((uint64_t)v45, v13, &qword_1EB87A070, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
      v13 += *(void *)(v50 + 72);
      v17 += v46;
      uint64_t v19 = v12;
      if (v47 == v14) {
        goto LABEL_29;
      }
    }
  }
  uint64_t v15 = 0;
LABEL_29:
  size_t result = swift_bridgeObjectRelease();
  unint64_t v39 = v12[3];
  if (v39 >= 2)
  {
    unint64_t v40 = v39 >> 1;
    BOOL v21 = __OFSUB__(v40, v15);
    uint64_t v41 = v40 - v15;
    if (v21) {
      goto LABEL_36;
    }
    v12[2] = v41;
  }
  return (size_t)v12;
}

uint64_t sub_1C002DA70(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_1BFEA5440(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_1C002DADC(void **a1, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3)
{
  sub_1BFEA5440(0, &qword_1EB87A070, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  uint64_t v9 = *a1;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = (void *)sub_1C0636414(v9);
  }
  uint64_t v10 = v9[2];
  v12[0] = (char *)v9 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v12[1] = v10;
  swift_retain();
  sub_1C002DC8C(v12, a2, a3, &qword_1EB87A070, (void (*)(uint64_t))type metadata accessor for FeedHeadline, (unint64_t *)&unk_1EB87A0A0, (void (*)(uint64_t))type metadata accessor for FeedHeadline, (uint64_t)&unk_1F1BADC10, type metadata accessor for FeedHeadline, (void (*)(char *, char *, char *, unint64_t, void (*)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t))sub_1C062F604, (void (*)(void, uint64_t, uint64_t, void *, void (*)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t))sub_1C002EA20);
  swift_release();
  *a1 = v9;
  swift_release();
  return swift_release();
}

uint64_t sub_1C002DC8C(void *a1, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, unint64_t *a4, void (*a5)(uint64_t), unint64_t *a6, void (*a7)(uint64_t), uint64_t a8, uint64_t (*a9)(void), void (*a10)(char *, char *, char *, unint64_t, void (*)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t), void (*a11)(void, uint64_t, uint64_t, void *, void (*)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t))
{
  void (*v176)(char *, char *, char *, unint64_t, void (*)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t (*v180)(void);
  void *v181;
  void *v182;
  uint64_t v183;
  unint64_t *v184;
  void (*v185)(uint64_t);
  uint64_t v186;
  uint64_t v187;
  void (*v188)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t *v194;
  void (*v195)(uint64_t);
  void *v196;
  uint64_t v197;

  BOOL v194 = a4;
  uint64_t v195 = a5;
  sub_1BFEA5440(0, a4, a5);
  uint64_t v189 = v16;
  uint64_t v177 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v172 = (uint64_t)&v166 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v190 = (uint64_t)&v166 - v19;
  uint64_t v184 = a6;
  uint64_t v185 = a7;
  sub_1BFEA5510(0, a6, a7);
  uint64_t v183 = v20;
  MEMORY[0x1F4188790](v20);
  char v182 = (uint64_t *)((char *)&v166 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v22);
  unint64_t v181 = (uint64_t *)((char *)&v166 - v23);
  uint64_t v24 = swift_allocObject();
  uint64_t v188 = a2;
  *(void *)(v24 + 16) = a2;
  *(void *)(v24 + 24) = a3;
  uint64_t v25 = a1[1];
  swift_retain_n();
  uint64_t v26 = sub_1C152086C();
  if (v26 >= v25)
  {
    if (v25 < 0) {
      goto LABEL_142;
    }
    if (v25)
    {
      swift_retain();
      a11(0, v25, 1, a1, v188, a3);
    }
    swift_release();
    swift_release();
    return swift_release_n();
  }
  if (v25 >= 0) {
    uint64_t v27 = v25;
  }
  else {
    uint64_t v27 = v25 + 1;
  }
  if (v25 < -1) {
    goto LABEL_150;
  }
  uint64_t v176 = a10;
  char v187 = a3;
  uint64_t v169 = v26;
  uint64_t v168 = v24;
  if (v25 < 2)
  {
    int64_t v31 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v175 = MEMORY[0x1E4FBC860]
         + ((*(unsigned __int8 *)(v177 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v177 + 80));
    uint64_t v167 = MEMORY[0x1E4FBC860];
    if (v25 == 1) {
      goto LABEL_13;
    }
    unint64_t v33 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_107:
    if (v33 >= 2)
    {
      unint64_t v150 = (void *)*a1;
      char v196 = (void *)*a1;
      do
      {
        unint64_t v151 = v33 - 2;
        if (v33 < 2) {
          goto LABEL_137;
        }
        if (!v150) {
          goto LABEL_149;
        }
        uint64_t v152 = v31;
        uint64_t v153 = v31 + 32;
        uint64_t v154 = *(void *)&v31[16 * v151 + 32];
        uint64_t v155 = *(void *)&v31[16 * v33 + 24];
        uint64_t v156 = *(void *)(v177 + 72);
        v157 = (char *)v150 + v156 * v154;
        uint64_t v158 = (char *)v150 + v156 * *(void *)&v153[16 * v33 - 16];
        uint64_t v159 = (char *)v150 + v156 * v155;
        uint64_t v160 = v187;
        swift_retain();
        unsigned int v161 = v157;
        uint64_t v162 = v178;
        v176(v161, v158, v159, v175, v188, v160);
        v178 = v162;
        if (v162) {
          break;
        }
        if (v155 < v154) {
          goto LABEL_138;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v152 = sub_1C063604C((uint64_t)v152);
        }
        if (v151 >= *((void *)v152 + 2)) {
          goto LABEL_139;
        }
        size_t v163 = &v152[16 * v151 + 32];
        *(void *)size_t v163 = v154;
        *((void *)v163 + 1) = v155;
        unint64_t v164 = *((void *)v152 + 2);
        if (v33 > v164) {
          goto LABEL_140;
        }
        int64_t v31 = v152;
        memmove(&v152[16 * v33 + 16], &v152[16 * v33 + 32], 16 * (v164 - v33));
        *((void *)v152 + 2) = v164 - 1;
        unint64_t v33 = v164 - 1;
        unint64_t v150 = v196;
      }
      while (v164 > 2);
    }
LABEL_118:
    swift_bridgeObjectRelease();
    *(void *)(v167 + 16) = 0;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  uint64_t v28 = v27 >> 1;
  uint64_t v29 = sub_1C151ECCC();
  *(void *)(v29 + 16) = v28;
  uint64_t v30 = *(unsigned __int8 *)(v177 + 80);
  uint64_t v167 = v29;
  unint64_t v175 = v29 + ((v30 + 32) & ~v30);
LABEL_13:
  uint64_t v32 = 0;
  uint64_t v180 = a9;
  int64_t v31 = (char *)MEMORY[0x1E4FBC860];
  char v196 = a1;
  while (1)
  {
    uint64_t v34 = v32;
    uint64_t v35 = v32 + 1;
    uint64_t v173 = v32;
    if (v32 + 1 >= v25)
    {
      uint64_t v50 = v32 + 1;
    }
    else
    {
      char v170 = v31;
      uint64_t v174 = *a1;
      uint64_t v36 = *(void *)(v177 + 72);
      uint64_t v37 = (void *)(v174 + v36 * v35);
      uint64_t v38 = (uint64_t *)(v174 + v36 * v32);
      uint64_t v39 = *(int *)(v189 + 48);
      uint64_t v40 = *v38;
      uint64_t v41 = (uint64_t)v38 + v39;
      uint64_t v43 = v180;
      uint64_t v42 = (uint64_t)v181;
      *unint64_t v181 = *v37;
      unint64_t v192 = v25;
      uint64_t v44 = v183;
      sub_1C063FDFC((uint64_t)v37 + v39, v42 + *(int *)(v183 + 48), v43);
      uint64_t v45 = (uint64_t)v182;
      *char v182 = v40;
      sub_1C063FDFC(v41, v45 + *(int *)(v44 + 48), v43);
      v188((uint64_t *)((char *)&v197 + 1), v42, v45);
      uint64_t v47 = (uint64_t)v184;
      uint64_t v46 = (uint64_t)v185;
      sub_1BFEA5370(v45, (uint64_t)v184, (uint64_t)v185, (uint64_t (*)(void))sub_1BFEA5510);
      uint64_t v48 = v47;
      uint64_t v25 = v192;
      uint64_t v49 = v46;
      uint64_t v34 = v173;
      sub_1BFEA5370(v42, v48, v49, (uint64_t (*)(void))sub_1BFEA5510);
      LODWORD(v191) = BYTE1(v197);
      uint64_t v50 = v34 + 2;
      uint64_t v193 = v36;
      if (v34 + 2 >= v25)
      {
        a1 = v196;
        uint64_t v63 = v36;
      }
      else
      {
        uint64_t v186 = v36 * v35;
        uint64_t v51 = v174;
        uint64_t v179 = v36 * v50;
        while (1)
        {
          uint64_t v52 = v50;
          uint64_t v53 = v180;
          uint64_t v54 = *(int *)(v189 + 48);
          uint64_t v55 = v51 + v179 + v54;
          uint64_t v56 = *(void *)(v51 + v186);
          uint64_t v57 = v51 + v186 + v54;
          uint64_t v58 = (uint64_t)v181;
          *unint64_t v181 = *(void *)(v51 + v179);
          uint64_t v59 = v183;
          sub_1C063FDFC(v55, v58 + *(int *)(v183 + 48), v53);
          uint64_t v60 = (uint64_t)v182;
          *char v182 = v56;
          sub_1C063FDFC(v57, v60 + *(int *)(v59 + 48), v53);
          v188(&v197, v58, v60);
          uint64_t v62 = (uint64_t)v184;
          uint64_t v61 = (uint64_t)v185;
          sub_1BFEA5370(v60, (uint64_t)v184, (uint64_t)v185, (uint64_t (*)(void))sub_1BFEA5510);
          sub_1BFEA5370(v58, v62, v61, (uint64_t (*)(void))sub_1BFEA5510);
          if (v191 != v197) {
            break;
          }
          uint64_t v25 = v192;
          uint64_t v63 = v193;
          v51 += v193;
          uint64_t v50 = v52 + 1;
          if (v192 == v52 + 1)
          {
            uint64_t v50 = v192;
            a1 = v196;
            uint64_t v34 = v173;
            goto LABEL_25;
          }
        }
        a1 = v196;
        uint64_t v50 = v52;
        uint64_t v34 = v173;
        uint64_t v25 = v192;
        uint64_t v63 = v193;
      }
LABEL_25:
      int64_t v31 = v170;
      if (v191)
      {
        if (v50 < v34) {
          goto LABEL_143;
        }
        if (v34 < v50)
        {
          uint64_t v64 = v34;
          uint64_t v65 = 0;
          uint64_t v66 = v63 * (v50 - 1);
          uint64_t v67 = v50 * v63;
          uint64_t v68 = v64;
          uint64_t v69 = v64 * v63;
          do
          {
            if (v68 != v50 + v65 - 1)
            {
              uint64_t v70 = v174;
              if (!v174) {
                goto LABEL_148;
              }
              unint64_t v71 = v174 + v69;
              sub_1C002DA70(v174 + v69, v172, v194, v195);
              if (v69 < v66 || v71 >= v70 + v67)
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v69 != v66)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              sub_1C002DA70(v172, v70 + v66, v194, v195);
              a1 = v196;
              uint64_t v63 = v193;
            }
            ++v68;
            --v65;
            v66 -= v63;
            v67 -= v63;
            v69 += v63;
          }
          while (v68 < v50 + v65);
          int64_t v31 = v170;
          uint64_t v34 = v173;
          uint64_t v25 = v192;
        }
      }
    }
    if (v50 < v25)
    {
      if (__OFSUB__(v50, v34)) {
        goto LABEL_141;
      }
      if (v50 - v34 < v169) {
        break;
      }
    }
LABEL_57:
    if (v50 < v34) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v186 = v50;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      int64_t v31 = sub_1C0634CC8(0, *((void *)v31 + 2) + 1, 1, v31);
    }
    unint64_t v92 = *((void *)v31 + 2);
    unint64_t v91 = *((void *)v31 + 3);
    unint64_t v33 = v92 + 1;
    if (v92 >= v91 >> 1) {
      int64_t v31 = sub_1C0634CC8((char *)(v91 > 1), v92 + 1, 1, v31);
    }
    *((void *)v31 + 2) = v33;
    char v93 = v31 + 32;
    unint64_t v94 = &v31[16 * v92 + 32];
    uint64_t v95 = v186;
    *(void *)unint64_t v94 = v173;
    *((void *)v94 + 1) = v95;
    if (v92)
    {
      while (1)
      {
        unint64_t v96 = v33 - 1;
        if (v33 >= 4)
        {
          uint64_t v101 = &v93[16 * v33];
          uint64_t v102 = *((void *)v101 - 8);
          uint64_t v103 = *((void *)v101 - 7);
          BOOL v107 = __OFSUB__(v103, v102);
          uint64_t v104 = v103 - v102;
          if (v107) {
            goto LABEL_125;
          }
          uint64_t v106 = *((void *)v101 - 6);
          uint64_t v105 = *((void *)v101 - 5);
          BOOL v107 = __OFSUB__(v105, v106);
          uint64_t v99 = v105 - v106;
          char v100 = v107;
          if (v107) {
            goto LABEL_126;
          }
          unint64_t v108 = v33 - 2;
          unsigned int v109 = &v93[16 * v33 - 32];
          uint64_t v111 = *(void *)v109;
          uint64_t v110 = *((void *)v109 + 1);
          BOOL v107 = __OFSUB__(v110, v111);
          uint64_t v112 = v110 - v111;
          if (v107) {
            goto LABEL_128;
          }
          BOOL v107 = __OFADD__(v99, v112);
          uint64_t v113 = v99 + v112;
          if (v107) {
            goto LABEL_131;
          }
          if (v113 >= v104)
          {
            unint64_t v131 = &v93[16 * v96];
            uint64_t v133 = *(void *)v131;
            uint64_t v132 = *((void *)v131 + 1);
            BOOL v107 = __OFSUB__(v132, v133);
            uint64_t v134 = v132 - v133;
            if (v107) {
              goto LABEL_135;
            }
            BOOL v124 = v99 < v134;
            goto LABEL_94;
          }
        }
        else
        {
          if (v33 != 3)
          {
            uint64_t v125 = *((void *)v31 + 4);
            uint64_t v126 = *((void *)v31 + 5);
            BOOL v107 = __OFSUB__(v126, v125);
            uint64_t v118 = v126 - v125;
            char v119 = v107;
            goto LABEL_88;
          }
          uint64_t v98 = *((void *)v31 + 4);
          uint64_t v97 = *((void *)v31 + 5);
          BOOL v107 = __OFSUB__(v97, v98);
          uint64_t v99 = v97 - v98;
          char v100 = v107;
        }
        if (v100) {
          goto LABEL_127;
        }
        unint64_t v108 = v33 - 2;
        id v114 = &v93[16 * v33 - 32];
        uint64_t v116 = *(void *)v114;
        uint64_t v115 = *((void *)v114 + 1);
        BOOL v117 = __OFSUB__(v115, v116);
        uint64_t v118 = v115 - v116;
        char v119 = v117;
        if (v117) {
          goto LABEL_130;
        }
        uint64_t v120 = &v93[16 * v96];
        uint64_t v122 = *(void *)v120;
        uint64_t v121 = *((void *)v120 + 1);
        BOOL v107 = __OFSUB__(v121, v122);
        uint64_t v123 = v121 - v122;
        if (v107) {
          goto LABEL_133;
        }
        if (__OFADD__(v118, v123)) {
          goto LABEL_134;
        }
        if (v118 + v123 >= v99)
        {
          BOOL v124 = v99 < v123;
LABEL_94:
          if (v124) {
            unint64_t v96 = v108;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v119) {
          goto LABEL_129;
        }
        uint64_t v127 = &v93[16 * v96];
        uint64_t v129 = *(void *)v127;
        uint64_t v128 = *((void *)v127 + 1);
        BOOL v107 = __OFSUB__(v128, v129);
        uint64_t v130 = v128 - v129;
        if (v107) {
          goto LABEL_132;
        }
        if (v130 < v118) {
          goto LABEL_15;
        }
LABEL_96:
        unint64_t v135 = v96 - 1;
        if (v96 - 1 >= v33)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        uint64_t v136 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        uint64_t v137 = &v93[16 * v135];
        uint64_t v138 = *(void *)v137;
        uint64_t v139 = v93;
        unint64_t v140 = v96;
        char v141 = &v93[16 * v96];
        uint64_t v142 = *((void *)v141 + 1);
        uint64_t v143 = *(void *)(v177 + 72);
        BOOL v144 = (char *)(v136 + v143 * *(void *)v137);
        uint64_t v145 = v136 + v143 * *(void *)v141;
        unint64_t v192 = v136 + v143 * v142;
        uint64_t v193 = v145;
        uint64_t v146 = v187;
        swift_retain();
        unint64_t v147 = v144;
        uint64_t v148 = v178;
        v176(v147, (char *)v193, (char *)v192, v175, v188, v146);
        if (v148) {
          goto LABEL_118;
        }
        if (v142 < v138) {
          goto LABEL_122;
        }
        if (v140 > *((void *)v31 + 2)) {
          goto LABEL_123;
        }
        *(void *)uint64_t v137 = v138;
        *(void *)&v139[16 * v135 + 8] = v142;
        unint64_t v149 = *((void *)v31 + 2);
        if (v140 >= v149) {
          goto LABEL_124;
        }
        char v93 = v139;
        v178 = 0;
        unint64_t v33 = v149 - 1;
        memmove(v141, v141 + 16, 16 * (v149 - 1 - v140));
        *((void *)v31 + 2) = v149 - 1;
        a1 = v196;
        if (v149 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v33 = 1;
LABEL_15:
    uint64_t v25 = a1[1];
    uint64_t v32 = v186;
    if (v186 >= v25) {
      goto LABEL_107;
    }
  }
  if (__OFADD__(v34, v169)) {
    goto LABEL_144;
  }
  if (v34 + v169 >= v25) {
    uint64_t v72 = v25;
  }
  else {
    uint64_t v72 = v34 + v169;
  }
  if (v72 >= v34)
  {
    if (v50 != v72)
    {
      char v170 = v31;
      uint64_t v73 = 0;
      uint64_t v74 = *(void *)(v177 + 72);
      uint64_t v193 = v74 * (v50 - 1);
      uint64_t v179 = v74;
      unint64_t v192 = v50 * v74;
      uint64_t v171 = v72;
      do
      {
        uint64_t v76 = v34;
        uint64_t v174 = v73;
        uint64_t v77 = v73;
        uint64_t v186 = v50;
        while (1)
        {
          char v191 = v76;
          uint64_t v78 = *a1 + *(int *)(v189 + 48);
          uint64_t v79 = v192 + v77 + v78;
          uint64_t v80 = *(void *)(v193 + v77 + *a1);
          uint64_t v81 = v193 + v77 + v78;
          uint64_t v82 = v180;
          uint64_t v83 = (uint64_t)v181;
          *unint64_t v181 = *(void *)(v192 + v77 + *a1);
          uint64_t v84 = v183;
          sub_1C063FDFC(v79, v83 + *(int *)(v183 + 48), v82);
          uint64_t v85 = (uint64_t)v182;
          *char v182 = v80;
          sub_1C063FDFC(v81, v85 + *(int *)(v84 + 48), v82);
          v188((uint64_t *)((char *)&v197 + 2), v83, v85);
          uint64_t v87 = (uint64_t)v184;
          uint64_t v86 = (uint64_t)v185;
          sub_1BFEA5370(v85, (uint64_t)v184, (uint64_t)v185, (uint64_t (*)(void))sub_1BFEA5510);
          sub_1BFEA5370(v83, v87, v86, (uint64_t (*)(void))sub_1BFEA5510);
          if (BYTE2(v197) != 1) {
            break;
          }
          uint64_t v88 = *v196;
          if (!*v196) {
            goto LABEL_146;
          }
          uint64_t v89 = v88 + v193 + v77;
          sub_1C002DA70(v88 + v192 + v77, v190, v194, v195);
          swift_arrayInitWithTakeFrontToBack();
          sub_1C002DA70(v190, v89, v194, v195);
          v77 -= v179;
          uint64_t v76 = v191 + 1;
          uint64_t v75 = v186;
          a1 = v196;
          if (v186 == v191 + 1) {
            goto LABEL_50;
          }
        }
        uint64_t v75 = v186;
        a1 = v196;
LABEL_50:
        uint64_t v50 = v75 + 1;
        uint64_t v73 = v174 + v179;
        uint64_t v34 = v173;
      }
      while (v50 != v171);
      uint64_t v50 = v171;
      int64_t v31 = v170;
    }
    goto LABEL_57;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  swift_release_n();
  __break(1u);
LABEL_147:
  swift_release_n();
  __break(1u);
LABEL_148:
  swift_release_n();
  __break(1u);
LABEL_149:
  swift_release_n();
  __break(1u);
LABEL_150:
  swift_release_n();
  swift_release();
  uint64_t result = sub_1C15203FC();
  __break(1u);
  return result;
}

uint64_t sub_1C002EA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(uint64_t *__return_ptr, char *, void *), uint64_t a6)
{
  void (*v41)(uint64_t *__return_ptr, char *, void *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;

  uint64_t v38 = a1;
  sub_1BFEA5440(0, &qword_1EB87A070, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
  uint64_t v46 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v47 = (uint64_t)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v40 = (void *)((char *)v36 - v16);
  MEMORY[0x1F4188790](v17);
  uint64_t v39 = (void *)((char *)v36 - v18);
  uint64_t v19 = swift_allocObject();
  uint64_t v41 = a5;
  *(void *)(v19 + 16) = a5;
  *(void *)(v19 + 24) = a6;
  uint64_t v37 = a2;
  if (a3 == a2)
  {
    swift_retain();
    swift_release();
  }
  else
  {
    v36[1] = v19;
    v36[2] = v6;
    uint64_t v20 = *(void *)(v13 + 72);
    uint64_t v42 = a6;
    swift_retain();
    uint64_t v21 = v20 * (a3 - 1);
    uint64_t v43 = v20;
    uint64_t v50 = v20 * a3;
    uint64_t v49 = a4;
    while (2)
    {
      uint64_t v22 = 0;
      uint64_t v23 = v38;
      uint64_t v44 = v21;
      uint64_t v45 = a3;
      do
      {
        uint64_t v24 = *v49;
        uint64_t v48 = v50 + v22;
        uint64_t v25 = v39;
        sub_1BFEA5300(v50 + v22 + v24, (uint64_t)v39, (uint64_t)&qword_1EB87A070, (uint64_t)type metadata accessor for FeedHeadline, (uint64_t (*)(void, uint64_t, uint64_t))sub_1BFEA5440);
        uint64_t v26 = v21 + v22 + v24;
        uint64_t v27 = v40;
        sub_1BFEA5300(v26, (uint64_t)v40, (uint64_t)&qword_1EB87A070, (uint64_t)type metadata accessor for FeedHeadline, (uint64_t (*)(void, uint64_t, uint64_t))sub_1BFEA5440);
        char v28 = sub_1C002EE00(*v25, (uint64_t)v25 + *(int *)(v46 + 48), *v27, (uint64_t)v27 + *(int *)(v46 + 48), v41, v42, (unint64_t *)&unk_1EB87A0A0, (void (*)(uint64_t))type metadata accessor for FeedHeadline, type metadata accessor for FeedHeadline);
        uint64_t v29 = (uint64_t)v27;
        uint64_t v21 = v44;
        sub_1BFEA5370(v29, (uint64_t)&qword_1EB87A070, (uint64_t)type metadata accessor for FeedHeadline, (uint64_t (*)(void))sub_1BFEA5440);
        uint64_t v30 = (uint64_t)v25;
        int64_t v31 = v49;
        uint64_t v32 = v45;
        sub_1BFEA5370(v30, (uint64_t)&qword_1EB87A070, (uint64_t)type metadata accessor for FeedHeadline, (uint64_t (*)(void))sub_1BFEA5440);
        if ((v28 & 1) == 0) {
          break;
        }
        uint64_t v33 = *v31;
        if (!*v31)
        {
          uint64_t result = swift_release();
          __break(1u);
          return result;
        }
        uint64_t v34 = v33 + v21 + v22;
        sub_1C002DA70(v33 + v50 + v22, v47, &qword_1EB87A070, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
        swift_arrayInitWithTakeFrontToBack();
        sub_1C002DA70(v47, v34, &qword_1EB87A070, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
        v22 -= v43;
        ++v23;
      }
      while (v32 != v23);
      a3 = v32 + 1;
      v21 += v43;
      v50 += v43;
      if (a3 != v37) {
        continue;
      }
      break;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1C002EE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, char *, void *), uint64_t a6, unint64_t *a7, void (*a8)(uint64_t), uint64_t (*a9)(void))
{
  void (*v24)(uint64_t *__return_ptr, char *, void *);
  uint64_t v25;

  v23[1] = a6;
  uint64_t v24 = a5;
  sub_1BFEA5510(0, a7, a8);
  uint64_t v16 = v15 - 8;
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (void *)((char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)v23 - v20;
  *(void *)((char *)v23 - v20) = a1;
  sub_1C063FDFC(a2, (uint64_t)v23 + *(int *)(v16 + 56) - v20, a9);
  *uint64_t v18 = a3;
  sub_1C063FDFC(a4, (uint64_t)v18 + *(int *)(v16 + 56), a9);
  v24(&v25, v21, v18);
  sub_1BFEA5370((uint64_t)v18, (uint64_t)a7, (uint64_t)a8, (uint64_t (*)(void))sub_1BFEA5510);
  sub_1BFEA5370((uint64_t)v21, (uint64_t)a7, (uint64_t)a8, (uint64_t (*)(void))sub_1BFEA5510);
  return v25;
}

uint64_t sub_1C002EF5C@<X0>(char *a1@<X0>, char *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_1C002EFEC(a1, a2, *(uint64_t (**)(uint64_t, char *, void, char *))(v3 + 16), a3);
}

uint64_t sub_1C002EF64@<X0>(char *a1@<X0>, char *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t, char *, void, char *))(v3 + 16);
  uint64_t v8 = *(void *)a1;
  sub_1BFF92678(0, (unint64_t *)&unk_1EB87A0A0, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
  uint64_t result = v7(v8, &a1[*(int *)(v9 + 48)], *(void *)a2, &a2[*(int *)(v9 + 48)]);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1C002EFEC@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t (*a3)(uint64_t, char *, void, char *)@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v8 = *(void *)a1;
  sub_1BFF92678(0, (unint64_t *)&unk_1EB87A0A0, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
  uint64_t result = a3(v8, &a1[*(int *)(v9 + 48)], *(void *)a2, &a2[*(int *)(v9 + 48)]);
  *a4 = result & 1;
  return result;
}

BOOL sub_1C002F078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C002F080(a1, a2, a3, a4, *(void *)(v4 + 16));
}

BOOL sub_1C002F080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v8 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v42 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v39 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v39 - v14;
  sub_1BFF92678(0, (unint64_t *)&unk_1EB87A0A0, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
  uint64_t v17 = v16 - 8;
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (uint64_t *)((char *)&v39 - v21);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v39 - v24;
  uint64_t v26 = (char *)&v39 + *(int *)(v17 + 56) - v24;
  uint64_t v40 = a1;
  *(uint64_t *)((char *)&v39 - v24) = a1;
  sub_1BFF1B27C(a2, (uint64_t)v26, type metadata accessor for FeedHeadline);
  uint64_t v27 = (uint64_t)v22 + *(int *)(v17 + 56);
  uint64_t v41 = a3;
  void *v22 = a3;
  sub_1BFF1B27C(v43, v27, type metadata accessor for FeedHeadline);
  uint64_t v28 = (uint64_t)&v19[*(int *)(v17 + 56)];
  sub_1BFF1B27C((uint64_t)v26, v28, type metadata accessor for FeedHeadline);
  uint64_t v29 = v28;
  uint64_t v30 = (uint64_t)v42;
  sub_1BFF23B74(v29, (uint64_t)v15, type metadata accessor for FeedHeadline);
  uint64_t v31 = (uint64_t)&v19[*(int *)(v17 + 56)];
  sub_1BFF1B27C(v27, v31, type metadata accessor for FeedHeadline);
  uint64_t v32 = v44;
  sub_1BFF23B74(v31, (uint64_t)v12, type metadata accessor for FeedHeadline);
  uint64_t v33 = v32 & ~*((void *)v15 + 4);
  sub_1BFF1B27C((uint64_t)v12, v30, type metadata accessor for FeedHeadline);
  if (v33)
  {
    sub_1BFF1F5E4(v30, type metadata accessor for FeedHeadline);
    goto LABEL_5;
  }
  uint64_t v35 = v40;
  uint64_t v34 = v41;
  uint64_t v36 = v32 & ~*(void *)(v30 + 32);
  sub_1BFF1F5E4(v30, type metadata accessor for FeedHeadline);
  if (v36)
  {
LABEL_5:
    BOOL v37 = (v32 & ~*((void *)v15 + 4)) == 0;
    sub_1BFF1F5E4((uint64_t)v12, type metadata accessor for FeedHeadline);
    sub_1BFF1F5E4((uint64_t)v15, type metadata accessor for FeedHeadline);
    sub_1C002F448((uint64_t)v22, (uint64_t)&unk_1EB87A0A0, (uint64_t)type metadata accessor for FeedHeadline, (uint64_t (*)(void))sub_1BFF92678);
    sub_1C002F448((uint64_t)v25, (uint64_t)&unk_1EB87A0A0, (uint64_t)type metadata accessor for FeedHeadline, (uint64_t (*)(void))sub_1BFF92678);
    return v37;
  }
  sub_1BFF1F5E4((uint64_t)v12, type metadata accessor for FeedHeadline);
  sub_1BFF1F5E4((uint64_t)v15, type metadata accessor for FeedHeadline);
  sub_1C002F448((uint64_t)v22, (uint64_t)&unk_1EB87A0A0, (uint64_t)type metadata accessor for FeedHeadline, (uint64_t (*)(void))sub_1BFF92678);
  sub_1C002F448((uint64_t)v25, (uint64_t)&unk_1EB87A0A0, (uint64_t)type metadata accessor for FeedHeadline, (uint64_t (*)(void))sub_1BFF92678);
  return v35 < v34;
}

uint64_t sub_1C002F448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_1C002F4A8()
{
  if (!v1)
  {
    uint64_t v2 = MEMORY[0x1E4FBB718];
    sub_1C05DC640(v0 + 152, (uint64_t)v3, (uint64_t)&qword_1EB85EAE0, (uint64_t)&type metadata for FormatMediaTiming, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1BFEFDDA8);
    sub_1C05DC640((uint64_t)v3, (uint64_t)v4, (uint64_t)&qword_1EB85EAE0, (uint64_t)&type metadata for FormatMediaTiming, v2, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1BFEFDDA8);
    if (sub_1C00F6584(v4) != 1 && (v5 & 1) == 0) {
      sub_1C006F0EC(v4[10], v4[11], v4[12], v4[13], v5);
    }
  }
}

void sub_1C002F5A0(uint64_t a1)
{
}

uint64_t sub_1C002F5C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C002F608(uint64_t a1)
{
  sub_1C01AE8C0(0, (unint64_t *)&qword_1EB8948A0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C002F694(uint64_t a1, uint64_t a2)
{
  sub_1BFF2E400(0, (unint64_t *)&qword_1EB8948A0, MEMORY[0x1E4F276F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C002F714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1C1515FDC();
  uint64_t v29 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v28 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BFF00BEC();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C002FEFC(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1C15156FC();
  uint64_t v17 = *(void *)(v16 - 8);
  __n128 v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a1;
  if (*(void *)(a2 + 16))
  {
    uint64_t v27 = a3;
    sub_1C151564C();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
    {
      sub_1BFEFEBC8((uint64_t)v15, (uint64_t (*)(void))sub_1C002FEFC);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v27, v4, v8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v15, v16);
      uint64_t v23 = sub_1C15155FC();
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = MEMORY[0x1E4FBC860];
      }
      MEMORY[0x1F4188790](v23);
      *(&v27 - 2) = (uint64_t)&v31;
      unint64_t v25 = sub_1C002FB68((void (*)(void))sub_1C002FEB0, (uint64_t)(&v27 - 4), a2);
      uint64_t v30 = v24;
      sub_1C002FB3C(v25);
      sub_1C151560C();
      sub_1C151565C();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
      uint64_t v26 = v28;
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v28, v4, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v12, 1, v8) == 1)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v27, v26, v8);
        return sub_1BFEFEBC8((uint64_t)v12, (uint64_t (*)(void))sub_1BFF00BEC);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v8);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v27, v12, v8);
      }
    }
  }
  else
  {
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v29 + 16);
    return v22(a3, v4, v8, v18);
  }
}

uint64_t sub_1C002FB3C(uint64_t a1)
{
  return sub_1C104B958(a1, (uint64_t (*)(void))sub_1BFFB4568, MEMORY[0x1E4F26EA0]);
}

unint64_t sub_1C002FB68(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a2;
  sub_1C028A4C0(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1C15155DC();
  MEMORY[0x1F4188790](v9);
  uint64_t v31 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v28 = (char *)v25 - v13;
  uint64_t v14 = *(void *)(a3 + 16);
  if (!v14) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v26 = v12;
  uint64_t v29 = (void (**)(char *))(v12 + 32);
  uint64_t v30 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  v25[1] = a3;
  uint64_t v15 = (uint64_t *)(a3 + 48);
  unint64_t v34 = MEMORY[0x1E4FBC860];
  uint64_t v27 = a1;
  do
  {
    uint64_t v16 = v9;
    uint64_t v17 = *(v15 - 1);
    uint64_t v18 = *v15;
    v33[0] = *(v15 - 2);
    v33[1] = v17;
    v33[2] = v18;
    swift_bridgeObjectRetain();
    swift_retain();
    a1(v33);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v34;
    }
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v9 = v16;
    if ((*v30)(v8, 1, v16) == 1)
    {
      sub_1BFF5B58C((uint64_t)v8, (uint64_t (*)(void))sub_1C028A4C0);
    }
    else
    {
      uint64_t v19 = v28;
      uint64_t v20 = *v29;
      (*v29)(v28);
      ((void (*)(char *, char *, uint64_t))v20)(v31, v19, v16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v34 = sub_1BFFB4568(0, *(void *)(v34 + 16) + 1, 1, v34);
      }
      unint64_t v22 = *(void *)(v34 + 16);
      unint64_t v21 = *(void *)(v34 + 24);
      if (v22 >= v21 >> 1) {
        unint64_t v34 = sub_1BFFB4568(v21 > 1, v22 + 1, 1, v34);
      }
      unint64_t v23 = v34;
      *(void *)(v34 + 16) = v22 + 1;
      uint64_t v9 = v16;
      ((void (*)(unint64_t, char *, uint64_t))v20)(v23+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(void *)(v26 + 72) * v22, v31, v16);
      a1 = v27;
    }
    v15 += 3;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t sub_1C002FEB0@<X0>(uint64_t a1@<X8>)
{
  return sub_1C002FEE4(a1);
}

uint64_t sub_1C002FECC@<X0>(uint64_t a1@<X8>)
{
  return sub_1C0A3F4B8(a1);
}

uint64_t sub_1C002FEE4@<X0>(uint64_t a1@<X8>)
{
  return sub_1C0A3AA24(a1);
}

void sub_1C002FEFC(uint64_t a1)
{
}

void sub_1C002FF30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (unsigned __int16 *)(a2 + 64);
    do
    {
      if (*((unsigned __int8 *)v4 + 2) != 255)
      {
        uint64_t v5 = *v4 | (*((unsigned __int8 *)v4 + 2) << 16);
        if (!WORD1(v5) || (WORD1(v5) != 1 ? (BOOL v6 = (~v5 & 0xFF00) == 0) : (BOOL v6 = 0), v6)) {
          sub_1BFF9C84C(*((void *)v4 - 1), v5);
        }
      }
      v4 += 20;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_1C002FFD4()
{
  unint64_t result = qword_1EB868220;
  if (!qword_1EB868220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB868220);
  }
  return result;
}

unint64_t sub_1C0030028()
{
  unint64_t result = qword_1EB88C3D0;
  if (!qword_1EB88C3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C3D0);
  }
  return result;
}

uint64_t sub_1C003007C(uint64_t a1)
{
  return sub_1C0030088(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1C0030088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1BFF303E0(a2, a3);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_bindings + 32);
  if (!*(void *)(v9 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1BFEF2D8C(v6, v8);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    return 0;
  }
  uint64_t v12 = *(void *)(v9 + 56) + 40 * v10;
  uint64_t v13 = *(void *)v12;
  unint64_t v14 = *(void *)(v12 + 8);
  uint64_t v15 = *(void *)(v12 + 16);
  uint64_t v16 = *(void *)(v12 + 24);
  int v17 = *(unsigned __int8 *)(v12 + 32);
  sub_1BFF6DB28(*(void *)v12, v14, v15, v16, *(unsigned char *)(v12 + 32));
  swift_bridgeObjectRelease_n();
  if (v17 != 255)
  {
    sub_1BFF72054(v13, v14, v15, v16, v17);
    return 0;
  }
  return 1;
}

unint64_t sub_1C00301AC()
{
  unint64_t result = qword_1EB88B540;
  if (!qword_1EB88B540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B540);
  }
  return result;
}

unint64_t sub_1C0030200()
{
  unint64_t result = qword_1EB866AA0;
  if (!qword_1EB866AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB866AA0);
  }
  return result;
}

unint64_t sub_1C0030254()
{
  unint64_t result = qword_1EB8896A0;
  if (!qword_1EB8896A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8896A0);
  }
  return result;
}

uint64_t sub_1C00302A8()
{
  return sub_1C1520E0C();
}

uint64_t sub_1C003030C(unint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  char v6 = *((unsigned char *)a2 + 9);
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v12 = a2[7];
  uint64_t v13 = a2[8];
  uint64_t v14 = a2[9];
  uint64_t v15 = a2[10];
  uint64_t v16 = a2[11];
  uint64_t v17 = a2[12];
  uint64_t v18 = *v2;
  unint64_t v19 = v2[1];
  uint64_t v20 = v2[2];
  uint64_t v21 = v2[3];
  uint64_t v56 = *v2;
  unint64_t v57 = v19;
  uint64_t v58 = v20;
  uint64_t v59 = v21;
  uint64_t v33 = v4;
  uint64_t v41 = v13;
  uint64_t v42 = v4;
  char v32 = v5;
  char v43 = v5;
  char v34 = v6;
  char v44 = v6;
  uint64_t v35 = v7;
  uint64_t v36 = v8;
  uint64_t v45 = v7;
  uint64_t v46 = v8;
  uint64_t v37 = v9;
  uint64_t v38 = v10;
  uint64_t v47 = v9;
  uint64_t v48 = v10;
  uint64_t v39 = v11;
  uint64_t v40 = v12;
  uint64_t v49 = v11;
  uint64_t v50 = v12;
  uint64_t v51 = v13;
  uint64_t v52 = v14;
  uint64_t v53 = v15;
  uint64_t v54 = v16;
  uint64_t v55 = v17;
  uint64_t v60 = a1;
  uint64_t result = sub_1C0030F04(a1, (uint64_t)&v42);
  if (!v3)
  {
    uint64_t v31 = v14;
    uint64_t v23 = v21;
    uint64_t v24 = v20;
    switch((v19 >> 59) & 2 | (v19 >> 2) & 1)
    {
      case 1uLL:
        uint64_t v30 = v18 & 1;
        uint64_t v25 = v18;
        uint64_t v26 = v60;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v27 = v23;
        sub_1C0030644(&v42, 8);
        sub_1C0030644(&v42, 7);
        sub_1C0030644(&v42, 6);
        uint64_t v56 = v30;
        unint64_t v57 = v19 & 0xEFFFFFFFFFFFFFFBLL;
        goto LABEL_9;
      case 2uLL:
        uint64_t v29 = v18 & 1;
        uint64_t v25 = v18;
        uint64_t v26 = v60;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v27 = v23;
        sub_1C0030644(&v42, 11);
        sub_1C0030644(&v42, 10);
        sub_1C0030644(&v42, 9);
        uint64_t v56 = v29;
        unint64_t v57 = v19 & 0xEFFFFFFFFFFFFFFBLL | 4;
LABEL_9:
        uint64_t v58 = v24;
        uint64_t v59 = v27;
        uint64_t v42 = v33;
        char v43 = v32;
        char v44 = v34;
        uint64_t v45 = v35;
        uint64_t v46 = v36;
        uint64_t v47 = v37;
        uint64_t v48 = v38;
        uint64_t v49 = v39;
        uint64_t v50 = v40;
        uint64_t v51 = v41;
        uint64_t v52 = v31;
        uint64_t v53 = v15;
        uint64_t v54 = v16;
        uint64_t v55 = v17;
        sub_1C003030C(v26, &v42);
        uint64_t result = sub_1C0223A4C(v25, v19);
        break;
      case 3uLL:
        if (v19 != 0x1000000000000004 || v23 | v20 | v18)
        {
          sub_1C0030644(&v42, 0);
          uint64_t v28 = 2;
        }
        else
        {
          sub_1C0030644(&v42, 0);
          uint64_t v28 = 1;
        }
        uint64_t result = sub_1C0030644(&v42, v28);
        break;
      default:
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1C0030644(&v42, 3);
        sub_1C0030644(&v42, 4);
        uint64_t result = sub_1C0223A4C(v18, v19);
        break;
    }
  }
  return result;
}

uint64_t sub_1C0030644(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  sub_1C1520DBC();
  sub_1C1520DCC();
  FormatTagBinding.Asset.rawValue.getter();
  swift_bridgeObjectRetain();
  sub_1C151E77C();
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_1C1520E0C();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  uint64_t v20 = a2;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    char v18 = v20;
    sub_1C0030AA4(v20, v7, isUniquelyReferenced_nonNull_native);
    *uint64_t v21 = v23;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_41;
  }
  uint64_t v8 = ~v6;
  uint64_t v9 = a2;
  while (2)
  {
    unint64_t v10 = 0x80000001C15FF080;
    unint64_t v11 = 0xD000000000000012;
    switch(*(unsigned char *)(*(void *)(v4 + 48) + v7))
    {
      case 1:
        unint64_t v11 = 0xD00000000000001DLL;
        uint64_t v12 = "bannerImageForMask";
        goto LABEL_15;
      case 2:
        unint64_t v11 = 0xD00000000000001DLL;
        uint64_t v12 = "bannerImageForWhiteBackground";
        goto LABEL_15;
      case 3:
        unint64_t v11 = 0x616D497265766F63;
        unint64_t v10 = 0xEA00000000006567;
        break;
      case 4:
        unint64_t v11 = 0x4976614E64656566;
        unint64_t v10 = 0xEC0000006567616DLL;
        break;
      case 5:
        unint64_t v11 = 0x4976614E64656566;
        unint64_t v10 = 0xEE0051486567616DLL;
        break;
      case 6:
        unint64_t v11 = 0xD000000000000014;
        uint64_t v12 = "Image";
        goto LABEL_15;
      case 7:
        unint64_t v11 = 0x6F4C7374726F7073;
        unint64_t v10 = 0xEF6567616D496F67;
        break;
      case 8:
        unint64_t v11 = 0xD000000000000016;
        uint64_t v12 = "arge";
        goto LABEL_15;
      case 9:
        unint64_t v11 = 0xD000000000000017;
        uint64_t v12 = "sportsLogoImageCompact";
        goto LABEL_15;
      case 0xA:
        uint64_t v12 = "sportsLogoAltImageLarge";
        goto LABEL_15;
      case 0xB:
        unint64_t v11 = 0xD000000000000019;
        uint64_t v12 = "sportsLogoAltImage";
LABEL_15:
        unint64_t v10 = (unint64_t)v12 | 0x8000000000000000;
        break;
      default:
        break;
    }
    unint64_t v13 = 0x80000001C15FF080;
    unint64_t v14 = 0xD000000000000012;
    switch(v9)
    {
      case 1:
        unint64_t v14 = 0xD00000000000001DLL;
        uint64_t v15 = "bannerImageForMask";
        goto LABEL_33;
      case 2:
        unint64_t v14 = 0xD00000000000001DLL;
        uint64_t v15 = "bannerImageForWhiteBackground";
        goto LABEL_33;
      case 3:
        unint64_t v13 = 0xEA00000000006567;
        if (v11 != 0x616D497265766F63) {
          goto LABEL_35;
        }
        goto LABEL_34;
      case 4:
        unint64_t v13 = 0xEC0000006567616DLL;
        if (v11 != 0x4976614E64656566) {
          goto LABEL_35;
        }
        goto LABEL_34;
      case 5:
        unint64_t v13 = 0xEE0051486567616DLL;
        if (v11 != 0x4976614E64656566) {
          goto LABEL_35;
        }
        goto LABEL_34;
      case 6:
        unint64_t v14 = 0xD000000000000014;
        uint64_t v15 = "Image";
        goto LABEL_33;
      case 7:
        unint64_t v14 = 0x6F4C7374726F7073;
        unint64_t v13 = 0xEF6567616D496F67;
        goto LABEL_27;
      case 8:
        unint64_t v14 = 0xD000000000000016;
        uint64_t v15 = "arge";
        goto LABEL_33;
      case 9:
        unint64_t v14 = 0xD000000000000017;
        uint64_t v15 = "sportsLogoImageCompact";
        goto LABEL_33;
      case 10:
        uint64_t v15 = "sportsLogoAltImageLarge";
        goto LABEL_33;
      case 11:
        unint64_t v14 = 0xD000000000000019;
        uint64_t v15 = "sportsLogoAltImage";
LABEL_33:
        unint64_t v13 = (unint64_t)v15 | 0x8000000000000000;
        if (v11 == v14) {
          goto LABEL_34;
        }
        goto LABEL_35;
      default:
LABEL_27:
        if (v11 != v14) {
          goto LABEL_35;
        }
LABEL_34:
        if (v10 == v13)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_40;
        }
LABEL_35:
        char v16 = sub_1C1520A9C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
        {
          unint64_t v7 = (v7 + 1) & v8;
          if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_37;
          }
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_40:
        uint64_t result = 0;
        char v18 = *(unsigned char *)(*(void *)(*v21 + 48) + v7);
LABEL_41:
        *a1 = v18;
        return result;
    }
  }
}

uint64_t sub_1C0030AA4(uint64_t result, unint64_t a2, char a3)
{
  unsigned __int8 v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_1C0031534();
    }
    else
    {
      if (v7 > v6)
      {
        uint64_t result = (uint64_t)sub_1C02C6C7C();
        goto LABEL_44;
      }
      sub_1C00319D4();
    }
    uint64_t v8 = *v3;
    sub_1C1520DBC();
    sub_1C1520DCC();
    FormatTagBinding.Asset.rawValue.getter();
    sub_1C151E77C();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1C1520E0C();
    uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
    a2 = result & ~v9;
    if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v10 = ~v9;
      uint64_t v11 = v5;
      while (2)
      {
        unint64_t v12 = 0x80000001C15FF080;
        unint64_t v13 = 0xD000000000000012;
        switch(*(unsigned char *)(*(void *)(v8 + 48) + a2))
        {
          case 1:
            unint64_t v13 = 0xD00000000000001DLL;
            unint64_t v14 = "bannerImageForMask";
            goto LABEL_22;
          case 2:
            unint64_t v13 = 0xD00000000000001DLL;
            unint64_t v14 = "bannerImageForWhiteBackground";
            goto LABEL_22;
          case 3:
            unint64_t v13 = 0x616D497265766F63;
            unint64_t v12 = 0xEA00000000006567;
            break;
          case 4:
            unint64_t v13 = 0x4976614E64656566;
            unint64_t v12 = 0xEC0000006567616DLL;
            break;
          case 5:
            unint64_t v13 = 0x4976614E64656566;
            unint64_t v12 = 0xEE0051486567616DLL;
            break;
          case 6:
            unint64_t v13 = 0xD000000000000014;
            unint64_t v14 = "Image";
            goto LABEL_22;
          case 7:
            unint64_t v13 = 0x6F4C7374726F7073;
            unint64_t v12 = 0xEF6567616D496F67;
            break;
          case 8:
            unint64_t v13 = 0xD000000000000016;
            unint64_t v14 = "arge";
            goto LABEL_22;
          case 9:
            unint64_t v13 = 0xD000000000000017;
            unint64_t v14 = "sportsLogoImageCompact";
            goto LABEL_22;
          case 0xA:
            unint64_t v14 = "sportsLogoAltImageLarge";
            goto LABEL_22;
          case 0xB:
            unint64_t v13 = 0xD000000000000019;
            unint64_t v14 = "sportsLogoAltImage";
LABEL_22:
            unint64_t v12 = (unint64_t)v14 | 0x8000000000000000;
            break;
          default:
            break;
        }
        unint64_t v15 = 0x80000001C15FF080;
        unint64_t v16 = 0xD000000000000012;
        switch(v11)
        {
          case 1:
            unint64_t v16 = 0xD00000000000001DLL;
            uint64_t v17 = "bannerImageForMask";
            goto LABEL_40;
          case 2:
            unint64_t v16 = 0xD00000000000001DLL;
            uint64_t v17 = "bannerImageForWhiteBackground";
            goto LABEL_40;
          case 3:
            unint64_t v15 = 0xEA00000000006567;
            if (v13 != 0x616D497265766F63) {
              goto LABEL_42;
            }
            goto LABEL_41;
          case 4:
            unint64_t v15 = 0xEC0000006567616DLL;
            if (v13 != 0x4976614E64656566) {
              goto LABEL_42;
            }
            goto LABEL_41;
          case 5:
            unint64_t v16 = 0x4976614E64656566;
            unint64_t v15 = 0xEE0051486567616DLL;
            goto LABEL_35;
          case 6:
            unint64_t v16 = 0xD000000000000014;
            uint64_t v17 = "Image";
            goto LABEL_40;
          case 7:
            unint64_t v15 = 0xEF6567616D496F67;
            if (v13 != 0x6F4C7374726F7073) {
              goto LABEL_42;
            }
            goto LABEL_41;
          case 8:
            unint64_t v16 = 0xD000000000000016;
            uint64_t v17 = "arge";
            goto LABEL_40;
          case 9:
            unint64_t v16 = 0xD000000000000017;
            uint64_t v17 = "sportsLogoImageCompact";
            goto LABEL_40;
          case 10:
            uint64_t v17 = "sportsLogoAltImageLarge";
            goto LABEL_40;
          case 11:
            unint64_t v16 = 0xD000000000000019;
            uint64_t v17 = "sportsLogoAltImage";
LABEL_40:
            unint64_t v15 = (unint64_t)v17 | 0x8000000000000000;
            if (v13 == v16) {
              goto LABEL_41;
            }
            goto LABEL_42;
          default:
LABEL_35:
            if (v13 != v16) {
              goto LABEL_42;
            }
LABEL_41:
            if (v12 == v15) {
              goto LABEL_47;
            }
LABEL_42:
            char v18 = sub_1C1520A9C();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (v18) {
              goto LABEL_48;
            }
            a2 = (a2 + 1) & v10;
            if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              break;
            }
            continue;
        }
        break;
      }
    }
  }
LABEL_44:
  uint64_t v19 = *v23;
  *(void *)(*v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v19 + 48) + a2) = v24;
  uint64_t v20 = *(void *)(v19 + 16);
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
    __break(1u);
LABEL_47:
    swift_bridgeObjectRelease_n();
LABEL_48:
    uint64_t result = sub_1C1520CEC();
    __break(1u);
  }
  else
  {
    *(void *)(v19 + 16) = v22;
  }
  return result;
}

uint64_t sub_1C0030F04(unint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 9);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t result = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v16 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v17 = *(void *)(a2 + 96);
  uint64_t v19 = *v2;
  unint64_t v18 = v2[1];
  switch((v18 >> 59) & 2 | (v18 >> 2) & 1)
  {
    case 1uLL:
    case 2uLL:
      unint64_t v34 = v18 & 0xEFFFFFFFFFFFFFFBLL;
      uint64_t v20 = v4;
      char v21 = v5;
      char v22 = v6;
      uint64_t v23 = v8;
      uint64_t v24 = v7;
      uint64_t v25 = result;
      uint64_t v26 = v10;
      uint64_t v27 = v12;
      uint64_t v28 = v11;
      uint64_t v29 = v14;
      uint64_t v30 = v13;
      uint64_t v31 = v16;
      uint64_t v32 = v15;
      goto LABEL_4;
    case 3uLL:
      return result;
    default:
      unint64_t v34 = v2[1];
      uint64_t v20 = v4;
      char v21 = v5;
      char v22 = v6;
      uint64_t v23 = v8;
      uint64_t v24 = v7;
      uint64_t v25 = result;
      uint64_t v26 = v10;
      uint64_t v27 = v12;
      uint64_t v28 = v11;
      uint64_t v29 = v14;
      uint64_t v30 = v13;
      uint64_t v31 = v16;
      uint64_t v32 = v15;
LABEL_4:
      uint64_t v33 = v17;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BFF79C34(a1, &v20);
      uint64_t result = sub_1C0223A4C(v19, v18);
      break;
  }
  return result;
}

void sub_1C0031044()
{
  if (!qword_1EB87A800)
  {
    sub_1BFCB6824(255, (unint64_t *)&qword_1EB877A00);
    unint64_t v0 = sub_1C152089C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB87A800);
    }
  }
}

void sub_1C00310B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void *sub_1C00310C8(uint64_t (*a1)(void), void (*a2)(void, __n128), void (*a3)(unint64_t, char *), void (*a4)(char *, unint64_t))
{
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  char v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v36 = *(void *)(v7 - 8);
  __n128 v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v33 - v9;
  a2(0, v8);
  uint64_t v11 = *v4;
  uint64_t v12 = sub_1C15204DC();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *char v6 = v13;
    return result;
  }
  unint64_t v34 = v6;
  uint64_t result = (void *)(v12 + 64);
  unint64_t v15 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v11 || (unint64_t)result >= v11 + 64 + 8 * v15) {
    uint64_t result = memmove(result, (const void *)(v11 + 64), 8 * v15);
  }
  uint64_t v35 = v11 + 64;
  int64_t v17 = 0;
  *(void *)(v13 + 16) = *(void *)(v11 + 16);
  uint64_t v18 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & *(void *)(v11 + 64);
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    int64_t v30 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v30 >= v21) {
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v35 + 8 * v30);
    ++v17;
    if (!v31)
    {
      int64_t v17 = v30 + 1;
      if (v30 + 1 >= v21) {
        goto LABEL_26;
      }
      unint64_t v31 = *(void *)(v35 + 8 * v17);
      if (!v31) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = (v31 - 1) & v31;
    unint64_t v23 = __clz(__rbit64(v31)) + (v17 << 6);
LABEL_12:
    uint64_t v24 = 16 * v23;
    uint64_t v25 = (uint64_t *)(*(void *)(v11 + 48) + 16 * v23);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    unint64_t v28 = *(void *)(v36 + 72) * v23;
    v37(*(void *)(v11 + 56) + v28, v10);
    uint64_t v29 = (void *)(*(void *)(v13 + 48) + v24);
    *uint64_t v29 = v26;
    v29[1] = v27;
    v38(v10, *(void *)(v13 + 56) + v28);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v32 = v30 + 2;
  if (v32 >= v21)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    char v6 = v34;
    goto LABEL_28;
  }
  unint64_t v31 = *(void *)(v35 + 8 * v32);
  if (v31)
  {
    int64_t v17 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v17 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v17 >= v21) {
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v35 + 8 * v17);
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1C003134C()
{
  return sub_1C106B72C((unint64_t *)&qword_1EB8741E0, (uint64_t (*)(void))sub_1C00F6B20, (uint64_t)&type metadata for FormatType, (unint64_t *)&unk_1EB87A400);
}

void sub_1C003137C()
{
  if (!qword_1EB880E60)
  {
    sub_1BFC39268(255, &qword_1EB87A318);
    unint64_t v0 = sub_1C152051C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB880E60);
    }
  }
}

uint64_t sub_1C00313F4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C0EDF7CC(a1, a2, a3, a4, &qword_1EB86BB70, (uint64_t (*)(uint64_t))type metadata accessor for WebEmbedDataVisualization, (uint64_t (*)(void))type metadata accessor for WebEmbedDataVisualization, (uint64_t (*)(void))type metadata accessor for WebEmbedDataVisualization);
}

uint64_t sub_1C003143C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C152052C();
  __break(1u);
  return result;
}

uint64_t sub_1C0031534()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1C02CE270(0, (unint64_t *)&unk_1EB884C30, (void (*)(void))sub_1C007646C);
  uint64_t v3 = sub_1C152008C();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        int64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8) {
          goto LABEL_33;
        }
        unint64_t v16 = v27[v15];
        ++v11;
        if (!v16)
        {
          int64_t v11 = v15 + 1;
          if (v15 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v16 = v27[v11];
          if (!v16)
          {
            int64_t v11 = v15 + 2;
            if (v15 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v16 = v27[v11];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v27, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v27 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v27[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v27[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
      sub_1C1520DBC();
      sub_1C1520DCC();
      sub_1C151E77C();
      swift_bridgeObjectRelease();
      uint64_t result = sub_1C1520E0C();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1C00319D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1C02CE270(0, (unint64_t *)&unk_1EB884C30, (void (*)(void))sub_1C007646C);
  uint64_t v3 = sub_1C152008C();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v26) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
    sub_1C1520DBC();
    sub_1C1520DCC();
    sub_1C151E77C();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1C1520E0C();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v9 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void *sub_1C0031E3C()
{
  uint64_t v0 = sub_1C151631C();
  uint64_t v60 = *(void *)(v0 - 8);
  uint64_t v61 = v0;
  MEMORY[0x1F4188790](v0);
  uint64_t v59 = (char *)&v55 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_1C151661C();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_1C151586C();
  uint64_t v57 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB86AD90 != -1) {
    swift_once();
  }
  uint64_t v8 = __swift_project_value_buffer(v2, (uint64_t)qword_1EB86AD78);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
  sub_1C003272C(0, (unint64_t *)&qword_1EB87A578, MEMORY[0x1E4F27C88]);
  uint64_t v9 = sub_1C15165FC();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v58 = v2;
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1C152C7F0;
  unint64_t v14 = v13 + v12;
  int64_t v15 = *(void (**)(unint64_t, void, uint64_t))(v10 + 104);
  v15(v14, *MEMORY[0x1E4F27C10], v9);
  v15(v14 + v11, *MEMORY[0x1E4F27C48], v9);
  v15(v14 + 2 * v11, *MEMORY[0x1E4F27C50], v9);
  sub_1C00B78C4(v13);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  unint64_t v16 = v59;
  sub_1C151630C();
  sub_1C151652C();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v16, v61);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v58);
  uint64_t v17 = sub_1C151583C();
  if ((v18 & 1) != 0
    || (uint64_t v19 = v17, v20 = sub_1C151582C(), (v21 & 1) != 0)
    || (v22 = v20, uint64_t v23 = sub_1C15157DC(), (v24 & 1) != 0))
  {
    if (qword_1EB87B060 != -1) {
      swift_once();
    }
    id v36 = (id)qword_1EB93C700;
    sub_1C151F36C();
    sub_1C003272C(0, (unint64_t *)&qword_1EB895EB0, (void (*)(uint64_t))sub_1C0062478);
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_1C1529AE0;
    sub_1C11A58F0();
    uint64_t v38 = v62;
    uint64_t v39 = sub_1C152088C();
    uint64_t v41 = v40;
    *(void *)(v37 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v37 + 64) = sub_1BFE9C558();
    *(void *)(v37 + 32) = v39;
    *(void *)(v37 + 40) = v41;
    sub_1C15197BC();

    swift_bridgeObjectRelease();
    uint64_t v29 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v25 = v23;
    id v26 = v56;
    id v27 = objc_msgSend(v56, sel_morningTimeOfDayConfiguration);
    char v28 = sub_1C00325F4(v25, v22, v19);

    if (v28)
    {
      uint64_t v29 = sub_1BFEF9B68(0, 1, 1, MEMORY[0x1E4FBC860]);
      unint64_t v31 = v29[2];
      unint64_t v30 = v29[3];
      if (v31 >= v30 >> 1) {
        uint64_t v29 = sub_1BFEF9B68((void *)(v30 > 1), v31 + 1, 1, v29);
      }
      uint64_t v32 = v57;
      v29[2] = v31 + 1;
      uint64_t v33 = &v29[2 * v31];
      unint64_t v34 = 0xD000000000000018;
      uint64_t v35 = "date-time-of-day-morning";
LABEL_27:
      v33[4] = v34;
      v33[5] = (unint64_t)(v35 - 32) | 0x8000000000000000;
      uint64_t v38 = v62;
      goto LABEL_14;
    }
    id v43 = objc_msgSend(v26, sel_afternoonTimeOfDayConfiguration);
    char v44 = sub_1C00325F4(v25, v22, v19);

    if (v44)
    {
      uint64_t v29 = sub_1BFEF9B68(0, 1, 1, MEMORY[0x1E4FBC860]);
      unint64_t v46 = v29[2];
      unint64_t v45 = v29[3];
      if (v46 >= v45 >> 1) {
        uint64_t v29 = sub_1BFEF9B68((void *)(v45 > 1), v46 + 1, 1, v29);
      }
      uint64_t v32 = v57;
      v29[2] = v46 + 1;
      uint64_t v33 = &v29[2 * v46];
      unint64_t v34 = 0xD00000000000001ALL;
      uint64_t v35 = "date-time-of-day-afternoon";
      goto LABEL_27;
    }
    id v47 = objc_msgSend(v26, sel_eveningTimeOfDayConfiguration);
    char v48 = sub_1C00325F4(v25, v22, v19);

    if (v48)
    {
      uint64_t v29 = sub_1BFEF9B68(0, 1, 1, MEMORY[0x1E4FBC860]);
      unint64_t v50 = v29[2];
      unint64_t v49 = v29[3];
      if (v50 >= v49 >> 1) {
        uint64_t v29 = sub_1BFEF9B68((void *)(v49 > 1), v50 + 1, 1, v29);
      }
      uint64_t v32 = v57;
      v29[2] = v50 + 1;
      uint64_t v33 = &v29[2 * v50];
      unint64_t v34 = 0xD000000000000018;
      uint64_t v35 = "date-time-of-day-evening";
      goto LABEL_27;
    }
    id v51 = objc_msgSend(v26, sel_nightTimeOfDayConfiguration);
    char v52 = sub_1C00325F4(v25, v22, v19);

    if (v52)
    {
      uint64_t v29 = sub_1BFEF9B68(0, 1, 1, MEMORY[0x1E4FBC860]);
      unint64_t v54 = v29[2];
      unint64_t v53 = v29[3];
      if (v54 >= v53 >> 1) {
        uint64_t v29 = sub_1BFEF9B68((void *)(v53 > 1), v54 + 1, 1, v29);
      }
      uint64_t v32 = v57;
      v29[2] = v54 + 1;
      uint64_t v33 = &v29[2 * v54];
      unint64_t v34 = 0xD000000000000016;
      uint64_t v35 = "date-time-of-day-night";
      goto LABEL_27;
    }
    uint64_t v29 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v38 = v62;
  }
  uint64_t v32 = v57;
LABEL_14:
  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v38);
  return v29;
}

uint64_t sub_1C00325F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 60 * a2;
  if ((unsigned __int128)(a2 * (__int128)60) >> 64 != (60 * a2) >> 63)
  {
    __break(1u);
    goto LABEL_15;
  }
  BOOL v5 = __OFADD__(a3, v4);
  uint64_t v6 = a3 + v4;
  if (v5)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((unsigned __int128)(result * (__int128)60) >> 64 != (60 * result) >> 63)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = 3600 * result;
  if ((unsigned __int128)(60 * result * (__int128)60) >> 64 != (3600 * result) >> 63)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v8 = v6 + v7;
  if (__OFADD__(v6, v7))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  id v9 = objc_msgSend(v3, sel_start);
  id v10 = objc_msgSend(v3, sel_end);
  id v11 = objc_msgSend(v3, sel_start);
  if ((uint64_t)v9 < (uint64_t)v10)
  {
    if (v8 < (uint64_t)v11) {
      return 0;
    }
    return v8 < (uint64_t)objc_msgSend(v3, sel_end);
  }
  if ((uint64_t)objc_msgSend(v3, sel_end) >= (uint64_t)v11) {
    return 0;
  }
  if (v8 < (uint64_t)objc_msgSend(v3, sel_start)) {
    return v8 < (uint64_t)objc_msgSend(v3, sel_end);
  }
  return 1;
}

void sub_1C003272C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C152089C();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C0032780(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1C00327E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C003284C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1C003286C(a1, *(void *)(v2 + 24), a2);
}

uint64_t sub_1C003286C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1BFF1AFA4(a1, (uint64_t)v8, type metadata accessor for FeedHeadline);
  sub_1BFC66384(a2, (uint64_t)v12);
  uint64_t v9 = swift_retain();
  return HeadlineViewLayout.Context.init(key:model:styler:)(v9, (uint64_t)v8, (uint64_t)v12, a3);
}

uint64_t sub_1C0032944(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C05F8AC4(a1, a2, a3, (void *)*v3, sub_1C0000BC0, type metadata accessor for HeadlineViewLayout.Context);
  *uint64_t v3 = result;
  return result;
}

unint64_t sub_1C003298C()
{
  unint64_t result = qword_1EB86B0A0;
  if (!qword_1EB86B0A0)
  {
    sub_1BFE309D0(255, &qword_1EB86B098, type metadata accessor for FormatItemNodeStyle.Selector, MEMORY[0x1E4FBB320]);
    sub_1C085F050(&qword_1EB888CA8, (void (*)(uint64_t))type metadata accessor for FormatItemNodeStyle.Selector);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86B0A0);
  }
  return result;
}

uint64_t sub_1C0032A5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v13 = 0;
LABEL_36:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v13;
  }
  if (!a3)
  {
    int64_t v12 = 0;
    uint64_t v13 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v25 = -1 << *(unsigned char *)(a4 + 32);
  while (v9)
  {
    unint64_t v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v16 = v15 | (v12 << 6);
LABEL_9:
    ++v13;
    unint64_t result = sub_1C00BB210(*(void *)(a4 + 56) + 104 * v16, (uint64_t)v26, (uint64_t (*)(void))sub_1BFFB49BC);
    long long v17 = v26[2];
    long long v18 = v26[1];
    *(_OWORD *)uint64_t v11 = v26[0];
    *(_OWORD *)(v11 + 16) = v18;
    *(_OWORD *)(v11 + 32) = v17;
    long long v19 = v26[5];
    long long v20 = v26[4];
    long long v21 = v26[3];
    *(void *)(v11 + 96) = v27;
    *(_OWORD *)(v11 + 64) = v20;
    *(_OWORD *)(v11 + 80) = v19;
    *(_OWORD *)(v11 + 48) = v21;
    v11 += 104;
    if (v13 == a3)
    {
      uint64_t v13 = a3;
LABEL_35:
      uint64_t v7 = v25;
      goto LABEL_36;
    }
  }
  int64_t v22 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v22 >= v14) {
    goto LABEL_34;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v22);
  if (v23) {
    goto LABEL_23;
  }
  int64_t v24 = v12 + 2;
  ++v12;
  if (v22 + 1 >= v14) {
    goto LABEL_34;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23) {
    goto LABEL_16;
  }
  int64_t v12 = v22 + 1;
  if (v22 + 2 >= v14) {
    goto LABEL_34;
  }
  unint64_t v23 = *(void *)(v6 + 8 * (v22 + 2));
  if (v23)
  {
    v22 += 2;
    goto LABEL_23;
  }
  int64_t v12 = v22 + 2;
  if (v22 + 3 >= v14) {
    goto LABEL_34;
  }
  unint64_t v23 = *(void *)(v6 + 8 * (v22 + 3));
  if (v23)
  {
    v22 += 3;
    goto LABEL_23;
  }
  int64_t v24 = v22 + 4;
  int64_t v12 = v22 + 3;
  if (v22 + 4 >= v14)
  {
LABEL_34:
    unint64_t v9 = 0;
    goto LABEL_35;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
LABEL_16:
    int64_t v22 = v24;
LABEL_23:
    unint64_t v9 = (v23 - 1) & v23;
    unint64_t v16 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v12 = v22;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v22 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v22 >= v14)
    {
      int64_t v12 = v14 - 1;
      goto LABEL_34;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v24;
    if (v23) {
      goto LABEL_23;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void *sub_1C0032C98(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = (uint64_t *)(a3 + 56);
  uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v21 = v3;
    int64_t v22 = v6;
    uint64_t v6 = (void *)*(v5 - 3);
    uint64_t v7 = *(v5 - 2);
    uint64_t v8 = *(v5 - 1);
    uint64_t v9 = *v5;
    uint64_t v10 = v5[1];
    uint64_t v11 = v5[2];
    uint64_t v12 = v5[3];
    uint64_t v13 = v5[4];
    uint64_t v14 = v5[5];
    uint64_t v15 = v5[6];
    v24[0] = v6;
    v24[1] = v7;
    v24[2] = v8;
    v24[3] = v9;
    v24[4] = v10;
    v24[5] = v11;
    v24[6] = v12;
    v24[7] = v13;
    v24[8] = v14;
    v24[9] = v15;
    sub_1BFEE0A78();
    a1(&v25, v24);
    if (v23)
    {
      sub_1C0033494();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    sub_1C0033494();
    uint64_t v16 = v25;
    if ((~v25 & 0xF000000000000007) != 0)
    {
      uint64_t v6 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_1C0EE6510(0, v22[2] + 1, 1, v22);
      }
      unint64_t v18 = v6[2];
      unint64_t v17 = v6[3];
      if (v18 >= v17 >> 1) {
        uint64_t v6 = sub_1C0EE6510((void *)(v17 > 1), v18 + 1, 1, v6);
      }
      v6[2] = v18 + 1;
      v6[v18 + 4] = v16;
    }
    else
    {
      uint64_t v6 = v22;
    }
    v5 += 10;
    uint64_t v3 = v21 - 1;
  }
  while (v21 != 1);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t BlueprintSection<>.mapToRegions(content:additionalGroupItems:additionalGroupOptions:feedDescriptor:feedGroupBindingOptions:feedGroupContextIdentifier:feedGroupRevision:nativeAdContext:pluginModels:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v39 = a8;
  uint64_t v43 = a7;
  uint64_t v41 = a6;
  uint64_t v44 = a4;
  uint64_t v42 = a2;
  uint64_t v40 = a1;
  uint64_t v35 = a13;
  uint64_t v38 = a10;
  uint64_t v36 = a12;
  sub_1C151A31C();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v37 = sub_1C151879C();
  uint64_t v15 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  unint64_t v17 = (char *)&v27 - v16;
  uint64_t v19 = *a3;
  uint64_t v18 = a3[1];
  long long v34 = *a5;
  long long v33 = a5[1];
  long long v32 = a5[2];
  uint64_t v31 = *((void *)a5 + 6);
  int v30 = *((unsigned __int8 *)a5 + 56);
  LOBYTE(a5) = *((unsigned char *)a5 + 57);
  long long v29 = *(_OWORD *)a9;
  uint64_t v28 = *(void *)(a9 + 16);
  uint64_t v27 = *(void *)(a9 + 24);
  uint64_t v35 = type metadata accessor for FeedGroupRegionMapper();
  uint64_t v20 = sub_1C151AA2C();
  uint64_t v22 = v21;
  sub_1C151AA3C();
  uint64_t v23 = v36;
  BlueprintSection<>.layoutOrder.getter(a11, v36);
  v54[0] = v54[1];
  BlueprintSection<>.feedGroupDebug.getter(a11, v23);
  v52[0] = v19;
  v52[1] = v18;
  v48[0] = v34;
  v48[1] = v33;
  v48[2] = v32;
  uint64_t v49 = v31;
  char v50 = v30;
  char v51 = (char)a5;
  long long v45 = v29;
  uint64_t v46 = v28;
  uint64_t v47 = v27;
  *((void *)&v26 + 1) = v43;
  *(void *)&long long v26 = v41;
  uint64_t v24 = sub_1C0033310(v40, v20, v22, (uint64_t)v17, v54, (uint64_t)v53, v44, v42, v52, (uint64_t)v48, v26, v39, &v45, v38);
  swift_bridgeObjectRelease();
  sub_1BFEE3100((uint64_t)v53, (uint64_t (*)(void))sub_1BFECFBEC);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v37);
  return v24;
}

uint64_t BlueprintSection<>.feedGroupDebug.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C151AA1C();
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(v3, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t type metadata accessor for FeedGroupRegionMapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C0033310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, long long a11, uint64_t a12, long long *a13, uint64_t a14)
{
  char v17 = *a5;
  uint64_t v18 = *a9;
  uint64_t v19 = a9[1];
  sub_1C01B3AD4(a10, (uint64_t)v50, &qword_1EB872DE0, (uint64_t)&type metadata for FeedGroupBindingOptions);
  long long v25 = *a13;
  uint64_t v21 = *((void *)a13 + 2);
  uint64_t v20 = *((void *)a13 + 3);
  uint64_t v22 = *(void *)(a1 + *(int *)(type metadata accessor for FormatContent.Resolved() + 32));
  uint64_t v32 = a14;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v35 = a6;
  uint64_t v36 = v28;
  uint64_t v37 = a1;
  uint64_t v38 = a4;
  char v39 = v17;
  uint64_t v40 = a7;
  uint64_t v41 = a8;
  uint64_t v42 = v18;
  uint64_t v43 = v19;
  uint64_t v44 = v50;
  long long v45 = a11;
  uint64_t v46 = a12;
  long long v47 = v25;
  uint64_t v48 = v21;
  uint64_t v49 = v20;
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_1C01830C4((void (*)(uint64_t *__return_ptr, void *))sub_1C003352C, (uint64_t)v31, v22);
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t _s17ResolvedContainerOwxx()
{
  return sub_1C0033494();
}

uint64_t sub_1C0033494()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C003352C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BFEC5450(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 56), *(void *)(v2 + 64), a2, *(unsigned char *)(v2 + 72), *(void **)(v2 + 80), *(int **)(v2 + 88), *(void *)(v2 + 96), *(void *)(v2 + 104), *(void *)(v2 + 112), *(void *)(v2 + 120), *(void *)(v2 + 128), *(void *)(v2 + 136), *(void *)(v2 + 144), *(void *)(v2 + 152),
           *(void *)(v2 + 160),
           *(void *)(v2 + 168));
}

void sub_1C0033594(uint64_t *a1@<X0>, void *a2@<X8>)
{
  sub_1C00335B4(a1, *(void (**)(void *, uint64_t, uint64_t))(v2 + 24), *(void *)(v2 + 32), a2);
}

void sub_1C00335B4(uint64_t *a1@<X0>, void (*a2)(void *, uint64_t, uint64_t)@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for FormatContent.Resolved();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = a1[4];
  if (v12 < 0)
  {
    long long v29 = a2;
    uint64_t v13 = a1[8];
    uint64_t v14 = a1[9];
    uint64_t v15 = a1[6];
    uint64_t v21 = a1[7];
    uint64_t v22 = v15;
    uint64_t v16 = a1[5];
    uint64_t v27 = a3;
    uint64_t v17 = a1[2];
    uint64_t v18 = a1[3];
    uint64_t v25 = v14;
    uint64_t v26 = v17;
    v30[11] = v4;
    uint64_t v19 = a1[1];
    uint64_t v28 = *a1;
    v30[0] = v28;
    v30[1] = v19;
    v30[2] = v17;
    v30[3] = v18;
    v30[4] = v12 & 0x7FFFFFFFFFFFFFFFLL;
    v30[5] = v16;
    uint64_t v23 = v13;
    uint64_t v24 = v16;
    v30[6] = v15;
    v30[7] = v21;
    v30[8] = v13;
    v30[9] = v14;
    sub_1C003EFB0(v30, v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29(v11, v26, v18);
    sub_1C0033494();
    sub_1BFD217B8((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for FormatContent.Resolved);
  }
  else
  {
    *a4 = 0xF000000000000007;
  }
}

uint64_t type metadata accessor for FormatAnimationNodeDataLayoutAttributes()
{
  return __swift_instantiateGenericMetadata();
}

void sub_1C0033790(uint64_t a1, uint64_t a2)
{
  char v7 = *v2;
  v5[3] = type metadata accessor for FormatNodeBinderContext();
  v5[4] = &off_1F1C04838;
  v5[0] = a2;
  swift_retain();
  sub_1C003F530(v5, &v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  if (v3)
  {
    sub_1C151918C();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1C15191FC();
  }
}

uint64_t _s10CodingKeysOMa_90()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C0033870(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  char v21 = a1;
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  char v20 = a4;
  sub_1BFEFF7D8();
  uint64_t v10 = (uint64_t *)(v5 + *(int *)(v9 + 44));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = swift_allocObject();
  *(unsigned char *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = v12;
  *(void *)(v13 + 32) = v11;
  v16[2] = sub_1C08FE8A0;
  v16[3] = v13;
  swift_retain();
  char v14 = sub_1BFEFF114(a5, 0, 0, (uint64_t)sub_1C090A460, (uint64_t)v16);
  if (!v6 && (v14 & 1) != 0)
  {
    sub_1BFEFF3E8(0, &qword_1EB85E120, (uint64_t (*)(void))sub_1BFEB6A24, (uint64_t)&type metadata for FormatCodingKeys, MEMORY[0x1E4FBBDE0]);
    sub_1BFEFF8B4();
    sub_1BFFEEFC8();
    long long v17 = 0uLL;
    sub_1C1520BAC();
    long long v17 = xmmword_1C152C800;
    sub_1C003F33C();
    sub_1C1520BAC();
  }
  return swift_release();
}

uint64_t FormatTextNodeAlternativeLogic.bind(binder:context:)(uint64_t result, uint64_t a2)
{
  uint64_t v5 = result;
  switch(*v2 >> 62)
  {
    case 1:
      uint64_t v6 = *(void *)((*v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v8 = (unsigned char *)(v6 + 40);
        do
        {
          if ((*v8 & 1) == 0)
          {
            uint64_t v9 = *((void *)v8 - 1);
            swift_retain_n();
            FormatFloat.bind(binder:context:)(v5, a2);
            sub_1BFF49984(v9, 0);
            sub_1BFF49984(v9, 0);
            if (v3) {
              break;
            }
          }
          v8 += 16;
          --v7;
        }
        while (v7);
        return swift_bridgeObjectRelease_n();
      }
      return result;
    case 2:
      swift_retain();
      swift_retain_n();
      FormatTextNodeAlternativeLogic.bind(binder:context:)(v5, a2);
      if (v3) {
        goto LABEL_13;
      }
      goto LABEL_12;
    case 3:
      swift_retain();
      swift_retain_n();
      FormatTextNodeAlternativeLogic.bind(binder:context:)(v5, a2);
      if (!v3)
      {
LABEL_12:
        swift_release();
        swift_retain();
        FormatTextNodeAlternativeLogic.bind(binder:context:)(v5, a2);
      }
LABEL_13:
      swift_release();
      return swift_release_n();
    default:
      swift_retain_n();
      swift_bridgeObjectRetain();
      FormatTextNodeAlternativeLogic.bind(binder:context:)(v5, a2);
      swift_bridgeObjectRelease();
      return swift_release_n();
  }
}

uint64_t FormatEnumPropertyDefinition.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FormatVersionRequirement(0);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v91 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v90 = (char *)&v89 - v7;
  MEMORY[0x1F4188790](v8);
  unint64_t v92 = (char *)&v89 - v9;
  MEMORY[0x1F4188790](v10);
  char v93 = (char *)&v89 - v11;
  MEMORY[0x1F4188790](v12);
  unint64_t v94 = (char *)&v89 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v95 = (char *)&v89 - v15;
  MEMORY[0x1F4188790](v16);
  unint64_t v96 = (char *)&v89 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v97 = (char *)&v89 - v19;
  MEMORY[0x1F4188790](v20);
  uint64_t v98 = (void (*)(char *, uint64_t, uint64_t))((char *)&v89 - v21);
  MEMORY[0x1F4188790](v22);
  uint64_t v99 = (char *)&v89 - v23;
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v89 - v25;
  sub_1C0883EE0();
  MEMORY[0x1F4188790](v27 - 8);
  long long v29 = (char *)&v89 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = a1[3];
  uint64_t v31 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v30);
  uint64_t v32 = type metadata accessor for FormatEnumPropertyDefinition(0);
  sub_1C0883DB4();
  uint64_t v34 = v33;
  uint64_t v35 = sub_1C085F050(&qword_1EB8922D0, (void (*)(uint64_t))sub_1C0883DB4);
  uint64_t v89 = v32;
  sub_1BFEFBD78(v32, v36, v30, v32, v34, (uint64_t)&type metadata for FormatVersions.JazzkonC, v31, (uint64_t)v29, v35, (uint64_t)&off_1F1C39B68);
  uint64_t v37 = *v2;
  uint64_t v38 = v2[1];
  char v100 = v2;
  uint64_t v39 = qword_1EB882D28;
  swift_bridgeObjectRetain();
  if (v39 != -1) {
    swift_once();
  }
  uint64_t v40 = sub_1C151928C();
  uint64_t v41 = __swift_project_value_buffer(v40, (uint64_t)qword_1EB93CAB0);
  uint64_t v42 = *(void *)(v40 - 8);
  uint64_t v43 = *(void (**)(char *))(v42 + 16);
  uint64_t v44 = v42 + 16;
  uint64_t v101 = v41;
  v43(v26);
  uint64_t v45 = type metadata accessor for FormatVersionRequirement.Value(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v46 = v102;
  sub_1C06B123C(v37, v38, 0, 0, 0, (uint64_t)v26, (uint64_t)sub_1C01B158C, 0);
  if (v46)
  {
    sub_1BFEFEB68((uint64_t)v26, type metadata accessor for FormatVersionRequirement);
    swift_bridgeObjectRelease();
LABEL_6:
    uint64_t v50 = (uint64_t)v29;
    return sub_1BFEFEB68(v50, (uint64_t (*)(void))sub_1C0883EE0);
  }
  sub_1BFEFEB68((uint64_t)v26, type metadata accessor for FormatVersionRequirement);
  swift_bridgeObjectRelease();
  uint64_t v47 = (uint64_t)v99;
  uint64_t v48 = v100[2];
  uint64_t v49 = v100[3];
  ((void (*)(char *, uint64_t, uint64_t))v43)(v99, v101, v40);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  sub_1C06B123C(v48, v49, 1, 0, 0, v47, (uint64_t)sub_1C01B158C, 0);
  sub_1BFEFEB68(v47, type metadata accessor for FormatVersionRequirement);
  swift_bridgeObjectRelease();
  uint64_t v53 = v100[4];
  uint64_t v52 = v100[5];
  unint64_t v54 = v29;
  uint64_t v55 = (uint64_t)v98;
  ((void (*)(void, uint64_t, uint64_t))v43)(v98, v101, v40);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  uint64_t v56 = v53;
  uint64_t v57 = v54;
  sub_1C06B123C(v56, v52, 2, 0, 0, v55, (uint64_t)sub_1C01B158C, 0);
  sub_1BFEFEB68(v55, type metadata accessor for FormatVersionRequirement);
  swift_bridgeObjectRelease();
  uint64_t v58 = v44;
  uint64_t v59 = v100[6];
  uint64_t v60 = v100[7];
  uint64_t v61 = (uint64_t)v97;
  uint64_t v102 = v58;
  ((void (*)(char *, uint64_t, uint64_t))v43)(v97, v101, v40);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  uint64_t v62 = v57;
  sub_1C06F4BE0(v59, v60, 3, 0, 0, v61, (uint64_t)sub_1C01B158C, 0);
  sub_1BFEFEB68(v61, type metadata accessor for FormatVersionRequirement);
  swift_bridgeObjectRelease();
  uint64_t v63 = v100[8];
  uint64_t v64 = v100[9];
  uint64_t v65 = (uint64_t)v96;
  ((void (*)(char *, uint64_t, uint64_t))v43)(v96, v101, v40);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  sub_1C06B123C(v63, v64, 4, 0, 0, v65, (uint64_t)sub_1C01B158C, 0);
  sub_1BFEFEB68(v65, type metadata accessor for FormatVersionRequirement);
  swift_bridgeObjectRelease();
  LOBYTE(v63) = *((unsigned char *)v100 + 80);
  uint64_t v66 = (uint64_t)v95;
  ((void (*)(char *, uint64_t, uint64_t))v43)(v95, v101, v40);
  swift_storeEnumTagMultiPayload();
  sub_1C06B13D0(v63, 5, 0, 0, v66, (uint64_t)sub_1C01B158C, 0);
  sub_1BFEFEB68(v66, type metadata accessor for FormatVersionRequirement);
  uint64_t v67 = v100[11];
  uint64_t v68 = v100[12];
  uint64_t v69 = v43;
  uint64_t v70 = v100;
  uint64_t v98 = (void (*)(char *, uint64_t, uint64_t))v69;
  uint64_t v99 = v62;
  uint64_t v71 = (uint64_t)v94;
  ((void (*)(char *, uint64_t, uint64_t))v69)(v94, v101, v40);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  sub_1C06F4BE0(v67, v68, 6, 0, 0, v71, (uint64_t)sub_1C01B158C, 0);
  sub_1BFEFEB68(v71, type metadata accessor for FormatVersionRequirement);
  long long v29 = v99;
  swift_bridgeObjectRelease();
  uint64_t v72 = (uint64_t)v93;
  v98(v93, v101, v40);
  swift_storeEnumTagMultiPayload();
  uint64_t v73 = swift_bridgeObjectRetain();
  sub_1C06B1564(v73, 7, 0, 0, v72, (uint64_t)sub_1C01B158C, 0);
  sub_1BFEFEB68(v72, type metadata accessor for FormatVersionRequirement);
  swift_bridgeObjectRelease();
  uint64_t v97 = 0;
  uint64_t v101 = v45;
  uint64_t v74 = v98;
  int v75 = *((unsigned __int8 *)v70 + 112);
  if (qword_1EB887638 != -1) {
    swift_once();
  }
  uint64_t v76 = __swift_project_value_buffer(v40, (uint64_t)qword_1EB93CA98);
  uint64_t v77 = (uint64_t)v92;
  uint64_t v78 = v74;
  v74(v92, v76, v40);
  swift_storeEnumTagMultiPayload();
  if (v75)
  {
    uint64_t v79 = v97;
    char v80 = sub_1C08301F8(v77, 8, 0, 0, (uint64_t)sub_1C01B158C, 0);
    if (v79)
    {
LABEL_8:
      sub_1BFEFEB68(v77, type metadata accessor for FormatVersionRequirement);
      goto LABEL_6;
    }
    uint64_t v97 = 0;
    if (v80)
    {
      long long v103 = xmmword_1C1558010;
      char v104 = 0;
      char v105 = 1;
      sub_1C0883F74();
      sub_1C085F050(&qword_1EB86E950, (void (*)(uint64_t))sub_1C0883F74);
      uint64_t v81 = v97;
      sub_1C1520BAC();
      uint64_t v97 = v81;
      if (v81)
      {
        long long v29 = v99;
        uint64_t v77 = (uint64_t)v92;
        goto LABEL_8;
      }
    }
    uint64_t v70 = v100;
    uint64_t v77 = (uint64_t)v92;
    uint64_t v78 = v74;
  }
  sub_1BFEFEB68(v77, type metadata accessor for FormatVersionRequirement);
  uint64_t v82 = qword_1EB887628;
  swift_bridgeObjectRetain();
  if (v82 != -1) {
    swift_once();
  }
  uint64_t v83 = __swift_project_value_buffer(v40, (uint64_t)qword_1EB93CA68);
  uint64_t v84 = (uint64_t)v90;
  v78(v90, v83, v40);
  swift_storeEnumTagMultiPayload();
  sub_1BFEFEB68(v84, type metadata accessor for FormatVersionRequirement);
  swift_bridgeObjectRelease();
  uint64_t v85 = (uint64_t)v70 + *(int *)(v89 + 56);
  uint64_t v86 = (uint64_t)v91;
  v78(v91, v83, v40);
  swift_storeEnumTagMultiPayload();
  uint64_t v87 = v85;
  uint64_t v88 = v99;
  sub_1C06F4E28(v87, 10, 0, 0, v86, (uint64_t)sub_1C01B158C, 0);
  sub_1BFEFEB68(v86, type metadata accessor for FormatVersionRequirement);
  uint64_t v50 = (uint64_t)v88;
  return sub_1BFEFEB68(v50, (uint64_t (*)(void))sub_1C0883EE0);
}

unint64_t sub_1C0034860()
{
  unint64_t result = qword_1EB88CEE8;
  if (!qword_1EB88CEE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88CEE8);
  }
  return result;
}

uint64_t FormatEnumPropertyDefinition.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  sub_1BFE309D0(0, (unint64_t *)&qword_1EB884FE0, MEMORY[0x1E4FAAFC8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v72 = &v55[-v4];
  sub_1BFF8796C();
  uint64_t v6 = v5;
  uint64_t v71 = *((void *)v5 - 1);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v55[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1C0883D20();
  uint64_t v10 = v9;
  uint64_t v74 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = &v55[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C0883DB4();
  sub_1C085F050(&qword_1EB8922D0, (void (*)(uint64_t))sub_1C0883DB4);
  uint64_t v13 = v75;
  sub_1C1520EBC();
  uint64_t v14 = v13;
  if (v13)
  {
LABEL_10:
    sub_1C0038728(a1, (uint64_t)v14);
    swift_willThrow();

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v70 = v8;
  int v75 = v6;
  uint64_t v15 = v73;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v16 = sub_1C1520EAC();
  char v17 = Dictionary<>.errorOnUnknownKeys.getter(v16);
  swift_bridgeObjectRelease();
  uint64_t v18 = v12;
  if (v17)
  {
    uint64_t v19 = sub_1C152070C();
    uint64_t v20 = *(void *)(v19 + 16);
    if (v20)
    {
      uint64_t v21 = (unsigned char *)(v19 + 48);
      while (*v21 != 1)
      {
        v21 += 24;
        if (!--v20) {
          goto LABEL_7;
        }
      }
      uint64_t v26 = a1;
      uint64_t v28 = *((void *)v21 - 2);
      uint64_t v27 = *((void *)v21 - 1);
      swift_bridgeObjectRetain_n();
      uint64_t v29 = swift_bridgeObjectRelease();
      MEMORY[0x1F4188790](v29);
      *(void *)&v55[-32] = &_s10CodingKeysON_148;
      *(void *)&v55[-24] = sub_1C0883E38();
      *(void *)&v55[-16] = sub_1C0034860();
      *(void *)&v55[-8] = sub_1C0883E8C();
      swift_getKeyPath();
      swift_retain();
      uint64_t v30 = sub_1C085FB14((uint64_t)&unk_1F1B6BF98);
      swift_release_n();
      sub_1C02570B4();
      uint64_t v14 = (void *)swift_allocError();
      *(void *)uint64_t v31 = v28;
      *(void *)(v31 + 8) = v27;
      *(void *)(v31 + 16) = v30;
      *(_OWORD *)(v31 + 24) = xmmword_1C15363B0;
      swift_willThrow();
      uint64_t v32 = v28;
      a1 = v26;
      sub_1BFE94AD4(v32, v27, 1);
      (*(void (**)(unsigned char *, uint64_t))(v74 + 8))(v12, v10);
      goto LABEL_10;
    }
LABEL_7:
    swift_bridgeObjectRelease();
  }
  long long v78 = 0uLL;
  char v79 = 0;
  uint64_t v22 = sub_1C152069C();
  uint64_t v24 = v23;
  long long v78 = xmmword_1C153AB20;
  char v79 = 0;
  uint64_t v25 = sub_1C152069C();
  uint64_t v34 = v33;
  uint64_t v69 = v25;
  long long v78 = xmmword_1C1557FA0;
  char v79 = 0;
  uint64_t v66 = sub_1C152069C();
  uint64_t v67 = v22;
  uint64_t v68 = v35;
  long long v78 = xmmword_1C1557FB0;
  char v79 = 0;
  uint64_t v36 = sub_1C152060C();
  uint64_t v39 = v38;
  uint64_t v65 = v36;
  long long v78 = xmmword_1C1557FD0;
  char v79 = 0;
  uint64_t v63 = sub_1C152069C();
  uint64_t v64 = v40;
  long long v78 = xmmword_1C1557FC0;
  char v79 = 0;
  int v80 = sub_1C15206AC();
  long long v78 = xmmword_1C1557FE0;
  char v79 = 0;
  uint64_t v60 = sub_1C152060C();
  uint64_t v61 = v41;
  uint64_t v62 = v39;
  sub_1BFE9DEBC(0, &qword_1EB879E60, (uint64_t)&type metadata for FormatTypeDefinition.Case, MEMORY[0x1E4FBB320]);
  long long v78 = xmmword_1C1557FF0;
  char v79 = 0;
  sub_1BFD983F4();
  sub_1C15206EC();
  uint64_t v58 = v76;
  long long v57 = xmmword_1C1558010;
  long long v78 = xmmword_1C1558010;
  char v79 = 0;
  char v42 = sub_1C152071C();
  uint64_t v59 = a1;
  if (v42)
  {
    uint64_t v43 = v34;
    uint64_t v44 = v24;
    long long v76 = v57;
    char v77 = 0;
    sub_1C15206EC();
    int v56 = v81;
  }
  else
  {
    int v56 = 0;
    uint64_t v43 = v34;
    uint64_t v44 = v24;
  }
  long long v57 = xmmword_1C1558020;
  long long v78 = xmmword_1C1558020;
  char v79 = 0;
  if (sub_1C152071C())
  {
    long long v76 = v57;
    char v77 = 0;
    sub_1C085F050(qword_1EB893208, (void (*)(uint64_t))sub_1BFF8796C);
    uint64_t v45 = v10;
    uint64_t v46 = v18;
    sub_1C15206EC();
    uint64_t v47 = v75;
    uint64_t v48 = v70;
    uint64_t v49 = sub_1C1517E5C();
    (*(void (**)(unsigned char *, void *))(v71 + 8))(v48, v47);
  }
  else
  {
    uint64_t v46 = v18;
    uint64_t v45 = v10;
    uint64_t v49 = MEMORY[0x1E4FBC870];
  }
  sub_1C1518CDC();
  long long v78 = xmmword_1C1558030;
  char v79 = 0;
  sub_1C085F050(&qword_1EB884FD8, MEMORY[0x1E4FAAFC8]);
  sub_1C152065C();
  (*(void (**)(unsigned char *, uint64_t))(v74 + 8))(v46, v45);
  uint64_t v50 = type metadata accessor for FormatEnumPropertyDefinition(0);
  sub_1BFE30878((uint64_t)v72, v15 + *(int *)(v50 + 56), (unint64_t *)&qword_1EB884FE0, MEMORY[0x1E4FAAFC8]);
  *(void *)uint64_t v15 = v67;
  *(void *)(v15 + 8) = v44;
  *(void *)(v15 + 16) = v69;
  *(void *)(v15 + 24) = v43;
  uint64_t v51 = v68;
  *(void *)(v15 + 32) = v66;
  *(void *)(v15 + 40) = v51;
  uint64_t v52 = v62;
  *(void *)(v15 + 48) = v65;
  *(void *)(v15 + 56) = v52;
  uint64_t v53 = v64;
  *(void *)(v15 + 64) = v63;
  *(void *)(v15 + 72) = v53;
  *(unsigned char *)(v15 + 80) = v80 & 1;
  uint64_t v54 = v61;
  *(void *)(v15 + 88) = v60;
  *(void *)(v15 + 96) = v54;
  *(void *)(v15 + 104) = v58;
  *(unsigned char *)(v15 + 112) = v56;
  *(void *)(v15 + 120) = v49;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
}

uint64_t sub_1C00353A0()
{
  return sub_1C00353A8();
}

uint64_t sub_1C00353A8()
{
  uint64_t v0 = sub_1C15159AC();
  MEMORY[0x1F4188790](v0);
  sub_1C151598C();
  sub_1BFF6767C(&qword_1EA19CAB0, MEMORY[0x1E4F27270]);
  return sub_1C151E8CC();
}

void sub_1C003546C(unint64_t *a1, uint64_t a2)
{
  long long v6 = *(_OWORD *)(a2 + 80);
  v15[4] = *(_OWORD *)(a2 + 64);
  v15[5] = v6;
  uint64_t v16 = *(void *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  v15[2] = *(_OWORD *)(a2 + 32);
  v15[3] = v8;
  uint64_t v9 = v2[4];
  unint64_t v10 = v2[6];
  unint64_t v17 = v2[2];
  sub_1BFF0D1B8(a1, a2);
  if (!v3)
  {
    uint64_t v11 = *(void *)(v9 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain_n();
      for (uint64_t i = 0; i != v11; ++i)
      {
        unint64_t v17 = *(void *)(v9 + 8 * i + 32);
        sub_1BFF32264(v17);
        sub_1BFF0D378((uint64_t)a1, a2);
        sub_1BFF31E90(v17);
      }
      swift_bridgeObjectRelease_n();
    }
    if (v10 >> 62 == 1)
    {
      unint64_t v13 = *(void *)((v10 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v14 = *(void *)((v10 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      sub_1BFE6FA30(v13);
      swift_bridgeObjectRetain();
      sub_1C1144E0C((uint64_t)a1, (uint64_t)v15, v13, v14);
      sub_1BFF0056C(v13);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t FormatImageNodeRequestPath.bind(binder:context:)(uint64_t a1, uint64_t a2)
{
  return sub_1BFCD9ED0(a1, a2);
}

uint64_t type metadata accessor for FormatDataLayoutAttributes()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for FormatSlotItemCountLimit(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = a1 + *(int *)(type metadata accessor for FormatSlotDefinition() + 40);
    uint64_t v4 = sub_1C1518CDC();
    uint64_t v6 = *(void *)(v4 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v4);
    if (!result)
    {
      uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
      return v5(v3, v4);
    }
  }
  return result;
}

uint64_t sub_1C0035708(uint64_t a1)
{
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 64) == 1)
  {
    char v3 = *(unsigned char *)(a1 + 64);
    uint64_t v4 = a1;
  }
  else
  {
    char v3 = 0;
    uint64_t v4 = v1;
  }
  uint64_t v126 = *(void *)(v1 + 32);
  uint64_t v127 = *(void *)(v1 + 16);
  uint64_t v129 = *(void *)(v1 + 40);
  uint64_t v130 = *(void *)(v1 + 24);
  uint64_t v124 = *(void *)(v4 + 48);
  uint64_t v125 = *(void *)(v4 + 56);
  swift_beginAccess();
  uint64_t v128 = *(void *)(v1 + 72);
  if (!v128)
  {
    swift_beginAccess();
    uint64_t v128 = *(void *)(a1 + 72);
    swift_bridgeObjectRetain();
  }
  if (*(unsigned __int8 *)(v1 + 84) == 255) {
    unint64_t v123 = *(unsigned int *)(a1 + 80) | ((unint64_t)*(unsigned __int8 *)(a1 + 84) << 32);
  }
  else {
    unint64_t v123 = *(unsigned int *)(v1 + 80) | ((unint64_t)*(unsigned __int8 *)(v1 + 84) << 32);
  }
  swift_beginAccess();
  uint64_t v5 = *(void *)(v1 + 88);
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  uint64_t v155 = (void *)MEMORY[0x1E4FBC868];
  int64_t v9 = *(void *)(v7 + 16);
  int64_t v10 = *(void *)(v6 + 16);
  if (__OFADD__(v9, v10)) {
    goto LABEL_87;
  }
  char v122 = v3;
  sub_1C003644C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v139 = v8;
  swift_bridgeObjectRetain();
  sub_1C151E3AC();
  unint64_t v151 = sub_1BFEF692C(0, v9, 0, MEMORY[0x1E4FBC860]);
  uint64_t v11 = *(void *)(v7 + 16);
  uint64_t v138 = v7;
  if (!v11) {
    goto LABEL_26;
  }
  int64_t v140 = v10;
  swift_bridgeObjectRetain();
  uint64_t v12 = 0;
  do
  {
    uint64_t v14 = *(void *)(v7 + v12 + 32);
    uint64_t v13 = *(void *)(v7 + v12 + 40);
    uint64_t v143 = v11;
    uint64_t v146 = *(void *)(v7 + v12 + 48);
    uint64_t v149 = *(void *)(v7 + v12 + 56);
    char v152 = *(unsigned char *)(v7 + v12 + 64);
    uint64_t v15 = *(void *)(v7 + v12 + 72);
    uint64_t v16 = *(unsigned __int8 *)(v7 + v12 + 84);
    uint64_t v17 = *(unsigned int *)(v7 + v12 + 80);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v20 = sub_1BFEF2D8C(v14, v13);
    uint64_t v21 = v155[2];
    BOOL v22 = (v19 & 1) == 0;
    uint64_t v23 = v21 + v22;
    if (__OFADD__(v21, v22))
    {
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      uint64_t result = sub_1C1520CFC();
      __break(1u);
      return result;
    }
    char v24 = v19;
    if (v155[3] >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1C10723B4();
      }
    }
    else
    {
      sub_1C10609E4(v23, isUniquelyReferenced_nonNull_native);
      unint64_t v25 = sub_1BFEF2D8C(v14, v13);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_88;
      }
      unint64_t v20 = v25;
    }
    uint64_t v27 = v17 | (v16 << 32);
    if (v24)
    {
      uint64_t v28 = v155[7] + 56 * v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v28 = v14;
      *(void *)(v28 + 8) = v13;
      *(void *)(v28 + 16) = v146;
      *(void *)(v28 + 24) = v149;
      *(unsigned char *)(v28 + 32) = v152;
      *(void *)(v28 + 40) = v15;
      *(unsigned char *)(v28 + 52) = BYTE4(v27);
      *(_DWORD *)(v28 + 48) = v17;
    }
    else
    {
      v155[(v20 >> 6) + 8] |= 1 << v20;
      uint64_t v29 = (uint64_t *)(v155[6] + 16 * v20);
      *uint64_t v29 = v14;
      v29[1] = v13;
      uint64_t v30 = v155[7] + 56 * v20;
      *(void *)uint64_t v30 = v14;
      *(void *)(v30 + 8) = v13;
      *(void *)(v30 + 16) = v146;
      *(void *)(v30 + 24) = v149;
      *(unsigned char *)(v30 + 32) = v152;
      *(void *)(v30 + 40) = v15;
      *(unsigned char *)(v30 + 52) = BYTE4(v27);
      *(_DWORD *)(v30 + 48) = v17;
      uint64_t v31 = v155[2];
      BOOL v32 = __OFADD__(v31, 1);
      uint64_t v33 = v31 + 1;
      if (v32) {
        goto LABEL_83;
      }
      v155[2] = v33;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v34 = v151[2];
    unint64_t v35 = v151[3];
    swift_bridgeObjectRetain();
    if (v34 >= v35 >> 1) {
      unint64_t v151 = sub_1BFEF692C((void *)(v35 > 1), v34 + 1, 1, v151);
    }
    v151[2] = v34 + 1;
    uint64_t v36 = &v151[2 * v34];
    v36[4] = v14;
    v36[5] = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 += 56;
    --v11;
    uint64_t v7 = v138;
  }
  while (v143 != 1);
  swift_bridgeObjectRelease();
  int64_t v10 = v140;
LABEL_26:
  uint64_t v37 = sub_1BFEF692C(0, v10, 0, MEMORY[0x1E4FBC860]);
  uint64_t v38 = *(void *)(v139 + 16);
  if (!v38) {
    goto LABEL_67;
  }
  uint64_t v39 = swift_bridgeObjectRetain();
  uint64_t v40 = 0;
  while (2)
  {
    unint64_t v150 = v37;
    uint64_t v42 = *(void *)(v39 + v40 + 32);
    uint64_t v43 = *(void *)(v39 + v40 + 40);
    uint64_t v44 = *(void *)(v39 + v40 + 48);
    uint64_t v45 = *(void *)(v39 + v40 + 56);
    char v46 = *(unsigned char *)(v39 + v40 + 64);
    unint64_t v147 = *(unsigned int *)(v39 + v40 + 80) | ((unint64_t)*(unsigned __int8 *)(v39 + v40 + 84) << 32);
    uint64_t v47 = v155[2];
    uint64_t v153 = *(void *)(v39 + v40 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v144 = v40;
    if (!v47) {
      goto LABEL_48;
    }
    swift_bridgeObjectRetain();
    unint64_t v48 = sub_1BFEF2D8C(v42, v43);
    if ((v49 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_48:
      uint64_t v142 = v44;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      char v72 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v73 = v42;
      char v74 = v72;
      uint64_t v75 = v73;
      unint64_t v77 = sub_1BFEF2D8C(v73, v43);
      uint64_t v78 = v155[2];
      BOOL v79 = (v76 & 1) == 0;
      uint64_t v80 = v78 + v79;
      if (__OFADD__(v78, v79)) {
        goto LABEL_82;
      }
      char v81 = v76;
      uint64_t v82 = v38;
      if (v155[3] >= v80)
      {
        unint64_t v86 = v147;
        char v85 = v46;
        if ((v74 & 1) == 0)
        {
          sub_1C10723B4();
          unint64_t v86 = v147;
        }
      }
      else
      {
        sub_1C10609E4(v80, v74);
        unint64_t v83 = sub_1BFEF2D8C(v75, v43);
        if ((v81 & 1) != (v84 & 1)) {
          goto LABEL_88;
        }
        unint64_t v77 = v83;
        char v85 = v46;
        unint64_t v86 = v147;
      }
      unint64_t v87 = HIDWORD(v86);
      if (v81)
      {
        uint64_t v88 = v155[7] + 56 * v77;
        int v89 = v86;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v88 = v75;
        *(void *)(v88 + 8) = v43;
        *(void *)(v88 + 16) = v142;
        *(void *)(v88 + 24) = v45;
        *(unsigned char *)(v88 + 32) = v85;
        *(void *)(v88 + 40) = v153;
        *(unsigned char *)(v88 + 52) = v87;
        *(_DWORD *)(v88 + 48) = v89;
      }
      else
      {
        v155[(v77 >> 6) + 8] |= 1 << v77;
        uint64_t v90 = (uint64_t *)(v155[6] + 16 * v77);
        *uint64_t v90 = v75;
        v90[1] = v43;
        uint64_t v91 = v155[7] + 56 * v77;
        *(void *)uint64_t v91 = v75;
        *(void *)(v91 + 8) = v43;
        *(void *)(v91 + 16) = v142;
        *(void *)(v91 + 24) = v45;
        *(unsigned char *)(v91 + 32) = v85;
        *(void *)(v91 + 40) = v153;
        *(unsigned char *)(v91 + 52) = BYTE4(v86);
        *(_DWORD *)(v91 + 48) = v86;
        uint64_t v92 = v155[2];
        BOOL v32 = __OFADD__(v92, 1);
        uint64_t v93 = v92 + 1;
        if (v32) {
          goto LABEL_84;
        }
        v155[2] = v93;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = v150;
      unint64_t v94 = v150[2];
      unint64_t v95 = v150[3];
      swift_bridgeObjectRetain();
      uint64_t v71 = v82;
      if (v94 >= v95 >> 1) {
        uint64_t v37 = sub_1BFEF692C((void *)(v95 > 1), v94 + 1, 1, v150);
      }
      uint64_t v96 = v144;
      v37[2] = v94 + 1;
      uint64_t v97 = &v37[2 * v94];
      v97[4] = v75;
      v97[5] = v43;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v39 = v139;
      goto LABEL_30;
    }
    uint64_t v135 = v38;
    char v132 = v46;
    uint64_t v50 = v155[7] + 56 * v48;
    uint64_t v51 = *(void *)(v50 + 8);
    uint64_t v141 = *(void *)v50;
    uint64_t v52 = *(void *)(v50 + 16);
    uint64_t v53 = *(void *)(v50 + 24);
    int v54 = *(unsigned __int8 *)(v50 + 32);
    uint64_t v55 = v45;
    uint64_t v56 = *(void *)(v50 + 40);
    uint64_t v136 = *(unsigned __int8 *)(v50 + 52);
    uint64_t v57 = *(unsigned int *)(v50 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    char v131 = v54;
    if (v54) {
      uint64_t v58 = v44;
    }
    else {
      uint64_t v58 = v52;
    }
    uint64_t v134 = v58;
    if (!v54) {
      uint64_t v55 = v53;
    }
    uint64_t v59 = v56;
    if (!v56) {
      uint64_t v59 = swift_bridgeObjectRetain();
    }
    uint64_t v133 = v59;
    if ((v57 | (unint64_t)(v136 << 32)) >> 32 <= 0xFE) {
      unint64_t v60 = v57 | (v136 << 32);
    }
    else {
      unint64_t v60 = v147;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    char v61 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v63 = sub_1BFEF2D8C(v141, v51);
    uint64_t v64 = v155[2];
    BOOL v65 = (v62 & 1) == 0;
    uint64_t v66 = v64 + v65;
    if (__OFADD__(v64, v65)) {
      goto LABEL_85;
    }
    char v67 = v62;
    uint64_t v68 = v51;
    uint64_t v137 = v55;
    if (v155[3] >= v66)
    {
      uint64_t v71 = v135;
      if ((v61 & 1) == 0) {
        sub_1C10723B4();
      }
    }
    else
    {
      sub_1C10609E4(v66, v61);
      unint64_t v69 = sub_1BFEF2D8C(v141, v51);
      uint64_t v71 = v135;
      if ((v67 & 1) != (v70 & 1)) {
        goto LABEL_88;
      }
      unint64_t v63 = v69;
    }
    uint64_t v96 = v144;
    char v98 = v131 & v132;
    if (v67)
    {
      uint64_t v41 = v155[7] + 56 * v63;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v41 = v141;
      *(void *)(v41 + 8) = v68;
      *(void *)(v41 + 16) = v134;
      *(void *)(v41 + 24) = v137;
      *(unsigned char *)(v41 + 32) = v98;
      *(void *)(v41 + 40) = v133;
      *(unsigned char *)(v41 + 52) = BYTE4(v60);
      *(_DWORD *)(v41 + 48) = v60;
    }
    else
    {
      v155[(v63 >> 6) + 8] |= 1 << v63;
      uint64_t v99 = (uint64_t *)(v155[6] + 16 * v63);
      *uint64_t v99 = v141;
      v99[1] = v68;
      uint64_t v100 = v155[7] + 56 * v63;
      *(void *)uint64_t v100 = v141;
      *(void *)(v100 + 8) = v68;
      *(void *)(v100 + 16) = v134;
      *(void *)(v100 + 24) = v137;
      *(unsigned char *)(v100 + 32) = v98;
      *(void *)(v100 + 40) = v133;
      *(unsigned char *)(v100 + 52) = BYTE4(v60);
      *(_DWORD *)(v100 + 48) = v60;
      uint64_t v101 = v155[2];
      BOOL v32 = __OFADD__(v101, 1);
      uint64_t v102 = v101 + 1;
      if (v32) {
        goto LABEL_86;
      }
      v155[2] = v102;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v39 = v139;
    uint64_t v37 = v150;
LABEL_30:
    uint64_t v40 = v96 + 56;
    uint64_t v38 = v71 - 1;
    if (v38) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
LABEL_67:
  swift_bridgeObjectRetain();
  uint64_t v103 = swift_bridgeObjectRetain();
  sub_1BFEF6AA0(v103);
  uint64_t v104 = v37[2];
  if (v104)
  {
    swift_bridgeObjectRetain();
    char v105 = v37 + 5;
    uint64_t v106 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if (v155[2])
      {
        uint64_t v107 = *(v105 - 1);
        uint64_t v108 = *v105;
        swift_bridgeObjectRetain_n();
        unint64_t v109 = sub_1BFEF2D8C(v107, v108);
        if (v110)
        {
          uint64_t v111 = v155[7] + 56 * v109;
          uint64_t v112 = *(void *)(v111 + 8);
          uint64_t v154 = *(void *)v111;
          uint64_t v113 = *(void *)(v111 + 16);
          uint64_t v148 = *(void *)(v111 + 24);
          char v145 = *(unsigned char *)(v111 + 32);
          uint64_t v114 = *(void *)(v111 + 40);
          uint64_t v115 = *(unsigned __int8 *)(v111 + 52);
          uint64_t v116 = *(unsigned int *)(v111 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease_n();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v106 = sub_1C0036304(0, v106[2] + 1, 1, v106);
          }
          unint64_t v118 = v106[2];
          unint64_t v117 = v106[3];
          if (v118 >= v117 >> 1) {
            uint64_t v106 = sub_1C0036304((void *)(v117 > 1), v118 + 1, 1, v106);
          }
          v106[2] = v118 + 1;
          char v119 = &v106[7 * v118];
          v119[4] = v154;
          v119[5] = v112;
          v119[6] = v113;
          v119[7] = v148;
          *((unsigned char *)v119 + 64) = v145;
          v119[9] = v114;
          *((unsigned char *)v119 + 84) = (v116 | (unint64_t)(v115 << 32)) >> 32;
          *((_DWORD *)v119 + 20) = v116;
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
      v105 += 2;
      --v104;
    }
    while (v104);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v106 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v120 = swift_allocObject();
  *(void *)(v120 + 72) = 0;
  swift_beginAccess();
  *(void *)(v120 + 16) = v127;
  *(void *)(v120 + 24) = v130;
  *(void *)(v120 + 32) = v126;
  *(void *)(v120 + 40) = v129;
  *(void *)(v120 + 48) = v124;
  *(void *)(v120 + 56) = v125;
  *(unsigned char *)(v120 + 64) = v122;
  swift_beginAccess();
  *(void *)(v120 + 72) = v128;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v120 + 84) = BYTE4(v123);
  *(_DWORD *)(v120 + 80) = v123;
  swift_beginAccess();
  *(void *)(v120 + 88) = v106;
  return v120;
}

void *sub_1C0036304(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1BFE9DFF4(0, &qword_1EB860E90, (uint64_t)&type metadata for FormatAnimationNodeStyle.Selector, MEMORY[0x1E4FBBE00]);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1C003143C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void sub_1C003644C()
{
  if (!qword_1EB85F1E8)
  {
    sub_1C008192C();
    unint64_t v0 = sub_1C151E41C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB85F1E8);
    }
  }
}

id sub_1C00364B0(id result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  switch(a9)
  {
    case 2:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return (id)sub_1BFDB3920(a7);
    case 1:
      return result;
    case 0:
      return (id)sub_1BFF046A0((uint64_t)result, a2, a3);
  }
  return result;
}

void sub_1C0036570(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  switch(a9)
  {
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BFDB3960(a7);
      break;
    case 1:

      break;
    case 0:
      sub_1BFF04738((uint64_t)a1, a2, a3);
      break;
  }
}

unint64_t sub_1C0036630()
{
  unint64_t result = qword_1EB88AD00;
  if (!qword_1EB88AD00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AD00);
  }
  return result;
}

unint64_t FormatSyncImageContent.bind(binder:context:)(unint64_t result, uint64_t a2)
{
  uint64_t v5 = result;
  uint64_t v6 = *v2;
  unint64_t v7 = (unint64_t)*v2 >> 62;
  if (v7)
  {
    uint64_t v8 = v6 & 0x3FFFFFFFFFFFFFFFLL;
    if (v7 == 1)
    {
      int v9 = *(unsigned __int8 *)(v8 + 64);
      if (v9 != 255)
      {
        uint64_t v21 = *(void *)(v8 + 48);
        uint64_t v22 = *(void *)(v8 + 56);
        sub_1BFF9A030(v21, v22, v9);
        FormatBundleImageSize.bind(binder:context:)(v5, a2);
        return sub_1BFF9A01C(v21, v22, v9);
      }
    }
    else
    {
      uint64_t v17 = *(void *)(v8 + 24);
      swift_retain_n();
      swift_bridgeObjectRetain();
      FormatSyncImageContent.bind(binder:context:)(v5, a2);
      if (v3)
      {
        swift_bridgeObjectRelease();
        return swift_release_n();
      }
      else
      {
        swift_release();
        swift_bridgeObjectRetain();
        sub_1C04EE524(v5, a2, v17);
        swift_release();
        return swift_bridgeObjectRelease_n();
      }
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v6 + 48);
    uint64_t v11 = *(void *)(v6 + 56);
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void *)(v6 + 88);
    uint64_t v14 = *(void *)(v6 + 96);
    char v15 = *(unsigned char *)(v6 + 104);
    unint64_t v16 = *(void *)(v6 + 112);
    unsigned int v18 = *(unsigned __int16 *)(v6 + 64);
    uint64_t v20 = *(void *)(v6 + 16);
    uint64_t v23 = *(void *)(v6 + 24);
    uint64_t v19 = *(void *)(v6 + 32);
    char v24 = *(unsigned char *)(v6 + 40);
    sub_1BFDEB94C(v20, v23, v19, v24);
    sub_1BFF62358(v10, v11, v18);
    sub_1BFDEB8B4(v12);
    sub_1BFE94AB4(v13, v14, v15);
    sub_1C00F5B0C(v16);
    FormatSymbolImage.bind(binder:context:)(v5, a2);
    sub_1BFDEB9E0(v20, v23, v19, v24);
    sub_1BFF6179C(v10, v11, v18);
    sub_1BFDEB900(v12);
    sub_1BFE94AD4(v13, v14, v15);
    return sub_1C00F5B20(v16);
  }
  return result;
}

void sub_1C00368D0(unint64_t *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  long long v7 = *(_OWORD *)(a2 + 80);
  v27[4] = *(_OWORD *)(a2 + 64);
  v27[5] = v7;
  uint64_t v28 = *(void *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 16);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v8;
  long long v9 = *(_OWORD *)(a2 + 48);
  v27[2] = *(_OWORD *)(a2 + 32);
  v27[3] = v9;
  sub_1BFF0D1B8(a1, a2);
  if (!v3)
  {
    swift_beginAccess();
    uint64_t v10 = v2[6];
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain_n();
      for (uint64_t i = 0; i != v11; ++i)
      {
        unint64_t v13 = *(void *)(v10 + 8 * i + 32);
        sub_1BFF32264(v13);
        sub_1BFF0D378((uint64_t)a1, a2);
        sub_1BFF31E90(v13);
      }
      swift_bridgeObjectRelease_n();
    }
    if (v2[7]) {
      sub_1C001BF30((uint64_t)a1, a2, (void (*)(uint64_t, _OWORD *, uint64_t))sub_1C001C168);
    }
    uint64_t v14 = v2[8];
    if (v14)
    {
      swift_beginAccess();
      uint64_t v15 = *(void *)(v14 + 72);
      if (v15)
      {
        swift_bridgeObjectRetain();
        sub_1C0000E48((uint64_t)a1, (uint64_t)v27, v15);
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      uint64_t v16 = *(void *)(v14 + 88);
      uint64_t v17 = *(void *)(v16 + 16);
      if (v17)
      {
        swift_bridgeObjectRetain_n();
        unsigned int v18 = (uint64_t *)(v16 + 72);
        do
        {
          uint64_t v19 = *v18;
          if (*v18)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1C0000E48((uint64_t)a1, (uint64_t)v27, v19);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v18 += 7;
          --v17;
        }
        while (v17);
        swift_bridgeObjectRelease_n();
      }
    }
    uint64_t v20 = v4[9];
    if ((v20 & 0x8000000000000000) == 0)
    {
      uint64_t v22 = *(void *)(v20 + 16);
      uint64_t v21 = *(void *)(v20 + 24);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1C00389F8((uint64_t)a1, (uint64_t)v27, v22, v21);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    sub_1BFF5B7F4(a1, (uint64_t)v27);
    if (v4[11]) {
      sub_1BFF42EB8((unint64_t)a1, (uint64_t)v27);
    }
    if (v4[14] != 1) {
      sub_1C0036C8C(a1, (uint64_t *)v27);
    }
    swift_beginAccess();
    unint64_t v23 = v4[24];
    if (v23 >> 62 == 1)
    {
      uint64_t v24 = v23 & 0x3FFFFFFFFFFFFFFFLL;
      unint64_t v25 = *(void *)(v24 + 16);
      uint64_t v26 = *(void *)(v24 + 24);
      sub_1BFE6FA30(v25);
      swift_bridgeObjectRetain();
      sub_1C1144E0C((uint64_t)a1, (uint64_t)v27, v25, v26);
      sub_1BFF0056C(v25);
      swift_bridgeObjectRelease();
    }
  }
}

void sub_1C0036C8C(unint64_t *a1, uint64_t *a2)
{
  char v4 = *((unsigned char *)a2 + 8);
  char v5 = *((unsigned char *)a2 + 9);
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v12 = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = *v2;
  uint64_t v25 = v2[2];
  uint64_t v26 = *a2;
  uint64_t v40 = v17;
  uint64_t v23 = v26;
  char v21 = v5;
  char v22 = v4;
  char v27 = v4;
  char v28 = v5;
  uint64_t v19 = v7;
  uint64_t v20 = v6;
  uint64_t v29 = v6;
  uint64_t v30 = v7;
  uint64_t v18 = v8;
  uint64_t v31 = v8;
  uint64_t v32 = v9;
  uint64_t v33 = v11;
  uint64_t v34 = v10;
  uint64_t v35 = v12;
  uint64_t v36 = v13;
  uint64_t v37 = v14;
  uint64_t v38 = v15;
  uint64_t v39 = v16;
  sub_1BFF5B7F4(a1, (uint64_t)&v26);
  if (!v3)
  {
    if (v25)
    {
      uint64_t v26 = v23;
      char v27 = v22;
      char v28 = v21;
      uint64_t v29 = v20;
      uint64_t v30 = v19;
      uint64_t v31 = v18;
      uint64_t v32 = v9;
      uint64_t v33 = v11;
      uint64_t v34 = v10;
      uint64_t v35 = v12;
      uint64_t v36 = v13;
      uint64_t v37 = v14;
      uint64_t v38 = v15;
      uint64_t v39 = v16;
      sub_1BFF42EB8((unint64_t)a1, (uint64_t)&v26);
    }
  }
}

uint64_t type metadata accessor for FormatNodeBindingItem()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C0036DBC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  char v74 = a2;
  sub_1C0038168(0, (unint64_t *)&qword_1EB8741D8, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v72 - v6;
  sub_1C0037C88();
  uint64_t v79 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v108 = (uint64_t)v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v72 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v72 - v15;
  uint64_t v107 = (void *)MEMORY[0x1E4FBC868];
  sub_1C00381C8();
  uint64_t result = sub_1C151E3AC();
  uint64_t v18 = *(void *)(a1 + 16);
  if (!v18)
  {
    uint64_t v41 = v107;
LABEL_24:
    char v46 = v74;
    *char v74 = a1;
    v46[1] = v41;
    return result;
  }
  v72[0] = (uint64_t)v13;
  v72[1] = v3;
  uint64_t v19 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  uint64_t v20 = *(void *)(v9 + 72);
  uint64_t v78 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  uint64_t v75 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  uint64_t v73 = a1;
  swift_bridgeObjectRetain();
  char v76 = v16;
  unint64_t v77 = v7;
  while (1)
  {
    uint64_t v80 = v18;
    sub_1C0037450(v19, (uint64_t)v16);
    char v21 = v107;
    if (v107[2])
    {
      uint64_t v22 = *(void *)v16;
      uint64_t v23 = *((void *)v16 + 1);
      swift_bridgeObjectRetain();
      unint64_t v24 = sub_1BFEF2D8C(v22, v23);
      if (v25)
      {
        sub_1C0037450(v21[7] + v24 * v20, (uint64_t)v7);
        uint64_t v26 = 0;
      }
      else
      {
        uint64_t v26 = 1;
      }
      uint64_t v27 = v79;
      (*v78)(v7, v26, 1, v79);
      swift_bridgeObjectRelease();
      if ((*v75)(v7, 1, v27) != 1)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v47 = (_OWORD *)v72[0];
        sub_1C00374B4((uint64_t)v7, v72[0]);
        type metadata accessor for FormatPackageError();
        sub_1BFC95DBC((unint64_t *)&qword_1EA198A90, (void (*)(uint64_t))type metadata accessor for FormatPackageError);
        swift_allocError();
        long long v48 = *((_OWORD *)v16 + 3);
        long long v49 = *((_OWORD *)v16 + 5);
        long long v84 = *((_OWORD *)v16 + 4);
        long long v85 = v49;
        long long v50 = *((_OWORD *)v16 + 5);
        v86[0] = *((_OWORD *)v16 + 6);
        *(_OWORD *)((char *)v86 + 9) = *(_OWORD *)(v16 + 105);
        long long v51 = *((_OWORD *)v16 + 1);
        v81[0] = *(_OWORD *)v16;
        v81[1] = v51;
        long long v52 = *((_OWORD *)v16 + 3);
        long long v54 = *(_OWORD *)v16;
        long long v53 = *((_OWORD *)v16 + 1);
        long long v82 = *((_OWORD *)v16 + 2);
        long long v83 = v52;
        long long v55 = v47[1];
        long long v56 = v47[3];
        long long v88 = v47[2];
        long long v89 = v56;
        long long v57 = v47[1];
        v87[0] = *v47;
        v87[1] = v57;
        *(_OWORD *)((char *)v92 + 9) = *(_OWORD *)((char *)v47 + 105);
        long long v58 = v47[5];
        v92[0] = v47[6];
        long long v59 = v47[3];
        long long v60 = v47[5];
        long long v90 = v47[4];
        long long v91 = v60;
        long long v95 = v82;
        long long v96 = v48;
        long long v93 = v54;
        long long v94 = v53;
        *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)(v16 + 105);
        long long v97 = v84;
        long long v98 = v50;
        long long v101 = v55;
        long long v102 = v88;
        v99[0] = *((_OWORD *)v16 + 6);
        long long v100 = v87[0];
        *(_OWORD *)((char *)v106 + 9) = *(_OWORD *)((char *)v47 + 105);
        long long v61 = v47[6];
        long long v105 = v58;
        v106[0] = v61;
        long long v103 = v59;
        long long v104 = v90;
        void v62[2] = v82;
        v62[3] = v48;
        *char v62 = v54;
        v62[1] = v53;
        long long v63 = v97;
        long long v64 = v98;
        long long v65 = v99[1];
        v62[6] = v99[0];
        v62[7] = v65;
        v62[4] = v63;
        v62[5] = v64;
        long long v66 = v100;
        long long v67 = v101;
        long long v68 = v103;
        v62[10] = v102;
        v62[11] = v68;
        v62[8] = v66;
        v62[9] = v67;
        long long v69 = v104;
        long long v70 = v105;
        long long v71 = v106[0];
        *(_OWORD *)((char *)v62 + 233) = *(_OWORD *)((char *)v106 + 9);
        v62[13] = v70;
        v62[14] = v71;
        v62[12] = v69;
        swift_storeEnumTagMultiPayload();
        sub_1C025AE48((uint64_t)v81);
        sub_1C025AE48((uint64_t)v87);
        swift_willThrow();
        sub_1C0037C2C((uint64_t)v47);
        sub_1C0037C2C((uint64_t)v16);
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      (*v78)(v7, 1, 1, v79);
    }
    uint64_t v28 = v20;
    sub_1C00380F0((uint64_t)v7);
    uint64_t v30 = *(void *)v16;
    uint64_t v29 = *((void *)v16 + 1);
    sub_1C0037450((uint64_t)v16, v108);
    swift_bridgeObjectRetain();
    uint64_t v31 = v107;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v93 = v31;
    unint64_t v34 = sub_1BFEF2D8C(v30, v29);
    uint64_t v35 = v31[2];
    BOOL v36 = (v33 & 1) == 0;
    uint64_t v37 = v35 + v36;
    if (__OFADD__(v35, v36)) {
      break;
    }
    char v38 = v33;
    if (v31[3] >= v37)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v41 = (void *)v93;
        if (v33) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_1C106B60C();
        uint64_t v41 = (void *)v93;
        if (v38) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_1C1055C20(v37, isUniquelyReferenced_nonNull_native);
      unint64_t v39 = sub_1BFEF2D8C(v30, v29);
      if ((v38 & 1) != (v40 & 1)) {
        goto LABEL_28;
      }
      unint64_t v34 = v39;
      uint64_t v41 = (void *)v93;
      if (v38)
      {
LABEL_3:
        uint64_t v20 = v28;
        sub_1C025ADE4(v108, v41[7] + v34 * v28);
        goto LABEL_4;
      }
    }
    v41[(v34 >> 6) + 8] |= 1 << v34;
    uint64_t v42 = (uint64_t *)(v41[6] + 16 * v34);
    *uint64_t v42 = v30;
    v42[1] = v29;
    uint64_t v20 = v28;
    sub_1C00374B4(v108, v41[7] + v34 * v28);
    uint64_t v43 = v41[2];
    BOOL v44 = __OFADD__(v43, 1);
    uint64_t v45 = v43 + 1;
    if (v44) {
      goto LABEL_27;
    }
    v41[2] = v45;
    swift_bridgeObjectRetain();
LABEL_4:
    uint64_t v107 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = v76;
    sub_1C0037C2C((uint64_t)v76);
    v19 += v20;
    uint64_t v18 = v80 - 1;
    uint64_t v7 = v77;
    if (v80 == 1)
    {
      a1 = v73;
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  uint64_t result = sub_1C1520CFC();
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for FormatItem(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 121)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 120) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 121) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 121) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1C0037450(uint64_t a1, uint64_t a2)
{
  sub_1C0037C88();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C00374B4(uint64_t a1, uint64_t a2)
{
  sub_1C0037C88();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1C0037518(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  long long v89 = (long long *)a2;
  uint64_t v73 = a1;
  uint64_t v6 = type metadata accessor for FormatOption();
  uint64_t v65 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BFF14F38(0, (unint64_t *)&qword_1EB8741D0, (uint64_t (*)(void))sub_1C00F6CB0, (uint64_t)&type metadata for FormatItem, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatObject);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v58 - v11);
  uint64_t v13 = *(void *)(a3 + 16);
  if (v13)
  {
    uint64_t v14 = a3 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v15 = *(void *)(v10 + 72);
    swift_bridgeObjectRetain();
    uint64_t v16 = 0;
    long long v68 = v12;
    long long v66 = v8;
    uint64_t v60 = v13;
    uint64_t v62 = v14;
    uint64_t v61 = v15;
    while (1)
    {
      uint64_t v63 = v16;
      sub_1C1147A90(v14 + v15 * v16, (uint64_t)v12, (unint64_t *)&qword_1EB8741D0, (uint64_t (*)(void))sub_1C00F6CB0, (uint64_t)&type metadata for FormatItem, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatObject);
      uint64_t v17 = v12[9];
      uint64_t v18 = v12[10];
      uint64_t v69 = v12[11];
      uint64_t v67 = v12[13];
      uint64_t v64 = v12[14];
      uint64_t v19 = *(void *)(v17 + 16);
      if (v19)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v20 = v17 + 48;
        while (1)
        {
          uint64_t v74 = *(void *)(v20 - 16);
          long long v21 = v89[5];
          long long v86 = v89[4];
          long long v87 = v21;
          uint64_t v88 = *((void *)v89 + 12);
          long long v22 = v89[1];
          long long v82 = *v89;
          long long v83 = v22;
          long long v23 = v89[3];
          long long v84 = v89[2];
          long long v85 = v23;
          swift_bridgeObjectRetain();
          swift_retain_n();
          sub_1BFF0B0B8(v73, (uint64_t)&v82);
          if (v4) {
            break;
          }
          v20 += 40;
          swift_bridgeObjectRelease();
          swift_release_n();
          if (!--v19)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v12 = v68;
            goto LABEL_8;
          }
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_release_n();
        goto LABEL_25;
      }
LABEL_8:
      uint64_t v24 = v69;
      if (v18)
      {
        long long v25 = v89[5];
        long long v86 = v89[4];
        long long v87 = v25;
        uint64_t v88 = *((void *)v89 + 12);
        long long v26 = v89[1];
        long long v82 = *v89;
        long long v83 = v26;
        long long v27 = v89[3];
        long long v84 = v89[2];
        long long v85 = v27;
        sub_1C0037CE4(v73, (uint64_t)&v82);
        if (v4) {
          goto LABEL_27;
        }
      }
      uint64_t v28 = (uint64_t)v66;
      uint64_t v29 = *(void *)(v24 + 16);
      if (v29)
      {
        uint64_t v59 = a3;
        uint64_t v72 = v4;
        swift_bridgeObjectRetain_n();
        uint64_t v30 = (uint64_t *)(v24 + 48);
        while (1)
        {
          uint64_t v70 = v29;
          uint64_t v31 = *(v30 - 1);
          uint64_t v32 = *v30;
          uint64_t v33 = v30[1];
          uint64_t v34 = v30[2];
          uint64_t v35 = v30[3];
          unint64_t v36 = v30[4];
          uint64_t v37 = v30[5];
          uint64_t v74 = *(v30 - 2);
          uint64_t v75 = v31;
          uint64_t v76 = v32;
          uint64_t v77 = v33;
          uint64_t v78 = v34;
          uint64_t v79 = v35;
          unint64_t v80 = v36;
          uint64_t v81 = v37;
          long long v38 = v89[5];
          long long v86 = v89[4];
          long long v87 = v38;
          uint64_t v88 = *((void *)v89 + 12);
          long long v39 = v89[1];
          long long v82 = *v89;
          long long v83 = v39;
          long long v40 = v89[3];
          long long v84 = v89[2];
          long long v85 = v40;
          uint64_t v41 = v74;
          uint64_t v42 = v31;
          uint64_t v43 = v32;
          uint64_t v44 = v33;
          uint64_t v45 = v34;
          uint64_t v46 = v35;
          unint64_t v47 = v36;
          uint64_t v71 = v37;
          sub_1BFF95098(v74, v31, v32, v33, v34, v35, v36);
          uint64_t v48 = v72;
          sub_1C05D2144(v73, (uint64_t)&v82);
          uint64_t v72 = v48;
          if (v48) {
            break;
          }
          v30 += 8;
          sub_1BFF94FE4(v41, v42, v43, v44, v45, v46, v47);
          uint64_t v29 = v70 - 1;
          if (v70 == 1)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v4 = v72;
            a3 = v59;
            uint64_t v12 = v68;
            uint64_t v28 = (uint64_t)v66;
            goto LABEL_15;
          }
        }
        sub_1BFF94FE4(v41, v42, v43, v44, v45, v46, v47);
        swift_bridgeObjectRelease_n();
LABEL_25:
        uint64_t v12 = v68;
        goto LABEL_27;
      }
LABEL_15:
      uint64_t v49 = *(void *)(v67 + 16);
      if (v49) {
        break;
      }
LABEL_20:
      uint64_t v56 = v64;
      swift_bridgeObjectRetain();
      sub_1BFF11C38(v73, (uint64_t)v89, v56);
      swift_bridgeObjectRelease();
      uint64_t v14 = v62;
      uint64_t v15 = v61;
      if (v4) {
        goto LABEL_27;
      }
      uint64_t v57 = v63 + 1;
      sub_1C114971C((uint64_t)v12, (unint64_t *)&qword_1EB8741D0, (uint64_t (*)(void))sub_1C00F6CB0, (uint64_t)&type metadata for FormatItem, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatObject);
      uint64_t v16 = v57;
      if (v57 == v60) {
        goto LABEL_28;
      }
    }
    uint64_t v50 = v65;
    uint64_t v51 = v67 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
    swift_bridgeObjectRetain_n();
    uint64_t v52 = *(void *)(v50 + 72);
    while (1)
    {
      sub_1C1147A28(v51, v28, (uint64_t (*)(void))type metadata accessor for FormatOption);
      uint64_t v74 = *(void *)(v28 + 16);
      long long v53 = v89[5];
      long long v86 = v89[4];
      long long v87 = v53;
      uint64_t v88 = *((void *)v89 + 12);
      long long v54 = v89[1];
      long long v82 = *v89;
      long long v83 = v54;
      long long v55 = v89[3];
      long long v84 = v89[2];
      long long v85 = v55;
      swift_retain();
      sub_1BFF2871C(v73, (uint64_t)&v82);
      if (v4) {
        break;
      }
      swift_release();
      sub_1C1147B04(v28, (uint64_t (*)(void))type metadata accessor for FormatOption);
      v51 += v52;
      if (!--v49)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_20;
      }
    }
    swift_release();
    sub_1C1147B04(v28, (uint64_t (*)(void))type metadata accessor for FormatOption);
    swift_bridgeObjectRelease_n();
LABEL_27:
    sub_1C114971C((uint64_t)v12, (unint64_t *)&qword_1EB8741D0, (uint64_t (*)(void))sub_1C00F6CB0, (uint64_t)&type metadata for FormatItem, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatObject);
LABEL_28:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1C0037C2C(uint64_t a1)
{
  sub_1C0037C88();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1C0037C88()
{
  if (!qword_1EB8741D0)
  {
    sub_1C00F6CB0();
    unint64_t v0 = type metadata accessor for FormatObject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8741D0);
    }
  }
}

uint64_t sub_1C0037CE4(unint64_t *a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for FormatItemNodeAction();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BFF2E5E0(0, &qword_1EB8898A0, (void (*)(uint64_t))type metadata accessor for FormatItemNodeAction);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v27 - v11;
  long long v13 = *(_OWORD *)(a2 + 80);
  v34[4] = *(_OWORD *)(a2 + 64);
  v34[5] = v13;
  uint64_t v35 = *(void *)(a2 + 96);
  long long v14 = *(_OWORD *)(a2 + 16);
  v34[0] = *(_OWORD *)a2;
  v34[1] = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  LODWORD(v11) = *(unsigned char *)(v2 + 112) & 0xFE;
  v34[2] = *(_OWORD *)(a2 + 32);
  v34[3] = v15;
  if (v11 != 126 && (*(void *)(v2 + 48) & 0xF000000000000007) != 0xF000000000000007)
  {
    uint64_t v29 = *(void *)(v2 + 48);
    uint64_t result = sub_1BFF79540((uint64_t)a1, a2);
    if (v3) {
      return result;
    }
  }
  uint64_t v17 = *(void *)(v2 + 120);
  uint64_t v18 = *(void *)(v2 + 168);
  unsigned int v19 = *(unsigned __int8 *)(v2 + 176);
  if (v19 > 1)
  {
    if (v19 == 2) {
LABEL_11:
    }
      sub_1BFF8C720(v17, *(void *)(v2 + 128), *(void *)(v2 + 136), *(void *)(v2 + 144), *(void *)(v2 + 152), *(void *)(v2 + 160), v18, v19);
  }
  else if (!*(unsigned char *)(v2 + 176))
  {
    if ((v18 & 0xF000000000000007) != 0xD000000000000007)
    {
      if ((~v17 & 0xF000000000000007) != 0)
      {
        uint64_t v29 = *(void *)(v2 + 120);
        uint64_t result = sub_1BFF79540((uint64_t)a1, a2);
        if (v3) {
          return result;
        }
      }
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_12:
  sub_1BFFA1314(v2 + OBJC_IVAR____TtC8NewsFeed19FormatItemNodeStyle_cellAction, (uint64_t)v12, &qword_1EB8898A0, (void (*)(uint64_t))type metadata accessor for FormatItemNodeAction);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    sub_1C05DDCC0((uint64_t)v12, &qword_1EB8898A0, (void (*)(uint64_t))type metadata accessor for FormatItemNodeAction);
  }
  else
  {
    sub_1BFF83CC4((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for FormatItemNodeAction);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if ((EnumCaseMultiPayload - 2) >= 6)
    {
      if (EnumCaseMultiPayload)
      {
        sub_1C05DDC60((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for FormatItemNodeAction);
      }
      else
      {
        uint64_t v24 = *(void *)v9;
        uint64_t v25 = *((void *)v9 + 1);
        uint64_t v28 = *((void *)v9 + 2);
        uint64_t v29 = v24;
        int v36 = v9[25];
        unsigned int v26 = v9[24];
        uint64_t v30 = v25;
        uint64_t v31 = v28;
        char v32 = v26;
        char v33 = v36;
        sub_1BFF8449C(a1, a2);
        sub_1C05D881C(v24, v25, v28, v26, v36, (uint64_t (*)(void))sub_1C002B840, (uint64_t (*)(void))sub_1C002B840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))sub_1BFDEB9E0);
        if (v3) {
          return sub_1C05DDC60((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for FormatItemNodeAction);
        }
      }
    }
    sub_1C05DDC60((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for FormatItemNodeAction);
  }
  unint64_t v21 = *(void *)(v2 + OBJC_IVAR____TtC8NewsFeed19FormatItemNodeStyle_swipeActionStyle);
  if (v21 <= 2) {
    sub_1BFF8C734(v21);
  }
  long long v22 = (uint64_t *)(v2 + OBJC_IVAR____TtC8NewsFeed19FormatItemNodeStyle__selectors);
  swift_beginAccess();
  uint64_t v23 = *v22;
  swift_bridgeObjectRetain();
  sub_1C1142B78(a1, v34, v23);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C00380F0(uint64_t a1)
{
  sub_1C0038168(0, (unint64_t *)&qword_1EB8741D8, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1C0038168(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_1C0037C88();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_1C00381C8()
{
  if (!qword_1EB880C18)
  {
    sub_1C0037C88();
    unint64_t v0 = sub_1C151E41C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB880C18);
    }
  }
}

void sub_1C0038230(unint64_t *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  long long v7 = *(_OWORD *)(a2 + 64);
  long long v8 = *(_OWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 32);
  v25[3] = *(_OWORD *)(a2 + 48);
  v25[4] = v7;
  v25[5] = v8;
  long long v10 = *(_OWORD *)(a2 + 16);
  v25[0] = *(_OWORD *)a2;
  uint64_t v26 = *(void *)(a2 + 96);
  v25[1] = v10;
  void v25[2] = v9;
  swift_beginAccess();
  sub_1BFF0D1B8(a1, a2);
  if (!v3)
  {
    swift_beginAccess();
    uint64_t v11 = v2[6];
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      swift_bridgeObjectRetain_n();
      for (uint64_t i = 0; i != v12; ++i)
      {
        unint64_t v14 = *(void *)(v11 + 8 * i + 32);
        sub_1BFF32264(v14);
        sub_1BFF0D378((uint64_t)a1, a2);
        sub_1BFF31E90(v14);
      }
      swift_bridgeObjectRelease_n();
    }
    sub_1C0038508((uint64_t)a1, (uint64_t)v25, v2[9]);
    swift_beginAccess();
    unint64_t v15 = v2[11];
    if (v15 >> 62 == 1)
    {
      uint64_t v16 = v15 & 0x3FFFFFFFFFFFFFFFLL;
      unint64_t v17 = *(void *)(v16 + 16);
      uint64_t v18 = *(void *)(v16 + 24);
      sub_1BFE6FA30(v17);
      swift_bridgeObjectRetain();
      sub_1C1144E0C((uint64_t)a1, (uint64_t)v25, v17, v18);
      sub_1BFF0056C(v17);
      swift_bridgeObjectRelease();
    }
    uint64_t v19 = v4[13];
    if (v19)
    {
      swift_beginAccess();
      uint64_t v20 = *(void *)(v19 + 72);
      if (v20)
      {
        swift_bridgeObjectRetain();
        sub_1C0000E48((uint64_t)a1, (uint64_t)v25, v20);
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      uint64_t v21 = *(void *)(v19 + 88);
      uint64_t v22 = *(void *)(v21 + 16);
      if (v22)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v23 = (uint64_t *)(v21 + 72);
        do
        {
          uint64_t v24 = *v23;
          if (*v23)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1C0000E48((uint64_t)a1, (uint64_t)v25, v24);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v23 += 7;
          --v22;
        }
        while (v22);
        swift_bridgeObjectRelease_n();
      }
    }
  }
}

uint64_t sub_1C0038508(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    uint64_t v7 = result;
    uint64_t v8 = a3 + 32;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    uint64_t v16 = v8;
    uint64_t v17 = v5;
    while (1)
    {
      uint64_t v10 = *(void *)(v8 + 40 * v9 + 32);
      uint64_t v11 = *(void *)(v10 + 16);
      if (v11) {
        break;
      }
LABEL_3:
      if (++v9 == v5) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = v10 + 48;
    while (1)
    {
      uint64_t v20 = *(void *)(v12 - 16);
      long long v13 = *(_OWORD *)(a2 + 80);
      v18[4] = *(_OWORD *)(a2 + 64);
      v18[5] = v13;
      uint64_t v19 = *(void *)(a2 + 96);
      long long v14 = *(_OWORD *)(a2 + 16);
      v18[0] = *(_OWORD *)a2;
      v18[1] = v14;
      long long v15 = *(_OWORD *)(a2 + 48);
      v18[2] = *(_OWORD *)(a2 + 32);
      v18[3] = v15;
      swift_bridgeObjectRetain();
      swift_retain_n();
      sub_1BFF0B0B8(v7, v18);
      if (v4) {
        break;
      }
      v12 += 40;
      swift_bridgeObjectRelease();
      swift_release_n();
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t v8 = v16;
        uint64_t v5 = v17;
        goto LABEL_3;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  return result;
}

uint64_t sub_1C00386C8@<X0>(char *a1@<X8>)
{
  return sub_1BFFDF5CC(a1);
}

uint64_t sub_1C0038728(void *a1, uint64_t a2)
{
  sub_1C003897C();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v9 = sub_1C1520EAC();
  char v10 = Dictionary<>.allowSourceMaps.getter(v9);
  swift_bridgeObjectRelease();
  if (v10)
  {
    a2 = (uint64_t)sub_1C04ACD88((void *)a2);
    uint64_t v24 = a2;
    id v11 = (id)a2;
    sub_1BFC845BC(0, (unint64_t *)&qword_1EB87A930);
    if (!swift_dynamicCast()
      || (unint64_t v12 = v23, sub_1C017F78C(v20, *((uint64_t *)&v20 + 1), v21, v22, v23), v12 >> 60 != 12))
    {
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      sub_1C007A4E8();
      sub_1C1520EBC();
      sub_1BFEB3CF0();
      sub_1C15206EC();
      long long v19 = v20;
      unint64_t v15 = a2 | 0xC000000000000000;
      uint64_t v16 = v21;
      uint64_t v17 = v22;
      sub_1C02570B4();
      a2 = swift_allocError();
      *(_OWORD *)uint64_t v18 = v19;
      *(void *)(v18 + 16) = v16;
      *(void *)(v18 + 24) = v17;
      *(void *)(v18 + 32) = v15;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  else
  {
    id v13 = (id)a2;
  }
  return a2;
}

void sub_1C003897C()
{
  if (!qword_1EB884C48)
  {
    sub_1C007A4E8();
    unint64_t v0 = sub_1C152072C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB884C48);
    }
  }
}

uint64_t type metadata accessor for FormatFontResource(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, qword_1EB870B90);
}

uint64_t sub_1C00389F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1C0038A98(a1, a2, a3);
  if (!v4 && (a4 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = *(void *)(a4 + 16);
    uint64_t v9 = *(void *)(a4 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1C00389F8(a1, a2, v10, v9);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C0038A98(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v25 = (unint64_t *)result;
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t *)(a3 + 40);
    do
    {
      uint64_t v9 = *v8;
      uint64_t v28 = *(v8 - 1);
      long long v10 = *(_OWORD *)(a2 + 80);
      v26[4] = *(_OWORD *)(a2 + 64);
      v26[5] = v10;
      uint64_t v27 = *(void *)(a2 + 96);
      long long v11 = *(_OWORD *)(a2 + 16);
      v26[0] = *(_OWORD *)a2;
      v26[1] = v11;
      long long v12 = *(_OWORD *)(a2 + 48);
      v26[2] = *(_OWORD *)(a2 + 32);
      v26[3] = v12;
      swift_retain();
      swift_retain_n();
      sub_1BFF0C6A0(v25, (uint64_t *)v26);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return swift_release_n();
      }
      swift_release();
      if (v9 < 0)
      {
        swift_release();
        swift_release();
      }
      else
      {
        uint64_t v13 = *(void *)(v9 + 16);
        uint64_t v14 = *(void *)(v9 + 24);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        sub_1C0038A98(v25, a2, v13);
        if (v14 < 0)
        {
          swift_release();
          swift_release_n();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v15 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          swift_retain();
          swift_retain_n();
          swift_bridgeObjectRetain();
          sub_1C0038A98(v25, a2, v15);
          if (v16 < 0)
          {
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v17 = *(void *)(v16 + 16);
            uint64_t v18 = *(void *)(v16 + 24);
            swift_retain();
            swift_retain_n();
            swift_bridgeObjectRetain();
            sub_1C0038A98(v25, a2, v17);
            if (v18 < 0)
            {
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v19 = *(void *)(v18 + 16);
              uint64_t v20 = *(void *)(v18 + 24);
              swift_retain();
              swift_retain_n();
              swift_bridgeObjectRetain();
              sub_1C0038A98(v25, a2, v19);
              if (v20 < 0)
              {
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v21 = *(void *)(v20 + 16);
                uint64_t v22 = *(void *)(v20 + 24);
                swift_retain();
                swift_retain_n();
                swift_bridgeObjectRetain();
                sub_1C0038A98(v25, a2, v21);
                if ((v22 & 0x8000000000000000) == 0)
                {
                  uint64_t v23 = *(void *)(v22 + 16);
                  uint64_t v24 = *(void *)(v22 + 24);
                  swift_retain();
                  swift_retain_n();
                  swift_bridgeObjectRetain();
                  sub_1C00389F8(v25, a2, v23, v24);
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_release_n();
                }
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release_n();
              }
              swift_release();
              swift_bridgeObjectRelease();
              swift_release_n();
            }
            swift_release();
            swift_bridgeObjectRelease();
            swift_release_n();
          }
          swift_release();
          swift_release_n();
          swift_bridgeObjectRelease();
          swift_release_n();
        }
      }
      v8 += 2;
      --v5;
    }
    while (v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C0039058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v201 = a1;
  uint64_t v203 = (char *)a2;
  uint64_t v199 = a3;
  char v198 = (int *)type metadata accessor for FormatRemoteImage();
  MEMORY[0x1F4188790](v198);
  v178[1] = (char *)v178 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v181 = (char *)v178 - v7;
  MEMORY[0x1F4188790](v8);
  uint64_t v186 = (char *)v178 - v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v182 = (uint64_t)v178 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v185 = (uint64_t)v178 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v189 = (uint64_t)v178 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v184 = (uint64_t)v178 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v188 = (uint64_t)v178 - v19;
  MEMORY[0x1F4188790](v20);
  uint64_t v190 = (uint64_t)v178 - v21;
  sub_1BFF2EBC0(0, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v179 = (uint64_t)v178 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  unint64_t v197 = (char *)v178 - v25;
  MEMORY[0x1F4188790](v26);
  char v196 = (char *)v178 - v27;
  MEMORY[0x1F4188790](v28);
  uint64_t v183 = (uint64_t)v178 - v29;
  MEMORY[0x1F4188790](v30);
  uint64_t v195 = (char *)v178 - v31;
  MEMORY[0x1F4188790](v32);
  BOOL v194 = (char *)v178 - v33;
  MEMORY[0x1F4188790](v34);
  uint64_t v187 = (uint64_t)v178 - v35;
  MEMORY[0x1F4188790](v36);
  uint64_t v193 = (char *)v178 - v37;
  MEMORY[0x1F4188790](v38);
  unint64_t v192 = (char *)v178 - v39;
  sub_1BFF2EBC0(0, (unint64_t *)&qword_1EB8948A0, MEMORY[0x1E4F276F0]);
  MEMORY[0x1F4188790](v40 - 8);
  uint64_t v180 = (uint64_t)v178 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v42);
  char v191 = (char *)v178 - v43;
  MEMORY[0x1F4188790](v44);
  uint64_t v46 = (char *)v178 - v45;
  MEMORY[0x1F4188790](v47);
  uint64_t v49 = (char *)v178 - v48;
  MEMORY[0x1F4188790](v50);
  uint64_t v52 = (char *)v178 - v51;
  MEMORY[0x1F4188790](v53);
  long long v55 = (char *)v178 - v54;
  MEMORY[0x1F4188790](v56);
  uint64_t v58 = (char *)v178 - v57;
  MEMORY[0x1F4188790](v59);
  uint64_t v61 = (char *)v178 - v60;
  MEMORY[0x1F4188790](v62);
  uint64_t v64 = (char *)v178 - v63;
  sub_1BFF2EBC0(0, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
  MEMORY[0x1F4188790](v65 - 8);
  MEMORY[0x1F4188790](v66);
  MEMORY[0x1F4188790](v67);
  MEMORY[0x1F4188790](v68);
  MEMORY[0x1F4188790](v69);
  uint64_t v71 = (char *)v178 - v70;
  MEMORY[0x1F4188790](v72);
  uint64_t v78 = (char *)v178 - v74;
  if (a4 < 3.0)
  {
    uint64_t v79 = (uint64_t)v194;
    uint64_t v80 = (uint64_t)v195;
    uint64_t v82 = (uint64_t)v196;
    uint64_t v81 = (uint64_t)v197;
    unint64_t v192 = v46;
    uint64_t v193 = v55;
    uint64_t v83 = (uint64_t)v191;
    if (a4 < 2.0)
    {
      if (a4 < 1.0) {
        return sub_1C0039058(v201, v203, 3.0);
      }
      uint64_t v101 = v76;
      uint64_t v102 = v73;
      sub_1BFE324FC((uint64_t)v203, v73, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
      uint64_t v103 = sub_1C1517ADC();
      uint64_t v104 = *(void *)(v103 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103) == 1)
      {
        sub_1C003B0FC(v201, v199);
        uint64_t v91 = v102;
        return sub_1C103F1CC(v91, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
      }
      uint64_t v203 = (char *)v102;
      sub_1BFE324FC(v102, v101, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
      int v115 = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 88))(v101, v103);
      uint64_t v116 = v201;
      uint64_t v117 = v202;
      if (v115 == *MEMORY[0x1E4FAB900])
      {
        sub_1BFE324FC(v202 + v198[7], v82, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v118 = type metadata accessor for FormatURL();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v118 - 8) + 48))(v82, 1, v118) == 1)
        {
          sub_1C103F1CC(v82, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
          uint64_t v119 = sub_1C1515FDC();
          uint64_t v92 = (uint64_t)v192;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v119 - 8) + 56))(v192, 1, 1, v119);
LABEL_50:
          uint64_t v145 = v117;
          uint64_t v146 = (uint64_t)v186;
LABEL_98:
          sub_1C003DAC8(v145, v146, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
          sub_1C1515FDC();
          uint64_t v168 = *(void *)(v119 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v168 + 48))(v92, 1, v119) == 1)
          {
            uint64_t v177 = swift_retain();
            sub_1C003B0FC(v177, v199);
            swift_release();
            uint64_t v170 = v146;
            goto LABEL_100;
          }
          uint64_t v171 = v146;
          goto LABEL_103;
        }
        uint64_t v92 = (uint64_t)v192;
        uint64_t v144 = v200;
        sub_1C003B0FC(v116, (uint64_t)v192);
        sub_1C003B09C(v82, (uint64_t (*)(void))type metadata accessor for FormatURL);
        if (!v144)
        {
          uint64_t v119 = sub_1C1515FDC();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v119 - 8) + 56))(v92, 0, 1, v119);
          goto LABEL_50;
        }
LABEL_104:
        uint64_t v91 = (uint64_t)v203;
        return sub_1C103F1CC(v91, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
      }
      if (v115 == *MEMORY[0x1E4FAB908])
      {
        sub_1BFE324FC(v202 + v198[13], v81, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v133 = type metadata accessor for FormatURL();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v133 - 8) + 48))(v81, 1, v133) == 1)
        {
          sub_1C103F1CC(v81, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
          uint64_t v119 = sub_1C1515FDC();
          uint64_t v92 = v83;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v119 - 8) + 56))(v83, 1, 1, v119);
        }
        else
        {
          uint64_t v92 = v83;
          uint64_t v162 = v200;
          sub_1C003B0FC(v116, v83);
          if (v162)
          {
            sub_1C003B09C(v81, (uint64_t (*)(void))type metadata accessor for FormatURL);
            goto LABEL_104;
          }
          sub_1C003B09C(v81, (uint64_t (*)(void))type metadata accessor for FormatURL);
          uint64_t v119 = sub_1C1515FDC();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v119 - 8) + 56))(v83, 0, 1, v119);
        }
        uint64_t v145 = v117;
        uint64_t v176 = &v205;
LABEL_97:
        uint64_t v146 = *(v176 - 32);
        goto LABEL_98;
      }
      if (v115 == *MEMORY[0x1E4FAB910])
      {
        uint64_t v85 = v179;
        sub_1BFE324FC(v202 + v198[16], v179, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v148 = type metadata accessor for FormatURL();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v148 - 8) + 48))(v85, 1, v148) == 1)
        {
          sub_1C103F1CC(v85, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
          uint64_t v119 = sub_1C1515FDC();
          uint64_t v92 = v180;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v119 - 8) + 56))(v180, 1, 1, v119);
LABEL_92:
          uint64_t v145 = v117;
          uint64_t v176 = &v204;
          goto LABEL_97;
        }
        uint64_t v92 = v180;
        uint64_t v175 = v200;
        sub_1C003B0FC(v116, v180);
        if (!v175)
        {
          sub_1C003B09C(v85, (uint64_t (*)(void))type metadata accessor for FormatURL);
          uint64_t v119 = sub_1C1515FDC();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v119 - 8) + 56))(v92, 0, 1, v119);
          goto LABEL_92;
        }
LABEL_23:
        sub_1C003B09C(v85, (uint64_t (*)(void))type metadata accessor for FormatURL);
        goto LABEL_104;
      }
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v101, v103);
      uint64_t v150 = v199;
      uint64_t v149 = v116;
LABEL_77:
      sub_1C003B0FC(v149, v150);
      goto LABEL_104;
    }
    uint64_t v92 = (uint64_t)v52;
    uint64_t v93 = v77;
    uint64_t v94 = v75;
    sub_1BFE324FC((uint64_t)v203, v75, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
    uint64_t v95 = sub_1C1517ADC();
    uint64_t v96 = *(void *)(v95 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95) == 1)
    {
      sub_1C003B0FC(v201, v199);
      uint64_t v91 = v94;
      return sub_1C103F1CC(v91, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
    }
    uint64_t v203 = (char *)v94;
    sub_1BFE324FC(v94, v93, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
    int v105 = (*(uint64_t (**)(uint64_t, uint64_t))(v96 + 88))(v93, v95);
    if (v105 == *MEMORY[0x1E4FAB900])
    {
      uint64_t v106 = v202;
      sub_1BFE324FC(v202 + v198[8], v79, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
      uint64_t v107 = type metadata accessor for FormatURL();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 48))(v79, 1, v107) == 1)
      {
        sub_1C103F1CC(v79, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v108 = sub_1C1515FDC();
        uint64_t v109 = (uint64_t)v193;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v193, 1, 1, v108);
      }
      else
      {
        uint64_t v109 = (uint64_t)v193;
        uint64_t v130 = v200;
        sub_1C003B0FC(v201, (uint64_t)v193);
        if (v130)
        {
          sub_1C003B09C(v79, (uint64_t (*)(void))type metadata accessor for FormatURL);
          goto LABEL_104;
        }
        sub_1C003B09C(v79, (uint64_t (*)(void))type metadata accessor for FormatURL);
        uint64_t v108 = sub_1C1515FDC();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v109, 0, 1, v108);
      }
      uint64_t v151 = v189;
      sub_1C003DAC8(v106, v189, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
      sub_1C1515FDC();
      uint64_t v152 = *(void *)(v108 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48))(v109, 1, v108) != 1)
      {
        sub_1C003B09C(v151, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 32))(v199, v109, v108);
        goto LABEL_104;
      }
      uint64_t v153 = swift_retain();
      sub_1C003B0FC(v153, v199);
      swift_release();
      sub_1C003B09C(v151, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
      uint64_t v142 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
      uint64_t v143 = v109;
    }
    else
    {
      if (v105 == *MEMORY[0x1E4FAB908])
      {
        uint64_t v120 = v202;
        sub_1BFE324FC(v202 + v198[14], v80, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v121 = type metadata accessor for FormatURL();
        int v122 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 48))(v80, 1, v121);
        uint64_t v123 = v200;
        if (v122 == 1)
        {
          sub_1C103F1CC(v80, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
          uint64_t v119 = sub_1C1515FDC();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v119 - 8) + 56))(v92, 1, 1, v119);
        }
        else
        {
          sub_1C003B0FC(v201, v92);
          if (v123)
          {
            sub_1C003B09C(v80, (uint64_t (*)(void))type metadata accessor for FormatURL);
            goto LABEL_104;
          }
          sub_1C003B09C(v80, (uint64_t (*)(void))type metadata accessor for FormatURL);
          uint64_t v119 = sub_1C1515FDC();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v119 - 8) + 56))(v92, 0, 1, v119);
        }
        uint64_t v166 = v120;
        uint64_t v167 = v185;
        sub_1C003DAC8(v166, v185, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        sub_1C1515FDC();
        uint64_t v168 = *(void *)(v119 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v168 + 48))(v92, 1, v119) == 1)
        {
          uint64_t v169 = swift_retain();
          sub_1C003B0FC(v169, v199);
          swift_release();
          uint64_t v170 = v167;
LABEL_100:
          sub_1C003B09C(v170, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
          uint64_t v142 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
          uint64_t v143 = v92;
          goto LABEL_101;
        }
        uint64_t v171 = v167;
LABEL_103:
        sub_1C003B09C(v171, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 32))(v199, v92, v119);
        goto LABEL_104;
      }
      uint64_t v134 = v200;
      if (v105 != *MEMORY[0x1E4FAB910])
      {
        (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v93, v95);
        uint64_t v149 = v201;
        uint64_t v150 = v199;
        goto LABEL_77;
      }
      uint64_t v135 = v202;
      uint64_t v85 = v183;
      sub_1BFE324FC(v202 + v198[17], v183, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
      uint64_t v136 = type metadata accessor for FormatURL();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 48))(v85, 1, v136) == 1)
      {
        sub_1C103F1CC(v85, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v137 = sub_1C1515FDC();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v137 - 8) + 56))(v49, 1, 1, v137);
      }
      else
      {
        sub_1C003B0FC(v201, (uint64_t)v49);
        if (v134) {
          goto LABEL_23;
        }
        sub_1C003B09C(v85, (uint64_t (*)(void))type metadata accessor for FormatURL);
        uint64_t v137 = sub_1C1515FDC();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v137 - 8) + 56))(v49, 0, 1, v137);
      }
      uint64_t v163 = v182;
      sub_1C003DAC8(v135, v182, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
      sub_1C1515FDC();
      uint64_t v164 = *(void *)(v137 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v49, 1, v137) != 1)
      {
        sub_1C003B09C(v163, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        (*(void (**)(uint64_t, char *, uint64_t))(v164 + 32))(v199, v49, v137);
        goto LABEL_104;
      }
      uint64_t v165 = swift_retain();
      sub_1C003B0FC(v165, v199);
      swift_release();
      sub_1C003B09C(v163, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
      uint64_t v142 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
      uint64_t v143 = (uint64_t)v49;
    }
LABEL_101:
    sub_1C103F1CC(v143, (unint64_t *)&qword_1EB8948A0, v142);
    goto LABEL_104;
  }
  uint64_t v85 = (uint64_t)v192;
  uint64_t v86 = (uint64_t)v193;
  sub_1BFE324FC((uint64_t)v203, (uint64_t)v178 - v74, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
  uint64_t v87 = sub_1C1517ADC();
  uint64_t v88 = *(void *)(v87 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v78, 1, v87) != 1)
  {
    sub_1BFE324FC((uint64_t)v78, (uint64_t)v71, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
    int v97 = (*(uint64_t (**)(char *, uint64_t))(v88 + 88))(v71, v87);
    if (v97 == *MEMORY[0x1E4FAB900])
    {
      uint64_t v203 = v78;
      uint64_t v98 = v202;
      sub_1BFE324FC(v202 + v198[9], v85, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
      uint64_t v99 = type metadata accessor for FormatURL();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 48))(v85, 1, v99) == 1)
      {
        sub_1C103F1CC(v85, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v100 = sub_1C1515FDC();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v64, 1, 1, v100);
      }
      else
      {
        uint64_t v114 = v200;
        sub_1C003B0FC(v201, (uint64_t)v64);
        if (v114) {
          goto LABEL_23;
        }
        sub_1C003B09C(v85, (uint64_t (*)(void))type metadata accessor for FormatURL);
        uint64_t v100 = sub_1C1515FDC();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v64, 0, 1, v100);
      }
      uint64_t v138 = v98;
      uint64_t v139 = v190;
      sub_1C003DAC8(v138, v190, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
      sub_1C1515FDC();
      uint64_t v140 = *(void *)(v100 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v64, 1, v100) != 1)
      {
        sub_1C003B09C(v139, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        (*(void (**)(uint64_t, char *, uint64_t))(v140 + 32))(v199, v64, v100);
        goto LABEL_104;
      }
      uint64_t v141 = swift_retain();
      sub_1C003B0FC(v141, v199);
      swift_release();
      sub_1C003B09C(v139, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
      uint64_t v142 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
      uint64_t v143 = (uint64_t)v64;
      goto LABEL_101;
    }
    if (v97 == *MEMORY[0x1E4FAB908])
    {
      uint64_t v110 = v202;
      sub_1BFE324FC(v202 + v198[15], v86, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
      uint64_t v111 = type metadata accessor for FormatURL();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 48))(v86, 1, v111) == 1)
      {
        sub_1C103F1CC(v86, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v112 = sub_1C1515FDC();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56))(v61, 1, 1, v112);
        uint64_t v113 = v200;
LABEL_65:
        uint64_t v154 = v110;
        uint64_t v155 = v188;
        sub_1C003DAC8(v154, v188, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        sub_1C1515FDC();
        uint64_t v156 = *(void *)(v112 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v61, 1, v112) == 1)
        {
          uint64_t v157 = swift_retain();
          sub_1C003B0FC(v157, v199);
          if (v113)
          {
            swift_release();
            sub_1C003B09C(v155, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
            uint64_t v158 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
            uint64_t v159 = (uint64_t)v61;
LABEL_86:
            sub_1C103F1CC(v159, (unint64_t *)&qword_1EB8948A0, v158);
            uint64_t v91 = (uint64_t)v78;
            return sub_1C103F1CC(v91, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
          }
          swift_release();
          sub_1C003B09C(v155, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
          uint64_t v160 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
          uint64_t v161 = (uint64_t)v61;
          goto LABEL_94;
        }
        sub_1C003B09C(v155, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        (*(void (**)(uint64_t, char *, uint64_t))(v156 + 32))(v199, v61, v112);
        goto LABEL_88;
      }
      uint64_t v131 = v200;
      sub_1C003B0FC(v201, (uint64_t)v61);
      uint64_t v113 = v131;
      if (!v131)
      {
        sub_1C003B09C(v86, (uint64_t (*)(void))type metadata accessor for FormatURL);
        uint64_t v112 = sub_1C1515FDC();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56))(v61, 0, 1, v112);
        goto LABEL_65;
      }
      uint64_t v132 = v86;
LABEL_55:
      sub_1C003B09C(v132, (uint64_t (*)(void))type metadata accessor for FormatURL);
      uint64_t v91 = (uint64_t)v78;
      return sub_1C103F1CC(v91, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
    }
    uint64_t v124 = v201;
    uint64_t v125 = v202;
    if (v97 != *MEMORY[0x1E4FAB910])
    {
      (*(void (**)(char *, uint64_t))(v88 + 8))(v71, v87);
      uint64_t v90 = v199;
      uint64_t v89 = v124;
      goto LABEL_7;
    }
    uint64_t v126 = v187;
    sub_1BFE324FC(v202 + v198[18], v187, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
    uint64_t v127 = type metadata accessor for FormatURL();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v127 - 8) + 48))(v126, 1, v127) == 1)
    {
      sub_1C103F1CC(v126, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
      uint64_t v128 = sub_1C1515FDC();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v128 - 8) + 56))(v58, 1, 1, v128);
      uint64_t v129 = v200;
    }
    else
    {
      uint64_t v147 = v200;
      sub_1C003B0FC(v124, (uint64_t)v58);
      uint64_t v129 = v147;
      if (v147)
      {
        uint64_t v132 = v126;
        goto LABEL_55;
      }
      sub_1C003B09C(v126, (uint64_t (*)(void))type metadata accessor for FormatURL);
      uint64_t v128 = sub_1C1515FDC();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v128 - 8) + 56))(v58, 0, 1, v128);
    }
    uint64_t v172 = v184;
    sub_1C003DAC8(v125, v184, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
    sub_1C1515FDC();
    uint64_t v173 = *(void *)(v128 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 48))(v58, 1, v128) == 1)
    {
      uint64_t v174 = swift_retain();
      sub_1C003B0FC(v174, v199);
      if (v129)
      {
        swift_release();
        sub_1C003B09C(v172, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        uint64_t v158 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
        uint64_t v159 = (uint64_t)v58;
        goto LABEL_86;
      }
      swift_release();
      sub_1C003B09C(v172, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
      uint64_t v160 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
      uint64_t v161 = (uint64_t)v58;
LABEL_94:
      sub_1C103F1CC(v161, (unint64_t *)&qword_1EB8948A0, v160);
      goto LABEL_8;
    }
    sub_1C003B09C(v172, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
    (*(void (**)(uint64_t, char *, uint64_t))(v173 + 32))(v199, v58, v128);
LABEL_88:
    uint64_t v91 = (uint64_t)v78;
    return sub_1C103F1CC(v91, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
  }
  uint64_t v89 = v201;
  uint64_t v90 = v199;
LABEL_7:
  sub_1C003B0FC(v89, v90);
LABEL_8:
  uint64_t v91 = (uint64_t)v78;
  return sub_1C103F1CC(v91, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
}

uint64_t sub_1C003B09C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C003B0FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v27 = a2;
  uint64_t v3 = sub_1C1515FDC();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = type metadata accessor for FormatAbsoluteURL();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for FormatURL();
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C003DAC8(v2, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for FormatURL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v17 = *((void *)v15 + 2);
      uint64_t v18 = v28;
      char v29 = *(unsigned char *)(v28 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_config + 1);
      sub_1BFC41040((uint64_t)v6);
      sub_1C1515EDC();
      uint64_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
      v19(v6, v3);
      swift_bridgeObjectRetain();
      sub_1C002F714(v18, v17, v27);
      swift_bridgeObjectRelease();
      v19(v9, v3);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v22 = *(void *)v15;
      uint64_t v23 = *((void *)v15 + 1);
      uint64_t v24 = *((void *)v15 + 2);
      uint64_t v25 = v15[24];
      sub_1C103A8B4(v28, v22, v23, v24, v25, (uint64_t)&OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_options, &OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_bindingStack, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1BFF28A20, v27, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1C001CFA0);
      return sub_1BFD7418C(v22, v23, v24, v25);
    }
  }
  else
  {
    sub_1C003E040((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for FormatAbsoluteURL);
    uint64_t v21 = *(void *)&v12[*(int *)(v10 + 20)];
    swift_bridgeObjectRetain();
    sub_1C002F714(v28, v21, v27);
    swift_bridgeObjectRelease();
    return sub_1C003B09C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for FormatAbsoluteURL);
  }
}

uint64_t FormatResource.imageURL(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1BFF2EBC0(0, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v23 - v7;
  uint64_t v9 = type metadata accessor for FormatRemoteImage();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for FormatResource(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v15 = *(_OWORD *)(a1 + 80);
  v23[4] = *(_OWORD *)(a1 + 64);
  v23[5] = v15;
  uint64_t v24 = *(void *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 16);
  v23[0] = *(_OWORD *)a1;
  v23[1] = v16;
  long long v17 = *(_OWORD *)(a1 + 48);
  void v23[2] = *(_OWORD *)(a1 + 32);
  v23[3] = v17;
  sub_1C003DAC8(v2, (uint64_t)v14, type metadata accessor for FormatResource);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1C003E040((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
    sub_1C003DFA4((uint64_t)v23);
    sub_1C1517EFC();
    sub_1C003DF0C((uint64_t)v23);
    double v18 = *(double *)(v25 + 24);
    swift_release();
    uint64_t v19 = sub_1C1517ADC();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, 1, 1, v19);
    sub_1C003B768(v23, (uint64_t)v8, a2, v18);
    sub_1C103F1CC((uint64_t)v8, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
    uint64_t result = sub_1C003B09C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
    if (!v3)
    {
      uint64_t v21 = sub_1C1515FDC();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a2, 0, 1, v21);
    }
  }
  else
  {
    uint64_t v22 = sub_1C1515FDC();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(a2, 1, 1, v22);
    return sub_1C003B09C((uint64_t)v14, type metadata accessor for FormatResource);
  }
  return result;
}

uint64_t sub_1C003B768@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v200 = a1;
  uint64_t v202 = (char *)a2;
  uint64_t v198 = a3;
  unint64_t v197 = (int *)type metadata accessor for FormatRemoteImage();
  MEMORY[0x1F4188790](v197);
  v177[1] = (char *)v177 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v180 = (char *)v177 - v7;
  MEMORY[0x1F4188790](v8);
  uint64_t v185 = (char *)v177 - v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v181 = (uint64_t)v177 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v184 = (uint64_t)v177 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v188 = (uint64_t)v177 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v183 = (uint64_t)v177 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v187 = (uint64_t)v177 - v19;
  MEMORY[0x1F4188790](v20);
  uint64_t v189 = (uint64_t)v177 - v21;
  sub_1BFF2EBC0(0, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v178 = (uint64_t)v177 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  char v196 = (char *)v177 - v25;
  MEMORY[0x1F4188790](v26);
  uint64_t v195 = (char *)v177 - v27;
  MEMORY[0x1F4188790](v28);
  uint64_t v182 = (uint64_t)v177 - v29;
  MEMORY[0x1F4188790](v30);
  BOOL v194 = (char *)v177 - v31;
  MEMORY[0x1F4188790](v32);
  uint64_t v193 = (char *)v177 - v33;
  MEMORY[0x1F4188790](v34);
  uint64_t v186 = (uint64_t)v177 - v35;
  MEMORY[0x1F4188790](v36);
  unint64_t v192 = (char *)v177 - v37;
  MEMORY[0x1F4188790](v38);
  char v191 = (char *)v177 - v39;
  sub_1BFF2EBC0(0, (unint64_t *)&qword_1EB8948A0, MEMORY[0x1E4F276F0]);
  MEMORY[0x1F4188790](v40 - 8);
  uint64_t v179 = (uint64_t)v177 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v42);
  uint64_t v190 = (char *)v177 - v43;
  MEMORY[0x1F4188790](v44);
  uint64_t v46 = (char *)v177 - v45;
  MEMORY[0x1F4188790](v47);
  uint64_t v49 = (char *)v177 - v48;
  MEMORY[0x1F4188790](v50);
  uint64_t v52 = (char *)v177 - v51;
  MEMORY[0x1F4188790](v53);
  long long v55 = (char *)v177 - v54;
  MEMORY[0x1F4188790](v56);
  uint64_t v58 = (char *)v177 - v57;
  MEMORY[0x1F4188790](v59);
  uint64_t v61 = (char *)v177 - v60;
  MEMORY[0x1F4188790](v62);
  uint64_t v64 = (char *)v177 - v63;
  sub_1BFF2EBC0(0, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
  MEMORY[0x1F4188790](v65 - 8);
  MEMORY[0x1F4188790](v66);
  MEMORY[0x1F4188790](v67);
  MEMORY[0x1F4188790](v68);
  MEMORY[0x1F4188790](v69);
  uint64_t v71 = (char *)v177 - v70;
  MEMORY[0x1F4188790](v72);
  uint64_t v78 = (char *)v177 - v74;
  if (a4 < 3.0)
  {
    uint64_t v79 = (uint64_t)v193;
    uint64_t v80 = (uint64_t)v194;
    uint64_t v82 = (uint64_t)v195;
    uint64_t v81 = (uint64_t)v196;
    char v191 = v46;
    unint64_t v192 = v55;
    uint64_t v83 = (uint64_t)v190;
    if (a4 < 2.0)
    {
      if (a4 < 1.0) {
        return sub_1C003B768(v200, v202, 3.0);
      }
      uint64_t v102 = v76;
      uint64_t v103 = v73;
      sub_1BFE324FC((uint64_t)v202, v73, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
      uint64_t v104 = sub_1C1517ADC();
      uint64_t v105 = *(void *)(v104 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104) == 1)
      {
        sub_1C003D7C8(v200, v198);
        uint64_t v91 = v103;
        return sub_1C103F1CC(v91, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
      }
      uint64_t v202 = (char *)v103;
      sub_1BFE324FC(v103, v102, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
      int v119 = (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 88))(v102, v104);
      uint64_t v120 = v200;
      uint64_t v121 = v201;
      if (v119 == *MEMORY[0x1E4FAB900])
      {
        sub_1BFE324FC(v201 + v197[7], v82, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v122 = type metadata accessor for FormatURL();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v122 - 8) + 48))(v82, 1, v122) == 1)
        {
          sub_1C103F1CC(v82, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
          uint64_t v123 = sub_1C1515FDC();
          uint64_t v92 = (uint64_t)v191;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v123 - 8) + 56))(v191, 1, 1, v123);
LABEL_50:
          uint64_t v150 = v121;
          uint64_t v151 = (uint64_t)v185;
LABEL_98:
          sub_1C003DAC8(v150, v151, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
          sub_1C1515FDC();
          uint64_t v170 = *(void *)(v123 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v170 + 48))(v92, 1, v123) == 1)
          {
            sub_1C003DFA4((uint64_t)v120);
            sub_1C003D7C8(v120, v198);
            sub_1C003DF0C((uint64_t)v120);
            uint64_t v171 = v151;
            goto LABEL_100;
          }
          uint64_t v172 = v151;
          goto LABEL_103;
        }
        uint64_t v92 = (uint64_t)v191;
        uint64_t v149 = v199;
        sub_1C003D7C8(v120, (uint64_t)v191);
        sub_1C003B09C(v82, (uint64_t (*)(void))type metadata accessor for FormatURL);
        if (!v149)
        {
          uint64_t v123 = sub_1C1515FDC();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v123 - 8) + 56))(v92, 0, 1, v123);
          goto LABEL_50;
        }
LABEL_104:
        uint64_t v91 = (uint64_t)v202;
        return sub_1C103F1CC(v91, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
      }
      if (v119 == *MEMORY[0x1E4FAB908])
      {
        sub_1BFE324FC(v201 + v197[13], v81, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v138 = type metadata accessor for FormatURL();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v138 - 8) + 48))(v81, 1, v138) == 1)
        {
          sub_1C103F1CC(v81, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
          uint64_t v123 = sub_1C1515FDC();
          uint64_t v92 = v83;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v123 - 8) + 56))(v83, 1, 1, v123);
        }
        else
        {
          uint64_t v92 = v83;
          uint64_t v165 = v199;
          sub_1C003D7C8(v120, v83);
          if (v165)
          {
            sub_1C003B09C(v81, (uint64_t (*)(void))type metadata accessor for FormatURL);
            goto LABEL_104;
          }
          sub_1C003B09C(v81, (uint64_t (*)(void))type metadata accessor for FormatURL);
          uint64_t v123 = sub_1C1515FDC();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v123 - 8) + 56))(v83, 0, 1, v123);
        }
        uint64_t v150 = v121;
        uint64_t v176 = &v204;
LABEL_97:
        uint64_t v151 = *(v176 - 32);
        goto LABEL_98;
      }
      if (v119 == *MEMORY[0x1E4FAB910])
      {
        uint64_t v85 = v178;
        sub_1BFE324FC(v201 + v197[16], v178, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v153 = type metadata accessor for FormatURL();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v153 - 8) + 48))(v85, 1, v153) == 1)
        {
          sub_1C103F1CC(v85, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
          uint64_t v123 = sub_1C1515FDC();
          uint64_t v92 = v179;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v123 - 8) + 56))(v179, 1, 1, v123);
LABEL_92:
          uint64_t v150 = v121;
          uint64_t v176 = &v203;
          goto LABEL_97;
        }
        uint64_t v92 = v179;
        uint64_t v175 = v199;
        sub_1C003D7C8(v120, v179);
        if (!v175)
        {
          sub_1C003B09C(v85, (uint64_t (*)(void))type metadata accessor for FormatURL);
          uint64_t v123 = sub_1C1515FDC();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v123 - 8) + 56))(v92, 0, 1, v123);
          goto LABEL_92;
        }
LABEL_23:
        sub_1C003B09C(v85, (uint64_t (*)(void))type metadata accessor for FormatURL);
        goto LABEL_104;
      }
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v102, v104);
      uint64_t v155 = v198;
      uint64_t v154 = v120;
LABEL_77:
      sub_1C003D7C8(v154, v155);
      goto LABEL_104;
    }
    uint64_t v92 = (uint64_t)v52;
    uint64_t v93 = v77;
    uint64_t v94 = v75;
    sub_1BFE324FC((uint64_t)v202, v75, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
    uint64_t v95 = sub_1C1517ADC();
    uint64_t v96 = *(void *)(v95 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95) == 1)
    {
      sub_1C003D7C8(v200, v198);
      uint64_t v91 = v94;
      return sub_1C103F1CC(v91, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
    }
    uint64_t v202 = (char *)v94;
    sub_1BFE324FC(v94, v93, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
    int v106 = (*(uint64_t (**)(uint64_t, uint64_t))(v96 + 88))(v93, v95);
    if (v106 == *MEMORY[0x1E4FAB900])
    {
      uint64_t v107 = v201;
      sub_1BFE324FC(v201 + v197[8], v79, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
      uint64_t v108 = type metadata accessor for FormatURL();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 48))(v79, 1, v108) == 1)
      {
        sub_1C103F1CC(v79, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v109 = sub_1C1515FDC();
        uint64_t v110 = (uint64_t)v192;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v109 - 8) + 56))(v192, 1, 1, v109);
        uint64_t v111 = v200;
      }
      else
      {
        uint64_t v110 = (uint64_t)v192;
        uint64_t v135 = v199;
        uint64_t v111 = v200;
        sub_1C003D7C8(v200, (uint64_t)v192);
        if (v135)
        {
          sub_1C003B09C(v79, (uint64_t (*)(void))type metadata accessor for FormatURL);
          goto LABEL_104;
        }
        sub_1C003B09C(v79, (uint64_t (*)(void))type metadata accessor for FormatURL);
        uint64_t v109 = sub_1C1515FDC();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v109 - 8) + 56))(v110, 0, 1, v109);
      }
      uint64_t v156 = v188;
      sub_1C003DAC8(v107, v188, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
      sub_1C1515FDC();
      uint64_t v157 = *(void *)(v109 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v157 + 48))(v110, 1, v109) != 1)
      {
        sub_1C003B09C(v156, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v157 + 32))(v198, v110, v109);
        goto LABEL_104;
      }
      sub_1C003DFA4((uint64_t)v111);
      sub_1C003D7C8(v111, v198);
      sub_1C003DF0C((uint64_t)v111);
      sub_1C003B09C(v156, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
      uint64_t v147 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
      uint64_t v148 = v110;
    }
    else
    {
      if (v106 == *MEMORY[0x1E4FAB908])
      {
        uint64_t v124 = v201;
        sub_1BFE324FC(v201 + v197[14], v80, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v125 = type metadata accessor for FormatURL();
        int v126 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v125 - 8) + 48))(v80, 1, v125);
        uint64_t v127 = v199;
        if (v126 == 1)
        {
          sub_1C103F1CC(v80, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
          uint64_t v123 = sub_1C1515FDC();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v123 - 8) + 56))(v92, 1, 1, v123);
          uint64_t v128 = v200;
        }
        else
        {
          uint64_t v128 = v200;
          sub_1C003D7C8(v200, v92);
          if (v127)
          {
            sub_1C003B09C(v80, (uint64_t (*)(void))type metadata accessor for FormatURL);
            goto LABEL_104;
          }
          sub_1C003B09C(v80, (uint64_t (*)(void))type metadata accessor for FormatURL);
          uint64_t v123 = sub_1C1515FDC();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v123 - 8) + 56))(v92, 0, 1, v123);
        }
        uint64_t v168 = v124;
        uint64_t v169 = v184;
        sub_1C003DAC8(v168, v184, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        sub_1C1515FDC();
        uint64_t v170 = *(void *)(v123 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v170 + 48))(v92, 1, v123) == 1)
        {
          sub_1C003DFA4((uint64_t)v128);
          sub_1C003D7C8(v128, v198);
          sub_1C003DF0C((uint64_t)v128);
          uint64_t v171 = v169;
LABEL_100:
          sub_1C003B09C(v171, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
          uint64_t v147 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
          uint64_t v148 = v92;
          goto LABEL_101;
        }
        uint64_t v172 = v169;
LABEL_103:
        sub_1C003B09C(v172, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v170 + 32))(v198, v92, v123);
        goto LABEL_104;
      }
      uint64_t v139 = v199;
      if (v106 != *MEMORY[0x1E4FAB910])
      {
        (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v93, v95);
        uint64_t v154 = v200;
        uint64_t v155 = v198;
        goto LABEL_77;
      }
      uint64_t v140 = v201;
      uint64_t v85 = v182;
      sub_1BFE324FC(v201 + v197[17], v182, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
      uint64_t v141 = type metadata accessor for FormatURL();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v141 - 8) + 48))(v85, 1, v141) == 1)
      {
        sub_1C103F1CC(v85, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v142 = sub_1C1515FDC();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v142 - 8) + 56))(v49, 1, 1, v142);
        uint64_t v143 = v200;
      }
      else
      {
        uint64_t v143 = v200;
        sub_1C003D7C8(v200, (uint64_t)v49);
        if (v139) {
          goto LABEL_23;
        }
        sub_1C003B09C(v85, (uint64_t (*)(void))type metadata accessor for FormatURL);
        uint64_t v142 = sub_1C1515FDC();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v142 - 8) + 56))(v49, 0, 1, v142);
      }
      uint64_t v166 = v181;
      sub_1C003DAC8(v140, v181, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
      sub_1C1515FDC();
      uint64_t v167 = *(void *)(v142 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48))(v49, 1, v142) != 1)
      {
        sub_1C003B09C(v166, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        (*(void (**)(uint64_t, char *, uint64_t))(v167 + 32))(v198, v49, v142);
        goto LABEL_104;
      }
      sub_1C003DFA4((uint64_t)v143);
      sub_1C003D7C8(v143, v198);
      sub_1C003DF0C((uint64_t)v143);
      sub_1C003B09C(v166, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
      uint64_t v147 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
      uint64_t v148 = (uint64_t)v49;
    }
LABEL_101:
    sub_1C103F1CC(v148, (unint64_t *)&qword_1EB8948A0, v147);
    goto LABEL_104;
  }
  uint64_t v85 = (uint64_t)v191;
  uint64_t v86 = (uint64_t)v192;
  sub_1BFE324FC((uint64_t)v202, (uint64_t)v177 - v74, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
  uint64_t v87 = sub_1C1517ADC();
  uint64_t v88 = *(void *)(v87 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v78, 1, v87) != 1)
  {
    sub_1BFE324FC((uint64_t)v78, (uint64_t)v71, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
    int v97 = (*(uint64_t (**)(char *, uint64_t))(v88 + 88))(v71, v87);
    if (v97 == *MEMORY[0x1E4FAB900])
    {
      uint64_t v202 = v78;
      uint64_t v98 = v201;
      sub_1BFE324FC(v201 + v197[9], v85, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
      uint64_t v99 = type metadata accessor for FormatURL();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 48))(v85, 1, v99) == 1)
      {
        sub_1C103F1CC(v85, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v100 = sub_1C1515FDC();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v64, 1, 1, v100);
        uint64_t v101 = v200;
      }
      else
      {
        uint64_t v118 = v199;
        uint64_t v101 = v200;
        sub_1C003D7C8(v200, (uint64_t)v64);
        if (v118) {
          goto LABEL_23;
        }
        sub_1C003B09C(v85, (uint64_t (*)(void))type metadata accessor for FormatURL);
        uint64_t v100 = sub_1C1515FDC();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v64, 0, 1, v100);
      }
      uint64_t v144 = v98;
      uint64_t v145 = v189;
      sub_1C003DAC8(v144, v189, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
      sub_1C1515FDC();
      uint64_t v146 = *(void *)(v100 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v64, 1, v100) != 1)
      {
        sub_1C003B09C(v145, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        (*(void (**)(uint64_t, char *, uint64_t))(v146 + 32))(v198, v64, v100);
        goto LABEL_104;
      }
      sub_1C003DFA4((uint64_t)v101);
      sub_1C003D7C8(v101, v198);
      sub_1C003DF0C((uint64_t)v101);
      sub_1C003B09C(v145, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
      uint64_t v147 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
      uint64_t v148 = (uint64_t)v64;
      goto LABEL_101;
    }
    if (v97 == *MEMORY[0x1E4FAB908])
    {
      uint64_t v112 = v201;
      sub_1BFE324FC(v201 + v197[15], v86, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
      uint64_t v113 = type metadata accessor for FormatURL();
      int v114 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 48))(v86, 1, v113);
      int v115 = v200;
      if (v114 == 1)
      {
        sub_1C103F1CC(v86, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
        uint64_t v116 = sub_1C1515FDC();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 56))(v61, 1, 1, v116);
        uint64_t v117 = v199;
LABEL_65:
        uint64_t v158 = v112;
        uint64_t v159 = v187;
        sub_1C003DAC8(v158, v187, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        sub_1C1515FDC();
        uint64_t v160 = *(void *)(v116 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48))(v61, 1, v116) == 1)
        {
          sub_1C003DFA4((uint64_t)v115);
          sub_1C003D7C8(v115, v198);
          if (v117)
          {
            sub_1C003DF0C((uint64_t)v115);
            sub_1C003B09C(v159, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
            uint64_t v161 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
            uint64_t v162 = (uint64_t)v61;
LABEL_86:
            sub_1C103F1CC(v162, (unint64_t *)&qword_1EB8948A0, v161);
            uint64_t v91 = (uint64_t)v78;
            return sub_1C103F1CC(v91, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
          }
          sub_1C003DF0C((uint64_t)v115);
          sub_1C003B09C(v159, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
          uint64_t v163 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
          uint64_t v164 = (uint64_t)v61;
          goto LABEL_94;
        }
        sub_1C003B09C(v159, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        (*(void (**)(uint64_t, char *, uint64_t))(v160 + 32))(v198, v61, v116);
        goto LABEL_88;
      }
      uint64_t v136 = v199;
      sub_1C003D7C8(v200, (uint64_t)v61);
      uint64_t v117 = v136;
      if (!v136)
      {
        sub_1C003B09C(v86, (uint64_t (*)(void))type metadata accessor for FormatURL);
        uint64_t v116 = sub_1C1515FDC();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v116 - 8) + 56))(v61, 0, 1, v116);
        goto LABEL_65;
      }
      uint64_t v137 = v86;
LABEL_55:
      sub_1C003B09C(v137, (uint64_t (*)(void))type metadata accessor for FormatURL);
      uint64_t v91 = (uint64_t)v78;
      return sub_1C103F1CC(v91, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
    }
    uint64_t v129 = v200;
    uint64_t v130 = v201;
    if (v97 != *MEMORY[0x1E4FAB910])
    {
      (*(void (**)(char *, uint64_t))(v88 + 8))(v71, v87);
      uint64_t v90 = v198;
      uint64_t v89 = v129;
      goto LABEL_7;
    }
    uint64_t v131 = v186;
    sub_1BFE324FC(v201 + v197[18], v186, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
    uint64_t v132 = type metadata accessor for FormatURL();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v132 - 8) + 48))(v131, 1, v132) == 1)
    {
      sub_1C103F1CC(v131, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
      uint64_t v133 = sub_1C1515FDC();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v133 - 8) + 56))(v58, 1, 1, v133);
      uint64_t v134 = v199;
    }
    else
    {
      uint64_t v152 = v199;
      sub_1C003D7C8(v129, (uint64_t)v58);
      uint64_t v134 = v152;
      if (v152)
      {
        uint64_t v137 = v131;
        goto LABEL_55;
      }
      sub_1C003B09C(v131, (uint64_t (*)(void))type metadata accessor for FormatURL);
      uint64_t v133 = sub_1C1515FDC();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v133 - 8) + 56))(v58, 0, 1, v133);
    }
    uint64_t v173 = v183;
    sub_1C003DAC8(v130, v183, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
    sub_1C1515FDC();
    uint64_t v174 = *(void *)(v133 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v174 + 48))(v58, 1, v133) == 1)
    {
      sub_1C003DFA4((uint64_t)v129);
      sub_1C003D7C8(v129, v198);
      if (v134)
      {
        sub_1C003DF0C((uint64_t)v129);
        sub_1C003B09C(v173, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
        uint64_t v161 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
        uint64_t v162 = (uint64_t)v58;
        goto LABEL_86;
      }
      sub_1C003DF0C((uint64_t)v129);
      sub_1C003B09C(v173, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
      uint64_t v163 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
      uint64_t v164 = (uint64_t)v58;
LABEL_94:
      sub_1C103F1CC(v164, (unint64_t *)&qword_1EB8948A0, v163);
      goto LABEL_8;
    }
    sub_1C003B09C(v173, (uint64_t (*)(void))type metadata accessor for FormatRemoteImage);
    (*(void (**)(uint64_t, char *, uint64_t))(v174 + 32))(v198, v58, v133);
LABEL_88:
    uint64_t v91 = (uint64_t)v78;
    return sub_1C103F1CC(v91, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
  }
  uint64_t v89 = v200;
  uint64_t v90 = v198;
LABEL_7:
  sub_1C003D7C8(v89, v90);
LABEL_8:
  uint64_t v91 = (uint64_t)v78;
  return sub_1C103F1CC(v91, (unint64_t *)&qword_1EB884848, MEMORY[0x1E4FAB918]);
}

uint64_t sub_1C003D7C8@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v27 = a2;
  uint64_t v3 = sub_1C1515FDC();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = type metadata accessor for FormatAbsoluteURL();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for FormatURL();
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C003DAC8(v2, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for FormatURL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v17 = *((void *)v15 + 2);
      uint64_t v18 = v28;
      char v29 = *((unsigned char *)v28 + 9);
      sub_1BFC41040((uint64_t)v6);
      sub_1C1515EDC();
      uint64_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
      v19(v6, v3);
      swift_bridgeObjectRetain();
      sub_1BFC42154((uint64_t)v18, v17, v27);
      swift_bridgeObjectRelease();
      v19(v9, v3);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v22 = *(void *)v15;
      uint64_t v23 = *((void *)v15 + 1);
      uint64_t v24 = *((void *)v15 + 2);
      char v25 = v15[24];
      sub_1C003DB30(v28, v22, v23, v24, v25, v27);
      return sub_1BFD7418C(v22, v23, v24, v25);
    }
  }
  else
  {
    sub_1C003E040((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for FormatAbsoluteURL);
    uint64_t v21 = *(void *)&v12[*(int *)(v10 + 20)];
    swift_bridgeObjectRetain();
    sub_1BFC42154((uint64_t)v28, v21, v27);
    swift_bridgeObjectRelease();
    return sub_1C003B09C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for FormatAbsoluteURL);
  }
}

uint64_t sub_1C003DAC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C003DB30@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v31 = a3;
  uint64_t v28 = a6;
  uint64_t v9 = type metadata accessor for FormatLayoutError();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (uint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BFF2EBC0(0, (unint64_t *)&qword_1EB891010, (void (*)(uint64_t))type metadata accessor for FormatOption);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = type metadata accessor for FormatOption();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a5)
  {
    case 1:
    case 2:
    case 3:
      sub_1BFE7E51C();
      swift_allocError();
      unint64_t v20 = 0xD00000000000006ELL;
      uint64_t v21 = "The prefetch context does not support bound items; You cannot use bindings from items that require prefetching";
      goto LABEL_6;
    case 4:
      sub_1BFE7E51C();
      swift_allocError();
      unint64_t v20 = 0xD00000000000007ALL;
      uint64_t v21 = "The prefetch context does not support bound group items; You cannot use bindings from group items that require prefetching";
LABEL_6:
      unint64_t *v19 = v20;
      v19[1] = (unint64_t)(v21 - 32) | 0x8000000000000000;
      swift_storeEnumTagMultiPayload();
      uint64_t result = swift_willThrow();
      break;
    default:
      sub_1C003DFA4((uint64_t)a1);
      sub_1C1517EFC();
      sub_1C003DF0C((uint64_t)a1);
      swift_retain();
      swift_release();
      FormatOptionCollection.subscript.getter(a2, v31, (uint64_t)v14);
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
      {
        sub_1C103F1CC((uint64_t)v14, (unint64_t *)&qword_1EB891010, (void (*)(uint64_t))type metadata accessor for FormatOption);
        uint64_t v22 = v31;
        *uint64_t v11 = a2;
        v11[1] = v22;
        swift_storeEnumTagMultiPayload();
        sub_1BFE7E51C();
        swift_allocError();
        sub_1C003DAC8((uint64_t)v11, v23, (uint64_t (*)(void))type metadata accessor for FormatLayoutError);
        swift_bridgeObjectRetain();
        swift_willThrow();
        uint64_t v24 = type metadata accessor for FormatLayoutError;
        uint64_t v25 = (uint64_t)v11;
      }
      else
      {
        sub_1C003E040((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for FormatOption);
        swift_retain();
        uint64_t v27 = v30;
        sub_1C0E44D88((uint64_t)a1, &v32);
        swift_release();
        if (!v27)
        {
          sub_1C0E49B04(v32, a2, v31, v29, a1, v28);
          swift_release();
        }
        uint64_t v24 = type metadata accessor for FormatOption;
        uint64_t v25 = (uint64_t)v18;
      }
      uint64_t result = sub_1C003B09C(v25, (uint64_t (*)(void))v24);
      break;
  }
  return result;
}

uint64_t sub_1C003DF0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void **)(a1 + 56);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BFF1EAA0(v2, v3);
  swift_release();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1C003DFA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void **)(a1 + 56);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BFF1E730(v2, v3);
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1C003E040(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C003E0A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_1C103A8B4(a1, a2, a3, a4, a5, (uint64_t)&OBJC_IVAR____TtC8NewsFeed23FormatNodeBinderContext_options, &OBJC_IVAR____TtC8NewsFeed23FormatNodeBinderContext_bindingStack, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1BFF27FB0, a6, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1C001CFA0);
}

uint64_t sub_1C003E100(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for FormatRemoteFont(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for FormatURL();
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v7 = *(void *)v4;
    uint64_t v8 = *(void *)(v4 + 8);
    uint64_t v9 = *(void *)(v4 + 16);
    char v10 = *(unsigned char *)(v4 + 24);
    return sub_1BFD7418C(v7, v8, v9, v10);
  }
  else
  {
    if (result == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      if (result) {
        return result;
      }
      uint64_t v6 = sub_1C1515FDC();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
      type metadata accessor for FormatAbsoluteURL();
    }
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1C003E258(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *initializeWithCopy for FormatRemoteFont(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  type metadata accessor for FormatURL();
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v12 = *(void *)v9;
    uint64_t v13 = *((void *)v9 + 1);
    uint64_t v14 = *((void *)v9 + 2);
    char v15 = v9[24];
    sub_1BFE86E48(v12, v13, v14, v15);
    *(void *)uint64_t v8 = v12;
    *((void *)v8 + 1) = v13;
    *((void *)v8 + 2) = v14;
    v8[24] = v15;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = *((void *)v9 + 1);
      *(void *)uint64_t v8 = *(void *)v9;
      *((void *)v8 + 1) = v11;
      *((void *)v8 + 2) = *((void *)v9 + 2);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v16 = sub_1C1515FDC();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v8, v9, v16);
      uint64_t v17 = type metadata accessor for FormatAbsoluteURL();
      *(void *)&v8[*(int *)(v17 + 20)] = *(void *)&v9[*(int *)(v17 + 20)];
    }
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v19 = (char *)a1 + v18;
  unint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  *((_WORD *)v19 + 4) = *((_WORD *)v20 + 4);
  return a1;
}

uint64_t FormatOptionEnum.init(type:value:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[8];
  uint64_t v9 = a1[9];
  uint64_t v10 = a2[1];
  unsigned int v41 = *((unsigned __int8 *)a1 + 80);
  uint64_t v40 = a1[7];
  if (v41 > 0x3F)
  {
    uint64_t v39 = a1[8];
    uint64_t v33 = a1[2];
    uint64_t v20 = a1[5];
    uint64_t v21 = a1[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for FormatLayoutError();
    sub_1BFE7E51C();
    swift_allocError();
    *(void *)uint64_t v22 = v4;
    *(void *)(v22 + 8) = v21;
    *(void *)(v22 + 16) = v33;
    *(void *)(v22 + 24) = v6;
    *(void *)(v22 + 32) = v5;
    *(void *)(v22 + 40) = v20;
    *(void *)(v22 + 48) = v7;
    *(void *)(v22 + 56) = v40;
    *(void *)(v22 + 64) = v39;
    *(void *)(v22 + 72) = v9;
    *(unsigned char *)(v22 + 80) = v41;
    *(void *)(v22 + 88) = 0xD000000000000025;
    *(void *)(v22 + 96) = 0x80000001C1634B50;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    uint64_t v35 = a1[1];
    uint64_t v28 = *a1;
    uint64_t v11 = *a2;
    int64_t v12 = *(void *)(v5 + 16);
    uint64_t v36 = a2[2];
    uint64_t v37 = a1[5];
    uint64_t v31 = v3;
    uint64_t v32 = *a2;
    if (v12)
    {
      uint64_t v30 = a2[1];
      uint64_t v29 = a1[6];
      uint64_t v38 = a1[8];
      sub_1BFF1DB64(v5, a1[5], v7, a1[7], v8, v9, v41);
      uint64_t v42 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      sub_1BFF661B8(0, v12, 0);
      uint64_t v13 = v42;
      uint64_t v14 = (uint64_t *)(v5 + 40);
      do
      {
        uint64_t v15 = *(v14 - 1);
        uint64_t v16 = *v14;
        unint64_t v17 = *(void *)(v42 + 16);
        unint64_t v18 = *(void *)(v42 + 24);
        swift_bridgeObjectRetain();
        if (v17 >= v18 >> 1) {
          sub_1BFF661B8(v18 > 1, v17 + 1, 1);
        }
        v14 += 6;
        *(void *)(v42 + 16) = v17 + 1;
        unint64_t v19 = v42 + 16 * v17;
        *(void *)(v19 + 32) = v15;
        *(void *)(v19 + 40) = v16;
        --v12;
      }
      while (v12);
      uint64_t v8 = v38;
      uint64_t v7 = v29;
      sub_1BFEC28BC(v5, v37, v29, v40, v38, v9, v41);
      uint64_t v10 = v30;
      uint64_t v11 = v32;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = MEMORY[0x1E4FBC860];
    }
    uint64_t v24 = sub_1BFEF4060(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    char v25 = sub_1BFF896B4(v11, v10, v24);
    swift_bridgeObjectRelease();
    if (v25)
    {
      swift_bridgeObjectRelease();
      sub_1BFEC28BC(v5, v37, v7, v40, v8, v9, v41);
      sub_1BFF1DB64(v5, v37, v7, v40, v8, v9, v41);
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_1C10ED788(v36, v24, v5);
      sub_1BFEC28BC(v5, v37, v7, v40, v8, v9, v41);
      swift_bridgeObjectRelease();
      sub_1BFEC28BC(v5, v37, v7, v40, v8, v9, v41);
      swift_bridgeObjectRelease();
      if (v31)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
        *a3 = v28;
        a3[1] = v35;
        a3[2] = v32;
        a3[3] = v10;
        a3[4] = v34;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BFEC28BC(v5, v37, v7, v40, v8, v9, v41);
      type metadata accessor for FormatLayoutError();
      sub_1BFE7E51C();
      swift_allocError();
      uint64_t *v26 = v11;
      v26[1] = v10;
      v26[2] = v5;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a1[3];
  uint64_t v48 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v10 = a1[7];
  uint64_t v9 = a1[8];
  uint64_t v11 = a1[9];
  uint64_t v47 = a2[1];
  int64_t v12 = a2[3];
  uint64_t v46 = *((unsigned __int8 *)a1 + 80);
  if (v46 > 0x3F)
  {
    uint64_t v44 = a1[9];
    unint64_t v17 = a1[2];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for FormatLayoutError();
    sub_1BFE7E51C();
    swift_allocError();
    *(void *)unint64_t v18 = v5;
    *(void *)(v18 + 8) = v4;
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = v6;
    *(void *)(v18 + 32) = v48;
    *(void *)(v18 + 40) = v8;
    *(void *)(v18 + 48) = v7;
    *(void *)(v18 + 56) = v10;
    *(void *)(v18 + 64) = v9;
    *(void *)(v18 + 72) = v44;
    *(unsigned char *)(v18 + 80) = v46;
    *(void *)(v18 + 88) = 0xD000000000000025;
    *(void *)(v18 + 96) = 0x80000001C1634B50;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  uint64_t v42 = a1[8];
  uint64_t v43 = a1[5];
  uint64_t v39 = a2[4];
  uint64_t v40 = a1[7];
  uint64_t v13 = *a2;
  uint64_t v37 = v3;
  uint64_t v38 = a2[2];
  if (v5 == *a2 && v4 == v47)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v9;
    uint64_t v15 = v7;
    uint64_t v16 = v40;
    sub_1BFEC28BC(v48, v43, v7, v40, v42, v11, v46);
  }
  else
  {
    uint64_t v20 = sub_1C1520A9C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v9;
    uint64_t v15 = v7;
    uint64_t v16 = v40;
    sub_1BFEC28BC(v48, v43, v7, v40, v42, v11, v46);
    if ((v20 & 1) == 0)
    {
      type metadata accessor for FormatLayoutError();
      sub_1BFE7E51C();
      swift_allocError();
      *uint64_t v33 = v13;
      v33[1] = v47;
      v33[2] = v48;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v34 = v13;
  uint64_t v21 = *(void *)(v48 + 16);
  uint64_t v22 = MEMORY[0x1E4FBC860];
  if (v21)
  {
    uint64_t v45 = v11;
    uint64_t v35 = v12;
    uint64_t v49 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1BFF661B8(0, v21, 0);
    uint64_t v22 = v49;
    uint64_t v23 = (uint64_t *)(v48 + 40);
    uint64_t v24 = v38;
    do
    {
      char v25 = *(v23 - 1);
      uint64_t v26 = *v23;
      uint64_t v28 = *(void *)(v49 + 16);
      uint64_t v27 = *(void *)(v49 + 24);
      swift_bridgeObjectRetain();
      if (v28 >= v27 >> 1) {
        sub_1BFF661B8(v27 > 1, v28 + 1, 1);
      }
      v23 += 6;
      *(void *)(v49 + 16) = v28 + 1;
      uint64_t v29 = v49 + 16 * v28;
      *(void *)(v29 + 32) = v25;
      *(void *)(v29 + 40) = v26;
      --v21;
    }
    while (v21);
    uint64_t v14 = v42;
    uint64_t v16 = v40;
    uint64_t v11 = v45;
    sub_1BFEC28BC(v48, v43, v15, v40, v42, v45, v46);
    int64_t v12 = v35;
  }
  else
  {
    uint64_t v24 = v38;
  }
  uint64_t v30 = sub_1BFEF4060(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v31 = sub_1BFF896B4(v24, v12, v30);
  swift_bridgeObjectRelease();
  if (v31)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1BFF1DB64(v48, v43, v15, v16, v14, v11, v46);
    swift_bridgeObjectRetain();
    unsigned int v41 = sub_1C10ED788(v39, v30, v48);
    sub_1BFEC28BC(v48, v43, v15, v16, v14, v11, v46);
    swift_bridgeObjectRelease();
    sub_1BFEC28BC(v48, v43, v15, v16, v14, v11, v46);
    swift_bridgeObjectRelease();
    if (v37)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      *a3 = v34;
      a3[1] = v47;
      a3[2] = v38;
      a3[3] = v12;
      a3[4] = v41;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for FormatLayoutError();
    sub_1BFE7E51C();
    swift_allocError();
    *uint64_t v32 = v24;
    v32[1] = v12;
    v32[2] = v48;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1C003E84C(unint64_t *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  long long v7 = *(_OWORD *)(a2 + 80);
  v24[4] = *(_OWORD *)(a2 + 64);
  v24[5] = v7;
  uint64_t v25 = *(void *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 16);
  v24[0] = *(_OWORD *)a2;
  v24[1] = v8;
  long long v9 = *(_OWORD *)(a2 + 48);
  v24[2] = *(_OWORD *)(a2 + 32);
  v24[3] = v9;
  sub_1BFF0D1B8(a1, a2);
  if (!v3)
  {
    swift_beginAccess();
    uint64_t v10 = v2[9];
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain_n();
      for (uint64_t i = 0; i != v11; ++i)
      {
        unint64_t v13 = *(void *)(v10 + 8 * i + 32);
        sub_1BFF32264(v13);
        sub_1BFF0D378((uint64_t)a1, a2);
        sub_1BFF31E90(v13);
      }
      swift_bridgeObjectRelease_n();
    }
    if (v2[10]) {
      sub_1C003EB00(a1, a2);
    }
    uint64_t v14 = v2[11];
    if (v14)
    {
      swift_beginAccess();
      uint64_t v15 = *(void *)(v14 + 72);
      if (v15)
      {
        swift_bridgeObjectRetain();
        sub_1C0000E48((uint64_t)a1, (uint64_t)v24, v15);
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      uint64_t v16 = *(void *)(v14 + 88);
      uint64_t v17 = *(void *)(v16 + 16);
      if (v17)
      {
        swift_bridgeObjectRetain_n();
        unint64_t v18 = (uint64_t *)(v16 + 72);
        do
        {
          uint64_t v19 = *v18;
          if (*v18)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1C0000E48((uint64_t)a1, (uint64_t)v24, v19);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v18 += 7;
          --v17;
        }
        while (v17);
        swift_bridgeObjectRelease_n();
      }
    }
    swift_beginAccess();
    unint64_t v20 = v4[13];
    if (v20 >> 62 == 1)
    {
      uint64_t v21 = v20 & 0x3FFFFFFFFFFFFFFFLL;
      unint64_t v22 = *(void *)(v21 + 16);
      uint64_t v23 = *(void *)(v21 + 24);
      sub_1BFE6FA30(v22);
      swift_bridgeObjectRetain();
      sub_1C1144E0C((uint64_t)a1, (uint64_t)v24, v22, v23);
      sub_1BFF0056C(v22);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1C003EB00(unint64_t *a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for FormatOption() - 8;
  MEMORY[0x1F4188790](v6);
  long long v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v10 = *(_OWORD *)(a2 + 80);
  v20[4] = *(_OWORD *)(a2 + 64);
  v20[5] = v10;
  uint64_t v21 = *(void *)(a2 + 96);
  long long v11 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v11;
  long long v12 = *(_OWORD *)(a2 + 48);
  v20[2] = *(_OWORD *)(a2 + 32);
  v20[3] = v12;
  uint64_t v13 = *(void *)(v2 + 56);
  if (v13 && (uint64_t v14 = *(void *)(v13 + 16)) != 0)
  {
    v19[0] = v2;
    uint64_t v15 = v13 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v16 = *(void *)(v7 + 72);
    uint64_t v22 = v13;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1BFF83CC4(v15, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for FormatOption);
      v19[1] = *((void *)v9 + 2);
      swift_retain();
      sub_1BFF2871C(a1, a2);
      if (v3) {
        break;
      }
      swift_release();
      sub_1C05DDC60((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for FormatOption);
      v15 += v16;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = v19[0];
        goto LABEL_7;
      }
    }
    swift_release();
    sub_1C05DDC60((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for FormatOption);
  }
  else
  {
LABEL_7:
    swift_beginAccess();
    uint64_t v17 = *(void *)(v2 + 64);
    swift_bridgeObjectRetain();
    sub_1C003ED08(a1, (uint64_t)v20, v17);
  }
  return swift_bridgeObjectRelease();
}

void sub_1C003ED08(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a1;
  uint64_t v7 = type metadata accessor for FormatOption();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7 - 8);
  long long v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11)
  {
    uint64_t v12 = a3 + 32;
    uint64_t v26 = a3;
    swift_bridgeObjectRetain();
    uint64_t v13 = 0;
    uint64_t v24 = v11;
    uint64_t v25 = v8;
    uint64_t v23 = a3 + 32;
    while (1)
    {
      uint64_t v14 = v12 + 32 * v13;
      uint64_t v15 = *(void *)(v14 + 24);
      if (v15)
      {
        uint64_t v16 = *(void *)(v15 + 16);
        if (v16) {
          break;
        }
      }
LABEL_3:
      if (++v13 == v11)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    uint64_t v17 = v15 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v27 = *(void *)(v14 + 8);
    swift_bridgeObjectRetain();
    uint64_t v28 = v15;
    swift_bridgeObjectRetain_n();
    uint64_t v18 = *(void *)(v8 + 72);
    while (1)
    {
      sub_1C1147A28(v17, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for FormatOption);
      uint64_t v32 = *((void *)v10 + 2);
      long long v19 = *(_OWORD *)(a2 + 80);
      v30[4] = *(_OWORD *)(a2 + 64);
      v30[5] = v19;
      uint64_t v31 = *(void *)(a2 + 96);
      long long v20 = *(_OWORD *)(a2 + 16);
      v30[0] = *(_OWORD *)a2;
      v30[1] = v20;
      long long v21 = *(_OWORD *)(a2 + 48);
      v30[2] = *(_OWORD *)(a2 + 32);
      v30[3] = v21;
      swift_retain();
      sub_1BFF2871C(v29, (uint64_t)v30);
      if (v4) {
        break;
      }
      swift_release();
      sub_1C1147B04((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for FormatOption);
      v17 += v18;
      if (!--v16)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t v11 = v24;
        uint64_t v8 = v25;
        uint64_t v12 = v23;
        goto LABEL_3;
      }
    }
    swift_release();
    sub_1C1147B04((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for FormatOption);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_1C003EF50@<X0>(uint64_t a1@<X8>)
{
  return sub_1BFEFE7C8(&qword_1EB887658, (uint64_t)qword_1EB93CAF8, a1);
}

uint64_t sub_1C003EF74@<X0>(uint64_t a1@<X8>)
{
  return sub_1BFEFE7C8(&qword_1EB887600, (uint64_t)qword_1EB93CA08, a1);
}

uint64_t type metadata accessor for FormatEquation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C003EFB0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[5];
  uint64_t v26 = *a1;
  uint64_t v27 = a1[4];
  uint64_t v28 = a1[2];
  uint64_t v29 = a1[6];
  uint64_t v31 = a1[7];
  uint64_t v32 = a1[8];
  uint64_t v33 = a1[9];
  uint64_t v8 = (int *)type metadata accessor for FormatContent.Resolved();
  uint64_t v9 = v8[5];
  uint64_t v10 = v3 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_1C151631C();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v11, v10, v12);
  uint64_t v30 = *(void **)(v3 + v8[12]);
  uint64_t v24 = *(void *)(v3 + v8[11]);
  uint64_t v25 = *(void *)(v3 + v8[13]);
  sub_1C0BF9308(v3 + v8[14], (uint64_t)a2 + v8[14], (uint64_t (*)(void))sub_1BFEE6554);
  char v23 = *(unsigned char *)(v3 + v8[16]);
  long long v21 = *(void **)(v3 + v8[15]);
  uint64_t v22 = *(void *)(v3 + v8[17]);
  uint64_t v19 = *(void *)(v3 + v8[6]);
  uint64_t v20 = *(void *)(v3 + v8[7]);
  sub_1BFEF9B1C(0, (unint64_t *)&unk_1EB890430, (uint64_t)&type metadata for FormatContentSubgroup.ResolvedContainer, MEMORY[0x1E4FBBE00]);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1C1529AE0;
  *(void *)(v13 + 32) = v26;
  *(void *)(v13 + 40) = v5;
  *(void *)(v13 + 48) = v28;
  *(void *)(v13 + 56) = v6;
  *(void *)(v13 + 64) = v27;
  *(void *)(v13 + 72) = v7;
  *(void *)(v13 + 80) = v29;
  *(void *)(v13 + 88) = v31;
  *(void *)(v13 + 96) = v32;
  *(void *)(v13 + 104) = v33;
  uint64_t v14 = *(void *)(v3 + v8[9]);
  uint64_t v15 = *(void *)(v3 + v8[10]);
  sub_1C0BF9308(v3 + v8[18], (uint64_t)a2 + v8[18], (uint64_t (*)(void))sub_1BFEE3854);
  *a2 = v26;
  a2[1] = v5;
  *(void *)((char *)a2 + v8[6]) = v19;
  *(void *)((char *)a2 + v8[7]) = v20;
  *(void *)((char *)a2 + v8[8]) = v13;
  *(void *)((char *)a2 + v8[9]) = v14;
  *(void *)((char *)a2 + v8[11]) = v24;
  *(void *)((char *)a2 + v8[12]) = v30;
  *(void *)((char *)a2 + v8[13]) = v25;
  *(void *)((char *)a2 + v8[15]) = v21;
  *((unsigned char *)a2 + v8[16]) = v23;
  *(void *)((char *)a2 + v8[17]) = v22;
  *(void *)((char *)a2 + v8[10]) = v15;
  id v16 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v17 = v30;
  return swift_unknownObjectRetain();
}

unint64_t sub_1C003F294()
{
  unint64_t result = qword_1EB873D58;
  if (!qword_1EB873D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873D58);
  }
  return result;
}

unint64_t sub_1C003F2E8()
{
  unint64_t result = qword_1EB886EE0;
  if (!qword_1EB886EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886EE0);
  }
  return result;
}

unint64_t sub_1C003F33C()
{
  unint64_t result = qword_1EB85B558;
  if (!qword_1EB85B558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B558);
  }
  return result;
}

uint64_t type metadata accessor for CachedText()
{
  return __swift_instantiateGenericMetadata();
}

void sub_1C003F3A8()
{
  if (!qword_1EB871328)
  {
    sub_1C151789C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB871328);
    }
  }
}

void sub_1C003F414()
{
  if (!qword_1EB884CF8)
  {
    sub_1C1515FDC();
    sub_1C0074218();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB884CF8);
    }
  }
}

uint64_t sub_1C003F488(uint64_t a1, unsigned __int16 a2)
{
  char v6 = a2 & 1;
  v5[3] = type metadata accessor for FormatNodeContext();
  v5[4] = &off_1F1BFC148;
  v5[0] = a1;
  swift_retain();
  sub_1C003F530(v5, &v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  swift_bridgeObjectRelease();
  return HIBYTE(a2) & 1;
}

void *sub_1C003F530@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  void *(*v11)(_OWORD *__return_ptr, ValueMetadata *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  void *result;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  _OWORD v46[2];
  uint64_t v47;
  unint64_t v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  _OWORD v56[2];
  _OWORD v57[7];
  _OWORD v58[3];

  uint64_t v38 = a2;
  uint64_t v5 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v2;
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  if (v8)
  {
    uint64_t v11 = *(void *(**)(_OWORD *__return_ptr, ValueMetadata *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v10 + 32);
    uint64_t v12 = sub_1BFEB031C();
    unint64_t result = v11(v57, &type metadata for FeedIssue, &type metadata for FeedIssue, v12, v9, v10);
    if (v3) {
      return result;
    }
    long long v55 = v57[6];
    v56[0] = v58[0];
    *(_OWORD *)((char *)v56 + 9) = *(_OWORD *)((char *)v58 + 9);
    uint64_t v49 = v57[0];
    uint64_t v50 = v57[1];
    uint64_t v51 = v57[2];
    uint64_t v52 = v57[3];
    uint64_t v53 = v57[4];
    uint64_t v54 = v57[5];
    uint64_t v14 = *(void **)&v57[0];
    uint64_t v15 = objc_msgSend(*(id *)&v57[0], sel_layeredCoverJSON);
    if (v15)
    {
      id v16 = v15;
      id v17 = sub_1C151E62C();
      uint64_t v19 = v18;

      objc_msgSend(v14, sel_layeredCoverAspectRatio);
      long long v21 = v20;
      unint64_t result = (void *)sub_1C01880A4((uint64_t)&v49);
      uint64_t v22 = v38;
      *uint64_t v38 = v17;
LABEL_10:
      v22[1] = v19;
      v22[2] = v21;
      return result;
    }
    type metadata accessor for FormatLayoutError();
    sub_1BFFBA6DC((unint64_t *)&qword_1EB875690, (void (*)(uint64_t))type metadata accessor for FormatLayoutError);
    swift_allocError();
    uint64_t v32 = v31;
    uint64_t v47 = 0;
    uint64_t v48 = 0xE000000000000000;
    uint64_t v45 = v55;
    v46[0] = v56[0];
    *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)((char *)v56 + 9);
    unsigned int v41 = v51;
    uint64_t v42 = v52;
    uint64_t v43 = v53;
    uint64_t v44 = v54;
    uint64_t v39 = v49;
    uint64_t v40 = v50;
    sub_1C152036C();
    uint64_t v33 = v48;
    *uint64_t v32 = v47;
    v32[1] = v33;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return (void *)sub_1C01880A4((uint64_t)&v49);
  }
  else
  {
    char v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 32);
    uint64_t v24 = sub_1BFFBA6DC((unint64_t *)&unk_1EB873778, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
    unint64_t result = (void *)v23(v5, v5, v24, v9, v10);
    if (v3) {
      return result;
    }
    uint64_t v25 = (void *)*((void *)v7 + 5);
    if (objc_msgSend(v25, sel_respondsToSelector_, sel_layeredThumbnailJSON))
    {
      uint64_t v26 = objc_msgSend(v25, sel_layeredThumbnailJSON);
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v28 = sub_1C151E62C();
        uint64_t v19 = v29;

        if (objc_msgSend(v25, sel_respondsToSelector_, sel_layeredThumbnailAspectRatio))
        {
          objc_msgSend(v25, sel_layeredThumbnailAspectRatio);
          long long v21 = v30;
          unint64_t result = (void *)sub_1BFF2F7F4((uint64_t)v7);
          uint64_t v22 = v38;
          *uint64_t v38 = v28;
          goto LABEL_10;
        }
        swift_bridgeObjectRelease();
      }
    }
    type metadata accessor for FormatLayoutError();
    sub_1BFFBA6DC((unint64_t *)&qword_1EB875690, (void (*)(uint64_t))type metadata accessor for FormatLayoutError);
    swift_allocError();
    uint64_t v35 = v34;
    *(void *)&v57[0] = 0;
    *((void *)&v57[0] + 1) = 0xE000000000000000;
    sub_1C152036C();
    uint64_t v36 = *((void *)&v57[0] + 1);
    *uint64_t v35 = *(void *)&v57[0];
    v35[1] = v36;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return (void *)sub_1BFF2F7F4((uint64_t)v7);
  }
}

uint64_t sub_1C003F948(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = v5;
  char v8 = v4;
  swift_beginAccess();
  uint64_t v12 = v4[2];
  uint64_t v13 = v4[3];
  swift_bridgeObjectRetain();
  uint64_t v40 = sub_1BFF303E0(v12, v13);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_bindings + 40);
  if (*(void *)(v16 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_1BFEF2D8C(v40, v15);
    if (v18)
    {
      uint64_t v19 = (uint64_t *)(*(void *)(v16 + 56) + 16 * v17);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      swift_bridgeObjectRelease_n();
      if (v21) {
        goto LABEL_7;
      }
      __break(1u);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v20 = 0;
  uint64_t v21 = 1;
LABEL_7:
  uint64_t result = swift_beginAccess();
  BOOL v23 = v20 >= 0;
  if (v21 > 0) {
    BOOL v23 = v20 < 1;
  }
  if (!v23)
  {
    uint64_t v24 = 0;
    uint64_t v36 = v20;
    uint64_t v37 = v8;
    uint64_t v35 = v21;
    while (1)
    {
      unint64_t v25 = v24 + v21;
      if (__OFADD__(v24, v21)) {
        unint64_t v25 = ((v24 + v21) >> 63) ^ 0x8000000000000000;
      }
      int64_t v38 = v25;
      uint64_t v39 = sub_1C0040638(v20, v21, v24);
      uint64_t v41 = sub_1C0040120(v20, v21, v24);
      uint64_t v42 = (void *)v8[2];
      uint64_t v43 = v8[3];
      swift_bridgeObjectRetain();
      sub_1C151E80C();
      uint64_t v46 = v24;
      sub_1C152088C();
      sub_1C151E80C();
      swift_bridgeObjectRelease();
      sub_1BFF1DD20(v42, v43);
      swift_bridgeObjectRelease();
      uint64_t v26 = (void *)sub_1C152088C();
      sub_1BFF1E298(v26, v27);
      swift_release();
      swift_bridgeObjectRelease();
      sub_1BFF20000(v39);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v28 = sub_1BFF1B2E4(v41, 0);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v29 = v8[11];
      uint64_t v30 = *(void *)(v29 + 16);
      if (v30) {
        break;
      }
      uint64_t result = swift_release();
LABEL_19:
      uint64_t v20 = v36;
      char v8 = v37;
      uint64_t v21 = v35;
      uint64_t v24 = v38;
      BOOL v34 = v36 >= v38;
      if (v35 > 0) {
        BOOL v34 = v38 >= v36;
      }
      if (v34) {
        return result;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v31 = 32;
    while (1)
    {
      long long v32 = *(_OWORD *)(v29 + v31);
      long long v33 = *(_OWORD *)(v29 + v31 + 16);
      uint64_t v45 = *(void *)(v29 + v31 + 32);
      v44[0] = v32;
      v44[1] = v33;
      sub_1BFF1BDBC((uint64_t)v44);
      a4(a1, v28, a3);
      if (v7) {
        break;
      }
      sub_1BFF1BD7C((uint64_t)v44);
      v31 += 40;
      if (!--v30)
      {
        swift_release();
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return sub_1BFF1BD7C((uint64_t)v44);
  }
  return result;
}

uint64_t FormatRepeatNode.bind(binder:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(void *)(v4 + 32);
  if (*(unsigned char *)(v4 + 40))
  {
    uint64_t v36 = a1;
    swift_bridgeObjectRetain();
    sub_1C1517EFC();
    int64_t v7 = sub_1BFF45118(v37, v6);
    swift_release();
    uint64_t result = sub_1C0042624(v6, 1);
    if (v3) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v9 = sub_1BFF76714(0x7FFFFFFFFFFFFFFFLL, a2);
  if (v3)
  {
    if (v6) {
      return swift_willThrow();
    }
    uint64_t v36 = a1;

    int64_t v7 = 0;
LABEL_7:
    uint64_t v10 = *(void *)(v4 + 48);
    if (v10) {
      goto LABEL_8;
    }
LABEL_11:
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(v4 + 56);
    if (!v13) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  uint64_t v36 = a1;
  int64_t v7 = *(void *)(v9 + 16);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v4 + 48);
  if (!v10) {
    goto LABEL_11;
  }
LABEL_8:
  swift_bridgeObjectRetain();
  sub_1C1517EFC();
  int64_t v11 = sub_1BFF45118(v37, v10);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v12 = v11 & ~(v11 >> 63);
  uint64_t v13 = *(void *)(v4 + 56);
  if (!v13)
  {
LABEL_9:
    int64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_13;
  }
LABEL_12:
  swift_bridgeObjectRetain();
  sub_1C1517EFC();
  int64_t v14 = sub_1BFF45118(v37, v13);
  swift_bridgeObjectRelease();
  swift_release();
LABEL_13:
  uint64_t v15 = *(void *)(v4 + 64);
  if (v15)
  {
    swift_bridgeObjectRetain();
    sub_1C1517EFC();
    int64_t v16 = sub_1BFF45118(v37, v15);
    swift_bridgeObjectRelease();
    swift_release();
    if (v16 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v16;
    }
  }
  else
  {
    uint64_t v17 = 1;
  }
  if (v7 <= v12) {
    int64_t v18 = v12;
  }
  else {
    int64_t v18 = v7;
  }
  if (v18 >= v14) {
    uint64_t v19 = v14;
  }
  else {
    uint64_t v19 = v18;
  }
  swift_beginAccess();
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = *(void *)(v4 + 24);
  uint64_t v48 = v4;
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1BFF303E0(v20, v21);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v47[0] = *(void *)(v36 + 64);
  *(void *)(v36 + 64) = 0x8000000000000000;
  sub_1C0042690(v19, v17, v22, v24, isUniquelyReferenced_nonNull_native);
  *(void *)(v36 + 64) = *(void *)&v47[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t result = swift_bridgeObjectRelease();
  if (v19 >= 1)
  {
    uint64_t v26 = v17;
    uint64_t v27 = 0;
    do
    {
      uint64_t v28 = sub_1C0040638(v19, v26, v27);
      uint64_t v29 = v19;
      uint64_t v30 = sub_1C0040120(v19, v26, v27);
      uint64_t v31 = *(void *)(v48 + 24);
      uint64_t v37 = *(void *)(v48 + 16);
      uint64_t v38 = v31;
      swift_bridgeObjectRetain();
      sub_1C151E80C();
      *(void *)&v47[0] = v27;
      sub_1C152088C();
      sub_1C151E80C();
      swift_bridgeObjectRelease();
      uint64_t v32 = v37;
      uint64_t v33 = v38;
      memset(v47, 0, sizeof(v47));
      uint64_t v46 = 0;
      memset(v45, 0, sizeof(v45));
      memset(v44, 0, sizeof(v44));
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 1;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      uint64_t v43 = 0;
      uint64_t v34 = sub_1C0EC66B4(v32, v33, v28, v30, 0, 0, 0, MEMORY[0x1E4FBC860], (uint64_t *)v47, (uint64_t)v45, (uint64_t *)v44, (unint64_t *)&v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BFF19770((uint64_t)v45);
      FormatRepeatNode.bindChildren(binder:context:)(v36, v34);
      uint64_t result = swift_release();
      uint64_t v35 = v27 + v26;
      if (__OFADD__(v27, v26)) {
        break;
      }
      v27 += v26;
      uint64_t v19 = v29;
    }
    while (v35 < v29);
  }
  return result;
}

uint64_t sub_1C0040120(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v15 = MEMORY[0x1E4FBC870];
  uint64_t v6 = a3 & 1;
  if (a3 < 0) {
    uint64_t v6 = -v6;
  }
  if (v6 == 1)
  {
    uint64_t v7 = 0x6C6968632D64646FLL;
    uint64_t v8 = 0xE900000000000064;
  }
  else
  {
    if (v6) {
      goto LABEL_8;
    }
    uint64_t v7 = 0x6968632D6E657665;
    uint64_t v8 = 0xEA0000000000646CLL;
  }
  sub_1BFEFFC1C(v14, v7, v8);
  uint64_t result = swift_bridgeObjectRelease();
LABEL_8:
  if (__OFSUB__(v5, 1))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v5 - 1 == a3)
  {
    sub_1BFEFFC1C(v14, 0x6968632D7473616CLL, 0xEA0000000000646CLL);
    swift_bridgeObjectRelease();
  }
  if (!a3)
  {
    sub_1BFEFFC1C(v14, 0x68632D7473726966, 0xEB00000000646C69);
    swift_bridgeObjectRelease();
  }
  v14[0] = 0x2D7865646E69;
  v14[1] = 0xE600000000000000;
  sub_1C152088C();
  sub_1C151E80C();
  swift_bridgeObjectRelease();
  sub_1C151E80C();
  sub_1BFEFFC1C(v14, v14[0], v14[1]);
  swift_bridgeObjectRelease();
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  sub_1C15200FC();
  uint64_t result = swift_bridgeObjectRelease();
  strcpy((char *)v14, "reverse-index-");
  HIBYTE(v14[1]) = -18;
  if (__OFSUB__(v5, a3)) {
    goto LABEL_33;
  }
  if (__OFSUB__(v5 - a3, 1))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  sub_1C152088C();
  sub_1C151E80C();
  swift_bridgeObjectRelease();
  sub_1C151E80C();
  sub_1BFEFFC1C(v14, v14[0], v14[1]);
  swift_bridgeObjectRelease();
  strcpy((char *)v14, "stride-");
  v14[1] = 0xE700000000000000;
  sub_1C152088C();
  sub_1C151E80C();
  swift_bridgeObjectRelease();
  sub_1C151E80C();
  sub_1BFEFFC1C(v14, v14[0], v14[1]);
  uint64_t result = swift_bridgeObjectRelease();
  if (!a2)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (a3 == 0x8000000000000000 && a2 == -1) {
    goto LABEL_38;
  }
  uint64_t v9 = a3 / a2;
  uint64_t v10 = (a3 / a2) & 1;
  if (a3 / a2 < 0) {
    uint64_t v10 = -v10;
  }
  if (v10 == 1)
  {
    uint64_t v12 = 0xD000000000000010;
    uint64_t v11 = 0x80000001C163E670;
  }
  else
  {
    if (v10) {
      goto LABEL_25;
    }
    uint64_t v11 = 0x80000001C163E690;
    uint64_t v12 = 0xD000000000000011;
  }
  sub_1BFEFFC1C(v14, v12, v11);
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v13 = v5 / a2;
  if (v9 == v13 - 1)
  {
    sub_1BFEFFC1C(v14, 0xD000000000000011, 0x80000001C163E650);
    swift_bridgeObjectRelease();
  }
  if (!a3)
  {
    sub_1BFEFFC1C(v14, 0xD000000000000012, 0x80000001C163E630);
    swift_bridgeObjectRelease();
  }
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  sub_1C15200FC();
  swift_bridgeObjectRelease();
  strcpy((char *)v14, "stride-index-");
  HIWORD(v14[1]) = -4864;
  sub_1C152088C();
  sub_1C151E80C();
  swift_bridgeObjectRelease();
  sub_1C151E80C();
  sub_1BFEFFC1C(v14, v14[0], v14[1]);
  swift_bridgeObjectRelease();
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  sub_1C15200FC();
  uint64_t result = swift_bridgeObjectRelease();
  v14[0] = 0xD000000000000015;
  v14[1] = 0x80000001C163E610;
  if (!__OFSUB__(v13, v9))
  {
    if (!__OFSUB__(v13 - v9, 1))
    {
      sub_1C152088C();
      sub_1C151E80C();
      swift_bridgeObjectRelease();
      sub_1C151E80C();
      sub_1BFEFFC1C(v14, v14[0], v14[1]);
      swift_bridgeObjectRelease();
      return v15;
    }
    goto LABEL_37;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1C0040638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v199 = a2;
  uint64_t v200 = a3;
  uint64_t v198 = a1;
  uint64_t v202 = type metadata accessor for FormatVersionRequirement(0);
  uint64_t v209 = *(void *)(v202 - 8);
  MEMORY[0x1F4188790](v202);
  uint64_t v187 = (char *)&v185 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v185 - v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v190 = (uint64_t)&v185 - v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v185 = (char *)&v185 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v189 = (uint64_t)&v185 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v191 = (uint64_t)&v185 - v15;
  MEMORY[0x1F4188790](v16);
  unint64_t v192 = (char *)&v185 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v193 = (uint64_t)&v185 - v19;
  MEMORY[0x1F4188790](v20);
  uint64_t v196 = (uint64_t)&v185 - v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v195 = (uint64_t)&v185 - v23;
  MEMORY[0x1F4188790](v24);
  uint64_t v194 = (uint64_t)&v185 - v25;
  MEMORY[0x1F4188790](v26);
  uint64_t v197 = (uint64_t)&v185 - v27;
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v185 - v29;
  MEMORY[0x1F4188790](v31);
  uint64_t v33 = (uint64_t)&v185 - v32;
  MEMORY[0x1F4188790](v34);
  uint64_t v36 = (char *)&v185 - v35;
  sub_1BFF1FD00(0, &qword_1EB87A6B0, (uint64_t (*)(uint64_t))sub_1BFF9544C, MEMORY[0x1E4FBBE00]);
  uint64_t v208 = swift_allocObject();
  *(_OWORD *)(v208 + 16) = xmmword_1C15EBEB0;
  if (qword_1EB8875F8 != -1) {
    swift_once();
  }
  uint64_t v188 = v30;
  uint64_t v186 = v7;
  uint64_t v37 = 0x746E756F63;
  uint64_t v38 = sub_1C151928C();
  uint64_t v39 = __swift_project_value_buffer(v38, (uint64_t)qword_1EB93C9F0);
  uint64_t v40 = *(void *)(v38 - 8);
  uint64_t v41 = v39;
  uint64_t v206 = *(void (**)(char *))(v40 + 16);
  uint64_t v207 = v38;
  uint64_t v205 = v40 + 16;
  v206(v36);
  uint64_t v204 = type metadata accessor for FormatVersionRequirement.Value(0);
  swift_storeEnumTagMultiPayload();
  unint64_t v42 = *(void *)(v3 + 72);
  unint64_t v43 = *(void *)(v3 + 80);
  unint64_t v201 = v42;
  if (v43)
  {
    unint64_t v210 = v42;
    unint64_t v211 = v43;
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    uint64_t v37 = v210;
    unint64_t v44 = v211;
  }
  else
  {
    unint64_t v44 = 0xE500000000000000;
  }
  uint64_t v45 = 0x656469727473;
  uint64_t v46 = type metadata accessor for FormatOption();
  uint64_t v47 = swift_allocBox();
  uint64_t v49 = v48;
  uint64_t v50 = swift_allocObject();
  uint64_t v51 = MEMORY[0x1E4FBC860];
  *(void *)(v50 + 16) = v198;
  *(void *)(v50 + 24) = v51;
  *uint64_t v49 = v37;
  v49[1] = v44;
  v49[2] = v50 | 0x4000000000000000;
  v49[3] = 1;
  uint64_t v52 = (uint64_t)v49 + *(int *)(v46 + 28);
  sub_1C13DCAE8((uint64_t)v36, v52, type metadata accessor for FormatVersionRequirement);
  uint64_t v53 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v209 + 56);
  v209 += 56;
  uint64_t v203 = v53;
  v53(v52, 0, 1, v202);
  uint64_t v54 = v207;
  *(void *)(v208 + 32) = v47;
  ((void (*)(uint64_t, uint64_t, uint64_t))v206)(v33, v41, v54);
  swift_storeEnumTagMultiPayload();
  if (v43)
  {
    unint64_t v210 = v201;
    unint64_t v211 = v43;
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    uint64_t v45 = v210;
    unint64_t v55 = v211;
  }
  else
  {
    unint64_t v55 = 0xE600000000000000;
  }
  uint64_t v56 = (uint64_t)v188;
  uint64_t v57 = 0x7865646E69;
  uint64_t v58 = swift_allocBox();
  uint64_t v60 = v59;
  uint64_t v61 = swift_allocObject();
  *(void *)(v61 + 16) = v199;
  *(void *)(v61 + 24) = MEMORY[0x1E4FBC860];
  *uint64_t v60 = v45;
  v60[1] = v55;
  v60[2] = v61 | 0x4000000000000000;
  v60[3] = 1;
  uint64_t v62 = (uint64_t)v60 + *(int *)(v46 + 28);
  sub_1C13DCAE8(v33, v62, type metadata accessor for FormatVersionRequirement);
  v203(v62, 0, 1, v202);
  uint64_t v63 = v207;
  *(void *)(v208 + 40) = v58;
  ((void (*)(uint64_t, uint64_t, uint64_t))v206)(v56, v41, v63);
  swift_storeEnumTagMultiPayload();
  if (v43)
  {
    unint64_t v210 = v201;
    unint64_t v211 = v43;
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    uint64_t v57 = v210;
    unint64_t v64 = v211;
  }
  else
  {
    unint64_t v64 = 0xE500000000000000;
  }
  uint64_t v65 = 1953718636;
  uint64_t v66 = swift_allocBox();
  uint64_t v68 = v67;
  uint64_t v69 = swift_allocObject();
  *(void *)(v69 + 16) = v200;
  *(void *)(v69 + 24) = MEMORY[0x1E4FBC860];
  *uint64_t v68 = v57;
  v68[1] = v64;
  v68[2] = v69 | 0x4000000000000000;
  v68[3] = 1;
  uint64_t v70 = (uint64_t)v68 + *(int *)(v46 + 28);
  sub_1C13DCAE8(v56, v70, type metadata accessor for FormatVersionRequirement);
  v203(v70, 0, 1, v202);
  uint64_t v71 = v207;
  *(void *)(v208 + 48) = v66;
  ((void (*)(uint64_t, uint64_t, uint64_t))v206)(v197, v41, v71);
  swift_storeEnumTagMultiPayload();
  if (v43)
  {
    unint64_t v72 = v201;
    unint64_t v210 = v201;
    unint64_t v211 = v43;
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    uint64_t v65 = v210;
    unint64_t v73 = v211;
  }
  else
  {
    unint64_t v73 = 0xE400000000000000;
    unint64_t v72 = v201;
  }
  uint64_t v74 = swift_allocBox();
  if (__OFSUB__(v198, 1))
  {
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v76 = v74;
  uint64_t v77 = v75;
  uint64_t v78 = 0x7473726966;
  BOOL v79 = v198 - 1 == v200;
  uint64_t v80 = swift_allocObject();
  *(unsigned char *)(v80 + 16) = v79;
  *(void *)(v80 + 24) = MEMORY[0x1E4FBC860];
  *uint64_t v77 = v65;
  v77[1] = v73;
  v77[2] = v80;
  v77[3] = 1;
  uint64_t v81 = (uint64_t)v77 + *(int *)(v46 + 28);
  sub_1C13DCAE8(v197, v81, type metadata accessor for FormatVersionRequirement);
  v203(v81, 0, 1, v202);
  uint64_t v82 = v207;
  *(void *)(v208 + 56) = v76;
  ((void (*)(uint64_t, uint64_t, uint64_t))v206)(v194, v41, v82);
  swift_storeEnumTagMultiPayload();
  if (v43)
  {
    unint64_t v210 = v72;
    unint64_t v211 = v43;
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    uint64_t v78 = v210;
    unint64_t v83 = v211;
  }
  else
  {
    unint64_t v83 = 0xE500000000000000;
  }
  uint64_t v84 = 1852143205;
  uint64_t v85 = swift_allocBox();
  uint64_t v87 = v86;
  BOOL v88 = v200 == 0;
  uint64_t v89 = swift_allocObject();
  LODWORD(v197) = v88;
  *(unsigned char *)(v89 + 16) = v88;
  *(void *)(v89 + 24) = MEMORY[0x1E4FBC860];
  *uint64_t v87 = v78;
  v87[1] = v83;
  _OWORD v87[2] = v89;
  v87[3] = 1;
  uint64_t v90 = (uint64_t)v87 + *(int *)(v46 + 28);
  sub_1C13DCAE8(v194, v90, type metadata accessor for FormatVersionRequirement);
  v203(v90, 0, 1, v202);
  uint64_t v91 = v207;
  *(void *)(v208 + 64) = v85;
  ((void (*)(uint64_t, uint64_t, uint64_t))v206)(v195, v41, v91);
  swift_storeEnumTagMultiPayload();
  if (v43)
  {
    unint64_t v210 = v72;
    unint64_t v211 = v43;
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    uint64_t v84 = v210;
    unint64_t v92 = v211;
  }
  else
  {
    unint64_t v92 = 0xE400000000000000;
  }
  uint64_t v93 = 6579311;
  uint64_t v94 = swift_allocBox();
  uint64_t v96 = v95;
  if (v200 >= 0) {
    uint64_t v97 = v200 & 1;
  }
  else {
    uint64_t v97 = -(v200 & 1);
  }
  uint64_t v98 = swift_allocObject();
  *(unsigned char *)(v98 + 16) = v97 == 0;
  *(void *)(v98 + 24) = MEMORY[0x1E4FBC860];
  uint64_t *v96 = v84;
  v96[1] = v92;
  v96[2] = v98;
  v96[3] = 1;
  uint64_t v99 = (uint64_t)v96 + *(int *)(v46 + 28);
  sub_1C13DCAE8(v195, v99, type metadata accessor for FormatVersionRequirement);
  v203(v99, 0, 1, v202);
  uint64_t v100 = v207;
  *(void *)(v208 + 72) = v94;
  ((void (*)(uint64_t, uint64_t, uint64_t))v206)(v196, v41, v100);
  swift_storeEnumTagMultiPayload();
  if (v43)
  {
    unint64_t v210 = v201;
    unint64_t v211 = v43;
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    uint64_t v93 = v210;
    unint64_t v101 = v211;
  }
  else
  {
    unint64_t v101 = 0xE300000000000000;
  }
  uint64_t v102 = 0x4965737265766572;
  uint64_t v103 = swift_allocBox();
  uint64_t v105 = v104;
  uint64_t v106 = swift_allocObject();
  *(unsigned char *)(v106 + 16) = v97 == 1;
  *(void *)(v106 + 24) = MEMORY[0x1E4FBC860];
  uint64_t *v105 = v93;
  v105[1] = v101;
  v105[2] = v106;
  v105[3] = 1;
  uint64_t v107 = (uint64_t)v105 + *(int *)(v46 + 28);
  sub_1C13DCAE8(v196, v107, type metadata accessor for FormatVersionRequirement);
  v203(v107, 0, 1, v202);
  uint64_t v108 = v207;
  *(void *)(v208 + 80) = v103;
  ((void (*)(uint64_t, uint64_t, uint64_t))v206)(v193, v41, v108);
  swift_storeEnumTagMultiPayload();
  if (v43)
  {
    unint64_t v72 = v201;
    unint64_t v210 = v201;
    unint64_t v211 = v43;
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    sub_1C151E80C();
    uint64_t v102 = v210;
    unint64_t v109 = v211;
  }
  else
  {
    unint64_t v109 = 0xEC0000007865646ELL;
    unint64_t v72 = v201;
  }
  uint64_t v33 = v199;
  uint64_t v110 = swift_allocBox();
  uint64_t v112 = v198 - v200;
  uint64_t v41 = v202;
  if (__OFSUB__(v198, v200)) {
    goto LABEL_59;
  }
  uint64_t v113 = v112 - 1;
  if (!__OFSUB__(v112, 1))
  {
    uint64_t v114 = v110;
    int v115 = v111;
    uint64_t v116 = swift_allocObject();
    *(void *)(v116 + 16) = v113;
    *(void *)(v116 + 24) = MEMORY[0x1E4FBC860];
    *int v115 = v102;
    v115[1] = v109;
    v115[2] = v116 | 0x4000000000000000;
    v115[3] = 1;
    uint64_t v117 = (uint64_t)v115 + *(int *)(v46 + 28);
    sub_1C13DCAE8(v193, v117, type metadata accessor for FormatVersionRequirement);
    v203(v117, 0, 1, v41);
    *(void *)(v208 + 88) = v114;
    if (qword_1EB8875E0 == -1) {
      goto LABEL_34;
    }
    goto LABEL_61;
  }
LABEL_60:
  __break(1u);
LABEL_61:
  swift_once();
LABEL_34:
  unint64_t v118 = 0xEC000000746E756FLL;
  uint64_t v119 = 0x632E656469727473;
  uint64_t v199 = __swift_project_value_buffer(v207, (uint64_t)qword_1EB93C9D8);
  v206(v192);
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (v43)
  {
    unint64_t v210 = v72;
    unint64_t v211 = v43;
    swift_bridgeObjectRetain();
    sub_1C151E80C();
    uint64_t result = sub_1C151E80C();
    uint64_t v119 = v210;
    unint64_t v118 = v211;
  }
  if (v33)
  {
    uint64_t v121 = 0x692E656469727473;
    uint64_t v122 = swift_allocBox();
    uint64_t v124 = v123;
    uint64_t v125 = v198 / v33;
    uint64_t v126 = swift_allocObject();
    uint64_t v198 = v125;
    *(void *)(v126 + 16) = v125;
    *(void *)(v126 + 24) = MEMORY[0x1E4FBC860];
    uint64_t *v124 = v119;
    v124[1] = v118;
    v124[2] = v126 | 0x4000000000000000;
    v124[3] = 1;
    uint64_t v127 = (uint64_t)v124 + *(int *)(v46 + 28);
    sub_1C13DCAE8((uint64_t)v192, v127, type metadata accessor for FormatVersionRequirement);
    v203(v127, 0, 1, v41);
    uint64_t v128 = v207;
    *(void *)(v208 + 96) = v122;
    ((void (*)(uint64_t, uint64_t, uint64_t))v206)(v191, v199, v128);
    uint64_t result = swift_storeEnumTagMultiPayload();
    if (v43)
    {
      unint64_t v210 = v201;
      unint64_t v211 = v43;
      swift_bridgeObjectRetain();
      sub_1C151E80C();
      uint64_t result = sub_1C151E80C();
      uint64_t v121 = v210;
      unint64_t v129 = v211;
    }
    else
    {
      unint64_t v129 = 0xEC0000007865646ELL;
    }
    if (v200 == 0x8000000000000000 && v33 == -1) {
      goto LABEL_65;
    }
    unint64_t v130 = 0xEB00000000747361;
    uint64_t v131 = v33;
    uint64_t v132 = 0x6C2E656469727473;
    uint64_t v133 = swift_allocBox();
    uint64_t v135 = v134;
    uint64_t v136 = v200 / v131;
    uint64_t v137 = swift_allocObject();
    uint64_t v200 = v136;
    *(void *)(v137 + 16) = v136;
    *(void *)(v137 + 24) = MEMORY[0x1E4FBC860];
    uint64_t *v135 = v121;
    v135[1] = v129;
    v135[2] = v137 | 0x4000000000000000;
    v135[3] = 1;
    uint64_t v138 = (uint64_t)v135 + *(int *)(v46 + 28);
    sub_1C13DCAE8(v191, v138, type metadata accessor for FormatVersionRequirement);
    v203(v138, 0, 1, v41);
    uint64_t v139 = v207;
    *(void *)(v208 + 104) = v133;
    ((void (*)(uint64_t, uint64_t, uint64_t))v206)(v189, v199, v139);
    swift_storeEnumTagMultiPayload();
    if (v43)
    {
      unint64_t v210 = v201;
      unint64_t v211 = v43;
      swift_bridgeObjectRetain();
      sub_1C151E80C();
      sub_1C151E80C();
      uint64_t v132 = v210;
      unint64_t v130 = v211;
    }
    unint64_t v140 = 0xEC00000074737269;
    uint64_t v141 = 0x662E656469727473;
    uint64_t v142 = swift_allocBox();
    uint64_t v144 = v143;
    BOOL v145 = v200 == v198 - 1;
    uint64_t v146 = swift_allocObject();
    *(unsigned char *)(v146 + 16) = v145;
    *(void *)(v146 + 24) = MEMORY[0x1E4FBC860];
    *uint64_t v144 = v132;
    v144[1] = v130;
    v144[2] = v146;
    v144[3] = 1;
    uint64_t v147 = (uint64_t)v144 + *(int *)(v46 + 28);
    sub_1C13DCAE8(v189, v147, type metadata accessor for FormatVersionRequirement);
    v203(v147, 0, 1, v41);
    uint64_t v148 = v207;
    *(void *)(v208 + 112) = v142;
    uint64_t v149 = (uint64_t)v185;
    ((void (*)(char *, uint64_t, uint64_t))v206)(v185, v199, v148);
    swift_storeEnumTagMultiPayload();
    if (v43)
    {
      unint64_t v210 = v201;
      unint64_t v211 = v43;
      swift_bridgeObjectRetain();
      sub_1C151E80C();
      sub_1C151E80C();
      uint64_t v141 = v210;
      unint64_t v140 = v211;
    }
    unint64_t v150 = 0xEB000000006E6576;
    uint64_t v151 = 0x652E656469727473;
    uint64_t v152 = swift_allocBox();
    uint64_t v154 = v153;
    uint64_t v155 = swift_allocObject();
    *(unsigned char *)(v155 + 16) = v197;
    *(void *)(v155 + 24) = MEMORY[0x1E4FBC860];
    *uint64_t v154 = v141;
    v154[1] = v140;
    v154[2] = v155;
    v154[3] = 1;
    uint64_t v156 = (uint64_t)v154 + *(int *)(v46 + 28);
    sub_1C13DCAE8(v149, v156, type metadata accessor for FormatVersionRequirement);
    v203(v156, 0, 1, v41);
    uint64_t v157 = v207;
    *(void *)(v208 + 120) = v152;
    ((void (*)(uint64_t, uint64_t, uint64_t))v206)(v190, v199, v157);
    swift_storeEnumTagMultiPayload();
    if (v43)
    {
      unint64_t v210 = v201;
      unint64_t v211 = v43;
      swift_bridgeObjectRetain();
      sub_1C151E80C();
      sub_1C151E80C();
      uint64_t v151 = v210;
      unint64_t v150 = v211;
    }
    unint64_t v158 = 0xEA00000000006464;
    uint64_t v159 = 0x6F2E656469727473;
    uint64_t v160 = swift_allocBox();
    uint64_t v162 = v161;
    if (v200 >= 0) {
      uint64_t v163 = v200 & 1;
    }
    else {
      uint64_t v163 = -(v200 & 1);
    }
    uint64_t v164 = swift_allocObject();
    *(unsigned char *)(v164 + 16) = v163 == 0;
    *(void *)(v164 + 24) = MEMORY[0x1E4FBC860];
    *uint64_t v162 = v151;
    v162[1] = v150;
    v162[2] = v164;
    v162[3] = 1;
    uint64_t v165 = (uint64_t)v162 + *(int *)(v46 + 28);
    sub_1C13DCAE8(v190, v165, type metadata accessor for FormatVersionRequirement);
    uint64_t v166 = v202;
    v203(v165, 0, 1, v202);
    uint64_t v167 = v207;
    *(void *)(v208 + 128) = v160;
    uint64_t v168 = (uint64_t)v186;
    ((void (*)(char *, uint64_t, uint64_t))v206)(v186, v199, v167);
    swift_storeEnumTagMultiPayload();
    if (v43)
    {
      unint64_t v210 = v201;
      unint64_t v211 = v43;
      swift_bridgeObjectRetain();
      sub_1C151E80C();
      sub_1C151E80C();
      uint64_t v159 = v210;
      unint64_t v158 = v211;
    }
    unint64_t v169 = 0xD000000000000013;
    uint64_t v170 = swift_allocBox();
    uint64_t v172 = v171;
    uint64_t v173 = swift_allocObject();
    *(unsigned char *)(v173 + 16) = v163 == 1;
    *(void *)(v173 + 24) = MEMORY[0x1E4FBC860];
    *uint64_t v172 = v159;
    v172[1] = v158;
    v172[2] = v173;
    v172[3] = 1;
    uint64_t v174 = (uint64_t)v172 + *(int *)(v46 + 28);
    sub_1C13DCAE8(v168, v174, type metadata accessor for FormatVersionRequirement);
    v203(v174, 0, 1, v166);
    uint64_t v175 = v207;
    *(void *)(v208 + 136) = v170;
    uint64_t v176 = (uint64_t)v187;
    ((void (*)(char *, uint64_t, uint64_t))v206)(v187, v199, v175);
    swift_storeEnumTagMultiPayload();
    unint64_t v177 = 0x80000001C163E6B0;
    if (v43)
    {
      unint64_t v210 = v201;
      unint64_t v211 = v43;
      swift_bridgeObjectRetain();
      sub_1C151E80C();
      sub_1C151E80C();
      unint64_t v169 = v210;
      unint64_t v177 = v211;
    }
    uint64_t result = swift_allocBox();
    uint64_t v179 = v198 - v200;
    if (!__OFSUB__(v198, v200))
    {
      uint64_t v180 = v179 - 1;
      if (!__OFSUB__(v179, 1))
      {
        uint64_t v181 = result;
        uint64_t v182 = v178;
        uint64_t v183 = swift_allocObject();
        *(void *)(v183 + 16) = v180;
        *(void *)(v183 + 24) = MEMORY[0x1E4FBC860];
        *uint64_t v182 = v169;
        v182[1] = v177;
        v182[2] = v183 | 0x4000000000000000;
        v182[3] = 1;
        uint64_t v184 = (uint64_t)v182 + *(int *)(v46 + 28);
        sub_1C13DCAE8(v176, v184, type metadata accessor for FormatVersionRequirement);
        v203(v184, 0, 1, v166);
        uint64_t result = v208;
        *(void *)(v208 + 144) = v181;
        return result;
      }
      goto LABEL_64;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

uint64_t FormatRepeatNode.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for FormatVersionRequirement(0);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v51 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v52 = (char *)&v50 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v53 = (char *)&v50 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v54 = (char *)&v50 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  unint64_t v55 = (char *)&v50 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v50 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v50 - v19;
  sub_1C08AE4BC();
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = a1[3];
  uint64_t v24 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v25);
  sub_1C08AE5E4();
  uint64_t v27 = v26;
  uint64_t v28 = sub_1C085F050(&qword_1EB891C10, (void (*)(uint64_t))sub_1C08AE5E4);
  sub_1BFEFBD78(v4, v29, v25, v4, v27, (uint64_t)&type metadata for FormatVersions.JazzkonG, v24, (uint64_t)v23, v28, (uint64_t)&off_1F1C39AE8);
  swift_beginAccess();
  uint64_t v30 = v2[2];
  uint64_t v31 = v2[3];
  uint64_t v32 = qword_1EB887640;
  swift_bridgeObjectRetain();
  if (v32 != -1) {
    swift_once();
  }
  uint64_t v33 = sub_1C151928C();
  uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)qword_1EB93CAC8);
  uint64_t v57 = *(void (**)(char *))(*(void *)(v33 - 8) + 16);
  uint64_t v58 = v34;
  v57(v20);
  uint64_t v56 = type metadata accessor for FormatVersionRequirement.Value(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v35 = v59;
  sub_1C06D7044(v30, v31, 0, 0, 0, (uint64_t)v20, (uint64_t)sub_1C01B158C, 0);
  if (!v35)
  {
    sub_1BFEFEB68((uint64_t)v20, type metadata accessor for FormatVersionRequirement);
    swift_bridgeObjectRelease();
    uint64_t v36 = v2[4];
    char v37 = *((unsigned char *)v2 + 40);
    ((void (*)(char *, uint64_t, uint64_t))v57)(v18, v58, v33);
    swift_storeEnumTagMultiPayload();
    sub_1C0042630(v36, v37);
    sub_1C06C1718(v36, v37, 1, 0, 0, (uint64_t)v18, (uint64_t)sub_1C01B158C, 0);
    sub_1BFEFEB68((uint64_t)v18, type metadata accessor for FormatVersionRequirement);
    sub_1C0042624(v36, v37);
    uint64_t v38 = (uint64_t)v55;
    ((void (*)(char *, uint64_t, uint64_t))v57)(v55, v58, v33);
    swift_storeEnumTagMultiPayload();
    uint64_t v39 = swift_bridgeObjectRetain();
    sub_1C071D6CC(v39, 2, 0, 0, v38, (uint64_t)sub_1C01B158C, 0);
    sub_1BFEFEB68(v38, type metadata accessor for FormatVersionRequirement);
    swift_bridgeObjectRelease();
    uint64_t v40 = (uint64_t)v54;
    ((void (*)(char *, uint64_t, uint64_t))v57)(v54, v58, v33);
    swift_storeEnumTagMultiPayload();
    uint64_t v41 = swift_bridgeObjectRetain();
    sub_1C071D6CC(v41, 3, 0, 0, v40, (uint64_t)sub_1C01B158C, 0);
    sub_1BFEFEB68(v40, type metadata accessor for FormatVersionRequirement);
    swift_bridgeObjectRelease();
    uint64_t v42 = (uint64_t)v53;
    ((void (*)(char *, uint64_t, uint64_t))v57)(v53, v58, v33);
    swift_storeEnumTagMultiPayload();
    uint64_t v43 = swift_bridgeObjectRetain();
    sub_1C071D6CC(v43, 4, 0, 0, v42, (uint64_t)sub_1C01B158C, 0);
    sub_1BFEFEB68(v42, type metadata accessor for FormatVersionRequirement);
    swift_bridgeObjectRelease();
    uint64_t v44 = v2[9];
    uint64_t v45 = v2[10];
    uint64_t v46 = (uint64_t)v52;
    ((void (*)(char *, uint64_t, uint64_t))v57)(v52, v58, v33);
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    sub_1C071D944(v44, v45, 5, 0, 0, v46, (uint64_t)sub_1C01B158C, 0);
    sub_1BFEFEB68(v46, type metadata accessor for FormatVersionRequirement);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v48 = v2[11];
    uint64_t v20 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v57)(v51, v58, v33);
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    char v49 = sub_1C083FBD0((uint64_t)v20, 6, 0, 0, (uint64_t)sub_1C01B158C, 0);
    if (v49)
    {
      long long v60 = xmmword_1C1557FE0;
      char v61 = 0;
      uint64_t v62 = v48;
      sub_1C08AE550();
      sub_1C085F050(&qword_1EB86E130, (void (*)(uint64_t))sub_1C08AE550);
      sub_1BFE9DEBC(0, (unint64_t *)&qword_1EB863300, (uint64_t)&type metadata for FormatSourceMapNode, MEMORY[0x1E4FBB320]);
      sub_1BFE407E0();
      sub_1C1520BAC();
    }
  }
  sub_1BFEFEB68((uint64_t)v20, type metadata accessor for FormatVersionRequirement);
  swift_bridgeObjectRelease();
  return sub_1BFEFEB68((uint64_t)v23, (uint64_t (*)(void))sub_1C08AE4BC);
}

uint64_t FormatRepeatNode.bindChildren(binder:context:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(v2 + 40) != 1
    || (uint64_t v6 = *(void *)(v2 + 32), sub_1C0042630(v6, 1), sub_1BFF80048(a2, v6), result = sub_1C0042624(v6, 1), !v3))
  {
    uint64_t v8 = *(void *)(v2 + 48);
    if (!v8 || (swift_bridgeObjectRetain(), sub_1BFF80048(a2, v8), uint64_t result = swift_bridgeObjectRelease(), !v3))
    {
      uint64_t v9 = *(void *)(v2 + 56);
      if (!v9 || (swift_bridgeObjectRetain(), sub_1BFF80048(a2, v9), uint64_t result = swift_bridgeObjectRelease(), !v3))
      {
        uint64_t v10 = *(void *)(v2 + 64);
        if (!v10 || (swift_bridgeObjectRetain(), sub_1BFF80048(a2, v10), uint64_t result = swift_bridgeObjectRelease(), !v3))
        {
          uint64_t result = swift_beginAccess();
          uint64_t v11 = *(void *)(v2 + 88);
          uint64_t v12 = *(void *)(v11 + 16);
          if (v12)
          {
            swift_bridgeObjectRetain_n();
            uint64_t v13 = v11 + 64;
            while (1)
            {
              swift_bridgeObjectRetain();
              swift_retain();
              FormatSourceMapNode.bind(binder:context:)(a1, a2);
              if (v3) {
                break;
              }
              v13 += 40;
              swift_bridgeObjectRelease();
              swift_release();
              if (!--v12) {
                return swift_bridgeObjectRelease_n();
              }
            }
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            return swift_release();
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C0042624(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C0042630(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1C004263C()
{
  unint64_t result = qword_1EB85BF60;
  if (!qword_1EB85BF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85BF60);
  }
  return result;
}

uint64_t sub_1C0042690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1BFEF2D8C(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= result && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= result && (a5 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1C106D5C8();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      *uint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_1C0042810(result, a5 & 1);
  uint64_t result = sub_1BFEF2D8C(a3, a4);
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = sub_1C1520CFC();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v23 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v23 = a3;
  v23[1] = a4;
  uint64_t v24 = (void *)(v20[7] + 16 * v14);
  *uint64_t v24 = a1;
  v24[1] = a2;
  uint64_t v25 = v20[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v27;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C0042810(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1C0042B1C();
  char v38 = a2;
  uint64_t v6 = sub_1C15204EC();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v11) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v14);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    long long v39 = *(_OWORD *)(*(void *)(v5 + 56) + v31);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_1C1520DBC();
    sub_1C151E77C();
    uint64_t result = sub_1C1520E0C();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v17 == v28;
        if (v17 == v28) {
          unint64_t v17 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      unint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 16 * v18;
    uint64_t v20 = (void *)(*(void *)(v7 + 48) + v19);
    *uint64_t v20 = v34;
    v20[1] = v33;
    *(_OWORD *)(*(void *)(v7 + 56) + v19) = v39;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void sub_1C0042B1C()
{
  if (!qword_1EB87A468)
  {
    sub_1C006425C();
    unint64_t v0 = sub_1C152051C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB87A468);
    }
  }
}

__n128 __swift_memcpy107_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 91) = *(long long *)((char *)a2 + 91);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatBackground(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x78)
  {
    *(void *)__n128 result = a2 - 121;
    if (a3 >= 0x79) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x79) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SportsDataVisualizationConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatTextNodeStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 520) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 528) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 528) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

double storeEnumTagSinglePayload for FormatNodeStyle(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 56) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(void *)(a1 + 48) = (unint64_t)-a2 << 16;
      *(void *)(a1 + 56) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatAdjustment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x66)
  {
    *(void *)double result = a2 - 103;
    if (a3 >= 0x67) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x67) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 5) & 3 | (4 * (-a2 & 0x7F));
      *(void *)double result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t destroy for PuzzleStatsService.UpdatingState()
{
  return swift_release();
}

unint64_t sub_1C0042DC8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C0042DF4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C0042DF4(char a1)
{
  unint64_t result = 1819044198;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x746E6563726570;
      break;
    case 2:
      unint64_t result = 0x46746E6563726570;
      break;
    case 3:
      unint64_t result = 0x6F69736E656D6964;
      break;
    case 4:
      unint64_t result = 0x69466F54657A6973;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x6874646977;
      break;
    case 7:
      unint64_t result = 0x746867696568;
      break;
    case 8:
      unint64_t result = 0x695764656C616373;
      break;
    case 9:
      unint64_t result = 0x654864656C616373;
      break;
    case 10:
      unint64_t result = 0x7274654D746E6F66;
      break;
    case 11:
    case 15:
    case 27:
      unint64_t result = 0xD000000000000010;
      break;
    case 12:
      unint64_t result = 0x664F7265626D756ELL;
      break;
    case 13:
      unint64_t result = 0x6F69746172;
      break;
    case 14:
      unint64_t result = 0x736E6D756C6F63;
      break;
    case 16:
      unint64_t result = 0x6F526E6D756C6F63;
      break;
    case 17:
      unint64_t result = 0x676E696361705376;
      break;
    case 18:
      unint64_t result = 0x676E696361705368;
      break;
    case 19:
      unint64_t result = 1869768058;
      break;
    case 20:
      unint64_t result = 0x656873696C627570;
      break;
    case 21:
      unint64_t result = 0x65726F736E6F7073;
      break;
    case 22:
      unint64_t result = 0x686374697773;
      break;
    case 23:
      unint64_t result = 0x6361766972506461;
      break;
    case 24:
    case 28:
      unint64_t result = 0x656C626978656C66;
      break;
    case 25:
      unint64_t result = 0xD000000000000012;
      break;
    case 26:
      unint64_t result = 0xD000000000000011;
      break;
    case 29:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SportsDataVisualizationResponseBracketItem(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatColorBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatColorBinding(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_1C0043204(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        unint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

void sub_1C0043350(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 <= v8)
  {
    switch(v14)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 3:
LABEL_44:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v7 < 0x7FFFFFFF)
          {
            unint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
            if ((a2 & 0x80000000) != 0) {
              uint64_t v19 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v19 = a2 - 1;
            }
            *unint64_t v18 = v19;
          }
          else
          {
            unint64_t v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
        }
        break;
    }
  }
  else
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t getEnumTagSinglePayload for FormatDecorationContent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x78 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 120);
  }
  unsigned int v3 = ((*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x77) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

unint64_t sub_1C004357C()
{
  return sub_1C0043584(*v0);
}

unint64_t sub_1C0043584(char a1)
{
  unint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x446873696C627570;
      break;
    case 2:
      unint64_t result = 0x4449676174;
      break;
    case 3:
      unint64_t result = 0x44496575737369;
      break;
    case 4:
      unint64_t result = 0x49656C6369747261;
      break;
    case 5:
      unint64_t result = 0x6465626D45626577;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0x7974696E69666661;
      break;
    case 8:
      unint64_t result = 0x6F7779654B644169;
      break;
    case 9:
      unint64_t result = 0x73656D656874;
      break;
    case 10:
      unint64_t result = 0x70756F7267627573;
      break;
    case 11:
      unint64_t result = 0x69747265706F7270;
      break;
    case 12:
      unint64_t result = 0x726F7463656C6573;
      break;
    case 13:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C0043728@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C0043754(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C0043754(char a1)
{
  uint64_t result = 0x6E61656C6F6F62;
  switch(a1)
  {
    case 1:
      uint64_t result = 1836412517;
      break;
    case 2:
      uint64_t result = 1702125924;
      break;
    case 3:
      uint64_t result = 0x74616F6C66;
      break;
    case 4:
      uint64_t result = 0x72656765746E69;
      break;
    case 5:
      uint64_t result = 0x676E69727473;
      break;
    case 6:
      uint64_t result = 7107189;
      break;
    case 7:
      uint64_t result = 0x726F6C6F63;
      break;
    case 8:
      uint64_t result = 0x646E756F626E75;
      break;
    case 9:
      uint64_t result = 0x6567616D69;
      break;
    case 10:
      uint64_t result = 0x6F65646976;
      break;
    case 11:
      uint64_t result = 0x7463617274736261;
      break;
    case 12:
      uint64_t result = 1953394534;
      break;
    case 13:
      uint64_t result = 0x616C506F65646976;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C0043894()
{
  uint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65756C6176;
      break;
    case 2:
      uint64_t result = 0x726F74617265706FLL;
      break;
    case 3:
      uint64_t result = 0x6E6F6974706FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C0043910()
{
  return sub_1BFE4FCF0(*v0);
}

unsigned char *_s10CodingTypeOwst_5(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedSubscriptionPaidAccess(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t getEnumTagSinglePayload for FormatViewNodeStyle.Selector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 153)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for FeedPuzzle()
{
  return &type metadata for FeedPuzzle;
}

ValueMetadata *type metadata accessor for FeedTag()
{
  return &type metadata for FeedTag;
}

uint64_t getEnumTagSinglePayload for FormatCornerRadius(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (*(unsigned char *)(a1 + 16) & 0x7E | (*(unsigned __int8 *)(a1 + 16) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

ValueMetadata *type metadata accessor for FeedIssue()
{
  return &type metadata for FeedIssue;
}

ValueMetadata *type metadata accessor for FeedPuzzleType()
{
  return &type metadata for FeedPuzzleType;
}

uint64_t getEnumTagSinglePayload for FormatItemKind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFF1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483633);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 14;
  if (v4 >= 0x10) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_1C0043BB0@<X0>(uint64_t a1@<X8>)
{
  return sub_1BFEBF564(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for FormatTextContent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x77 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 119);
  }
  unsigned int v3 = ((*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x76) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t destroy for FormatNodeStyle(uint64_t a1)
{
  return sub_1BFF94FE4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48));
}

uint64_t storeEnumTagSinglePayload for FormatOptionBindingModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatColorProcessor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7B && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 123);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 4) | (8 * ((*(void *)a1 >> 57) & 8 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7A) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for FormatTextContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x76)
  {
    *(void *)__n128 result = a2 - 119;
    if (a3 >= 0x77) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x77) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

unint64_t sub_1C0043D34()
{
  return sub_1BFE7FC90(*v0);
}

uint64_t sub_1C0043D40(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

unint64_t sub_1C0043ED0()
{
  return sub_1BFF09D30(*v0);
}

unsigned char *storeEnumTagSinglePayload for FormatSystemColor(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 40 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 40) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD7)
  {
    unsigned int v6 = ((a2 - 216) >> 8) + 1;
    *__n128 result = a2 + 40;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 40;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSystemColor(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xD8) {
    goto LABEL_17;
  }
  if (a2 + 40 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 40) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 40;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 40;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 40;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x29;
  int v8 = v6 - 41;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

NewsFeed::FormatSystemColor_optional sub_1C0044038(Swift::String *a1)
{
  return FormatSystemColor.init(rawValue:)(*a1);
}

unsigned __int8 *sub_1C0044044(unsigned __int8 *result, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 1) {
    unint64_t v2 = 1;
  }
  unsigned int v3 = result[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *result;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)result;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)result;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 != 1) {
    return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
  return result;
}

uint64_t sub_1C0044128()
{
  uint64_t result = 1953459315;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x69747265706F7270;
      break;
    case 2:
      uint64_t result = 0x726F66736E617274;
      break;
    case 3:
      uint64_t result = 0x736D657469;
      break;
    case 4:
      uint64_t result = 0x726F7463656C6573;
      break;
    default:
      return result;
  }
  return result;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatAccessibilityRole(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 6;
  if (a3 + 6 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFA) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v7 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

unint64_t destroy for FormatAdjustment(unint64_t *a1)
{
  return sub_1BFF31E90(*a1);
}

uint64_t sub_1C00442B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C00442DC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C00442DC(char a1)
{
  uint64_t result = 0x676E69646E6962;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656E696C6E69;
      break;
    case 2:
      uint64_t result = 0x657A696C61636F6CLL;
      break;
    case 3:
      uint64_t result = 0x657474616D726F66;
      break;
    case 4:
      uint64_t result = 0x656D686361747461;
      break;
    case 5:
      uint64_t result = 0x686374697773;
      break;
    case 6:
      uint64_t result = 0x7265626D756ELL;
      break;
    case 7:
      uint64_t result = 1802398060;
      break;
    case 8:
      uint64_t result = 0x656D695465746164;
      break;
    case 9:
      uint64_t result = 0x726F7463656C6573;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *sub_1C00443E0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedLayoutOrder(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1C004453C()
{
  return sub_1C004463C(*v0);
}

uint64_t storeEnumTagSinglePayload for FormatViewNodeStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 152) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 153) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 153) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t _s5ImageOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1C004463C(char a1)
{
  uint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6E6F6973726576;
      break;
    case 2:
      uint64_t result = 1701605234;
      break;
    case 3:
      uint64_t result = 0x6F69746365726964;
      break;
    case 4:
      uint64_t result = 1701667182;
      break;
    case 5:
      uint64_t result = 0x746E656D6D6F63;
      break;
    case 6:
      uint64_t result = 0x7370756F7267;
      break;
    case 7:
      uint64_t result = 0x736D657469;
      break;
    case 8:
      uint64_t result = 0x7374657070696E73;
      break;
    case 9:
      uint64_t result = 0x656D656C70707573;
      break;
    case 10:
      uint64_t result = 0x73656C797473;
      break;
    case 11:
      uint64_t result = 0x73746F6C73;
      break;
    case 12:
      uint64_t result = 0x7365707974;
      break;
    case 13:
      uint64_t result = 0x697461726F636564;
      break;
    case 14:
      uint64_t result = 0x736E6F6974706FLL;
      break;
    case 15:
      uint64_t result = 0x726F7463656C6573;
      break;
    case 16:
      uint64_t result = 0x617A696C61636F6CLL;
      break;
    case 17:
      uint64_t result = 0x79536E6D756C6F63;
      break;
    case 18:
      uint64_t result = 0x636E657265666572;
      break;
    case 19:
      uint64_t result = 0x72656C69706D6F63;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t destroy for FormatColorProcessor(unint64_t *a1)
{
  return sub_1BFF65E20(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatItemKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF1)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483633;
    if (a3 >= 0x7FFFFFF1) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF1) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 14;
    }
  }
  return result;
}

uint64_t sub_1C00448C0()
{
  if (*v0) {
    return 0x6E6F6974706FLL;
  }
  else {
    return 0x65756C6176;
  }
}

unsigned char *_s10CodingTypeOwst_4(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 28 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 28) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE3)
  {
    unsigned int v6 = ((a2 - 228) >> 8) + 1;
    *uint64_t result = a2 + 28;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 28;
        break;
    }
  }
  return result;
}

uint64_t _s10CodingTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE4) {
    goto LABEL_17;
  }
  if (a2 + 28 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 28) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 28;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1D;
  int v8 = v6 - 29;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1C0044A50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BFDF9904(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1C0044A58()
{
  uint64_t v1 = 0x65756C6176;
  if (*v0 != 1) {
    uint64_t v1 = 1885433183;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E656E6F706D6F63;
  }
}

uint64_t getEnumTagSinglePayload for FormatFill(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 104) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

unsigned char *_s10CodingTypeOwst_0_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SportsDataVisualizationConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatSymbolImageFill(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x74)
  {
    *(void *)uint64_t result = a2 - 117;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x75) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x75) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSymbolImageFill(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x75 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 117);
  }
  unsigned int v3 = ((*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x74) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

unsigned char *storeEnumTagSinglePayload for FormatNodeStyle.CodingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *uint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatAccessibilityTrait(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatQueryValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1C0044E54()
{
  return sub_1BFD39658(*v0);
}

uint64_t sub_1C0044E60(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x71) {
    unsigned int v7 = 113;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0x71) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      int v15 = (*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7));
      unsigned int v16 = v15 ^ 0x7F;
      unsigned int v17 = 128 - v15;
      if (v16 >= 0x71) {
        return 0;
      }
      else {
        return v17;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

uint64_t getEnumTagSinglePayload for SportsConfigResourceParameter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void sub_1C0045048(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_41:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if ((v7 & 0x80000000) != 0)
          {
            unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
            uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
            v19(v18);
          }
          else if ((a2 & 0x80000000) != 0)
          {
            *(void *)a1 = a2 ^ 0x80000000;
            *((void *)a1 + 1) = 0;
          }
          else
          {
            *((void *)a1 + 1) = a2 - 1;
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t sub_1C00452A8()
{
  return sub_1BFD36C50(*v0);
}

uint64_t storeEnumTagSinglePayload for SportsDataVisualizationResponseBracketItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatOptionExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 2047;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FF) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FF) {
      *(unsigned char *)(result + 34) = 0;
    }
    if (a2)
    {
      unsigned int v3 = ((-a2 >> 1) & 0x3FF) - (a2 << 10);
      *(_OWORD *)uint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_WORD *)(result + 32) = (32 * v3) & 0xF000 | (2 * (v3 & 0x7F));
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatOptionExpression(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FF && *(unsigned char *)(a1 + 34)) {
    return (*(_DWORD *)a1 + 2047);
  }
  unsigned int v3 = (*(_WORD *)(a1 + 32) & 0xFE | (*(unsigned __int16 *)(a1 + 32) >> 15) | (*(unsigned __int16 *)(a1 + 32) >> 4) & 0x700) ^ 0x7FF;
  if (v3 >= 0x7FE) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

ValueMetadata *type metadata accessor for FeedPoolCachePolicy()
{
  return &type metadata for FeedPoolCachePolicy;
}

uint64_t sub_1C00453D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C0045404(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C0045404(char a1)
{
  uint64_t result = 0x656E696C64616568;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6575737369;
      break;
    case 2:
      uint64_t result = 0x70756F7267;
      break;
    case 3:
      uint64_t result = 0x6E6F6974706FLL;
      break;
    case 4:
      uint64_t result = 0x79747265706F7270;
      break;
    case 5:
      uint64_t result = 0x6172546F69647561;
      break;
    case 6:
      uint64_t result = 6775156;
      break;
    case 7:
      uint64_t result = 0x6465626D45626577;
      break;
    case 8:
      uint64_t result = 0x656C7A7A7570;
      break;
    case 9:
      uint64_t result = 0x7954656C7A7A7570;
      break;
    case 10:
      uint64_t result = 0x7453656C7A7A7570;
      break;
    case 11:
      uint64_t result = 0x74496D6F74737563;
      break;
    case 12:
      uint64_t result = 0x76457374726F7073;
      break;
    case 13:
      uint64_t result = 0x6C6C6177796170;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatDecorationContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x77)
  {
    *(void *)uint64_t result = a2 - 120;
    if (a3 >= 0x78) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x78) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatOperator(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

uint64_t sub_1C004569C()
{
  uint64_t result = 0x656C746974;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x4479616C70736964;
      break;
    case 2:
      uint64_t result = 0x70795479726F7473;
      break;
    case 3:
      uint64_t result = 0x63784574726F6873;
      break;
    case 4:
      uint64_t result = 0x69616E626D756874;
      break;
    case 5:
      uint64_t result = 0x4C52556574756F72;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatNodeAccessibilityRole(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(unsigned char *)(result + 8) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatTextNodeBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1F2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(void *)uint64_t result = a2 - 499;
    if (a3 >= 0x1F3) {
      *(unsigned char *)(result + 50) = 1;
    }
  }
  else
  {
    if (a3 >= 0x1F3) {
      *(unsigned char *)(result + 50) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)uint64_t result = 0u;
      *(unsigned char *)(result + 48) = 8 * (-(char)a2 & 1);
      *(unsigned char *)(result + 49) = -a2 >> 1;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatTextNodeBinding(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x1F3 && *(unsigned char *)(a1 + 50)) {
    return (*(_DWORD *)a1 + 499);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 48) >> 3) & 1 | (2 * *(unsigned __int8 *)(a1 + 49))) ^ 0x1FF;
  if (v3 >= 0x1F2) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t sub_1C004587C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C00458A8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C00458A8(char a1)
{
  uint64_t result = 2003134838;
  switch(a1)
  {
    case 1:
      uint64_t result = 1954047348;
      break;
    case 2:
      uint64_t result = 0x6567616D69;
      break;
    case 3:
      uint64_t result = 1835365481;
      break;
    case 4:
      uint64_t result = 0x6465626D45626577;
      break;
    case 5:
      uint64_t result = 0x6D6F74737563;
      break;
    case 6:
      uint64_t result = 0x656D656C70707573;
      break;
    case 7:
      uint64_t result = 1633905005;
      break;
    case 8:
      uint64_t result = 0x4D6465726579616CLL;
      break;
    case 9:
      uint64_t result = 0x6F65646976;
      break;
    case 10:
      uint64_t result = 0x766F436575737369;
      break;
    case 11:
      uint64_t result = 0x70756F7267;
      break;
    case 12:
      uint64_t result = 1802723693;
      break;
    case 13:
      uint64_t result = 0x6F6974616D696E61;
      break;
    case 14:
      uint64_t result = 0x616C506F65646976;
      break;
    case 15:
      uint64_t result = 0x73736572676F7270;
      break;
    case 16:
      uint64_t result = 0x6D45656C7A7A7570;
      break;
    case 17:
      uint64_t result = 0x65726F736E6F7073;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1C0045A74(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 >= a2)
  {
    switch(v11)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          unsigned int v16 = *(void (**)(void))(v6 + 56);
          v16();
        }
        break;
    }
  }
  else
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        break;
      default:
        return;
    }
  }
}

uint64_t sub_1C0045C9C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v8 = ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v6;
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

uint64_t sub_1C0045DF8()
{
  if (*v0) {
    return 0x65756C6176;
  }
  else {
    return 0x696669746E656469;
  }
}

unint64_t sub_1C0045E34()
{
  return sub_1C0045E3C(*v0);
}

unint64_t sub_1C0045E3C(char a1)
{
  unint64_t result = 0x656D617266;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x62614C656C746974;
      break;
    case 2:
    case 3:
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0x656956616964656DLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000017;
      break;
    case 9:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 10:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatImageNodeStyle.Selector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 200)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for GroupLayoutBindingContext.OrderedItemBinding(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatColorProcessor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7A)
  {
    *(void *)unint64_t result = a2 - 123;
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1C0046050@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C004607C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C004607C(char a1)
{
  uint64_t result = 0x7465736E69;
  switch(a1)
  {
    case 1:
      return 0x726F68636E61;
    case 2:
      return 0x74657366666FLL;
    case 3:
      return 0x747265766E69;
    case 4:
      return 0x69577473756A6461;
    case 5:
      return 0x65487473756A6461;
    case 6:
      unsigned int v3 = 1466853741;
      return v3 | 0x6874646900000000;
    case 7:
      unsigned int v3 = 1467507053;
      return v3 | 0x6874646900000000;
    case 8:
      unsigned int v4 = 1215195501;
      return v4 | 0x6867696500000000;
    case 9:
      unsigned int v4 = 1215848813;
      return v4 | 0x6867696500000000;
    case 10:
      return 0x63657073416E696DLL;
    case 11:
    case 12:
      return 0x796C7069746C756DLL;
    case 13:
      return 0x657A69736572;
    case 14:
      return 0x6E41657A69736572;
    case 15:
    case 18:
      return 0xD000000000000012;
    case 16:
      uint64_t v5 = 0x427473726966;
      return v5 & 0xFFFFFFFFFFFFLL | 0x7361000000000000;
    case 17:
      return 0x656E696C65736162;
    case 19:
      return 0xD00000000000001ALL;
    case 20:
      uint64_t v5 = 0x42726568746FLL;
      return v5 & 0xFFFFFFFFFFFFLL | 0x7361000000000000;
    case 21:
      return 0xD000000000000015;
    case 22:
      unsigned int v6 = 1416522093;
      goto LABEL_27;
    case 23:
      unsigned int v6 = 1417175405;
LABEL_27:
      uint64_t result = v6 | 0x4C74786500000000;
      break;
    case 24:
      uint64_t result = 0x7274654D746E6F66;
      break;
    case 25:
      uint64_t result = 0x726765746E496F6ELL;
      break;
    case 26:
      uint64_t result = 0x6F426F5470696C63;
      break;
    case 27:
      uint64_t result = 0x686374697773;
      break;
    case 28:
      uint64_t result = 0x797274656D6F6567;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C0046370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t storeEnumTagSinglePayload for FormatComputedInvalidation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3E)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 63;
    if (a3 >= 0x3F) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3F) {
      *(unsigned char *)(result + 26) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(_WORD *)(result + 24) = (((-a2 >> 1) & 0x1F) - 32 * (_WORD)a2) << 10;
    }
  }
  return result;
}

uint64_t sub_1C00463D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BFDF987C(a1, *(void *)(v2 + 16), a2);
}

uint64_t storeEnumTagSinglePayload for FeedItemVisibility(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 2;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatImageResize(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatImageRequestData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupKind()
{
  return &type metadata for FeedGroupKind;
}

uint64_t getEnumTagSinglePayload for FormatPropertyValue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x72 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 114);
  }
  unsigned int v3 = ((*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x72) {
    unsigned int v3 = -1;
  }
  if (v3 + 1 >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t getEnumTagSinglePayload for FormatOptionEnum(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

unsigned char *storeEnumTagSinglePayload for FormatColorComponent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatColorComponent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

NewsFeed::FormatColorComponent_optional sub_1C0046760(Swift::String *a1)
{
  return FormatColorComponent.init(rawValue:)(*a1);
}

unsigned char *storeEnumTagSinglePayload for FormatContentMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatAccessibility(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

uint64_t sub_1C0046904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t storeEnumTagSinglePayload for FormatImageNodeRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedLayoutResult(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for FeedLayoutResult()
{
  return &type metadata for FeedLayoutResult;
}

double storeEnumTagSinglePayload for FormatBindingExpression(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 106) = 0;
    *(_WORD *)(a1 + 104) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 107) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(void *)(a1 + 48) = (unint64_t)-a2 << 11;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_DWORD *)(a1 + 103) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 107) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBindingExpression(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 107)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 48) >> 11;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t _s4TextOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)double result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

uint64_t _s4TextOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

unsigned char *_s4TextO10CodingTypeOwst_3(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *double result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 19;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatFontTrait(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xED) {
    goto LABEL_17;
  }
  if (a2 + 19 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 19) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 19;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v8 = v6 - 20;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FormatAnchor(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *double result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 6;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatCorner(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *double result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 4;
        break;
    }
  }
  return result;
}

NewsFeed::FormatCorner_optional sub_1C0046E18(Swift::String *a1)
{
  return FormatCorner.init(rawValue:)(*a1);
}

void sub_1C0046E24(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  uint64_t v3 = 0x656E696C64616568;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE300000000000000;
      uint64_t v3 = 6775156;
      goto LABEL_3;
    case 2:
      *a1 = 0x6575737369;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 0x6E6F6974706FLL;
      a1[1] = 0xE600000000000000;
      break;
    case 4:
      *a1 = 0x70756F7267;
      a1[1] = 0xE500000000000000;
      break;
    case 5:
      *a1 = 0x76457374726F7073;
      a1[1] = 0xEB00000000746E65;
      break;
    case 6:
      *a1 = 0x7954656C7A7A7570;
      a1[1] = 0xEA00000000006570;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1C0046EFC(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 264)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1C0046F58()
{
  uint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656469727265766FLL;
      break;
    case 2:
      uint64_t result = 0x726F7463656C6573;
      break;
    case 3:
      uint64_t result = 0x69747265706F7270;
      break;
    case 4:
      uint64_t result = 0x74616E7265746C61;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

uint64_t block_destroy_helper_26()
{
  return swift_release();
}

uint64_t block_destroy_helper_27()
{
  return swift_release();
}

uint64_t block_destroy_helper_28()
{
  return swift_release();
}

uint64_t block_destroy_helper_29()
{
  return swift_release();
}

uint64_t block_destroy_helper_30()
{
  return swift_release();
}

uint64_t block_destroy_helper_31()
{
  return swift_release();
}

uint64_t block_destroy_helper_32()
{
  return swift_release();
}

uint64_t block_destroy_helper_33()
{
  return swift_release();
}

uint64_t block_destroy_helper_34()
{
  return swift_release();
}

uint64_t block_destroy_helper_35()
{
  return swift_release();
}

uint64_t block_destroy_helper_36()
{
  return swift_release();
}

uint64_t block_destroy_helper_37()
{
  return swift_release();
}

uint64_t block_destroy_helper_38()
{
  return swift_release();
}

uint64_t block_destroy_helper_39()
{
  return swift_release();
}

uint64_t block_destroy_helper_40()
{
  return swift_release();
}

uint64_t block_destroy_helper_41()
{
  return swift_release();
}

uint64_t block_destroy_helper_42()
{
  return swift_release();
}

uint64_t block_destroy_helper_43()
{
  return swift_release();
}

uint64_t block_destroy_helper_44()
{
  return swift_release();
}

uint64_t block_destroy_helper_45()
{
  return swift_release();
}

uint64_t block_destroy_helper_46()
{
  return swift_release();
}

uint64_t block_destroy_helper_47()
{
  return swift_release();
}

uint64_t block_destroy_helper_48()
{
  return swift_release();
}

uint64_t block_destroy_helper_49()
{
  return swift_release();
}

uint64_t block_destroy_helper_50()
{
  return swift_release();
}

uint64_t block_destroy_helper_51()
{
  return swift_release();
}

uint64_t block_destroy_helper_52()
{
  return swift_release();
}

uint64_t block_destroy_helper_53()
{
  return swift_release();
}

uint64_t block_destroy_helper_54()
{
  return swift_release();
}

uint64_t block_destroy_helper_55()
{
  return swift_release();
}

uint64_t block_destroy_helper_56()
{
  return swift_release();
}

uint64_t block_destroy_helper_57()
{
  return swift_release();
}

uint64_t block_destroy_helper_58()
{
  return swift_release();
}

uint64_t block_destroy_helper_59()
{
  return swift_release();
}

uint64_t block_destroy_helper_60()
{
  return swift_release();
}

uint64_t block_destroy_helper_61()
{
  return swift_release();
}

uint64_t block_destroy_helper_62()
{
  return swift_release();
}

uint64_t block_destroy_helper_63()
{
  return swift_release();
}

uint64_t block_destroy_helper_64()
{
  return swift_release();
}

uint64_t block_destroy_helper_65()
{
  return swift_release();
}

uint64_t block_destroy_helper_66()
{
  return swift_release();
}

uint64_t block_destroy_helper_67()
{
  return swift_release();
}

uint64_t block_destroy_helper_68()
{
  return swift_release();
}

uint64_t block_destroy_helper_69()
{
  return swift_release();
}

uint64_t block_destroy_helper_70()
{
  return swift_release();
}

uint64_t block_destroy_helper_71()
{
  return swift_release();
}

uint64_t block_destroy_helper_72()
{
  return swift_release();
}

uint64_t block_destroy_helper_73()
{
  return swift_release();
}

uint64_t block_destroy_helper_74()
{
  return swift_release();
}

uint64_t block_destroy_helper_75()
{
  return swift_release();
}

uint64_t block_destroy_helper_76()
{
  return swift_release();
}

uint64_t block_destroy_helper_77()
{
  return swift_release();
}

uint64_t block_destroy_helper_78()
{
  return swift_release();
}

uint64_t block_destroy_helper_79()
{
  return swift_release();
}

uint64_t block_destroy_helper_80()
{
  return swift_release();
}

uint64_t block_destroy_helper_81()
{
  return swift_release();
}

uint64_t block_destroy_helper_82()
{
  return swift_release();
}

uint64_t block_destroy_helper_83()
{
  return swift_release();
}

uint64_t block_destroy_helper_84()
{
  return swift_release();
}

uint64_t block_destroy_helper_85()
{
  return swift_release();
}

uint64_t block_destroy_helper_86()
{
  return swift_release();
}

uint64_t block_destroy_helper_87()
{
  return swift_release();
}

uint64_t block_destroy_helper_88()
{
  return swift_release();
}

uint64_t block_destroy_helper_89()
{
  return swift_release();
}

uint64_t block_destroy_helper_90()
{
  return swift_release();
}

uint64_t block_destroy_helper_91()
{
  return swift_release();
}

uint64_t block_destroy_helper_92()
{
  return swift_release();
}

uint64_t block_destroy_helper_93()
{
  return swift_release();
}

uint64_t block_destroy_helper_94()
{
  return swift_release();
}

uint64_t block_destroy_helper_95()
{
  return swift_release();
}

uint64_t block_destroy_helper_96()
{
  return swift_release();
}

uint64_t block_destroy_helper_97()
{
  return swift_release();
}

uint64_t block_destroy_helper_98()
{
  return swift_release();
}

uint64_t block_destroy_helper_99()
{
  return swift_release();
}

uint64_t block_destroy_helper_100()
{
  return swift_release();
}

uint64_t block_destroy_helper_101()
{
  return swift_release();
}

uint64_t block_destroy_helper_102()
{
  return swift_release();
}

uint64_t block_destroy_helper_103()
{
  return swift_release();
}

uint64_t block_destroy_helper_104()
{
  return swift_release();
}

uint64_t block_destroy_helper_105()
{
  return swift_release();
}

uint64_t block_destroy_helper_106()
{
  return swift_release();
}

uint64_t block_destroy_helper_107()
{
  return swift_release();
}

uint64_t block_destroy_helper_108()
{
  return swift_release();
}

uint64_t block_destroy_helper_109()
{
  return swift_release();
}

uint64_t block_destroy_helper_110()
{
  return swift_release();
}

uint64_t block_destroy_helper_111()
{
  return swift_release();
}

uint64_t block_destroy_helper_112()
{
  return swift_release();
}

uint64_t block_destroy_helper_113()
{
  return swift_release();
}

uint64_t block_destroy_helper_114()
{
  return swift_release();
}

uint64_t block_destroy_helper_115()
{
  return swift_release();
}

uint64_t block_destroy_helper_116()
{
  return swift_release();
}

uint64_t block_destroy_helper_117()
{
  return swift_release();
}

uint64_t block_destroy_helper_118()
{
  return swift_release();
}

uint64_t block_destroy_helper_119()
{
  return swift_release();
}

uint64_t block_destroy_helper_120()
{
  return swift_release();
}

uint64_t block_destroy_helper_121()
{
  return swift_release();
}

uint64_t block_destroy_helper_122()
{
  return swift_release();
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1C00473F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C004741C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C004741C(char a1)
{
  uint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656C746974;
      break;
    case 2:
      uint64_t result = 0x6D6F43656C746974;
      break;
    case 3:
      uint64_t result = 0x446873696C627570;
      break;
    case 4:
      uint64_t result = 0x4479616C70736964;
      break;
    case 5:
      uint64_t result = 0x74707265637865;
      break;
    case 6:
      uint64_t result = 0x63784574726F6873;
      break;
    case 7:
      uint64_t result = 0x614E726F68747561;
      break;
    case 8:
      uint64_t result = 0xD000000000000015;
      break;
    case 9:
      uint64_t result = 0x656873696C627570;
      break;
    case 10:
      uint64_t result = 0x65726F736E6F7073;
      break;
    case 11:
      uint64_t v3 = 0x5479726F7473;
      goto LABEL_22;
    case 12:
      uint64_t result = 0x65676175676E616CLL;
      break;
    case 13:
      uint64_t result = 0x6974616D6F747561;
      break;
    case 14:
      uint64_t result = 0x726F737365636361;
      break;
    case 15:
      uint64_t result = 0x726F74617272616ELL;
      break;
    case 16:
      uint64_t result = 0x7275446B63617274;
      break;
    case 17:
      uint64_t result = 0x6F72506B63617274;
      break;
    case 18:
      uint64_t result = 0xD000000000000016;
      break;
    case 19:
      uint64_t v3 = 0x546F65646976;
LABEL_22:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x7079000000000000;
      break;
    default:
      return result;
  }
  return result;
}

unsigned __int8 *getEnumTagSinglePayload for FormatAccessibilityRole(unsigned __int8 *result, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA)
  {
LABEL_18:
    unsigned int v6 = *result;
    BOOL v7 = v6 >= 4;
    unsigned int v8 = v6 - 4;
    if (!v7) {
      unsigned int v8 = -1;
    }
    if (v8 + 1 < 2) {
      unsigned int v8 = 0;
    }
    if (v8 >= 3) {
      return (unsigned __int8 *)(v8 - 2);
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v2 = a2 + 6;
    if (a2 + 6 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = result[1];
        if (!result[1]) {
          goto LABEL_18;
        }
        goto LABEL_16;
      case 2:
        int v5 = *(unsigned __int16 *)(result + 1);
        if (!*(_WORD *)(result + 1)) {
          goto LABEL_18;
        }
        goto LABEL_16;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v5 = *(_DWORD *)(result + 1);
        if (!v5) {
          goto LABEL_18;
        }
LABEL_16:
        uint64_t result = (unsigned __int8 *)((*result | (v5 << 8)) - 6);
        break;
      default:
        goto LABEL_18;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatItemTrait(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xCF) {
    goto LABEL_17;
  }
  if (a2 + 49 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 49) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 49;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 49;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 49;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x32;
  int v8 = v6 - 50;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatColorAssignComponentProcessor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)uint64_t result = a2 - 250;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 6;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C0EF084C);
}

uint64_t destroy for FormatCornerRadius(uint64_t a1)
{
  return sub_1BFF04738(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t storeEnumTagSinglePayload for FormatImageNodeStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 200) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 200) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatPropertyValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x71)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 114;
    if (a3 >= 0x72) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x72) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = ((8 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 4) | ((unint64_t)((8 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 4)) << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1C00478FC@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

uint64_t storeEnumTagSinglePayload for GroupLayoutBindingContext.OrderedItemBinding(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBackground(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x79 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 121);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 4) | (8 * ((*(void *)a1 >> 57) & 8 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x78) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

void sub_1C00479B4(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x71) {
    unsigned int v8 = 113;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_42:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 > 0x71)
          {
            unint64_t v20 = (unint64_t)&a1[v9 + 8] & ~v9;
            unint64_t v21 = *(void (**)(unint64_t))(v6 + 56);
            v21(v20);
          }
          else
          {
            if (a2 > 0x71)
            {
              unint64_t v19 = a2 - 114;
            }
            else
            {
              uint64_t v18 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
              unint64_t v19 = (v18 | (v18 << 57)) & 0xF000000000000007;
            }
            *(void *)a1 = v19;
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t storeEnumTagSinglePayload for FormatOptionEnum(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBorder(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

unsigned char *_s4BoolOwst_0_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 21 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 21) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEA)
  {
    unsigned int v6 = ((a2 - 235) >> 8) + 1;
    *uint64_t result = a2 + 21;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 21;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatCornerRadius.Value(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatCornerRadius.Value(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C0047E0C(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a2);
}

uint64_t sub_1C0047E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return nullsub_1(a4);
}

uint64_t sub_1C0047E44()
{
  uint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1702521203;
      break;
    case 2:
      uint64_t result = 0x656D7473756A6461;
      break;
    case 3:
      uint64_t result = 1885433183;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatAndExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x71)
  {
    *(void *)uint64_t result = a2 - 114;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x72) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x72) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatAndExpression(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x72 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 114);
  }
  unsigned int v3 = ((*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x71) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t getEnumTagSinglePayload for FormatContentSubgroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C0DC8CEC);
}

uint64_t storeEnumTagSinglePayload for FormatFontAttributes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 34) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 33) = a2 + 4;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatSystemFont(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 66) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 66) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSystemFont(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 66)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C0048064()
{
  uint64_t v1 = 121;
  if (*v0 != 1) {
    uint64_t v1 = 1885433183;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 120;
  }
}

uint64_t sub_1C00480A0()
{
  return sub_1BFCF18B0(*v0);
}

uint64_t storeEnumTagSinglePayload for FeedSlot(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedSlot(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C0048144()
{
  uint64_t v1 = 0x6572707845736872;
  if (*v0 != 1) {
    uint64_t v1 = 1885433183;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x657270784573686CLL;
  }
}

uint64_t sub_1C0048198(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 264) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 264) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatFontWeight(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

NewsFeed::FormatFontWeight_optional sub_1C00482F8(Swift::String *a1)
{
  return FormatFontWeight.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatImage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x79)
  {
    *(void *)uint64_t result = a2 - 122;
    if (a3 >= 0x7A) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7A) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatImage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7A && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 122);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 4) | (8 * ((*(void *)a1 >> 57) & 8 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x79) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

unsigned char *storeEnumTagSinglePayload for FormatTextSize.CodingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupDecoration()
{
  return &type metadata for FeedGroupDecoration;
}

unsigned char *storeEnumTagSinglePayload for FormatItemTrait(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 49 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 49) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xCF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xCE)
  {
    unsigned int v6 = ((a2 - 207) >> 8) + 1;
    *uint64_t result = a2 + 49;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 49;
        break;
    }
  }
  return result;
}

void sub_1C0048560(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x64696C6F73;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x746E656964617267;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "radialGradient");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    case 3:
      *(void *)a1 = 0x656E696873;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t FeedGap.init(identifier:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = qword_1F1B8A600;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 1;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  return result;
}

uint64_t sub_1C0048610()
{
  return 0x327374756F79616CLL;
}

uint64_t getEnumTagSinglePayload for SportsStandingDataVisualizationMetadata(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1C0048684(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1C0048734();
  uint64_t v5 = MEMORY[0x1E4FAB458];
  return MEMORY[0x1F415F4F0](a1, a2, v4, v5);
}

uint64_t sub_1C00486E0(uint64_t a1)
{
  unint64_t v2 = sub_1C0048734();
  uint64_t v3 = MEMORY[0x1E4FAB458];
  return MEMORY[0x1F415F4F8](a1, v2, v3);
}

unint64_t sub_1C0048734()
{
  unint64_t result = qword_1EB894A00;
  if (!qword_1EB894A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB894A00);
  }
  return result;
}

unint64_t sub_1C0048788@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C00487B4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C00487B4(char a1)
{
  unint64_t result = 0x646574696D696CLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6D694C6172747865;
      break;
    case 2:
      unint64_t result = 0x6E6769737361;
      break;
    case 3:
      unint64_t result = 0x796669646F6DLL;
      break;
    case 4:
      unint64_t result = 0x6F697469646E6F63;
      break;
    case 5:
      unint64_t result = 0x6563616C706572;
      break;
    case 6:
      unint64_t result = 0x646E656C62;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1C004889C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C00488C8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C00488C8(char a1)
{
  unint64_t result = 0x656C626978656C66;
  switch(a1)
  {
    case 1:
      unint64_t result = 1954047348;
      break;
    case 2:
      unint64_t result = 0x726568746FLL;
      break;
    case 3:
      unint64_t result = 0x686374697773;
      break;
    case 4:
      unint64_t result = 0x694C656C676E6973;
      break;
    case 5:
      unint64_t result = 0x74786554746C61;
      break;
    case 6:
      unint64_t result = 0x6978656C46746C61;
      break;
    case 7:
      unint64_t result = 0x6C6F686563616C70;
      break;
    case 8:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C00489DC()
{
  return sub_1BFCE95BC(*v0);
}

uint64_t getEnumTagSinglePayload for FormatContentSlotItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C1458170);
}

uint64_t storeEnumTagSinglePayload for FormatTypeDefinition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)unint64_t result = 0u;
      *(unsigned char *)(result + 48) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatTypeDefinition(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 48) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 48) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t getEnumTagSinglePayload for FormatBoolean(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

unsigned char *storeEnumTagSinglePayload for FormatOptionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatOperator(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

NewsFeed::FormatOptionType_optional sub_1C0048C78(Swift::String *a1)
{
  return FormatOptionType.init(rawValue:)(*a1);
}

uint64_t sub_1C0048C84()
{
  uint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1701667182;
      break;
    case 2:
      uint64_t result = 0x6E6F69746361;
      break;
    case 3:
      uint64_t result = 0x69747265706F7270;
      break;
    case 4:
      uint64_t result = 0x726F7463656C6573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SportsStandingDataVisualizationMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_32(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_33(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_35(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_36(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_37(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_39(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_41(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_42(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_43(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_45(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_46(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_47(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_49(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_51(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_52(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_53(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_55(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_56(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_57(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_59(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_61(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_62(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_63(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_65(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_66(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_67(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_69(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_71(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_72(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_73(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_75(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_76(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_77(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_79(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_81(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_82(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_83(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_85(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_86(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_87(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_89(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_91(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_92(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_93(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_95(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_96(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_97(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_99(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_100(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_101(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_102(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_103(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_104(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_105(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_106(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_107(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_108(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_109(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_110(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_111(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_112(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_113(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_114(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_115(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_116(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_117(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_118(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_119(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_120(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_121(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_122(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t storeEnumTagSinglePayload for FormatBoolean(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatAccessibilityProperty(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3F9)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 1018;
    if (a3 >= 0x3FA) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FA) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = (-a2 & 3) << 60;
      *(unsigned char *)(result + 8) = -a2 >> 2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatAccessibilityProperty(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FA && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1018);
  }
  unsigned int v3 = ((*(void *)a1 >> 60) & 3 | (4 * *(unsigned __int8 *)(a1 + 8))) ^ 0x3FF;
  if (v3 >= 0x3F9) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

unsigned char *storeEnumTagSinglePayload for FormatFontScalingStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatEquationOperator(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1C004976C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFD) {
    unsigned int v7 = 253;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 17) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFD) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 17) & ~v6);
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + 16);
      if (v15 > 2) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

uint64_t sub_1C00498FC()
{
  return sub_1BFCDC54C(*v0);
}

uint64_t storeEnumTagSinglePayload for FormatSyncImageContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)uint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSyncImageContent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

void sub_1C00499B8(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v11 = ((v9 + 8) & ~v9) + v10;
  BOOL v12 = a3 >= v8;
  unsigned int v13 = a3 - v8;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v8 >= a2)
  {
    switch(v14)
    {
      case 1:
        a1[v11] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v11] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_55:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v11] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if ((v7 & 0x80000000) != 0)
          {
            unint64_t v20 = (unsigned char *)((unint64_t)&a1[v9 + 8] & ~v9);
            if (v7 >= a2)
            {
              uint64_t v24 = *(void (**)(unint64_t))(v6 + 56);
              unint64_t v25 = (unint64_t)&a1[v9 + 8] & ~v9;
              v24(v25);
            }
            else
            {
              if (v10 <= 3) {
                int v21 = ~(-1 << (8 * v10));
              }
              else {
                int v21 = -1;
              }
              if (v10)
              {
                int v22 = v21 & (~v7 + a2);
                if (v10 <= 3) {
                  int v23 = v10;
                }
                else {
                  int v23 = 4;
                }
                bzero(v20, v10);
                switch(v23)
                {
                  case 2:
                    *(_WORD *)unint64_t v20 = v22;
                    break;
                  case 3:
                    *(_WORD *)unint64_t v20 = v22;
                    v20[2] = BYTE2(v22);
                    break;
                  case 4:
                    *(_DWORD *)unint64_t v20 = v22;
                    break;
                  default:
                    *unint64_t v20 = v22;
                    break;
                }
              }
            }
          }
          else
          {
            if ((a2 & 0x80000000) != 0) {
              uint64_t v19 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v19 = a2 - 1;
            }
            *(void *)a1 = v19;
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v15 = ~v8 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v11)
      {
        int v18 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v11] = v16;
        break;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        break;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        break;
      default:
        return;
    }
  }
}

uint64_t sub_1C0049CA8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_1C0049E38(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 >= a2)
  {
    switch(v11)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          int v16 = *(void (**)(void))(v6 + 56);
          v16();
        }
        break;
    }
  }
  else
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        break;
      default:
        return;
    }
  }
}

uint64_t sub_1C004A050(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

unint64_t sub_1C004A1A8()
{
  return sub_1C004A1B0(*v0);
}

unint64_t sub_1C004A1B0(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4264657472617473;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 0x5374736568676968;
      break;
    case 5:
      unint64_t result = 0x736B6165727473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatBindingBoolExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 11) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 11) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 10) = a2 + 1;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatBoolBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x18)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 25;
    if (a3 >= 0x19) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0x19) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(_WORD *)(result + 8) = (((-a2 >> 3) & 3) - 4 * (_WORD)a2) << 11;
    }
  }
  return result;
}

NewsFeed::FormatAnchor_optional sub_1C004A314(Swift::String *a1)
{
  return FormatAnchor.init(rawValue:)(*a1);
}

unint64_t sub_1C004A320@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C004A34C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C004A34C(char a1)
{
  unint64_t result = 0x6465786966;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x694664656C616373;
      break;
    case 2:
      unint64_t result = 0x736E6D756C6F63;
      break;
    case 3:
      unint64_t result = 1819044198;
      break;
    case 4:
      unint64_t result = 0x69466F54657A6973;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x747265766E69;
      break;
    case 7:
      unint64_t result = 0x7274654D746E6F66;
      break;
    case 8:
      unint64_t result = 0x4664657A69736572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C004A454()
{
  return sub_1BFCD2860(*v0);
}

uint64_t getEnumTagSinglePayload for HeadlineViewLayout.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C0CEDF7C);
}

uint64_t sub_1C004A474@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C004A4A0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C004A4A0(char a1)
{
  uint64_t result = 0x6E61656C6F6F62;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x726F6C6F63;
      break;
    case 2:
      uint64_t result = 1702125924;
      break;
    case 3:
      uint64_t result = 1836412517;
      break;
    case 4:
      uint64_t result = 0x74616F6C66;
      break;
    case 5:
      uint64_t result = 0x72656765746E69;
      break;
    case 6:
      uint64_t result = 0x676E69727473;
      break;
    case 7:
      uint64_t result = 7107189;
      break;
    case 8:
      uint64_t result = 1953394534;
      break;
    case 9:
      uint64_t result = 0x6567616D69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatFontDesign(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatSymbolConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = -(char)a2;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatBorder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t _s5ColorOwst_2(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t _s5ColorOwet_2(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

void sub_1C004A728(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x6567616D69;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1954047348;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 1819242338;
      *(void *)(a1 + 8) = 0xE400000000000000;
      break;
    case 3:
      strcpy((char *)a1, "layeredMedia");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 4:
      *(void *)a1 = 0x6572616873;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    case 5:
      *(void *)a1 = 7107189;
      *(void *)(a1 + 8) = 0xE300000000000000;
      break;
    case 6:
      *(void *)a1 = 0x656D695465746164;
      *(void *)(a1 + 8) = 0xE800000000000000;
      break;
    case 7:
      *(void *)a1 = 0x74616F6C66;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1C004A800@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C004A82C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C004A82C(char a1)
{
  uint64_t result = 0x7974706D65;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x676E69646E6962;
      break;
    case 2:
      uint64_t result = 0x6D6574737973;
      break;
    case 3:
      uint64_t result = 0x656C646E7562;
      break;
    case 4:
      uint64_t result = 0x646E616D6D6F63;
      break;
    case 5:
      uint64_t result = 0x65746F6D6572;
      break;
    case 6:
      uint64_t result = 0x686374697773;
      break;
    case 7:
      uint64_t result = 0x65746E4972657375;
      break;
    case 8:
      uint64_t result = 0x656C797473;
      break;
    case 9:
      uint64_t result = 0x726F7463656C6573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatPackage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEB) {
    goto LABEL_17;
  }
  if (a2 + 21 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 21) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 21;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x16;
  int v8 = v6 - 22;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

NewsFeed::FormatAccessibility_optional sub_1C004A9CC(Swift::String *a1)
{
  return FormatAccessibility.init(rawValue:)(*a1);
}

void sub_1C004A9DC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6D6574737973;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 0x6D6F74737563;
      goto LABEL_3;
    case 2:
      *a1 = 0x65746F6D6572;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 0x676E69646E6962;
      a1[1] = 0xE700000000000000;
      break;
    case 4:
      *a1 = 0x646E756F626E75;
      a1[1] = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE600000000000000;
      break;
  }
}

ValueMetadata *type metadata accessor for FeedLayoutOrder()
{
  return &type metadata for FeedLayoutOrder;
}

uint64_t storeEnumTagSinglePayload for FormatImageNodeBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 7)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 8;
    if (a3 >= 8) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 8) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2)
    {
      *(void *)(result + 32) = 0;
      *(_OWORD *)uint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(unsigned char *)(result + 40) = (-2 * a2) & 0x1E;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatImageNodeBinding(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 8 && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 8);
  }
  unsigned int v3 = ~(*(unsigned __int8 *)(a1 + 40) >> 1) & 0xF;
  if (v3 >= 7) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

void sub_1C004AB34(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x65756C6176;
  if (*v1) {
    uint64_t v2 = 0x6465646E756F72;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t storeEnumTagSinglePayload for FormatPoint(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

NewsFeed::FormatFontScalingStyle_optional sub_1C004AB98(Swift::String *a1)
{
  return FormatFontScalingStyle.init(rawValue:)(*a1);
}

uint64_t getEnumTagSinglePayload for FeedWebEmbed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C0BCC8F4);
}

uint64_t storeEnumTagSinglePayload for FormatBindingTextExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1F9)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 106) = 0;
    *(_WORD *)(result + 104) = 0;
    *(void *)uint64_t result = a2 - 506;
    if (a3 >= 0x1FA) {
      *(unsigned char *)(result + 107) = 1;
    }
  }
  else
  {
    if (a3 >= 0x1FA) {
      *(unsigned char *)(result + 107) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 88) = 0u;
      *(_OWORD *)(result + 72) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(_WORD *)(result + 104) = (-256 * a2) & 0xF800;
      *(unsigned char *)(result + 106) = (((-a2 & 0x100) << 12) - (a2 << 21)) >> 16;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBindingTextExpression(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x1FA && *(unsigned char *)(a1 + 107)) {
    return (*(_DWORD *)a1 + 506);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 106) >> 5) | (8
                                               * ((*(unsigned __int16 *)(a1 + 104) >> 11) & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a1 + 106) >> 4) & 1))))) ^ 0x1FF;
  if (v3 >= 0x1F9) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for FormatFontScalingData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF4)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 245;
    if (a3 >= 0xF5) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF5) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = a2 + 11;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatContentSubgroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C0DC8E50);
}

uint64_t storeEnumTagSinglePayload for FormatFontScaling(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(void *)uint64_t result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 244;
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = a2 + 12;
    }
  }
  return result;
}

uint64_t sub_1C004AD4C@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

unsigned char *storeEnumTagSinglePayload for FeedGroupPaidVisibility(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void sub_1C004AE24(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEA00000000007265;
  uint64_t v3 = 0x696669746E656469;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x6C6562616CLL;
      goto LABEL_3;
    case 2:
      *a1 = 0x65756C6176;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 1886152040;
      a1[1] = 0xE400000000000000;
      break;
    case 4:
      *a1 = 1953393000;
      a1[1] = 0xE400000000000000;
      break;
    case 5:
      *a1 = 0x65676175676E616CLL;
      a1[1] = 0xE800000000000000;
      break;
    case 6:
      *a1 = 0x7469617274;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_1C004AEEC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x646E616D6D6F63;
  if (v2 != 1)
  {
    uint64_t v5 = 0x656E696C6E69;
    unint64_t v4 = 0xE600000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x676E69646E6962;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

unsigned char *_s5ImageOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void sub_1C004B018(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_39:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 < 0xFE)
          {
            a1[v9] = a2 + 1;
          }
          else
          {
            int v18 = *(void (**)(void))(v6 + 56);
            v18();
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t FeedLayoutResult.feedItemLayoutAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t storeEnumTagSinglePayload for FormatGroupColumnSystem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HeadlineViewLayout.Attributes(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 296) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 304) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for FeedGroupClusteringKnobs(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C004B384(uint64_t a1, uint64_t a2)
{
  return sub_1BFF6B430(a1, a2, MEMORY[0x1E4F276F0], (unint64_t *)&unk_1EB871110, MEMORY[0x1E4F276F0], MEMORY[0x1E4F27708]);
}

uint64_t sub_1C004B3CC(uint64_t *a1, uint64_t *a2)
{
  return sub_1C004B384(*a1, *a2);
}

uint64_t sub_1C004B3D8(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t sub_1C004B524()
{
  return sub_1C004B538(*v0);
}

uint64_t sub_1C004B538(char a1)
{
  if (a1) {
    return 1635017060;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_1C004B558()
{
  uint64_t result = 1701869940;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1635017060;
      break;
    case 2:
      uint64_t result = 0x656469727265766FLL;
      break;
    case 3:
      uint64_t result = 0x69666E6F43707061;
      break;
    case 4:
      uint64_t result = 0x6E614D7465737361;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C004B5F0()
{
  return sub_1C004B604(*v0);
}

uint64_t sub_1C004B604(char a1)
{
  if (a1) {
    return 0x736E6F6973726576;
  }
  else {
    return 0x65756C6176;
  }
}

unint64_t sub_1C004B638()
{
  return sub_1C004B640(*v0);
}

unint64_t sub_1C004B640(char a1)
{
  unint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x74756F79616CLL;
      break;
    case 3:
      unint64_t result = 0x736E6F6974706FLL;
      break;
    case 4:
      unint64_t result = 0x726F7463656C6573;
      break;
    case 5:
      unint64_t result = 0x73746E65746E6F63;
      break;
    case 6:
      unint64_t result = 0x736E6F6974636573;
      break;
    case 7:
      unint64_t result = 0x737265746C6966;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatPropertyValue()
{
  return &type metadata for FormatPropertyValue;
}

uint64_t sub_1C004B73C()
{
  uint64_t result = 1953459315;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x736E6F6974706FLL;
      break;
    case 2:
      uint64_t result = 0x726F7463656C6573;
      break;
    case 3:
      uint64_t result = 0x736D657469;
      break;
    case 4:
      uint64_t result = 0x656C65536D657469;
      break;
    case 5:
      uint64_t result = 0x6974704F6D657469;
      break;
    case 6:
      uint64_t result = 0x697875416D657469;
      break;
    default:
      return result;
  }
  return result;
}

NewsFeed::FormatItemTrait_optional sub_1C004B81C(Swift::String *a1)
{
  return FormatItemTrait.init(rawValue:)(*a1);
}

uint64_t _s8ResolvedVwst_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C0BF8FBC);
}

uint64_t destroy for FormatVideoPlayerContent()
{
  return swift_release();
}

unsigned char *storeEnumTagSinglePayload for NewsEnvironment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatTextAlignment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatLayeredMediaNodeStyle.Selector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 208)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatDimensionSizing(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x79)
  {
    *(void *)uint64_t result = a2 - 122;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7A) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7A) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatDimensionSizing(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7A && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 122);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 4) | (8 * ((*(void *)a1 >> 57) & 8 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x79) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t getEnumTagSinglePayload for HeadlineViewLayout.Attributes(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 304)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for FormatBorderInset(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

NewsFeed::FormatBorderInset_optional sub_1C004BBC0(Swift::String *a1)
{
  return FormatBorderInset.init(rawValue:)(*a1);
}

void sub_1C004BBCC(void *a1@<X8>)
{
  *a1 = 0x676E69646E6962;
  a1[1] = 0xE700000000000000;
}

uint64_t storeEnumTagSinglePayload for FormatSizeEquation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatUnderlineStyle(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1C004BCB8(uint64_t a1, uint64_t a2)
{
  sub_1C004BD4C(0, qword_1EB8724F0, (uint64_t (*)(uint64_t))sub_1C00895C4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1C004BD4C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for FormatContentSlotItemObject.CodingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *uint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatContentSlotItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C145823C);
}

uint64_t sub_1C004BE90()
{
  return 0x7261696C69787561;
}

uint64_t sub_1C004BEAC@<X0>(uint64_t a1@<X8>)
{
  return sub_1BFEDDA7C(v1[2], v1[3], v1[4], a1);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1C004BECC()
{
  uint64_t v1 = 0x73746E657665;
  if (*v0 != 1) {
    uint64_t v1 = 0x7475706E69;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x736574617473;
  }
}

unint64_t sub_1C004BF1C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C004BF48(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C004BF48(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0x7365636341736168;
      break;
    case 3:
    case 4:
      unint64_t result = 0x6F69647541736168;
      break;
    case 6:
      unint64_t result = 0x766974614E736168;
      break;
    case 7:
      unint64_t result = 0x6F65646956736168;
      break;
    case 8:
      unint64_t result = 0x6F736E6F70537369;
      break;
    case 9:
      unint64_t result = 0x646961507369;
      break;
    case 10:
      unint64_t result = 0x656C646E75427369;
      break;
    case 11:
      unint64_t result = 0x6574656C65447369;
      break;
    case 12:
      unint64_t result = 0x74666172447369;
      break;
    case 13:
      unint64_t result = 0x446C61636F4C7369;
      break;
    case 14:
      unint64_t result = 0x5273736572507369;
      break;
    case 15:
      unint64_t result = 0x7269646552736168;
      break;
    case 16:
      unint64_t result = 0x7267726576457369;
      break;
    case 17:
      unint64_t result = 0x4F65757373497369;
      break;
    case 18:
      unint64_t result = 0xD000000000000011;
      break;
    case 19:
      unint64_t result = 0xD000000000000018;
      break;
    case 20:
      unint64_t result = 0xD000000000000014;
      break;
    case 21:
      unint64_t result = 0x656E654749417369;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1C004C1B4(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x726F6C6F63;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x746E656964617267;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "radialGradient");
      *(unsigned char *)(a1 + 15) = -18;
      return;
    case 3:
      uint64_t v4 = 1852401779;
      goto LABEL_8;
    case 4:
      *(void *)a1 = 0x74696C7073;
      *(void *)(a1 + 8) = 0xE500000000000000;
      return;
    case 5:
      uint64_t v4 = 1734438249;
LABEL_8:
      *(void *)a1 = v4 & 0xFFFF0000FFFFFFFFLL | 0x6500000000;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    case 6:
      *(void *)a1 = 1633905005;
      *(void *)(a1 + 8) = 0xE400000000000000;
      break;
    case 7:
      strcpy((char *)a1, "visualEffect");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

unsigned char *storeEnumTagSinglePayload for FormatFontTrait(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *unint64_t result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 19;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FeedGroupEmitterPriority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatPreviewParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2)
    {
      *(void *)(result + 48) = 0;
      *(void *)(result + 56) = 0;
      *(unsigned char *)(result + 64) = (a2 ^ 0x7F) & 0xFE | ((a2 ^ 0x7F) << 7);
    }
  }
  return result;
}

unint64_t sub_1C004C494()
{
  return sub_1C004C49C(*v0);
}

unint64_t sub_1C004C49C(char a1)
{
  unint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x446873696C627570;
      break;
    case 2:
      unint64_t result = 0x6F7779654B644169;
      break;
    case 3:
      unint64_t result = 0x73656D656874;
      break;
    case 4:
      unint64_t result = 0x70756F7267627573;
      break;
    case 5:
      unint64_t result = 0x736E6F6974706FLL;
      break;
    case 6:
      unint64_t result = 0x726F7463656C6573;
      break;
    case 7:
      unint64_t result = 6775156;
      break;
    case 8:
      unint64_t result = 0x6575737369;
      break;
    case 9:
      unint64_t result = 0x7069726373627573;
      break;
    case 10:
      unint64_t result = 0x7974696E69666661;
      break;
    case 11:
      unint64_t result = 0xD000000000000016;
      break;
    case 12:
      unint64_t result = 0x656E696C64616568;
      break;
    case 13:
      unint64_t result = 0x6465626D45626577;
      break;
    case 14:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C004C64C()
{
  uint64_t v1 = 0x6874646977;
  if (*v0 != 1) {
    uint64_t v1 = 1885433183;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x746867696568;
  }
}

unsigned char *storeEnumTagSinglePayload for FormatOptionExpression.Exists.Operator(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

NewsFeed::FormatOptionExpression::Exists::Operator_optional sub_1C004C764(Swift::String *a1)
{
  return FormatOptionExpression.Exists.Operator.init(rawValue:)(*a1);
}

unsigned char *storeEnumTagSinglePayload for FormatSymbolWeight(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

void sub_1C004C83C(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 17) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_41:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 > 0xFD)
          {
            unint64_t v18 = (unint64_t)&a1[v9 + 17] & ~v9;
            uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
            v19(v18);
          }
          else if (a2 > 0xFD)
          {
            a1[16] = 0;
            *(void *)a1 = a2 - 254;
            *((void *)a1 + 1) = 0;
          }
          else
          {
            a1[16] = -(char)a2;
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t storeEnumTagSinglePayload for FormatBundleImageSize(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBundleImageSize(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_1C004CB34()
{
  uint64_t result = 0x656C616373;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1886351971;
      break;
    case 2:
      uint64_t result = 1701603700;
      break;
    case 3:
      uint64_t result = 0x69736E6972746E69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatShadow(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatCellSelection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 56) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1C004CC48()
{
  uint64_t v1 = *v0;
  uint64_t v2 = 0x724F737961776C61;
  uint64_t v3 = 0x6E776F6E6B6E75;
  if (*v0 == 2) {
    uint64_t v3 = 0x6554737961776C61;
  }
  if (v1 != 1) {
    uint64_t v2 = v3;
  }
  if (v1) {
    return v2;
  }
  else {
    return 0x6974616D6F747561;
  }
}

uint64_t storeEnumTagSinglePayload for FormatMediaTimingFunctionControlPoints(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatMediaTimingFunctionControlPoints(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t destroy for FormatContentRequirement(uint64_t a1)
{
  return sub_1C004CD84(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
}

uint64_t sub_1C004CD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return swift_release();
    case 7:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 15:
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 16:
LABEL_7:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatTextLineBreakMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t sub_1C004CF20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C004CF4C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C004CF4C(char a1)
{
  uint64_t result = 0x656E696C64616568;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6575737369;
      break;
    case 2:
      uint64_t result = 0x70756F7267;
      break;
    case 3:
      uint64_t result = 6775156;
      break;
    case 4:
      uint64_t result = 0x656C7A7A7570;
      break;
    case 5:
      uint64_t result = 0x7954656C7A7A7570;
      break;
    case 6:
      uint64_t result = 0x7453656C7A7A7570;
      break;
    case 7:
      uint64_t result = 0x6E6F6974706FLL;
      break;
    case 8:
      uint64_t result = 0x76457374726F7073;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatContentSubgroup.Resolved()
{
  return &type metadata for FormatContentSubgroup.Resolved;
}

uint64_t FormatContentSubgroup.Resolved.layout.getter()
{
  return swift_retain();
}

uint64_t sub_1C004D060@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C07569EC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C004D08C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 8) & ~v6);
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

unint64_t sub_1C004D224()
{
  return sub_1C004D22C(*v0);
}

unint64_t sub_1C004D22C(char a1)
{
  unint64_t result = 0xD000000000000018;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x7669446369706F74;
      break;
    case 5:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000026;
      break;
    case 7:
      unint64_t result = 0xD000000000000023;
      break;
    case 8:
      unint64_t result = 0xD000000000000025;
      break;
    case 9:
      unint64_t result = 0xD00000000000001ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t FeedGroupDebugFormat.themes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of FeedGroupDebuggable.debugName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t getEnumTagSinglePayload for FormatGroupNodeMaskStyle.Selector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 177)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

unsigned char *storeEnumTagSinglePayload for FormatLineBreakStrategy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatGroupCollection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatGroupCollection(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatCommandBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3F7)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 1016;
    if (a3 >= 0x3F8) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3F8) {
      *(unsigned char *)(result + 26) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(unsigned char *)(result + 24) = 4 * (-(char)a2 & 3);
      *(unsigned char *)(result + 25) = -a2 >> 2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatCommandBinding(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3F8 && *(unsigned char *)(a1 + 26)) {
    return (*(_DWORD *)a1 + 1016);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 24) >> 2) & 3 | (4 * *(unsigned __int8 *)(a1 + 25))) ^ 0x3FF;
  if (v3 >= 0x3F7) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t getEnumTagSinglePayload for FormatQueryValue(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C004D5E4@<X0>(BOOL *a1@<X8>)
{
  return sub_1BFD59FB4(a1);
}

BOOL sub_1C004D5F0(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

uint64_t sub_1C004D620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 80);
}

uint64_t sub_1C004D62C()
{
  if (*v0) {
    return 0x6F737365636F7270;
  }
  else {
    return 0x6973736572707865;
  }
}

void sub_1C004D698(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v11 = ((v9 + 16) & ~v9) + v10;
  BOOL v12 = a3 >= v8;
  unsigned int v13 = a3 - v8;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v8 >= a2)
  {
    switch(v14)
    {
      case 1:
        a1[v11] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v11] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_55:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v11] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if ((v7 & 0x80000000) != 0)
          {
            unint64_t v20 = (unsigned char *)((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9);
            if (v7 >= a2)
            {
              uint64_t v24 = *(void (**)(unint64_t))(v6 + 56);
              unint64_t v25 = (((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9;
              v24(v25);
            }
            else
            {
              if (v10 <= 3) {
                int v21 = ~(-1 << (8 * v10));
              }
              else {
                int v21 = -1;
              }
              if (v10)
              {
                int v22 = v21 & (~v7 + a2);
                if (v10 <= 3) {
                  int v23 = v10;
                }
                else {
                  int v23 = 4;
                }
                bzero(v20, v10);
                switch(v23)
                {
                  case 2:
                    *(_WORD *)unint64_t v20 = v22;
                    break;
                  case 3:
                    *(_WORD *)unint64_t v20 = v22;
                    v20[2] = BYTE2(v22);
                    break;
                  case 4:
                    *(_DWORD *)unint64_t v20 = v22;
                    break;
                  default:
                    *unint64_t v20 = v22;
                    break;
                }
              }
            }
          }
          else
          {
            if ((a2 & 0x80000000) != 0) {
              uint64_t v19 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v19 = a2 - 1;
            }
            *(void *)a1 = v19;
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v15 = ~v8 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v11)
      {
        int v18 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v11] = v16;
        break;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        break;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        break;
      default:
        return;
    }
  }
}

void sub_1C004D990(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x776F6C6C6F66;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x6B636F6C62;
      goto LABEL_3;
    case 2:
      *a1 = 0x6974634165726F6DLL;
      a1[1] = 0xEB00000000736E6FLL;
      break;
    case 3:
      *a1 = 0x65726F6E6769;
      a1[1] = 0xE600000000000000;
      break;
    case 4:
      *a1 = 0x657461676976616ELL;
      a1[1] = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1C004DA30()
{
  uint64_t v1 = 0x6574656D61726170;
  if (*v0 != 1) {
    uint64_t v1 = 1885433183;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65756C6176;
  }
}

uint64_t storeEnumTagSinglePayload for FormatContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C0EF09A8);
}

uint64_t sub_1C004DA98()
{
  uint64_t result = 7105633;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7466654C706F74;
      break;
    case 2:
      uint64_t result = 0x7468676952706F74;
      break;
    case 3:
      uint64_t result = 0x654C6D6F74746F62;
      break;
    case 4:
      uint64_t result = 0x69526D6F74746F62;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1C004DB34()
{
  if (*(unsigned char *)(v0 + 16) == 1) {
    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(v0 + 24)
  }
                                             + OBJC_IVAR____TtCC8NewsFeed33FeedItemRendererPipelineProcessorP33_D1D725D6BA23D5C832E553645D2883FA7Context_loadingGroup));
}

uint64_t sub_1C004DB5C()
{
  return 0x676E697A65657266;
}

unsigned char *storeEnumTagSinglePayload for FeedGroupRepooling(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unint64_t sub_1C004DC40()
{
  return sub_1C004DC48(*v0);
}

unint64_t sub_1C004DC48(char a1)
{
  unint64_t result = 0x746E65746E6F63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E656449646E696BLL;
      break;
    case 2:
      unint64_t result = 0x6973695664696170;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 0x746C754D6B6E6172;
      break;
    case 5:
      unint64_t result = 0x726F635365736162;
      break;
    case 6:
    case 7:
    case 8:
    case 9:
      unint64_t result = 0xD000000000000024;
      break;
    case 10:
      unint64_t result = 0x6E696C6F6F706572;
      break;
    case 11:
      unint64_t result = 0x72685465726F6373;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupClusteringKnobs()
{
  return &type metadata for FeedGroupClusteringKnobs;
}

unsigned char *storeEnumTagSinglePayload for FormatSymbolScale(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatItemNodeSwipeActionStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

unint64_t sub_1C004DEDC()
{
  unint64_t result = 7235949;
  switch(*v0)
  {
    case 1:
      unint64_t result = 7889261;
      break;
    case 2:
      unint64_t result = 0x73646E696BLL;
      break;
    case 3:
      unint64_t result = 0x69747265706F7270;
      break;
    case 4:
      unint64_t result = 0x7261696C69787561;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatSymbolImage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSymbolImage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

void sub_1C004E024(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6465626D45626577;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 0x656E696C64616568;
      goto LABEL_3;
    case 2:
      *a1 = 0x6575737369;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 0x70756F7267;
      a1[1] = 0xE500000000000000;
      break;
    case 4:
      *a1 = 6775156;
      a1[1] = 0xE300000000000000;
      break;
    case 5:
      *a1 = 0x76457374726F7073;
      a1[1] = 0xEB00000000746E65;
      break;
    case 6:
      *a1 = 0x656C7A7A7570;
      a1[1] = 0xE600000000000000;
      break;
    case 7:
      *a1 = 0x7453656C7A7A7570;
      a1[1] = 0xEF63697473697461;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE800000000000000;
      break;
  }
}

uint64_t storeEnumTagSinglePayload for FormatSymbolName(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSymbolName(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

unsigned char *storeEnumTagSinglePayload for FormatSymbolName.CodingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t dispatch thunk of FeedGroupRepresentable.feedGroupDebug.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t storeEnumTagSinglePayload for FormatFeedGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C0C9CF20);
}

uint64_t storeEnumTagSinglePayload for FormatLayeredMediaNodeStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 208) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 208) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatImageRenderingMode(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t getEnumTagSinglePayload for FormatImageAdjustment(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 129)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 104) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

unint64_t sub_1C004E3CC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C004E3F8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C004E3F8(char a1)
{
  unint64_t result = 0x69616E626D756874;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656873696C627570;
      break;
    case 2:
      unint64_t result = 0x6974536F65646976;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1C004E4B4()
{
  unint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x7373616C63;
      break;
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
      unint64_t result = 0x736E6F6974706FLL;
      break;
    case 4:
      unint64_t result = 0x726F7463656C6573;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1C004E554(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xEC000000656E6968;
  uint64_t v5 = 0x63614D6574617473;
  if (v2 != 1)
  {
    uint64_t v5 = 0x74496D6F74737563;
    unint64_t v4 = 0xEA00000000006D65;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1836412517;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_1C004E5B8(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 6775156;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x72656874616577;
      goto LABEL_3;
    case 2:
      *a1 = 1684366694;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x76457374726F7073;
      a1[1] = 0xEB00000000746E65;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t storeEnumTagSinglePayload for FormatAbsoluteURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C0988C98);
}

uint64_t getEnumTagSinglePayload for FormatAbsoluteURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C0988BD8);
}

NewsFeed::FormatOperator_optional sub_1C004E664(Swift::String *a1)
{
  return FormatOperator.init(rawValue:)(*a1);
}

uint64_t sub_1C004E670()
{
  if (*v0) {
    return 0xD00000000000001CLL;
  }
  else {
    return 0x656D617266;
  }
}

unsigned char *_s8NewsFeed25FeedGroupFreezingDisallowVwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t objectdestroy_17Tm()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_17Tm_0()
{
  sub_1BFE4D30C(0, &qword_1EB873480, type metadata accessor for FeedItem, MEMORY[0x1E4FBB718]);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_release();
  swift_release();
  uint64_t v3 = v0 + v2;
  uint64_t v4 = type metadata accessor for FeedItem(0);
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v0 + v2, 1, v4))
  {
    goto LABEL_2;
  }
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      if (*(void *)(v3 + 48) >= 0x11uLL) {
        goto LABEL_76;
      }
      goto LABEL_2;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v3 + 80) >= 0x11uLL) {
        goto LABEL_76;
      }
      goto LABEL_2;
    case 2u:
      swift_bridgeObjectRelease();
      uint64_t v6 = type metadata accessor for FeedBannerAd();
      uint64_t v7 = v3 + *(int *)(v6 + 20);
      uint64_t v8 = sub_1C151DBAC();
      goto LABEL_57;
    case 3u:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v9 = (int *)type metadata accessor for FeedHeadline(0);
      uint64_t v10 = v9[10];
      uint64_t v11 = v3 + v10 + *(int *)(type metadata accessor for FeedHeadline.State(0) + 24);
      uint64_t v12 = type metadata accessor for SharedItem();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
      {
        uint64_t v13 = sub_1C151631C();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v11, v13);

        uint64_t v14 = v11 + *(int *)(v12 + 28);
        uint64_t v15 = sub_1C1515FDC();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
      }
      uint64_t v16 = v3 + v9[11];
      uint64_t v17 = sub_1C151D2DC();
      uint64_t v18 = *(void *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      }
      if (*(void *)(v3 + v9[12] + 8) >= 0x11uLL) {
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v3 + v9[13]) >= 3uLL) {
        swift_unknownObjectRelease();
      }

      goto LABEL_2;
    case 4u:
      if (*(void *)(v3 + 32) >= 0x11uLL) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v19 = (int *)type metadata accessor for FeedWebEmbed();
      uint64_t v20 = v3 + v19[8];
      uint64_t v21 = sub_1C1515FDC();
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v66(v20, v21);
      uint64_t v23 = v3 + v19[9];
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v23, 1, v21)) {
        v66(v23, v21);
      }
      swift_release();
      swift_release();
      uint64_t v24 = v3 + v19[12];
      unint64_t v25 = (int *)type metadata accessor for FeedHeadline(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v25 - 1) + 48))(v24, 1, v25))
      {
        uint64_t v65 = v21;
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v26 = v25[10];
        uint64_t v27 = v24 + v26 + *(int *)(type metadata accessor for FeedHeadline.State(0) + 24);
        uint64_t v28 = type metadata accessor for SharedItem();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v27, 1, v28))
        {
          uint64_t v29 = sub_1C151631C();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v27, v29);

          v66(v27 + *(int *)(v28 + 28), v65);
        }
        uint64_t v30 = v24 + v25[11];
        uint64_t v31 = sub_1C151D2DC();
        uint64_t v64 = *(void *)(v31 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v30, 1, v31)) {
          (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v30, v31);
        }
        if (*(void *)(v24 + v25[12] + 8) >= 0x11uLL) {
          swift_bridgeObjectRelease();
        }
        uint64_t v21 = v65;
        if (*(void *)(v24 + v25[13]) >= 3uLL) {
          swift_unknownObjectRelease();
        }
      }
      uint64_t v32 = v3 + v19[13];
      uint64_t v33 = type metadata accessor for WebEmbedDataVisualization();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v32, 1, v33)) {
        goto LABEL_2;
      }
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_59;
      }
      swift_bridgeObjectRelease();
      uint64_t v34 = type metadata accessor for GenericDataVisualization();
      v66(v32 + *(int *)(v34 + 20), v21);
      goto LABEL_76;
    case 5u:
      goto LABEL_40;
    case 6u:
      int v35 = *(unsigned __int8 *)(v3 + 281);
      if (v35 == 2) {
        goto LABEL_44;
      }
      if (v35 == 1)
      {

        swift_bridgeObjectRelease();
        if (*(void *)(v3 + 80) != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (*(void *)(v3 + 128) >= 0x11uLL) {
          swift_bridgeObjectRelease();
        }
        uint64_t v42 = *(void **)(v3 + 144);
        if (v42)
        {

          swift_bridgeObjectRelease();
          if (*(void *)(v3 + 224) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          if (*(void *)(v3 + 272) >= 0x11uLL) {
LABEL_76:
          }
            swift_bridgeObjectRelease();
        }
      }
      else
      {
        if (*(unsigned char *)(v3 + 281)) {
          goto LABEL_2;
        }
LABEL_40:

        swift_bridgeObjectRelease();
        if (*(void *)(v3 + 80) != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (*(void *)(v3 + 128) >= 0x11uLL) {
          goto LABEL_76;
        }
      }
LABEL_2:
      swift_release();
      return swift_deallocObject();
    case 7u:
LABEL_44:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v3 + 88) != 1)
      {
        swift_bridgeObjectRelease();
        if (*(void *)(v3 + 120)) {
          __swift_destroy_boxed_opaque_existential_1(v3 + 96);
        }
      }
      goto LABEL_2;
    case 8u:
      swift_bridgeObjectRelease();
      uint64_t v36 = v3 + *(int *)(type metadata accessor for FeedCustomItem() + 20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = v36 + *(int *)(type metadata accessor for FormatCustomItem.Resolved() + 24);
      uint64_t v38 = type metadata accessor for FormatCustomItem.Action();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v37, 1, v38))
      {
        uint64_t v39 = sub_1C1515FDC();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v37, v39);
      }
      goto LABEL_76;
    case 9u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v3 + 56)) {
        __swift_destroy_boxed_opaque_existential_1(v3 + 32);
      }
      if (*(void *)(v3 + 96)) {
        __swift_destroy_boxed_opaque_existential_1(v3 + 72);
      }
      if (*(void *)(v3 + 136)) {
        __swift_destroy_boxed_opaque_existential_1(v3 + 112);
      }
      goto LABEL_2;
    case 0xAu:
      swift_bridgeObjectRelease();
      uint64_t v6 = type metadata accessor for FeedEngagementBanner();
      uint64_t v7 = v3 + *(int *)(v6 + 20);
      uint64_t v8 = sub_1C151959C();
LABEL_57:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
      if (*(void *)(v3 + *(int *)(v6 + 32) + 8) >= 0x11uLL) {
        goto LABEL_76;
      }
      goto LABEL_2;
    case 0xBu:
LABEL_59:
      swift_release();
      goto LABEL_2;
    case 0xCu:
      goto LABEL_70;
    case 0xDu:
      if (*(void *)(v3 + 32) >= 0x11uLL) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
      if (*(void *)(v3 + 112)) {
        __swift_destroy_boxed_opaque_existential_1(v3 + 88);
      }
      if (*(void *)(v3 + 152)) {
        __swift_destroy_boxed_opaque_existential_1(v3 + 128);
      }
      if (*(void *)(v3 + 192)) {
        __swift_destroy_boxed_opaque_existential_1(v3 + 168);
      }
      goto LABEL_2;
    case 0xEu:
      if (*(void *)(v3 + 32) >= 0x11uLL) {
        swift_bridgeObjectRelease();
      }
LABEL_70:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_2;
    case 0xFu:
      if (*(void *)(v3 + 32) >= 0x11uLL) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v40 = v3 + *(int *)(type metadata accessor for FeedPuzzleStatistic() + 32);
      swift_unknownObjectRelease();
      uint64_t v41 = v40 + *(int *)(type metadata accessor for PuzzleStatistic() + 20);
      type metadata accessor for PuzzleStatisticCategory(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          type metadata accessor for PuzzleStatisticValue(0);
          goto LABEL_95;
        case 1u:
          type metadata accessor for PuzzleStatisticValue(0);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 5 || EnumCaseMultiPayload == 4)
          {
            uint64_t v44 = type metadata accessor for PuzzleStreak();
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v41, 1, v44))
            {
              uint64_t v45 = sub_1C151555C();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8))(v41, v45);
            }
          }
          uint64_t v46 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
          uint64_t v47 = v41 + *(int *)(v46 + 20);
          int v48 = swift_getEnumCaseMultiPayload();
          if (v48 == 5 || v48 == 4)
          {
            uint64_t v49 = type metadata accessor for PuzzleStreak();
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48))(v47, 1, v49))
            {
              uint64_t v50 = sub_1C151555C();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v47, v50);
            }
          }
          v41 += *(int *)(v46 + 24);
LABEL_95:
          int v51 = swift_getEnumCaseMultiPayload();
          if (v51 == 5 || v51 == 4)
          {
            uint64_t v52 = type metadata accessor for PuzzleStreak();
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48))(v41, 1, v52))goto LABEL_106; {
          }
            }
          goto LABEL_2;
        case 2u:
          uint64_t v53 = type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult(0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 48))(v41, 1, v53)) {
            goto LABEL_2;
          }
          uint64_t v54 = sub_1C151631C();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v41, v54);
          uint64_t v55 = type metadata accessor for PuzzleLeaderboardEntry();
          swift_bridgeObjectRelease();
          uint64_t v56 = v41 + *(int *)(v55 + 24);
          swift_bridgeObjectRelease();
          unint64_t v57 = *(void *)(v56 + 24);
          if (v57 >> 60 != 15) {
            sub_1BFE95664(*(void *)(v56 + 16), v57);
          }
          swift_bridgeObjectRelease();
          goto LABEL_76;
        case 3u:
          uint64_t v58 = type metadata accessor for PuzzleStatisticsGroupedValue(0);
          uint64_t v59 = v41 + *(int *)(v58 + 24);
          uint64_t v60 = type metadata accessor for PuzzleStreak();
          char v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 48);
          if (!v61(v59, 1, v60))
          {
            uint64_t v62 = sub_1C151555C();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v59, v62);
          }
          v41 += *(int *)(v58 + 28);
          if (!v61(v41, 1, v60))
          {
LABEL_106:
            uint64_t v63 = sub_1C151555C();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v41, v63);
          }
          goto LABEL_2;
        default:
          goto LABEL_2;
      }
    case 0x10u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v3 + 240) >= 0x11uLL) {
        goto LABEL_76;
      }
      goto LABEL_2;
    default:
      goto LABEL_2;
  }
}

uint64_t storeEnumTagSinglePayload for FormatBindingImageExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 41) = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBindingImageExpression(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t getEnumTagSinglePayload for GroupLayoutBindingContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C06399C4);
}

uint64_t storeEnumTagSinglePayload for FormatComputedInvalidation.Result(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatComputedInvalidation.Result(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

unsigned char *storeEnumTagSinglePayload for FormatRepeatNodeIteration.CodingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatContentSizeCategory(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 254 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 254) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 1)
  {
    unsigned int v6 = ((a2 - 2) >> 8) + 1;
    *unint64_t result = a2 - 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = -32;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for GroupLayoutContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C0D831AC);
}

uint64_t getEnumTagSinglePayload for FormatSymbolConfig(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatSymbolConfig.Size(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 10) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSymbolConfig.Size(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 10)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void sub_1C004FA7C(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 >= a2)
  {
    switch(v11)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          uint64_t v16 = *(void (**)(void))(v6 + 56);
          v16();
        }
        break;
    }
  }
  else
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        break;
      default:
        return;
    }
  }
}

uint64_t sub_1C004FC94(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

uint64_t sub_1C004FDE0()
{
  return sub_1BFDF99B0(*v0);
}

void sub_1C004FDF4(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = 0x6E61656C6F6F62;
  if (v2 != 1) {
    uint64_t v4 = 0x72656765746E69;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0x676E69727473;
  }
  if (!v5) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v6;
  a1[1] = v3;
}

void sub_1C004FE50(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x656C616353746F6ELL;
  if (*v1) {
    uint64_t v2 = 0x64656C616373;
  }
  unint64_t v3 = 0xE900000000000064;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1C004FE90()
{
  return 0x3273656D656874;
}

uint64_t dispatch thunk of FeedGroupDebuggable.debugFormat.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t storeEnumTagSinglePayload for FormatGradientDirection(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

unint64_t sub_1C004FEE8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C004FF14(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C004FF14(char a1)
{
  unint64_t result = 1970169197;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x646E616D6D6F63;
      break;
    case 2:
      unint64_t result = 0x4C52556E65706FLL;
      break;
    case 3:
      unint64_t result = 0x6574756F72;
      break;
    case 4:
      unint64_t result = 0x686374697773;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x6F72687473736170;
      break;
    case 7:
      unint64_t result = 0x6573616863727570;
      break;
    case 8:
      unint64_t result = 0x676E69646E6962;
      break;
    case 9:
      unint64_t result = 0x6775626564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSizeEquation(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

unsigned char *storeEnumTagSinglePayload for FormatBorderEdge(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

NewsFeed::FormatBorderEdge_optional sub_1C0050134(Swift::String *a1)
{
  return FormatBorderEdge.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatGradient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatGradient(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t FeedLayoutSolver.Cursor.__deallocating_deinit()
{
  return sub_1BFD725D0((void (*)(void))FeedLayoutSolver.Cursor.deinit);
}

id FeedScoredItem.scoreProfile.getter()
{
  return *(id *)(v0 + 8);
}

uint64_t sub_1C00501F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F415F240](a1, a2, *v6, a6);
}

uint64_t getEnumTagSinglePayload for FeedCategory(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatGroupNodeMaskPath(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatAccessibilityRole.CodingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatArticleStoryType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

unsigned char *_s3URLOwst_1_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1C0050530()
{
  if (*v0) {
    return 1885433183;
  }
  else {
    return 0x6973736572707865;
  }
}

uint64_t storeEnumTagSinglePayload for HeadlineViewLayout.Context(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C0CEE02C);
}

uint64_t destroy for FormatBindingError(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 56);
  if (v2 >= 8) {
    unsigned int v2 = *(_DWORD *)a1 + 8;
  }
  switch(v2)
  {
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 2u:
    case 4u:
      swift_bridgeObjectRelease();
      return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    case 3u:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    default:
LABEL_9:
      return swift_bridgeObjectRelease();
  }
}

uint64_t _s7CommandOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t _s7CommandOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

unsigned char *_s7CommandO10CodingTypeOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

NewsFeed::FeedLayoutSolverOptions::CoverOptions __swiftcall FeedLayoutSolverOptions.CoverOptions.init(alwaysShowTitle:alwaysIncludeBottomInset:)(Swift::Bool alwaysShowTitle, Swift::Bool alwaysIncludeBottomInset)
{
  *unsigned int v2 = alwaysShowTitle;
  v2[1] = alwaysIncludeBottomInset;
  result.alwaysShowTitle = alwaysShowTitle;
  return result;
}

NewsFeed::FeedGroupPaidVisibility_optional sub_1C005079C(Swift::String *a1)
{
  return FeedGroupPaidVisibility.init(rawValue:)(*a1);
}

uint64_t getEnumTagSinglePayload for FormatProgressPieOptions(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for FeedGroupGroupingRules()
{
  return &type metadata for FeedGroupGroupingRules;
}

uint64_t FeedGroupConfig.data.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 88));
}

uint64_t storeEnumTagSinglePayload for PuzzleStatsState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C02F846C);
}

uint64_t objectdestroy_54Tm()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for FormatContent.Resolved();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(*((void *)v2 - 1) + 64);
  unsigned int v6 = (int *)type metadata accessor for FormatServiceOptions();
  uint64_t v7 = *(unsigned __int8 *)(*((void *)v6 - 1) + 80);
  uint64_t v8 = v4 + v5 + v7;
  swift_release();
  uint64_t v9 = v1 + v4;
  swift_bridgeObjectRelease();
  uint64_t v10 = v1 + v4 + v2[5];
  uint64_t v11 = sub_1C151631C();
  uint64_t v49 = *(void (**)(uint64_t))(*(void *)(v11 - 8) + 8);
  uint64_t v50 = v11;
  v49(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  uint64_t v12 = v1 + v4 + v2[14];
  int v13 = (int *)type metadata accessor for FormatWebEmbed.Resolved();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v13 - 1) + 48))(v12, 1, v13))
  {
    uint64_t v47 = v8;
    int v48 = v6;
    uint64_t v51 = v7;
    swift_bridgeObjectRelease();
    uint64_t v14 = v12 + v13[5];
    swift_bridgeObjectRelease();
    uint64_t v15 = type metadata accessor for FormatWebEmbed();
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    uint64_t v17 = sub_1C1515FDC();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v46(v16, v17);
    uint64_t v19 = v14 + *(int *)(v15 + 24);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v19, 1, v17)) {
      v46(v19, v17);
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v20 = v12 + v13[8];
    uint64_t v21 = type metadata accessor for WebEmbedDataVisualization();
    uint64_t v8 = v47;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21))
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = type metadata accessor for GenericDataVisualization();
        v46(v20 + *(int *)(v22 + 20), v17);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
    uint64_t v23 = v12 + v13[9];
    sub_1BFEC84E0();
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)(v24 - 8);
    unsigned int v6 = v48;
    uint64_t v7 = v51;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v23, 1, v24)) {
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v23, v25);
    }
  }
  uint64_t v27 = v8 & ~v7;

  swift_bridgeObjectRelease();
  uint64_t v28 = v9 + v2[18];
  uint64_t v29 = sub_1C151D6DC();
  uint64_t v30 = *(void *)(v29 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29)) {
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
  }
  uint64_t v31 = v1 + v27;
  if (*(void *)(v1 + v27 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(v1 + v27);
  }
  uint64_t v32 = (id *)(v31 + v6[10]);
  uint64_t v33 = type metadata accessor for FormatTransformKnobs();
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v32, 1, v33))
  {
    uint64_t v34 = v6;

    int v35 = (int *)type metadata accessor for FeedContext();
    uint64_t v36 = (char *)v32 + v35[5];
    uint64_t v37 = type metadata accessor for BundleSession();
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v36, 1, v37))
    {
      ((void (*)(char *, uint64_t))v49)(&v36[*(int *)(v37 + 20)], v50);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(char **)((char *)v32 + v35[12] + 8) - 1 >= (char *)3) {
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32 + *(int *)(v33 + 20));
    unsigned int v6 = v34;
  }
  uint64_t v38 = type metadata accessor for FormatTransformData();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v39 = (char *)v32 + *(int *)(v38 + 40);
  uint64_t v40 = type metadata accessor for FeedPersonalizationClusteringRules();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v39, 1, v40))
  {
    uint64_t v41 = &v39[*(int *)(v40 + 24)];
    uint64_t v42 = type metadata accessor for FeedGroupBundleArticleQuotas();
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v41, 1, v42))
    {
      swift_bridgeObjectRelease();
      uint64_t v43 = &v41[*(int *)(v42 + 24)];
      uint64_t v44 = sub_1C1516D9C();
      (*(void (**)(char *, uint64_t))(*(void *)(v44 - 8) + 8))(v43, v44);
      swift_bridgeObjectRelease();
    }
    if (*(void *)&v39[*(int *)(v40 + 40) + 32] != 1) {
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

__n128 __swift_memcpy153_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

void sub_1C00510A0(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 <= v8)
  {
    switch(v14)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 3:
LABEL_44:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v7 < 0x7FFFFFFF)
          {
            uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
            if ((a2 & 0x80000000) != 0) {
              uint64_t v19 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v19 = a2 - 1;
            }
            *uint64_t v18 = v19;
          }
          else
          {
            uint64_t v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
        }
        break;
    }
  }
  else
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

unsigned char *sub_1C005127C(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        break;
      case 2:
        *(_WORD *)__n128 result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *__n128 result = 0;
        break;
      case 2:
        *(_WORD *)__n128 result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)__n128 result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t _s5ImageOwet_3(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for FormatGroupNodeMaskStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 176) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 177) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 177) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void sub_1C00513D8(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 <= v8)
  {
    switch(v14)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 3:
LABEL_44:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v7 < 0x7FFFFFFF)
          {
            uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
            if ((a2 & 0x80000000) != 0) {
              uint64_t v19 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v19 = a2 - 1;
            }
            *uint64_t v18 = v19;
          }
          else
          {
            uint64_t v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
        }
        break;
    }
  }
  else
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t sub_1C00515B4(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        __n128 result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

void *destroy for FormatPropertyValue(void *result)
{
  if ((((*result >> 60) & 0x8F | (16 * (*result & 7))) ^ 0x7E) >= 0x72) {
    return (void *)swift_release();
  }
  return result;
}

NewsFeed::FormatImageResize_optional sub_1C0051728(Swift::String *a1)
{
  return FormatImageResize.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatURLBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatURLBinding(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t type metadata accessor for FeedGroupKnobsRules()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C00517E0()
{
  sub_1C00520A0(0, (unint64_t *)&unk_1EB871618, (uint64_t)&type metadata for DebugGroupLayoutContext, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v4 = (char *)&v6 - v3;
  sub_1C00520A0(0, &qword_1EB871658, (uint64_t)&type metadata for DebugGroupLayoutContext, MEMORY[0x1E4FAD790]);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB871690 = result;
  return result;
}

uint64_t sub_1C0051920()
{
  sub_1C00520A0(0, (unint64_t *)&unk_1EB8851E0, (uint64_t)&type metadata for FeedDatabaseCommandContext, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v4 = (char *)&v6 - v3;
  sub_1C00520A0(0, &qword_1EB885250, (uint64_t)&type metadata for FeedDatabaseCommandContext, MEMORY[0x1E4FAD790]);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB8852C8 = result;
  return result;
}

uint64_t sub_1C0051A60()
{
  sub_1C00520A0(0, (unint64_t *)&unk_1EB871618, (uint64_t)&type metadata for DebugGroupLayoutContext, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v4 = (char *)&v6 - v3;
  sub_1C00520A0(0, &qword_1EB871658, (uint64_t)&type metadata for DebugGroupLayoutContext, MEMORY[0x1E4FAD790]);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB871688 = result;
  return result;
}

uint64_t sub_1C0051BA0()
{
  sub_1C00520A0(0, &qword_1EB8851D8, (uint64_t)&type metadata for FeedPersonalizationDetailCommandContext, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v4 = (char *)&v6 - v3;
  sub_1C00520A0(0, &qword_1EB885248, (uint64_t)&type metadata for FeedPersonalizationDetailCommandContext, MEMORY[0x1E4FAD790]);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB8852B0 = result;
  return result;
}

uint64_t sub_1C0051CE0()
{
  sub_1C00520A0(0, &qword_1EB871610, (uint64_t)&type metadata for FeedCursorCommandContext, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v4 = (char *)&v6 - v3;
  sub_1C00520A0(0, &qword_1EB871650, (uint64_t)&type metadata for FeedCursorCommandContext, MEMORY[0x1E4FAD790]);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB871680 = result;
  return result;
}

uint64_t sub_1C0051E20()
{
  sub_1C00520A0(0, &qword_1EB8851C8, (uint64_t)&type metadata for FeedCursorExportCommandContext, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v4 = (char *)&v6 - v3;
  sub_1C00520A0(0, &qword_1EB885240, (uint64_t)&type metadata for FeedCursorExportCommandContext, MEMORY[0x1E4FAD790]);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB8852A0 = result;
  return result;
}

uint64_t sub_1C0051F60()
{
  sub_1C00520A0(0, (unint64_t *)&unk_1EB871618, (uint64_t)&type metadata for DebugGroupLayoutContext, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v4 = (char *)&v6 - v3;
  sub_1C00520A0(0, &qword_1EB871658, (uint64_t)&type metadata for DebugGroupLayoutContext, MEMORY[0x1E4FAD790]);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB871678 = result;
  return result;
}

void sub_1C00520A0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1C00520EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C0F17CD0);
}

unsigned char *storeEnumTagSinglePayload for FormatCornerRadius.RoundedValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1C00521D0()
{
  return sub_1C1516FBC();
}

uint64_t sub_1C0052200()
{
  if (*v0) {
    return 1635017060;
  }
  else {
    return 1701869940;
  }
}

NewsFeed::NewsEnvironment_optional sub_1C0052228(Swift::String *a1)
{
  return NewsEnvironment.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatDateFormat(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 2;
    }
  }
  return result;
}

void sub_1C005228C(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000072;
  unint64_t v3 = 0x656E6961746E6F63;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0x80000001C1600CE0;
      unint64_t v3 = 0xD000000000000010;
      goto LABEL_3;
    case 2:
      *a1 = 0x746E656D656C65;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 0x74756F6B61657262;
      a1[1] = 0xEF746E656D656C45;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_1C005232C(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x6E6F6974706FLL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEA00000000006D65;
      uint64_t v3 = 0x74496D6F74737563;
      goto LABEL_3;
    case 2:
      *a1 = 0x656E696C64616568;
      a1[1] = 0xE800000000000000;
      break;
    case 3:
      *a1 = 0x6465626D45626577;
      a1[1] = 0xE800000000000000;
      break;
    case 4:
      *a1 = 0x70756F7267;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_1C00523D0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6E6F6974706FLL;
  if (*v1) {
    uint64_t v2 = 0x656E696C6E69;
  }
  *a1 = v2;
  a1[1] = 0xE600000000000000;
}

ValueMetadata *type metadata accessor for FormatLayout()
{
  return &type metadata for FormatLayout;
}

unint64_t destroy for FormatSize(unint64_t *a1)
{
  return sub_1BFF322A8(*a1);
}

uint64_t sub_1C0052418@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1BFD380B0(a1, v2, a2);
}

uint64_t sub_1C0052420@<X0>(uint64_t a1@<X8>)
{
  return sub_1C004BCB8(*v1 + 152, a1);
}

uint64_t getEnumTagSinglePayload for FormatOptionBindingModifier(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

void sub_1C0052480(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x7465737361;
  if (v2 != 1)
  {
    uint64_t v5 = 0x676E69646E6962;
    unint64_t v4 = 0xE700000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6574756C6F736261;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1C00524DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C0052508(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C0052508(char a1)
{
  uint64_t result = 0x676E69646E6962;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x72656765746E69;
      break;
    case 2:
      uint64_t result = 0x74616F6C66;
      break;
    case 3:
      uint64_t result = 0x6E6F6974706FLL;
      break;
    case 4:
      uint64_t result = 0x686374697773;
      break;
    case 5:
      uint64_t result = 0x676E69727473;
      break;
    case 6:
      uint64_t result = 1836412517;
      break;
    case 7:
      uint64_t result = 1702125924;
      break;
    case 8:
      uint64_t result = 7107189;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C00525D8(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 48;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

unsigned char *_s5ColorOwst_5(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t _s17ResolvedContainerOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)(a1 + 32) >> 57) >> 6) | (2
                                                           * ((*(void *)(a1 + 32) >> 57) & 0x38 | *(void *)(a1 + 32) & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t sub_1C005285C()
{
  if (*v0) {
    return 0x6F72687473736170;
  }
  else {
    return 0x696669746E656469;
  }
}

NewsFeed::FormatFontTrait_optional sub_1C00528A4(Swift::String *a1)
{
  return FormatFontTrait.init(rawValue:)(*a1);
}

ValueMetadata *type metadata accessor for FormatConfig()
{
  return &type metadata for FormatConfig;
}

uint64_t FeedItemLayoutAttributes.canRestoreInViewport.getter()
{
  char v1 = 0;
  switch(*v0 >> 60)
  {
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 0xALL:
      char v1 = 1;
      break;
    case 0xBLL:
      char v1 = FeedItemLayoutAttributes.canRestoreInViewport.getter(0);
      break;
    default:
      return v1 & 1;
  }
  return v1 & 1;
}

ValueMetadata *type metadata accessor for FeedGroupPaidVisibility()
{
  return &type metadata for FeedGroupPaidVisibility;
}

uint64_t sub_1C0052940(char a1)
{
  if (a1) {
    return 0x65756C6176;
  }
  else {
    return 0x726F7463656C6573;
  }
}

ValueMetadata *type metadata accessor for FeedJournalEntry()
{
  return &type metadata for FeedJournalEntry;
}

uint64_t getEnumTagSinglePayload for FormatCompilerSlotDefinition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C02E53A0);
}

uint64_t getEnumTagSinglePayload for FormatOptionsNodeStatement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C0DF2D28);
}

uint64_t getEnumTagSinglePayload for FormatWebEmbedNodeStyle.Selector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 59)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for FormatSlotDefinition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C11F9C38);
}

unsigned char *storeEnumTagSinglePayload for FormatOptionsNodeStatementValue.CodingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatTextNodeAttachment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatTextNodeAttachment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for FormatAccessibilityTrait(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *uint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatTextNodeTransform(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatLayoutExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF4)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 245;
    if (a3 >= 0xF5) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF5) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 11;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupLayoutBindingKey()
{
  return &type metadata for GroupLayoutBindingKey;
}

unsigned char *_s7CommandOwst_3_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *uint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatLayoutOption(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

uint64_t sub_1C0052E44@<X0>(BOOL *a1@<X8>)
{
  return sub_1BFD59FB4(a1);
}

uint64_t _s7CommandOwst_2(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(unsigned char *)(result + 24) = 4 * ((((-a2 >> 2) & 3) - 4 * a2) & 0xF);
    }
  }
  return result;
}

uint64_t _s7CommandOwet_1(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (*(unsigned char *)(a1 + 24) & 0xC | (*(unsigned __int8 *)(a1 + 24) >> 4) & 3) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

ValueMetadata *type metadata accessor for FormatTagBinding.Asset()
{
  return &type metadata for FormatTagBinding.Asset;
}

uint64_t destroy for FormatBindResult(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 32);
  if (v1 <= 3) {
    return sub_1BFF77308(*(void *)result, *(void *)(result + 8), *(void *)(result + 16), *(void *)(result + 24), v1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatMotion(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

void sub_1C0052F80(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = 0x746867696568;
  if (v2 != 1) {
    uint64_t v4 = 0x746365707361;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0x6874646977;
  }
  if (!v5) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v6;
  a1[1] = v3;
}

uint64_t FeedHeadline.headline.getter()
{
  return swift_unknownObjectRetain();
}

ValueMetadata *type metadata accessor for FeedAdGroupAdjacency()
{
  return &type metadata for FeedAdGroupAdjacency;
}

ValueMetadata *type metadata accessor for FeedNativeAdContext()
{
  return &type metadata for FeedNativeAdContext;
}

uint64_t getEnumTagSinglePayload for FormatVideoPlayerContent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

BOOL sub_1C005305C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1C0053070@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C005309C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C005309C(char a1)
{
  uint64_t result = 0x656C6369747261;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6575737369;
      break;
    case 2:
      uint64_t result = 6775156;
      break;
    case 3:
      uint64_t result = 0x6465626D45626577;
      break;
    case 4:
      uint64_t result = 0x656C7A7A7570;
      break;
    case 5:
      uint64_t result = 0x7954656C7A7A7570;
      break;
    case 6:
      uint64_t result = 0x7453656C7A7A7570;
      break;
    case 7:
      uint64_t result = 0x6D6F74737563;
      break;
    case 8:
      uint64_t result = 0x6C6F686563616C70;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedCategory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unint64_t sub_1C0053200@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C005322C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C005322C(char a1)
{
  unint64_t result = 7958113;
  switch(a1)
  {
    case 1:
      unint64_t result = 1480683374;
      break;
    case 2:
      unint64_t result = 0x5841796C6E6FLL;
      break;
    case 3:
    case 4:
      unint64_t result = 0x6E6168547373656CLL;
      break;
    case 5:
      unint64_t result = 0x5472657461657267;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0x6C61757165;
      break;
    case 8:
      unint64_t result = 0x6C61757145746F6ELL;
      break;
    case 9:
      unint64_t result = 29804;
      break;
    case 10:
      unint64_t result = 6648940;
      break;
    case 11:
      unint64_t result = 29799;
      break;
    case 12:
      unint64_t result = 6648935;
      break;
    case 13:
      unint64_t result = 29029;
      break;
    case 14:
      unint64_t result = 7431534;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatPrefetchResources()
{
  return &type metadata for FormatPrefetchResources;
}

ValueMetadata *type metadata accessor for FormatPrefetchContext()
{
  return &type metadata for FormatPrefetchContext;
}

void sub_1C005338C(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_39:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 < 0xFD)
          {
            a1[v9] = a2 + 2;
          }
          else
          {
            uint64_t v18 = *(void (**)(void))(v6 + 56);
            v18();
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t sub_1C00535C8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFD) {
    unsigned int v7 = 253;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 >= 0xFD) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + v6);
      BOOL v16 = v15 >= 2;
      unsigned int v17 = v15 - 2;
      if (!v16) {
        unsigned int v17 = -1;
      }
      if (v17 + 1 >= 2) {
        return v17;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

uint64_t sub_1C0053748@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C0053774(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C0053774(char a1)
{
  uint64_t result = 0x656E696C64616568;
  switch(a1)
  {
    case 1:
      uint64_t result = 6775156;
      break;
    case 2:
      uint64_t result = 0x6575737369;
      break;
    case 3:
      uint64_t result = 0x72656874616577;
      break;
    case 4:
      uint64_t result = 0x6C6C6177796170;
      break;
    case 5:
      uint64_t result = 1684366694;
      break;
    case 6:
      uint64_t result = 0x6465626D45626577;
      break;
    case 7:
      uint64_t result = 0x76457374726F7073;
      break;
    case 8:
      uint64_t result = 0x656C7A7A7570;
      break;
    case 9:
      uint64_t result = 0x7954656C7A7A7570;
      break;
    case 10:
      uint64_t result = 0x7453656C7A7A7570;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatRemoteImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C13E65B8);
}

uint64_t getEnumTagSinglePayload for FormatRemoteImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C13E64A4);
}

unsigned char *_s4TextOwst_1_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 22 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 22) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE9)
  {
    unsigned int v6 = ((a2 - 234) >> 8) + 1;
    *uint64_t result = a2 + 22;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 22;
        break;
    }
  }
  return result;
}

uint64_t sub_1C0053990@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C00539BC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C00539BC(char a1)
{
  uint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      uint64_t result = 1701667182;
      break;
    case 2:
      uint64_t result = 0x4E79616C70736964;
      break;
    case 3:
      uint64_t result = 0x4E746361706D6F63;
      break;
    case 4:
      uint64_t result = 0xD000000000000012;
      break;
    case 5:
      uint64_t result = 0x6D614E70756F7267;
      break;
    case 6:
      uint64_t v3 = 0x656372756F73;
      goto LABEL_17;
    case 7:
      uint64_t result = 0x6E6F6E6143434D55;
      break;
    case 8:
      uint64_t result = 0xD000000000000019;
      break;
    case 9:
    case 16:
      uint64_t result = 0xD000000000000015;
      break;
    case 10:
      uint64_t result = 0xD000000000000011;
      break;
    case 11:
      uint64_t result = 0xD000000000000013;
      break;
    case 12:
      uint64_t result = 0xD000000000000018;
      break;
    case 13:
      uint64_t result = 0x75467374726F7073;
      break;
    case 14:
      uint64_t result = 0x694E7374726F7073;
      break;
    case 15:
      uint64_t v3 = 0x7374726F7073;
LABEL_17:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x7954000000000000;
      break;
    case 17:
      uint64_t result = 0xD00000000000001FLL;
      break;
    case 18:
      uint64_t result = 0xD000000000000010;
      break;
    case 19:
      uint64_t result = 0x656C746974627573;
      break;
    case 20:
      uint64_t result = 0x656E697A6167616DLL;
      break;
    case 21:
      uint64_t result = 0x65676175676E616CLL;
      break;
    case 22:
      uint64_t result = 0x6974616D6F747561;
      break;
    default:
      return result;
  }
  return result;
}

id static FeedScaling.scale(font:scaleValue:)(void *a1, double a2)
{
  if (byte_1EA2B53C0 == 1)
  {
    objc_msgSend(a1, sel_pointSize);
    double v4 = round(v3 * 4.0 * a2 * 0.25);
    if (byte_1EA2B53C0) {
      double v3 = v4;
    }
    id v5 = objc_msgSend(a1, sel_fontWithSize_, v3);
    return v5;
  }
  else
  {
    return a1;
  }
}

NewsFeed::FeedGroupEmitterPriority_optional sub_1C0053CFC(Swift::String *a1)
{
  return FeedGroupEmitterPriority.init(rawValue:)(*a1);
}

uint64_t sub_1C0053D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

void sub_1C0053D20(void *a1@<X8>)
{
  *a1 = 0;
}

void static FeedAdGroupAdjacency.trailing.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static FeedAdGroupAdjacency.leading.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t storeEnumTagSinglePayload for FeedLayoutResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1C0053D94()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C0053DB0()
{
  return swift_getWitnessTable();
}

uint64_t objectdestroy_19Tm()
{
  if (*(void *)(v0 + 16) >= 3uLL) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t objectdestroy_10Tm_0()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_19Tm_0(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 24));
  swift_release();
  return swift_deallocObject();
}

unsigned char *storeEnumTagSinglePayload for FormatTextNodeAttachmentAlignment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

NewsFeed::FormatTextNodeAttachmentAlignment_optional sub_1C0053F80(Swift::String *a1)
{
  return FormatTextNodeAttachmentAlignment.init(rawValue:)(*a1);
}

uint64_t sub_1C0053F8C()
{
  uint64_t v1 = 0x726F74617265706FLL;
  if (*v0 != 1) {
    uint64_t v1 = 1885433183;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65756C6176;
  }
}

unsigned char *storeEnumTagSinglePayload for FormatPublisherLogoSizeBinding(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatFrameExpression(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatPublisherLogoSize(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 2147483645;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatPublisherLogoSize(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 3;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t getEnumTagSinglePayload for FormatGroupColumnSystem(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

void sub_1C0054200(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xE600000000000000;
  uint64_t v5 = 0x656C646E7562;
  if (v2 != 1)
  {
    uint64_t v5 = 0x726F7463656C6573;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6D6574737973;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

unsigned char *_s4BoolOwst_8(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

double storeEnumTagSinglePayload for FormatImageAdjustmentBlend(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 120) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 128) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 129) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 2 * -a2;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(unsigned char *)(a1 + 128) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 129) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t _s17ResolvedContainerOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_OWORD *)double result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(void *)(result + 32) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(void *)(result + 72) = 0;
    }
  }
  return result;
}

void sub_1C0054420(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 6581857;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 29295;
      goto LABEL_3;
    case 2:
      *a1 = 7630702;
      a1[1] = 0xE300000000000000;
      break;
    case 3:
      *a1 = 0x6E656E6F706D6F63;
      a1[1] = 0xE900000000000074;
      break;
    case 4:
      *a1 = 0x726F6C6F63;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unint64_t destroy for FormatSlotTransform(unint64_t *a1)
{
  return sub_1C00544B4(*a1);
}

unint64_t sub_1C00544B4(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      double result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedGap(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

unint64_t sub_1C0054534()
{
  unint64_t result = 0x6D6E6F7269766E65;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6974616C756D7563;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x7461447472617473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C00545D0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_22;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_22;
      }
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v9 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_14;
    }
  }
LABEL_22:
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v15 = *((unsigned __int8 *)a1 + v6);
  if (v15 < 2) {
    return 0;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

uint64_t getEnumTagSinglePayload for FormatDecoration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 107)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C0054798()
{
  uint64_t v1 = 0x6953776F646E6977;
  if (*v0 != 1) {
    uint64_t v1 = 0x546465776F6C6C61;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6C6F687365726874;
  }
}

uint64_t getEnumTagSinglePayload for FeedGroupBundleArticleQuotas(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C122D5D0);
}

uint64_t sub_1C005482C(void *a1, uint64_t a2)
{
  return sub_1C01E3B18(a1, a2, (uint64_t (*)(void, void, void, void, void))sub_1C0054844);
}

uint64_t sub_1C0054844(char a1)
{
  if (a1) {
    return 0x726F7463656C6573;
  }
  else {
    return 0x65756C6176;
  }
}

uint64_t storeEnumTagSinglePayload for FeedGroupConfigSidecar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C11033D0);
}

uint64_t type metadata accessor for FeedGroupConfigSidecar()
{
  uint64_t result = qword_1EB8863E0;
  if (!qword_1EB8863E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t static FeedCursorStoreManager.shared.getter()
{
  if (qword_1EB886330 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t sub_1C0054938(uint64_t a1)
{
  return sub_1BFE11FB4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1C0054940(uint64_t a1)
{
  return sub_1BFE11CE0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1C0054948@<X0>(uint64_t a1@<X8>)
{
  return sub_1BFEDBFE0(*(void **)(v1 + 40), *(void *)(v1 + 24), a1);
}

unsigned char *_s8NewsFeed16FeedRefreshStateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t FeedGroupConfig.slots.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C0054A2C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t storeEnumTagSinglePayload for FormatStateMachineDefinition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatStateMachineDefinition(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatCompilerSlotDefinition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C02E5504);
}

uint64_t storeEnumTagSinglePayload for FormatOptionsNodeStatement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C0DF2DD8);
}

uint64_t getEnumTagSinglePayload for FormatComputedInvalidation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3F && *(unsigned char *)(a1 + 26)) {
    return (*(_DWORD *)a1 + 63);
  }
  unsigned int v3 = ((*(unsigned __int16 *)(a1 + 24) >> 9) & 0x3E | (*(unsigned __int16 *)(a1 + 24) >> 15)) ^ 0x3F;
  if (v3 >= 0x3E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t sub_1C0054B4C@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

uint64_t storeEnumTagSinglePayload for FormatWebEmbedNodeStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 58) = 0;
    *(_WORD *)(result + 56) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 59) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 59) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatRadialGradientCircleRadius(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatRadialGradientCircleRadius(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_1C0054C3C@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

ValueMetadata *type metadata accessor for FormatContentSubgroup.ResolvedContainer()
{
  return &type metadata for FormatContentSubgroup.ResolvedContainer;
}

uint64_t storeEnumTagSinglePayload for FeedIssue.Overrides(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatButtonNodeState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void sub_1C0054D84(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1953394534;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE900000000000065;
      uint64_t v3 = 0x6C79745374786574;
      goto LABEL_3;
    case 2:
      *a1 = 1702521203;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x746867696577;
      a1[1] = 0xE600000000000000;
      break;
    case 4:
      *a1 = 0x656C616373;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_1C0054E14(void *a1@<X8>)
{
  *a1 = 0x736E6D756C6F63;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1C0054E30()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C0054E3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C0054E68(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C0054E68(char a1)
{
  uint64_t result = 0x656E696C64616568;
  switch(a1)
  {
    case 1:
      uint64_t result = 6775156;
      break;
    case 2:
      uint64_t result = 0x6575737369;
      break;
    case 3:
      uint64_t result = 0x72656874616577;
      break;
    case 4:
      uint64_t result = 0x6C6C6177796170;
      break;
    case 5:
      uint64_t result = 1684366694;
      break;
    case 6:
      uint64_t result = 0x6465626D45626577;
      break;
    case 7:
      uint64_t result = 0x76457374726F7073;
      break;
    case 8:
      uint64_t result = 0x7453656C7A7A7570;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1C0054F60@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C0054F8C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C0054F8C(char a1)
{
  unint64_t result = 0x656E6E6168437369;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6369706F547369;
      break;
    case 2:
      unint64_t result = 0x6C61636F4C7369;
      break;
    case 3:
    case 16:
      unint64_t result = 0x7374726F70537369;
      break;
    case 4:
      unint64_t result = 0x6F69746365537369;
      break;
    case 5:
      unint64_t result = 0x61707377654E7369;
      break;
    case 6:
      unint64_t result = 0x697A6167614D7369;
      break;
    case 7:
      unint64_t result = 0x63696C6275507369;
      break;
    case 8:
      unint64_t result = 0x7263736275537369;
      break;
    case 9:
      unint64_t result = 0xD000000000000011;
      break;
    case 10:
      unint64_t result = 0xD000000000000018;
      break;
    case 11:
      unint64_t result = 0x6E65646469487369;
      break;
    case 12:
      unint64_t result = 0xD000000000000010;
      break;
    case 13:
      unint64_t result = 0x6F62646E61537369;
      break;
    case 14:
      unint64_t result = 0x6E7265746E497369;
      break;
    case 15:
      unint64_t result = 0x6672657075537369;
      break;
    case 17:
      unint64_t result = 0x726F7053794D7369;
      break;
    case 18:
      unint64_t result = 0x656C7A7A75507369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C00551BC()
{
  uint64_t result = 7368564;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1952867692;
      break;
    case 2:
      uint64_t result = 0x6D6F74746F62;
      break;
    case 3:
      uint64_t result = 0x7468676972;
      break;
    case 4:
      uint64_t result = 1885433183;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupNativeAdInsertionLocation()
{
  return &type metadata for FeedGroupNativeAdInsertionLocation;
}

ValueMetadata *type metadata accessor for FeedScoredItem()
{
  return &type metadata for FeedScoredItem;
}

void sub_1C0055254(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x80000001C1600CE0;
  unint64_t v3 = 0xD000000000000010;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      unint64_t v3 = 0x746E656D656C65;
      goto LABEL_3;
    case 2:
      *a1 = 0x6E6564646968;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 0x74756F6B61657262;
      a1[1] = 0xEF746E656D656C45;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1C00552EC@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

void sub_1C00552F8(uint64_t a1@<X8>)
{
  uint64_t v2 = 0x6C616E696769726FLL;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 0x6574616C706D6574;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x6974616D6F747561;
      *(void *)(a1 + 8) = 0xE900000000000063;
      break;
    case 3:
      strcpy((char *)a1, "userInterface");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    default:
LABEL_3:
      *(void *)a1 = v2;
      *(void *)(a1 + 8) = 0xE800000000000000;
      break;
  }
}

uint64_t sub_1C0055394@<X0>(char *a1@<X8>)
{
  return FormatWebEmbedBinding.URL.CodingType.init(rawValue:)(a1);
}

uint64_t sub_1C00553A0()
{
  return sub_1BFC770AC(*v0);
}

uint64_t FormatContentSubgroup.ResolvedContainer.headlines.getter()
{
  sub_1BFEC8548(0);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v55 = (char *)v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for FormatWebEmbed.Resolved();
  MEMORY[0x1F4188790](v54);
  uint64_t v41 = (char *)v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for FormatContentSlotItemObject.Resolved();
  uint64_t v52 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unsigned int v6 = (id *)((char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = v0[1];
  uint64_t v8 = v0[3];
  uint64_t v9 = v0[5];
  uint64_t v11 = v0[6];
  uint64_t v10 = v0[7];
  uint64_t v13 = v0[8];
  uint64_t v12 = v0[9];
  v40[6] = v0[4] & 0x7FFFFFFFFFFFFFFFLL;
  v40[7] = v8;
  sub_1BFEE0A78();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v14 = v7;
  uint64_t v15 = sub_1C10468B0(v13);
  swift_bridgeObjectRelease();
  uint64_t v57 = v10;
  swift_bridgeObjectRetain();
  sub_1BFEE0654(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40[4] = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v40[5] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = v57;
  uint64_t v57 = MEMORY[0x1E4FBC860];
  uint64_t v44 = *(void *)(v16 + 16);
  if (v44)
  {
    v40[1] = v12;
    v40[3] = v9;
    uint64_t v42 = v16 + 32;
    v40[0] = v16;
    swift_bridgeObjectRetain();
    uint64_t v17 = 0;
    v40[2] = v10;
    uint64_t v43 = v13;
    do
    {
      uint64_t v53 = v17;
      uint64_t v20 = (void *)(v42 + (v17 << 6));
      uint64_t v21 = v20[1];
      uint64_t v22 = v20[2];
      uint64_t v23 = v20[3];
      uint64_t v24 = v20[4];
      uint64_t v26 = v20[5];
      uint64_t v25 = v20[6];
      uint64_t v27 = v20[7];
      unint64_t v18 = MEMORY[0x1E4FBC860];
      unint64_t v56 = MEMORY[0x1E4FBC860];
      uint64_t v28 = *(void *)(v24 + 16);
      if (v28)
      {
        uint64_t v29 = v24 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
        uint64_t v51 = v21;
        swift_bridgeObjectRetain_n();
        uint64_t v49 = v22;
        swift_bridgeObjectRetain_n();
        uint64_t v48 = v23;
        swift_bridgeObjectRetain_n();
        uint64_t v50 = v24;
        swift_bridgeObjectRetain_n();
        uint64_t v47 = v26;
        swift_bridgeObjectRetain_n();
        uint64_t v46 = v25;
        swift_bridgeObjectRetain_n();
        uint64_t v45 = v27;
        swift_bridgeObjectRetain_n();
        uint64_t v30 = *(void *)(v52 + 72);
        uint64_t v31 = (uint64_t)v55;
        uint64_t v32 = (uint64_t)v41;
        do
        {
          sub_1BFECBBB8(v29, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for FormatContentSlotItemObject.Resolved);
          uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          switch((int)EnumCaseMultiPayload)
          {
            case 1:

              break;
            case 2:
            case 4:
            case 5:
              swift_unknownObjectRelease();
              break;
            case 3:
              sub_1BFEAE050((uint64_t)v6, v32, (uint64_t (*)(void))type metadata accessor for FormatWebEmbed.Resolved);
              sub_1BFECBBB8(v32 + *(int *)(v54 + 36), v31, (uint64_t (*)(void))sub_1BFEC8548);
              sub_1BFEC84E0();
              uint64_t v37 = v36;
              uint64_t v38 = *(void *)(v36 - 8);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v31, 1, v36) == 1)
              {
                sub_1BFECF184(v31, (uint64_t (*)(void))sub_1BFEC8548);
                uint64_t v34 = type metadata accessor for FormatWebEmbed.Resolved;
                uint64_t v35 = v32;
                goto LABEL_14;
              }
              sub_1C151948C();
              (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v31, v37);
              uint64_t EnumCaseMultiPayload = sub_1BFECF184(v32, (uint64_t (*)(void))type metadata accessor for FormatWebEmbed.Resolved);
              goto LABEL_17;
            case 6:
            case 7:
              uint64_t v34 = type metadata accessor for FormatContentSlotItemObject.Resolved;
              uint64_t v35 = (uint64_t)v6;
LABEL_14:
              sub_1BFECF184(v35, (uint64_t (*)(void))v34);
              break;
            case 8:
              swift_bridgeObjectRelease();
              break;
            default:
LABEL_17:
              MEMORY[0x1C18C66D0](EnumCaseMultiPayload);
              if (*(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                sub_1C151EC8C();
              }
              sub_1C151ECEC();
              sub_1C151EBEC();
              uint64_t v31 = (uint64_t)v55;
              break;
          }
          v29 += v30;
          --v28;
        }
        while (v28);
        unint64_t v18 = v56;
        uint64_t v19 = v53;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v19 = v53;
      }
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v17 = v19 + 1;
      sub_1BFFF1A64(v18, (uint64_t (*)(uint64_t, void, unint64_t))sub_1BFFF1E74);
    }
    while (v17 != v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return v57;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
}

void sub_1C0055B08(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1701736302;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x4C52556E65706FLL;
      goto LABEL_3;
    case 2:
      *a1 = 0x646E616D6D6F63;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 0x686374697773;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t FormatContentSlot.Resolved.itemAuxiliaries.getter()
{
  return swift_bridgeObjectRetain();
}

unsigned char *storeEnumTagSinglePayload for PuzzleStatsState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatCustomItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C0F97518);
}

uint64_t getEnumTagSinglePayload for FormatCustomItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C0F97468);
}

uint64_t sub_1C0055C84(unsigned __int8 *a1, char *a2)
{
  return sub_1BFCB4A94(*a1, *a2);
}

uint64_t sub_1C0055C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 56);
}

uint64_t getEnumTagSinglePayload for FeedGroupRepooling(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  if (v6 >= 2) {
    int v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v7 = -2;
  }
  if (v7 < 0) {
    int v7 = -1;
  }
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for FeedGroupEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedGroupEntity(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C0055DE4()
{
  uint64_t v1 = 0x6369676F6CLL;
  if (*v0 != 1) {
    uint64_t v1 = 1885433183;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x676E69646E6962;
  }
}

uint64_t sub_1C0055E34()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C0055E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 48) + a1) = *(unsigned char *)(*(void *)(v5 + 48) + a2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for FeedContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C046D5B4);
}

uint64_t getEnumTagSinglePayload for FeedContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C046D4E8);
}

ValueMetadata *type metadata accessor for FeedKind()
{
  return &type metadata for FeedKind;
}

uint64_t destroy for FeedLayoutSolverOptions(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for FeedLayoutSolverOptions.PluginOptions(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = sub_1C151B62C();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(v4, v7);
  }
  return result;
}

uint64_t type metadata accessor for FeedLayoutSolverOptions(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, qword_1EB890E10);
}

ValueMetadata *type metadata accessor for FeedLayoutSolverOptions.Traits()
{
  return &type metadata for FeedLayoutSolverOptions.Traits;
}

void static FeedLayoutSolverOptions.Traits.default.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1C0055FE4(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 1;
  }
  else
  {
    *(unsigned char *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedLayoutSolverOptions.CursorTracking()
{
  return &type metadata for FeedLayoutSolverOptions.CursorTracking;
}

ValueMetadata *type metadata accessor for FeedLayoutSolverOptions.HeadlineOptions()
{
  return &type metadata for FeedLayoutSolverOptions.HeadlineOptions;
}

NewsFeed::FeedLayoutSolverOptions::HeadlineOptions __swiftcall FeedLayoutSolverOptions.HeadlineOptions.init(alwaysFillWithExcerpt:alwaysShowAuthor:alwaysHidePublisherLogo:)(Swift::Bool alwaysFillWithExcerpt, Swift::Bool alwaysShowAuthor, Swift::Bool alwaysHidePublisherLogo)
{
  *int v3 = alwaysFillWithExcerpt;
  v3[1] = alwaysShowAuthor;
  v3[2] = alwaysHidePublisherLogo;
  result.alwaysFillWithExcerpt = alwaysFillWithExcerpt;
  return result;
}

ValueMetadata *type metadata accessor for FeedLayoutSolverOptions.CategoryOptions()
{
  return &type metadata for FeedLayoutSolverOptions.CategoryOptions;
}

ValueMetadata *type metadata accessor for FeedLayoutSolverOptions.CoverOptions()
{
  return &type metadata for FeedLayoutSolverOptions.CoverOptions;
}

ValueMetadata *type metadata accessor for FeedLayoutSolverOptions.IssueStripOptions()
{
  return &type metadata for FeedLayoutSolverOptions.IssueStripOptions;
}

void *FeedLayoutSolverOptions.IssueStripOptions.init(separators:)@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void *sub_1C0056074(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = v2;
  return result;
}

ValueMetadata *type metadata accessor for FeedLayoutSolverOptions.IssueStripOptions.Separators()
{
  return &type metadata for FeedLayoutSolverOptions.IssueStripOptions.Separators;
}

uint64_t getEnumTagSinglePayload for FeedSportsEvent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t static AdFeedGroup.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_1C1520A9C();
  }
}

uint64_t sub_1C005611C()
{
  return sub_1BFC76FF4(*v0);
}

uint64_t storeEnumTagSinglePayload for FormatOptionsNodeStatementBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1B)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(void *)NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = a2 - 28;
    if (a3 >= 0x1C) {
      *(unsigned char *)(result + 50) = 1;
    }
  }
  else
  {
    if (a3 >= 0x1C) {
      *(unsigned char *)(result + 50) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = 0u;
      *(_WORD *)(result + 48) = (((-a2 >> 3) & 3) - 4 * (_WORD)a2) << 11;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatOptionsNodeStatementBinding(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x1C && *(unsigned char *)(a1 + 50)) {
    return (*(_DWORD *)a1 + 28);
  }
  unsigned int v3 = (HIBYTE(*(unsigned __int16 *)(a1 + 48)) & 0x18 | (*(unsigned __int16 *)(a1 + 48) >> 13)) ^ 0x1F;
  if (v3 >= 0x1B) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for FormatFrameExpression(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatAdMetricsNodeContent(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = a2;
        break;
      case 2:
        *(_WORD *)NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = 0;
        break;
      case 2:
        *(_WORD *)NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1C00562D0@<X0>(BOOL *a1@<X8>)
{
  return sub_1BFD59FB4(a1);
}

unsigned char *storeEnumTagSinglePayload for FormatAdMetricsNodeBinding(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = a2;
        break;
      case 2:
        *(_WORD *)NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = 0;
        break;
      case 2:
        *(_WORD *)NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1C0056378@<X0>(BOOL *a1@<X8>)
{
  return sub_1BFD59FB4(a1);
}

void sub_1C0056384(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000065;
  int v3 = *v1;
  uint64_t v4 = 0x7361637265776F6CLL;
  unint64_t v5 = 0xEA0000000000657ALL;
  if (v3 == 1) {
    unint64_t v5 = 0xE900000000000065;
  }
  else {
    uint64_t v4 = 0x696C617469706163;
  }
  BOOL v6 = v3 == 0;
  if (*v1) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 0x7361637265707075;
  }
  if (!v6) {
    unint64_t v2 = v5;
  }
  *a1 = v7;
  a1[1] = v2;
}

uint64_t FormatPackageInventory.references.getter()
{
  return sub_1BFC893A4();
}

void sub_1C00563F4(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 48;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
            else
            {
              unint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFD0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFD0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFD0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 48);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t dispatch thunk of ColorPaletteProviding.headlineColorPalette.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ColorPaletteProviding.gapColorPalette.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void __swiftcall HeadlineColorPalette.init(backgroundColor:titleColor:excerptColor:accessoryColor:publisherNameColor:thumbnailPlaceholderColor:badgePressReleaseColor:badgeBreakingColor:badgeDevelopingColor:badgeUpdatedColor:badgeSubscriptionColor:)(NewsFeed::HeadlineColorPalette *__return_ptr retstr, UIColor backgroundColor, UIColor titleColor, UIColor excerptColor, UIColor accessoryColor, UIColor publisherNameColor, UIColor thumbnailPlaceholderColor, UIColor badgePressReleaseColor, UIColor badgeBreakingColor, UIColor badgeDevelopingColor, UIColor badgeUpdatedColor, UIColor badgeSubscriptionColor)
{
  retstr->backgroundColor = backgroundColor;
  retstr->titleColor = titleColor;
  retstr->excerptColor = excerptColor;
  retstr->accessoryColor = accessoryColor;
  retstr->publisherNameColor = publisherNameColor;
  retstr->thumbnailPlaceholderColor = thumbnailPlaceholderColor;
  retstr->badgePressReleaseColor = badgePressReleaseColor;
  retstr->badgeBreakingColor = badgeBreakingColor;
  *(_OWORD *)&retstr->badgeDevelopingColor.super.isa = *(_OWORD *)&badgeDevelopingColor.super.isa;
  retstr->badgeSubscriptionColor = badgeSubscriptionColor;
}

unsigned char *storeEnumTagSinglePayload for FormatUnderlineStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t sub_1C0056708()
{
  if (*v0) {
    return 0x4E79427365707974;
  }
  else {
    return 0x7365707974;
  }
}

uint64_t getEnumTagSinglePayload for FormatSymbolImageColor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

NewsFeed::FormatTextAlignment_optional sub_1C00567A4(Swift::String *a1)
{
  return FormatTextAlignment.init(rawValue:)(*a1);
}

uint64_t sub_1C00567B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C00567E4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C00567E4(char a1)
{
  if (a1) {
    return 0x656E696C6E69;
  }
  else {
    return 7107189;
  }
}

ValueMetadata *type metadata accessor for HeadlineViewLayout()
{
  return &type metadata for HeadlineViewLayout;
}

uint64_t getEnumTagSinglePayload for FormatFontWidth(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

NewsFeed::FormatSymbolWeight_optional sub_1C00568B0(Swift::String *a1)
{
  return FormatSymbolWeight.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FeedGap(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unsigned char *_s5ImageOwst_0_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1C00569D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BFDF95F4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

unsigned char *_s8NewsFeed16FormatFontMetricOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatDecoration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 106) = 0;
    *(_WORD *)(result + 104) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 107) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 107) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unsigned char *_s6ActionO10CodingTypeOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        break;
      case 2:
        *(_WORD *)uint64_t result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = 0;
        break;
      case 2:
        *(_WORD *)uint64_t result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)uint64_t result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t type metadata accessor for OfflineManager()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t storeEnumTagSinglePayload for FormatSymbolImageColor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)uint64_t result = a2 - 125;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1C0056C10()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C0056C2C()
{
  return swift_getWitnessTable();
}

void destroy for FeedItemRendererResult(void *a1)
{
}

uint64_t sub_1C0056C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 152);
}

uint64_t FeedScoringContext.configurationSet.getter()
{
  unsigned int v1 = *v0;
  uint64_t result = 0;
  switch(v1 >> 14)
  {
    case 1u:
      uint64_t result = qword_1C1586ED8[(char)v1];
      break;
    case 3u:
      return result;
    default:
      uint64_t result = FeedHeadlineScoringContext.configurationSet.getter();
      break;
  }
  return result;
}

uint64_t FeedHeadlineScoringContext.configurationSet.getter()
{
  return qword_1C1586DB0[*v0];
}

uint64_t type metadata accessor for FeedPoolManager()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t FeedScoredItem.item.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1C0056D10(uint64_t a1, uint64_t a2)
{
  return BlueprintSection<>.feedGroupDebug.getter(a1, *(void *)(a2 - 8));
}

uint64_t getEnumTagSinglePayload for FormatVideoNodeStyle.Selector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 161)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for FormatContentSlot.Resolved()
{
  return &type metadata for FormatContentSlot.Resolved;
}

uint64_t getEnumTagSinglePayload for FormatRegex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C14F509C);
}

id FeedEdition.dateRange.getter()
{
  unsigned int v1 = *(void **)(v0 + *(int *)(type metadata accessor for FeedEdition() + 20));
  return v1;
}

uint64_t type metadata accessor for FeedEdition()
{
  uint64_t result = qword_1EB85CE40;
  if (!qword_1EB85CE40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedMode()
{
  return &type metadata for FeedMode;
}

ValueMetadata *type metadata accessor for Feed()
{
  return &type metadata for Feed;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

double sub_1C0056E70()
{
  return *(double *)(*(void *)v0 + 16);
}

uint64_t storeEnumTagSinglePayload for FeedLayoutDirection(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

unsigned char *_s8ResolvedO10CodingTypeOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *__n128 result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 8;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatFlexibleExpression(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

NewsFeed::FormatAccessibilityTrait_optional sub_1C005705C(Swift::String *a1)
{
  return FormatAccessibilityTrait.init(rawValue:)(*a1);
}

uint64_t getEnumTagSinglePayload for FormatPreviewParameters(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if ((v3 & 0x7E) != 0) {
    int v4 = 126 - (v3 & 0x7E | (v3 >> 7));
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

void sub_1C00570BC(void *a1@<X8>)
{
  *a1 = 0x656E696C64616568;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1C00570E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C07C5678(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C0057114(uint64_t a1)
{
  return sub_1BFE446B4(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

id sub_1C0057120(uint64_t a1)
{
  return sub_1BFE440D4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1C005712C(uint64_t a1)
{
  return sub_1C04BA19C(a1, sub_1BFE43E14);
}

uint64_t _s4TextOwst_7(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x15)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)uint64_t result = a2 - 22;
    if (a3 >= 0x16) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0x16) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)uint64_t result = 0u;
      *(unsigned char *)(result + 48) = 8 * (((-a2 & 0x10) != 0) - 2 * a2);
    }
  }
  return result;
}

uint64_t _s4TextOwet_7(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x16 && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 22);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 48) >> 4) & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(a1 + 48) >> 3) & 1))) ^ 0x1F;
  if (v3 >= 0x15) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t FormatContentSlot.Resolved.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _s4TextOwet_1_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEA) {
    goto LABEL_17;
  }
  if (a2 + 22 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 22) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 22;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 22;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 22;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x17;
  int v8 = v6 - 23;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1C00572AC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 160);
  return result;
}

uint64_t sub_1C00572B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C00572D4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C00572F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

ValueMetadata *type metadata accessor for FeedModeState()
{
  return &type metadata for FeedModeState;
}

uint64_t storeEnumTagSinglePayload for FeedGroupClusteringKnobs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedEditionConfig.DateWindow(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 57) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupBindingOptions()
{
  return &type metadata for FeedGroupBindingOptions;
}

uint64_t type metadata accessor for FeedGroupKnobsRepool()
{
  return __swift_instantiateGenericMetadata();
}

double FeedLayoutResult.frame.getter()
{
  return *(double *)v0;
}

uint64_t sub_1C00573E0()
{
  return 0x7374756F79616CLL;
}

ValueMetadata *type metadata accessor for FeedOptionList()
{
  return &type metadata for FeedOptionList;
}

uint64_t sub_1C0057408()
{
  uint64_t result = 0x657669746341;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1852138835;
      break;
    case 2:
      uint64_t result = 0x6E657A6F7246;
      break;
    case 3:
      uint64_t result = 0x4620666F20646E45;
      break;
    case 4:
      uint64_t result = 0x646568636143;
      break;
    case 5:
      uint64_t result = 0x64656C6F6F706552;
      break;
    case 6:
      uint64_t result = 0x6465646E61707845;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t FormatFeedGroup.revision.getter()
{
  return *(void *)v0;
}

uint64_t storeEnumTagSinglePayload for FeedSportsEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1C005750C()
{
  sub_1C00520A0(0, &qword_1EB8643D0, (uint64_t)&type metadata for FeedReadStoryCommandContext, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v4 = (char *)&v6 - v3;
  sub_1C00520A0(0, &qword_1EB8643F8, (uint64_t)&type metadata for FeedReadStoryCommandContext, MEMORY[0x1E4FAD790]);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB864538 = result;
  return result;
}

uint64_t sub_1C005764C()
{
  uint64_t v0 = MEMORY[0x1E4FBB1A0];
  sub_1C00520A0(0, (unint64_t *)&qword_1EB87C860, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FAD778]);
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v7 - v4;
  sub_1C00520A0(0, &qword_1EB87C8D8, v0, MEMORY[0x1E4FAD790]);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FAD770], v2);
  uint64_t result = sub_1C151C9BC();
  qword_1EB87CAA0 = result;
  return result;
}

uint64_t sub_1C005778C()
{
  sub_1C00520A0(0, &qword_1EB884890, (uint64_t)&type metadata for ReportConcernCompleteContext, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - v3;
  sub_1C00520A0(0, (unint64_t *)&unk_1EB884898, (uint64_t)&type metadata for ReportConcernCompleteContext, MEMORY[0x1E4FAD790]);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB8848C8 = result;
  return result;
}

char *keypath_get_selector_identifier()
{
  return sel_identifier;
}

uint64_t sub_1C00578D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1C00193D4(a3, a1, a2, *(void *)(v4 + 16), a4);
}

uint64_t storeEnumTagSinglePayload for FormatCompilerSlotDefinitionItemSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C1307348);
}

uint64_t storeEnumTagSinglePayload for FormatSupplementaryNodePinTrait(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 11) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 11) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 10) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1C005793C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

uint64_t storeEnumTagSinglePayload for FormatFrameExpressionLogicCompare(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatFrameExpressionLogicCompare(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

unsigned char *storeEnumTagSinglePayload for FormatAccessibilityContainer(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSlotDefinitionItemSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C0DCABBC);
}

uint64_t storeEnumTagSinglePayload for FormatVideoNodeStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 160) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 161) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 161) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatImageAdjustmentBlend.ColorData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 241;
    if (a3 >= 0xF1) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF1) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 15;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatImageAdjustmentBlend.ColorData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF1 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 241);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 0x10;
  int v5 = v3 - 16;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1C0057BA4@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

unsigned char *storeEnumTagSinglePayload for FormatFlexibleExpression.Direction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatColorAndExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(void *)uint64_t result = a2 - 124;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatColorAndExpression(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7C && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 124);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 4) | (8 * ((*(void *)a1 >> 57) & 8 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7B) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

void destroy for GroupLayoutFactoryError(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 0xD) {
    unsigned int v1 = *(_DWORD *)a1 + 13;
  }
  switch(v1)
  {
    case 0u:
      __swift_destroy_boxed_opaque_existential_1(a1);
      break;
    case 1u:
      uint64_t v2 = *(void **)a1;

      break;
    case 6u:
    case 7u:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

uint64_t sub_1C0057DF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C0057E24(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C0057E24(char a1)
{
  uint64_t result = 0x7974706D65;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x726F6C6F63;
      break;
    case 2:
      uint64_t result = 0x746E656964617267;
      break;
    case 3:
      uint64_t result = 0x72476C6169646172;
      break;
    case 4:
      uint64_t result = 0x6E726574746170;
      break;
    case 5:
      uint64_t result = 1633905005;
      break;
    case 6:
      uint64_t result = 0x656E696873;
      break;
    case 7:
      uint64_t result = 0x726F7463656C6573;
      break;
    case 8:
      uint64_t result = 0x7463656C65736E75;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *_s3URLOwst_3(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        break;
      case 2:
        *(_WORD *)uint64_t result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = 0;
        break;
      case 2:
        *(_WORD *)uint64_t result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)uint64_t result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatResizeConstraint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatResizeConstraint(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

unsigned char *storeEnumTagSinglePayload for FormatResizeConstraint.Dimension(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

NewsFeed::FormatResizeConstraint::Dimension_optional sub_1C0058104(Swift::String *a1)
{
  return FormatResizeConstraint.Dimension.init(rawValue:)(*a1);
}

unsigned char *storeEnumTagSinglePayload for FormatPackageDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFC) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v7 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatIssueCoverTraits(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1C00582B4@<X0>(char *a1@<X8>)
{
  return FormatWebEmbedBinding.Bool.CodingType.init(rawValue:)(a1);
}

unint64_t sub_1C00582C0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = FormatWebEmbedBinding.Bool.CodingType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t FormatWebEmbedBinding.Bool.CodingType.rawValue.getter()
{
  unint64_t result = 0x6369747241736168;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 2:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 3:
    case 6:
    case 8:
      unint64_t result = 0xD000000000000023;
      break;
    case 4:
      unint64_t result = 0xD000000000000021;
      break;
    case 5:
      unint64_t result = 0xD000000000000022;
      break;
    case 7:
      unint64_t result = 0xD000000000000026;
      break;
    case 9:
      unint64_t result = 0x74726F7053736168;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *_s8DateTimeOwst_0_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

unint64_t sub_1C00584C8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C00584F4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C00584F4(char a1)
{
  unint64_t result = 0x654E6E496E65706FLL;
  switch(a1)
  {
    case 2:
      unint64_t result = 0x6572616873;
      break;
    case 3:
      unint64_t result = 0x6974724179706F63;
      break;
    case 4:
      unint64_t result = 1702257011;
      break;
    case 5:
      unint64_t result = 1701538156;
      break;
    case 6:
      unint64_t result = 0x656B696C736964;
      break;
    case 7:
      unint64_t result = 0x6E6168436E65706FLL;
      break;
    case 8:
      unint64_t result = 0x776F6C6C6F66;
      break;
    case 9:
      unint64_t result = 0x6B636F6C62;
      break;
    case 10:
      unint64_t result = 0x61536E496E65706FLL;
      break;
    case 11:
      unint64_t result = 0x74726F706572;
      break;
    case 12:
      unint64_t result = 0xD000000000000011;
      break;
    case 13:
      unint64_t result = 0xD000000000000013;
      break;
    case 14:
      unint64_t result = 0x6B63616279616C70;
      break;
    case 15:
      unint64_t result = 2036427888;
      break;
    case 16:
      unint64_t result = 0x616C506B63617274;
      break;
    case 17:
      unint64_t result = 0x6F72506B63617274;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1C00586E0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C005870C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C005870C(char a1)
{
  unint64_t result = 0x70795479726F7473;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatCompilerOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C028D4F8);
}

uint64_t getEnumTagSinglePayload for FormatCompilerOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C028D3B0);
}

uint64_t storeEnumTagSinglePayload for FormatCompilerOptions.Newsroom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C028DEC0);
}

uint64_t getEnumTagSinglePayload for FormatCompilerOptions.Newsroom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C028DDEC);
}

uint64_t getEnumTagSinglePayload for FeedIssue.Overrides(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

NewsFeed::FormatButtonNodeState_optional sub_1C0058864(Swift::String *a1)
{
  return FormatButtonNodeState.init(rawValue:)(*a1);
}

unsigned char *storeEnumTagSinglePayload for FormatResizeAutoMask(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t sub_1C005893C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C0058958()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for FormatCellSelection(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

unsigned char *storeEnumTagSinglePayload for FormatCellSelection.CodingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

NewsFeed::FormatCellSelection::CodingType_optional sub_1C0058A88(Swift::String *a1)
{
  return FormatCellSelection.CodingType.init(rawValue:)(*a1);
}

ValueMetadata *type metadata accessor for HeadlineViewLayout.Attributes()
{
  return &type metadata for HeadlineViewLayout.Attributes;
}

unsigned char *_s4TextOwst_0_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

uint64_t sub_1C0058B70()
{
  return sub_1BFC951BC();
}

uint64_t sub_1C0058B80()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C0058B9C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C0058BB8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C0058BD4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C0058BF0()
{
  return sub_1BFC951BC();
}

uint64_t sub_1C0058BFC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C0058C18()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for FormatPackageRole(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

NewsFeed::FormatPackageRole_optional sub_1C0058D00(Swift::String *a1)
{
  return FormatPackageRole.init(rawValue:)(*a1);
}

NewsFeed::FormatContentMode_optional sub_1C0058D0C(Swift::String *a1)
{
  return FormatContentMode.init(rawValue:)(*a1);
}

unsigned char *_s4BoolOwst_2_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *unint64_t result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 18;
        break;
    }
  }
  return result;
}

void sub_1C0058DE4(void *a1@<X8>)
{
  *a1 = 0x656E696C6E69;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1C0058DFC()
{
  if (*v0) {
    return 0x6D756D6978616DLL;
  }
  else {
    return 0x6D756D696E696DLL;
  }
}

void *HeadlineService.init(tagService:coreConfigurationManager:cloudContext:paidAccessChecker:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BFC773DC(a1, (uint64_t)(v4 + 2));
  v4[7] = a2;
  v4[8] = a3;
  v4[9] = a4;
  return v4;
}

unsigned char *storeEnumTagSinglePayload for FormatBlendMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *unint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBlendMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

NewsFeed::FormatBlendMode_optional sub_1C0058FD0(Swift::String *a1)
{
  return FormatBlendMode.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatRunMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1C0059020()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005903C()
{
  return swift_getWitnessTable();
}

uint64_t storeEnumTagSinglePayload for FormatShine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 3)
  {
    *(void *)unint64_t result = a2 - 4;
    if (a3 >= 4) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 4) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = -a2 & 7;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatShine(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 4 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 4);
  }
  unsigned int v3 = ~*(_DWORD *)a1 & 7;
  if (v3 >= 3) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t sub_1C00590E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C0059114(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C0059114(char a1)
{
  uint64_t result = 0x6E69685364726163;
  switch(a1)
  {
    case 1:
      uint64_t v3 = 0x53656C746974;
      goto LABEL_6;
    case 2:
      uint64_t result = 0xD000000000000011;
      break;
    case 3:
      uint64_t result = 0xD000000000000015;
      break;
    case 4:
      uint64_t v3 = 0x5370756F7267;
LABEL_6:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6968000000000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatRegex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C14F514C);
}

uint64_t sub_1C00591D0()
{
  if (*v0) {
    return 0x65746144646E65;
  }
  else {
    return 0x7461447472617473;
  }
}

uint64_t type metadata accessor for FeedService()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t FeedJournal.entriesByChosenGroupID.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t getEnumTagSinglePayload for FeedEdition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C139B300);
}

uint64_t sub_1C0059244(void *a1)
{
  return *a1 >> 60;
}

ValueMetadata *type metadata accessor for FeedItemRendererResult()
{
  return &type metadata for FeedItemRendererResult;
}

void static FeedAdGroupAdjacency.none.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t *sub_1C005926C(uint64_t *result, uint64_t a2)
{
  *uint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  return result;
}

uint64_t type metadata accessor for FeedCursorReference()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C0059298@<X0>(uint64_t *a1@<X8>)
{
  return FeedCursorContainer.shortDescription.getter(*v1, a1);
}

ValueMetadata *type metadata accessor for FeedServiceOptions.Database()
{
  return &type metadata for FeedServiceOptions.Database;
}

uint64_t type metadata accessor for FeedConfigDecoder(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, (uint64_t *)&unk_1EB8720C8);
}

uint64_t FeedLayoutResult.feedGroupDecorations.getter()
{
  return swift_bridgeObjectRetain();
}

void FeedLayoutResult.layoutPath.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 56);
}

uint64_t sub_1C00592E4()
{
  return 0x73626F6C62;
}

uint64_t sub_1C00592F8()
{
  return 0;
}

uint64_t AdFeedGroup.personalizingItems.getter()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t sub_1C005930C()
{
  if (*v0) {
    return 0x6E6572646C696863;
  }
  else {
    return 0x6574617473;
  }
}

uint64_t storeEnumTagSinglePayload for FormatColorColorExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(void *)uint64_t result = a2 - 124;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatColorColorExpression(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7C && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 124);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 57) >> 4) | (8
                                                          * ((*(void *)(a1 + 8) >> 57) & 8 | *(void *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7B) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t sub_1C00593F0()
{
  sub_1C0059520(0, &qword_1EB885228, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - v3;
  sub_1C0059520(0, &qword_1EB885298, MEMORY[0x1E4FAD790]);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB885408 = result;
  return result;
}

void sub_1C0059520(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1C0059580();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_1C0059580()
{
  unint64_t result = qword_1EB890230;
  if (!qword_1EB890230)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB890230);
  }
  return result;
}

uint64_t sub_1C00595EC(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1BFCC56F0(a1, a2, a3, (unint64_t *)&qword_1EB8901B0);
}

uint64_t sub_1C0059600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1C0018980(a3, a1, a2, *(void *)(v4 + 16), a4);
}

void sub_1C005960C(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  uint64_t v3 = 0x656E696C64616568;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x6575737369;
      goto LABEL_3;
    case 2:
      *a1 = 6775156;
      a1[1] = 0xE300000000000000;
      break;
    case 3:
      *a1 = 0x656C7A7A7570;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1C0059688()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C00596B4@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

void sub_1C00596C0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x73646E6F636573;
  if (*v1) {
    uint64_t v2 = 0x646E616D6D6F63;
  }
  *a1 = v2;
  a1[1] = 0xE700000000000000;
}

uint64_t destroy for FormatSyncImageContent()
{
  return swift_release();
}

void sub_1C0059704(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xE600000000000000;
  uint64_t v5 = 0x656E696C6E69;
  if (v2 != 1)
  {
    uint64_t v5 = 0x726F7463656C6573;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x676E69646E6962;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_1C0059760(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6465626D45626577;
  if (*v1) {
    uint64_t v2 = 0x6E6F6974706FLL;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1C005979C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1684957538;
  if (*v1) {
    uint64_t v2 = 0x746E756F63;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1C00597D0(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1768843629;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x6C6C616D73;
      goto LABEL_3;
    case 2:
      *a1 = 0x656772616CLL;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 0x746963696C707865;
      a1[1] = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t storeEnumTagSinglePayload for FormatColorBlendProcessor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x74)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 117;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x75) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x75) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatColorBlendProcessor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x75 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 117);
  }
  unsigned int v3 = ((*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x74) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t getEnumTagSinglePayload for FormatGroupNodeMaskPath(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

void sub_1C0059938(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7107189;
  if (*v1) {
    uint64_t v2 = 0x52556E6F69746361;
  }
  unint64_t v3 = 0xE300000000000000;
  if (*v1) {
    unint64_t v3 = 0xE90000000000004CLL;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1C0059974(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x646E656C62;
  if (v2 != 1)
  {
    uint64_t v5 = 0x7265746C6966;
    unint64_t v4 = 0xE600000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1802723693;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t storeEnumTagSinglePayload for FormatDerivedDataBlock(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatDerivedDataBlock(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

unsigned char *_s17ResolvedContainerO10CodingTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1C0059B30@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

NewsFeed::FormatUnderlineStyle_optional sub_1C0059B3C(Swift::String *a1)
{
  return FormatUnderlineStyle.init(rawValue:)(*a1);
}

uint64_t sub_1C0059B48(char *a1)
{
  return sub_1BFE664C8(a1, (uint64_t)sub_1BFE668C8);
}

unsigned char *_s8NewsFeed18SavingCommandStateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *sub_1C0059C30(void *a1, void *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    *((unsigned char *)v4 + v6) = *((unsigned char *)a2 + v6);
  }
  else
  {
    uint64_t v10 = *a2;
    void *v4 = *a2;
    unsigned int v4 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t sub_1C0059D04(uint64_t a1)
{
  return sub_1BFCF3AB8(a1, *(void *)(v1 + 16));
}

uint64_t sub_1C0059D0C(uint64_t a1)
{
  return sub_1BFC817F0(a1);
}

uint64_t sub_1C0059D24(uint64_t *a1)
{
  return sub_1BFE42A58(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char **)(v1 + 32));
}

uint64_t sub_1C0059D30(uint64_t a1)
{
  return sub_1BFE41EEC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1C0059D3C(uint64_t a1)
{
  return sub_1BFE4228C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1C0059D48(uint64_t a1)
{
  return sub_1BFC8B07C(a1, v1[2], v1[3], v1[4]);
}

ValueMetadata *type metadata accessor for FormatLayoutValue()
{
  return &type metadata for FormatLayoutValue;
}

uint64_t storeEnumTagSinglePayload for FormatBundleImage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBundleImage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C0059E00@<X0>(BOOL *a1@<X8>)
{
  return sub_1BFD59FB4(a1);
}

uint64_t sub_1C0059E0C@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

uint64_t getEnumTagSinglePayload for FormatUnderline(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF8 && a1[16]) {
    return (*(_DWORD *)a1 + 248);
  }
  if (*a1 <= 8u) {
    int v3 = 8;
  }
  else {
    int v3 = *a1;
  }
  int v4 = v3 - 9;
  if (*a1 < 8u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

void sub_1C0059E6C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1954047348;
  if (!*v1) {
    uint64_t v2 = 0x686374697773;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1C0059EA0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x646E616D6D6F63;
  if (*v1) {
    uint64_t v2 = 0x6567616D69;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

unsigned char *storeEnumTagSinglePayload for FormatLineCap(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

NewsFeed::FormatLineCap_optional sub_1C0059FA8(Swift::String *a1)
{
  return FormatLineCap.init(rawValue:)(*a1);
}

uint64_t dispatch thunk of FeedSectionPositionProviderType.sectionPosition<A, B>(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 8))();
}

unsigned char *_s8NewsFeed25FeedGroupFreezingDisallowV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        break;
      case 2:
        *(_WORD *)unint64_t result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = 0;
        break;
      case 2:
        *(_WORD *)unint64_t result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)unint64_t result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1C005A070()
{
  return 0x7461726479686572;
}

uint64_t sub_1C005A08C(char *a1, char *a2)
{
  return sub_1BFC73E94(*a1, *a2);
}

ValueMetadata *type metadata accessor for FeedPluginFactoryResult()
{
  return &type metadata for FeedPluginFactoryResult;
}

uint64_t sub_1C005A0B0()
{
  return swift_getWitnessTable();
}

id FeedScoredItem.init(item:scoreProfile:feedContext:)@<X0>(id result@<X0>, id a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v5 = result;
  if (!a2)
  {
    unint64_t result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F7E420]), sel_init);
    a2 = result;
  }
  *a4 = v5;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t sub_1C005A124()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005A140()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for FormatDateFormat(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  unsigned int v5 = v4 + 1;
  unsigned int v6 = v4 - 1;
  if (v5 >= 3) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t getEnumTagSinglePayload for FormatImageNodeRequestAdjustment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF4 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 244);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 0xC) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

ValueMetadata *type metadata accessor for FormatContentSlotItemAuxiliary.Resolved()
{
  return &type metadata for FormatContentSlotItemAuxiliary.Resolved;
}

uint64_t destroy for FormatOptionBindingModifier()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s8NewsFeed24FormatLayeredMediaFilterO10MonochromeVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7B && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 123);
  }
  int v3 = ((*(void *)(a1 + 8) >> 57) >> 4) | (8
                                                         * ((*(void *)(a1 + 8) >> 57) & 8 | *(void *)(a1 + 8) & 7));
  unsigned int v4 = v3 ^ 0x7F;
  int v5 = 126 - v3;
  if (v4 >= 0x7B) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t getEnumTagSinglePayload for FormatAnimationNodeStyle.Selector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 53)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for FormatCellSelection.Background(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7B && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 123);
  }
  int v3 = ((*(void *)(a1 + 48) >> 57) >> 4) | (8
                                                          * ((*(void *)(a1 + 48) >> 57) & 8 | *(void *)(a1 + 48) & 7));
  unsigned int v4 = v3 ^ 0x7F;
  int v5 = 126 - v3;
  if (v4 >= 0x7B) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IssueCoverViewLayoutAttributes(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

uint64_t *sub_1C005A378(uint64_t *result, uint64_t a2)
{
  *unint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 60);
  return result;
}

uint64_t dispatch thunk of FeedBannerAdFactoryType.makeBannerAd()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_1C005A3A4@<X0>(uint64_t *a1@<X8>)
{
  return FeedServiceFetchResult.shortDescription.getter(*v1, a1);
}

uint64_t FeedJournalGroupResult.output.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BFD7EBD0(v1 + 128, a1);
}

uint64_t storeEnumTagSinglePayload for FeedGroupGroupingRules(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedGroupGroupingRules(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for FeedRebuildPolicy()
{
  return &type metadata for FeedRebuildPolicy;
}

uint64_t destroy for FormatResizeConstraint()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C005A478()
{
  return 0x7370756F7267;
}

uint64_t sub_1C005A48C()
{
  return sub_1C005A4BC(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1C005A494()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1C005A4BC(uint64_t (*a1)(void))
{
  return a1();
}

NewsFeed::AdFeedGroup __swiftcall AdFeedGroup.init(identifier:)(NewsFeed::AdFeedGroup identifier)
{
  *uint64_t v1 = identifier;
  return identifier;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t sub_1C005A520()
{
  if (*v0) {
    return 0xD000000000000018;
  }
  else {
    return 0x656D617266;
  }
}

uint64_t storeEnumTagSinglePayload for FormatBindingDateTimeExpressionLogicCompare(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF4)
  {
    *(void *)__n128 result = a2 - 245;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF5) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF5) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 11;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBindingDateTimeExpressionLogicCompare(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF5 && a1[16]) {
    return (*(_DWORD *)a1 + 245);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 0xC;
  int v5 = v3 - 12;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatBindingDateTimeExpressionLogic(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF2)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 243;
    if (a3 >= 0xF3) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF3) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 13;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBindingDateTimeExpressionLogic(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF3 && a1[16]) {
    return (*(_DWORD *)a1 + 243);
  }
  unsigned int v3 = *a1;
  if (v3 >= 0xC) {
    unsigned int v4 = v3 - 11;
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 >= 3) {
    return v4 - 2;
  }
  else {
    return 0;
  }
}

uint64_t SharingPuzzleActivityTypeProvider.init(supportedActivityTypes:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t SharingIssueActivityTypeProvider.init(supportedActivityTypes:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t storeEnumTagSinglePayload for FormatImageNodeRequestAdjustment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 244;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatBindingTextExpressionLogic(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1F9)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 50) = 0;
    *(_WORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 506;
    if (a3 >= 0x1FA) {
      *(unsigned char *)(result + 51) = 1;
    }
  }
  else
  {
    if (a3 >= 0x1FA) {
      *(unsigned char *)(result + 51) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)__n128 result = 0u;
      *(_WORD *)(result + 48) = (-256 * a2) & 0xF800;
      *(unsigned char *)(result + 50) = (((-a2 & 0x100) << 12) - (a2 << 21)) >> 16;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBindingTextExpressionLogic(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x1FA && *(unsigned char *)(a1 + 51)) {
    return (*(_DWORD *)a1 + 506);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 50) >> 5) | (8
                                              * ((*(unsigned __int16 *)(a1 + 48) >> 11) & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a1 + 50) >> 4) & 1))))) ^ 0x1FF;
  if (v3 >= 0x1F9) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

unsigned char *storeEnumTagSinglePayload for FormatBindingURLExpressionLogic(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatBindingDateTimeExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 243;
    if (a3 >= 0xF3) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF3) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 13;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBindingDateTimeExpression(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF3 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 243);
  }
  if (*(unsigned __int8 *)(a1 + 8) <= 0xDu) {
    int v3 = 13;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 8);
  }
  int v4 = v3 - 14;
  if (*(unsigned __int8 *)(a1 + 8) < 0xCu) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for FormatRepeatNodeBindIteration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatContentSubgroupSection.Resolved()
{
  return &type metadata for FormatContentSubgroupSection.Resolved;
}

uint64_t SharingActivityTypeProvider.init(supportedActivityTypes:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t storeEnumTagSinglePayload for FormatSlotDefinitionItemSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C0DCAC6C);
}

void sub_1C005AA14(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6574656D61726170;
  if (*v1) {
    uint64_t v2 = 0x7470697263736564;
  }
  unint64_t v3 = 0xEA00000000007372;
  if (*v1) {
    unint64_t v3 = 0xEB000000006E6F69;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_1C005AA60@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C005AA8C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C005AA8C(char a1)
{
  unint64_t result = 0x6E616964656DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0x766E49726F6C6F63;
      break;
    case 4:
      unint64_t result = 0x6C416F546B73616DLL;
      break;
    case 5:
    case 6:
    case 13:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
    case 10:
    case 11:
      unint64_t result = 0x6666456F746F6870;
      break;
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    case 12:
      unint64_t result = 0xD000000000000012;
      break;
    case 14:
      unint64_t result = 0xD000000000000013;
      break;
    case 15:
      unint64_t result = 0x6E6F546169706573;
      break;
    case 16:
      unint64_t result = 0x6E61697373756167;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatBindingURLExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 26) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 25) = a2 + 3;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBindingURLExpression(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 26)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 25);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

void sub_1C005ACF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BFD42B74(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

uint64_t _s8NewsFeed24FormatLayeredMediaFilterO10MonochromeVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7A)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 123;
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = ((16 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 3) | ((unint64_t)((16 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 3)) << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

NewsFeed::FormatFlexibleExpression::Direction_optional sub_1C005AD58(Swift::String *a1)
{
  return FormatFlexibleExpression.Direction.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatAnimationNodeStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 53) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 53) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void sub_1C005ADBC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x646E616D6D6F63;
  if (*v1) {
    uint64_t v2 = 0x656E696C6E69;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

unsigned char *storeEnumTagSinglePayload for FormatButtonNodeBinding(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 131 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 131) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x7D) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x7C)
  {
    unsigned int v6 = ((a2 - 125) >> 8) + 1;
    *unint64_t result = a2 - 125;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingArticleActivity()
{
  return &type metadata for SharingArticleActivity;
}

NewsFeed::FormatIssueCoverTraits_optional sub_1C005AEE8(Swift::String *a1)
{
  return FormatIssueCoverTraits.init(rawValue:)(*a1);
}

ValueMetadata *type metadata accessor for SharingPuzzleActivity()
{
  return &type metadata for SharingPuzzleActivity;
}

unsigned char *_s12LayeredMediaOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        break;
      case 2:
        *(_WORD *)unint64_t result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = 0;
        break;
      case 2:
        *(_WORD *)unint64_t result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)unint64_t result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1C005AFA4@<X0>(BOOL *a1@<X8>)
{
  return sub_1BFD59FB4(a1);
}

void sub_1C005AFB0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x656E696C6E69;
  if (*v1) {
    uint64_t v2 = 0x6E6967756C70;
  }
  *a1 = v2;
  a1[1] = 0xE600000000000000;
}

ValueMetadata *type metadata accessor for SharingIssueActivity()
{
  return &type metadata for SharingIssueActivity;
}

NewsFeed::FormatResizeAutoMask_optional sub_1C005AFF0(Swift::String *a1)
{
  return FormatResizeAutoMask.init(rawValue:)(*a1);
}

uint64_t sub_1C005AFFC()
{
  return sub_1BFC77518();
}

unint64_t sub_1C005B004@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C005B030(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C005B030(char a1)
{
  unint64_t result = 0x65746167656C6564;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x676E69646E6962;
      break;
    case 2:
      unint64_t result = 0x4C52556E65706FLL;
      break;
    case 3:
      unint64_t result = 0x6574756F72;
      break;
    case 4:
      unint64_t result = 0x616C506F65646976;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0x64656C6261736964;
      break;
    case 7:
      unint64_t result = 0x726574756F72;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatCommandOpenURL.CodingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void sub_1C005B1E4(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x656E696C6E69;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x6574756C6F736261;
      goto LABEL_3;
    case 2:
      *a1 = 0x7465737361;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 0x6E6F6974706FLL;
      a1[1] = 0xE600000000000000;
      break;
    case 4:
      *a1 = 0x79747265706F7270;
      a1[1] = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t StubOfflineProvider.init(offlineReason:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

unsigned char *storeEnumTagSinglePayload for FormatSupplementary.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

NewsFeed::FormatSupplementary::Kind_optional sub_1C005B354(Swift::String *a1)
{
  return FormatSupplementary.Kind.init(rawValue:)(*a1);
}

unsigned char *storeEnumTagSinglePayload for FormatJsonConfigKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatGroupPriority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

NewsFeed::FormatGroupPriority_optional sub_1C005B4F8(Swift::String *a1)
{
  return FormatGroupPriority.init(rawValue:)(*a1);
}

unsigned char *storeEnumTagSinglePayload for FormatGroupItemKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void sub_1C005B5D0(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEA0000000000646ELL;
  int v3 = *v1;
  unint64_t v4 = 0xEA0000000000746ELL;
  uint64_t v5 = 0x65746E6F436D6964;
  if (v3 != 1)
  {
    uint64_t v5 = 1701736302;
    unint64_t v4 = 0xE400000000000000;
  }
  BOOL v6 = v3 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x756F72676B636162;
  }
  if (!v6) {
    unint64_t v2 = v4;
  }
  *a1 = v7;
  a1[1] = v2;
}

uint64_t storeEnumTagSinglePayload for FormatCellSelection.Background(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7A)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 123;
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = ((16 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 3) | ((unint64_t)((16 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 3)) << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1C005B690(uint64_t a1)
{
  return sub_1BFC817F0(a1);
}

uint64_t storeEnumTagSinglePayload for FormatIssue.Overrides(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatURLAnnotator()
{
  return &type metadata for FormatURLAnnotator;
}

uint64_t storeEnumTagSinglePayload for FormatTagIconStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unint64_t sub_1C005B750@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C005B77C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C005B77C(char a1)
{
  unint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C746974;
      break;
    case 2:
      unint64_t result = 0x7461447265766F63;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x656873696C627570;
      break;
    case 5:
      unint64_t result = 0x65676175676E616CLL;
      break;
    case 6:
      unint64_t result = 0x6974616D6F747561;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *_s4BoolOwst_1_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t _s4BoolOwst_6(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1F7)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 504;
    if (a3 >= 0x1F8) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0x1F8) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(unsigned char *)(result + 8) = 32 * (-(char)a2 & 1);
      *(unsigned char *)(result + 9) = -a2 >> 1;
    }
  }
  return result;
}

uint64_t sub_1C005B984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

uint64_t sub_1C005B98C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005B9A8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005B9C4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005B9E0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005B9FC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005BA18()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005BA34()
{
  if (*v0) {
    return 1885433183;
  }
  else {
    return 0x6574656D61726170;
  }
}

NewsFeed::FormatSymbolScale_optional sub_1C005BA6C(Swift::String *a1)
{
  return FormatSymbolScale.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatMediaTiming(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 136) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 137) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 137) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

uint64_t initializeWithCopy for FormatAssetHandle(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = (_OWORD *)(a1 + 40);
  unsigned int v6 = (_OWORD *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 64);
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v7;
    *(void *)(a1 + 72) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 56);
    *uint64_t v5 = *v6;
    *(_OWORD *)(a1 + 56) = v9;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
  }
  return a1;
}

unsigned char *_s5ColorOwst_0_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *unint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

uint64_t _s10CodingKeysOwet_3(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1C005BD04@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, (unint64_t *)&qword_1EB87A270);
  uint64_t result = sub_1C151818C();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = type metadata accessor for PaidBundleConfigManager();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    a2[3] = v5;
    a2[4] = (uint64_t)&protocol witness table for PaidBundleConfigManager;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatFontWidth(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatMenuItem(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1023);
  }
  unsigned int v3 = (((unsigned __int16)(2 * ((*(void *)(a1 + 8) >> 57) & 0x78 | *(void *)(a1 + 8) & 7)) | (unsigned __int16)((unsigned __int16)*(_DWORD *)(a1 + 24) << 8)) & 0x3FE | (*(_DWORD *)(a1 + 24) >> 2) & 1) ^ 0x3FF;
  if (v3 >= 0x3FE) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t sub_1C005BED0()
{
  return 1701667182;
}

unsigned char *_s8NewsFeed14FormatItemKindO10CodingTypeOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        break;
      case 2:
        *(_WORD *)uint64_t result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = 0;
        break;
      case 2:
        *(_WORD *)uint64_t result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)uint64_t result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1C005BF80()
{
  return swift_getWitnessTable();
}

uint64_t FormatConfig.init(showMissingOptionBindings:environment:annotator:feedAppConfig:)@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X8>, int64x2_t a6@<Q0>)
{
  char v6 = result;
  int v8 = *a2;
  uint64_t v9 = *a3;
  int64x2_t v10 = *(int64x2_t *)(a3 + 1);
  uint64_t v11 = a3[3];
  long long v12 = *a4;
  long long v13 = a4[1];
  uint64_t v14 = *((void *)a4 + 4);
  if (v8 == 8)
  {
    long long v18 = a4[1];
    long long v19 = *a4;
    int64x2_t v20 = *(int64x2_t *)(a3 + 1);
    sub_1C151706C();
    sub_1C151704C();
    if (qword_1EB896B90 != -1) {
      swift_once();
    }
    sub_1C151703C();
    uint64_t result = swift_release();
    LOBYTE(v8) = v21;
    long long v12 = v19;
    int64x2_t v10 = v20;
    long long v13 = v18;
  }
  a6.i64[0] = 1;
  int8x16_t v15 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(v10, a6)).i64[0], 0);
  *(unsigned char *)a5 = v6 & 1;
  *(unsigned char *)(a5 + 1) = v8;
  if (v10.i64[0] == 1) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v9;
  }
  *(void *)(a5 + 8) = v16;
  *(int8x16_t *)(a5 + 16) = vandq_s8((int8x16_t)v10, v15);
  if (v10.i64[0] == 1) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v11;
  }
  *(void *)(a5 + 32) = v17;
  *(_OWORD *)(a5 + 40) = v12;
  *(_OWORD *)(a5 + 56) = v13;
  *(void *)(a5 + 72) = v14;
  return result;
}

uint64_t sub_1C005C0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1C005C0F4()
{
  uint64_t v1 = 0x736D657469;
  if (*v0 != 1) {
    uint64_t v1 = 0x7974697669746361;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7370756F7267;
  }
}

uint64_t dispatch thunk of FeedGroupType.kind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

ValueMetadata *type metadata accessor for FeedAppConfig()
{
  return &type metadata for FeedAppConfig;
}

uint64_t storeEnumTagSinglePayload for FeedEdition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C139B3C0);
}

void sub_1C005C18C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x746C7561666564;
  if (*v1) {
    uint64_t v2 = 0x656E696C66666FLL;
  }
  *a1 = v2;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1C005C1C4(char *a1, char *a2)
{
  return sub_1BFC621C0(*a1, *a2);
}

uint64_t sub_1C005C1D4(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 64);
  if (result >= 7) {
    return (*(_DWORD *)a1 + 7);
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedJournalGroupResultOutput()
{
  return &type metadata for FeedJournalGroupResultOutput;
}

void sub_1C005C204(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1684627824;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x646961706E75;
      goto LABEL_3;
    case 2:
      *a1 = 1752461154;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x7265687469656ELL;
      a1[1] = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t FeedGroupKnobsRuleValue.__deallocating_deinit()
{
  return sub_1BFC44C80((void (*)(void))FeedGroupKnobsRuleValue.deinit);
}

BOOL FeedServiceFetchResult.isEndOfFeed.getter(unint64_t a1)
{
  return a1 >> 62 != 0;
}

ValueMetadata *type metadata accessor for FeedJournalGroupResult()
{
  return &type metadata for FeedJournalGroupResult;
}

void *sub_1C005C2B4(void *result)
{
  *result &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

void *sub_1C005C2C4(uint64_t a1)
{
  return sub_1BFD00E64(a1, *(void *)(v1 + 64));
}

id static FeedJournalFormatter.dateFormatter.getter()
{
  return sub_1BFC5BA38(&qword_1EB85E570, (void **)&qword_1EB85B1D8);
}

void sub_1C005C2FC(void *a1)
{
  sub_1BFCAD6EC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t static FeedCursorReference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  if ((v2 & 0x4000000000000000) != 0)
  {
    if ((v3 & 0x4000000000000000) != 0)
    {
      sub_1C0EF9C54();
      sub_1C0EF9C54();
      char v6 = static FeedCursorContainer.== infix(_:_:)(v2 & 0xBFFFFFFFFFFFFFFFLL, v3 & 0xBFFFFFFFFFFFFFFFLL);
      sub_1BFC53D34();
      sub_1BFC53D34();
      return v6 & 1;
    }
    return 0;
  }
  if ((v3 & 0x4000000000000000) != 0) {
    return 0;
  }
  if (*(void *)(v2 + 16) == *(void *)(v3 + 16) && *(void *)(v2 + 24) == *(void *)(v3 + 24)) {
    return 1;
  }
  return sub_1C1520A9C();
}

unint64_t sub_1C005C3D4()
{
  unint64_t result = 0x65646F4D64656566;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0x6573616261746164;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedEditionConfig()
{
  return &type metadata for FeedEditionConfig;
}

uint64_t sub_1C005C46C()
{
  return sub_1BFCA9DD8();
}

uint64_t sub_1C005C47C()
{
  return swift_getAssociatedConformanceWitness();
}

ValueMetadata *type metadata accessor for FeedJournalGroup()
{
  return &type metadata for FeedJournalGroup;
}

uint64_t FeedJournalGroup.result.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BFC88478(v1, a1);
}

uint64_t FeedJournalEntry.emittedGroups.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C005C4C4()
{
  return 0x73726F73727563;
}

uint64_t FeedGroupConfig.blockedSegmentSetIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FeedGroupConfig.allowedSegmentSetIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FeedGroupConfig.blockedPlatforms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FeedGroupConfig.allowedPlatforms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FeedGroupConfig.minNewsVersion.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BFEC03F4(v2 + *(int *)(a1 + 60), a2);
}

uint64_t FeedGroupConfig.maxNewsVersion.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BFEC03F4(v2 + *(int *)(a1 + 64), a2);
}

unsigned char *storeEnumTagSinglePayload for FeedDaysOfWeek(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NewsEnvironment()
{
  return &type metadata for NewsEnvironment;
}

unsigned char *storeEnumTagSinglePayload for FormatHeadlineTrackDurationFormat(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1C005C6D4()
{
  sub_1C005C804(0, &qword_1EB871640, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  unsigned int v4 = (char *)&v6 - v3;
  sub_1C005C804(0, qword_1EB87AF30, MEMORY[0x1E4FAD790]);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB885360 = result;
  return result;
}

void sub_1C005C804(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1BFF91B1C();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_1C005C864(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t static Settings.NewsContentEnvironment.contentEnvironment.getter()
{
  if (qword_1EB896B90 != -1) {
    swift_once();
  }
  return swift_retain();
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

void sub_1C005C9C8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1C005CA2C();
    unint64_t v7 = a3(a1, &type metadata for FormatContentSubgroupFilterSelector.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_1C005CA2C()
{
  unint64_t result = qword_1EB86A200;
  if (!qword_1EB86A200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86A200);
  }
  return result;
}

void sub_1C005CA80(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1C005CAE4();
    unint64_t v7 = a3(a1, &type metadata for FormatContentSubgroupFilter.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_1C005CAE4()
{
  unint64_t result = qword_1EB8681A0;
  if (!qword_1EB8681A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8681A0);
  }
  return result;
}

uint64_t sub_1C005CB38@<X0>(void *a1@<X8>)
{
  return sub_1BFC73A8C(*(void **)(v1 + 24), a1);
}

void sub_1C005CB44(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BFC782A4(a1, a2, a3, a4, *(void **)(v4 + 24), *(unsigned char *)(v4 + 32));
}

double static Double.oneMinute.getter()
{
  return 60.0;
}

uint64_t sub_1C005CB5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1BFC6E9E8(a3, a1, a2, *(void *)(v4 + 16), a4);
}

uint64_t sub_1C005CB64(uint64_t a1)
{
  return sub_1BFD5CBE4(a1, *(void *)(v1 + 16));
}

uint64_t sub_1C005CB6C(uint64_t a1)
{
  return sub_1BFD5B780(a1, *(void *)(v1 + 16));
}

uint64_t sub_1C005CB74(uint64_t a1)
{
  return sub_1BFD5D1C0(a1, *(void *)(v1 + 16));
}

uint64_t sub_1C005CB7C(uint64_t a1)
{
  return sub_1BFD5BD5C(a1, *(void *)(v1 + 16));
}

uint64_t sub_1C005CB84(uint64_t a1)
{
  return sub_1BFC6ADA4(a1, *(void *)(v1 + 16));
}

void sub_1C005CB8C(uint64_t a1)
{
  sub_1BFD5D770(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1C005CB94(uint64_t a1)
{
  return sub_1BFD5D580(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

ValueMetadata *type metadata accessor for PuzzleGameCenterOpenLeaderboardEntryPoint()
{
  return &type metadata for PuzzleGameCenterOpenLeaderboardEntryPoint;
}

unsigned char *storeEnumTagSinglePayload for FormatBindingShareAttributionExpression(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatSupplementaryNodeRubberbandTrait(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatBindingLayeredMediaExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = -(char)a2;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatShareAttributionNodeBinding(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        break;
      case 2:
        *(_WORD *)unint64_t result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = 0;
        break;
      case 2:
        *(_WORD *)unint64_t result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)unint64_t result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1C005CEB4@<X0>(BOOL *a1@<X8>)
{
  return sub_1BFD59FB4(a1);
}

uint64_t sub_1C005CEC0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005CEDC()
{
  return swift_getWitnessTable();
}

void sub_1C005CEF8(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1819242338;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x74616F6C66;
      goto LABEL_3;
    case 2:
      *a1 = 1954047348;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 7107189;
      a1[1] = 0xE300000000000000;
      break;
    case 4:
      *a1 = 0x656D695465746164;
      a1[1] = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t destroy for FormatImageNodeRequestAdjustment(uint64_t a1)
{
  return sub_1BFCDA05C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t sub_1C005CFA0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005CFBC()
{
  return swift_getWitnessTable();
}

void sub_1C005CFD8(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x7974706D457369;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x7974706D45746F6ELL;
      goto LABEL_3;
    case 2:
      unsigned int v4 = 1850307433;
      goto LABEL_6;
    case 3:
      unsigned int v4 = 2017817449;
LABEL_6:
      *a1 = v4 | 0x6E72657400000000;
      a1[1] = 0xEA00000000006C61;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_1C005D058(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 7629921;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE900000000000073;
      uint64_t v3 = 0x656E694C74786574;
      goto LABEL_3;
    case 2:
      *a1 = 6581857;
      a1[1] = 0xE300000000000000;
      break;
    case 3:
      *a1 = 29295;
      a1[1] = 0xE200000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unsigned char *storeEnumTagSinglePayload for FormatLayeredMediaNodeBinding(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = -(char)a2;
        break;
    }
  }
  return result;
}

uint64_t sub_1C005D194@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

uint64_t storeEnumTagSinglePayload for FormatVideoPlayerNodeBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatVideoPlayerNodeBinding(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_1C005D230@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

void sub_1C005D23C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x746E656964617267;
  if (*v1) {
    uint64_t v2 = 0x726F6C6F63;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1C005D278()
{
  return 0x697461726F636564;
}

uint64_t storeEnumTagSinglePayload for FormatCompilerEnumProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C132B5A8);
}

uint64_t getEnumTagSinglePayload for FormatCompilerEnumProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C132B4DC);
}

uint64_t storeEnumTagSinglePayload for FormatAnimationNodeKeyPath(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF4)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = a2 - 245;
    if (a3 >= 0xF5) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF5) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatAnimationNodeKeyPath(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF5 && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 245);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 0xB) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_1C005D35C()
{
  return sub_1C151886C();
}

uint64_t sub_1C005D38C()
{
  return sub_1C15187EC();
}

uint64_t sub_1C005D3B8()
{
  return sub_1C15187FC();
}

uint64_t MailShareLinkTextProvider.init()()
{
  return v0;
}

unsigned char *storeEnumTagSinglePayload for FormatMediaTimingFillMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t dispatch thunk of PuzzleHistoryServiceType.addObserver(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

unint64_t sub_1C005D4CC()
{
  return 0xD00000000000001ELL;
}

void *ImagePersistenceProvider.init(imageCache:rendererEnvironment:layoutCollectionProvider:layoutProvider:layoutOptionsProvider:)(long long *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1BFC773DC(a1, (uint64_t)(v6 + 2));
  sub_1BFC773DC(a2, (uint64_t)(v6 + 7));
  v6[12] = a3;
  v6[13] = a4;
  v6[14] = a5;
  v6[15] = a6;
  return v6;
}

uint64_t sub_1C005D548@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

uint64_t sub_1C005D554()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005D570()
{
  return swift_getWitnessTable();
}

void sub_1C005D58C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x746E756F63;
  if (v2 != 1)
  {
    uint64_t v5 = 1953459315;
    unint64_t v4 = 0xE400000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x73626F6E6BLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

NewsFeed::FormatTextLineBreakMode_optional sub_1C005D5E0(Swift::String *a1)
{
  return FormatTextLineBreakMode.init(rawValue:)(*a1);
}

uint64_t sub_1C005D5EC@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

unsigned char *storeEnumTagSinglePayload for FormatIssueCoverBinding(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = -(char)a2;
        break;
    }
  }
  return result;
}

uint64_t sub_1C005D6C4@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

void sub_1C005D6D0(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEC00000073756964;
  uint64_t v3 = 0x615272656E726F63;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEA00000000006874;
      uint64_t v3 = 0x61507265697A6562;
      goto LABEL_3;
    case 2:
      *a1 = 1818326639;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x746E656964617267;
      a1[1] = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_1C005D760(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

ValueMetadata *type metadata accessor for FormatAccessibilityRole()
{
  return &type metadata for FormatAccessibilityRole;
}

uint64_t sub_1C005D798@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BFDF9374(v1, a1);
}

unsigned char *_s6ActionOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1C005D86C@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

unsigned char *_s3URLOwst_0_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *_s10SharedItemOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        break;
      case 2:
        *(_WORD *)unint64_t result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = 0;
        break;
      case 2:
        *(_WORD *)unint64_t result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)unint64_t result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1C005D9E0@<X0>(BOOL *a1@<X8>)
{
  return sub_1BFD59FB4(a1);
}

id ColorPaletteProviding.gapColorPalette.getter@<X0>(void **a1@<X8>)
{
  return sub_1BFDB8148(&qword_1EB87AF98, (void **)&qword_1EB874F60, (id *)algn_1EB874F68, a1);
}

ValueMetadata *type metadata accessor for TraversalOnlyEncoder()
{
  return &type metadata for TraversalOnlyEncoder;
}

uint64_t (*TraversalOnlyEncoder.userInfo.modify())(void)
{
  return nullsub_1;
}

uint64_t TraversalOnlyEncoder.init(codingPath:userInfo:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatSizeConstraint(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

NewsFeed::FormatSizeConstraint_optional sub_1C005DB18(Swift::String *a1)
{
  return FormatSizeConstraint.init(rawValue:)(*a1);
}

void sub_1C005DB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BFCC2C5C(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

unsigned char *storeEnumTagSinglePayload for FormatPropertyValue.CodingType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        break;
      case 2:
        *(_WORD *)unint64_t result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = 0;
        break;
      case 2:
        *(_WORD *)unint64_t result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)unint64_t result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

NewsFeed::FormatJsonConfigKey_optional sub_1C005DBD0(Swift::String *a1)
{
  return FormatJsonConfigKey.init(rawValue:)(*a1);
}

uint64_t sub_1C005DBDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

NewsFeed::FormatGroupItemKind_optional sub_1C005DC24(Swift::String *a1)
{
  return FormatGroupItemKind.init(rawValue:)(*a1);
}

uint64_t sub_1C005DC30()
{
  return sub_1BFC60774();
}

uint64_t sub_1C005DC38(char *a1)
{
  return sub_1BFE664C8(a1, (uint64_t)sub_1BFE6DA68);
}

void sub_1C005DC50(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6465766173;
  if (*v1) {
    uint64_t v2 = 0x6465766153746F6ELL;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t getEnumTagSinglePayload for FormatTagIconStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void sub_1C005DCD4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x7265766F63;
  if (*v1) {
    uint64_t v2 = 0x656873696C627570;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xED00006F676F4C72;
  }
  *a1 = v2;
  a1[1] = v3;
}

unsigned char *_s10IssueCoverOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        break;
      case 2:
        *(_WORD *)uint64_t result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = 0;
        break;
      case 2:
        *(_WORD *)uint64_t result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)uint64_t result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1C005DDBC@<X0>(BOOL *a1@<X8>)
{
  return sub_1BFD59FB4(a1);
}

uint64_t _s5ImageOwst_3(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7A)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 123;
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2)
    {
      *(void *)(result + 32) = 0;
      *(_OWORD *)uint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(unsigned char *)(result + 40) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t _s5ImageOwet_2(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7B && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 123);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 40) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 40) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7A) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

unint64_t sub_1C005DE84()
{
  unint64_t result = qword_1EB888560;
  if (!qword_1EB888560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888560);
  }
  return result;
}

uint64_t sub_1C005DED8()
{
  return sub_1BFC8D7F4(v0[2], v0[3], v0[4]);
}

uint64_t ShareLinkProvider.init()()
{
  return v0;
}

uint64_t getEnumTagSinglePayload for FormatMediaTiming(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 137)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s5ImageOwst_1(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = 2 * -a2;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0;
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t _s5ImageOwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)a1 >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_1C005DFE8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005E004()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for FormatFontDesign(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatFixedColor(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatFixedColor(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

NewsFeed::FormatFixedColor_optional sub_1C005E24C(Swift::String *a1)
{
  return FormatFixedColor.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatCustomFont(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 34) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatCustomFont(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 34)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C005E2E4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 184);
  return result;
}

uint64_t sub_1C005E2F0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, (unint64_t *)&qword_1EB87A270);
  uint64_t result = sub_1C151818C();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = type metadata accessor for FeedAppConfigManager();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    type metadata accessor for FormatFeedConfigManager();
    swift_allocObject();
    uint64_t result = sub_1C01A923C();
    *(void *)(v6 + 24) = result;
    a2[3] = v5;
    a2[4] = (uint64_t)&protocol witness table for FeedAppConfigManager;
    *a2 = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for GapColorPalette()
{
  return &type metadata for GapColorPalette;
}

id GapColorPalette.tintColor.getter()
{
  return *v0;
}

uint64_t storeEnumTagSinglePayload for FormatMenuTitle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 1023;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x3FF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      unint64_t v3 = (-a2 >> 1) & 0x1FF | ((-a2 & 0x3FF) << 9);
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (v3 >> 7) & 7;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatMenuTitle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1023);
  }
  unsigned int v3 = (((unsigned __int16)(2 * ((*(void *)(a1 + 8) >> 57) & 0x78 | *(void *)(a1 + 8) & 7)) | (unsigned __int16)((unsigned __int16)*(_DWORD *)(a1 + 24) << 8)) & 0x3FE | (*(_DWORD *)(a1 + 24) >> 2) & 1) ^ 0x3FF;
  if (v3 >= 0x3FE) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t sub_1C005E488@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

uint64_t storeEnumTagSinglePayload for FormatMenuImage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 1023;
    if (a3 >= 0x3FF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      unint64_t v3 = (-a2 >> 1) & 0x1FF | ((-a2 & 0x3FF) << 9);
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0x3000000000000007;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = ((v3 >> 5) | (v3 << 52)) & 0x3000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatMenuImage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1023);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 52) >> 9) & 1 | (2
                                                               * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7 | (32 * (*(void *)(a1 + 16) & 7)) | (*(void *)(a1 + 16) >> 52) & 0x100))) ^ 0x3FF;
  if (v3 >= 0x3FE) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t sub_1C005E570@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

NewsFeed::FormatFontWidth_optional sub_1C005E57C(Swift::String *a1)
{
  return FormatFontWidth.init(rawValue:)(*a1);
}

unint64_t sub_1C005E588(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL OfflineManager.State.isOnline.getter()
{
  return *(void *)(v0 + 8) == 0;
}

uint64_t storeEnumTagSinglePayload for FormatMenuItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 1023;
    if (a3 >= 0x3FF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2)
    {
      unint64_t v3 = (-a2 >> 1) & 0x1FF | ((-a2 & 0x3FF) << 9);
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (v3 >> 7) & 7;
    }
  }
  return result;
}

uint64_t sub_1C005E668()
{
  return MEMORY[0x1F4188298](sub_1BFC8A05C, 0, 0);
}

uint64_t sub_1C005E684()
{
  return MEMORY[0x1F4188298](sub_1BFC3F0C8, 0, 0);
}

uint64_t sub_1C005E6A0()
{
  *(void *)(v1 + 1768) = v0;
  if (v0) {
    unint64_t v2 = sub_1C02382E0;
  }
  else {
    unint64_t v2 = sub_1BFC52810;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1C005E6D8()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v2 = sub_1C024B6EC;
  }
  else
  {
    swift_task_dealloc();
    unint64_t v2 = sub_1C005E6D4;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1C005E7F8()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v2 = sub_1C023910C;
  }
  else
  {
    swift_task_dealloc();
    unint64_t v2 = sub_1BFC5B160;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1C005E914@<X0>(BOOL *a1@<X8>)
{
  return sub_1BFD59FB4(a1);
}

unsigned char *storeEnumTagSinglePayload for FormatRoute(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedDateRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C0CB77A0);
}

uint64_t storeEnumTagSinglePayload for FeedGroupTopicDiversityRequirements(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedGroupTopicDiversityRequirements(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

ValueMetadata *type metadata accessor for FeedGroupClusterOrderingMode()
{
  return &type metadata for FeedGroupClusterOrderingMode;
}

unsigned char *storeEnumTagSinglePayload for FeedSubscriptionPaidAccess(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t FeedPersonalizationService.init(feedPersonalizingEngine:groupingPersonalizer:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

ValueMetadata *type metadata accessor for FeedRefreshUpdateBehavior()
{
  return &type metadata for FeedRefreshUpdateBehavior;
}

uint64_t FeedPluginManagerResult.pluginModels.getter()
{
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for FeedAutoRefreshStrategy()
{
  return &type metadata for FeedAutoRefreshStrategy;
}

unint64_t sub_1C005EBC8()
{
  unint64_t result = qword_1EB85B2A8;
  if (!qword_1EB85B2A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B2A8);
  }
  return result;
}

unint64_t sub_1C005EC1C()
{
  unint64_t result = qword_1EB85B2A0;
  if (!qword_1EB85B2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B2A0);
  }
  return result;
}

uint64_t sub_1C005EC70()
{
  return 0x72745F70756F7267;
}

uint64_t sub_1C005EC94()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005ECB0()
{
  return swift_getWitnessTable();
}

unint64_t sub_1C005ECCC()
{
  unint64_t result = qword_1EB865278;
  if (!qword_1EB865278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865278);
  }
  return result;
}

unint64_t sub_1C005ED20()
{
  unint64_t result = qword_1EB865270;
  if (!qword_1EB865270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865270);
  }
  return result;
}

uint64_t sub_1C005ED74()
{
  return 0x6F6A5F70756F7267;
}

uint64_t sub_1C005ED98()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005EDB4()
{
  return swift_getWitnessTable();
}

uint64_t destroy for FeedGroupEmitterError(uint64_t a1)
{
  return sub_1C005EDE0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1C005EDE0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 - 2 <= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

id static FeedJournalFormatter.durationFormatter.getter()
{
  return sub_1BFC5BA38(qword_1EB85E9C8, (void **)&qword_1EB85B1E0);
}

uint64_t sub_1C005EE20()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005EE3C()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for FeedGroupSortOption()
{
  return &type metadata for FeedGroupSortOption;
}

uint64_t sub_1C005EE68()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C005EE84()
{
  return swift_getWitnessTable();
}

uint64_t FeedCursorContainer.tracker.getter(unint64_t a1)
{
  sub_1C005EEC8(a1);
  return swift_retain();
}

uint64_t sub_1C005EEC8(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    a1 &= ~0x8000000000000000;
    uint64_t v1 = &qword_1EB93C328;
  }
  else
  {
    uint64_t v1 = (uint64_t *)(*(void *)a1 + 280);
  }
  return *(void *)(a1 + *v1);
}

unsigned char *_s8NewsFeed18FeedServiceOptionsV8DatabaseOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_1C005EFE0(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedServiceOptions.RootCursorFreshness()
{
  return &type metadata for FeedServiceOptions.RootCursorFreshness;
}

id sub_1C005F010(id result, uint64_t (*a2)(void), SEL *a3, SEL *a4, SEL *a5)
{
  switch((unsigned __int16)*v5 >> 14)
  {
    case 1:
      if (!*v5) {
        goto LABEL_9;
      }
      if (*v5 != 1) {
        goto LABEL_11;
      }
      uint64_t result = [result *a4];
      if (!result)
      {
        __break(1u);
        goto LABEL_6;
      }
      break;
    case 3:
      uint64_t result = [result *a3];
      if (!result)
      {
        __break(1u);
LABEL_9:
        uint64_t result = [result *a3];
        if (!result)
        {
          __break(1u);
LABEL_11:
          uint64_t result = [result *a5];
          if (!result) {
            __break(1u);
          }
        }
      }
      break;
    default:
LABEL_6:
      uint64_t result = (id)a2();
      break;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatCornerRadius.RoundedValue(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unint64_t sub_1C005F190()
{
  unint64_t result = qword_1EB85F8F8[0];
  if (!qword_1EB85F8F8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB85F8F8);
  }
  return result;
}

unint64_t sub_1C005F1E4()
{
  unint64_t result = qword_1EB85F8F0;
  if (!qword_1EB85F8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85F8F0);
  }
  return result;
}

unint64_t sub_1C005F238()
{
  unint64_t result = qword_1EB85B040;
  if (!qword_1EB85B040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B040);
  }
  return result;
}

unint64_t sub_1C005F28C()
{
  unint64_t result = qword_1EB85B038;
  if (!qword_1EB85B038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B038);
  }
  return result;
}

unint64_t sub_1C005F2E0()
{
  unint64_t result = qword_1EB85B010;
  if (!qword_1EB85B010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B010);
  }
  return result;
}

unint64_t sub_1C005F334()
{
  unint64_t result = qword_1EB85B008;
  if (!qword_1EB85B008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B008);
  }
  return result;
}

NewsFeed::FeedDaysOfWeek_optional sub_1C005F388(Swift::String *a1)
{
  return FeedDaysOfWeek.init(rawValue:)(*a1);
}

unint64_t sub_1C005F394()
{
  unint64_t result = qword_1EB864D20;
  if (!qword_1EB864D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864D20);
  }
  return result;
}

unint64_t sub_1C005F3E8()
{
  unint64_t result = qword_1EB864D18;
  if (!qword_1EB864D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864D18);
  }
  return result;
}

uint64_t AnyFeedManager.loadingGate.getter()
{
  sub_1C005F468();
  return swift_retain();
}

uint64_t sub_1C005F468()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_1C005F470@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

void sub_1C005F47C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v10;
  }
  size_t v11 = ((v10
        + *(unsigned __int8 *)(v7 + 80)
        + ((v10 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + v10;
  BOOL v12 = a3 >= v9;
  unsigned int v13 = a3 - v9;
  if (v13 == 0 || !v12)
  {
LABEL_14:
    if (v9 < a2) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  if (v11 <= 3)
  {
    unsigned int v14 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      int v6 = 4;
      if (v9 < a2) {
        goto LABEL_15;
      }
      goto LABEL_22;
    }
    if (v14 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v14 > 1;
    }
    goto LABEL_14;
  }
  int v6 = 1;
  if (v9 < a2)
  {
LABEL_15:
    unsigned int v15 = ~v9 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v11)
      {
        int v17 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v11] = v16;
        break;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        break;
      case 3:
        goto LABEL_40;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        break;
      default:
        return;
    }
    return;
  }
LABEL_22:
  switch(v6)
  {
    case 1:
      a1[v11] = 0;
      if (a2) {
        goto LABEL_27;
      }
      break;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (a2) {
        goto LABEL_27;
      }
      break;
    case 3:
LABEL_40:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v8 >= 2)
        {
          long long v18 = *(void (**)(void))(v7 + 56);
          v18();
        }
      }
      break;
  }
}

uint64_t sub_1C005F6D0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v9 = ((v7
         + *(unsigned __int8 *)(v4 + 80)
         + ((v7 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
       + v7;
    char v10 = 8 * v9;
    if (v9 > 3) {
      goto LABEL_8;
    }
    unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (v11) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v12 <= 0xFF)
      {
        if (v12 < 2) {
          goto LABEL_23;
        }
LABEL_8:
        int v11 = *((unsigned __int8 *)a1 + v9);
        if (!*((unsigned char *)a1 + v9)) {
          goto LABEL_23;
        }
LABEL_15:
        int v13 = (v11 - 1) << v10;
        if (v9 > 3) {
          int v13 = 0;
        }
        if (v9)
        {
          if (v9 > 3) {
            LODWORD(v9) = 4;
          }
          switch((int)v9)
          {
            case 2:
              LODWORD(v9) = *a1;
              break;
            case 3:
              LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v9) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v9) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v6 + (v9 | v13) + 1;
      }
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_15;
      }
    }
  }
LABEL_23:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v15 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v15 >= 2) {
    return v15 - 1;
  }
  else {
    return 0;
  }
}

void sub_1C005F870(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xED00006D75696465;
  unint64_t v4 = 0xEB00000000676E6FLL;
  uint64_t v5 = 0x4C6F6741656D6974;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6D6F74737563;
    unint64_t v4 = 0xE600000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x4D6F6741656D6974;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t static Commands.Sharing.shareComplete.getter()
{
  return sub_1BFC387A8(qword_1EB87CA70);
}

uint64_t static Commands.Saving.save.getter()
{
  return sub_1BFC387A8(&qword_1EB87B150);
}

uint64_t sub_1C005F928()
{
  sub_1C005FA58(0, (unint64_t *)&unk_1EB87C810, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  unint64_t v4 = (char *)&v6 - v3;
  sub_1C005FA58(0, (unint64_t *)&unk_1EB87C878, MEMORY[0x1E4FAD790]);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB87C900 = result;
  return result;
}

void sub_1C005FA58(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for OpenChannelCommandContext);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

__n128 __swift_memcpy177_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t objectdestroy_246Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void **)(v0 + 56);
  if ((unint64_t)v1 >= 4) {

  }
  return swift_deallocObject();
}

__n128 __swift_memcpy161_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t objectdestroy_10Tm_1()
{
  uint64_t v1 = v0;
  long long v2 = (int *)type metadata accessor for FormatContent.Resolved();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(*((void *)v2 - 1) + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v6 = (int *)type metadata accessor for FormatServiceOptions();
  uint64_t v7 = *(unsigned __int8 *)(*((void *)v6 - 1) + 80);
  uint64_t v49 = v5 + v7 + 8;
  uint64_t v8 = v1 + v4;
  swift_bridgeObjectRelease();
  uint64_t v9 = v1 + v4 + v2[5];
  uint64_t v10 = sub_1C151631C();
  uint64_t v46 = *(void (**)(uint64_t))(*(void *)(v10 - 8) + 8);
  uint64_t v47 = v10;
  v46(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  uint64_t v11 = v1 + v4 + v2[14];
  unsigned int v12 = (int *)type metadata accessor for FormatWebEmbed.Resolved();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v12 - 1) + 48))(v11, 1, v12))
  {
    uint64_t v48 = v7;
    uint64_t v45 = v1;
    swift_bridgeObjectRelease();
    uint64_t v13 = v11 + v12[5];
    swift_bridgeObjectRelease();
    uint64_t v14 = type metadata accessor for FormatWebEmbed();
    uint64_t v15 = v13 + *(int *)(v14 + 20);
    uint64_t v16 = sub_1C1515FDC();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v44(v15, v16);
    uint64_t v18 = v13 + *(int *)(v14 + 24);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v16)) {
      v44(v18, v16);
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v19 = v11 + v12[8];
    uint64_t v20 = type metadata accessor for WebEmbedDataVisualization();
    uint64_t v1 = v45;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20))
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v21 = type metadata accessor for GenericDataVisualization();
        v44(v19 + *(int *)(v21 + 20), v16);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
    uint64_t v22 = v11 + v12[9];
    sub_1BFEC84E0();
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)(v23 - 8);
    uint64_t v7 = v48;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v22, 1, v23)) {
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v22, v24);
    }
  }
  uint64_t v26 = v49 & ~v7;

  swift_bridgeObjectRelease();
  uint64_t v27 = v8 + v2[18];
  uint64_t v28 = sub_1C151D6DC();
  uint64_t v29 = *(void *)(v28 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28)) {
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
  }
  swift_release();
  uint64_t v30 = v1 + v26;
  if (*(void *)(v1 + v26 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(v1 + v26);
  }
  uint64_t v31 = (id *)(v30 + v6[10]);
  uint64_t v32 = type metadata accessor for FormatTransformKnobs();
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32))
  {

    uint64_t v33 = (int *)type metadata accessor for FeedContext();
    uint64_t v34 = (char *)v31 + v33[5];
    uint64_t v35 = type metadata accessor for BundleSession();
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v34, 1, v35))
    {
      ((void (*)(char *, uint64_t))v46)(&v34[*(int *)(v35 + 20)], v47);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(char **)((char *)v31 + v33[12] + 8) - 1 >= (char *)3) {
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31 + *(int *)(v32 + 20));
  }
  uint64_t v36 = type metadata accessor for FormatTransformData();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v37 = (char *)v31 + *(int *)(v36 + 40);
  uint64_t v38 = type metadata accessor for FeedPersonalizationClusteringRules();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v37, 1, v38))
  {
    uint64_t v39 = &v37[*(int *)(v38 + 24)];
    uint64_t v40 = type metadata accessor for FeedGroupBundleArticleQuotas();
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v39, 1, v40))
    {
      swift_bridgeObjectRelease();
      uint64_t v41 = &v39[*(int *)(v40 + 24)];
      uint64_t v42 = sub_1C1516D9C();
      (*(void (**)(char *, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
      swift_bridgeObjectRelease();
    }
    if (*(void *)&v37[*(int *)(v38 + 40) + 32] != 1) {
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_10Tm_2()
{
  sub_1BFEE7D80(0, (unint64_t *)&qword_1EB882B40, MEMORY[0x1E4FAA8C8], MEMORY[0x1E4FBB718]);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = sub_1C1517F3C();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  }
  return swift_deallocObject();
}

uint64_t objectdestroy_8Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_10Tm_3()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_10Tm_4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_10Tm_5()
{
  uint64_t v1 = (int *)type metadata accessor for FormatContent.Resolved();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = sub_1C151631C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  uint64_t v6 = v3 + v1[14];
  uint64_t v7 = (int *)type metadata accessor for FormatWebEmbed.Resolved();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v7 - 1) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = v6 + v7[5];
    swift_bridgeObjectRelease();
    uint64_t v9 = type metadata accessor for FormatWebEmbed();
    uint64_t v10 = v8 + *(int *)(v9 + 20);
    uint64_t v11 = sub_1C1515FDC();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v25(v10, v11);
    uint64_t v13 = v8 + *(int *)(v9 + 24);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11)) {
      v25(v13, v11);
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v14 = v6 + v7[8];
    uint64_t v15 = type metadata accessor for WebEmbedDataVisualization();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v16 = type metadata accessor for GenericDataVisualization();
        v25(v14 + *(int *)(v16 + 20), v11);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
    uint64_t v17 = v6 + v7[9];
    sub_1C1354BB0(0, (unint64_t *)&qword_1EB894670, (uint64_t (*)(uint64_t))sub_1BFF91B1C, MEMORY[0x1E4FAB160]);
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)(v18 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v17, 1, v18)) {
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v17, v19);
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v21 = v3 + v1[18];
  uint64_t v22 = sub_1C151D6DC();
  uint64_t v23 = *(void *)(v22 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22)) {
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_10Tm_6()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t objectdestroy_22Tm()
{
  uint64_t v1 = *(void *)(type metadata accessor for FormatOptionsNodeStatementContext() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_release();
  if (EnumCaseMultiPayload == 1)
  {
    sub_1BFF81F7C();
    uint64_t v5 = v2 + *(int *)(v4 + 48);
    sub_1BFF81FF0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

__n128 __swift_memcpy53_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 45) = *(void *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t objectdestroy_16Tm_0()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_16Tm_1(void (*a1)(void))
{
  a1(*(void *)(v1 + 80));
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_16Tm_2()
{
  uint64_t v1 = *(void *)(type metadata accessor for PuzzleResourceSource() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  uint64_t v4 = v0 + v2;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease();
      sub_1C023675C();
      uint64_t v7 = v6;
      uint64_t v8 = v4 + *(int *)(v6 + 48);
      uint64_t v9 = sub_1C1515FDC();
      uint64_t v10 = *(void *)(v9 - 8);
      uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v11(v8, v9);
      uint64_t v12 = v4 + *(int *)(v7 + 64);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v9)) {
        v11(v12, v9);
      }
      break;
    case 1:
      swift_unknownObjectRelease();
      break;
    case 0:
      swift_bridgeObjectRelease();
      break;
  }
  if (*(void *)(v0 + v3 + 8) != 1) {
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t objectdestroy_16Tm_3()
{
  uint64_t v1 = type metadata accessor for DebugFormatUploadPrivateEntry(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 24) & ~v2);
  swift_release();
  uint64_t v4 = v3 + *(int *)(v1 + 20);
  type metadata accessor for FormatFile();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      uint64_t v5 = type metadata accessor for FormatContent(0);
      uint64_t v6 = v4 + *(int *)(v5 + 20);
      uint64_t v7 = sub_1C151631C();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = v4 + *(int *)(v5 + 40);
      uint64_t v9 = sub_1C151D6DC();
      uint64_t v10 = *(void *)(v9 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      }
      goto LABEL_31;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(unsigned __int8 *)(v4 + 106) != 255)
      {
        uint64_t v11 = *(unsigned __int16 *)(v4 + 104) | (*(unsigned __int8 *)(v4 + 106) << 16);
        sub_1C0EBB9C8(*(void *)(v4 + 96), v11, SBYTE2(v11), (uint64_t (*)(uint64_t, uint64_t, void))sub_1BFFDF4D8, (uint64_t (*)(void))sub_1BFFDF4E4);
      }
      break;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v4 + 72) >= 3uLL) {
        swift_bridgeObjectRelease();
      }
      goto LABEL_31;
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v4 + 56) >= 0xFuLL) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 4u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 5u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v4 + 168) >= 3uLL) {
        swift_bridgeObjectRelease();
      }
      uint64_t v29 = (int *)type metadata accessor for FormatPackage();
      uint64_t v12 = v4 + v29[23];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = type metadata accessor for FormatCompilerOptions(0);
      uint64_t v14 = v12 + *(int *)(v13 + 24);
      if (*(void *)(v14 + 8) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v15 = v14 + *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
      uint64_t v16 = sub_1C1518CDC();
      uint64_t v30 = *(void *)(v16 - 8);
      uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
      if (!v31(v15, 1, v16)) {
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v15, v16);
      }
      uint64_t v17 = v12 + *(int *)(v13 + 28);
      if (!v31(v17, 1, v16)) {
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v17, v16);
      }
      swift_bridgeObjectRelease();
      uint64_t v18 = v4 + v29[24];
      uint64_t v19 = sub_1C151928C();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
      uint64_t v20 = v4 + v29[25];
      if (!v31(v20, 1, v16)) {
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v20, v16);
      }
      break;
    case 6u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 7u:
      swift_release();
      break;
    case 8u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 9u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 0xAu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BFEC28BC(*(void *)(v4 + 32), *(void *)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 56), *(void *)(v4 + 64), *(void *)(v4 + 72), *(unsigned char *)(v4 + 80));
      break;
    case 0xBu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v21 = v4 + *(int *)(type metadata accessor for FormatBindingContent() + 28);
      swift_bridgeObjectRelease();
      uint64_t v22 = type metadata accessor for FormatContent(0);
      uint64_t v23 = v21 + *(int *)(v22 + 20);
      uint64_t v24 = sub_1C151631C();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v25 = v21 + *(int *)(v22 + 40);
      uint64_t v26 = sub_1C151D6DC();
      uint64_t v27 = *(void *)(v26 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26)) {
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
      }
LABEL_31:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  sub_1BFDCA350(*(void *)(v3 + *(int *)(v1 + 24)), *(void *)(v3 + *(int *)(v1 + 24) + 8), *(unsigned char *)(v3 + *(int *)(v1 + 24) + 16));
  return swift_deallocObject();
}

uint64_t objectdestroy_16Tm_4()
{
  swift_unownedRelease();
  swift_release();
  return swift_deallocObject();
}

__n128 __swift_memcpy36_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

char *keypath_get_selector_tagID()
{
  return sel_tagID;
}

__n128 __swift_memcpy248_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[14];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

void sub_1C0061E74(uint64_t a1, void *a2)
{
  long long v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void sub_1C0061EE0(void *a1)
{
  sub_1C0061EE8(a1, v1);
}

void sub_1C0061EE8(void *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C18C9C60](v3);
  if (v4)
  {
    long long v5 = (void *)v4;
    swift_retain();
    sub_1C1518EBC();
    swift_release();
    if (a1)
    {
      if (v10)
      {
        objc_msgSend(a1, sel_distanceFromLocation_, v10);
        if (v6 <= 0.0)
        {

LABEL_8:
          long long v5 = v10;
          goto LABEL_9;
        }
      }
    }
    else if (!v10)
    {
LABEL_9:

      return;
    }
    uint64_t v7 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    *(void *)(v8 + 24) = v7;
    id v9 = a1;
    swift_retain();
    sub_1C151950C();

    swift_release();
    swift_release();
    goto LABEL_8;
  }
}

uint64_t objectdestroy_6Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_6Tm_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 88) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_6Tm_1()
{
  uint64_t v1 = type metadata accessor for HeadlineViewLayout.Context(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v15 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_release();
  unint64_t v3 = v0 + v2 + *(int *)(v1 + 20);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v4 = (int *)type metadata accessor for FeedHeadline(0);
  uint64_t v5 = v4[10];
  unint64_t v6 = v3 + v5 + *(int *)(type metadata accessor for FeedHeadline.State(0) + 24);
  uint64_t v7 = type metadata accessor for SharedItem();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    uint64_t v8 = sub_1C151631C();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);

    unint64_t v9 = v6 + *(int *)(v7 + 28);
    uint64_t v10 = sub_1C1515FDC();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  unint64_t v11 = v3 + v4[11];
  uint64_t v12 = sub_1C151D2DC();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  if (*(void *)(v3 + v4[12] + 8) >= 0x11uLL) {
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v3 + v4[13]) >= 3uLL) {
    swift_unknownObjectRelease();
  }

  __swift_destroy_boxed_opaque_existential_1(v0 + v2 + *(int *)(v1 + 24));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + ((v15 + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return swift_deallocObject();
}

uint64_t objectdestroy_6Tm_2()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void *__swift_memcpy528_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x210uLL);
}

unint64_t sub_1C0062478()
{
  unint64_t result = qword_1EB895EC0;
  if (!qword_1EB895EC0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB895EC0);
  }
  return result;
}

uint64_t sub_1C00624D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1BFC57B20(a1, a2, a3, a4, (unint64_t *)&unk_1EB87A670, type metadata accessor for FeedHeadline, type metadata accessor for FeedHeadline);
}

void sub_1C0062504()
{
  if (!qword_1EB860E98)
  {
    sub_1BFE38B54(255, (unint64_t *)&qword_1EB860920, (uint64_t (*)(void))sub_1C00718F4, (uint64_t)&type metadata for FormatAnimationNodeStyle.Selector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatNodeStyleSelectorOrder);
    unint64_t v0 = sub_1C152089C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB860E98);
    }
  }
}

void sub_1C0062594()
{
  if (!qword_1EB86BB80)
  {
    sub_1BFE38B54(255, (unint64_t *)&qword_1EB868668, (uint64_t (*)(void))sub_1C0070B54, (uint64_t)&type metadata for FormatGroupNodeMaskStyle.Selector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatNodeStyleSelectorOrder);
    unint64_t v0 = sub_1C152089C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB86BB80);
    }
  }
}

void sub_1C0062624()
{
  if (!qword_1EB890478)
  {
    sub_1BFE38B54(255, (unint64_t *)&qword_1EB88CFC0, (uint64_t (*)(void))sub_1C006B550, (uint64_t)&type metadata for FormatSupplementaryNodeStyle.Selector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatNodeStyleSelectorOrder);
    unint64_t v0 = sub_1C152089C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB890478);
    }
  }
}

void sub_1C00626B4()
{
  if (!qword_1EB8903F0)
  {
    sub_1BFC845BC(255, (unint64_t *)&qword_1EB887280);
    unint64_t v0 = sub_1C152089C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8903F0);
    }
  }
}

void sub_1C006271C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C0062780(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C00627E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C0062848()
{
  if (!qword_1EB85C6E0)
  {
    sub_1BFC845BC(255, &qword_1EB85AC68);
    unint64_t v0 = sub_1C152089C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB85C6E0);
    }
  }
}

void sub_1C00628B0()
{
  if (!qword_1EB896B80)
  {
    sub_1C0091F2C();
    unint64_t v0 = sub_1C152089C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB896B80);
    }
  }
}

void sub_1C0062908(uint64_t a1)
{
}

void sub_1C006293C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_1C0092478(255, a3);
    unint64_t v4 = sub_1C152089C();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C0062994(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_1C00629F8()
{
  unint64_t result = qword_1EB86B8B0;
  if (!qword_1EB86B8B0)
  {
    sub_1BFEFF3E8(255, (unint64_t *)&unk_1EB860DE0, (uint64_t (*)(void))sub_1BFC6EFBC, (uint64_t)&type metadata for FormatCountLimit.CodingKeys, MEMORY[0x1E4FBBDE0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86B8B0);
  }
  return result;
}

void sub_1C0062A88(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1BFCE5B6C();
    unint64_t v7 = a3(a1, &type metadata for FormatMenu.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_1C0062AEC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_1C0062B54()
{
  if (!qword_1EB87A4B8)
  {
    sub_1BFC39268(255, (unint64_t *)&unk_1EB87A2E0);
    unint64_t v0 = sub_1C152051C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB87A4B8);
    }
  }
}

void sub_1C0062BCC()
{
  if (!qword_1EB87A4A8)
  {
    sub_1BFEC0C84(255, &qword_1EB879E20, (uint64_t (*)(uint64_t))type metadata accessor for FormatTimerObserver, MEMORY[0x1E4FBB320]);
    unint64_t v0 = sub_1C152051C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB87A4A8);
    }
  }
}

void sub_1C0062C64()
{
  if (!qword_1EB860D68)
  {
    type metadata accessor for FormatAnimationData();
    unint64_t v0 = sub_1C152051C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB860D68);
    }
  }
}

void sub_1C0062CCC()
{
  if (!qword_1EB863440)
  {
    unint64_t v0 = sub_1C152051C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB863440);
    }
  }
}

uint64_t sub_1C0062D34(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1BFEF2C04(a1, a2, a3, a4, (void (*)(void))sub_1C0062C64);
}

uint64_t sub_1C0062D4C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_1BFC372E8(a3, a4[7] + 16 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_1C0062DB4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    sub_1C0062EB0(0, v1, 0);
    uint64_t v2 = v14;
    unint64_t v4 = (uint64_t *)(a1 + 40);
    uint64_t v5 = MEMORY[0x1E4FAA778];
    do
    {
      uint64_t v7 = *(v4 - 1);
      uint64_t v6 = *v4;
      uint64_t v14 = v2;
      unint64_t v9 = *(void *)(v2 + 16);
      unint64_t v8 = *(void *)(v2 + 24);
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1)
      {
        sub_1C0062EB0(v8 > 1, v9 + 1, 1);
        uint64_t v2 = v14;
      }
      v4 += 2;
      uint64_t v12 = MEMORY[0x1E4FBB1A0];
      uint64_t v13 = v5;
      *(void *)&long long v11 = v7;
      *((void *)&v11 + 1) = v6;
      *(void *)(v2 + 16) = v9 + 1;
      sub_1BFC773DC(&v11, v2 + 40 * v9 + 32);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1C0062EB0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1BFF019A4(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1C0062848, &qword_1EB85AC68);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1C0062EF4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C05F8AC4(a1, a2, a3, (void *)*v3, sub_1C0062908, MEMORY[0x1E4FAA920]);
  *unint64_t v3 = result;
  return result;
}

void sub_1C0062F3C()
{
  if (!qword_1EB8902D8)
  {
    sub_1C00648A8(255, &qword_1EB8900E8, (void (*)(uint64_t))type metadata accessor for LiveActivityWebEmbedDatastoreManagerObserverProxy);
    type metadata accessor for os_unfair_lock_s(255);
    unint64_t v0 = sub_1C15201FC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8902D8);
    }
  }
}

void sub_1C0062FC0()
{
  if (!qword_1EB8902D0)
  {
    type metadata accessor for os_unfair_lock_s(255);
    unint64_t v0 = sub_1C15201FC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8902D0);
    }
  }
}

void *sub_1C0063020(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1C0EE1A64(a1, a2, a3, a4, &qword_1EB8904D0, (uint64_t)&type metadata for FormatSupplementaryNodeStyle.Selector);
}

void *sub_1C0063034(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C0062504();
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C0063278(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C0063140(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C0062624();
      unint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1C00634FC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1C0063264(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1BFFBAF14(a1, a2, a3, a4, (unint64_t *)&unk_1EB86BAD0, (uint64_t)&type metadata for FormatTagBinding.Asset);
}

uint64_t sub_1C0063278(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      sub_1BFE38B54(0, (unint64_t *)&qword_1EB860920, (uint64_t (*)(void))sub_1C00718F4, (uint64_t)&type metadata for FormatAnimationNodeStyle.Selector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatNodeStyleSelectorOrder);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C152052C();
  __break(1u);
  return result;
}

uint64_t sub_1C00633B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 192 * a1 + 32;
    unint64_t v6 = a3 + 192 * v4;
    if (v5 >= v6 || v5 + 192 * v4 <= a3)
    {
      sub_1BFE38B54(0, (unint64_t *)&qword_1EB868668, (uint64_t (*)(void))sub_1C0070B54, (uint64_t)&type metadata for FormatGroupNodeMaskStyle.Selector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatNodeStyleSelectorOrder);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C152052C();
  __break(1u);
  return result;
}

uint64_t sub_1C00634FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      sub_1BFE38B54(0, (unint64_t *)&qword_1EB88CFC0, (uint64_t (*)(void))sub_1C006B550, (uint64_t)&type metadata for FormatSupplementaryNodeStyle.Selector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatNodeStyleSelectorOrder);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C152052C();
  __break(1u);
  return result;
}

uint64_t sub_1C0063640(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C152052C();
  __break(1u);
  return result;
}

uint64_t sub_1C0063734(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v39 = (unint64_t *)result;
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v40 = a3 + 56;
  while (2)
  {
    uint64_t v38 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_45;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_45;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_15;
            }
            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_45;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v15 = v14 - 1;
                int64_t v36 = v9 + 6;
                while (v14 != v36)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    int64_t v13 = v36 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return sub_1BFEFB580(v39, a2, v38, a3);
              }
              goto LABEL_15;
            }
          }
          int64_t v13 = v18;
        }
LABEL_15:
        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        int64_t v9 = v13;
LABEL_16:
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        sub_1C1520DBC();
        swift_bridgeObjectRetain();
        sub_1C151E77C();
        uint64_t v22 = sub_1C1520E0C();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v40 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_3;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        uint64_t v28 = (void *)(v27 + 16 * v24);
        BOOL v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (sub_1C1520A9C() & 1) != 0) {
          break;
        }
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          uint64_t v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (sub_1C1520A9C() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_23;
          }
        }
LABEL_3:
        uint64_t result = swift_bridgeObjectRelease();
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_23:
      unint64_t v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v38 != 1) {
      continue;
    }
    return MEMORY[0x1E4FBC870];
  }
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void sub_1C0063A54()
{
  if (!qword_1EB880DC0)
  {
    sub_1C0064840(255, (unint64_t *)&qword_1EB880DB0, (unint64_t *)&unk_1EB880DA0, 0x1E4F7E328, MEMORY[0x1E4FBB718]);
    unint64_t v0 = sub_1C151FD8C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB880DC0);
    }
  }
}

void sub_1C0063AD8()
{
  if (!qword_1EB880DB0)
  {
    sub_1BFC39268(255, (unint64_t *)&unk_1EB880DA0);
    unint64_t v0 = sub_1C151FD8C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB880DB0);
    }
  }
}

unint64_t sub_1C0063B40()
{
  unint64_t result = qword_1EB87A2C0;
  if (!qword_1EB87A2C0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB87A2C0);
  }
  return result;
}

unint64_t sub_1C0063B80()
{
  unint64_t result = qword_1EB87A280;
  if (!qword_1EB87A280)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB87A280);
  }
  return result;
}

void sub_1C0063BD8()
{
  if (!qword_1EB880D88)
  {
    type metadata accessor for AttributeName(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB880D88);
    }
  }
}

uint64_t sub_1C0063C44()
{
  return sub_1BFC489D4((unint64_t *)&unk_1EB897A10, type metadata accessor for AttributeName);
}

unint64_t sub_1C0063C8C()
{
  unint64_t result = qword_1EB87A270;
  if (!qword_1EB87A270)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB87A270);
  }
  return result;
}

uint64_t FCNewsAppConfigurationManager.fetchConfiguration(cachedOnly:)(char a1, uint64_t a2)
{
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = v2;
  *(unsigned char *)(v3 + 64) = a1;
  return MEMORY[0x1F4188298](sub_1BFC4B794, 0, 0);
}

unint64_t sub_1C0063D08()
{
  unint64_t result = qword_1EB880D68;
  if (!qword_1EB880D68)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB880D68);
  }
  return result;
}

uint64_t sub_1C0063D48(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1C017F734();
    uint64_t v5 = swift_allocError();
    *unint64_t v6 = a3;
    id v7 = a3;
    return MEMORY[0x1F4188208](v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      swift_unknownObjectRetain();
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return MEMORY[0x1F4188200](a1);
  }
}

void sub_1C0063E08()
{
  if (!qword_1EB87A220)
  {
    type metadata accessor for Key(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB87A220);
    }
  }
}

uint64_t sub_1C0063E74()
{
  return sub_1BFC489D4((unint64_t *)&unk_1EB87A200, type metadata accessor for Key);
}

void type metadata accessor for RenderingMode(uint64_t a1)
{
}

uint64_t sub_1C0063EE4()
{
  uint64_t result = sub_1C151E5EC();
  qword_1EB93C730 = result;
  return result;
}

unint64_t sub_1C0063F1C()
{
  unint64_t result = qword_1EB87A1C0;
  if (!qword_1EB87A1C0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB87A1C0);
  }
  return result;
}

unint64_t sub_1C0063F5C()
{
  unint64_t result = qword_1EB890198;
  if (!qword_1EB890198)
  {
    sub_1BFC39268(255, (unint64_t *)&unk_1EB8901A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB890198);
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for NSUnderlineStyle(uint64_t a1)
{
}

unint64_t sub_1C0064014()
{
  unint64_t result = qword_1EB87A130;
  if (!qword_1EB87A130)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB87A130);
  }
  return result;
}

unint64_t sub_1C0064054()
{
  unint64_t result = qword_1EB87A120;
  if (!qword_1EB87A120)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB87A120);
  }
  return result;
}

void sub_1C0064094()
{
  if (!qword_1EB890148)
  {
    sub_1BFC39268(255, &qword_1EB890140);
    unint64_t v0 = sub_1C151FD8C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB890148);
    }
  }
}

uint64_t sub_1C00640FC(uint64_t (*a1)(uint64_t), uint64_t (*a2)(void))
{
  if (!(*v2 >> 62))
  {
    if (*(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1C15204BC();
  swift_bridgeObjectRelease();
  if (!v7) {
    return 0;
  }
LABEL_3:
  uint64_t result = sub_1BFFCB238(a1);
  if (!result)
  {
    if (*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_1C15204BC();
      swift_bridgeObjectRelease();
      uint64_t result = v8 - 1;
      if (!__OFSUB__(v8, 1)) {
        return a2();
      }
    }
    else
    {
      uint64_t v6 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = v6 - 1;
      if (!__OFSUB__(v6, 1)) {
        return a2();
      }
    }
    __break(1u);
  }
  return result;
}

void sub_1C00641E0()
{
  if (!qword_1EB871060)
  {
    sub_1BFCB6824(255, (unint64_t *)&qword_1EB873868);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB871060);
    }
  }
}

void sub_1C006425C()
{
  if (!qword_1EB87A050)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB87A050);
    }
  }
}

uint64_t sub_1C00642C4(uint64_t a1)
{
  return sub_1BFDFC1AC(a1, (void (*)(void))sub_1C007E638, (uint64_t)&type metadata for FormatOptionType, (void (*)(char *, void))sub_1BFDFC8E4);
}

void sub_1C00642F8()
{
  if (!qword_1EB890118)
  {
    type metadata accessor for WebEmbedDatastoreCacheKey();
    sub_1BFFF125C(&qword_1EB88BFB8, (void (*)(uint64_t))type metadata accessor for WebEmbedDatastoreCacheKey);
    unint64_t v0 = sub_1C151F04C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB890118);
    }
  }
}

uint64_t sub_1C006438C()
{
  uint64_t result = sub_1C00642C4((uint64_t)&unk_1F1B65A88);
  qword_1EB879FE0 = result;
  return result;
}

uint64_t sub_1C00643B4(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C006442C(255, a2, a3, MEMORY[0x1E4FBB718]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1C006442C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1C0064478(uint64_t a1)
{
}

void sub_1C00644AC()
{
  if (!qword_1EB86B3A8)
  {
    sub_1BFC9DBE8(255, (unint64_t *)&qword_1EB85C560);
    sub_1BFC845BC(255, (unint64_t *)&qword_1EB87A930);
    unint64_t v0 = sub_1C151EDEC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB86B3A8);
    }
  }
}

unint64_t sub_1C006453C()
{
  unint64_t result = qword_1EB879FC0;
  if (!qword_1EB879FC0)
  {
    sub_1C00645C4(255, (unint64_t *)&unk_1EB879FB0, MEMORY[0x1E4FBCC10], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB879FC0);
  }
  return result;
}

void sub_1C00645C4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C0064628(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C006468C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C151ED5C();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C00646E0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C0064744(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C00647A8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C006480C(uint64_t a1)
{
}

void sub_1C0064840(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = sub_1BFC39268(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_1C00648A8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C151ED5C();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_1C00648FC()
{
  unint64_t result = qword_1EB86B200;
  if (!qword_1EB86B200)
  {
    sub_1BFE9DEBC(255, &qword_1EB86B1F8, (uint64_t)&type metadata for FormatProgressViewNodeStyle.Selector, MEMORY[0x1E4FBB320]);
    sub_1C006C51C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86B200);
  }
  return result;
}

unint64_t sub_1C0064990()
{
  unint64_t result = qword_1EB86B1B0;
  if (!qword_1EB86B1B0)
  {
    sub_1BFE9DEBC(255, &qword_1EB86B1A8, (uint64_t)&type metadata for FormatVideoPlayerNodeStyle.Selector, MEMORY[0x1E4FBB320]);
    sub_1C006D728();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86B1B0);
  }
  return result;
}

unint64_t sub_1C0064A24()
{
  unint64_t result = qword_1EB86B148;
  if (!qword_1EB86B148)
  {
    sub_1BFE9DEBC(255, &qword_1EB86B140, (uint64_t)&type metadata for FormatWebEmbedNodeStyle.Selector, MEMORY[0x1E4FBB320]);
    sub_1C00722F4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86B148);
  }
  return result;
}

void sub_1C0064AB8()
{
  if (!qword_1EB871010)
  {
    sub_1C0073850();
    unint64_t v0 = sub_1C151ED5C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB871010);
    }
  }
}

void sub_1C0064B10(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1C0064B5C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for LayeredMediaLayer);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C0064BAC()
{
  if (!qword_1EB879CF0)
  {
    sub_1BFFFCF34();
    unint64_t v0 = sub_1C151ED5C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB879CF0);
    }
  }
}

unint64_t sub_1C0064C04()
{
  unint64_t result = qword_1EB879CA8;
  if (!qword_1EB879CA8)
  {
    sub_1BFE9DEBC(255, &qword_1EB879CA0, (uint64_t)&type metadata for FormatStateViewNodeState, MEMORY[0x1E4FBB320]);
    sub_1C008DDC0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB879CA8);
  }
  return result;
}

uint64_t sub_1C0064C98(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C0062780(255, a2, a3, MEMORY[0x1E4FBB320]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C0064CFC(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C00627E4(255, a2, a3, MEMORY[0x1E4FBB320]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1C0064D60()
{
  unint64_t result = qword_1EB85DEA0;
  if (!qword_1EB85DEA0)
  {
    sub_1C0064DB8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85DEA0);
  }
  return result;
}

void sub_1C0064DB8()
{
  if (!qword_1EB85DE98)
  {
    sub_1BFD43E2C(255, (unint64_t *)&qword_1EB8714D0, MEMORY[0x1E4FAB088]);
    unint64_t v0 = sub_1C151ED5C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB85DE98);
    }
  }
}

unint64_t sub_1C0064E2C()
{
  unint64_t result = qword_1EB879C60;
  if (!qword_1EB879C60)
  {
    sub_1BFC8B664(255, (unint64_t *)&unk_1EB879C50, MEMORY[0x1E4FAACC8], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB879C60);
  }
  return result;
}

void sub_1C0064EB4(uint64_t a1)
{
}

void sub_1C0064EE8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1C0064F4C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C12A4470(a1, a2, a3);
}

uint64_t sub_1C0064F6C(uint64_t a1)
{
  return sub_1BFEFCA3C(a1, (uint64_t (*)(void))sub_1C0EE2C3C, (unint64_t *)&qword_1EB887280);
}

unint64_t sub_1C0064F94(uint64_t a1, uint64_t a2)
{
  sub_1C0976FA0(0, (unint64_t *)&qword_1EB87C618, (uint64_t (*)(uint64_t))type metadata accessor for SharedItem, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v33 - v6;
  uint64_t v39 = type metadata accessor for SharedItem();
  MEMORY[0x1F4188790](v39);
  uint64_t v38 = (uint64_t)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v34 = (uint64_t)v33 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return MEMORY[0x1E4FBC860];
  }
  v33[0] = a1;
  v33[1] = v2;
  uint64_t v13 = a1 + 32;
  uint64_t v37 = (uint64_t *)(a2 + OBJC_IVAR____TtC8NewsFeed17SharedItemManager_itemsByArticleID);
  uint64_t v43 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  uint64_t v35 = v10;
  int64_t v36 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  unint64_t v14 = MEMORY[0x1E4FBC860];
  uint64_t v15 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v16 = v39;
  do
  {
    sub_1BFF6A008(v13, (uint64_t)v42);
    if (!swift_dynamicCast())
    {
      (*v43)(v7, 1, 1, v16);
LABEL_4:
      sub_1BFDA7634((uint64_t)v7, (unint64_t *)&qword_1EB87C618, (uint64_t (*)(uint64_t))type metadata accessor for SharedItem);
      goto LABEL_5;
    }
    unint64_t v17 = v14;
    uint64_t v18 = v15;
    uint64_t v19 = v40;
    uint64_t v20 = v41;
    uint64_t v21 = v37;
    swift_beginAccess();
    uint64_t v22 = *v21;
    if (*(void *)(v22 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v23 = sub_1BFEF2D8C(v19, v20);
      if (v24)
      {
        uint64_t v25 = *(void *)(v22 + 56);
        uint64_t v26 = v35;
        sub_1C0977524(v25 + *(void *)(v35 + 72) * v23, (uint64_t)v7);
        uint64_t v27 = *(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56);
        uint64_t v16 = v39;
        v27(v7, 0, 1, v39);
      }
      else
      {
        uint64_t v16 = v39;
        (*v43)(v7, 1, 1, v39);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = v39;
      (*v43)(v7, 1, 1, v39);
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    uint64_t v15 = v18;
    unint64_t v14 = v17;
    if ((*v36)(v7, 1, v16) == 1) {
      goto LABEL_4;
    }
    uint64_t v28 = v34;
    sub_1C097768C((uint64_t)v7, v34);
    sub_1C097768C(v28, v38);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v14 = sub_1C0EE6398(0, *(void *)(v17 + 16) + 1, 1, v17);
    }
    unint64_t v30 = *(void *)(v14 + 16);
    unint64_t v29 = *(void *)(v14 + 24);
    uint64_t v31 = v35;
    if (v30 >= v29 >> 1)
    {
      unint64_t v14 = sub_1C0EE6398(v29 > 1, v30 + 1, 1, v14);
      uint64_t v31 = v35;
    }
    *(void *)(v14 + 16) = v30 + 1;
    sub_1C097768C(v38, v14+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v30);
    uint64_t v16 = v39;
LABEL_5:
    v13 += 32;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v14;
}

void sub_1C00653B4()
{
  if (!qword_1EB879C20)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB879C20);
    }
  }
}

void sub_1C0065420()
{
  if (!qword_1EB87C320)
  {
    sub_1C0063AD8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB87C320);
    }
  }
}

void sub_1C0065488()
{
  if (!qword_1EB880C58)
  {
    sub_1BFEEF378(255, (unint64_t *)&qword_1EB880DC0, (uint64_t (*)(uint64_t))sub_1C0063AD8, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB880C58);
    }
  }
}

void sub_1C0065520()
{
  if (!qword_1EB879C10)
  {
    sub_1BFC845BC(255, (unint64_t *)&qword_1EB871530);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB879C10);
    }
  }
}

unint64_t sub_1C0065598()
{
  unint64_t result = qword_1EB85C2E8;
  if (!qword_1EB85C2E8)
  {
    sub_1BFE9DE24(255, (unint64_t *)&qword_1EB879C00, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85C2E8);
  }
  return result;
}

unint64_t sub_1C0065624()
{
  unint64_t result = qword_1EB879C08;
  if (!qword_1EB879C08)
  {
    sub_1BFEFDDA8(255, (unint64_t *)&qword_1EB879C00, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB879C08);
  }
  return result;
}

uint64_t static String.feedAds.getter()
{
  return 0x7364612D64656566;
}

uint64_t sub_1C00656C8(uint64_t *a1)
{
  return sub_1BFE726FC(a1, sub_1BFE73668, sub_1BFE73808);
}

void sub_1C0065708()
{
  if (!qword_1EB88FEF0)
  {
    unint64_t v0 = sub_1C151E41C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB88FEF0);
    }
  }
}

void sub_1C0065770()
{
  if (!qword_1EB88FEE0)
  {
    type metadata accessor for FormatCompilerProperty(255);
    unint64_t v0 = sub_1C151E41C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB88FEE0);
    }
  }
}

unint64_t sub_1C00657D8()
{
  unint64_t result = qword_1EB8631E8;
  if (!qword_1EB8631E8)
  {
    sub_1BFDA70F4();
    sub_1BFE0D898(&qword_1EB871168);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8631E8);
  }
  return result;
}

void sub_1C006586C()
{
  if (!qword_1EB88FED0)
  {
    sub_1C008192C();
    unint64_t v0 = sub_1C151E41C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB88FED0);
    }
  }
}

uint64_t sub_1C00658D0(uint64_t a1)
{
  return sub_1BFCCB4A8(a1, 0x6C6169636F53, 0xE600000000000000, &qword_1EB93C820);
}

void sub_1C00658EC()
{
  sub_1BFC4B3F4();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t sub_1C00659AC()
{
  uint64_t result = type metadata accessor for FormatAbsoluteURL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1C0065A48(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C0065A90(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EmptyView();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C0065AD0()
{
  return sub_1C0065A90(&qword_1EB879A18);
}

uint64_t sub_1C0065B28()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C0065B3C(uint64_t a1)
{
  return sub_1BFCCB4A8(a1, 0x646565467377654ELL, 0xE800000000000000, &qword_1EB93C700);
}

uint64_t sub_1C0065B5C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for GapView();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C0065B9C()
{
  return sub_1C0065B5C(&qword_1EB8799F0);
}

uint64_t sub_1C0065BD0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C0065C18(uint64_t a1)
{
  return sub_1BFCCB4A8(a1, 7562305, 0xE300000000000000, &qword_1EB93C6F8);
}

uint64_t sub_1C0065C30()
{
  uint64_t v0 = sub_1C151928C();
  __swift_allocate_value_buffer(v0, qword_1EB8799C8);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EB8799C8);
  return sub_1BFC784AC(v1);
}

unint64_t sub_1C0065C7C()
{
  unint64_t result = qword_1EB8799B8;
  if (!qword_1EB8799B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8799B8);
  }
  return result;
}

unint64_t sub_1C0065CD0()
{
  unint64_t result = qword_1EB8799B0;
  if (!qword_1EB8799B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8799B0);
  }
  return result;
}

unint64_t sub_1C0065D24(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1C0065C7C();
  unint64_t result = sub_1C0065CD0();
  *(void *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for A6_V4.Layout()
{
  return &type metadata for A6_V4.Layout;
}

double sub_1C0065D64@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1BFC3C850(a1, v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

unint64_t sub_1C0065DAC()
{
  unint64_t result = qword_1EB85E468;
  if (!qword_1EB85E468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85E468);
  }
  return result;
}

unint64_t sub_1C0065E00()
{
  unint64_t result = qword_1EB85E460;
  if (!qword_1EB85E460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85E460);
  }
  return result;
}

unint64_t sub_1C0065E54()
{
  unint64_t result = qword_1EB85E450;
  if (!qword_1EB85E450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85E450);
  }
  return result;
}

unint64_t sub_1C0065EA8()
{
  unint64_t result = qword_1EB85E448;
  if (!qword_1EB85E448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85E448);
  }
  return result;
}

unint64_t sub_1C0065F14()
{
  unint64_t result = qword_1EB85E440;
  if (!qword_1EB85E440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85E440);
  }
  return result;
}

unint64_t sub_1C0065F68()
{
  unint64_t result = qword_1EB85E438;
  if (!qword_1EB85E438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85E438);
  }
  return result;
}

unint64_t sub_1C0065FBC()
{
  unint64_t result = qword_1EB85E430;
  if (!qword_1EB85E430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85E430);
  }
  return result;
}

uint64_t sub_1C0066010()
{
  uint64_t result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C00660C0(uint64_t a1)
{
  uint64_t result = sub_1C001814C(&qword_1EB879908, (void (*)(uint64_t))type metadata accessor for A6_V4.Bound);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C006611C(uint64_t a1)
{
  return sub_1BFCA2E90(a1, *(int **)(v1 + 16));
}

uint64_t sub_1C0066124(uint64_t a1)
{
  return sub_1BFC4287C(a1, *(void *)(v1 + 16));
}

unint64_t sub_1C006612C()
{
  unint64_t result = qword_1EB8798F8;
  if (!qword_1EB8798F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8798F8);
  }
  return result;
}

unint64_t sub_1C0066180()
{
  unint64_t result = qword_1EB8798F0;
  if (!qword_1EB8798F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8798F0);
  }
  return result;
}

unint64_t sub_1C00661D4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1C006612C();
  unint64_t result = sub_1C0066180();
  *(void *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for A6_V3.Layout()
{
  return &type metadata for A6_V3.Layout;
}

unint64_t sub_1C0066214()
{
  unint64_t result = qword_1EB8798E0;
  if (!qword_1EB8798E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8798E0);
  }
  return result;
}

unint64_t sub_1C0066268()
{
  unint64_t result = qword_1EB8798D8;
  if (!qword_1EB8798D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8798D8);
  }
  return result;
}

unint64_t sub_1C00662BC()
{
  unint64_t result = qword_1EB8798C8;
  if (!qword_1EB8798C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8798C8);
  }
  return result;
}

unint64_t sub_1C0066310()
{
  unint64_t result = qword_1EB8798C0;
  if (!qword_1EB8798C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8798C0);
  }
  return result;
}

unint64_t sub_1C006637C()
{
  unint64_t result = qword_1EB8798B8;
  if (!qword_1EB8798B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8798B8);
  }
  return result;
}

unint64_t sub_1C00663D0()
{
  unint64_t result = qword_1EB8798B0;
  if (!qword_1EB8798B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8798B0);
  }
  return result;
}

uint64_t sub_1C0066424()
{
  uint64_t result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C00664D4(uint64_t a1)
{
  uint64_t result = sub_1C0018AB8(&qword_1EB879800, (void (*)(uint64_t))type metadata accessor for A6_V3.Bound);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C006652C()
{
  unint64_t result = qword_1EB8797F0;
  if (!qword_1EB8797F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8797F0);
  }
  return result;
}

unint64_t sub_1C0066580()
{
  unint64_t result = qword_1EB8797E8;
  if (!qword_1EB8797E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8797E8);
  }
  return result;
}

unint64_t sub_1C00665D4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1C006652C();
  unint64_t result = sub_1C0066580();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1C0066604()
{
  unint64_t result = qword_1EB8797D8;
  if (!qword_1EB8797D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8797D8);
  }
  return result;
}

unint64_t sub_1C0066658()
{
  unint64_t result = qword_1EB8797D0;
  if (!qword_1EB8797D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8797D0);
  }
  return result;
}

unint64_t sub_1C00666AC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1C0066604();
  unint64_t result = sub_1C0066658();
  *(void *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for A6_V1.Layout()
{
  return &type metadata for A6_V1.Layout;
}

unint64_t sub_1C00666EC()
{
  unint64_t result = qword_1EB85E420;
  if (!qword_1EB85E420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85E420);
  }
  return result;
}

unint64_t sub_1C0066740()
{
  unint64_t result = qword_1EB85E418;
  if (!qword_1EB85E418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85E418);
  }
  return result;
}

unint64_t sub_1C0066794()
{
  unint64_t result = qword_1EB85E408;
  if (!qword_1EB85E408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85E408);
  }
  return result;
}

unint64_t sub_1C00667E8()
{
  unint64_t result = qword_1EB85E400;
  if (!qword_1EB85E400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85E400);
  }
  return result;
}

unint64_t sub_1C0066854()
{
  unint64_t result = qword_1EB85E3F8;
  if (!qword_1EB85E3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85E3F8);
  }
  return result;
}

unint64_t sub_1C00668A8()
{
  unint64_t result = qword_1EB85E3F0;
  if (!qword_1EB85E3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85E3F0);
  }
  return result;
}

uint64_t sub_1C00668FC()
{
  uint64_t result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C00669AC(uint64_t a1)
{
  uint64_t result = sub_1C0019560(&qword_1EB879728, (void (*)(uint64_t))type metadata accessor for A6_V1.Bound);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for LiveActivityWebEmbedDatastoreManagerObserverProxy()
{
  return self;
}

uint64_t storeEnumTagSinglePayload for FeedItemHiddenReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedItemHiddenReason(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_1C0066AD8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return FormatSupplementaryNodePinDistanceAdjustmentValue.init(from:)(a1, a2);
}

unint64_t sub_1C0066AF0()
{
  unint64_t result = qword_1EB860BA0;
  if (!qword_1EB860BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB860BA0);
  }
  return result;
}

uint64_t FormatSupplementaryNodePinDistanceAdjustmentValue.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BFC8AC84(a1, (void (*)(uint64_t))sub_1C0066C18, (uint64_t)&_s10CodingTypeON_16, (uint64_t)&unk_1F1B88240, a2);
}

uint64_t sub_1C0066B80()
{
  return sub_1C151EB5C();
}

uint64_t sub_1C0066BE0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1BFDE4FB8();
  *a1 = result;
  return result;
}

unint64_t sub_1C0066C18()
{
  unint64_t result = qword_1EB86AD48;
  if (!qword_1EB86AD48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86AD48);
  }
  return result;
}

unint64_t sub_1C0066C6C()
{
  unint64_t result = qword_1EB86AD40;
  if (!qword_1EB86AD40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86AD40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatSupplementaryNodePinDistanceAdjustment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSupplementaryNodePinDistanceAdjustment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_1C0066D4C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatSupplementaryNodePinDistanceAdjustment.init(from:)(a1, a2);
}

unint64_t sub_1C0066D64()
{
  unint64_t result = qword_1EB860B90;
  if (!qword_1EB860B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB860B90);
  }
  return result;
}

double sub_1C0066DB8(double a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 1:
      if (!a4)
      {
        sub_1C151756C();
        goto LABEL_20;
      }
      if (a4 == 1)
      {
        sub_1C151755C();
LABEL_20:
        double v13 = v9;
        return a1 - v13;
      }
      sub_1C1517EFC();
      double v13 = sub_1BFF493E4(v17, a4);
      swift_release();
      if (!v5) {
        return a1 - v13;
      }
      return a1;
    case 2:
      if (a4)
      {
        if (a4 != 1)
        {
          sub_1C1517EFC();
          double v14 = sub_1BFF493E4(v17, a4);
          swift_release();
          if (v5) {
            return a1;
          }
          return v14 * a1;
        }
        sub_1C151755C();
      }
      else
      {
        sub_1C151756C();
      }
      double v14 = v10;
      return v14 * a1;
    case 3:
      if (!a4)
      {
        sub_1C151756C();
        goto LABEL_30;
      }
      if (a4 == 1)
      {
        sub_1C151755C();
LABEL_30:
        double v15 = v11;
        goto LABEL_31;
      }
      sub_1C1517EFC();
      double v15 = sub_1BFF493E4(v17, a4);
      swift_release();
      if (v5) {
        return a1;
      }
LABEL_31:
      if (v15 != 0.0) {
        return a1 / v15;
      }
      return a1;
    default:
      if (!a4)
      {
        sub_1C151756C();
        goto LABEL_15;
      }
      if (a4 == 1)
      {
        sub_1C151755C();
LABEL_15:
        double v12 = v8;
        return v12 + a1;
      }
      sub_1C1517EFC();
      double v12 = sub_1BFF493E4(v17, a4);
      swift_release();
      if (!v5) {
        return v12 + a1;
      }
      return a1;
  }
}

uint64_t sub_1C0066FD0()
{
  return sub_1C151EB5C();
}

uint64_t sub_1C0067030@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1BFDD52D8();
  *a1 = result;
  return result;
}

unint64_t sub_1C0067068()
{
  unint64_t result = qword_1EB86AC10;
  if (!qword_1EB86AC10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86AC10);
  }
  return result;
}

unint64_t sub_1C00670BC()
{
  unint64_t result = qword_1EB86AC08;
  if (!qword_1EB86AC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86AC08);
  }
  return result;
}

void sub_1C0067110(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C151FD8C();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C0067164(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C151FD8C();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C00671B8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1C006721C()
{
  uint64_t result = type metadata accessor for PuzzleLeaderboardEntry();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, qword_1EB884BD8);
}

unint64_t sub_1C00672F4()
{
  unint64_t result = qword_1EB88FCB8;
  if (!qword_1EB88FCB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88FCB8);
  }
  return result;
}

unint64_t sub_1C0067348()
{
  unint64_t result = qword_1EB88FCB0;
  if (!qword_1EB88FCB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88FCB0);
  }
  return result;
}

uint64_t type metadata accessor for ArticleThumbnailViewLayoutAttributesFactory()
{
  return self;
}

double sub_1C00673C0()
{
  qword_1EB88FBA8 = 0x4030000000000000;
  qword_1EB88FBB0 = 0;
  word_1EB88FBB8 = 3072;
  byte_1EB88FBBA = 0;
  qword_1EB88FBC0 = MEMORY[0x1E4FBC870];
  double result = 0.0;
  xmmword_1EB88FBC8 = 0u;
  unk_1EB88FBD8 = 0u;
  word_1EB88FBE8 = 1280;
  return result;
}

uint64_t type metadata accessor for SingletonShareAttributionViewReuseManager()
{
  return self;
}

uint64_t type metadata accessor for SharingActivityProviderFactoryWithTracker()
{
  return self;
}

uint64_t SharingActivityProviderFactoryWithTracker.init(tracker:factory:)(uint64_t a1, long long *a2)
{
  *(void *)(v2 + 16) = a1;
  sub_1BFC773DC(a2, v2 + 24);
  return v2;
}

uint64_t storeEnumTagSinglePayload for PuzzleGameCenterOpenLeaderboardEntryPoint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)double result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PuzzleGameCenterOpenLeaderboardEntryPoint(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

unint64_t sub_1C0067524()
{
  unint64_t result = qword_1EB88FBA0;
  if (!qword_1EB88FBA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88FBA0);
  }
  return result;
}

unint64_t sub_1C0067578()
{
  unint64_t result = qword_1EB88FB90;
  if (!qword_1EB88FB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88FB90);
  }
  return result;
}

unint64_t sub_1C00675CC()
{
  unint64_t result = qword_1EB88FB88;
  if (!qword_1EB88FB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88FB88);
  }
  return result;
}

unint64_t sub_1C0067620()
{
  unint64_t result = qword_1EB88FB80;
  if (!qword_1EB88FB80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88FB80);
  }
  return result;
}

unint64_t sub_1C0067674()
{
  unint64_t result = qword_1EB88FB78;
  if (!qword_1EB88FB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88FB78);
  }
  return result;
}

unint64_t sub_1C00676C8()
{
  unint64_t result = qword_1EB88FB70;
  if (!qword_1EB88FB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88FB70);
  }
  return result;
}

uint64_t type metadata accessor for PuzzleNotificationAutoEnableStartupTask()
{
  uint64_t result = qword_1EB88FB48;
  if (!qword_1EB88FB48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C0067768()
{
  return sub_1BFC6BABC();
}

uint64_t type metadata accessor for FormatGroupNodeMaskDataLayoutAttributes()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FormatFileVersionURIReferenceCollection()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1C00677C8()
{
  unint64_t result = qword_1EB88F848[0];
  if (!qword_1EB88F848[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB88F848);
  }
  return result;
}

unint64_t sub_1C006781C()
{
  unint64_t result = qword_1EB88F840;
  if (!qword_1EB88F840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88F840);
  }
  return result;
}

unint64_t sub_1C0067870()
{
  unint64_t result = qword_1EB882650;
  if (!qword_1EB882650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB882650);
  }
  return result;
}

uint64_t sub_1C00678C4()
{
  return sub_1BFC3B4A8(&qword_1EB8795B8);
}

uint64_t sub_1C00678F8()
{
  return sub_1BFC3B4A8(&qword_1EB8795C0);
}

uint64_t type metadata accessor for FormatSponsoredBannerLayoutAttributes()
{
  return self;
}

uint64_t sub_1C0067950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MEMORY[0x1F415F238](a1, a2, a3, a4, *v8, a8);
}

unint64_t sub_1C0067980()
{
  unint64_t result = qword_1EB88F310;
  if (!qword_1EB88F310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88F310);
  }
  return result;
}

unint64_t sub_1C00679D4()
{
  unint64_t result = qword_1EB86A4E8;
  if (!qword_1EB86A4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86A4E8);
  }
  return result;
}

uint64_t sub_1C0067A28()
{
  return MEMORY[0x1E4FBB1A8];
}

uint64_t sub_1C0067A34()
{
  return MEMORY[0x1E4FBB1D8];
}

unint64_t sub_1C0067A40()
{
  unint64_t result = qword_1EB88F2A0;
  if (!qword_1EB88F2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88F2A0);
  }
  return result;
}

uint64_t sub_1C0067A94()
{
  uint64_t result = type metadata accessor for PuzzleStatisticValue(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for PuzzleStatisticDifficultyLevelValue(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, (uint64_t *)&unk_1EB884BB8);
}

uint64_t sub_1C0067B44()
{
  uint64_t result = type metadata accessor for FormatFileReference();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FormatDebuggerCallStackFrameContext(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, (uint64_t *)&unk_1EB884BA8);
}

uint64_t sub_1C0067C00@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return FormatContentSubgroupFilterSelector.init(from:)(a1, a2);
}

uint64_t sub_1C0067C18(void *a1)
{
  return FormatContentSubgroupFilterSelector.encode(to:)(a1);
}

unint64_t sub_1C0067C30()
{
  unint64_t result = qword_1EB86A220;
  if (!qword_1EB86A220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86A220);
  }
  return result;
}

unint64_t sub_1C0067C84()
{
  unint64_t result = qword_1EB86A218;
  if (!qword_1EB86A218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86A218);
  }
  return result;
}

uint64_t sub_1C0067CD8()
{
  return 0x726F7463656C6573;
}

unint64_t sub_1C0067CF8()
{
  unint64_t result = qword_1EB86A210;
  if (!qword_1EB86A210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86A210);
  }
  return result;
}

unint64_t sub_1C0067D4C()
{
  unint64_t result = qword_1EB86A208;
  if (!qword_1EB86A208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86A208);
  }
  return result;
}

void sub_1C0067DA0()
{
  sub_1C1305008(319, &qword_1EB8943F0, (void (*)(uint64_t))type metadata accessor for FormatCompilerSlotDefinitionItemSetAuxiliary);
  if (v0 <= 0x3F)
  {
    sub_1C1305008(319, (unint64_t *)&qword_1EB884FE0, MEMORY[0x1E4FAAFC8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_1C0067EB8()
{
  unint64_t result = qword_1EB86A1E0;
  if (!qword_1EB86A1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86A1E0);
  }
  return result;
}

unint64_t sub_1C0067F0C()
{
  unint64_t result = qword_1EB86A1D8;
  if (!qword_1EB86A1D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB86A1D8);
  }
  return result;
}

unint64_t sub_1C0067F68()
{
  unint64_t result = qword_1EB88EE40;
  if (!qword_1EB88EE40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88EE40);
  }
  return result;
}

unint64_t sub_1C0067FBC()
{
  unint64_t result = qword_1EB88EE38;
  if (!qword_1EB88EE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88EE38);
  }
  return result;
}

uint64_t sub_1C0068010(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 17)) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return sub_1C003F488(a1, v2 | *(unsigned __int8 *)(v1 + 16));
}

unint64_t sub_1C006803C()
{
  unint64_t result = qword_1EB88EE28;
  if (!qword_1EB88EE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88EE28);
  }
  return result;
}

unint64_t sub_1C0068090()
{
  unint64_t result = qword_1EB88EE20;
  if (!qword_1EB88EE20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88EE20);
  }
  return result;
}

uint64_t type metadata accessor for FormatVideoPlayerReuseManagerCache()
{
  return self;
}

uint64_t sub_1C0068108()
{
  type metadata accessor for FormatVideoPlayerReuseManagerCache();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  qword_1EB93C810 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatSupplementaryNodePinDistance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSupplementaryNodePinDistance(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_1C00681CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatSupplementaryNodePinDistance.init(from:)(a1, a2);
}

unint64_t sub_1C00681E4()
{
  unint64_t result = qword_1EB8809C8[0];
  if (!qword_1EB8809C8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB8809C8);
  }
  return result;
}

double sub_1C0068238(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, double a5, double a6, double a7, double a8)
{
  if ((a4 & 0x100) != 0)
  {
    char v12 = a4;
    int v14 = ~(_BYTE)a4;
    double Height = CGRectGetHeight(*(CGRect *)&a5);
    double v11 = Height + Height;
    if (v14)
    {
      double v16 = sub_1C0066DB8(Height + Height, a1, a2, a3, v12);
      if (!v8) {
        return v16;
      }
    }
  }
  else
  {
    sub_1C1517EFC();
    double v11 = sub_1BFF493E4(v18, a3);
    swift_release();
  }
  return v11;
}

uint64_t sub_1C006830C()
{
  return sub_1C151EB5C();
}

uint64_t sub_1C006836C@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

unint64_t sub_1C0068378()
{
  unint64_t result = qword_1EB869F48;
  if (!qword_1EB869F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB869F48);
  }
  return result;
}

unint64_t sub_1C00683CC()
{
  unint64_t result = qword_1EB869F40;
  if (!qword_1EB869F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB869F40);
  }
  return result;
}

unint64_t sub_1C0068420()
{
  unint64_t result = qword_1EB88ED68;
  if (!qword_1EB88ED68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88ED68);
  }
  return result;
}

unint64_t sub_1C0068474()
{
  unint64_t result = qword_1EB88ED60;
  if (!qword_1EB88ED60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88ED60);
  }
  return result;
}

uint64_t sub_1C00684C8()
{
  uint64_t result = type metadata accessor for FeedItem(319);
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

void sub_1C00685A4()
{
  if (!qword_1EB869DF8)
  {
    sub_1BFCB6824(255, &qword_1EB869DF0);
    unint64_t v0 = sub_1C151FD8C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB869DF8);
    }
  }
}

uint64_t sub_1C0068610@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatTextAdjustmentOtherBaseline.init(from:)(a1, a2);
}

unint64_t sub_1C0068628()
{
  unint64_t result = qword_1EB879438;
  if (!qword_1EB879438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB879438);
  }
  return result;
}

unint64_t sub_1C0068684()
{
  unint64_t result = qword_1EB88EA08;
  if (!qword_1EB88EA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88EA08);
  }
  return result;
}

unint64_t sub_1C00686D8()
{
  unint64_t result = qword_1EB88EA00;
  if (!qword_1EB88EA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88EA00);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatShareAttributionNodeContent(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        break;
      case 2:
        *(_WORD *)unint64_t result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = 0;
        break;
      case 2:
        *(_WORD *)unint64_t result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)unint64_t result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1C00687C8(void *a1)
{
  return FormatShareAttributionNodeContent.init(from:)(a1);
}

unint64_t sub_1C00687E0()
{
  unint64_t result = qword_1EB880898;
  if (!qword_1EB880898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB880898);
  }
  return result;
}

uint64_t sub_1C0068834()
{
  return sub_1C151EB5C();
}

uint64_t sub_1C0068894@<X0>(BOOL *a1@<X8>)
{
  return sub_1BFD59FB4(a1);
}

unint64_t sub_1C00688A0()
{
  unint64_t result = qword_1EB88E9F0;
  if (!qword_1EB88E9F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E9F0);
  }
  return result;
}

unint64_t sub_1C00688F4()
{
  unint64_t result = qword_1EB88E9E8;
  if (!qword_1EB88E9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E9E8);
  }
  return result;
}

unint64_t sub_1C0068948()
{
  unint64_t result = qword_1EB881450;
  if (!qword_1EB881450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB881450);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatBindingImageExpressionLogic(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1C0068A68@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return FormatBindingImageExpressionLogic.init(from:)(a1, a2);
}

unint64_t sub_1C0068A80()
{
  unint64_t result = qword_1EB8793A0[0];
  if (!qword_1EB8793A0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB8793A0);
  }
  return result;
}

uint64_t FormatBindingImageExpressionLogic.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1BFD55F84(a1, (void (*)(uint64_t))sub_1C0068B7C, (uint64_t)&_s10CodingTypeON_191, (uint64_t)&unk_1F1B67B10, a2);
}

uint64_t sub_1C0068B10()
{
  return sub_1C151EB5C();
}

uint64_t sub_1C0068B70@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

unint64_t sub_1C0068B7C()
{
  unint64_t result = qword_1EB88E7F8;
  if (!qword_1EB88E7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E7F8);
  }
  return result;
}

unint64_t sub_1C0068BD0()
{
  unint64_t result = qword_1EB88E7F0;
  if (!qword_1EB88E7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E7F0);
  }
  return result;
}

uint64_t type metadata accessor for ActivityItemsConfigurationFactory()
{
  return self;
}

uint64_t type metadata accessor for LayeredMediaLayerProviderFactory()
{
  return self;
}

unint64_t sub_1C0068C74()
{
  unint64_t result = qword_1EB88E688;
  if (!qword_1EB88E688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E688);
  }
  return result;
}

unint64_t sub_1C0068CC8()
{
  unint64_t result = qword_1EB88E680;
  if (!qword_1EB88E680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E680);
  }
  return result;
}

uint64_t sub_1C0068D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BFC449B4(a1, a2, a3, (uint64_t)&unk_1C15B1498, (uint64_t (*)(uint64_t))sub_1C007B0C8);
}

uint64_t type metadata accessor for FormatOsloSheetPurchaseDataModel(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, (uint64_t *)&unk_1EB884B98);
}

unint64_t sub_1C0068D5C()
{
  unint64_t result = qword_1EB88E640;
  if (!qword_1EB88E640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E640);
  }
  return result;
}

unint64_t sub_1C0068DB0()
{
  unint64_t result = qword_1EB88E638;
  if (!qword_1EB88E638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E638);
  }
  return result;
}

uint64_t sub_1C0068E04(void *a1)
{
  return FormatBindingTextExpressionLogic.encode(to:)(a1);
}

unint64_t sub_1C0068E1C()
{
  unint64_t result = qword_1EB85C268;
  if (!qword_1EB85C268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85C268);
  }
  return result;
}

unint64_t sub_1C0068E78()
{
  unint64_t result = qword_1EB88E438;
  if (!qword_1EB88E438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E438);
  }
  return result;
}

unint64_t sub_1C0068ECC()
{
  unint64_t result = qword_1EB88E430;
  if (!qword_1EB88E430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E430);
  }
  return result;
}

void sub_1C0068F20(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x7974706D457369;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x7974706D45746F6ELL;
      goto LABEL_3;
    case 2:
      *a1 = 0x736E6961746E6F63;
      a1[1] = 0xE800000000000000;
      return;
    case 3:
      uint64_t v4 = 0x657250736168;
      goto LABEL_7;
    case 4:
      uint64_t v4 = 0x667553736168;
LABEL_7:
      *a1 = v4 & 0xFFFFFFFFFFFFLL | 0x6966000000000000;
      a1[1] = 0xE900000000000078;
      break;
    case 5:
      *a1 = 0x6874676E656CLL;
      a1[1] = 0xE600000000000000;
      break;
    case 6:
      *a1 = 0x657261706D6F63;
      a1[1] = 0xE700000000000000;
      break;
    case 7:
      *a1 = 0x676E69646E6962;
      a1[1] = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1C0069008()
{
  return sub_1C151EAEC();
}

unint64_t sub_1C0069058()
{
  unint64_t result = qword_1EB8697D0;
  if (!qword_1EB8697D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8697D0);
  }
  return result;
}

uint64_t type metadata accessor for FormatAttributedStringAttachment()
{
  uint64_t result = qword_1EB88E368;
  if (!qword_1EB88E368) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatActivityItemsConfiguration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = -(char)a2;
        break;
    }
  }
  return result;
}

unint64_t sub_1C00691C4()
{
  unint64_t result = qword_1EB87C2D8;
  if (!qword_1EB87C2D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87C2D8);
  }
  return result;
}

void sub_1C0069218()
{
  if (!qword_1EB869780)
  {
    sub_1BFEFF3E8(255, (unint64_t *)&unk_1EB860DE0, (uint64_t (*)(void))sub_1BFC6EFBC, (uint64_t)&type metadata for FormatCountLimit.CodingKeys, MEMORY[0x1E4FBBDE0]);
    sub_1C00629F8();
    unint64_t v0 = type metadata accessor for VersionedKeyedEncodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB869780);
    }
  }
}

uint64_t type metadata accessor for NoopHiddenContentEffectRenderer()
{
  return self;
}

uint64_t type metadata accessor for FormatVideoPlayerViewController()
{
  return self;
}

uint64_t storeEnumTagSinglePayload for FormatVideoPlayerOverlayContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatVideoPlayerOverlayContent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1C00693C0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return FormatVideoPlayerOverlayContent.init(from:)(a1, a2);
}

unint64_t sub_1C00693D8()
{
  unint64_t result = qword_1EB88E1E8;
  if (!qword_1EB88E1E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E1E8);
  }
  return result;
}

unint64_t sub_1C0069434()
{
  unint64_t result = qword_1EB88E1E0;
  if (!qword_1EB88E1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E1E0);
  }
  return result;
}

unint64_t sub_1C0069488()
{
  unint64_t result = qword_1EB88E1D8;
  if (!qword_1EB88E1D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E1D8);
  }
  return result;
}

unint64_t sub_1C00694DC()
{
  unint64_t result = qword_1EB88E1D0;
  if (!qword_1EB88E1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E1D0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSupplementaryNodePinTrait(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 11)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 10);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_1C0069578@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatSupplementaryNodePinTrait.init(from:)(a1, a2);
}

uint64_t sub_1C0069590()
{
  return sub_1C151EB5C();
}

uint64_t sub_1C00695F0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1BFDE4FB8();
  *a1 = result;
  return result;
}

unint64_t sub_1C0069628()
{
  unint64_t result = qword_1EB88E1C8;
  if (!qword_1EB88E1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E1C8);
  }
  return result;
}

unint64_t sub_1C006967C()
{
  unint64_t result = qword_1EB88E1C0;
  if (!qword_1EB88E1C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E1C0);
  }
  return result;
}

void sub_1C00696D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, double *a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  if (!BYTE2(a4))
  {
    uint64_t v16 = sub_1C151C36C();
    if (a3) {
      uint64_t v17 = (unsigned int *)MEMORY[0x1E4FAD3B8];
    }
    else {
      uint64_t v17 = (unsigned int *)MEMORY[0x1E4FAD3B0];
    }
    (*(void (**)(double *, void, uint64_t))(*(void *)(v16 - 8) + 104))(a5, *v17, v16);
    uint64_t v18 = (unsigned int *)MEMORY[0x1E4FAD3C0];
    goto LABEL_16;
  }
  char v12 = a4;
  if (BYTE2(a4) == 1)
  {
    if ((a4 & 0x100) != 0)
    {
      int v19 = ~(_BYTE)a4;
      double Height = CGRectGetHeight(*(CGRect *)&a6);
      double v15 = Height + Height;
      if (v19)
      {
        double v21 = sub_1C0066DB8(Height + Height, a1, a2, a3, v12);
        if (v9) {
          return;
        }
        double v15 = v21;
      }
    }
    else
    {
      sub_1C1517EFC();
      double v15 = sub_1BFF493E4(v25, a3);
      swift_release();
      if (v9) {
        return;
      }
    }
    *a5 = v15;
    uint64_t v18 = (unsigned int *)MEMORY[0x1E4FAD3D0];
    goto LABEL_16;
  }
  if (BYTE1(a4) == 255)
  {
    uint64_t v18 = (unsigned int *)MEMORY[0x1E4FAD3D8];
LABEL_16:
    uint64_t v22 = *v18;
    uint64_t v23 = sub_1C151C37C();
    (*(void (**)(double *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(a5, v22, v23);
    return;
  }
  double v24 = sub_1C0068238(a1, a2, a3, a4 & 0x1FF, a6, a7, a8, a9);
  if (!v9)
  {
    *a5 = v24;
    uint64_t v18 = (unsigned int *)MEMORY[0x1E4FAD3A8];
    goto LABEL_16;
  }
}

uint64_t sub_1C00698B4()
{
  uint64_t result = type metadata accessor for FormatURL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_1C006998C()
{
  unint64_t result = qword_1EB88E108;
  if (!qword_1EB88E108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E108);
  }
  return result;
}

unint64_t sub_1C00699E0()
{
  unint64_t result = qword_1EB88E100;
  if (!qword_1EB88E100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88E100);
  }
  return result;
}

void sub_1C0069A34()
{
  sub_1C0069B58(319, &qword_1EB87BC80, (uint64_t (*)(uint64_t))type metadata accessor for FormatMicaSectionDecorationItem, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for FormatMicaSectionDecorationView()
{
  uint64_t result = qword_1EB87BCE8;
  if (!qword_1EB87BCE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1C0069B58(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1C0069BBC()
{
  uint64_t result = type metadata accessor for FormatMicaSectionDecorationView();
  qword_1EB879160 = result;
  return result;
}

uint64_t sub_1C0069BE0(uint64_t a1, uint64_t a2)
{
  return sub_1BFE4C7C0(&qword_1EB88DFD0, a2, (void (*)(uint64_t))type metadata accessor for FormatImageNodeLayoutAttributes);
}

uint64_t sub_1C0069C28(uint64_t a1, uint64_t a2)
{
  return sub_1BFE4C7C0(&qword_1EB88DFC8, a2, (void (*)(uint64_t))type metadata accessor for FormatImageNodeLayoutAttributes);
}

uint64_t sub_1C0069C70(uint64_t a1, uint64_t a2)
{
  return sub_1BFE4C7C0(&qword_1EB88DFE8, a2, (void (*)(uint64_t))type metadata accessor for FormatImageNodeLayoutAttributes);
}

uint64_t sub_1C0069CB8(uint64_t a1, uint64_t a2)
{
  return sub_1BFE4C7C0(&qword_1EB88DFE0, a2, (void (*)(uint64_t))type metadata accessor for FormatImageNodeLayoutAttributes);
}

void sub_1C0069D00()
{
  sub_1BFEC2A48(319, &qword_1EB874B58, (uint64_t (*)(uint64_t))type metadata accessor for FormatMetadata, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1C0069DBC()
{
  uint64_t result = type metadata accessor for FormatContentSlotItemObject.Resolved();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1C0069E68()
{
  unint64_t result = qword_1EB85D9D8;
  if (!qword_1EB85D9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85D9D8);
  }
  return result;
}

unint64_t sub_1C0069EBC()
{
  unint64_t result = qword_1EB85D9D0;
  if (!qword_1EB85D9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85D9D0);
  }
  return result;
}

unint64_t sub_1C0069F18()
{
  unint64_t result = qword_1EB88DDC8;
  if (!qword_1EB88DDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88DDC8);
  }
  return result;
}

unint64_t sub_1C0069F6C()
{
  unint64_t result = qword_1EB88DDC0;
  if (!qword_1EB88DDC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88DDC0);
  }
  return result;
}

unint64_t sub_1C0069FC4()
{
  unint64_t result = qword_1EB88DD28;
  if (!qword_1EB88DD28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88DD28);
  }
  return result;
}

unint64_t sub_1C006A018()
{
  unint64_t result = qword_1EB88DD20;
  if (!qword_1EB88DD20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88DD20);
  }
  return result;
}

unint64_t sub_1C006A078()
{
  unint64_t result = qword_1EB88D940;
  if (!qword_1EB88D940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D940);
  }
  return result;
}

unint64_t sub_1C006A0CC()
{
  unint64_t result = qword_1EB88D938;
  if (!qword_1EB88D938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D938);
  }
  return result;
}

unint64_t sub_1C006A124()
{
  unint64_t result = qword_1EB88D910;
  if (!qword_1EB88D910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D910);
  }
  return result;
}

unint64_t sub_1C006A178()
{
  unint64_t result = qword_1EB88D908;
  if (!qword_1EB88D908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D908);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatLayeredMediaRatioBinding(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = -(char)a2;
        break;
    }
  }
  return result;
}

uint64_t sub_1C006A298@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return FormatLayeredMediaRatioBinding.init(from:)(a1, a2);
}

unint64_t sub_1C006A2B0()
{
  unint64_t result = qword_1EB870F18;
  if (!qword_1EB870F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB870F18);
  }
  return result;
}

uint64_t FormatLayeredMediaRatioBinding.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1BFCBAD8C(a1, (void (*)(uint64_t))sub_1C006A3AC, (uint64_t)&_s10CodingTypeON_70, (uint64_t)&unk_1F1B860C8, a2);
}

uint64_t sub_1C006A340()
{
  return sub_1C151EB5C();
}

uint64_t sub_1C006A3A0@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

unint64_t sub_1C006A3AC()
{
  unint64_t result = qword_1EB88D900;
  if (!qword_1EB88D900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D900);
  }
  return result;
}

unint64_t sub_1C006A400()
{
  unint64_t result = qword_1EB88D8F8;
  if (!qword_1EB88D8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D8F8);
  }
  return result;
}

unint64_t sub_1C006A454()
{
  unint64_t result = qword_1EB868F98;
  if (!qword_1EB868F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB868F98);
  }
  return result;
}

unint64_t sub_1C006A4A8()
{
  unint64_t result = qword_1EB868F88;
  if (!qword_1EB868F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB868F88);
  }
  return result;
}

unint64_t sub_1C006A504()
{
  unint64_t result = qword_1EB868F48;
  if (!qword_1EB868F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB868F48);
  }
  return result;
}

unint64_t sub_1C006A558()
{
  unint64_t result = qword_1EB868F40;
  if (!qword_1EB868F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB868F40);
  }
  return result;
}

unint64_t sub_1C006A5B0()
{
  unint64_t result = qword_1EB878F78;
  if (!qword_1EB878F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878F78);
  }
  return result;
}

unint64_t sub_1C006A604()
{
  unint64_t result = qword_1EB878F70;
  if (!qword_1EB878F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878F70);
  }
  return result;
}

uint64_t sub_1C006A658()
{
  return sub_1BFC4D4E8(&qword_1EB88D6F8);
}

uint64_t sub_1C006A68C()
{
  return sub_1BFC4D4E8(&qword_1EB88D710);
}

uint64_t sub_1C006A6C0()
{
  return sub_1BFC4D4E8(&qword_1EB88D708);
}

void sub_1C006A6F4()
{
  sub_1C006A7F4(319, &qword_1EB878E50, type metadata accessor for PublisherLogoProcessorOptions, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1C006A7F4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C006A858(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1C006A8BC()
{
  uint64_t result = type metadata accessor for ImageRequestOptions();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1C006A950()
{
  qword_1EB88D6A0 = MEMORY[0x1E4FBC860];
  *(void *)algn_1EB88D6A8 = 1;
}

uint64_t type metadata accessor for FormatVideoPlayerReuseManager()
{
  return self;
}

unint64_t sub_1C006A990()
{
  unint64_t result = qword_1EB88D5D0;
  if (!qword_1EB88D5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D5D0);
  }
  return result;
}

uint64_t type metadata accessor for FormatPuzzleEmbedNodeRenderer()
{
  return self;
}

void sub_1C006AA08()
{
  sub_1C0073BBC(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata accessor for FormatPurchaseLandingPageData()
{
  uint64_t result = qword_1EB87BB80;
  if (!qword_1EB87BB80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C006AAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v6 <= 0x3F)
  {
    uint64_t v7 = *(void *)(result - 8);
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = *(_DWORD *)(v7 + 84);
  }
  return result;
}

uint64_t sub_1C006AB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C006AAEC(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1C006AD18);
}

uint64_t type metadata accessor for FormatLayoutSectionDescriptor(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, (uint64_t *)&unk_1EB896880);
}

uint64_t sub_1C006ABCC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C006AC14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1C006AC5C()
{
  unint64_t result = qword_1EB896870;
  if (!qword_1EB896870)
  {
    type metadata accessor for FormatLayoutSectionDescriptor(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB896870);
  }
  return result;
}

void sub_1C006ACB4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C006AD18(uint64_t a1)
{
}

uint64_t type metadata accessor for FormatLayoutSectionDescriptor.Data()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C006AD64@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  return FormatLayeredMediaNodeContent.init(from:)(a1, a2);
}

unint64_t sub_1C006AD7C()
{
  unint64_t result = qword_1EB870E50;
  if (!qword_1EB870E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB870E50);
  }
  return result;
}

uint64_t sub_1C006ADD0()
{
  return sub_1C151EB5C();
}

uint64_t sub_1C006AE30@<X0>(char *a1@<X8>)
{
  return sub_1BFC8DB2C(a1);
}

unint64_t sub_1C006AE3C()
{
  unint64_t result = qword_1EB88D530;
  if (!qword_1EB88D530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D530);
  }
  return result;
}

unint64_t sub_1C006AE90()
{
  unint64_t result = qword_1EB88D528;
  if (!qword_1EB88D528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D528);
  }
  return result;
}

uint64_t sub_1C006AEE4()
{
  uint64_t result = type metadata accessor for FormatVersionableValue();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C006AF78()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C006AF94()
{
  return swift_getWitnessTable();
}

void sub_1C006AFB0()
{
  sub_1BFEC2B10(319, &qword_1EB874B58, (void (*)(uint64_t))type metadata accessor for FormatMetadata);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1C006B058(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for FormatCodingIgnoreSetStrategy()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for FormatCodingColumnSetStrategy.SetOrSingle()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C006B0C4()
{
  uint64_t result = type metadata accessor for WebEmbedDataSourceJson();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for WebEmbedDataSourceCacheEntry()
{
  uint64_t result = qword_1EB88D240;
  if (!qword_1EB88D240) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for ReportConcernCompleteContext()
{
  return &type metadata for ReportConcernCompleteContext;
}

void sub_1C006B1B0()
{
  sub_1C00671B8(319, &qword_1EB882A40, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata accessor for PuzzleStatisticsGroupedValue(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, (uint64_t *)&unk_1EB884B70);
}

uint64_t getEnumTagSinglePayload for PuzzleGameCenterListenerType(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 8) & 0xF000000000000007) != 0) {
    int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C006B300()
{
  return sub_1C151932C();
}

unint64_t sub_1C006B330()
{
  unint64_t result = qword_1EB88D160;
  if (!qword_1EB88D160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D160);
  }
  return result;
}

unint64_t sub_1C006B384()
{
  unint64_t result = qword_1EB88D158;
  if (!qword_1EB88D158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D158);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatSupplementaryNodeStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 36) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSupplementaryNodeStyle.Selector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 36)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t initializeWithCopy for FormatSupplementaryNodeStyle.Selector(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = a2 + 24;
  unsigned __int8 v6 = *(unsigned char *)(a2 + 34);
  int v7 = *(unsigned __int16 *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(void *)(a1 + 24) = *(void *)v5;
    *(_DWORD *)(a1 + 31) = *(_DWORD *)(v5 + 7);
  }
  else
  {
    uint64_t v8 = v7 & 0xFF00FFFF | (v6 << 16);
    uint64_t v9 = *(void *)v5;
    sub_1BFFA742C(v9, v8, SBYTE2(v8), (uint64_t (*)(uint64_t, uint64_t, void))sub_1BFFE2FD4, (uint64_t (*)(void))sub_1BFFE2FE0);
    *(void *)(a1 + 24) = v9;
    *(_WORD *)(a1 + 32) = v8;
    *(unsigned char *)(a1 + 34) = BYTE2(v8);
  }
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  return a1;
}

uint64_t sub_1C006B538@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatSupplementaryNodeStyle.Selector.init(from:)(a1, a2);
}

unint64_t sub_1C006B550()
{
  unint64_t result = qword_1EB88D078;
  if (!qword_1EB88D078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D078);
  }
  return result;
}

unint64_t sub_1C006B5A4()
{
  unint64_t result = qword_1EB88D070;
  if (!qword_1EB88D070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D070);
  }
  return result;
}

unint64_t sub_1C006B5F8()
{
  unint64_t result = qword_1EB88D068;
  if (!qword_1EB88D068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D068);
  }
  return result;
}

unint64_t sub_1C006B64C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1C006B5A4();
  unint64_t result = sub_1C006B5F8();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1C006B684()
{
  unint64_t result = qword_1EB88D060;
  if (!qword_1EB88D060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D060);
  }
  return result;
}

unint64_t sub_1C006B6D8()
{
  unint64_t result = qword_1EB88D058;
  if (!qword_1EB88D058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D058);
  }
  return result;
}

unint64_t sub_1C006B72C()
{
  unint64_t result = qword_1EB88D050;
  if (!qword_1EB88D050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D050);
  }
  return result;
}

unint64_t sub_1C006B788()
{
  unint64_t result = qword_1EB88D048;
  if (!qword_1EB88D048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D048);
  }
  return result;
}

unint64_t sub_1C006B7DC()
{
  unint64_t result = qword_1EB88D040;
  if (!qword_1EB88D040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D040);
  }
  return result;
}

unint64_t sub_1C006B830()
{
  unint64_t result = qword_1EB88D030;
  if (!qword_1EB88D030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D030);
  }
  return result;
}

unint64_t sub_1C006B884()
{
  unint64_t result = qword_1EB878C80;
  if (!qword_1EB878C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878C80);
  }
  return result;
}

unint64_t sub_1C006B8D8()
{
  unint64_t result = qword_1EB878C78;
  if (!qword_1EB878C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878C78);
  }
  return result;
}

uint64_t sub_1C006B92C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1C0072770(a1, a2, a3, (uint64_t (*)(void))sub_1C006B884, (uint64_t (*)(void))sub_1C006B8D8, (uint64_t (*)(void))sub_1C118D2EC);
}

unint64_t sub_1C006B974()
{
  unint64_t result = qword_1EB88D028;
  if (!qword_1EB88D028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D028);
  }
  return result;
}

unint64_t sub_1C006B9C8()
{
  unint64_t result = qword_1EB88D020;
  if (!qword_1EB88D020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88D020);
  }
  return result;
}

unint64_t sub_1C006BA24()
{
  unint64_t result = qword_1EB878C68;
  if (!qword_1EB878C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878C68);
  }
  return result;
}

unint64_t sub_1C006BA78()
{
  unint64_t result = qword_1EB878C60;
  if (!qword_1EB878C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878C60);
  }
  return result;
}

void sub_1C006BACC()
{
  if (!qword_1EB860920)
  {
    sub_1C00718F4();
    unint64_t v0 = type metadata accessor for FormatNodeStyleSelectorOrder();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB860920);
    }
  }
}

void sub_1C006BB28()
{
  if (!qword_1EB868668)
  {
    sub_1C0070B54();
    unint64_t v0 = type metadata accessor for FormatNodeStyleSelectorOrder();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB868668);
    }
  }
}

void sub_1C006BB84()
{
  if (!qword_1EB88CFC0)
  {
    sub_1C006B550();
    unint64_t v0 = type metadata accessor for FormatNodeStyleSelectorOrder();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB88CFC0);
    }
  }
}

uint64_t dispatch thunk of FormatLayoutViewRendererType.debugger.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of FormatLayoutViewRendererType.analyticsDataProvider.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of FormatLayoutViewRendererType.presentingViewController.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_1C006BC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  sub_1BFC3E5C0(v3);
  return swift_retain();
}

void sub_1C006BC60()
{
  sub_1BFE79B90(319, (unint64_t *)&qword_1EB884FE0, MEMORY[0x1E4FAAFC8], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_1C006BD5C()
{
  unint64_t result = qword_1EB88CEF8;
  if (!qword_1EB88CEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88CEF8);
  }
  return result;
}

unint64_t sub_1C006BDB0()
{
  unint64_t result = qword_1EB88CEF0;
  if (!qword_1EB88CEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88CEF0);
  }
  return result;
}

uint64_t sub_1C006BE04()
{
  uint64_t result = type metadata accessor for FormatDebuggerCallStackFrameContext(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1C006BEA4()
{
  unint64_t result = qword_1EB88CE38;
  if (!qword_1EB88CE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88CE38);
  }
  return result;
}

unint64_t sub_1C006BEF8()
{
  unint64_t result = qword_1EB868648;
  if (!qword_1EB868648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB868648);
  }
  return result;
}

unint64_t sub_1C006BF4C()
{
  unint64_t result = qword_1EB868638;
  if (!qword_1EB868638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB868638);
  }
  return result;
}

unint64_t sub_1C006BFA8()
{
  unint64_t result = qword_1EB88CD88;
  if (!qword_1EB88CD88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88CD88);
  }
  return result;
}

unint64_t sub_1C006BFFC()
{
  unint64_t result = qword_1EB88CD80;
  if (!qword_1EB88CD80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88CD80);
  }
  return result;
}

unint64_t sub_1C006C050()
{
  unint64_t result = qword_1EB8831B0;
  if (!qword_1EB8831B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8831B0);
  }
  return result;
}

unint64_t sub_1C006C0AC()
{
  unint64_t result = qword_1EB88CD70;
  if (!qword_1EB88CD70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88CD70);
  }
  return result;
}

unint64_t sub_1C006C100()
{
  unint64_t result = qword_1EB88CD68;
  if (!qword_1EB88CD68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88CD68);
  }
  return result;
}

uint64_t type metadata accessor for FormatBackgroundLayoutSolver()
{
  return self;
}

ValueMetadata *type metadata accessor for FollowingNotificationContext()
{
  return &type metadata for FollowingNotificationContext;
}

uint64_t type metadata accessor for EngagementBannerViewRenderer()
{
  return self;
}

uint64_t type metadata accessor for ArticleThumbnailViewRenderer()
{
  return self;
}

uint64_t dispatch thunk of PuzzleGameCenterServiceType.addListener(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 96) + **(int **)(a4 + 96));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1C005E7F4;
  return v11(a1, a2, a3, a4);
}

uint64_t type metadata accessor for FormatStateViewNodeRenderer()
{
  return self;
}

uint64_t sub_1C006C324(void *a1)
{
  return FormatSlotDefinitionItemSet.encode(to:)(a1);
}

void sub_1C006C33C()
{
  sub_1BFF71E30();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_1C006C3FC()
{
  unint64_t result = qword_1EB87C1C8[0];
  if (!qword_1EB87C1C8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB87C1C8);
  }
  return result;
}

unint64_t sub_1C006C450()
{
  unint64_t result = qword_1EB880230;
  if (!qword_1EB880230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB880230);
  }
  return result;
}

uint64_t sub_1C006C4A4(void *a1)
{
  return FormatProgressViewNodeStyle.encode(to:)(a1);
}

unint64_t sub_1C006C4C8()
{
  unint64_t result = qword_1EB868258;
  if (!qword_1EB868258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB868258);
  }
  return result;
}

unint64_t sub_1C006C51C()
{
  unint64_t result = qword_1EB868250;
  if (!qword_1EB868250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB868250);
  }
  return result;
}

unint64_t sub_1C006C578()
{
  unint64_t result = qword_1EB868248;
  if (!qword_1EB868248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB868248);
  }
  return result;
}

unint64_t sub_1C006C5CC()
{
  unint64_t result = qword_1EB868240;
  if (!qword_1EB868240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB868240);
  }
  return result;
}

unint64_t sub_1C006C628()
{
  unint64_t result = qword_1EB868230;
  if (!qword_1EB868230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB868230);
  }
  return result;
}

unint64_t sub_1C006C67C()
{
  unint64_t result = qword_1EB868228;
  if (!qword_1EB868228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB868228);
  }
  return result;
}

uint64_t type metadata accessor for FormatPackageInventoryCache()
{
  return self;
}

unint64_t sub_1C006C6F4()
{
  unint64_t result = qword_1EB878AF8;
  if (!qword_1EB878AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878AF8);
  }
  return result;
}

unint64_t sub_1C006C748()
{
  unint64_t result = qword_1EB870E28;
  if (!qword_1EB870E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB870E28);
  }
  return result;
}

uint64_t type metadata accessor for FormatLayoutViewPoolManager()
{
  return self;
}

uint64_t sub_1C006C7C0()
{
  type metadata accessor for FormatLayoutViewPoolManager();
  swift_allocObject();
  uint64_t result = sub_1BFCB0BEC();
  qword_1EB93C930 = result;
  return result;
}

unint64_t sub_1C006C7FC()
{
  unint64_t result = qword_1EB88CA18;
  if (!qword_1EB88CA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88CA18);
  }
  return result;
}

unint64_t sub_1C006C850()
{
  unint64_t result = qword_1EB88CA10;
  if (!qword_1EB88CA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88CA10);
  }
  return result;
}

unint64_t sub_1C006C8AC()
{
  unint64_t result = qword_1EB88CA08;
  if (!qword_1EB88CA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88CA08);
  }
  return result;
}

unint64_t sub_1C006C900()
{
  unint64_t result = qword_1EB88CA00;
  if (!qword_1EB88CA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88CA00);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatItemNodeLayoutContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C0BC148C);
}

uint64_t sub_1C006C968()
{
  uint64_t result = type metadata accessor for FeedItem(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FormatGroupNodeMaskRenderer()
{
  return self;
}

uint64_t sub_1C006CA40@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return FormatContentSubgroupFilter.init(from:)(a1, a2);
}

uint64_t sub_1C006CA58(void *a1)
{
  return FormatContentSubgroupFilter.encode(to:)(a1);
}

unint64_t sub_1C006CA70()
{
  unint64_t result = qword_1EB88C9A8;
  if (!qword_1EB88C9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C9A8);
  }
  return result;
}

unint64_t sub_1C006CAC4()
{
  unint64_t result = qword_1EB88C9A0;
  if (!qword_1EB88C9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C9A0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatContentSubgroupFilter.CodingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

uint64_t sub_1C006CBE4()
{
  return sub_1C151EB5C();
}

uint64_t sub_1C006CC44@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1BFC433A4();
  *a1 = result;
  return result;
}

uint64_t sub_1C006CC74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C006CDEC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C006CCA0()
{
  return sub_1C151EAEC();
}

unint64_t sub_1C006CCF0()
{
  unint64_t result = qword_1EB8681C8;
  if (!qword_1EB8681C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8681C8);
  }
  return result;
}

unint64_t sub_1C006CD44()
{
  unint64_t result = qword_1EB8681C0;
  if (!qword_1EB8681C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8681C0);
  }
  return result;
}

unint64_t sub_1C006CD98()
{
  unint64_t result = qword_1EB8681B8;
  if (!qword_1EB8681B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8681B8);
  }
  return result;
}

uint64_t sub_1C006CDEC(char a1)
{
  uint64_t result = 1802398060;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6D65726975716572;
      break;
    case 2:
      uint64_t result = 1701015151;
      break;
    case 3:
      uint64_t result = 0x6465646563657270;
      break;
    case 4:
      uint64_t result = 0x636572507473616CLL;
      break;
    case 5:
      uint64_t result = 0x65766F6D6572;
      break;
    case 6:
      uint64_t result = 6581857;
      break;
    case 7:
      uint64_t result = 29295;
      break;
    case 8:
      uint64_t result = 7630702;
      break;
    case 9:
      uint64_t result = 0x726F7463656C6573;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1C006CEEC()
{
  unint64_t result = qword_1EB8681B0;
  if (!qword_1EB8681B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8681B0);
  }
  return result;
}

unint64_t sub_1C006CF40()
{
  unint64_t result = qword_1EB8681A8;
  if (!qword_1EB8681A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8681A8);
  }
  return result;
}

uint64_t sub_1C006CF94()
{
  uint64_t result = type metadata accessor for FormatWebEmbed();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for FormatCustomItem();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C006D0A0()
{
  uint64_t result = type metadata accessor for FormatWebEmbed.Resolved();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PuzzleStatistic();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for FormatCustomItem.Resolved();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_1C006D1D0()
{
  unint64_t result = qword_1EB868148;
  if (!qword_1EB868148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB868148);
  }
  return result;
}

unint64_t sub_1C006D224()
{
  unint64_t result = qword_1EB868140;
  if (!qword_1EB868140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB868140);
  }
  return result;
}

unint64_t sub_1C006D280()
{
  unint64_t result = qword_1EB88C820;
  if (!qword_1EB88C820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C820);
  }
  return result;
}

unint64_t sub_1C006D2D4()
{
  unint64_t result = qword_1EB88C818;
  if (!qword_1EB88C818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C818);
  }
  return result;
}

unint64_t sub_1C006D330()
{
  unint64_t result = qword_1EB88C808;
  if (!qword_1EB88C808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C808);
  }
  return result;
}

unint64_t sub_1C006D384()
{
  unint64_t result = qword_1EB88C800;
  if (!qword_1EB88C800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C800);
  }
  return result;
}

uint64_t type metadata accessor for FormatArticleThumbnailImage()
{
  uint64_t result = qword_1EB88C760;
  if (!qword_1EB88C760) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandShareContentComplete()
{
  return &type metadata for CommandShareContentComplete;
}

uint64_t type metadata accessor for WebEmbedDataSourceWorkItem()
{
  return self;
}

void sub_1C006D458(uint64_t a1)
{
}

void sub_1C006D48C(uint64_t a1)
{
}

void sub_1C006D4C0()
{
  if (!qword_1EB868048)
  {
    sub_1C006D534(255, &qword_1EB868040, (uint64_t (*)(void, ValueMetadata *))type metadata accessor for ResourceConfigurationCache);
    unint64_t v0 = sub_1C151FD8C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB868048);
    }
  }
}

void sub_1C006D534(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for SportsEmbedConfiguration);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for ResourceConfigurationCache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C006D59C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BFC449B4(a1, a2, a3, (uint64_t)&unk_1C15B14D0, (uint64_t (*)(uint64_t))sub_1C0073BBC);
}

uint64_t type metadata accessor for OsloSheetPurchaseDataModel(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, (uint64_t *)&unk_1EB881418);
}

ValueMetadata *type metadata accessor for ManageNotificationsContext()
{
  return &type metadata for ManageNotificationsContext;
}

uint64_t type metadata accessor for LiveActivityCommandContext()
{
  uint64_t result = qword_1EB88C518;
  if (!qword_1EB88C518) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1C006D638()
{
  unint64_t result = qword_1EB88C510;
  if (!qword_1EB88C510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C510);
  }
  return result;
}

uint64_t type metadata accessor for FormatWebEmbedNodeRenderer()
{
  return self;
}

uint64_t sub_1C006D6B0(void *a1)
{
  return FormatVideoPlayerNodeStyle.encode(to:)(a1);
}

unint64_t sub_1C006D6D4()
{
  unint64_t result = qword_1EB88C408;
  if (!qword_1EB88C408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C408);
  }
  return result;
}

unint64_t sub_1C006D728()
{
  unint64_t result = qword_1EB88C400;
  if (!qword_1EB88C400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C400);
  }
  return result;
}

unint64_t sub_1C006D784()
{
  unint64_t result = qword_1EB88C3F8;
  if (!qword_1EB88C3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C3F8);
  }
  return result;
}

unint64_t sub_1C006D7D8()
{
  unint64_t result = qword_1EB88C3F0;
  if (!qword_1EB88C3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C3F0);
  }
  return result;
}

unint64_t sub_1C006D834()
{
  unint64_t result = qword_1EB88C3E0;
  if (!qword_1EB88C3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C3E0);
  }
  return result;
}

unint64_t sub_1C006D888()
{
  unint64_t result = qword_1EB88C3D8;
  if (!qword_1EB88C3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C3D8);
  }
  return result;
}

unint64_t sub_1C006D8E4()
{
  unint64_t result = qword_1EB88C3C8;
  if (!qword_1EB88C3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C3C8);
  }
  return result;
}

unint64_t sub_1C006D938()
{
  unint64_t result = qword_1EB88C3C0;
  if (!qword_1EB88C3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C3C0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedGapOffline(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedGapOffline(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C006DA28@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return FormatShareAttributionNode.init(from:)(a1, a2);
}

unint64_t sub_1C006DA40()
{
  unint64_t result = qword_1EB880048;
  if (!qword_1EB880048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB880048);
  }
  return result;
}

unint64_t sub_1C006DA9C()
{
  unint64_t result = qword_1EB88C3B0;
  if (!qword_1EB88C3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C3B0);
  }
  return result;
}

unint64_t sub_1C006DAF0()
{
  unint64_t result = qword_1EB88C3A8;
  if (!qword_1EB88C3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C3A8);
  }
  return result;
}

unint64_t sub_1C006DB44()
{
  unint64_t result = qword_1EB88C3A0;
  if (!qword_1EB88C3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C3A0);
  }
  return result;
}

uint64_t sub_1C006DB98()
{
  uint64_t result = type metadata accessor for SharedItem();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C006DC24()
{
  uint64_t result = type metadata accessor for FormatOptionsNodeStatementValue();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1C006DCD0()
{
  unint64_t result = qword_1EB88C2E8;
  if (!qword_1EB88C2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C2E8);
  }
  return result;
}

unint64_t sub_1C006DD24()
{
  unint64_t result = qword_1EB88C2E0;
  if (!qword_1EB88C2E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C2E0);
  }
  return result;
}

uint64_t sub_1C006DD78@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return FormatImageNodeRequestSize.init(from:)(a1, a2);
}

unint64_t sub_1C006DD90()
{
  unint64_t result = qword_1EB88C2C0;
  if (!qword_1EB88C2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C2C0);
  }
  return result;
}

unint64_t sub_1C006DDF0()
{
  unint64_t result = qword_1EB88C2B8;
  if (!qword_1EB88C2B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C2B8);
  }
  return result;
}

unint64_t sub_1C006DE44()
{
  unint64_t result = qword_1EB88C2B0;
  if (!qword_1EB88C2B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C2B0);
  }
  return result;
}

unint64_t sub_1C006DE98()
{
  unint64_t result = qword_1EB88C2A8;
  if (!qword_1EB88C2A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C2A8);
  }
  return result;
}

uint64_t sub_1C006DEEC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return FormatImageNodeRequestPath.init(from:)(a1, a2);
}

unint64_t sub_1C006DF04()
{
  unint64_t result = qword_1EB88C2A0;
  if (!qword_1EB88C2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C2A0);
  }
  return result;
}

uint64_t sub_1C006DF58()
{
  if (*v0) {
    return 1885433183;
  }
  else {
    return 0x656D7473756A6461;
  }
}

unint64_t sub_1C006DF9C()
{
  unint64_t result = qword_1EB88C298;
  if (!qword_1EB88C298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C298);
  }
  return result;
}

unint64_t sub_1C006DFF0()
{
  unint64_t result = qword_1EB88C290;
  if (!qword_1EB88C290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C290);
  }
  return result;
}

unint64_t sub_1C006E044()
{
  unint64_t result = qword_1EB88C288;
  if (!qword_1EB88C288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C288);
  }
  return result;
}

unint64_t sub_1C006E0A0()
{
  unint64_t result = qword_1EB88C280;
  if (!qword_1EB88C280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C280);
  }
  return result;
}

unint64_t sub_1C006E0F4()
{
  unint64_t result = qword_1EB88C278;
  if (!qword_1EB88C278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C278);
  }
  return result;
}

unint64_t sub_1C006E150()
{
  unint64_t result = qword_1EB85BFA8;
  if (!qword_1EB85BFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85BFA8);
  }
  return result;
}

unint64_t sub_1C006E1A4()
{
  unint64_t result = qword_1EB85BFA0;
  if (!qword_1EB85BFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85BFA0);
  }
  return result;
}

uint64_t sub_1C006E1F8(void *a1)
{
  return FormatCustomItemDefinition.encode(to:)(a1);
}

unint64_t sub_1C006E210()
{
  unint64_t result = qword_1EB85ED30;
  if (!qword_1EB85ED30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85ED30);
  }
  return result;
}

unint64_t sub_1C006E26C()
{
  unint64_t result = qword_1EB88C198;
  if (!qword_1EB88C198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C198);
  }
  return result;
}

unint64_t sub_1C006E2C0()
{
  unint64_t result = qword_1EB88C190;
  if (!qword_1EB88C190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C190);
  }
  return result;
}

void sub_1C006E314()
{
  sub_1BFE79E3C(319, (unint64_t *)&qword_1EB884FE0, MEMORY[0x1E4FAAFC8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_1C006E3F8()
{
  unint64_t result = qword_1EB88C0C8;
  if (!qword_1EB88C0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C0C8);
  }
  return result;
}

unint64_t sub_1C006E44C()
{
  unint64_t result = qword_1EB88C0C0;
  if (!qword_1EB88C0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C0C0);
  }
  return result;
}

uint64_t sub_1C006E4A0()
{
  uint64_t result = type metadata accessor for FormatAction();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1C006E53C()
{
  unint64_t result = qword_1EB88C010;
  if (!qword_1EB88C010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C010);
  }
  return result;
}

unint64_t sub_1C006E590()
{
  unint64_t result = qword_1EB88C008;
  if (!qword_1EB88C008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88C008);
  }
  return result;
}

void sub_1C006E5E4(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  if (*(unsigned char *)(v1 + 48) != 4)
  {
    if (v3)
    {
      *(void *)(a1 + 24) = MEMORY[0x1E4FBC958];
      swift_bridgeObjectRetain();
      sub_1C1517EFC();
      double v7 = sub_1BFF493E4(v14, v3);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_release();
        __swift_deallocate_boxed_opaque_existential_0(a1);
      }
      else
      {
        double v8 = v7;
        swift_release();
        *(double *)a1 = v8;
        swift_bridgeObjectRelease();
      }
      return;
    }
LABEL_9:
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return;
  }
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  double v9 = sub_1BFF71C54();
  if (v2)
  {
    sub_1BFDB3960(v4);
  }
  else
  {
    double v11 = v9;
    double v12 = v10;
    sub_1BFDB3960(v4);
    id v13 = objc_msgSend(self, sel_valueWithCGSize_, v11, v12, v15, v5);
    *(void *)(a1 + 24) = sub_1C0A1769C();
    *(void *)a1 = v13;
  }
}

unint64_t sub_1C006E77C()
{
  unint64_t result = qword_1EB88BFD8;
  if (!qword_1EB88BFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88BFD8);
  }
  return result;
}

unint64_t sub_1C006E7D0(void *a1)
{
  a1[1] = sub_1BFDB4920();
  a1[2] = sub_1BFDBCFDC();
  unint64_t result = sub_1C11E43D8();
  a1[3] = result;
  return result;
}

uint64_t sub_1C006E808()
{
  uint64_t result = type metadata accessor for FeedEngagementBanner();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C006E894()
{
  return sub_1C0F9F614(&qword_1EB88BFC0, (void (*)(uint64_t))type metadata accessor for WebEmbedDatastoreCacheKey);
}

uint64_t sub_1C006E8DC()
{
  uint64_t result = type metadata accessor for GenericDataVisualization();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for WebEmbedDataSourceManager()
{
  return self;
}

void sub_1C006E994()
{
  sub_1BFE45748(319, (unint64_t *)&qword_1EB871510, MEMORY[0x1E4FABC10], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for SportsDataServiceResource()
{
  return self;
}

uint64_t type metadata accessor for SportsDataServiceEndpoint()
{
  return self;
}

void sub_1C006EADC()
{
  sub_1C00845F4(319, qword_1EB896E10, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleData, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for PuzzleEmbedViewController()
{
  uint64_t result = qword_1EB897458;
  if (!qword_1EB897458) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for OpenChannelCommandContext()
{
  return &type metadata for OpenChannelCommandContext;
}

uint64_t type metadata accessor for InternalErrorViewRenderer()
{
  return self;
}

unint64_t sub_1C006ECBC()
{
  unint64_t result = qword_1EB8785A8;
  if (!qword_1EB8785A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8785A8);
  }
  return result;
}

unint64_t sub_1C006ED10()
{
  unint64_t result = qword_1EB85BF68;
  if (!qword_1EB85BF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85BF68);
  }
  return result;
}

unint64_t sub_1C006ED6C()
{
  unint64_t result = qword_1EB88BBF0;
  if (!qword_1EB88BBF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88BBF0);
  }
  return result;
}

unint64_t sub_1C006EDC0()
{
  unint64_t result = qword_1EB88BBE8;
  if (!qword_1EB88BBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88BBE8);
  }
  return result;
}

uint64_t sub_1C006EE14()
{
  uint64_t result = type metadata accessor for FeedSponsorshipBannerAd();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1C006EEA8()
{
  unint64_t result = qword_1EB88BBD0;
  if (!qword_1EB88BBD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88BBD0);
  }
  return result;
}

unint64_t sub_1C006EEFC()
{
  unint64_t result = qword_1EB88BBC8;
  if (!qword_1EB88BBC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88BBC8);
  }
  return result;
}

void sub_1C006EF50()
{
  sub_1BFC44A9C(319, &qword_1EB87EBC8, (void (*)(uint64_t))type metadata accessor for FormatPostPurchase);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata accessor for FormatPurchaseLandingPage()
{
  uint64_t result = qword_1EB87BA40;
  if (!qword_1EB87BA40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C006F050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C128F0D8(a1, a2, a3, a4, (void (*)(uint64_t))sub_1BFD16FC4, sub_1BFC5E574, (uint64_t (*)(uint64_t, uint64_t))sub_1BFCA5AC8, (void (*)(void))type metadata accessor for FormatGroupNodeMaskStyle, (void (*)(uint64_t))sub_1BFFE4474);
}

uint64_t sub_1C006F0D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255) {
    return sub_1C00F65A8(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

uint64_t sub_1C006F0EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255) {
    return sub_1C00F670C(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

uint64_t sub_1C006F104(void *a1)
{
  return FormatIssueCoverNodeStyle.encode(to:)(a1);
}

unint64_t sub_1C006F128()
{
  unint64_t result = qword_1EB867928;
  if (!qword_1EB867928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB867928);
  }
  return result;
}

unint64_t sub_1C006F17C()
{
  unint64_t result = qword_1EB867920;
  if (!qword_1EB867920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB867920);
  }
  return result;
}

unint64_t sub_1C006F1D8()
{
  unint64_t result = qword_1EB867918;
  if (!qword_1EB867918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB867918);
  }
  return result;
}

unint64_t sub_1C006F22C()
{
  unint64_t result = qword_1EB867910;
  if (!qword_1EB867910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB867910);
  }
  return result;
}

unint64_t sub_1C006F288()
{
  unint64_t result = qword_1EB867900;
  if (!qword_1EB867900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB867900);
  }
  return result;
}

unint64_t sub_1C006F2DC()
{
  unint64_t result = qword_1EB8678F8;
  if (!qword_1EB8678F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8678F8);
  }
  return result;
}

unint64_t sub_1C006F338()
{
  unint64_t result = qword_1EB88BB90;
  if (!qword_1EB88BB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88BB90);
  }
  return result;
}

unint64_t sub_1C006F38C()
{
  unint64_t result = qword_1EB88BB88;
  if (!qword_1EB88BB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88BB88);
  }
  return result;
}

unint64_t sub_1C006F3E8()
{
  unint64_t result = qword_1EB88BAD0;
  if (!qword_1EB88BAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88BAD0);
  }
  return result;
}

unint64_t sub_1C006F43C()
{
  unint64_t result = qword_1EB88BAC8;
  if (!qword_1EB88BAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88BAC8);
  }
  return result;
}

unint64_t sub_1C006F494()
{
  unint64_t result = qword_1EB878570;
  if (!qword_1EB878570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878570);
  }
  return result;
}

unint64_t sub_1C006F4E8()
{
  unint64_t result = qword_1EB878568;
  if (!qword_1EB878568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878568);
  }
  return result;
}

unint64_t sub_1C006F53C()
{
  unint64_t result = qword_1EB878560;
  if (!qword_1EB878560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878560);
  }
  return result;
}

unint64_t sub_1C006F590()
{
  unint64_t result = qword_1EB870DF8;
  if (!qword_1EB870DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB870DF8);
  }
  return result;
}

unint64_t sub_1C006F5EC()
{
  unint64_t result = qword_1EB88BAB8;
  if (!qword_1EB88BAB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88BAB8);
  }
  return result;
}

unint64_t sub_1C006F640()
{
  unint64_t result = qword_1EB88BAB0;
  if (!qword_1EB88BAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88BAB0);
  }
  return result;
}

uint64_t type metadata accessor for ShareAttributionViewItem()
{
  return self;
}

uint64_t sub_1C006F6DC()
{
  swift_getObjectType();
  return sub_1C151886C();
}

uint64_t sub_1C006F72C()
{
  uint64_t v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = sub_1C006F8EC;
  *(void *)(v1 + 24) = v0;
  sub_1C15182FC();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_1C0D47CF0;
  *(void *)(v2 + 24) = v1;
  swift_retain_n();
  swift_retain();
  sub_1C15182EC();
  swift_release_n();
  swift_release();
  return swift_release();
}

uint64_t sub_1C006F830()
{
  swift_getObjectType();
  return sub_1C15187EC();
}

uint64_t sub_1C006F86C()
{
  swift_getObjectType();
  return sub_1C15187FC();
}

void sub_1C006F8EC(char a1)
{
  sub_1BFCA8508(a1, v1);
}

uint64_t sub_1C006F8F4()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ImagePersistenceProvider()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for GenericDataVisualization()
{
  uint64_t result = qword_1EB88B950;
  if (!qword_1EB88B950) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for FormatVisibilityRenderer()
{
  return self;
}

unint64_t sub_1C006F9DC()
{
  unint64_t result = qword_1EB88B948;
  if (!qword_1EB88B948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B948);
  }
  return result;
}

unint64_t sub_1C006FA30()
{
  unint64_t result = qword_1EB87FB88;
  if (!qword_1EB87FB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87FB88);
  }
  return result;
}

unint64_t sub_1C006FA84()
{
  unint64_t result = qword_1EB87FB80;
  if (!qword_1EB87FB80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87FB80);
  }
  return result;
}

unint64_t sub_1C006FAD8(void *a1)
{
  a1[1] = sub_1C006FA30();
  a1[2] = sub_1C006FA84();
  unint64_t result = sub_1C0C63620();
  a1[3] = result;
  return result;
}

uint64_t sub_1C006FB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C02F663C(a1, a2, a3, type metadata accessor for FormatVersionRequirement.Value);
}

unint64_t sub_1C006FB30()
{
  unint64_t result = qword_1EB88B778;
  if (!qword_1EB88B778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B778);
  }
  return result;
}

unint64_t sub_1C006FB84()
{
  unint64_t result = qword_1EB88B770;
  if (!qword_1EB88B770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B770);
  }
  return result;
}

uint64_t sub_1C006FBD8()
{
  uint64_t result = type metadata accessor for FormatSlotDefinition();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_1C006FC6C()
{
  unint64_t result = qword_1EB867688;
  if (!qword_1EB867688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB867688);
  }
  return result;
}

unint64_t sub_1C006FCC8()
{
  unint64_t result = qword_1EB88B6A8;
  if (!qword_1EB88B6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B6A8);
  }
  return result;
}

unint64_t sub_1C006FD1C()
{
  unint64_t result = qword_1EB88B6A0;
  if (!qword_1EB88B6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B6A0);
  }
  return result;
}

uint64_t type metadata accessor for FormatProgressCircleView()
{
  return self;
}

uint64_t sub_1C006FD94@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return FormatPercentFillSpacing.init(from:)(a1, a2);
}

unint64_t sub_1C006FDAC()
{
  unint64_t result = qword_1EB87FB70;
  if (!qword_1EB87FB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87FB70);
  }
  return result;
}

uint64_t FormatPercentFillSpacing.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BFC8AC84(a1, (void (*)(uint64_t))sub_1C006FED4, (uint64_t)&_s10CodingTypeON_198, (uint64_t)&unk_1F1B64498, a2);
}

uint64_t sub_1C006FE3C()
{
  return sub_1C151EB5C();
}

uint64_t sub_1C006FE9C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1BFDE4FB8();
  *a1 = result;
  return result;
}

unint64_t sub_1C006FED4()
{
  unint64_t result = qword_1EB88B690;
  if (!qword_1EB88B690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B690);
  }
  return result;
}

unint64_t sub_1C006FF28()
{
  unint64_t result = qword_1EB88B688;
  if (!qword_1EB88B688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B688);
  }
  return result;
}

unint64_t sub_1C006FF84()
{
  unint64_t result = qword_1EB88B680;
  if (!qword_1EB88B680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B680);
  }
  return result;
}

unint64_t sub_1C006FFD8()
{
  unint64_t result = qword_1EB88B678;
  if (!qword_1EB88B678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B678);
  }
  return result;
}

unint64_t sub_1C007002C()
{
  unint64_t result = qword_1EB8782A0;
  if (!qword_1EB8782A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8782A0);
  }
  return result;
}

unint64_t sub_1C0070080()
{
  unint64_t result = qword_1EB85BE58;
  if (!qword_1EB85BE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85BE58);
  }
  return result;
}

unint64_t sub_1C00700D4()
{
  unint64_t result = qword_1EB878298;
  if (!qword_1EB878298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878298);
  }
  return result;
}

unint64_t sub_1C0070128()
{
  unint64_t result = qword_1EB878290;
  if (!qword_1EB878290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878290);
  }
  return result;
}

unint64_t sub_1C0070184()
{
  unint64_t result = qword_1EB88B660;
  if (!qword_1EB88B660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B660);
  }
  return result;
}

unint64_t sub_1C00701D8()
{
  unint64_t result = qword_1EB88B658;
  if (!qword_1EB88B658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B658);
  }
  return result;
}

unint64_t sub_1C0070234()
{
  unint64_t result = qword_1EB88B648;
  if (!qword_1EB88B648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B648);
  }
  return result;
}

unint64_t sub_1C0070288()
{
  unint64_t result = qword_1EB88B640;
  if (!qword_1EB88B640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B640);
  }
  return result;
}

void sub_1C00702DC(void *a1)
{
  sub_1BFC5DCFC();
}

uint64_t sub_1C0070314()
{
  return sub_1BFC59EF8();
}

uint64_t FormatLayoutViewDebugger.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t FormatLayoutViewDebugger.init(block:)(uint64_t a1, uint64_t a2)
{
  return sub_1C0070390(a1, a2, (uint64_t)&unk_1F1BFE198, (uint64_t)sub_1C0DF00B0);
}

{
  return sub_1C0070390(a1, a2, (uint64_t)&unk_1F1BFE148, (uint64_t)sub_1C0DF00AC);
}

uint64_t sub_1C0070390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(void *)(v4 + 16) = a4;
  *(void *)(v4 + 24) = v8;
  return v4;
}

void *_s8NewsFeed24FormatLayeredMediaFilterO10MonochromeVwxx_0(void *result)
{
  unint64_t v1 = result;
  if ((~*result & 0xF000000000000007) != 0) {
    unint64_t result = (void *)swift_release();
  }
  if ((~v1[1] & 0xF000000000000007) != 0) {
    unint64_t result = (void *)swift_release();
  }
  if ((~v1[2] & 0xF000000000000007) != 0)
  {
    return (void *)swift_release();
  }
  return result;
}

void *sub_1C0070480(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if ((~*a2 & 0xF000000000000007) != 0) {
    swift_retain();
  }
  *a1 = v4;
  uint64_t v5 = a2[1];
  if ((~v5 & 0xF000000000000007) != 0) {
    swift_retain();
  }
  a1[1] = v5;
  uint64_t v6 = a2[2];
  if ((~v6 & 0xF000000000000007) != 0) {
    swift_retain();
  }
  a1[2] = v6;
  return a1;
}

uint64_t sub_1C0070500(void *a1)
{
  return FormatLayeredMediaFilter.encode(to:)(a1);
}

unint64_t sub_1C0070518()
{
  unint64_t result = qword_1EB88B560;
  if (!qword_1EB88B560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B560);
  }
  return result;
}

unint64_t sub_1C007056C()
{
  unint64_t result = qword_1EB867658;
  if (!qword_1EB867658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB867658);
  }
  return result;
}

uint64_t sub_1C00705C0(void *a1)
{
  return FormatLayeredMediaFilter.Monochrome.encode(to:)(a1);
}

unint64_t sub_1C00705D8()
{
  unint64_t result = qword_1EB867650;
  if (!qword_1EB867650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB867650);
  }
  return result;
}

unint64_t sub_1C0070634()
{
  unint64_t result = qword_1EB88B550;
  if (!qword_1EB88B550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B550);
  }
  return result;
}

unint64_t sub_1C0070688()
{
  unint64_t result = qword_1EB88B548;
  if (!qword_1EB88B548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B548);
  }
  return result;
}

unint64_t sub_1C00706DC()
{
  unint64_t result = qword_1EB88B538;
  if (!qword_1EB88B538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B538);
  }
  return result;
}

unint64_t sub_1C0070730(void *a1)
{
  a1[1] = sub_1BFE90C24();
  a1[2] = sub_1BFE57060();
  unint64_t result = sub_1C12AD6CC();
  a1[3] = result;
  return result;
}

id sub_1C0070768@<X0>(id result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v9 = *(void *)(v6 + 56);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v12 = *(void *)(v6 + 72);
  uint64_t v11 = *(void *)(v6 + 80);
  uint64_t v13 = *(void *)(v6 + 88);
  uint64_t v14 = *(void *)(v6 + 96);
  uint64_t v15 = *(void *)(v6 + 104);
  uint64_t v16 = *(void *)(v6 + 112);
  switch(*(unsigned char *)(v6 + 120))
  {
    case 0:
      *(void *)a2 = v9;
      *(void *)(a2 + 8) = v10;
      *(void *)(a2 + 16) = v12;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 49) = 0u;
      unint64_t result = (id)sub_1BFFE54D0(v9, v10, v12, v11, v13, v14, v15, v16, 0);
      break;
    case 1:
      v38[0] = *(void *)(v6 + 56);
      uint64_t v36 = v13;
      uint64_t v37 = v14;
      uint64_t v35 = v11;
      sub_1BFFE54D0(v9, v10, v12, v11, v13, v14, v15, v16, 1);
      sub_1C1517EFC();
      id v18 = sub_1C0EB058C(v38[7]);
      swift_release();
      unint64_t result = (id)sub_1BFFE54B8(v9, v10, v12, v35, v36, v37, v15, v16, 1u);
      if (!v7)
      {
        *(void *)a2 = v18;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(void *)(a2 + 56) = 0;
        *(unsigned char *)(a2 + 64) = 1;
      }
      break;
    case 2:
      uint64_t v34 = &v32;
      v38[0] = (uint64_t)result;
      MEMORY[0x1F4188790](result);
      v31[2] = v38;
      uint64_t v36 = v19;
      uint64_t v37 = v20;
      uint64_t v35 = v21;
      sub_1BFFE54D0(v9, v10, v12, v21, v19, v20, v15, v16, 2);
      uint64_t v22 = sub_1C0182454((void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))sub_1BFF9F240, (uint64_t)v31, v9);
      if (!v7)
      {
        uint64_t v33 = v22;
        swift_bridgeObjectRetain();
        if (v15)
        {
          uint64_t v23 = v16;
          sub_1C129A7C0(v15, v16, v38);
          uint64_t v25 = v9;
          uint64_t v27 = v35;
          uint64_t v26 = v36;
          uint64_t v28 = v37;
          unint64_t result = (id)sub_1BFFE54B8(v25, v10, v12, v35, v36, v37, v15, v23, 2u);
          uint64_t v29 = v38[0];
          uint64_t v30 = v38[1];
        }
        else
        {
          uint64_t v24 = v9;
          uint64_t v26 = v36;
          uint64_t v28 = v37;
          uint64_t v30 = v16;
          uint64_t v27 = v35;
          unint64_t result = (id)sub_1BFFE54B8(v24, v10, v12, v35, v36, v37, 0, v30, 2u);
          uint64_t v29 = 0;
        }
        *(void *)a2 = v33;
        *(void *)(a2 + 8) = v10;
        *(void *)(a2 + 16) = v12;
        *(void *)(a2 + 24) = v27;
        *(void *)(a2 + 32) = v26;
        *(void *)(a2 + 40) = v28;
        *(void *)(a2 + 48) = v29;
        *(void *)(a2 + 56) = v30;
        char v17 = 2;
        goto LABEL_9;
      }
      unint64_t result = (id)sub_1BFFE54B8(v9, v10, v12, v35, v36, v37, v15, v16, 2u);
      break;
    case 3:
      unint64_t result = objc_msgSend(self, sel_bezierPathWithOvalInRect_, a3, a4, a5, a6);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(void *)(a2 + 56) = 0;
      char v17 = 1;
      goto LABEL_9;
    default:
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      char v17 = 3;
LABEL_9:
      *(unsigned char *)(a2 + 64) = v17;
      break;
  }
  return result;
}

unint64_t sub_1C0070B54()
{
  unint64_t result = qword_1EB8617E0;
  if (!qword_1EB8617E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8617E0);
  }
  return result;
}

unint64_t sub_1C0070BA8()
{
  unint64_t result = qword_1EB88B448;
  if (!qword_1EB88B448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B448);
  }
  return result;
}

unint64_t sub_1C0070BFC()
{
  unint64_t result = qword_1EB88B440;
  if (!qword_1EB88B440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B440);
  }
  return result;
}

unint64_t sub_1C0070C50(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1C0070BA8();
  unint64_t result = sub_1C0070BFC();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1C0070C88()
{
  unint64_t result = qword_1EB88B438;
  if (!qword_1EB88B438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B438);
  }
  return result;
}

unint64_t sub_1C0070CDC()
{
  unint64_t result = qword_1EB88B430;
  if (!qword_1EB88B430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B430);
  }
  return result;
}

uint64_t FormatGroupNodeMaskStyle.bind(binder:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *(void *)(v2 + 48);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain_n();
    long long v10 = *(_OWORD *)(v8 + 176);
    long long v68 = *(_OWORD *)(v8 + 160);
    long long v69 = v10;
    long long v70 = *(_OWORD *)(v8 + 192);
    char v71 = *(unsigned char *)(v8 + 208);
    long long v11 = *(_OWORD *)(v8 + 112);
    long long v64 = *(_OWORD *)(v8 + 96);
    long long v65 = v11;
    long long v12 = *(_OWORD *)(v8 + 144);
    long long v66 = *(_OWORD *)(v8 + 128);
    long long v67 = v12;
    long long v13 = *(_OWORD *)(v8 + 48);
    long long v60 = *(_OWORD *)(v8 + 32);
    long long v61 = v13;
    long long v14 = *(_OWORD *)(v8 + 80);
    long long v62 = *(_OWORD *)(v8 + 64);
    long long v63 = v14;
    sub_1C05DC6FC((uint64_t)&v60);
    FormatGroupNodeMaskStyle.Selector.bind(binder:context:)(a1, a2);
    if (v3)
    {
      sub_1C05DC7FC((uint64_t)&v60);
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = 216; ; i += 184)
    {
      sub_1C05DC7FC((uint64_t)&v60);
      if (!--v9) {
        break;
      }
      long long v16 = *(_OWORD *)(v8 + i);
      long long v17 = *(_OWORD *)(v8 + i + 16);
      long long v18 = *(_OWORD *)(v8 + i + 48);
      long long v62 = *(_OWORD *)(v8 + i + 32);
      long long v63 = v18;
      long long v60 = v16;
      long long v61 = v17;
      long long v19 = *(_OWORD *)(v8 + i + 64);
      long long v20 = *(_OWORD *)(v8 + i + 80);
      long long v21 = *(_OWORD *)(v8 + i + 112);
      long long v66 = *(_OWORD *)(v8 + i + 96);
      long long v67 = v21;
      long long v64 = v19;
      long long v65 = v20;
      long long v22 = *(_OWORD *)(v8 + i + 128);
      long long v23 = *(_OWORD *)(v8 + i + 144);
      long long v24 = *(_OWORD *)(v8 + i + 160);
      char v71 = *(unsigned char *)(v8 + i + 176);
      long long v69 = v23;
      long long v70 = v24;
      long long v68 = v22;
      sub_1C05DC6FC((uint64_t)&v60);
      FormatGroupNodeMaskStyle.Selector.bind(binder:context:)(a1, a2);
    }
    uint64_t v25 = a1;
    uint64_t result = swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v25 = a1;
  }
  int v26 = *(unsigned __int8 *)(v4 + 120);
  if (v26 != 255)
  {
    uint64_t v28 = *(void *)(v4 + 56);
    uint64_t v27 = *(void *)(v4 + 64);
    uint64_t v30 = *(void *)(v4 + 72);
    uint64_t v29 = *(void *)(v4 + 80);
    uint64_t v31 = *(void *)(v4 + 88);
    uint64_t v32 = *(void *)(v4 + 96);
    uint64_t v33 = *(void *)(v4 + 104);
    uint64_t v34 = *(void *)(v4 + 112);
    *(void *)&long long v60 = v28;
    *((void *)&v60 + 1) = v27;
    *(void *)&long long v61 = v30;
    *((void *)&v61 + 1) = v29;
    *(void *)&long long v62 = v31;
    *((void *)&v62 + 1) = v32;
    *(void *)&long long v63 = v33;
    *((void *)&v63 + 1) = v34;
    LOBYTE(v64) = v26;
    uint64_t v52 = v29;
    uint64_t v54 = v31;
    uint64_t v56 = v32;
    uint64_t v58 = v33;
    uint64_t v72 = v34;
    sub_1BFFE54D0(v28, v27, v30, v29, v31, v32, v33, v34, v26);
    FormatGroupNodeMaskPath.bind(binder:context:)(v25, a2);
    if (v3) {
      return sub_1BFFE54B8(v28, v27, v30, v52, v54, v56, v58, v72, v26);
    }
    uint64_t result = sub_1BFFE54B8(v28, v27, v30, v52, v54, v56, v58, v72, v26);
  }
  uint64_t v35 = *(void *)(v4 + 128);
  uint64_t v36 = v25;
  if (!v35 || (uint64_t result = sub_1C04CDF64(v25, a2, v35), !v3))
  {
    int v37 = *(unsigned __int8 *)(v4 + 216);
    if (v37 != 254)
    {
      uint64_t v38 = a2;
      uint64_t v51 = *(void *)(v4 + 136);
      uint64_t v53 = *(void *)(v4 + 144);
      uint64_t v55 = *(void *)(v4 + 152);
      uint64_t v39 = *(void *)(v4 + 168);
      uint64_t v72 = *(void *)(v4 + 160);
      uint64_t v40 = *(void *)(v4 + 192);
      uint64_t v57 = *(void *)(v4 + 184);
      uint64_t v59 = *(void *)(v4 + 176);
      uint64_t v41 = *(void *)(v4 + 200);
      uint64_t v42 = *(void *)(v4 + 208);
      *(void *)&long long v60 = v39;
      swift_retain();
      FormatColor.bind(binder:context:)(v36, v38);
      if (v3)
      {
        return sub_1BFEF8738(v51, v53, v55, v72, v39, v59, v57, v40, v41, v42, v37);
      }
      else
      {
        uint64_t v43 = v36;
        uint64_t v44 = v39;
        uint64_t v45 = v72;
        switch(v37)
        {
          case 0:
            unsigned __int8 v50 = 0;
            goto LABEL_26;
          case 1:
            sub_1C053FAE0(v43, v38);
            char v46 = 1;
            goto LABEL_25;
          case 2:
            uint64_t v47 = v43;
            sub_1C053FAE0(v43, v38);
            sub_1C053FAE0(v47, v38);
            return sub_1BFEF8738(v51, v53, v55, v45, v44, v59, v57, v40, v41, v42, 2u);
          case 3:
            uint64_t v48 = v43;
            sub_1C053FAE0(v43, v38);
            sub_1C053FAE0(v48, v38);
            return sub_1BFEF8738(v51, v53, v55, v45, v44, v59, v57, v40, v41, v42, 3u);
          case 4:
            sub_1C053FAE0(v43, v38);
            char v46 = 4;
LABEL_25:
            unsigned __int8 v50 = v46;
LABEL_26:
            uint64_t result = sub_1BFEF8738(v51, v53, v55, v45, v44, v59, v57, v40, v41, v42, v50);
            break;
          case 5:
            uint64_t v49 = v43;
            sub_1C053FAE0(v43, v38);
            sub_1C053FAE0(v49, v38);
            uint64_t result = sub_1BFEF8738(v51, v53, v55, v45, v44, v59, v57, v40, v41, v42, 5u);
            break;
          default:
            uint64_t result = sub_1BFEF8738(v51, v53, v55, v72, v72, v59, v57, v57, v41, v42, 0xFFu);
            break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1C00712C0()
{
  unint64_t result = qword_1EB88B420;
  if (!qword_1EB88B420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B420);
  }
  return result;
}

unint64_t sub_1C0071314()
{
  unint64_t result = qword_1EB88B418;
  if (!qword_1EB88B418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B418);
  }
  return result;
}

unint64_t sub_1C0071368()
{
  unint64_t result = qword_1EB878260;
  if (!qword_1EB878260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878260);
  }
  return result;
}

unint64_t sub_1C00713BC()
{
  unint64_t result = qword_1EB878258;
  if (!qword_1EB878258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878258);
  }
  return result;
}

unint64_t sub_1C0071410(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1C0071368();
  unint64_t result = sub_1C00713BC();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1C0071440()
{
  uint64_t result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C0071524(uint64_t a1)
{
  uint64_t result = sub_1BFF30570(&qword_1EB878188, (void (*)(uint64_t))type metadata accessor for FormatGroupLayoutFactory.Bound);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C007157C(void *a1)
{
  return FormatFlexibleExpression.encode(to:)(a1);
}

unint64_t sub_1C0071594()
{
  unint64_t result = qword_1EB85BE50;
  if (!qword_1EB85BE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85BE50);
  }
  return result;
}

uint64_t sub_1C00715E8(void *a1)
{
  return FormatFlexibleExpression.Direction.encode(to:)(a1);
}

unint64_t sub_1C0071600()
{
  unint64_t result = qword_1EB85BE48;
  if (!qword_1EB85BE48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85BE48);
  }
  return result;
}

unint64_t sub_1C007165C()
{
  unint64_t result = qword_1EB894658;
  if (!qword_1EB894658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB894658);
  }
  return result;
}

unint64_t sub_1C00716B0()
{
  unint64_t result = qword_1EB894650;
  if (!qword_1EB894650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB894650);
  }
  return result;
}

unint64_t sub_1C007170C()
{
  unint64_t result = qword_1EB88B408;
  if (!qword_1EB88B408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B408);
  }
  return result;
}

unint64_t sub_1C0071760()
{
  unint64_t result = qword_1EB88B400;
  if (!qword_1EB88B400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B400);
  }
  return result;
}

uint64_t type metadata accessor for FormatCustomNodeRenderer()
{
  return self;
}

uint64_t type metadata accessor for FormatCommandActionValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FormatCommandActionValue.CaseValue()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1C0071810()
{
  unint64_t result = qword_1EB867610;
  if (!qword_1EB867610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB867610);
  }
  return result;
}

unint64_t sub_1C0071864()
{
  unint64_t result = qword_1EB867608;
  if (!qword_1EB867608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB867608);
  }
  return result;
}

uint64_t sub_1C00718B8()
{
  return MEMORY[0x1E4FBB398];
}

uint64_t sub_1C00718C4()
{
  return MEMORY[0x1E4FBB3B0];
}

uint64_t type metadata accessor for FormatButtonNodeRenderer()
{
  return self;
}

unint64_t sub_1C00718F4()
{
  unint64_t result = qword_1EB8606C0;
  if (!qword_1EB8606C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8606C0);
  }
  return result;
}

unint64_t sub_1C0071948()
{
  unint64_t result = qword_1EB85F188;
  if (!qword_1EB85F188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85F188);
  }
  return result;
}

unint64_t sub_1C007199C()
{
  unint64_t result = qword_1EB8606B8;
  if (!qword_1EB8606B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8606B8);
  }
  return result;
}

unint64_t sub_1C00719F0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1C0071948();
  unint64_t result = sub_1C007199C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1C0071A28()
{
  unint64_t result = qword_1EB8675F8;
  if (!qword_1EB8675F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8675F8);
  }
  return result;
}

unint64_t sub_1C0071A7C()
{
  unint64_t result = qword_1EB8675F0;
  if (!qword_1EB8675F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8675F0);
  }
  return result;
}

unint64_t sub_1C0071AD8()
{
  unint64_t result = qword_1EB8675E0;
  if (!qword_1EB8675E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8675E0);
  }
  return result;
}

unint64_t sub_1C0071B2C()
{
  unint64_t result = qword_1EB8675D8;
  if (!qword_1EB8675D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8675D8);
  }
  return result;
}

unint64_t sub_1C0071B80()
{
  unint64_t result = qword_1EB878010;
  if (!qword_1EB878010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878010);
  }
  return result;
}

unint64_t sub_1C0071BD4()
{
  unint64_t result = qword_1EB878000;
  if (!qword_1EB878000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB878000);
  }
  return result;
}

uint64_t type metadata accessor for CoverChannelViewRenderer()
{
  return self;
}

unint64_t sub_1C0071C4C()
{
  unint64_t result = qword_1EB88B2F0;
  if (!qword_1EB88B2F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88B2F0);
  }
  return result;
}

uint64_t sub_1C0071CA0()
{
  uint64_t result = type metadata accessor for WebEmbedDataVisualization();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for WebEmbedDatastoreUpdate()
{
  uint64_t result = qword_1EB88B258;
  if (!qword_1EB88B258) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for WebEmbedDataSourceCache()
{
  return self;
}

void sub_1C0071DA8(uint64_t a1)
{
}

void sub_1C0071DDC()
{
  sub_1BFF0A354();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata accessor for SportsDataConfiguration()
{
  uint64_t result = qword_1EB88B0E8;
  if (!qword_1EB88B0E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for PuzzleStatisticCategory(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, (uint64_t *)&unk_1EB882AC0);
}

uint64_t sub_1C0071EE4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C0071F2C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1C0071EE4(&qword_1EB882AB8, a2, (void (*)(uint64_t))type metadata accessor for PuzzleGameCenterService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C0071F84()
{
  sub_1BFC4FDC4(v0[2], v0[3]);
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1C0071FE8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](sub_1C0071F84, v2, 0);
}

uint64_t sub_1C007200C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 168) = v2;
  uint64_t v3 = *(void *)(v1 + 128);
  if (v2) {
    uint64_t v4 = sub_1C10AC88C;
  }
  else {
    uint64_t v4 = sub_1BFC4CFF8;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

uint64_t sub_1C007212C()
{
  swift_getObjectType();
  return sub_1C15187EC();
}

uint64_t type metadata accessor for PerformanceIssueService()
{
  return self;
}

uint64_t sub_1C0072190()
{
  uint64_t result = type metadata accessor for InternalErrorViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for InternalErrorViewLayout.Context()
{
  uint64_t result = qword_1EB877DE8;
  if (!qword_1EB877DE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1C00722A0()
{
  unint64_t result = qword_1EB88AFD8;
  if (!qword_1EB88AFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AFD8);
  }
  return result;
}

unint64_t sub_1C00722F4()
{
  unint64_t result = qword_1EB88AFD0;
  if (!qword_1EB88AFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AFD0);
  }
  return result;
}

unint64_t sub_1C0072350()
{
  unint64_t result = qword_1EB88AFC8;
  if (!qword_1EB88AFC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AFC8);
  }
  return result;
}

unint64_t sub_1C00723A4()
{
  unint64_t result = qword_1EB88AFC0;
  if (!qword_1EB88AFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AFC0);
  }
  return result;
}

unint64_t sub_1C0072400()
{
  unint64_t result = qword_1EB88AFB0;
  if (!qword_1EB88AFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AFB0);
  }
  return result;
}

unint64_t sub_1C0072454()
{
  unint64_t result = qword_1EB88AFA8;
  if (!qword_1EB88AFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AFA8);
  }
  return result;
}

unint64_t sub_1C00724A8()
{
  unint64_t result = qword_1EB877DD8;
  if (!qword_1EB877DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB877DD8);
  }
  return result;
}

unint64_t sub_1C00724FC()
{
  unint64_t result = qword_1EB85BE38;
  if (!qword_1EB85BE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85BE38);
  }
  return result;
}

uint64_t sub_1C0072550(void *a1)
{
  return FormatTextLineBreakMode.encode(to:)(a1);
}

unint64_t sub_1C0072568()
{
  unint64_t result = qword_1EB85BE30;
  if (!qword_1EB85BE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85BE30);
  }
  return result;
}

unint64_t sub_1C00725C4()
{
  unint64_t result = qword_1EB88AEE0;
  if (!qword_1EB88AEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AEE0);
  }
  return result;
}

unint64_t sub_1C0072618()
{
  unint64_t result = qword_1EB88AED8;
  if (!qword_1EB88AED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AED8);
  }
  return result;
}

unint64_t sub_1C0072674()
{
  unint64_t result = qword_1EB88AEC8;
  if (!qword_1EB88AEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AEC8);
  }
  return result;
}

unint64_t sub_1C00726C8()
{
  unint64_t result = qword_1EB88AEC0;
  if (!qword_1EB88AEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AEC0);
  }
  return result;
}

unint64_t sub_1C007271C()
{
  unint64_t result = qword_1EB877DC0;
  if (!qword_1EB877DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB877DC0);
  }
  return result;
}

uint64_t sub_1C0072770(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

unint64_t sub_1C00727CC()
{
  unint64_t result = qword_1EB88AEA0;
  if (!qword_1EB88AEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AEA0);
  }
  return result;
}

unint64_t sub_1C0072820()
{
  unint64_t result = qword_1EB88AE98;
  if (!qword_1EB88AE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AE98);
  }
  return result;
}

unint64_t sub_1C007287C()
{
  unint64_t result = qword_1EB88AE88;
  if (!qword_1EB88AE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AE88);
  }
  return result;
}

unint64_t sub_1C00728D0()
{
  unint64_t result = qword_1EB88AE80;
  if (!qword_1EB88AE80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AE80);
  }
  return result;
}

unint64_t sub_1C007292C()
{
  unint64_t result = qword_1EB88AE70;
  if (!qword_1EB88AE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AE70);
  }
  return result;
}

unint64_t sub_1C0072980()
{
  unint64_t result = qword_1EB88AE68;
  if (!qword_1EB88AE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AE68);
  }
  return result;
}

uint64_t sub_1C00729D4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return FormatPercentFillSizing.init(from:)(a1, a2);
}

unint64_t sub_1C00729EC()
{
  unint64_t result = qword_1EB87C160;
  if (!qword_1EB87C160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87C160);
  }
  return result;
}

unint64_t sub_1C0072A48()
{
  unint64_t result = qword_1EB88AE58;
  if (!qword_1EB88AE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AE58);
  }
  return result;
}

unint64_t sub_1C0072A9C()
{
  unint64_t result = qword_1EB88AE50;
  if (!qword_1EB88AE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AE50);
  }
  return result;
}

unint64_t sub_1C0072AF0()
{
  unint64_t result = qword_1EB88AE48;
  if (!qword_1EB88AE48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AE48);
  }
  return result;
}

uint64_t sub_1C0072B44()
{
  uint64_t result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t type metadata accessor for FormatLayoutViewFactory()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for FormatLayeredMediaRatio(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = -(char)a2;
        break;
    }
  }
  return result;
}

uint64_t sub_1C0072D20@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return FormatLayeredMediaRatio.init(from:)(a1, a2);
}

unint64_t sub_1C0072D38()
{
  unint64_t result = qword_1EB870D90;
  if (!qword_1EB870D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB870D90);
  }
  return result;
}

uint64_t sub_1C0072D8C()
{
  if (*v0) {
    return 1885433183;
  }
  else {
    return 0x676E69646E6962;
  }
}

unint64_t sub_1C0072DC8()
{
  unint64_t result = qword_1EB88AE38;
  if (!qword_1EB88AE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AE38);
  }
  return result;
}

unint64_t sub_1C0072E1C()
{
  unint64_t result = qword_1EB88AE30;
  if (!qword_1EB88AE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AE30);
  }
  return result;
}

unint64_t sub_1C0072E70()
{
  unint64_t result = qword_1EB88AE28;
  if (!qword_1EB88AE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AE28);
  }
  return result;
}

uint64_t sub_1C0072EC4(void *a1)
{
  return FormatIssueCoverContent.encode(to:)(a1);
}

unint64_t sub_1C0072EDC()
{
  unint64_t result = qword_1EB860698;
  if (!qword_1EB860698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB860698);
  }
  return result;
}

void sub_1C0072F30(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x676E69646E6962;
  if (*v1) {
    uint64_t v2 = 0x726F7463656C6573;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1C0072F70()
{
  return sub_1C151EAEC();
}

unint64_t sub_1C0072FC0()
{
  unint64_t result = qword_1EB867450;
  if (!qword_1EB867450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB867450);
  }
  return result;
}

uint64_t sub_1C0073014(void *a1)
{
  return FormatIssueCoverBinding.encode(to:)(a1);
}

unint64_t sub_1C007302C()
{
  unint64_t result = qword_1EB860688;
  if (!qword_1EB860688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB860688);
  }
  return result;
}

uint64_t FormatIssueCoverBinding.encode(to:)(void *a1)
{
  return sub_1BFC55F54(a1, (uint64_t)&type metadata for FormatIssueCoverBinding, (void (*)(void, char *))sub_1C0680748, (void (*)(uint64_t, char *))sub_1BFC4B934);
}

void sub_1C00730C8(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x70756F7267;
  if (*v1) {
    uint64_t v2 = 0x6575737369;
  }
  *a1 = v2;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_1C00730F8()
{
  return sub_1C151EAEC();
}

unint64_t sub_1C0073148()
{
  unint64_t result = qword_1EB867438;
  if (!qword_1EB867438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB867438);
  }
  return result;
}

uint64_t type metadata accessor for FormatImageNodeRenderer()
{
  return self;
}

uint64_t type metadata accessor for FormatGroupNodeRenderer()
{
  return self;
}

unint64_t sub_1C00731E4()
{
  unint64_t result = qword_1EB860678;
  if (!qword_1EB860678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB860678);
  }
  return result;
}

unint64_t sub_1C0073240()
{
  unint64_t result = qword_1EB88AE00;
  if (!qword_1EB88AE00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AE00);
  }
  return result;
}

unint64_t sub_1C0073294()
{
  unint64_t result = qword_1EB88ADF8;
  if (!qword_1EB88ADF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88ADF8);
  }
  return result;
}

unint64_t sub_1C00732E8()
{
  unint64_t result = qword_1EB882F38;
  if (!qword_1EB882F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB882F38);
  }
  return result;
}

unint64_t sub_1C007333C(void *a1)
{
  a1[1] = sub_1BFD0C4B4();
  a1[2] = sub_1BFD3C1C8();
  unint64_t result = sub_1C0D3CC0C();
  a1[3] = result;
  return result;
}

unint64_t sub_1C0073374(void *a1)
{
  a1[1] = sub_1BFE3D1DC();
  a1[2] = sub_1BFF8F65C();
  unint64_t result = sub_1C125CB50();
  a1[3] = result;
  return result;
}

unint64_t sub_1C00733AC()
{
  unint64_t result = qword_1EB87F7E0;
  if (!qword_1EB87F7E0)
  {
    sub_1BFFF75C0();
    sub_1BFDC77B8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87F7E0);
  }
  return result;
}

unint64_t sub_1C007341C()
{
  unint64_t result = qword_1EB877B08;
  if (!qword_1EB877B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB877B08);
  }
  return result;
}

unint64_t sub_1C0073484()
{
  unint64_t result = qword_1EB88ACE0;
  if (!qword_1EB88ACE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88ACE0);
  }
  return result;
}

unint64_t sub_1C00734D8()
{
  unint64_t result = qword_1EB88ACD8;
  if (!qword_1EB88ACD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88ACD8);
  }
  return result;
}

ValueMetadata *type metadata accessor for FollowingCommandContext()
{
  return &type metadata for FollowingCommandContext;
}

uint64_t FeatureAvailabilityType.improvedBlockingBehavior.getter()
{
  return 0;
}

uint64_t dispatch thunk of FeatureAvailabilityType.narrativeAudio.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

void sub_1C0073558()
{
  sub_1BFF00BEC();
  if (v0 <= 0x3F)
  {
    sub_1BFECFC20(319);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for WebEmbedViewController(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, qword_1EB8955A8);
}

uint64_t type metadata accessor for WebEmbedDataSourceJson()
{
  uint64_t result = qword_1EB88ABD0;
  if (!qword_1EB88ABD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C007374C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for PuzzleLeaderboardEntry()
{
  uint64_t result = qword_1EB884A98;
  if (!qword_1EB884A98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1C00737F8()
{
  unint64_t result = qword_1EB877A00;
  if (!qword_1EB877A00)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB877A00);
  }
  return result;
}

unint64_t sub_1C0073850()
{
  unint64_t result = qword_1EB8779F0;
  if (!qword_1EB8779F0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB8779F0);
  }
  return result;
}

uint64_t type metadata accessor for GapOfflineViewRenderer()
{
  return self;
}

uint64_t type metadata accessor for FormatViewNodeRenderer()
{
  return self;
}

unint64_t sub_1C00738F0()
{
  unint64_t result = qword_1EB88ABB0;
  if (!qword_1EB88ABB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88ABB0);
  }
  return result;
}

unint64_t sub_1C0073944()
{
  unint64_t result = qword_1EB87F680;
  if (!qword_1EB87F680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87F680);
  }
  return result;
}

unint64_t sub_1C0073998()
{
  unint64_t result = qword_1EB87F678;
  if (!qword_1EB87F678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87F678);
  }
  return result;
}

unint64_t sub_1C00739EC(void *a1)
{
  a1[1] = sub_1C0073944();
  a1[2] = sub_1C0073998();
  unint64_t result = sub_1C01AF37C();
  a1[3] = result;
  return result;
}

uint64_t sub_1C0073A24()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C0073A40()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for FormatTextNodeRenderer()
{
  return self;
}

unint64_t sub_1C0073A80()
{
  unint64_t result = qword_1EB88AB20[0];
  if (!qword_1EB88AB20[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB88AB20);
  }
  return result;
}

unint64_t sub_1C0073AD4(void *a1)
{
  a1[1] = sub_1BFD361E4();
  a1[2] = sub_1BFD56F34();
  unint64_t result = sub_1C00F59BC();
  a1[3] = result;
  return result;
}

unint64_t sub_1C0073B14()
{
  unint64_t result = qword_1EB88AB08;
  if (!qword_1EB88AB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AB08);
  }
  return result;
}

unint64_t sub_1C0073B68()
{
  unint64_t result = qword_1EB88AB00;
  if (!qword_1EB88AB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AB00);
  }
  return result;
}

void sub_1C0073BBC(uint64_t a1)
{
}

uint64_t type metadata accessor for FormatPostPurchaseData()
{
  uint64_t result = qword_1EB87F5F0;
  if (!qword_1EB87F5F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1C0073C44()
{
  unint64_t result = qword_1EB85BDA0;
  if (!qword_1EB85BDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85BDA0);
  }
  return result;
}

unint64_t sub_1C0073C98()
{
  unint64_t result = qword_1EB85BD98;
  if (!qword_1EB85BD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85BD98);
  }
  return result;
}

unint64_t sub_1C0073CF4()
{
  unint64_t result = qword_1EB8775D8;
  if (!qword_1EB8775D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8775D8);
  }
  return result;
}

unint64_t sub_1C0073D48()
{
  unint64_t result = qword_1EB8775D0;
  if (!qword_1EB8775D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8775D0);
  }
  return result;
}

unint64_t sub_1C0073DA4()
{
  unint64_t result = qword_1EB88AA80;
  if (!qword_1EB88AA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AA80);
  }
  return result;
}

unint64_t sub_1C0073DF8()
{
  unint64_t result = qword_1EB88AA78;
  if (!qword_1EB88AA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88AA78);
  }
  return result;
}

uint64_t type metadata accessor for FormatMicaNodeRenderer()
{
  return self;
}

unint64_t sub_1C0073E78()
{
  unint64_t result = qword_1EB88A9A8;
  if (!qword_1EB88A9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A9A8);
  }
  return result;
}

unint64_t sub_1C0073ECC()
{
  unint64_t result = qword_1EB88A9A0;
  if (!qword_1EB88A9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A9A0);
  }
  return result;
}

uint64_t sub_1C0073F20(uint64_t a1, uint64_t a2)
{
  return sub_1BFE4C460(&qword_1EB88A898, a2, (void (*)(uint64_t))type metadata accessor for FormatLayoutAttributes);
}

uint64_t sub_1C0073F68(uint64_t a1, uint64_t a2)
{
  return sub_1BFE4C460(&qword_1EB88A890, a2, (void (*)(uint64_t))type metadata accessor for FormatLayoutAttributes);
}

uint64_t sub_1C0073FB0(uint64_t a1, uint64_t a2)
{
  return sub_1BFE4C460(&qword_1EB88A8B0, a2, (void (*)(uint64_t))type metadata accessor for FormatLayoutAttributes);
}

uint64_t sub_1C0073FF8(uint64_t a1, uint64_t a2)
{
  return sub_1BFE4C460(&qword_1EB88A8A8, a2, (void (*)(uint64_t))type metadata accessor for FormatLayoutAttributes);
}

uint64_t sub_1C0074040@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1BFC84768(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_1C0074074()
{
  unint64_t result = qword_1EB88A888;
  if (!qword_1EB88A888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A888);
  }
  return result;
}

unint64_t sub_1C00740C8()
{
  unint64_t result = qword_1EB88A880;
  if (!qword_1EB88A880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A880);
  }
  return result;
}

unint64_t sub_1C007411C()
{
  unint64_t result = qword_1EB88A878;
  if (!qword_1EB88A878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A878);
  }
  return result;
}

unint64_t sub_1C0074170()
{
  unint64_t result = qword_1EB860628;
  if (!qword_1EB860628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB860628);
  }
  return result;
}

unint64_t sub_1C00741C4()
{
  unint64_t result = qword_1EB860618;
  if (!qword_1EB860618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB860618);
  }
  return result;
}

void sub_1C0074218()
{
  if (!qword_1EB88A870)
  {
    unint64_t v0 = sub_1C151FD8C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB88A870);
    }
  }
}

uint64_t getEnumTagSinglePayload for FormatImageNodeRequest(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1C00742CC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return FormatImageNodeRequest.init(from:)(a1, a2);
}

unint64_t sub_1C00742EC()
{
  unint64_t result = qword_1EB882F08;
  if (!qword_1EB882F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB882F08);
  }
  return result;
}

unint64_t sub_1C0074340()
{
  unint64_t result = qword_1EB88A860;
  if (!qword_1EB88A860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A860);
  }
  return result;
}

unint64_t sub_1C0074394()
{
  unint64_t result = qword_1EB88A858;
  if (!qword_1EB88A858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A858);
  }
  return result;
}

unint64_t sub_1C00743E8()
{
  unint64_t result = qword_1EB88A788;
  if (!qword_1EB88A788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A788);
  }
  return result;
}

unint64_t sub_1C007443C()
{
  unint64_t result = qword_1EB88A780;
  if (!qword_1EB88A780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A780);
  }
  return result;
}

uint64_t sub_1C0074490(void *a1)
{
  return FormatFontMetricSizing.encode(to:)(a1);
}

unint64_t sub_1C00744A8()
{
  unint64_t result = qword_1EB860610;
  if (!qword_1EB860610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB860610);
  }
  return result;
}

unint64_t sub_1C0074504()
{
  unint64_t result = qword_1EB88A768;
  if (!qword_1EB88A768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A768);
  }
  return result;
}

unint64_t sub_1C0074558()
{
  unint64_t result = qword_1EB88A760;
  if (!qword_1EB88A760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A760);
  }
  return result;
}

unint64_t sub_1C00745AC()
{
  unint64_t result = qword_1EB88A738;
  if (!qword_1EB88A738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A738);
  }
  return result;
}

unint64_t sub_1C0074600(void *a1)
{
  a1[1] = sub_1BFD94408();
  a1[2] = sub_1BFDD50D8();
  unint64_t result = sub_1C14162F4();
  a1[3] = result;
  return result;
}

void sub_1C0074638()
{
  sub_1BFE0C89C(319, (unint64_t *)&qword_1EB88C798, (void (*)(uint64_t))type metadata accessor for FormatArticleThumbnailImage);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1C0074704()
{
  sub_1BFF97C40();
  if (v0 <= 0x3F)
  {
    sub_1BFE0E22C(319);
    if (v1 <= 0x3F)
    {
      sub_1BFF00BEC();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

unint64_t sub_1C0074828()
{
  unint64_t result = qword_1EB88A540;
  if (!qword_1EB88A540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A540);
  }
  return result;
}

unint64_t sub_1C007487C()
{
  unint64_t result = qword_1EB88A538;
  if (!qword_1EB88A538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A538);
  }
  return result;
}

uint64_t type metadata accessor for CoverIssueViewRenderer()
{
  return self;
}

uint64_t dispatch thunk of SharedItemManagerType.add(observer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of SharedItemManagerType.itemArticleIDs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata accessor for PuzzleStatsStateStore()
{
  return self;
}

ValueMetadata *type metadata accessor for OpenSportEventContext()
{
  return &type metadata for OpenSportEventContext;
}

unint64_t sub_1C0074954()
{
  unint64_t result = qword_1EB88A520;
  if (!qword_1EB88A520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A520);
  }
  return result;
}

unint64_t sub_1C00749A8()
{
  unint64_t result = qword_1EB882EF0;
  if (!qword_1EB882EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB882EF0);
  }
  return result;
}

unsigned char *_s6ActionOwst_2(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        break;
      case 2:
        *(_WORD *)unint64_t result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = 0;
        break;
      case 2:
        *(_WORD *)unint64_t result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)unint64_t result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1C0074A98(void *a1)
{
  return FormatWebEmbedBinding.Action.init(from:)(a1);
}

unint64_t sub_1C0074AB0()
{
  unint64_t result = qword_1EB88A518;
  if (!qword_1EB88A518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A518);
  }
  return result;
}

uint64_t FormatWebEmbedBinding.Action.init(from:)(void *a1)
{
  return sub_1BFD3F064(a1, (void (*)(uint64_t))sub_1C0074BAC, (uint64_t)&_s10CodingTypeON_2, (uint64_t)&unk_1F1B88CE0);
}

uint64_t sub_1C0074B40()
{
  return sub_1C151EB5C();
}

uint64_t sub_1C0074BA0@<X0>(BOOL *a1@<X8>)
{
  return sub_1BFD59FB4(a1);
}

unint64_t sub_1C0074BAC()
{
  unint64_t result = qword_1EB88A510;
  if (!qword_1EB88A510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A510);
  }
  return result;
}

unint64_t sub_1C0074C00()
{
  unint64_t result = qword_1EB88A508;
  if (!qword_1EB88A508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A508);
  }
  return result;
}

uint64_t sub_1C0074C54@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1BFCA1778(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_1C0074C88()
{
  unint64_t result = qword_1EB88A4E0;
  if (!qword_1EB88A4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A4E0);
  }
  return result;
}

unint64_t sub_1C0074CDC()
{
  unint64_t result = qword_1EB88A4D8;
  if (!qword_1EB88A4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A4D8);
  }
  return result;
}

unint64_t sub_1C0074D30()
{
  unint64_t result = qword_1EB88A4D0;
  if (!qword_1EB88A4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A4D0);
  }
  return result;
}

uint64_t sub_1C0074D84(uint64_t a1, uint64_t a2, char a3, char a4)
{
  if (a4)
  {
    char v4 = a3 & 1;
    return sub_1BFE94AB4(a1, a2, v4);
  }
  else
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1C0074DE4(uint64_t a1, uint64_t a2, char a3, char a4)
{
  if (a4)
  {
    char v4 = a3 & 1;
    return sub_1BFE94AD4(a1, a2, v4);
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1C0074E44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatVideoPlayerLive.init(from:)(a1, a2);
}

unint64_t sub_1C0074E5C()
{
  unint64_t result = qword_1EB87F3A8;
  if (!qword_1EB87F3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87F3A8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FormatVideoPlayerLive.CodingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1C0074F7C()
{
  return sub_1C151EB5C();
}

unint64_t sub_1C0074FDC()
{
  unint64_t result = qword_1EB87F3A0;
  if (!qword_1EB87F3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87F3A0);
  }
  return result;
}

unint64_t sub_1C0075030()
{
  unint64_t result = qword_1EB87F398;
  if (!qword_1EB87F398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87F398);
  }
  return result;
}

uint64_t type metadata accessor for FormatSwitchListValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C007509C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C00750B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C00750D4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C00750F0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C007510C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C0075128()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for FormatSponsoredBanner()
{
  return self;
}

unint64_t sub_1C0075168()
{
  unint64_t result = qword_1EB877100[0];
  if (!qword_1EB877100[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB877100);
  }
  return result;
}

unint64_t sub_1C00751BC()
{
  unint64_t result = qword_1EB8770F8;
  if (!qword_1EB8770F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8770F8);
  }
  return result;
}

uint64_t sub_1C0075214@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return FormatHeadlineBinding.URL.init(from:)(a1, a2);
}

unint64_t sub_1C007522C()
{
  unint64_t result = qword_1EB88A218;
  if (!qword_1EB88A218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A218);
  }
  return result;
}

uint64_t FormatHeadlineBinding.URL.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1BFDD7B40(a1, (void (*)(uint64_t))sub_1C007534C, (uint64_t)&_s3URLO10CodingTypeON_0, (uint64_t)&unk_1F1B85830, a2);
}

uint64_t sub_1C00752BC()
{
  return sub_1C151EB5C();
}

uint64_t sub_1C007531C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1BFC42830();
  *a1 = result;
  return result;
}

unint64_t sub_1C007534C()
{
  unint64_t result = qword_1EB88A210;
  if (!qword_1EB88A210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A210);
  }
  return result;
}

unint64_t sub_1C00753A0()
{
  unint64_t result = qword_1EB88A208;
  if (!qword_1EB88A208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A208);
  }
  return result;
}

unint64_t sub_1C00753FC()
{
  unint64_t result = qword_1EB88A1E0;
  if (!qword_1EB88A1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A1E0);
  }
  return result;
}

unint64_t sub_1C0075450()
{
  unint64_t result = qword_1EB88A1D8;
  if (!qword_1EB88A1D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A1D8);
  }
  return result;
}

unint64_t sub_1C00754AC()
{
  unint64_t result = qword_1EB88A1C8;
  if (!qword_1EB88A1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A1C8);
  }
  return result;
}

unint64_t sub_1C0075500()
{
  unint64_t result = qword_1EB88A1C0;
  if (!qword_1EB88A1C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A1C0);
  }
  return result;
}

unint64_t sub_1C0075554()
{
  unint64_t result = qword_1EB88A0C8;
  if (!qword_1EB88A0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A0C8);
  }
  return result;
}

unint64_t sub_1C00755A8()
{
  unint64_t result = qword_1EB88A0C0;
  if (!qword_1EB88A0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A0C0);
  }
  return result;
}

unint64_t sub_1C0075604()
{
  unint64_t result = qword_1EB88A0B0;
  if (!qword_1EB88A0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A0B0);
  }
  return result;
}

unint64_t sub_1C0075658()
{
  unint64_t result = qword_1EB88A0A8;
  if (!qword_1EB88A0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A0A8);
  }
  return result;
}

unint64_t sub_1C00756B4()
{
  unint64_t result = qword_1EB88A098;
  if (!qword_1EB88A098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A098);
  }
  return result;
}

unint64_t sub_1C0075708()
{
  unint64_t result = qword_1EB88A090;
  if (!qword_1EB88A090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A090);
  }
  return result;
}

void sub_1C007575C()
{
  sub_1BFEBC1C4(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for FormatMetadata();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_1C0075850()
{
  unint64_t result = qword_1EB85BCD8;
  if (!qword_1EB85BCD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85BCD8);
  }
  return result;
}

unint64_t sub_1C00758A4()
{
  unint64_t result = qword_1EB85BCC0[0];
  if (!qword_1EB85BCC0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB85BCC0);
  }
  return result;
}

unint64_t sub_1C00758F8()
{
  unint64_t result = qword_1EB866D60;
  if (!qword_1EB866D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB866D60);
  }
  return result;
}

unint64_t sub_1C007594C()
{
  unint64_t result = qword_1EB866D58;
  if (!qword_1EB866D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB866D58);
  }
  return result;
}

unint64_t sub_1C00759A8()
{
  unint64_t result = qword_1EB866D20;
  if (!qword_1EB866D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB866D20);
  }
  return result;
}

unint64_t sub_1C00759FC()
{
  unint64_t result = qword_1EB866D18;
  if (!qword_1EB866D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB866D18);
  }
  return result;
}

unint64_t sub_1C0075A58()
{
  unint64_t result = qword_1EB88A080;
  if (!qword_1EB88A080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A080);
  }
  return result;
}

unint64_t sub_1C0075AAC()
{
  unint64_t result = qword_1EB88A078;
  if (!qword_1EB88A078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB88A078);
  }
  return result;
}

unint64_t sub_1C0075B08()
{
  unint64_t result = qword_1EB876FF0;
  if (!qword_1EB876FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB876FF0);
  }
  return result;
}

unint64_t sub_1C0075B5C()
{
  unint64_t result = qword_1EB876FE8;
  if (!qword_1EB876FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB876FE8);
  }
  return result;
}

uint64_t sub_1C0075BB0()
{
  uint64_t result = type metadata accessor for FormatContentSlotItemObject();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C0075C44(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C0075C8C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for FormatContentSlotItem();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1C0075CD8()
{
  unint64_t result = qword_1EB889FD0;
  if (!qword_1EB889FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889FD0);
  }
  return result;
}

unint64_t sub_1C0075D2C()
{
  unint64_t result = qword_1EB889FC8;
  if (!qword_1EB889FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889FC8);
  }
  return result;
}

uint64_t type metadata accessor for FormatComputedContext()
{
  return self;
}

void sub_1C0075DA4()
{
  type metadata accessor for FormatCompilerOptions.Newsroom(319);
  if (v0 <= 0x3F)
  {
    sub_1BFE79AD8(319, (unint64_t *)&qword_1EB884FE0, MEMORY[0x1E4FAAFC8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1C0075E9C()
{
  sub_1BFE79AD8(319, (unint64_t *)&qword_1EB884FE0, MEMORY[0x1E4FAAFC8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_1C0075F58()
{
  unint64_t result = qword_1EB889DE0;
  if (!qword_1EB889DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889DE0);
  }
  return result;
}

unint64_t sub_1C0075FAC()
{
  unint64_t result = qword_1EB889DD8;
  if (!qword_1EB889DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889DD8);
  }
  return result;
}

unint64_t sub_1C0076008()
{
  unint64_t result = qword_1EB889DC8;
  if (!qword_1EB889DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889DC8);
  }
  return result;
}

unint64_t sub_1C007605C()
{
  unint64_t result = qword_1EB889DC0;
  if (!qword_1EB889DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889DC0);
  }
  return result;
}

unint64_t sub_1C00760B8()
{
  unint64_t result = qword_1EB889DB0;
  if (!qword_1EB889DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889DB0);
  }
  return result;
}

unint64_t sub_1C007610C()
{
  unint64_t result = qword_1EB889DA8;
  if (!qword_1EB889DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889DA8);
  }
  return result;
}

unint64_t sub_1C0076168()
{
  unint64_t result = qword_1EB889D98;
  if (!qword_1EB889D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889D98);
  }
  return result;
}

unint64_t sub_1C00761BC()
{
  unint64_t result = qword_1EB889D90;
  if (!qword_1EB889D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889D90);
  }
  return result;
}

unint64_t sub_1C0076214()
{
  unint64_t result = qword_1EB876F28;
  if (!qword_1EB876F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB876F28);
  }
  return result;
}

unint64_t sub_1C0076268()
{
  unint64_t result = qword_1EB876F18;
  if (!qword_1EB876F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB876F18);
  }
  return result;
}

unint64_t sub_1C00762BC()
{
  unint64_t result = qword_1EB876F10;
  if (!qword_1EB876F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB876F10);
  }
  return result;
}

unint64_t sub_1C0076310()
{
  unint64_t result = qword_1EB870D40;
  if (!qword_1EB870D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB870D40);
  }
  return result;
}

unint64_t sub_1C007636C()
{
  unint64_t result = qword_1EB889D68;
  if (!qword_1EB889D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889D68);
  }
  return result;
}

unint64_t sub_1C00763C0()
{
  unint64_t result = qword_1EB889D60;
  if (!qword_1EB889D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889D60);
  }
  return result;
}

unint64_t sub_1C0076418()
{
  unint64_t result = qword_1EB884A88;
  if (!qword_1EB884A88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB884A88);
  }
  return result;
}

unint64_t sub_1C007646C()
{
  unint64_t result = qword_1EB884A80;
  if (!qword_1EB884A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB884A80);
  }
  return result;
}

unint64_t sub_1C00764C0()
{
  unint64_t result = qword_1EB876F00;
  if (!qword_1EB876F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB876F00);
  }
  return result;
}

uint64_t sub_1C0076514(uint64_t a1)
{
  return sub_1BFCCB4A8(a1, 0xD000000000000011, 0x80000001C16366A0, &qword_1EB93C808);
}

uint64_t sub_1C0076538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return nullsub_1(a3);
}

unint64_t sub_1C007655C()
{
  unint64_t result = qword_1EB862ED8;
  if (!qword_1EB862ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862ED8);
  }
  return result;
}

unint64_t sub_1C00765B0()
{
  unint64_t result = qword_1EB862ED0;
  if (!qword_1EB862ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862ED0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShortcutCommandState()
{
  return &type metadata for ShortcutCommandState;
}

unint64_t sub_1C0076614()
{
  unint64_t result = qword_1EB881F00[0];
  if (!qword_1EB881F00[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB881F00);
  }
  return result;
}

uint64_t sub_1C0076668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  uint64_t v11 = a4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_0, a1, a3);
  uint64_t v7 = swift_allocObject();
  sub_1BFC773DC(&v9, v7 + 16);
  return v7;
}

void sub_1C0076700()
{
  sub_1C00671B8(319, &qword_1EB882A40, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t type metadata accessor for PuzzleStatisticValue(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, (uint64_t *)&unk_1EB884A70);
}

uint64_t type metadata accessor for PuzzleHistoryService()
{
  return self;
}

id sub_1C007681C()
{
  return objc_msgSend(*(id *)(*v0 + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory), sel_isPuzzleHistoryEmpty);
}

ValueMetadata *type metadata accessor for LikingCommandContext()
{
  return &type metadata for LikingCommandContext;
}

unint64_t sub_1C007685C()
{
  unint64_t result = qword_1EB861780;
  if (!qword_1EB861780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB861780);
  }
  return result;
}

uint64_t type metadata accessor for HeadlineViewRenderer()
{
  return self;
}

uint64_t storeEnumTagSinglePayload for FormatProgressPieOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupLayoutInventory()
{
  return &type metadata for GroupLayoutInventory;
}

uint64_t sub_1C0076930()
{
  uint64_t result = type metadata accessor for FormatViewBackground.Mica(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void sub_1C00769CC()
{
  sub_1BFF477D4(319, (unint64_t *)&qword_1EB87B0F0, MEMORY[0x1E4FAC080]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_1C0076A88()
{
  unint64_t result = qword_1EB889C98;
  if (!qword_1EB889C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889C98);
  }
  return result;
}

unint64_t sub_1C0076ADC()
{
  unint64_t result = qword_1EB889C90;
  if (!qword_1EB889C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889C90);
  }
  return result;
}

unint64_t sub_1C0076B30()
{
  unint64_t result = qword_1EB876CC0;
  if (!qword_1EB876CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB876CC0);
  }
  return result;
}

unint64_t sub_1C0076B84()
{
  unint64_t result = qword_1EB85BBC8;
  if (!qword_1EB85BBC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85BBC8);
  }
  return result;
}

unint64_t sub_1C0076BE0()
{
  unint64_t result = qword_1EB889C80;
  if (!qword_1EB889C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889C80);
  }
  return result;
}

unint64_t sub_1C0076C34()
{
  unint64_t result = qword_1EB889C78;
  if (!qword_1EB889C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889C78);
  }
  return result;
}

unint64_t sub_1C0076C90()
{
  unint64_t result = qword_1EB85BBC0;
  if (!qword_1EB85BBC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85BBC0);
  }
  return result;
}

unint64_t sub_1C0076CE4()
{
  unint64_t result = qword_1EB85BBB8;
  if (!qword_1EB85BBB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85BBB8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatTransformKnobs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C0EF4BE4);
}

uint64_t sub_1C0076D4C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C0076DAC(uint64_t a1, uint64_t a2)
{
  sub_1C0076EB8(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1C0076E10(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C151FD8C();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C0076E64(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C151FD8C();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C0076EB8(uint64_t a1)
{
}

unint64_t sub_1C0076EE0()
{
  unint64_t result = qword_1EB889BA8;
  if (!qword_1EB889BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889BA8);
  }
  return result;
}

unint64_t sub_1C0076F34()
{
  unint64_t result = qword_1EB889BA0;
  if (!qword_1EB889BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889BA0);
  }
  return result;
}

uint64_t type metadata accessor for FormatStringSelector()
{
  return self;
}

void sub_1C0076FAC()
{
  sub_1BFE79D74(319, (unint64_t *)&qword_1EB884FE0, MEMORY[0x1E4FAAFC8], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_1C0077090()
{
  unint64_t result = qword_1EB889AE0;
  if (!qword_1EB889AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889AE0);
  }
  return result;
}

unint64_t sub_1C00770E4()
{
  unint64_t result = qword_1EB889AD8;
  if (!qword_1EB889AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889AD8);
  }
  return result;
}

uint64_t sub_1C0077138(void *a1)
{
  return FormatSizeConstraint.encode(to:)(a1);
}

unint64_t sub_1C0077150()
{
  unint64_t result = qword_1EB860580;
  if (!qword_1EB860580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB860580);
  }
  return result;
}

uint64_t sub_1C00771A4()
{
  uint64_t result = type metadata accessor for FormatTransformData();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1C0077294()
{
  unint64_t result = qword_1EB889AC8;
  if (!qword_1EB889AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889AC8);
  }
  return result;
}

unint64_t sub_1C00772E8()
{
  unint64_t result = qword_1EB889AB8;
  if (!qword_1EB889AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889AB8);
  }
  return result;
}

unint64_t sub_1C007733C()
{
  unint64_t result = qword_1EB889AB0;
  if (!qword_1EB889AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889AB0);
  }
  return result;
}

unint64_t sub_1C0077390()
{
  unint64_t result = qword_1EB889AA0;
  if (!qword_1EB889AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889AA0);
  }
  return result;
}

unint64_t sub_1C00773E4()
{
  unint64_t result = qword_1EB876CB0;
  if (!qword_1EB876CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB876CB0);
  }
  return result;
}

unint64_t sub_1C0077438()
{
  unint64_t result = qword_1EB870D28;
  if (!qword_1EB870D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB870D28);
  }
  return result;
}

unint64_t sub_1C0077494()
{
  unint64_t result = qword_1EB889A80;
  if (!qword_1EB889A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889A80);
  }
  return result;
}

unint64_t sub_1C00774E8()
{
  unint64_t result = qword_1EB889A78;
  if (!qword_1EB889A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889A78);
  }
  return result;
}

uint64_t sub_1C007753C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C007759C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C00775FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1C007766C()
{
  unint64_t result = qword_1EB889A58;
  if (!qword_1EB889A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889A58);
  }
  return result;
}

unint64_t sub_1C00776C0()
{
  unint64_t result = qword_1EB889A50;
  if (!qword_1EB889A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889A50);
  }
  return result;
}

unint64_t FormatParagraphStyle.merge(other:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(unsigned char *)result;
  unint64_t v4 = (uint64_t *)(result + 8);
  uint64_t v5 = (uint64_t *)(result + 40);
  unsigned int v6 = (uint64_t *)(result + 56);
  uint64_t v7 = (uint64_t *)(result + 72);
  uint64_t v8 = (uint64_t *)(result + 88);
  long long v9 = (uint64_t *)(result + 104);
  uint64_t v10 = (uint64_t *)(result + 120);
  uint64_t v11 = (uint64_t *)(result + 136);
  if (*v2 != 5) {
    char v3 = *v2;
  }
  char v44 = v3;
  if (!v2[16]) {
    unint64_t v4 = (uint64_t *)(v2 + 8);
  }
  char v12 = v2[16] & *(unsigned char *)(result + 16);
  if (v2[32]) {
    long long v13 = (uint64_t *)(result + 24);
  }
  else {
    long long v13 = (uint64_t *)(v2 + 24);
  }
  char v14 = v2[32] & *(unsigned char *)(result + 32);
  if (!v2[48]) {
    uint64_t v5 = (uint64_t *)(v2 + 40);
  }
  char v15 = v2[48] & *(unsigned char *)(result + 48);
  if (v2[49] == 6) {
    char v16 = *(unsigned char *)(result + 49);
  }
  else {
    char v16 = v2[49];
  }
  char v43 = v16;
  if (v2[50] == 3) {
    char v17 = *(unsigned char *)(result + 50);
  }
  else {
    char v17 = v2[50];
  }
  if (!v2[64]) {
    unsigned int v6 = (uint64_t *)(v2 + 56);
  }
  char v18 = v2[64] & *(unsigned char *)(result + 64);
  if (!v2[80]) {
    uint64_t v7 = (uint64_t *)(v2 + 72);
  }
  char v19 = v2[80] & *(unsigned char *)(result + 80);
  if (!v2[96]) {
    uint64_t v8 = (uint64_t *)(v2 + 88);
  }
  char v20 = v2[96] & *(unsigned char *)(result + 96);
  if (!v2[112]) {
    long long v9 = (uint64_t *)(v2 + 104);
  }
  char v21 = v2[112] & *(unsigned char *)(result + 112);
  if (!v2[128]) {
    uint64_t v10 = (uint64_t *)(v2 + 120);
  }
  char v22 = v2[128] & *(unsigned char *)(result + 128);
  if (!v2[144]) {
    uint64_t v11 = (uint64_t *)(v2 + 136);
  }
  char v23 = v2[144] & *(unsigned char *)(result + 144);
  if (v2[160]) {
    long long v24 = (uint64_t *)(result + 152);
  }
  else {
    long long v24 = (uint64_t *)(v2 + 152);
  }
  char v25 = v2[160] & *(unsigned char *)(result + 160);
  if (v2[176]) {
    int v26 = (uint64_t *)(result + 168);
  }
  else {
    int v26 = (uint64_t *)(v2 + 168);
  }
  char v27 = v2[176] & *(unsigned char *)(result + 176);
  uint64_t v28 = (uint64_t *)(v2 + 184);
  if (v2[192]) {
    uint64_t v28 = (uint64_t *)(result + 184);
  }
  char v29 = v2[192] & *(unsigned char *)(result + 192);
  LODWORD(result) = *(unsigned __int8 *)(result + 193);
  unsigned int v30 = v2[193];
  if (v30 == 2) {
    unint64_t result = result;
  }
  else {
    unint64_t result = v30;
  }
  uint64_t v31 = *v4;
  uint64_t v32 = *v13;
  uint64_t v33 = *v5;
  uint64_t v34 = *v6;
  uint64_t v35 = *v7;
  uint64_t v36 = *v8;
  uint64_t v37 = *v9;
  uint64_t v38 = *v10;
  uint64_t v39 = *v11;
  uint64_t v40 = *v24;
  uint64_t v41 = *v26;
  uint64_t v42 = *v28;
  *(unsigned char *)a2 = v44;
  *(void *)(a2 + 8) = v31;
  *(unsigned char *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v32;
  *(unsigned char *)(a2 + 32) = v14;
  *(void *)(a2 + 40) = v33;
  *(unsigned char *)(a2 + 49) = v43;
  *(unsigned char *)(a2 + 50) = v17;
  *(void *)(a2 + 56) = v34;
  *(unsigned char *)(a2 + 64) = v18;
  *(void *)(a2 + 72) = v35;
  *(unsigned char *)(a2 + 80) = v19;
  *(void *)(a2 + 88) = v36;
  *(unsigned char *)(a2 + 96) = v20;
  *(void *)(a2 + 104) = v37;
  *(unsigned char *)(a2 + 112) = v21;
  *(void *)(a2 + 120) = v38;
  *(unsigned char *)(a2 + 128) = v22;
  *(void *)(a2 + 136) = v39;
  *(unsigned char *)(a2 + 144) = v23;
  *(void *)(a2 + 152) = v40;
  *(unsigned char *)(a2 + 160) = v25;
  *(void *)(a2 + 168) = v41;
  *(unsigned char *)(a2 + 176) = v27;
  *(void *)(a2 + 184) = v42;
  *(unsigned char *)(a2 + 192) = v29;
  *(unsigned char *)(a2 + 193) = result;
  *(unsigned char *)(a2 + 48) = v15;
  return result;
}

unint64_t sub_1C0077A04()
{
  unint64_t result = qword_1EB889A30;
  if (!qword_1EB889A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889A30);
  }
  return result;
}

unint64_t sub_1C0077A58()
{
  unint64_t result = qword_1EB889A28;
  if (!qword_1EB889A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889A28);
  }
  return result;
}

unint64_t sub_1C0077AAC()
{
  unint64_t result = qword_1EB889A18;
  if (!qword_1EB889A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889A18);
  }
  return result;
}

unint64_t sub_1C0077B00(void *a1)
{
  a1[1] = sub_1BFC9B114();
  a1[2] = sub_1BFFEF518();
  unint64_t result = sub_1C128DEE8();
  a1[3] = result;
  return result;
}

uint64_t sub_1C0077B38()
{
  uint64_t result = type metadata accessor for FormatCommandOpenURL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_1C0077BD4()
{
  unint64_t result = qword_1EB870D18;
  if (!qword_1EB870D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB870D18);
  }
  return result;
}

uint64_t sub_1C0077C28(void *a1)
{
  return FormatIssueCoverNode.encode(to:)(a1);
}

unint64_t sub_1C0077C54()
{
  unint64_t result = qword_1EB866AB0;
  if (!qword_1EB866AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB866AB0);
  }
  return result;
}

unint64_t sub_1C0077CA8()
{
  unint64_t result = qword_1EB866AA8;
  if (!qword_1EB866AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB866AA8);
  }
  return result;
}

void sub_1C0077CFC()
{
  sub_1BFE79DD8(319, (unint64_t *)&qword_1EB884FE0, MEMORY[0x1E4FAAFC8], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

unint64_t sub_1C0077E3C()
{
  unint64_t result = qword_1EB8897F8;
  if (!qword_1EB8897F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8897F8);
  }
  return result;
}

unint64_t sub_1C0077E90()
{
  unint64_t result = qword_1EB8897E8;
  if (!qword_1EB8897E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8897E8);
  }
  return result;
}

unint64_t sub_1C0077EE4()
{
  unint64_t result = qword_1EB8897E0;
  if (!qword_1EB8897E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8897E0);
  }
  return result;
}

unint64_t sub_1C0077F38(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1C0077E90();
  unint64_t result = sub_1C0077EE4();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1C0077F70()
{
  unint64_t result = qword_1EB8897D8;
  if (!qword_1EB8897D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8897D8);
  }
  return result;
}

unint64_t sub_1C0077FC4()
{
  unint64_t result = qword_1EB8897D0;
  if (!qword_1EB8897D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8897D0);
  }
  return result;
}

unint64_t sub_1C0078020()
{
  unint64_t result = qword_1EB8897C0;
  if (!qword_1EB8897C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8897C0);
  }
  return result;
}

unint64_t sub_1C0078074()
{
  unint64_t result = qword_1EB8897B8;
  if (!qword_1EB8897B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8897B8);
  }
  return result;
}

uint64_t sub_1C00780C8(void *a1)
{
  return FormatGroupNodeStyle.encode(to:)(a1);
}

unint64_t sub_1C00780EC()
{
  unint64_t result = qword_1EB882ED0;
  if (!qword_1EB882ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB882ED0);
  }
  return result;
}

unint64_t sub_1C0078140()
{
  unint64_t result = qword_1EB8896B8;
  if (!qword_1EB8896B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8896B8);
  }
  return result;
}

unint64_t sub_1C007819C()
{
  unint64_t result = qword_1EB8896B0;
  if (!qword_1EB8896B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8896B0);
  }
  return result;
}

unint64_t sub_1C00781F0()
{
  unint64_t result = qword_1EB8896A8;
  if (!qword_1EB8896A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8896A8);
  }
  return result;
}

unint64_t sub_1C007824C()
{
  unint64_t result = qword_1EB889698;
  if (!qword_1EB889698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889698);
  }
  return result;
}

unint64_t sub_1C00782A0()
{
  unint64_t result = qword_1EB889690;
  if (!qword_1EB889690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889690);
  }
  return result;
}

unint64_t sub_1C00782FC()
{
  unint64_t result = qword_1EB8895C8;
  if (!qword_1EB8895C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8895C8);
  }
  return result;
}

unint64_t sub_1C0078350()
{
  unint64_t result = qword_1EB8895C0;
  if (!qword_1EB8895C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8895C0);
  }
  return result;
}

uint64_t sub_1C00783A4()
{
  uint64_t result = type metadata accessor for FormatAbsoluteURL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1C0078438()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C0078454()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for FormatCellAutomation()
{
  return __swift_instantiateGenericMetadata();
}

void sub_1C0078488()
{
  if (!qword_1EB889580)
  {
    type metadata accessor for FormatButtonNodeData();
    sub_1C017C4BC(255, &qword_1EB88F830, (uint64_t (*)(uint64_t))type metadata accessor for FormatButtonNodeDataLayoutAttributes, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for FormatAnimationNodeDataLayoutAttributes);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB889580);
    }
  }
}

void sub_1C0078528()
{
  type metadata accessor for FormatButtonNodeDataAction();
  if (v0 <= 0x3F)
  {
    sub_1BFFEBB68(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_1C00785F0()
{
  uint64_t result = type metadata accessor for FormatContent(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FormatBindingContent()
{
  uint64_t result = qword_1EB889450;
  if (!qword_1EB889450) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C00786E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1C0078730()
{
  unint64_t result = qword_1EB882E48[0];
  if (!qword_1EB882E48[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB882E48);
  }
  return result;
}

unint64_t sub_1C0078784()
{
  unint64_t result = qword_1EB889448;
  if (!qword_1EB889448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889448);
  }
  return result;
}

unint64_t sub_1C00787D8()
{
  unint64_t result = qword_1EB889438;
  if (!qword_1EB889438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889438);
  }
  return result;
}

unint64_t sub_1C007882C()
{
  unint64_t result = qword_1EB889430;
  if (!qword_1EB889430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889430);
  }
  return result;
}

unint64_t sub_1C0078880()
{
  unint64_t result = qword_1EB889428;
  if (!qword_1EB889428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889428);
  }
  return result;
}

uint64_t sub_1C00788DC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EngagementBannerView();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C007891C()
{
  return sub_1C00788DC(&qword_1EB87F120);
}

uint64_t type metadata accessor for CategoryViewRenderer()
{
  return self;
}

unint64_t sub_1C0078974()
{
  unint64_t result = qword_1EB876AF0;
  if (!qword_1EB876AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB876AF0);
  }
  return result;
}

void sub_1C00789C8(uint64_t a1)
{
}

uint64_t type metadata accessor for SportsRecordFactory()
{
  return self;
}

void sub_1C0078A20()
{
  sub_1BFE45DC0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_1C0078ACC()
{
  unint64_t result = qword_1EB870D10;
  if (!qword_1EB870D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB870D10);
  }
  return result;
}

unint64_t sub_1C0078B20()
{
  unint64_t result = qword_1EB870D08;
  if (!qword_1EB870D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB870D08);
  }
  return result;
}

unint64_t sub_1C0078B74()
{
  unint64_t result = qword_1EB889200;
  if (!qword_1EB889200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889200);
  }
  return result;
}

unint64_t sub_1C0078BC8()
{
  unint64_t result = qword_1EB8891F8;
  if (!qword_1EB8891F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8891F8);
  }
  return result;
}

unint64_t sub_1C0078C1C()
{
  unint64_t result = qword_1EB8891F0;
  if (!qword_1EB8891F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8891F0);
  }
  return result;
}

unint64_t sub_1C0078C70(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1C0078BC8();
  unint64_t result = sub_1C0078C1C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1C0078CA8()
{
  unint64_t result = qword_1EB8891E8;
  if (!qword_1EB8891E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8891E8);
  }
  return result;
}

unint64_t sub_1C0078CFC()
{
  unint64_t result = qword_1EB8891E0;
  if (!qword_1EB8891E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8891E0);
  }
  return result;
}

unint64_t sub_1C0078D58()
{
  unint64_t result = qword_1EB8891D0;
  if (!qword_1EB8891D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8891D0);
  }
  return result;
}

unint64_t sub_1C0078DAC()
{
  unint64_t result = qword_1EB8891C8;
  if (!qword_1EB8891C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8891C8);
  }
  return result;
}

uint64_t sub_1C0078E00(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C0078E68(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C0078ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FormatTransformData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1C0078F34()
{
  sub_1C0076E64(319, &qword_1EB87F200, (void (*)(uint64_t))type metadata accessor for FormatTransformKnobs);
  if (v0 <= 0x3F)
  {
    sub_1C0076E64(319, (unint64_t *)&unk_1EB882CC0, (void (*)(uint64_t))type metadata accessor for FeedPersonalizationClusteringRules);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_1C0079058()
{
  unint64_t result = qword_1EB889098;
  if (!qword_1EB889098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889098);
  }
  return result;
}

unint64_t sub_1C00790AC()
{
  unint64_t result = qword_1EB889088;
  if (!qword_1EB889088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889088);
  }
  return result;
}

unint64_t sub_1C0079100()
{
  unint64_t result = qword_1EB889080;
  if (!qword_1EB889080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889080);
  }
  return result;
}

unint64_t sub_1C0079154(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1C00790AC();
  unint64_t result = sub_1C0079100();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1C007918C()
{
  unint64_t result = qword_1EB889078;
  if (!qword_1EB889078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889078);
  }
  return result;
}

unint64_t sub_1C00791E0()
{
  unint64_t result = qword_1EB889070;
  if (!qword_1EB889070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889070);
  }
  return result;
}

unint64_t sub_1C007923C()
{
  unint64_t result = qword_1EB889060;
  if (!qword_1EB889060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889060);
  }
  return result;
}

unint64_t sub_1C0079290()
{
  unint64_t result = qword_1EB889058;
  if (!qword_1EB889058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889058);
  }
  return result;
}

uint64_t type metadata accessor for FormatSystemFactory()
{
  uint64_t result = qword_1EB897200;
  if (!qword_1EB897200) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1C0079330()
{
  unint64_t result = qword_1EB876990;
  if (!qword_1EB876990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB876990);
  }
  return result;
}

unint64_t sub_1C0079384()
{
  unint64_t result = qword_1EB876988;
  if (!qword_1EB876988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB876988);
  }
  return result;
}

unint64_t sub_1C00793E0()
{
  unint64_t result = qword_1EB889048;
  if (!qword_1EB889048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889048);
  }
  return result;
}

unint64_t sub_1C0079434()
{
  unint64_t result = qword_1EB889040;
  if (!qword_1EB889040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889040);
  }
  return result;
}

uint64_t sub_1C0079488@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1BFC7C1D4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_1C00794BC()
{
  unint64_t result = qword_1EB889030;
  if (!qword_1EB889030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889030);
  }
  return result;
}

unint64_t sub_1C0079510()
{
  unint64_t result = qword_1EB889028;
  if (!qword_1EB889028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889028);
  }
  return result;
}

unint64_t sub_1C0079564()
{
  unint64_t result = qword_1EB889020;
  if (!qword_1EB889020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB889020);
  }
  return result;
}

unint64_t sub_1C00795B8()
{
  unint64_t result = qword_1EB8813F0;
  if (!qword_1EB8813F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8813F0);
  }
  return result;
}

unint64_t sub_1C0079614()
{
  unint64_t result = qword_1EB8813E8;
  if (!qword_1EB8813E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8813E8);
  }
  return result;
}

unint64_t sub_1C0079668()
{
  unint64_t result = qword_1EB884A58;
  if (!qword_1EB884A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB884A58);
  }
  return result;
}

unint64_t sub_1C00796BC()
{
  unint64_t result = qword_1EB861770;
  if (!qword_1EB861770)
  {
    sub_1BFEFF3E8(255, &qword_1EB888F10, (uint64_t (*)(void))sub_1C00732E8, (uint64_t)&type metadata for FormatDecorationContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatSelectorValue);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB861770);
  }
  return result;
}

unsigned char *_s6ActionOwst_3(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        break;
      case 2:
        *(_WORD *)unint64_t result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = 0;
        break;
      case 2:
        *(_WORD *)unint64_t result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)unint64_t result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1C00797E8(void *a1)
{
  return FormatPuzzleBinding.Action.init(from:)(a1);
}

unint64_t sub_1C0079800()
{
  unint64_t result = qword_1EB888F00;
  if (!qword_1EB888F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888F00);
  }
  return result;
}

uint64_t FormatPuzzleBinding.Action.init(from:)(void *a1)
{
  return sub_1BFD3F064(a1, (void (*)(uint64_t))sub_1C00798FC, (uint64_t)&_s10CodingTypeON_150, (uint64_t)&unk_1F1B82E28);
}

uint64_t sub_1C0079890()
{
  return sub_1C151EB5C();
}

uint64_t sub_1C00798F0@<X0>(BOOL *a1@<X8>)
{
  return sub_1BFD59FB4(a1);
}

unint64_t sub_1C00798FC()
{
  unint64_t result = qword_1EB888EF8;
  if (!qword_1EB888EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888EF8);
  }
  return result;
}

unint64_t sub_1C0079950()
{
  unint64_t result = qword_1EB888EF0;
  if (!qword_1EB888EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888EF0);
  }
  return result;
}

unint64_t sub_1C00799AC()
{
  unint64_t result = qword_1EB888EE0;
  if (!qword_1EB888EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888EE0);
  }
  return result;
}

unint64_t sub_1C0079A00()
{
  unint64_t result = qword_1EB888ED8;
  if (!qword_1EB888ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888ED8);
  }
  return result;
}

uint64_t type metadata accessor for FormatPluginFactory()
{
  return self;
}

uint64_t FormatPluginFactory.init(resolver:formatModelFactory:formatTracker:webEmbedManager:animatorFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1BFC3D62C(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1C0AB2A6C);
}

unint64_t sub_1C0079A98()
{
  unint64_t result = qword_1EB888E00;
  if (!qword_1EB888E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888E00);
  }
  return result;
}

unint64_t sub_1C0079AEC()
{
  unint64_t result = qword_1EB888DF8;
  if (!qword_1EB888DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888DF8);
  }
  return result;
}

unint64_t sub_1C0079B48()
{
  unint64_t result = qword_1EB888DE8;
  if (!qword_1EB888DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888DE8);
  }
  return result;
}

unint64_t sub_1C0079B9C()
{
  unint64_t result = qword_1EB888DE0;
  if (!qword_1EB888DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888DE0);
  }
  return result;
}

uint64_t sub_1C0079BF0(uint64_t a1, uint64_t a2)
{
  return sub_1BFFD588C(a1, a2, (uint64_t (*)(void))type metadata accessor for FormatNodeStateData.Data);
}

uint64_t sub_1C0079C08(uint64_t a1, uint64_t a2)
{
  sub_1BFF47190(0, (unint64_t *)&qword_1EB884A48, (uint64_t (*)(uint64_t))type metadata accessor for FormatNodeStateData.Data, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1C0079C9C()
{
  unint64_t result = qword_1EB87EFE8;
  if (!qword_1EB87EFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87EFE8);
  }
  return result;
}

unint64_t sub_1C0079CF4()
{
  unint64_t result = qword_1EB888DD0;
  if (!qword_1EB888DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888DD0);
  }
  return result;
}

unint64_t sub_1C0079D48()
{
  unint64_t result = qword_1EB888DC0;
  if (!qword_1EB888DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888DC0);
  }
  return result;
}

unint64_t sub_1C0079D9C()
{
  unint64_t result = qword_1EB888DB8;
  if (!qword_1EB888DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888DB8);
  }
  return result;
}

unint64_t sub_1C0079DF0()
{
  unint64_t result = qword_1EB888DB0;
  if (!qword_1EB888DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888DB0);
  }
  return result;
}

void sub_1C0079E44()
{
  sub_1BFFA18D8(319);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1C0079F20()
{
  sub_1BFFA18D8(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1C0079FEC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1C005DBDC(&qword_1EB888CB0, (void (*)(uint64_t))type metadata accessor for FormatItemNodeStyle.Selector);
  uint64_t result = sub_1C005DBDC(&qword_1EB888CA8, (void (*)(uint64_t))type metadata accessor for FormatItemNodeStyle.Selector);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1C007A078()
{
  unint64_t result = qword_1EB888CA0;
  if (!qword_1EB888CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888CA0);
  }
  return result;
}

unint64_t sub_1C007A0CC()
{
  unint64_t result = qword_1EB888C98;
  if (!qword_1EB888C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888C98);
  }
  return result;
}

unint64_t sub_1C007A128()
{
  unint64_t result = qword_1EB888C80;
  if (!qword_1EB888C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888C80);
  }
  return result;
}

unint64_t sub_1C007A17C()
{
  unint64_t result = qword_1EB888C78;
  if (!qword_1EB888C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888C78);
  }
  return result;
}

unint64_t sub_1C007A1D8()
{
  unint64_t result = qword_1EB888C68;
  if (!qword_1EB888C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888C68);
  }
  return result;
}

unint64_t sub_1C007A22C()
{
  unint64_t result = qword_1EB888C60;
  if (!qword_1EB888C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888C60);
  }
  return result;
}

unint64_t sub_1C007A284()
{
  unint64_t result = qword_1EB8767A0;
  if (!qword_1EB8767A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8767A0);
  }
  return result;
}

unint64_t sub_1C007A2D8()
{
  unint64_t result = qword_1EB876790;
  if (!qword_1EB876790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB876790);
  }
  return result;
}

unint64_t sub_1C007A32C()
{
  unint64_t result = qword_1EB876788;
  if (!qword_1EB876788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB876788);
  }
  return result;
}

unint64_t sub_1C007A380()
{
  unint64_t result = qword_1EB870D00;
  if (!qword_1EB870D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB870D00);
  }
  return result;
}

void sub_1C007A3D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1C0084108();
    unint64_t v7 = a3(a1, &type metadata for FormatFloat, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_1C007A440()
{
  unint64_t result = qword_1EB882A78;
  if (!qword_1EB882A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB882A78);
  }
  return result;
}

unint64_t sub_1C007A494()
{
  unint64_t result = qword_1EB884A40;
  if (!qword_1EB884A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB884A40);
  }
  return result;
}

unint64_t sub_1C007A4E8()
{
  unint64_t result = qword_1EB884A38;
  if (!qword_1EB884A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB884A38);
  }
  return result;
}

unint64_t sub_1C007A544()
{
  unint64_t result = qword_1EB888B60;
  if (!qword_1EB888B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888B60);
  }
  return result;
}

unint64_t sub_1C007A598()
{
  unint64_t result = qword_1EB888B58;
  if (!qword_1EB888B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888B58);
  }
  return result;
}

uint64_t type metadata accessor for FormatCodingDefault()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1C007A60C()
{
  unint64_t result = qword_1EB888A60;
  if (!qword_1EB888A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888A60);
  }
  return result;
}

unint64_t sub_1C007A660()
{
  unint64_t result = qword_1EB888A58;
  if (!qword_1EB888A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888A58);
  }
  return result;
}

unint64_t sub_1C007A6BC()
{
  unint64_t result = qword_1EB888A48;
  if (!qword_1EB888A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888A48);
  }
  return result;
}

unint64_t sub_1C007A710()
{
  unint64_t result = qword_1EB888A40;
  if (!qword_1EB888A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888A40);
  }
  return result;
}

unint64_t sub_1C007A76C()
{
  unint64_t result = qword_1EB888A30;
  if (!qword_1EB888A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888A30);
  }
  return result;
}

unint64_t sub_1C007A7C0()
{
  unint64_t result = qword_1EB888A28;
  if (!qword_1EB888A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888A28);
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandShareContent()
{
  return &type metadata for CommandShareContent;
}

void sub_1C007A828(uint64_t a1)
{
}

uint64_t type metadata accessor for SaveCommandContext()
{
  return __swift_instantiateGenericMetadata();
}

void sub_1C007A874()
{
  sub_1BFEEA038(319, (unint64_t *)&qword_1EB871330, MEMORY[0x1E4FAB8D8], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1C007A94C()
{
  uint64_t result = type metadata accessor for FeedHeadline(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1C007AA04()
{
  unint64_t result = qword_1EB8761E0;
  if (!qword_1EB8761E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8761E0);
  }
  return result;
}

unint64_t sub_1C007AA58()
{
  unint64_t result = qword_1EB8761D8;
  if (!qword_1EB8761D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8761D8);
  }
  return result;
}

unint64_t sub_1C007AAAC()
{
  unint64_t result = qword_1EB8761C8;
  if (!qword_1EB8761C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8761C8);
  }
  return result;
}

unint64_t sub_1C007AB00()
{
  unint64_t result = qword_1EB8761C0;
  if (!qword_1EB8761C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8761C0);
  }
  return result;
}

unint64_t sub_1C007AB6C()
{
  unint64_t result = qword_1EB8761B8;
  if (!qword_1EB8761B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8761B8);
  }
  return result;
}

unint64_t sub_1C007ABC0()
{
  unint64_t result = qword_1EB8761B0;
  if (!qword_1EB8761B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8761B0);
  }
  return result;
}

unint64_t sub_1C007AC1C()
{
  unint64_t result = qword_1EB888978;
  if (!qword_1EB888978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888978);
  }
  return result;
}

unint64_t sub_1C007AC70()
{
  unint64_t result = qword_1EB888970;
  if (!qword_1EB888970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888970);
  }
  return result;
}

unint64_t sub_1C007ACCC()
{
  unint64_t result = qword_1EB888870;
  if (!qword_1EB888870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888870);
  }
  return result;
}

unint64_t sub_1C007AD20()
{
  unint64_t result = qword_1EB888868;
  if (!qword_1EB888868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888868);
  }
  return result;
}

uint64_t sub_1C007AD74()
{
  uint64_t result = type metadata accessor for FormatURL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1C007AE14()
{
  unint64_t result = qword_1EB888858;
  if (!qword_1EB888858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888858);
  }
  return result;
}

unint64_t sub_1C007AE68()
{
  unint64_t result = qword_1EB888850;
  if (!qword_1EB888850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888850);
  }
  return result;
}

unint64_t sub_1C007AEC4()
{
  unint64_t result = qword_1EB888840;
  if (!qword_1EB888840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888840);
  }
  return result;
}

unint64_t sub_1C007AF18()
{
  unint64_t result = qword_1EB888838;
  if (!qword_1EB888838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888838);
  }
  return result;
}

uint64_t sub_1C007AF6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1C007AFD4()
{
  type metadata accessor for OsloSheetPurchaseDataModel(319);
  if (v0 <= 0x3F)
  {
    sub_1BFFEBC54(319, &qword_1EB87BBB8, (uint64_t (*)(uint64_t))type metadata accessor for FormatPurchaseLandingPageData, MEMORY[0x1E4FBB718]);
    if (v1 <= 0x3F) {
      swift_initEnumMetadataMultiPayload();
    }
  }
}

void sub_1C007B0C8(uint64_t a1)
{
}

uint64_t sub_1C007B0FC()
{
  uint64_t result = type metadata accessor for FormatURL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FormatPostPurchase()
{
  uint64_t result = qword_1EB87EBB8;
  if (!qword_1EB87EBB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1C007B1C8()
{
  unint64_t result = qword_1EB888800;
  if (!qword_1EB888800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888800);
  }
  return result;
}

unint64_t sub_1C007B21C()
{
  unint64_t result = qword_1EB8887F8;
  if (!qword_1EB8887F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8887F8);
  }
  return result;
}

uint64_t type metadata accessor for FormatModelFactory()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t FormatModelFactory.init(factory:)(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 32))(v1 + *(void *)(*(void *)v1 + 96), a1);
  return v1;
}

unint64_t sub_1C007B2FC()
{
  unint64_t result = qword_1EB876018;
  if (!qword_1EB876018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB876018);
  }
  return result;
}

unint64_t sub_1C007B350()
{
  unint64_t result = qword_1EB876010;
  if (!qword_1EB876010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB876010);
  }
  return result;
}

unint64_t sub_1C007B3AC()
{
  unint64_t result = qword_1EB8887E8;
  if (!qword_1EB8887E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8887E8);
  }
  return result;
}

unint64_t sub_1C007B400()
{
  unint64_t result = qword_1EB8887E0;
  if (!qword_1EB8887E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8887E0);
  }
  return result;
}

uint64_t sub_1C007B454(void *a1)
{
  return FormatIssueBinding.IssueCover.encode(to:)(a1);
}

unint64_t sub_1C007B46C()
{
  unint64_t result = qword_1EB860170;
  if (!qword_1EB860170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB860170);
  }
  return result;
}

void sub_1C007B4C0(void *a1@<X8>)
{
  *a1 = 0x766F436575737369;
  a1[1] = 0xEA00000000007265;
}

uint64_t sub_1C007B4E0()
{
  return sub_1C151EAEC();
}

unint64_t sub_1C007B530()
{
  unint64_t result = qword_1EB866468;
  if (!qword_1EB866468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB866468);
  }
  return result;
}

uint64_t FormatHOverlayNode.bind(binder:context:)(unint64_t a1, uint64_t a2)
{
  return sub_1BFF54B00(a1, a2, (uint64_t)&unk_1F1B6D9D8);
}

uint64_t sub_1C007B5A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v47 = a3;
  uint64_t v48 = a2;
  uint64_t v6 = type metadata accessor for FeedWeather(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)v3;
  uint64_t v12 = *(void *)(v3 + 8);
  unint64_t v15 = *(void *)(v3 + 16);
  char v14 = *(void **)(v3 + 24);
  uint64_t v16 = *(void *)(v3 + 32);
  unsigned int v17 = *(unsigned __int8 *)(v3 + 40);
  switch(v17 >> 5)
  {
    case 1u:
      uint64_t v68 = *(void *)(v3 + 32);
      unsigned int v46 = v17;
      uint64_t v19 = *(void *)(a1 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_bindingStack + 8);
      uint64_t v20 = v13;
      uint64_t v21 = v13;
      uint64_t v22 = v12;
      uint64_t v23 = (uint64_t)v14;
      sub_1C0223C2C(v21, v12);
      sub_1BFFDAD48(v19, (uint64_t)&v60);
      if (!v4)
      {
        id v45 = (id)*((void *)&v60 + 1);
        long long v24 = (void *)v60;
        *(void *)&long long v60 = v20;
        *((void *)&v60 + 1) = v22;
        *(void *)&long long v61 = v15;
        *((void *)&v61 + 1) = v23;
        sub_1C0D54BB4(v24, a1, v48, v47);
        swift_unknownObjectRelease();
      }
      goto LABEL_12;
    case 2u:
      uint64_t result = sub_1C098D32C(*(void *)(a1 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_bindingStack + 8), (uint64_t)&v60);
      if (!v4)
      {
        long long v58 = v66;
        v59[0] = v67[0];
        *(_OWORD *)((char *)v59 + 9) = *(_OWORD *)((char *)v67 + 9);
        long long v54 = v62;
        long long v55 = v63;
        long long v56 = v64;
        long long v57 = v65;
        long long v52 = v60;
        long long v53 = v61;
        v49[6] = v66;
        *(_OWORD *)unsigned __int8 v50 = v67[0];
        *(_OWORD *)&v50[9] = *(_OWORD *)((char *)v67 + 9);
        v49[2] = v62;
        v49[3] = v63;
        v49[4] = v64;
        v49[5] = v65;
        char v51 = v13 & 1;
        v49[0] = v60;
        v49[1] = v61;
        sub_1C0D8DCDC(v49, v48, v47);
        return sub_1C01880A4((uint64_t)&v52);
      }
      return result;
    case 3u:
      id v45 = *(id *)(v3 + 24);
      uint64_t v68 = v16;
      unsigned int v46 = v17;
      uint64_t v25 = *(void *)(a1 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_bindingStack + 8);
      uint64_t v44 = v12;
      sub_1BFF61744(v13, v12, v15, SBYTE1(v15));
      sub_1C098D080(v25, (uint64_t)v8);
      if (v4)
      {
        uint64_t v26 = v13;
        uint64_t v27 = v44;
      }
      else
      {
        uint64_t v42 = v44;
        *(void *)&long long v60 = v13;
        *((void *)&v60 + 1) = v44;
        LOWORD(v61) = v15;
        FormatWeatherBinding.Image.image(from:context:imageContext:)(a1, v47);
        sub_1C00859A4((uint64_t)v8, type metadata accessor for FeedWeather);
        uint64_t v26 = v13;
        uint64_t v27 = v42;
      }
      unint64_t v32 = v15;
      uint64_t v33 = (uint64_t)v45;
      goto LABEL_18;
    case 4u:
      uint64_t v68 = *(void *)(v3 + 32);
      unsigned int v46 = v17;
      uint64_t v28 = *(void *)(a1 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_bindingStack + 8);
      uint64_t v20 = v13;
      uint64_t v29 = v13;
      uint64_t v22 = v12;
      uint64_t v23 = (uint64_t)v14;
      sub_1C0223C2C(v29, v12);
      sub_1C098CEE0(v28, &v60);
      if (!v4)
      {
        unsigned int v30 = (void *)v60;
        *(void *)&long long v60 = v20;
        *((void *)&v60 + 1) = v22;
        *(void *)&long long v61 = v15;
        *((void *)&v61 + 1) = v23;
        id v45 = v30;
        id v31 = FCFeedDescriptor.feedTag.getter();
        sub_1C0D54BB4(v31, a1, v48, v47);

        swift_unknownObjectRelease();
      }
LABEL_12:
      uint64_t v26 = v20;
      uint64_t v27 = v22;
      unint64_t v32 = v15;
      uint64_t v33 = v23;
LABEL_18:
      uint64_t result = sub_1C14AC850(v26, v27, v32, v33, v68, v46, (uint64_t (*)(void))sub_1C0223A4C, (uint64_t (*)(uint64_t, uint64_t, unint64_t, unint64_t))sub_1BFF61770, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C0223A4C);
      break;
    case 5u:
      uint64_t v34 = *(void *)(a1 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_bindingStack + 8);
      char v35 = v17 & 1;
      uint64_t v36 = v13;
      uint64_t v37 = v13;
      uint64_t v44 = v12;
      id v45 = v14;
      uint64_t v68 = v16;
      unsigned __int8 v38 = v17;
      sub_1C05D8BC0(v37, v12, v15, (uint64_t)v14, v16, v17 & 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C0223C2C);
      sub_1C098CD24(v34, (uint64_t)&v60);
      if (!v4)
      {
        long long v39 = v60;
        long long v40 = v61;
        char v41 = v62;
        *(void *)&long long v60 = v36;
        *((void *)&v60 + 1) = v44;
        *(void *)&long long v61 = v15;
        *((void *)&v61 + 1) = v45;
        *(void *)&long long v62 = v68;
        BYTE8(v62) = v35;
        long long v52 = v39;
        long long v53 = v40;
        LOBYTE(v54) = v41;
        sub_1C1409A28((uint64_t)&v52, a1, v48, v47);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t result = sub_1C14AC850(v36, v44, v15, (uint64_t)v45, v68, v38, (uint64_t (*)(void))sub_1C0223A4C, (uint64_t (*)(uint64_t, uint64_t, unint64_t, unint64_t))sub_1BFF61770, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C0223A4C);
      break;
    default:
      uint64_t result = sub_1BFC4BD94(*(void *)(a1 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_bindingStack + 8), (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
      if (!v4)
      {
        LOBYTE(v60) = v13;
        FormatHeadlineBinding.Image.image(from:imageContext:)((uint64_t)v11, v48, v47);
        uint64_t result = sub_1C00859A4((uint64_t)v11, type metadata accessor for FeedHeadline);
      }
      break;
  }
  return result;
}

uint64_t FormatGroupBinding.Image.bind(binder:context:)(uint64_t result, uint64_t a2)
{
  uint64_t v4 = *(void *)v2;
  unint64_t v3 = *(void *)(v2 + 8);
  unint64_t v6 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  unsigned int v8 = *(unsigned __int8 *)(v2 + 40);
  uint64_t v10 = result;
  switch(v8 >> 5)
  {
    case 1u:
      switch((v3 >> 59) & 2 | (v3 >> 2) & 1)
      {
        case 3uLL:
          goto LABEL_11;
        default:
          goto LABEL_7;
      }
    case 3u:
      unsigned __int8 v19 = *(unsigned char *)(v2 + 40);
      uint64_t v11 = *(void *)(v2 + 32);
      sub_1BFF61744(v4, v3, v6, SBYTE1(v6));
      FormatSymbolConfig.bind(binder:context:)(v10, a2);
      goto LABEL_8;
    case 4u:
      switch((v3 >> 59) & 2 | (v3 >> 2) & 1)
      {
        case 1uLL:
        case 2uLL:
          uint64_t v20 = *(void *)(v2 + 32);
          sub_1C0223C2C(v4, v3);
          FormatTagIconStyle.bind(binder:context:)(v10, a2);
          uint64_t result = sub_1C05D8B28(v4, v3, v6, v5, v20, v8, (uint64_t (*)(void))sub_1C0223A4C, (uint64_t (*)(uint64_t, uint64_t, unint64_t, unint64_t))sub_1BFF61770, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C0223A4C);
          break;
        case 3uLL:
LABEL_11:
          BOOL v13 = v3 != 0x1000000000000004 || (v5 | v6 | v4) != 0;
          uint64_t v14 = 0x1000000000000004;
          unint64_t v15 = 0;
          uint64_t v16 = 0;
          unsigned __int8 v17 = *(unsigned char *)(v2 + 40);
          goto LABEL_9;
        default:
LABEL_7:
          unsigned __int8 v19 = *(unsigned char *)(v2 + 40);
          uint64_t v11 = *(void *)(v2 + 32);
          sub_1C0223C2C(v4, v3);
          FormatTagIconStyle.bind(binder:context:)(v10, a2);
          goto LABEL_8;
      }
      return result;
    case 5u:
      char v12 = v8 & 1;
      unsigned __int8 v19 = *(unsigned char *)(v2 + 40);
      uint64_t v11 = *(void *)(v2 + 32);
      sub_1C05D8BC0(v4, v3, v6, v5, v7, v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C0223C2C);
      FormatSportsEventBinding.Image.bind(binder:context:)(v10, a2);
LABEL_8:
      BOOL v13 = v4;
      uint64_t v14 = v3;
      unint64_t v15 = v6;
      uint64_t v16 = v5;
      uint64_t v7 = v11;
      unsigned __int8 v17 = v19;
LABEL_9:
      uint64_t result = sub_1C05D8B28(v13, v14, v15, v16, v7, v17, (uint64_t (*)(void))sub_1C0223A4C, (uint64_t (*)(uint64_t, uint64_t, unint64_t, unint64_t))sub_1BFF61770, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C0223A4C);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1C007BECC()
{
  unint64_t result = qword_1EB8885C0;
  if (!qword_1EB8885C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8885C0);
  }
  return result;
}

unint64_t sub_1C007BF20()
{
  unint64_t result = qword_1EB8885B8;
  if (!qword_1EB8885B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8885B8);
  }
  return result;
}

uint64_t sub_1C007BF74()
{
  uint64_t result = type metadata accessor for FormatRemoteFont();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_1C007C00C()
{
  unint64_t result = qword_1EB8885A8;
  if (!qword_1EB8885A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8885A8);
  }
  return result;
}

unint64_t sub_1C007C060()
{
  unint64_t result = qword_1EB8885A0;
  if (!qword_1EB8885A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8885A0);
  }
  return result;
}

unint64_t sub_1C007C0BC()
{
  unint64_t result = qword_1EB888590;
  if (!qword_1EB888590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888590);
  }
  return result;
}

unint64_t sub_1C007C110()
{
  unint64_t result = qword_1EB888588;
  if (!qword_1EB888588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888588);
  }
  return result;
}

unint64_t sub_1C007C168()
{
  unint64_t result = qword_1EB888568;
  if (!qword_1EB888568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888568);
  }
  return result;
}

unint64_t sub_1C007C1BC()
{
  unint64_t result = qword_1EB888558;
  if (!qword_1EB888558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888558);
  }
  return result;
}

unint64_t sub_1C007C210()
{
  unint64_t result = qword_1EB888550;
  if (!qword_1EB888550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888550);
  }
  return result;
}

unint64_t sub_1C007C264()
{
  unint64_t result = qword_1EB888548;
  if (!qword_1EB888548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888548);
  }
  return result;
}

uint64_t sub_1C007C2B8(void *a1)
{
  return sub_1BFC3CD6C(a1);
}

unint64_t sub_1C007C2F8()
{
  unint64_t result = qword_1EB888540;
  if (!qword_1EB888540)
  {
    sub_1BFD18A88(255, &qword_1EB875F88, (void (*)(void))sub_1C007C6F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888540);
  }
  return result;
}

unint64_t sub_1C007C37C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for EngagementBannerViewStyler();
  uint64_t v3 = swift_allocObject();
  unint64_t result = sub_1C018F610(MEMORY[0x1E4FBC860]);
  *(void *)(v3 + 16) = result;
  a1[3] = v2;
  a1[4] = (uint64_t)&off_1F1BED998;
  *a1 = v3;
  return result;
}

uint64_t sub_1C007C3E0()
{
  sub_1BFC845BC(0, &qword_1EB8804D0);
  sub_1C1518B0C();
  return swift_release();
}

uint64_t sub_1C007C450(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C007C498()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for CategoryViewStyler()
{
  return self;
}

uint64_t type metadata accessor for WebArchiveService()
{
  return self;
}

uint64_t type metadata accessor for WeatherKitService()
{
  return self;
}

uint64_t type metadata accessor for WeakFormatTracker()
{
  return self;
}

uint64_t sub_1C007C538@<X0>(BOOL *a1@<X8>)
{
  return sub_1BFC5ECC8(*(void **)(v1 + 16), *(void *)(v1 + 24), *(uint64_t **)(v1 + 32), a1);
}

void sub_1C007C544(unint64_t *a1@<X8>)
{
  sub_1BFC716FC(*(char **)(v1 + 16), a1);
}

uint64_t sub_1C007C54C@<X0>(void *a1@<X8>)
{
  return sub_1BFC50DFC(*(void *)(v1 + 16), a1);
}

uint64_t sub_1C007C554()
{
  return sub_1C097283C(*(void **)(v0 + 16));
}

uint64_t type metadata accessor for PuzzleTypeManager()
{
  return self;
}

uint64_t sub_1C007C580(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for InternalErrorView();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C007C5C0()
{
  return sub_1C007C580(&qword_1EB875BE8);
}

void sub_1C007C5F4()
{
  type metadata accessor for FormatVersioningMode(319);
  if (v0 <= 0x3F)
  {
    sub_1BFEFD268(319, &qword_1EB871500, MEMORY[0x1E4FAB0A8], MEMORY[0x1E4FBB718]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_1C007C6F8()
{
  unint64_t result = qword_1EB888398;
  if (!qword_1EB888398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888398);
  }
  return result;
}

unint64_t sub_1C007C74C(void *a1)
{
  a1[1] = sub_1BFE3CF48();
  a1[2] = sub_1BFF8B470();
  unint64_t result = sub_1C1132810();
  a1[3] = result;
  return result;
}

unint64_t sub_1C007C78C()
{
  unint64_t result = qword_1EB888380;
  if (!qword_1EB888380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888380);
  }
  return result;
}

unint64_t sub_1C007C7E0()
{
  unint64_t result = qword_1EB888378;
  if (!qword_1EB888378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888378);
  }
  return result;
}

unint64_t sub_1C007C83C()
{
  unint64_t result = qword_1EB888368;
  if (!qword_1EB888368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888368);
  }
  return result;
}

unint64_t sub_1C007C890()
{
  unint64_t result = qword_1EB888360;
  if (!qword_1EB888360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888360);
  }
  return result;
}

unint64_t sub_1C007C8E4()
{
  unint64_t result = qword_1EB87E940;
  if (!qword_1EB87E940)
  {
    sub_1BFEFF3E8(255, &qword_1EB87E948, (uint64_t (*)(void))sub_1C006F9DC, (uint64_t)&type metadata for FormatVideoPlayerContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatSwitchValue);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87E940);
  }
  return result;
}

unint64_t sub_1C007C97C()
{
  unint64_t result = qword_1EB888330;
  if (!qword_1EB888330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888330);
  }
  return result;
}

unint64_t sub_1C007C9D0()
{
  unint64_t result = qword_1EB888328;
  if (!qword_1EB888328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888328);
  }
  return result;
}

void sub_1C007CA24()
{
  type metadata accessor for FormatURL();
  if (v0 <= 0x3F)
  {
    sub_1BFE8568C(319, (unint64_t *)&qword_1EB879A70, (void (*)(uint64_t))type metadata accessor for FormatURL);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_1C007CB28()
{
  unint64_t result = qword_1EB888318;
  if (!qword_1EB888318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888318);
  }
  return result;
}

unint64_t sub_1C007CB7C()
{
  unint64_t result = qword_1EB888310;
  if (!qword_1EB888310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888310);
  }
  return result;
}

unint64_t sub_1C007CBD8()
{
  unint64_t result = qword_1EB8758C0;
  if (!qword_1EB8758C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8758C0);
  }
  return result;
}

unint64_t sub_1C007CC2C()
{
  unint64_t result = qword_1EB8758B8;
  if (!qword_1EB8758B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8758B8);
  }
  return result;
}

unint64_t sub_1C007CC88()
{
  unint64_t result = qword_1EB888300;
  if (!qword_1EB888300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888300);
  }
  return result;
}

unint64_t sub_1C007CCDC()
{
  unint64_t result = qword_1EB8882F8;
  if (!qword_1EB8882F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8882F8);
  }
  return result;
}

uint64_t sub_1C007CD30()
{
  uint64_t result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

unint64_t sub_1C007CE28()
{
  unint64_t result = qword_1EB865ED8;
  if (!qword_1EB865ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865ED8);
  }
  return result;
}

unint64_t sub_1C007CE7C()
{
  unint64_t result = qword_1EB865ED0;
  if (!qword_1EB865ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865ED0);
  }
  return result;
}

unint64_t sub_1C007CED0()
{
  unint64_t result = qword_1EB875760;
  if (!qword_1EB875760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875760);
  }
  return result;
}

unint64_t sub_1C007CF24()
{
  unint64_t result = qword_1EB875758;
  if (!qword_1EB875758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875758);
  }
  return result;
}

unint64_t sub_1C007CF78()
{
  unint64_t result = qword_1EB875750;
  if (!qword_1EB875750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875750);
  }
  return result;
}

unint64_t sub_1C007CFCC()
{
  unint64_t result = qword_1EB875748;
  if (!qword_1EB875748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875748);
  }
  return result;
}

unint64_t sub_1C007D02C()
{
  unint64_t result = qword_1EB896670;
  if (!qword_1EB896670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB896670);
  }
  return result;
}

unint64_t sub_1C007D080()
{
  unint64_t result = qword_1EB875628;
  if (!qword_1EB875628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875628);
  }
  return result;
}

unint64_t sub_1C007D0D4()
{
  unint64_t result = qword_1EB85B938;
  if (!qword_1EB85B938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B938);
  }
  return result;
}

unint64_t sub_1C007D128()
{
  unint64_t result = qword_1EB85B930;
  if (!qword_1EB85B930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B930);
  }
  return result;
}

unint64_t sub_1C007D184()
{
  unint64_t result = qword_1EB85B928;
  if (!qword_1EB85B928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B928);
  }
  return result;
}

unint64_t sub_1C007D1D8()
{
  unint64_t result = qword_1EB85B920;
  if (!qword_1EB85B920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B920);
  }
  return result;
}

unint64_t sub_1C007D234()
{
  unint64_t result = qword_1EB875618;
  if (!qword_1EB875618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875618);
  }
  return result;
}

unint64_t sub_1C007D288()
{
  unint64_t result = qword_1EB875610;
  if (!qword_1EB875610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875610);
  }
  return result;
}

unint64_t sub_1C007D2E4()
{
  unint64_t result = qword_1EB8882B8;
  if (!qword_1EB8882B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8882B8);
  }
  return result;
}

unint64_t sub_1C007D338()
{
  unint64_t result = qword_1EB8882B0;
  if (!qword_1EB8882B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8882B0);
  }
  return result;
}

uint64_t type metadata accessor for FormatBundleCache()
{
  return self;
}

unint64_t sub_1C007D3B8()
{
  unint64_t result = qword_1EB865DF0;
  if (!qword_1EB865DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865DF0);
  }
  return result;
}

unint64_t sub_1C007D40C()
{
  unint64_t result = qword_1EB865DE8;
  if (!qword_1EB865DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865DE8);
  }
  return result;
}

unint64_t sub_1C007D460()
{
  unint64_t result = qword_1EB875550;
  if (!qword_1EB875550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875550);
  }
  return result;
}

unint64_t sub_1C007D4B4()
{
  unint64_t result = qword_1EB875548;
  if (!qword_1EB875548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875548);
  }
  return result;
}

unint64_t sub_1C007D508()
{
  unint64_t result = qword_1EB875540;
  if (!qword_1EB875540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875540);
  }
  return result;
}

uint64_t sub_1C007D564(uint64_t a1)
{
  return sub_1C00A5D60(a1, (unint64_t *)&unk_1EB87D1B8);
}

uint64_t sub_1C007D590(uint64_t *a1, void *a2)
{
  return sub_1BFCCD6D4(a1, a2);
}

uint64_t sub_1C007D5B0(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1BFCB6824(0, &qword_1EB8866E8);
  sub_1C151819C();
  *(_OWORD *)(v2 + 16) = v4;
  return swift_unknownObjectRelease();
}

uint64_t sub_1C007D634(uint64_t *a1, void *a2)
{
  return sub_1BFCCD6D4(a1, a2);
}

uint64_t sub_1C007D654(uint64_t a1, void (*a2)(void), uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_1C007D698(uint64_t a1)
{
  return sub_1C007D654(a1, (void (*)(void))sub_1C00915CC, MEMORY[0x1E4FAB010]);
}

uint64_t sub_1C007D6C4()
{
  type metadata accessor for LayeredMediaLayerRenderableProvider();
  return swift_allocObject();
}

uint64_t sub_1C007D6F8(void *a1)
{
  return sub_1BFCBE638(a1, qword_1EB896288, (uint64_t)&protocol descriptor for CategoryViewStylerType, (void (*)(void))type metadata accessor for CategoryViewLayoutAttributesFactory, (void (*)(unsigned char *, uint64_t))sub_1BFC773DC);
}

uint64_t sub_1C007D734@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C00A5E64((uint64_t (*)(void))type metadata accessor for LayeredMediaVariantSelector, (uint64_t)&off_1F1BAD340, a1);
}

uint64_t sub_1C007D754(void *a1)
{
  return sub_1BFC88088(a1, (void (*)(void))type metadata accessor for LayeredMediaLayerRenderableProvider, (void (*)(void))type metadata accessor for LayeredMediaViewModelFactory);
}

uint64_t sub_1C007D780(void *a1)
{
  return sub_1BFC88088(a1, (void (*)(void))type metadata accessor for LayeredMediaLayerRenderableProvider, (void (*)(void))type metadata accessor for LayeredMediaViewProvider);
}

uint64_t sub_1C007D7AC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BFC4FEAC(a1, (uint64_t (*)(void))type metadata accessor for CategoryViewStyler, (uint64_t)&off_1F1BA3FE0, a2, 16.0);
}

uint64_t sub_1C007D7D0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BFC472CC((void (*)(void))type metadata accessor for GapViewRenderer, (uint64_t)&protocol witness table for GapViewRenderer, a1);
}

uint64_t sub_1C007D7F0()
{
  type metadata accessor for FormatSponsoredBannerNodeRenderer();
  return swift_allocObject();
}

uint64_t sub_1C007D824(void *a1)
{
  return sub_1BFC88088(a1, (void (*)(void))type metadata accessor for LayeredMediaLayerRenderer, (void (*)(void))type metadata accessor for LayeredMediaViewModelRenderer);
}

uint64_t sub_1C007D850(void *a1)
{
  return sub_1BFCBE638(a1, &qword_1EB8959B0, (uint64_t)&protocol descriptor for IssueCoverViewRendererType, (void (*)(void))type metadata accessor for FormatIssueCoverNodeRenderer, (void (*)(unsigned char *, uint64_t))sub_1BFC773DC);
}

void *sub_1C007D88C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1BFC702B4(a1, a2);
}

uint64_t sub_1C007D894@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BFC472CC((void (*)(void))type metadata accessor for GapOfflineViewRenderer, (uint64_t)&protocol witness table for GapOfflineViewRenderer, a1);
}

uint64_t sub_1C007D8B8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, &qword_1EB8948F8);
  uint64_t v4 = sub_1C151814C();
  sub_1BFC66384((uint64_t)a1, (uint64_t)v10);
  if (v4 || (__swift_project_boxed_opaque_existential_1(v10, v10[3]), (uint64_t result = sub_1C151818C()) != 0))
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    sub_1C151B48C();
    swift_allocObject();
    uint64_t v6 = sub_1C151B47C();
    type metadata accessor for FormatImageProcessor();
    *(void *)(swift_allocObject() + 16) = v6;
    sub_1BFD52288(&qword_1EB889848, 255, (void (*)(uint64_t))type metadata accessor for FormatImageProcessor);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1BFCB6824(0, &qword_1EB8948F0);
    uint64_t result = sub_1C151819C();
    if (v9)
    {
      uint64_t v7 = sub_1C1519EFC();
      swift_allocObject();
      uint64_t result = sub_1C1519EEC();
      uint64_t v8 = MEMORY[0x1E4FABB80];
      a2[3] = v7;
      a2[4] = v8;
      *a2 = result;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C007DAA0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BFD51E5C(a1, (void (*)(void))type metadata accessor for ThumbnailProcessor, &qword_1EB888A18, (void (*)(uint64_t))type metadata accessor for ThumbnailProcessor, a2);
}

uint64_t sub_1C007DAE8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BFD51E5C(a1, (void (*)(void))type metadata accessor for LayeredMediaLayerProcessor, &qword_1EB88C508, (void (*)(uint64_t))type metadata accessor for LayeredMediaLayerProcessor, a2);
}

uint64_t sub_1C007DB34(uint64_t a1)
{
  return sub_1BFDA2BC0(a1);
}

uint64_t sub_1C007DB58(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C007DBB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PuzzleStatsState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C007DC1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PuzzleStatsState.init(from:)(a1, a2);
}

unint64_t sub_1C007DC3C()
{
  unint64_t result = qword_1EB862DF0;
  if (!qword_1EB862DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862DF0);
  }
  return result;
}

unint64_t sub_1C007DC90()
{
  unint64_t result = qword_1EB862DE8;
  if (!qword_1EB862DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862DE8);
  }
  return result;
}

unint64_t sub_1C007DCE4()
{
  unint64_t result = qword_1EB8953E0;
  if (!qword_1EB8953E0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB8953E0);
  }
  return result;
}

uint64_t dispatch thunk of OfflineProviding.addObserver(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_1C007DD50(void *a1)
{
  return FormatTagBinding.Color.encode(to:)(a1);
}

unint64_t sub_1C007DD68()
{
  unint64_t result = qword_1EB865DB0;
  if (!qword_1EB865DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865DB0);
  }
  return result;
}

unint64_t sub_1C007DDBC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C007DE8C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C007DDE8()
{
  return sub_1C151EAEC();
}

unint64_t sub_1C007DE38()
{
  unint64_t result = qword_1EB865DA8;
  if (!qword_1EB865DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865DA8);
  }
  return result;
}

unint64_t sub_1C007DE8C(char a1)
{
  unint64_t result = 0x756F726765726F66;
  switch(a1)
  {
    case 1:
    case 3:
    case 5:
      unint64_t result = 0xD000000000000018;
      break;
    case 2:
      unint64_t result = 0x756F72676B636162;
      break;
    case 4:
      unint64_t result = 0x74695470756F7267;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    case 8:
      unint64_t result = 0x6F6C6F436E6F6369;
      break;
    case 9:
      unint64_t result = 0xD000000000000015;
      break;
    case 10:
      unint64_t result = 0xD000000000000015;
      break;
    case 11:
      unint64_t result = 0xD000000000000013;
      break;
    case 12:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 13:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 14:
      unint64_t result = 0xD000000000000010;
      break;
    case 15:
      unint64_t result = 0xD000000000000019;
      break;
    case 16:
      unint64_t result = 0xD000000000000017;
      break;
    case 17:
      unint64_t result = 0xD000000000000024;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1C007E064()
{
  unint64_t result = qword_1EB862DD8;
  if (!qword_1EB862DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862DD8);
  }
  return result;
}

unint64_t sub_1C007E0C0()
{
  unint64_t result = qword_1EB888090;
  if (!qword_1EB888090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888090);
  }
  return result;
}

unint64_t sub_1C007E114()
{
  unint64_t result = qword_1EB888088;
  if (!qword_1EB888088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888088);
  }
  return result;
}

unint64_t sub_1C007E170()
{
  unint64_t result = qword_1EB888078;
  if (!qword_1EB888078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888078);
  }
  return result;
}

unint64_t sub_1C007E1C4()
{
  unint64_t result = qword_1EB888070;
  if (!qword_1EB888070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888070);
  }
  return result;
}

unint64_t sub_1C007E220()
{
  unint64_t result = qword_1EB888060;
  if (!qword_1EB888060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888060);
  }
  return result;
}

unint64_t sub_1C007E274()
{
  unint64_t result = qword_1EB888058;
  if (!qword_1EB888058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB888058);
  }
  return result;
}

unint64_t sub_1C007E2D0()
{
  unint64_t result = qword_1EB887F80;
  if (!qword_1EB887F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887F80);
  }
  return result;
}

unint64_t sub_1C007E324()
{
  unint64_t result = qword_1EB887F78;
  if (!qword_1EB887F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887F78);
  }
  return result;
}

uint64_t sub_1C007E378()
{
  uint64_t result = type metadata accessor for FormatURL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1C007E428(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C151FD8C();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C007E47C()
{
  sub_1C007E428(319, (unint64_t *)&qword_1EB8948A0, MEMORY[0x1E4F276F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_1C007E538()
{
  unint64_t result = qword_1EB865D18;
  if (!qword_1EB865D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865D18);
  }
  return result;
}

unint64_t sub_1C007E58C()
{
  unint64_t result = qword_1EB865D10;
  if (!qword_1EB865D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865D10);
  }
  return result;
}

unint64_t sub_1C007E5E4()
{
  unint64_t result = qword_1EB875418;
  if (!qword_1EB875418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875418);
  }
  return result;
}

unint64_t sub_1C007E638()
{
  unint64_t result = qword_1EB875410;
  if (!qword_1EB875410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875410);
  }
  return result;
}

unint64_t sub_1C007E694()
{
  unint64_t result = qword_1EB887E20;
  if (!qword_1EB887E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887E20);
  }
  return result;
}

unint64_t sub_1C007E6E8()
{
  unint64_t result = qword_1EB887E18;
  if (!qword_1EB887E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887E18);
  }
  return result;
}

uint64_t sub_1C007E73C()
{
  uint64_t result = type metadata accessor for GroupLayoutBindingContext();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C007E7FC()
{
  return sub_1C12FDFF4(&qword_1EB875308);
}

uint64_t sub_1C007E834@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1BFC6D688(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_1C007E868()
{
  unint64_t result = qword_1EB887D40;
  if (!qword_1EB887D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887D40);
  }
  return result;
}

unint64_t sub_1C007E8BC()
{
  unint64_t result = qword_1EB887D38;
  if (!qword_1EB887D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887D38);
  }
  return result;
}

unint64_t sub_1C007E910()
{
  unint64_t result = qword_1EB887D30;
  if (!qword_1EB887D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887D30);
  }
  return result;
}

uint64_t sub_1C007E964(void *a1)
{
  return FormatFixedColor.encode(to:)(a1);
}

unint64_t sub_1C007E97C()
{
  unint64_t result = qword_1EB85B888;
  if (!qword_1EB85B888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B888);
  }
  return result;
}

uint64_t FormatFixedColor.rawValue.getter()
{
  uint64_t result = 0x6B63616C62;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1702194274;
      break;
    case 2:
      uint64_t result = 0x6E776F7262;
      break;
    case 3:
      uint64_t result = 1851881827;
      break;
    case 4:
      uint64_t result = 0x796172476B726164;
      break;
    case 5:
      uint64_t result = 2036429415;
      break;
    case 6:
      uint64_t result = 0x6E65657267;
      break;
    case 7:
      uint64_t result = 0x617247746867696CLL;
      break;
    case 8:
      uint64_t result = 0x61746E6567616DLL;
      break;
    case 9:
      uint64_t result = 0x65676E61726FLL;
      break;
    case 0xA:
      uint64_t result = 0x656C70727570;
      break;
    case 0xB:
      uint64_t result = 0x6574696877;
      break;
    case 0xC:
      uint64_t result = 0x776F6C6C6579;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1C007EAF4()
{
  unint64_t result = qword_1EB887D08;
  if (!qword_1EB887D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887D08);
  }
  return result;
}

unint64_t sub_1C007EB48()
{
  unint64_t result = qword_1EB887D00;
  if (!qword_1EB887D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887D00);
  }
  return result;
}

unint64_t sub_1C007EB9C()
{
  unint64_t result = qword_1EB8752C0;
  if (!qword_1EB8752C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8752C0);
  }
  return result;
}

unint64_t sub_1C007EBF0()
{
  unint64_t result = qword_1EB8752B8;
  if (!qword_1EB8752B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8752B8);
  }
  return result;
}

unint64_t sub_1C007EC4C()
{
  unint64_t result = qword_1EB887CF0;
  if (!qword_1EB887CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887CF0);
  }
  return result;
}

unint64_t sub_1C007ECA0()
{
  unint64_t result = qword_1EB887CE8;
  if (!qword_1EB887CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887CE8);
  }
  return result;
}

uint64_t sub_1C007ECF4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1C086F1AC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void sub_1C007ED20()
{
  sub_1BFE323F8(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1C007EDC8()
{
  sub_1C1512180(319, &qword_1EB887B40, (uint64_t (*)(uint64_t))type metadata accessor for FormatCustomItem.Action, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_1C007EEA4()
{
  unint64_t result = qword_1EB85D160;
  if (!qword_1EB85D160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85D160);
  }
  return result;
}

unint64_t sub_1C007EEF8()
{
  unint64_t result = qword_1EB85D158;
  if (!qword_1EB85D158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85D158);
  }
  return result;
}

unint64_t sub_1C007EF54()
{
  unint64_t result = qword_1EB865C28;
  if (!qword_1EB865C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865C28);
  }
  return result;
}

unint64_t sub_1C007EFA8()
{
  unint64_t result = qword_1EB865C20;
  if (!qword_1EB865C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865C20);
  }
  return result;
}

uint64_t sub_1C007EFFC(void *a1)
{
  return FormatCountLimit.encode(to:)(a1);
}

unint64_t sub_1C007F014()
{
  unint64_t result = qword_1EB85FFE0;
  if (!qword_1EB85FFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85FFE0);
  }
  return result;
}

unint64_t sub_1C007F070()
{
  unint64_t result = qword_1EB87E3F0;
  if (!qword_1EB87E3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87E3F0);
  }
  return result;
}

unint64_t sub_1C007F0C4()
{
  unint64_t result = qword_1EB87E3E8;
  if (!qword_1EB87E3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87E3E8);
  }
  return result;
}

unint64_t sub_1C007F120()
{
  unint64_t result = qword_1EB8752A8;
  if (!qword_1EB8752A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8752A8);
  }
  return result;
}

unint64_t sub_1C007F174()
{
  unint64_t result = qword_1EB8752A0;
  if (!qword_1EB8752A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8752A0);
  }
  return result;
}

unint64_t sub_1C007F1D0()
{
  unint64_t result = qword_1EB887B38;
  if (!qword_1EB887B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887B38);
  }
  return result;
}

unint64_t sub_1C007F224()
{
  unint64_t result = qword_1EB887B30;
  if (!qword_1EB887B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887B30);
  }
  return result;
}

unint64_t sub_1C007F27C()
{
  unint64_t result = qword_1EB875290;
  if (!qword_1EB875290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875290);
  }
  return result;
}

unint64_t sub_1C007F2D0()
{
  unint64_t result = qword_1EB875288;
  if (!qword_1EB875288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875288);
  }
  return result;
}

unint64_t sub_1C007F324()
{
  unint64_t result = qword_1EB85B858;
  if (!qword_1EB85B858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B858);
  }
  return result;
}

void sub_1C007F378()
{
  if (!qword_1EB875270)
  {
    unint64_t v0 = sub_1C151FD8C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB875270);
    }
  }
}

unint64_t sub_1C007F3D0()
{
  unint64_t result = qword_1EB887B10;
  if (!qword_1EB887B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887B10);
  }
  return result;
}

unint64_t sub_1C007F424()
{
  unint64_t result = qword_1EB875260;
  if (!qword_1EB875260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875260);
  }
  return result;
}

unint64_t sub_1C007F478()
{
  unint64_t result = qword_1EB875258;
  if (!qword_1EB875258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB875258);
  }
  return result;
}

unint64_t sub_1C007F4CC(void *a1)
{
  a1[1] = sub_1C007F424();
  a1[2] = sub_1C007F478();
  unint64_t result = sub_1C045E12C();
  a1[3] = result;
  return result;
}

uint64_t type metadata accessor for FollowingManager()
{
  return self;
}

uint64_t sub_1C007F528(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CoverChannelView();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C007F568()
{
  return sub_1C007F528(&qword_1EB875190);
}

uint64_t type metadata accessor for ShortcutManager()
{
  return self;
}

uint64_t sub_1C007F5C0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C007F628(a1, &qword_1EB890238, (uint64_t)&protocol witness table for FCSportsEventController, a2);
}

uint64_t sub_1C007F5DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for StubOfflineProvider();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for StubOfflineProvider;
  *a1 = result;
  return result;
}

uint64_t sub_1C007F628@<X0>(void *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v7 = sub_1BFC39268(0, a2);
  uint64_t result = sub_1C151818C();
  if (result)
  {
    a4[3] = v7;
    a4[4] = a3;
    *a4 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C007F6B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for PerformanceIssueService();
  uint64_t result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&off_1F1BF8240;
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for ResourceService()
{
  return self;
}

uint64_t ResourceService.init(cloudContext:)(uint64_t a1)
{
  *(unsigned char *)(v1 + 24) = 2;
  *(void *)(v1 + 16) = a1;
  return v1;
}

unint64_t sub_1C007F738()
{
  unint64_t result = qword_1EB862DB0;
  if (!qword_1EB862DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862DB0);
  }
  return result;
}

unint64_t sub_1C007F78C()
{
  unint64_t result = qword_1EB862DA8;
  if (!qword_1EB862DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862DA8);
  }
  return result;
}

unint64_t sub_1C007F7E8()
{
  unint64_t result = qword_1EB862DA0;
  if (!qword_1EB862DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862DA0);
  }
  return result;
}

unint64_t sub_1C007F83C()
{
  unint64_t result = qword_1EB862D98;
  if (!qword_1EB862D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862D98);
  }
  return result;
}

uint64_t sub_1C007F890()
{
  uint64_t result = type metadata accessor for PuzzleStatisticCategory(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for NativeAdService()
{
  return self;
}

uint64_t sub_1C007F94C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BFD223F0(a1, (uint64_t (*)(void))type metadata accessor for SportsEmbedConfigurationManager, (uint64_t (*)(uint64_t, uint64_t, char *))sub_1C0ADA64C, (uint64_t)&protocol witness table for SportsEmbedConfigurationManager, a2);
}

uint64_t sub_1C007F984@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BFD223F0(a1, (uint64_t (*)(void))type metadata accessor for SportsTaxonomyGraphManager, (uint64_t (*)(uint64_t, uint64_t, char *))sub_1C00D8394, (uint64_t)&protocol witness table for SportsTaxonomyGraphManager, a2);
}

uint64_t type metadata accessor for GapViewRenderer()
{
  return self;
}

uint64_t sub_1C007F9E4(uint64_t a1, double *a2, uint64_t a3)
{
  double v4 = a2[4];
  double v5 = a2[5];
  double v6 = a2[6];
  double v7 = a2[7];
  sub_1BFC66384(a1 + 56, (uint64_t)v12);
  uint64_t v8 = *(void **)(a3 + OBJC_IVAR____TtC8NewsFeed7GapView_activityIndicatorView);
  objc_msgSend(v8, sel_setFrame_, v4, v5, v6, v7);
  uint64_t v9 = v13;
  uint64_t v10 = v14;
  __swift_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(void *, uint64_t, uint64_t))(v10 + 8))(v8, v9, v10);
  objc_msgSend(v8, sel_startAnimating);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

void sub_1C007FAB4()
{
  sub_1C007FC48();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for FormatVideoView()
{
  uint64_t result = qword_1EB887A18;
  if (!qword_1EB887A18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C007FBB4()
{
  uint64_t result = type metadata accessor for FormatVideoData.Assets(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1C007FC48()
{
  if (!qword_1EB887A08)
  {
    type metadata accessor for FormatVideoData.Assets(255);
    unint64_t v0 = sub_1C151FD8C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB887A08);
    }
  }
}

uint64_t type metadata accessor for FormatVideoData.Assets(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, qword_1EB87B4E8);
}

unint64_t sub_1C007FCC8()
{
  unint64_t result = qword_1EB887A00;
  if (!qword_1EB887A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887A00);
  }
  return result;
}

unint64_t sub_1C007FD1C()
{
  unint64_t result = qword_1EB8879F8;
  if (!qword_1EB8879F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8879F8);
  }
  return result;
}

void sub_1C007FD70()
{
  sub_1BFC3E490();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for FormatSplitView()
{
  uint64_t result = qword_1EB8879D8;
  if (!qword_1EB8879D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1C007FE64()
{
  unint64_t result = qword_1EB8879D0;
  if (!qword_1EB8879D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8879D0);
  }
  return result;
}

unint64_t sub_1C007FEB8()
{
  unint64_t result = qword_1EB8879C8;
  if (!qword_1EB8879C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8879C8);
  }
  return result;
}

unint64_t sub_1C007FF14()
{
  unint64_t result = qword_1EB8879B8;
  if (!qword_1EB8879B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8879B8);
  }
  return result;
}

unint64_t sub_1C007FF68()
{
  unint64_t result = qword_1EB8879B0;
  if (!qword_1EB8879B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8879B0);
  }
  return result;
}

void *sub_1C007FFBC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_1BFC809D0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_1C007FFF0()
{
  unint64_t result = qword_1EB8878E0;
  if (!qword_1EB8878E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8878E0);
  }
  return result;
}

unint64_t sub_1C0080044()
{
  unint64_t result = qword_1EB8878D8;
  if (!qword_1EB8878D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8878D8);
  }
  return result;
}

unint64_t sub_1C0080098()
{
  unint64_t result = qword_1EB8878D0;
  if (!qword_1EB8878D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8878D0);
  }
  return result;
}

unint64_t sub_1C00800EC()
{
  unint64_t result = qword_1EB874F40;
  if (!qword_1EB874F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874F40);
  }
  return result;
}

unint64_t sub_1C0080144()
{
  unint64_t result = qword_1EB874F28;
  if (!qword_1EB874F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874F28);
  }
  return result;
}

unint64_t sub_1C0080198()
{
  unint64_t result = qword_1EB85FE88;
  if (!qword_1EB85FE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85FE88);
  }
  return result;
}

unint64_t sub_1C00801EC()
{
  unint64_t result = qword_1EB85F160;
  if (!qword_1EB85F160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85F160);
  }
  return result;
}

unint64_t sub_1C0080240()
{
  unint64_t result = qword_1EB870AE8;
  if (!qword_1EB870AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB870AE8);
  }
  return result;
}

uint64_t sub_1C0080294()
{
  return swift_initClassMetadata2();
}

unint64_t sub_1C00802F0()
{
  unint64_t result = qword_1EB8877C8;
  if (!qword_1EB8877C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8877C8);
  }
  return result;
}

unint64_t sub_1C0080344()
{
  unint64_t result = qword_1EB8877C0;
  if (!qword_1EB8877C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8877C0);
  }
  return result;
}

uint64_t sub_1C0080398(uint64_t a1)
{
  return sub_1BFC82C24(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(uint64_t **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72));
}

uint64_t sub_1C00803CC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BFCC7CDC(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), a1);
}

unint64_t sub_1C00803FC()
{
  unint64_t result = qword_1EB8877B0;
  if (!qword_1EB8877B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8877B0);
  }
  return result;
}

unint64_t sub_1C0080450()
{
  unint64_t result = qword_1EB8877A8;
  if (!qword_1EB8877A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8877A8);
  }
  return result;
}

unint64_t sub_1C00804AC()
{
  unint64_t result = qword_1EB887798;
  if (!qword_1EB887798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887798);
  }
  return result;
}

unint64_t sub_1C0080500()
{
  unint64_t result = qword_1EB887790;
  if (!qword_1EB887790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887790);
  }
  return result;
}

unint64_t sub_1C0080558()
{
  unint64_t result = qword_1EB874F18;
  if (!qword_1EB874F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874F18);
  }
  return result;
}

unint64_t sub_1C00805AC()
{
  unint64_t result = qword_1EB874F08;
  if (!qword_1EB874F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874F08);
  }
  return result;
}

unint64_t sub_1C0080600()
{
  unint64_t result = qword_1EB874F00;
  if (!qword_1EB874F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874F00);
  }
  return result;
}

unint64_t sub_1C0080654()
{
  unint64_t result = qword_1EB870AE0;
  if (!qword_1EB870AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB870AE0);
  }
  return result;
}

unint64_t sub_1C00806B0()
{
  unint64_t result = qword_1EB887780;
  if (!qword_1EB887780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887780);
  }
  return result;
}

unint64_t sub_1C0080704()
{
  unint64_t result = qword_1EB887778;
  if (!qword_1EB887778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887778);
  }
  return result;
}

uint64_t type metadata accessor for FormatAnimation()
{
  return self;
}

uint64_t type metadata accessor for FontBookFactory()
{
  return self;
}

uint64_t sub_1C00807A0()
{
  type metadata accessor for FeedPuzzleStatisticFactory();
  return swift_allocObject();
}

uint64_t sub_1C00807D4()
{
  type metadata accessor for FeedPuzzleTypeFactory();
  return swift_allocObject();
}

uint64_t sub_1C0080808()
{
  sub_1BFCB6824(0, &qword_1EB88EA10);
  sub_1C1518B0C();
  return swift_release();
}

uint64_t sub_1C0080880(uint64_t a1)
{
  return sub_1BFCB4F50(a1, (void (*)(void, __n128))type metadata accessor for FollowingCommandHandler);
}

uint64_t sub_1C00808AC(uint64_t a1)
{
  return sub_1BFCB4F50(a1, (void (*)(void, __n128))type metadata accessor for LiveActivityCommandHandler);
}

uint64_t sub_1C00808D8(uint64_t a1)
{
  return sub_1BFCB4F50(a1, (void (*)(void, __n128))type metadata accessor for LikingCommandHandler);
}

uint64_t sub_1C0080904()
{
  type metadata accessor for BlockingCompleteCommandHandler();
  return swift_allocObject();
}

uint64_t sub_1C0080938(uint64_t a1)
{
  return sub_1BFC89550(a1, (void (*)(void))type metadata accessor for BlockingCompleteCommandHandler);
}

uint64_t sub_1C0080964(uint64_t a1)
{
  return sub_1BFCB4F50(a1, (void (*)(void, __n128))type metadata accessor for LikingCompleteCommandHandler);
}

uint64_t sub_1C0080990(void *a1)
{
  return sub_1BFD11BDC(a1, (void (*)(void))type metadata accessor for FeedPersonalizationDetailCommandHandler);
}

uint64_t sub_1C00809A8(uint64_t a1)
{
  return sub_1BFC89550(a1, (void (*)(void))type metadata accessor for FeedPersonalizationDetailCommandHandler);
}

uint64_t sub_1C00809D4(uint64_t a1)
{
  return sub_1BFC89550(a1, (void (*)(void))type metadata accessor for FeedDatabaseCommandHandler);
}

uint64_t sub_1C0080A00(void *a1)
{
  return sub_1BFC708A8(a1, (uint64_t)&qword_1EB87A130, 0x1E4F7E320, (void (*)(void, uint64_t, uint64_t))sub_1BFC39268, (void (*)(void))type metadata accessor for FeedCursorDatabaseCommandHandler);
}

uint64_t sub_1C0080A3C(uint64_t a1)
{
  return sub_1BFC89550(a1, (void (*)(void))type metadata accessor for FeedCursorDatabaseCommandHandler);
}

uint64_t sub_1C0080A68(void *a1)
{
  return sub_1BFD11BDC(a1, (void (*)(void))type metadata accessor for FeedCursorCommandHandler);
}

uint64_t sub_1C0080A80(uint64_t a1)
{
  return sub_1BFC89550(a1, (void (*)(void))type metadata accessor for FeedCursorCommandHandler);
}

uint64_t sub_1C0080AAC()
{
  type metadata accessor for ReportScoreConcernCommandHandler();
  return swift_allocObject();
}

uint64_t sub_1C0080AE0(uint64_t a1)
{
  return sub_1BFC89550(a1, (void (*)(void))type metadata accessor for ReportScoreConcernCommandHandler);
}

uint64_t sub_1C0080B0C(void *a1)
{
  return sub_1BFC708A8(a1, (uint64_t)&unk_1EB87A230, (uint64_t)&protocolRef_FCPaidAccessCheckerType, (void (*)(void, uint64_t, uint64_t))sub_1BFC9DBE8, (void (*)(void))type metadata accessor for CopyIssueCommandHandler);
}

uint64_t sub_1C0080B48(uint64_t a1)
{
  return sub_1BFC89550(a1, (void (*)(void))type metadata accessor for CopyIssueCommandHandler);
}

uint64_t sub_1C0080B74(uint64_t a1)
{
  return sub_1BFC89550(a1, (void (*)(void))type metadata accessor for BlockingCommandHandler);
}

id sub_1C0080BA0()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for NotificationCommandHandler());
  return objc_msgSend(v0, sel_init);
}

uint64_t sub_1C0080BD8(uint64_t a1)
{
  return sub_1BFC89550(a1, (void (*)(void))type metadata accessor for NotificationCommandHandler);
}

uint64_t sub_1C0080C04(uint64_t a1)
{
  return sub_1BFC89550(a1, (void (*)(void))type metadata accessor for OpenURLCommandHandler);
}

uint64_t sub_1C0080C30(uint64_t a1)
{
  return sub_1BFC89550(a1, (void (*)(void))type metadata accessor for ClearSavedCommandHandler);
}

uint64_t sub_1C0080C5C(uint64_t a1)
{
  return sub_1BFC89550(a1, (void (*)(void))type metadata accessor for SavingCommandHandler);
}

uint64_t sub_1C0080C88(uint64_t a1)
{
  return sub_1BFCB4F50(a1, (void (*)(void, __n128))type metadata accessor for ShortcutCommandHandler);
}

uint64_t sub_1C0080CB8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C0080CD4()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ViewAutomation()
{
  return __swift_instantiateGenericMetadata();
}

void sub_1C0080D08()
{
  if (!qword_1EB8849D8)
  {
    unint64_t v0 = type metadata accessor for OfflineManager();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8849D8);
    }
  }
}

void sub_1C0080D68()
{
  if (!qword_1EB887768)
  {
    unint64_t v0 = type metadata accessor for OfflineManager();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB887768);
    }
  }
}

uint64_t sub_1C0080DC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v4;
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t type metadata accessor for OfflineManager.State()
{
  return __swift_instantiateGenericMetadata();
}

BOOL OfflineManager.State.isOffline.getter()
{
  return *(void *)(v0 + 8) != 0;
}

uint64_t sub_1C0080E84@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BFC3D7A4((uint64_t (*)(void))type metadata accessor for FontBookFactory, (uint64_t)&protocol witness table for FontBookFactory, a1);
}

uint64_t sub_1C0080EA4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BFC3D7A4((uint64_t (*)(void))type metadata accessor for FeedLayoutTracker, (uint64_t)&off_1F1B9A710, a1);
}

uint64_t sub_1C0080EC8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for GapOfflineView();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C0080F08()
{
  return sub_1C0080EC8(&qword_1EB874CC0);
}

uint64_t sub_1C0080F3C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C0080F9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C0081004(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1C008106C()
{
  type metadata accessor for FormatWebEmbed();
  if (v0 <= 0x3F)
  {
    sub_1BFECFC20(319);
    if (v1 <= 0x3F)
    {
      sub_1BFEC8548(319);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

unint64_t sub_1C0081194()
{
  unint64_t result = qword_1EB887690;
  if (!qword_1EB887690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887690);
  }
  return result;
}

unint64_t sub_1C00811E8()
{
  unint64_t result = qword_1EB887688;
  if (!qword_1EB887688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887688);
  }
  return result;
}

void sub_1C008123C()
{
  sub_1BFF477D4(319, (unint64_t *)&qword_1EB87B9B8, (void (*)(uint64_t))type metadata accessor for FormatViewBackground);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1C00812E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1BFEFE7C8(&qword_1EB887668, (uint64_t)qword_1EB93CB10, a1);
}

uint64_t sub_1C0081308(uint64_t a1)
{
  return sub_1BFCFB43C(a1, qword_1EB93CB10);
}

uint64_t sub_1C008131C(uint64_t a1)
{
  return sub_1BFCFB43C(a1, qword_1EB93CAF8);
}

uint64_t sub_1C0081330(uint64_t a1)
{
  return sub_1BFCFB43C(a1, qword_1EB93CAE0);
}

uint64_t sub_1C0081344(uint64_t a1)
{
  return sub_1BFCFB43C(a1, qword_1EB93CAC8);
}

uint64_t sub_1C0081358(uint64_t a1)
{
  return sub_1BFCFB43C(a1, qword_1EB93CAB0);
}

double sub_1C008136C()
{
  sub_1C00626B4();
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1C1529AE0;
  *(void *)(v0 + 56) = &type metadata for FormatVersions.CrystalGlowC;
  *(void *)(v0 + 64) = &off_1F1C39A08;
  qword_1EB93C7D8 = v0;
  return result;
}

uint64_t sub_1C00813BC(uint64_t a1)
{
  return sub_1BFCFB43C(a1, qword_1EB93CA98);
}

uint64_t sub_1C00813D0(uint64_t a1)
{
  return sub_1BFCFB43C(a1, qword_1EB93CA80);
}

uint64_t sub_1C00813E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1BFEFE7C8(&qword_1EB887628, (uint64_t)qword_1EB93CA68, a1);
}

uint64_t sub_1C0081408(uint64_t a1)
{
  return sub_1BFCFB43C(a1, qword_1EB93CA68);
}

uint64_t sub_1C008141C(uint64_t a1)
{
  return sub_1BFCFB43C(a1, qword_1EB93CA50);
}

uint64_t sub_1C0081430(uint64_t a1)
{
  return sub_1BFCFB43C(a1, qword_1EB93CA38);
}

uint64_t sub_1C0081444@<X0>(uint64_t a1@<X8>)
{
  return sub_1BFEFE7C8(&qword_1EB887610, (uint64_t)qword_1EB93CA20, a1);
}

uint64_t sub_1C0081468(uint64_t a1)
{
  return sub_1BFCFB43C(a1, qword_1EB93CA20);
}

uint64_t sub_1C008147C(uint64_t a1)
{
  return sub_1BFCFB43C(a1, qword_1EB93CA08);
}

uint64_t sub_1C0081490(uint64_t a1)
{
  return sub_1BFCFB43C(a1, qword_1EB93C9F0);
}

double sub_1C00814A4()
{
  sub_1C00626B4();
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 16;
  *(_OWORD *)(v0 + 16) = xmmword_1C1531C20;
  *(void *)(v0 + 56) = &type metadata for FormatVersions.JazzkonC;
  *(void *)(v0 + 64) = &off_1F1C39B68;
  *(void *)(v0 + 96) = &type metadata for FormatVersions.JazzkonG;
  *(void *)(v0 + 104) = &off_1F1C39AE8;
  *(void *)(v0 + 136) = &type metadata for FormatVersions.Azden;
  *(void *)(v0 + 144) = &off_1F1C39A68;
  *(void *)(v0 + 176) = &type metadata for FormatVersions.AzdenB;
  *(void *)(v0 + 184) = &off_1F1C399E8;
  *(void *)(v0 + 216) = &type metadata for FormatVersions.AzdenC;
  *(void *)(v0 + 224) = &off_1F1C39AA8;
  *(void *)(v0 + 256) = &type metadata for FormatVersions.AzdenE;
  *(void *)(v0 + 264) = &off_1F1C39B08;
  *(void *)(v0 + 296) = &type metadata for FormatVersions.StarSky;
  *(void *)(v0 + 304) = &off_1F1C39BA8;
  *(void *)(v0 + 336) = &type metadata for FormatVersions.StarSkyC;
  *(void *)(v0 + 344) = &off_1F1C39A28;
  *(void *)(v0 + 376) = &type metadata for FormatVersions.StarSkyE;
  *(void *)(v0 + 384) = &off_1F1C39B88;
  *(void *)(v0 + 416) = &type metadata for FormatVersions.Sydro;
  *(void *)(v0 + 424) = &off_1F1C39B28;
  *(void *)(v0 + 456) = &type metadata for FormatVersions.SydroC;
  *(void *)(v0 + 464) = &off_1F1C399C8;
  *(void *)(v0 + 496) = &type metadata for FormatVersions.SydroF;
  *(void *)(v0 + 504) = &off_1F1C39B48;
  *(void *)(v0 + 536) = &type metadata for FormatVersions.Dawnburst;
  *(void *)(v0 + 544) = &off_1F1C39BC8;
  *(void *)(v0 + 576) = &type metadata for FormatVersions.DawnburstC;
  *(void *)(v0 + 584) = &off_1F1C39A88;
  *(void *)(v0 + 616) = &type metadata for FormatVersions.DawnburstF;
  *(void *)(v0 + 624) = &off_1F1C39AC8;
  *(void *)(v0 + 656) = &type metadata for FormatVersions.CrystalGlow;
  *(void *)(v0 + 664) = &off_1F1C39A48;
  qword_1EB93C850 = v0;
  return result;
}

uint64_t sub_1C0081630()
{
  return 0x737275626E776144;
}

uint64_t sub_1C008164C@<X0>(uint64_t a1@<X8>)
{
  return sub_1BFEFE7C8(&qword_1EB8849C8, (uint64_t)qword_1EB93C790, a1);
}

uint64_t sub_1C0081670()
{
  return 0x737275626E776144;
}

uint64_t sub_1C008168C@<X0>(uint64_t a1@<X8>)
{
  return sub_1BFEFE7C8(&qword_1EB8875E0, (uint64_t)qword_1EB93C9D8, a1);
}

uint64_t sub_1C00816B0(uint64_t a1)
{
  return sub_1BFCFB43C(a1, qword_1EB93C9D8);
}

unint64_t sub_1C00816CC()
{
  unint64_t result = qword_1EB8875D8;
  if (!qword_1EB8875D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8875D8);
  }
  return result;
}

unint64_t sub_1C0081720()
{
  unint64_t result = qword_1EB8875D0;
  if (!qword_1EB8875D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8875D0);
  }
  return result;
}

unint64_t sub_1C008177C()
{
  unint64_t result = qword_1EB8875C0;
  if (!qword_1EB8875C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8875C0);
  }
  return result;
}

unint64_t sub_1C00817D0()
{
  unint64_t result = qword_1EB8875B8;
  if (!qword_1EB8875B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8875B8);
  }
  return result;
}

unint64_t sub_1C008182C()
{
  unint64_t result = qword_1EB887500;
  if (!qword_1EB887500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887500);
  }
  return result;
}

unint64_t sub_1C0081880()
{
  unint64_t result = qword_1EB8874F8;
  if (!qword_1EB8874F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8874F8);
  }
  return result;
}

unint64_t sub_1C00818D8()
{
  unint64_t result = qword_1EB87BF28;
  if (!qword_1EB87BF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87BF28);
  }
  return result;
}

unint64_t sub_1C008192C()
{
  unint64_t result = qword_1EB87BF20;
  if (!qword_1EB87BF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87BF20);
  }
  return result;
}

uint64_t sub_1C0081980()
{
  uint64_t result = type metadata accessor for FormatFontResource(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for FormatRemoteImage();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1C0081A44()
{
  unint64_t result = qword_1EB874BF0;
  if (!qword_1EB874BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874BF0);
  }
  return result;
}

unint64_t sub_1C0081AA0()
{
  unint64_t result = qword_1EB874BD8;
  if (!qword_1EB874BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874BD8);
  }
  return result;
}

unint64_t sub_1C0081AF4()
{
  unint64_t result = qword_1EB874BD0;
  if (!qword_1EB874BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874BD0);
  }
  return result;
}

void sub_1C0081B48()
{
  sub_1BFF9F1E8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_1C0081BF0()
{
  unint64_t result = qword_1EB874AF0;
  if (!qword_1EB874AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874AF0);
  }
  return result;
}

unint64_t sub_1C0081C44()
{
  unint64_t result = qword_1EB874AE8;
  if (!qword_1EB874AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874AE8);
  }
  return result;
}

unint64_t sub_1C0081C98()
{
  unint64_t result = qword_1EB874AD8;
  if (!qword_1EB874AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874AD8);
  }
  return result;
}

unint64_t sub_1C0081CEC()
{
  unint64_t result = qword_1EB85B740;
  if (!qword_1EB85B740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B740);
  }
  return result;
}

unint64_t sub_1C0081D48()
{
  unint64_t result = qword_1EB8874D8;
  if (!qword_1EB8874D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8874D8);
  }
  return result;
}

unint64_t sub_1C0081D9C()
{
  unint64_t result = qword_1EB8874D0;
  if (!qword_1EB8874D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8874D0);
  }
  return result;
}

unint64_t sub_1C0081DF8()
{
  unint64_t result = qword_1EB8874C0;
  if (!qword_1EB8874C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8874C0);
  }
  return result;
}

unint64_t sub_1C0081E4C()
{
  unint64_t result = qword_1EB8874B8;
  if (!qword_1EB8874B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8874B8);
  }
  return result;
}

unint64_t sub_1C0081EA4()
{
  unint64_t result = qword_1EB874AC8;
  if (!qword_1EB874AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874AC8);
  }
  return result;
}

unint64_t sub_1C0081EF8()
{
  unint64_t result = qword_1EB874AC0;
  if (!qword_1EB874AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874AC0);
  }
  return result;
}

unint64_t sub_1C0081F4C()
{
  unint64_t result = qword_1EB85EA78;
  if (!qword_1EB85EA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85EA78);
  }
  return result;
}

unint64_t sub_1C0081FA8()
{
  unint64_t result = qword_1EB87B3D8;
  if (!qword_1EB87B3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87B3D8);
  }
  return result;
}

unint64_t sub_1C0081FFC()
{
  unint64_t result = qword_1EB87B3D0;
  if (!qword_1EB87B3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87B3D0);
  }
  return result;
}

void sub_1C0082050(void *a1@<X8>)
{
  *a1 = 0x6D6F74737563;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1C0082068()
{
  return sub_1C151EAEC();
}

unint64_t sub_1C00820B8()
{
  unint64_t result = qword_1EB85EA70;
  if (!qword_1EB85EA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85EA70);
  }
  return result;
}

unint64_t sub_1C0082114()
{
  unint64_t result = qword_1EB874AB0;
  if (!qword_1EB874AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874AB0);
  }
  return result;
}

unint64_t sub_1C0082168()
{
  unint64_t result = qword_1EB874AA8;
  if (!qword_1EB874AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874AA8);
  }
  return result;
}

unint64_t sub_1C00821C4()
{
  unint64_t result = qword_1EB8874A8;
  if (!qword_1EB8874A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8874A8);
  }
  return result;
}

unint64_t sub_1C0082218()
{
  unint64_t result = qword_1EB8874A0;
  if (!qword_1EB8874A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8874A0);
  }
  return result;
}

unint64_t sub_1C0082274()
{
  unint64_t result = qword_1EB887490;
  if (!qword_1EB887490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887490);
  }
  return result;
}

unint64_t sub_1C00822C8()
{
  unint64_t result = qword_1EB887488;
  if (!qword_1EB887488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887488);
  }
  return result;
}

unint64_t sub_1C008231C()
{
  unint64_t result = qword_1EB874A70;
  if (!qword_1EB874A70)
  {
    sub_1BFEFF3E8(255, &qword_1EB874A80, (uint64_t (*)(void))sub_1C0082908, (uint64_t)&type metadata for FormatInteger, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatEquation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874A70);
  }
  return result;
}

unint64_t sub_1C00823AC()
{
  unint64_t result = qword_1EB887478;
  if (!qword_1EB887478)
  {
    sub_1BFEFF3E8(255, (unint64_t *)&qword_1EB874A68, (uint64_t (*)(void))sub_1C0084108, (uint64_t)&type metadata for FormatFloat, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatEquation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887478);
  }
  return result;
}

uint64_t type metadata accessor for FormatComputed()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1C008245C()
{
  unint64_t result = qword_1EB887458;
  if (!qword_1EB887458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887458);
  }
  return result;
}

unint64_t sub_1C00824B0()
{
  unint64_t result = qword_1EB887450;
  if (!qword_1EB887450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887450);
  }
  return result;
}

uint64_t sub_1C0082508(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CoverIssueView();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C0082548()
{
  return sub_1C0082508(&qword_1EB874920);
}

uint64_t sub_1C008257C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C0082598()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for CellAutomation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C00825CC(uint64_t a1)
{
  return sub_1BFCCB4A8(a1, 0x646565467377654ELL, 0xEE0074616D726F46, &qword_1EB93C748);
}

uint64_t type metadata accessor for WebEmbedCache()
{
  return self;
}

id sub_1C008261C(void *a1)
{
  return objc_msgSend(a1, sel_setColor_, *(void *)(*(void *)v1 + 16));
}

ValueMetadata *type metadata accessor for GapViewLayout()
{
  return &type metadata for GapViewLayout;
}

unint64_t sub_1C0082640()
{
  unint64_t result = qword_1EB8747D8;
  if (!qword_1EB8747D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8747D8);
  }
  return result;
}

unint64_t sub_1C0082694()
{
  unint64_t result = qword_1EB8747D0;
  if (!qword_1EB8747D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8747D0);
  }
  return result;
}

unint64_t sub_1C00826E8()
{
  unint64_t result = qword_1EB8747C0;
  if (!qword_1EB8747C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8747C0);
  }
  return result;
}

unint64_t sub_1C008273C()
{
  unint64_t result = qword_1EB8747B8;
  if (!qword_1EB8747B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8747B8);
  }
  return result;
}

unint64_t sub_1C00827A8()
{
  unint64_t result = qword_1EB887298;
  if (!qword_1EB887298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887298);
  }
  return result;
}

unint64_t sub_1C00827FC()
{
  unint64_t result = qword_1EB887290;
  if (!qword_1EB887290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887290);
  }
  return result;
}

uint64_t sub_1C0082850()
{
  uint64_t result = type metadata accessor for FormatFile();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FormatService.CacheFormatFile(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, (uint64_t *)&unk_1EB87D630);
}

unint64_t sub_1C0082908()
{
  unint64_t result = qword_1EB874528;
  if (!qword_1EB874528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874528);
  }
  return result;
}

unint64_t sub_1C008295C()
{
  unint64_t result = qword_1EB874520;
  if (!qword_1EB874520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874520);
  }
  return result;
}

unint64_t sub_1C00829B0()
{
  unint64_t result = qword_1EB874518;
  if (!qword_1EB874518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874518);
  }
  return result;
}

unint64_t sub_1C0082A04()
{
  unint64_t result = qword_1EB874510;
  if (!qword_1EB874510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874510);
  }
  return result;
}

unint64_t sub_1C0082A58()
{
  unint64_t result = qword_1EB874508;
  if (!qword_1EB874508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874508);
  }
  return result;
}

unint64_t sub_1C0082AAC(void *a1)
{
  a1[1] = sub_1C008295C();
  a1[2] = sub_1C00829B0();
  a1[3] = sub_1C0082A58();
  unint64_t result = sub_1C0082A04();
  a1[4] = result;
  return result;
}

unint64_t sub_1C0082AF4()
{
  unint64_t result = qword_1EB85B718;
  if (!qword_1EB85B718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B718);
  }
  return result;
}

unint64_t sub_1C0082B48()
{
  unint64_t result = qword_1EB85B710;
  if (!qword_1EB85B710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B710);
  }
  return result;
}

unint64_t sub_1C0082BA4()
{
  unint64_t result = qword_1EB882D10;
  if (!qword_1EB882D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB882D10);
  }
  return result;
}

unint64_t sub_1C0082BF8()
{
  unint64_t result = qword_1EB887268;
  if (!qword_1EB887268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887268);
  }
  return result;
}

unint64_t sub_1C0082C54()
{
  unint64_t result = qword_1EB874440;
  if (!qword_1EB874440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874440);
  }
  return result;
}

unint64_t sub_1C0082CA8()
{
  unint64_t result = qword_1EB874438;
  if (!qword_1EB874438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874438);
  }
  return result;
}

uint64_t sub_1C0082CFC()
{
  uint64_t result = type metadata accessor for FormatArticleOverrides();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1C0082DB8()
{
  unint64_t result = qword_1EB874338;
  if (!qword_1EB874338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874338);
  }
  return result;
}

unint64_t sub_1C0082E0C()
{
  unint64_t result = qword_1EB874330;
  if (!qword_1EB874330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB874330);
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsRecord()
{
  return &type metadata for SportsRecord;
}

void sub_1C0082E70()
{
  xmmword_1EB894638 = 0uLL;
}

unint64_t sub_1C0082E88()
{
  unint64_t result = qword_1EB887150;
  if (!qword_1EB887150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887150);
  }
  return result;
}

unint64_t sub_1C0082EDC()
{
  unint64_t result = qword_1EB887148;
  if (!qword_1EB887148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887148);
  }
  return result;
}

unint64_t sub_1C0082F38()
{
  unint64_t result = qword_1EB887138;
  if (!qword_1EB887138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887138);
  }
  return result;
}

unint64_t sub_1C0082F8C()
{
  unint64_t result = qword_1EB887130;
  if (!qword_1EB887130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887130);
  }
  return result;
}

uint64_t sub_1C0082FE0()
{
  return sub_1BFEBC2BC(&qword_1EB874230, (void (*)(uint64_t))type metadata accessor for FormatOption);
}

uint64_t sub_1C0083014()
{
  return sub_1C0B9D2BC(&qword_1EB870AC0, (void (*)(uint64_t))type metadata accessor for FormatOption);
}

unint64_t sub_1C0083050()
{
  unint64_t result = qword_1EB887108;
  if (!qword_1EB887108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887108);
  }
  return result;
}

unint64_t sub_1C00830A4()
{
  unint64_t result = qword_1EB887100;
  if (!qword_1EB887100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887100);
  }
  return result;
}

uint64_t sub_1C00830F8()
{
  type metadata accessor for FormatLogger();
  uint64_t result = swift_initStaticObject();
  qword_1EB887040 = result;
  return result;
}

unint64_t sub_1C0083124()
{
  unint64_t result = qword_1EB8740E0;
  if (!qword_1EB8740E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8740E0);
  }
  return result;
}

unint64_t sub_1C0083178()
{
  unint64_t result = qword_1EB85B5C0;
  if (!qword_1EB85B5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B5C0);
  }
  return result;
}

id sub_1C00831CC(char a1)
{
  uint64_t v2 = v1;
  sub_1BFE6CAC4(0, &qword_1EB8851A0, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FAD758]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  __n128 v7 = MEMORY[0x1F4188790](v4);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v10 = OBJC_IVAR____TtC8NewsFeed12FormatButton_isLongPressEnabled;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC8NewsFeed12FormatButton_isLongPressEnabled) = a1;
  uint64_t v11 = OBJC_IVAR____TtC8NewsFeed12FormatButton_longPressGesture;
  if ((a1 & 1) != 0 && !*(void *)(v2 + OBJC_IVAR____TtC8NewsFeed12FormatButton_longPressGesture))
  {
    (*(void (**)(char *, void, uint64_t, __n128))(v6 + 104))(v9, *MEMORY[0x1E4FAD750], v5, v7);
    uint64_t v13 = sub_1C151C86C();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t v14 = *(void **)(v2 + v11);
    *(void *)(v2 + v11) = v13;

    id result = *(id *)(v2 + OBJC_IVAR____TtC8NewsFeed12FormatButton_longPressGesture);
    if (!result) {
      return result;
    }
  }
  else
  {
    id result = *(id *)(v2 + OBJC_IVAR____TtC8NewsFeed12FormatButton_longPressGesture);
    if (!result) {
      return result;
    }
  }
  return objc_msgSend(result, sel_setEnabled_, *(unsigned __int8 *)(v2 + v10), v7.n128_f64[0]);
}

unint64_t sub_1C0083358()
{
  unint64_t result = qword_1EB8740D0;
  if (!qword_1EB8740D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8740D0);
  }
  return result;
}

unint64_t sub_1C00833AC()
{
  unint64_t result = qword_1EB85B5B8;
  if (!qword_1EB85B5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B5B8);
  }
  return result;
}

unint64_t sub_1C0083408()
{
  unint64_t result = qword_1EB887018;
  if (!qword_1EB887018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887018);
  }
  return result;
}

unint64_t sub_1C008345C()
{
  unint64_t result = qword_1EB887010;
  if (!qword_1EB887010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB887010);
  }
  return result;
}

unint64_t sub_1C00834B0()
{
  unint64_t result = qword_1EB8740C8;
  if (!qword_1EB8740C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8740C8);
  }
  return result;
}

unint64_t sub_1C0083504()
{
  unint64_t result = qword_1EB8740B8;
  if (!qword_1EB8740B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8740B8);
  }
  return result;
}

uint64_t sub_1C0083558()
{
  uint64_t result = type metadata accessor for FormatPurchaseData(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1C0083618(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CategoryView();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C0083658()
{
  return sub_1C0083618(&qword_1EB87B258);
}

unint64_t sub_1C008368C()
{
  unint64_t result = qword_1EB8740A8;
  if (!qword_1EB8740A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8740A8);
  }
  return result;
}

unint64_t sub_1C00836E0()
{
  unint64_t result = qword_1EB8740A0;
  if (!qword_1EB8740A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8740A0);
  }
  return result;
}

uint64_t sub_1C0083734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C005C0B8(a1, a2, a3, (uint64_t (*)(void))sub_1C008368C, (uint64_t (*)(void))sub_1C00836E0);
}

uint64_t sub_1C0083760()
{
  return sub_1C0083AA8();
}

uint64_t sub_1C008376C(uint64_t a1)
{
  uint64_t result = sub_1BFEB1328(&qword_1EB873FF8, (void (*)(uint64_t))_s3GapV5BoundVMa);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C00837C4()
{
  unint64_t result = qword_1EB873FE8;
  if (!qword_1EB873FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873FE8);
  }
  return result;
}

unint64_t sub_1C0083818()
{
  unint64_t result = qword_1EB873FE0;
  if (!qword_1EB873FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873FE0);
  }
  return result;
}

unint64_t sub_1C008386C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1C00837C4();
  unint64_t result = sub_1C0083818();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1C008389C()
{
  uint64_t result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for FeedBannerAd();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C008397C(uint64_t a1)
{
  uint64_t result = sub_1BFFFDACC(&qword_1EB873F38, (void (*)(uint64_t))_s2AdV5BoundVMa);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C00839D4()
{
  unint64_t result = qword_1EB873F28;
  if (!qword_1EB873F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873F28);
  }
  return result;
}

unint64_t sub_1C0083A28()
{
  unint64_t result = qword_1EB873F20;
  if (!qword_1EB873F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873F20);
  }
  return result;
}

uint64_t sub_1C0083A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C005C0B8(a1, a2, a3, (uint64_t (*)(void))sub_1C00839D4, (uint64_t (*)(void))sub_1C0083A28);
}

uint64_t sub_1C0083AA8()
{
  uint64_t result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FormatTimer()
{
  return self;
}

unint64_t sub_1C0083B78()
{
  unint64_t result = qword_1EB873D68;
  if (!qword_1EB873D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873D68);
  }
  return result;
}

unint64_t sub_1C0083BCC()
{
  unint64_t result = qword_1EB873D60;
  if (!qword_1EB873D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873D60);
  }
  return result;
}

unint64_t sub_1C0083C28()
{
  unint64_t result = qword_1EB886FF8;
  if (!qword_1EB886FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886FF8);
  }
  return result;
}

unint64_t sub_1C0083C7C()
{
  unint64_t result = qword_1EB886FF0;
  if (!qword_1EB886FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886FF0);
  }
  return result;
}

uint64_t sub_1C0083CD0(void *a1)
{
  return FormatRoute.encode(to:)(a1);
}

unint64_t sub_1C0083CE8()
{
  unint64_t result = qword_1EB85B570;
  if (!qword_1EB85B570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B570);
  }
  return result;
}

void sub_1C0083D3C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE90000000000006FLL;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x65726F4D656573;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6961746544656573;
    unint64_t v4 = 0xEA0000000000736CLL;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6564695679616C70;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1C0083DA4()
{
  return sub_1C151EAEC();
}

unint64_t sub_1C0083DF4()
{
  unint64_t result = qword_1EB865770;
  if (!qword_1EB865770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865770);
  }
  return result;
}

void sub_1C0083E4C()
{
  sub_1BFC82330(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_1C0083EE4()
{
  unint64_t result = qword_1EB886F38;
  if (!qword_1EB886F38)
  {
    type metadata accessor for FormatRegex();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886F38);
  }
  return result;
}

unint64_t sub_1C0083F44()
{
  unint64_t result = qword_1EB886F10;
  if (!qword_1EB886F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886F10);
  }
  return result;
}

unint64_t sub_1C0083F98()
{
  unint64_t result = qword_1EB886F08;
  if (!qword_1EB886F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886F08);
  }
  return result;
}

uint64_t type metadata accessor for FormatMerge()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1C0084004()
{
  unint64_t result = qword_1EB873C88;
  if (!qword_1EB873C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873C88);
  }
  return result;
}

unint64_t sub_1C0084060()
{
  unint64_t result = qword_1EB886EF8;
  if (!qword_1EB886EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886EF8);
  }
  return result;
}

unint64_t sub_1C00840B4()
{
  unint64_t result = qword_1EB886EF0;
  if (!qword_1EB886EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886EF0);
  }
  return result;
}

unint64_t sub_1C0084108()
{
  unint64_t result = qword_1EB873C80;
  if (!qword_1EB873C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873C80);
  }
  return result;
}

unint64_t sub_1C008415C()
{
  unint64_t result = qword_1EB873C78;
  if (!qword_1EB873C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873C78);
  }
  return result;
}

unint64_t sub_1C00841B0()
{
  unint64_t result = qword_1EB873C68;
  if (!qword_1EB873C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873C68);
  }
  return result;
}

unint64_t sub_1C0084204(void *a1)
{
  a1[1] = sub_1C008415C();
  a1[2] = sub_1BFDFBE94();
  a1[3] = sub_1BFE0FA08();
  unint64_t result = sub_1C00841B0();
  a1[4] = result;
  return result;
}

unint64_t sub_1C0084244(void *a1)
{
  a1[1] = sub_1BFE113DC();
  a1[2] = sub_1BFE10198();
  unint64_t result = sub_1C10E5B7C();
  a1[3] = result;
  return result;
}

unint64_t sub_1C0084284()
{
  unint64_t result = qword_1EB886ED8;
  if (!qword_1EB886ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886ED8);
  }
  return result;
}

unint64_t sub_1C00842D8()
{
  unint64_t result = qword_1EB886ED0;
  if (!qword_1EB886ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886ED0);
  }
  return result;
}

uint64_t sub_1C008432C()
{
  return sub_1BFC893EC();
}

uint64_t sub_1C0084334(void *a1)
{
  return sub_1BFC46108(a1, v1);
}

uint64_t sub_1C008433C(uint64_t a1)
{
  return sub_1BFC75090(a1, MEMORY[0x1E4F7B030], MEMORY[0x1E4F7B028]);
}

uint64_t sub_1C0084368(uint64_t a1)
{
  return sub_1BFC75090(a1, (void (*)(void))sub_1BFC4CE74, MEMORY[0x1E4F7A950]);
}

uint64_t sub_1C0084394@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v3 = type metadata accessor for FeedBannerAdRequester();
  uint64_t result = sub_1C151818C();
  if (result)
  {
    a2[3] = v3;
    a2[4] = (uint64_t)&protocol witness table for FeedBannerAdRequester;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C0084408(uint64_t a1)
{
  return sub_1BFC75090(a1, (void (*)(void))sub_1BFC4DB8C, MEMORY[0x1E4F7B060]);
}

uint64_t sub_1C0084434(uint64_t a1)
{
  return sub_1BFC75090(a1, (void (*)(void))sub_1BFC520B8, MEMORY[0x1E4F7B060]);
}

uint64_t sub_1C0084460(uint64_t a1)
{
  return sub_1BFC75090(a1, (void (*)(void))sub_1BFC4730C, MEMORY[0x1E4F7B060]);
}

uint64_t sub_1C008448C(void *a1)
{
  return sub_1BFD2E4CC(a1, (void (*)(void))sub_1BFC510B8, (void (*)(void))sub_1BFC520B8, (void (*)(void))sub_1BFC60470);
}

uint64_t sub_1C00844CC(void *a1)
{
  return sub_1BFD2E4CC(a1, (void (*)(void))sub_1BFC5175C, (void (*)(void))sub_1BFC4D090, (void (*)(void))sub_1BFC60398);
}

uint64_t sub_1C008450C(void *a1)
{
  return sub_1BFD2E4CC(a1, (void (*)(void))sub_1BFC46FF8, (void (*)(void))sub_1BFC4DB8C, (void (*)(void))sub_1BFC5E06C);
}

uint64_t sub_1C008454C(uint64_t a1)
{
  return sub_1BFC75090(a1, (void (*)(void))sub_1BFC510B8, MEMORY[0x1E4F7A950]);
}

uint64_t sub_1C0084578(uint64_t a1)
{
  return sub_1BFC75090(a1, (void (*)(void))sub_1BFC5175C, MEMORY[0x1E4F7A950]);
}

uint64_t sub_1C00845A4(uint64_t a1)
{
  return sub_1BFC75090(a1, (void (*)(void))sub_1BFC46FF8, MEMORY[0x1E4F7A950]);
}

uint64_t sub_1C00845D0()
{
  return sub_1BFD2DD44();
}

void sub_1C00845F4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for PuzzleData()
{
  uint64_t result = qword_1EB896DD0;
  if (!qword_1EB896DD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1C00846A8()
{
  unint64_t result = qword_1EB85CEE8;
  if (!qword_1EB85CEE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85CEE8);
  }
  return result;
}

unint64_t sub_1C00846FC()
{
  unint64_t result = qword_1EB85CED8;
  if (!qword_1EB85CED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85CED8);
  }
  return result;
}

unint64_t sub_1C0084750()
{
  unint64_t result = qword_1EB873B90;
  if (!qword_1EB873B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873B90);
  }
  return result;
}

unint64_t sub_1C00847A4()
{
  unint64_t result = qword_1EB873B88;
  if (!qword_1EB873B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873B88);
  }
  return result;
}

unint64_t sub_1C0084800()
{
  unint64_t result = qword_1EB886EC0;
  if (!qword_1EB886EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886EC0);
  }
  return result;
}

unint64_t sub_1C0084854()
{
  unint64_t result = qword_1EB886EB8;
  if (!qword_1EB886EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886EB8);
  }
  return result;
}

unint64_t sub_1C00848A8()
{
  unint64_t result = qword_1EB886D20;
  if (!qword_1EB886D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886D20);
  }
  return result;
}

unint64_t sub_1C00848FC(void *a1)
{
  a1[1] = sub_1BFE1CFFC();
  a1[2] = sub_1BFE1D79C();
  unint64_t result = sub_1C14BD610();
  a1[3] = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatMenu(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatMenu(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1C00849E4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return FormatMenu.init(from:)(a1, a2);
}

unint64_t sub_1C00849FC()
{
  unint64_t result = qword_1EB873B60;
  if (!qword_1EB873B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873B60);
  }
  return result;
}

unint64_t sub_1C0084A58()
{
  unint64_t result = qword_1EB873B58;
  if (!qword_1EB873B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873B58);
  }
  return result;
}

unint64_t sub_1C0084AAC()
{
  unint64_t result = qword_1EB873B50;
  if (!qword_1EB873B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873B50);
  }
  return result;
}

unint64_t sub_1C0084B00()
{
  unint64_t result = qword_1EB873B30;
  if (!qword_1EB873B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873B30);
  }
  return result;
}

unint64_t sub_1C0084B54()
{
  unint64_t result = qword_1EB873B28;
  if (!qword_1EB873B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873B28);
  }
  return result;
}

unint64_t sub_1C0084BB0()
{
  unint64_t result = qword_1EB886CD8;
  if (!qword_1EB886CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886CD8);
  }
  return result;
}

unint64_t sub_1C0084C04()
{
  unint64_t result = qword_1EB886CD0;
  if (!qword_1EB886CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886CD0);
  }
  return result;
}

unint64_t sub_1C0084C58()
{
  unint64_t result = qword_1EB886CC0;
  if (!qword_1EB886CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886CC0);
  }
  return result;
}

unint64_t sub_1C0084CAC(void *a1)
{
  a1[1] = sub_1BFE9439C();
  a1[2] = sub_1BFE9A444();
  unint64_t result = sub_1C0222930();
  a1[3] = result;
  return result;
}

uint64_t sub_1C0084CE4()
{
  uint64_t result = type metadata accessor for FormatContent(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for FormatPackage();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for FormatBindingContent();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for FormatFile()
{
  uint64_t result = qword_1EB873A68;
  if (!qword_1EB873A68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupConfigSidecarConfig()
{
  return &type metadata for FeedGroupConfigSidecarConfig;
}

unint64_t sub_1C0084EA0()
{
  unint64_t result = qword_1EB886C90;
  if (!qword_1EB886C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886C90);
  }
  return result;
}

unint64_t sub_1C0084EF4()
{
  unint64_t result = qword_1EB886C88;
  if (!qword_1EB886C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886C88);
  }
  return result;
}

unint64_t sub_1C0084F48()
{
  unint64_t result = qword_1EB886C80;
  if (!qword_1EB886C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886C80);
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedScoredTag()
{
  return &type metadata for FeedScoredTag;
}

unsigned char *sub_1C0084FAC(unsigned char *result, char a2)
{
  *unint64_t result = *result & 1 | (a2 << 6);
  return result;
}

uint64_t sub_1C0084FC8()
{
  uint64_t result = type metadata accessor for FeedWeather(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for FeedHeadline(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for FeedWebEmbed();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for FeedPuzzleStatistic();
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for FeedSponsorshipBannerAd();
          if (v5 <= 0x3F)
          {
            swift_initEnumMetadataMultiPayload();
            return 0;
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_1C0085194()
{
  unint64_t result = qword_1EB8739B8;
  if (!qword_1EB8739B8)
  {
    type metadata accessor for FeedGroupItem();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8739B8);
  }
  return result;
}

unint64_t sub_1C00851F4()
{
  unint64_t result = qword_1EB85B4B8;
  if (!qword_1EB85B4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B4B8);
  }
  return result;
}

unint64_t sub_1C0085248()
{
  unint64_t result = qword_1EB85B4B0;
  if (!qword_1EB85B4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B4B0);
  }
  return result;
}

unint64_t destroy for FeedPlatform(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if ((v2 + 1) <= 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WebEmbedDataVisualizationURLDataSourceContentType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 3;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedPlatform(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) < 2) {
    LODWORD(v3) = 0;
  }
  if (v3 >= 4) {
    return (v3 - 3);
  }
  else {
    return 0;
  }
}

uint64_t sub_1C008537C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if ((v4 + 1) > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1C00853D4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return FeedPlatform.init(from:)(a1, a2);
}

unint64_t sub_1C00853F0()
{
  unint64_t result = qword_1EB886BD8[0];
  if (!qword_1EB886BD8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB886BD8);
  }
  return result;
}

unint64_t sub_1C0085444()
{
  unint64_t result = qword_1EB886BD0;
  if (!qword_1EB886BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886BD0);
  }
  return result;
}

unint64_t sub_1C0085498()
{
  unint64_t result = qword_1EB886BC8;
  if (!qword_1EB886BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886BC8);
  }
  return result;
}

unint64_t sub_1C00854EC()
{
  unint64_t result = qword_1EB886BC0;
  if (!qword_1EB886BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB886BC0);
  }
  return result;
}

void sub_1C0085540()
{
}

uint64_t type metadata accessor for FeedLocation()
{
  return __swift_instantiateGenericMetadata();
}

void sub_1C0085564()
{
  type metadata accessor for FeedHeadline.State(319);
  if (v0 <= 0x3F)
  {
    sub_1BFEEF378(319, (unint64_t *)&unk_1EB8716B0, MEMORY[0x1E4F7A860], MEMORY[0x1E4FBB718]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_1C00856B0(uint64_t a1)
{
  uint64_t result = sub_1C008E430(&qword_1EB873770, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1C0085708()
{
  uint64_t result = type metadata accessor for FeedItem.SharedState(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C00857B8()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_1C00857D8(uint64_t a1)
{
  return FeedDatabase.save(snapshot:)(a1);
}

uint64_t FeedDatabase.__deallocating_deinit()
{
  FeedDatabase.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FeedDatabase()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C008586C()
{
  return sub_1BFC9A0B4(*(void *)(v0 + 80), (_OWORD *)(v0 + 88), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72));
}

uint64_t sub_1C00858A8()
{
  return sub_1BFC77624();
}

uint64_t sub_1C00858EC(uint64_t a1)
{
  uint64_t result = sub_1BFD68AA8(&qword_1EB873738, (void (*)(uint64_t))type metadata accessor for FeedBannerAd);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1C0085944(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C00859A4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1C0085A04()
{
  sub_1C0092BC8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata accessor for FeedWeather.Temperature(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, qword_1EB87D258);
}

uint64_t FeedService.init(feed:cursorFactory:personalizationService:)(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v8 = *(void **)(a1 + 16);
  uint64_t v7 = *(void **)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  *(void *)(v4 + 24) = *(void *)a1;
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v8;
  *(void *)(v4 + 48) = v7;
  *(unsigned char *)(v4 + 56) = v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FeedServiceState();
  v15[0] = v6;
  v15[1] = v5;
  v15[2] = (uint64_t)v8;
  v15[3] = (uint64_t)v7;
  char v16 = v9;
  swift_bridgeObjectRetain();
  id v10 = v8;
  id v11 = v7;
  *(void *)(v4 + 16) = FeedServiceState.__allocating_init(feed:)(v15);
  *(void *)(v4 + 104) = a2;
  sub_1BFC773DC(a3, v4 + 64);
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(void *)(v4 + 144) = 0;
  return v4;
}

uint64_t sub_1C0085BE8(uint64_t a1)
{
  nullsub_1(a1);
  return swift_retain();
}

uint64_t sub_1C0085C14(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C0085C50(uint64_t a1)
{
  return FeedManager.prepare(context:)(a1);
}

uint64_t sub_1C0085C74(uint64_t a1)
{
  return FeedManager.save(snapshot:)(a1);
}

uint64_t sub_1C0085C98()
{
  sub_1C0085FD0();
  return swift_retain();
}

uint64_t sub_1C0085CCC(uint64_t a1)
{
  return FeedManager.readAndFetch(context:)(a1);
}

uint64_t sub_1C0085CF0()
{
  sub_1C005F468();
  return swift_retain();
}

uint64_t FeedManager.__deallocating_deinit()
{
  FeedManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FeedManager()
{
  return swift_getGenericMetadata();
}

uint64_t FeedManager.save(snapshot:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 96);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = &v9[-v6];
  sub_1BFCFFA58((uint64_t)&v9[-v6]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 + 120) + 64))(a1, v4);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1C0085ED4()
{
  return sub_1BFD645A0();
}

uint64_t sub_1C0085F14(void *a1)
{
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1BFC7E3A0(a1, v1 + v4, *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(double *)(v1 + v5));
}

uint64_t sub_1C0085FD0()
{
  return *(void *)(v0 + 24);
}

uint64_t sub_1C0085FD8()
{
  return sub_1BFC5169C(*(double *)(v0 + 24));
}

uint64_t sub_1C0085FE4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1 < 0)
  {
    uint64_t v6 = a1 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v6;
    uint64_t v5 = 0x7000000000000000;
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = a1;
    uint64_t v5 = 0x2000000000000000;
  }
  *a2 = v5 | v4;
  return swift_retain();
}

uint64_t sub_1C0086068()
{
  uint64_t result = sub_1BFC740D0();
  qword_1EB93C7E0 = result;
  return result;
}

uint64_t sub_1C0086088()
{
  swift_getWitnessTable();
  return sub_1C15186EC();
}

uint64_t sub_1C00860DC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C00860F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BFC4C1A8(a1, *(void *)(v2 + 48), *(void *)(v2 + 16), a2);
}

uint64_t FeedCursor.serviceConfig.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 256));
}

unint64_t sub_1C008617C()
{
  unint64_t result = qword_1EB873500;
  if (!qword_1EB873500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873500);
  }
  return result;
}

unint64_t sub_1C00861D0(uint64_t a1)
{
  unint64_t result = sub_1C008617C();
  *(void *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for FeedIssue.Traits()
{
  return &type metadata for FeedIssue.Traits;
}

unsigned char *storeEnumTagSinglePayload for FeedMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1C00862D4()
{
  return sub_1C151EB5C();
}

NewsFeed::FeedMode_optional sub_1C0086334(Swift::String *a1)
{
  return FeedMode.init(rawValue:)(*a1);
}

unint64_t sub_1C0086344()
{
  unint64_t result = qword_1EB862D28;
  if (!qword_1EB862D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862D28);
  }
  return result;
}

unint64_t sub_1C0086398()
{
  unint64_t result = qword_1EB882A38;
  if (!qword_1EB882A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB882A38);
  }
  return result;
}

unint64_t sub_1C00863EC()
{
  unint64_t result = qword_1EB8849A0;
  if (!qword_1EB8849A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8849A0);
  }
  return result;
}

unint64_t sub_1C0086440()
{
  unint64_t result = qword_1EB884998;
  if (!qword_1EB884998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB884998);
  }
  return result;
}

uint64_t sub_1C0086494()
{
  uint64_t result = type metadata accessor for FeedBannerAd();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for FeedHeadline(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for FeedWebEmbed();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for FeedCustomItem();
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for FeedEngagementBanner();
          if (v5 <= 0x3F)
          {
            uint64_t result = type metadata accessor for FeedPuzzleStatistic();
            if (v6 <= 0x3F)
            {
              swift_initEnumMetadataMultiPayload();
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C00866B4(uint64_t a1)
{
  uint64_t result = sub_1C0A6337C((unint64_t *)&unk_1EB87AF50, (void (*)(uint64_t))type metadata accessor for FeedItem);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1C008670C()
{
  uint64_t result = type metadata accessor for SharedItem();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

unint64_t sub_1C0086784()
{
  unint64_t result = qword_1EB87D1C8;
  if (!qword_1EB87D1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB87D1C8);
  }
  return result;
}

unint64_t sub_1C00867D8(uint64_t a1)
{
  unint64_t result = sub_1C0086784();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1C0086800()
{
  unint64_t result = qword_1EB873438;
  if (!qword_1EB873438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB873438);
  }
  return result;
}

unint64_t sub_1C0086854(uint64_t a1)
{
  unint64_t result = sub_1C0086800();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for FeedLayoutAttributesFactoryProvider()
{
  return self;
}

unint64_t sub_1C00868A0()
{
  unint64_t result = qword_1EB865500;
  if (!qword_1EB865500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865500);
  }
  return result;
}

unint64_t sub_1C00868F4()
{
  unint64_t result = qword_1EB8654F8;
  if (!qword_1EB8654F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8654F8);
  }
  return result;
}

unint64_t sub_1C0086948()
{
  unint64_t result = qword_1EB8654F0;
  if (!qword_1EB8654F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8654F0);
  }
  return result;
}

unint64_t sub_1C00869A4()
{
  unint64_t result = qword_1EB8654E8;
  if (!qword_1EB8654E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8654E8);
  }
  return result;
}

unint64_t sub_1C00869F8()
{
  unint64_t result = qword_1EB8654E0;
  if (!qword_1EB8654E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8654E0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedPersonalizationClusteringRules(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C116297C);
}

uint64_t sub_1C0086A60(uint64_t a1, uint64_t a2)
{
  sub_1C0076E64(0, (unint64_t *)&unk_1EB882CC0, (void (*)(uint64_t))type metadata accessor for FeedPersonalizationClusteringRules);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1C0086AE0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C0086B44()
{
  sub_1BFF90234(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t dispatch thunk of FeedItemSupplementaryRendererType.register(view:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of FeedItemSupplementaryRendererType.render(in:supplementaryData:layoutAttributes:actionSenderHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 32))();
}

{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

void sub_1C0086C14()
{
  sub_1BFE4E978(319, &qword_1EB894688, MEMORY[0x1E4FAC150]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for FeedItemRendererPipelineProcessor(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, (uint64_t *)&unk_1EB894748);
}

uint64_t sub_1C0086CF4()
{
  uint64_t result = type metadata accessor for ImageRequestOptions();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupClusteringKnobsOverrides()
{
  return &type metadata for FeedGroupClusteringKnobsOverrides;
}

uint64_t type metadata accessor for FeedSuggestionClusteringService()
{
  return self;
}

uint64_t sub_1C0086DEC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C0086E4C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C0086EAC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C0086F0C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C0086F6C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C0086FCC()
{
  return sub_1BFE4D400(&qword_1EB873248);
}

uint64_t sub_1C0087000()
{
  return sub_1BFE4D400(&qword_1EB873250);
}

uint64_t sub_1C0087034()
{
  uint64_t result = type metadata accessor for FeedHeadline(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FeedHeadlineAudioCommandContext()
{
  uint64_t result = qword_1EB886990;
  if (!qword_1EB886990) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t dispatch thunk of FeedContentPrefetchManagerType.addTask<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

void sub_1C0087120(UICollectionView *a1)
{
}

id sub_1C0087144(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return FeedItemSupplementaryRenderer.render(in:supplementaryData:layoutAttributes:actionSenderHandler:)(a1, a2, a3, a4, a5);
}

uint64_t type metadata accessor for FeedItemCellSelectionRenderer()
{
  return self;
}

uint64_t sub_1C008718C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C00871A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 64);
}

uint64_t FeedJournalGroupResultOutput.name.getter()
{
  sub_1BFD7EBD0(v0, (uint64_t)&v5);
  if (v8 >= 3u)
  {
    if (v8 - 4 < 3)
    {
      sub_1BFD7EAE0((uint64_t)&v5);
      long long v5 = 0u;
      long long v6 = 0u;
      uint64_t v7 = 0;
LABEL_7:
      sub_1C0A8DBCC((uint64_t)&v5);
      return 0;
    }
    swift_bridgeObjectRelease();
  }
  sub_1BFC773DC(&v5, (uint64_t)v9);
  sub_1BFC773DC(v9, (uint64_t)&v5);
  uint64_t v1 = *((void *)&v6 + 1);
  if (!*((void *)&v6 + 1)) {
    goto LABEL_7;
  }
  uint64_t v2 = v7;
  __swift_project_boxed_opaque_existential_1(&v5, *((uint64_t *)&v6 + 1));
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v2 + 8) + 8) + 16))(v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
  return v3;
}

uint64_t sub_1C0087298(uint64_t a1, uint64_t a2)
{
  sub_1C00872FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1C00872FC()
{
  if (!qword_1EB886980)
  {
    sub_1BFCB6824(255, &qword_1EB886978);
    unint64_t v0 = sub_1C151FD8C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB886980);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for FeedGroupClusterOrderingMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_1C0087434()
{
  return sub_1C151EB5C();
}

NewsFeed::FeedGroupClusterOrderingMode_optional sub_1C0087494(Swift::String *a1)
{
  return FeedGroupClusterOrderingMode.init(rawValue:)(*a1);
}

unint64_t sub_1C00874A0()
{
  unint64_t result = qword_1EB8654C0;
  if (!qword_1EB8654C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8654C0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedGroupBundleArticleQuotas(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C122D680);
}

uint64_t type metadata accessor for FeedGroupBundleArticleQuotas()
{
  uint64_t result = qword_1EB882A28;
  if (!qword_1EB882A28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for FeedSectionPositionProvider()
{
  return self;
}

uint64_t FeedSectionPositionProvider.init()()
{
  return v0;
}

ValueMetadata *type metadata accessor for FeedReadStoryCommandContext()
{
  return &type metadata for FeedReadStoryCommandContext;
}

uint64_t type metadata accessor for FeedGroupEmitterRuleEdition()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for FeedVideoAdProviderFactory()
{
  return self;
}

unint64_t sub_1C00875CC()
{
  unint64_t result = qword_1EB85E5B8;
  if (!qword_1EB85E5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85E5B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedHeadlineScoringContext()
{
  return &type metadata for FeedHeadlineScoringContext;
}

uint64_t FeedHeadlineScoringContext.description.getter()
{
  uint64_t result = 0x6E776F6E6B6E55;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0xD000000000000011;
      break;
    case 2:
      uint64_t v2 = 0x206F69647541;
      goto LABEL_16;
    case 3:
      uint64_t result = 0xD000000000000023;
      break;
    case 4:
      uint64_t result = 0xD000000000000025;
      break;
    case 5:
      uint64_t result = 0xD000000000000024;
      break;
    case 6:
      uint64_t result = 0xD000000000000026;
      break;
    case 7:
      uint64_t result = 0xD000000000000014;
      break;
    case 8:
      uint64_t result = 0x64657461727543;
      break;
    case 9:
      uint64_t result = 0x20756F5920726F46;
      break;
    case 0xA:
      uint64_t result = 0xD00000000000001ELL;
      break;
    case 0xB:
      uint64_t result = 0xD000000000000014;
      break;
    case 0xC:
    case 0x12:
    case 0x18:
    case 0x20:
      uint64_t result = 0xD000000000000010;
      break;
    case 0xD:
      uint64_t result = 0x656E697A6167614DLL;
      break;
    case 0xE:
      uint64_t result = 0xD00000000000001DLL;
      break;
    case 0xF:
      uint64_t v2 = 0x206369706F54;
LABEL_16:
      uint64_t result = v2 & 0xFFFFFFFFFFFFLL | 0x6546000000000000;
      break;
    case 0x10:
      uint64_t result = 0x74726F705320794DLL;
      break;
    case 0x11:
      uint64_t result = 0xD000000000000017;
      break;
    case 0x13:
      uint64_t result = 0xD000000000000012;
      break;
    case 0x14:
      uint64_t result = 0xD000000000000015;
      break;
    case 0x15:
      uint64_t result = 0xD00000000000001DLL;
      break;
    case 0x16:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 0x17:
      uint64_t result = 0x6465654620676154;
      break;
    case 0x19:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 0x1A:
      uint64_t result = 0xD000000000000012;
      break;
    case 0x1B:
      uint64_t result = 0xD000000000000013;
      break;
    case 0x1C:
      uint64_t result = 0xD000000000000017;
      break;
    case 0x1D:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 0x1E:
      uint64_t result = 0xD000000000000016;
      break;
    case 0x1F:
      uint64_t result = 0x5320746E65636552;
      break;
    case 0x21:
      uint64_t result = 0xD000000000000018;
      break;
    case 0x22:
      uint64_t result = 0xD000000000000017;
      break;
    case 0x23:
      uint64_t result = 0x6957207961646F54;
      break;
    case 0x24:
      uint64_t result = 0x6764695720676154;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1C0087A04()
{
  unint64_t result = qword_1EB8867A8;
  if (!qword_1EB8867A8)
  {
    type metadata accessor for FeedContentPrefetchManager();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8867A8);
  }
  return result;
}

unint64_t sub_1C0087A58(uint64_t a1)
{
  unint64_t result = sub_1C0087A04();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t FeedRefreshBasicAnimation.init(refreshStateMachine:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

ValueMetadata *type metadata accessor for FeedGroupFreezingDisallow()
{
  return &type metadata for FeedGroupFreezingDisallow;
}

unint64_t sub_1C0087A9C()
{
  unint64_t result = qword_1EB85B2C8;
  if (!qword_1EB85B2C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B2C8);
  }
  return result;
}

unint64_t sub_1C0087AF8()
{
  unint64_t result = qword_1EB85CC40;
  if (!qword_1EB85CC40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85CC40);
  }
  return result;
}

unint64_t sub_1C0087B4C()
{
  unint64_t result = qword_1EB85CC38;
  if (!qword_1EB85CC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85CC38);
  }
  return result;
}

uint64_t sub_1C0087BA0@<X0>(uint64_t *a1@<X2>, _OWORD *a2@<X8>)
{
  return sub_1BFC397C4(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t type metadata accessor for FeedSponsorshipAdService()
{
  return self;
}

uint64_t type metadata accessor for FeedLayoutContextFactory()
{
  return self;
}

ValueMetadata *type metadata accessor for FeedGroupMutingExemption()
{
  return &type metadata for FeedGroupMutingExemption;
}

ValueMetadata *type metadata accessor for FeedGroupEmitterPriority()
{
  return &type metadata for FeedGroupEmitterPriority;
}

unint64_t sub_1C0087C18()
{
  unint64_t result = qword_1EB870980;
  if (!qword_1EB870980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB870980);
  }
  return result;
}

id sub_1C0087C6C()
{
  id result = sub_1BFC81AA4(0xD00000000000001ELL, 0x80000001C161B940);
  qword_1EB93C668 = (uint64_t)result;
  return result;
}

ValueMetadata *type metadata accessor for FeedPuzzleProgressState()
{
  return &type metadata for FeedPuzzleProgressState;
}

unint64_t sub_1C0087CB4()
{
  unint64_t result = qword_1EB865420;
  if (!qword_1EB865420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865420);
  }
  return result;
}

uint64_t sub_1C0087D08()
{
  return swift_initClassMetadata2();
}

uint64_t dispatch thunk of FeedNativeAdManagerType.onFetch(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

ValueMetadata *type metadata accessor for FeedIssueScoringContext()
{
  return &type metadata for FeedIssueScoringContext;
}

void sub_1C0087D7C()
{
  if (!qword_1EB865358)
  {
    sub_1C00868A0();
    sub_1C0086948();
    sub_1C00868F4();
    unint64_t v0 = type metadata accessor for FeedGroupKnobsRuleValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB865358);
    }
  }
}

uint64_t sub_1C0087E00()
{
  uint64_t result = type metadata accessor for FeedScoredResult();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FeedAutoRefreshStrategy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void sub_1C0087F74(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = 0x64656C6261736964;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6563726F66;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x64656C62616E65;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

unint64_t sub_1C0087FD0()
{
  unint64_t result = qword_1EB872D48;
  if (!qword_1EB872D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB872D48);
  }
  return result;
}

unint64_t sub_1C0088024()
{
  unint64_t result = qword_1EB872D40;
  if (!qword_1EB872D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB872D40);
  }
  return result;
}

uint64_t sub_1C0088078(uint64_t a1)
{
  unint64_t v2 = sub_1C0087FD0();
  uint64_t v3 = MEMORY[0x1E4FAB458];
  return MEMORY[0x1F415F4E8](a1, v2, v3);
}

uint64_t sub_1C00880D0(uint64_t a1)
{
  unint64_t v2 = (void *)(a1 + 16);
  swift_beginAccess();
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 16);
  if (v3)
  {
    swift_beginAccess();
    uint64_t v4 = *(void *)(a1 + 16);
    *unint64_t v2 = 0;
    v2[1] = 0;
    swift_retain();
    uint64_t v5 = sub_1BFC3E5C0(v4);
    v3(v5);
    return sub_1BFC3E5C0((uint64_t)v3);
  }
  else
  {
    uint64_t v7 = sub_1C135E4C8();
    v7();
    return swift_release();
  }
}

uint64_t sub_1C0088198()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for FeedPuzzleRankProgress()
{
  return &type metadata for FeedPuzzleRankProgress;
}

unint64_t sub_1C00881C4()
{
  unint64_t result = qword_1EB862C78;
  if (!qword_1EB862C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862C78);
  }
  return result;
}

uint64_t FeedNativeAdIntegrator.init()()
{
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  return v0;
}

uint64_t sub_1C0088240(uint64_t a1, uint64_t a2)
{
  sub_1BFE6A7A4(0, &qword_1EB886510, &qword_1EB886508, (uint64_t)&protocol descriptor for FeedLayoutDatabaseType, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double FeedJournalGroupResult.durationInMilliseconds.getter()
{
  return *(double *)(v0 + 224);
}

uint64_t getEnumTagSinglePayload for FormatBezierPathCurveComponent(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C0088320(uint64_t a1, uint64_t a2)
{
  sub_1C12796CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1C0088384()
{
  unint64_t result = qword_1EB85B298;
  if (!qword_1EB85B298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B298);
  }
  return result;
}

unint64_t sub_1C00883D8()
{
  unint64_t result = qword_1EB85B290;
  if (!qword_1EB85B290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B290);
  }
  return result;
}

unint64_t sub_1C008842C()
{
  unint64_t result = qword_1EB865288;
  if (!qword_1EB865288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865288);
  }
  return result;
}

unint64_t sub_1C0088480()
{
  unint64_t result = qword_1EB85B288;
  if (!qword_1EB85B288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B288);
  }
  return result;
}

double sub_1C00884E0@<D0>(_OWORD *a1@<X8>)
{
  sub_1BFCA09D4((uint64_t *)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

uint64_t type metadata accessor for FeedGroupKnobsRuleList()
{
  return swift_getGenericMetadata();
}

unint64_t sub_1C0088544()
{
  unint64_t result = qword_1EB865268;
  if (!qword_1EB865268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865268);
  }
  return result;
}

unint64_t sub_1C0088598()
{
  unint64_t result = qword_1EB865260;
  if (!qword_1EB865260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865260);
  }
  return result;
}

unint64_t sub_1C00885EC()
{
  unint64_t result = qword_1EB865258;
  if (!qword_1EB865258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865258);
  }
  return result;
}

unint64_t sub_1C0088640()
{
  unint64_t result = qword_1EB865250;
  if (!qword_1EB865250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865250);
  }
  return result;
}

unint64_t sub_1C00886B4()
{
  unint64_t result = qword_1EB865220;
  if (!qword_1EB865220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865220);
  }
  return result;
}

unint64_t sub_1C0088708()
{
  unint64_t result = qword_1EB865218;
  if (!qword_1EB865218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB865218);
  }
  return result;
}

uint64_t sub_1C008875C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C0088778()
{
  uint64_t result = type metadata accessor for FormatContent(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedBannerAdViewLayout()
{
  return &type metadata for FeedBannerAdViewLayout;
}

uint64_t sub_1C0088820()
{
  uint64_t result = type metadata accessor for FeedBannerAd();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C00888AC()
{
  return sub_1BFE131B4(&qword_1EB872A18, (void (*)(uint64_t))type metadata accessor for FeedBannerAdViewLayout.Attributes);
}

uint64_t sub_1C00888F4()
{
  return sub_1BFE131B4(&qword_1EB872A10, (void (*)(uint64_t))type metadata accessor for FeedBannerAdViewLayout.Attributes);
}

uint64_t sub_1C008893C()
{
  return sub_1BFE131B4(&qword_1EB872A30, (void (*)(uint64_t))type metadata accessor for FeedBannerAdViewLayout.Attributes);
}

uint64_t sub_1C0088984()
{
  return sub_1BFE131B4(&qword_1EB872A28, (void (*)(uint64_t))type metadata accessor for FeedBannerAdViewLayout.Attributes);
}

unint64_t sub_1C00889D4()
{
  unint64_t result = qword_1EB872A08;
  if (!qword_1EB872A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB872A08);
  }
  return result;
}

unint64_t sub_1C0088A28()
{
  unint64_t result = qword_1EB872A00;
  if (!qword_1EB872A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB872A00);
  }
  return result;
}

uint64_t type metadata accessor for FeedBannerAdIntegrator()
{
  return swift_getGenericMetadata();
}

ValueMetadata *type metadata accessor for FeedAudioPlaybackState()
{
  return &type metadata for FeedAudioPlaybackState;
}

unint64_t sub_1C0088AA4()
{
  unint64_t result = qword_1EB872960;
  if (!qword_1EB872960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB872960);
  }
  return result;
}

uint64_t FeedServiceConfigType.selectors.getter()
{
  return MEMORY[0x1E4FBC870];
}

uint64_t FeedServiceConfigType.canCache.getter()
{
  return 1;
}

unint64_t sub_1C0088B0C()
{
  unint64_t result = qword_1EB85FB28[0];
  if (!qword_1EB85FB28[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB85FB28);
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedListeningProgress()
{
  return &type metadata for FeedListeningProgress;
}

unint64_t sub_1C0088B70()
{
  unint64_t result = qword_1EB8861D0;
  if (!qword_1EB8861D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8861D0);
  }
  return result;
}

uint64_t sub_1C0088BC4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1C0088BFC(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)unint64_t result = a2 - 5;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupEmitterError()
{
  return &type metadata for FeedGroupEmitterError;
}

uint64_t type metadata accessor for FeedCustomItemFactory()
{
  return self;
}

uint64_t dispatch thunk of FeedItemRendererType.register(view:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t sub_1C0088C5C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t FeedGroupKnobsRepool.init(freezing:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1C0088CAC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C0088CE8()
{
  uint64_t result = type metadata accessor for FormatContent.Resolved();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1C0088D98()
{
  unint64_t result = qword_1EB885FB8;
  if (!qword_1EB885FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB885FB8);
  }
  return result;
}

unint64_t sub_1C0088DEC()
{
  unint64_t result = qword_1EB885FB0;
  if (!qword_1EB885FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB885FB0);
  }
  return result;
}

uint64_t type metadata accessor for FeedServiceDebugger()
{
  return swift_getGenericMetadata();
}

uint64_t FeedServiceDebugger.init(blueprintProvider:cursorContainerBlock:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v3 + 88) - 8) + 32))(v3 + *(void *)(*(void *)v3 + 112), a1);
  BOOL v6 = (void *)(v3 + *(void *)(*(void *)v3 + 120));
  *BOOL v6 = a2;
  v6[1] = a3;
  return v3;
}

uint64_t sub_1C0088F00()
{
  uint64_t result = type metadata accessor for PuzzleStatistic();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedPuzzleRankState()
{
  return &type metadata for FeedPuzzleRankState;
}

unint64_t sub_1C0088FC8()
{
  unint64_t result = qword_1EB862C58;
  if (!qword_1EB862C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862C58);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FeedPoolCachePolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_1C00890E8()
{
  return sub_1C151EB5C();
}

NewsFeed::FeedPoolCachePolicy_optional sub_1C0089148(Swift::String *a1)
{
  return FeedPoolCachePolicy.init(rawValue:)(*a1);
}

unint64_t sub_1C0089154()
{
  unint64_t result = qword_1EB85B1D0;
  if (!qword_1EB85B1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B1D0);
  }
  return result;
}

uint64_t type metadata accessor for FeedNativeAdManager()
{
  return self;
}

uint64_t sub_1C00891CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return FeedNativeAdManager.onFetch(_:)(a1, a2, a3);
}

BOOL sub_1C00891F0(uint64_t a1, uint64_t a2)
{
  return FeedNativeAdManager.shouldFetchNativeAd(for:)(*(Swift::String *)&a1);
}

uint64_t type metadata accessor for FeedItemDebugColors()
{
  return self;
}

uint64_t sub_1C008923C()
{
  type metadata accessor for FeedItemDebugColors();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  *(void *)(result + 24) = 0;
  qword_1EB93C660 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedGroupSortOption(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 10) = v3;
  return result;
}

uint64_t sub_1C00892A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FeedGroupSortOption.init(from:)(a1, a2);
}

unsigned char *storeEnumTagSinglePayload for FeedGroupSortOption.CodingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_1C0089388()
{
  return sub_1C151EB5C();
}

uint64_t sub_1C00893E8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1BFC42B04();
  *a1 = result;
  return result;
}

unint64_t sub_1C0089418()
{
  unint64_t result = qword_1EB864FE8[0];
  if (!qword_1EB864FE8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB864FE8);
  }
  return result;
}

unint64_t sub_1C008946C()
{
  unint64_t result = qword_1EB864FE0;
  if (!qword_1EB864FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864FE0);
  }
  return result;
}

unint64_t sub_1C00894C8()
{
  unint64_t result = qword_1EB864FD0;
  if (!qword_1EB864FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864FD0);
  }
  return result;
}

unint64_t sub_1C008951C()
{
  unint64_t result = qword_1EB864FC8;
  if (!qword_1EB864FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864FC8);
  }
  return result;
}

unint64_t sub_1C0089570()
{
  unint64_t result = qword_1EB864FC0;
  if (!qword_1EB864FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864FC0);
  }
  return result;
}

unint64_t sub_1C00895C4()
{
  unint64_t result = qword_1EB8724E0;
  if (!qword_1EB8724E0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB8724E0);
  }
  return result;
}

uint64_t type metadata accessor for FeedDatabaseContext()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C0089634()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1C0089678()
{
  return swift_getWitnessTable();
}

uint64_t FeedCursorContainer.cursor()(uint64_t a1)
{
  if (a1 < 0)
  {
    type metadata accessor for FeedCursor();
    sub_1C151917C();
    swift_retain();
    return sub_1C1518FDC();
  }
  else
  {
    type metadata accessor for FeedCursor();
    sub_1C151917C();
    swift_retain();
    return sub_1C151907C();
  }
}

uint64_t FeedCursorContainer.kind.getter@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  long long v2 = (unsigned char *)(result + 32);
  if (result < 0) {
    long long v2 = (unsigned char *)((result & 0x7FFFFFFFFFFFFFFFLL) + qword_1EB93C320);
  }
  *a2 = *v2;
  return result;
}

uint64_t FeedCursorContainer.shouldWriteGroupsToDatabase.getter(uint64_t a1)
{
  if (a1 < 0) {
    return 0;
  }
  unsigned int v1 = *(unsigned __int8 *)(a1 + 32);
  BOOL v2 = v1 >= 6;
  BOOL v3 = v1 == 6;
  unsigned int v4 = (0x63u >> v1) & 1;
  if (!v3 && v2) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t FeedCursorContainer.identifier.getter(uint64_t a1)
{
  uint64_t v1 = sub_1BFE16970(a1);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1C00897BC(uint64_t result)
{
  if (result < 0)
  {
    uint64_t v2 = *(void *)((result & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
    uint64_t v1 = *(void *)((result & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
    sub_1C0A8CD28();
    swift_allocError();
    *(void *)uint64_t v3 = v2;
    *(void *)(v3 + 8) = v1;
    *(unsigned char *)(v3 + 16) = 4;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t type metadata accessor for FeedBannerAdFactory()
{
  return self;
}

uint64_t storeEnumTagSinglePayload for FeedServiceOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C04B03B0);
}

uint64_t sub_1C008986C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FeedServiceOptions.init(from:)(a1, a2);
}

uint64_t sub_1C0089884()
{
  uint64_t result = type metadata accessor for FeedServiceOptions.RootCursorSource(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C0089930@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return FeedServiceOptions.Database.init(from:)(a1, a2);
}

unint64_t sub_1C0089948()
{
  unint64_t result = qword_1EB862C50;
  if (!qword_1EB862C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862C50);
  }
  return result;
}

unint64_t sub_1C00899A4()
{
  unint64_t result = qword_1EB862C40;
  if (!qword_1EB862C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862C40);
  }
  return result;
}

unint64_t sub_1C00899F8()
{
  unint64_t result = qword_1EB862C38;
  if (!qword_1EB862C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862C38);
  }
  return result;
}

unint64_t sub_1C0089A4C()
{
  unint64_t result = qword_1EB862C30;
  if (!qword_1EB862C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862C30);
  }
  return result;
}

unint64_t sub_1C0089AA8()
{
  unint64_t result = qword_1EB862C28;
  if (!qword_1EB862C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862C28);
  }
  return result;
}

unint64_t sub_1C0089AFC()
{
  unint64_t result = qword_1EB862C20;
  if (!qword_1EB862C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862C20);
  }
  return result;
}

unint64_t sub_1C0089B50()
{
  unint64_t result = qword_1EB862C18;
  if (!qword_1EB862C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862C18);
  }
  return result;
}

unint64_t sub_1C0089BAC()
{
  unint64_t result = qword_1EB862C10;
  if (!qword_1EB862C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862C10);
  }
  return result;
}

unint64_t sub_1C0089C00()
{
  unint64_t result = qword_1EB862C08;
  if (!qword_1EB862C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862C08);
  }
  return result;
}

unint64_t sub_1C0089C54()
{
  unint64_t result = qword_1EB862C00;
  if (!qword_1EB862C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862C00);
  }
  return result;
}

uint64_t sub_1C0089CA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1BFC3D854(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C0089CD0()
{
  uint64_t v1 = 0x746C7561666564;
  if (*v0 != 1) {
    uint64_t v1 = 0x656E696C66666FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701736302;
  }
}

unint64_t sub_1C0089D2C()
{
  unint64_t result = qword_1EB862BF8;
  if (!qword_1EB862BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862BF8);
  }
  return result;
}

unint64_t sub_1C0089D80()
{
  unint64_t result = qword_1EB862BF0;
  if (!qword_1EB862BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862BF0);
  }
  return result;
}

unint64_t sub_1C0089DD4()
{
  unint64_t result = qword_1EB862BE8;
  if (!qword_1EB862BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862BE8);
  }
  return result;
}

BOOL _s8NewsFeed0B14ServiceOptionsV2eeoiySbAC_ACtFZ_0(unsigned char *a1, unsigned char *a2)
{
  if (*a1) {
    uint64_t v4 = 0x656E696C66666FLL;
  }
  else {
    uint64_t v4 = 0x746C7561666564;
  }
  if (*a2) {
    uint64_t v5 = 0x656E696C66666FLL;
  }
  else {
    uint64_t v5 = 0x746C7561666564;
  }
  if (v4 == v5)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v6 = sub_1C1520A9C();
    swift_bridgeObjectRelease_n();
    BOOL result = 0;
    if ((v6 & 1) == 0) {
      return result;
    }
  }
  unsigned __int8 v8 = (int *)type metadata accessor for FeedServiceOptions(0);
  if ((_s8NewsFeed0B14ServiceOptionsV16RootCursorSourceO2eeoiySbAE_AEtFZ_0((uint64_t)&a1[v8[5]], (uint64_t)&a2[v8[5]]) & 1) == 0) {
    return 0;
  }
  uint64_t v9 = v8[6];
  id v10 = (double *)&a1[v9];
  char v11 = a1[v9 + 8];
  char v12 = (double *)&a2[v9];
  int v13 = a2[v9 + 8];
  if (v11)
  {
    if (!v13) {
      return 0;
    }
  }
  else
  {
    if (*v10 != *v12) {
      LOBYTE(v13) = 1;
    }
    if (v13) {
      return 0;
    }
  }
  return a1[v8[7]] == a2[v8[7]];
}

uint64_t sub_1C0089F38@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return FeedServiceOptions.RootCursorFreshness.init(from:)(a1, a2);
}

unint64_t sub_1C0089F50()
{
  unint64_t result = qword_1EB862BE0;
  if (!qword_1EB862BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862BE0);
  }
  return result;
}

uint64_t sub_1C0089FA4()
{
  return 12383;
}

unint64_t sub_1C0089FB8()
{
  unint64_t result = qword_1EB862BD0;
  if (!qword_1EB862BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862BD0);
  }
  return result;
}

unint64_t sub_1C008A00C()
{
  unint64_t result = qword_1EB862BC8;
  if (!qword_1EB862BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862BC8);
  }
  return result;
}

unint64_t sub_1C008A060()
{
  unint64_t result = qword_1EB862BC0;
  if (!qword_1EB862BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862BC0);
  }
  return result;
}

unint64_t sub_1C008A0BC()
{
  unint64_t result = qword_1EB862BB8;
  if (!qword_1EB862BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862BB8);
  }
  return result;
}

unint64_t sub_1C008A110()
{
  unint64_t result = qword_1EB862BB0;
  if (!qword_1EB862BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862BB0);
  }
  return result;
}

unint64_t sub_1C008A164()
{
  unint64_t result = qword_1EB862BA8;
  if (!qword_1EB862BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862BA8);
  }
  return result;
}

uint64_t sub_1C008A1B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1BFC3A770(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C008A1E0()
{
  if (*v0) {
    return 0x616854726577656ELL;
  }
  else {
    return 7958113;
  }
}

unint64_t sub_1C008A220()
{
  unint64_t result = qword_1EB862BA0;
  if (!qword_1EB862BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862BA0);
  }
  return result;
}

unint64_t sub_1C008A274()
{
  unint64_t result = qword_1EB862B98;
  if (!qword_1EB862B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B98);
  }
  return result;
}

unint64_t sub_1C008A2C8()
{
  unint64_t result = qword_1EB862B90;
  if (!qword_1EB862B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B90);
  }
  return result;
}

void sub_1C008A31C()
{
  if (!qword_1EB8611C8)
  {
    type metadata accessor for FeedServiceOptions.RootCursorSource(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB8611C8);
    }
  }
}

uint64_t sub_1C008A380@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FeedServiceOptions.RootCursorSource.init(from:)(a1, a2);
}

unint64_t sub_1C008A3A0()
{
  unint64_t result = qword_1EB862B78;
  if (!qword_1EB862B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B78);
  }
  return result;
}

unint64_t sub_1C008A3F4()
{
  unint64_t result = qword_1EB862B70;
  if (!qword_1EB862B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B70);
  }
  return result;
}

unint64_t sub_1C008A448()
{
  unint64_t result = qword_1EB862B68;
  if (!qword_1EB862B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B68);
  }
  return result;
}

unint64_t sub_1C008A4A4()
{
  unint64_t result = qword_1EB862B60;
  if (!qword_1EB862B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B60);
  }
  return result;
}

unint64_t sub_1C008A4F8()
{
  unint64_t result = qword_1EB862B58;
  if (!qword_1EB862B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B58);
  }
  return result;
}

unint64_t sub_1C008A54C()
{
  unint64_t result = qword_1EB862B50;
  if (!qword_1EB862B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B50);
  }
  return result;
}

unint64_t sub_1C008A5A8()
{
  unint64_t result = qword_1EB862B48;
  if (!qword_1EB862B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B48);
  }
  return result;
}

unint64_t sub_1C008A5FC()
{
  unint64_t result = qword_1EB862B40;
  if (!qword_1EB862B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B40);
  }
  return result;
}

unint64_t sub_1C008A650()
{
  unint64_t result = qword_1EB862B38;
  if (!qword_1EB862B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B38);
  }
  return result;
}

unint64_t sub_1C008A6AC()
{
  unint64_t result = qword_1EB862B30;
  if (!qword_1EB862B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B30);
  }
  return result;
}

unint64_t sub_1C008A700()
{
  unint64_t result = qword_1EB862B28;
  if (!qword_1EB862B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B28);
  }
  return result;
}

unint64_t sub_1C008A754()
{
  unint64_t result = qword_1EB862B20;
  if (!qword_1EB862B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B20);
  }
  return result;
}

unint64_t sub_1C008A7B0()
{
  unint64_t result = qword_1EB862B18;
  if (!qword_1EB862B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B18);
  }
  return result;
}

unint64_t sub_1C008A804()
{
  unint64_t result = qword_1EB862B10;
  if (!qword_1EB862B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B10);
  }
  return result;
}

unint64_t sub_1C008A858()
{
  unint64_t result = qword_1EB862B08;
  if (!qword_1EB862B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B08);
  }
  return result;
}

uint64_t sub_1C008A8AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1BFC4798C(a1, a2);
  *a3 = result;
  return result;
}

unint64_t sub_1C008A8D4()
{
  return sub_1C008A9E0(*v0);
}

unint64_t sub_1C008A8E4()
{
  unint64_t result = qword_1EB862B00;
  if (!qword_1EB862B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862B00);
  }
  return result;
}

unint64_t sub_1C008A938()
{
  unint64_t result = qword_1EB862AF8;
  if (!qword_1EB862AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862AF8);
  }
  return result;
}

unint64_t sub_1C008A98C()
{
  unint64_t result = qword_1EB862AF0;
  if (!qword_1EB862AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862AF0);
  }
  return result;
}

unint64_t sub_1C008A9E0(char a1)
{
  unint64_t result = 0x6573616261746164;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6144726566657270;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 4:
      unint64_t result = 0x4F6B726F7774656ELL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1C008AAAC()
{
  unint64_t result = qword_1EB862AE8;
  if (!qword_1EB862AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862AE8);
  }
  return result;
}

unint64_t sub_1C008AB00()
{
  unint64_t result = qword_1EB862AE0;
  if (!qword_1EB862AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862AE0);
  }
  return result;
}

unint64_t sub_1C008AB54()
{
  unint64_t result = qword_1EB862AD8;
  if (!qword_1EB862AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862AD8);
  }
  return result;
}

_WORD *sub_1C008ABA8(_WORD *result)
{
  *result &= 0x3FFFu;
  return result;
}

_WORD *sub_1C008ABB8(_WORD *result, unsigned int a2)
{
  if (a2 < 3) {
    *unint64_t result = *result & 0x33F | ((_WORD)a2 << 14);
  }
  else {
    *unint64_t result = (4 * (a2 - 3)) & 0x300 | (a2 - 3) & 0x3F | 0xC000;
  }
  return result;
}

uint64_t sub_1C008ABF0(unsigned __int16 *a1)
{
  unsigned int v1 = *a1;
  unsigned int v2 = v1 >> 14;
  unsigned int v3 = (v1 & 0x3F | (((v1 >> 8) & 3) << 6)) + 3;
  if (v2 == 3) {
    return v3;
  }
  else {
    return v2;
  }
}

ValueMetadata *type metadata accessor for FeedScoringContext()
{
  return &type metadata for FeedScoringContext;
}

id FeedScoringContext.ontologyLevelConfiguration(treatment:)(void *a1)
{
  return sub_1C005F010(a1, (uint64_t (*)(void))FeedHeadlineScoringContext.ontologyLevelConfiguration(treatment:), (SEL *)&selRef_defaultOntologyLevelConfig, (SEL *)&selRef_curatedIssuesOntologyLevelConfig, (SEL *)&selRef_magazineFeedIssueOntologyLevelConfig);
}

id FeedScoringContext.scoringConfiguration(treatment:)(void *a1)
{
  return sub_1C005F010(a1, (uint64_t (*)(void))FeedHeadlineScoringContext.scoringConfiguration(treatment:), (SEL *)&selRef_defaultScoringConfig, (SEL *)&selRef_curatedIssuesScoringConfig, (SEL *)&selRef_magazineFeedIssueScoringConfig);
}

id FeedScoringContext.topicsConfiguration(treatment:)(void *a1)
{
  return sub_1C005F010(a1, (uint64_t (*)(void))FeedHeadlineScoringContext.topicsConfiguration(treatment:), (SEL *)&selRef_defaultTopicsConfig, (SEL *)&selRef_curatedIssuesTopicsConfig, (SEL *)&selRef_magazineFeedIssueTopicsConfig);
}

ValueMetadata *type metadata accessor for FeedPuzzleProgress()
{
  return &type metadata for FeedPuzzleProgress;
}

unint64_t sub_1C008ACC4()
{
  unint64_t result = qword_1EB864FB0;
  if (!qword_1EB864FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864FB0);
  }
  return result;
}

uint64_t sub_1C008AD18()
{
  return sub_1BFE9D268(qword_1EB87C468, (void (*)(uint64_t))type metadata accessor for FeedLayoutCacheKey);
}

ValueMetadata *type metadata accessor for FeedGroupRepooling()
{
  return &type metadata for FeedGroupRepooling;
}

unint64_t sub_1C008AD78()
{
  unint64_t result = qword_1EB85B110;
  if (!qword_1EB85B110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B110);
  }
  return result;
}

unint64_t sub_1C008ADCC()
{
  unint64_t result = qword_1EB85B108;
  if (!qword_1EB85B108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B108);
  }
  return result;
}

uint64_t type metadata accessor for FeedDeferredCursor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C008AE38()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FeedDatabaseCursor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C008AEB0()
{
  return sub_1C151F65C();
}

uint64_t sub_1C008AED4(uint64_t a1)
{
  return sub_1BFC389E8(a1, *(void *)(v1 + 32), *(void *)(v1 + 16));
}

uint64_t sub_1C008AEF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C151932C();
  *a1 = result;
  return result;
}

uint64_t *sub_1C008AF24(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BFC5A3B0(a1, a2, a3, a4);
}

uint64_t type metadata accessor for FeedCursorManifest()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C008AFA0(uint64_t a1, uint64_t a2)
{
  return sub_1BFC5AE08(a1, a2);
}

uint64_t sub_1C008AFEC()
{
  return swift_initClassMetadata2();
}

uint64_t FeedContextFactory.createFeedContext<A>(serviceConfig:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 96))(a1, a2);
  FeedServiceConfigType.feedMode.getter(a1, a2, &v9);
  unsigned __int8 v8 = v9;
  sub_1C0EA36D8(v6, &v8, a3);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for FeedPluginManager()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t (*sub_1C008B0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](a1);
  char v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  int v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = a2;
  *((void *)v13 + 3) = a3;
  *((void *)v13 + 4) = a4;
  *((void *)v13 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v13[v12], v11, a3);
  return sub_1BFD21090;
}

uint64_t FeedPluginManager.add<A>(subFactory:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BFC5C058(a1, a2, a3);
}

uint64_t sub_1C008B258()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FeedNativeAdModel()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C008B2B8()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FeedModifierStore()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for FeedLayoutTracker()
{
  return self;
}

unint64_t sub_1C008B33C()
{
  unint64_t result = qword_1EB872200;
  if (!qword_1EB872200)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB872200);
  }
  return result;
}

uint64_t sub_1C008B394(void *a1)
{
  return FeedGroupFreezing.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for FeedGroupFreezing()
{
  return &type metadata for FeedGroupFreezing;
}

unint64_t sub_1C008B3BC()
{
  unint64_t result = qword_1EB85CB20;
  if (!qword_1EB85CB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85CB20);
  }
  return result;
}

void sub_1C008B410(void *a1@<X8>)
{
  *a1 = 0x776F6C6C61736964;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1C008B42C()
{
  return sub_1C151EAEC();
}

unint64_t sub_1C008B47C()
{
  unint64_t result = qword_1EB85B0F8;
  if (!qword_1EB85B0F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B0F8);
  }
  return result;
}

unint64_t sub_1C008B4D8()
{
  unint64_t result = qword_1EB85CB00;
  if (!qword_1EB85CB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85CB00);
  }
  return result;
}

unint64_t sub_1C008B52C()
{
  unint64_t result = qword_1EB85CAF8;
  if (!qword_1EB85CAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85CAF8);
  }
  return result;
}

uint64_t sub_1C008B580()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FeedGroupEmitterCachedOutput();
  uint64_t result = sub_1C151FD8C();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1C151982C();
    if (v2 <= 0x3F)
    {
      uint64_t result = sub_1C15197FC();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t FeedEditionConfig.edition(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1C151631C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  FeedEditionConfig.fetchWindow(for:)(a1);
  uint64_t v6 = v5;
  uint64_t result = type metadata accessor for FeedEdition();
  *(void *)(a2 + *(int *)(result + 20)) = v6;
  return result;
}

double sub_1C008B808()
{
  return sub_1BFC77E2C(&qword_1EB885C18);
}

uint64_t sub_1C008B814()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1C008B864()
{
  return swift_release();
}

uint64_t type metadata accessor for FeedCursorTracker()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t FeedCursorTracker.__allocating_init(snapshot:)(uint64_t a1)
{
  return sub_1BFCC53D8(a1, (void (*)(uint64_t))FeedCursorTracker.init(snapshot:));
}

uint64_t FeedCursorTracker.__allocating_init(context:)(uint64_t a1)
{
  return sub_1BFCC53D8(a1, (void (*)(uint64_t))FeedCursorTracker.init(context:));
}

uint64_t sub_1C008B8E4()
{
  return sub_1BFC394A8();
}

uint64_t sub_1C008B8F0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C008B90C()
{
  uint64_t result = type metadata accessor for FeedGroupEmitTaskResult();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1C008B9B4()
{
  unint64_t result = qword_1EB85CAD8;
  if (!qword_1EB85CAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85CAD8);
  }
  return result;
}

unint64_t sub_1C008BA08()
{
  unint64_t result = qword_1EB85CAD0;
  if (!qword_1EB85CAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85CAD0);
  }
  return result;
}

unint64_t sub_1C008BA5C()
{
  unint64_t result = qword_1EB85CAC8;
  if (!qword_1EB85CAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85CAC8);
  }
  return result;
}

unint64_t sub_1C008BAB4()
{
  unint64_t result = qword_1EB871FC0[0];
  if (!qword_1EB871FC0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB871FC0);
  }
  return result;
}

void sub_1C008BB0C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for FeedLayoutSolver()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1C008BB74()
{
  unint64_t result = qword_1EB85F8E8;
  if (!qword_1EB85F8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85F8E8);
  }
  return result;
}

unint64_t sub_1C008BBC8()
{
  unint64_t result = qword_1EB85F8E0;
  if (!qword_1EB85F8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85F8E0);
  }
  return result;
}

unint64_t sub_1C008BC1C()
{
  unint64_t result = qword_1EB864E48;
  if (!qword_1EB864E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864E48);
  }
  return result;
}

unint64_t sub_1C008BC70()
{
  unint64_t result = qword_1EB85F8D8;
  if (!qword_1EB85F8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85F8D8);
  }
  return result;
}

double FeedJournalEntry.durationInMilliseconds.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t sub_1C008BCE8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C008BD04()
{
  return swift_initClassMetadata2();
}

unint64_t sub_1C008BD64()
{
  unint64_t result = qword_1EB85B030;
  if (!qword_1EB85B030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B030);
  }
  return result;
}

unint64_t sub_1C008BDB8()
{
  unint64_t result = qword_1EB85B028;
  if (!qword_1EB85B028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B028);
  }
  return result;
}

unint64_t sub_1C008BE0C()
{
  unint64_t result = qword_1EB864E40;
  if (!qword_1EB864E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864E40);
  }
  return result;
}

unint64_t sub_1C008BE60()
{
  unint64_t result = qword_1EB85B020;
  if (!qword_1EB85B020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B020);
  }
  return result;
}

double sub_1C008BEC0@<D0>(_OWORD *a1@<X8>)
{
  sub_1BFCBE800((uint64_t *)v6);
  long long v2 = v6[3];
  a1[2] = v6[2];
  a1[3] = v2;
  long long v3 = v6[5];
  a1[4] = v6[4];
  a1[5] = v3;
  double result = *(double *)v6;
  long long v5 = v6[1];
  *a1 = v6[0];
  a1[1] = v5;
  return result;
}

uint64_t sub_1C008BF14(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for FeedBannerAdView();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C008BF54()
{
  return sub_1C008BF14(&qword_1EB871CF0);
}

uint64_t sub_1C008BF88(unsigned __int8 *a1, uint64_t a2)
{
  return sub_1C008BF94(a1, a2);
}

uint64_t sub_1C008BF94(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = 0x6E4F646568636163;
  unint64_t v8 = 0xEA0000000000796CLL;
  if (v2 != 1)
  {
    uint64_t v7 = 0x6143726566657270;
    unint64_t v8 = 0xEC00000064656863;
  }
  if (*a1) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0x746C7561666564;
  }
  if (v2) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = 0xE700000000000000;
  }
  uint64_t v11 = 0x6E4F646568636163;
  unint64_t v12 = 0xEA0000000000796CLL;
  if (*(unsigned char *)a2 != 1)
  {
    uint64_t v11 = 0x6143726566657270;
    unint64_t v12 = 0xEC00000064656863;
  }
  if (*(unsigned char *)a2) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = 0x746C7561666564;
  }
  if (*(unsigned char *)a2) {
    unint64_t v14 = v12;
  }
  else {
    unint64_t v14 = 0xE700000000000000;
  }
  if (v9 == v13 && v10 == v14)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = sub_1C1520A9C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v15 & 1) == 0) {
      return result;
    }
  }
  if (v3 == v5 && v4 == v6) {
    return 1;
  }
  return sub_1C1520A9C();
}

uint64_t type metadata accessor for FeedPluginModel()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C008C13C()
{
  uint64_t result = type metadata accessor for FeedLoadingGate.Seal(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t FeedLoadingGate.init(log:)(void *a1)
{
  uint64_t v2 = sub_1BFC6B534(a1);

  return v2;
}

uint64_t sub_1C008C234(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1BFED96CC((unint64_t *)&unk_1EB885A10, a2, (void (*)(uint64_t))type metadata accessor for FeedGroupRegion);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C008C28C()
{
  unint64_t result = qword_1EB85B000;
  if (!qword_1EB85B000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85B000);
  }
  return result;
}

unint64_t sub_1C008C2E0()
{
  unint64_t result = qword_1EB85AFF8;
  if (!qword_1EB85AFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85AFF8);
  }
  return result;
}

unint64_t sub_1C008C334()
{
  unint64_t result = qword_1EB864DA8;
  if (!qword_1EB864DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864DA8);
  }
  return result;
}

unint64_t sub_1C008C388()
{
  unint64_t result = qword_1EB85AFF0;
  if (!qword_1EB85AFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85AFF0);
  }
  return result;
}

unint64_t sub_1C008C3F4()
{
  unint64_t result = qword_1EB864DA0;
  if (!qword_1EB864DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864DA0);
  }
  return result;
}

unint64_t sub_1C008C448()
{
  unint64_t result = qword_1EB864D98;
  if (!qword_1EB864D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864D98);
  }
  return result;
}

unint64_t sub_1C008C49C()
{
  unint64_t result = qword_1EB864D90;
  if (!qword_1EB864D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864D90);
  }
  return result;
}

unint64_t sub_1C008C4F8()
{
  unint64_t result = qword_1EB864D88;
  if (!qword_1EB864D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864D88);
  }
  return result;
}

unint64_t sub_1C008C54C()
{
  unint64_t result = qword_1EB864D80;
  if (!qword_1EB864D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864D80);
  }
  return result;
}

unint64_t sub_1C008C5A0()
{
  unint64_t result = qword_1EB864D78;
  if (!qword_1EB864D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864D78);
  }
  return result;
}

void sub_1C008C5FC(uint64_t *a1, uint64_t a2)
{
  sub_1BFCD4EA4(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24));
}

void sub_1C008C618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BFCC3104(a1, a2, a3, a4, *(void *)(v4 + 16), *(void **)(v4 + 24), *(unsigned char *)(v4 + 32));
}

uint64_t sub_1C008C624@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1BFD43ECC(a1, a2);
}

uint64_t sub_1C008C62C(uint64_t a1)
{
  return sub_1BFC3A618(a1, *(void (**)(long long *__return_ptr, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1C008C64C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BFC60EFC(*(void *)(v1 + 32), a1);
}

uint64_t sub_1C008C66C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FeedItemSorter()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for FeedDaysOfWeek()
{
  return &type metadata for FeedDaysOfWeek;
}

unint64_t sub_1C008C6E4()
{
  unint64_t result = qword_1EB871988;
  if (!qword_1EB871988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB871988);
  }
  return result;
}

uint64_t sub_1C008C738()
{
  uint64_t result = type metadata accessor for FormatCustomItem.Resolved();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1C008C7D0()
{
  unint64_t result = qword_1EB864D10;
  if (!qword_1EB864D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864D10);
  }
  return result;
}

unint64_t sub_1C008C824()
{
  unint64_t result = qword_1EB864D08;
  if (!qword_1EB864D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864D08);
  }
  return result;
}

unint64_t sub_1C008C878()
{
  unint64_t result = qword_1EB864D00;
  if (!qword_1EB864D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864D00);
  }
  return result;
}

unint64_t sub_1C008C8CC()
{
  unint64_t result = qword_1EB864CF8;
  if (!qword_1EB864CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864CF8);
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedAutomation()
{
  return &type metadata for FeedAutomation;
}

unint64_t sub_1C008C948()
{
  unint64_t result = qword_1EB85C980;
  if (!qword_1EB85C980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85C980);
  }
  return result;
}

unint64_t sub_1C008C99C()
{
  unint64_t result = qword_1EB85C978;
  if (!qword_1EB85C978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85C978);
  }
  return result;
}

uint64_t Feed.init(name:log:dbLog:adsEnabled:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(unsigned char *)(a6 + 32) = a5;
  return result;
}

id Feed.init(name:log:adsEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a3;
  *(unsigned char *)(a5 + 32) = a4;
  return a3;
}

void sub_1C008CA18(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEA00000000006E6FLL;
  uint64_t v3 = 0x69746375646F7270;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x676E6967617473;
      goto LABEL_3;
    case 2:
      *a1 = 24945;
      a1[1] = 0xE200000000000000;
      break;
    case 3:
      *a1 = 1953719668;
      a1[1] = 0xE400000000000000;
      break;
    case 4:
      *a1 = 0x6C65766564;
      a1[1] = 0xE500000000000000;
      break;
    case 5:
      *a1 = 0x786F62646E6173;
      a1[1] = 0xE700000000000000;
      break;
    case 6:
      *a1 = 0x316F6D6564;
      a1[1] = 0xE500000000000000;
      break;
    case 7:
      *a1 = 0x326F6D6564;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unint64_t sub_1C008CAF8()
{
  unint64_t result = qword_1EB8949F8;
  if (!qword_1EB8949F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8949F8);
  }
  return result;
}

unint64_t sub_1C008CB4C()
{
  unint64_t result = qword_1EB8949F0;
  if (!qword_1EB8949F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8949F0);
  }
  return result;
}

unint64_t sub_1C008CBA0()
{
  unint64_t result = qword_1EB8949E8;
  if (!qword_1EB8949E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8949E8);
  }
  return result;
}

uint64_t sub_1C008CBF4(uint64_t a1)
{
  unint64_t v2 = sub_1C0048734();
  uint64_t v3 = MEMORY[0x1E4FAB458];
  return MEMORY[0x1F415F4E8](a1, v2, v3);
}

uint64_t sub_1C008CC4C()
{
  uint64_t result = type metadata accessor for FormatContent.Resolved();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1C008CD38()
{
  unint64_t result = qword_1EB85F7B8;
  if (!qword_1EB85F7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85F7B8);
  }
  return result;
}

unint64_t sub_1C008CD8C()
{
  unint64_t result = qword_1EB85F7A0[0];
  if (!qword_1EB85F7A0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB85F7A0);
  }
  return result;
}

uint64_t sub_1C008CDE0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FormatFeedPluginFactory()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t (*sub_1C008CE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __n128 v11 = MEMORY[0x1F4188790](a1);
  unint64_t v12 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v9 + 16))(v12, v11);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = a2;
  *((void *)v14 + 3) = a3;
  *((void *)v14 + 4) = a4;
  *((void *)v14 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v14[v13], v12, a3);
  return sub_1C0AC52E0;
}

uint64_t sub_1C008CF90(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a2;
  swift_unknownObjectWeakAssign();
  return sub_1BFC3D7F4();
}

uint64_t type metadata accessor for FormatFeedPluginFactory.FactoryWrapper()
{
  return __swift_instantiateGenericMetadata();
}

void *sub_1C008CFE0(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1BFC61F38(a1, a2, a3);
}

uint64_t type metadata accessor for LazyFeedGroupEmitterCursor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C008D04C()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 48))();
}

uint64_t (*sub_1C008D0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __n128 v9 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v7 + 16))(v10, v9);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = a2;
  *((void *)v12 + 3) = a3;
  *((void *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v10, a3);
  return sub_1C008D04C;
}

uint64_t sub_1C008D1E4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 32))();
}

uint64_t (*sub_1C008D250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __n128 v9 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v7 + 16))(v10, v9);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = a2;
  *((void *)v12 + 3) = a3;
  *((void *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v10, a3);
  return sub_1C008D1E4;
}

uint64_t (*sub_1C008D37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1)
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __n128 v9 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v7 + 16))(v10, v9);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = a2;
  *((void *)v12 + 3) = a3;
  *((void *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v10, a3);
  return sub_1BFD6391C;
}

uint64_t (*sub_1C008D4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __n128 v9 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v7 + 16))(v10, v9);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = a2;
  *((void *)v12 + 3) = a3;
  *((void *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v10, a3);
  return sub_1C142C5A0;
}

uint64_t sub_1C008D5D4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 40))();
}

uint64_t (*sub_1C008D640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __n128 v9 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v7 + 16))(v10, v9);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = a2;
  *((void *)v12 + 3) = a3;
  *((void *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v10, a3);
  return sub_1C008D5D4;
}

uint64_t *AnyFeedManager.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1BFC40D6C(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

uint64_t sub_1C008D7D4()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AnyFeedManager()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnyFeedManager.prepare(context:)()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t AnyFeedManager.save(snapshot:)()
{
  return (*(uint64_t (**)(void))(v0 + 72))();
}

uint64_t AnyFeedManager.loadingSource.getter()
{
  sub_1C0085FD0();
  return swift_retain();
}

uint64_t AnyFeedManager.readAndFetch(context:)()
{
  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t *sub_1C008D8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __n128 v10 = MEMORY[0x1F4188790](a1);
  unint64_t v11 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v11, a1, a2, v10);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v13 = (char *)swift_allocObject();
  uint64_t v14 = *(void *)(v7 + 80);
  *((void *)v13 + 2) = v14;
  uint64_t v15 = *(void *)(v7 + 88);
  *((void *)v13 + 3) = v15;
  *((void *)v13 + 4) = a2;
  *((void *)v13 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v13[v12], v11, a2);
  v3[2] = (uint64_t)sub_1C128C744;
  v3[3] = (uint64_t)v13;
  v3[4] = (uint64_t)sub_1C008DADC(a1, v14, v15, a2, a3);
  v3[5] = v16;
  return v3;
}

uint64_t sub_1C008DA70()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 40) + 48))();
}

uint64_t (*sub_1C008DADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __n128 v11 = MEMORY[0x1F4188790](a1);
  unint64_t v12 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v9 + 16))(v12, v11);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = a2;
  *((void *)v14 + 3) = a3;
  *((void *)v14 + 4) = a4;
  *((void *)v14 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v14[v13], v12, a4);
  return sub_1C008DA70;
}

uint64_t *AnyFeedServiceConfigFetcher.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1C008D8EC(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

uint64_t type metadata accessor for AnyFeedServiceConfigFetcher()
{
  return swift_getGenericMetadata();
}

uint64_t AnyFeedServiceConfigFetcher.fetchConfig(context:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_1C008DCB8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C008DCD4()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for WebEmbedDataVisualizationDataService(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, (uint64_t *)&unk_1EB885728);
}

unint64_t sub_1C008DD18()
{
  unint64_t result = qword_1EB864770;
  if (!qword_1EB864770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864770);
  }
  return result;
}

unint64_t sub_1C008DD6C()
{
  unint64_t result = qword_1EB864768;
  if (!qword_1EB864768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB864768);
  }
  return result;
}

unint64_t sub_1C008DDC0()
{
  unint64_t result = qword_1EB8718D0;
  if (!qword_1EB8718D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8718D0);
  }
  return result;
}

unint64_t sub_1C008DE1C()
{
  unint64_t result = qword_1EB8718C8;
  if (!qword_1EB8718C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8718C8);
  }
  return result;
}

unint64_t sub_1C008DE70()
{
  unint64_t result = qword_1EB8718C0;
  if (!qword_1EB8718C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8718C0);
  }
  return result;
}

unint64_t sub_1C008DEC4()
{
  unint64_t result = qword_1EB8718A8;
  if (!qword_1EB8718A8)
  {
    sub_1C08FC718(255, &qword_1EB8718B0, MEMORY[0x1E4FBB1A0], (uint64_t)&protocol witness table for String, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FormatSelectorValueSelector);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8718A8);
  }
  return result;
}

unint64_t sub_1C008DF48()
{
  unint64_t result = qword_1EB8707F0;
  if (!qword_1EB8707F0)
  {
    sub_1C08FC718(255, &qword_1EB8718B0, MEMORY[0x1E4FBB1A0], (uint64_t)&protocol witness table for String, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FormatSelectorValueSelector);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8707F0);
  }
  return result;
}

unint64_t sub_1C008DFCC()
{
  unint64_t result = qword_1EB85F590;
  if (!qword_1EB85F590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85F590);
  }
  return result;
}

uint64_t type metadata accessor for FormatPictureInPictureModel()
{
  uint64_t result = qword_1EB8965A0;
  if (!qword_1EB8965A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1C008E06C()
{
  unint64_t result = qword_1EB871810;
  if (!qword_1EB871810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB871810);
  }
  return result;
}

unint64_t sub_1C008E0C0()
{
  unint64_t result = qword_1EB85AD48;
  if (!qword_1EB85AD48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85AD48);
  }
  return result;
}

unint64_t sub_1C008E11C()
{
  unint64_t result = qword_1EB885580;
  if (!qword_1EB885580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB885580);
  }
  return result;
}

unint64_t sub_1C008E170()
{
  unint64_t result = qword_1EB885578;
  if (!qword_1EB885578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB885578);
  }
  return result;
}

unint64_t sub_1C008E1CC()
{
  unint64_t result = qword_1EB885568;
  if (!qword_1EB885568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB885568);
  }
  return result;
}

unint64_t sub_1C008E220()
{
  unint64_t result = qword_1EB885560;
  if (!qword_1EB885560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB885560);
  }
  return result;
}

unint64_t sub_1C008E27C()
{
  unint64_t result = qword_1EB8645D0;
  if (!qword_1EB8645D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8645D0);
  }
  return result;
}

unint64_t sub_1C008E2D0()
{
  unint64_t result = qword_1EB8645C8;
  if (!qword_1EB8645C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8645C8);
  }
  return result;
}

uint64_t sub_1C008E324()
{
  return sub_1BFE131B4(&qword_1EB871790, MEMORY[0x1E4F7AFF0]);
}

uint64_t sub_1C008E358(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C008E3A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C008E3E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C008E430(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C008E478()
{
  sub_1C09D20B4();
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C09D210C();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB890B68 = result;
  return result;
}

uint64_t sub_1C008E574()
{
  sub_1C09884F8(0, &qword_1EB8851B8, (uint64_t)&type metadata for FollowingCommandContext, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - v3;
  sub_1C0090B88(0, qword_1EB885100, (uint64_t)&type metadata for FollowingCommandContext, (uint64_t)&type metadata for FollowingCommandState, MEMORY[0x1E4FABCE8]);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB885460 = result;
  return result;
}

uint64_t static Commands.Following.follow.getter()
{
  return sub_1BFC387A8(&qword_1EB87B198);
}

uint64_t static Commands.Following.notification.getter()
{
  return sub_1BFC387A8(&qword_1EB87B190);
}

uint64_t sub_1C008E704(uint64_t a1)
{
  return sub_1BFC633A4(a1, 0xD000000000000024, 0x80000001C1641170, &qword_1EB8848F0);
}

uint64_t sub_1C008E728(uint64_t a1)
{
  return sub_1BFC633A4(a1, 0xD00000000000001FLL, 0x80000001C16411A0, &qword_1EB8829F0);
}

uint64_t sub_1C008E74C()
{
  sub_1BFEE8164(0, (unint64_t *)&qword_1EB871630, (uint64_t (*)(uint64_t))sub_1BFFB52BC, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - v3;
  sub_1C0090D58();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB8716A0 = result;
  return result;
}

uint64_t static Commands.Blocking.blockComplete.getter()
{
  return sub_1BFC387A8(&qword_1EB87B180);
}

uint64_t static Commands.Articles.readStory.getter()
{
  return sub_1BFC387A8(&qword_1EB87CAF0);
}

uint64_t static Commands.Articles.reportConcernComplete.getter()
{
  return sub_1BFC387A8(qword_1EB8848D8);
}

uint64_t static Commands.Articles.removeReportedConcern.getter()
{
  return sub_1BFC387A8(&qword_1EB87B170);
}

uint64_t static Commands.Articles.removeFromHistory.getter()
{
  return sub_1BFC387A8(&qword_1EB87CAB0);
}

uint64_t static Commands.Articles.reportConcern.getter()
{
  return sub_1BFC387A8(&qword_1EB87BDF0);
}

uint64_t static Commands.Articles.feedReadStory.getter()
{
  return sub_1BFC387A8(&qword_1EB864548);
}

uint64_t static Commands.Sharing.share.getter()
{
  return sub_1BFC387A8(&qword_1EB87CA88);
}

uint64_t sub_1C008E994(uint64_t a1)
{
  return sub_1BFC6AAF0(a1, 0xD000000000000032, 0x80000001C162CB00, &qword_1EB8829E8);
}

uint64_t static Commands.Puzzles.setPuzzleStreakEligible.getter()
{
  return sub_1BFC387A8(&qword_1EB8848B8);
}

uint64_t sub_1C008E9DC(uint64_t a1)
{
  return sub_1BFC6AAF0(a1, 0xD000000000000026, 0x80000001C162CB40, &qword_1EB885440);
}

uint64_t static Commands.Puzzles.resetPuzzleProgress.getter()
{
  return sub_1BFC387A8(&qword_1EB885450);
}

uint64_t static Commands.Puzzles.openPuzzleTypeFeed.getter()
{
  return sub_1BFC387A8(&qword_1EB864528);
}

uint64_t static Commands.Sports.Event.open.getter()
{
  return sub_1BFC387A8(&qword_1EB885428);
}

uint64_t sub_1C008EA6C(uint64_t a1)
{
  return sub_1BFE4F5FC(a1, 0xD000000000000026, 0x80000001C1629000, &qword_1EB8853F0);
}

uint64_t sub_1C008EA90(uint64_t a1)
{
  return sub_1BFE4F5FC(a1, 0xD000000000000026, 0x80000001C1628FD0, &qword_1EB8853D8);
}

uint64_t sub_1C008EAB4(uint64_t a1)
{
  return sub_1BFE4F5FC(a1, 0xD000000000000024, 0x80000001C1629030, &qword_1EB8853C8);
}

uint64_t sub_1C008EADC(uint64_t a1)
{
  return sub_1BFE4F5FC(a1, 0xD00000000000002FLL, 0x80000001C1628FA0, &qword_1EB8853B0);
}

uint64_t sub_1C008EB00(uint64_t a1)
{
  return sub_1BFE4F5FC(a1, 0xD00000000000002BLL, 0x80000001C1628F70, &qword_1EB885398);
}

uint64_t sub_1C008EB24(uint64_t a1)
{
  return sub_1BFE4F5FC(a1, 0xD000000000000027, 0x80000001C1629060, &qword_1EB885380);
}

uint64_t sub_1C008EB48()
{
  sub_1C00903BC(0, &qword_1EB87C820, (uint64_t (*)(uint64_t))sub_1C007A828, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - v3;
  sub_1C0090EFC();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB87CA60 = result;
  return result;
}

uint64_t static Commands.Reload.article.getter()
{
  if (qword_1EB885370 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t sub_1C008ECCC(uint64_t a1)
{
  return sub_1BFC70AE4(a1, 0xD000000000000017, 0x80000001C160E850, &qword_1EB85F578);
}

uint64_t static Commands.Manage.presentManagedBlocked.getter()
{
  return sub_1BFC387A8(&qword_1EB85F580);
}

uint64_t sub_1C008ED14(uint64_t a1)
{
  return sub_1BFC70AE4(a1, 0xD000000000000018, 0x80000001C160E870, &qword_1EB864500);
}

uint64_t static Commands.Manage.presentManageMySports.getter()
{
  return sub_1BFC387A8(&qword_1EB864508);
}

uint64_t sub_1C008ED5C()
{
  sub_1C009030C();
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C0090DC4();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB8644F0 = result;
  return result;
}

uint64_t static Commands.Manage.presentManageChannelNotifications.getter()
{
  return sub_1BFC387A8(&qword_1EB85F568);
}

uint64_t sub_1C008EE7C(uint64_t a1)
{
  return sub_1BFC70AE4(a1, 0xD00000000000001DLL, 0x80000001C160E830, &qword_1EB85F550);
}

uint64_t static Commands.Manage.presentManageSubscriptions.getter()
{
  return sub_1BFC387A8(qword_1EB85F558);
}

uint64_t sub_1C008EEC4(uint64_t a1)
{
  return sub_1BFC70AE4(a1, 0xD00000000000001DLL, 0x80000001C160E890, &qword_1EB85F538);
}

uint64_t static Commands.Manage.presentManageNotifications.getter()
{
  return sub_1BFC387A8(&qword_1EB85F540);
}

uint64_t sub_1C008EF0C(uint64_t a1)
{
  return sub_1BFC50B38(a1, 0xD000000000000017, 0x80000001C1638770, &qword_1EB885358);
}

uint64_t static Commands.Liking.dislike.getter()
{
  return sub_1BFC387A8(&qword_1EB87B140);
}

uint64_t sub_1C008EF54(uint64_t a1)
{
  return sub_1BFC50B38(a1, 0xD000000000000014, 0x80000001C1638790, &qword_1EB885350);
}

uint64_t static Commands.Liking.like.getter()
{
  return sub_1BFC387A8(&qword_1EB87B0C8);
}

uint64_t sub_1C008EF9C()
{
  sub_1BFC50C68();
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C0090E98();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB885340 = result;
  return result;
}

uint64_t static Commands.Audio.nextTrack.getter()
{
  return sub_1BFC387A8(qword_1EB87CA50);
}

uint64_t sub_1C008F0BC(uint64_t a1)
{
  return sub_1BFCB3ABC(a1, 0xD000000000000018, 0x80000001C161F610, &qword_1EB85F520);
}

uint64_t static Commands.Audio.playNext.getter()
{
  return sub_1BFC387A8(&qword_1EB85F530);
}

uint64_t sub_1C008F104(uint64_t a1)
{
  return sub_1BFCB3ABC(a1, 0xD000000000000018, 0x80000001C161F5C0, &qword_1EB85F500);
}

uint64_t static Commands.Audio.playLast.getter()
{
  return sub_1BFC387A8(&qword_1EB85F510);
}

uint64_t sub_1C008F14C(uint64_t a1)
{
  return sub_1BFCB3ABC(a1, 0xD000000000000017, 0x80000001C161F660, &qword_1EB87CA20);
}

uint64_t static Commands.Audio.playNow.getter()
{
  return sub_1BFC387A8(&qword_1EB87CA30);
}

uint64_t static Commands.Audio.rewind.getter()
{
  return sub_1BFC387A8(&qword_1EB87CA18);
}

uint64_t static Commands.Audio.resume.getter()
{
  return sub_1BFC387A8(&qword_1EB87CA00);
}

uint64_t sub_1C008F1DC(uint64_t a1)
{
  return sub_1BFCB3ABC(a1, 0xD000000000000015, 0x80000001C161F370, &qword_1EB85F4E0);
}

uint64_t static Commands.Audio.remove.getter()
{
  return sub_1BFC387A8(&qword_1EB85F4F0);
}

uint64_t static Commands.Audio.pause.getter()
{
  return sub_1BFC387A8(qword_1EB87C9E0);
}

uint64_t static Commands.Audio.stop.getter()
{
  return sub_1BFC387A8(qword_1EB87C9C0);
}

uint64_t static Commands.Audio.seek.getter()
{
  return sub_1BFC387A8(&qword_1EB87C9A8);
}

uint64_t sub_1C008F290(uint64_t a1)
{
  return sub_1BFCB3ABC(a1, 0xD00000000000002ELL, 0x80000001C161F4E0, (uint64_t *)&unk_1EB8644D8);
}

uint64_t static Commands.Audio.playIgnoringPlaylistOrPause.getter()
{
  return sub_1BFC387A8(&qword_1EB8644E8);
}

uint64_t sub_1C008F2D8(uint64_t a1)
{
  return sub_1BFCB3ABC(a1, 0xD000000000000029, 0x80000001C161F530, &qword_1EB87C978);
}

uint64_t static Commands.Audio.playNowIgnoringPlaylist.getter()
{
  return sub_1BFC387A8(&qword_1EB87C988);
}

uint64_t sub_1C008F320(uint64_t a1)
{
  return sub_1BFCB3ABC(a1, 0xD000000000000028, 0x80000001C161F5E0, (uint64_t *)&unk_1EB85F4C8);
}

uint64_t static Commands.Audio.insertAtTopOfPlaylist.getter()
{
  return sub_1BFC387A8(&qword_1EB85F4D8);
}

uint64_t static Commands.Audio.incrementPlaybackRate.getter()
{
  return sub_1BFC387A8(qword_1EB87C968);
}

uint64_t sub_1C008F38C(uint64_t a1)
{
  return sub_1BFCB3ABC(a1, 0xD000000000000021, 0x80000001C161F2F0, &qword_1EB8644B8);
}

uint64_t static Commands.Audio.removeFromPlaylist.getter()
{
  return sub_1BFC387A8(&qword_1EB8644C8);
}

uint64_t sub_1C008F3D4(uint64_t a1)
{
  return sub_1BFCB3ABC(a1, 0xD000000000000020, 0x80000001C161F320, &qword_1EB8644A0);
}

uint64_t static Commands.Audio.removeFromHistory.getter()
{
  return sub_1BFC387A8(&qword_1EB8644B0);
}

uint64_t static Commands.Audio.setPlaybackRate.getter()
{
  return sub_1BFC387A8(&qword_1EB87C950);
}

uint64_t sub_1C008F440(uint64_t a1)
{
  return sub_1BFCB3ABC(a1, 0xD000000000000021, 0x80000001C161F630, (uint64_t *)&unk_1EB864488);
}

uint64_t static Commands.Audio.playNowAsPaused.getter()
{
  return sub_1BFC387A8(&qword_1EB864498);
}

uint64_t sub_1C008F488(uint64_t a1)
{
  return sub_1BFCB3ABC(a1, 0xD00000000000001DLL, 0x80000001C161F510, (uint64_t *)&unk_1EB85F4B0);
}

uint64_t static Commands.Audio.playOrExpand.getter()
{
  return sub_1BFC387A8(&qword_1EB85F4C0);
}

uint64_t static Commands.Audio.mastheadPlay.getter()
{
  return sub_1BFC387A8(&qword_1EB85F4A8);
}

uint64_t static Commands.Audio.skipForward.getter()
{
  return sub_1BFC387A8(&qword_1EB8907E0);
}

uint64_t static Commands.Audio.closePlayer.getter()
{
  return sub_1BFC387A8(&qword_1EB87C938);
}

uint64_t sub_1C008F53C(uint64_t a1)
{
  return sub_1BFCB3ABC(a1, 0xD000000000000026, 0x80000001C161F590, &qword_1EB861C28);
}

uint64_t static Commands.Audio.playLaterInNewsNext.getter()
{
  return sub_1BFC387A8(qword_1EB861C38);
}

uint64_t sub_1C008F584(uint64_t a1)
{
  return sub_1BFCB3ABC(a1, 0xD000000000000026, 0x80000001C161F560, &qword_1EB86BCB0);
}

uint64_t static Commands.Audio.playLaterInNewsLast.getter()
{
  return sub_1BFC387A8(&qword_1EB86BCC0);
}

uint64_t sub_1C008F5CC(uint64_t a1)
{
  return sub_1BFCB3ABC(a1, 0xD00000000000001FLL, 0x80000001C161F350, (uint64_t *)&unk_1EB864468);
}

uint64_t static Commands.Audio.removeFromAudioFeed.getter()
{
  return sub_1BFC387A8(qword_1EB864478);
}

uint64_t static Commands.downloadIssues.getter()
{
  if (qword_1EB85F490 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t static Commands.openInSafari.getter()
{
  if (qword_1EB87C920 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t static Commands.RemoveIssues.prompt.getter()
{
  return sub_1BFC387A8(&qword_1EB85F480);
}

uint64_t sub_1C008F6F0(uint64_t a1)
{
  return sub_1C0FB3B48(a1, 0xD00000000000002FLL, 0x80000001C1631370, (uint64_t *)&unk_1EB85F3A8);
}

uint64_t static Commands.RemoveIssues.removeFromMyMagazines.getter()
{
  return sub_1BFC387A8(&qword_1EB85F3B8);
}

uint64_t sub_1C008F738(uint64_t a1)
{
  return sub_1C0FB3B48(a1, 0xD000000000000027, 0x80000001C1631340, (uint64_t *)&unk_1EB85F390);
}

uint64_t static Commands.RemoveIssues.removeDownloads.getter()
{
  return sub_1BFC387A8(&qword_1EB85F3A0);
}

uint64_t sub_1C008F780()
{
  sub_1C0090420();
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C0090F68();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB885310 = result;
  return result;
}

uint64_t static Commands.openChannel.getter()
{
  if (qword_1EB87C910 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t sub_1C008F8D8()
{
  sub_1C009030C();
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C0090CEC();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB864440 = result;
  return result;
}

uint64_t sub_1C008F9D4()
{
  sub_1C0090364();
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BFC4C0F8(0, (unint64_t *)&unk_1EB8629C0, (void (*)(void))sub_1C00881C4);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB862A28 = result;
  return result;
}

uint64_t static Commands.FeedPuzzles.puzzleRankProgress.getter()
{
  return sub_1BFC387A8(qword_1EB862A38);
}

uint64_t sub_1C008FB18()
{
  sub_1C0090364();
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C0090E30();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB862A10 = result;
  return result;
}

uint64_t static Commands.FeedPuzzles.puzzleRevealState.getter()
{
  return sub_1BFC387A8(&qword_1EB862A20);
}

uint64_t sub_1C008FC38()
{
  sub_1C0090364();
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BFC4C0F8(0, &qword_1EB8629D0, (void (*)(void))sub_1C0088FC8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB8629F0 = result;
  return result;
}

uint64_t static Commands.FeedPuzzles.puzzleRankState.getter()
{
  return sub_1BFC387A8(&qword_1EB862A00);
}

uint64_t sub_1C008FD7C()
{
  sub_1C0090364();
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BFC4C0F8(0, &qword_1EB864128, (void (*)(void))sub_1C008ACC4);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB864420 = result;
  return result;
}

uint64_t static Commands.FeedPuzzles.puzzleProgress.getter()
{
  return sub_1BFC387A8(&qword_1EB864430);
}

uint64_t sub_1C008FEC0()
{
  sub_1C0090364();
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BFC4C0F8(0, (unint64_t *)&unk_1EB864130, (void (*)(void))sub_1C0087CB4);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB864418 = result;
  return result;
}

uint64_t static Commands.FeedPuzzles.puzzleState.getter()
{
  return sub_1BFC387A8(&qword_1EB8614F8);
}

uint64_t sub_1C0090004()
{
  sub_1BFEEF3DC(0, &qword_1EB8851C0, type metadata accessor for FeedHeadline, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - v3;
  sub_1C0C01ABC(0, (unint64_t *)&unk_1EB885118, (void (*)(uint64_t))type metadata accessor for FeedHeadline, (void (*)(void))sub_1C0088B70);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB8852F8 = result;
  return result;
}

uint64_t static Commands.FeedAudio.trackProgress.getter()
{
  return sub_1BFC387A8(&qword_1EB885308);
}

uint64_t sub_1C0090188()
{
  sub_1BFEEF3DC(0, &qword_1EB8851D0, (uint64_t (*)(uint64_t))type metadata accessor for FeedHeadlineAudioCommandContext, MEMORY[0x1E4FAD778]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v6 - v3;
  sub_1C0C01ABC(0, &qword_1EB885128, (void (*)(uint64_t))type metadata accessor for FeedHeadlineAudioCommandContext, (void (*)(void))sub_1C0088AA4);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FAD770], v1);
  uint64_t result = sub_1C151C9BC();
  qword_1EB8852E0 = result;
  return result;
}

uint64_t static Commands.FeedAudio.trackPlayback.getter()
{
  return sub_1BFC387A8(&qword_1EB8852F0);
}

void sub_1C009030C()
{
  if (!qword_1EB871630)
  {
    sub_1BFFB52BC();
    unint64_t v0 = sub_1C151C98C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB871630);
    }
  }
}

void sub_1C0090364()
{
  if (!qword_1EB8643C0)
  {
    unint64_t v0 = sub_1C151C98C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8643C0);
    }
  }
}

void sub_1C00903BC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C0090420()
{
  if (!qword_1EB8851A8)
  {
    type metadata accessor for LiveActivityCommandContext();
    unint64_t v0 = sub_1C151C98C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8851A8);
    }
  }
}

void sub_1C0090478()
{
  if (!qword_1EB896598)
  {
    type metadata accessor for FormatLayoutSectionDescriptor(255);
    sub_1C006AC5C();
    sub_1C007D02C();
    unint64_t v0 = sub_1C151B86C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB896598);
    }
  }
}

void sub_1C0090500()
{
  if (!qword_1EB8715A0)
  {
    type metadata accessor for InternalErrorView();
    sub_1C14A6A20(&qword_1EB875BF0, 255, (void (*)(uint64_t))type metadata accessor for InternalErrorView);
    unint64_t v0 = sub_1C151B6CC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8715A0);
    }
  }
}

void sub_1C0090598()
{
  if (!qword_1EB885180)
  {
    type metadata accessor for FormatVideoPlayerViewControllerFactory();
    sub_1BFD52288(&qword_1EB88F778, 255, (void (*)(uint64_t))type metadata accessor for FormatVideoPlayerViewControllerFactory);
    unint64_t v0 = sub_1C151B14C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB885180);
    }
  }
}

void sub_1C0090630()
{
  if (!qword_1EB885170)
  {
    type metadata accessor for FormatPuzzleEmbedViewControllerFactory();
    sub_1BFD52288(&qword_1EB88F6C8, 255, (void (*)(uint64_t))type metadata accessor for FormatPuzzleEmbedViewControllerFactory);
    unint64_t v0 = sub_1C151B14C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB885170);
    }
  }
}

void sub_1C00906C8()
{
  if (!qword_1EB87C7F0)
  {
    type metadata accessor for ShareAttributionViewReuseFactory();
    sub_1BFD52288(&qword_1EB880768, 255, (void (*)(uint64_t))type metadata accessor for ShareAttributionViewReuseFactory);
    unint64_t v0 = sub_1C151B14C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB87C7F0);
    }
  }
}

void sub_1C0090760()
{
  if (!qword_1EB871590)
  {
    type metadata accessor for FeedBannerAdView();
    sub_1C12CAA3C(qword_1EB871CF8, 255, (void (*)(uint64_t))type metadata accessor for FeedBannerAdView);
    unint64_t v0 = sub_1C151B01C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB871590);
    }
  }
}

void sub_1C00907F8()
{
  if (!qword_1EB87B0F8)
  {
    type metadata accessor for CategoryView();
    sub_1C12CAA3C(&qword_1EB87B260, 255, (void (*)(uint64_t))type metadata accessor for CategoryView);
    unint64_t v0 = sub_1C151B01C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB87B0F8);
    }
  }
}

void sub_1C0090890()
{
  if (!qword_1EB871570)
  {
    type metadata accessor for GapView();
    sub_1C12CAA3C(&qword_1EB8799F8, 255, (void (*)(uint64_t))type metadata accessor for GapView);
    unint64_t v0 = sub_1C151B01C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB871570);
    }
  }
}

void sub_1C0090928()
{
  if (!qword_1EB87C7E0)
  {
    type metadata accessor for EngagementBannerView();
    sub_1C12CAA3C(&qword_1EB87F128, 255, (void (*)(uint64_t))type metadata accessor for EngagementBannerView);
    unint64_t v0 = sub_1C151B01C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB87C7E0);
    }
  }
}

void sub_1C00909C0()
{
  if (!qword_1EB871560)
  {
    type metadata accessor for CoverChannelView();
    sub_1C12CAA3C((unint64_t *)&unk_1EB875198, 255, (void (*)(uint64_t))type metadata accessor for CoverChannelView);
    unint64_t v0 = sub_1C151B01C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB871560);
    }
  }
}

void sub_1C0090A58()
{
  if (!qword_1EB871558)
  {
    type metadata accessor for GapOfflineView();
    sub_1C12CAA3C(qword_1EB874CC8, 255, (void (*)(uint64_t))type metadata accessor for GapOfflineView);
    unint64_t v0 = sub_1C151B01C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB871558);
    }
  }
}

void sub_1C0090AF0()
{
  if (!qword_1EB871550)
  {
    type metadata accessor for CoverIssueView();
    sub_1C12CAA3C(&qword_1EB874928, 255, (void (*)(uint64_t))type metadata accessor for CoverIssueView);
    unint64_t v0 = sub_1C151B01C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB871550);
    }
  }
}

void sub_1C0090B88(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  if (!*a2)
  {
    unint64_t v10 = sub_1C00764C0();
    unint64_t v11 = a5(a1, a3, a4, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t sub_1C0090BFC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C0090C38(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_1BFE4E978(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_1C0090C94()
{
  unint64_t result = qword_1EB871530;
  if (!qword_1EB871530)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB871530);
  }
  return result;
}

void sub_1C0090CEC()
{
  if (!qword_1EB864158)
  {
    sub_1BFFB52BC();
    sub_1C007685C();
    unint64_t v0 = sub_1C151A23C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB864158);
    }
  }
}

void sub_1C0090D58()
{
  if (!qword_1EB871518)
  {
    sub_1BFFB52BC();
    sub_1C0078974();
    unint64_t v0 = sub_1C151A23C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB871518);
    }
  }
}

void sub_1C0090DC4()
{
  if (!qword_1EB864140[0])
  {
    sub_1BFFB52BC();
    sub_1C0067870();
    unint64_t v0 = sub_1C151A23C();
    if (!v1) {
      atomic_store(v0, qword_1EB864140);
    }
  }
}

void sub_1C0090E30()
{
  if (!qword_1EB8629D8)
  {
    unint64_t v0 = sub_1C151A23C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8629D8);
    }
  }
}

void sub_1C0090E98()
{
  if (!qword_1EB8850E8)
  {
    sub_1C006D638();
    unint64_t v0 = sub_1C151A23C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8850E8);
    }
  }
}

void sub_1C0090EFC()
{
  if (!qword_1EB87C7D8)
  {
    sub_1C007A828(255);
    sub_1BFE6DCD8();
    unint64_t v0 = sub_1C151A23C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB87C7D8);
    }
  }
}

void sub_1C0090F68()
{
  if (!qword_1EB8850D8)
  {
    type metadata accessor for LiveActivityCommandContext();
    sub_1C0067980();
    unint64_t v0 = sub_1C151A23C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8850D8);
    }
  }
}

void sub_1C0090FD4()
{
  if (!qword_1EB87C7B0)
  {
    sub_1BFC39268(255, (unint64_t *)&qword_1EB880D40);
    unint64_t v0 = sub_1C1519E1C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB87C7B0);
    }
  }
}

void sub_1C009103C()
{
  if (!qword_1EB85AC90)
  {
    uint64_t v0 = MEMORY[0x1E4FBB1A0];
    sub_1C006442C(255, (unint64_t *)&qword_1EB879C00, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    sub_1C00643B4((unint64_t *)&qword_1EB85C2E8, (unint64_t *)&qword_1EB879C00, v0);
    unint64_t v1 = sub_1C1519BEC();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_1EB85AC90);
    }
  }
}

void sub_1C00910EC()
{
  if (!qword_1EB864048)
  {
    sub_1BFCBF758(255, &qword_1EB864040, MEMORY[0x1E4FAA6B0]);
    unint64_t v0 = sub_1C151FD8C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB864048);
    }
  }
}

void sub_1C0091160(uint64_t a1)
{
}

void sub_1C0091180()
{
  if (!qword_1EB85AC48)
  {
    uint64_t v0 = MEMORY[0x1E4FBB1A0];
    sub_1C006442C(255, (unint64_t *)&qword_1EB879C00, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    sub_1C00643B4((unint64_t *)&qword_1EB85C2E8, (unint64_t *)&qword_1EB879C00, v0);
    unint64_t v1 = sub_1C151999C();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_1EB85AC48);
    }
  }
}

void sub_1C0091230(uint64_t a1)
{
}

uint64_t sub_1C0091250(uint64_t a1)
{
  return sub_1BFC83B0C(a1, qword_1EB93C7A8);
}

uint64_t sub_1C009126C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_1BFECFA84(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1C00912C8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C0091328(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C0091388(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1C00913E8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C009144C()
{
  if (!qword_1EB8714D0)
  {
    unint64_t v0 = sub_1C151917C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8714D0);
    }
  }
}

void sub_1C00914A8()
{
  if (!qword_1EB8707C8)
  {
    sub_1BFC39268(255, &qword_1EB871088);
    unint64_t v0 = sub_1C151917C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8707C8);
    }
  }
}

void sub_1C0091510(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C0091574()
{
  if (!qword_1EB87C798)
  {
    unint64_t v0 = sub_1C1518EDC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB87C798);
    }
  }
}

void sub_1C00915CC()
{
  if (!qword_1EB8948C0)
  {
    sub_1C0064B10(255, &qword_1EB895E78, (uint64_t)&type metadata for LayeredMediaLayer, MEMORY[0x1E4FBB320]);
    unint64_t v0 = sub_1C1518DAC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8948C0);
    }
  }
}

void sub_1C0091658()
{
  if (!qword_1EB885030)
  {
    unint64_t v0 = sub_1C1518DAC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB885030);
    }
  }
}

void sub_1C00916C0()
{
  if (!qword_1EB885028)
  {
    sub_1C006A018();
    unint64_t v0 = sub_1C1518DAC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB885028);
    }
  }
}

void sub_1C0091724()
{
  if (!qword_1EB87C790)
  {
    type metadata accessor for FeedLayoutCacheKey();
    sub_1BFE9D268(&qword_1EB87CC30, (void (*)(uint64_t))type metadata accessor for FeedLayoutCacheKey);
    unint64_t v0 = sub_1C1518DAC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB87C790);
    }
  }
}

void sub_1C00917C0()
{
  if (!qword_1EB885018)
  {
    type metadata accessor for FormatPackageInventory();
    sub_1C006A178();
    unint64_t v0 = sub_1C1518DAC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB885018);
    }
  }
}

void sub_1C009182C()
{
  if (!qword_1EB885010)
  {
    type metadata accessor for WebEmbedDatastoreCacheKey();
    type metadata accessor for WebEmbedDatastoreUpdate();
    sub_1BFFF125C(&qword_1EB88BFB8, (void (*)(uint64_t))type metadata accessor for WebEmbedDatastoreCacheKey);
    unint64_t v0 = sub_1C1518DAC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB885010);
    }
  }
}

void sub_1C00918D8()
{
  if (!qword_1EB881498)
  {
    sub_1BFC39268(255, (unint64_t *)&unk_1EB8901C0);
    unint64_t v0 = sub_1C1518D2C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB881498);
    }
  }
}

void sub_1C0091940()
{
  if (!qword_1EB85C860)
  {
    sub_1C008BA5C();
    sub_1C008BAB4();
    unint64_t v0 = sub_1C1518B9C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB85C860);
    }
  }
}

void sub_1C00919BC()
{
  if (!qword_1EB871430)
  {
    type metadata accessor for WebEmbedViewController(255);
    sub_1C0092B34();
    unint64_t v0 = sub_1C1518A8C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB871430);
    }
  }
}

void sub_1C0091A24(uint64_t a1)
{
}

void sub_1C0091A58()
{
  if (!qword_1EB884FB8)
  {
    type metadata accessor for LazyAuthTokenStore();
    sub_1BFCF43F0(qword_1EB888980, (void (*)(uint64_t))type metadata accessor for LazyAuthTokenStore);
    unint64_t v0 = sub_1C15185FC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB884FB8);
    }
  }
}

void sub_1C0091AEC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C0091B50()
{
  if (!qword_1EB863D30)
  {
    unint64_t v0 = sub_1C15183DC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB863D30);
    }
  }
}

void sub_1C0091BB8()
{
  if (!qword_1EB884F90)
  {
    type metadata accessor for SportsDataConfiguration();
    unint64_t v0 = sub_1C15183DC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB884F90);
    }
  }
}

void sub_1C0091C20()
{
  if (!qword_1EB863D28)
  {
    type metadata accessor for SportsTaxonomyGraph();
    unint64_t v0 = sub_1C15183DC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB863D28);
    }
  }
}

uint64_t PromiseDeduper<>.promise(createBlock:)()
{
  return sub_1C15183CC();
}

void sub_1C0091CD8()
{
  if (!qword_1EB884F88)
  {
    unint64_t v0 = sub_1C151834C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB884F88);
    }
  }
}

uint64_t sub_1C0091D38(uint64_t a1)
{
  return sub_1BFCB50FC(a1, qword_1EB863D00);
}

uint64_t sub_1C0091D58(uint64_t a1)
{
  return sub_1BFCB50FC(a1, qword_1EB85AB00);
}

uint64_t sub_1C0091D78(uint64_t a1)
{
  return sub_1BFCB50FC(a1, qword_1EB85AAE8);
}

uint64_t sub_1C0091D98(uint64_t a1)
{
  return sub_1BFCB50FC(a1, qword_1EB863CD0);
}

uint64_t sub_1C0091DB4(uint64_t a1)
{
  return sub_1BFCB50FC(a1, qword_1EB85E838);
}

uint64_t sub_1C0091DD0(uint64_t a1)
{
  return sub_1BFCB50FC(a1, qword_1EB85AAC8);
}

uint64_t sub_1C0091DEC(uint64_t a1)
{
  return sub_1BFCB50FC(a1, qword_1EB85AAB0);
}

uint64_t sub_1C0091E04(uint64_t a1)
{
  return sub_1BFCB50FC(a1, qword_1EB861180);
}

uint64_t sub_1C0091E28(uint64_t a1)
{
  return sub_1BFCB50FC(a1, qword_1EB85AA98);
}

uint64_t sub_1C0091E50(uint64_t a1)
{
  return sub_1BFCB50FC(a1, qword_1EB85AA80);
}

uint64_t sub_1C0091E78(uint64_t a1)
{
  return sub_1BFCB50FC(a1, qword_1EB863CA0);
}

uint64_t sub_1C0091EA0(uint64_t a1)
{
  return sub_1BFCB50FC(a1, qword_1EB863C48);
}

void sub_1C0091EC4(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = sub_1C151822C();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_1C0091F2C()
{
  unint64_t result = qword_1EB896BA0;
  if (!qword_1EB896BA0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB896BA0);
  }
  return result;
}

void sub_1C0091F84()
{
  if (!qword_1EB884E08)
  {
    sub_1C0079CF4();
    sub_1C0079DF0();
    sub_1C0079D9C();
    unint64_t v0 = sub_1C1517E6C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB884E08);
    }
  }
}

unint64_t sub_1C0092008()
{
  unint64_t result = qword_1EB884DD0;
  if (!qword_1EB884DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB884DD0);
  }
  return result;
}

unint64_t sub_1C009205C()
{
  unint64_t result = qword_1EB871398;
  if (!qword_1EB871398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB871398);
  }
  return result;
}

unint64_t sub_1C00920B0(void *a1)
{
  a1[1] = sub_1BFE7E344();
  a1[2] = sub_1BFDC74E8();
  unint64_t result = sub_1C0608848();
  a1[3] = result;
  return result;
}

uint64_t sub_1C00920E8(uint64_t a1)
{
  uint64_t v1 = qword_1EB85C850;
  if (!qword_1EB85C850)
  {
    MEMORY[0x1F4188790](a1);
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v1 = TupleTypeMetadata;
    if (!v3) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1EB85C850);
    }
  }
  return v1;
}

void sub_1C00921D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_1C009223C()
{
  return sub_1BFC5D2EC((unint64_t *)&unk_1EB881488);
}

uint64_t sub_1C0092270(uint64_t a1)
{
  uint64_t v2 = sub_1BFC5D2EC((unint64_t *)&unk_1EB884DB0);
  uint64_t v3 = MEMORY[0x1E4FAB458];
  return MEMORY[0x1F415F4E8](a1, v2, v3);
}

void sub_1C00922E0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, void (*a5)(void))
{
  if (!*a2)
  {
    sub_1BFEFDDA8(255, a3, a4, MEMORY[0x1E4FBB718]);
    a5();
    unint64_t v7 = sub_1C15172AC();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_1C0092368(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1C00923B8()
{
  if (!qword_1EB87C688)
  {
    sub_1BFFF75C0();
    sub_1C00733AC();
    unint64_t v0 = sub_1C15172AC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB87C688);
    }
  }
}

void sub_1C009241C()
{
  if (!qword_1EB8948B0)
  {
    sub_1C008CB4C();
    unint64_t v0 = sub_1C151720C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8948B0);
    }
  }
}

void sub_1C0092478(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_1C15171BC();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void sub_1C00924C0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_1C0092510(uint64_t a1)
{
  return sub_1BFC4EB94(a1, 0xD00000000000002BLL, 0x80000001C1638910, &qword_1EB861158);
}

uint64_t sub_1C0092534(uint64_t a1)
{
  return sub_1BFC6CBD4(a1, 0xD00000000000002ALL, 0x80000001C1638980, &qword_1EB863B68);
}

uint64_t static Settings.Puzzles.prewarmTimeInterval.getter()
{
  return sub_1BFC387A8(&qword_1EB8614C8);
}

uint64_t sub_1C009257C(uint64_t a1)
{
  return sub_1BFC6C470(a1, (void (*)(void))type metadata accessor for Settings.Puzzles.BadgeCountOverride, 0xD000000000000029, 0x80000001C1638A30, (uint64_t *)&unk_1EB863B50);
}

uint64_t static Settings.Puzzles.badgeCountOverrides.getter()
{
  return sub_1BFC387A8(&qword_1EB863B60);
}

uint64_t sub_1C00925D8()
{
  return sub_1BFC394A8();
}

uint64_t type metadata accessor for Settings.Puzzles.BadgeCountOverride(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, (uint64_t *)&unk_1EB863B18);
}

uint64_t static Settings.Puzzles.puzzlesBadgeCount.getter()
{
  return sub_1BFC387A8(&qword_1EB863B10);
}

uint64_t sub_1C009262C()
{
  return sub_1BFC394A8();
}

uint64_t type metadata accessor for Settings.Puzzles.ConfigOverrides(uint64_t a1)
{
  return sub_1BFC5CCB4(a1, (uint64_t *)&unk_1EB863AD0);
}

uint64_t sub_1C009265C(uint64_t a1)
{
  return sub_1BFC6C470(a1, (void (*)(void))type metadata accessor for Settings.Puzzles.ConfigOverrides, 0xD00000000000002CLL, 0x80000001C1638CB0, &qword_1EB863AC0);
}

uint64_t static Settings.NewsFeedModule.Features.enableAIAttribution.getter()
{
  return sub_1BFC387A8(&qword_1EB8637C8);
}

uint64_t sub_1C00926B8(uint64_t a1)
{
  return sub_1BFC93408(a1, 0xD000000000000020, 0x80000001C1613740, &qword_1EB8637A8);
}

uint64_t static Settings.NewsFeedModule.Features.useSportsSyncingV2.getter()
{
  return sub_1BFC387A8(&qword_1EB8637B0);
}

uint64_t sub_1C0092700(uint64_t a1)
{
  return sub_1BFCC2124(a1, 0, 0xD000000000000025, 0x80000001C16137C0, &qword_1EB884D30);
}

uint64_t sub_1C0092728(uint64_t a1)
{
  return sub_1BFC93408(a1, 0xD00000000000001FLL, 0x80000001C1613770, (uint64_t *)&unk_1EB863788);
}

uint64_t static Settings.NewsFeedModule.Features.useLiveActivities.getter()
{
  return sub_1BFC387A8(&qword_1EB863798);
}

uint64_t sub_1C0092770(uint64_t a1)
{
  return sub_1BFC93668(a1, MEMORY[0x1E4FAB278], 0xD00000000000001CLL, 0x80000001C1613720, &qword_1EB861138);
}

uint64_t static Settings.NewsFeedModule.Features.useOfflineMode.getter()
{
  return sub_1BFC387A8(&qword_1EB861140);
}

uint64_t sub_1C00927C0(uint64_t a1)
{
  return sub_1BFC93668(a1, MEMORY[0x1E4FAB278], 0xD000000000000018, 0x80000001C1613880, &qword_1EB863780);
}

uint64_t static Settings.NewsFeedModule.Features.usePuzzles.getter()
{
  return sub_1BFC387A8(&qword_1EB8614A8);
}

uint64_t sub_1C0092810(uint64_t a1)
{
  return sub_1BFC93668(a1, MEMORY[0x1E4FAB278], 0xD00000000000002ALL, 0x80000001C16135F0, (uint64_t *)&unk_1EB884830);
}

uint64_t static Settings.NewsFeedModule.Features.enableInFeedDebugging.getter()
{
  return sub_1BFC387A8(&qword_1EB884840);
}

uint64_t sub_1C0092860(uint64_t a1)
{
  return sub_1BFC93668(a1, MEMORY[0x1E4FAB280], 0xD00000000000001FLL, 0x80000001C1613970, &qword_1EB85F258);
}

uint64_t static Settings.NewsFeedModule.Features.featureVideoInFeed.getter()
{
  return sub_1BFC387A8(&qword_1EB85F268);
}

uint64_t sub_1C00928B0(uint64_t a1)
{
  return sub_1BFCC2124(a1, 1, 0xD000000000000019, 0x80000001C16132A0, &qword_1EB85AA58);
}

uint64_t sub_1C00928D8(uint64_t a1)
{
  return sub_1BFCC2124(a1, 0, 0xD000000000000026, 0x80000001C16132F0, &qword_1EB85AA50);
}

uint64_t sub_1C0092900(uint64_t a1)
{
  return sub_1BFCC2124(a1, 0, 0xD000000000000021, 0x80000001C1613320, &qword_1EB85AA48);
}

uint64_t sub_1C0092928(uint64_t a1)
{
  return sub_1BFC45598(2.0, a1, 0xD000000000000020, 0x80000001C1613350, &qword_1EB85C790);
}

uint64_t sub_1C0092950(uint64_t a1)
{
  return sub_1BFCC2124(a1, 0, 0xD000000000000026, 0x80000001C1613380, &qword_1EB8711D0);
}

uint64_t sub_1C0092978(uint64_t a1)
{
  return sub_1BFCC1F50(a1, 0, 0xD000000000000027, 0x80000001C16134C0, &qword_1EB8711C8);
}

uint64_t sub_1C00929A0(uint64_t a1)
{
  return sub_1BFCC1F50(a1, 0, 0xD000000000000024, 0x80000001C1613450, &qword_1EB8711C0);
}

uint64_t static Settings.NewsFeedModule.Layout.enableLogDebugging.getter()
{
  return sub_1BFC387A8(qword_1EB87AF10);
}

uint64_t sub_1C00929EC(uint64_t a1)
{
  return sub_1BFCC2124(a1, 0, 0xD000000000000028, 0x80000001C1612970, &qword_1EB881288);
}

uint64_t sub_1C0092A14(uint64_t a1)
{
  return sub_1BFC60B6C(a1, 0xD000000000000027, 0x80000001C16127C0, (uint64_t *)&unk_1EB8979F8);
}

uint64_t static Settings.NewsFeedModule.Personalization.disableTabiArticleScoring.getter()
{
  return sub_1BFC387A8(&qword_1EB8979F0);
}

uint64_t sub_1C0092A5C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C0092AA4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C0092AEC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1C0092B34()
{
  if (!qword_1EB871130)
  {
    sub_1C00A8C00(255, (unint64_t *)&qword_1EB8948A0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB871130);
    }
  }
}

void sub_1C0092BC8()
{
  if (!qword_1EB87C670)
  {
    sub_1BFC39268(255, (unint64_t *)&qword_1EB880D50);
    unint64_t v0 = sub_1C15153CC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB87C670);
    }
  }
}

char *sub_1C00962EC(uint64_t a1)
{
  uint64_t v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_onTargetTap;
  sub_1C009A0FC(0, (unint64_t *)&qword_1EB871600, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FAD760]);
  id v7 = objc_allocWithZone(v6);
  uint64_t v8 = v1;
  *(void *)&v2[v5] = objc_msgSend(v7, sel_init);
  uint64_t v9 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_targetButton;
  *(void *)&v8[v9] = objc_msgSend(self, sel_buttonWithType_, 0);
  uint64_t v10 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_statusLabel;
  *(void *)&v8[v10] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v11 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_progressView;
  *(void *)&v8[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1B48]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v8[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_editor] = a1;
  swift_retain();

  v40.receiver = v8;
  v40.super_class = ObjectType;
  id v12 = objc_msgSendSuper2(&v40, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  unint64_t v13 = self;
  uint64_t v14 = (char *)v12;
  id v15 = objc_msgSend(v13, sel_tertiarySystemBackgroundColor);
  objc_msgSend(v14, sel_setBackgroundColor_, v15);

  objc_msgSend(v14, sel_setClipsToBounds_, 1);
  id v16 = objc_msgSend(v14, sel_layer);
  objc_msgSend(v16, sel_setCornerRadius_, 4.0);

  uint64_t v17 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_statusLabel;
  id v18 = *(id *)&v14[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_statusLabel];
  id v19 = objc_msgSend(v13, sel_secondaryLabelColor);
  objc_msgSend(v18, sel_setTextColor_, v19);

  uint64_t v20 = *(void **)&v14[v17];
  uint64_t v21 = self;
  id v22 = v20;
  id v23 = objc_msgSend(v21, sel_systemFontOfSize_, 11.0);
  objc_msgSend(v22, sel_setFont_, v23);

  objc_msgSend(v14, sel_addSubview_, *(void *)&v14[v17]);
  uint64_t v24 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_targetButton;
  id v25 = *(id *)&v14[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_targetButton];
  id v26 = objc_msgSend(v13, sel_secondaryLabelColor);
  objc_msgSend(v25, sel_setTintColor_, v26);

  id v27 = *(id *)&v14[v24];
  uint64_t v28 = (void *)sub_1C151E5EC();
  id v29 = objc_msgSend(self, sel_systemImageNamed_, v28);

  objc_msgSend(v27, sel_setImage_forState_, v29, 0);
  unsigned int v30 = *(void **)&v14[v24];
  objc_msgSend(v30, sel_setPointerInteractionEnabled_, 1);
  objc_msgSend(v14, sel_addSubview_, v30);
  id v31 = *(id *)&v14[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_onTargetTap];
  id v32 = v30;
  sub_1C151C87C();

  uint64_t v33 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_progressView;
  uint64_t v34 = *(void **)&v14[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_progressView];
  objc_msgSend(v34, sel_setProgress_, 0.0);
  id v35 = v34;
  id v36 = objc_msgSend(v13, sel_systemBlueColor);
  objc_msgSend(v35, sel_setProgressTintColor_, v36);

  id v37 = *(id *)&v14[v33];
  id v38 = objc_msgSend(v13, sel_clearColor);
  objc_msgSend(v37, sel_setTrackTintColor_, v38);

  objc_msgSend(v14, sel_addSubview_, *(void *)&v14[v33]);
  swift_retain();
  sub_1C151896C();
  swift_release();
  sub_1C151891C();
  swift_release();
  swift_retain();
  sub_1C15170BC();
  swift_release();
  sub_1C151708C();
  swift_release();
  swift_retain();
  sub_1C15170BC();
  swift_release();
  sub_1C151708C();
  swift_release();
  swift_retain();
  sub_1C151896C();
  swift_release();
  sub_1C151891C();
  swift_release();
  swift_retain();
  sub_1C151896C();
  swift_release();
  sub_1C151891C();
  swift_release();

  swift_release();
  return v14;
}

void sub_1C0096930()
{
}

void sub_1C0096954()
{
  uint64_t v1 = sub_1C1515B3C();
  MEMORY[0x1F4188790](v1 - 8);
  sub_1BFC39268(0, (unint64_t *)&unk_1EB87A260);
  sub_1C15159CC();
  uint64_t v2 = (void *)sub_1C151F5EC();
  uint64_t v41 = v0;
  swift_retain();
  sub_1C151709C();
  swift_release();
  unint64_t v3 = &off_1C1527000;
  if (v42)
  {
    objc_super v40 = v2;
    swift_retain();
    sub_1C151709C();
    swift_release();
    sub_1C151E6DC();
    swift_bridgeObjectRelease();
    sub_1C0099920();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C1527210;
    uint64_t v5 = (void *)*MEMORY[0x1E4FB06F8];
    *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
    long long v39 = self;
    double v6 = *MEMORY[0x1E4FB09A8];
    id v38 = v5;
    id v7 = objc_msgSend(v39, sel_systemFontOfSize_weight_, 11.0, v6);
    uint64_t v37 = sub_1BFC39268(0, (unint64_t *)&qword_1EB87A2B0);
    *(void *)(inited + 40) = v7;
    uint64_t v8 = (void *)*MEMORY[0x1E4FB0700];
    *(void *)(inited + 64) = v37;
    *(void *)(inited + 72) = v8;
    id v36 = self;
    id v9 = v8;
    id v10 = objc_msgSend(v36, sel_systemBlueColor);
    uint64_t v11 = sub_1BFC39268(0, (unint64_t *)&qword_1EB87A2F0);
    *(void *)(inited + 104) = v11;
    *(void *)(inited + 80) = v10;
    sub_1BFF991DC(inited);
    id v12 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
    unint64_t v13 = (void *)sub_1C151E5EC();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_1BFC489D4((unint64_t *)&qword_1EB87A1F0, type metadata accessor for Key);
    uint64_t v14 = (void *)sub_1C151E32C();
    swift_bridgeObjectRelease();
    id v15 = objc_msgSend(v12, sel_initWithString_attributes_, v13, v14);

    uint64_t v2 = v40;
    objc_msgSend(v40, sel_appendAttributedString_, v15);

    uint64_t v16 = swift_initStackObject();
    *(_OWORD *)(v16 + 16) = xmmword_1C1527210;
    *(void *)(v16 + 32) = v38;
    id v17 = v38;
    *(void *)(v16 + 40) = objc_msgSend(v39, sel_systemFontOfSize_, 11.0);
    *(void *)(v16 + 64) = v37;
    *(void *)(v16 + 72) = v9;
    id v18 = v9;
    id v19 = objc_msgSend(v36, sel_secondaryLabelColor);
    *(void *)(v16 + 104) = v11;
    *(void *)(v16 + 80) = v19;
    sub_1BFF991DC(v16);
    id v20 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
    uint64_t v21 = (void *)sub_1C151E5EC();
    unint64_t v3 = &off_1C1527000;
    id v22 = (void *)sub_1C151E32C();
    swift_bridgeObjectRelease();
    id v23 = objc_msgSend(v20, sel_initWithString_attributes_, v21, v22);

    objc_msgSend(v40, sel_appendAttributedString_, v23);
  }
  else
  {
    id v17 = (id)*MEMORY[0x1E4FB06F8];
    id v18 = (id)*MEMORY[0x1E4FB0700];
  }
  swift_retain();
  sub_1C151894C();
  swift_release();
  sub_1C0099920();
  uint64_t v24 = swift_initStackObject();
  *(_OWORD *)(v24 + 16) = *((_OWORD *)v3 + 33);
  *(void *)(v24 + 32) = v17;
  id v25 = self;
  id v26 = v17;
  id v27 = objc_msgSend(v25, sel_systemFontOfSize_, 11.0);
  uint64_t v28 = sub_1BFC39268(0, (unint64_t *)&qword_1EB87A2B0);
  *(void *)(v24 + 40) = v27;
  *(void *)(v24 + 64) = v28;
  *(void *)(v24 + 72) = v18;
  id v29 = self;
  id v30 = v18;
  id v31 = objc_msgSend(v29, sel_secondaryLabelColor);
  *(void *)(v24 + 104) = sub_1BFC39268(0, (unint64_t *)&qword_1EB87A2F0);
  *(void *)(v24 + 80) = v31;
  sub_1BFF991DC(v24);
  id v32 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
  uint64_t v33 = (void *)sub_1C151E5EC();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1BFC489D4((unint64_t *)&qword_1EB87A1F0, type metadata accessor for Key);
  uint64_t v34 = (void *)sub_1C151E32C();
  swift_bridgeObjectRelease();
  id v35 = objc_msgSend(v32, sel_initWithString_attributes_, v33, v34);

  objc_msgSend(v2, sel_appendAttributedString_, v35);
  objc_msgSend(*(id *)(v41 + OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_statusLabel), sel_setAttributedText_, v2);
}

id sub_1C0097000(uint64_t a1, _DWORD *a2, double a3)
{
  LODWORD(a3) = *a2;
  return objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_progressView), sel_setProgress_animated_, 0, a3);
}

id sub_1C0097048()
{
  v16.receiver = v0;
  v16.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v16, sel_layoutSubviews);
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_targetButton];
  objc_msgSend(v0, sel_bounds);
  double Height = CGRectGetHeight(v17);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setFrame_, 8.0, 0.0, Height, CGRectGetHeight(v18));
  unint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_statusLabel];
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v0, sel_bounds);
  CGRectGetHeight(v19);
  sub_1C151F75C();
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  objc_msgSend(v0, sel_bounds);
  CGFloat v12 = CGRectGetHeight(v20);
  objc_msgSend(v3, sel_setFrame_, UIEdgeInsetsInsetRect(v5, v7, v9, v11, 0.0, v12 + 8.0));
  unint64_t v13 = *(void **)&v0[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_progressView];
  objc_msgSend(v0, sel_bounds);
  CGFloat v14 = CGRectGetHeight(v21) + -3.0;
  objc_msgSend(v0, sel_bounds);
  return objc_msgSend(v13, sel_setFrame_, 0.0, v14, CGRectGetWidth(v22), 3.0);
}

id _s8NewsFeed22WebEmbedViewControllerCfD_0()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for DebugFormatUploadDiffStatusView()
{
  return self;
}

void type metadata accessor for SWProcessTerminationRetryPolicy(uint64_t a1)
{
}

void type metadata accessor for FCOfflineReason(uint64_t a1)
{
}

void type metadata accessor for FCNetworkEventType(uint64_t a1)
{
}

void type metadata accessor for ActionAtItemEnd(uint64_t a1)
{
}

void type metadata accessor for CALayerContentsGravity(uint64_t a1)
{
}

void type metadata accessor for SVPlaybackKind(uint64_t a1)
{
}

void type metadata accessor for AVLayerVideoGravity(uint64_t a1)
{
}

uint64_t sub_1C0097478(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1C0097498(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

void type metadata accessor for FCFetchOperationStatus(uint64_t a1)
{
}

void type metadata accessor for UIPopoverArrowDirection(uint64_t a1)
{
}

void type metadata accessor for Options(uint64_t a1)
{
}

void type metadata accessor for CAShapeLayerLineCap(uint64_t a1)
{
}

void type metadata accessor for FCArticleRole(uint64_t a1)
{
}

void type metadata accessor for Style(uint64_t a1)
{
}

void type metadata accessor for FCTagFilterOptions(uint64_t a1)
{
}

void type metadata accessor for FCFeedFilterOptions(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for FormatGradientDirection(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for UIAccessibilityContrast(uint64_t a1)
{
}

void type metadata accessor for FCSportsType(uint64_t a1)
{
}

void type metadata accessor for UILegibilityWeight(uint64_t a1)
{
}

void type metadata accessor for FCSportsLeagueType(uint64_t a1)
{
}

void type metadata accessor for FCFeedDescriptorConfiguration(uint64_t a1)
{
}

void type metadata accessor for CAMediaTimingFillMode(uint64_t a1)
{
}

void type metadata accessor for FCFeedPersonalizationConfigurationSet(uint64_t a1)
{
}

void type metadata accessor for FCOfflineIssueSource(uint64_t a1)
{
}

void type metadata accessor for FCOperationPurpose(uint64_t a1)
{
}

void type metadata accessor for QualityOfService(uint64_t a1)
{
}

void type metadata accessor for SystemDesign(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceIdiom(uint64_t a1)
{
}

void type metadata accessor for ActivityType(uint64_t a1)
{
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceLayoutDirection(uint64_t a1)
{
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceStyle(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceSizeClass(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for FormatPoint(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1C0097974@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    double v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1C00979CC(uint64_t a1, uint64_t a2)
{
  return sub_1C0098FFC(a1, a2, MEMORY[0x1E4F27EB8]);
}

uint64_t sub_1C00979F4()
{
  return sub_1C1520E0C();
}

uint64_t sub_1C0097A3C()
{
  return sub_1C1520DCC();
}

uint64_t sub_1C0097A68()
{
  return sub_1C1520E0C();
}

void *sub_1C0097AAC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1C0097AD8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

BOOL sub_1C0097AFC(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1C0097B10()
{
  return *v0 == 0;
}

void *sub_1C0097B24@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1C0097B38@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

uint64_t sub_1C0097B4C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v6 = *v2 & *a1;
  uint64_t result = sub_1C151F30C();
  if (result) {
    uint64_t v6 = 0;
  }
  else {
    *objc_super v2 = v5 & ~v4;
  }
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = result & 1;
  return result;
}

uint64_t sub_1C0097BB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2 & *a1;
  *v2 |= *a1;
  uint64_t result = sub_1C151F30C();
  if (result) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v4;
  }
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = result & 1;
  return result;
}

void *sub_1C0097C04(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_1C0097C18(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1C0097C2C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1C0097C40(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

uint64_t sub_1C0097C54()
{
  return sub_1C151F30C();
}

BOOL sub_1C0097C64(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

uint64_t sub_1C0097C78()
{
  return sub_1C151F30C();
}

void *sub_1C0097C80(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_1C0097C94@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_1C0097CA8(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1C0097CBC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

BOOL sub_1C0097CCC(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1C0097CE0(uint64_t a1, id *a2)
{
  uint64_t result = sub_1C151E60C();
  *a2 = 0;
  return result;
}

uint64_t sub_1C0097D58(uint64_t a1, id *a2)
{
  char v3 = sub_1C151E61C();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1C0097DD8@<X0>(uint64_t *a1@<X8>)
{
  sub_1C151E62C();
  uint64_t v2 = sub_1C151E5EC();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1C0097E1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C151E62C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void *sub_1C0097E48@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1C0097E54@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1C00998E8(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1C0097E94()
{
  return sub_1BFC489D4(&qword_1EA195D70, type metadata accessor for UIRectCorner);
}

uint64_t sub_1C0097EDC()
{
  return sub_1BFC489D4(&qword_1EA195D78, type metadata accessor for UIRectCorner);
}

uint64_t sub_1C0097F24()
{
  return sub_1BFC489D4(&qword_1EA195D80, type metadata accessor for UIRectCorner);
}

uint64_t sub_1C0097F6C()
{
  return sub_1BFC489D4(&qword_1EA195D88, type metadata accessor for UIRectCorner);
}

void sub_1C0097FB4(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1C0097FC0(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4((unint64_t *)&qword_1EB87A1F0, type metadata accessor for Key);
  uint64_t v3 = sub_1BFC489D4(&qword_1EA196080, type metadata accessor for Key);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C009807C()
{
  return sub_1BFC489D4(&qword_1EA195D90, type metadata accessor for Key);
}

uint64_t sub_1C00980C4()
{
  return sub_1BFC489D4(&qword_1EA195D98, type metadata accessor for Key);
}

uint64_t sub_1C009810C(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4(&qword_1EA196228, type metadata accessor for CALayerCornerCurve);
  uint64_t v3 = sub_1BFC489D4(&qword_1EA196230, type metadata accessor for CALayerCornerCurve);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C00981C8(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4(&qword_1EA196068, type metadata accessor for UIContentSizeCategory);
  uint64_t v3 = sub_1BFC489D4((unint64_t *)&unk_1EA196070, type metadata accessor for UIContentSizeCategory);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C0098284()
{
  return sub_1BFC489D4(&qword_1EA195DA0, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1C00982CC()
{
  return sub_1BFC489D4(&qword_1EA195DA8, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1C0098314()
{
  return sub_1BFC489D4(&qword_1EA195DB0, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1C009835C(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4(&qword_1EA196028, type metadata accessor for FCOperationPurpose);
  uint64_t v3 = sub_1BFC489D4(&qword_1EA196030, type metadata accessor for FCOperationPurpose);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C0098418(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4(&qword_1EA196258, type metadata accessor for TextStyle);
  uint64_t v3 = sub_1BFC489D4((unint64_t *)&unk_1EA196260, type metadata accessor for TextStyle);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C00984D4(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4(&qword_1EA196058, type metadata accessor for ActivityType);
  uint64_t v3 = sub_1BFC489D4(&qword_1EA196060, type metadata accessor for ActivityType);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C0098590()
{
  return sub_1BFC489D4(&qword_1EA195DB8, type metadata accessor for ActivityType);
}

uint64_t sub_1C00985D8()
{
  return sub_1BFC489D4(&qword_1EA195DC0, type metadata accessor for ActivityType);
}

uint64_t sub_1C0098620()
{
  return sub_1BFC489D4(&qword_1EA195DC8, type metadata accessor for ActivityType);
}

uint64_t sub_1C0098668(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4(&qword_1EA1961C8, type metadata accessor for Name);
  uint64_t v3 = sub_1BFC489D4(&qword_1EA1961D0, type metadata accessor for Name);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C0098724(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4(&qword_1EA196008, type metadata accessor for CAShapeLayerLineCap);
  uint64_t v3 = sub_1BFC489D4(&qword_1EA196010, type metadata accessor for CAShapeLayerLineCap);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C00987E0(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4((unint64_t *)&qword_1EB880D80, type metadata accessor for AttributeName);
  uint64_t v3 = sub_1BFC489D4(&qword_1EA196050, type metadata accessor for AttributeName);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C009889C(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4(&qword_1EA196038, type metadata accessor for SystemDesign);
  uint64_t v3 = sub_1BFC489D4((unint64_t *)&unk_1EA196040, type metadata accessor for SystemDesign);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C0098958(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4(&qword_1EA1961F8, type metadata accessor for Identifier);
  uint64_t v3 = sub_1BFC489D4(&qword_1EA196200, type metadata accessor for Identifier);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C0098A14(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4(&qword_1EA1961E8, type metadata accessor for OpenExternalURLOptionsKey);
  uint64_t v3 = sub_1BFC489D4(&qword_1EA1961F0, type metadata accessor for OpenExternalURLOptionsKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C0098AD0(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4(&qword_1EA195FF8, type metadata accessor for AVLayerVideoGravity);
  uint64_t v3 = sub_1BFC489D4(&qword_1EA196000, type metadata accessor for AVLayerVideoGravity);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C0098B8C(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4(&qword_1EA195FE8, type metadata accessor for CALayerContentsGravity);
  uint64_t v3 = sub_1BFC489D4(&qword_1EA195FF0, type metadata accessor for CALayerContentsGravity);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C0098C48(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4(&qword_1EA196018, type metadata accessor for CAMediaTimingFillMode);
  uint64_t v3 = sub_1BFC489D4(&qword_1EA196020, type metadata accessor for CAMediaTimingFillMode);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C0098D04(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4(&qword_1EA1961B8, type metadata accessor for OptionKey);
  uint64_t v3 = sub_1BFC489D4(&qword_1EA1961C0, type metadata accessor for OptionKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C0098DC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1C151E5EC();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1C0098E08(uint64_t a1)
{
  uint64_t v2 = sub_1BFC489D4(&qword_1EA1961D8, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_1BFC489D4(&qword_1EA1961E0, type metadata accessor for URLResourceKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C0098EC4(uint64_t a1, uint64_t a2)
{
  return sub_1C0098FFC(a1, a2, MEMORY[0x1E4FBB198]);
}

uint64_t sub_1C0098EDC()
{
  return sub_1BFC489D4(&qword_1EA195DD0, type metadata accessor for AttributeName);
}

uint64_t sub_1C0098F24()
{
  return sub_1BFC489D4(&qword_1EA195DD8, type metadata accessor for AttributeName);
}

uint64_t sub_1C0098F6C()
{
  return sub_1BFC489D4(&qword_1EA195DE0, type metadata accessor for SystemDesign);
}

uint64_t sub_1C0098FB4()
{
  return sub_1BFC489D4(&qword_1EA195DE8, type metadata accessor for SystemDesign);
}

uint64_t sub_1C0098FFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_1C151E62C();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1C0099040()
{
  sub_1C151E62C();
  sub_1C151E77C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C0099094()
{
  return sub_1BFC489D4(&qword_1EA195DF0, type metadata accessor for SystemDesign);
}

uint64_t sub_1C00990DC()
{
  return sub_1BFC489D4(&qword_1EA195DF8, type metadata accessor for FCOperationPurpose);
}

uint64_t sub_1C0099124()
{
  return sub_1BFC489D4(&qword_1EA195E00, type metadata accessor for FCOperationPurpose);
}

uint64_t sub_1C009916C()
{
  return sub_1BFC489D4(&qword_1EA195E08, type metadata accessor for FCOperationPurpose);
}

uint64_t sub_1C00991B4()
{
  return sub_1BFC489D4(&qword_1EA195E10, type metadata accessor for CAMediaTimingFillMode);
}

uint64_t sub_1C00991FC()
{
  return sub_1BFC489D4(&qword_1EA195E18, type metadata accessor for CAMediaTimingFillMode);
}

uint64_t sub_1C0099244()
{
  return sub_1BFC489D4(&qword_1EA195E20, type metadata accessor for CAMediaTimingFillMode);
}

uint64_t sub_1C009928C()
{
  return sub_1BFC489D4(&qword_1EA195E28, type metadata accessor for CAShapeLayerLineCap);
}

uint64_t sub_1C00992D4()
{
  return sub_1BFC489D4(&qword_1EA195E30, type metadata accessor for CAShapeLayerLineCap);
}

uint64_t sub_1C009931C()
{
  return sub_1BFC489D4(&qword_1EA195E38, type metadata accessor for CAShapeLayerLineCap);
}

uint64_t sub_1C0099364()
{
  return sub_1BFC489D4(&qword_1EA195E40, type metadata accessor for Options);
}

uint64_t sub_1C00993AC()
{
  return sub_1BFC489D4(&qword_1EA195E48, type metadata accessor for Options);
}

uint64_t sub_1C00993F4()
{
  return sub_1BFC489D4(&qword_1EA195E50, type metadata accessor for Options);
}

uint64_t sub_1C009943C()
{
  return sub_1BFC489D4(&qword_1EA195E58, type metadata accessor for Options);
}

uint64_t sub_1C0099484()
{
  return sub_1BFC489D4(&qword_1EA195E60, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t sub_1C00994CC()
{
  return sub_1BFC489D4(&qword_1EA195E68, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t sub_1C0099514()
{
  return sub_1BFC489D4(&qword_1EA195E70, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t sub_1C009955C()
{
  return sub_1BFC489D4(&qword_1EA195E78, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t sub_1C00995A4()
{
  return sub_1BFC489D4(&qword_1EA195E80, type metadata accessor for AVLayerVideoGravity);
}

uint64_t sub_1C00995EC()
{
  return sub_1BFC489D4(&qword_1EA195E88, type metadata accessor for AVLayerVideoGravity);
}

uint64_t sub_1C0099634()
{
  return sub_1BFC489D4(&qword_1EA195E90, type metadata accessor for AVLayerVideoGravity);
}

uint64_t sub_1C009967C()
{
  return sub_1BFC489D4(&qword_1EA195E98, type metadata accessor for CALayerContentsGravity);
}

uint64_t sub_1C00996C4()
{
  return sub_1BFC489D4(&qword_1EA195EA0, type metadata accessor for CALayerContentsGravity);
}

uint64_t sub_1C009970C()
{
  return sub_1BFC489D4((unint64_t *)&unk_1EA195EA8, type metadata accessor for CALayerContentsGravity);
}

uint64_t sub_1C0099754()
{
  return sub_1BFC489D4((unint64_t *)&unk_1EA195EB8, type metadata accessor for UIUserInterfaceIdiom);
}

void sub_1C009979C()
{
  uint64_t v1 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_onTargetTap;
  sub_1C009A0FC(0, (unint64_t *)&qword_1EB871600, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FAD760]);
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_targetButton;
  *(void *)&v0[v3] = objc_msgSend(self, sel_buttonWithType_, 0);
  uint64_t v4 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_statusLabel;
  *(void *)&v0[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v5 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_progressView;
  *(void *)&v0[v5] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1B48]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);

  sub_1C152040C();
  __break(1u);
}

uint64_t sub_1C00998E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void sub_1C0099920()
{
  if (!qword_1EB87A910)
  {
    sub_1C0063E08();
    unint64_t v0 = sub_1C152089C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB87A910);
    }
  }
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
}

void type metadata accessor for OptionKey(uint64_t a1)
{
}

void type metadata accessor for Name(uint64_t a1)
{
}

uint64_t sub_1C00999F0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1C0099A10(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 128) = v3;
  return result;
}

void type metadata accessor for CATransform3D(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for CGImage(uint64_t a1)
{
}

void type metadata accessor for FCFetchResult(uint64_t a1)
{
}

void type metadata accessor for CGBlendMode(uint64_t a1)
{
}

void type metadata accessor for COMAPPLEFELDSPARPROTOCOLLIVERPOOLCohort_Type(uint64_t a1)
{
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
}

void type metadata accessor for Identifier(uint64_t a1)
{
}

uint64_t sub_1C0099B9C()
{
  return sub_1BFC489D4(&qword_1EA196140, type metadata accessor for Identifier);
}

uint64_t sub_1C0099BE4()
{
  return sub_1BFC489D4(&qword_1EA196148, type metadata accessor for Identifier);
}

uint64_t sub_1C0099C2C()
{
  return sub_1BFC489D4(&qword_1EA196150, type metadata accessor for Identifier);
}

uint64_t sub_1C0099C74()
{
  return sub_1BFC489D4(&qword_1EA196158, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_1C0099CBC()
{
  return sub_1BFC489D4(&qword_1EA196160, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_1C0099D04()
{
  return sub_1BFC489D4(&qword_1EA196168, type metadata accessor for URLResourceKey);
}

uint64_t sub_1C0099D4C()
{
  return sub_1BFC489D4(&qword_1EA196170, type metadata accessor for URLResourceKey);
}

uint64_t sub_1C0099D94()
{
  return sub_1BFC489D4(&qword_1EA196178, type metadata accessor for URLResourceKey);
}

uint64_t sub_1C0099DDC()
{
  return sub_1BFC489D4(&qword_1EA196180, type metadata accessor for Name);
}

uint64_t sub_1C0099E24()
{
  return sub_1BFC489D4(&qword_1EA196188, type metadata accessor for Name);
}

uint64_t sub_1C0099E6C()
{
  return sub_1BFC489D4(&qword_1EA196190, type metadata accessor for Name);
}

uint64_t sub_1C0099EB4()
{
  return sub_1BFC489D4(&qword_1EA196198, type metadata accessor for OptionKey);
}

uint64_t sub_1C0099EFC()
{
  return sub_1BFC489D4(&qword_1EA1961A0, type metadata accessor for OptionKey);
}

uint64_t sub_1C0099F44()
{
  return sub_1BFC489D4(&qword_1EA1961A8, type metadata accessor for OptionKey);
}

uint64_t sub_1C0099F8C()
{
  return sub_1BFC489D4(&qword_1EA1961B0, type metadata accessor for OpenExternalURLOptionsKey);
}

void type metadata accessor for CALayerCornerCurve(uint64_t a1)
{
}

uint64_t sub_1C0099FFC()
{
  return sub_1BFC489D4(&qword_1EA196210, type metadata accessor for CALayerCornerCurve);
}

uint64_t sub_1C009A044()
{
  return sub_1BFC489D4(&qword_1EA196218, type metadata accessor for CALayerCornerCurve);
}

uint64_t sub_1C009A08C()
{
  return sub_1BFC489D4(&qword_1EA196220, type metadata accessor for CALayerCornerCurve);
}

void type metadata accessor for TextStyle(uint64_t a1)
{
}

void sub_1C009A0FC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1C009A148()
{
  return sub_1BFC489D4(&qword_1EA196240, type metadata accessor for TextStyle);
}

uint64_t sub_1C009A190()
{
  return sub_1BFC489D4(&qword_1EA196248, type metadata accessor for TextStyle);
}

uint64_t sub_1C009A1D8()
{
  return sub_1BFC489D4(&qword_1EA196250, type metadata accessor for TextStyle);
}

void *assignWithCopy for SportsConfigResourceParameter(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for SportsConfigResourceParameter(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FormatDerivedDataBundleImageReference()
{
  return &type metadata for FormatDerivedDataBundleImageReference;
}

BOOL sub_1C009A358(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t _s8NewsFeed16FormatFontMetricO9hashValueSivg_0()
{
  return sub_1C1520E0C();
}

uint64_t sub_1C009A3B8()
{
  return sub_1C1520DCC();
}

uint64_t sub_1C009A3E4()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 1701667182;
  }
}

uint64_t sub_1C009A41C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C009A76C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C009A444()
{
  return 0;
}

void sub_1C009A450(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1C009A45C(uint64_t a1)
{
  unint64_t v2 = sub_1C009AA68();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C009A498(uint64_t a1)
{
  unint64_t v2 = sub_1C009AA68();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1C009A4D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[0] = a4;
  v13[1] = a5;
  sub_1C009AABC(0, &qword_1EA1965E0, MEMORY[0x1E4FBBDE0]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  double v11 = (char *)v13 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C009AA68();
  sub_1C1520F0C();
  char v15 = 0;
  sub_1C15207CC();
  if (!v5)
  {
    char v14 = 1;
    sub_1C152074C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1C009A65C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1C009A84C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1C009A68C(void *a1)
{
  return sub_1C009A4D4(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1C009A6AC(uint64_t *a1, uint64_t *a2)
{
  return sub_1C009A6C8(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1C009A6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 == a5 && a2 == a6 || (char v12 = sub_1C1520A9C(), result = 0, (v12 & 1) != 0))
  {
    if (a4)
    {
      if (a8 && (a3 == a7 && a4 == a8 || (sub_1C1520A9C() & 1) != 0)) {
        return 1;
      }
    }
    else if (!a8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C009A76C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1C1520A9C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001C1602AD0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1C1520A9C();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1C009A84C(void *a1)
{
  sub_1C009AABC(0, &qword_1EA1965D0, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C009AA68();
  sub_1C1520EBC();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    char v12 = 0;
    uint64_t v8 = sub_1C152069C();
    char v11 = 1;
    swift_bridgeObjectRetain();
    sub_1C152060C();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

unint64_t sub_1C009AA68()
{
  unint64_t result = qword_1EA1965D8;
  if (!qword_1EA1965D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA1965D8);
  }
  return result;
}

void sub_1C009AABC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1C009AA68();
    unint64_t v7 = a3(a1, &type metadata for FormatDerivedDataBundleImageReference.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for FormatDerivedDataBundleImageReference.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C009ABECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatDerivedDataBundleImageReference.CodingKeys()
{
  return &type metadata for FormatDerivedDataBundleImageReference.CodingKeys;
}

unint64_t sub_1C009AC28()
{
  unint64_t result = qword_1EA1965E8;
  if (!qword_1EA1965E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA1965E8);
  }
  return result;
}

unint64_t sub_1C009AC80()
{
  unint64_t result = qword_1EA1965F0;
  if (!qword_1EA1965F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA1965F0);
  }
  return result;
}

unint64_t sub_1C009ACD8()
{
  unint64_t result = qword_1EA1965F8;
  if (!qword_1EA1965F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA1965F8);
  }
  return result;
}

unint64_t sub_1C009AD40(char a1)
{
  unint64_t result = 0x446873696C627570;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4479616C70736964;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0x637465467473616CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C009AE0C(unsigned __int8 *a1, char *a2)
{
  return sub_1C14855EC(*a1, *a2);
}

uint64_t sub_1C009AE18()
{
  return sub_1C015C4C0();
}

uint64_t sub_1C009AE20()
{
  return sub_1C0449650();
}

uint64_t sub_1C009AE28()
{
  return sub_1C044E57C();
}

unint64_t sub_1C009AE30@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C009AD40(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C009AE5C()
{
  return sub_1C151EAEC();
}

void sub_1C009AEAC(void *a1@<X8>)
{
  *a1 = &unk_1F1B63EF8;
}

BOOL static FormatHeadlineBinding.DateTime.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FormatHeadlineBinding.DateTime.hash(into:)()
{
  return sub_1C1520DCC();
}

uint64_t FormatHeadlineBinding.DateTime.hashValue.getter()
{
  return sub_1C1520E0C();
}

unint64_t sub_1C009AF48()
{
  unint64_t result = qword_1EA196600;
  if (!qword_1EA196600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196600);
  }
  return result;
}

unint64_t sub_1C009AF9C(uint64_t a1)
{
  unint64_t result = sub_1C009AFC4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C009AFC4()
{
  unint64_t result = qword_1EA196608;
  if (!qword_1EA196608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196608);
  }
  return result;
}

unint64_t sub_1C009B018(void *a1)
{
  a1[1] = sub_1BFCBB630();
  a1[2] = sub_1C009B050();
  unint64_t result = sub_1C009AF48();
  a1[3] = result;
  return result;
}

unint64_t sub_1C009B050()
{
  unint64_t result = qword_1EB866E30;
  if (!qword_1EB866E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB866E30);
  }
  return result;
}

uint64_t sub_1C009B0A4(void *a1)
{
  return FormatHeadlineBinding.DateTime.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for FormatHeadlineBinding.DateTime()
{
  return &type metadata for FormatHeadlineBinding.DateTime;
}

ValueMetadata *_s8DateTimeO10CodingTypeOMa()
{
  return &_s8DateTimeO10CodingTypeON;
}

unint64_t sub_1C009B108()
{
  unint64_t result = qword_1EA196610;
  if (!qword_1EA196610)
  {
    sub_1C009B160();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196610);
  }
  return result;
}

void sub_1C009B160()
{
  if (!qword_1EA196618)
  {
    unint64_t v0 = sub_1C151ED5C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA196618);
    }
  }
}

unint64_t sub_1C009B1BC()
{
  unint64_t result = qword_1EA196620;
  if (!qword_1EA196620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196620);
  }
  return result;
}

uint64_t sub_1C009B210@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v95 = a2;
  uint64_t v94 = a3;
  sub_1BFEE9D14(0, (unint64_t *)&qword_1EB871180, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  uint64_t v98 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v93 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v92 = (char *)&v89 - v7;
  MEMORY[0x1F4188790](v8);
  uint64_t v91 = (uint64_t)&v89 - v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v90 = (uint64_t)&v89 - v11;
  MEMORY[0x1F4188790](v12);
  char v14 = (char *)&v89 - v13;
  MEMORY[0x1F4188790](v15);
  CGRect v17 = (char *)&v89 - v16;
  MEMORY[0x1F4188790](v18);
  CGRect v20 = (char *)&v89 - v19;
  uint64_t v21 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1F4188790](v21 - 8);
  id v23 = (id *)((char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v24);
  id v26 = (char *)&v89 - v25;
  MEMORY[0x1F4188790](v27);
  id v29 = (id *)((char *)&v89 - v28);
  MEMORY[0x1F4188790](v30);
  id v32 = (id *)((char *)&v89 - v31);
  MEMORY[0x1F4188790](v33);
  id v35 = (id *)((char *)&v89 - v34);
  switch(*a1)
  {
    case 1:
      sub_1BFEE9D14(0, (unint64_t *)&unk_1EA1974B0, type metadata accessor for FormatInspectionItem, MEMORY[0x1E4FBBE00]);
      uint64_t v45 = *(void *)(type metadata accessor for FormatInspectionItem(0) - 8);
      unint64_t v46 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
      uint64_t v47 = swift_allocObject();
      *(_OWORD *)(v47 + 16) = xmmword_1C1529AE0;
      uint64_t v48 = (void *)(v47 + v46);
      sub_1BFF96680(v95, (uint64_t)v32);
      uint64_t v97 = v98;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v96);
      id v50 = objc_msgSend(v32[5], sel_displayDate);
      if (v50)
      {
        char v51 = v50;
        sub_1C15162BC();

        uint64_t v52 = sub_1C151631C();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v17, 0, 1, v52);
      }
      else
      {
        uint64_t v84 = sub_1C151631C();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v17, 1, 1, v84);
      }
      long long v66 = v94;
      sub_1BFCB311C((uint64_t)v17, (uint64_t)boxed_opaque_existential_0);
      sub_1C042F9B0(0x2079616C70736944, 0xEC00000065746144, (uint64_t)v96, v48);
      uint64_t v82 = (uint64_t)v32;
      goto LABEL_25;
    case 2:
      sub_1BFEE9D14(0, (unint64_t *)&unk_1EA1974B0, type metadata accessor for FormatInspectionItem, MEMORY[0x1E4FBBE00]);
      uint64_t v53 = *(void *)(type metadata accessor for FormatInspectionItem(0) - 8);
      unint64_t v54 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      uint64_t v47 = swift_allocObject();
      *(_OWORD *)(v47 + 16) = xmmword_1C1529AE0;
      long long v55 = (void *)(v47 + v54);
      sub_1BFF96680(v95, (uint64_t)v29);
      uint64_t v97 = v98;
      long long v56 = __swift_allocate_boxed_opaque_existential_0(v96);
      id v57 = objc_msgSend(v29[5], sel_lastModifiedDate);
      if (v57)
      {
        long long v58 = v57;
        sub_1C15162BC();

        uint64_t v59 = sub_1C151631C();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v14, 0, 1, v59);
      }
      else
      {
        uint64_t v79 = sub_1C151631C();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v14, 1, 1, v79);
      }
      long long v66 = v94;
      sub_1BFCB311C((uint64_t)v14, (uint64_t)v56);
      sub_1C042F9B0(0xD000000000000012, 0x80000001C1602B30, (uint64_t)v96, v55);
      uint64_t result = sub_1BFF2F7F4((uint64_t)v29);
      break;
    case 3:
      sub_1BFEE9D14(0, (unint64_t *)&unk_1EA1974B0, type metadata accessor for FormatInspectionItem, MEMORY[0x1E4FBBE00]);
      uint64_t v60 = *(void *)(type metadata accessor for FormatInspectionItem(0) - 8);
      unint64_t v61 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
      uint64_t v47 = swift_allocObject();
      *(_OWORD *)(v47 + 16) = xmmword_1C1529AE0;
      long long v62 = (void *)(v47 + v61);
      sub_1BFF96680(v95, (uint64_t)v26);
      uint64_t v97 = v98;
      long long v63 = __swift_allocate_boxed_opaque_existential_0(v96);
      long long v64 = (void *)*((void *)v26 + 5);
      if (objc_msgSend(v64, sel_respondsToSelector_, sel_globalExpirationTime))
      {
        id v65 = objc_msgSend(v64, sel_globalExpirationTime);
        long long v66 = v94;
        if (v65)
        {
          long long v67 = v65;
          uint64_t v68 = (uint64_t)v92;
          sub_1C15162BC();

          uint64_t v69 = sub_1C151631C();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v68, 0, 1, v69);
        }
        else
        {
          uint64_t v85 = sub_1C151631C();
          uint64_t v68 = (uint64_t)v92;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v92, 1, 1, v85);
        }
        uint64_t v86 = v91;
        sub_1BFCB311C(v68, v91);
        uint64_t v87 = v86;
        uint64_t v88 = v90;
        sub_1BFCB311C(v87, v90);
        sub_1BFCB311C(v88, (uint64_t)v63);
      }
      else
      {
        uint64_t v78 = sub_1C151631C();
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v63, 1, 1, v78);
        long long v66 = v94;
      }
      sub_1C042F9B0(0xD000000000000016, 0x80000001C1602B10, (uint64_t)v96, v62);
      uint64_t v82 = (uint64_t)v26;
      goto LABEL_25;
    case 4:
      sub_1BFEE9D14(0, (unint64_t *)&unk_1EA1974B0, type metadata accessor for FormatInspectionItem, MEMORY[0x1E4FBBE00]);
      uint64_t v70 = *(void *)(type metadata accessor for FormatInspectionItem(0) - 8);
      unint64_t v71 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
      uint64_t v47 = swift_allocObject();
      *(_OWORD *)(v47 + 16) = xmmword_1C1529AE0;
      uint64_t v72 = (void *)(v47 + v71);
      sub_1BFF96680(v95, (uint64_t)v23);
      uint64_t v97 = v98;
      unint64_t v73 = __swift_allocate_boxed_opaque_existential_0(v96);
      id v74 = objc_msgSend(v23[5], sel_lastFetchedDate);
      if (v74)
      {
        uint64_t v75 = v74;
        uint64_t v76 = (uint64_t)v93;
        sub_1C15162BC();

        uint64_t v77 = sub_1C151631C();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v76, 0, 1, v77);
      }
      else
      {
        uint64_t v81 = sub_1C151631C();
        uint64_t v76 = (uint64_t)v93;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v93, 1, 1, v81);
      }
      long long v66 = v94;
      sub_1BFCB311C(v76, (uint64_t)v73);
      sub_1C042F9B0(0xD000000000000011, 0x80000001C1602AF0, (uint64_t)v96, v72);
      uint64_t v82 = (uint64_t)v23;
LABEL_25:
      uint64_t result = sub_1BFF2F7F4(v82);
      break;
    default:
      sub_1BFEE9D14(0, (unint64_t *)&unk_1EA1974B0, type metadata accessor for FormatInspectionItem, MEMORY[0x1E4FBBE00]);
      uint64_t v36 = *(void *)(type metadata accessor for FormatInspectionItem(0) - 8);
      unint64_t v37 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_1C1529AE0;
      uint64_t v39 = v38;
      objc_super v40 = (void *)(v38 + v37);
      sub_1BFF96680(v95, (uint64_t)v35);
      uint64_t v97 = v98;
      uint64_t v41 = __swift_allocate_boxed_opaque_existential_0(v96);
      id v42 = objc_msgSend(v35[5], sel_publishDate);
      if (v42)
      {
        uint64_t v43 = v42;
        sub_1C15162BC();

        uint64_t v44 = sub_1C151631C();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v20, 0, 1, v44);
      }
      else
      {
        uint64_t v83 = sub_1C151631C();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v20, 1, 1, v83);
      }
      long long v66 = v94;
      sub_1BFCB311C((uint64_t)v20, (uint64_t)v41);
      sub_1C042F9B0(0x206873696C627550, 0xEC00000065746144, (uint64_t)v96, v40);
      uint64_t result = sub_1BFF2F7F4((uint64_t)v35);
      uint64_t v47 = v39;
      break;
  }
  *long long v66 = v47;
  return result;
}

double sub_1C009BDC0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&v9[0] = MEMORY[0x1E4FBC860];
  char v8 = byte_1F1B64468;
  sub_1C009B210(&v8, a1, &v7);
  sub_1C1047634(v7);
  char v8 = byte_1F1B64469;
  sub_1C009B210(&v8, a1, &v7);
  sub_1C1047634(v7);
  char v8 = byte_1F1B6446A;
  sub_1C009B210(&v8, a1, &v7);
  sub_1C1047634(v7);
  char v8 = byte_1F1B6446B;
  sub_1C009B210(&v8, a1, &v7);
  sub_1C1047634(v7);
  char v8 = byte_1F1B6446C;
  sub_1C009B210(&v8, a1, &v7);
  sub_1C1047634(v7);
  uint64_t v4 = sub_1C0233D40(*(uint64_t *)&v9[0]);
  swift_bridgeObjectRelease();
  sub_1C09BCFA4(0x6D69542065746144, 0xE900000000000065, 0, 0, v4, v9);
  swift_bridgeObjectRelease();
  double result = *(double *)v9;
  long long v6 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(void *)(a2 + 32) = v10;
  return result;
}

uint64_t sub_1C009BF4C()
{
  return sub_1C1520E0C();
}

uint64_t sub_1C009BF90()
{
  return sub_1C1520DCC();
}

uint64_t sub_1C009BFB8()
{
  return sub_1C1520E0C();
}

uint64_t LayeredMediaParser.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void *LayeredMediaParser.__allocating_init(identifier:json:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

void *LayeredMediaParser.init(identifier:json:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
  return v4;
}

uint64_t LayeredMediaParser.parse()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1C151E68C();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  long long v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C151E67C();
  uint64_t v7 = sub_1C151E63C();
  unint64_t v9 = v8;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (v9 >> 60 == 15)
  {
    sub_1C009C38C();
    swift_allocError();
    return swift_willThrow();
  }
  else
  {
    sub_1C1517DCC();
    swift_allocObject();
    sub_1C1517DBC();
    sub_1C009C3E0();
    sub_1C1517D9C();
    if (v1)
    {
      swift_release();
      if (qword_1EB85E5D8 != -1) {
        swift_once();
      }
      id v11 = (id)qword_1EB93C270;
      sub_1C151F36C();
      sub_1BFFDEB20();
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_1C1529AE0;
      *(void *)&long long v22 = 0;
      *((void *)&v22 + 1) = 0xE000000000000000;
      v21[1] = v1;
      sub_1BFC845BC(0, (unint64_t *)&qword_1EB87A930);
      sub_1C152036C();
      long long v13 = v22;
      *(void *)(v12 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v12 + 64) = sub_1BFE9C558();
      *(_OWORD *)(v12 + 32) = v13;
      sub_1C15197BC();

      swift_bridgeObjectRelease();
      swift_willThrow();
      return sub_1BFE95878(v7, v9);
    }
    else
    {
      sub_1BFE95878(v7, v9);
      uint64_t result = swift_release();
      uint64_t v14 = v26;
      char v15 = v27;
      uint64_t v16 = v28;
      long long v17 = v23;
      long long v18 = v24;
      long long v19 = v25;
      long long v20 = v29;
      *(_OWORD *)a1 = v22;
      *(_OWORD *)(a1 + 16) = v17;
      *(_OWORD *)(a1 + 32) = v18;
      *(_OWORD *)(a1 + 48) = v19;
      *(void *)(a1 + 64) = v14;
      *(unsigned char *)(a1 + 72) = v15;
      *(void *)(a1 + 80) = v16;
      *(_OWORD *)(a1 + 88) = v20;
    }
  }
  return result;
}

unint64_t sub_1C009C38C()
{
  unint64_t result = qword_1EA196628;
  if (!qword_1EA196628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196628);
  }
  return result;
}

unint64_t sub_1C009C3E0()
{
  unint64_t result = qword_1EB85D0E0;
  if (!qword_1EB85D0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB85D0E0);
  }
  return result;
}

uint64_t sub_1C009C434()
{
  return sub_1C152036C();
}

uint64_t sub_1C009C458()
{
  return sub_1C152036C();
}

uint64_t LayeredMediaParser.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LayeredMediaParser.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1C009C518@<X0>(uint64_t a1@<X8>)
{
  return LayeredMediaParser.parse()(a1);
}

uint64_t dispatch thunk of LayeredMediaParserType.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LayeredMediaParserType.parse()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata accessor for LayeredMediaParser()
{
  return self;
}

uint64_t method lookup function for LayeredMediaParser(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LayeredMediaParser);
}

uint64_t dispatch thunk of LayeredMediaParser.__allocating_init(identifier:json:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

unsigned char *storeEnumTagSinglePayload for LayeredMediaParser.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C009C664);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LayeredMediaParser.Errors()
{
  return &type metadata for LayeredMediaParser.Errors;
}

unint64_t sub_1C009C6A0()
{
  unint64_t result = qword_1EA196630;
  if (!qword_1EA196630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196630);
  }
  return result;
}

uint64_t sub_1C009C6F4(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_1C151E6BC();
  uint64_t v6 = v4;
  if (v5 == 29804 && v4 == 0xE200000000000000 || (sub_1C1520A9C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v7) = 0;
LABEL_5:
    unsigned __int8 v8 = 1;
    return v7 | ((unint64_t)v8 << 32);
  }
  if (v5 == 29799 && v6 == 0xE200000000000000 || (sub_1C1520A9C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v7) = 1;
    goto LABEL_5;
  }
  if (v5 == 1953461617 && v6 == 0xE400000000000000 || (sub_1C1520A9C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned __int8 v8 = 1;
    LODWORD(v7) = 2;
    return v7 | ((unint64_t)v8 << 32);
  }
  if (v5 == 7368033 && v6 == 0xE300000000000000 || (sub_1C1520A9C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned __int8 v8 = 1;
    LODWORD(v7) = 3;
    return v7 | ((unint64_t)v8 << 32);
  }
  if (v5 == 1886610030 && v6 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
    unsigned __int8 v8 = 1;
    LODWORD(v7) = 4;
    return v7 | ((unint64_t)v8 << 32);
  }
  char v10 = sub_1C1520A9C();
  swift_bridgeObjectRelease();
  if (v10) {
    goto LABEL_23;
  }
  if ((sub_1C151E89C() & 1) == 0) {
    goto LABEL_86;
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_1C029748C(1uLL, a1, a2);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = MEMORY[0x1C18C6220](v11, v13, v15, v17);
  unint64_t v20 = v19;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v21 = HIBYTE(v20) & 0xF;
  uint64_t v22 = v18 & 0xFFFFFFFFFFFFLL;
  if ((v20 & 0x2000000000000000) != 0) {
    uint64_t v23 = HIBYTE(v20) & 0xF;
  }
  else {
    uint64_t v23 = v18 & 0xFFFFFFFFFFFFLL;
  }
  if (!v23)
  {
    swift_bridgeObjectRelease();
    goto LABEL_86;
  }
  if ((v20 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = sub_1C02968D0(v18, v20, 10);
    swift_bridgeObjectRelease();
    if ((v7 & 0x100000000) == 0)
    {
LABEL_62:
      swift_bridgeObjectRelease();
      if (WORD1(v7) <= 0x10u && (v7 & 0xFFFFF800) != 0xD800)
      {
        unsigned __int8 v8 = 0;
        return v7 | ((unint64_t)v8 << 32);
      }
      sub_1C009CCCC();
      swift_allocError();
      *(void *)(v34 + 8) = 0;
      *(void *)(v34 + 16) = 0;
      *(void *)uint64_t v34 = v7;
      char v35 = 8;
      goto LABEL_87;
    }
LABEL_86:
    sub_1C009CCCC();
    swift_allocError();
    *(void *)uint64_t v34 = a1;
    *(void *)(v34 + 8) = a2;
    *(void *)(v34 + 16) = 0;
    char v35 = 7;
LABEL_87:
    *(unsigned char *)(v34 + 24) = v35;
    return swift_willThrow();
  }
  if ((v20 & 0x2000000000000000) == 0)
  {
    if ((v18 & 0x1000000000000000) != 0) {
      long long v24 = (unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      long long v24 = (unsigned __int8 *)sub_1C152020C();
    }
    long long v25 = sub_1C02968A0(v24, v22, 10);
    char v47 = BYTE4(v25) & 1;
    char v26 = BYTE4(v25) & 1;
    LODWORD(v7) = v25;
LABEL_61:
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0) {
      goto LABEL_62;
    }
    goto LABEL_86;
  }
  v46[0] = v18;
  v46[1] = v20 & 0xFFFFFFFFFFFFFFLL;
  if (v18 == 43)
  {
    if (v21)
    {
      if (v21 != 1)
      {
        LODWORD(v7) = (BYTE1(v18) - 48);
        if (v7 <= 9)
        {
          if (v21 == 2) {
            goto LABEL_60;
          }
          if ((BYTE2(v18) - 48) <= 9u)
          {
            LODWORD(v7) = 10 * v7 + (BYTE2(v18) - 48);
            uint64_t v30 = v21 - 3;
            if (v30)
            {
              uint64_t v31 = (unsigned __int8 *)v46 + 3;
              while (1)
              {
                unsigned int v32 = *v31 - 48;
                if (v32 > 9) {
                  goto LABEL_57;
                }
                uint64_t v33 = 10 * v7;
                if ((v33 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_57;
                }
                LODWORD(v7) = v33 + v32;
                if (__CFADD__(v33, v32)) {
                  goto LABEL_57;
                }
                char v26 = 0;
                ++v31;
                if (!--v30) {
                  goto LABEL_61;
                }
              }
            }
            goto LABEL_60;
          }
        }
      }
      goto LABEL_57;
    }
  }
  else
  {
    if (v18 != 45)
    {
      if (v21)
      {
        LODWORD(v7) = (v18 - 48);
        if (v7 <= 9)
        {
          if (v21 == 1) {
            goto LABEL_60;
          }
          if ((BYTE1(v18) - 48) <= 9u)
          {
            LODWORD(v7) = 10 * v7 + (BYTE1(v18) - 48);
            uint64_t v36 = v21 - 2;
            if (v36)
            {
              unint64_t v37 = (unsigned __int8 *)v46 + 2;
              while (1)
              {
                unsigned int v38 = *v37 - 48;
                if (v38 > 9) {
                  goto LABEL_57;
                }
                uint64_t v39 = 10 * v7;
                if ((v39 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_57;
                }
                LODWORD(v7) = v39 + v38;
                if (__CFADD__(v39, v38)) {
                  goto LABEL_57;
                }
                char v26 = 0;
                ++v37;
                if (!--v36) {
                  goto LABEL_61;
                }
              }
            }
            goto LABEL_60;
          }
        }
      }
LABEL_57:
      LODWORD(v7) = 0;
LABEL_58:
      char v26 = 1;
      goto LABEL_61;
    }
    if (v21)
    {
      if (v21 != 1)
      {
        unsigned __int8 v27 = BYTE1(v18) - 48;
        if ((BYTE1(v18) - 48) <= 9u)
        {
          LODWORD(v7) = 0;
          BOOL v28 = v27 == 0;
          unsigned int v29 = -v27;
          if (!v28) {
            goto LABEL_58;
          }
          if (v21 == 2)
          {
            char v26 = 0;
            LODWORD(v7) = v29;
            goto LABEL_61;
          }
          unsigned __int8 v40 = BYTE2(v18) - 48;
          if ((BYTE2(v18) - 48) <= 9u)
          {
            uint64_t v41 = 10 * v29;
            if ((v41 & 0xFFFFFFFF00000000) == 0)
            {
              LODWORD(v7) = v41 - v40;
              if (v41 >= v40)
              {
                uint64_t v42 = v21 - 3;
                if (v42)
                {
                  uint64_t v43 = (unsigned __int8 *)v46 + 3;
                  while (1)
                  {
                    unsigned int v44 = *v43 - 48;
                    if (v44 > 9) {
                      goto LABEL_57;
                    }
                    uint64_t v45 = 10 * v7;
                    if ((v45 & 0xFFFFFFFF00000000) != 0) {
                      goto LABEL_57;
                    }
                    LODWORD(v7) = v45 - v44;
                    if (v45 < v44) {
                      goto LABEL_57;
                    }
                    char v26 = 0;
                    ++v43;
                    if (!--v42) {
                      goto LABEL_61;
                    }
                  }
                }
LABEL_60:
                char v26 = 0;
                goto LABEL_61;
              }
            }
          }
        }
      }
      goto LABEL_57;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1C009CCCC()
{
  unint64_t result = qword_1EA196638;
  if (!qword_1EA196638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196638);
  }
  return result;
}

uint64_t sub_1C009CD20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FormatFile();
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FormatPackage();
  MEMORY[0x1F4188790](v6);
  unsigned __int8 v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1C151928C();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C009D844(v1 + OBJC_IVAR____TtC8NewsFeed22DebugFormatUploadEntry_file, (uint64_t)v5);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    sub_1C009D8A8((uint64_t)v5, (uint64_t)v8);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, &v8[*(int *)(v6 + 96)], v9);
    sub_1C009D90C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for FormatPackage);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v12, v9);
  }
  else
  {
    sub_1C009D90C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for FormatFile);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a1, *(void *)(v1 + 16) + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory_version, v9);
  }
}

id sub_1C009CF50()
{
  uint64_t v37 = sub_1C151928C();
  uint64_t v36 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  BOOL v2 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = *(void *)(v0 + 16) + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__name;
  swift_beginAccess();
  if (!*(void *)(v3 + 8)) {
    swift_bridgeObjectRetain();
  }
  sub_1C0099920();
  uint64_t v35 = v4;
  uint64_t inited = swift_initStackObject();
  uint64_t v6 = (void **)MEMORY[0x1E4FB06F8];
  *(_OWORD *)(inited + 16) = xmmword_1C1529AE0;
  uint64_t v7 = *v6;
  *(void *)(inited + 32) = *v6;
  unsigned __int8 v8 = self;
  id v32 = v8;
  swift_bridgeObjectRetain();
  id v9 = v7;
  id v10 = objc_msgSend(v8, sel_systemFontOfSize_, 15.0);
  uint64_t v11 = sub_1BFC39268(0, (unint64_t *)&qword_1EB87A2B0);
  *(void *)(inited + 64) = v11;
  *(void *)(inited + 40) = v10;
  sub_1BFF991DC(inited);
  id v12 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
  uint64_t v13 = (void *)sub_1C151E5EC();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  uint64_t v34 = v14;
  uint64_t v33 = sub_1C009D7FC((unint64_t *)&qword_1EB87A1F0, type metadata accessor for Key);
  uint64_t v15 = (void *)sub_1C151E32C();
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v12, sel_initWithString_attributes_, v13, v15);

  sub_1C009CD20((uint64_t)v2);
  sub_1C009D7FC((unint64_t *)&unk_1EB8714F0, MEMORY[0x1E4FAB0A8]);
  uint64_t v17 = v37;
  uint64_t v38 = sub_1C152088C();
  uint64_t v39 = v18;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v2, v17);
  sub_1C151E80C();
  uint64_t v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1C1527210;
  *(void *)(v19 + 32) = v9;
  double v20 = *MEMORY[0x1E4FB09E0];
  id v21 = v9;
  *(void *)(v19 + 40) = objc_msgSend(v32, sel_systemFontOfSize_weight_, 10.0, v20);
  uint64_t v22 = (void *)*MEMORY[0x1E4FB0700];
  *(void *)(v19 + 64) = v11;
  *(void *)(v19 + 72) = v22;
  uint64_t v23 = self;
  id v24 = v22;
  id v25 = objc_msgSend(v23, sel_systemBlueColor);
  *(void *)(v19 + 104) = sub_1BFC39268(0, (unint64_t *)&qword_1EB87A2F0);
  *(void *)(v19 + 80) = v25;
  sub_1BFF991DC(v19);
  id v26 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
  unsigned __int8 v27 = (void *)sub_1C151E5EC();
  swift_bridgeObjectRelease();
  BOOL v28 = (void *)sub_1C151E32C();
  swift_bridgeObjectRelease();
  id v29 = objc_msgSend(v26, sel_initWithString_attributes_, v27, v28);

  objc_msgSend(v29, sel_appendAttributedString_, v16);
  return v29;
}

id sub_1C009D3B8()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC8NewsFeed22DebugFormatUploadEntry_diff))
  {
    swift_retain();
    id v1 = sub_1C00BF7B8();
    swift_release();
    return v1;
  }
  else
  {
    swift_beginAccess();
    sub_1C0099920();
    uint64_t inited = swift_initStackObject();
    uint64_t v4 = (void **)MEMORY[0x1E4FB06F8];
    *(_OWORD *)(inited + 16) = xmmword_1C1527210;
    uint64_t v5 = *v4;
    *(void *)(inited + 32) = *v4;
    uint64_t v6 = self;
    swift_bridgeObjectRetain();
    id v7 = v5;
    id v8 = objc_msgSend(v6, sel_systemFontOfSize_, 13.0);
    uint64_t v9 = sub_1BFC39268(0, (unint64_t *)&qword_1EB87A2B0);
    *(void *)(inited + 40) = v8;
    id v10 = (void *)*MEMORY[0x1E4FB0700];
    *(void *)(inited + 64) = v9;
    *(void *)(inited + 72) = v10;
    uint64_t v11 = self;
    id v12 = v10;
    id v13 = objc_msgSend(v11, sel_systemGray2Color);
    *(void *)(inited + 104) = sub_1BFC39268(0, (unint64_t *)&qword_1EB87A2F0);
    *(void *)(inited + 80) = v13;
    sub_1BFF991DC(inited);
    id v14 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
    uint64_t v15 = (void *)sub_1C151E5EC();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_1C009D7FC((unint64_t *)&qword_1EB87A1F0, type metadata accessor for Key);
    id v16 = (void *)sub_1C151E32C();
    swift_bridgeObjectRelease();
    id v17 = objc_msgSend(v14, sel_initWithString_attributes_, v15, v16);

    return v17;
  }
}

uint64_t sub_1C009D614()
{
  swift_release();
  sub_1C009D90C(v0 + OBJC_IVAR____TtC8NewsFeed22DebugFormatUploadEntry_file, (uint64_t (*)(void))type metadata accessor for FormatFile);
  sub_1BFDCA350(*(void *)(v0 + OBJC_IVAR____TtC8NewsFeed22DebugFormatUploadEntry_target), *(void *)(v0 + OBJC_IVAR____TtC8NewsFeed22DebugFormatUploadEntry_target + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC8NewsFeed22DebugFormatUploadEntry_target + 16));
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1C009D6BC()
{
  return type metadata accessor for DebugFormatUploadEntry();
}

uint64_t type metadata accessor for DebugFormatUploadEntry()
{
  uint64_t result = qword_1EA196640;
  if (!qword_1EA196640) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C009D710()
{
  uint64_t result = type metadata accessor for FormatFile();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C009D7C4()
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)v0 + 16) + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1C009D7FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C009D844(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FormatFile();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C009D8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FormatPackage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C009D90C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void static FormatCodingVisibilityUnsetStrategy.defaultValue.getter(void *a1@<X8>)
{
  *a1 = 0x8000000000000000;
}

BOOL static FormatCodingVisibilityUnsetStrategy.shouldEncode(wrappedValue:)(void *a1)
{
  return *a1 != 0x8000000000000000;
}

unint64_t sub_1C009D98C(uint64_t a1)
{
  unint64_t result = sub_1C009D9B4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C009D9B4()
{
  unint64_t result = qword_1EA196650;
  if (!qword_1EA196650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196650);
  }
  return result;
}

unint64_t sub_1C009DA10()
{
  unint64_t result = qword_1EB8600D8;
  if (!qword_1EB8600D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8600D8);
  }
  return result;
}

void sub_1C009DA64(void *a1@<X8>)
{
  *a1 = 0x8000000000000000;
}

BOOL sub_1C009DA70(void *a1)
{
  return *a1 != 0x8000000000000000;
}

ValueMetadata *type metadata accessor for FormatCodingVisibilityUnsetStrategy()
{
  return &type metadata for FormatCodingVisibilityUnsetStrategy;
}

uint64_t LayeredMediaViewRenderer.render(view:renderedViewModel:forceAsync:)(void *a1, uint64_t a2, char a3)
{
  if (a3)
  {
    if (qword_1EB85EF70 != -1) {
      swift_once();
    }
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    *(void *)(v5 + 24) = a2;
    id v6 = a1;
    swift_retain();
    uint64_t v7 = sub_1C151931C();
    swift_release();
    return v7;
  }
  else
  {
    sub_1BFD43E2C(0, &qword_1EB85DF70, MEMORY[0x1E4FBB320]);
    sub_1C151932C();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a1;
    *(void *)(v9 + 24) = a2;
    id v10 = a1;
    swift_retain();
    uint64_t v11 = (void *)sub_1C1518E7C();
    uint64_t v12 = sub_1C1518FEC();
    swift_release();
    swift_release();

    return v12;
  }
}

uint64_t sub_1C009DC58(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1BFD43E2C(0, &qword_1EB85DF70, MEMORY[0x1E4FBB320]);
  sub_1C151932C();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  id v6 = a2;
  swift_retain();
  uint64_t v7 = (void *)sub_1C1518E7C();
  uint64_t v8 = sub_1C1518FEC();
  swift_release();
  swift_release();

  return v8;
}

uint64_t LayeredMediaViewRenderer.render(view:options:forceAsync:)(void *a1, uint64_t a2, char a3)
{
  if (a3)
  {
    if (qword_1EB85EF70 != -1) {
      swift_once();
    }
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v5 + 24) = *(_OWORD *)a2;
    *(_OWORD *)(v5 + 40) = v6;
    *(void *)(v5 + 56) = *(void *)(a2 + 32);
    id v7 = a1;
    uint64_t v8 = sub_1C151931C();
    swift_release();
    return v8;
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v10;
    uint64_t v12 = *(void *)(a2 + 32);
    return sub_1C009DEDC((char *)a1, v11);
  }
}

uint64_t sub_1C009DE8C(uint64_t a1, char *a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a3 + 16);
  v5[0] = *(_OWORD *)a3;
  v5[1] = v3;
  uint64_t v6 = *(void *)(a3 + 32);
  return sub_1C009DEDC(a2, v5);
}

uint64_t sub_1C009DEDC(char *a1, long long *a2)
{
  long long v4 = a2[1];
  long long v17 = *a2;
  long long v18 = v4;
  uint64_t v19 = *((void *)a2 + 4);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)&a1[qword_1EB86F060];
  swift_retain();
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_1C136E668(v7, v5, (uint64_t)&v17);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for LayeredMediaRenderedViewModel();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v6;
  long long v9 = v18;
  *(_OWORD *)(v8 + 24) = v17;
  *(_OWORD *)(v8 + 40) = v9;
  *(void *)(v8 + 56) = v19;
  sub_1BFD43E2C(0, (unint64_t *)&qword_1EB8714D0, MEMORY[0x1E4FAB088]);
  swift_retain();
  long long v10 = (void *)sub_1C1518E7C();
  sub_1C0064DB8();
  sub_1C0064D60();
  uint64_t v11 = sub_1C1518FAC();
  swift_bridgeObjectRelease();

  *(void *)(v8 + 64) = v11;
  sub_1BFD43E2C(0, &qword_1EB85DF70, MEMORY[0x1E4FBB320]);
  sub_1C151932C();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = v8;
  id v13 = a1;
  swift_retain();
  id v14 = (void *)sub_1C1518E7C();
  uint64_t v15 = sub_1C1518FEC();
  swift_release();
  swift_release();
  swift_release();

  return v15;
}

uint64_t sub_1C009E0DC()
{
  return swift_retain();
}

uint64_t sub_1C009E0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C1248838(*(void *)(a3 + 16));
  id v3 = objc_msgSend(self, sel_isMainThread);
  if ((v3 & 1) == 0) {
    id v3 = objc_msgSend(self, sel_flush);
  }
  MEMORY[0x1F4188790](v3);
  sub_1BFD43E2C(0, (unint64_t *)&qword_1EB8714D0, MEMORY[0x1E4FAB088]);
  swift_allocObject();
  return sub_1C151911C();
}

uint64_t sub_1C009E1E4(uint64_t a1)
{
  return sub_1C009E0F8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1C009E200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  uint64_t v11 = (void *)swift_allocObject();
  long long v11[2] = a5;
  v11[3] = a6;
  v11[4] = sub_1C005A48C;
  v11[5] = v10;
  swift_retain();
  id v12 = a5;
  swift_retain();
  sub_1C151950C();
  return swift_release();
}

uint64_t sub_1C009E2CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (*(void *)(a1 + qword_1EB86F060) == *(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + qword_1EB870530);
    a1 = swift_beginAccess();
    char v5 = *(unsigned char *)(v4 + 16);
    *(unsigned char *)(v4 + 16) = 1;
    if ((v5 & 1) == 0) {
      LayeredMediaViewDisplayStateCoordinator.updateDisplay()();
    }
  }
  return a3(a1);
}

uint64_t LayeredMediaViewRenderer.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t LayeredMediaViewRenderer.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1C009E3CC(uint64_t a1)
{
  return sub_1C009DC58(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1C009E3E8()
{
  return swift_deallocObject();
}

uint64_t sub_1C009E420()
{
  uint64_t v1 = *(char **)(v0 + 16);
  long long v2 = *(_OWORD *)(v0 + 40);
  v4[0] = *(_OWORD *)(v0 + 24);
  v4[1] = v2;
  uint64_t v5 = *(void *)(v0 + 56);
  return sub_1C009DEDC(v1, v4);
}

uint64_t method lookup function for LayeredMediaViewRenderer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LayeredMediaViewRenderer);
}

uint64_t sub_1C009E494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C009E200(a1, a2, a3, a4, *(void **)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_1C009E49C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C009E4D4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C009E51C()
{
  return sub_1C009E2CC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

uint64_t sub_1C009E528(uint64_t a1)
{
  return sub_1C009E1E4(a1);
}

uint64_t sub_1C009E540()
{
  return sub_1C009E0DC();
}

NewsFeed::AlertEnableNotifications __swiftcall AlertEnableNotifications.init(name:)(NewsFeed::AlertEnableNotifications name)
{
  *uint64_t v1 = name;
  return name;
}

uint64_t AlertEnableNotifications.title.getter()
{
  type metadata accessor for Localized();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v2 = sub_1C1515B8C();

  return v2;
}

uint64_t AlertEnableNotifications.message.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  type metadata accessor for Localized();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v4 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_1C1515B8C();

  sub_1BFFDEB20();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C1529AE0;
  *(void *)(v5 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v5 + 64) = sub_1BFE9C558();
  *(void *)(v5 + 32) = v2;
  *(void *)(v5 + 40) = v1;
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1C151E66C();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t AlertEnableNotifications.preferredActionButton.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4FAC7A0];
  uint64_t v3 = sub_1C151B49C();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

uint64_t AlertEnableNotifications.acceptButton.getter()
{
  type metadata accessor for Localized();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v2 = sub_1C1515B8C();

  return v2;
}

uint64_t AlertEnableNotifications.rejectButton.getter()
{
  type metadata accessor for Localized();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v2 = sub_1C1515B8C();

  return v2;
}

uint64_t sub_1C009E95C()
{
  return AlertEnableNotifications.title.getter();
}

uint64_t sub_1C009E990@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4FAC7A0];
  uint64_t v3 = sub_1C151B49C();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

uint64_t sub_1C009EA08()
{
  type metadata accessor for Localized();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v2 = sub_1C1515B8C();

  return v2;
}

uint64_t sub_1C009EACC()
{
  type metadata accessor for Localized();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v2 = sub_1C1515B8C();

  return v2;
}

void *assignWithCopy for FormatSelector(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for FormatSelector(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AlertEnableNotifications()
{
  return &type metadata for AlertEnableNotifications;
}

void *FeedRefreshBounceAnimation.__allocating_init(viewProvider:refreshStateMachine:barCompressionManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

void *FeedRefreshBounceAnimation.init(viewProvider:refreshStateMachine:barCompressionManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

uint64_t sub_1C009EC84(uint64_t a1, uint64_t a2, void (*a3)(uint64_t (*)(uint64_t (*a1)(void)), double *))
{
  id v4 = v3;
  uint64_t v5 = *v3;
  uint64_t v6 = v3[2];
  uint64_t v7 = *(void *)(v5 + 80);
  uint64_t v8 = *(void *)(v5 + 88);
  long long v9 = (void *)sub_1C151BD1C();
  objc_msgSend(v9, sel_setUserInteractionEnabled_, 0);

  uint64_t v10 = (void *)sub_1C151BD1C();
  objc_msgSend(v10, sel_frame);
  double v12 = v11;
  double v14 = v13;

  uint64_t v15 = self;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1C009FEB0;
  *(void *)(v16 + 24) = v4;
  aBlock[4] = sub_1BFC81768;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BFC81740;
  aBlock[3] = &block_descriptor_2;
  long long v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend((id)v15, sel_performWithoutAnimation_, v17);
  _Block_release(v17);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v15)
  {
    __break(1u);
  }
  else
  {
    uint64_t v19 = (void *)sub_1C151BD1C();
    id v20 = objc_msgSend(v19, sel_snapshotViewAfterScreenUpdates_, 0);

    if (v20)
    {
      objc_msgSend(v20, sel_setFrame_, 0.0, 0.0, v12, v14);
      id v21 = (void *)sub_1C151BD1C();
      id v22 = objc_msgSend(v21, sel_superview);

      objc_msgSend(v22, sel_addSubview_, v20);
      uint64_t v23 = swift_allocObject();
      swift_weakInit();
      id v24 = (double *)swift_allocObject();
      *((void *)v24 + 2) = v7;
      *((void *)v24 + 3) = v8;
      *((void *)v24 + 4) = v23;
      *((void *)v24 + 5) = v6;
      v24[7] = 0.0;
      v24[8] = 0.0;
      *((void *)v24 + 6) = v20;
      v24[9] = v12;
      v24[10] = v14;
      swift_retain();
      swift_unknownObjectRetain();
      id v25 = v20;
      a3((uint64_t (*)(uint64_t (*)(void)))sub_1C009FF48, v24);
      swift_release();

      swift_release();
    }
    else
    {
      id v26 = (void *)sub_1C151BD1C();
      objc_msgSend(v26, sel_setUserInteractionEnabled_, 1);

      a3(sub_1BFC81798, 0);
    }
    return swift_release();
  }
  return result;
}

uint64_t FeedRefreshBounceAnimation.animationCancelled(context:animation:)()
{
  return sub_1C15181EC();
}

uint64_t sub_1C009F048()
{
  return sub_1C15181EC();
}

void sub_1C009F098(void (*a1)(void), uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, uint64_t a8, void *a9)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v17 = Strong;
    long long v18 = (void *)sub_1C151BD1C();
    objc_msgSend(v18, sel_adjustedContentInset);
    double v20 = v19;

    id v21 = (void *)sub_1C151BD1C();
    objc_msgSend(v21, sel_setContentOffset_animated_, 0, 0.0, -v20);

    id v68 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    id v22 = (void *)sub_1C151BD1C();
    id v23 = objc_msgSend(v22, sel_superview);

    if (!v23
      || (id v24 = objc_msgSend(v23, sel_superview), v23, !v24)
      || (id v25 = objc_msgSend(v24, sel_backgroundColor), v24, !v25))
    {
      id v25 = objc_msgSend(self, sel_systemBackgroundColor);
    }
    objc_msgSend(v68, sel_setBackgroundColor_, v25);

    v70.origin.x = a3;
    v70.origin.y = a4;
    v70.size.width = a5;
    v70.size.height = a6;
    double Width = CGRectGetWidth(v70);
    unsigned __int8 v27 = (void *)sub_1C151BD1C();
    objc_msgSend(v27, sel_adjustedContentInset);
    double v29 = v28;

    objc_msgSend(v68, sel_setFrame_, 0.0, 0.0, Width, v29);
    uint64_t v30 = *(void **)(v17 + 32);
    long long v66 = a1;
    uint64_t v67 = a2;
    if (v30)
    {
      id v31 = v30;
      sub_1C151B3BC();

      id v32 = *(void **)(v17 + 32);
      if (v32)
      {
        id v33 = v32;
        sub_1C151B3CC();
      }
    }
    uint64_t v35 = (void *)sub_1C151BD1C();
    id v36 = sub_1C009F6DC(300.0);

    objc_msgSend(v36, sel_bounds);
    CGFloat Height = CGRectGetHeight(v71);
    CGAffineTransformMakeTranslation(&aBlock, 0.0, -Height);
    objc_msgSend(v36, sel_setTransform_, &aBlock);
    uint64_t v38 = (void *)sub_1C151BD1C();
    id v39 = objc_msgSend(v38, sel_superview);

    objc_msgSend(v39, sel_insertSubview_belowSubview_, v68, a9);
    unsigned __int8 v40 = (void *)sub_1C151BD1C();
    id v41 = objc_msgSend(v40, sel_superview);

    objc_msgSend(v41, sel_insertSubview_belowSubview_, v36, v68);
    uint64_t v42 = *(void **)(v17 + 32);
    if (v42)
    {
      id v43 = v42;
      sub_1C151B3CC();
    }
    id v44 = objc_allocWithZone(MEMORY[0x1E4F39C10]);
    LODWORD(v45) = 1051260355;
    LODWORD(v46) = 1045220557;
    LODWORD(v47) = 1.0;
    id v48 = objc_msgSend(v44, sel_initWithControlPoints__::, v45, 0.0, v46, v47);
    id v49 = objc_allocWithZone(MEMORY[0x1E4F39C10]);
    LODWORD(v50) = 1043878380;
    LODWORD(v51) = 1056293519;
    LODWORD(v52) = 1064178811;
    id v53 = objc_msgSend(v49, sel_initWithControlPoints__::, v50, 0.0, v51, v52);
    id v65 = self;
    unint64_t v54 = (void *)swift_allocObject();
    v54[2] = a9;
    v54[3] = v36;
    v54[4] = 0x4039000000000000;
    *(void *)&aBlock.tx = sub_1C009FFA0;
    *(void *)&aBlock.ty = v54;
    *(void *)&aBlock.a = MEMORY[0x1E4F143A8];
    *(void *)&aBlock.b = 1107296256;
    *(void *)&aBlock.c = sub_1BFC9FC68;
    *(void *)&aBlock.d = &block_descriptor_12;
    long long v64 = _Block_copy(&aBlock);
    id v55 = v48;
    id v56 = a9;
    id v57 = v36;
    swift_release();
    long long v58 = (void *)swift_allocObject();
    v58[2] = v53;
    v58[3] = v57;
    v58[4] = v17;
    v58[5] = v56;
    v58[6] = v68;
    v58[7] = v66;
    v58[8] = v67;
    *(void *)&aBlock.tx = sub_1C00A000C;
    *(void *)&aBlock.ty = v58;
    *(void *)&aBlock.a = MEMORY[0x1E4F143A8];
    *(void *)&aBlock.b = 1107296256;
    *(void *)&aBlock.c = sub_1C0DF5960;
    *(void *)&aBlock.d = &block_descriptor_18;
    uint64_t v59 = _Block_copy(&aBlock);
    id v60 = v56;
    id v61 = v57;
    id v62 = v53;
    swift_retain();
    id v63 = v68;
    swift_retain();
    swift_release();
    objc_msgSend(v65, sel_nu_animateWithDuration_delay_timingFunction_options_animations_completion_, v55, 4, v64, v59, 0.6, 0.0);
    _Block_release(v59);
    _Block_release(v64);
    swift_release();
  }
  else
  {
    uint64_t v34 = (void *)sub_1C151BD1C();
    objc_msgSend(v34, sel_setUserInteractionEnabled_, 1);

    a1(objc_msgSend(a9, sel_removeFromSuperview));
  }
}

id sub_1C009F6DC(double a1)
{
  objc_msgSend(v1, sel_contentOffset);
  double v4 = v3;
  double v6 = v5;
  objc_msgSend(v1, sel_bounds);
  sub_1C151F82C();
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_initWithFrame_, 0.0, 0.0, v7, v8);
  objc_msgSend(v9, sel_setClipsToBounds_, 1);
  id v10 = objc_msgSend(self, sel_systemBackgroundColor);
  objc_msgSend(v9, sel_setBackgroundColor_, v10);

  id v11 = objc_msgSend(v1, sel_snapshotViewAfterScreenUpdates_, 1);
  if (v11)
  {
    double v12 = v11;
    objc_msgSend(v1, sel_bounds);
    objc_msgSend(v12, sel_setFrame_, 0.0, 0.0);
    objc_msgSend(v9, sel_addSubview_, v12);
  }
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v1, sel_setContentOffset_animated_, 0, v4, v6 + v13);
  objc_msgSend(v1, sel_contentOffset);
  double v15 = v14;
  double v17 = v16;
  objc_msgSend(v1, sel_bounds);
  double Height = CGRectGetHeight(v26);
  if (a1 > 0.0)
  {
    double v19 = Height;
    do
    {
      id v23 = objc_msgSend(v1, sel_snapshotViewAfterScreenUpdates_, 1);
      if (v23)
      {
        id v24 = v23;
        objc_msgSend(v1, sel_bounds);
        objc_msgSend(v24, sel_setFrame_, 0.0, v19);
        objc_msgSend(v9, sel_addSubview_, v24);
      }
      objc_msgSend(v1, sel_bounds);
      objc_msgSend(v1, sel_setContentOffset_animated_, 0, v15, v17 + v20);
      objc_msgSend(v1, sel_contentOffset);
      double v15 = v21;
      double v17 = v22;
      objc_msgSend(v1, sel_bounds);
      double v19 = v19 + CGRectGetHeight(v27);
      objc_msgSend(v1, sel_bounds);
      a1 = a1 - CGRectGetHeight(v28);
    }
    while (a1 > 0.0);
  }
  objc_msgSend(v1, sel_setContentOffset_animated_, 0, v4, v6);
  return v9;
}

id sub_1C009F984(void *a1, id a2, CGFloat a3)
{
  objc_msgSend(a2, sel_bounds);
  CGFloat Height = CGRectGetHeight(v9);
  CGAffineTransformMakeTranslation(&v8, 0.0, Height + a3);
  objc_msgSend(a1, sel_setTransform_, &v8);
  CGAffineTransformMakeTranslation(&v8, 0.0, a3);
  return objc_msgSend(a2, sel_setTransform_, &v8);
}

void sub_1C009FA3C(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *a4;
  id v23 = self;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  double v29 = sub_1C00A0058;
  uint64_t v30 = (void *)v13;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v26 = 1107296256;
  CGRect v27 = sub_1BFC9FC68;
  CGRect v28 = &block_descriptor_24;
  double v14 = _Block_copy(&aBlock);
  id v15 = a3;
  swift_release();
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  double v17 = (void *)swift_allocObject();
  v17[2] = *(void *)(v12 + 80);
  v17[3] = *(void *)(v12 + 88);
  v17[4] = a5;
  v17[5] = v15;
  v17[6] = a6;
  v17[7] = v16;
  v17[8] = a7;
  v17[9] = a8;
  double v29 = sub_1C00A00F0;
  uint64_t v30 = v17;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v26 = 1107296256;
  CGRect v27 = sub_1C0DF5960;
  CGRect v28 = &block_descriptor_31;
  long long v18 = _Block_copy(&aBlock);
  id v19 = v15;
  id v20 = a5;
  id v21 = a6;
  swift_retain();
  swift_release();
  objc_msgSend(v23, sel_nu_animateWithDuration_delay_timingFunction_options_animations_completion_, a2, 4, v14, v18, 0.4, 0.0);
  _Block_release(v18);
  _Block_release(v14);
}

uint64_t sub_1C009FC6C(int a1, id a2, void *a3, void *a4, int a5, uint64_t (*a6)(void), int a7, int a8, uint64_t a9)
{
  objc_msgSend(a2, sel_removeFromSuperview);
  objc_msgSend(a3, sel_removeFromSuperview);
  objc_msgSend(a4, sel_removeFromSuperview);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_unknownObjectRetain();
    swift_release();
    uint64_t v12 = (void *)sub_1C151BD1C();
    swift_unknownObjectRelease();
    objc_msgSend(v12, sel_setUserInteractionEnabled_, 1);
  }
  return a6();
}

uint64_t FeedRefreshBounceAnimation.deinit()
{
  swift_unknownObjectRelease();
  swift_release();

  return v0;
}

uint64_t FeedRefreshBounceAnimation.__deallocating_deinit()
{
  FeedRefreshBounceAnimation.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1C009FDC8()
{
  return FeedRefreshBounceAnimation.animate(context:animation:applyUpdates:)();
}

uint64_t sub_1C009FDEC()
{
  return FeedRefreshBounceAnimation.animationCancelled(context:animation:)();
}

uint64_t sub_1C009FE10()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FeedRefreshBounceAnimation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for FeedRefreshBounceAnimation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FeedRefreshBounceAnimation);
}

uint64_t dispatch thunk of FeedRefreshBounceAnimation.__allocating_init(viewProvider:refreshStateMachine:barCompressionManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1C009FEB0()
{
  return sub_1C009F048();
}

uint64_t sub_1C009FEB8()
{
  return swift_deallocObject();
}

uint64_t sub_1C009FEC8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C009FF00()
{
  swift_release();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

void sub_1C009FF48(void (*a1)(void), uint64_t a2)
{
  sub_1C009F098(a1, a2, *(CGFloat *)(v2 + 56), *(CGFloat *)(v2 + 64), *(CGFloat *)(v2 + 72), *(CGFloat *)(v2 + 80), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_1C009FF60()
{
  return swift_deallocObject();
}

id sub_1C009FFA0()
{
  return sub_1C009F984(*(void **)(v0 + 16), *(id *)(v0 + 24), *(CGFloat *)(v0 + 32));
}

uint64_t sub_1C009FFAC()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1C00A000C(uint64_t a1)
{
  sub_1C009FA3C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(uint64_t **)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_1C00A0020()
{
  return swift_deallocObject();
}

id sub_1C00A0058()
{
  uint64_t v1 = *(void **)(v0 + 16);
  v3[0] = 0x3FF0000000000000;
  v3[1] = 0;
  v3[2] = 0;
  v3[3] = 0x3FF0000000000000;
  v3[4] = 0;
  v3[5] = 0;
  return objc_msgSend(v1, sel_setTransform_, v3);
}

uint64_t sub_1C00A0098()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C00A00F0(int a1)
{
  return sub_1C009FC6C(a1, *(id *)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 56), *(uint64_t (**)(void))(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t FormatPercentFillSizing.percentage.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

unint64_t FormatPercentFillSizing.spacing.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2 = *(void *)(v1 + 8);
  *a1 = v2;
  return sub_1BFE60260(v2);
}

uint64_t sub_1C00A0154(void *a1)
{
  return FormatPercentFillSizing.encode(to:)(a1);
}

uint64_t sub_1C00A0170(void *a1)
{
  return FormatPercentFillSpacing.encode(to:)(a1);
}

uint64_t _s8NewsFeed24FormatPercentFillSpacingO2eeoiySbAC_ACtFZ_0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = *a2;
  if (!*a1)
  {
    if (!v3)
    {
      unint64_t v4 = 0;
      char v5 = 1;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (v2 != 1)
  {
    if (v3 >= 2)
    {
      sub_1BFE60260(*a2);
      sub_1BFE60260(v2);
      sub_1BFE60260(v3);
      sub_1BFE60260(v2);
      char v5 = sub_1C00DE998(v2, v3);
      sub_1BFD7F858(v2);
      sub_1BFD7F858(v3);
      unint64_t v4 = v3;
      unint64_t v3 = v2;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (v3 != 1)
  {
LABEL_8:
    sub_1BFE60260(*a2);
    sub_1BFE60260(v2);
    char v5 = 0;
    unint64_t v4 = v2;
    goto LABEL_10;
  }
  unint64_t v4 = 1;
  char v5 = 1;
LABEL_10:
  sub_1BFD7F858(v4);
  sub_1BFD7F858(v3);
  return v5 & 1;
}

BOOL _s8NewsFeed23FormatPercentFillSizingV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v5 = *a2;
  unint64_t v4 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v6 = sub_1C00DE998(v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0) {
    return 0;
  }
  if (!v2)
  {
    if (!v4)
    {
      sub_1BFD7F858(0);
      sub_1BFD7F858(0);
      return 1;
    }
    goto LABEL_9;
  }
  if (v2 != 1)
  {
    if (v4 >= 2)
    {
      sub_1BFE60260(v4);
      sub_1BFE60260(v2);
      sub_1BFE60260(v4);
      sub_1BFE60260(v2);
      char v9 = sub_1C00DE998(v2, v4);
      sub_1BFD7F858(v2);
      sub_1BFD7F858(v4);
      sub_1BFD7F858(v4);
      sub_1BFD7F858(v2);
      return (v9 & 1) != 0;
    }
    goto LABEL_9;
  }
  if (v4 != 1)
  {
LABEL_9:
    sub_1BFE60260(v4);
    sub_1BFE60260(v2);
    sub_1BFD7F858(v2);
    sub_1BFD7F858(v4);
    return 0;
  }
  uint64_t v7 = 1;
  sub_1BFD7F858(1uLL);
  sub_1BFD7F858(1uLL);
  return v7;
}

unint64_t sub_1C00A03A0(uint64_t a1)
{
  unint64_t result = sub_1C00A03C8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C00A03C8()
{
  unint64_t result = qword_1EA196658;
  if (!qword_1EA196658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196658);
  }
  return result;
}

uint64_t sub_1C00A041C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1C00A05C0(a1, a2, a3, (uint64_t (*)(void))sub_1C00729EC, (uint64_t (*)(void))sub_1C00A045C, (uint64_t (*)(void))sub_1C00A04B0);
}

unint64_t sub_1C00A045C()
{
  unint64_t result = qword_1EB8606A8;
  if (!qword_1EB8606A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8606A8);
  }
  return result;
}

unint64_t sub_1C00A04B0()
{
  unint64_t result = qword_1EA196660;
  if (!qword_1EA196660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196660);
  }
  return result;
}

unint64_t sub_1C00A0504(uint64_t a1)
{
  unint64_t result = sub_1C00A052C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C00A052C()
{
  unint64_t result = qword_1EA196668;
  if (!qword_1EA196668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196668);
  }
  return result;
}

uint64_t sub_1C00A0580(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1C00A05C0(a1, a2, a3, (uint64_t (*)(void))sub_1C006FDAC, (uint64_t (*)(void))sub_1C00A0614, (uint64_t (*)(void))sub_1C00A0668);
}

uint64_t sub_1C00A05C0(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

unint64_t sub_1C00A0614()
{
  unint64_t result = qword_1EB8606D0;
  if (!qword_1EB8606D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8606D0);
  }
  return result;
}

unint64_t sub_1C00A0668()
{
  unint64_t result = qword_1EA196670;
  if (!qword_1EA196670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196670);
  }
  return result;
}

void *sub_1C00A06C0(void *a1, void *a2)
{
  unint64_t v3 = a2[1];
  *a1 = *a2;
  swift_bridgeObjectRetain();
  if (v3 >= 2) {
    swift_bridgeObjectRetain();
  }
  a1[1] = v3;
  return a1;
}

void *assignWithCopy for FormatPercentFillSizing(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = a1 + 1;
  unint64_t v5 = a2[1];
  if (a1[1] >= 2uLL)
  {
    if (v5 >= 2)
    {
      unint64_t *v4 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1C00A07A8((uint64_t)(a1 + 1));
      unint64_t *v4 = a2[1];
    }
  }
  else
  {
    unint64_t *v4 = v5;
    if (v5 >= 2) {
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t sub_1C00A07A8(uint64_t a1)
{
  sub_1C00A0804();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1C00A0804()
{
  if (!qword_1EB874A68)
  {
    sub_1C0084108();
    unint64_t v0 = type metadata accessor for FormatEquation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB874A68);
    }
  }
}

void *assignWithTake for FormatPercentFillSizing(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  unint64_t v4 = a1 + 1;
  unint64_t v5 = a2[1];
  if (a1[1] >= 2uLL)
  {
    if (v5 >= 2)
    {
      unint64_t *v4 = v5;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C00A07A8((uint64_t)(a1 + 1));
  }
  unint64_t *v4 = v5;
  return a1;
}

ValueMetadata *type metadata accessor for FormatPercentFillSizing()
{
  return &type metadata for FormatPercentFillSizing;
}

uint64_t *initializeBufferWithCopyOfBuffer for FeedLayoutSolverOptions.IssueStripOptions.Separators(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for FeedLayoutSolverOptions.IssueStripOptions.Separators(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t *assignWithCopy for FeedLayoutSolverOptions.IssueStripOptions.Separators(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_bridgeObjectRetain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

unint64_t *assignWithTake for FeedLayoutSolverOptions.IssueStripOptions.Separators(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1C00A0A24(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

ValueMetadata *type metadata accessor for FormatPercentFillSpacing()
{
  return &type metadata for FormatPercentFillSpacing;
}

uint64_t FormatArticleThumbnailImage.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1C1515FDC();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t FormatArticleThumbnailImage.size.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for FormatArticleThumbnailImage() + 20));
}

BOOL static FormatArticleThumbnailImage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0x1C18BDA40]() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for FormatArticleThumbnailImage();
  return *(void *)(a1 + *(int *)(v4 + 20)) == *(void *)(a2 + *(int *)(v4 + 20));
}

uint64_t sub_1C00A0B2C()
{
  if (*v0) {
    return 1702521203;
  }
  else {
    return 7107189;
  }
}

uint64_t sub_1C00A0B58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C00A1BB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C00A0B80(uint64_t a1)
{
  unint64_t v2 = sub_1C00A0DC0();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C00A0BBC(uint64_t a1)
{
  unint64_t v2 = sub_1C00A0DC0();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t FormatArticleThumbnailImage.encode(to:)(void *a1)
{
  sub_1C00A1168(0, &qword_1EB8635C8, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C00A0DC0();
  sub_1C1520F0C();
  v9[15] = 0;
  sub_1C1515FDC();
  sub_1C00A1278((unint64_t *)&unk_1EB8710F0, MEMORY[0x1E4F276F0]);
  sub_1C152080C();
  if (!v1)
  {
    type metadata accessor for FormatArticleThumbnailImage();
    v9[14] = 1;
    sub_1C152082C();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1C00A0DC0()
{
  unint64_t result = qword_1EB862FC0;
  if (!qword_1EB862FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862FC0);
  }
  return result;
}

uint64_t FormatArticleThumbnailImage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v4 = sub_1C1515FDC();
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C00A1168(0, &qword_1EB863510, MEMORY[0x1E4FBBDC0]);
  uint64_t v25 = v7;
  uint64_t v22 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  char v9 = (char *)&v20 - v8;
  uint64_t v10 = type metadata accessor for FormatArticleThumbnailImage();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C00A0DC0();
  sub_1C1520EBC();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  id v20 = v12;
  uint64_t v13 = v22;
  uint64_t v14 = v23;
  char v27 = 0;
  sub_1C00A1278((unint64_t *)&unk_1EB871120, MEMORY[0x1E4F276F0]);
  uint64_t v15 = v24;
  sub_1C15206EC();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v20, v6, v15);
  char v26 = 1;
  uint64_t v16 = sub_1C15206FC();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v25);
  uint64_t v18 = (uint64_t)v20;
  uint64_t v17 = v21;
  *(void *)&v20[*(int *)(v10 + 20)] = v16;
  sub_1C00A1CDC(v18, v17, (uint64_t (*)(void))type metadata accessor for FormatArticleThumbnailImage);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1C00A1D44(v18, (uint64_t (*)(void))type metadata accessor for FormatArticleThumbnailImage);
}

void sub_1C00A1168(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1C00A0DC0();
    unint64_t v7 = a3(a1, &type metadata for FormatArticleThumbnailImage.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1C00A11CC(void *a1)
{
  a1[1] = sub_1C00A1278(&qword_1EB862FE0, (void (*)(uint64_t))type metadata accessor for FormatArticleThumbnailImage);
  a1[2] = sub_1C00A1278(&qword_1EB862FD8, (void (*)(uint64_t))type metadata accessor for FormatArticleThumbnailImage);
  uint64_t result = sub_1C00A1278(&qword_1EA196678, (void (*)(uint64_t))type metadata accessor for FormatArticleThumbnailImage);
  a1[3] = result;
  return result;
}

uint64_t sub_1C00A1278(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_1C00A12C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (MEMORY[0x1C18BDA40]() & 1) != 0 && *(void *)(a1 + *(int *)(a3 + 20)) == *(void *)(a2 + *(int *)(a3 + 20));
}

uint64_t sub_1C00A1314@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatArticleThumbnailImage.init(from:)(a1, a2);
}

uint64_t sub_1C00A132C(void *a1)
{
  return FormatArticleThumbnailImage.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for FormatArticleThumbnailImage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1C1515FDC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t _s6ActionOwxx(uint64_t a1)
{
  uint64_t v2 = sub_1C1515FDC();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for FormatArticleThumbnailImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C1515FDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for FormatArticleThumbnailImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C1515FDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for FormatAbsoluteURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C1515FDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for FormatArticleThumbnailImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C1515FDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatArticleThumbnailImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C00A1678);
}

uint64_t sub_1C00A1678(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C1515FDC();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FormatArticleThumbnailImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C00A16F8);
}

uint64_t sub_1C00A16F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C1515FDC();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

unsigned char *storeEnumTagSinglePayload for FormatArticleThumbnailImage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C00A1834);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatArticleThumbnailImage.CodingKeys()
{
  return &type metadata for FormatArticleThumbnailImage.CodingKeys;
}

unint64_t sub_1C00A1870()
{
  unint64_t result = qword_1EA196680;
  if (!qword_1EA196680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196680);
  }
  return result;
}

unint64_t sub_1C00A18C8()
{
  unint64_t result = qword_1EB862FD0;
  if (!qword_1EB862FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862FD0);
  }
  return result;
}

unint64_t sub_1C00A1920()
{
  unint64_t result = qword_1EB862FC8;
  if (!qword_1EB862FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862FC8);
  }
  return result;
}

id sub_1C00A1974(uint64_t a1, void *a2)
{
  sub_1C00A1C84();
  MEMORY[0x1F4188790](v4 - 8);
  unsigned int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FormatArticleThumbnailImage();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C00A1CDC(a1, (uint64_t)v6, (uint64_t (*)(void))sub_1C00A1C84);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {

    sub_1C00A1D44(a1, (uint64_t (*)(void))sub_1C00A1C84);
    sub_1C00A1D44((uint64_t)v6, (uint64_t (*)(void))sub_1C00A1C84);
    return 0;
  }
  else
  {
    sub_1C00A1DA4((uint64_t)v6, (uint64_t)v10);
    uint64_t v12 = (void *)sub_1C1515E9C();
    id v13 = objc_msgSend(a2, sel_assetHandleForURL_lifetimeHint_, v12, 0);

    id v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    uint64_t v15 = (void *)sub_1C1515E9C();
    id v11 = objc_msgSend(v14, sel_initWithURL_size_assetHandle_, v15, *(void *)&v10[*(int *)(v7 + 20)], v13);

    sub_1C00A1D44(a1, (uint64_t (*)(void))sub_1C00A1C84);
    sub_1C00A1D44((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for FormatArticleThumbnailImage);
  }
  return v11;
}

uint64_t sub_1C00A1BB0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7107189 && a2 == 0xE300000000000000;
  if (v2 || (sub_1C1520A9C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1C1520A9C();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void sub_1C00A1C84()
{
  if (!qword_1EB88C798)
  {
    type metadata accessor for FormatArticleThumbnailImage();
    unint64_t v0 = sub_1C151FD8C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB88C798);
    }
  }
}

uint64_t sub_1C00A1CDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C00A1D44(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C00A1DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FormatArticleThumbnailImage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for DebugFormatBindingExportResponse()
{
  return &type metadata for DebugFormatBindingExportResponse;
}

uint64_t sub_1C00A1E18()
{
  return 0x6567617373656DLL;
}

uint64_t sub_1C00A1E30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1C1520A9C();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1C00A1EC8(uint64_t a1)
{
  unint64_t v2 = sub_1C00A2110();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C00A1F04(uint64_t a1)
{
  unint64_t v2 = sub_1C00A2110();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1C00A1F40@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1C00A20B4();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C00A2110();
  sub_1C1520EBC();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v10 = sub_1C152069C();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v10;
  a2[1] = v12;
  return result;
}

void sub_1C00A20B4()
{
  if (!qword_1EA196688)
  {
    sub_1C00A2110();
    unint64_t v0 = sub_1C152072C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA196688);
    }
  }
}

unint64_t sub_1C00A2110()
{
  unint64_t result = qword_1EA196690;
  if (!qword_1EA196690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196690);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DebugFormatBindingExportResponse.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C00A2200);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugFormatBindingExportResponse.CodingKeys()
{
  return &type metadata for DebugFormatBindingExportResponse.CodingKeys;
}

unint64_t sub_1C00A223C()
{
  unint64_t result = qword_1EA196698;
  if (!qword_1EA196698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196698);
  }
  return result;
}

unint64_t sub_1C00A2294()
{
  unint64_t result = qword_1EA1966A0;
  if (!qword_1EA1966A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA1966A0);
  }
  return result;
}

unint64_t sub_1C00A22EC()
{
  unint64_t result = qword_1EA1966A8;
  if (!qword_1EA1966A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA1966A8);
  }
  return result;
}

uint64_t sub_1C00A2340@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C00A5E64((uint64_t (*)(void))type metadata accessor for NoopFeedItemDimmingEvaluator, (uint64_t)&off_1F1BDAB00, a1);
}

uint64_t sub_1C00A2360@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, qword_1EB896288);
  uint64_t result = sub_1C151815C();
  if (!v14)
  {
    __break(1u);
    goto LABEL_7;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB8948D8);
  uint64_t result = sub_1C151815C();
  if (!v12)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&qword_1EB8953E0);
  uint64_t result = sub_1C151819C();
  if (!v10)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB8955C0);
  uint64_t result = sub_1C151819C();
  if (v8)
  {
    uint64_t v5 = type metadata accessor for CategoryViewRenderer();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 176) = 0;
    *(unsigned char *)(v6 + 184) = 1;
    sub_1BFC773DC(&v13, v6 + 16);
    sub_1BFC773DC(&v11, v6 + 56);
    sub_1BFC773DC(&v9, v6 + 96);
    uint64_t result = sub_1BFC773DC(&v7, v6 + 136);
    a2[3] = v5;
    a2[4] = (uint64_t)&protocol witness table for CategoryViewRenderer;
    *a2 = v6;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1C00A2564@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BFC4FEAC(a1, (uint64_t (*)(void))type metadata accessor for CategoryViewV2Styler, (uint64_t)&off_1F1C30A60, a2, 12.0);
}

uint64_t sub_1C00A2588(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, qword_1EB896288);
  sub_1C151815C();
  if (!v4)
  {
    __break(1u);
    JUMPOUT(0x1C00A2630);
  }
  type metadata accessor for CategoryViewLayoutAttributesFactory();
  uint64_t v1 = swift_allocObject();
  sub_1BFC773DC(&v3, v1 + 16);
  return v1;
}

uint64_t sub_1C00A2650@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C00A2BC0(a1, (uint64_t (*)(void))type metadata accessor for IssueCoverViewLayoutAttributesFactory, (uint64_t)&protocol witness table for IssueCoverViewLayoutAttributesFactory, a2);
}

uint64_t sub_1C00A2670()
{
  type metadata accessor for IssueCoverViewLayoutAttributesFactory();
  return swift_allocObject();
}

uint64_t sub_1C00A26A4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB895B60);
  uint64_t result = sub_1C151819C();
  if (!v31)
  {
    __break(1u);
    goto LABEL_9;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB8948D8);
  uint64_t result = sub_1C151815C();
  if (!v29)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for FeedItemRendererTool();
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v5 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for LayeredMediaViewProvider();
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v6 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB895C58);
  uint64_t result = sub_1C151819C();
  if (!v27)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v24 = a2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for LayeredMediaViewRenderer();
  uint64_t result = sub_1C151818C();
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v30, v31);
    __n128 v9 = MEMORY[0x1F4188790](v8);
    long long v11 = (void *)((char *)&v25[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v12 + 16))(v11, v9);
    uint64_t v13 = *v11;
    uint64_t v14 = type metadata accessor for ArticleThumbnailViewStyler();
    v25[3] = v14;
    v25[4] = &off_1F1C0F7C8;
    v25[0] = v13;
    uint64_t v15 = type metadata accessor for ArticleThumbnailViewRenderer();
    uint64_t v16 = swift_allocObject();
    uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v25, v14);
    __n128 v18 = MEMORY[0x1F4188790](v17);
    id v20 = (void *)((char *)&v25[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v21 + 16))(v20, v18);
    uint64_t v22 = *v20;
    *(void *)(v16 + 80) = v14;
    *(void *)(v16 + 88) = &off_1F1C0F7C8;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(void *)(v16 + 48) = 0;
    *(void *)(v16 + 56) = v22;
    sub_1BFC773DC(&v28, v16 + 96);
    *(void *)(v16 + 136) = v5;
    *(void *)(v16 + 144) = v6;
    sub_1BFC773DC(&v26, v16 + 152);
    *(void *)(v16 + 192) = v7;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    uint64_t v23 = v24;
    v24[3] = v15;
    v23[4] = (uint64_t)&off_1F1B9CA70;
    *uint64_t v23 = v16;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1C00A2A70(uint64_t *a1, void *a2)
{
  return sub_1BFCCD6D4(a1, a2);
}

uint64_t sub_1C00A2A90@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB895430);
  uint64_t result = sub_1C151819C();
  if (v11)
  {
    sub_1BFC773DC(&v10, (uint64_t)v12);
    sub_1BFC66384((uint64_t)v12, (uint64_t)&v10);
    uint64_t v4 = v13;
    uint64_t v5 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 32))(v9, v4, v5);
    uint64_t v6 = type metadata accessor for ArticleThumbnailViewStyler();
    uint64_t v7 = swift_allocObject();
    long long v8 = v9[1];
    *(_OWORD *)(v7 + 16) = v9[0];
    *(_OWORD *)(v7 + 32) = v8;
    sub_1BFC773DC(&v10, v7 + 48);
    a2[3] = v6;
    a2[4] = (uint64_t)&off_1F1C0F7C8;
    *a2 = v7;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C00A2BA0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C00A2BC0(a1, (uint64_t (*)(void))type metadata accessor for ArticleThumbnailViewLayoutAttributesFactory, (uint64_t)&protocol witness table for ArticleThumbnailViewLayoutAttributesFactory, a2);
}

uint64_t sub_1C00A2BC0@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v7 = a2(0);
  uint64_t result = sub_1C151818C();
  if (result)
  {
    a4[3] = v7;
    a4[4] = a3;
    *a4 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C00A2C44()
{
  type metadata accessor for ArticleThumbnailViewLayoutAttributesFactory();
  return swift_allocObject();
}

id sub_1C00A2C78()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for PuzzleProcessTerminationPolicyDecider());
  return objc_msgSend(v0, sel_init);
}

uint64_t sub_1C00A2CB0(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for PuzzleEmbedViewController();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)sub_1C151814C();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1BFCB6824(0, &qword_1EB88E690);
    uint64_t result = sub_1C151819C();
    if (v6)
    {
      id v4 = objc_allocWithZone((Class)type metadata accessor for FormatPuzzleEmbedViewController());
      uint64_t v5 = sub_1C02CD16C(v2, v6, v7);

      swift_unknownObjectRelease();
      return (uint64_t)v5;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C00A2DF0(void **a1, void *a2)
{
  long long v3 = *a1;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EA1966F0);
  uint64_t result = sub_1C151819C();
  if (v9)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = *(void (**)(void *, _UNKNOWN **, uint64_t, uint64_t))(v10 + 40);
    id v7 = v3;
    v6(v3, &protocol witness table for FormatPuzzleEmbedViewController, ObjectType, v10);
    __swift_project_boxed_opaque_existential_1(a2, a2[3]);
    sub_1C151819C();
    swift_getObjectType();
    char v8 = 1;
    sub_1C02CCFAC(v9, (uint64_t)&v8, (uint64_t)v7);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
    __break(1u);
  }
  return result;
}

uint64_t sub_1C00A2F40(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB88A528);
  uint64_t result = sub_1C151819C();
  uint64_t v3 = v16[0];
  if (!v16[0])
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = v16[1];
  uint64_t ObjectType = swift_getObjectType();
  *(unsigned char *)(v16[0] + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_configuration) = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC39268(0, &qword_1EB85DFE8);
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v6 = (void *)result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, (unint64_t *)&unk_1EB85C550);
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v7 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, (unint64_t *)&unk_1EA1966C8);
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v8 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB88E698);
  uint64_t result = sub_1C151819C();
  if (!v17)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v13 = v4;
  v16[3] = ObjectType;
  void v16[4] = *(void *)(v4 + 8);
  v16[0] = v3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, (unint64_t *)&qword_1EB87A280);
  swift_unknownObjectRetain();
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v9 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB893B50);
  uint64_t result = sub_1C151819C();
  if (v15)
  {
    id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D98]), sel_init);
    objc_msgSend(v10, sel_setKeyboardType_, 13);
    objc_msgSend(v10, sel_setHidePrediction_, 1);
    objc_msgSend(v10, sel_setForceDisableDictation_, 1);
    objc_msgSend(v10, sel_setReturnKeyType_, 0);
    uint64_t v11 = (char *)objc_allocWithZone((Class)type metadata accessor for PuzzleEmbedViewController());
    swift_unknownObjectRetain_n();
    uint64_t v12 = sub_1C00A78E0(v6, v7, v8, v3, v13, v17, v18, v3, v9, (uint64_t)v14, v10, v11);

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    swift_unknownObjectRelease();
    return (uint64_t)v12;
  }
LABEL_15:
  __break(1u);
  return result;
}

char *sub_1C00A32DC(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB88A528);
  uint64_t result = (char *)sub_1C151819C();
  uint64_t v3 = v28[0];
  if (!v28[0])
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v4 = (char *)v28[1];
  *(unsigned char *)(v28[0] + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_configuration) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC39268(0, &qword_1EB85DFE8);
  uint64_t result = (char *)sub_1C151818C();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, (unint64_t *)&unk_1EB85C550);
  uint64_t result = (char *)sub_1C151818C();
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v6 = (uint64_t)result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, (unint64_t *)&unk_1EA1966C8);
  uint64_t result = (char *)sub_1C151818C();
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v23 = result;
  uint64_t v24 = v6;
  uint64_t v7 = v5;
  uint64_t v25 = v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB88E698);
  uint64_t result = (char *)sub_1C151819C();
  uint64_t v8 = v31;
  if (!v31)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v22 = v32;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB88B0D0);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1C151815C();
  uint64_t result = (char *)swift_bridgeObjectRelease();
  if (!v29)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, (unint64_t *)&qword_1EB87A280);
  uint64_t result = (char *)sub_1C151818C();
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v9 = result;
  uint64_t v21 = v3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB893B50);
  uint64_t result = (char *)sub_1C151819C();
  if (v27)
  {
    uint64_t v10 = type metadata accessor for PuzzleEmbedViewController();
    id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D98]), sel_init);
    objc_msgSend(v11, sel_setKeyboardType_, 13);
    objc_msgSend(v11, sel_setHidePrediction_, 1);
    objc_msgSend(v11, sel_setForceDisableDictation_, 1);
    objc_msgSend(v11, sel_setReturnKeyType_, 1);
    uint64_t v12 = v29;
    uint64_t v13 = v30;
    uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v28, v29);
    uint64_t v20 = (uint64_t)&v20;
    uint64_t v15 = *(void *)(v12 - 8);
    __n128 v16 = MEMORY[0x1F4188790](v14);
    uint64_t v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v15 + 16))(v18, v16);
    *(void *)&long long v19 = v9;
    *((void *)&v19 + 1) = &v26;
    uint64_t v25 = sub_1C0C89CFC(v7, v24, (uint64_t)v23, v21, (uint64_t)v25, v8, v22, (uint64_t)v18, v19, v11, v10, v12, v13);
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v12);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    return v25;
  }
LABEL_17:
  __break(1u);
  return result;
}

void *sub_1C00A37A4(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1BFC9DBE8(0, &qword_1EB85C570);
  uint64_t result = (void *)sub_1C151818C();
  if (result)
  {
    objc_msgSend(result, sel_setPresentingViewController_, v2);
    return (void *)swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C00A3838@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, (unint64_t *)&qword_1EB87A280);
  uint64_t result = sub_1C151818C();
  if (result)
  {
    uint64_t v5 = result;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1BFC9DBE8(0, (unint64_t *)&unk_1EB87A230);
    uint64_t result = sub_1C151818C();
    if (result)
    {
      uint64_t v6 = result;
      uint64_t v7 = type metadata accessor for PuzzleAccessProvider();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v5;
      *(void *)(result + 24) = v6;
      a2[3] = v7;
      a2[4] = (uint64_t)&protocol witness table for PuzzleAccessProvider;
      *a2 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C00A3924@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, qword_1EB88C5E8);
  uint64_t result = sub_1C151819C();
  uint64_t v5 = v11;
  if (v11)
  {
    uint64_t v6 = v12;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1BFCB6824(0, &qword_1EB871540);
    uint64_t result = sub_1C151819C();
    if (v10)
    {
      type metadata accessor for PuzzleComponentsViewProvider();
      uint64_t v7 = (void *)swift_allocObject();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v7[2] = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
      v7[3] = v5;
      v7[4] = v6;
      uint64_t result = sub_1BFC773DC(&v9, (uint64_t)(v7 + 5));
      *a2 = v7;
      a2[1] = &protocol witness table for PuzzleComponentsViewProvider;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C00A3A74@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB88B0E0);
  uint64_t result = sub_1C151819C();
  if (v6)
  {
    type metadata accessor for PuzzleComponentsStyler();
    uint64_t v4 = swift_allocObject();
    uint64_t result = sub_1BFC773DC(&v5, v4 + 16);
    *a2 = v4;
    a2[1] = (uint64_t)&protocol witness table for PuzzleComponentsStyler;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1C00A3B20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for PuzzleHintFormatter();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C152A650;
  type metadata accessor for PuzzleTagConverter();
  uint64_t result = (void *)swift_allocObject();
  result[2] = 23390;
  result[3] = 0xE200000000000000;
  result[5] = 0;
  result[6] = 0;
  result[4] = 0;
  *(void *)(v3 + 32) = result;
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for PuzzleHintFormatter;
  *a1 = v3;
  return result;
}

uint64_t sub_1C00A3BAC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C00A51CC(MEMORY[0x1E4FABE68], MEMORY[0x1E4FABE60], MEMORY[0x1E4FABE58], a1);
}

uint64_t sub_1C00A3BE0()
{
  return swift_release();
}

uint64_t sub_1C00A3D20@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, (unint64_t *)&qword_1EB87A270);
  uint64_t result = sub_1C151818C();
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v5 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB8971B0);
  uint64_t result = sub_1C151819C();
  if (!v18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB897400);
  uint64_t result = sub_1C151819C();
  if (!v16[3])
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB897990);
  uint64_t result = sub_1C151819C();
  if (!v15)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC39268(0, &qword_1EB890208);
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v6 = (void *)result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, (unint64_t *)&qword_1EB87A280);
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = (void *)result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB884AC0);
  uint64_t result = sub_1C151819C();
  if (!v13)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB884B68);
  uint64_t result = sub_1C151819C();
  if (v10)
  {
    id v8 = objc_allocWithZone((Class)type metadata accessor for PuzzleDataManager());
    id v9 = sub_1C02AFF80(v5, (uint64_t)v17, v16, (uint64_t)v14, v6, v7, 1, (uint64_t)v12, v10, v11);
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    *a2 = v9;
    a2[1] = &off_1F1B98C98;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1C00A4038@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB897400);
  uint64_t result = sub_1C151819C();
  if (v9)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1BFC9DBE8(0, (unint64_t *)&qword_1EB87A280);
    uint64_t result = sub_1C151818C();
    if (result)
    {
      uint64_t v5 = result;
      uint64_t v6 = type metadata accessor for PuzzleTeaserAccessArbiter();
      uint64_t v7 = swift_allocObject();
      uint64_t result = sub_1BFC773DC(&v8, v7 + 16);
      *(void *)(v7 + 56) = v5;
      a2[3] = v6;
      a2[4] = (uint64_t)&off_1F1B9D0A8;
      *a2 = v7;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1C00A4144@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PuzzleProgressMessageHandler()), sel_init);
  *a1 = result;
  a1[1] = &off_1F1B91F28;
  return result;
}

uint64_t sub_1C00A4188@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB8850C0);
  uint64_t result = sub_1C151819C();
  if (v6)
  {
    uint64_t v4 = type metadata accessor for LiveActivityWebEmbedDatastoreManager();
    swift_allocObject();
    uint64_t result = (uint64_t)sub_1BFCBCC90((uint64_t)v5);
    a2[3] = v4;
    a2[4] = (uint64_t)&off_1F1C35D50;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C00A4238(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC39268(0, &qword_1EB85DFE8);
  uint64_t result = sub_1C151818C();
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v3 = (void *)result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, (unint64_t *)&unk_1EB85C550);
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB879458);
  uint64_t result = sub_1C151819C();
  if (!v31)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C00A8C00(0, &qword_1EB896590, (uint64_t (*)(uint64_t))type metadata accessor for FormatPictureInPictureModel, MEMORY[0x1E4FAAA48]);
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v5 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB88D6E0);
  uint64_t result = sub_1C151819C();
  if (!v29)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB88FB60);
  uint64_t result = sub_1C151819C();
  if (!v27)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB88B188);
  uint64_t result = sub_1C151819C();
  if (!v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C1519FBC();
  uint64_t result = sub_1C151818C();
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v30, v31);
    __n128 v8 = MEMORY[0x1F4188790](v7);
    uint64_t v10 = (void *)((char *)&v21[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v11 + 16))(v10, v8);
    uint64_t v12 = *v10;
    uint64_t v22 = type metadata accessor for WebEmbedConfigurationProvider();
    uint64_t v23 = &off_1F1C0FF40;
    v21[0] = v12;
    uint64_t v13 = (char *)objc_allocWithZone((Class)type metadata accessor for WebEmbedViewController(0));
    uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v21, v22);
    __n128 v15 = MEMORY[0x1F4188790](v14);
    uint64_t v17 = (void *)((char *)&v21[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v18 + 16))(v17, v15);
    long long v19 = sub_1C00A8278(v3, v4, *v17, v5, (uint64_t)v28, (uint64_t)v26, (uint64_t)v24, v6, v13);

    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return (uint64_t)v19;
  }
LABEL_17:
  __break(1u);
  return result;
}

void *sub_1C00A46BC(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1BFC9DBE8(0, &qword_1EB85C570);
  uint64_t result = (void *)sub_1C151818C();
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  objc_msgSend(result, sel_setPresentingViewController_, v3);
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1BFC39268(0, &qword_1EB85C528);
  uint64_t result = (void *)sub_1C151818C();
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v5 = result;
  objc_msgSend(result, sel_setDelegate_, *(void *)(v3 + OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_delegate));
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1BFCB6824(0, &qword_1EB871438);
  uint64_t result = (void *)sub_1C151819C();
  if (v7)
  {
    sub_1BFC773DC(&v6, (uint64_t)v8);
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    sub_1BFD52288(&qword_1EB86CB30, 255, (void (*)(uint64_t))type metadata accessor for WebEmbedViewController);
    sub_1C1518B1C();
    swift_unknownObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v6);
    return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
LABEL_7:
  __break(1u);
  return result;
}

void *sub_1C00A4898(uint64_t a1)
{
  sub_1BFC66384(a1, (uint64_t)v2);
  type metadata accessor for WebEmbedManager();
  swift_allocObject();
  return WebEmbedManager.init(resolver:)(v2);
}

void *sub_1C00A48E4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1C15164AC();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1C151644C();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, &qword_1EB871070);
  uint64_t result = (void *)sub_1C151818C();
  if (result)
  {
    id v9 = objc_msgSend(result, sel_contentStoreFrontID);
    swift_unknownObjectRelease();
    if (v9)
    {
      uint64_t v11 = sub_1C151E62C();
      uint64_t v13 = v12;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v13 = 0;
    }
    if (qword_1EB896B90 != -1) {
      swift_once();
    }
    sub_1BFD52288(&qword_1EB888138, v10, (void (*)(uint64_t))type metadata accessor for RendererAssembly);
    sub_1C1516FBC();
    uint64_t v14 = 8 * v21[15];
    uint64_t v15 = *(void *)&aProductistagin[v14];
    uint64_t v16 = *(void *)&aOn_1[v14];
    uint64_t v17 = type metadata accessor for WebEmbedConfigurationProvider();
    uint64_t v18 = swift_allocObject();
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32))(v18 + OBJC_IVAR____TtC8NewsFeed29WebEmbedConfigurationProvider_locale, v7, v4);
    long long v19 = (uint64_t *)(v18 + OBJC_IVAR____TtC8NewsFeed29WebEmbedConfigurationProvider_storeFront);
    uint64_t *v19 = v11;
    v19[1] = v13;
    uint64_t v20 = (void *)(v18 + OBJC_IVAR____TtC8NewsFeed29WebEmbedConfigurationProvider_contentEnvironment);
    *uint64_t v20 = v15;
    v20[1] = v16;
    a2[3] = v17;
    a2[4] = (uint64_t)&off_1F1C0FF40;
    *a2 = v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C00A4B88(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB896680);
  uint64_t result = sub_1C151819C();
  if (v4)
  {
    type metadata accessor for ShareAttributionViewReuseFactory();
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 56) = MEMORY[0x1E4FBC868];
    sub_1BFC773DC(&v3, v2 + 16);
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C00A4C34()
{
  type metadata accessor for FormatShareAttributionNodeRenderer();
  sub_1C1518AFC();
  swift_release();
  type metadata accessor for ShareAttributionViewReuseManager();
  sub_1C1518AFC();
  return swift_release();
}

uint64_t sub_1C00A4CC8()
{
  type metadata accessor for FormatShareAttributionNodeRenderer();
  return swift_allocObject();
}

uint64_t sub_1C00A4CFC(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for ShareAttributionViewReuseFactory();
  uint64_t result = sub_1C151818C();
  if (result)
  {
    uint64_t v2 = result;
    type metadata accessor for ShareAttributionViewReuseManager();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 24) = v2;
    sub_1C00906C8();
    swift_allocObject();
    swift_retain();
    *(void *)(v3 + 16) = sub_1C151B12C();
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C00A4DAC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C00A4E14(a1, MEMORY[0x1E4FAC758], MEMORY[0x1E4FAC750], a2);
}

uint64_t sub_1C00A4DE0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C00A4E14(a1, MEMORY[0x1E4FABF48], MEMORY[0x1E4FABF40], a2);
}

uint64_t sub_1C00A4E14@<X0>(void *a1@<X0>, void (*a2)(void)@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, &qword_1EB8948F8);
  uint64_t result = sub_1C151818C();
  if (result)
  {
    a2(0);
    swift_allocObject();
    a3();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1BFCB6824(0, &qword_1EB8948F0);
    uint64_t result = sub_1C151819C();
    if (v11)
    {
      uint64_t v9 = sub_1C1519EFC();
      swift_allocObject();
      uint64_t result = sub_1C1519EEC();
      uint64_t v10 = MEMORY[0x1E4FABB80];
      a4[3] = v9;
      a4[4] = v10;
      *a4 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C00A4F64@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, &qword_1EB8948F8);
  uint64_t result = sub_1C151818C();
  if (result)
  {
    type metadata accessor for StubThumbnailProcessor();
    swift_allocObject();
    sub_1BFD52288(&qword_1EA1966B8, 255, (void (*)(uint64_t))type metadata accessor for StubThumbnailProcessor);
    objc_msgSend(objc_allocWithZone((Class)type metadata accessor for StubImageDownloader()), sel_init);
    sub_1BFD52288(&qword_1EA1966C0, 255, (void (*)(uint64_t))type metadata accessor for StubImageDownloader);
    uint64_t v4 = sub_1C1519EFC();
    swift_allocObject();
    uint64_t result = sub_1C1519EEC();
    uint64_t v5 = MEMORY[0x1E4FABB80];
    a2[3] = v4;
    a2[4] = v5;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C00A50DC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BFD51E5C(a1, (void (*)(void))type metadata accessor for PublisherLogoProcessor, &qword_1EB88ABC0, (void (*)(uint64_t))type metadata accessor for PublisherLogoProcessor, a2);
}

uint64_t sub_1C00A5124@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BFD51E5C(a1, (void (*)(void))type metadata accessor for IssueCoverImageProcessor, (unint64_t *)&unk_1EB882FE0, (void (*)(uint64_t))type metadata accessor for IssueCoverImageProcessor, a2);
}

uint64_t sub_1C00A516C(uint64_t a1)
{
  return sub_1C007D654(a1, MEMORY[0x1E4FAC228], MEMORY[0x1E4FAC220]);
}

uint64_t sub_1C00A5198@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C00A51CC(MEMORY[0x1E4FAC078], MEMORY[0x1E4FAC070], MEMORY[0x1E4FAC068], a1);
}

uint64_t sub_1C00A51CC@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7 = a1(0);
  swift_allocObject();
  uint64_t result = a2();
  a4[3] = v7;
  a4[4] = a3;
  *a4 = result;
  return result;
}

uint64_t sub_1C00A5234(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB8715B0);
  uint64_t result = sub_1C151819C();
  if (!v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB8948E0);
  uint64_t result = sub_1C151819C();
  if (!v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C1517D0C();
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v3 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC39268(0, (unint64_t *)&qword_1EB87A130);
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = (void *)result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, &qword_1EB87AEF8);
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB895310);
  uint64_t result = sub_1C151819C();
  if (v6[3])
  {
    type metadata accessor for FeedItemRendererTool();
    swift_allocObject();
    uint64_t v5 = sub_1BFC8A788((uint64_t)v9, v7, v8, v3, (uint64_t)v6);
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();

    return v5;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1C00A5488@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C00A5E64((uint64_t (*)(void))type metadata accessor for HiddenContentPlacardViewLayoutAttributesFactory, (uint64_t)&off_1F1BF44A0, a1);
}

uint64_t sub_1C00A54A8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB895E68);
  uint64_t result = sub_1C151819C();
  if (!v34)
  {
    __break(1u);
    goto LABEL_15;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB895B98);
  uint64_t result = sub_1C151819C();
  if (!v32)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB890EB8);
  uint64_t result = sub_1C151819C();
  if (!v29)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB8948E0);
  uint64_t result = sub_1C151819C();
  if (!v27[5])
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v5 = sub_1C1517D0C();
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v6 = result;
  v27[3] = v5;
  v27[4] = sub_1BFD52288((unint64_t *)&qword_1EB871390, 255, MEMORY[0x1E4F4AB68]);
  v27[0] = v6;
  sub_1C151BBBC();
  swift_allocObject();
  uint64_t v7 = sub_1C151BB9C();
  uint64_t v8 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v33, v34);
  __n128 v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (void *)((char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v12 + 16))(v11, v9);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v31, v32);
  __n128 v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (void *)((char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v17 + 16))(v16, v14);
  uint64_t v18 = sub_1C00A76F4(*v11, *v16, &v28, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB8955C0);
  uint64_t result = sub_1C151819C();
  uint64_t v19 = v34;
  if (!v34)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  uint64_t v20 = v35;
  __swift_project_boxed_opaque_existential_1(&v33, v34);
  char v21 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v20[12])(v19, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
  if (v21)
  {
    uint64_t v22 = type metadata accessor for NoopHiddenContentEffectRenderer();
    uint64_t v23 = swift_allocObject();
    uint64_t v24 = &off_1F1C08628;
  }
  else
  {
    uint64_t v22 = type metadata accessor for HiddenContentPlacardViewRenderer();
    uint64_t v23 = swift_retain();
    uint64_t v24 = &off_1F1BFE788;
  }
  uint64_t v34 = v22;
  uint64_t v35 = v24;
  *(void *)&long long v33 = v23;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  swift_retain();
  uint64_t result = sub_1C151819C();
  if (!v32) {
    goto LABEL_20;
  }
  uint64_t v29 = type metadata accessor for HiddenContentPlacardViewRenderer();
  uint64_t v30 = &off_1F1BFE788;
  *(void *)&long long v28 = v18;
  uint64_t v25 = type metadata accessor for SwitchHiddenContentEffectRenderer();
  uint64_t v26 = swift_allocObject();
  sub_1C151706C();
  swift_retain();
  sub_1C151704C();
  if (qword_1EB8829D0 != -1) {
    swift_once();
  }
  sub_1C151703C();
  swift_release();
  *(void *)(v26 + 136) = v27[0];
  sub_1BFC773DC(&v33, v26 + 16);
  sub_1BFC773DC(&v28, v26 + 56);
  sub_1BFC773DC(&v31, v26 + 96);
  swift_release();
  a2[3] = v25;
  a2[4] = (uint64_t)&off_1F1C08648;
  uint64_t result = swift_release();
  *a2 = v26;
  return result;
}

uint64_t sub_1C00A5A44@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB895430);
  uint64_t result = sub_1C151819C();
  if (v7)
  {
    uint64_t v4 = type metadata accessor for HiddenContentPlacardViewStyler();
    uint64_t v5 = swift_allocObject();
    uint64_t result = sub_1BFC773DC(&v6, v5 + 16);
    a2[3] = v4;
    a2[4] = (uint64_t)&off_1F1BED2A0;
    *a2 = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C00A5AF8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_1BFC66384((uint64_t)a1, (uint64_t)v13);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB87D1B8);
  uint64_t result = sub_1C151819C();
  if (!v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C00A8C00(0, &qword_1EB896590, (uint64_t (*)(uint64_t))type metadata accessor for FormatPictureInPictureModel, MEMORY[0x1E4FAAA48]);
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB871438);
  uint64_t result = sub_1C151819C();
  if (!v10)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB871540);
  uint64_t result = sub_1C151819C();
  if (!v8)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  type metadata accessor for FormatVideoPlayerReuseManager();
  long long v6 = (void *)swift_allocObject();
  v6[3] = 0;
  swift_unknownObjectWeakInit();
  if (qword_1EB88ED70 != -1) {
    swift_once();
  }
  v6[25] = qword_1EB93C810;
  sub_1BFC773DC(v13, (uint64_t)(v6 + 4));
  sub_1BFC773DC(&v11, (uint64_t)(v6 + 9));
  v6[14] = v5;
  sub_1BFC773DC(&v9, (uint64_t)(v6 + 15));
  sub_1BFC773DC(&v7, (uint64_t)(v6 + 20));
  *a2 = v6;
  a2[1] = &off_1F1C02F88;
  return swift_retain();
}

uint64_t sub_1C00A5D40@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C00A5E64((uint64_t (*)(void))type metadata accessor for FeedVideoAdProviderFactory, (uint64_t)&off_1F1C36028, a1);
}

uint64_t sub_1C00A5D60(uint64_t a1, unint64_t *a2)
{
  sub_1BFCB6824(0, a2);
  sub_1C1518B0C();
  return swift_release();
}

uint64_t sub_1C00A5DB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FormatVideoPlayerCoordinator();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 24) = 0;
  uint64_t result = swift_unknownObjectWeakInit();
  a1[3] = v2;
  a1[4] = (uint64_t)&off_1F1C030A8;
  *a1 = v3;
  return result;
}

uint64_t sub_1C00A5E1C(uint64_t a1)
{
  return sub_1C00A5D60(a1, &qword_1EB88B188);
}

uint64_t sub_1C00A5E44@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C00A5E64((uint64_t (*)(void))type metadata accessor for WebEmbedCoordinator, (uint64_t)&off_1F1B90220, a1);
}

uint64_t sub_1C00A5E64@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1(0);
  uint64_t result = swift_allocObject();
  a3[3] = v5;
  a3[4] = a2;
  *a3 = result;
  return result;
}

uint64_t sub_1C00A5EB4()
{
  uint64_t v0 = sub_1C1518DEC();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C0080D68();
  sub_1C1518AFC();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FAB030], v0);
  sub_1C1517E1C();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1C00A5FE0(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&qword_1EB8953E0);
  uint64_t result = sub_1C151819C();
  if (v13)
  {
    sub_1C0080D68();
    uint64_t v3 = v2;
    uint64_t v4 = (char *)objc_allocWithZone(v2);
    uint64_t v5 = &v4[qword_1EA1AA1F0];
    *(void *)uint64_t v5 = 0;
    *((void *)v5 + 1) = 0;
    sub_1BFC66384((uint64_t)v12, (uint64_t)&v4[qword_1EA1AA1F8]);
    v11.receiver = v4;
    v11.super_class = v3;
    long long v6 = (char *)objc_msgSendSuper2(&v11, sel_init);
    uint64_t v7 = *(void *)&v6[qword_1EA1AA1F8 + 24];
    uint64_t v8 = *(void *)&v6[qword_1EA1AA1F8 + 32];
    __swift_project_boxed_opaque_existential_1(&v6[qword_1EA1AA1F8], v7);
    long long v9 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v10 = v6;
    v9(v6, v7, v8);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    return (uint64_t)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C00A6108@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C00A6148(a1, (uint64_t (*)(void))type metadata accessor for PuzzleRankProvider, (uint64_t)&off_1F1C38EB8, a2);
}

uint64_t sub_1C00A6128@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C00A6148(a1, (uint64_t (*)(void))type metadata accessor for PuzzleDifficultyDescriptionProvider, (uint64_t)&off_1F1BA87D0, a2);
}

uint64_t sub_1C00A6148@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, (unint64_t *)&qword_1EB87A270);
  uint64_t result = sub_1C151818C();
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = a2(0);
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v8;
    a4[3] = v9;
    a4[4] = a3;
    *a4 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C00A61EC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, (unint64_t *)&qword_1EB87A270);
  uint64_t result = sub_1C151818C();
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v5 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB884AB0);
  uint64_t result = sub_1C151819C();
  if (!v11)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB897400);
  uint64_t result = sub_1C151819C();
  if (v9)
  {
    uint64_t v6 = type metadata accessor for PuzzleNavigationBarThemeProvider();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v5;
    sub_1BFC773DC(&v10, v7 + 24);
    uint64_t result = sub_1BFC773DC(&v8, v7 + 64);
    a2[3] = v6;
    a2[4] = (uint64_t)&off_1F1BAE820;
    *a2 = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1C00A6354()
{
  sub_1BFCB6824(0, &qword_1EB8790E8);
  sub_1C1518B0C();
  swift_release();
  type metadata accessor for DebugCommandHandler();
  sub_1C1518AFC();
  swift_release();
  type metadata accessor for WebEmbedDatastoreRadarCommandHandler();
  sub_1C1518AFC();
  swift_release();
  type metadata accessor for WebEmbedDataSourceRadarCommandHandler();
  sub_1C1518AFC();
  swift_release();
  type metadata accessor for WebEmbedDatastoreCopyToClipboardCommandHandler();
  sub_1C1518AFC();
  swift_release();
  type metadata accessor for CopySportsEventUmcIdCommandHandler();
  sub_1C1518AFC();
  swift_release();
  type metadata accessor for ResetPuzzleProgressCommandHandler();
  sub_1C1518AFC();
  swift_release();
  type metadata accessor for SetPuzzleStreakEligibleHandler();
  sub_1C1518AFC();
  return swift_release();
}

uint64_t sub_1C00A6534@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB895430);
  uint64_t result = sub_1C151819C();
  if (!v18)
  {
    __break(1u);
    goto LABEL_9;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB895790);
  uint64_t result = sub_1C151819C();
  if (!v15)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB8959A0);
  uint64_t result = sub_1C151819C();
  if (!v13)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB895B48);
  uint64_t result = sub_1C151819C();
  if (!v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB895B50);
  uint64_t result = sub_1C151819C();
  if (!v9)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB895B58);
  uint64_t result = sub_1C151819C();
  if (v7)
  {
    uint64_t v5 = (objc_class *)type metadata accessor for DebugGroupLayoutViewFactory();
    id v6 = objc_allocWithZone(v5);
    uint64_t result = (uint64_t)sub_1C130D070((uint64_t)v17, v15, v16, v13, v14, v11, v12, v9, v10, v7, v8);
    a2[3] = (uint64_t)v5;
    a2[4] = (uint64_t)&off_1F1C29940;
    *a2 = result;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1C00A67C8(void *a1)
{
  sub_1BFC66384((uint64_t)a1, (uint64_t)v15);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for FeedFontManager();
  uint64_t result = sub_1C151818C();
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v3 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC39268(0, (unint64_t *)&qword_1EB87A130);
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v4 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFC9DBE8(0, &qword_1EB87AEF8);
  uint64_t result = sub_1C151818C();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB895310);
  uint64_t result = sub_1C151819C();
  if (!v14)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB88D6F0);
  uint64_t result = sub_1C151819C();
  if (!v12)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, &qword_1EB871540);
  uint64_t result = sub_1C151819C();
  if (!v10)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BFCB6824(0, (unint64_t *)&unk_1EB8955C0);
  uint64_t result = sub_1C151819C();
  if (v8)
  {
    type metadata accessor for DebugCommandHandler();
    id v6 = (void *)swift_allocObject();
    sub_1BFC773DC(v15, (uint64_t)(v6 + 2));
    v6[7] = v3;
    v6[8] = v4;
    v6[9] = v5;
    sub_1BFC773DC(&v13, (uint64_t)(v6 + 10));
    sub_1BFC773DC(&v11, (uint64_t)(v6 + 15));
    sub_1BFC773DC(&v9, (uint64_t)(v6 + 20));
    sub_1BFC773DC(&v7, (uint64_t)(v6 + 25));
    return (uint64_t)v6;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1C00A6A78(void *a1)
{
  return sub_1BFC88088(a1, (void (*)(void))type metadata accessor for WebEmbedRadarAttachmentProvider, (void (*)(void))type metadata accessor for WebEmbedDatastoreRadarCommandHandler);
}

uint64_t sub_1C00A6AA4(void *a1)
{
  return sub_1BFCBE638(a1, (unint64_t *)&unk_1EB88D6E0, (uint64_t)&protocol descriptor for WebEmbedDataSourceManagerType, (void (*)(void))type metadata accessor for WebEmbedDataSourceRadarCommandHandler, (void (*)(unsigned char *, uint64_t))sub_1BFC773DC);
}

uint64_t sub_1C00A6AE0(void *a1)
{
  return sub_1BFCBE638(a1, (unint64_t *)&unk_1EB88D6E0, (uint64_t)&protocol descriptor for WebEmbedDataSourceManagerType, (void (*)(void))type metadata accessor for WebEmbedDatastoreCopyToClipboardCommandHandler, (void (*)(unsigned char *, uint64_t))sub_1BFC773DC);
}

uint64_t sub_1C00A6B1C()
{
  type metadata accessor for CopySportsEventUmcIdCommandHandler();
  return swift_allocObject();
}

uint64_t sub_1C00A6B50(void *a1)
{
  return sub_1BFCBE638(a1, (unint64_t *)&unk_1EB897400, (uint64_t)&protocol descriptor for PuzzleHistoryServiceType, (void (*)(void))type metadata accessor for ResetPuzzleProgressCommandHandler, (void (*)(unsigned char *, uint64_t))sub_1BFC773DC);
}

uint64_t sub_1C00A6B8C(void *a1)
{
  return sub_1BFCBE638(a1, (unint64_t *)&unk_1EB897400, (uint64_t)&protocol descriptor for PuzzleHistoryServiceType, (void (*)(void))type metadata accessor for SetPuzzleStreakEligibleHandler, (void (*)(unsigned char *, uint64_t))sub_1BFC773DC);
}

uint64_t sub_1C00A6BC8(uint64_t a1, void *a2)
{
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for DebugCommandHandler();
  uint64_t result = sub_1C151818C();
  if (!result)
  {
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    return result;
  }
  swift_getObjectType();
  if (qword_1EB87B118 != -1) {
    swift_once();
  }
  sub_1BFD52288(&qword_1EB876418, 255, (void (*)(uint64_t))type metadata accessor for DebugCommandHandler);
  sub_1C151AD9C();
  if (qword_1EB87B120 != -1) {
    swift_once();
  }
  sub_1C151AD9C();
  if (qword_1EB87B108 != -1) {
    swift_once();
  }
  sub_1C151AD9C();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for WebEmbedDatastoreRadarCommandHandler();
  uint64_t result = sub_1C151818C();
  if (!result) {
    goto LABEL_28;
  }
  if (qword_1EB8848E8 != -1) {
    swift_once();
  }
  type metadata accessor for WebEmbedDataVisualization();
  sub_1BFD52288(&qword_1EB88F400, 255, (void (*)(uint64_t))type metadata accessor for WebEmbedDatastoreRadarCommandHandler);
  sub_1C151AD9C();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for WebEmbedDatastoreCopyToClipboardCommandHandler();
  uint64_t result = sub_1C151818C();
  if (!result) {
    goto LABEL_29;
  }
  if (qword_1EB884900 != -1) {
    swift_once();
  }
  sub_1BFD52288((unint64_t *)&unk_1EB884BF8, 255, (void (*)(uint64_t))type metadata accessor for WebEmbedDatastoreCopyToClipboardCommandHandler);
  sub_1C151AD9C();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for WebEmbedDataSourceRadarCommandHandler();
  uint64_t result = sub_1C151818C();
  if (!result) {
    goto LABEL_30;
  }
  if (qword_1EB885410 != -1) {
    swift_once();
  }
  sub_1BFC9DBE8(0, (unint64_t *)&qword_1EB890230);
  sub_1BFD52288(&qword_1EB88F608, 255, (void (*)(uint64_t))type metadata accessor for WebEmbedDataSourceRadarCommandHandler);
  sub_1C151AD9C();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for CopySportsEventUmcIdCommandHandler();
  uint64_t result = sub_1C151818C();
  if (!result) {
    goto LABEL_31;
  }
  if (qword_1EB885438 != -1) {
    swift_once();
  }
  sub_1C0064B10(0, (unint64_t *)&qword_1EB879C00, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  sub_1BFD52288(qword_1EB88EB48, 255, (void (*)(uint64_t))type metadata accessor for CopySportsEventUmcIdCommandHandler);
  sub_1C151AD9C();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for ResetPuzzleProgressCommandHandler();
  uint64_t result = sub_1C151818C();
  if (!result) {
    goto LABEL_32;
  }
  if (qword_1EB885450 != -1) {
    swift_once();
  }
  sub_1BFC9DBE8(0, (unint64_t *)&qword_1EB8901B0);
  sub_1BFD52288(qword_1EB88EA18, 255, (void (*)(uint64_t))type metadata accessor for ResetPuzzleProgressCommandHandler);
  sub_1C151AD9C();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for SetPuzzleStreakEligibleHandler();
  uint64_t result = sub_1C151818C();
  if (!result) {
    goto LABEL_33;
  }
  if (qword_1EB8848B8 != -1) {
    swift_once();
  }
  sub_1BFD52288(&qword_1EB884B90, 255, (void (*)(uint64_t))type metadata accessor for SetPuzzleStreakEligibleHandler);
  sub_1C151AD9C();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1C00A7360()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1C00A7370()
{
  return sub_1C1516FCC();
}

uint64_t sub_1C00A73A0()
{
  return sub_1BFC467C4();
}

uint64_t sub_1C00A73A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, uint64_t a11, long long a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,long long a23,uint64_t a24,uint64_t a25)
{
  uint64_t v39 = type metadata accessor for FormatSponsoredBannerNodeRenderer();
  unsigned __int8 v40 = &off_1F1B8C500;
  *(void *)&long long v38 = a18;
  swift_unknownObjectWeakInit();
  *(void *)(a25 + 32) = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for FormatLayoutViewDebugger();
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = sub_1BFEACEF4;
  *(void *)(v32 + 24) = 0;
  *(void *)(a25 + 40) = v32;
  type metadata accessor for FormatTimer();
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = MEMORY[0x1E4FBC868];
  *(void *)(v33 + 16) = MEMORY[0x1E4FBC868];
  *(void *)(v33 + 24) = v34;
  *(void *)(a25 + 304) = v33;
  type metadata accessor for FormatVisibilityRenderer();
  *(void *)(a25 + 312) = swift_allocObject();
  *(void *)(a25 + 48) = a1;
  *(void *)(a25 + 56) = a2;
  *(void *)(a25 + 64) = a3;
  *(void *)(a25 + 72) = a4;
  *(void *)(a25 + 80) = a5;
  *(void *)(a25 + 88) = a6;
  *(void *)(a25 + 96) = a7;
  *(void *)(a25 + 104) = a8;
  *(_OWORD *)(a25 + 112) = a9;
  *(_OWORD *)(a25 + 128) = a10;
  *(void *)(a25 + 144) = a11;
  type metadata accessor for FormatVideoPlayerViewControllerFactory();
  swift_allocObject();
  sub_1C0090598();
  swift_allocObject();
  uint64_t v35 = sub_1C151B12C();
  *(_OWORD *)(a25 + 152) = a12;
  *(_OWORD *)(a25 + 168) = a13;
  *(void *)(a25 + 184) = a14;
  *(void *)(a25 + 192) = v35;
  *(void *)(a25 + 200) = a15;
  *(void *)(a25 + 208) = a17;
  *(void *)(a25 + 216) = a16;
  sub_1BFC773DC(&v38, a25 + 224);
  *(_OWORD *)(a25 + 264) = a19;
  *(void *)(a25 + 280) = a20;
  *(void *)(a25 + 288) = a22;
  *(void *)(a25 + 296) = a21;
  *(_OWORD *)(a25 + 320) = a23;
  *(void *)(a25 + 336) = a24;
  return a25;
}

uint64_t sub_1C00A75EC(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = type metadata accessor for HiddenContentPlacardViewLayoutAttributesFactory();
  uint64_t v17 = &off_1F1BF44A0;
  *(void *)&long long v15 = a1;
  uint64_t v13 = type metadata accessor for HiddenContentPlacardViewStyler();
  uint64_t v14 = &off_1F1BED2A0;
  *(void *)&long long v12 = a2;
  sub_1C151706C();
  sub_1C151704C();
  if (qword_1EB8829D0 != -1) {
    swift_once();
  }
  sub_1C151703C();
  swift_release();
  *(void *)(a5 + 144) = v11;
  sub_1BFC773DC(&v15, a5 + 16);
  sub_1BFC773DC(&v12, a5 + 56);
  sub_1BFC773DC(a3, a5 + 96);
  *(void *)(a5 + 136) = a4;
  return a5;
}

uint64_t sub_1C00A76F4(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v25 = type metadata accessor for HiddenContentPlacardViewLayoutAttributesFactory();
  uint64_t v26 = &off_1F1BF44A0;
  v24[0] = a1;
  uint64_t v22 = type metadata accessor for HiddenContentPlacardViewStyler();
  uint64_t v23 = &off_1F1BED2A0;
  v21[0] = a2;
  type metadata accessor for HiddenContentPlacardViewRenderer();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v24, v25);
  __n128 v10 = MEMORY[0x1F4188790](v9);
  long long v12 = (void *)((char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v13 + 16))(v12, v10);
  uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v21, v22);
  __n128 v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (void *)((char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v18 + 16))(v17, v15);
  uint64_t v19 = sub_1C00A75EC(*v12, *v17, a3, a4, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return v19;
}

char *sub_1C00A78E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, char *a12)
{
  uint64_t v80 = a6;
  uint64_t v76 = a5;
  uint64_t v86 = a4;
  uint64_t v87 = a10;
  uint64_t v77 = a9;
  uint64_t v78 = a11;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v16 = sub_1C1519EBC();
  uint64_t v84 = *(void *)(v16 - 8);
  uint64_t v85 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v81 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v83 = (char *)&v76 - v19;
  sub_1C00A8C00(0, (unint64_t *)&qword_1EB8948A0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v76 - v21;
  uint64_t v91 = type metadata accessor for PuzzleDataManager();
  unint64_t v92 = &off_1F1B98C80;
  uint64_t v79 = v91;
  v90[0] = a8;
  uint64_t v23 = OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_activityIndicator;
  id v24 = objc_allocWithZone(MEMORY[0x1E4FB1400]);
  uint64_t v25 = a12;
  *(void *)&a12[v23] = objc_msgSend(v24, sel_initWithActivityIndicatorStyle_, 100);
  uint64_t v26 = sub_1C1515FDC();
  uint64_t v27 = *(void *)(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v22, 1, 1, v26);
  long long v28 = (void *)sub_1C151E5EC();
  uint64_t v29 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v22, 1, v26) != 1)
  {
    uint64_t v29 = (void *)sub_1C1515E9C();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v22, v26);
  }
  uint64_t v30 = OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_embedLocation;
  id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F9F900]), sel_initWithContext_URL_, v28, v29);

  *(void *)&v25[v30] = v31;
  uint64_t v32 = OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_onReuse;
  sub_1C0064B10(0, (unint64_t *)&qword_1EB871600, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FAD760]);
  *(void *)&v25[v32] = objc_msgSend(objc_allocWithZone(v33), sel_init);
  uint64_t v34 = &v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_reuseIdentifier];
  *(void *)uint64_t v34 = 0;
  *((void *)v34 + 1) = 0;
  v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_isResizable] = 0;
  uint64_t v35 = &v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_puzzleData];
  uint64_t v36 = type metadata accessor for PuzzleData();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  *(void *)&v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v37 = &v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_puzzleID];
  *(void *)uint64_t v37 = 0;
  *((void *)v37 + 1) = 0xE000000000000000;
  long long v38 = &v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_contentFrame];
  *(_OWORD *)long long v38 = 0u;
  *((_OWORD *)v38 + 1) = 0u;
  uint64_t v39 = &v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_viewportSize];
  *(void *)uint64_t v39 = 0;
  *((void *)v39 + 1) = 0;
  uint64_t v40 = OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_feedConfiguration;
  *(void *)&v25[v40] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F9F8F8]), sel_init);
  id v41 = (uint64_t *)&v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_onEmbedInteraction];
  uint64_t *v41 = 0;
  v41[1] = 0;
  v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController____lazy_storage___contentEnvironment] = 8;
  v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_hasPuzzleDataLoadAttempted] = 0;
  uint64_t v42 = OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_webContentViewController;
  *(void *)&v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_webContentViewController] = a1;
  *(void *)&v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_interactionProvider] = a2;
  *(void *)&v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_actionProvider] = a3;
  id v43 = a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v44 = objc_msgSend(v43, sel_errorProvider);
  *(void *)&v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_errorProvider] = v44;
  id v45 = objc_msgSend(v43, sel_presentationManager);
  *(void *)&v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_presentationManager] = v45;
  double v46 = &v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_puzzleDataManager];
  uint64_t v47 = v76;
  *(void *)double v46 = v86;
  *((void *)v46 + 1) = v47;
  sub_1BFC66384((uint64_t)v90, (uint64_t)&v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_puzzleAccessArbiter]);
  *(void *)&v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_bundleSubscriptionManager] = v77;
  LOBYTE(v89[0]) = 0;
  sub_1C0091EC4(0, (unint64_t *)&qword_1EA1966D8, (void (*)(void))sub_1C00A8C64);
  swift_allocObject();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  *(void *)&v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_puzzleLoadingStateMachine] = sub_1C15181FC();
  swift_beginAccess();
  uint64_t v48 = *v41;
  uint64_t *v41 = 0;
  v41[1] = 0;
  sub_1BFC3E5C0(v48);
  id v49 = v78;
  *(void *)&v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_textInputTraits] = v78;
  sub_1BFC66384(v87, (uint64_t)&v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_puzzleDifficultyDescriptionProvider]);
  double v50 = *(void **)&v25[v42];
  sub_1C00A8C00(0, (unint64_t *)&qword_1EB861498, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x1E4FBBE00]);
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_1C152A660;
  double v52 = (void *)*MEMORY[0x1E4FB2CE0];
  id v53 = (void *)*MEMORY[0x1E4FB2D78];
  *(void *)(v51 + 32) = *MEMORY[0x1E4FB2CE0];
  *(void *)(v51 + 40) = v53;
  unint64_t v54 = (void *)*MEMORY[0x1E4FB2DA0];
  id v55 = (void *)*MEMORY[0x1E4FB2D70];
  *(void *)(v51 + 48) = *MEMORY[0x1E4FB2DA0];
  *(void *)(v51 + 56) = v55;
  type metadata accessor for Identifier(0);
  id v56 = v49;
  id v57 = v50;
  id v58 = v52;
  id v59 = v53;
  id v60 = v54;
  id v61 = v55;
  id v62 = (void *)sub_1C151EBAC();
  swift_bridgeObjectRelease();
  objc_msgSend(v57, sel_removeMenusForIdentifiers_, v62);

  id v63 = objc_msgSend(*(id *)&v25[v42], sel_messageHandlerManager);
  uint64_t v64 = v80;
  swift_unknownObjectRetain();
  id v65 = (void *)sub_1C151E5EC();
  objc_msgSend(v63, sel_addMessageHandler_name_, v64, v65);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  if (swift_dynamicCastClass())
  {
    *(void *)(v64 + OBJC_IVAR____TtC8NewsFeed28PuzzleProgressMessageHandler_delegate + 8) = &off_1F1B98C70;
    swift_unknownObjectWeakAssign();
  }
  type metadata accessor for Localized();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v67 = self;
  id v68 = objc_msgSend(v67, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_1C1515B8C();

  id v69 = objc_msgSend(v67, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_1C1515B8C();

  CGRect v70 = v83;
  sub_1C1519EAC();
  uint64_t v72 = v84;
  uint64_t v71 = v85;
  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v81, v70, v85);
  v89[3] = sub_1C1519FFC();
  v89[4] = MEMORY[0x1E4FABBF0];
  __swift_allocate_boxed_opaque_existential_0(v89);
  sub_1C1519FDC();
  id v73 = objc_allocWithZone((Class)sub_1C151CD1C());
  *(void *)&v25[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_errorView] = sub_1C151CD0C();

  v88.receiver = v25;
  v88.super_class = ObjectType;
  id v74 = (char *)objc_msgSendSuper2(&v88, sel_initWithNibName_bundle_, 0, 0);
  *(void *)(*(void *)&v74[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_puzzleDataManager]
            + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_delegate
            + 8) = &off_1F1BF3378;
  swift_unknownObjectWeakAssign();
  __swift_destroy_boxed_opaque_existential_1(v87);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v70, v71);
  return v74;
}

char *sub_1C00A8278(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  uint64_t v64 = a6;
  uint64_t v65 = a8;
  uint64_t v67 = a7;
  uint64_t v63 = a5;
  uint64_t v62 = a4;
  uint64_t v61 = a2;
  id v60 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  sub_1C00A8ACC(0);
  MEMORY[0x1F4188790](v10 - 8);
  long long v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  __n128 v15 = (char *)&v60 - v14;
  v71[3] = type metadata accessor for WebEmbedConfigurationProvider();
  v71[4] = &off_1F1C0FF40;
  v71[0] = a3;
  uint64_t v16 = &a9[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_layoutIdentifier];
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  uint64_t v17 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_onReuse;
  sub_1C0064B10(0, (unint64_t *)&qword_1EB871600, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FAD760]);
  id v19 = objc_allocWithZone(v18);
  uint64_t v20 = a9;
  *(void *)&a9[v17] = objc_msgSend(v19, sel_init);
  uint64_t v21 = &v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_onSizeInvalidation];
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v22 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_contentFrameView;
  *(void *)&v20[v22] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  swift_weakInit();
  uint64_t v23 = (uint64_t *)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_onEmbedInteraction];
  *uint64_t v23 = 0;
  v23[1] = 0;
  v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_showsLoadingSpinner] = 1;
  uint64_t v24 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_errorView;
  *(void *)&v20[v24] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for WebEmbedErrorView()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_errorPosition] = 0;
  v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_contentFrameChanged] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_preferredContentSizeCategoryOnPopulate] = 0;
  uint64_t v25 = &v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_embedURL];
  uint64_t v26 = sub_1C1515FDC();
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
  v27(v25, 1, 1, v26);
  v27(&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_dataFeedURL], 1, 1, v26);
  *(void *)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_location] = 0;
  v27(&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_sourceURL], 1, 1, v26);
  uint64_t v28 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_feedConfiguration;
  *(void *)&v20[v28] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F9F8F8]), sel_init);
  uint64_t v29 = &v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_viewportSize];
  *(void *)uint64_t v29 = 0;
  *((void *)v29 + 1) = 0;
  v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_isResizable] = 0;
  uint64_t v30 = &v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_preferredSize];
  *(void *)uint64_t v30 = 0;
  *((void *)v30 + 1) = 0;
  v30[16] = 1;
  id v31 = &v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_dataVisualization];
  uint64_t v32 = type metadata accessor for WebEmbedDataVisualization();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  *(void *)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_stateMachine] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_errorState] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_loadedState] = 0;
  uint64_t v33 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_activityIndicator;
  *(void *)&v20[v33] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1400]), sel_initWithActivityIndicatorStyle_, 100);
  uint64_t v34 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_tapGestureRecognizer;
  *(void *)&v20[v34] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D38]), sel_initWithTarget_action_, 0, 0);
  uint64_t v35 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController__lastDatastoreUpdate;
  uint64_t v36 = type metadata accessor for WebEmbedDatastoreUpdate();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v15, 1, 1, v36);
  sub_1C00A8B00((uint64_t)v15, (uint64_t)v12);
  sub_1C00A8C00(0, &qword_1EB863E08, (uint64_t (*)(uint64_t))sub_1C00A8ACC, MEMORY[0x1E4FAB060]);
  swift_allocObject();
  uint64_t v37 = sub_1C1518E9C();
  sub_1C00A8B64((uint64_t)v15);
  *(void *)&v20[v35] = v37;
  *(void *)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_debugLoadView] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_debugVisualizationView] = 0;
  long long v38 = v60;
  *(void *)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_webContentViewController] = v60;
  id v39 = v38;
  id v40 = objc_msgSend(v39, sel_errorProvider);
  *(void *)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_errorProvider] = v40;
  id v41 = objc_msgSend(v39, sel_presentationManager);
  *(void *)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_presentationManager] = v41;
  id v42 = objc_msgSend(v39, sel_preferredSizeManager);
  *(void *)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_preferredSizeManager] = v42;
  sub_1BFC66384((uint64_t)v71, (uint64_t)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_configurationProvider]);
  *(void *)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_interactionProvider] = v61;
  *(void *)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_pictureInPictureState] = v62;
  uint64_t v43 = v63;
  sub_1BFC66384(v63, (uint64_t)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_webEmbedDataSourceManager]);
  uint64_t v44 = v64;
  sub_1BFC66384(v64, (uint64_t)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_liveActivityWebEmbedDatastoreManager]);
  uint64_t v45 = v67;
  sub_1BFC66384(v67, (uint64_t)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_coordinator]);
  sub_1BFC66384(v45, (uint64_t)v70);
  double v46 = (objc_class *)type metadata accessor for WebEmbedURLHandlerDelegate();
  uint64_t v47 = (char *)objc_allocWithZone(v46);
  swift_unknownObjectWeakInit();
  uint64_t v48 = &v47[OBJC_IVAR____TtC8NewsFeed26WebEmbedURLHandlerDelegate_webEmbedIdentifier];
  *(void *)uint64_t v48 = 0;
  *((void *)v48 + 1) = 0;
  sub_1BFC66384((uint64_t)v70, (uint64_t)&v47[OBJC_IVAR____TtC8NewsFeed26WebEmbedURLHandlerDelegate_webEmbedCoordinator]);
  *(void *)&v47[OBJC_IVAR____TtC8NewsFeed26WebEmbedURLHandlerDelegate_tipManager] = v65;
  v69.receiver = v47;
  v69.super_class = v46;
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  id v49 = objc_msgSendSuper2(&v69, sel_init);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
  *(void *)&v20[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_delegate] = v49;
  swift_beginAccess();
  uint64_t v50 = *v23;
  *uint64_t v23 = 0;
  v23[1] = 0;
  sub_1BFC3E5C0(v50);

  v68.receiver = v20;
  v68.super_class = ObjectType;
  uint64_t v51 = (char *)objc_msgSendSuper2(&v68, sel_initWithNibName_bundle_, 0, 0);
  uint64_t v52 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_webContentViewController;
  id v53 = *(void **)&v51[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_webContentViewController];
  sub_1C0DCBE4C();
  type metadata accessor for Identifier(0);
  unint64_t v54 = v51;
  id v55 = v53;
  id v56 = (void *)sub_1C151EBAC();
  swift_bridgeObjectRelease();
  objc_msgSend(v55, sel_removeMenusForIdentifiers_, v56);

  objc_msgSend(*(id *)&v54[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_tapGestureRecognizer], sel_addTarget_action_, v54, sel_handleTapWithRecognizer_);
  id v57 = sub_1C03D6D48();
  id v58 = *(void **)&v54[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_stateMachine];
  *(void *)&v54[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_stateMachine] = v57;

  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1C151847C();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
  objc_msgSend(*(id *)&v51[v52], sel_setFocusShouldStartInputSession_, 1);

  __swift_destroy_boxed_opaque_existential_1(v67);
  __swift_destroy_boxed_opaque_existential_1(v44);
  __swift_destroy_boxed_opaque_existential_1(v43);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
  return v54;
}

void *sub_1C00A8AC4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C00A48E4(a1, a2);
}

void sub_1C00A8ACC(uint64_t a1)
{
}

uint64_t sub_1C00A8B00(uint64_t a1, uint64_t a2)
{
  sub_1C00A8ACC(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C00A8B64(uint64_t a1)
{
  sub_1C00A8ACC(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C00A8BC0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1C00A8BF8(uint64_t a1)
{
  sub_1C03D7918(a1, v1);
}

void sub_1C00A8C00(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_1C00A8C64()
{
  unint64_t result = qword_1EA1966E0;
  if (!qword_1EA1966E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA1966E0);
  }
  return result;
}

uint64_t sub_1C00A8CB8()
{
  return swift_deallocObject();
}

uint64_t sub_1C00A8CF8(uint64_t a1)
{
  if (a1 < 0) {
    uint64_t v1 = (a1 & 0x7FFFFFFFFFFFFFFFLL) + 24;
  }
  else {
    uint64_t v1 = a1 + 16;
  }
  swift_beginAccess();
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  if (!v2) {
    goto LABEL_27;
  }
  uint64_t v3 = *(void *)(*(void *)v1 + 8 * v2 + 24);
  if (v3 < 0)
  {
    uint64_t v8 = v3 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v9 = *(void *)(v8 + 16);
    unint64_t v10 = *(void *)(v8 + 24);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v11 = sub_1BFE7E574(v9, v10);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    if (!v13)
    {
      swift_release();
      char v16 = 1;
      return v16 & 1;
    }
    if (v11 != 32 || v13 != 0xE100000000000000)
    {
      char v15 = sub_1C1520A9C();
      swift_bridgeObjectRelease();
      swift_release();
      char v16 = v15 ^ 1;
      return v16 & 1;
    }
    swift_bridgeObjectRelease();
    swift_release();
LABEL_27:
    char v16 = 0;
    return v16 & 1;
  }
  uint64_t v4 = qword_1EA194840;
  swift_retain_n();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_1EA1A3490;
  uint64_t v6 = sub_1C151E6BC();
  LOBYTE(v5) = sub_1BFF896B4(v6, v7, v5);
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
LABEL_26:
    swift_release_n();
    goto LABEL_27;
  }
  swift_beginAccess();
  uint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = sub_1C0F046D0(v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0) {
    uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
  }
  if (!v21)
  {
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  uint64_t v22 = sub_1BFE7E574(v18, v20);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  if (v24)
  {
    if (v22 == 32 && v24 == 0xE100000000000000) {
      char v25 = 1;
    }
    else {
      char v25 = sub_1C1520A9C();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v25 = 0;
  }
  swift_release_n();
  char v16 = v25 ^ 1;
  return v16 & 1;
}

uint64_t sub_1C00A8F68()
{
  sub_1C00A9250();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C00A92A8();
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16);
  v14(v9, v0, v2, v11);
  sub_1C00A930C();
  sub_1C151F09C();
  *(void *)&v9[*(int *)(v7 + 44)] = v29[0];
  sub_1C00A9364((uint64_t)v9, (uint64_t)v13);
  char v15 = &v13[*(int *)(v7 + 44)];
  uint64_t v16 = *(void *)v15;
  sub_1C151F0EC();
  if (v16 == v29[0])
  {
LABEL_2:
    uint64_t v17 = 0;
    goto LABEL_15;
  }
  uint64_t v28 = (void (*)(char *, char *, uint64_t))v14;
  uint64_t v18 = (void (**)(char *, uint64_t))(v3 + 8);
  while (1)
  {
    unint64_t v20 = (void (*)(uint64_t *, void))sub_1C151F19C();
    uint64_t v22 = *v21;
    swift_retain();
    v20(v29, 0);
    v28(v5, v13, v2);
    sub_1C151F0FC();
    (*v18)(v5, v2);
    if ((v22 & 0x8000000000000000) == 0)
    {
      swift_release();
      goto LABEL_5;
    }
    if (sub_1C151E6BC() == 6648432 && v23 == 0xE300000000000000) {
      break;
    }
    char v25 = sub_1C1520A9C();
    swift_release();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_14;
    }
LABEL_5:
    uint64_t v19 = *(void *)v15;
    sub_1C151F0EC();
    if (v19 == v29[0]) {
      goto LABEL_2;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v17 = 1;
LABEL_15:
  sub_1C00A93C8((uint64_t)v13);
  return v17;
}

void sub_1C00A9250()
{
  if (!qword_1EB8611A0)
  {
    unint64_t v0 = sub_1C1518E5C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB8611A0);
    }
  }
}

void sub_1C00A92A8()
{
  if (!qword_1EB863418)
  {
    sub_1C00A9250();
    sub_1C00A930C();
    unint64_t v0 = sub_1C152037C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB863418);
    }
  }
}

unint64_t sub_1C00A930C()
{
  unint64_t result = qword_1EB862960;
  if (!qword_1EB862960)
  {
    sub_1C00A9250();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB862960);
  }
  return result;
}

uint64_t sub_1C00A9364(uint64_t a1, uint64_t a2)
{
  sub_1C00A92A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C00A93C8(uint64_t a1)
{
  sub_1C00A92A8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *assignWithCopy for FormatVideoPlayerContent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1C00A9468(void *a1)
{
  return *a1 >> 63;
}

void *sub_1C00A9474(void *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *sub_1C00A9484(uint64_t *result, uint64_t a2)
{
  *unint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for FormatDOMStackNode()
{
  return &type metadata for FormatDOMStackNode;
}

uint64_t FormatProgressPieOptions.radius.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t FormatProgressPieOptions.radius.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = v2;
  return result;
}

uint64_t (*FormatProgressPieOptions.radius.modify())(void)
{
  return nullsub_1;
}

uint64_t FormatProgressPieOptions.clockwise.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 24);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return sub_1BFE94AB4(v2, v3, v4);
}

uint64_t sub_1C00A9514(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  char v8 = *(unsigned char *)(a2 + 24);
  sub_1BFE94AB4(*(void *)a1, v4, v5);
  uint64_t result = sub_1BFE94AD4(v6, v7, v8);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 24) = v5;
  return result;
}

uint64_t FormatProgressPieOptions.clockwise.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = sub_1BFE94AD4(*(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
  *(void *)(v1 + 8) = v2;
  *(void *)(v1 + 16) = v3;
  *(unsigned char *)(v1 + 24) = v4;
  return result;
}

uint64_t (*FormatProgressPieOptions.clockwise.modify())(void)
{
  return nullsub_1;
}

uint64_t FormatProgressPieOptions.stepPercentage.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t FormatProgressPieOptions.minPercentage.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t FormatProgressPieOptions.minPercentage.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = v2;
  return result;
}

uint64_t (*FormatProgressPieOptions.minPercentage.modify())(void)
{
  return nullsub_1;
}

uint64_t FormatProgressPieOptions.maxPercentage.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t FormatProgressPieOptions.maxPercentage.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = v2;
  return result;
}

uint64_t (*FormatProgressPieOptions.maxPercentage.modify())(void)
{
  return nullsub_1;
}

uint64_t FormatProgressPieOptions.value(contextLayoutOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)v2;
  uint64_t v6 = *(void *)(v2 + 8);
  uint64_t v7 = *(void *)(v2 + 16);
  char v8 = *(unsigned char *)(v2 + 24);
  uint64_t v10 = *(void *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 40);
  uint64_t v18 = *(void *)(v2 + 48);
  swift_bridgeObjectRetain();
  double v11 = sub_1BFF493E4(a1, v5);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3)
  {
    sub_1BFE94AB4(v6, v7, v8);
    char v13 = FormatBoolean.value(contextLayoutOptions:)(a1);
    sub_1BFE94AD4(v6, v7, v8);
    if (v10)
    {
      swift_bridgeObjectRetain();
      double v14 = sub_1BFF493E4(a1, v10);
      swift_bridgeObjectRelease();
    }
    else
    {
      double v14 = 0.0;
    }
    swift_bridgeObjectRetain();
    double v15 = sub_1BFF493E4(a1, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    double v16 = sub_1BFF493E4(a1, v18);
    uint64_t result = swift_bridgeObjectRelease();
    *(double *)a2 = v11;
    *(unsigned char *)(a2 + 8) = v13 & 1;
    *(double *)(a2 + 16) = v14;
    *(double *)(a2 + 24) = v15;
    *(double *)(a2 + 32) = v16;
  }
  return result;
}

uint64_t sub_1C00A9834@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatProgressPieOptions.init(from:)(a1, a2);
}

uint64_t sub_1C00A984C(void *a1)
{
  return FormatProgressPieOptions.encode(to:)(a1);
}

double FormatProgressPieOptionsResolved.radius.getter()
{
  return *(double *)v0;
}

void FormatProgressPieOptionsResolved.radius.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*FormatProgressPieOptionsResolved.radius.modify())(void)
{
  return nullsub_1;
}

uint64_t FormatProgressPieOptionsResolved.clockwise.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t FormatProgressPieOptionsResolved.clockwise.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*FormatProgressPieOptionsResolved.clockwise.modify())(void)
{
  return nullsub_1;
}

double FormatProgressPieOptionsResolved.stepPercentage.getter()
{
  return *(double *)(v0 + 16);
}

void FormatProgressPieOptionsResolved.stepPercentage.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*FormatProgressPieOptionsResolved.stepPercentage.modify())(void)
{
  return nullsub_1;
}

double FormatProgressPieOptionsResolved.minPercentage.getter()
{
  return *(double *)(v0 + 24);
}

void FormatProgressPieOptionsResolved.minPercentage.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*FormatProgressPieOptionsResolved.minPercentage.modify())(void)
{
  return nullsub_1;
}

double FormatProgressPieOptionsResolved.maxPercentage.getter()
{
  return *(double *)(v0 + 32);
}

void FormatProgressPieOptionsResolved.maxPercentage.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*FormatProgressPieOptionsResolved.maxPercentage.modify())(void)
{
  return nullsub_1;
}

uint64_t sub_1C00A995C()
{
  uint64_t result = 0x737569646172;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7369776B636F6C63;
      break;
    case 2:
      uint64_t result = 0x6372655070657473;
      break;
    case 3:
      unsigned int v2 = 1349413229;
      goto LABEL_6;
    case 4:
      unsigned int v2 = 1350066541;
LABEL_6:
      uint64_t result = v2 | 0x6563726500000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C00A9A14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C00AAD78(a1, a2);
  *a3 = result;
  return result;
}

void sub_1C00A9A3C(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1C00A9A48(uint64_t a1)
{
  unint64_t v2 = sub_1C00AA518();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C00A9A84(uint64_t a1)
{
  unint64_t v2 = sub_1C00AA518();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t FormatProgressPieOptionsResolved.encode(to:)(void *a1)
{
  sub_1C00AA56C(0, &qword_1EA196710, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C00AA518();
  sub_1C1520F0C();
  char v14 = 0;
  sub_1C15207EC();
  if (!v1)
  {
    char v13 = 1;
    sub_1C15207DC();
    char v12 = 2;
    sub_1C15207EC();
    char v11 = 3;
    sub_1C15207EC();
    char v10 = 4;
    sub_1C15207EC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t FormatProgressPieOptionsResolved.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1C00AA56C(0, &qword_1EA196720, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v20 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C00AA518();
  sub_1C1520EBC();
  if (!v2)
  {
    char v25 = 0;
    sub_1C15206BC();
    uint64_t v11 = v10;
    char v24 = 1;
    char v12 = sub_1C15206AC();
    char v23 = 2;
    sub_1C15206BC();
    uint64_t v14 = v13;
    char v22 = 3;
    sub_1C15206BC();
    uint64_t v16 = v15;
    char v21 = 4;
    sub_1C15206BC();
    uint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(void *)a2 = v11;
    *(unsigned char *)(a2 + 8) = v12 & 1;
    *(void *)(a2 + 16) = v14;
    *(void *)(a2 + 24) = v16;
    *(void *)(a2 + 32) = v19;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1C00A9F14@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatProgressPieOptionsResolved.init(from:)(a1, a2);
}

uint64_t sub_1C00A9F2C(void *a1)
{
  return FormatProgressPieOptionsResolved.encode(to:)(a1);
}

uint64_t sub_1C00A9F60()
{
  sub_1BFF4993C(0, &qword_1EB871450);
  swift_projectBox();
  sub_1BFF4993C(0, &qword_1EB871448);
  swift_projectBox();
  swift_beginAccess();
  sub_1C1518DFC();
  swift_endAccess();
  if (v8)
  {
LABEL_3:
    type metadata accessor for FormatLayoutError();
    sub_1BFE7E51C();
    swift_allocError();
    uint64_t v1 = v0;
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v3 = sub_1C0BA95DC(v2);
    uint64_t v5 = v4;
    swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    v1[1] = v5;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    swift_beginAccess();
    sub_1C1518DFC();
    swift_endAccess();
    swift_beginAccess();
    sub_1C1518DFC();
    swift_endAccess();
    switch((char)v7)
    {
      case 1:
      case 3:
        goto LABEL_10;
      case 2:
        if ((unsigned __int128)(v7 * (__int128)v7) >> 64 != (v7 * v7) >> 63) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 4:
      case 5:
      case 6:
        goto LABEL_3;
      default:
        if (!__OFADD__(v7, v7)) {
          goto LABEL_10;
        }
LABEL_9:
        __break(1u);
LABEL_10:
        swift_beginAccess();
        sub_1C1518E1C();
        uint64_t result = swift_endAccess();
        break;
    }
  }
  return result;
}

uint64_t _s8NewsFeed24FormatProgressPieOptionsV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v11 = sub_1C00DE998(v2, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0) {
    return 0;
  }
  if (v5)
  {
    if (v9)
    {
      if (v3 == v7 && v4 == v8)
      {
        sub_1BFE94AB4(v3, v4, 1);
        sub_1BFE94AB4(v3, v4, 1);
        sub_1BFE94AD4(v3, v4, 1);
        sub_1BFE94AD4(v3, v4, 1);
      }
      else
      {
        char v12 = sub_1C1520A9C();
        sub_1BFE94AB4(v7, v8, 1);
        sub_1BFE94AB4(v3, v4, 1);
        sub_1BFE94AD4(v3, v4, 1);
        sub_1BFE94AD4(v7, v8, 1);
        if ((v12 & 1) == 0) {
          return 0;
        }
      }
      goto LABEL_13;
    }
    sub_1BFE94AB4(v3, v4, 1);
    swift_bridgeObjectRetain();
LABEL_11:
    sub_1BFE94AB4(v7, v8, v9);
    sub_1BFE94AD4(v3, v4, v5);
    sub_1BFE94AD4(v7, v8, v9);
    sub_1BFE94AD4(v3, v4, v5);
    return 0;
  }
  if (v9) {
    goto LABEL_11;
  }
  sub_1BFE94AB4(v7, v8, 0);
  sub_1BFE94AD4(v3, v4, 0);
  sub_1BFE94AD4(v7, v8, 0);
  sub_1BFE94AD4(v3, v4, 0);
  if (((((v3 & 1) == 0) ^ v7) & 1) == 0) {
    return 0;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v13 = sub_1C00DE998(v18, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v14 = sub_1C00DE998(v17, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v14 & 1;
  }
  return 0;
}

unint64_t sub_1C00AA518()
{
  unint64_t result = qword_1EA196718;
  if (!qword_1EA196718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196718);
  }
  return result;
}

void sub_1C00AA56C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1C00AA518();
    unint64_t v7 = a3(a1, &type metadata for FormatProgressPieOptionsResolved.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_1C00AA5D0(uint64_t a1)
{
  unint64_t result = sub_1C00AA5F8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C00AA5F8()
{
  unint64_t result = qword_1EA196728;
  if (!qword_1EA196728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196728);
  }
  return result;
}

unint64_t sub_1C00AA64C(void *a1)
{
  a1[1] = sub_1C00AA684();
  a1[2] = sub_1C00AA6D8();
  unint64_t result = sub_1C00AA72C();
  a1[3] = result;
  return result;
}

unint64_t sub_1C00AA684()
{
  unint64_t result = qword_1EB8617E8;
  if (!qword_1EB8617E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB8617E8);
  }
  return result;
}

unint64_t sub_1C00AA6D8()
{
  unint64_t result = qword_1EB867680;
  if (!qword_1EB867680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB867680);
  }
  return result;
}

unint64_t sub_1C00AA72C()
{
  unint64_t result = qword_1EA196730;
  if (!qword_1EA196730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196730);
  }
  return result;
}

uint64_t sub_1C00AA780@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C00AA78C(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1C00AA7D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 24);
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = v4;
  return sub_1BFE94AB4(v3, v2, v4);
}

uint64_t sub_1C00AA7EC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C00AA7F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 40) = v3;
  return result;
}

uint64_t sub_1C00AA83C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C00AA848(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 48) = v3;
  return result;
}

uint64_t destroy for FormatProgressPieOptions(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1BFE94AD4(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FormatProgressPieOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  sub_1BFE94AB4(v4, v5, v6);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FormatProgressPieOptions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_1BFE94AB4(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  sub_1BFE94AD4(v7, v8, v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FormatProgressPieOptions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = v4;
  sub_1BFE94AD4(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FormatProgressPieOptions()
{
  return &type metadata for FormatProgressPieOptions;
}

uint64_t getEnumTagSinglePayload for FormatProgressPieOptionsResolved(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatProgressPieOptionsResolved(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatProgressPieOptionsResolved()
{
  return &type metadata for FormatProgressPieOptionsResolved;
}

unsigned char *storeEnumTagSinglePayload for FormatProgressPieOptionsResolved.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C00AAC38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatProgressPieOptionsResolved.CodingKeys()
{
  return &type metadata for FormatProgressPieOptionsResolved.CodingKeys;
}

unint64_t sub_1C00AAC74()
{
  unint64_t result = qword_1EA196738;
  if (!qword_1EA196738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196738);
  }
  return result;
}

unint64_t sub_1C00AACCC()
{
  unint64_t result = qword_1EA196740;
  if (!qword_1EA196740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196740);
  }
  return result;
}

unint64_t sub_1C00AAD24()
{
  unint64_t result = qword_1EA196748;
  if (!qword_1EA196748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA196748);
  }
  return result;
}

uint64_t sub_1C00AAD78(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x737569646172 && a2 == 0xE600000000000000;
  if (v2 || (sub_1C1520A9C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7369776B636F6C63 && a2 == 0xE900000000000065 || (sub_1C1520A9C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6372655070657473 && a2 == 0xEE00656761746E65 || (sub_1C1520A9C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65637265506E696DLL && a2 == 0xED0000656761746ELL || (sub_1C1520A9C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656372655078616DLL && a2 == 0xED0000656761746ELL)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_1C1520A9C();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}