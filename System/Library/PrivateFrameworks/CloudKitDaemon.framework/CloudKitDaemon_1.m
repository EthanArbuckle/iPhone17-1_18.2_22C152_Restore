void sub_1C4E1FE10(uint64_t a1, void *a2)
{
  id v4;
  uint64_t vars8;

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4E1FE70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  v4 = *(char **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (v4)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
    v6 = *(void **)(v5 + 40);
    if (v6)
    {
      if (!objc_msgSend_CKIsNotFoundError(v6, v4, a3)) {
        goto LABEL_6;
      }
      v4 = *(char **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
    }
    objc_storeStrong((id *)(v5 + 40), v4);
  }
LABEL_6:
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    v7 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
    {
      v10 = *(void **)(a1 + 32);
      v11 = v7;
      v14 = objc_msgSend_zoneID(v10, v12, v13);
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      int v29 = 138412546;
      v30 = v14;
      __int16 v31 = 2112;
      uint64_t v32 = v15;
      _os_log_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_INFO, "Not saving zone %@ due to a PCS error: %@", (uint8_t *)&v29, 0x16u);
    }
    v16 = objc_msgSend_recordZonesToSave(*(void **)(a1 + 40), v8, v9);
    objc_sync_enter(v16);
    v19 = objc_msgSend_recordZonesToSave(*(void **)(a1 + 40), v17, v18);
    objc_msgSend_removeObject_(v19, v20, *(void *)(a1 + 32));

    objc_sync_exit(v16);
    v23 = objc_msgSend_saveCompletionBlock(*(void **)(a1 + 40), v21, v22);

    if (v23)
    {
      objc_msgSend_saveCompletionBlock(*(void **)(a1 + 40), v4, a3);
      v24 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend_zoneID(*(void **)(a1 + 32), v25, v26);
      ((void (**)(void, void *, void, void))v24)[2](v24, v27, *(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
    }
  }
  v28 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v4, a3);
  dispatch_group_leave(v28);
}

void sub_1C4E20098(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E2078C(uint64_t a1, const char *a2, uint64_t a3)
{
  v4 = objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), v5, v6);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v9 = objc_msgSend_zoneID(*(void **)(a1 + 40), v7, v8);
    (*((void (**)(id, void *, void, void))v10 + 2))(v10, v9, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

uint64_t sub_1C4E209E0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setZoneIDs_, *(void *)(a1 + 32));
}

void sub_1C4E20D04()
{
  v0 = (void *)qword_1EBBCDD78;
  qword_1EBBCDD78 = (uint64_t)&unk_1F20ABC18;
}

uint64_t sub_1C4E21208(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 64) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_47;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_49;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_47:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_49:
        *(_DWORD *)(a1 + 56) = v19;
        goto LABEL_54;
      case 2u:
        v24 = (CKDPRecord *)objc_alloc_init(MEMORY[0x1E4F19F20]);
        objc_storeStrong((id *)(a1 + 48), v24);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_38;
      case 3u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 40;
        goto LABEL_35;
      case 4u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 8;
        goto LABEL_35;
      case 5u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 32;
        goto LABEL_35;
      case 6u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 24;
LABEL_35:
        v27 = *(void **)(a1 + v26);
        *(void *)(a1 + v26) = v25;

        goto LABEL_54;
      case 7u:
        v24 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 16), v24);
        if PBReaderPlaceMark() && (CKDPRecordReadFrom((uint64_t)v24, a2))
        {
LABEL_38:
          PBReaderRecallMark();

LABEL_54:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_56:

        return 0;
      case 8u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        *(unsigned char *)(a1 + 64) |= 2u;
        while (2)
        {
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 1;
            v30 |= (unint64_t)(v33 & 0x7F) << v28;
            if (v33 < 0)
            {
              v28 += 7;
              BOOL v14 = v29++ >= 9;
              if (v14)
              {
                uint64_t v30 = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v30 = 0;
        }
LABEL_53:
        *(unsigned char *)(a1 + 60) = v30 != 0;
        goto LABEL_54;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_54;
    }
  }
}

uint64_t sub_1C4E21F7C(void *a1, const char *a2, uint64_t a3)
{
  v4 = objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], a2, a3);
  int v7 = objc_msgSend_cacheChildAccounts(v4, v5, v6);

  if (v7) {
    id v10 = (id)objc_msgSend_childAccounts(a1, v8, v9);
  }
  return objc_msgSend_aa_cloudKitAccount(a1, v8, v9);
}

BOOL sub_1C4E22544(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = (CKDPProtectionInfo *)objc_alloc_init(MEMORY[0x1E4F19F30]);
        objc_storeStrong((id *)(a1 + 96), v17);
        if PBReaderPlaceMark() && (CKDPRecordZoneIdentifierReadFrom()) {
          goto LABEL_53;
        }
        goto LABEL_60;
      case 3u:
        char v17 = objc_alloc_init(CKDPProtectionInfo);
        uint64_t v18 = 32;
        goto LABEL_26;
      case 6u:
        char v17 = objc_alloc_init(CKDPProtectionInfo);
        uint64_t v18 = 48;
LABEL_26:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (!PBReaderPlaceMark() || !sub_1C4D5BCB4((uint64_t)v17, a2)) {
          goto LABEL_60;
        }
        goto LABEL_53;
      case 8u:
        char v17 = objc_alloc_init(CKDPRecordStableUrl);
        objc_storeStrong((id *)(a1 + 80), v17);
        if (!PBReaderPlaceMark() || !CKDPRecordStableUrlReadFrom((uint64_t)v17, a2)) {
          goto LABEL_60;
        }
        goto LABEL_53;
      case 9u:
        char v17 = objc_alloc_init(CKDPShareIdentifier);
        objc_storeStrong((id *)(a1 + 64), v17);
        if (!PBReaderPlaceMark() || !CKDPShareIdentifierReadFrom((uint64_t)v17, a2)) {
          goto LABEL_60;
        }
        goto LABEL_53;
      case 0xAu:
        PBReaderReadData();
        char v17 = (CKDPProtectionInfo *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          objc_msgSend_addProtectionInfoKeysToRemove_((void *)a1, v19, (uint64_t)v17);
        }
        goto LABEL_54;
      case 0xBu:
        char v17 = objc_alloc_init(CKDPStorageExpiration);
        objc_storeStrong((id *)(a1 + 88), v17);
        if (!PBReaderPlaceMark() || (sub_1C50191C4((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_60;
        }
        goto LABEL_53;
      case 0xCu:
        char v17 = objc_alloc_init(CKDPZoneSignedCryptoRequirements);
        objc_storeStrong((id *)(a1 + 72), v17);
        if (!PBReaderPlaceMark() || (sub_1C4DED21C((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_60;
        }
        goto LABEL_53;
      case 0xDu:
        char v17 = objc_alloc_init(CKDPZoneCryptoFeatureSet);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (sub_1C4FBB9B4((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_60;
        }
        goto LABEL_53;
      case 0xEu:
        char v17 = objc_alloc_init(CKDPProtectionInfoKeysToRemove);
        uint64_t v20 = 104;
        goto LABEL_48;
      case 0xFu:
        char v17 = objc_alloc_init(CKDPProtectionInfoKeysToRemove);
        uint64_t v20 = 56;
LABEL_48:
        objc_storeStrong((id *)(a1 + v20), v17);
        if (!PBReaderPlaceMark() || !sub_1C5040CD4(v17, a2)) {
          goto LABEL_60;
        }
        goto LABEL_53;
      case 0x10u:
        char v17 = objc_alloc_init(CKDPZoneZoneReference);
        objc_storeStrong((id *)(a1 + 24), v17);
        if PBReaderPlaceMark() && (sub_1C4F6B934((uint64_t)v17, a2))
        {
LABEL_53:
          PBReaderRecallMark();
LABEL_54:

LABEL_55:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_60:

        return 0;
      case 0x11u:
        uint64_t v21 = PBReaderReadString();
        char v17 = *(CKDPProtectionInfo **)(a1 + 16);
        *(void *)(a1 + 16) = v21;
        goto LABEL_54;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_55;
    }
  }
}

uint64_t sub_1C4E23D74(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4E23D84(uint64_t a1)
{
}

uint64_t sub_1C4E23D8C(uint64_t a1, const char *a2, uint64_t a3)
{
  v4 = (void *)qword_1EBBCFC48;
  if (!qword_1EBBCFC48)
  {
    objc_msgSend__rebuildVolumes(*(void **)(a1 + 48), a2, a3);
    v4 = (void *)qword_1EBBCFC48;
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend_objectForKey_(v4, a2, *(void *)(a1 + 32));
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4E23F04(uint64_t a1, const char *a2, uint64_t a3)
{
  v4 = (void *)qword_1EBBCFC50;
  if (!qword_1EBBCFC50)
  {
    objc_msgSend__rebuildVolumes(*(void **)(a1 + 48), a2, a3);
    v4 = (void *)qword_1EBBCFC50;
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend_objectForKey_(v4, a2, *(void *)(a1 + 32));
  return MEMORY[0x1F41817F8]();
}

BOOL sub_1C4E24338(id *a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(CKDPListRange);
    objc_msgSend_addRange_(a1, v18, (uint64_t)v17);
    if (!PBReaderPlaceMark() || !sub_1C4F65720((uint64_t)v17, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E24F08(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 44) |= 8u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_51;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_53;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_51:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_53:
          *(unsigned char *)(a1 + 40) = v19 != 0;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 44) |= 2u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  uint64_t v26 = 0;
                  goto LABEL_57;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v26 = 0;
          }
LABEL_57:
          uint64_t v42 = 16;
          goto LABEL_66;
        case 3u:
          uint64_t v30 = PBReaderReadString();
          uint64_t v31 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v30;

          continue;
        case 4u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 44) |= 4u;
          while (2)
          {
            uint64_t v34 = *v3;
            unint64_t v35 = *(void *)(a2 + v34);
            if (v35 == -1 || v35 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
              *(void *)(a2 + v34) = v35 + 1;
              v26 |= (unint64_t)(v36 & 0x7F) << v32;
              if (v36 < 0)
              {
                v32 += 7;
                BOOL v14 = v33++ >= 9;
                if (v14)
                {
                  uint64_t v26 = 0;
                  goto LABEL_61;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v26 = 0;
          }
LABEL_61:
          uint64_t v42 = 24;
          goto LABEL_66;
        case 5u:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 44) |= 1u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v39 = *v3;
        unint64_t v40 = *(void *)(a2 + v39);
        if (v40 == -1 || v40 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
        *(void *)(a2 + v39) = v40 + 1;
        v26 |= (unint64_t)(v41 & 0x7F) << v37;
        if ((v41 & 0x80) == 0) {
          goto LABEL_63;
        }
        v37 += 7;
        BOOL v14 = v38++ >= 9;
        if (v14)
        {
          uint64_t v26 = 0;
          goto LABEL_65;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_63:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v26 = 0;
      }
LABEL_65:
      uint64_t v42 = 8;
LABEL_66:
      *(void *)(a1 + v42) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t CKDPResponseOperationResultErrorAuxiliaryErrorReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v20 = objc_alloc_init(CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoEntry);
        objc_msgSend_addUserInfo_((void *)a1, v21, (uint64_t)v20);
        if (!PBReaderPlaceMark()
          || !CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoEntryReadFrom((uint64_t)v20, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if (v17 == 2)
      {
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 == -1 || v26 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
          *(void *)(a2 + v25) = v26 + 1;
          v24 |= (unint64_t)(v27 & 0x7F) << v22;
          if ((v27 & 0x80) == 0) {
            goto LABEL_35;
          }
          v22 += 7;
          BOOL v14 = v23++ >= 9;
          if (v14)
          {
            LODWORD(v24) = 0;
            goto LABEL_37;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_35:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v24) = 0;
        }
LABEL_37:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v18;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E26A00(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = v17;

        goto LABEL_47;
      case 2u:
        uint64_t v20 = objc_alloc_init(CKDPAsset);
        objc_storeStrong((id *)(a1 + 16), v20);
        if PBReaderPlaceMark() && (CKDPAssetReadFrom((uint64_t)v20, a2))
        {
          PBReaderRecallMark();

LABEL_47:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_42:
        *(void *)(a1 + 8) = v23;
        goto LABEL_47;
      case 4u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        *(unsigned char *)(a1 + 36) |= 2u;
        while (2)
        {
          uint64_t v30 = *v3;
          unint64_t v31 = *(void *)(a2 + v30);
          if (v31 == -1 || v31 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              BOOL v14 = v28++ >= 9;
              if (v14)
              {
                uint64_t v29 = 0;
                goto LABEL_46;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v29 = 0;
        }
LABEL_46:
        *(unsigned char *)(a1 + 32) = v29 != 0;
        goto LABEL_47;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_47;
    }
  }
}

uint64_t sub_1C4E27718(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v18 = objc_alloc_init(CKDPRecordFieldValue);
        objc_msgSend_addValue_((void *)a1, v19, (uint64_t)v18);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldValueReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if (v17 == 2)
        {
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if ((v25 & 0x80) == 0) {
              goto LABEL_37;
            }
            v20 += 7;
            BOOL v14 = v21++ >= 9;
            if (v14)
            {
              uint64_t v22 = 0;
              goto LABEL_39;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v22 = 0;
          }
LABEL_39:
          *(unsigned char *)(a1 + 24) = v22 != 0;
          continue;
        }
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        uint64_t v18 = objc_alloc_init(CKDPListPosition);
        objc_storeStrong((id *)(a1 + 8), v18);
        if (!PBReaderPlaceMark() || (sub_1C4F2ACAC((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_42;
        }
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id sub_1C4E2845C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = *(void **)(a1 + 32);
  uint64_t v7 = objc_msgSend_operationType(v4, v5, v6);
  unsigned int v9 = objc_msgSend_operationRequestWithType_(v4, v8, v7);
  unint64_t v10 = objc_opt_new();
  objc_msgSend_setRecordResolveTokenRequest_(v9, v11, (uint64_t)v10);

  BOOL v14 = objc_msgSend_routingKey(v3, v12, v13);
  unint64_t v17 = objc_msgSend_recordResolveTokenRequest(v9, v15, v16);
  objc_msgSend_setRoutingKey_(v17, v18, (uint64_t)v14);

  unsigned int v21 = objc_msgSend_shortSharingTokenHashData(v3, v19, v20);
  unint64_t v24 = objc_msgSend_recordResolveTokenRequest(v9, v22, v23);
  objc_msgSend_setShortTokenHash_(v24, v25, (uint64_t)v21);

  uint64_t v28 = objc_msgSend_forceDSRefetch(v3, v26, v27);
  unint64_t v31 = objc_msgSend_recordResolveTokenRequest(v9, v29, v30);
  objc_msgSend_setForceFetch_(v31, v32, v28);

  unint64_t v35 = objc_msgSend_participantID(v3, v33, v34);

  if (v35)
  {
    unsigned int v38 = objc_msgSend_participantID(v3, v36, v37);
    char v41 = objc_msgSend_recordResolveTokenRequest(v9, v39, v40);
    objc_msgSend_setParticipantId_(v41, v42, (uint64_t)v38);
  }
  v43 = objc_msgSend_rootRecordDesiredKeySet(*(void **)(a1 + 32), v36, v37);

  if (v43)
  {
    v46 = (void *)MEMORY[0x1E4F1CA48];
    v47 = objc_msgSend_rootRecordDesiredKeySet(*(void **)(a1 + 32), v44, v45);
    v50 = objc_msgSend_allObjects(v47, v48, v49);
    v52 = objc_msgSend_arrayWithArray_(v46, v51, (uint64_t)v50);
    v55 = objc_msgSend_recordResolveTokenRequest(v9, v53, v54);
    objc_msgSend_setRootRecordDesiredKeys_(v55, v56, (uint64_t)v52);
  }
  v57 = objc_msgSend_lookupInfosByRequestID(*(void **)(a1 + 32), v44, v45);
  v60 = objc_msgSend_request(v9, v58, v59);
  v63 = objc_msgSend_operationUUID(v60, v61, v62);
  objc_msgSend_setObject_forKeyedSubscript_(v57, v64, (uint64_t)v3, v63);

  return v9;
}

id sub_1C4E29A00(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  v4 = *(void **)(a1 + 32);
  uint64_t v7 = objc_msgSend_recordID(*(void **)(a1 + 40), v5, v6);
  id v16 = 0;
  unsigned int v9 = objc_msgSend_shareParticipantFromPParticipant_shareID_error_(v4, v8, (uint64_t)v3, v7, &v16);
  id v10 = v16;

  uint64_t v11 = v9;
  if (v10)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unint64_t v12 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      id v18 = v3;
      __int16 v19 = 2112;
      uint64_t v20 = v15;
      _os_log_error_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_ERROR, "Couldn't parse a potentially matching OON participant from %@: %@", buf, 0x16u);
    }
    uint64_t v11 = 0;
  }
  id v13 = v11;

  return v13;
}

uint64_t sub_1C4E2ACFC(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4E2B21C(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
LABEL_22:
        __int16 v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4E2BB28(id *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = (CKDPRecordFieldIdentifier *)objc_alloc_init(MEMORY[0x1E4F19F20]);
        objc_storeStrong(a1 + 4, v17);
        if PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom()) {
          goto LABEL_32;
        }
        goto LABEL_35;
      case 2u:
        uint64_t v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_35;
        }
        goto LABEL_32;
      case 3u:
        uint64_t v17 = objc_alloc_init(CKDPMergeableValueIdentifier);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || !sub_1C4E62940((uint64_t)v17, a2)) {
          goto LABEL_35;
        }
        goto LABEL_32;
      case 4u:
        uint64_t v17 = objc_alloc_init(CKDPMergeableDelta);
        objc_msgSend_addMergeableDeltas_(a1, v18, (uint64_t)v17);
        if PBReaderPlaceMark() && (CKDPMergeableDeltaReadFrom((uint64_t)v17, a2))
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_33:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_33;
    }
  }
}

BOOL CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoEntryReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoValue **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = objc_alloc_init(CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoValue);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark()
      || (CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoValueReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *CKStringForAccountType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"platform";
  }
  else {
    return *(&off_1E64F3F28 + a1 - 1);
  }
}

void sub_1C4E2DBC0()
{
  v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.cloudkit.account.authQueue", v2);
  v1 = (void *)qword_1EBBCFC58;
  qword_1EBBCFC58 = (uint64_t)v0;
}

void sub_1C4E2E554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose((const void *)(v17 - 160), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4E2E588(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1, 0);
  }
  return result;
}

uint64_t sub_1C4E2E5A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

uint64_t sub_1C4E2E5C0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

uint64_t sub_1C4E2E5D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4E2E5E8(uint64_t a1)
{
}

void sub_1C4E2E5F0(uint64_t a1, char a2, id obj)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), obj);
  id v5 = obj;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1C4E2E660(void *a1)
{
  uint64_t result = a1[4];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24), *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  return result;
}

void sub_1C4E2E7EC(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4E2E800(uint64_t a1)
{
  v2 = (id *)(a1 + 64);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = sub_1C4E2E9A4;
    v10[3] = &unk_1E64F3EB8;
    objc_copyWeak(&v13, v2);
    id v11 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 40);
    objc_msgSend__lockedRenewTokenWithReason_shouldForce_container_tokenFetchBlock_completionHandler_(WeakRetained, v7, v5, v4, v6, v10, *(void *)(a1 + 56));

    objc_destroyWeak(&v13);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    char v8 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unsigned int v9 = 0;
      _os_log_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_INFO, "CKDAccount disappeared during renew.", v9, 2u);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1C4E2E990(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_1C4E2E9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v7 = (void *)MEMORY[0x1E4F1A550];
  char v8 = (os_log_t *)MEMORY[0x1E4F1A500];
  if (qword_1EBBCFB18)
  {
    if ((unint64_t)objc_msgSend_count((void *)qword_1EBBCFB18, v4, v5) >= 0x65)
    {
      if (*v7 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      unsigned int v9 = *v8;
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v20) = 0;
        _os_log_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_INFO, "Clearing failedTokenCache.", (uint8_t *)&v20, 2u);
      }
      objc_msgSend_removeAllObjects((void *)qword_1EBBCFB18, v10, v11);
    }
  }
  else
  {
    id v12 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    id v13 = (void *)qword_1EBBCFB18;
    qword_1EBBCFB18 = (uint64_t)v12;
  }
  if (*v7 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  BOOL v14 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = *(void *)(a1 + 32);
    int v20 = 138412290;
    uint64_t v21 = v16;
    _os_log_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_INFO, "Adding auth token: %@ to the failed token cache if non-nil.", (uint8_t *)&v20, 0xCu);
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if (v17) {
    objc_msgSend_addObject_((void *)qword_1EBBCFB18, v15, v17);
  }
  uint64_t v18 = objc_msgSend__lockedCloudKitAuthTokenWithContainer_error_(WeakRetained, v15, *(void *)(a1 + 40), a2);

  return v18;
}

void sub_1C4E2EC8C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4E2ECA0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 32);
  id v17 = 0;
  uint64_t v5 = objc_msgSend__lockedCloudKitAuthTokenWithContainer_error_(WeakRetained, v4, v3, &v17);
  id v6 = v17;

  unsigned int v9 = objc_msgSend_authTokenCallbackQueue(*(void **)(a1 + 40), v7, v8);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C4E2EDA8;
  v13[3] = &unk_1E64F0718;
  id v10 = *(id *)(a1 + 48);
  id v15 = v6;
  id v16 = v10;
  id v14 = v5;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, v13);
}

uint64_t sub_1C4E2EDA8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1C4E2EF1C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4E2EF30(uint64_t a1)
{
  v2 = (id *)(a1 + 64);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = sub_1C4E2F0D4;
    v10[3] = &unk_1E64F3EB8;
    objc_copyWeak(&v13, v2);
    id v11 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 40);
    objc_msgSend__lockedRenewTokenWithReason_shouldForce_container_tokenFetchBlock_completionHandler_(WeakRetained, v7, v5, v4, v6, v10, *(void *)(a1 + 56));

    objc_destroyWeak(&v13);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v8 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unsigned int v9 = 0;
      _os_log_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_INFO, "CKDAccount disappeared during iCloud auth renew.", v9, 2u);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1C4E2F0C0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_1C4E2F0D4(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend_setLastFailediCloudAuthToken_(WeakRetained, v5, *(void *)(a1 + 32));
  uint64_t v7 = objc_msgSend__lockediCloudAuthTokenWithContainer_error_(WeakRetained, v6, *(void *)(a1 + 40), a2);

  return v7;
}

void sub_1C4E2F24C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4E2F260(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 32);
  id v17 = 0;
  uint64_t v5 = objc_msgSend__lockediCloudAuthTokenWithContainer_error_(WeakRetained, v4, v3, &v17);
  id v6 = v17;

  unsigned int v9 = objc_msgSend_authTokenCallbackQueue(*(void **)(a1 + 40), v7, v8);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C4E2F368;
  v13[3] = &unk_1E64F0718;
  id v10 = *(id *)(a1 + 48);
  id v15 = v6;
  id v16 = v10;
  id v14 = v5;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, v13);
}

uint64_t sub_1C4E2F368(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1C4E2FC34(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EA3D1050 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_1C4E2FCC4()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  dispatch_queue_t v0 = (void *)qword_1EA3D1178;
  uint64_t v7 = qword_1EA3D1178;
  if (!qword_1EA3D1178)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1C4E2FDA8;
    v3[3] = &unk_1E64F3118;
    v3[4] = &v4;
    sub_1C4E2FDA8(v3);
    dispatch_queue_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1C4E2FD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1C4E2FDA8(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  v16[0] = 0;
  uint64_t v19 = 0;
  int v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v2 = qword_1EA3D1050;
  uint64_t v22 = qword_1EA3D1050;
  if (!qword_1EA3D1050)
  {
    v16[1] = (void *)MEMORY[0x1E4F143A8];
    v16[2] = (void *)3221225472;
    v16[3] = sub_1C4E2FC34;
    v16[4] = &unk_1E64F3F68;
    id v17 = &v19;
    uint64_t v18 = v16;
    long long v23 = xmmword_1E64F3F40;
    long long v24 = *(_OWORD *)&off_1E64F3F50;
    v20[3] = _sl_dlopen();
    qword_1EA3D1050 = *(void *)(v17[1] + 24);
    uint64_t v2 = v20[3];
  }
  _Block_object_dispose(&v19, 8);
  if (v2)
  {
    uint64_t v5 = v16[0];
    if (!v16[0]) {
      goto LABEL_5;
    }
  }
  else
  {
    a1 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v3, v4);
    id v10 = objc_msgSend_stringWithUTF8String_(NSString, v9, (uint64_t)"void *CloudKitTestingLibrary(void)");
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(a1, v11, (uint64_t)v10, @"CKTestFrameworkLinking.m", 11, @"%s", v16[0]);

    __break(1u);
  }
  free(v5);
LABEL_5:
  Class result = objc_getClass("CKTestServerReference");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  if (!*(void *)(*(void *)(a1[4] + 8) + 24))
  {
    id v12 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v7, v8);
    id v14 = objc_msgSend_stringWithUTF8String_(NSString, v13, (uint64_t)"Class getCKTestServerReferenceClass(void)_block_invoke");
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v12, v15, (uint64_t)v14, @"CKTestFrameworkLinking.m", 16, @"Unable to find class %s", "CKTestServerReference");

    __break(1u);
  }
  qword_1EA3D1178 = *(void *)(*(void *)(a1[4] + 8) + 24);
  return result;
}

void sub_1C4E2FFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CKDPResponseOperationResultErrorClientReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 100)
      {
        if (v17 == 101)
        {
          uint64_t v18 = objc_alloc_init(CKDPUniqueFieldFailure);
          objc_storeStrong((id *)(a1 + 32), v18);
          if (!PBReaderPlaceMark() || (sub_1C4F7B9F0((uint64_t)v18, a2) & 1) == 0)
          {
LABEL_47:

            return 0;
          }
        }
        else
        {
          if (v17 != 102)
          {
LABEL_39:
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          uint64_t v18 = objc_alloc_init(CKDPMoveOplockFailure);
          objc_storeStrong((id *)(a1 + 8), v18);
          if (!PBReaderPlaceMark() || (sub_1C4E8A1F0((uint64_t)v18, a2) & 1) == 0) {
            goto LABEL_47;
          }
        }
      }
      else
      {
        if (v17 == 1)
        {
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 40) |= 1u;
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_42;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_44;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_42:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v21) = 0;
          }
LABEL_44:
          *(_DWORD *)(a1 + 24) = v21;
          continue;
        }
        if (v17 != 100) {
          goto LABEL_39;
        }
        uint64_t v18 = objc_alloc_init(CKDPOplockFailure);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (sub_1C4EC3628((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_47;
        }
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E32834(int a1, int a2, unint64_t a3, unint64_t a4, CFIndex transferBufferSize)
{
  id v9 = 0;
  id v10 = 0;
  if (!(a3 | a4)) {
    __assert_rtn("+[NSStream(BoundPairAdditions) createBoundInputStream:outputStream:bufferSize:]", "CKDProtobufStreamWriter.m", 30, "(inputStreamPtr != NULL) || (outputStreamPtr != NULL)");
  }
  if (a3) {
    uint64_t v7 = (CFReadStreamRef *)&v10;
  }
  else {
    uint64_t v7 = 0;
  }
  if (a4) {
    char v8 = (CFWriteStreamRef *)&v9;
  }
  else {
    char v8 = 0;
  }
  CFStreamCreateBoundPair(0, v7, v8, transferBufferSize);
  if (a3) {
    *(void *)a3 = v10;
  }
  if (a4) {
    *(void *)a4 = v9;
  }
}

void sub_1C4E32BBC(_Unwind_Exception *exception_object)
{
}

void sub_1C4E32CA4(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend__tearDownOutputStream(*(void **)(a1 + 32), a2, a3);
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 32);
  *(void *)(v4 + 32) = 0;

  objc_sync_exit(obj);
}

void sub_1C4E33060(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1C4E33A08(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_parserData(*(void **)(a1 + 32), a2, a3);

  if (!v4)
  {
    uint64_t v7 = objc_opt_new();
    objc_msgSend_setParserData_(*(void **)(a1 + 32), v8, (uint64_t)v7);
  }
  if (*(void *)(a1 + 40))
  {
    id v9 = objc_msgSend_parserData(*(void **)(a1 + 32), v5, v6);
    objc_msgSend_appendData_(v9, v10, *(void *)(a1 + 40));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    unint64_t v12 = *(uint64_t (**)(void))(result + 16);
    return v12();
  }
  return result;
}

void sub_1C4E33B68(uint64_t a1)
{
  uint64_t v2 = dispatch_group_create();
  uint64_t v5 = objc_msgSend_parserData(*(void **)(a1 + 32), v3, v4);
  uint64_t v8 = objc_msgSend_length(v5, v6, v7);

  if (v8)
  {
    uint64_t v11 = (void *)MEMORY[0x1E4F28F98];
    unint64_t v12 = objc_msgSend_parserData(*(void **)(a1 + 32), v9, v10);
    id v42 = 0;
    BOOL v14 = objc_msgSend_propertyListWithData_options_format_error_(v11, v13, (uint64_t)v12, 0, 0, &v42);
    id v15 = v42;

    if (v15) {
      objc_msgSend_setParserError_(*(void **)(a1 + 32), v16, (uint64_t)v15);
    }
    uint64_t v18 = objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v16, v17);

    if (v18 && v14)
    {
      dispatch_group_enter(v2);
      objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v19, v20);
      uint64_t v21 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
      char v24 = objc_msgSend_parserData(*(void **)(a1 + 32), v22, v23);
      v40[0] = MEMORY[0x1E4F143A8];
      v40[1] = 3221225472;
      v40[2] = sub_1C4E33E38;
      v40[3] = &unk_1E64F05C8;
      uint64_t v25 = v2;
      char v41 = v25;
      ((void (**)(void, void *, void *, void *))v21)[2](v21, v14, v24, v40);

      if (*MEMORY[0x1E4F1A4E0] && objc_msgSend_testRepeatedParseResults(*(void **)(a1 + 32), v26, v27))
      {
        dispatch_group_enter(v25);
        objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v28, v29);
        uint64_t v30 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
        unsigned int v33 = objc_msgSend_parserData(*(void **)(a1 + 32), v31, v32);
        v38[0] = MEMORY[0x1E4F143A8];
        v38[1] = 3221225472;
        v38[2] = sub_1C4E33E40;
        v38[3] = &unk_1E64F05C8;
        uint64_t v39 = v25;
        ((void (**)(void, void *, void *, void *))v30)[2](v30, v14, v33, v38);
      }
    }
  }
  if (*(void *)(a1 + 40))
  {
    objc_msgSend_qualityOfService(*(void **)(a1 + 32), v9, v10);
    uint64_t v34 = CKGetGlobalQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4E33E48;
    block[3] = &unk_1E64F0790;
    id v35 = *(id *)(a1 + 40);
    block[4] = *(void *)(a1 + 32);
    id v37 = v35;
    dispatch_group_notify(v2, v34, block);
  }
}

void sub_1C4E33E38(uint64_t a1)
{
}

void sub_1C4E33E40(uint64_t a1)
{
}

void sub_1C4E33E48(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  objc_msgSend_parserError(*(void **)(a1 + 32), a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

BOOL sub_1C4E34678(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(CKDPStreamingAssetIdentifier);
        objc_storeStrong(a1 + 1, v17);
        if (PBReaderPlaceMark() && sub_1C4DC5AE0((uint64_t)v17, a2)) {
          goto LABEL_32;
        }
        goto LABEL_35;
      case 2u:
        uint64_t v17 = objc_alloc_init(CKDPStreamingAssetSaveAssetRequest);
        objc_storeStrong(a1 + 3, v17);
        if (!PBReaderPlaceMark() || (sub_1C4DF4AB8((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_35;
        }
        goto LABEL_32;
      case 3u:
        uint64_t v17 = objc_alloc_init(CKDPStreamingAssetSaveAssetResponse);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || (sub_1C4E1A7C8((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_35;
        }
        goto LABEL_32;
      case 4u:
        uint64_t v17 = objc_alloc_init(CKDPStreamingAssetRetrieveAssetResponse);
        objc_storeStrong(a1 + 2, v17);
        if PBReaderPlaceMark() && (sub_1C4E83E8C((uint64_t)v17, a2))
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_33:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_33;
    }
  }
}

uint64_t sub_1C4E35588(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(CKDPZone);
        objc_storeStrong((id *)(a1 + 64), v17);
        if (PBReaderPlaceMark() && sub_1C4E22544((uint64_t)v17, a2)) {
          goto LABEL_77;
        }
        goto LABEL_106;
      case 2u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 40;
        goto LABEL_64;
      case 3u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 32;
        goto LABEL_64;
      case 4u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 92) |= 4u;
        while (2)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_81:
        *(_DWORD *)(a1 + 48) = v22;
        goto LABEL_104;
      case 5u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 92) |= 1u;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v28 = 0;
                goto LABEL_85;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v28 = 0;
        }
LABEL_85:
        uint64_t v58 = 8;
        goto LABEL_90;
      case 6u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 92) |= 2u;
        while (2)
        {
          uint64_t v34 = *v3;
          unint64_t v35 = *(void *)(a2 + v34);
          if (v35 == -1 || v35 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
            *(void *)(a2 + v34) = v35 + 1;
            v28 |= (unint64_t)(v36 & 0x7F) << v32;
            if (v36 < 0)
            {
              v32 += 7;
              BOOL v14 = v33++ >= 9;
              if (v14)
              {
                uint64_t v28 = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v28 = 0;
        }
LABEL_89:
        uint64_t v58 = 16;
LABEL_90:
        *(void *)(a1 + v58) = v28;
        goto LABEL_104;
      case 7u:
        uint64_t v17 = objc_alloc_init(CKDPZoneCapabilities);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (!PBReaderPlaceMark() || (sub_1C4F8113C((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_106;
        }
        goto LABEL_77;
      case 8u:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        *(unsigned char *)(a1 + 92) |= 0x20u;
        while (2)
        {
          uint64_t v40 = *v3;
          unint64_t v41 = *(void *)(a2 + v40);
          if (v41 == -1 || v41 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v42 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
            *(void *)(a2 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              BOOL v14 = v38++ >= 9;
              if (v14)
              {
                uint64_t v39 = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v39 = 0;
        }
LABEL_94:
        BOOL v59 = v39 != 0;
        uint64_t v60 = 90;
        goto LABEL_103;
      case 9u:
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v45 = 0;
        *(unsigned char *)(a1 + 92) |= 0x10u;
        while (2)
        {
          uint64_t v46 = *v3;
          unint64_t v47 = *(void *)(a2 + v46);
          if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v48 = *(unsigned char *)(*(void *)(a2 + *v7) + v47);
            *(void *)(a2 + v46) = v47 + 1;
            v45 |= (unint64_t)(v48 & 0x7F) << v43;
            if (v48 < 0)
            {
              v43 += 7;
              BOOL v14 = v44++ >= 9;
              if (v14)
              {
                uint64_t v45 = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v45 = 0;
        }
LABEL_98:
        BOOL v59 = v45 != 0;
        uint64_t v60 = 89;
        goto LABEL_103;
      case 0xAu:
        uint64_t v17 = (CKDPZone *)objc_alloc_init(MEMORY[0x1E4F19EF8]);
        uint64_t v49 = 80;
        goto LABEL_75;
      case 0xBu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 72;
LABEL_64:
        v50 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_104;
      case 0xDu:
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        *(unsigned char *)(a1 + 92) |= 8u;
        while (2)
        {
          uint64_t v55 = *v3;
          unint64_t v56 = *(void *)(a2 + v55);
          if (v56 == -1 || v56 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(a2 + *v7) + v56);
            *(void *)(a2 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              BOOL v14 = v53++ >= 9;
              if (v14)
              {
                uint64_t v54 = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v54 = 0;
        }
LABEL_102:
        BOOL v59 = v54 != 0;
        uint64_t v60 = 88;
LABEL_103:
        *(unsigned char *)(a1 + v60) = v59;
        goto LABEL_104;
      case 0xEu:
        uint64_t v17 = (CKDPZone *)objc_alloc_init(MEMORY[0x1E4F19EF8]);
        uint64_t v49 = 56;
LABEL_75:
        objc_storeStrong((id *)(a1 + v49), v17);
        if PBReaderPlaceMark() && (CKDPDateReadFrom())
        {
LABEL_77:
          PBReaderRecallMark();

LABEL_104:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_106:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_104;
    }
  }
}

void sub_1C4E36CF0()
{
  dispatch_queue_t v0 = (void *)qword_1EBBCDD88;
  qword_1EBBCDD88 = (uint64_t)&unk_1F20ABC40;
}

BOOL sub_1C4E36ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v19 = PBReaderReadString();
        uint64_t v18 = *(CKDPShareIdentifier **)(a1 + 8);
        *(void *)(a1 + 8) = v19;
        goto LABEL_28;
      }
      if (v17 == 1)
      {
        uint64_t v18 = objc_alloc_init(CKDPShareIdentifier);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || !CKDPShareIdentifierReadFrom((uint64_t)v18, a2)) {
          goto LABEL_33;
        }
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_30:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = objc_alloc_init(CKDPProtectionInfo);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || !sub_1C4D5BCB4((uint64_t)v18, a2))
    {
LABEL_33:

      return 0;
    }
LABEL_26:
    PBReaderRecallMark();
LABEL_28:

    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E3761C()
{
  dispatch_queue_t v0 = (void *)qword_1EBBCDD98;
  qword_1EBBCDD98 = (uint64_t)&unk_1F20ABC68;
}

uint64_t sub_1C4E37A78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(CKDPUserAlias);
        objc_storeStrong((id *)(a1 + 8), v17);
        if PBReaderPlaceMark() && (sub_1C4E7A6E8((uint64_t)v17, a2)) {
          goto LABEL_26;
        }
        goto LABEL_41;
      case 2u:
        unint64_t v17 = objc_alloc_init(CKDPQuerySort);
        objc_msgSend_addSortedBy_((void *)a1, v19, (uint64_t)v17);
        if PBReaderPlaceMark() && (sub_1C4D834D0((uint64_t)v17, a2))
        {
LABEL_26:
          PBReaderRecallMark();

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_41:

        return 0;
      case 3u:
        uint64_t v20 = PBReaderReadString();
        unsigned int v21 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v20;

        goto LABEL_39;
      case 4u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 == -1 || v26 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              BOOL v14 = v23++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
LABEL_38:
        *(unsigned char *)(a1 + 32) = v24 != 0;
        goto LABEL_39;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_39;
    }
  }
}

void sub_1C4E3890C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (objc_class *)objc_opt_class();
  if (*(unsigned char *)(a1 + 32))
  {
    pthread_mutex_lock(&stru_1EBBCDC78);
    objc_msgSend_removeObjectForKey_((void *)qword_1EBBD0198, v8, (uint64_t)v7);
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  unsigned int v9 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
  {
    char v13 = v9;
    BOOL v14 = NSStringFromClass(v7);
    unint64_t v17 = objc_msgSend_path(v5, v15, v16);
    uint64_t v20 = objc_msgSend_CKSanitizedPath(v17, v18, v19);
    int v21 = 138412802;
    char v22 = v14;
    __int16 v23 = 2112;
    uint64_t v24 = v20;
    __int16 v25 = 2112;
    id v26 = v6;
    _os_log_error_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_ERROR, "%@ instance at %@ became invalid. Error: %@", (uint8_t *)&v21, 0x20u);
  }
  if (objc_msgSend_CKIsCorruptDatabaseError_(MEMORY[0x1E4F28C58], v10, (uint64_t)v6)) {
    objc_msgSend_remove(v5, v11, v12);
  }
  if (*(unsigned char *)(a1 + 32)) {
    pthread_mutex_unlock(&stru_1EBBCDC78);
  }
}

id sub_1C4E38F34(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (objc_msgSend_isReference(a1, v5, v6)) {
    objc_msgSend__prepareReferenceAssetForUpload_(v4, v7, (uint64_t)a1);
  }
  else {
  char v8 = objc_msgSend__prepareAssetForUpload_(v4, v7, (uint64_t)a1);
  }

  return v8;
}

id sub_1C4E38FA8(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (objc_msgSend_isReference(a1, v5, v6)) {
    objc_msgSend__prepareReferencePackageForUpload_(v4, v7, (uint64_t)a1);
  }
  else {
  char v8 = objc_msgSend__preparePackageForUpload_(v4, v7, (uint64_t)a1);
  }

  return v8;
}

id sub_1C4E3937C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = objc_msgSend_allMMCSItems(a2, (const char *)a2, a3);
  id v5 = objc_msgSend_CKMap_(v3, v4, (uint64_t)&unk_1F20434D0);

  return v5;
}

id sub_1C4E393D4(uint64_t a1, void *a2)
{
  uint64_t v2 = NSString;
  id v3 = a2;
  uint64_t v6 = objc_msgSend_itemID(v3, v4, v5);
  objc_msgSend_progress(v3, v7, v8);
  uint64_t v10 = v9;
  char v13 = objc_msgSend_signature(v3, v11, v12);
  if (objc_msgSend_finished(v3, v14, v15)) {
    objc_msgSend_stringWithFormat_(v2, v16, @"<CKDMMCSItem %p itemID: %lu, progress %0.2f, signature: %@ %@>", v3, v6, v10, v13, @"finished");
  }
  else {
  unint64_t v17 = objc_msgSend_stringWithFormat_(v2, v16, @"<CKDMMCSItem %p itemID: %lu, progress %0.2f, signature: %@ %@>", v3, v6, v10, v13, &stru_1F2044F30);
  }

  return v17;
}

void sub_1C4E3992C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E39A48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E39B7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E39C94(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_uploadPreparationBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_uploadPreparationBlock(*(void **)(a1 + 32), v5, v6);
    uint64_t v7 = (void (**)(id, void))objc_claimAutoreleasedReturnValue();
    v7[2](v7, *(void *)(a1 + 40));
  }
}

void sub_1C4E39E24(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_uploadProgressBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_uploadProgressBlock(*(void **)(a1 + 32), v5, v6);
    uint64_t v7 = (void (**)(id, void, double))objc_claimAutoreleasedReturnValue();
    v7[2](v7, *(void *)(a1 + 40), *(double *)(a1 + 48));
  }
}

void sub_1C4E3A028(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_uploadCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_uploadCompletionBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1C4E3AF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4E3AF8C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4E3AF9C(uint64_t a1)
{
}

id sub_1C4E3AFA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [CKDMMCSItem alloc];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v8 = objc_msgSend_temporary(*(void **)(a1 + 40), v6, v7);
  uint64_t v10 = objc_msgSend_initWithPackage_temporary_(v4, v9, v5, v8);
  char v13 = objc_msgSend_UUID(*(void **)(a1 + 32), v11, v12);
  objc_msgSend_setTrackingUUID_(v10, v14, (uint64_t)v13);

  unint64_t v17 = objc_msgSend_fileURL(v3, v15, v16);
  objc_msgSend_setFileURL_(v10, v18, (uint64_t)v17);

  int v21 = objc_msgSend_fileID(v3, v19, v20);
  objc_msgSend_setFileID_(v10, v22, (uint64_t)v21);

  __int16 v25 = objc_msgSend_generationID(v3, v23, v24);
  objc_msgSend_setGenerationID_(v10, v26, (uint64_t)v25);

  uint64_t v29 = objc_msgSend_deviceID(v3, v27, v28);
  objc_msgSend_setDeviceID_(v10, v30, (uint64_t)v29);

  unsigned int v33 = objc_msgSend_itemTypeHint(v3, v31, v32);
  objc_msgSend_setItemTypeHint_(v10, v34, (uint64_t)v33);

  uint64_t v37 = objc_msgSend_packageIndex(v3, v35, v36);
  objc_msgSend_setPackageIndex_(v10, v38, v37);
  return v10;
}

intptr_t sub_1C4E3B0F4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_error(a2, (const char *)a2, a3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = *(NSObject **)(a1 + 32);
  return dispatch_semaphore_signal(v7);
}

void sub_1C4E3BBB4(uint64_t a1, const char *a2, uint64_t a3)
{
  if (a3) {
    objc_msgSend_setError_(*(void **)(a1 + 32), a2, a3);
  }
  uint64_t v4 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), a2, a3);
  dispatch_group_leave(v4);
}

id sub_1C4E3CABC(uint64_t a1, const char *a2)
{
  return (id)objc_msgSend__prepareReferenceAssetForUpload_(*(void **)(a1 + 32), a2, (uint64_t)a2);
}

void sub_1C4E3D61C(void **a1, void *a2, uint64_t a3)
{
  objc_msgSend_error(a2, (const char *)a2, a3);
  id v22 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = objc_msgSend_allItemGroups(a1[4], v4, v5);
  uint64_t v8 = objc_msgSend_objectAtIndexedSubscript_(v6, v7, 0);

  uint64_t v11 = objc_msgSend_authPutRequest(v8, v9, v10);

  if (v11)
  {
    BOOL v14 = objc_msgSend_authPutRequest(v8, v12, v13);
    objc_msgSend_setAuthPutRequest_(a1[5], v15, (uint64_t)v14);
  }
  objc_msgSend__didPrepareAssetBatch_error_(a1[6], v12, (uint64_t)a1[5], v22);
  uint64_t v18 = objc_msgSend_error(a1[6], v16, v17);

  if (!v18 && v22) {
    objc_msgSend_setError_(a1[6], v19, (uint64_t)v22);
  }
  int v21 = objc_msgSend_stateTransitionGroup(a1[6], v19, v20);
  dispatch_group_leave(v21);
}

void sub_1C4E3E89C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v4, v5);
  dispatch_group_enter(v6);

  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  objc_initWeak(&v12, *(id *)(a1 + 40));
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1C4E3EA08;
  v8[3] = &unk_1E64F4070;
  objc_copyWeak(&v9, &from);
  objc_copyWeak(&v10, &location);
  objc_copyWeak(&v11, &v12);
  objc_msgSend_setCompletionBlock_(v3, v7, (uint64_t)v8);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4E3E9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v19 - 48));
  objc_destroyWeak((id *)(v19 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4E3EA08(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 4);
  id v3 = objc_loadWeakRetained(a1 + 5);
  id v4 = objc_loadWeakRetained(a1 + 6);
  uint64_t v7 = objc_msgSend_error(v3, v5, v6);

  if (!v7)
  {
    id v10 = objc_msgSend_error(WeakRetained, v8, v9);
    objc_msgSend_setError_(v3, v11, (uint64_t)v10);
  }
  id v12 = objc_msgSend_error(WeakRetained, v8, v9);
  id v20 = 0;
  char UploadTokensForAssetTokenRequest_error_newError = objc_msgSend__didFetchUploadTokensForAssetTokenRequest_error_newError_(v3, v13, (uint64_t)v4, v12, &v20);
  id v15 = v20;

  if ((UploadTokensForAssetTokenRequest_error_newError & 1) == 0)
  {
    uint64_t v18 = objc_msgSend_error(v3, v16, v17);

    if (!v18) {
      objc_msgSend_setError_(v3, v16, (uint64_t)v15);
    }
  }
  uint64_t v19 = objc_msgSend_stateTransitionGroup(v3, v16, v17);
  dispatch_group_leave(v19);
}

void sub_1C4E3FB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,id location)
{
  objc_destroyWeak(v51);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4E3FB84(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend__didMakeProgressForMMCSSectionItem_task_(WeakRetained, v5, (uint64_t)v4, *(void *)(a1 + 32));
}

void sub_1C4E3FBF0(uint64_t a1, void *a2)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v6 = objc_msgSend_error(v3, v4, v5);
  uint64_t v9 = objc_msgSend_sectionItems(*(void **)(a1 + 32), v7, v8);
  objc_msgSend_addObjectsFromArray_(v9, v10, *(void *)(a1 + 40));

  objc_msgSend__collectMetricsFromCompletedItemGroup_(*(void **)(a1 + 48), v11, (uint64_t)v3);
  id v12 = *(void **)(a1 + 48);
  v16[0] = *(void *)(a1 + 32);
  BOOL v14 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v13, (uint64_t)v16, 1);
  objc_msgSend__didUploadMMCSSectionItems_task_error_(v12, v15, (uint64_t)v14, *(void *)(a1 + 56), v6);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

uint64_t sub_1C4E3FCD8(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_removeCancelToken_(v4, v5, *(void *)(a1 + 40));

  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(result + 16);
    return v7();
  }
  return result;
}

uint64_t sub_1C4E3FE7C(uint64_t a1, const char *a2)
{
  return objc_msgSend__uploadPackageSectionsWithEnumerator_task_completionBlock_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
}

uint64_t sub_1C4E40354(uint64_t a1, const char *a2)
{
  objc_msgSend__closePackage_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void sub_1C4E405A8(uint64_t a1, const char *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  objc_msgSend_removeObjectsInArray_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
  unint64_t v5 = objc_msgSend_maxPackageUploadsPerBatch(*(void **)(a1 + 48), v3, v4);
  id v6 = objc_alloc(MEMORY[0x1E4F1CA48]);
  uint64_t v9 = objc_msgSend_count(*(void **)(a1 + 32), v7, v8);
  if (v5 >= v5 - v9) {
    uint64_t v11 = objc_msgSend_initWithCapacity_(v6, v10, v5 - v9);
  }
  else {
    uint64_t v11 = objc_msgSend_initWithCapacity_(v6, v10, v5);
  }
  BOOL v14 = (void *)v11;
  id v15 = objc_msgSend_objectEnumerator(*(void **)(a1 + 56), v12, v13);
  unint64_t v18 = objc_msgSend_count(*(void **)(a1 + 32), v16, v17);
  unint64_t v21 = v5 - v18;
  if (v5 > v18)
  {
    do
    {
      uint64_t v22 = objc_msgSend_nextObject(v15, v19, v20);
      if (!v22) {
        break;
      }
      __int16 v23 = (void *)v22;
      objc_msgSend_addObject_(v14, v19, v22);

      --v21;
    }
    while (v21);
  }
  uint64_t v36 = v15;
  objc_msgSend_removeObjectsInArray_(*(void **)(a1 + 56), v19, (uint64_t)v14);
  objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 32), v24, (uint64_t)v14);
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v25 = v14;
  uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v40, v44, 16);
  if (v27)
  {
    uint64_t v30 = v27;
    uint64_t v31 = *(void *)v41;
    do
    {
      uint64_t v32 = 0;
      do
      {
        if (*(void *)v41 != v31) {
          objc_enumerationMutation(v25);
        }
        uint64_t v33 = *(void *)(*((void *)&v40 + 1) + 8 * v32);
        objc_msgSend_qualityOfService(*(void **)(a1 + 48), v28, v29);
        uint64_t v34 = CKGetGlobalQueue();
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_1C4E407F8;
        block[3] = &unk_1E64F0DF0;
        unint64_t v35 = *(void **)(a1 + 56);
        block[4] = *(void *)(a1 + 48);
        void block[5] = v33;
        id v38 = v35;
        id v39 = *(id *)(a1 + 32);
        dispatch_async(v34, block);

        ++v32;
      }
      while (v30 != v32);
      uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v28, (uint64_t)&v40, v44, 16);
    }
    while (v30);
  }
}

void sub_1C4E407F8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_addCancelToken_withOperation_(v4, v5, *(void *)(a1 + 40), *(void *)(a1 + 32));

  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1C4E408C8;
  v9[3] = &unk_1E64F0DF0;
  v9[4] = v6;
  v9[5] = v7;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  objc_msgSend__uploadPackageSectionsWithTask_completionBlock_(v6, v8, v7, v9);
}

void sub_1C4E408C8(uint64_t a1, const char *a2, uint64_t a3)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_removeCancelToken_(v4, v5, *(void *)(a1 + 40));

  uint64_t v8 = objc_msgSend_cancelTokens(*(void **)(a1 + 40), v6, v7);
  objc_msgSend_removeAllCancelTokens(v8, v9, v10);

  uint64_t v13 = objc_msgSend_group(*(void **)(a1 + 40), v11, v12);
  dispatch_group_leave(v13);

  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void **)(a1 + 32);
  v20[0] = *(void *)(a1 + 40);
  unint64_t v18 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v17, (uint64_t)v20, 1);
  objc_msgSend__uploadPackageSectionsWithPendingTasks_uploadingTasks_completedTasks_(v16, v19, v14, v15, v18);
}

void sub_1C4E40E1C(uint64_t a1, void *a2)
{
  id v2 = a2;
  MMCSOperationMetricCombineMetrics();
  objc_msgSend_date(MEMORY[0x1E4F1C9C8], v3, v4);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = objc_msgSend_startDate(v2, v5, v6);
  objc_msgSend_timeIntervalSinceDate_(v11, v8, (uint64_t)v7);
  objc_msgSend_setDuration_(v2, v9, v10);
}

uint64_t sub_1C4E40FBC(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_metrics(a2, (const char *)a2, a3);
}

void sub_1C4E427A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location)
{
}

void sub_1C4E427D0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_removeAllCancelTokens(v4, v5, v6);

  uint64_t v9 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v7, v8);
  dispatch_group_leave(v9);
}

void sub_1C4E42838(uint64_t a1, const char *a2)
{
  objc_msgSend__didUploadPackageWithTask_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
  id v3 = *(NSObject **)(a1 + 48);
  dispatch_group_leave(v3);
}

BOOL sub_1C4E42878(uint64_t a1, void *a2, uint64_t a3)
{
  id v3 = objc_msgSend_uploadReceipt(a2, (const char *)a2, a3);
  BOOL v4 = v3 != 0;

  return v4;
}

BOOL sub_1C4E428B0(uint64_t a1, void *a2, uint64_t a3)
{
  id v3 = objc_msgSend_uploadReceipt(a2, (const char *)a2, a3);
  BOOL v4 = v3 == 0;

  return v4;
}

void sub_1C4E428E8(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend__didMakeProgressForMMCSItem_(WeakRetained, v4, (uint64_t)v3);
}

void sub_1C4E42944(uint64_t a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  objc_msgSend__collectMetricsFromCompletedItemGroupSet_(*(void **)(a1 + 32), v4, (uint64_t)v3);
  uint64_t v7 = objc_msgSend_error(v3, v5, v6);
  uint64_t v8 = *(void **)(a1 + 32);
  id v11 = objc_msgSend_allMMCSItems(*(void **)(a1 + 40), v9, v10);
  objc_msgSend__didUploadMMCSItems_error_(v8, v12, (uint64_t)v11, v7);

  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v15 = objc_msgSend_allMMCSAndSectionItems(*(void **)(a1 + 40), v13, v14, 0);
  uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v32, v36, 16);
  if (v17)
  {
    uint64_t v20 = v17;
    uint64_t v21 = *(void *)v33;
    do
    {
      uint64_t v22 = 0;
      do
      {
        if (*(void *)v33 != v21) {
          objc_enumerationMutation(v15);
        }
        id v25 = objc_msgSend_package(*(void **)(*((void *)&v32 + 1) + 8 * v22), v18, v19);
        if (v25)
        {
          id v26 = objc_msgSend_uploadTasksByPackages(*(void **)(a1 + 32), v23, v24);
          uint64_t v28 = objc_msgSend_objectForKey_(v26, v27, (uint64_t)v25);

          uint64_t v31 = objc_msgSend_group(v28, v29, v30);
          dispatch_group_leave(v31);
        }
        ++v22;
      }
      while (v20 != v22);
      uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v18, (uint64_t)&v32, v36, 16);
    }
    while (v20);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t sub_1C4E43388(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v8 = objc_msgSend_storageGroupingPolicy(v4, v6, v7);
  uint64_t v11 = objc_msgSend_storageGroupingPolicy(v5, v9, v10);
  if (v8 < v11) {
    goto LABEL_2;
  }
  if (v11 < v8) {
    goto LABEL_4;
  }
  if (v8 != 1) {
    goto LABEL_10;
  }
  uint64_t v15 = objc_msgSend_recordKey(v4, v12, v13);
  uint64_t v18 = objc_msgSend_recordKey(v5, v16, v17);
  if (!v15 || (uint64_t v20 = (void *)v18) == 0) {
    __assert_rtn("CKSortedForUpload_block_invoke", "CKDUploadAssetsOperation.m", 72, "key1 && key2");
  }
  uint64_t v14 = objc_msgSend_compare_(v15, v19, v18);

  if (!v14)
  {
LABEL_10:
    uint64_t v22 = objc_msgSend_uploadRank(v4, v12, v13);
    uint64_t v25 = objc_msgSend_uploadRank(v5, v23, v24);
    if (v22 < v25)
    {
LABEL_2:
      uint64_t v14 = -1;
      goto LABEL_9;
    }
    if (v25 < v22)
    {
LABEL_4:
      uint64_t v14 = 1;
      goto LABEL_9;
    }
    if (v8 == 1) {
      goto LABEL_16;
    }
    uint64_t v28 = objc_msgSend_recordKey(v4, v26, v27);
    uint64_t v31 = objc_msgSend_recordKey(v5, v29, v30);
    if (!v28 || (long long v33 = (void *)v31) == 0) {
      __assert_rtn("CKSortedForUpload_block_invoke", "CKDUploadAssetsOperation.m", 92, "key1 && key2");
    }
    uint64_t v14 = objc_msgSend_compare_(v28, v32, v31);

    if (!v14)
    {
LABEL_16:
      long long v34 = objc_msgSend_record(v4, v26, v27);
      uint64_t v37 = objc_msgSend_recordID(v34, v35, v36);
      long long v40 = objc_msgSend_record(v5, v38, v39);
      long long v43 = objc_msgSend_recordID(v40, v41, v42);
      uint64_t v14 = objc_msgSend_compareToRecordID_(v37, v44, (uint64_t)v43);

      if (!v14)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)) {
          __assert_rtn("CKSortedForUpload_block_invoke", "CKDUploadAssetsOperation.m", 101, "[obj1 isKindOfClass:[CKAsset class]] && [obj2 isKindOfClass:[CKAsset class]]");
        }
        unint64_t v47 = objc_msgSend_mergeableDeltaID(v4, v45, v46);
        v50 = objc_msgSend_deltaIdentifier(v47, v48, v49);

        unsigned int v53 = objc_msgSend_mergeableDeltaID(v5, v51, v52);
        unint64_t v56 = objc_msgSend_deltaIdentifier(v53, v54, v55);

        if (!v50 || !v56 || (uint64_t v14 = objc_msgSend_compare_(v50, v57, (uint64_t)v56)) == 0)
        {
          unint64_t v59 = objc_msgSend_arrayIndex(v4, v57, v58);
          unint64_t v62 = objc_msgSend_arrayIndex(v5, v60, v61);
          if ((v59 & 0x8000000000000000) != 0 || (v62 & 0x8000000000000000) != 0) {
            __assert_rtn("CKSortedForUpload_block_invoke", "CKDUploadAssetsOperation.m", 113, "0 <= index1 && 0 <= index2");
          }
          if (v59 < v62) {
            uint64_t v14 = -1;
          }
          else {
            uint64_t v14 = v62 < v59;
          }
        }
      }
    }
  }
LABEL_9:

  return v14;
}

BOOL sub_1C4E43880(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 2u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(CKDPDateStatistics **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
        goto LABEL_31;
      case 3u:
        uint64_t v18 = objc_alloc_init(CKDPDateStatistics);
        objc_storeStrong((id *)(a1 + 32), v18);
        if (!PBReaderPlaceMark() || !CKDPDateStatisticsReadFrom((uint64_t)v18, a2)) {
          goto LABEL_35;
        }
        goto LABEL_30;
      case 4u:
        uint64_t v18 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || (CKDPRecordReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_35;
        }
        goto LABEL_30;
      case 6u:
        uint64_t v18 = (CKDPDateStatistics *)objc_alloc_init(MEMORY[0x1E4F19EF8]);
        objc_storeStrong((id *)(a1 + 16), v18);
        if PBReaderPlaceMark() && (CKDPDateReadFrom())
        {
LABEL_30:
          PBReaderRecallMark();
LABEL_31:

LABEL_32:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_32;
    }
  }
}

BOOL sub_1C4E44A38(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = (void *)a1[1];
        a1[1] = v17;
LABEL_23:

        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_25:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadString();
    if (v18) {
      objc_msgSend_addValues_(a1, v19, (uint64_t)v18);
    }
    goto LABEL_23;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E45444(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v17;

        goto LABEL_39;
      case 2u:
        uint64_t v19 = objc_alloc_init(CKDPThrottlingConfigCriteria);
        objc_storeStrong((id *)(a1 + 8), v19);
        if (!PBReaderPlaceMark() || (sub_1C50299D4((uint64_t)v19, a2) & 1) == 0) {
          goto LABEL_41;
        }
        goto LABEL_25;
      case 3u:
        uint64_t v19 = objc_alloc_init(CKDPThrottlingConfigRateLimit);
        objc_storeStrong((id *)(a1 + 24), v19);
        if PBReaderPlaceMark() && (sub_1C4E85394((uint64_t)v19, a2))
        {
LABEL_25:
          PBReaderRecallMark();

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_41:

        return 0;
      case 0xAu:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_38:
        *(_DWORD *)(a1 + 32) = v23;
        goto LABEL_39;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_39;
    }
  }
}

void sub_1C4E46C50(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64));
  }
}

void sub_1C4E46F00(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), v5, v6);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    unsigned int v9 = objc_msgSend_recordID(*(void **)(a1 + 40), v7, v8);
    (*((void (**)(id, void *, void, void, void))v10 + 2))(v10, v9, *(void *)(a1 + 48), *(void *)(a1 + 56), 0);
  }
}

void sub_1C4E471A0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v8 = a3;
  if (v8)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unsigned int v9 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v31 = v12;
      __int16 v32 = 2112;
      id v33 = v8;
      _os_log_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_INFO, "Error publish assets for record %@: %@", buf, 0x16u);
    }
    char v13 = objc_msgSend_callbackQueue(*(void **)(a1 + 40), v10, v11);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4E473A0;
    block[3] = &unk_1E64F0120;
    int8x16_t v28 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
    id v29 = v8;
    dispatch_async(v13, block);

    uint64_t v16 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v14, v15);
    dispatch_group_leave(v16);
  }
  else
  {
    char v17 = objc_msgSend_URLOptions(*(void **)(a1 + 40), v6, v7);
    uint64_t v20 = *(void **)(a1 + 40);
    uint64_t v21 = *(void *)(a1 + 48);
    if ((v17 & 2) != 0)
    {
      objc_msgSend__finishPublishAssetsForRecord_(*(void **)(a1 + 40), v18, *(void *)(a1 + 48));
    }
    else
    {
      uint64_t v22 = objc_msgSend_pcs(v5, v18, v19);
      objc_msgSend__dispatchAssetURLsForRecord_pcs_(v20, v23, v21, v22);
    }
    char v26 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v24, v25);
    dispatch_group_leave(v26);
  }
}

void sub_1C4E473A0(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void, void, void))v7 + 2))(v7, *(void *)(a1 + 40), 0, 0, *(void *)(a1 + 48));
  }
}

void sub_1C4E4761C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_setUseCachedEtags_(v3, v4, 0);
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_1C4E477E4;
  v14[3] = &unk_1E64F1AD8;
  objc_copyWeak(&v15, &location);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v5, (uint64_t)v14);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1C4E47C88;
  v11[3] = &unk_1E64F0170;
  objc_copyWeak(&v12, &location);
  objc_copyWeak(&v13, &from);
  objc_msgSend_setCompletionBlock_(v3, v6, (uint64_t)v11);
  objc_msgSend_setFetchRecordsOperation_(*(void **)(a1 + 32), v7, (uint64_t)v3);
  id v10 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v8, v9);
  dispatch_group_enter(v10);

  objc_destroyWeak(&v13);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4E477A4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 80));
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4E477E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v11 = (dispatch_block_t *)MEMORY[0x1E4F1A548];
  id v12 = (void *)*MEMORY[0x1E4F1A548];
  id v13 = (void *)MEMORY[0x1E4F1A550];
  BOOL v14 = (os_log_t *)MEMORY[0x1E4F1A500];
  if (v9)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v12);
    }
    id v15 = *v14;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      id v47 = v8;
      __int16 v48 = 2112;
      id v49 = v9;
      _os_log_error_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_ERROR, "Failed to fetch record %@: %@", buf, 0x16u);
    }
    goto LABEL_6;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v12);
  }
  uint64_t v20 = *v14;
  if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    id v47 = v8;
    _os_log_debug_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEBUG, "Fetched record %@", buf, 0xCu);
    if (v7) {
      goto LABEL_12;
    }
LABEL_30:
    id v9 = 0;
    goto LABEL_6;
  }
  if (!v7) {
    goto LABEL_30;
  }
LABEL_12:
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v21 = objc_msgSend_fileNamesByAssetFieldNames(WeakRetained, v16, v17);
  uint64_t v24 = objc_msgSend_allKeys(v21, v22, v23);

  uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v41, v45, 16);
  if (v27)
  {
    uint64_t v28 = *(void *)v42;
LABEL_14:
    uint64_t v29 = 0;
    while (1)
    {
      if (*(void *)v42 != v28) {
        objc_enumerationMutation(v24);
      }
      uint64_t v30 = objc_msgSend_objectForKeyedSubscript_(v7, v26, *(void *)(*((void *)&v41 + 1) + 8 * v29));

      if (v30) {
        break;
      }
      if (v27 == ++v29)
      {
        uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v26, (uint64_t)&v41, v45, 16);
        if (v27) {
          goto LABEL_14;
        }
        goto LABEL_20;
      }
    }

    id v9 = 0;
    if (!v8) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_20:

    uint64_t v31 = (NSObject **)MEMORY[0x1E4F1A500];
    if (*v13 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], *v11);
    }
    __int16 v32 = *v31;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v47 = v8;
      _os_log_impl(&dword_1C4CFF000, v32, OS_LOG_TYPE_INFO, "Warn: Record %@ contained no matching asset fields to publish", buf, 0xCu);
    }
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v33, *MEMORY[0x1E4F19DD8], 2003, @"Record %@ contained no matching asset fields to publish", v8);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!v8) {
      goto LABEL_6;
    }
  }
  if (!v9)
  {
    objc_msgSend_fetchedRecordsByID(WeakRetained, v16, v17);
    id v19 = (id)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v19);
    uint64_t v36 = objc_msgSend_fetchedRecordsByID(WeakRetained, v34, v35);
    objc_msgSend_setObject_forKeyedSubscript_(v36, v37, (uint64_t)v7, v8);

    objc_sync_exit(v19);
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v18 = objc_msgSend_callbackQueue(WeakRetained, v16, v17);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4E47BFC;
  block[3] = &unk_1E64F0120;
  void block[4] = WeakRetained;
  id v39 = v8;
  id v40 = v9;
  id v19 = v9;
  dispatch_async(v18, block);

LABEL_7:
}

void sub_1C4E47BE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E47BFC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_assetPublishedBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void, void, void))v7 + 2))(v7, *(void *)(a1 + 40), 0, 0, *(void *)(a1 + 48));
  }
}

void sub_1C4E47C88(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v6 = objc_msgSend_error(v3, v4, v5);

  id v7 = (void *)*MEMORY[0x1E4F1A548];
  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    id v8 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = v8;
      id v12 = (objc_class *)objc_opt_class();
      id v13 = NSStringFromClass(v12);
      uint64_t v16 = objc_msgSend_ckShortDescription(v3, v14, v15);
      id v19 = objc_msgSend_error(v3, v17, v18);
      int v32 = 138544130;
      id v33 = v13;
      __int16 v34 = 2048;
      id v35 = v3;
      __int16 v36 = 2114;
      uint64_t v37 = v16;
      __int16 v38 = 2112;
      id v39 = v19;
      _os_log_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_INFO, "Fetch records operation <%{public}@: %p; %{public}@> finished with error %@",
        (uint8_t *)&v32,
        0x2Au);
    }
    uint64_t v20 = objc_msgSend_error(v3, v9, v10);
    objc_msgSend_setError_(WeakRetained, v21, (uint64_t)v20);
    goto LABEL_7;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v7);
  }
  uint64_t v23 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = v23;
    uint64_t v27 = (objc_class *)objc_opt_class();
    uint64_t v28 = NSStringFromClass(v27);
    uint64_t v31 = objc_msgSend_ckShortDescription(v3, v29, v30);
    int v32 = 138543874;
    id v33 = v28;
    __int16 v34 = 2048;
    id v35 = v3;
    __int16 v36 = 2114;
    uint64_t v37 = v31;
    _os_log_debug_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEBUG, "Fetch records operation <%{public}@: %p; %{public}@> succeeded",
      (uint8_t *)&v32,
      0x20u);

LABEL_7:
  }
  objc_msgSend_setFetchRecordsOperation_(WeakRetained, v22, 0);
  char v26 = objc_msgSend_stateTransitionGroup(WeakRetained, v24, v25);
  dispatch_group_leave(v26);
}

void sub_1C4E482CC()
{
  dispatch_queue_t v0 = (void *)qword_1EBBCDDA8;
  qword_1EBBCDDA8 = (uint64_t)&unk_1F20ABCB8;
}

uint64_t sub_1C4E48B70(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 48), v17);
        if PBReaderPlaceMark() && (CKDPRecordReadFrom((uint64_t)v17, a2)) {
          goto LABEL_57;
        }
        goto LABEL_70;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 108) |= 2u;
        while (2)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_64:
        *(unsigned char *)(a1 + 104) = v20 != 0;
        goto LABEL_59;
      case 3u:
        uint64_t v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_msgSend_addFieldsToDeleteIfExistOnMerge_((void *)a1, v24, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_70;
        }
        goto LABEL_57;
      case 4u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 24;
        goto LABEL_52;
      case 5u:
        uint64_t v17 = objc_alloc_init(CKDPRecordSaveRequestConflictLoserUpdate);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (sub_1C4FC1D24(v17, a2) & 1) == 0) {
          goto LABEL_70;
        }
        goto LABEL_57;
      case 6u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        *(unsigned char *)(a1 + 108) |= 1u;
        while (2)
        {
          uint64_t v30 = *v3;
          unint64_t v31 = *(void *)(a2 + v30);
          if (v31 == -1 || v31 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              BOOL v14 = v28++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_68;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_68:
        *(_DWORD *)(a1 + 72) = v29;
        goto LABEL_59;
      case 7u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 96;
        goto LABEL_52;
      case 8u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 56;
        goto LABEL_52;
      case 9u:
        PBReaderReadString();
        uint64_t v17 = (CKDPRecord *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          objc_msgSend_addConflictLosersToResolve_((void *)a1, v33, (uint64_t)v17);
        }
        goto LABEL_58;
      case 0xAu:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 80;
        goto LABEL_52;
      case 0xBu:
        uint64_t v17 = objc_alloc_init(CKDPRecordSaveRequestShareIdUpdate);
        objc_storeStrong((id *)(a1 + 88), v17);
        if (!PBReaderPlaceMark() || (sub_1C503DBB8((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_70;
        }
        goto LABEL_57;
      case 0xCu:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 40;
LABEL_52:
        __int16 v34 = *(void **)(a1 + v26);
        *(void *)(a1 + v26) = v25;

        goto LABEL_59;
      case 0xEu:
        uint64_t v17 = objc_alloc_init(CKDPRequestedFields);
        objc_storeStrong((id *)(a1 + 64), v17);
        if (PBReaderPlaceMark() && CKDPRequestedFieldsReadFrom(v17, a2))
        {
LABEL_57:
          PBReaderRecallMark();
LABEL_58:

LABEL_59:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_70:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_59;
    }
  }
}

void sub_1C4E4A6F0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 80));
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4E4A738(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v9 = objc_msgSend_anonymousShareRemovedBlock(WeakRetained, v7, v8);

  if (v9)
  {
    objc_msgSend_anonymousShareRemovedBlock(WeakRetained, v10, v11);
    unint64_t v12 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
    ((void (**)(void, id, id))v12)[2](v12, v13, v5);
  }
}

void sub_1C4E4A7E0(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = (void *)MEMORY[0x1E4F1A550];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v5 = (os_log_t *)MEMORY[0x1E4F1A500];
  uint64_t v6 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    LOWORD(v22) = 0;
    _os_log_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_INFO, "Completed CKDAnonymousShareRemoveURLRequest", (uint8_t *)&v22, 2u);
  }
  unsigned int v9 = objc_msgSend_error(v3, v7, v8);

  if (v9)
  {
    if (*v4 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v12 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
    {
      int v15 = v12;
      char v18 = objc_msgSend_error(v3, v16, v17);
      int v22 = 138412290;
      char v23 = v18;
      _os_log_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_INFO, "Error CKDAnonymousShareRemoveURLRequest: %@", (uint8_t *)&v22, 0xCu);
    }
    unsigned int v19 = objc_msgSend_error(v3, v13, v14);
    objc_msgSend_setError_(WeakRetained, v20, (uint64_t)v19);
  }
  uint64_t v21 = objc_msgSend_stateTransitionGroup(WeakRetained, v10, v11);
  dispatch_group_leave(v21);
}

void sub_1C4E4AD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4E4AD7C(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = (void *)*MEMORY[0x1E4F1A548];
    if (v3)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v5);
      }
      uint64_t v6 = (void *)*MEMORY[0x1E4F1A510];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_ERROR))
      {
        id v13 = v6;
        uint64_t v16 = objc_msgSend_operationID(WeakRetained, v14, v15);
        int v21 = 138412546;
        int v22 = v16;
        __int16 v23 = 2112;
        id v24 = v3;
        _os_log_error_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_ERROR, "Error fetching mergeable deltas in operation %@: %@", (uint8_t *)&v21, 0x16u);
      }
      objc_msgSend_setError_(WeakRetained, v7, (uint64_t)v3);
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v5);
      }
      uint64_t v11 = (void *)*MEMORY[0x1E4F1A510];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = v11;
        uint64_t v20 = objc_msgSend_operationID(WeakRetained, v18, v19);
        int v21 = 138412290;
        int v22 = v20;
        _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "Finished fetching mergeable deltas for operation %@", (uint8_t *)&v21, 0xCu);
      }
    }
    os_log_t v12 = objc_msgSend_stateTransitionGroup(WeakRetained, v8, v9);
    dispatch_group_leave(v12);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unint64_t v10 = *MEMORY[0x1E4F1A510];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_INFO))
    {
      LOWORD(v21) = 0;
      _os_log_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_INFO, "Fetch mergeable deltas operation deallocated while fetching mergeable deltas from the server", (uint8_t *)&v21, 2u);
    }
  }
}

void sub_1C4E4B2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  objc_destroyWeak(v25);
  objc_destroyWeak(&a25);
  _Unwind_Resume(a1);
}

void sub_1C4E4B2FC(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v11)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v15 = *MEMORY[0x1E4F1A510];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_DEBUG))
    {
      int v17 = 138412290;
      id v18 = v9;
      _os_log_debug_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_DEBUG, "Got a continuation token fetching deltas for value %@", (uint8_t *)&v17, 0xCu);
    }
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v16, (uint64_t)v11, v9);
  }
  objc_msgSend_handleMergeableDeltasFetchedForValueID_fetchedDeltas_result_(WeakRetained, v13, (uint64_t)v9, v10, v12);
}

void sub_1C4E4B460(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v6 = v3;
  if (WeakRetained && v3)
  {
    id v7 = objc_msgSend_error(v3, v4, v5);

    if (v7)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v10 = (void *)*MEMORY[0x1E4F1A510];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_ERROR)) {
        goto LABEL_7;
      }
      int v22 = v10;
      id v24 = objc_msgSend_operationID(WeakRetained, v28, v29);
      char v27 = objc_msgSend_error(v6, v30, v31);
      int v36 = 138543618;
      uint64_t v37 = v24;
      __int16 v38 = 2112;
      id v39 = v27;
      _os_log_error_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_ERROR, "Stopping after error fetching deltas for operation %{public}@: %@", (uint8_t *)&v36, 0x16u);
    }
    else
    {
      uint64_t v15 = objc_msgSend_count(*(void **)(a1 + 32), v8, v9);
      uint64_t v16 = (void *)*MEMORY[0x1E4F1A548];
      if (v15)
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], v16);
        }
        int v17 = (void *)*MEMORY[0x1E4F1A510];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_DEBUG))
        {
          char v32 = v17;
          id v35 = objc_msgSend_operationID(WeakRetained, v33, v34);
          int v36 = 138543362;
          uint64_t v37 = v35;
          _os_log_debug_impl(&dword_1C4CFF000, v32, OS_LOG_TYPE_DEBUG, "Need to continue fetching deltas for operation %{public}@", (uint8_t *)&v36, 0xCu);
        }
        uint64_t v14 = objc_msgSend_allKeys(*(void **)(a1 + 32), v18, v19);
        objc_msgSend_fetchMergeableDeltasRecursivelyForValueIDs_continuationTokens_completionHandler_(WeakRetained, v20, (uint64_t)v14, *(void *)(a1 + 32), *(void *)(a1 + 40));
        goto LABEL_14;
      }
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v16);
      }
      int v21 = (void *)*MEMORY[0x1E4F1A510];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_DEBUG))
      {
LABEL_7:
        uint64_t v13 = *(void *)(a1 + 40);
        uint64_t v14 = objc_msgSend_error(v6, v11, v12);
        (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v14);
LABEL_14:

        goto LABEL_15;
      }
      int v22 = v21;
      __int16 v23 = (objc_class *)objc_opt_class();
      id v24 = NSStringFromClass(v23);
      char v27 = objc_msgSend_ckShortDescription(WeakRetained, v25, v26);
      int v36 = 138543874;
      uint64_t v37 = v24;
      __int16 v38 = 2048;
      id v39 = WeakRetained;
      __int16 v40 = 2114;
      long long v41 = v27;
      _os_log_debug_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_DEBUG, "Fetch deltas URL request completed for operation <%{public}@: %p; %{public}@>",
        (uint8_t *)&v36,
        0x20u);
    }

    goto LABEL_7;
  }
LABEL_15:
}

void sub_1C4E4BD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  objc_destroyWeak(v29);
  objc_destroyWeak((id *)(v30 - 128));
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4E4BD54(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4E4BD64(uint64_t a1)
{
}

uint64_t sub_1C4E4BD6C(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_needsDecryption(a2, (const char *)a2, a3);
}

void sub_1C4E4BD74(uint64_t a1, void *a2, void *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (v5)
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      id v8 = *(id *)(a1 + 40);
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v45, v49, 16);
      if (v10)
      {
        uint64_t v11 = v10;
        id v41 = v6;
        uint64_t v43 = a1;
        uint64_t v12 = *(void *)v46;
        uint64_t v42 = *MEMORY[0x1E4F19DD8];
        do
        {
          uint64_t v13 = v8;
          uint64_t v14 = 0;
          do
          {
            if (*(void *)v46 != v12) {
              objc_enumerationMutation(v13);
            }
            uint64_t v15 = *(void **)(*((void *)&v45 + 1) + 8 * v14);
            uint64_t v16 = objc_alloc_init(CKDKeyEnvelopeContext);
            uint64_t v19 = objc_msgSend_pcs(v5, v17, v18);
            objc_msgSend_setShareProtection_(v16, v20, v19);
            __int16 v23 = objc_msgSend_container(WeakRetained, v21, v22);
            uint64_t v26 = objc_msgSend_pcsManager(v23, v24, v25);
            objc_msgSend_setPcsManager_(v16, v27, v26);

            id v44 = 0;
            LOBYTE(v26) = objc_msgSend_decryptWithContext_error_(v15, v28, (uint64_t)v16, &v44);
            id v29 = v44;
            if ((v26 & 1) == 0)
            {
              if (*MEMORY[0x1E4F1A550] != -1) {
                dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
              }
              uint64_t v30 = *MEMORY[0x1E4F1A500];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                id v51 = v29;
                _os_log_error_impl(&dword_1C4CFF000, v30, OS_LOG_TYPE_ERROR, "Failed to decrypt mergeable delta with error: %@", buf, 0xCu);
              }
              uint64_t v32 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v31, v42, 5004, v29, @"Failed to decrypt mergeable delta");
              uint64_t v33 = *(void *)(*(void *)(v43 + 56) + 8);
              uint64_t v34 = *(void **)(v33 + 40);
              *(void *)(v33 + 40) = v32;
            }
            ++v14;
          }
          while (v11 != v14);
          id v8 = v13;
          uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v35, (uint64_t)&v45, v49, 16);
        }
        while (v11);
        a1 = v43;
        id v6 = v41;
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      int v36 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        __int16 v40 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        id v51 = v40;
        _os_log_error_impl(&dword_1C4CFF000, v36, OS_LOG_TYPE_ERROR, "Failed to fetch PCS for value: %@", buf, 0xCu);
      }
      uint64_t v38 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v37, *MEMORY[0x1E4F19DD8], 5001, v6, @"Failed to fetch PCS to decrypt mergeable delta");
      uint64_t v39 = *(void *)(*(void *)(a1 + 56) + 8);
      id v8 = *(id *)(v39 + 40);
      *(void *)(v39 + 40) = v38;
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
}

void sub_1C4E4C0F4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), a2, a3);
  dispatch_group_leave(v4);

  id v7 = objc_msgSend_deltasFetchedBlock(*(void **)(a1 + 32), v5, v6);

  if (v7)
  {
    uint64_t v10 = objc_msgSend_deltasFetchedBlock(*(void **)(a1 + 32), v8, v9);
    if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 48);
    }
    id v12 = (id)v10;
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 16))(v10, *(void *)(a1 + 40), v11);
  }
}

uint64_t sub_1C4E4C294()
{
  dispatch_queue_t v0 = [CKDClientInfo alloc];
  qword_1EBBCFC78 = objc_msgSend_initInternal(v0, v1, v2);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4E4C4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4E4C510(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend__refreshHostname(WeakRetained, v1, v2);
}

void sub_1C4E4C684(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E4C6F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t CKDPRequestOperationHeaderReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 240;
        goto LABEL_106;
      case 2u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 56;
        goto LABEL_106;
      case 3u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 48;
        goto LABEL_106;
      case 4u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 72;
        goto LABEL_106;
      case 5u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 252) |= 1u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_128;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_128:
        uint64_t v79 = 8;
        goto LABEL_153;
      case 6u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 252) |= 4u;
        while (2)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_132;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_132:
        uint64_t v79 = 24;
        goto LABEL_153;
      case 7u:
        uint64_t v30 = (CKDPLocale *)objc_alloc_init(MEMORY[0x1E4F19F08]);
        objc_storeStrong((id *)(a1 + 120), v30);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0) {
          goto LABEL_170;
        }
        goto LABEL_123;
      case 8u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 152;
        goto LABEL_106;
      case 9u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 112;
        goto LABEL_106;
      case 0xAu:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 128;
        goto LABEL_106;
      case 0xBu:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 136;
        goto LABEL_106;
      case 0x10u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 252) |= 2u;
        while (2)
        {
          uint64_t v34 = *v3;
          unint64_t v35 = *(void *)(a2 + v34);
          if (v35 == -1 || v35 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
            *(void *)(a2 + v34) = v35 + 1;
            v21 |= (unint64_t)(v36 & 0x7F) << v32;
            if (v36 < 0)
            {
              v32 += 7;
              BOOL v14 = v33++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_136:
        uint64_t v79 = 16;
        goto LABEL_153;
      case 0x11u:
        uint64_t v30 = objc_alloc_init(CKDPLocale);
        objc_storeStrong((id *)(a1 + 176), v30);
        if (!PBReaderPlaceMark() || !sub_1C4F35368((uint64_t)v30, a2)) {
          goto LABEL_170;
        }
        goto LABEL_123;
      case 0x12u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 184;
        goto LABEL_106;
      case 0x13u:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        *(_WORD *)(a1 + 252) |= 0x10u;
        while (2)
        {
          uint64_t v40 = *v3;
          unint64_t v41 = *(void *)(a2 + v40);
          if (v41 == -1 || v41 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v42 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
            *(void *)(a2 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              BOOL v14 = v38++ >= 9;
              if (v14)
              {
                LODWORD(v39) = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v39) = 0;
        }
LABEL_140:
        uint64_t v80 = 64;
        goto LABEL_167;
      case 0x14u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 88;
        goto LABEL_106;
      case 0x15u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 96;
        goto LABEL_106;
      case 0x16u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 104;
        goto LABEL_106;
      case 0x17u:
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v39 = 0;
        *(_WORD *)(a1 + 252) |= 0x80u;
        while (2)
        {
          uint64_t v45 = *v3;
          unint64_t v46 = *(void *)(a2 + v45);
          if (v46 == -1 || v46 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v47 = *(unsigned char *)(*(void *)(a2 + *v7) + v46);
            *(void *)(a2 + v45) = v46 + 1;
            v39 |= (unint64_t)(v47 & 0x7F) << v43;
            if (v47 < 0)
            {
              v43 += 7;
              BOOL v14 = v44++ >= 9;
              if (v14)
              {
                LODWORD(v39) = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v39) = 0;
        }
LABEL_144:
        uint64_t v80 = 224;
        goto LABEL_167;
      case 0x18u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 232;
        goto LABEL_106;
      case 0x19u:
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v39 = 0;
        *(_WORD *)(a1 + 252) |= 0x20u;
        while (2)
        {
          uint64_t v50 = *v3;
          unint64_t v51 = *(void *)(a2 + v50);
          if (v51 == -1 || v51 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
            *(void *)(a2 + v50) = v51 + 1;
            v39 |= (unint64_t)(v52 & 0x7F) << v48;
            if (v52 < 0)
            {
              v48 += 7;
              BOOL v14 = v49++ >= 9;
              if (v14)
              {
                LODWORD(v39) = 0;
                goto LABEL_148;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v39) = 0;
        }
LABEL_148:
        uint64_t v80 = 168;
        goto LABEL_167;
      case 0x1Au:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 192;
        goto LABEL_106;
      case 0x1Bu:
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 252) |= 8u;
        while (2)
        {
          uint64_t v55 = *v3;
          unint64_t v56 = *(void *)(a2 + v55);
          if (v56 == -1 || v56 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(a2 + *v7) + v56);
            *(void *)(a2 + v55) = v56 + 1;
            v21 |= (unint64_t)(v57 & 0x7F) << v53;
            if (v57 < 0)
            {
              v53 += 7;
              BOOL v14 = v54++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_152;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_152:
        uint64_t v79 = 32;
LABEL_153:
        *(void *)(a1 + v79) = v21;
        goto LABEL_168;
      case 0x1Cu:
        PBReaderReadData();
        uint64_t v30 = (CKDPLocale *)objc_claimAutoreleasedReturnValue();
        if (v30) {
          objc_msgSend_addServiceIdentityKeyIDs_((void *)a1, v58, (uint64_t)v30);
        }
        goto LABEL_124;
      case 0x1Du:
        char v59 = 0;
        unsigned int v60 = 0;
        uint64_t v61 = 0;
        *(_WORD *)(a1 + 252) |= 0x100u;
        while (2)
        {
          uint64_t v62 = *v3;
          unint64_t v63 = *(void *)(a2 + v62);
          if (v63 == -1 || v63 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v64 = *(unsigned char *)(*(void *)(a2 + *v7) + v63);
            *(void *)(a2 + v62) = v63 + 1;
            v61 |= (unint64_t)(v64 & 0x7F) << v59;
            if (v64 < 0)
            {
              v59 += 7;
              BOOL v14 = v60++ >= 9;
              if (v14)
              {
                uint64_t v61 = 0;
                goto LABEL_157;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v61 = 0;
        }
LABEL_157:
        BOOL v81 = v61 != 0;
        uint64_t v82 = 248;
        goto LABEL_162;
      case 0x1Eu:
        uint64_t v30 = objc_alloc_init(CKDPRequestOperationHeaderAssetAuthorizeGetRequestOptions);
        objc_storeStrong((id *)(a1 + 80), v30);
        if (!PBReaderPlaceMark()
          || (CKDPRequestOperationHeaderAssetAuthorizeGetRequestOptionsReadFrom((uint64_t)v30, a2) & 1) == 0)
        {
          goto LABEL_170;
        }
        goto LABEL_123;
      case 0x1Fu:
        PBReaderReadString();
        uint64_t v30 = (CKDPLocale *)objc_claimAutoreleasedReturnValue();
        if (v30) {
          objc_msgSend_addActiveThrottlingLabel_((void *)a1, v65, (uint64_t)v30);
        }
        goto LABEL_124;
      case 0x20u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 160;
        goto LABEL_106;
      case 0x21u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 144;
LABEL_106:
        v66 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_168;
      case 0x22u:
        char v67 = 0;
        unsigned int v68 = 0;
        uint64_t v69 = 0;
        *(_WORD *)(a1 + 252) |= 0x200u;
        while (2)
        {
          uint64_t v70 = *v3;
          unint64_t v71 = *(void *)(a2 + v70);
          if (v71 == -1 || v71 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v72 = *(unsigned char *)(*(void *)(a2 + *v7) + v71);
            *(void *)(a2 + v70) = v71 + 1;
            v69 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              BOOL v14 = v68++ >= 9;
              if (v14)
              {
                uint64_t v69 = 0;
                goto LABEL_161;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v69 = 0;
        }
LABEL_161:
        BOOL v81 = v69 != 0;
        uint64_t v82 = 249;
LABEL_162:
        *(unsigned char *)(a1 + v82) = v81;
        goto LABEL_168;
      case 0x23u:
        char v73 = 0;
        unsigned int v74 = 0;
        uint64_t v39 = 0;
        *(_WORD *)(a1 + 252) |= 0x40u;
        while (2)
        {
          uint64_t v75 = *v3;
          unint64_t v76 = *(void *)(a2 + v75);
          if (v76 == -1 || v76 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v77 = *(unsigned char *)(*(void *)(a2 + *v7) + v76);
            *(void *)(a2 + v75) = v76 + 1;
            v39 |= (unint64_t)(v77 & 0x7F) << v73;
            if (v77 < 0)
            {
              v73 += 7;
              BOOL v14 = v74++ >= 9;
              if (v14)
              {
                LODWORD(v39) = 0;
                goto LABEL_166;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v39) = 0;
        }
LABEL_166:
        uint64_t v80 = 200;
LABEL_167:
        *(_DWORD *)(a1 + v80) = v39;
        goto LABEL_168;
      case 0x24u:
        uint64_t v30 = objc_alloc_init(CKDPRequestOperationHeaderSupplementalZoneInfo);
        objc_msgSend_addSupplementalZoneInfos_((void *)a1, v78, (uint64_t)v30);
        if (PBReaderPlaceMark()
          && CKDPRequestOperationHeaderSupplementalZoneInfoReadFrom((uint64_t)v30, a2))
        {
LABEL_123:
          PBReaderRecallMark();
LABEL_124:

LABEL_168:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_170:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_168;
    }
  }
}

BOOL sub_1C4E5106C(id *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v18 = objc_alloc_init(CKDPAssetUploadTokenRetrieveRequestAssetField);
        objc_msgSend_addAssetFields_(a1, v19, (uint64_t)v18);
        if (!PBReaderPlaceMark() || !sub_1C4EC0DE4((id *)&v18->super.super.isa, a2))
        {
LABEL_34:

          return 0;
        }
        goto LABEL_29;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        uint64_t v18 = (CKDPAssetUploadTokenRetrieveRequestAssetField *)objc_alloc_init(MEMORY[0x1E4F19F20]);
        objc_storeStrong(a1 + 2, v18);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0) {
          goto LABEL_34;
        }
LABEL_29:
        PBReaderRecallMark();

        goto LABEL_31;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_31:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = objc_alloc_init(CKDPRecordType);
    objc_storeStrong(a1 + 3, v18);
    if (!PBReaderPlaceMark() || (CKDPRecordTypeReadFrom((uint64_t)v18, a2) & 1) == 0) {
      goto LABEL_34;
    }
    goto LABEL_29;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4E525CC(id *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 269)
      {
        if ((int)v17 > 502)
        {
          if ((int)v17 <= 799)
          {
            switch(v17)
            {
              case 0x1F7:
                uint64_t v18 = objc_alloc_init(CKDPShareAcceptResponse);
                objc_storeStrong(a1 + 30, v18);
                if (!PBReaderPlaceMark() || (sub_1C4E81080((uint64_t)v18, a2) & 1) == 0)
                {
LABEL_206:

                  return 0;
                }
                break;
              case 0x1F8:
                uint64_t v18 = objc_alloc_init(CKDPShareDeclineResponse);
                objc_storeStrong(a1 + 32, v18);
                if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                  goto LABEL_206;
                }
                break;
              case 0x201:
                uint64_t v18 = objc_alloc_init(CKDPShareVettingInitiateResponse);
                objc_storeStrong(a1 + 34, v18);
                if (!PBReaderPlaceMark() || (sub_1C4F6CBD4((uint64_t)v18, a2) & 1) == 0) {
                  goto LABEL_206;
                }
                break;
              default:
                goto LABEL_75;
            }
          }
          else
          {
            if ((int)v17 <= 899)
            {
              switch((int)v17)
              {
                case 800:
                  uint64_t v18 = objc_alloc_init(CKDPTokenRegistrationResponse);
                  objc_storeStrong(a1 + 38, v18);
                  if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                    goto LABEL_206;
                  }
                  goto LABEL_202;
                case 801:
                  uint64_t v18 = objc_alloc_init(CKDPTokenUnregistrationResponse);
                  objc_storeStrong(a1 + 39, v18);
                  if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                    goto LABEL_206;
                  }
                  goto LABEL_202;
                case 802:
                  uint64_t v18 = objc_alloc_init(CKDPSetBadgeCountResponse);
                  objc_storeStrong(a1 + 29, v18);
                  if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                    goto LABEL_206;
                  }
                  goto LABEL_202;
                case 803:
                  uint64_t v18 = objc_alloc_init(CKDPNotificationSyncResponse);
                  objc_storeStrong(a1 + 18, v18);
                  if (!PBReaderPlaceMark()
                    || (CKDPNotificationSyncResponseReadFrom((uint64_t)v18, a2) & 1) == 0)
                  {
                    goto LABEL_206;
                  }
                  goto LABEL_202;
                case 804:
                  uint64_t v18 = objc_alloc_init(CKDPNotificationMarkReadResponse);
                  objc_storeStrong(a1 + 17, v18);
                  if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                    goto LABEL_206;
                  }
                  goto LABEL_202;
                default:
                  goto LABEL_75;
              }
            }
            switch(v17)
            {
              case 0x384:
                uint64_t v18 = objc_alloc_init(CKDPArchiveRecordsResponse);
                objc_storeStrong(a1 + 5, v18);
                if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                  goto LABEL_206;
                }
                break;
              case 0x385:
                uint64_t v18 = objc_alloc_init(CKDPMarkAssetBrokenResponse);
                objc_storeStrong(a1 + 12, v18);
                if (!PBReaderPlaceMark() || (sub_1C4FCE230((uint64_t)v18, a2) & 1) == 0) {
                  goto LABEL_206;
                }
                break;
              case 0x44D:
                uint64_t v18 = objc_alloc_init(CKDPCodeFunctionInvokeResponse);
                objc_storeStrong(a1 + 10, v18);
                if (!PBReaderPlaceMark() || !sub_1C4FF0634((uint64_t)v18, a2)) {
                  goto LABEL_206;
                }
                break;
              default:
LABEL_75:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  return 0;
                }
                continue;
            }
          }
        }
        else if ((int)v17 <= 300)
        {
          switch(v17)
          {
            case 0x10E:
              uint64_t v18 = objc_alloc_init(CKDPAnonymousShareAddResponse);
              objc_storeStrong(a1 + 3, v18);
              if (!PBReaderPlaceMark() || (sub_1C4EF05AC((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_206;
              }
              break;
            case 0x10F:
              uint64_t v18 = objc_alloc_init(CKDPAnonymousShareRemoveResponse);
              objc_storeStrong(a1 + 4, v18);
              if (!PBReaderPlaceMark() || (sub_1C4EBA0D8((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_206;
              }
              break;
            case 0x12C:
              uint64_t v18 = objc_alloc_init(CKDPSubscriptionCreateResponse);
              objc_storeStrong(a1 + 35, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              break;
            default:
              goto LABEL_75;
          }
        }
        else
        {
          switch((int)v17)
          {
            case 400:
              uint64_t v18 = objc_alloc_init(CKDPUserRetrieveResponse);
              objc_storeStrong(a1 + 47, v18);
              if (!PBReaderPlaceMark() || (sub_1C50167BC((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_206;
              }
              break;
            case 401:
              uint64_t v18 = objc_alloc_init(CKDPUserQueryResponse);
              objc_storeStrong(a1 + 46, v18);
              if (!PBReaderPlaceMark() || (sub_1C501C79C((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_206;
              }
              break;
            case 402:
              uint64_t v18 = objc_alloc_init(CKDPUserPrivacySettingsRetrieveResponse);
              objc_storeStrong(a1 + 44, v18);
              if (!PBReaderPlaceMark() || !sub_1C4EE926C((id *)&v18->super.super.isa, a2)) {
                goto LABEL_206;
              }
              break;
            case 403:
              uint64_t v18 = objc_alloc_init(CKDPUserPrivacySettingsUpdateResponse);
              objc_storeStrong(a1 + 45, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              break;
            case 404:
              uint64_t v18 = objc_alloc_init(CKDPUserPrivacySettingsResetResponse);
              objc_storeStrong(a1 + 43, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              break;
            case 405:
              uint64_t v18 = objc_alloc_init(CKDPUserPrivacySettingsBatchLookupResponse);
              objc_storeStrong(a1 + 42, v18);
              if (!PBReaderPlaceMark() || (sub_1C4EC23B4(v18, a2) & 1) == 0) {
                goto LABEL_206;
              }
              break;
            case 406:
              goto LABEL_75;
            case 407:
              uint64_t v18 = objc_alloc_init(CKDPAdopterCapabilitiesSaveResponse);
              objc_storeStrong(a1 + 2, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              break;
            case 408:
              uint64_t v18 = objc_alloc_init(CKDPAdopterCapabilitiesCheckResponse);
              objc_storeStrong(a1 + 1, v18);
              if (!PBReaderPlaceMark() || (sub_1C4FFE540((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_206;
              }
              break;
            case 409:
              uint64_t v18 = objc_alloc_init(CKDPZoneUsageSaveResponse);
              objc_storeStrong(a1 + 53, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              break;
            case 410:
              uint64_t v18 = objc_alloc_init(CKDPShareUsageSaveResponse);
              objc_storeStrong(a1 + 33, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              break;
            default:
              if (v17 == 301)
              {
                uint64_t v18 = objc_alloc_init(CKDPSubscriptionRetrieveResponse);
                objc_storeStrong(a1 + 37, v18);
                if (!PBReaderPlaceMark() || (sub_1C4EC2D20(v18, a2) & 1) == 0) {
                  goto LABEL_206;
                }
              }
              else
              {
                if (v17 != 303) {
                  goto LABEL_75;
                }
                uint64_t v18 = objc_alloc_init(CKDPSubscriptionDeleteResponse);
                objc_storeStrong(a1 + 36, v18);
                if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                  goto LABEL_206;
                }
              }
              break;
          }
        }
      }
      else
      {
        if ((int)v17 > 199)
        {
          switch((int)v17)
          {
            case 200:
              uint64_t v18 = objc_alloc_init(CKDPZoneSaveResponse);
              objc_storeStrong(a1 + 52, v18);
              if (!PBReaderPlaceMark() || (sub_1C504C168((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 201:
              uint64_t v18 = objc_alloc_init(CKDPZoneRetrieveResponse);
              objc_storeStrong(a1 + 51, v18);
              if (!PBReaderPlaceMark() || !sub_1C4F407E0(v18, a2)) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 202:
              uint64_t v18 = objc_alloc_init(CKDPZoneDeleteResponse);
              objc_storeStrong(a1 + 49, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 203:
              uint64_t v18 = objc_alloc_init(CKDPZoneRetrieveChangesResponse);
              objc_storeStrong(a1 + 50, v18);
              if (!PBReaderPlaceMark() || (sub_1C5025140((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 215:
            case 221:
            case 226:
            case 227:
            case 228:
            case 229:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 241:
            case 242:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
              goto LABEL_75;
            case 210:
              uint64_t v18 = objc_alloc_init(CKDPRecordSaveResponse);
              objc_storeStrong(a1 + 26, v18);
              if (!PBReaderPlaceMark() || !sub_1C4E43880((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 211:
              uint64_t v18 = objc_alloc_init(CKDPRecordRetrieveResponse);
              objc_storeStrong(a1 + 24, v18);
              if (!PBReaderPlaceMark() || (sub_1C5027968((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 212:
              uint64_t v18 = objc_alloc_init(CKDPRecordRetrieveVersionsResponse);
              objc_storeStrong(a1 + 25, v18);
              if (!PBReaderPlaceMark() || (sub_1C4E57B78(v18, a2) & 1) == 0) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 213:
              uint64_t v18 = objc_alloc_init(CKDPRecordRetrieveChangesResponse);
              objc_storeStrong(a1 + 23, v18);
              if (!PBReaderPlaceMark() || (sub_1C4F41DF8((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 214:
              uint64_t v18 = objc_alloc_init(CKDPRecordDeleteResponse);
              objc_storeStrong(a1 + 20, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 216:
              uint64_t v18 = objc_alloc_init(CKDPRecordResolveTokenResponse);
              objc_storeStrong(a1 + 22, v18);
              if (!PBReaderPlaceMark() || (sub_1C4D47B98((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 217:
              uint64_t v18 = objc_alloc_init(CKDPFetchArchivedRecordsResponse);
              objc_storeStrong(a1 + 9, v18);
              if (!PBReaderPlaceMark() || (sub_1C4FC6CDC((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 218:
              uint64_t v18 = objc_alloc_init(CKDPRecordMoveResponse);
              objc_storeStrong(a1 + 21, v18);
              if (!PBReaderPlaceMark() || !sub_1C4FB1EE0((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 219:
              uint64_t v18 = objc_alloc_init(CKDPShareAccessResponse);
              objc_storeStrong(a1 + 31, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 220:
              uint64_t v18 = objc_alloc_init(CKDPQueryRetrieveResponse);
              objc_storeStrong(a1 + 19, v18);
              if (!PBReaderPlaceMark() || !sub_1C4F4FC20(v18, a2)) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 222:
              uint64_t v18 = objc_alloc_init(CKDPMergeableDeltaSaveResponse);
              objc_storeStrong(a1 + 16, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 223:
              uint64_t v18 = objc_alloc_init(CKDPMergeableDeltaMetadataRetrieveResponse);
              objc_storeStrong(a1 + 13, v18);
              if (!PBReaderPlaceMark() || !sub_1C4E77144(v18, a2)) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 224:
              uint64_t v18 = objc_alloc_init(CKDPMergeableDeltaReplaceResponse);
              objc_storeStrong(a1 + 14, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 225:
              uint64_t v18 = objc_alloc_init(CKDPMergeableDeltaRetrieveResponse);
              objc_storeStrong(a1 + 15, v18);
              if (!PBReaderPlaceMark() || !sub_1C4FD66A0(v18, a2)) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 230:
              uint64_t v18 = objc_alloc_init(CKDPAssetUploadTokenRetrieveResponse);
              objc_storeStrong(a1 + 6, v18);
              if (!PBReaderPlaceMark() || !sub_1C4FF25D0(v18, a2)) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 240:
              uint64_t v18 = objc_alloc_init(CKDPDeleteContainerResponse);
              objc_storeStrong(a1 + 8, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 243:
              uint64_t v18 = objc_alloc_init(CKDPUserAvailableQuotaResponse);
              objc_storeStrong(a1 + 41, v18);
              if (!PBReaderPlaceMark() || (sub_1C4D4DB64((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 244:
              uint64_t v18 = objc_alloc_init(CKDPBundlesForContainerResponse);
              objc_storeStrong(a1 + 7, v18);
              if (!PBReaderPlaceMark() || (sub_1C4E6D894(v18, a2) & 1) == 0) {
                goto LABEL_206;
              }
              goto LABEL_202;
            case 250:
              uint64_t v18 = objc_alloc_init(CKDPWebAuthTokenRetrieveResponse);
              objc_storeStrong(a1 + 48, v18);
              if (!PBReaderPlaceMark() || !sub_1C4E8946C((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              goto LABEL_202;
            default:
              if (v17 != 260) {
                goto LABEL_75;
              }
              uint64_t v18 = objc_alloc_init(CKDPUpdateMissingAssetStatusResponse);
              objc_storeStrong(a1 + 40, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_206;
              }
              goto LABEL_202;
          }
        }
        switch(v17)
        {
          case 2:
            uint64_t v18 = objc_alloc_init(CKDPOperation);
            objc_storeStrong(a1 + 27, v18);
            if (!PBReaderPlaceMark() || (CKDPOperationReadFrom((uint64_t)v18, a2) & 1) == 0) {
              goto LABEL_206;
            }
            break;
          case 3:
            uint64_t v18 = objc_alloc_init(CKDPResponseOperationResult);
            objc_storeStrong(a1 + 28, v18);
            if (!PBReaderPlaceMark() || (CKDPResponseOperationResultReadFrom((uint64_t)v18, a2) & 1) == 0) {
              goto LABEL_206;
            }
            break;
          case 4:
            uint64_t v18 = objc_alloc_init(CKDPResponseOperationHeader);
            objc_storeStrong(a1 + 11, v18);
            if (!PBReaderPlaceMark() || !sub_1C4D82628(v18, a2)) {
              goto LABEL_206;
            }
            break;
          default:
            goto LABEL_75;
        }
      }
LABEL_202:
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E5712C()
{
  dispatch_queue_t v0 = (void *)qword_1EBBCDDB8;
  qword_1EBBCDDB8 = (uint64_t)&unk_1F20ABCE0;
}

BOOL sub_1C4E572A0(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
LABEL_22:
        char v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadData();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E57B78(unsigned char *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        unint64_t v23 = objc_alloc_init(CKDPRecord);
        objc_msgSend_addRecordVersions_(a1, v24, (uint64_t)v23);
        if (!PBReaderPlaceMark() || (CKDPRecordReadFrom((uint64_t)v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        a1[20] |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_35:
        a1[16] = v19 != 0;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E58410()
{
  qword_1EBBCFC90 = objc_alloc_init(CKDPCSNotifier);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4E58614(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E58750(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E58A2C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v5 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    int v12 = 138543362;
    uint64_t v13 = a3;
    _os_log_debug_impl(&dword_1C4CFF000, v5, OS_LOG_TYPE_DEBUG, "Received identities changed notification %{public}@", (uint8_t *)&v12, 0xCu);
  }
  char v8 = objc_msgSend_pcsUpdateSource(v4, v6, v7);

  if (v8)
  {
    uint64_t v11 = objc_msgSend_pcsUpdateSource(v4, v9, v10);
    dispatch_source_merge_data(v11, 1uLL);
  }
  if (*MEMORY[0x1E4F1A4E0]) {
    objc_msgSend_clearSharedMockIdentitySetsCache(CKDPCSIdentityManager, v9, v10);
  }
}

void sub_1C4E58B68(uint64_t a1)
{
  uint64_t v191 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v151 = _os_activity_create(&dword_1C4CFF000, "CKDPCSNotifier/PCSIdentitiesChanged", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v151, &state);
  v157 = WeakRetained;
  if (WeakRetained)
  {
    if (*MEMORY[0x1E4F1A4E0]) {
      int v154 = objc_msgSend_checkAndClearTestOverrides_(*(void **)(a1 + 32), v3, @"ClearContainerOnPCSUpdateSource");
    }
    else {
      int v154 = 0;
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v4 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_DEBUG, "PCS identities changed. Clearing PCS identity caches and in-memory PCS objects", buf, 2u);
    }
    uint64_t v7 = objc_msgSend_missingIdentitiesContextMap(WeakRetained, v5, v6);
    objc_sync_enter(v7);
    long long v178 = 0u;
    long long v179 = 0u;
    long long v180 = 0u;
    long long v181 = 0u;
    uint64_t v10 = objc_msgSend_missingIdentitiesContextMap(WeakRetained, v8, v9);
    id obj = objc_msgSend_allKeys(v10, v11, v12);

    uint64_t v155 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v13, (uint64_t)&v178, v190, 16);
    if (v155)
    {
      uint64_t v153 = *(void *)v179;
      uint64_t v16 = *MEMORY[0x1E4F1A5D8];
      char v17 = v7;
LABEL_11:
      uint64_t v159 = 0;
      while (1)
      {
        if (*(void *)v179 != v153) {
          objc_enumerationMutation(obj);
        }
        uint64_t v158 = *(void *)(*((void *)&v178 + 1) + 8 * v159);
        unsigned int v18 = objc_msgSend_missingIdentitiesContextMap(v157, v14, v15);
        v161 = objc_msgSend_objectForKeyedSubscript_(v18, v19, v158);

        if (v154) {
          objc_msgSend_setContainer_(v161, v20, 0);
        }
        uint64_t v160 = objc_msgSend_container(v161, v20, v21);
        if (v160)
        {
          char v24 = objc_msgSend_pcsManager((void *)v160, v22, v23);
          uint64_t v27 = objc_msgSend_identityManager(v24, v25, v26);
          objc_msgSend_identitiesChanged(v27, v28, v29);

          char v32 = objc_msgSend_pcsCache((void *)v160, v30, v31);
          objc_msgSend_clearPCSMemoryCaches(v32, v33, v34);

          char v37 = objc_msgSend_pcsManager((void *)v160, v35, v36);
          objc_msgSend_setBoundaryKeyData_(v37, v38, 0);
        }
        id v162 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
        id v163 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
        unint64_t v41 = objc_msgSend_copyOfMissingIdentityPublicKeys(v161, v39, v40);
        if (objc_msgSend_count(v41, v42, v43))
        {
        }
        else
        {
          char v48 = objc_msgSend_copyOfServicesWithMissingIdentities(v161, v44, v45);
          BOOL v51 = objc_msgSend_count(v48, v49, v50) == 0;

          if (v51) {
            goto LABEL_65;
          }
        }
        char v52 = objc_msgSend_account(v161, v46, v47);
        BOOL v53 = v52 == 0;

        unsigned int v54 = (void *)*MEMORY[0x1E4F1A548];
        if (v53)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], v54);
          }
          v133 = *MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1C4CFF000, v133, OS_LOG_TYPE_ERROR, "No account found on missing identities context.", buf, 2u);
          }
          goto LABEL_90;
        }
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], v54);
        }
        uint64_t v55 = *MEMORY[0x1E4F1A528];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_1C4CFF000, v55, OS_LOG_TYPE_DEBUG, "We've come across missing identities before. Checking to see if a formerly missing key has arrived.", buf, 2u);
        }
        uint64_t v58 = objc_msgSend_account(v161, v56, v57);
        uint64_t v61 = objc_msgSend_copyOfServicesWithMissingIdentities(v161, v59, v60);
        uint64_t v64 = objc_msgSend_anyObject(v61, v62, v63);
        v66 = (void *)v64;
        if (v64) {
          uint64_t v67 = v64;
        }
        else {
          uint64_t v67 = *MEMORY[0x1E4F93FC0];
        }
        id v177 = 0;
        unsigned int v68 = (const void *)objc_msgSend_createFullKeychainIdentitySetForAccount_serviceName_error_(CKDPCSIdentityManager, v65, (uint64_t)v58, v67, &v177);
        v156 = (__CFString *)v177;

        if (!v68)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          v149 = *MEMORY[0x1E4F1A528];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_ERROR))
          {
            v150 = @"Unknown error";
            if (v156) {
              v150 = v156;
            }
            *(_DWORD *)buf = 138412290;
            uint64_t v185 = (uint64_t)v150;
            _os_log_error_impl(&dword_1C4CFF000, v149, OS_LOG_TYPE_ERROR, "Couldn't get a full identity set to verify against: %@", buf, 0xCu);
          }

          goto LABEL_100;
        }
        long long v175 = 0u;
        long long v176 = 0u;
        long long v173 = 0u;
        long long v174 = 0u;
        unint64_t v71 = objc_msgSend_copyOfServicesWithMissingIdentities(v161, v69, v70);
        uint64_t v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v71, v72, (uint64_t)&v173, v189, 16);
        if (v73)
        {
          uint64_t v74 = *(void *)v174;
          do
          {
            uint64_t v75 = 0;
            do
            {
              if (*(void *)v174 != v74) {
                objc_enumerationMutation(v71);
              }
              uint64_t v76 = *(void *)(*((void *)&v173 + 1) + 8 * v75);
              CFTypeRef cf = 0;
              v78 = (const void *)PCSIdentitySetCopyCurrentIdentityWithError();
              CFTypeRef v79 = cf;
              if (v78) {
                BOOL v80 = cf == 0;
              }
              else {
                BOOL v80 = 0;
              }
              if (v80)
              {
                if (*MEMORY[0x1E4F1A550] != -1) {
                  dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
                }
                BOOL v81 = *MEMORY[0x1E4F1A528];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 138543362;
                  uint64_t v185 = v76;
                  _os_log_debug_impl(&dword_1C4CFF000, v81, OS_LOG_TYPE_DEBUG, "Service %{public}@ now has a current identity", buf, 0xCu);
                }
                uint64_t v7 = v17;
                objc_msgSend_addObject_(v162, v82, v76);
                CFTypeRef v79 = cf;
              }
              if (v79)
              {
                CFRelease(v79);
                CFTypeRef cf = 0;
              }
              if (v78) {
                CFRelease(v78);
              }
              ++v75;
            }
            while (v73 != v75);
            uint64_t v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v71, v77, (uint64_t)&v173, v189, 16);
          }
          while (v73);
        }

        long long v170 = 0u;
        long long v171 = 0u;
        long long v168 = 0u;
        long long v169 = 0u;
        v85 = objc_msgSend_copyOfMissingIdentityPublicKeys(v161, v83, v84);
        uint64_t v87 = objc_msgSend_countByEnumeratingWithState_objects_count_(v85, v86, (uint64_t)&v168, v188, 16);
        if (v87)
        {
          uint64_t v88 = *(void *)v169;
          do
          {
            uint64_t v89 = 0;
            do
            {
              if (*(void *)v169 != v88) {
                objc_enumerationMutation(v85);
              }
              uint64_t v90 = *(void *)(*((void *)&v168 + 1) + 8 * v89);
              v92 = (const void *)PCSIdentitySetCopyIdentity();
              if (v92)
              {
                if (*MEMORY[0x1E4F1A550] != -1) {
                  dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
                }
                v93 = *MEMORY[0x1E4F1A528];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 138543618;
                  uint64_t v185 = v90;
                  __int16 v186 = 2112;
                  v187 = v92;
                  _os_log_debug_impl(&dword_1C4CFF000, v93, OS_LOG_TYPE_DEBUG, "Formerly missing public key %{public}@ was found with identity %@.", buf, 0x16u);
                }
                uint64_t v7 = v17;
                objc_msgSend_addObject_(v163, v94, v90);
                CFRelease(v92);
              }
              ++v89;
            }
            while (v87 != v89);
            uint64_t v87 = objc_msgSend_countByEnumeratingWithState_objects_count_(v85, v91, (uint64_t)&v168, v188, 16);
          }
          while (v87);
        }

        CFRelease(v68);
LABEL_65:
        if (objc_msgSend_count(v163, v46, v47) || objc_msgSend_count(v162, v95, v96))
        {
          v97 = objc_msgSend_pcsManager((void *)v160, v95, v96);
          v100 = objc_msgSend_undecryptablePCSDataHashes(v97, v98, v99);
          objc_msgSend_removeAllObjects(v100, v101, v102);

          v105 = objc_msgSend_missingIdentityPublicKeys(v161, v103, v104);
          objc_msgSend_minusSet_(v105, v106, (uint64_t)v163);

          v109 = objc_msgSend_servicesWithMissingIdentities(v161, v107, v108);
          objc_msgSend_minusSet_(v109, v110, (uint64_t)v162);

          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          v111 = *MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl(&dword_1C4CFF000, v111, OS_LOG_TYPE_DEBUG, "One or more previously missing PCS identities have arrived. Posting a notification to all clients", buf, 2u);
          }
          objc_msgSend_invalidateCachedAccountInfo(MEMORY[0x1E4F19E20], v112, v113);
          long long v166 = 0u;
          long long v167 = 0u;
          long long v164 = 0u;
          long long v165 = 0u;
          id v114 = v162;
          uint64_t v116 = objc_msgSend_countByEnumeratingWithState_objects_count_(v114, v115, (uint64_t)&v164, v183, 16);
          if (v116)
          {
            uint64_t v117 = *(void *)v165;
            do
            {
              for (uint64_t i = 0; i != v116; ++i)
              {
                if (*(void *)v165 != v117) {
                  objc_enumerationMutation(v114);
                }
                uint64_t v119 = *(void *)(*((void *)&v164 + 1) + 8 * i);
                v120 = NSString;
                v121 = CKTestNotificationPrefix();
                v123 = objc_msgSend_stringWithFormat_(v120, v122, @"%@%@-%@", v121, v16, v119);

                v126 = (const char *)objc_msgSend_UTF8String(v123, v124, v125);
                notify_post(v126);
              }
              uint64_t v116 = objc_msgSend_countByEnumeratingWithState_objects_count_(v114, v127, (uint64_t)&v164, v183, 16);
            }
            while (v116);
          }
        }
        v128 = objc_msgSend_copyOfServicesWithMissingIdentities(v161, v95, v96);
        if (objc_msgSend_count(v128, v129, v130))
        {
        }
        else
        {
          v134 = objc_msgSend_copyOfMissingIdentityPublicKeys(v161, v131, v132);
          BOOL v137 = (v160 | objc_msgSend_count(v134, v135, v136)) == 0;

          if (v137)
          {
            v140 = objc_msgSend_missingIdentitiesContextMap(v157, v138, v139);
            objc_msgSend_removeObjectForKey_(v140, v141, v158);

            if (*MEMORY[0x1E4F1A550] != -1) {
              dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            v142 = *MEMORY[0x1E4F1A500];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v185 = v158;
              _os_log_debug_impl(&dword_1C4CFF000, v142, OS_LOG_TYPE_DEBUG, "Removed empty context from manager context map for UUID: %@", buf, 0xCu);
            }
          }
        }
LABEL_90:

        if (++v159 == v155)
        {
          uint64_t v155 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v178, v190, 16);
          if (v155) {
            goto LABEL_11;
          }
          break;
        }
      }
    }

    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id obj = (id)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled(obj, OS_LOG_TYPE_DEBUG))
    {
      v145 = objc_msgSend_missingIdentitiesContextMap(v157, v143, v144);
      uint64_t v148 = objc_msgSend_count(v145, v146, v147);
      *(_DWORD *)buf = 134217984;
      uint64_t v185 = v148;
      _os_log_debug_impl(&dword_1C4CFF000, obj, OS_LOG_TYPE_DEBUG, "Number of remaining missing identity contexts: %lu", buf, 0xCu);
    }
LABEL_100:

    objc_sync_exit(v7);
  }
  os_activity_scope_leave(&state);
}

void sub_1C4E59760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  objc_sync_exit(v69);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1C4E59A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
}

void sub_1C4E59CA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E59EEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E5A144(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E5A260(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E5A3E0(_Unwind_Exception *exception_object)
{
}

void sub_1C4E5A470(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E5A4EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E5A634(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E5A6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4E5A7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v5 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v12 = a3;
    _os_log_debug_impl(&dword_1C4CFF000, v5, OS_LOG_TYPE_DEBUG, "Received DBR account became ready notification %{public}@", buf, 0xCu);
  }
  char v8 = objc_msgSend_sharedManager(CKDPCSKeySyncManager, v6, v7);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_1C4E5AA18;
  v10[3] = &unk_1E64F1B50;
  void v10[4] = a2;
  objc_msgSend_setRacedWithGuitarfishRepairCallbackOnAllOutstandingHandlersWithCompletion_(v8, v9, (uint64_t)v10);
}

void sub_1C4E5A9CC(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1C8789E70]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4E5AA18(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v1 = *(id *)(a1 + 32);
  id v4 = objc_msgSend_servicesNeedingDBRReauthentication(v1, v2, v3);
  unint64_t v28 = v1;
  objc_msgSend_clearServicesNeedingDBRReauthentication(v1, v5, v6);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v7 = v4;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v29, v33, 16);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v30;
    uint64_t v12 = *MEMORY[0x1E4F1A558];
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v30 != v11) {
          objc_enumerationMutation(v7);
        }
        uint64_t v14 = *(void *)(*((void *)&v29 + 1) + 8 * i);
        uint64_t v15 = NSString;
        uint64_t v16 = CKTestNotificationPrefix();
        unsigned int v18 = objc_msgSend_stringWithFormat_(v15, v17, @"%@%@-%@", v16, v12, v14);

        uint64_t v21 = (const char *)objc_msgSend_UTF8String(v18, v19, v20);
        notify_post(v21);
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v22, (uint64_t)&v29, v33, 16);
    }
    while (v10);
  }

  if (*MEMORY[0x1E4F1A4E0])
  {
    char v25 = objc_msgSend_servicesNeedingDBRReauthentication(v28, v23, v24);
    if (objc_msgSend_count(v25, v26, v27)) {
      __assert_rtn("_guitarfishRepairCallback_block_invoke", "CKDPCSNotifier.m", 366, "notifier.servicesNeedingDBRReauthentication.count == 0");
    }
  }
}

void sub_1C4E5B228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1C4E5B248(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = objc_opt_new();
  uint64_t v12 = objc_msgSend_translator(*(void **)(a1 + 32), v10, v11);
  uint64_t v15 = objc_msgSend_container(*(void **)(a1 + 32), v13, v14);
  unsigned int v18 = objc_msgSend_deviceID(v15, v16, v17);
  uint64_t v20 = objc_msgSend_pZoneUsageFromZoneID_at_withDeviceID_(v12, v19, (uint64_t)v7, v8, v18);

  uint64_t v62 = v20;
  uint64_t v23 = objc_msgSend_data(v20, v21, v22);
  uint64_t v26 = objc_msgSend_container(*(void **)(a1 + 32), v24, v25);
  long long v29 = objc_msgSend_pcsManager(v26, v27, v28);
  id v63 = 0;
  long long v31 = objc_msgSend_createCloudKitFeaturesSignatureForData_forScope_error_(v29, v30, (uint64_t)v23, 2, &v63);
  id v32 = v63;

  if (v32 || !v31)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unsigned int v33 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v65 = v32;
      _os_log_error_impl(&dword_1C4CFF000, v33, OS_LOG_TYPE_ERROR, "Failed to generate signature for zone usage. Error: %{public}@", buf, 0xCu);
    }
    unint64_t v35 = *(void **)(a1 + 32);
    uint64_t v36 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v34, *MEMORY[0x1E4F19DD8], 5023, v32, @"Failed to create cryptographic signature when saving zone usage.");
    objc_msgSend_finishWithError_(v35, v37, (uint64_t)v36);

    *a4 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  unsigned int v38 = objc_opt_new();
  objc_msgSend_setVersion_(v38, v39, 1);
  objc_msgSend_setSerializedObject_(v38, v40, (uint64_t)v23);
  objc_msgSend_setSignature_(v38, v41, (uint64_t)v31);
  objc_msgSend_setSignedZoneUsage_(v9, v42, (uint64_t)v38);
  unsigned int v44 = objc_msgSend_operationRequestWithType_(*(void **)(a1 + 32), v43, 409);
  objc_msgSend_setZoneUsageSaveRequest_(v44, v45, (uint64_t)v9);
  objc_msgSend_addObject_(*(void **)(a1 + 40), v46, (uint64_t)v44);
  unsigned int v49 = objc_msgSend_zoneIDByRequestID(*(void **)(a1 + 32), v47, v48);

  if (!v49)
  {
    char v52 = objc_opt_new();
    objc_msgSend_setZoneIDByRequestID_(*(void **)(a1 + 32), v53, (uint64_t)v52);
  }
  unsigned int v54 = objc_msgSend_zoneIDByRequestID(*(void **)(a1 + 32), v50, v51);
  uint64_t v57 = objc_msgSend_request(v44, v55, v56);
  uint64_t v60 = objc_msgSend_operationUUID(v57, v58, v59);
  objc_msgSend_setObject_forKeyedSubscript_(v54, v61, (uint64_t)v7, v60);
}

void sub_1C4E5B58C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = objc_opt_new();
  uint64_t v12 = objc_msgSend_translator(*(void **)(a1 + 32), v10, v11);
  uint64_t v15 = objc_msgSend_container(*(void **)(a1 + 32), v13, v14);
  unsigned int v18 = objc_msgSend_deviceID(v15, v16, v17);
  uint64_t v20 = objc_msgSend_pShareUsageFromShareRecordID_at_withDeviceID_(v12, v19, (uint64_t)v7, v8, v18);

  uint64_t v62 = v20;
  uint64_t v23 = objc_msgSend_data(v20, v21, v22);
  uint64_t v26 = objc_msgSend_container(*(void **)(a1 + 32), v24, v25);
  long long v29 = objc_msgSend_pcsManager(v26, v27, v28);
  id v63 = 0;
  long long v31 = objc_msgSend_createCloudKitFeaturesSignatureForData_forScope_error_(v29, v30, (uint64_t)v23, 3, &v63);
  id v32 = v63;

  if (v32 || !v31)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unsigned int v33 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v65 = v32;
      _os_log_error_impl(&dword_1C4CFF000, v33, OS_LOG_TYPE_ERROR, "Failed to generate signature for share usage. Error: %{public}@", buf, 0xCu);
    }
    unint64_t v35 = *(void **)(a1 + 32);
    uint64_t v36 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v34, *MEMORY[0x1E4F19DD8], 5023, v32, @"Failed to create cryptographic signature when saving share usage.");
    objc_msgSend_finishWithError_(v35, v37, (uint64_t)v36);

    *a4 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  unsigned int v38 = objc_opt_new();
  objc_msgSend_setVersion_(v38, v39, 1);
  objc_msgSend_setSerializedObject_(v38, v40, (uint64_t)v23);
  objc_msgSend_setSignature_(v38, v41, (uint64_t)v31);
  objc_msgSend_setSignedShareUsage_(v9, v42, (uint64_t)v38);
  unsigned int v44 = objc_msgSend_operationRequestWithType_(*(void **)(a1 + 32), v43, 410);
  objc_msgSend_setShareUsageSaveRequest_(v44, v45, (uint64_t)v9);
  objc_msgSend_addObject_(*(void **)(a1 + 40), v46, (uint64_t)v44);
  unsigned int v49 = objc_msgSend_shareIDByRequestID(*(void **)(a1 + 32), v47, v48);

  if (!v49)
  {
    char v52 = objc_opt_new();
    objc_msgSend_setShareIDByRequestID_(*(void **)(a1 + 32), v53, (uint64_t)v52);
  }
  unsigned int v54 = objc_msgSend_shareIDByRequestID(*(void **)(a1 + 32), v50, v51);
  uint64_t v57 = objc_msgSend_request(v44, v55, v56);
  uint64_t v60 = objc_msgSend_operationUUID(v57, v58, v59);
  objc_msgSend_setObject_forKeyedSubscript_(v54, v61, (uint64_t)v7, v60);
}

uint64_t sub_1C4E5F44C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E5FD04(uint64_t a1)
{
}

void sub_1C4E5FD0C(uint64_t a1)
{
}

void sub_1C4E60538(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_hash(*(void **)(a1 + 32), a2, a3);
  kdebug_trace();
  if (objc_msgSend_isParsing(*(void **)(a1 + 32), v4, v5))
  {
    uint64_t v28 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v6, v7);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v28, v29, *(void *)(a1 + 56), *(void *)(a1 + 32), @"CKDProtobufResponseBodyParser.m", 176, @"Someone is parsing on another thread!");
  }
  objc_msgSend_setIsParsing_(*(void **)(a1 + 32), v6, 1);
  unint64_t v10 = objc_msgSend_tailParserData(*(void **)(a1 + 32), v8, v9);

  char v13 = *(void **)(a1 + 40);
  if (v10)
  {
    if (v13)
    {
      BOOL v14 = objc_msgSend_tailParserData(*(void **)(a1 + 32), v11, v12);
      objc_msgSend_appendData_(v14, v15, *(void *)(a1 + 40));
    }
    uint64_t v16 = objc_msgSend_tailParserData(*(void **)(a1 + 32), v11, v12);
  }
  else
  {
    uint64_t v16 = objc_msgSend_mutableCopy(v13, v11, v12);
  }
  unsigned int v18 = (void *)v16;
  objc_msgSend_setParserData_(*(void **)(a1 + 32), v17, v16);

  uint64_t v19 = dispatch_group_create();
  char v21 = objc_msgSend__parseObjects_group_(*(void **)(a1 + 32), v20, 0, v19);
  objc_msgSend_setIsParsing_(*(void **)(a1 + 32), v22, 0);
  objc_msgSend_hash(*(void **)(a1 + 32), v23, v24);
  kdebug_trace();
  if (*(void *)(a1 + 48))
  {
    objc_msgSend_qualityOfService(*(void **)(a1 + 32), v25, v26);
    uint64_t v27 = CKGetGlobalQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4E6072C;
    block[3] = &unk_1E64F4330;
    char v32 = v21;
    void block[4] = *(void *)(a1 + 32);
    id v31 = *(id *)(a1 + 48);
    dispatch_group_notify(v19, v27, block);
  }
}

void sub_1C4E6072C(uint64_t a1, const char *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = objc_msgSend_parserError(*(void **)(a1 + 32), a2, a3);
  }
  id v5 = (id)v4;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1C4E60850(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_tailParserData(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    uint64_t v7 = objc_msgSend_tailParserData(*(void **)(a1 + 32), v5, v6);
    objc_msgSend_setParserData_(*(void **)(a1 + 32), v8, (uint64_t)v7);
  }
  uint64_t v9 = dispatch_group_create();
  objc_msgSend__parseObjects_group_(*(void **)(a1 + 32), v10, 1, v9);
  if (*(void *)(a1 + 40))
  {
    objc_msgSend_qualityOfService(*(void **)(a1 + 32), v11, v12);
    char v13 = CKGetGlobalQueue();
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = sub_1C4E60960;
    v15[3] = &unk_1E64F0790;
    id v14 = *(id *)(a1 + 40);
    v15[4] = *(void *)(a1 + 32);
    id v16 = v14;
    dispatch_group_notify(v9, v13, v15);
  }
}

void sub_1C4E60960(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  objc_msgSend_parserError(*(void **)(a1 + 32), a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

BOOL sub_1C4E60C14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
LABEL_22:
        uint64_t v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E61678(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1C4E619B8(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_deleteCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_deleteCompletionBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1C4E6210C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41)
{
  objc_destroyWeak(v43);
  objc_destroyWeak(v42);
  objc_destroyWeak(v41);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a41);
  _Unwind_Resume(a1);
}

void sub_1C4E62154(uint64_t a1, void *a2, void *a3)
{
  id v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  unsigned int v9 = objc_msgSend_subscriptionsByServerID(WeakRetained, v7, v8);
  uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(v9, v10, (uint64_t)v6);

  if (v11) {
    objc_msgSend__handleSubscriptionSaved_responseCode_(WeakRetained, v12, (uint64_t)v6, v5);
  }
  else {
    objc_msgSend__handleSubscriptionDeleted_responseCode_(WeakRetained, v12, (uint64_t)v6, v5);
  }
}

void sub_1C4E6220C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = objc_msgSend_error(v2, v3, v4);
  objc_msgSend_finishWithError_(WeakRetained, v6, (uint64_t)v5);
}

uint64_t sub_1C4E624C0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setZoneIDs_, *(void *)(a1 + 32));
}

BOOL sub_1C4E62940(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(MEMORY[0x1E4F19F08]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    id v17 = objc_alloc_init(MEMORY[0x1E4F19F30]);
    objc_storeStrong((id *)(a1 + 16), v17);
    if (!PBReaderPlaceMark() || (CKDPRecordZoneIdentifierReadFrom() & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E66918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4E66940(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (id *)(a1 + 32);
  uint64_t v4 = a3;
  id WeakRetained = objc_loadWeakRetained(v3);
  if (WeakRetained) {
    WeakRetained[8] = 1;
  }
  id v8 = WeakRetained;
  sub_1C4E669BC((uint64_t)WeakRetained, v6, v7);
  v4[2](v4);
}

void sub_1C4E669BC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = objc_msgSend_assertLocked(*(void **)(a1 + 88), a2, a3);
    if (!*(void *)(a1 + 64))
    {
      if (*(unsigned char *)(a1 + 8))
      {
        id v5 = (void *)MEMORY[0x1C8789E70](v4);
        if (*(void *)(a1 + 72))
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          id v6 = (void *)*MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
          {
            id v11 = *(id *)(a1 + 72);
            unint64_t v12 = v6;
            int v15 = objc_msgSend_ckShortDescription(v11, v13, v14);
            int v16 = 138412290;
            id v17 = v15;
            _os_log_debug_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_DEBUG, "Discarding container: %@", (uint8_t *)&v16, 0xCu);
          }
          uint64_t v7 = *(void **)(a1 + 72);
          *(void *)(a1 + 72) = 0;
        }
      }
      id v8 = sub_1C4E66C8C((void *)a1);
      objc_msgSend_discardContentIfPossible(v8, v9, v10);
    }
  }
}

id sub_1C4E66C8C(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_sync_enter(v1);
    id WeakRetained = objc_loadWeakRetained(v1 + 2);
    objc_sync_exit(v1);
  }
  else
  {
    id WeakRetained = 0;
  }
  return WeakRetained;
}

void sub_1C4E66D8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E66E2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E66EE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E66F90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E6715C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    if (v3)
    {
      *(unsigned char *)(v3 + 9) = 1;
      uint64_t v4 = *(void *)(a1 + 40);
    }
    if ((v4 & 2) != 0) {
      sub_1C4E669BC(*(void *)(a1 + 32), a2, a3);
    }
  }
  else if (v3)
  {
    *(unsigned char *)(v3 + 9) = 0;
  }
}

void sub_1C4E6739C(uint64_t a1, const char *a2, uint64_t a3)
{
}

void sub_1C4E67478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4E67490(uint64_t a1)
{
  id v2 = sub_1C4E66C8C(*(void **)(a1 + 32));
  if (v2)
  {
    char isContentDiscarded = objc_msgSend_isContentDiscarded(v2, (const char *)v2, v3);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      uint64_t v5 = *(void *)(v5 + 72);
    }
    char isContentDiscarded = v5 == 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = isContentDiscarded;
  return MEMORY[0x1F41817F8]();
}

void sub_1C4E676C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4E676DC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1) {
    uint64_t v1 = *(void *)(v1 + 64);
  }
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v1;
  return result;
}

uint64_t CKDPRequestOperationHeaderAssetAuthorizeGetRequestOptionsReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_33;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            uint64_t v21 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_35:
        *(void *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(CKDPRequestOperationHeaderAssetAuthorizeGetRequestOptionsHeaderInfo);
        objc_msgSend_addContentRequestHeaders_((void *)a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark()
          || !CKDPRequestOperationHeaderAssetAuthorizeGetRequestOptionsHeaderInfoReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E68440()
{
  dispatch_queue_t v0 = (void *)qword_1EBBCDDC8;
  qword_1EBBCDDC8 = (uint64_t)&unk_1F20ABD08;
}

BOOL sub_1C4E68668(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        id v17 = (CKDPRequestedFields *)objc_alloc_init(MEMORY[0x1E4F19F20]);
        objc_storeStrong((id *)(a1 + 24), v17);
        if PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom()) {
          goto LABEL_30;
        }
        goto LABEL_35;
      case 2u:
        id v17 = objc_alloc_init(CKDPRequestedFields);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (!PBReaderPlaceMark() || !CKDPRequestedFieldsReadFrom(v17, a2)) {
          goto LABEL_35;
        }
        goto LABEL_30;
      case 3u:
        uint64_t v18 = PBReaderReadString();
        id v17 = *(CKDPRequestedFields **)(a1 + 16);
        *(void *)(a1 + 16) = v18;
        goto LABEL_31;
      case 4u:
        id v17 = objc_alloc_init(CKDPAssetsToDownload);
        objc_storeStrong((id *)(a1 + 8), v17);
        if PBReaderPlaceMark() && (sub_1C4FD2BD0((uint64_t)v17, a2))
        {
LABEL_30:
          PBReaderRecallMark();
LABEL_31:

LABEL_32:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_32;
    }
  }
}

uint64_t sub_1C4E68FE0(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_destinationRecord(a2, (const char *)a2, a3);
}

id sub_1C4E68FE8(uint64_t a1, void *a2)
{
  id v2 = (objc_class *)MEMORY[0x1E4F1A470];
  id v3 = a2;
  id v4 = [v2 alloc];
  uint64_t v7 = objc_msgSend_destinationRecord(v3, v5, v6);
  unint64_t v10 = objc_msgSend_recordID(v7, v8, v9);
  unint64_t v12 = objc_msgSend_initWithObject1_object2_(v4, v11, (uint64_t)v10, v3);

  return v12;
}

uint64_t sub_1C4E69370(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_moveCallbackWithMetadata_error_, *(void *)(a1 + 40));
}

void sub_1C4E697CC(uint64_t a1, void *a2)
{
  id v33 = a2;
  if ((objc_msgSend_shouldOnlySaveAssetContent(*(void **)(a1 + 32), v3, v4) & 1) == 0)
  {
    uint64_t v7 = objc_msgSend_recordsUploaded(v33, v5, v6);
    objc_msgSend_setRecordsUploaded_(v33, v8, v7 + 1);
  }
  uint64_t v9 = objc_msgSend_moveChange(*(void **)(a1 + 40), v5, v6);
  unint64_t v12 = objc_msgSend_destinationRecord(v9, v10, v11);
  uint64_t v15 = objc_msgSend_assetCount(v12, v13, v14);
  uint64_t v18 = objc_msgSend_assetsUploaded(v33, v16, v17);
  objc_msgSend_setAssetsUploaded_(v33, v19, v18 + v15);

  uint64_t v22 = objc_msgSend_moveChange(*(void **)(a1 + 40), v20, v21);
  uint64_t v25 = objc_msgSend_destinationRecord(v22, v23, v24);
  uint64_t v28 = objc_msgSend_assetDiskSize(v25, v26, v27);
  uint64_t v31 = objc_msgSend_assetsUploadedFileSize(v33, v29, v30);
  objc_msgSend_setAssetsUploadedFileSize_(v33, v32, v31 + v28);
}

void sub_1C4E69B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1C4E69B80(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v6 = objc_msgSend_moveChangesByDestinationRecordID(v2, v4, v5);
  uint64_t v9 = objc_msgSend_recordID(v3, v7, v8);

  uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(v6, v10, (uint64_t)v9);

  return v11;
}

void sub_1C4E69C04(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  unint64_t v10 = (id *)(a1 + 32);
  id v11 = a6;
  id v12 = a5;
  id v13 = a4;
  id v14 = a3;
  id v15 = a2;
  id WeakRetained = objc_loadWeakRetained(v10);
  uint64_t v18 = objc_msgSend_handlersByRecordID(WeakRetained, v16, v17);
  unsigned int v20 = objc_msgSend_objectForKeyedSubscript_(v18, v19, (uint64_t)v14);

  objc_msgSend__handleRecordMoved_handler_responseCode_recordForOplockFailure_destinationServerRecord_moveMarkerServerRecord_(WeakRetained, v21, (uint64_t)v14, v20, v15, v12, v13, v11);
}

void sub_1C4E6A2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose((const void *)(v45 - 240), 8);
  _Block_object_dispose((const void *)(v45 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4E6A320(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4E6A330(uint64_t a1)
{
}

void sub_1C4E6A338(uint64_t a1, void *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = v7;
  if (!v6 || v7)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v9 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      char v19 = *(void **)(a1 + 32);
      unsigned int v20 = v9;
      unint64_t v23 = objc_msgSend_recordID(v19, v21, v22);
      *(_DWORD *)buf = 138412290;
      uint64_t v25 = v23;
      _os_log_debug_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEBUG, "Failed to decrypt destination record %@", buf, 0xCu);
    }
    id v12 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v13 = *MEMORY[0x1E4F19DD8];
    id v14 = objc_msgSend_recordID(*(void **)(a1 + 32), v10, v11);
    uint64_t v16 = objc_msgSend_errorWithDomain_code_format_(v12, v15, v13, 5004, @"Couldn't decrypt destination record returned from the server in response to our move of record %@", v14);
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1C4E6A4E8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = v7;
  if (!v6 || v7)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v9 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      char v19 = *(void **)(a1 + 32);
      unsigned int v20 = v9;
      unint64_t v23 = objc_msgSend_recordID(v19, v21, v22);
      *(_DWORD *)buf = 138412290;
      uint64_t v25 = v23;
      _os_log_debug_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEBUG, "Failed to decrypt move marker record %@", buf, 0xCu);
    }
    id v12 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v13 = *MEMORY[0x1E4F19DD8];
    id v14 = objc_msgSend_recordID(*(void **)(a1 + 32), v10, v11);
    uint64_t v16 = objc_msgSend_errorWithDomain_code_format_(v12, v15, v13, 5004, @"Couldn't decrypt move marker record returned from the server in response to our move of record %@", v14);
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1C4E6A698(uint64_t a1, const char *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)
    || *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40))
  {
    objc_msgSend_setState_(*(void **)(a1 + 32), a2, 12);
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    if (!v5) {
      uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    }
    objc_msgSend_setError_(*(void **)(a1 + 32), v4, v5);
  }
  id v6 = objc_msgSend_error(*(void **)(a1 + 32), a2, a3);

  if (!v6) {
    objc_msgSend__reallyHandleRecordMoved_handler_responseCode_recordForOplockFailure_destinationServerRecord_moveMarkerServerRecord_(*(void **)(a1 + 40), v7, *(void *)(a1 + 48), *(void *)(a1 + 32), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40));
  }
  uint64_t v9 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v7, v8);
  dispatch_group_leave(v9);
}

uint64_t sub_1C4E6BAB0(uint64_t a1, const char *a2)
{
  objc_msgSend_setError_(*(void **)(a1 + 32), a2, (uint64_t)a2);
  uint64_t v5 = objc_msgSend_error(*(void **)(a1 + 32), v3, v4);
  uint64_t v8 = objc_msgSend_code(v5, v6, v7);

  unint64_t v10 = *(void **)(a1 + 32);
  if (v8 == 2024) {
    uint64_t v11 = 11;
  }
  else {
    uint64_t v11 = 12;
  }
  return objc_msgSend_setState_(v10, v9, v11);
}

void sub_1C4E6BB20(uint64_t a1, void *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  uint64_t v8 = (void *)*MEMORY[0x1E4F1A548];
  uint64_t v9 = *MEMORY[0x1E4F1A550];
  if (!v5 || v6)
  {
    if (v9 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v8);
    }
    uint64_t v25 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v39 = *(void **)(a1 + 32);
      uint64_t v40 = v25;
      uint64_t v43 = objc_msgSend_recordID(v39, v41, v42);
      *(_DWORD *)buf = 138412290;
      uint64_t v45 = v43;
      _os_log_debug_impl(&dword_1C4CFF000, v40, OS_LOG_TYPE_DEBUG, "Failed to decrypt the server record %@. Returning as is.", buf, 0xCu);

      if (!v7) {
        goto LABEL_13;
      }
    }
    else if (!v7)
    {
LABEL_13:
      uint64_t v28 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v29 = *MEMORY[0x1E4F19DD8];
      uint64_t v30 = *(void *)(a1 + 40);
      char v19 = objc_msgSend_recordID(*(void **)(a1 + 32), v26, v27);
      uint64_t v24 = objc_msgSend_errorWithDomain_code_userInfo_format_(v28, v31, v29, 5004, v30, @"Failed to decrypt the server record %@ returned from oplock failure.", v19);
      goto LABEL_14;
    }
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 40), v26, (uint64_t)v7, *MEMORY[0x1E4F28A50]);
    goto LABEL_13;
  }
  if (v9 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v8);
  }
  unint64_t v10 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    unint64_t v35 = v10;
    unsigned int v38 = objc_msgSend_recordID(v5, v36, v37);
    *(_DWORD *)buf = 138412290;
    uint64_t v45 = v38;
    _os_log_debug_impl(&dword_1C4CFF000, v35, OS_LOG_TYPE_DEBUG, "Successfully decrypted record %@", buf, 0xCu);
  }
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 40), v11, (uint64_t)v5, *MEMORY[0x1E4F19D10]);
  id v12 = (void *)MEMORY[0x1E4F1A280];
  uint64_t v13 = *MEMORY[0x1E4F19DD8];
  uint64_t v14 = sub_1C4E94D98(*(void **)(a1 + 48));
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 40);
  char v19 = objc_msgSend_error(*(void **)(a1 + 48), v17, v18);
  uint64_t v22 = objc_msgSend_errorDescription(v19, v20, v21);
  uint64_t v24 = objc_msgSend_errorWithDomain_code_userInfo_format_(v12, v23, v13, v14, v16, @"Error moving record %@ on server: %@", v15, v22);

LABEL_14:
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  uint64_t v34 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 64), v32, v33);
  dispatch_group_leave(v34);
}

uint64_t sub_1C4E6C0D8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setZoneIDs_, *(void *)(a1 + 32));
}

uint64_t sub_1C4E6C5DC(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_41;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_43:
        *(_DWORD *)(a1 + 24) = v21;
      }
      else if (v17 == 2)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0) {
            goto LABEL_45;
          }
          v25 += 7;
          BOOL v14 = v26++ >= 9;
          if (v14)
          {
            uint64_t v27 = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_47:
        *(void *)(a1 + 8) = v27;
      }
      else if (v17 == 1)
      {
        uint64_t v18 = objc_alloc_init(CKDPRequestedFields);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || !CKDPRequestedFieldsReadFrom(v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4E6CF78(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 8;
          goto LABEL_25;
        case 2u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 16;
          goto LABEL_25;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
          goto LABEL_25;
        case 4u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 32;
LABEL_25:
          char v19 = *(void **)(a1 + v18);
          *(void *)(a1 + v18) = v17;

          goto LABEL_26;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_26:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E6D894(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v18 = PBReaderReadString();
        if (v18) {
          objc_msgSend_addBundleID_(a1, v17, (uint64_t)v18);
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL CKDPRequestOperationReadFrom(id *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 269)
      {
        if ((int)v17 > 502)
        {
          if ((int)v17 <= 799)
          {
            switch(v17)
            {
              case 0x1F7:
                uint64_t v18 = objc_alloc_init(CKDPShareAcceptRequest);
                objc_storeStrong(a1 + 29, v18);
                if (!PBReaderPlaceMark() || (sub_1C4E8D980((uint64_t)v18, a2) & 1) == 0)
                {
LABEL_202:

                  return 0;
                }
                break;
              case 0x1F8:
                uint64_t v18 = objc_alloc_init(CKDPShareDeclineRequest);
                objc_storeStrong(a1 + 31, v18);
                if (!PBReaderPlaceMark() || !sub_1C4E36ECC((uint64_t)v18, a2)) {
                  goto LABEL_202;
                }
                break;
              case 0x201:
                uint64_t v18 = objc_alloc_init(CKDPShareVettingInitiateRequest);
                objc_storeStrong(a1 + 33, v18);
                if (!PBReaderPlaceMark() || !sub_1C503E1D0((uint64_t)v18, a2)) {
                  goto LABEL_202;
                }
                break;
              default:
                goto LABEL_74;
            }
          }
          else
          {
            if ((int)v17 <= 899)
            {
              switch((int)v17)
              {
                case 800:
                  uint64_t v18 = objc_alloc_init(CKDPTokenRegistrationRequest);
                  objc_storeStrong(a1 + 37, v18);
                  if (!PBReaderPlaceMark() || (sub_1C4E77AE4((uint64_t)v18, a2) & 1) == 0) {
                    goto LABEL_202;
                  }
                  goto LABEL_198;
                case 801:
                  uint64_t v18 = objc_alloc_init(CKDPTokenUnregistrationRequest);
                  objc_storeStrong(a1 + 38, v18);
                  if (!PBReaderPlaceMark() || (sub_1C4F651BC((uint64_t)v18, a2) & 1) == 0) {
                    goto LABEL_202;
                  }
                  goto LABEL_198;
                case 802:
                  uint64_t v18 = objc_alloc_init(CKDPSetBadgeCountRequest);
                  objc_storeStrong(a1 + 28, v18);
                  if (!PBReaderPlaceMark() || (sub_1C4DC47A0((uint64_t)v18, a2) & 1) == 0) {
                    goto LABEL_202;
                  }
                  goto LABEL_198;
                case 803:
                  uint64_t v18 = objc_alloc_init(CKDPNotificationSyncRequest);
                  objc_storeStrong(a1 + 18, v18);
                  if (!PBReaderPlaceMark() || (sub_1C4E86890((uint64_t)v18, a2) & 1) == 0) {
                    goto LABEL_202;
                  }
                  goto LABEL_198;
                case 804:
                  uint64_t v18 = objc_alloc_init(CKDPNotificationMarkReadRequest);
                  objc_storeStrong(a1 + 17, v18);
                  if (!PBReaderPlaceMark() || (sub_1C4FFA3CC((uint64_t)v18, a2) & 1) == 0) {
                    goto LABEL_202;
                  }
                  goto LABEL_198;
                default:
                  goto LABEL_74;
              }
            }
            switch(v17)
            {
              case 0x384:
                uint64_t v18 = objc_alloc_init(CKDPArchiveRecordsRequest);
                objc_storeStrong(a1 + 5, v18);
                if (!PBReaderPlaceMark() || (sub_1C4D81AF0(v18, a2) & 1) == 0) {
                  goto LABEL_202;
                }
                break;
              case 0x385:
                uint64_t v18 = objc_alloc_init(CKDPMarkAssetBrokenRequest);
                objc_storeStrong(a1 + 12, v18);
                if (!PBReaderPlaceMark() || (sub_1C4F5281C((uint64_t)v18, a2) & 1) == 0) {
                  goto LABEL_202;
                }
                break;
              case 0x44D:
                uint64_t v18 = objc_alloc_init(CKDPCodeFunctionInvokeRequest);
                objc_storeStrong(a1 + 10, v18);
                if (!PBReaderPlaceMark() || !sub_1C4E02474((id *)&v18->super.super.super.isa, a2)) {
                  goto LABEL_202;
                }
                break;
              default:
                goto LABEL_74;
            }
          }
        }
        else if ((int)v17 <= 300)
        {
          switch(v17)
          {
            case 0x10E:
              uint64_t v18 = objc_alloc_init(CKDPAnonymousShareAddRequest);
              objc_storeStrong(a1 + 3, v18);
              if (!PBReaderPlaceMark() || !sub_1C4E572A0((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              break;
            case 0x10F:
              uint64_t v18 = objc_alloc_init(CKDPAnonymousShareRemoveRequest);
              objc_storeStrong(a1 + 4, v18);
              if (!PBReaderPlaceMark() || !sub_1C4DAAD8C((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              break;
            case 0x12C:
              uint64_t v18 = objc_alloc_init(CKDPSubscriptionCreateRequest);
              objc_storeStrong(a1 + 34, v18);
              if (!PBReaderPlaceMark() || (sub_1C4EB4250((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              break;
            default:
              goto LABEL_74;
          }
        }
        else
        {
          switch((int)v17)
          {
            case 400:
              uint64_t v18 = objc_alloc_init(CKDPUserRetrieveRequest);
              objc_storeStrong(a1 + 46, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              break;
            case 401:
              uint64_t v18 = objc_alloc_init(CKDPUserQueryRequest);
              objc_storeStrong(a1 + 45, v18);
              if (!PBReaderPlaceMark() || (sub_1C4E37A78((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              break;
            case 402:
              uint64_t v18 = objc_alloc_init(CKDPUserPrivacySettingsRetrieveRequest);
              objc_storeStrong(a1 + 43, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              break;
            case 403:
              uint64_t v18 = objc_alloc_init(CKDPUserPrivacySettingsUpdateRequest);
              objc_storeStrong(a1 + 44, v18);
              if (!PBReaderPlaceMark() || !sub_1C4EFC124((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              break;
            case 404:
              uint64_t v18 = objc_alloc_init(CKDPUserPrivacySettingsResetRequest);
              objc_storeStrong(a1 + 42, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              break;
            case 405:
              uint64_t v18 = objc_alloc_init(CKDPUserPrivacySettingsBatchLookupRequest);
              objc_storeStrong(a1 + 41, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              break;
            case 406:
              goto LABEL_74;
            case 407:
              uint64_t v18 = objc_alloc_init(CKDPAdopterCapabilitiesSaveRequest);
              objc_storeStrong(a1 + 2, v18);
              if (!PBReaderPlaceMark() || (sub_1C4F6FF10((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              break;
            case 408:
              uint64_t v18 = objc_alloc_init(CKDPAdopterCapabilitiesCheckRequest);
              objc_storeStrong(a1 + 1, v18);
              if (!PBReaderPlaceMark() || (sub_1C4EFE234((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              break;
            case 409:
              uint64_t v18 = objc_alloc_init(CKDPZoneUsageSaveRequest);
              objc_storeStrong(a1 + 52, v18);
              if (!PBReaderPlaceMark() || (sub_1C4E7383C((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              break;
            case 410:
              uint64_t v18 = objc_alloc_init(CKDPShareUsageSaveRequest);
              objc_storeStrong(a1 + 32, v18);
              if (!PBReaderPlaceMark() || (sub_1C4E73EF4((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              break;
            default:
              if (v17 == 301)
              {
                uint64_t v18 = objc_alloc_init(CKDPSubscriptionRetrieveRequest);
                objc_storeStrong(a1 + 36, v18);
                if (!PBReaderPlaceMark() || (sub_1C4EE711C((uint64_t)v18, a2) & 1) == 0) {
                  goto LABEL_202;
                }
              }
              else
              {
                if (v17 != 302) {
                  goto LABEL_74;
                }
                uint64_t v18 = objc_alloc_init(CKDPSubscriptionDeleteRequest);
                objc_storeStrong(a1 + 35, v18);
                if (!PBReaderPlaceMark() || (sub_1C4FB165C((uint64_t)v18, a2) & 1) == 0) {
                  goto LABEL_202;
                }
              }
              break;
          }
        }
      }
      else
      {
        if ((int)v17 > 199)
        {
          switch((int)v17)
          {
            case 200:
              uint64_t v18 = objc_alloc_init(CKDPZoneSaveRequest);
              objc_storeStrong(a1 + 51, v18);
              if (!PBReaderPlaceMark() || !sub_1C4DF5490((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 201:
              uint64_t v18 = objc_alloc_init(CKDPZoneRetrieveRequest);
              objc_storeStrong(a1 + 50, v18);
              if (!PBReaderPlaceMark() || (sub_1C4DA3680((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 202:
              uint64_t v18 = objc_alloc_init(CKDPZoneDeleteRequest);
              objc_storeStrong(a1 + 48, v18);
              if (!PBReaderPlaceMark() || (sub_1C4E03198((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 203:
              uint64_t v18 = objc_alloc_init(CKDPZoneRetrieveChangesRequest);
              objc_storeStrong(a1 + 49, v18);
              if (!PBReaderPlaceMark() || (sub_1C50328E8((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 215:
            case 221:
            case 226:
            case 227:
            case 228:
            case 229:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 241:
            case 242:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
              goto LABEL_74;
            case 210:
              uint64_t v18 = objc_alloc_init(CKDPRecordSaveRequest);
              objc_storeStrong(a1 + 26, v18);
              if (!PBReaderPlaceMark() || (sub_1C4E48B70((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 211:
              uint64_t v18 = objc_alloc_init(CKDPRecordRetrieveRequest);
              objc_storeStrong(a1 + 24, v18);
              if (!PBReaderPlaceMark() || (sub_1C4D5C620((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 212:
              uint64_t v18 = objc_alloc_init(CKDPRecordRetrieveVersionsRequest);
              objc_storeStrong(a1 + 25, v18);
              if (!PBReaderPlaceMark() || !sub_1C4E68668((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 213:
              uint64_t v18 = objc_alloc_init(CKDPRecordRetrieveChangesRequest);
              objc_storeStrong(a1 + 23, v18);
              if (!PBReaderPlaceMark() || (sub_1C4FD38F4((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 214:
              uint64_t v18 = objc_alloc_init(CKDPRecordDeleteRequest);
              objc_storeStrong(a1 + 20, v18);
              if (!PBReaderPlaceMark() || (sub_1C4E9BC5C((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 216:
              uint64_t v18 = objc_alloc_init(CKDPRecordResolveTokenRequest);
              objc_storeStrong(a1 + 22, v18);
              if (!PBReaderPlaceMark() || (sub_1C4E114E4(v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 217:
              uint64_t v18 = objc_alloc_init(CKDPFetchArchivedRecordsRequest);
              objc_storeStrong(a1 + 9, v18);
              if (!PBReaderPlaceMark() || (sub_1C4EBF1DC((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 218:
              uint64_t v18 = objc_alloc_init(CKDPRecordMoveRequest);
              objc_storeStrong(a1 + 21, v18);
              if (!PBReaderPlaceMark() || (sub_1C4E21208((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 219:
              uint64_t v18 = objc_alloc_init(CKDPShareAccessRequest);
              objc_storeStrong(a1 + 30, v18);
              if (!PBReaderPlaceMark() || !sub_1C4E010EC((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 220:
              uint64_t v18 = objc_alloc_init(CKDPQueryRetrieveRequest);
              objc_storeStrong(a1 + 19, v18);
              if (!PBReaderPlaceMark() || (sub_1C4F73280((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 222:
              uint64_t v18 = objc_alloc_init(CKDPMergeableDeltaSaveRequest);
              objc_storeStrong(a1 + 16, v18);
              if (!PBReaderPlaceMark() || !CKDPMergeableDeltaSaveRequestReadFrom((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 223:
              uint64_t v18 = objc_alloc_init(CKDPMergeableDeltaMetadataRetrieveRequest);
              objc_storeStrong(a1 + 13, v18);
              if (!PBReaderPlaceMark() || !sub_1C4F4367C((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 224:
              uint64_t v18 = objc_alloc_init(CKDPMergeableDeltaReplaceRequest);
              objc_storeStrong(a1 + 14, v18);
              if (!PBReaderPlaceMark() || (sub_1C4E75F58((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 225:
              uint64_t v18 = objc_alloc_init(CKDPMergeableDeltaRetrieveRequest);
              objc_storeStrong(a1 + 15, v18);
              if (!PBReaderPlaceMark() || !sub_1C4EEAA78((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 230:
              uint64_t v18 = objc_alloc_init(CKDPAssetUploadTokenRetrieveRequest);
              objc_storeStrong(a1 + 6, v18);
              if (!PBReaderPlaceMark() || (sub_1C4F4A1CC((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 240:
              uint64_t v18 = objc_alloc_init(CKDPDeleteContainerRequest);
              objc_storeStrong(a1 + 8, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 243:
              uint64_t v18 = objc_alloc_init(CKDPUserAvailableQuotaRequest);
              objc_storeStrong(a1 + 40, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 244:
              uint64_t v18 = objc_alloc_init(CKDPBundlesForContainerRequest);
              objc_storeStrong(a1 + 7, v18);
              if (!PBReaderPlaceMark() || !sub_1C4D4E644((uint64_t)v18, a2)) {
                goto LABEL_202;
              }
              goto LABEL_198;
            case 250:
              uint64_t v18 = objc_alloc_init(CKDPWebAuthTokenRetrieveRequest);
              objc_storeStrong(a1 + 47, v18);
              if (!PBReaderPlaceMark() || (sub_1C4E88D14((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              goto LABEL_198;
            default:
              if (v17 != 260) {
                goto LABEL_74;
              }
              uint64_t v18 = objc_alloc_init(CKDPUpdateMissingAssetStatusRequest);
              objc_storeStrong(a1 + 39, v18);
              if (!PBReaderPlaceMark() || (sub_1C4EE7A8C((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_202;
              }
              goto LABEL_198;
          }
        }
        if (v17 == 1)
        {
          uint64_t v18 = objc_alloc_init(CKDPRequestOperationHeader);
          objc_storeStrong(a1 + 11, v18);
          if (!PBReaderPlaceMark() || (CKDPRequestOperationHeaderReadFrom((uint64_t)v18, a2) & 1) == 0) {
            goto LABEL_202;
          }
        }
        else
        {
          if (v17 != 2)
          {
LABEL_74:
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              return 0;
            }
            continue;
          }
          uint64_t v18 = objc_alloc_init(CKDPOperation);
          objc_storeStrong(a1 + 27, v18);
          if (!PBReaderPlaceMark() || (CKDPOperationReadFrom((uint64_t)v18, a2) & 1) == 0) {
            goto LABEL_202;
          }
        }
      }
LABEL_198:
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E736EC()
{
  dispatch_queue_t v0 = (void *)qword_1EBBCFC98;
  qword_1EBBCFC98 = (uint64_t)&unk_1F20ABD30;
}

uint64_t sub_1C4E7383C(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(CKDPSignedVersionedBlob);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (sub_1C4E9180C((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E73DA4()
{
  dispatch_queue_t v0 = (void *)qword_1EBBCFCA8;
  qword_1EBBCFCA8 = (uint64_t)&unk_1F20ABD58;
}

uint64_t sub_1C4E73EF4(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(CKDPSignedVersionedBlob);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (sub_1C4E9180C((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E74B20(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_35;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_37;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_35:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_37:
        *(_DWORD *)(a1 + 16) = v19;
        goto LABEL_38;
      case 2u:
        char v24 = objc_alloc_init(CKDPAdopterFeatureSetAdopterFeature);
        objc_msgSend_addZoneFeatures_((void *)a1, v25, (uint64_t)v24);
        goto LABEL_31;
      case 3u:
        char v24 = objc_alloc_init(CKDPAdopterFeatureSetAdopterFeature);
        objc_msgSend_addRecordFeatures_((void *)a1, v26, (uint64_t)v24);
        goto LABEL_31;
      case 4u:
        char v24 = objc_alloc_init(CKDPAdopterFeatureSetAdopterFeature);
        objc_msgSend_addFieldFeatures_((void *)a1, v27, (uint64_t)v24);
LABEL_31:
        if (PBReaderPlaceMark() && sub_1C4E87184((uint64_t)v24, a2))
        {
          PBReaderRecallMark();

LABEL_38:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_38;
    }
  }
}

void sub_1C4E759EC()
{
  dispatch_queue_t v0 = (void *)qword_1EBBCDDD8;
  qword_1EBBCDDD8 = (uint64_t)&unk_1F20ABD80;
}

uint64_t sub_1C4E75F58(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(CKDPMergeableValueIdentifier);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark() && sub_1C4E62940((uint64_t)v17, a2)) {
          goto LABEL_28;
        }
        goto LABEL_55;
      case 2u:
        PBReaderReadString();
        char v17 = (CKDPMergeableValueIdentifier *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          objc_msgSend_addDeltaIdentifiers_((void *)a1, v19, (uint64_t)v17);
        }
        goto LABEL_29;
      case 3u:
        char v17 = objc_alloc_init(CKDPMergeableDelta);
        objc_msgSend_addDeltas_((void *)a1, v20, (uint64_t)v17);
        if PBReaderPlaceMark() && (CKDPMergeableDeltaReadFrom((uint64_t)v17, a2))
        {
LABEL_28:
          PBReaderRecallMark();
LABEL_29:

LABEL_53:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_55:

        return 0;
      case 4u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 36) |= 2u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_47:
        BOOL v33 = v23 != 0;
        uint64_t v34 = 33;
        goto LABEL_52;
      case 5u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          uint64_t v30 = *v3;
          unint64_t v31 = *(void *)(a2 + v30);
          if (v31 == -1 || v31 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              BOOL v14 = v28++ >= 9;
              if (v14)
              {
                uint64_t v29 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v29 = 0;
        }
LABEL_51:
        BOOL v33 = v29 != 0;
        uint64_t v34 = 32;
LABEL_52:
        *(unsigned char *)(a1 + v34) = v33;
        goto LABEL_53;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_53;
    }
  }
}

BOOL sub_1C4E77144(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(CKDPMergeableDeltaMetadata);
        objc_msgSend_addMetadata_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1C5010554((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v19 = PBReaderReadData();
    char v17 = (CKDPMergeableDeltaMetadata *)a1[1];
    a1[1] = v19;
LABEL_24:

    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E77994()
{
  dispatch_queue_t v0 = (void *)qword_1EBBCFCB8;
  qword_1EBBCFCB8 = (uint64_t)&unk_1F20ABDA8;
}

uint64_t sub_1C4E77AE4(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(CKDPTokenRegistrationBody);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (sub_1C4E80684((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E7881C()
{
  dispatch_queue_t v0 = (void *)qword_1EBBCFCC8;
  qword_1EBBCFCC8 = (uint64_t)&unk_1F20ABDD0;
}

void sub_1C4E78B68(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_participantVettingProgressBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_participantVettingProgressBlock(*(void **)(a1 + 32), v5, v6);
    uint64_t v7 = (void (**)(id, void))objc_claimAutoreleasedReturnValue();
    v7[2](v7, *(void *)(a1 + 40));
  }
}

void sub_1C4E79BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location,id a26,char a27)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(v27);
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a26);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1C4E79C44(uint64_t a1, uint64_t a2, void *a3)
{
  v58[1] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (objc_msgSend_code(v5, v7, v8) == 1)
  {
    uint64_t v11 = 0;
    switch(a2)
    {
      case 0:
        break;
      case 1:
        unint64_t v12 = (void *)MEMORY[0x1E4F1A280];
        uint64_t v13 = *MEMORY[0x1E4F19DD8];
        uint64_t v57 = *MEMORY[0x1E4F19C20];
        BOOL v14 = objc_msgSend_container(*(void **)(a1 + 32), v9, v10);
        char v17 = objc_msgSend_account(v14, v15, v16);
        uint64_t v20 = objc_msgSend_primaryEmail(v17, v18, v19);
        v58[0] = v20;
        unsigned int v22 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v21, (uint64_t)v58, &v57, 1);
        unint64_t v25 = objc_msgSend_participantID(WeakRetained, v23, v24);
        uint64_t v11 = objc_msgSend_errorWithDomain_code_userInfo_format_(v12, v26, v13, 8007, v22, @"The address of participant %@ is already vetted to caller", v25);

        break;
      case 2:
        if (_os_feature_enabled_impl()) {
          char v32 = @"This address is vetted to a different Apple Account";
        }
        else {
          char v32 = @"This address is vetted to a different Apple ID";
        }
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v31, *MEMORY[0x1E4F19DD8], 8008, v32);
        goto LABEL_17;
      case 3:
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v9, *MEMORY[0x1E4F19DD8], 8006, @"This account has too many vetted email addresses and another cannot be added");
        goto LABEL_17;
      case 5:
        uint64_t v37 = (void *)*MEMORY[0x1E4F1A548];
        if (*(unsigned char *)(a1 + 56))
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], v37);
          }
          unsigned int v38 = *MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl(&dword_1C4CFF000, v38, OS_LOG_TYPE_DEBUG, "Received LoginRequired from the server, but this was a second attempt, not trying to re-authenticate the user again", buf, 2u);
          }
          objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v39, *MEMORY[0x1E4F19DD8], 2012, @"Unable to vet due to failed authentification even after successful authentication attempt, giving up");
          uint64_t v11 = LABEL_17:;
        }
        else
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], v37);
          }
          uint64_t v40 = *MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl(&dword_1C4CFF000, v40, OS_LOG_TYPE_DEBUG, "Received LoginRequired from the server, trying to re-authenticate the user", buf, 2u);
          }
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
          unsigned int v54 = objc_msgSend_address(WeakRetained, v41, v42);
          uint64_t v43 = CKLocalizedString();

          uint64_t v46 = objc_msgSend_container(*(void **)(a1 + 32), v44, v45, v54);
          unsigned int v49 = objc_msgSend_account(v46, v47, v48);
          char v52 = objc_msgSend_container(*(void **)(a1 + 32), v50, v51);
          v55[0] = MEMORY[0x1E4F143A8];
          v55[1] = 3221225472;
          v55[2] = sub_1C4E7A110;
          v55[3] = &unk_1E64F4528;
          v55[4] = WeakRetained;
          objc_msgSend_renewCloudKitAuthTokenWithReason_shouldForce_container_failedToken_completionHandler_(v49, v53, (uint64_t)v43, 1, v52, 0, v55);

          uint64_t v11 = 0;
        }
        break;
      default:
        BOOL v33 = (void *)MEMORY[0x1E4F1A280];
        uint64_t v34 = *MEMORY[0x1E4F19DD8];
        unint64_t v35 = objc_msgSend_participantID(WeakRetained, v9, v10);
        uint64_t v11 = objc_msgSend_errorWithDomain_code_format_(v33, v36, v34, 8001, @"Error code %ld while trying to initiate vetting process for participant %@", a2, v35);

        break;
    }
  }
  else
  {
    char v27 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v28 = *MEMORY[0x1E4F19DD8];
    uint64_t v29 = objc_msgSend_participantID(WeakRetained, v9, v10);
    uint64_t v11 = objc_msgSend_errorWithDomain_code_format_(v27, v30, v28, 8010, @"Unknown error while trying to initiate vetting process for participant %@: %@", v29, v5);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    objc_msgSend__handleVettingInitiationProgress_(WeakRetained, v9, (uint64_t)v11);
  }
}

void sub_1C4E7A110(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a3 || !a2)
  {
    objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], a2, *MEMORY[0x1E4F19DD8], 2012, a3, @"User session has expired and we were unable to re-authenticate user during vetting");
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend__handleVettingInitiationProgress_(*(void **)(a1 + 32), v6, (uint64_t)v8);
    objc_msgSend_finishWithError_(*(void **)(a1 + 32), v7, (uint64_t)v8);
  }
  else
  {
    id v5 = *(void **)(a1 + 32);
    objc_msgSend__sendRequest_(v5, a2, 1, a4, 0);
  }
}

void sub_1C4E7A1C4(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    id v2 = objc_loadWeakRetained((id *)(a1 + 48));
    id v5 = objc_msgSend_error(v2, v3, v4);
    objc_msgSend_finishWithError_(WeakRetained, v6, (uint64_t)v5);
  }
}

uint64_t sub_1C4E7A6E8(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 16) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        unsigned int v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E7AE88(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_subscriptionID(a2, (const char *)a2, a3);
}

uint64_t sub_1C4E7BDB0(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_shareRecordID(a2, (const char *)a2, a3);
}

void sub_1C4E7C964(uint64_t a1, const char *a2, uint64_t a3)
{
  if (objc_msgSend_count(*(void **)(a1 + 32), a2, a3))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = sub_1C4E7CA5C;
    v11[3] = &unk_1E64F4620;
    id v14 = *(id *)(a1 + 56);
    id v6 = *(id *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 40);
    id v12 = v6;
    uint64_t v13 = v7;
    objc_msgSend_encryptShareTuples_withCompletionBlock_(v4, v8, v5, v11);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 56);
    if (v9)
    {
      unint64_t v10 = *(void (**)(void))(v9 + 16);
      v10();
    }
  }
}

void sub_1C4E7CA5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (objc_msgSend_count(v5, v7, v8))
  {
    uint64_t v18 = MEMORY[0x1E4F143A8];
    uint64_t v19 = 3221225472;
    unsigned int v20 = sub_1C4E7CB9C;
    uint64_t v21 = &unk_1E64F1B98;
    id v22 = v5;
    id v9 = *(id *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void **)(a1 + 48);
    id v23 = v9;
    uint64_t v24 = v10;
    id v25 = v11;
    id v12 = (void (**)(void))_Block_copy(&v18);
    int v15 = objc_msgSend_zonePCSData(*(void **)(a1 + 40), v13, v14, v18, v19, v20, v21);

    if (v15) {
      v12[2](v12);
    }
    else {
      objc_msgSend__lockedFetchSystemZonePCSDataWithCompletion_(*(void **)(a1 + 40), v16, (uint64_t)v12);
    }
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 48);
    if (v17) {
      (*(void (**)(uint64_t, id))(v17 + 16))(v17, v6);
    }
  }
}

void sub_1C4E7CB9C(uint64_t *a1)
{
  id v2 = objc_alloc_init(CKDAddAnonymousShareToSharedDBOperationInfo);
  objc_msgSend_setEncryptedAnonymousSharesToAdd_(v2, v3, a1[4]);
  uint64_t v4 = (void *)a1[5];
  uint64_t v5 = objc_opt_class();
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1C4E7CC6C;
  v8[3] = &unk_1E64F2310;
  id v6 = (void *)a1[7];
  void v8[4] = a1[6];
  id v9 = v6;
  objc_msgSend_spawnAndRunOperationOfClass_operationInfo_operationConfigurationBlock_(v4, v7, v5, v2, v8);
}

void sub_1C4E7CC6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, v3);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1C4E7CD60;
  v6[3] = &unk_1E64F45F8;
  uint64_t v4 = *(void **)(a1 + 40);
  v6[4] = *(void *)(a1 + 32);
  id v7 = v4;
  objc_copyWeak(&v8, &location);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)v6);
  objc_destroyWeak(&v8);

  objc_destroyWeak(&location);
}

void sub_1C4E7CD44(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4E7CD60(void **a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_synchronizeQueue(a1[4], a2, a3);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1C4E7CE20;
  v5[3] = &unk_1E64F1A88;
  id v6 = a1[5];
  objc_copyWeak(&v7, a1 + 6);
  dispatch_async(v4, v5);

  objc_destroyWeak(&v7);
}

void sub_1C4E7CE20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v4 = objc_msgSend_error(WeakRetained, v2, v3);
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v4);
  }
}

void sub_1C4E7CFA0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_count(*(void **)(a1 + 32), a2, a3))
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v5 = *(id *)(a1 + 32);
    uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v27, v31, 16);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v28 != v9) {
            objc_enumerationMutation(v5);
          }
          uint64_t v11 = *(void *)(*((void *)&v27 + 1) + 8 * i);
          id v12 = [CKDAnonymousShareTuple alloc];
          uint64_t v14 = objc_msgSend_initWithZoneID_shareID_(v12, v13, v11, 0);
          objc_msgSend_addObject_(v4, v15, (uint64_t)v14);
        }
        uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v16, (uint64_t)&v27, v31, 16);
      }
      while (v8);
    }

    uint64_t v17 = *(void **)(a1 + 40);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = sub_1C4E7D1C8;
    v23[3] = &unk_1E64F4620;
    id v26 = *(id *)(a1 + 56);
    id v18 = *(id *)(a1 + 48);
    uint64_t v19 = *(void *)(a1 + 40);
    id v24 = v18;
    uint64_t v25 = v19;
    objc_msgSend_encryptShareTuples_withCompletionBlock_(v17, v20, (uint64_t)v4, v23);
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 56);
    if (v21)
    {
      id v22 = *(void (**)(void))(v21 + 16);
      v22();
    }
  }
}

void sub_1C4E7D1C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (objc_msgSend_count(v5, v7, v8))
  {
    uint64_t v18 = MEMORY[0x1E4F143A8];
    uint64_t v19 = 3221225472;
    unsigned int v20 = sub_1C4E7D308;
    uint64_t v21 = &unk_1E64F1B98;
    id v22 = v5;
    id v9 = *(id *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void **)(a1 + 48);
    id v23 = v9;
    uint64_t v24 = v10;
    id v25 = v11;
    id v12 = (void (**)(void))_Block_copy(&v18);
    int v15 = objc_msgSend_zonePCSData(*(void **)(a1 + 40), v13, v14, v18, v19, v20, v21);

    if (v15) {
      v12[2](v12);
    }
    else {
      objc_msgSend__lockedFetchSystemZonePCSDataWithCompletion_(*(void **)(a1 + 40), v16, (uint64_t)v12);
    }
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 48);
    if (v17) {
      (*(void (**)(uint64_t, id))(v17 + 16))(v17, v6);
    }
  }
}

void sub_1C4E7D308(uint64_t *a1)
{
  uint64_t v2 = objc_alloc_init(CKDRemoveAnonymousShareFromSharedDBOperationInfo);
  objc_msgSend_setEncryptedAnonymousSharesToRemove_(v2, v3, a1[4]);
  id v4 = (void *)a1[5];
  uint64_t v5 = objc_opt_class();
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1C4E7D3D8;
  v8[3] = &unk_1E64F2310;
  id v6 = (void *)a1[7];
  void v8[4] = a1[6];
  id v9 = v6;
  objc_msgSend_spawnAndRunOperationOfClass_operationInfo_operationConfigurationBlock_(v4, v7, v5, v2, v8);
}

void sub_1C4E7D3D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, v3);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1C4E7D4CC;
  v6[3] = &unk_1E64F45F8;
  id v4 = *(void **)(a1 + 40);
  v6[4] = *(void *)(a1 + 32);
  id v7 = v4;
  objc_copyWeak(&v8, &location);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)v6);
  objc_destroyWeak(&v8);

  objc_destroyWeak(&location);
}

void sub_1C4E7D4B0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4E7D4CC(void **a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_synchronizeQueue(a1[4], a2, a3);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1C4E7D58C;
  v5[3] = &unk_1E64F1A88;
  id v6 = a1[5];
  objc_copyWeak(&v7, a1 + 6);
  dispatch_async(v4, v5);

  objc_destroyWeak(&v7);
}

void sub_1C4E7D58C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    id v4 = objc_msgSend_error(WeakRetained, v2, v3);
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v4);
  }
}

void sub_1C4E7D6E4(void **a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_zonePCSData(a1[4], a2, a3);

  if (v4)
  {
    id v6 = a1[4];
    uint64_t v7 = (uint64_t)a1[5];
    id v8 = a1[6];
    objc_msgSend__locked_encryptShareTuples_withCompletionBlock_(v6, v5, v7, v8);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v9 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "encryptShareTuple zonePCSData not available yet", buf, 2u);
    }
    uint64_t v10 = a1[4];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_1C4E7D844;
    v12[3] = &unk_1E64F0FA0;
    v12[4] = v10;
    id v13 = a1[5];
    id v14 = a1[6];
    objc_msgSend__lockedFetchSystemZonePCSDataWithCompletion_(v10, v11, (uint64_t)v12);
  }
}

void sub_1C4E7D844(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1C4E7D8D4;
  v4[3] = &unk_1E64F4670;
  id v5 = *(id *)(a1 + 48);
  objc_msgSend__locked_encryptShareTuples_withCompletionBlock_(v1, v3, v2, v4);
}

uint64_t sub_1C4E7D8D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4E7DFB0(void **a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_zonePCSData(a1[4], a2, a3);

  if (v4)
  {
    id v6 = a1[4];
    uint64_t v7 = (uint64_t)a1[5];
    id v8 = a1[6];
    objc_msgSend__locked_decryptShareTuple_withCompletionBlock_(v6, v5, v7, v8);
  }
  else
  {
    objc_initWeak(&location, a1[4]);
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v9 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "decryptShareTuple zonePCSData not available yet", buf, 2u);
    }
    uint64_t v10 = a1[4];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_1C4E7E160;
    v12[3] = &unk_1E64F4698;
    objc_copyWeak(&v15, &location);
    id v13 = a1[5];
    id v14 = a1[6];
    objc_msgSend__lockedFetchSystemZonePCSDataWithCompletion_(v10, v11, (uint64_t)v12);

    objc_destroyWeak(&v15);
    objc_destroyWeak(&location);
  }
}

void sub_1C4E7E144(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4E7E160(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend__locked_decryptShareTuple_withCompletionBlock_(WeakRetained, v2, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1C4E7E9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  objc_destroyWeak(v20);
  _Block_object_dispose(&a20, 8);
  objc_destroyWeak((id *)(v21 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_1C4E7EA28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4E7EA38(uint64_t a1)
{
}

void sub_1C4E7EA40(uint64_t a1, void *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v10 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      uint64_t v27 = v13;
      __int16 v28 = 2112;
      id v29 = v6;
      _os_log_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS for zone %@: %@", buf, 0x16u);
    }
    uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8);
    if (!*(void *)(v14 + 40))
    {
      id v15 = v6;
      uint64_t v16 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = v15;
LABEL_10:
    }
  }
  else if (objc_msgSend_pcs(v5, v7, v8) {
         || objc_msgSend_databaseScope(*(void **)(a1 + 32), v11, v12) == 3
  }
         && (objc_msgSend_pcsData(v5, v11, v12),
             uint64_t v19 = objc_claimAutoreleasedReturnValue(),
             v19,
             v19))
  {
    uint64_t v17 = objc_msgSend_synchronizeQueue(*(void **)(a1 + 40), v11, v12);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4E7ECC4;
    block[3] = &unk_1E64F0120;
    id v23 = *(id *)(a1 + 48);
    id v24 = WeakRetained;
    id v25 = v5;
    dispatch_async(v17, block);

    uint64_t v16 = v23;
    goto LABEL_10;
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v18 = objc_msgSend_synchronizeQueue(*(void **)(a1 + 40), v11, v12);
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    void v20[2] = sub_1C4E7EDA4;
    v20[3] = &unk_1E64F0A80;
    id v21 = *(id *)(a1 + 56);
    dispatch_async(v18, v20);
  }
}

uint64_t sub_1C4E7ECC4(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_INFO, "Fetched PCS for zone %@:", (uint8_t *)&v6, 0xCu);
  }
  return objc_msgSend_setZonePCSData_(*(void **)(a1 + 40), v3, *(void *)(a1 + 48));
}

uint64_t sub_1C4E7EDA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1C4E7EFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t CKDPRecordOneTimeStableUrlReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = (v10 & 7) == 4;
        }
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              uint64_t v18 = PBReaderReadData();
              uint64_t v19 = 40;
              goto LABEL_24;
            case 2u:
              uint64_t v18 = PBReaderReadData();
              uint64_t v19 = 32;
              goto LABEL_24;
            case 3u:
              uint64_t v18 = PBReaderReadData();
              uint64_t v19 = 16;
LABEL_24:
              unint64_t v21 = *(void **)(a1 + v19);
              *(void *)(a1 + v19) = v18;

              goto LABEL_33;
            case 4u:
              id v23 = PBReaderReadString();
              if (v23) {
                objc_msgSend_addParticipantId_((void *)a1, v22, (uint64_t)v23);
              }

              goto LABEL_33;
            case 5u:
              *(unsigned char *)(a1 + 48) |= 1u;
              uint64_t v24 = *v3;
              unint64_t v25 = *(void *)(a2 + v24);
              if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v26 = *(void *)(*(void *)(a2 + *v7) + v25);
                *(void *)(a2 + v24) = v25 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v26 = 0;
              }
              *(void *)(a1 + 8) = v26;
              goto LABEL_33;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_33:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E80684(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 24;
          goto LABEL_23;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
LABEL_23:
          uint64_t v20 = *(void **)(a1 + v18);
          *(void *)(a1 + v18) = v17;

          continue;
        case 3u:
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (2)
          {
            uint64_t v24 = *v3;
            unint64_t v25 = *(void *)(a2 + v24);
            if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
              *(void *)(a2 + v24) = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if (v26 < 0)
              {
                v21 += 7;
                BOOL v14 = v22++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_41;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v23) = 0;
          }
LABEL_41:
          *(_DWORD *)(a1 + 8) = v23;
          continue;
        case 4u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v30 = *v3;
        unint64_t v31 = *(void *)(a2 + v30);
        if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
        *(void *)(a2 + v30) = v31 + 1;
        v29 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0) {
          goto LABEL_43;
        }
        v27 += 7;
        BOOL v14 = v28++ >= 9;
        if (v14)
        {
          uint64_t v29 = 0;
          goto LABEL_45;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v29 = 0;
      }
LABEL_45:
      *(unsigned char *)(a1 + 32) = v29 != 0;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E81080(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPShare);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPShareReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t CKDPRecordFieldValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 128) |= 4u;
        while (1)
        {
          uint64_t v21 = *v3;
          uint64_t v22 = *(void *)(a2 + v21);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0) {
            goto LABEL_81;
          }
          v18 += 7;
          BOOL v15 = v19++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_83;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_81:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_83:
        *(_DWORD *)(a1 + 120) = v20;
        goto LABEL_78;
      case 2u:
        uint64_t v25 = PBReaderReadData();
        uint64_t v26 = 40;
        goto LABEL_43;
      case 4u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        *(unsigned char *)(a1 + 128) |= 2u;
        while (2)
        {
          uint64_t v31 = *v3;
          uint64_t v32 = *(void *)(a2 + v31);
          unint64_t v33 = v32 + 1;
          if (v32 == -1 || v33 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if (v34 < 0)
            {
              v28 += 7;
              BOOL v15 = v29++ >= 9;
              if (v15)
              {
                uint64_t v30 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v30 = 0;
        }
LABEL_87:
        *(void *)(a1 + 16) = v30;
        goto LABEL_78;
      case 5u:
        *(unsigned char *)(a1 + 128) |= 1u;
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v37 = *(void *)(*(void *)(a2 + *v7) + v36);
          *(void *)(a2 + v35) = v36 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v37 = 0;
        }
        *(void *)(a1 + 8) = v37;
        goto LABEL_78;
      case 6u:
        unsigned int v38 = (CKDPAsset *)objc_alloc_init(MEMORY[0x1E4F19EF8]);
        objc_storeStrong((id *)(a1 + 48), v38);
        if (!PBReaderPlaceMark() || (CKDPDateReadFrom() & 1) == 0) {
          goto LABEL_95;
        }
        goto LABEL_77;
      case 7u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 112;
LABEL_43:
        uint64_t v39 = *(void **)(a1 + v26);
        *(void *)(a1 + v26) = v25;

        goto LABEL_78;
      case 8u:
        unsigned int v38 = (CKDPAsset *)objc_alloc_init(MEMORY[0x1E4F19F10]);
        objc_storeStrong((id *)(a1 + 72), v38);
        if (!PBReaderPlaceMark() || (CKDPLocationCoordinateReadFrom() & 1) == 0) {
          goto LABEL_95;
        }
        goto LABEL_77;
      case 9u:
        unsigned int v38 = (CKDPAsset *)objc_alloc_init(MEMORY[0x1E4F19F28]);
        objc_storeStrong((id *)(a1 + 96), v38);
        if (!PBReaderPlaceMark() || (CKDPRecordReferenceReadFrom() & 1) == 0) {
          goto LABEL_95;
        }
        goto LABEL_77;
      case 0xAu:
        unsigned int v38 = objc_alloc_init(CKDPAsset);
        objc_storeStrong((id *)(a1 + 32), v38);
        if (!PBReaderPlaceMark() || (CKDPAssetReadFrom((uint64_t)v38, a2) & 1) == 0) {
          goto LABEL_95;
        }
        goto LABEL_77;
      case 0xBu:
        unsigned int v38 = objc_alloc_init(CKDPRecordFieldValue);
        objc_msgSend_addListValue_((void *)a1, v40, (uint64_t)v38);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldValueReadFrom(v38, a2) & 1) == 0) {
          goto LABEL_95;
        }
        goto LABEL_77;
      case 0xCu:
        unsigned int v38 = objc_alloc_init(CKDPPackage);
        objc_storeStrong((id *)(a1 + 88), v38);
        if (!PBReaderPlaceMark() || !sub_1C4FD21F0((id *)&v38->super.super.isa, a2)) {
          goto LABEL_95;
        }
        goto LABEL_77;
      case 0xDu:
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        *(unsigned char *)(a1 + 128) |= 8u;
        while (2)
        {
          uint64_t v44 = *v3;
          uint64_t v45 = *(void *)(a2 + v44);
          unint64_t v46 = v45 + 1;
          if (v45 == -1 || v46 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v47 = *(unsigned char *)(*(void *)(a2 + *v7) + v45);
            *(void *)(a2 + v44) = v46;
            v43 |= (unint64_t)(v47 & 0x7F) << v41;
            if (v47 < 0)
            {
              v41 += 7;
              BOOL v15 = v42++ >= 9;
              if (v15)
              {
                uint64_t v43 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v43 = 0;
        }
LABEL_91:
        *(unsigned char *)(a1 + 124) = v43 != 0;
        goto LABEL_78;
      case 0xEu:
        unsigned int v38 = objc_alloc_init(CKDPFieldCryptoFeatureSet);
        objc_storeStrong((id *)(a1 + 24), v38);
        if (!PBReaderPlaceMark() || !sub_1C4EF8440((uint64_t)v38, a2)) {
          goto LABEL_95;
        }
        goto LABEL_77;
      case 0x11u:
        unsigned int v38 = objc_alloc_init(CKDPStreamingAsset);
        objc_storeStrong((id *)(a1 + 104), v38);
        if (!PBReaderPlaceMark() || !sub_1C4E34678((id *)&v38->super.super.isa, a2)) {
          goto LABEL_95;
        }
        goto LABEL_77;
      case 0x14u:
        unsigned int v38 = objc_alloc_init(CKDPMergeableValue);
        objc_storeStrong((id *)(a1 + 80), v38);
        if (!PBReaderPlaceMark() || (CKDPMergeableValueReadFrom((uint64_t)v38, a2) & 1) == 0) {
          goto LABEL_95;
        }
        goto LABEL_77;
      case 0x15u:
        unsigned int v38 = objc_alloc_init(CKDPEncryptedMergeableValue);
        objc_storeStrong((id *)(a1 + 56), v38);
        if PBReaderPlaceMark() && (CKDPEncryptedMergeableValueReadFrom((uint64_t)v38, a2))
        {
LABEL_77:
          PBReaderRecallMark();

LABEL_78:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_95:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_78;
    }
  }
}

uint64_t sub_1C4E83E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 != 2)
      {
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_47;
        }
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_39;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_41;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_41:
        uint64_t v32 = 16;
        goto LABEL_46;
      }
      uint64_t v29 = PBReaderReadString();
      uint64_t v30 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v29;

LABEL_47:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v24 = 0;
    unsigned int v25 = 0;
    uint64_t v20 = 0;
    *(unsigned char *)(a1 + 32) |= 1u;
    while (1)
    {
      uint64_t v26 = *v3;
      unint64_t v27 = *(void *)(a2 + v26);
      if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
      *(void *)(a2 + v26) = v27 + 1;
      v20 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0) {
        goto LABEL_43;
      }
      v24 += 7;
      BOOL v14 = v25++ >= 9;
      if (v14)
      {
        uint64_t v20 = 0;
        goto LABEL_45;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
    if (*(unsigned char *)(a2 + *v5)) {
      uint64_t v20 = 0;
    }
LABEL_45:
    uint64_t v32 = 8;
LABEL_46:
    *(void *)(a1 + v32) = v20;
    goto LABEL_47;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E848F8(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(CKDPCodeFunctionInvokeRequestProtectedCloudComputeMetadataCryptoSession);
        objc_msgSend_addCryptoSessions_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1C4EFA630((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E85394(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_57;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_59;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_57:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_59:
          uint64_t v45 = 28;
          goto LABEL_68;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_63:
          uint64_t v45 = 24;
          goto LABEL_68;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v31 = *v3;
            unint64_t v32 = *(void *)(a2 + v31);
            if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
              *(void *)(a2 + v31) = v32 + 1;
              v19 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                BOOL v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_67:
          uint64_t v45 = 32;
LABEL_68:
          *(_DWORD *)(a1 + v45) = v19;
          continue;
        case 4u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v36 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v36 |= (unint64_t)(v39 & 0x7F) << v34;
              if (v39 < 0)
              {
                v34 += 7;
                BOOL v14 = v35++ >= 9;
                if (v14)
                {
                  uint64_t v36 = 0;
                  goto LABEL_72;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v36 = 0;
          }
LABEL_72:
          uint64_t v46 = 16;
          goto LABEL_77;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v36 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
        *(void *)(a2 + v42) = v43 + 1;
        v36 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0) {
          goto LABEL_74;
        }
        v40 += 7;
        BOOL v14 = v41++ >= 9;
        if (v14)
        {
          uint64_t v36 = 0;
          goto LABEL_76;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_74:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v36 = 0;
      }
LABEL_76:
      uint64_t v46 = 8;
LABEL_77:
      *(void *)(a1 + v46) = v36;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL CKDPRecordChainParentReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        id v18 = *(id *)(a1 + 8);
        *(void *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    id v18 = objc_alloc_init(MEMORY[0x1E4F19F28]);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || (CKDPRecordReferenceReadFrom() & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E8660C()
{
  dispatch_queue_t v0 = (void *)qword_1EBBCDDE8;
  qword_1EBBCDDE8 = (uint64_t)&unk_1F20ABDF8;
}

uint64_t sub_1C4E86890(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0) {
            goto LABEL_39;
          }
          v20 += 7;
          BOOL v14 = v21++ >= 9;
          if (v14)
          {
            uint64_t v22 = 0;
            goto LABEL_41;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_41:
        *(unsigned char *)(a1 + 24) = v22 != 0;
      }
      else if (v17 == 2)
      {
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
          *(void *)(a2 + v29) = v30 + 1;
          v28 |= (unint64_t)(v31 & 0x7F) << v26;
          if ((v31 & 0x80) == 0) {
            goto LABEL_43;
          }
          v26 += 7;
          BOOL v14 = v27++ >= 9;
          if (v14)
          {
            LODWORD(v28) = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v28) = 0;
        }
LABEL_45:
        *(_DWORD *)(a1 + 8) = v28;
      }
      else if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v18;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4E87184(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
LABEL_22:
        uint64_t v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t CKDPResponseOperationResultErrorAuxiliaryErrorErrorUserInfoValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      uint64_t v17 = v10 & 7;
      if (v16 || v17 == 4) {
        break;
      }
      uint64_t v19 = (const char *)(v10 >> 3);
      switch((v10 >> 3))
      {
        case 0u:
          unsigned int v20 = 0;
          do
          {
            uint64_t v21 = *v3;
            uint64_t v22 = *(void *)(a2 + v21);
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
              goto LABEL_59;
            }
            int v24 = *(char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v23;
            if ((v24 & 0x80000000) == 0) {
              break;
            }
          }
          while (v20++ <= 8);
          continue;
        case 1u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          *(unsigned char *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 1;
          *(unsigned char *)(a1 + 48) |= 1u;
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v29 = *(void *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v29 = 0;
          }
          *(void *)(a1 + 8) = v29;
          continue;
        case 2u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v32 = 0;
          *(unsigned char *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 2;
          *(unsigned char *)(a1 + 48) |= 2u;
          while (2)
          {
            uint64_t v33 = *v3;
            uint64_t v34 = *(void *)(a2 + v33);
            unint64_t v35 = v34 + 1;
            if (v34 == -1 || v35 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
              *(void *)(a2 + v33) = v35;
              v32 |= (unint64_t)(v36 & 0x7F) << v30;
              if (v36 < 0)
              {
                v30 += 7;
                BOOL v15 = v31++ >= 9;
                if (v15)
                {
                  uint64_t v32 = 0;
                  goto LABEL_52;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v32 = 0;
          }
LABEL_52:
          *(void *)(a1 + 16) = v32;
          continue;
        case 3u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v39 = 0;
          *(unsigned char *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 3;
          *(unsigned char *)(a1 + 48) |= 8u;
          break;
        case 4u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          *(unsigned char *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 4;
          uint64_t v44 = PBReaderReadString();
          uint64_t v45 = 32;
          goto LABEL_47;
        case 5u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          *(unsigned char *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 5;
          uint64_t v44 = PBReaderReadData();
          uint64_t v45 = 24;
LABEL_47:
          uint64_t v46 = *(void **)(a1 + v45);
          *(void *)(a1 + v45) = v44;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v40 = *v3;
        uint64_t v41 = *(void *)(a2 + v40);
        unint64_t v42 = v41 + 1;
        if (v41 == -1 || v42 > *(void *)(a2 + *v4)) {
          break;
        }
        char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
        *(void *)(a2 + v40) = v42;
        v39 |= (unint64_t)(v43 & 0x7F) << v37;
        if ((v43 & 0x80) == 0) {
          goto LABEL_54;
        }
        v37 += 7;
        BOOL v15 = v38++ >= 9;
        if (v15)
        {
          uint64_t v39 = 0;
          goto LABEL_56;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_54:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v39 = 0;
      }
LABEL_56:
      *(unsigned char *)(a1 + 44) = v39 != 0;
LABEL_59:
      ;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E88B3C()
{
  dispatch_queue_t v0 = (void *)qword_1EBBCDDF8;
  qword_1EBBCDDF8 = (uint64_t)&unk_1F20ABE20;
}

uint64_t sub_1C4E88D14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            uint64_t v21 = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_33:
        *(unsigned char *)(a1 + 16) = v21 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4E8946C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
LABEL_22:
        char v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 8;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL CKDPRequestOperationHeaderSupplementalZoneInfoReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(MEMORY[0x1E4F19F30]);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordZoneIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadData();
    id v17 = *(id *)(a1 + 8);
    *(void *)(a1 + 8) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E8A1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(MEMORY[0x1E4F19F20]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E8AFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_1C4E8AFF8(uint64_t a1)
{
  id v2 = [NSString alloc];
  objc_msgSend_substringFromIndex_(*(void **)(a1 + 32), v3, 12);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = objc_msgSend_initWithFormat_(v2, v4, @"%@", v9);
  char v8 = (const char *)objc_msgSend_UTF8String(v5, v6, v7);
  printf("%s", v8);
}

void sub_1C4E8B088(uint64_t a1)
{
  id v2 = [NSString alloc];
  id v7 = objc_msgSend_initWithFormat_(v2, v3, @"\n%@", *(void *)(a1 + 32));
  int v6 = (const char *)objc_msgSend_UTF8String(v7, v4, v5);
  puts(v6);
}

uint64_t sub_1C4E8B0F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4E8B104(uint64_t a1)
{
}

uint64_t sub_1C4E8B10C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), sel_parseRequestArrayAndPrint_, *(void *)(a1 + 32));
}

BOOL sub_1C4E8B11C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_seqNum(a2, (const char *)a2, a3);
  return v4 < objc_msgSend_seqNum(*(void **)(a1 + 32), v5, v6);
}

void sub_1C4E8BC00(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v7 = a4;
  objc_msgSend_addObject_(v5, v6, a2);
  v7[2]();
}

void sub_1C4E8BC64(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v7 = a4;
  objc_msgSend_addObject_(v5, v6, a2);
  v7[2]();
}

void sub_1C4E8BCC8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v7 = a4;
  objc_msgSend_addObject_(v5, v6, a2);
  v7[2]();
}

void sub_1C4E8BD2C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    NSLog(&cfstr_CloudkitlogPar_7.isa, a2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 32);
  dispatch_group_leave(v3);
}

void sub_1C4E8BD7C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    NSLog(&cfstr_CloudkitlogPar_8.isa, a2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 32);
  dispatch_group_leave(v3);
}

void sub_1C4E8BE14()
{
  id v0 = [NSString alloc];
  id v5 = objc_msgSend_initWithFormat_(v0, v1, @"Finished");
  uint64_t v4 = (const char *)objc_msgSend_UTF8String(v5, v2, v3);
  puts(v4);
}

void sub_1C4E8C180(uint64_t a1, void *a2)
{
  v192[3] = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = [NSString alloc];
  uint64_t v6 = objc_msgSend_uuid(v2, v4, v5);
  id v8 = objc_msgSend_initWithFormat_(v3, v7, @"Traffic log for request %@", v6);
  uint64_t v11 = (const char *)objc_msgSend_UTF8String(v8, v9, v10);
  puts(v11);

  BOOL v14 = objc_msgSend_requestTime(v2, v12, v13);
  if (v14)
  {
  }
  else
  {
    char v19 = objc_msgSend_responseTime(v2, v15, v16);

    if (!v19) {
      goto LABEL_16;
    }
  }
  unsigned int v20 = objc_msgSend_requestTime(v2, v17, v18);
  unint64_t v23 = v20;
  if (v20)
  {
    id v24 = v20;
  }
  else
  {
    char v25 = objc_msgSend_responseTime(v2, v21, v22);
    objc_msgSend_dateByAddingTimeInterval_(v25, v26, v27, -900.0);
    id v24 = (id)objc_claimAutoreleasedReturnValue();
  }
  char v30 = objc_msgSend_responseTime(v2, v28, v29);
  uint64_t v33 = v30;
  if (v30)
  {
    id v34 = v30;
  }
  else
  {
    unint64_t v35 = objc_msgSend_requestTime(v2, v31, v32);
    objc_msgSend_dateByAddingTimeInterval_(v35, v36, v37, 900.0);
    id v34 = (id)objc_claimAutoreleasedReturnValue();
  }
  unsigned int v38 = NSString;
  long long v181 = v24;
  uint64_t v41 = objc_msgSend_dateByAddingTimeInterval_(v24, v39, v40, -300.0);
  objc_msgSend_timeIntervalSince1970(v41, v42, v43);
  uint64_t v46 = objc_msgSend_stringWithFormat_(v38, v44, @"%lf", v45);

  char v47 = NSString;
  long long v180 = v34;
  uint64_t v50 = objc_msgSend_dateByAddingTimeInterval_(v34, v48, v49, 300.0);
  objc_msgSend_timeIntervalSince1970(v50, v51, v52);
  uint64_t v55 = objc_msgSend_stringWithFormat_(v47, v53, @"%lf", v54);

  uint64_t v56 = objc_opt_new();
  objc_msgSend_setScheme_(v56, v57, @"https");
  uint64_t v60 = objc_msgSend_responseHeaders(v2, v58, v59);
  uint64_t v62 = objc_msgSend_CKObjectForKeyCaseInsensitive_(v60, v61, 0x1F204D3B0);
  int hasPrefix = objc_msgSend_hasPrefix_(v62, v63, @"ICLOUD");

  if (hasPrefix) {
    objc_msgSend_setHost_(v56, v65, @"splunk-qa.icloud.apple.com");
  }
  else {
    objc_msgSend_setHost_(v56, v65, @"splunk.icloud.apple.com");
  }
  objc_msgSend_setPath_(v56, v66, @"/en-US/app/launcher/search");
  unsigned int v68 = objc_msgSend_queryItemWithName_value_(MEMORY[0x1E4F290C8], v67, @"earliest", v46);
  v192[0] = v68;
  uint64_t v70 = objc_msgSend_queryItemWithName_value_(MEMORY[0x1E4F290C8], v69, @"latest", v55);
  v192[1] = v70;
  unint64_t v71 = (void *)MEMORY[0x1E4F290C8];
  char v72 = NSString;
  uint64_t v75 = objc_msgSend_uuid(v2, v73, v74);
  char v77 = objc_msgSend_stringWithFormat_(v72, v76, @"search index=ck* %@", v75);
  CFTypeRef v79 = objc_msgSend_queryItemWithName_value_(v71, v78, @"q", v77);
  v192[2] = v79;
  BOOL v81 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v80, (uint64_t)v192, 3);
  objc_msgSend_setQueryItems_(v56, v82, (uint64_t)v81);

  v85 = objc_msgSend_URL(v56, v83, v84);
  uint64_t v88 = v85;
  if (v85)
  {
    uint64_t v89 = objc_msgSend_absoluteString(v85, v86, v87);
    v91 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v89, v90, @"*", @"%2A");
    id v92 = [NSString alloc];
    id v94 = objc_msgSend_initWithFormat_(v92, v93, @"%@", v91);
    v97 = (const char *)objc_msgSend_UTF8String(v94, v95, v96);
    puts(v97);
  }
LABEL_16:
  v98 = objc_msgSend_fileHandleWithStandardOutput(MEMORY[0x1E4F28CB0], v17, v18);
  id v99 = [NSString alloc];
  id v101 = objc_msgSend_initWithFormat_(v99, v100, @">>>>>>>> Request");
  uint64_t v104 = (const char *)objc_msgSend_UTF8String(v101, v102, v103);
  puts(v104);

  v107 = objc_msgSend_requestTime(v2, v105, v106);
  objc_msgSend_CKLogToFileHandle_(v107, v108, (uint64_t)v98);

  v109 = NSString;
  v112 = objc_msgSend_requestMethod(v2, v110, v111);
  v115 = objc_msgSend_requestURL(v2, v113, v114);
  uint64_t v117 = objc_msgSend_stringWithFormat_(v109, v116, @"%@ %@", v112, v115);
  objc_msgSend_CKLogToFileHandle_(v117, v118, (uint64_t)v98);

  v121 = objc_msgSend_requestHeaders(v2, v119, v120);
  sub_1C4E8C8D4(v121, v98);

  if (objc_msgSend_bodyStreamResetCount(v2, v122, v123) >= 1)
  {
    v126 = NSString;
    uint64_t v127 = objc_msgSend_bodyStreamResetCount(v2, v124, v125);
    uint64_t v130 = objc_msgSend_bodyStreamResetCount(v2, v128, v129);
    uint64_t v132 = &stru_1F2044F30;
    if (v130 > 1) {
      uint64_t v132 = @"s";
    }
    v133 = objc_msgSend_stringWithFormat_(v126, v131, @"\n=>=>=>=>=>Body stream was reset %li time%@. This was what was streamed the final time:", v127, v132);
    objc_msgSend_CKLogToFileHandle_(v133, v134, (uint64_t)v98);
  }
  long long v188 = 0u;
  long long v189 = 0u;
  long long v186 = 0u;
  long long v187 = 0u;
  v135 = objc_msgSend_requestObjects(v2, v124, v125);
  uint64_t v137 = objc_msgSend_countByEnumeratingWithState_objects_count_(v135, v136, (uint64_t)&v186, v191, 16);
  if (v137)
  {
    uint64_t v139 = v137;
    uint64_t v140 = *(void *)v187;
    do
    {
      for (uint64_t i = 0; i != v139; ++i)
      {
        if (*(void *)v187 != v140) {
          objc_enumerationMutation(v135);
        }
        objc_msgSend_CKLogToFileHandle_(*(void **)(*((void *)&v186 + 1) + 8 * i), v138, (uint64_t)v98);
      }
      uint64_t v139 = objc_msgSend_countByEnumeratingWithState_objects_count_(v135, v138, (uint64_t)&v186, v191, 16);
    }
    while (v139);
  }

  id v142 = [NSString alloc];
  id v144 = objc_msgSend_initWithFormat_(v142, v143, @"\n<<<<<<<< Response");
  uint64_t v147 = (const char *)objc_msgSend_UTF8String(v144, v145, v146);
  puts(v147);

  v150 = objc_msgSend_responseTime(v2, v148, v149);
  objc_msgSend_CKLogToFileHandle_(v150, v151, (uint64_t)v98);

  v152 = NSString;
  uint64_t v155 = objc_msgSend_responseStatus(v2, v153, v154);
  v157 = objc_msgSend_stringWithFormat_(v152, v156, @"Status %lu", v155);
  objc_msgSend_CKLogToFileHandle_(v157, v158, (uint64_t)v98);

  v161 = objc_msgSend_responseHeaders(v2, v159, v160);
  sub_1C4E8C8D4(v161, v98);

  long long v184 = 0u;
  long long v185 = 0u;
  long long v182 = 0u;
  long long v183 = 0u;
  long long v164 = objc_msgSend_responseObjects(v2, v162, v163);
  uint64_t v166 = objc_msgSend_countByEnumeratingWithState_objects_count_(v164, v165, (uint64_t)&v182, v190, 16);
  if (v166)
  {
    uint64_t v168 = v166;
    uint64_t v169 = *(void *)v183;
    do
    {
      for (uint64_t j = 0; j != v168; ++j)
      {
        if (*(void *)v183 != v169) {
          objc_enumerationMutation(v164);
        }
        objc_msgSend_CKLogToFileHandle_(*(void **)(*((void *)&v182 + 1) + 8 * j), v167, (uint64_t)v98);
      }
      uint64_t v168 = objc_msgSend_countByEnumeratingWithState_objects_count_(v164, v167, (uint64_t)&v182, v190, 16);
    }
    while (v168);
  }

  id v171 = [NSString alloc];
  long long v174 = objc_msgSend_uuid(v2, v172, v173);
  id v176 = objc_msgSend_initWithFormat_(v171, v175, @"End traffic log for operation %@\n\n", v174);
  long long v179 = (const char *)objc_msgSend_UTF8String(v176, v177, v178);
  puts(v179);
}

void sub_1C4E8C8D4(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  objc_msgSend_allKeys(v3, v5, v6);
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v20, v24, 16);
  if (v8)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v21 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void *)(*((void *)&v20 + 1) + 8 * i);
        BOOL v14 = NSString;
        int v15 = objc_msgSend_objectForKeyedSubscript_(v3, v9, v13);
        id v17 = objc_msgSend_stringWithFormat_(v14, v16, @"%@: %@", v13, v15);
        objc_msgSend_CKLogToFileHandle_(v17, v18, (uint64_t)v4);
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v20, v24, 16);
    }
    while (v10);
  }
}

void sub_1C4E8CDDC(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_shareParticipantFetchedBlock(*(void **)(a1 + 32), a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, void, void, void))v4 + 2))(v4, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
}

void sub_1C4E8D174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4E8D1B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend__handleFetchedInfo_withIdentity_error_(WeakRetained, v10, (uint64_t)v9, v8, v7);
}

void sub_1C4E8D23C(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend_finishWithError_(WeakRetained, v4, (uint64_t)v3);
}

void sub_1C4E8D56C()
{
  id v0 = (void *)qword_1EBBCDE08;
  qword_1EBBCDE08 = (uint64_t)&unk_1F20ABE48;
}

uint64_t sub_1C4E8D980(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        id v17 = objc_alloc_init(CKDPShareIdentifier);
        objc_storeStrong((id *)(a1 + 56), v17);
        if (PBReaderPlaceMark() && CKDPShareIdentifierReadFrom((uint64_t)v17, a2)) {
          goto LABEL_30;
        }
        goto LABEL_57;
      case 2u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 8;
        goto LABEL_32;
      case 3u:
        id v17 = objc_alloc_init(CKDPProtectionInfo);
        uint64_t v21 = 48;
        goto LABEL_28;
      case 4u:
        id v17 = objc_alloc_init(CKDPProtectionInfo);
        uint64_t v21 = 32;
        goto LABEL_28;
      case 5u:
        id v17 = objc_alloc_init(CKDPProtectionInfo);
        uint64_t v21 = 24;
LABEL_28:
        objc_storeStrong((id *)(a1 + v21), v17);
        if (PBReaderPlaceMark() && sub_1C4D5BCB4((uint64_t)v17, a2))
        {
LABEL_30:
          PBReaderRecallMark();

LABEL_55:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_57:

        return 0;
      case 6u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 16;
LABEL_32:
        long long v22 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;

        goto LABEL_55;
      case 7u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 68) |= 1u;
        while (2)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              BOOL v14 = v24++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_50:
        *(_DWORD *)(a1 + 40) = v25;
        goto LABEL_55;
      case 8u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        *(unsigned char *)(a1 + 68) |= 2u;
        while (2)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v31 |= (unint64_t)(v34 & 0x7F) << v29;
            if (v34 < 0)
            {
              v29 += 7;
              BOOL v14 = v30++ >= 9;
              if (v14)
              {
                uint64_t v31 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v31 = 0;
        }
LABEL_54:
        *(unsigned char *)(a1 + 64) = v31 != 0;
        goto LABEL_55;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_55;
    }
  }
}

uint64_t sub_1C4E8E860(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(CKDPZone);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || !sub_1C4E22544((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id sub_1C4E8EEB0(int a1, id a2)
{
  return a2;
}

id sub_1C4E8EF64(int a1, id a2)
{
  return a2;
}

id sub_1C4E8F0F4(uint64_t a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v7 = objc_msgSend_operationType(v4, v5, v6);
  unsigned int v9 = objc_msgSend_operationRequestWithType_(v4, v8, v7);
  unint64_t v10 = objc_opt_new();
  objc_msgSend_setArchiveRecordsRequest_(v9, v11, (uint64_t)v10);

  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  BOOL v14 = objc_msgSend_zoneIDToRecordIDs(*(void **)(a1 + 32), v12, v13, 0);
  uint64_t v16 = objc_msgSend_objectForKeyedSubscript_(v14, v15, (uint64_t)v3);

  uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v43, v47, 16);
  if (v18)
  {
    uint64_t v21 = v18;
    uint64_t v22 = *(void *)v44;
    do
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        if (*(void *)v44 != v22) {
          objc_enumerationMutation(v16);
        }
        uint64_t v24 = *(void *)(*((void *)&v43 + 1) + 8 * i);
        uint64_t v25 = objc_msgSend_translator(*(void **)(a1 + 32), v19, v20);
        unint64_t v27 = objc_msgSend_pRecordIdentifierFromRecordID_(v25, v26, v24);

        unsigned int v30 = objc_msgSend_archiveRecordsRequest(v9, v28, v29);
        objc_msgSend_addIdsToArchive_(v30, v31, (uint64_t)v27);
      }
      uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v19, (uint64_t)&v43, v47, 16);
    }
    while (v21);
  }

  char v34 = objc_msgSend_recordZoneIDByRequestID(*(void **)(a1 + 32), v32, v33);
  uint64_t v37 = objc_msgSend_request(v9, v35, v36);
  uint64_t v40 = objc_msgSend_operationUUID(v37, v38, v39);
  objc_msgSend_setObject_forKeyedSubscript_(v34, v41, (uint64_t)v3, v40);

  return v9;
}

uint64_t sub_1C4E8FE04(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        id v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_storeStrong((id *)(a1 + 16), v17);
        if PBReaderPlaceMark() && (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2)) {
          goto LABEL_29;
        }
        goto LABEL_43;
      case 2u:
        id v17 = objc_alloc_init(CKDPRecordFieldValue);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldValueReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_43;
        }
        goto LABEL_29;
      case 3u:
        id v17 = objc_alloc_init(CKDPLocationBound);
        objc_storeStrong((id *)(a1 + 8), v17);
        if PBReaderPlaceMark() && (sub_1C4EE6B6C((uint64_t)v17, a2))
        {
LABEL_29:
          PBReaderRecallMark();

LABEL_41:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_43:

        return 0;
      case 4u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + 32) = v21;
        goto LABEL_41;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_41;
    }
  }
}

uint64_t sub_1C4E907FC()
{
  qword_1EBBCFCD8 = objc_alloc_init(CKDPowerLogger);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4E9180C(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_39;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_41;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_41:
          *(_DWORD *)(a1 + 24) = v19;
          continue;
        case 2u:
          uint64_t v24 = PBReaderReadData();
          uint64_t v25 = 16;
          goto LABEL_30;
        case 3u:
          uint64_t v24 = PBReaderReadData();
          uint64_t v25 = 8;
LABEL_30:
          uint64_t v26 = *(void **)(a1 + v25);
          *(void *)(a1 + v25) = v24;

          continue;
        case 4u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v30 = *v3;
        unint64_t v31 = *(void *)(a2 + v30);
        if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
        *(void *)(a2 + v30) = v31 + 1;
        v29 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0) {
          goto LABEL_43;
        }
        v27 += 7;
        BOOL v14 = v28++ >= 9;
        if (v14)
        {
          uint64_t v29 = 0;
          goto LABEL_45;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v29 = 0;
      }
LABEL_45:
      *(unsigned char *)(a1 + 28) = v29 != 0;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E929BC(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(CKDPRecordType);
        objc_msgSend_addTypes_((void *)a1, v18, (uint64_t)v17);
        if PBReaderPlaceMark() && (CKDPRecordTypeReadFrom((uint64_t)v17, a2)) {
          goto LABEL_29;
        }
        goto LABEL_54;
      case 2u:
        char v17 = objc_alloc_init(CKDPQueryFilter);
        objc_msgSend_addFilters_((void *)a1, v20, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (sub_1C4E8FE04((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_54;
        }
        goto LABEL_29;
      case 3u:
        char v17 = objc_alloc_init(CKDPQuerySort);
        objc_msgSend_addSorts_((void *)a1, v21, (uint64_t)v17);
        if PBReaderPlaceMark() && (sub_1C4D834D0((uint64_t)v17, a2))
        {
LABEL_29:
          PBReaderRecallMark();

LABEL_52:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_54:

        return 0;
      case 4u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (2)
        {
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 == -1 || v26 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              BOOL v14 = v23++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
LABEL_47:
        *(unsigned char *)(a1 + 40) = v24 != 0;
        goto LABEL_52;
      case 5u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 1;
            v30 |= (unint64_t)(v33 & 0x7F) << v28;
            if (v33 < 0)
            {
              v28 += 7;
              BOOL v14 = v29++ >= 9;
              if (v14)
              {
                LODWORD(v30) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v30) = 0;
        }
LABEL_51:
        *(_DWORD *)(a1 + 16) = v30;
        goto LABEL_52;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_52;
    }
  }
}

id sub_1C4E93C58()
{
  if (qword_1EBBCFCF0 != -1) {
    dispatch_once(&qword_1EBBCFCF0, &unk_1F2043850);
  }
  id v0 = (void *)qword_1EBBCFCE8;
  return v0;
}

void sub_1C4E93CAC(uint64_t a1, const char *a2)
{
  v8[8] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *MEMORY[0x1E4F19D20];
  v8[0] = *MEMORY[0x1E4F19D58];
  v8[1] = v2;
  uint64_t v3 = *MEMORY[0x1E4F19D18];
  v8[2] = *MEMORY[0x1E4F19D30];
  v8[3] = v3;
  uint64_t v4 = *MEMORY[0x1E4F19D28];
  void v8[4] = *MEMORY[0x1E4F19D38];
  void v8[5] = v4;
  uint64_t v5 = *MEMORY[0x1E4F19D50];
  v8[6] = *MEMORY[0x1E4F19D70];
  v8[7] = v5;
  uint64_t v6 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], a2, (uint64_t)v8, 8);
  uint64_t v7 = (void *)qword_1EBBCFCE8;
  qword_1EBBCFCE8 = v6;
}

void sub_1C4E93D8C(uint64_t a1, const char *a2)
{
  v11[7] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *MEMORY[0x1E4F19D58];
  v10[0] = @"recordID";
  v10[1] = @"creationDate";
  uint64_t v3 = *MEMORY[0x1E4F19D18];
  v11[0] = v2;
  v11[1] = v3;
  uint64_t v4 = *MEMORY[0x1E4F19D38];
  v10[2] = @"modificationDate";
  v10[3] = @"creatorUserRecordID";
  uint64_t v5 = *MEMORY[0x1E4F19D20];
  v11[2] = v4;
  v11[3] = v5;
  uint64_t v6 = *MEMORY[0x1E4F19D30];
  void v10[4] = @"lastModifiedUserRecordID";
  void v10[5] = @"recordChangeTag";
  uint64_t v7 = *MEMORY[0x1E4F19D28];
  void v11[4] = v6;
  v11[5] = v7;
  v10[6] = @"shareID";
  v11[6] = *MEMORY[0x1E4F19D70];
  uint64_t v8 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v11, v10, 7);
  unsigned int v9 = (void *)qword_1EBBCFCF8;
  qword_1EBBCFCF8 = v8;
}

id sub_1C4E93EAC(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_isEqualToString_(v1, v2, *MEMORY[0x1E4F19BE8]))
  {
    id v12 = objc_alloc(MEMORY[0x1E4F1A018]);
    id v14 = (id)objc_msgSend_initWithCode_format_(v12, v13, 12, @"Unsupported operation for special key-path allTokens");
    objc_exception_throw(v14);
  }
  id v3 = v1;
  uint64_t v5 = v3;
  if (qword_1EBBCFD00 == -1)
  {
    if (v3)
    {
LABEL_4:
      uint64_t v6 = objc_msgSend_objectForKeyedSubscript_((void *)qword_1EBBCFCF8, v4, (uint64_t)v5);
      goto LABEL_7;
    }
  }
  else
  {
    dispatch_once(&qword_1EBBCFD00, &unk_1F2043870);
    if (v5) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = 0;
LABEL_7:

  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v5;
  }
  id v8 = v7;

  unsigned int v9 = objc_opt_new();
  objc_msgSend_setName_(v9, v10, (uint64_t)v8);

  return v9;
}

uint64_t sub_1C4E93FB0(int a1)
{
  if (a1 == 1) {
    return 1;
  }
  if (a1 == 2) {
    return 0;
  }
  if (a1 != 3)
  {
    id v2 = objc_alloc(MEMORY[0x1E4F1A018]);
    id v4 = (id)objc_msgSend_initWithCode_format_(v2, v3, 12, @"Unexpected reference type");
    objc_exception_throw(v4);
  }
  return *MEMORY[0x1E4F19D98];
}

uint64_t sub_1C4E9401C(unint64_t a1)
{
  if (a1 >= 0xB || ((0x53Fu >> a1) & 1) == 0)
  {
    id v2 = objc_alloc(MEMORY[0x1E4F1A018]);
    id v4 = (id)objc_msgSend_initWithCode_format_(v2, v3, 12, @"Unexpected operator for predicate");
    objc_exception_throw(v4);
  }
  return dword_1C50805F8[a1];
}

uint64_t sub_1C4E94074(int a1)
{
  int v1 = a1 - 1;
  if ((a1 - 1) >= 0x10 || ((0x80F7u >> v1) & 1) == 0)
  {
    id v3 = objc_alloc(MEMORY[0x1E4F1A018]);
    id v5 = (id)objc_msgSend_initWithCode_format_(v3, v4, 12, @"Unexpected filter type");
    objc_exception_throw(v5);
  }
  return qword_1C5080628[v1];
}

id sub_1C4E940D0(void *a1, void *a2)
{
  uint64_t v233 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = objc_opt_new();
  if (objc_msgSend_hasError(v4, v6, v7))
  {
    unint64_t v10 = objc_msgSend_error(v4, v8, v9);
    int hasErrorKey = objc_msgSend_hasErrorKey(v10, v11, v12);

    if (hasErrorKey)
    {
      uint64_t v16 = objc_msgSend_error(v4, v14, v15);
      uint64_t v19 = objc_msgSend_errorKey(v16, v17, v18);
      objc_msgSend_setObject_forKeyedSubscript_(v5, v20, (uint64_t)v19, @"errorKey");
    }
    unint64_t v21 = objc_msgSend_error(v4, v14, v15);
    int hasErrorDescription = objc_msgSend_hasErrorDescription(v21, v22, v23);

    if (hasErrorDescription)
    {
      char v27 = objc_msgSend_error(v4, v25, v26);
      uint64_t v30 = objc_msgSend_errorDescription(v27, v28, v29);
      objc_msgSend_setObject_forKeyedSubscript_(v5, v31, (uint64_t)v30, *MEMORY[0x1E4F28568]);

      char v34 = objc_msgSend_error(v4, v32, v33);
      uint64_t v37 = objc_msgSend_errorDescription(v34, v35, v36);
      objc_msgSend_setObject_forKeyedSubscript_(v5, v38, (uint64_t)v37, *MEMORY[0x1E4F19C68]);
    }
    uint64_t v39 = objc_msgSend_error(v4, v25, v26);
    int hasRetryAfterSeconds = objc_msgSend_hasRetryAfterSeconds(v39, v40, v41);

    if (hasRetryAfterSeconds)
    {
      long long v45 = (void *)MEMORY[0x1E4F28ED0];
      long long v46 = objc_msgSend_error(v4, v43, v44);
      uint64_t v49 = objc_msgSend_retryAfterSeconds(v46, v47, v48);
      uint64_t v51 = objc_msgSend_numberWithInt_(v45, v50, v49);
      objc_msgSend_setObject_forKeyedSubscript_(v5, v52, (uint64_t)v51, *MEMORY[0x1E4F19C60]);
    }
    BOOL v53 = objc_msgSend_error(v4, v43, v44);
    if (objc_msgSend_hasExtensionError(v53, v54, v55))
    {
      uint64_t v58 = objc_msgSend_error(v4, v56, v57);
      uint64_t v61 = objc_msgSend_extensionError(v58, v59, v60);
      int hasTypeCode = objc_msgSend_hasTypeCode(v61, v62, v63);

      if (hasTypeCode)
      {
        uint64_t v67 = objc_opt_new();
        uint64_t v70 = objc_msgSend_error(v4, v68, v69);
        uint64_t v73 = objc_msgSend_extensionError(v70, v71, v72);
        objc_msgSend_extensionName(v73, v74, v75);
        uint64_t v76 = (__CFString *)objc_claimAutoreleasedReturnValue();

        if (!objc_msgSend_length(v76, v77, v78))
        {

          uint64_t v76 = @"CKPluginUnknownDomain";
        }
        BOOL v81 = objc_msgSend_error(v4, v79, v80);
        objc_msgSend_errorDescription(v81, v82, v83);
        uint64_t v84 = (__CFString *)objc_claimAutoreleasedReturnValue();

        if (!objc_msgSend_length(v84, v85, v86))
        {

          uint64_t v84 = @"Error, details unknown";
        }
        objc_msgSend_setObject_forKeyedSubscript_(v67, v87, (uint64_t)v84, *MEMORY[0x1E4F19C68]);
        objc_msgSend_setObject_forKeyedSubscript_(v67, v88, (uint64_t)v84, *MEMORY[0x1E4F28568]);
        v91 = objc_msgSend_error(v4, v89, v90);
        id v94 = objc_msgSend_extensionError(v91, v92, v93);
        int hasExtensionPayload = objc_msgSend_hasExtensionPayload(v94, v95, v96);

        if (hasExtensionPayload)
        {
          v100 = objc_msgSend_error(v4, v98, v99);
          uint64_t v103 = objc_msgSend_extensionError(v100, v101, v102);
          uint64_t v106 = objc_msgSend_extensionPayload(v103, v104, v105);
          objc_msgSend_setObject_forKeyedSubscript_(v67, v107, (uint64_t)v106, *MEMORY[0x1E4F19C80]);
        }
        uint64_t v108 = (void *)MEMORY[0x1E4F28C58];
        v109 = objc_msgSend_error(v4, v98, v99);
        v112 = objc_msgSend_extensionError(v109, v110, v111);
        unsigned int v115 = objc_msgSend_typeCode(v112, v113, v114);
        uint64_t v117 = objc_msgSend_errorWithDomain_code_userInfo_(v108, v116, (uint64_t)v76, v115, v67);

        objc_msgSend_setObject_forKeyedSubscript_(v5, v118, (uint64_t)v117, *MEMORY[0x1E4F28A50]);
        objc_msgSend_setObject_forKeyedSubscript_(v5, v119, (uint64_t)v117, *MEMORY[0x1E4F19DE8]);

        goto LABEL_17;
      }
    }
    else
    {
    }
    uint64_t v120 = objc_msgSend_error(v4, v65, v66);
    int hasAuxiliaryError = objc_msgSend_hasAuxiliaryError(v120, v121, v122);

    if (hasAuxiliaryError)
    {
      v124 = objc_msgSend_error(v4, v8, v9);
      uint64_t v67 = objc_msgSend_auxiliaryError(v124, v125, v126);

      if (objc_msgSend_hasDomain(v67, v127, v128))
      {
        objc_msgSend_domain(v67, v129, v130);
        uint64_t v76 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend_length(v76, v131, v132) || (objc_msgSend_hasCode(v67, v133, v134) & 1) == 0) {
          goto LABEL_18;
        }
        int v137 = objc_msgSend_code(v67, v135, v136);

        if (v137)
        {
          if (!objc_msgSend_userInfosCount(v67, v138, v139))
          {
            uint64_t v76 = 0;
            goto LABEL_63;
          }
          id v142 = objc_alloc(MEMORY[0x1E4F1CA60]);
          uint64_t v145 = objc_msgSend_userInfosCount(v67, v143, v144);
          v226 = v67;
          v227 = (__CFString *)objc_msgSend_initWithCapacity_(v142, v146, v145);
          long long v228 = 0u;
          long long v229 = 0u;
          long long v230 = 0u;
          long long v231 = 0u;
          uint64_t v149 = objc_msgSend_userInfos(v67, v147, v148);
          uint64_t v151 = objc_msgSend_countByEnumeratingWithState_objects_count_(v149, v150, (uint64_t)&v228, v232, 16);
          if (!v151) {
            goto LABEL_48;
          }
          uint64_t v154 = v151;
          uint64_t v155 = *(void *)v229;
          while (1)
          {
            for (uint64_t i = 0; i != v154; ++i)
            {
              if (*(void *)v229 != v155) {
                objc_enumerationMutation(v149);
              }
              v157 = *(void **)(*((void *)&v228 + 1) + 8 * i);
              if (objc_msgSend_hasKey(v157, v152, v153))
              {
                uint64_t v158 = objc_msgSend_key(v157, v152, v153);
                if (objc_msgSend_length(v158, v159, v160))
                {
                  int hasValue = objc_msgSend_hasValue(v157, v161, v162);

                  if (!hasValue) {
                    continue;
                  }
                  uint64_t v158 = objc_msgSend_value(v157, v152, v153);
                  if (objc_msgSend_hasDoubleValue(v158, v164, v165))
                  {
                    uint64_t v168 = (void *)MEMORY[0x1E4F28ED0];
                    objc_msgSend_doubleValue(v158, v166, v167);
                    uint64_t v171 = objc_msgSend_numberWithDouble_(v168, v169, v170);
                    goto LABEL_44;
                  }
                  if (objc_msgSend_hasInt64Value(v158, v166, v167))
                  {
                    id v176 = (void *)MEMORY[0x1E4F28ED0];
                    uint64_t v177 = objc_msgSend_int64Value(v158, v174, v175);
                    uint64_t v171 = objc_msgSend_numberWithInteger_(v176, v178, v177);
                    goto LABEL_44;
                  }
                  if (objc_msgSend_hasBoolValue(v158, v174, v175))
                  {
                    long long v181 = (void *)MEMORY[0x1E4F28ED0];
                    uint64_t v182 = objc_msgSend_BOOLValue(v158, v179, v180);
                    uint64_t v171 = objc_msgSend_numberWithBool_(v181, v183, v182);
                    goto LABEL_44;
                  }
                  if (objc_msgSend_hasStringValue(v158, v179, v180))
                  {
                    uint64_t v171 = objc_msgSend_stringValue(v158, v184, v185);
                    goto LABEL_44;
                  }
                  if (objc_msgSend_hasBytesValue(v158, v184, v185))
                  {
                    uint64_t v171 = objc_msgSend_bytesValue(v158, v186, v187);
LABEL_44:
                    long long v188 = (void *)v171;
                    long long v189 = objc_msgSend_key(v157, v172, v173);
                    objc_msgSend_setObject_forKeyedSubscript_(v227, v190, (uint64_t)v188, v189);
                  }
                }

                continue;
              }
            }
            uint64_t v154 = objc_msgSend_countByEnumeratingWithState_objects_count_(v149, v152, (uint64_t)&v228, v232, 16);
            if (!v154)
            {
LABEL_48:

              uint64_t v76 = v227;
              if (!objc_msgSend_count(v227, v191, v192))
              {

                uint64_t v76 = 0;
              }
              uint64_t v67 = v226;
LABEL_63:
              v218 = (void *)MEMORY[0x1E4F28C58];
              v219 = objc_msgSend_domain(v67, v140, v141);
              int v222 = objc_msgSend_code(v67, v220, v221);
              objc_msgSend_errorWithDomain_code_userInfo_(v218, v223, (uint64_t)v219, v222, v76);
              uint64_t v84 = (__CFString *)objc_claimAutoreleasedReturnValue();

              objc_msgSend_setObject_forKeyedSubscript_(v5, v224, (uint64_t)v84, *MEMORY[0x1E4F28A50]);
              objc_msgSend_setObject_forKeyedSubscript_(v5, v225, (uint64_t)v84, *MEMORY[0x1E4F19DE8]);
LABEL_17:

LABEL_18:
              break;
            }
          }
        }
      }
    }
  }
  v193 = objc_msgSend_requestUUID(v3, v8, v9);

  if (v193)
  {
    v196 = objc_msgSend_requestUUID(v3, v194, v195);
    objc_msgSend_setObject_forKeyedSubscript_(v5, v197, (uint64_t)v196, *MEMORY[0x1E4F19DA0]);
  }
  v198 = objc_msgSend_operation(v3, v194, v195);
  v201 = objc_msgSend_topmostParentOperation(v198, v199, v200);
  v204 = objc_msgSend_operationID(v201, v202, v203);

  if (v204) {
    objc_msgSend_setObject_forKeyedSubscript_(v5, v205, (uint64_t)v204, *MEMORY[0x1E4F19C50]);
  }
  v207 = objc_msgSend_container(v3, v205, v206);
  v210 = objc_msgSend_containerID(v207, v208, v209);

  if (v210)
  {
    v213 = objc_msgSend_containerIdentifier(v210, v211, v212);
    objc_msgSend_setObject_forKeyedSubscript_(v5, v214, (uint64_t)v213, *MEMORY[0x1E4F19BF8]);
  }
  if (objc_msgSend_count(v5, v211, v212)) {
    v215 = v5;
  }
  else {
    v215 = 0;
  }
  id v216 = v215;

  return v216;
}

uint64_t sub_1C4E94904(int a1)
{
  uint64_t result = 1000;
  switch(a1)
  {
    case 1:
    case 6:
LABEL_5:
      uint64_t result = 2000;
      break;
    case 2:
LABEL_6:
      uint64_t result = 2002;
      break;
    case 3:
      uint64_t result = 2003;
      break;
    case 4:
      uint64_t result = 2031;
      break;
    case 5:
      return result;
    case 7:
      uint64_t result = 2029;
      break;
    case 8:
      uint64_t result = 2030;
      break;
    case 9:
      uint64_t result = 2023;
      break;
    default:
      switch(a1)
      {
        case 200001:
          uint64_t result = 1014;
          break;
        case 200002:
          goto LABEL_6;
        case 200003:
          goto LABEL_5;
        case 200004:
        case 200005:
          uint64_t result = 2022;
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t sub_1C4E949E8(int a1)
{
  uint64_t v1 = 1000;
  int v2 = a1 - 1;
  uint64_t result = 2017;
  switch(v2)
  {
    case 0:
    case 12:
    case 13:
      return 2005;
    case 1:
      return 2013;
    case 2:
      return 2014;
    case 3:
      return 2006;
    case 4:
      return 2007;
    case 5:
      return 2009;
    case 6:
      return 2010;
    case 7:
      return 2027;
    case 8:
      return result;
    case 9:
      return 2040;
    case 10:
      return 2011;
    case 11:
      return 2012;
    case 14:
      return 2004;
    case 15:
      return 2024;
    case 16:
      return 1016;
    case 17:
    case 19:
    case 27:
    case 28:
    case 29:
    case 30:
    case 32:
    case 33:
    case 35:
    case 36:
    case 54:
    case 55:
    case 56:
    case 57:
    case 76:
    case 80:
      return 2023;
    case 18:
      return 2022;
    case 20:
      return 1014;
    case 21:
    case 22:
    case 31:
    case 34:
      return 2018;
    case 23:
    case 37:
      return 2019;
    case 24:
      return 2020;
    case 25:
      return 2015;
    case 26:
      return 2016;
    case 38:
      return 2025;
    case 39:
      return 2026;
    case 40:
      return 2028;
    case 41:
      return 2033;
    case 42:
      return 2032;
    case 45:
      return 3005;
    case 46:
      return 2035;
    case 47:
      return 2036;
    case 48:
      return 2007;
    case 49:
    case 50:
    case 105:
      return 2039;
    case 51:
    case 52:
      return 2037;
    case 53:
      return 2038;
    case 58:
      return 2042;
    case 59:
      return 2041;
    case 60:
      return 2045;
    case 61:
      return 2043;
    case 63:
      return 2044;
    case 64:
      return 2046;
    case 65:
      return 2047;
    case 66:
      return 2048;
    case 67:
      return 2049;
    case 68:
      return 2050;
    case 69:
      return 2051;
    case 70:
      return 2052;
    case 71:
      return 2053;
    case 72:
      return 2054;
    case 74:
      return 8014;
    case 75:
    case 83:
    case 104:
      return 2005;
    case 77:
      return 2056;
    case 78:
    case 81:
      return 2003;
    case 79:
    case 82:
    case 94:
    case 95:
    case 96:
    case 97:
    case 99:
    case 100:
    case 101:
      return 1017;
    case 84:
    case 85:
    case 86:
      return 1029;
    case 87:
      return 2057;
    case 88:
      return 2060;
    case 89:
      return 3014;
    case 93:
    case 102:
    case 103:
      return 5022;
    default:
      return v1;
  }
}

uint64_t sub_1C4E94D98(void *a1)
{
  id v1 = a1;
  if (!objc_msgSend_hasCode(v1, v2, v3)) {
    goto LABEL_14;
  }
  if (objc_msgSend_code(v1, v4, v5) != 1)
  {
    if (objc_msgSend_hasError(v1, v6, v7))
    {
      uint64_t v11 = objc_msgSend_error(v1, v9, v10);
      id v14 = objc_msgSend_serverError(v11, v12, v13);
      int hasType = objc_msgSend_hasType(v14, v15, v16);

      uint64_t v20 = objc_msgSend_error(v1, v18, v19);
      uint64_t v23 = v20;
      if (hasType)
      {
        uint64_t v24 = objc_msgSend_serverError(v20, v21, v22);
        int v27 = objc_msgSend_type(v24, v25, v26);
        uint64_t v28 = sub_1C4E94904(v27);
LABEL_9:
        uint64_t v8 = v28;

        goto LABEL_15;
      }
      uint64_t v29 = objc_msgSend_clientError(v20, v21, v22);
      int v32 = objc_msgSend_hasType(v29, v30, v31);

      unint64_t v35 = objc_msgSend_error(v1, v33, v34);
      uint64_t v23 = v35;
      if (v32)
      {
        uint64_t v24 = objc_msgSend_clientError(v35, v36, v37);
        int v40 = objc_msgSend_type(v24, v38, v39);
        uint64_t v28 = sub_1C4E949E8(v40);
        goto LABEL_9;
      }
      if (objc_msgSend_hasExtensionError(v35, v36, v37))
      {

LABEL_13:
        uint64_t v8 = 6000;
        goto LABEL_15;
      }
      long long v43 = objc_msgSend_error(v1, v41, v42);
      int hasAuxiliaryError = objc_msgSend_hasAuxiliaryError(v43, v44, v45);

      if (hasAuxiliaryError) {
        goto LABEL_13;
      }
    }
LABEL_14:
    uint64_t v8 = 1000;
    goto LABEL_15;
  }
  uint64_t v8 = 0;
LABEL_15:

  return v8;
}

uint64_t sub_1C4E94EE4(uint64_t a1, const char *a2, uint64_t a3)
{
  if (a1)
  {
    if (a1 == 2) {
      unsigned int v3 = 2;
    }
    else {
      unsigned int v3 = 1;
    }
    if (a1 == 3) {
      return 3;
    }
    else {
      return v3;
    }
  }
  else
  {
    uint64_t v5 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3);
    uint64_t v7 = objc_msgSend_stringWithUTF8String_(NSString, v6, (uint64_t)"CKDPParticipant_ShareParticipantKeyHealth CKDPShareParticipantKeyHealthForCKShareParticipantInvitationTokenStatus(CKShareParticipantInvitationTokenStatus)");
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v8, (uint64_t)v7, @"CKDEnumConversion.m", 556, @"Unexpected share participant invitation token status: %ld", 0);

    return 1;
  }
}

uint64_t sub_1C4E94F90()
{
  return 2;
}

uint64_t sub_1C4E9506C(uint64_t result, const char *a2, uint64_t a3)
{
  if ((unint64_t)(result - 1) < 4) {
    return result;
  }
  uint64_t v3 = result;
  id v4 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3);
  uint64_t v6 = objc_msgSend_stringWithUTF8String_(NSString, v5, (uint64_t)"CKDPParticipant_ShareParticipantType CKDPShareParticipantTypeForCKShareParticipantRole(CKShareParticipantRole)");
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v4, v7, (uint64_t)v6, @"CKDEnumConversion.m", 619, @"Unexpected share participant role: %ld", v3);

  return 3;
}

uint64_t CKDPRequestOperationHeader_DatabaseDatabaseFromCKDatabaseScope(unint64_t a1)
{
  if (a1 > 4) {
    return 1;
  }
  else {
    return dword_1C50806A8[a1];
  }
}

uint64_t sub_1C4E95134(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!objc_msgSend_length(v1, v2, v3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v8 = *MEMORY[0x1E4F1A500];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    LOWORD(v15) = 0;
    uint64_t v12 = "Can't convert empty server type string to a CKDPServerType";
    uint64_t v13 = v8;
    uint32_t v14 = 2;
    goto LABEL_19;
  }
  if (objc_msgSend_isEqualToString_(v1, v4, @"CKDatabaseService"))
  {
LABEL_8:
    uint64_t v7 = 0;
    goto LABEL_9;
  }
  if ((objc_msgSend_isEqualToString_(v1, v5, @"CKShareService") & 1) == 0)
  {
    if (objc_msgSend_isEqualToString_(v1, v6, @"CKDeviceService"))
    {
      uint64_t v7 = 2;
      goto LABEL_9;
    }
    if (objc_msgSend_isEqualToString_(v1, v10, @"CKCodeService"))
    {
      uint64_t v7 = 3;
      goto LABEL_9;
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v11 = *MEMORY[0x1E4F1A500];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    int v15 = 138543362;
    id v16 = v1;
    uint64_t v12 = "Server type \"%{public}@\" isn't known";
    uint64_t v13 = v11;
    uint32_t v14 = 12;
LABEL_19:
    _os_log_error_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v15, v14);
    goto LABEL_8;
  }
  uint64_t v7 = 1;
LABEL_9:

  return v7;
}

uint64_t sub_1C4E95300(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!objc_msgSend_length(v1, v2, v3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v7 = *MEMORY[0x1E4F1A500];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    LOWORD(v14) = 0;
    uint64_t v8 = "Can't convert empty partition type string to a CKDPPartitionType";
    uint64_t v9 = v7;
    uint32_t v10 = 2;
    goto LABEL_8;
  }
  if ((objc_msgSend_isEqualToString_(v1, v4, @"userPartition") & 1) == 0)
  {
    if (objc_msgSend_isEqualToString_(v1, v5, @"appPartition")) {
      goto LABEL_15;
    }
    if (objc_msgSend_isEqualToString_(v1, v11, @"databaseSpecificPartition"))
    {
      uint64_t v6 = 2;
      goto LABEL_16;
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v12 = *MEMORY[0x1E4F1A500];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      uint64_t v6 = 1;
      goto LABEL_16;
    }
    int v14 = 138543362;
    id v15 = v1;
    uint64_t v8 = "Partition type \"%{public}@\" isn't known";
    uint64_t v9 = v12;
    uint32_t v10 = 12;
LABEL_8:
    _os_log_error_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v14, v10);
    goto LABEL_15;
  }
  uint64_t v6 = 0;
LABEL_16:

  return v6;
}

BOOL sub_1C4E9580C(char *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 8;
LABEL_26:
        uint64_t v20 = *(CKDPResponseOperationHeaderAssetAuthorizationResponseHeaderInfo **)&a1[v19];
        *(void *)&a1[v19] = v18;
LABEL_27:

        goto LABEL_29;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v20 = objc_alloc_init(CKDPResponseOperationHeaderAssetAuthorizationResponseHeaderInfo);
    objc_msgSend_addResponseHeaders_(a1, v21, (uint64_t)v20);
    if (!PBReaderPlaceMark() || !sub_1C4EF9F64((uint64_t)v20, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t CKDPResponseOperationResultErrorExtensionReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 16;
      }
      else
      {
        if (v17 == 2)
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v24 = *v3;
            unint64_t v25 = *(void *)(a2 + v24);
            if (v25 == -1 || v25 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if ((v26 & 0x80) == 0) {
              goto LABEL_34;
            }
            v21 += 7;
            BOOL v14 = v22++ >= 9;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_36;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v23) = 0;
          }
LABEL_36:
          *(_DWORD *)(a1 + 24) = v23;
          continue;
        }
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 8;
      }
      uint64_t v20 = *(void **)(a1 + v19);
      *(void *)(a1 + v19) = v18;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t CKDPRecordReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 64;
        goto LABEL_72;
      case 2u:
        uint64_t v19 = (CKDPRecordType *)objc_alloc_init(MEMORY[0x1E4F19F20]);
        objc_storeStrong((id *)(a1 + 144), v19);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0) {
          goto LABEL_109;
        }
        goto LABEL_96;
      case 3u:
        uint64_t v19 = objc_alloc_init(CKDPRecordType);
        objc_storeStrong((id *)(a1 + 200), v19);
        if (!PBReaderPlaceMark() || (CKDPRecordTypeReadFrom((uint64_t)v19, a2) & 1) == 0) {
          goto LABEL_109;
        }
        goto LABEL_96;
      case 4u:
        uint64_t v19 = (CKDPRecordType *)objc_alloc_init(MEMORY[0x1E4F19F08]);
        uint64_t v20 = 56;
        goto LABEL_37;
      case 5u:
        uint64_t v19 = objc_alloc_init(CKDPDateStatistics);
        objc_storeStrong((id *)(a1 + 184), v19);
        if (!PBReaderPlaceMark() || !CKDPDateStatisticsReadFrom((uint64_t)v19, a2)) {
          goto LABEL_109;
        }
        goto LABEL_96;
      case 7u:
        uint64_t v19 = objc_alloc_init(CKDPRecordField);
        objc_msgSend_addFields_((void *)a1, v22, (uint64_t)v19);
        goto LABEL_44;
      case 8u:
        uint64_t v19 = objc_alloc_init(CKDPShareIdentifier);
        objc_storeStrong((id *)(a1 + 152), v19);
        if (!PBReaderPlaceMark() || !CKDPShareIdentifierReadFrom((uint64_t)v19, a2)) {
          goto LABEL_109;
        }
        goto LABEL_96;
      case 9u:
        uint64_t v19 = (CKDPRecordType *)objc_alloc_init(MEMORY[0x1E4F19F08]);
        uint64_t v20 = 88;
LABEL_37:
        objc_storeStrong((id *)(a1 + v20), v19);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0) {
          goto LABEL_109;
        }
        goto LABEL_96;
      case 0xAu:
        PBReaderReadString();
        uint64_t v19 = (CKDPRecordType *)objc_claimAutoreleasedReturnValue();
        if (v19) {
          objc_msgSend_addConflictLoserEtags_((void *)a1, v23, (uint64_t)v19);
        }
        goto LABEL_97;
      case 0xBu:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 96;
        goto LABEL_72;
      case 0xCu:
        uint64_t v19 = objc_alloc_init(CKDPRecordField);
        objc_msgSend_addPluginFields_((void *)a1, v24, (uint64_t)v19);
LABEL_44:
        if (!PBReaderPlaceMark() || !CKDPRecordFieldReadFrom((id *)&v19->super.super.isa, a2)) {
          goto LABEL_109;
        }
        goto LABEL_96;
      case 0xDu:
        uint64_t v19 = objc_alloc_init(CKDPProtectionInfo);
        uint64_t v25 = 128;
        goto LABEL_60;
      case 0xFu:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 220) |= 1u;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                LODWORD(v28) = 0;
                goto LABEL_103;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v28) = 0;
        }
LABEL_103:
        *(_DWORD *)(a1 + 112) = v28;
        goto LABEL_98;
      case 0x10u:
        uint64_t v19 = objc_alloc_init(CKDPShare);
        objc_storeStrong((id *)(a1 + 160), v19);
        if (!PBReaderPlaceMark() || (CKDPShareReadFrom((uint64_t)v19, a2) & 1) == 0) {
          goto LABEL_109;
        }
        goto LABEL_96;
      case 0x11u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 24;
        goto LABEL_72;
      case 0x12u:
        uint64_t v19 = objc_alloc_init(CKDPProtectionInfo);
        uint64_t v25 = 32;
LABEL_60:
        objc_storeStrong((id *)(a1 + v25), v19);
        if (!PBReaderPlaceMark() || !sub_1C4D5BCB4((uint64_t)v19, a2)) {
          goto LABEL_109;
        }
        goto LABEL_96;
      case 0x15u:
        uint64_t v19 = objc_alloc_init(CKDPRecordChainParent);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !CKDPRecordChainParentReadFrom((uint64_t)v19, a2)) {
          goto LABEL_109;
        }
        goto LABEL_96;
      case 0x16u:
        uint64_t v19 = objc_alloc_init(CKDPRecordStableUrl);
        objc_storeStrong((id *)(a1 + 168), v19);
        if (!PBReaderPlaceMark() || !CKDPRecordStableUrlReadFrom((uint64_t)v19, a2)) {
          goto LABEL_109;
        }
        goto LABEL_96;
      case 0x17u:
        PBReaderReadData();
        uint64_t v19 = (CKDPRecordType *)objc_claimAutoreleasedReturnValue();
        if (v19) {
          objc_msgSend_addTombstonedPublicKeyIDs_((void *)a1, v32, (uint64_t)v19);
        }
        goto LABEL_97;
      case 0x18u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 208;
LABEL_72:
        uint64_t v33 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_98;
      case 0x1Au:
        uint64_t v19 = objc_alloc_init(CKDPStorageExpiration);
        objc_storeStrong((id *)(a1 + 176), v19);
        if (!PBReaderPlaceMark() || (sub_1C50191C4((uint64_t)v19, a2) & 1) == 0) {
          goto LABEL_109;
        }
        goto LABEL_96;
      case 0x1Cu:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        *(unsigned char *)(a1 + 220) |= 2u;
        while (2)
        {
          uint64_t v37 = *v3;
          unint64_t v38 = *(void *)(a2 + v37);
          if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v36 |= (unint64_t)(v39 & 0x7F) << v34;
            if (v39 < 0)
            {
              v34 += 7;
              BOOL v14 = v35++ >= 9;
              if (v14)
              {
                uint64_t v36 = 0;
                goto LABEL_107;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v36 = 0;
        }
LABEL_107:
        *(unsigned char *)(a1 + 216) = v36 != 0;
        goto LABEL_98;
      case 0x1Du:
        uint64_t v19 = (CKDPRecordType *)objc_alloc_init(MEMORY[0x1E4F19EF8]);
        objc_storeStrong((id *)(a1 + 72), v19);
        if (!PBReaderPlaceMark() || (CKDPDateReadFrom() & 1) == 0) {
          goto LABEL_109;
        }
        goto LABEL_96;
      case 0x1Eu:
        uint64_t v19 = objc_alloc_init(CKDPRecordCryptoFeatureSet);
        objc_storeStrong((id *)(a1 + 8), v19);
        if (!PBReaderPlaceMark() || (sub_1C50273B8((uint64_t)v19, a2) & 1) == 0) {
          goto LABEL_109;
        }
        goto LABEL_96;
      case 0x1Fu:
        uint64_t v19 = objc_alloc_init(CKDPProtectionInfoKeysToRemove);
        uint64_t v40 = 136;
        goto LABEL_94;
      case 0x20u:
        uint64_t v19 = objc_alloc_init(CKDPRecordOneTimeStableUrlInfo);
        objc_storeStrong((id *)(a1 + 104), v19);
        if (!PBReaderPlaceMark() || (CKDPRecordOneTimeStableUrlInfoReadFrom(v19, a2) & 1) == 0) {
          goto LABEL_109;
        }
        goto LABEL_96;
      case 0x21u:
        uint64_t v19 = objc_alloc_init(CKDPProtectionInfoKeysToRemove);
        uint64_t v40 = 40;
LABEL_94:
        objc_storeStrong((id *)(a1 + v40), v19);
        if (PBReaderPlaceMark() && sub_1C5040CD4(v19, a2))
        {
LABEL_96:
          PBReaderRecallMark();
LABEL_97:

LABEL_98:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_109:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_98;
    }
  }
}

void sub_1C4E9B754()
{
  id v0 = (void *)qword_1EBBCDE18;
  qword_1EBBCDE18 = (uint64_t)&unk_1F20ABE70;
}

uint64_t sub_1C4E9BC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = (CKDPRecordField *)objc_alloc_init(MEMORY[0x1E4F19F20]);
        objc_storeStrong((id *)(a1 + 32), v17);
        if PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom()) {
          goto LABEL_27;
        }
        goto LABEL_44;
      case 2u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v19;

        goto LABEL_42;
      case 3u:
        uint64_t v17 = objc_alloc_init(CKDPRecordField);
        objc_msgSend_addPluginFields_((void *)a1, v21, (uint64_t)v17);
        if (PBReaderPlaceMark() && CKDPRecordFieldReadFrom((id *)&v17->super.super.isa, a2))
        {
LABEL_27:
          PBReaderRecallMark();
LABEL_37:

LABEL_42:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_44:

        return 0;
      case 4u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 == -1 || v26 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              BOOL v14 = v23++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_41;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
LABEL_41:
        *(unsigned char *)(a1 + 40) = v24 != 0;
        goto LABEL_42;
      case 5u:
        PBReaderReadData();
        uint64_t v17 = (CKDPRecordField *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          objc_msgSend_addPublicKeys_((void *)a1, v28, (uint64_t)v17);
        }
        goto LABEL_37;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_42;
    }
  }
}

void sub_1C4E9CB54(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], a2, a3);
  objc_msgSend_packageGCPeriod(v3, v4, v5);

  uint64_t v6 = NSTimeIntervalToClosestXPCActivityInterval();
  uint64_t v7 = NSTimeIntervalToClosestXPCActivityInterval();
  os_activity_t v8 = _os_activity_create(&dword_1C4CFF000, "packageGarbageCollection", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  CKRegisterRepeatingXPCActivity("com.apple.cloudkit.packageGarbageCollection", v8, v6, v7, 0, &unk_1F20438D0);
}

void sub_1C4E9CC18(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_sharedPurger(CKDPackageDirectoryPurger, a2, a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_purgeAll(v5, v3, v4);
}

void sub_1C4E9CD18(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1C4E9CD2C(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v4 = objc_msgSend_rootDirectories(WeakRetained, v2, v3);
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v18, v24, 16);
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)v19;
    unint64_t v10 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
    uint64_t v11 = (os_log_t *)MEMORY[0x1E4F1A500];
    *(void *)&long long v7 = 138412290;
    long long v17 = v7;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v19 != v9) {
          objc_enumerationMutation(v4);
        }
        uint64_t v13 = *(void *)(*((void *)&v18 + 1) + 8 * v12);
        if (*v10 != -1) {
          dispatch_once(v10, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        BOOL v14 = *v11;
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = v17;
          uint64_t v23 = v13;
          _os_log_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_INFO, "Purging packages in: %@", buf, 0xCu);
        }
        objc_msgSend_purgeRootDirectory_(WeakRetained, v15, v13, v17);
        ++v12;
      }
      while (v8 != v12);
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v16, (uint64_t)&v18, v24, 16);
    }
    while (v8);
  }
}

uint64_t sub_1C4E9CEE0()
{
  return 0;
}

uint64_t sub_1C4E9D3B0()
{
  return 1;
}

void sub_1C4E9D4A0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4E9D4C4(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v9 = 138412290;
    uint64_t v10 = v3;
    _os_log_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_INFO, "Adding %@ to package purger", (uint8_t *)&v9, 0xCu);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  long long v7 = objc_msgSend_rootDirectories(WeakRetained, v5, v6);
  objc_msgSend_addObject_(v7, v8, *(void *)(a1 + 32));
}

void sub_1C4E9D620()
{
  id v0 = [CKDPackageDirectoryPurger alloc];
  uint64_t inited = objc_msgSend_initInternal(v0, v1, v2);
  uint64_t v4 = (void *)qword_1EBBCFD10;
  qword_1EBBCFD10 = inited;

  objc_msgSend_currentProcess(CKDDaemonProcess, v5, v6);
  id v17 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isSystemInstalledBinary(v17, v7, v8))
  {
    uint64_t v11 = objc_msgSend_currentProcess(CKDDaemonProcess, v9, v10);
    uint64_t v14 = objc_msgSend_processType(v11, v12, v13);

    if (v14 != 2)
    {
      uint64_t v16 = qword_1EBBCFD10;
      MEMORY[0x1F4181798](v16, sel_registerXPCActivity, v15);
    }
  }
  else
  {
  }
}

id sub_1C4E9DCB0(uint64_t a1, const char *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = (void *)MEMORY[0x1E4F28BC0];
  id v5 = objc_msgSend_objectRepresentationFromFieldValue_(a4, a2, a3);
  long long v7 = objc_msgSend_expressionForConstantValue_(v4, v6, (uint64_t)v5);

  return v7;
}

id sub_1C4E9DD10(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  v172[1] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  if ((unint64_t)objc_msgSend_count(v5, v7, v8) >= 2)
  {
    uint64_t v11 = (void *)MEMORY[0x1E4F28F60];
    uint64_t v12 = objc_msgSend_objectAtIndexedSubscript_(v5, v9, 0);
    v172[0] = v12;
    uint64_t v14 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v13, (uint64_t)v172, 1);
    objc_msgSend_predicateWithCKDPQueryFilters_translator_(v11, v15, (uint64_t)v14, v6);
    id v16 = (id)objc_claimAutoreleasedReturnValue();

    id v17 = (void *)MEMORY[0x1E4F28F60];
    uint64_t v20 = objc_msgSend_count(v5, v18, v19);
    char v22 = objc_msgSend_subarrayWithRange_(v5, v21, 1, v20 - 1);
    uint64_t v24 = objc_msgSend_predicateWithCKDPQueryFilters_translator_(v17, v23, (uint64_t)v22, v6);

    if (v16)
    {
      if (v24)
      {
        unint64_t v26 = (void *)MEMORY[0x1E4F28BA0];
        v171[0] = v16;
        v171[1] = v24;
        char v27 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v25, (uint64_t)v171, 2);
        uint64_t v29 = objc_msgSend_andPredicateWithSubpredicates_(v26, v28, (uint64_t)v27);

LABEL_10:
        goto LABEL_34;
      }
      id v55 = v16;
    }
    else
    {
      id v55 = v24;
    }
    uint64_t v29 = v55;
    goto LABEL_10;
  }
  unint64_t v30 = objc_msgSend_lastObject(v5, v9, v10);
  switch(objc_msgSend_type(v30, v31, v32))
  {
    case 1u:
    case 2u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
      unsigned int v35 = (void *)MEMORY[0x1E4F28C68];
      uint64_t v36 = objc_msgSend_fieldName(v30, v33, v34);
      char v39 = objc_msgSend_name(v36, v37, v38);
      uint64_t v41 = objc_msgSend_expressionForKeyPath_(v35, v40, (uint64_t)v39);

      uint64_t v42 = (void *)MEMORY[0x1E4F28C68];
      uint64_t v45 = objc_msgSend_fieldValue(v30, v43, v44);
      char v47 = objc_msgSend_expressionWithCKDPRecordFieldValue_translator_(v42, v46, (uint64_t)v45, v6);

      uint64_t v48 = (void *)MEMORY[0x1E4F28B98];
      int v51 = objc_msgSend_type(v30, v49, v50);
      uint64_t v52 = sub_1C4E94074(v51);
      uint64_t v54 = objc_msgSend_predicateWithLeftExpression_rightExpression_modifier_type_options_(v48, v53, (uint64_t)v41, v47, 0, v52, 0);
      goto LABEL_33;
    case 3u:
      uint64_t v56 = (void *)MEMORY[0x1E4F28F60];
      uint64_t v57 = objc_msgSend_fieldName(v30, v33, v34);
      uint64_t v60 = objc_msgSend_name(v57, v58, v59);
      uint64_t v63 = objc_msgSend_fieldValue(v30, v61, v62);
      id v65 = objc_msgSend_objectRepresentationFromFieldValue_(v6, v64, (uint64_t)v63);
      objc_msgSend_predicateWithFormat_(v56, v66, @"%K IN %@", v60, v65);
      goto LABEL_27;
    case 4u:
      uint64_t v67 = (void *)MEMORY[0x1E4F28BA0];
      unsigned int v68 = (void *)MEMORY[0x1E4F28F60];
      uint64_t v69 = objc_msgSend_fieldName(v30, v33, v34);
      uint64_t v72 = objc_msgSend_name(v69, v70, v71);
      uint64_t v75 = objc_msgSend_fieldValue(v30, v73, v74);
      char v77 = objc_msgSend_objectRepresentationFromFieldValue_(v6, v76, (uint64_t)v75);
      objc_msgSend_predicateWithFormat_(v68, v78, @"%K IN %@", v72, v77);
      goto LABEL_31;
    case 9u:
      CFTypeRef v79 = (void *)MEMORY[0x1E4F28F60];
      uint64_t v57 = objc_msgSend_fieldName(v30, v33, v34);
      uint64_t v60 = objc_msgSend_name(v57, v80, v81);
      uint64_t v63 = objc_msgSend_fieldValue(v30, v82, v83);
      id v65 = objc_msgSend_objectRepresentationFromFieldValue_(v6, v84, (uint64_t)v63);
      uint64_t v87 = objc_msgSend_bounds(v30, v85, v86);
      objc_msgSend_radius(v87, v88, v89);
      uint64_t v54 = objc_msgSend_predicateWithFormat_(v79, v90, @"distanceToLocation:fromLocation:(%K, %@) < %f", v60, v65, v91);

      goto LABEL_28;
    case 0xAu:
      id v92 = (void *)MEMORY[0x1E4F28F60];
      uint64_t v57 = objc_msgSend_fieldValue(v30, v33, v34);
      uint64_t v60 = objc_msgSend_objectRepresentationFromFieldValue_(v6, v93, (uint64_t)v57);
      objc_msgSend_predicateWithFormat_(v92, v94, @"ALL tokenize(%@, 'cdl') IN allTokens", v60);
      goto LABEL_17;
    case 0xBu:
      v95 = (void *)MEMORY[0x1E4F28F60];
      uint64_t v57 = objc_msgSend_fieldValue(v30, v33, v34);
      uint64_t v60 = objc_msgSend_objectRepresentationFromFieldValue_(v6, v96, (uint64_t)v57);
      objc_msgSend_predicateWithFormat_(v95, v97, @"ANY tokenize(%@, 'cdl') IN allTokens", v60);
      uint64_t v54 = LABEL_17:;
      goto LABEL_29;
    case 0xCu:
      v98 = (void *)MEMORY[0x1E4F28F60];
      uint64_t v57 = objc_msgSend_fieldName(v30, v33, v34);
      uint64_t v60 = objc_msgSend_name(v57, v99, v100);
      uint64_t v63 = objc_msgSend_fieldValue(v30, v101, v102);
      id v65 = objc_msgSend_objectRepresentationFromFieldValue_(v6, v103, (uint64_t)v63);
      objc_msgSend_predicateWithFormat_(v98, v104, @"%K CONTAINS %@", v60, v65);
      goto LABEL_27;
    case 0xDu:
      uint64_t v67 = (void *)MEMORY[0x1E4F28BA0];
      uint64_t v105 = (void *)MEMORY[0x1E4F28F60];
      uint64_t v69 = objc_msgSend_fieldName(v30, v33, v34);
      uint64_t v72 = objc_msgSend_name(v69, v106, v107);
      uint64_t v75 = objc_msgSend_fieldValue(v30, v108, v109);
      char v77 = objc_msgSend_objectRepresentationFromFieldValue_(v6, v110, (uint64_t)v75);
      objc_msgSend_predicateWithFormat_(v105, v111, @"%K CONTAINS %@", v72, v77);
      goto LABEL_31;
    case 0xEu:
      v112 = (void *)MEMORY[0x1E4F28F60];
      uint64_t v57 = objc_msgSend_fieldValue(v30, v33, v34);
      uint64_t v60 = objc_msgSend_objectRepresentationFromFieldValue_(v6, v113, (uint64_t)v57);
      uint64_t v63 = objc_msgSend_fieldName(v30, v114, v115);
      id v65 = objc_msgSend_name(v63, v116, v117);
      objc_msgSend_predicateWithFormat_(v112, v118, @"ANY %@ IN %K", v60, v65);
      goto LABEL_27;
    case 0xFu:
      uint64_t v67 = (void *)MEMORY[0x1E4F28BA0];
      uint64_t v119 = (void *)MEMORY[0x1E4F28F60];
      uint64_t v69 = objc_msgSend_fieldValue(v30, v33, v34);
      uint64_t v72 = objc_msgSend_objectRepresentationFromFieldValue_(v6, v120, (uint64_t)v69);
      uint64_t v75 = objc_msgSend_fieldName(v30, v121, v122);
      char v77 = objc_msgSend_name(v75, v123, v124);
      objc_msgSend_predicateWithFormat_(v119, v125, @"ANY %@ IN %K", v72, v77);
      goto LABEL_31;
    case 0x10u:
      uint64_t v126 = (void *)MEMORY[0x1E4F28F60];
      uint64_t v57 = objc_msgSend_fieldName(v30, v33, v34);
      uint64_t v60 = objc_msgSend_name(v57, v127, v128);
      uint64_t v63 = objc_msgSend_fieldValue(v30, v129, v130);
      id v65 = objc_msgSend_objectRepresentationFromFieldValue_(v6, v131, (uint64_t)v63);
      objc_msgSend_predicateWithFormat_(v126, v132, @"%K BEGINSWITH %@", v60, v65);
      goto LABEL_27;
    case 0x11u:
      uint64_t v67 = (void *)MEMORY[0x1E4F28BA0];
      v133 = (void *)MEMORY[0x1E4F28F60];
      uint64_t v69 = objc_msgSend_fieldName(v30, v33, v34);
      uint64_t v72 = objc_msgSend_name(v69, v134, v135);
      uint64_t v75 = objc_msgSend_fieldValue(v30, v136, v137);
      char v77 = objc_msgSend_objectRepresentationFromFieldValue_(v6, v138, (uint64_t)v75);
      objc_msgSend_predicateWithFormat_(v133, v139, @"%K BEGINSWITH %@", v72, v77);
      goto LABEL_31;
    case 0x12u:
      uint64_t v140 = (void *)MEMORY[0x1E4F28F60];
      uint64_t v57 = objc_msgSend_fieldName(v30, v33, v34);
      uint64_t v60 = objc_msgSend_name(v57, v141, v142);
      uint64_t v63 = objc_msgSend_fieldValue(v30, v143, v144);
      id v65 = objc_msgSend_objectRepresentationFromFieldValue_(v6, v145, (uint64_t)v63);
      objc_msgSend_predicateWithFormat_(v140, v146, @"ANY %K BEGINSWITH %@", v60, v65);
      goto LABEL_27;
    case 0x13u:
      uint64_t v67 = (void *)MEMORY[0x1E4F28BA0];
      uint64_t v147 = (void *)MEMORY[0x1E4F28F60];
      uint64_t v69 = objc_msgSend_fieldName(v30, v33, v34);
      uint64_t v72 = objc_msgSend_name(v69, v148, v149);
      uint64_t v75 = objc_msgSend_fieldValue(v30, v150, v151);
      char v77 = objc_msgSend_objectRepresentationFromFieldValue_(v6, v152, (uint64_t)v75);
      objc_msgSend_predicateWithFormat_(v147, v153, @"ANY %K BEGINSWITH %@", v72, v77);
      goto LABEL_31;
    case 0x14u:
      uint64_t v154 = (void *)MEMORY[0x1E4F28F60];
      uint64_t v57 = objc_msgSend_fieldValue(v30, v33, v34);
      uint64_t v60 = objc_msgSend_objectRepresentationFromFieldValue_(v6, v155, (uint64_t)v57);
      uint64_t v63 = objc_msgSend_fieldName(v30, v156, v157);
      id v65 = objc_msgSend_name(v63, v158, v159);
      objc_msgSend_predicateWithFormat_(v154, v160, @"ALL %@ IN %K", v60, v65);
      uint64_t v54 = LABEL_27:;
LABEL_28:

LABEL_29:
      break;
    case 0x15u:
      uint64_t v67 = (void *)MEMORY[0x1E4F28BA0];
      v161 = (void *)MEMORY[0x1E4F28F60];
      uint64_t v69 = objc_msgSend_fieldValue(v30, v33, v34);
      uint64_t v72 = objc_msgSend_objectRepresentationFromFieldValue_(v6, v162, (uint64_t)v69);
      uint64_t v75 = objc_msgSend_fieldName(v30, v163, v164);
      char v77 = objc_msgSend_name(v75, v165, v166);
      objc_msgSend_predicateWithFormat_(v161, v167, @"ALL %@ IN %K", v72, v77);
      uint64_t v168 = LABEL_31:;
      uint64_t v54 = objc_msgSend_notPredicateWithSubpredicate_(v67, v169, (uint64_t)v168);

      break;
    default:
      uint64_t v54 = 0;
      break;
  }
  uint64_t v41 = 0;
  char v47 = 0;
LABEL_33:
  id v16 = v54;

  uint64_t v29 = v16;
LABEL_34:

  return v29;
}

id sub_1C4E9E5D8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  if ((unint64_t)objc_msgSend_count(v5, v7, v8) >= 2)
  {
    uint64_t v10 = objc_msgSend_sortedArrayUsingComparator_(v5, v9, (uint64_t)&unk_1F2043950);

    id v5 = (id)v10;
  }
  uint64_t v11 = objc_msgSend_predicateWithSortedCKDPQueryFilters_translator_(MEMORY[0x1E4F28F60], v9, (uint64_t)v5, v6);

  return v11;
}

uint64_t sub_1C4E9E678(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSClassFromString(&cfstr_Nstruepredicat.isa);
  if (objc_opt_isKindOfClass()) {
    return MEMORY[0x1E4F1CBF0];
  }
  if (a4)
  {
    id v6 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v7 = *MEMORY[0x1E4F19DD8];
    uint64_t v8 = (objc_class *)objc_opt_class();
    int v9 = NSStringFromClass(v8);
    objc_msgSend_errorWithDomain_code_format_(v6, v10, v7, 1017, @"Unexpected predicate type: %@", v9);
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  return 0;
}

id sub_1C4E9E730(double a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v9 = a6;
  id v10 = a5;
  id v11 = a4;
  uint64_t v12 = objc_opt_new();
  uint64_t v13 = objc_opt_new();
  objc_msgSend_setFieldName_(v12, v14, (uint64_t)v13);

  id v17 = objc_msgSend_fieldName(v12, v15, v16);
  objc_msgSend_setName_(v17, v18, (uint64_t)v11);

  objc_msgSend_setType_(v12, v19, 9);
  uint64_t v20 = objc_opt_new();
  objc_msgSend_setBounds_(v12, v21, (uint64_t)v20);

  uint64_t v24 = objc_msgSend_bounds(v12, v22, v23);
  objc_msgSend_setRadius_(v24, v25, v26, a1);

  objc_msgSend_coordinate(v10, v27, v28);
  double v30 = v29;
  objc_msgSend_coordinate(v10, v31, v32);
  double v34 = v33;

  uint64_t v37 = objc_msgSend_locationFieldValueWithLatitude_longitude_(v9, v35, v36, v30, v34);

  objc_msgSend_setFieldValue_(v12, v38, (uint64_t)v37);
  return v12;
}

id sub_1C4E9E880(void *a1, uint64_t a2, void *a3, void *a4)
{
  v89[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v9 = objc_msgSend_leftExpression(a1, v7, v8);
  uint64_t v12 = objc_msgSend_rightExpression(a1, v10, v11);
  if (objc_msgSend_comparisonPredicateModifier(a1, v13, v14)) {
    goto LABEL_2;
  }
  if (objc_msgSend_expressionType(v9, v15, v16) == 4)
  {
    uint64_t v24 = objc_msgSend_function(v9, v22, v23);
    int isEqualToString = objc_msgSend_isEqualToString_(v24, v25, @"distanceToLocation:fromLocation:");

    if (isEqualToString)
    {
      if (!objc_msgSend_predicateOperatorType(a1, v22, v23) || objc_msgSend_predicateOperatorType(a1, v27, v28) == 1)
      {
        uint64_t v31 = objc_msgSend_expressionType(v12, v27, v28);
        uint64_t v32 = v12;
        double v33 = v9;
        if (v31)
        {
          if (a4)
          {
            objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v29, *MEMORY[0x1E4F19DD8], 1009, @"Expected search radius on right hand side of operator: %@", a1);
LABEL_23:
            id v43 = (id)objc_claimAutoreleasedReturnValue();
            id v17 = 0;
LABEL_24:
            long long v18 = 0;
            uint64_t v19 = 0;
            uint64_t v20 = 0;
            *a4 = v43;
            goto LABEL_4;
          }
          goto LABEL_2;
        }
        goto LABEL_25;
      }
LABEL_21:
      if (a4)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v27, *MEMORY[0x1E4F19DD8], 1009, @"Searching for locations outside of a specified circular area is not supported: %@", a1);
        goto LABEL_23;
      }
      goto LABEL_2;
    }
  }
  if (objc_msgSend_expressionType(v12, v22, v23) != 4) {
    goto LABEL_2;
  }
  uint64_t v36 = objc_msgSend_function(v12, v34, v35);
  int v38 = objc_msgSend_isEqualToString_(v36, v37, @"distanceToLocation:fromLocation:");

  if (!v38) {
    goto LABEL_2;
  }
  if (objc_msgSend_predicateOperatorType(a1, v39, v40) != 2 && objc_msgSend_predicateOperatorType(a1, v27, v41) != 3) {
    goto LABEL_21;
  }
  uint64_t v42 = objc_msgSend_expressionType(v9, v27, v41);
  uint64_t v32 = v9;
  double v33 = v12;
  if (v42)
  {
    if (a4)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v29, *MEMORY[0x1E4F19DD8], 1009, @"Expected search radius on left hand side of operator: %@", a1);
      goto LABEL_23;
    }
LABEL_2:
    id v17 = 0;
LABEL_3:
    long long v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    goto LABEL_4;
  }
LABEL_25:
  uint64_t v44 = objc_msgSend_constantValue(v32, v29, v30);
  objc_msgSend_doubleValue(v44, v45, v46);
  double v48 = v47;

  id v17 = v33;
  int v51 = objc_msgSend_arguments(v17, v49, v50);
  uint64_t v54 = objc_msgSend_count(v51, v52, v53);

  if (v54 != 2)
  {
    if (!a4) {
      goto LABEL_3;
    }
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v55, *MEMORY[0x1E4F19DD8], 1009, @"Expected expected 2 arguments for function distanceToLocation:fromLocation: %@", a1);
    id v43 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_24;
  }
  uint64_t v57 = objc_msgSend_arguments(v17, v55, v56);
  uint64_t v59 = objc_msgSend_objectAtIndexedSubscript_(v57, v58, 0);

  uint64_t v62 = objc_msgSend_arguments(v17, v60, v61);
  uint64_t v64 = objc_msgSend_objectAtIndexedSubscript_(v62, v63, 1);

  uint64_t v69 = objc_msgSend_expressionType(v59, v65, v66);
  uint64_t v70 = v59;
  if (v69 == 3 || (v71 = objc_msgSend_expressionType(v64, v67, v68), uint64_t v70 = v64, v71 == 3))
  {
    uint64_t v19 = objc_msgSend_keyPath(v70, v67, v68);
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v74 = objc_msgSend_expressionType(v59, v67, v68);
  uint64_t v75 = v59;
  if (v74)
  {
    uint64_t v76 = objc_msgSend_expressionType(v64, v72, v73);
    uint64_t v75 = v64;
    if (v76)
    {
      if (!v19)
      {
        long long v18 = 0;
        goto LABEL_42;
      }
LABEL_40:
      if (!a4)
      {
        long long v18 = 0;
        goto LABEL_49;
      }
      long long v18 = 0;
      uint64_t v81 = @"a nil location";
      char v88 = 1;
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v72, *MEMORY[0x1E4F19DD8], 1009, @"Expected CLLocation argument for distanceToLocation:fromLocation: but got %@", @"a nil location");
LABEL_47:
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      if ((v88 & 1) == 0) {

      }
      goto LABEL_49;
    }
  }
  uint64_t v77 = objc_msgSend_constantValue(v75, v72, v73);
  long long v18 = (void *)v77;
  if (!v19)
  {
LABEL_42:
    if (a4)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v72, *MEMORY[0x1E4F19DD8], 1009, @"Expected NSKeyPathExpressionType argument for distanceToLocation:fromLocation:");
      uint64_t v20 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_50;
    }
LABEL_49:
    uint64_t v20 = 0;
    goto LABEL_50;
  }
  if (!v77) {
    goto LABEL_40;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (!a4) {
      goto LABEL_49;
    }
    uint64_t v87 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v82 = *MEMORY[0x1E4F19DD8];
    uint64_t v83 = (objc_class *)objc_opt_class();
    uint64_t v84 = NSStringFromClass(v83);
    uint64_t v85 = v82;
    uint64_t v81 = (__CFString *)v84;
    char v88 = 0;
    objc_msgSend_errorWithDomain_code_format_(v87, v86, v85, 1009, @"Expected CLLocation argument for distanceToLocation:fromLocation: but got %@", v84);
    goto LABEL_47;
  }
  CFTypeRef v79 = objc_msgSend__nearFilterWithKey_location_radius_translator_(a1, v78, (uint64_t)v19, v18, v6, v48);
  v89[0] = v79;
  uint64_t v20 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v80, (uint64_t)v89, 1);

LABEL_50:
LABEL_4:

  return v20;
}

id sub_1C4E9ED84(void *a1, uint64_t a2, void *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v7 = objc_msgSend_leftExpression(a1, v5, v6);
  id v10 = objc_msgSend_rightExpression(a1, v8, v9);
  if (objc_msgSend_predicateOperatorType(a1, v11, v12) != 10
    || objc_msgSend_comparisonPredicateModifier(a1, v13, v14)
    || objc_msgSend_expressionType(v7, v13, v14)
    || objc_msgSend_expressionType(v10, v13, v14) != 3)
  {
    if (objc_msgSend_predicateOperatorType(a1, v13, v14) == 99
      && !objc_msgSend_comparisonPredicateModifier(a1, v29, v30)
      && objc_msgSend_expressionType(v7, v29, v30) == 3
      && !objc_msgSend_expressionType(v10, v29, v30))
    {
      uint64_t v15 = objc_opt_new();
      uint64_t v54 = objc_msgSend_CKExpressionValue(v7, v52, v53);
      id v55 = sub_1C4E93EAC(v54);
      objc_msgSend_setFieldName_(v15, v56, (uint64_t)v55);

      objc_msgSend_setType_(v15, v57, 12);
      uint64_t v60 = objc_msgSend_CKExpressionValue(v10, v58, v59);
      uint64_t v62 = objc_msgSend_fieldValueFromObject_(v4, v61, (uint64_t)v60);
      objc_msgSend_setFieldValue_(v15, v63, (uint64_t)v62);

      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v64, (uint64_t)&v66, 1, v65, v15, v67, v68);
    }
    else
    {
      if (objc_msgSend_predicateOperatorType(a1, v29, v30) != 4
        || objc_msgSend_comparisonPredicateModifier(a1, v31, v32) != 2
        || objc_msgSend_expressionType(v7, v33, v34) != 3
        || objc_msgSend_expressionType(v10, v35, v36))
      {
        uint64_t v37 = 0;
        goto LABEL_15;
      }
      uint64_t v15 = objc_opt_new();
      uint64_t v41 = objc_msgSend_CKExpressionValue(v7, v39, v40);
      uint64_t v42 = sub_1C4E93EAC(v41);
      objc_msgSend_setFieldName_(v15, v43, (uint64_t)v42);

      objc_msgSend_setType_(v15, v44, 12);
      double v47 = objc_msgSend_CKExpressionValue(v10, v45, v46);
      uint64_t v49 = objc_msgSend_fieldValueFromObject_(v4, v48, (uint64_t)v47);
      objc_msgSend_setFieldValue_(v15, v50, (uint64_t)v49);

      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v51, (uint64_t)&v65, 1, v15, v66, v67, v68);
    }
  }
  else
  {
    uint64_t v15 = objc_opt_new();
    long long v18 = objc_msgSend_CKExpressionValue(v10, v16, v17);
    uint64_t v19 = sub_1C4E93EAC(v18);
    objc_msgSend_setFieldName_(v15, v20, (uint64_t)v19);

    objc_msgSend_setType_(v15, v21, 12);
    uint64_t v24 = objc_msgSend_CKExpressionValue(v7, v22, v23);
    uint64_t v26 = objc_msgSend_fieldValueFromObject_(v4, v25, (uint64_t)v24);
    objc_msgSend_setFieldValue_(v15, v27, (uint64_t)v26);

    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v28, (uint64_t)&v67, 1, v65, v66, v15, v68);
  uint64_t v37 = };

LABEL_15:
  return v37;
}

id sub_1C4E9F0AC(void *a1, uint64_t a2, void *a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v7 = objc_msgSend_leftExpression(a1, v5, v6);
  id v10 = objc_msgSend_rightExpression(a1, v8, v9);
  uint64_t v13 = objc_msgSend_expressionType(v7, v11, v12);
  uint64_t v16 = objc_msgSend_expressionType(v10, v14, v15);
  if (objc_msgSend_predicateOperatorType(a1, v17, v18) == 10
    && !objc_msgSend_comparisonPredicateModifier(a1, v19, v20)
    && v13 == 3
    && (v16 == 14 || !v16))
  {
    long long v21 = objc_opt_new();
    uint64_t v24 = objc_msgSend_CKExpressionValue(v7, v22, v23);
    uint64_t v25 = sub_1C4E93EAC(v24);
    objc_msgSend_setFieldName_(v21, v26, (uint64_t)v25);

    objc_msgSend_setType_(v21, v27, 3);
    uint64_t v30 = objc_msgSend_CKExpressionValue(v10, v28, v29);
    uint64_t v31 = sub_1C4E9F410(v30);
    double v33 = objc_msgSend_fieldValueFromObject_(v4, v32, (uint64_t)v31);
    objc_msgSend_setFieldValue_(v21, v34, (uint64_t)v33);

    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v35, (uint64_t)&v74, 1, v72, v73, v21, v75);
  }
  else if (objc_msgSend_predicateOperatorType(a1, v19, v20) == 4 {
         && objc_msgSend_comparisonPredicateModifier(a1, v36, v37) == 2
  }
         && (v13 != 14 ? (BOOL v38 = v13 == 0) : (BOOL v38 = 1), v38 && v16 == 3))
  {
    long long v21 = objc_opt_new();
    uint64_t v41 = objc_msgSend_CKExpressionValue(v10, v39, v40);
    uint64_t v42 = sub_1C4E93EAC(v41);
    objc_msgSend_setFieldName_(v21, v43, (uint64_t)v42);

    objc_msgSend_setType_(v21, v44, 3);
    double v47 = objc_msgSend_CKExpressionValue(v7, v45, v46);
    double v48 = sub_1C4E9F410(v47);
    uint64_t v50 = objc_msgSend_fieldValueFromObject_(v4, v49, (uint64_t)v48);
    objc_msgSend_setFieldValue_(v21, v51, (uint64_t)v50);

    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v52, (uint64_t)&v73, 1, v72, v21, v74, v75);
  }
  else
  {
    if (objc_msgSend_predicateOperatorType(a1, v36, v37) != 99
      || objc_msgSend_comparisonPredicateModifier(a1, v53, v54))
    {
      id v55 = 0;
      goto LABEL_27;
    }
    id v55 = 0;
    BOOL v56 = v13 == 14 || v13 == 0;
    if (!v56 || v16 != 3) {
      goto LABEL_27;
    }
    long long v21 = objc_opt_new();
    uint64_t v59 = objc_msgSend_CKExpressionValue(v10, v57, v58);
    uint64_t v60 = sub_1C4E93EAC(v59);
    objc_msgSend_setFieldName_(v21, v61, (uint64_t)v60);

    objc_msgSend_setType_(v21, v62, 3);
    uint64_t v65 = objc_msgSend_CKExpressionValue(v7, v63, v64);
    uint64_t v66 = sub_1C4E9F410(v65);
    uint64_t v68 = objc_msgSend_fieldValueFromObject_(v4, v67, (uint64_t)v66);
    objc_msgSend_setFieldValue_(v21, v69, (uint64_t)v68);

    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v70, (uint64_t)&v72, 1, v21, v73, v74, v75);
  id v55 = };

LABEL_27:
  return v55;
}

id sub_1C4E9F410(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_msgSend_allValues(v1, v2, v3);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      objc_msgSend_allObjects(v1, v5, v6);
      id v4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v4 = v1;
    }
  }
  uint64_t v7 = v4;

  return v7;
}

id sub_1C4E9F4AC(void *a1, uint64_t a2, void *a3)
{
  v56[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v7 = objc_msgSend_leftExpression(a1, v5, v6);
  id v10 = objc_msgSend_rightExpression(a1, v8, v9);
  uint64_t v13 = objc_msgSend_expressionType(v7, v11, v12);
  uint64_t v16 = objc_msgSend_expressionType(v10, v14, v15);
  if (objc_msgSend_predicateOperatorType(a1, v17, v18) == 10
    && objc_msgSend_comparisonPredicateModifier(a1, v19, v20) == 2
    && v13 == 3
    && (v16 == 14 || !v16))
  {
    long long v21 = objc_opt_new();
    uint64_t v24 = objc_msgSend_CKExpressionValue(v7, v22, v23);
    uint64_t v25 = sub_1C4E93EAC(v24);
    objc_msgSend_setFieldName_(v21, v26, (uint64_t)v25);

    objc_msgSend_setType_(v21, v27, 14);
    uint64_t v30 = objc_msgSend_CKExpressionValue(v10, v28, v29);
    uint64_t v31 = sub_1C4E9F410(v30);
    double v33 = objc_msgSend_fieldValueFromObject_(v4, v32, (uint64_t)v31);
    objc_msgSend_setFieldValue_(v21, v34, (uint64_t)v33);

    v56[0] = v21;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v35, (uint64_t)v56, 1);
    BOOL v38 = LABEL_16:;

    goto LABEL_18;
  }
  if (objc_msgSend_predicateOperatorType(a1, v19, v20) == 10
    && objc_msgSend_comparisonPredicateModifier(a1, v36, v37) == 2)
  {
    BOOL v38 = 0;
    BOOL v39 = v13 == 14 || v13 == 0;
    if (!v39 || v16 != 3) {
      goto LABEL_18;
    }
    long long v21 = objc_opt_new();
    uint64_t v42 = objc_msgSend_CKExpressionValue(v10, v40, v41);
    id v43 = sub_1C4E93EAC(v42);
    objc_msgSend_setFieldName_(v21, v44, (uint64_t)v43);

    objc_msgSend_setType_(v21, v45, 14);
    double v48 = objc_msgSend_CKExpressionValue(v7, v46, v47);
    uint64_t v49 = sub_1C4E9F410(v48);
    int v51 = objc_msgSend_fieldValueFromObject_(v4, v50, (uint64_t)v49);
    objc_msgSend_setFieldValue_(v21, v52, (uint64_t)v51);

    id v55 = v21;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v53, (uint64_t)&v55, 1);
    goto LABEL_16;
  }
  BOOL v38 = 0;
LABEL_18:

  return v38;
}

id sub_1C4E9F744(void *a1, uint64_t a2, void *a3)
{
  v39[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v7 = objc_msgSend_leftExpression(a1, v5, v6);
  id v10 = objc_msgSend_rightExpression(a1, v8, v9);
  uint64_t v13 = objc_msgSend_expressionType(v7, v11, v12);
  uint64_t v16 = objc_msgSend_expressionType(v10, v14, v15);
  if (objc_msgSend_predicateOperatorType(a1, v17, v18) == 10
    && objc_msgSend_comparisonPredicateModifier(a1, v19, v20) == 1)
  {
    long long v21 = 0;
    BOOL v22 = v13 == 14 || v13 == 0;
    if (v22 && v16 == 3)
    {
      uint64_t v23 = objc_opt_new();
      uint64_t v26 = objc_msgSend_CKExpressionValue(v10, v24, v25);
      char v27 = sub_1C4E93EAC(v26);
      objc_msgSend_setFieldName_(v23, v28, (uint64_t)v27);

      objc_msgSend_setType_(v23, v29, 20);
      uint64_t v32 = objc_msgSend_CKExpressionValue(v7, v30, v31);
      double v33 = sub_1C4E9F410(v32);
      uint64_t v35 = objc_msgSend_fieldValueFromObject_(v4, v34, (uint64_t)v33);
      objc_msgSend_setFieldValue_(v23, v36, (uint64_t)v35);

      v39[0] = v23;
      long long v21 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v37, (uint64_t)v39, 1);
    }
  }
  else
  {
    long long v21 = 0;
  }

  return v21;
}

id sub_1C4E9F908(void *a1, uint64_t a2, void *a3, void *a4)
{
  v40[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v9 = objc_msgSend_leftExpression(a1, v7, v8);
  uint64_t v12 = objc_msgSend_rightExpression(a1, v10, v11);
  if (objc_msgSend_predicateOperatorType(a1, v13, v14) != 8
    || objc_msgSend_expressionType(v9, v15, v16) != 3
    || objc_msgSend_expressionType(v12, v17, v18))
  {
    long long v21 = 0;
    goto LABEL_5;
  }
  uint64_t v23 = objc_msgSend_CKExpressionValue(v12, v19, v20);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      if (a4)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v24, *MEMORY[0x1E4F19DD8], 1009, @"Expected NSString or NSData on right hand side: %@", a1);
        long long v21 = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        long long v21 = 0;
      }
      goto LABEL_19;
    }
  }
  uint64_t v25 = objc_opt_new();
  uint64_t v28 = objc_msgSend_CKExpressionValue(v9, v26, v27);
  uint64_t v29 = sub_1C4E93EAC(v28);
  objc_msgSend_setFieldName_(v25, v30, (uint64_t)v29);

  uint64_t v32 = objc_msgSend_fieldValueFromObject_(v6, v31, (uint64_t)v23);
  objc_msgSend_setFieldValue_(v25, v33, (uint64_t)v32);

  if (objc_msgSend_comparisonPredicateModifier(a1, v34, v35))
  {
    if (objc_msgSend_comparisonPredicateModifier(a1, v36, v37) != 2)
    {
      long long v21 = 0;
      goto LABEL_18;
    }
    objc_msgSend_setType_(v25, v38, 18);
  }
  else
  {
    objc_msgSend_setType_(v25, v36, 16);
  }
  v40[0] = v25;
  long long v21 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v39, (uint64_t)v40, 1);
LABEL_18:

LABEL_19:
LABEL_5:

  return v21;
}

id sub_1C4E9FB48(void *a1, uint64_t a2, void *a3, void *a4)
{
  v65[2] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v9 = objc_msgSend_leftExpression(a1, v7, v8);
  uint64_t v12 = objc_msgSend_rightExpression(a1, v10, v11);
  if (objc_msgSend_predicateOperatorType(a1, v13, v14) == 100
    && !objc_msgSend_comparisonPredicateModifier(a1, v15, v16)
    && objc_msgSend_expressionType(v9, v17, v18) == 3
    && objc_msgSend_expressionType(v12, v19, v20) == 14)
  {
    uint64_t v23 = objc_msgSend_constantValue(v12, v21, v22);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v23, v24, v25) == 2)
    {
      uint64_t v27 = objc_msgSend_objectAtIndexedSubscript_(v23, v26, 0);
      uint64_t v30 = objc_msgSend_CKExpressionValue(v27, v28, v29);

      uint64_t v32 = objc_msgSend_objectAtIndexedSubscript_(v23, v31, 1);
      uint64_t v35 = objc_msgSend_CKExpressionValue(v32, v33, v34);

      objc_opt_class();
      if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass()))
      {
        uint64_t v37 = objc_opt_new();
        uint64_t v64 = objc_opt_new();
        uint64_t v40 = objc_msgSend_CKExpressionValue(v9, v38, v39);
        sub_1C4E93EAC(v40);
        v42 = uint64_t v41 = (uint64_t)v30;
        objc_msgSend_setFieldName_(v37, v43, (uint64_t)v42);

        uint64_t v30 = (void *)v41;
        uint64_t v45 = objc_msgSend_fieldValueFromObject_(v6, v44, v41);
        objc_msgSend_setFieldValue_(v37, v46, (uint64_t)v45);

        objc_msgSend_setType_(v37, v47, 8);
        uint64_t v50 = objc_msgSend_fieldName(v37, v48, v49);
        objc_msgSend_setFieldName_(v64, v51, (uint64_t)v50);

        uint64_t v53 = objc_msgSend_fieldValueFromObject_(v6, v52, (uint64_t)v35);
        objc_msgSend_setFieldValue_(v64, v54, (uint64_t)v53);

        objc_msgSend_setType_(v64, v55, 6);
        v65[0] = v37;
        v65[1] = v64;
        uint64_t v57 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v56, (uint64_t)v65, 2);
      }
      else if (a4)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v36, *MEMORY[0x1E4F19DD8], 1009, @"Expected array with two number arguments on right hand side: %@", a1);
        uint64_t v57 = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        uint64_t v57 = 0;
      }
    }
    else
    {
      if (a4)
      {
        uint64_t v59 = (void *)MEMORY[0x1E4F1A280];
        uint64_t v60 = *MEMORY[0x1E4F19DD8];
        uint64_t v61 = (objc_class *)objc_opt_class();
        uint64_t v62 = NSStringFromClass(v61);
        objc_msgSend_errorWithDomain_code_format_(v59, v63, v60, 1009, @"Expected array with two number arguments on right hand side, but got %@: %@", v62, a1);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v57 = 0;
    }
  }
  else
  {
    uint64_t v57 = 0;
  }

  return v57;
}

uint64_t sub_1C4E9FEB4(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (objc_msgSend_rangeOfString_(v3, v4, @"n") == 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend_rangeOfString_(v3, v5, @"N") == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v8 = objc_msgSend_rangeOfString_(v3, v6, @"c") != 0x7FFFFFFFFFFFFFFFLL
      || objc_msgSend_rangeOfString_(v3, v7, @"C") != 0x7FFFFFFFFFFFFFFFLL;
    if (objc_msgSend_rangeOfString_(v3, v7, @"d") != 0x7FFFFFFFFFFFFFFFLL
      || objc_msgSend_rangeOfString_(v3, v10, @"D") != 0x7FFFFFFFFFFFFFFFLL)
    {
      v8 |= 2uLL;
    }
    if (objc_msgSend_rangeOfString_(v3, v10, @"l") != 0x7FFFFFFFFFFFFFFFLL
      || objc_msgSend_rangeOfString_(v3, v11, @"L") != 0x7FFFFFFFFFFFFFFFLL)
    {
      v8 |= 8uLL;
    }
  }
  else
  {
    uint64_t v8 = 4;
  }

  return v8;
}

id sub_1C4E9FFC8(void *a1, uint64_t a2, void *a3)
{
  v30[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v7 = objc_msgSend_leftExpression(a1, v5, v6);
  id v10 = objc_msgSend_rightExpression(a1, v8, v9);
  if (objc_msgSend_predicateOperatorType(a1, v11, v12) == 99
    && objc_msgSend_expressionType(v7, v13, v14) == 1
    && !objc_msgSend_expressionType(v10, v15, v16))
  {
    uint64_t v19 = objc_opt_new();
    if (objc_msgSend_comparisonPredicateModifier(a1, v20, v21) == 1) {
      objc_msgSend_setType_(v19, v22, 10);
    }
    else {
      objc_msgSend_setType_(v19, v22, 11);
    }
    uint64_t v25 = objc_msgSend_constantValue(v10, v23, v24);
    uint64_t v27 = objc_msgSend_fieldValueFromObject_(v4, v26, (uint64_t)v25);
    objc_msgSend_setFieldValue_(v19, v28, (uint64_t)v27);

    v30[0] = v19;
    uint64_t v17 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v29, (uint64_t)v30, 1);
  }
  else
  {
    uint64_t v17 = 0;
  }

  return v17;
}

id sub_1C4EA0130(void *a1, uint64_t a2, void *a3, void *a4)
{
  v97[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  objc_msgSend_leftExpression(a1, v7, v8);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = objc_msgSend_rightExpression(a1, v10, v11);
  if (objc_msgSend_expressionType(v9, v13, v14) != 3
    || (objc_msgSend_keyPath(v9, v15, v16),
        uint64_t v17 = objc_claimAutoreleasedReturnValue(),
        char v19 = objc_msgSend_isEqualToString_(v17, v18, @"allTokens"),
        v17,
        uint64_t v20 = v9,
        uint64_t v21 = v12,
        (v19 & 1) == 0))
  {
    if (objc_msgSend_expressionType(v12, v15, v16) != 3
      || (objc_msgSend_keyPath(v12, v22, v23),
          uint64_t v24 = objc_claimAutoreleasedReturnValue(),
          int isEqualToString = objc_msgSend_isEqualToString_(v24, v25, @"allTokens"),
          v24,
          uint64_t v20 = v12,
          uint64_t v21 = v9,
          !isEqualToString))
    {
      uint64_t v61 = 0;
      goto LABEL_35;
    }
  }
  id v27 = v20;
  id v28 = v21;
  uint64_t v29 = objc_opt_new();
  uint64_t v34 = objc_msgSend_expressionType(v28, v30, v31);
  if (!v34)
  {
    id v94 = v29;
    uint64_t v57 = objc_msgSend_constantValue(v28, v32, v33);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      if (a4)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v62, *MEMORY[0x1E4F19DD8], 1009, @"Required string or tokenize() arguments when comparing to special key-path allTokens: %@", a1);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
      }

      uint64_t v61 = 0;
      uint64_t v29 = v94;
      goto LABEL_34;
    }
    uint64_t v59 = objc_msgSend_constantValue(v28, v62, v63);
    v95 = v6;
    objc_msgSend_fieldValueFromObject_(v6, v64, (uint64_t)v59);
    v65 = uint64_t v35 = a4;
    objc_msgSend_setFieldValue_(v94, v66, (uint64_t)v65);

    goto LABEL_17;
  }
  v95 = v6;
  uint64_t v35 = a4;
  if (objc_msgSend_expressionType(v28, v32, v33) != 4
    || (objc_msgSend_function(v28, v36, v37),
        BOOL v38 = objc_claimAutoreleasedReturnValue(),
        int v40 = objc_msgSend_isEqualToString_(v38, v39, @"tokenize:using:"),
        v38,
        !v40))
  {
    if (v35)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v36, *MEMORY[0x1E4F19DD8], 1009, @"Required string or tokenize() arguments when searching special key-path allTokens: %@", a1);
LABEL_14:
      uint64_t v61 = 0;
      *uint64_t v35 = (id)objc_claimAutoreleasedReturnValue();
LABEL_33:
      id v6 = v95;
      goto LABEL_34;
    }
LABEL_32:
    uint64_t v61 = 0;
    goto LABEL_33;
  }
  id v93 = v27;
  id v94 = v29;
  uint64_t v42 = objc_msgSend_arguments(v28, v36, v41);
  uint64_t v44 = objc_msgSend_objectAtIndexedSubscript_(v42, v43, 1);
  uint64_t v47 = objc_msgSend_constantValue(v44, v45, v46);
  char v49 = objc_msgSend__comparisonOptionForString_(a1, v48, (uint64_t)v47);

  if ((v49 & 0xF) != 0xBLL)
  {
    id v27 = v93;
    uint64_t v29 = v94;
    if (v35)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v50, *MEMORY[0x1E4F19DD8], 1009, @"Required NSCaseInsensitivePredicateOption, NSDiacriticInsensitivePredicateOption, and NSLocaleSensitivePredicateOption tokenization options on tokenize() function: %@", a1);
      goto LABEL_14;
    }
    goto LABEL_32;
  }
  uint64_t v52 = objc_msgSend_arguments(v28, v50, v51);
  uint64_t v54 = objc_msgSend_objectAtIndexedSubscript_(v52, v53, 0);
  uint64_t v57 = objc_msgSend_constantValue(v54, v55, v56);

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (v35)
    {
      uint64_t v83 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v84 = *MEMORY[0x1E4F19DD8];
      uint64_t v85 = (objc_class *)objc_opt_class();
      uint64_t v86 = NSStringFromClass(v85);
      objc_msgSend_errorWithDomain_code_format_(v83, v87, v84, 1009, @"Required string argument when using tokenize(), but got %@: %@", v86, a1);
      *uint64_t v35 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v61 = 0;
    id v27 = v93;
    uint64_t v29 = v94;
    goto LABEL_33;
  }
  uint64_t v59 = objc_msgSend_fieldValueFromObject_(v95, v58, (uint64_t)v57);
  objc_msgSend_setFieldValue_(v94, v60, (uint64_t)v59);
  id v27 = v93;
LABEL_17:
  uint64_t v67 = v35;

  if (objc_msgSend_comparisonPredicateModifier(a1, v68, v69) == 1 && v27 == v9)
  {
    uint64_t v29 = v94;
    id v6 = v95;
    if (v67)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v70, *MEMORY[0x1E4F19DD8], 1009, @"Enumerating special key-path allTokens is not allowed: %@", a1);
LABEL_61:
      uint64_t v61 = 0;
      *uint64_t v67 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_34;
    }
    goto LABEL_62;
  }
  uint64_t v29 = v94;
  id v6 = v95;
  if (objc_msgSend_predicateOperatorType(a1, v70, v71) == 1000)
  {
    if (!v34
      && ((objc_msgSend_options(a1, v72, v73) & 4) != 0
       || (objc_msgSend_options(a1, v72, v88) & 1) == 0
       || (objc_msgSend_options(a1, v72, v89) & 2) == 0
       || (objc_msgSend_options(a1, v72, v90) & 8) == 0))
    {
      if (v67)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v72, *MEMORY[0x1E4F19DD8], 1009, @"Required NSCaseInsensitivePredicateOption, NSDiacriticInsensitivePredicateOption, and NSLocaleSensitivePredicateOption comparison predicate options: %@", a1);
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    if (objc_msgSend_comparisonPredicateModifier(a1, v72, v73) == 1) {
      objc_msgSend_setType_(v94, v74, 10);
    }
    else {
      objc_msgSend_setType_(v94, v74, 11);
    }
    v97[0] = v94;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v75, (uint64_t)v97, 1);
  }
  else
  {
    if (objc_msgSend_predicateOperatorType(a1, v72, v73) != 10)
    {
      if (v67)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v77, *MEMORY[0x1E4F19DD8], 1009, @"Required comparison operators TOKENMATCHES or IN when searching special key-path allTokens: %@", a1);
        goto LABEL_61;
      }
LABEL_62:
      uint64_t v61 = 0;
      goto LABEL_34;
    }
    if (objc_msgSend_comparisonPredicateModifier(a1, v77, v78) == 2)
    {
      objc_msgSend_setType_(v94, v79, 11);
    }
    else
    {
      if (objc_msgSend_comparisonPredicateModifier(a1, v79, v80) != 1)
      {
        if (v67)
        {
          objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v91, *MEMORY[0x1E4F19DD8], 1009, @"Required predicate modifier ANY or ALL when searching special key-path allTokens: %@", a1);
          goto LABEL_61;
        }
        goto LABEL_62;
      }
      objc_msgSend_setType_(v94, v91, 10);
    }
    if (!objc_msgSend_expressionType(v28, v81, v82))
    {
      if (v67)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v92, *MEMORY[0x1E4F19DD8], 1009, @"Required tokenize() operand when searching special key-path allTokens: %@", a1);
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    uint64_t v96 = v94;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v92, (uint64_t)&v96, 1);
  uint64_t v61 = };
LABEL_34:

LABEL_35:
  return v61;
}

id sub_1C4EA0750(void *a1, uint64_t a2, void *a3, void *a4)
{
  v68[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v9 = objc_msgSend_leftExpression(a1, v7, v8);
  uint64_t v12 = objc_msgSend_rightExpression(a1, v10, v11);
  if ((unint64_t)objc_msgSend_predicateOperatorType(a1, v13, v14) > 5)
  {
    uint64_t v20 = 0;
LABEL_6:
    uint64_t v21 = 0;
    goto LABEL_7;
  }
  if (objc_msgSend_expressionType(v9, v15, v16) == 3 || objc_msgSend_expressionType(v9, v17, v18) == 1)
  {
    int v19 = 0;
    objc_msgSend_CKExpressionValue(v9, v17, v18);
    uint64_t v20 = LABEL_11:;
    goto LABEL_12;
  }
  if (objc_msgSend_expressionType(v12, v17, v18) == 3 || objc_msgSend_expressionType(v12, v23, v24) == 1)
  {
    int v19 = 1;
    objc_msgSend_CKExpressionValue(v12, v23, v24);
    goto LABEL_11;
  }
  int v19 = 0;
  uint64_t v20 = 0;
LABEL_12:
  if (!objc_msgSend_expressionType(v9, v23, v24))
  {
    objc_msgSend_CKExpressionValue(v9, v25, v26);
    uint64_t v38 = LABEL_21:;
LABEL_22:
    uint64_t v21 = (void *)v38;
    if (v20) {
      goto LABEL_23;
    }
LABEL_41:
    if (a4)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v29, *MEMORY[0x1E4F19DD8], 1009, @"Expected key-path in comparison expression: %@", a1);
      id v51 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v20 = 0;
      goto LABEL_43;
    }
    uint64_t v20 = 0;
    goto LABEL_7;
  }
  if (!objc_msgSend_expressionType(v12, v25, v26))
  {
    objc_msgSend_CKExpressionValue(v12, v27, v28);
    goto LABEL_21;
  }
  if (objc_msgSend_expressionType(v9, v27, v28) == 4)
  {
    uint64_t v31 = objc_msgSend_function(v9, v29, v30);
    int isEqualToString = objc_msgSend_isEqualToString_(v31, v32, @"now");

    if (isEqualToString) {
      goto LABEL_18;
    }
  }
  if (objc_msgSend_expressionType(v12, v29, v30) == 4)
  {
    uint64_t v35 = objc_msgSend_function(v12, v29, v34);
    int v37 = objc_msgSend_isEqualToString_(v35, v36, @"now");

    if (v37)
    {
LABEL_18:
      uint64_t v38 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v29, v30);
      goto LABEL_22;
    }
  }
  uint64_t v21 = 0;
  if (!v20) {
    goto LABEL_41;
  }
LABEL_23:
  if (objc_msgSend_isEqualToString_(v20, v29, *MEMORY[0x1E4F19D70]))
  {
    BOOL v41 = v21 != 0;
    int v42 = 1;
    goto LABEL_25;
  }
  int v50 = objc_msgSend_isEqualToString_(v20, v39, *MEMORY[0x1E4F19D50]);
  int v42 = v50;
  BOOL v41 = v21 != 0;
  if (!v21 && (v50 & 1) == 0)
  {
    if (a4)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v39, *MEMORY[0x1E4F19DD8], 1009, @"Expected constant value in comparison expression: %@", a1);
      id v51 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v21 = 0;
LABEL_43:
      uint64_t v22 = 0;
      *a4 = v51;
      goto LABEL_44;
    }
    goto LABEL_6;
  }
LABEL_25:
  unint64_t v43 = objc_msgSend_predicateOperatorType(a1, v39, v40);
  int v46 = v19;
  unint64_t v47 = v43;
  if (v43 >= 4) {
    int v46 = 0;
  }
  if (v46 == 1) {
    unint64_t v47 = qword_1C50806C8[v43];
  }
  if (objc_msgSend_comparisonPredicateModifier(a1, v44, v45) == 1)
  {
    if (a4)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v48, *MEMORY[0x1E4F19DD8], 1009, @"Aggregate operator ALL not allowed for comparison expression: %@", a1);
LABEL_39:
      id v51 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_43;
    }
    goto LABEL_7;
  }
  if (objc_msgSend_comparisonPredicateModifier(a1, v48, v49) == 2)
  {
    if (a4)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v52, *MEMORY[0x1E4F19DD8], 1009, @"Aggregate operator ANY not allowed for comparison expression: %@", a1);
      goto LABEL_39;
    }
LABEL_7:
    uint64_t v22 = 0;
    goto LABEL_44;
  }
  if (!CKValueIsAcceptablePredicateClass() && v41 | v42 ^ 1)
  {
    if (a4)
    {
      uint64_t v54 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v55 = *MEMORY[0x1E4F19DD8];
      uint64_t v56 = (objc_class *)objc_opt_class();
      uint64_t v57 = NSStringFromClass(v56);
      objc_msgSend_errorWithDomain_code_format_(v54, v58, v55, 1009, @"Type '%@' not allowed in comparison expression: %@", v57, a1);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_7;
  }
  uint64_t v59 = objc_opt_new();
  uint64_t v60 = sub_1C4E93EAC(v20);
  objc_msgSend_setFieldName_(v59, v61, (uint64_t)v60);

  uint64_t v62 = sub_1C4E9401C(v47);
  objc_msgSend_setType_(v59, v63, v62);
  uint64_t v65 = objc_msgSend_fieldValueFromObject_(v6, v64, (uint64_t)v21);
  objc_msgSend_setFieldValue_(v59, v66, (uint64_t)v65);

  v68[0] = v59;
  uint64_t v22 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v67, (uint64_t)v68, 1);

LABEL_44:
  return v22;
}

id sub_1C4EA0BE4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v47 = 0;
  uint64_t v8 = objc_msgSend__parseFullTextSearchUsingContainsTranslator_withError_(a1, v7, (uint64_t)v6, &v47);
  id v9 = v47;
  uint64_t v11 = v9;
  if (v8)
  {
    id v12 = v8;
    goto LABEL_7;
  }
  id v46 = v9;
  uint64_t v13 = objc_msgSend__parseFullTextSearchFiltersWithTranslator_withError_(a1, v10, (uint64_t)v6, &v46);
  id v14 = v46;

  if (v13)
  {
    id v17 = v13;
LABEL_5:
    id v12 = v17;
LABEL_6:
    uint64_t v11 = v14;
    goto LABEL_7;
  }
  if (v14) {
    goto LABEL_13;
  }
  if (objc_msgSend_options(a1, v15, v16))
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v19, *MEMORY[0x1E4F19DD8], 1009, @"Predicate comparison options are not supported for expression: %@", a1);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_13;
  }
  id v45 = 0;
  uint64_t v21 = objc_msgSend__parseNearFiltersWithTranslator_withError_(a1, v19, (uint64_t)v6, &v45);
  id v22 = v45;
  id v14 = v22;
  if (v21)
  {
LABEL_18:
    id v17 = v21;
    goto LABEL_5;
  }
  if (v22) {
    goto LABEL_13;
  }
  id v44 = 0;
  uint64_t v21 = objc_msgSend__parseListContainsFiltersWithTranslator_withError_(a1, v23, (uint64_t)v6, &v44);
  id v24 = v44;
  id v14 = v24;
  if (v21) {
    goto LABEL_18;
  }
  if (v24) {
    goto LABEL_13;
  }
  id v43 = 0;
  uint64_t v21 = objc_msgSend__parseInFiltersWithTranslator_withError_(a1, v25, (uint64_t)v6, &v43);
  id v26 = v43;
  id v14 = v26;
  if (v21) {
    goto LABEL_18;
  }
  if (v26) {
    goto LABEL_13;
  }
  id v42 = 0;
  uint64_t v21 = objc_msgSend__parseListContainsAnyFiltersWithTranslator_withError_(a1, v27, (uint64_t)v6, &v42);
  id v28 = v42;
  id v14 = v28;
  if (v21) {
    goto LABEL_18;
  }
  if (v28) {
    goto LABEL_13;
  }
  id v41 = 0;
  uint64_t v21 = objc_msgSend__parseListContainsAllFiltersWithTranslator_withError_(a1, v29, (uint64_t)v6, &v41);
  id v30 = v41;
  id v14 = v30;
  if (v21) {
    goto LABEL_18;
  }
  if (v30) {
    goto LABEL_13;
  }
  id v40 = 0;
  uint64_t v21 = objc_msgSend__parseBeginsWithFiltersWithTranslator_withError_(a1, v31, (uint64_t)v6, &v40);
  id v32 = v40;
  id v14 = v32;
  if (v21) {
    goto LABEL_18;
  }
  if (v32) {
    goto LABEL_13;
  }
  id v39 = 0;
  uint64_t v21 = objc_msgSend__parseBetweenFiltersWithTranslator_withError_(a1, v33, (uint64_t)v6, &v39);
  id v34 = v39;
  id v14 = v34;
  if (v21) {
    goto LABEL_18;
  }
  if (v34) {
    goto LABEL_13;
  }
  id v38 = 0;
  uint64_t v21 = objc_msgSend__parseBasicOperatorFiltersWithTranslator_withError_(a1, v35, (uint64_t)v6, &v38);
  id v36 = v38;
  id v14 = v36;
  if (v21) {
    goto LABEL_18;
  }
  if (v36)
  {
LABEL_13:
    id v12 = 0;
    if (!a4 || !v14) {
      goto LABEL_6;
    }
    id v20 = v14;
    uint64_t v11 = v20;
    id v12 = 0;
    goto LABEL_16;
  }
  if (a4)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v37, *MEMORY[0x1E4F19DD8], 1009, @"Unexpected expression: %@", a1);
    id v20 = (id)objc_claimAutoreleasedReturnValue();
    id v12 = 0;
    uint64_t v11 = 0;
LABEL_16:
    *a4 = v20;
    goto LABEL_7;
  }
  id v12 = 0;
  uint64_t v11 = 0;
LABEL_7:

  return v12;
}

id sub_1C4EA0EF4(void *a1, uint64_t a2, void *a3, void *a4)
{
  v54[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  if (objc_msgSend_compoundPredicateType(a1, v7, v8) != 1)
  {
    if (objc_msgSend_compoundPredicateType(a1, v9, v10))
    {
      if (a4)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v26, *MEMORY[0x1E4F19DD8], 1009, @"Unexpected expression: %@", a1);
        id v28 = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v28 = 0;
      }
      goto LABEL_56;
    }
    uint64_t v29 = objc_msgSend_subpredicates(a1, v26, v27);
    uint64_t v31 = objc_msgSend_objectAtIndexedSubscript_(v29, v30, 0);

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && !objc_msgSend_compoundPredicateType(v31, v32, v33))
    {
      objc_msgSend_CKDPQueryFiltersWithTranslator_error_(v31, v34, (uint64_t)v6, a4);
      id v28 = (id)objc_claimAutoreleasedReturnValue();
LABEL_55:

      goto LABEL_56;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      objc_msgSend_CKDPQueryFiltersWithTranslator_error_(v31, v35, (uint64_t)v6, 0);
      id v36 = (id)objc_claimAutoreleasedReturnValue();
      id v39 = v36;
      if (v36 && objc_msgSend_count(v36, v37, v38) == 1)
      {
        id v41 = objc_msgSend_objectAtIndexedSubscript_(v39, v40, 0);
        id v28 = 0;
        switch(objc_msgSend_type(v41, v42, v43))
        {
          case 2u:
            objc_msgSend_setType_(v41, v44, 1);
            goto LABEL_48;
          case 3u:
            objc_msgSend_setType_(v41, v44, 4);
            goto LABEL_48;
          case 4u:
            objc_msgSend_setType_(v41, v44, 3);
            goto LABEL_48;
          case 5u:
            objc_msgSend_setType_(v41, v44, 8);
            goto LABEL_48;
          case 6u:
            objc_msgSend_setType_(v41, v44, 7);
            goto LABEL_48;
          case 7u:
            objc_msgSend_setType_(v41, v44, 6);
            goto LABEL_48;
          case 8u:
            objc_msgSend_setType_(v41, v44, 5);
            goto LABEL_48;
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
            goto LABEL_49;
          case 0xCu:
            objc_msgSend_setType_(v41, v44, 13);
            goto LABEL_48;
          case 0xDu:
            objc_msgSend_setType_(v41, v44, 12);
            goto LABEL_48;
          case 0xEu:
            objc_msgSend_setType_(v41, v44, 15);
            goto LABEL_48;
          case 0xFu:
            objc_msgSend_setType_(v41, v44, 14);
            goto LABEL_48;
          case 0x10u:
            objc_msgSend_setType_(v41, v44, 17);
            goto LABEL_48;
          case 0x11u:
            objc_msgSend_setType_(v41, v44, 16);
            goto LABEL_48;
          case 0x12u:
            objc_msgSend_setType_(v41, v44, 19);
            goto LABEL_48;
          case 0x13u:
            objc_msgSend_setType_(v41, v44, 18);
            goto LABEL_48;
          case 0x14u:
            objc_msgSend_setType_(v41, v44, 21);
            goto LABEL_48;
          case 0x15u:
            objc_msgSend_setType_(v41, v44, 20);
            goto LABEL_48;
          default:
            objc_msgSend_setType_(v41, v44, 2);
LABEL_48:
            v54[0] = v41;
            objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v45, (uint64_t)v54, 1);
            id v28 = (id)objc_claimAutoreleasedReturnValue();
LABEL_49:

            break;
        }
      }
      else
      {
        id v28 = 0;
      }

      if (v28) {
        goto LABEL_55;
      }
      if (a4)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v46, *MEMORY[0x1E4F19DD8], 1009, @"Invalid NOT predicate: %@", a1);
        goto LABEL_53;
      }
    }
    else if (a4)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v35, *MEMORY[0x1E4F19DD8], 1009, @"Expected comparison subpredicate: %@", a1);
LABEL_53:
      id v28 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    }
    id v28 = 0;
    goto LABEL_55;
  }
  uint64_t v11 = objc_opt_new();
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id v14 = objc_msgSend_subpredicates(a1, v12, v13);
  uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v49, v53, 16);
  if (v16)
  {
    uint64_t v18 = v16;
    id v19 = 0;
    uint64_t v20 = *(void *)v50;
    while (2)
    {
      uint64_t v21 = 0;
      id v22 = v19;
      do
      {
        if (*(void *)v50 != v20) {
          objc_enumerationMutation(v14);
        }
        uint64_t v23 = *(void **)(*((void *)&v49 + 1) + 8 * v21);
        id v48 = v22;
        id v24 = objc_msgSend_CKDPQueryFiltersWithTranslator_error_(v23, v17, (uint64_t)v6, &v48);
        id v19 = v48;

        objc_msgSend_addObjectsFromArray_(v11, v25, (uint64_t)v24);
        if (a4 && v19)
        {
          id v19 = v19;
          *a4 = v19;

          id v28 = 0;
          goto LABEL_18;
        }
        ++v21;
        id v22 = v19;
      }
      while (v18 != v21);
      uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v17, (uint64_t)&v49, v53, 16);
      if (v18) {
        continue;
      }
      break;
    }
  }
  else
  {
    id v19 = 0;
  }

  id v28 = v11;
LABEL_18:

LABEL_56:
  return v28;
}

id sub_1C4EA13BC(void *a1)
{
  uint64_t v2 = objc_opt_new();
  if (objc_msgSend_ascending(a1, v3, v4)) {
    objc_msgSend_setOrder_(v2, v5, 1);
  }
  else {
    objc_msgSend_setOrder_(v2, v5, 2);
  }
  uint64_t v8 = objc_msgSend_key(a1, v6, v7);
  id v9 = sub_1C4E93EAC(v8);
  objc_msgSend_setFieldName_(v2, v10, (uint64_t)v9);

  return v2;
}

id sub_1C4EA1454(void *a1)
{
  v82.receiver = a1;
  v82.super_class = (Class)&off_1F2106898;
  uint64_t v2 = objc_msgSendSuper2(&v82, sel_CKDPQuerySort);
  id v5 = objc_msgSend_relativeLocation(a1, v3, v4);

  if (v5)
  {
    id v6 = objc_opt_new();
    id v9 = objc_msgSend_relativeLocation(a1, v7, v8);
    objc_msgSend_coordinate(v9, v10, v11);
    objc_msgSend_setLatitude_(v6, v12, v13);

    uint64_t v16 = objc_msgSend_relativeLocation(a1, v14, v15);
    objc_msgSend_coordinate(v16, v17, v18);
    objc_msgSend_setLongitude_(v6, v19, v20, v21);

    id v24 = objc_msgSend_relativeLocation(a1, v22, v23);
    objc_msgSend_horizontalAccuracy(v24, v25, v26);
    objc_msgSend_setHorizontalAccuracy_(v6, v27, v28);

    uint64_t v31 = objc_msgSend_relativeLocation(a1, v29, v30);
    objc_msgSend_altitude(v31, v32, v33);
    objc_msgSend_setAltitude_(v6, v34, v35);

    uint64_t v38 = objc_msgSend_relativeLocation(a1, v36, v37);
    objc_msgSend_verticalAccuracy(v38, v39, v40);
    objc_msgSend_setVerticalAccuracy_(v6, v41, v42);

    id v45 = objc_msgSend_relativeLocation(a1, v43, v44);
    objc_msgSend_course(v45, v46, v47);
    objc_msgSend_setCourse_(v6, v48, v49);

    long long v52 = objc_msgSend_relativeLocation(a1, v50, v51);
    objc_msgSend_speed(v52, v53, v54);
    objc_msgSend_setSpeed_(v6, v55, v56);

    uint64_t v59 = objc_msgSend_relativeLocation(a1, v57, v58);
    uint64_t v62 = objc_msgSend_timestamp(v59, v60, v61);

    if (v62)
    {
      uint64_t v64 = objc_opt_new();
      objc_msgSend_setTimestamp_(v6, v65, (uint64_t)v64);

      uint64_t v68 = objc_msgSend_relativeLocation(a1, v66, v67);
      uint64_t v71 = objc_msgSend_timestamp(v68, v69, v70);
      objc_msgSend_timeIntervalSinceReferenceDate(v71, v72, v73);
      double v75 = v74;
      uint64_t v78 = objc_msgSend_timestamp(v6, v76, v77);
      objc_msgSend_setTime_(v78, v79, v80, v75);
    }
    objc_msgSend_setCoordinate_(v2, v63, (uint64_t)v6);
  }
  return v2;
}

uint64_t sub_1C4EA1678(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v8 = objc_msgSend_fieldName(v4, v6, v7);
  if ((objc_msgSend_hasName(v8, v9, v10) & 1) == 0)
  {

    goto LABEL_11;
  }
  uint64_t v13 = objc_msgSend_fieldName(v5, v11, v12);
  int hasName = objc_msgSend_hasName(v13, v14, v15);

  if (!hasName)
  {
LABEL_11:
    uint64_t v30 = 0;
    goto LABEL_12;
  }
  id v19 = objc_msgSend_fieldName(v4, v17, v18);
  id v22 = objc_msgSend_name(v19, v20, v21);
  uint64_t v25 = objc_msgSend_fieldName(v5, v23, v24);
  uint64_t v28 = objc_msgSend_name(v25, v26, v27);
  uint64_t v30 = objc_msgSend_compare_(v22, v29, (uint64_t)v28);

  if (!v30)
  {
    int v33 = objc_msgSend_type(v4, v31, v32);
    unsigned int v34 = sub_1C4EA1798(v33);
    int v37 = objc_msgSend_type(v5, v35, v36);
    unsigned int v38 = sub_1C4EA1798(v37);
    if (v34 >= v38) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = -1;
    }
    if (v34 > v38) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = v39;
    }
  }
LABEL_12:

  return v30;
}

uint64_t sub_1C4EA1798(int a1)
{
  if ((a1 - 2) > 0x1C) {
    return 1;
  }
  else {
    return dword_1C50806E8[a1 - 2];
  }
}

id sub_1C4EA2C00(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = objc_opt_new();
  id v6 = objc_msgSend_data(v2, v4, v5);
  objc_msgSend_setWrappedInvocationKey_(v3, v7, (uint64_t)v6);

  uint64_t v10 = objc_msgSend_routingToken(v2, v8, v9);

  objc_msgSend_setRoutingToken_(v3, v11, (uint64_t)v10);
  return v3;
}

void sub_1C4EA3E14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4EA4344(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v4 = objc_msgSend_syncStatus(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_BOOLValue(v4, v5, v6);

  objc_msgSend_syncError(*(void **)(a1 + 32), v8, v9);
  uint64_t v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v11 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
  {
    id v14 = *(void **)(a1 + 32);
    uint64_t v15 = v11;
    uint64_t v18 = objc_msgSend_requestorOperationID(v14, v16, v17);
    uint64_t v19 = *(void *)(a1 + 40);
    uint64_t v22 = objc_msgSend_serviceName(*(void **)(a1 + 32), v20, v21);
    uint64_t v23 = (void *)v22;
    int v29 = 138544642;
    uint64_t v24 = @" NO";
    uint64_t v30 = v18;
    __int16 v31 = 2114;
    uint64_t v32 = v19;
    __int16 v33 = 2114;
    if (v7) {
      uint64_t v24 = @" YES";
    }
    uint64_t v34 = v22;
    if (v10) {
      uint64_t v25 = @" error: ";
    }
    else {
      uint64_t v25 = &stru_1F2044F30;
    }
    __int16 v35 = 2114;
    if (v10) {
      uint64_t v26 = v10;
    }
    else {
      uint64_t v26 = &stru_1F2044F30;
    }
    uint64_t v36 = v24;
    __int16 v37 = 2114;
    unsigned int v38 = v25;
    __int16 v39 = 2112;
    uint64_t v40 = v26;
    _os_log_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_INFO, "User key sync completion for operation %{public}@ calling out to waiter operation %{public}@ for service %{public}@ with success:%{public}@%{public}@%@", (uint8_t *)&v29, 0x3Eu);
  }
  uint64_t v27 = *(void *)(a1 + 48);
  if (v27)
  {
    uint64_t v28 = objc_msgSend_KRSReturnedExistingIdentity(*(void **)(a1 + 32), v12, v13);
    (*(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(v27 + 16))(v27, v7, v10, v28);
  }
}

uint64_t sub_1C4EA46B4()
{
  qword_1EBBCFD18 = objc_alloc_init(CKDPCSKeySyncManager);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4EA49C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4EA4BB8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4EA5278(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v8 = objc_msgSend_keySyncQueue(*(void **)(a1 + 32), v6, v7);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4EA5344;
  block[3] = &unk_1E64F1D90;
  char v13 = a2;
  id v11 = *(id *)(a1 + 40);
  id v12 = v5;
  id v9 = v5;
  dispatch_async(v8, block);
}

void sub_1C4EA5344(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1E4F1A550];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v3 = (os_log_t *)MEMORY[0x1E4F1A528];
  id v4 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
  {
    if (*(unsigned char *)(a1 + 48)) {
      uint64_t v6 = &stru_1F2044F30;
    }
    else {
      uint64_t v6 = @"un";
    }
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = v4;
    id v11 = objc_msgSend_serviceName(v7, v9, v10);
    id v14 = objc_msgSend_requestorOperationID(*(void **)(a1 + 32), v12, v13);
    uint64_t v15 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138544130;
    uint64_t v59 = v6;
    __int16 v60 = 2114;
    uint64_t v61 = v11;
    __int16 v62 = 2114;
    uint64_t v63 = v14;
    __int16 v64 = 2112;
    uint64_t v65 = v15;
    _os_log_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_INFO, "Finished user key sync %{public}@successfully for service %{public}@ for operation %{public}@. Error: %@", buf, 0x2Au);
  }
  uint64_t v16 = objc_msgSend_numberWithBool_(MEMORY[0x1E4F28ED0], v5, *(unsigned __int8 *)(a1 + 48));
  objc_msgSend_setSyncStatus_(*(void **)(a1 + 32), v17, (uint64_t)v16);

  if (!*(unsigned char *)(a1 + 48) || *(void *)(a1 + 40))
  {
    uint64_t v21 = objc_msgSend_isManatee(*(void **)(a1 + 32), v18, v19) ? 5009 : 5000;
    uint64_t v22 = *MEMORY[0x1E4F19DD8];
    uint64_t v23 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v20, *MEMORY[0x1E4F19DD8], v21, *(void *)(a1 + 40), @"Failed user key sync");
    objc_msgSend_setSyncError_(*(void **)(a1 + 32), v24, (uint64_t)v23);

    if (objc_msgSend_code(*(void **)(a1 + 40), v25, v26) == 228)
    {
      if ((objc_msgSend_racedWithGuitarfishRepairCallback(*(void **)(a1 + 32), v18, v19) & 1) == 0)
      {
        int v29 = objc_msgSend_sharedNotifier(CKDPCSNotifier, v27, v28);
        uint64_t v32 = objc_msgSend_serviceName(*(void **)(a1 + 32), v30, v31);
        uint64_t v57 = v32;
        uint64_t v34 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v33, (uint64_t)&v57, 1);
        objc_msgSend_addServicesNeedingDBRReauthentication_(v29, v35, (uint64_t)v34);
      }
      uint64_t v36 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v27, v22, 10006, @"User key sync failed due to DBR account re-auth needed. Direct user to settings to re-auth their account.");
      objc_msgSend_setSyncError_(*(void **)(a1 + 32), v37, (uint64_t)v36);
    }
  }
  if (*(unsigned char *)(a1 + 48))
  {
    unsigned int v38 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v18, v19);
    objc_msgSend_setCompletionDate_(*(void **)(a1 + 32), v39, (uint64_t)v38);

    if (*v2 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v40 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v41 = *(void **)(a1 + 32);
      uint64_t v42 = v40;
      id v45 = objc_msgSend_completionDate(v41, v43, v44);
      objc_msgSend_timeIntervalSince1970(v45, v46, v47);
      uint64_t v49 = v48;
      long long v52 = objc_msgSend_serviceName(*(void **)(a1 + 32), v50, v51);
      uint64_t v55 = objc_msgSend_requestorOperationID(*(void **)(a1 + 32), v53, v54);
      *(_DWORD *)buf = 134218498;
      uint64_t v59 = v49;
      __int16 v60 = 2114;
      uint64_t v61 = v52;
      __int16 v62 = 2114;
      uint64_t v63 = v55;
      _os_log_impl(&dword_1C4CFF000, v42, OS_LOG_TYPE_INFO, "Setting user key sync completion date %f for service %{public}@ requested by operation %{public}@", buf, 0x20u);
    }
  }
  uint64_t v56 = objc_msgSend_syncGroup(*(void **)(a1 + 32), v18, v19);
  dispatch_group_leave(v56);
}

void sub_1C4EA5704(void **a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = objc_msgSend_syncGroup(a1[4], v4, v5);
  dispatch_group_enter(v6);

  id v9 = objc_msgSend_keySyncQueue(a1[5], v7, v8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4EA57F8;
  block[3] = &unk_1E64F0120;
  id v12 = v3;
  id v13 = a1[4];
  id v14 = a1[6];
  id v10 = v3;
  dispatch_async(v9, block);
}

void sub_1C4EA57F8(void **a1, const char *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a1[4])
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v4 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = a1[5];
      uint64_t v8 = v4;
      id v11 = objc_msgSend_serviceName(v7, v9, v10);
      id v14 = objc_msgSend_requestorOperationID(a1[5], v12, v13);
      if (objc_msgSend_returnedExistingIdentity(a1[4], v15, v16)) {
        uint64_t v19 = @"YES";
      }
      else {
        uint64_t v19 = @"NO";
      }
      int isManatee = objc_msgSend_isManatee(a1[5], v17, v18);
      *(_DWORD *)uint64_t v31 = 138544130;
      if (isManatee) {
        uint64_t v21 = @"YES";
      }
      else {
        uint64_t v21 = @"NO";
      }
      *(void *)&v31[4] = v11;
      __int16 v32 = 2114;
      __int16 v33 = v14;
      __int16 v34 = 2114;
      __int16 v35 = v19;
      __int16 v36 = 2114;
      __int16 v37 = v21;
      _os_log_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_INFO, "User key sync for service %{public}@ for operation %{public}@ returned existing identity: %{public}@. Service is manatee: %{public}@", v31, 0x2Au);
    }
    uint64_t v22 = objc_msgSend_returnedExistingIdentity(a1[4], v5, v6, *(void *)v31);
    objc_msgSend_setKRSReturnedExistingIdentity_(a1[5], v23, v22);
  }
  if (*MEMORY[0x1E4F1A4E0])
  {
    uint64_t v24 = objc_msgSend__pcsTestOverrideForKey_(a1[6], a2, @"ForceKRSReturnExistingIdentityValue");
    uint64_t v27 = v24;
    if (v24)
    {
      uint64_t v28 = objc_msgSend_BOOLValue(v24, v25, v26);
      objc_msgSend_setKRSReturnedExistingIdentity_(a1[5], v29, v28);
    }
  }
  uint64_t v30 = objc_msgSend_syncGroup(a1[5], a2, a3);
  dispatch_group_leave(v30);
}

void sub_1C4EA5CE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4EA5CF8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v4 = (void **)(a1 + 32);
  uint64_t v5 = objc_msgSend_keySyncTrackerByServiceNameByAccount(*(void **)(a1 + 32), a2, a3);
  objc_sync_enter(v5);
  uint64_t v7 = objc_msgSend__on_queue_getKeySyncTrackerByServicenameForAccount_(*v4, v6, *(void *)(a1 + 40));
  id v9 = objc_msgSend_objectForKeyedSubscript_(v7, v8, *(void *)(a1 + 48));
  id v14 = objc_msgSend_completionDate(v9, v10, v11);
  if (v14)
  {
    uint64_t v15 = *(void **)(a1 + 56);
    if (v15)
    {
      uint64_t v16 = objc_msgSend_completionDate(v9, v12, v13);
      LODWORD(v15) = objc_msgSend_compare_(v15, v17, (uint64_t)v16) == -1;
    }
  }
  else
  {
    LODWORD(v15) = 0;
  }

  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v18 = (id)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    uint64_t v21 = objc_msgSend_completionDate(v9, v19, v20);
    objc_msgSend_timeIntervalSince1970(v21, v22, v23);
    uint64_t v25 = v24;
    objc_msgSend_timeIntervalSince1970(*(void **)(a1 + 56), v26, v27);
    int v29 = @"E";
    int v31 = 134218498;
    uint64_t v32 = v25;
    if (v15) {
      int v29 = @"Ine";
    }
    __int16 v33 = 2048;
    uint64_t v34 = v28;
    __int16 v35 = 2112;
    __int16 v36 = v29;
    _os_log_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_INFO, "Compared tracker completion date %f to decryptee modification date %f. %@ligible for user key sync", (uint8_t *)&v31, 0x20u);
  }
  objc_sync_exit(v5);

  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, v15 ^ 1);
  }
  return result;
}

void sub_1C4EA5EFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4EA6554(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C4EA6590(uint64_t a1, const char *a2, uint64_t a3)
{
  v99[1] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 104))
  {
    id v4 = objc_msgSend_keySyncTrackerByServiceNameByAccount(*(void **)(a1 + 32), a2, a3);
    objc_sync_enter(v4);
    uint64_t v7 = objc_msgSend_keySyncTrackerByServiceNameByAccount(*(void **)(a1 + 32), v5, v6);
    objc_msgSend_removeAllObjects(v7, v8, v9);

    objc_sync_exit(v4);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1C4EA6C60;
  aBlock[3] = &unk_1E64F4AC0;
  id v10 = *(id *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 96);
  id v87 = v10;
  uint64_t v90 = v11;
  id v88 = *(id *)(a1 + 48);
  char v91 = *(unsigned char *)(a1 + 105);
  id v89 = *(id *)(a1 + 88);
  id v12 = _Block_copy(aBlock);
  id v14 = objc_msgSend_syncTrackerForAccount_requestorOperationID_service_manatee_testOverrideProvider_(*(void **)(a1 + 32), v13, *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned __int8 *)(a1 + 105), *(void *)(a1 + 80));
  switch(objc_msgSend_state(v14, v15, v16))
  {
    case 0:
      goto LABEL_26;
    case 1:
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v19 = (void *)*MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
      {
        uint64_t v22 = *(void *)(a1 + 72);
        uint64_t v23 = v19;
        uint64_t v26 = objc_msgSend_requestorOperationID(v14, v24, v25);
        *(_DWORD *)buf = 138543618;
        uint64_t v93 = v22;
        __int16 v94 = 2112;
        v95 = v26;
        _os_log_impl(&dword_1C4CFF000, v23, OS_LOG_TYPE_INFO, "A user key sync for service %{public}@ is already in progress due to operation %@, queueing ourselves behind it", buf, 0x16u);
      }
      uint64_t v27 = objc_msgSend_keySyncQueue(*(void **)(a1 + 32), v20, v21);
      objc_msgSend_waitOnSyncWithQueue_waiterOperationID_handler_(v14, v28, (uint64_t)v27, *(void *)(a1 + 64), v12);

      goto LABEL_32;
    case 2:
      if (*(unsigned char *)(a1 + 106) && *(unsigned char *)(a1 + 107))
      {
        int v29 = objc_msgSend_completionDate(v14, v17, v18);
        objc_msgSend_timeIntervalSinceNow(v29, v30, v31);
        double v33 = v32;

        objc_msgSend_timeIntervalSinceNow(*(void **)(a1 + 48), v34, v35);
        double v36 = fabs(v33);
        *(double *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = fabs(v37);
        uint64_t v38 = (void *)MEMORY[0x1E4F1A280];
        uint64_t v39 = *MEMORY[0x1E4F19C60];
        uint64_t v98 = *MEMORY[0x1E4F19C60];
        uint64_t v42 = objc_msgSend_numberWithDouble_(MEMORY[0x1E4F28ED0], v40, v41, 1800.0 - v36);
        v99[0] = v42;
        uint64_t v44 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v43, (uint64_t)v99, &v98, 1);
        uint64_t v45 = *MEMORY[0x1E4F19DD8];
        uint64_t v85 = objc_msgSend_errorWithDomain_code_userInfo_format_(v38, v46, *MEMORY[0x1E4F19DD8], 5012, v44, @"PCS Sync throttled");

        if (*(unsigned char *)(a1 + 105)) {
          uint64_t v49 = 5008;
        }
        else {
          uint64_t v49 = 2008;
        }
        long long v50 = (void *)MEMORY[0x1E4F1A280];
        v96[0] = v39;
        uint64_t v51 = objc_msgSend_numberWithDouble_(MEMORY[0x1E4F28ED0], v47, v48, 1800.0 - v36);
        v96[1] = *MEMORY[0x1E4F28A50];
        v97[0] = v51;
        v97[1] = v85;
        uint64_t v53 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v52, (uint64_t)v97, v96, 2);
        uint64_t v54 = *(void *)(a1 + 72);
        uint64_t v57 = objc_msgSend_requestorOperationID(v14, v55, v56);
        uint64_t v59 = objc_msgSend_errorWithDomain_code_userInfo_format_(v50, v58, v45, v49, v53, @"Recently completed user key sync for the %@ service %f seconds ago for operation %@. Throttling...", v54, *(void *)&v36, v57);

        objc_msgSend_setKeySyncResult_(*(void **)(a1 + 40), v60, 0x1F2049E90);
        uint64_t v63 = objc_msgSend_numberWithDouble_(MEMORY[0x1E4F28ED0], v61, v62, v36);
        objc_msgSend_setThrottledDurationSec_(*(void **)(a1 + 40), v64, (uint64_t)v63);

        uint64_t v67 = objc_msgSend_numberWithDouble_(MEMORY[0x1E4F28ED0], v65, v66, *(double *)(*(void *)(*(void *)(a1 + 96) + 8) + 24));
        objc_msgSend_setKeySyncDurationSec_(*(void **)(a1 + 40), v68, (uint64_t)v67);

        uint64_t v69 = *(void *)(a1 + 88);
        if (v69) {
          (*(void (**)(uint64_t, void, void *, void))(v69 + 16))(v69, 0, v59, *(void *)(a1 + 40));
        }
      }
      else
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v77 = (void *)*MEMORY[0x1E4F1A528];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
        {
          uint64_t v78 = *(void *)(a1 + 72);
          CFTypeRef v79 = v77;
          objc_super v82 = objc_msgSend_requestorOperationID(v14, v80, v81);
          *(_DWORD *)buf = 138543618;
          uint64_t v93 = v78;
          __int16 v94 = 2112;
          v95 = v82;
          _os_log_impl(&dword_1C4CFF000, v79, OS_LOG_TYPE_INFO, "Ignoring user key sync throttling for service %{public}@, operation %@", buf, 0x16u);
        }
LABEL_25:
        uint64_t v83 = objc_msgSend_createSyncTrackerForAccount_requestorOperationID_service_manatee_testOverrideProvider_(*(void **)(a1 + 32), v71, *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned __int8 *)(a1 + 105), *(void *)(a1 + 80));

        id v14 = (void *)v83;
LABEL_26:
        if (*(unsigned char *)(a1 + 108))
        {
          objc_msgSend_performKeySyncWithSyncTracker_testableSyncConfig_shouldThrottle_testOverrideProvider_requestorOperationID_completionHandler_(*(void **)(a1 + 32), v17, (uint64_t)v14, 2, *(unsigned __int8 *)(a1 + 106), *(void *)(a1 + 80), *(void *)(a1 + 64), v12);
        }
        else
        {
          if (*(unsigned char *)(a1 + 109)) {
            unsigned __int8 v84 = 3;
          }
          else {
            unsigned __int8 v84 = *MEMORY[0x1E4F1A4E0];
          }
          objc_msgSend_performKeySyncWithSyncTracker_testableSyncConfig_shouldThrottle_testOverrideProvider_requestorOperationID_completionHandler_(*(void **)(a1 + 32), v17, (uint64_t)v14, v84, *(unsigned __int8 *)(a1 + 106), *(void *)(a1 + 80), *(void *)(a1 + 64), v12);
        }
      }
LABEL_32:

      return;
    case 3:
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v70 = (void *)*MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
      {
        uint64_t v72 = *(void *)(a1 + 72);
        uint64_t v73 = v70;
        uint64_t v76 = objc_msgSend_requestorOperationID(v14, v74, v75);
        *(_DWORD *)buf = 138543618;
        uint64_t v93 = v72;
        __int16 v94 = 2112;
        v95 = v76;
        _os_log_impl(&dword_1C4CFF000, v73, OS_LOG_TYPE_INFO, "No longer throttled for user key sync for service %{public}@, operation %@", buf, 0x16u);
      }
      goto LABEL_25;
    default:
      goto LABEL_32;
  }
}

void sub_1C4EA6C34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4EA6C60(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v21 = a3;
  if (((v21 == 0) & a2) != 0) {
    uint64_t v8 = off_1E64F5A18;
  }
  else {
    uint64_t v8 = off_1E64F5A20;
  }
  objc_msgSend_setKeySyncResult_(*(void **)(a1 + 32), v7, (uint64_t)*v8);
  objc_msgSend_timeIntervalSinceNow(*(void **)(a1 + 40), v9, v10);
  *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = fabs(v11);
  id v14 = objc_msgSend_numberWithDouble_(MEMORY[0x1E4F28ED0], v12, v13, *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24));
  objc_msgSend_setKeySyncDurationSec_(*(void **)(a1 + 32), v15, (uint64_t)v14);

  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v17 = objc_msgSend_numberWithBool_(MEMORY[0x1E4F28ED0], v16, a4);
    objc_msgSend_setKRSReturnedExistingIdentity_(*(void **)(a1 + 32), v18, (uint64_t)v17);
  }
  uint64_t v19 = *(void *)(a1 + 48);
  if (v19) {
    (*(void (**)(uint64_t, uint64_t, id, void))(v19 + 16))(v19, a2, v21, *(void *)(a1 + 32));
  }
  return MEMORY[0x1F4181820]();
}

uint64_t sub_1C4EA6E34(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v3 = (void **)(a1 + 32);
  objc_msgSend_keySyncTrackerByServiceNameByAccount(*(void **)(a1 + 32), a2, a3);
  id obj = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(obj);
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v6 = objc_msgSend_keySyncTrackerByServiceNameByAccount(*v3, v4, v5);
  uint64_t v9 = objc_msgSend_allValues(v6, v7, v8);

  id v31 = v9;
  uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v39, v46, 16);
  if (v33)
  {
    uint64_t v32 = *(void *)v40;
    uint64_t v13 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
    id v14 = (id *)MEMORY[0x1E4F1A500];
    do
    {
      for (uint64_t i = 0; i != v33; ++i)
      {
        if (*(void *)v40 != v32) {
          objc_enumerationMutation(v31);
        }
        uint64_t v15 = *(void **)(*((void *)&v39 + 1) + 8 * i);
        long long v35 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        uint64_t v16 = objc_msgSend_allValues(v15, v11, v12);
        uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v35, v45, 16);
        if (v18)
        {
          uint64_t v19 = *(void *)v36;
          do
          {
            uint64_t v20 = 0;
            do
            {
              if (*(void *)v36 != v19) {
                objc_enumerationMutation(v16);
              }
              id v21 = *(void **)(*((void *)&v35 + 1) + 8 * v20);
              if (*v13 != -1) {
                dispatch_once(v13, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
              }
              uint64_t v22 = *v14;
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v27 = objc_msgSend_serviceName(v21, v23, v24);
                *(_DWORD *)buf = 138412290;
                uint64_t v44 = v27;
                _os_log_debug_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_DEBUG, "Key sync tracker for service: %@ raced with guitarfish repair callback.", buf, 0xCu);
              }
              objc_msgSend_setRacedWithGuitarfishRepairCallback_(v21, v25, 1);
              ++v20;
            }
            while (v18 != v20);
            uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v26, (uint64_t)&v35, v45, 16);
          }
          while (v18);
        }
      }
      uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v11, (uint64_t)&v39, v46, 16);
    }
    while (v33);
  }

  objc_sync_exit(obj);
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1C4EA70E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4EA74F0(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_subscriptionFetchedProgressBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_subscriptionFetchedProgressBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
  }
}

void sub_1C4EA77F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak((id *)(v19 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4EA7848(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend__handleSubscriptionFetched_withID_responseCode_(WeakRetained, v10, (uint64_t)v9, v8, v7);
}

void sub_1C4EA78D4(uint64_t a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  uint64_t v5 = (void *)MEMORY[0x1E4F1A280];
  uint64_t v6 = *MEMORY[0x1E4F19DD8];
  uint64_t v7 = sub_1C4E94D98(v3);
  uint64_t v10 = objc_msgSend_request(WeakRetained, v8, v9);
  double v11 = sub_1C4E940D0(v10, v3);
  id v14 = objc_msgSend_error(v3, v12, v13);

  uint64_t v17 = objc_msgSend_errorDescription(v14, v15, v16);
  uint64_t v19 = objc_msgSend_errorWithDomain_code_userInfo_format_(v5, v18, v6, v7, v11, @"Error fetching all subscriptions from server: %@", v17);

  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v20 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = v20;
    uint64_t v26 = (objc_class *)objc_opt_class();
    uint64_t v27 = NSStringFromClass(v26);
    uint64_t v30 = objc_msgSend_ckShortDescription(WeakRetained, v28, v29);
    *(_DWORD *)buf = 138544130;
    uint64_t v32 = v27;
    __int16 v33 = 2048;
    id v34 = WeakRetained;
    __int16 v35 = 2114;
    long long v36 = v30;
    __int16 v37 = 2112;
    long long v38 = v19;
    _os_log_debug_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_DEBUG, "Fetch subscriptions operation <%{public}@: %p; %{public}@> hit top-level error %@",
      buf,
      0x2Au);
  }
  uint64_t v23 = objc_msgSend_error(WeakRetained, v21, v22);

  if (!v23) {
    objc_msgSend_setError_(WeakRetained, v24, (uint64_t)v19);
  }
}

void sub_1C4EA7B04(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = objc_msgSend_error(WeakRetained, v2, v3);

  if (!v4)
  {
    id v7 = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v10 = objc_msgSend_error(v7, v8, v9);
    objc_msgSend_setError_(WeakRetained, v11, (uint64_t)v10);
  }
  uint64_t v12 = objc_msgSend_error(WeakRetained, v5, v6);
  objc_msgSend_finishWithError_(WeakRetained, v13, (uint64_t)v12);
}

void sub_1C4EA8608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 152), 8);
  objc_destroyWeak((id *)(v30 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_1C4EA8654(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4EA8664(uint64_t a1)
{
}

void sub_1C4EA866C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v11 = objc_msgSend_pcs(v6, v9, v10);
  uint64_t v12 = (void *)*MEMORY[0x1E4F1A548];
  if (v11)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v12);
    }
    uint64_t v13 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
    {
      id v14 = v13;
      uint64_t v17 = objc_msgSend_shareID(v6, v15, v16);
      uint64_t v18 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      int v27 = 138412546;
      uint64_t v28 = v17;
      __int16 v29 = 2112;
      id v30 = v18;
      _os_log_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_INFO, "Successfully decrypted PCS data for share %@: %@", (uint8_t *)&v27, 0x16u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v12);
    }
    uint64_t v19 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
    {
      id v21 = *(void **)(a1 + 32);
      uint64_t v22 = v19;
      uint64_t v25 = objc_msgSend_shareID(v21, v23, v24);
      int v27 = 138412546;
      uint64_t v28 = v25;
      __int16 v29 = 2112;
      id v30 = v7;
      _os_log_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_INFO, "Warn: Couldn't decrypt existing share protection data on share %@: %@", (uint8_t *)&v27, 0x16u);
    }
    objc_msgSend_setState_(WeakRetained, v20, 12);
    if (v7) {
      objc_msgSend_setError_(WeakRetained, v26, (uint64_t)v7);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1C4EA88A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v8 = WeakRetained;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    objc_msgSend__fetchSharePCSData(WeakRetained, v3, v4);
  }
  else {
    objc_msgSend__prepareDependentPCSUpdateIfNeededForShareWithSharePCS_error_(WeakRetained, v3, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), 0);
  }
  id v7 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v5, v6);
  dispatch_group_leave(v7);
}

void sub_1C4EA8C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  objc_destroyWeak(&location);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose((const void *)(v25 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1C4EA8CB8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
  else if (v7 && !objc_msgSend_CKIsObjectNotFoundError(v7, v8, v9))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v16 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = v16;
      uint64_t v20 = objc_msgSend_shareID(WeakRetained, v18, v19);
      *(_DWORD *)buf = 138412546;
      uint64_t v26 = v20;
      __int16 v27 = 2112;
      id v28 = v7;
      _os_log_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS data for share %@: %@. Refusing to save share.", buf, 0x16u);
    }
  }
  else
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = sub_1C4EA8EEC;
    v22[3] = &unk_1E64F4B88;
    uint64_t v13 = *(void *)(a1 + 48);
    v22[4] = WeakRetained;
    uint64_t v24 = v13;
    long long v21 = *(_OWORD *)(a1 + 32);
    id v14 = (id)v21;
    long long v23 = v21;
    objc_msgSend__fetchRootRecordPublicSharingIdentityWithCompletionHandler_(WeakRetained, v15, (uint64_t)v22);
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)
    && (objc_msgSend_CKIsObjectNotFoundError(v7, v11, v12) & 1) == 0)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4EA8EEC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v9 = v6;
  if (v6 && !objc_msgSend_CKIsObjectNotFoundError(v6, v7, v8))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    long long v38 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      long long v41 = *(void **)(a1 + 32);
      long long v42 = v38;
      uint64_t v45 = objc_msgSend_share(v41, v43, v44);
      uint64_t v48 = objc_msgSend_rootRecordID(v45, v46, v47);
      *(_DWORD *)buf = 138412546;
      uint64_t v171 = v48;
      __int16 v172 = 2112;
      uint64_t v173 = v9;
      _os_log_error_impl(&dword_1C4CFF000, v42, OS_LOG_TYPE_ERROR, "Error fetching PCS data for root record %@: %@", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v158 = a1;
    id v156 = v5;
    if (v5)
    {
      uint64_t v10 = objc_msgSend_share(*(void **)(a1 + 32), v7, v8);
      uint64_t v13 = objc_msgSend_mutableEncryptedPSK(v10, v11, v12);
      uint64_t v16 = objc_msgSend_data(v13, v14, v15);

      if (!v16) {
        goto LABEL_7;
      }
      uint64_t v19 = objc_msgSend_data(v5, v17, v18);
      if (!v19) {
        goto LABEL_7;
      }
      uint64_t v22 = (void *)v19;
      long long v23 = objc_msgSend_data(v5, v20, v21);
      char isEqualToData = objc_msgSend_isEqualToData_(v16, v24, (uint64_t)v23);

      if ((isEqualToData & 1) == 0)
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v108 = (void *)*MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
        {
          uint64_t v141 = *(void **)(a1 + 32);
          uint64_t v142 = v108;
          uint64_t v145 = objc_msgSend_share(v141, v143, v144);
          uint64_t v148 = objc_msgSend_recordID(v145, v146, v147);
          uint64_t v151 = objc_msgSend_share(*(void **)(a1 + 32), v149, v150);
          uint64_t v154 = objc_msgSend_rootRecordID(v151, v152, v153);
          *(_DWORD *)buf = 138412546;
          uint64_t v171 = v148;
          __int16 v172 = 2112;
          uint64_t v173 = v154;
          _os_log_error_impl(&dword_1C4CFF000, v142, OS_LOG_TYPE_ERROR, "Public sharing identity on share %@ does not match the public sharing identity from its root record (%@). Failing share save", buf, 0x16u);
        }
        uint64_t v111 = (void *)MEMORY[0x1E4F1A280];
        uint64_t v112 = *MEMORY[0x1E4F19DD8];
        id v30 = objc_msgSend_share(*(void **)(a1 + 32), v109, v110);
        uint64_t v32 = objc_msgSend_recordID(v30, v113, v114);
        __int16 v35 = objc_msgSend_share(*(void **)(a1 + 32), v115, v116);
        uint64_t v119 = objc_msgSend_rootRecordID(v35, v117, v118);
        uint64_t v121 = objc_msgSend_errorWithDomain_code_format_(v111, v120, v112, 1017, @"Public sharing identity on share %@ does not match the public sharing identity from its root record (%@).", v32, v119);

        a1 = v158;
        uint64_t v9 = (void *)v121;
      }
      else
      {
LABEL_7:
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v26 = (void *)*MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
        {
          uint64_t v122 = *(void **)(a1 + 32);
          uint64_t v123 = v26;
          uint64_t v126 = objc_msgSend_share(v122, v124, v125);
          uint64_t v129 = objc_msgSend_rootRecordID(v126, v127, v128);
          uint64_t v132 = objc_msgSend_shareID(*(void **)(a1 + 32), v130, v131);
          *(_DWORD *)buf = 138412802;
          uint64_t v171 = v129;
          __int16 v172 = 2112;
          uint64_t v173 = v132;
          __int16 v174 = 2112;
          id v175 = v5;
          _os_log_debug_impl(&dword_1C4CFF000, v123, OS_LOG_TYPE_DEBUG, "Setting public sharing identity from root record %@ on share %@: %@", buf, 0x20u);
        }
        id v27 = objc_alloc(MEMORY[0x1E4F19FA0]);
        id v30 = objc_msgSend_data(v5, v28, v29);
        uint64_t v32 = objc_msgSend_initWithData_(v27, v31, (uint64_t)v30);
        __int16 v35 = objc_msgSend_share(*(void **)(a1 + 32), v33, v34);
        objc_msgSend_setMutableEncryptedPSK_(v35, v36, (uint64_t)v32);
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v49 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        v133 = *(void **)(a1 + 32);
        uint64_t v134 = v49;
        uint64_t v137 = objc_msgSend_share(v133, v135, v136);
        uint64_t v140 = objc_msgSend_rootRecordID(v137, v138, v139);
        *(_DWORD *)buf = 138412290;
        uint64_t v171 = v140;
        _os_log_debug_impl(&dword_1C4CFF000, v134, OS_LOG_TYPE_DEBUG, "Didn't get a public sharing identity for root record %@", buf, 0xCu);
      }
    }
    long long v50 = *(void **)(a1 + 32);
    id v167 = v9;
    uint64_t v51 = objc_msgSend__createNewSharePCSDataWithError_(v50, v37, (uint64_t)&v167);
    id v155 = v167;

    uint64_t v52 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v53 = *(void **)(v52 + 40);
    *(void *)(v52 + 40) = v51;

    uint64_t v157 = objc_opt_new();
    long long v163 = 0u;
    long long v164 = 0u;
    long long v165 = 0u;
    long long v166 = 0u;
    uint64_t v56 = objc_msgSend_share(*(void **)(a1 + 32), v54, v55);
    uint64_t v59 = objc_msgSend_participants(v56, v57, v58);

    uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v59, v60, (uint64_t)&v163, v169, 16);
    if (v61)
    {
      uint64_t v64 = v61;
      uint64_t v65 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
      uint64_t v66 = *(void *)v164;
      uint64_t v67 = (os_log_t *)MEMORY[0x1E4F1A500];
      do
      {
        uint64_t v68 = 0;
        do
        {
          if (*(void *)v164 != v66) {
            objc_enumerationMutation(v59);
          }
          uint64_t v69 = *(void **)(*((void *)&v163 + 1) + 8 * v68);
          uint64_t v70 = objc_msgSend_protectionInfo(v69, v62, v63);

          if (v70)
          {
            if (*v65 != -1) {
              dispatch_once(v65, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            os_log_t v71 = *v67;
            if (os_log_type_enabled(*v67, OS_LOG_TYPE_INFO))
            {
              uint64_t v73 = v71;
              uint64_t v76 = objc_msgSend_participantID(v69, v74, v75);
              CFTypeRef v79 = objc_msgSend_shareID(*(void **)(v158 + 32), v77, v78);
              *(_DWORD *)buf = 138412546;
              uint64_t v171 = v76;
              __int16 v172 = 2112;
              uint64_t v173 = v79;
              _os_log_impl(&dword_1C4CFF000, v73, OS_LOG_TYPE_INFO, "Removing protectionInfo from existing share participant %@ because share PCS was re-created for share %@.", buf, 0x16u);
            }
            objc_msgSend_setProtectionInfo_(v69, v72, 0);
            if (objc_msgSend_role(v69, v80, v81) != 1 && (objc_msgSend_isCurrentUser(v69, v62, v63) & 1) == 0) {
              objc_msgSend_addObject_(v157, v62, (uint64_t)v69);
            }
          }
          ++v68;
        }
        while (v64 != v68);
        uint64_t v64 = objc_msgSend_countByEnumeratingWithState_objects_count_(v59, v62, (uint64_t)&v163, v169, 16);
      }
      while (v64);
    }

    long long v161 = 0u;
    long long v162 = 0u;
    long long v159 = 0u;
    long long v160 = 0u;
    id v82 = v157;
    uint64_t v84 = objc_msgSend_countByEnumeratingWithState_objects_count_(v82, v83, (uint64_t)&v159, v168, 16);
    a1 = v158;
    if (v84)
    {
      uint64_t v85 = v84;
      uint64_t v86 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
      uint64_t v87 = *(void *)v160;
      id v88 = (os_log_t *)MEMORY[0x1E4F1A500];
      do
      {
        uint64_t v89 = 0;
        do
        {
          if (*(void *)v160 != v87) {
            objc_enumerationMutation(v82);
          }
          uint64_t v90 = *(void **)(*((void *)&v159 + 1) + 8 * v89);
          if (*v86 != -1) {
            dispatch_once(v86, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          os_log_t v91 = *v88;
          if (os_log_type_enabled(*v88, OS_LOG_TYPE_INFO))
          {
            __int16 v94 = v91;
            v97 = objc_msgSend_participantID(v90, v95, v96);
            uint64_t v100 = objc_msgSend_shareID(*(void **)(a1 + 32), v98, v99);
            *(_DWORD *)buf = 138412546;
            uint64_t v171 = v97;
            __int16 v172 = 2112;
            uint64_t v173 = v100;
            _os_log_impl(&dword_1C4CFF000, v94, OS_LOG_TYPE_INFO, "Removing and re-adding existing share participant %@ because share PCS was re-created for share %@.", buf, 0x16u);

            a1 = v158;
          }
          id v101 = objc_msgSend_share(*(void **)(a1 + 32), v92, v93);
          objc_msgSend_removeParticipant_(v101, v102, (uint64_t)v90);

          uint64_t v105 = objc_msgSend_share(*(void **)(a1 + 32), v103, v104);
          objc_msgSend_addParticipant_(v105, v106, (uint64_t)v90);

          ++v89;
        }
        while (v85 != v89);
        uint64_t v85 = objc_msgSend_countByEnumeratingWithState_objects_count_(v82, v107, (uint64_t)&v159, v168, 16);
      }
      while (v85);
    }

    uint64_t v9 = v155;
    id v5 = v156;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)
    && (objc_msgSend_CKIsObjectNotFoundError(v9, v39, v40) & 1) == 0)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v9);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1C4EA981C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend__prepareDependentPCSUpdateIfNeededForShareWithSharePCS_error_(WeakRetained, v2, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  id v5 = objc_msgSend_operation(WeakRetained, v3, v4);
  uint64_t v8 = objc_msgSend_stateTransitionGroup(v5, v6, v7);
  dispatch_group_leave(v8);
}

void sub_1C4EA9B4C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  objc_msgSend_encryptedPublicSharingKey(a2, v6, v7);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v8, v5);
}

void sub_1C4EAAC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  objc_destroyWeak(v29);
  _Block_object_dispose(&a29, 8);
  objc_destroyWeak((id *)(v30 - 160));
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C4EAAC54(uint64_t a1, void *a2, void *a3)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  uint64_t v10 = objc_msgSend_pcs(v5, v8, v9);
  if (!v6 && v10)
  {
    uint64_t v13 = objc_msgSend_copy(v5, v11, v12);
    uint64_t v16 = objc_msgSend_share(*(void **)(a1 + 40), v14, v15);
    uint64_t v19 = objc_msgSend_currentUserParticipant(v16, v17, v18);
    uint64_t v22 = objc_msgSend_role(v19, v20, v21);

    if (v22 == 1)
    {
      long long v23 = (void *)MEMORY[0x1E4F1A550];
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v24 = (os_log_t *)MEMORY[0x1E4F1A500];
      uint64_t v25 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v69 = v25;
        uint64_t v72 = objc_msgSend_shareID(WeakRetained, v70, v71);
        *(_DWORD *)buf = 138412290;
        uint64_t v75 = v72;
        _os_log_debug_impl(&dword_1C4CFF000, v69, OS_LOG_TYPE_DEBUG, "Adding invited PCS to zone PCS for zone-wide share %@", buf, 0xCu);
      }
      id v28 = objc_msgSend_pcsManager(WeakRetained, v26, v27);
      uint64_t v31 = objc_msgSend_pcs(*(void **)(a1 + 48), v29, v30);
      uint64_t v34 = objc_msgSend_pcs(v13, v32, v33);
      id v73 = 0;
      char v36 = objc_msgSend_addSharePCS_toRecordPCS_error_(v28, v35, v31, v34, &v73);
      id v6 = v73;

      if (v36)
      {
        if (*v23 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        os_log_t v39 = *v24;
        if (os_log_type_enabled(*v24, OS_LOG_TYPE_INFO))
        {
          long long v42 = *(void **)(a1 + 40);
          uint64_t v43 = v39;
          id v46 = objc_msgSend_shareID(v42, v44, v45);
          *(_DWORD *)buf = 138412290;
          uint64_t v75 = v46;
          _os_log_impl(&dword_1C4CFF000, v43, OS_LOG_TYPE_INFO, "Updating signing key on invited pcs for zone-wide share %@", buf, 0xCu);
        }
        uint64_t v47 = objc_msgSend_pcsManager(WeakRetained, v40, v41);
        uint64_t v50 = objc_msgSend_pcs(*(void **)(a1 + 48), v48, v49);
        uint64_t v53 = objc_msgSend_pcs(v13, v51, v52);
        LOBYTE(v50) = objc_msgSend_updateSigningIdentityOnPCS_usingSignedPCS_(v47, v54, v50, v53);

        if ((v50 & 1) != 0 || v6) {
          goto LABEL_22;
        }
        uint64_t v57 = (void *)MEMORY[0x1E4F1A280];
        uint64_t v58 = *MEMORY[0x1E4F19DD8];
        uint64_t v59 = objc_msgSend_shareID(WeakRetained, v55, v56);
        objc_msgSend_errorWithDomain_code_format_(v57, v60, v58, 5001, @"Couldn't update signing key on invited pcs for share %@", v59);
        goto LABEL_21;
      }
      if (!v6)
      {
        uint64_t v61 = (void *)MEMORY[0x1E4F1A280];
        uint64_t v62 = *MEMORY[0x1E4F19DD8];
        uint64_t v59 = objc_msgSend_shareID(WeakRetained, v37, v38);
        objc_msgSend_errorWithDomain_code_format_(v61, v63, v62, 5001, @"Couldn't add invited PCS to zone PCS for zone-wide share %@", v59);
LABEL_21:
        id v6 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      id v6 = 0;
    }
LABEL_22:
    uint64_t v64 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v65 = *(void **)(v64 + 40);
    *(void *)(v64 + 40) = v13;

    goto LABEL_23;
  }
  if (!v6)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v11, *MEMORY[0x1E4F19DD8], 5001, @"Didn't get PCS data for zone %@", *(void *)(a1 + 32));
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_23:
  uint64_t v66 = *(void *)(*(void *)(a1 + 72) + 8);
  uint64_t v67 = *(void **)(v66 + 40);
  *(void *)(v66 + 40) = v6;
  id v68 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1C4EAB014(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v4 = WeakRetained;
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    uint64_t v5 = objc_msgSend__rollShareAndZonePCSIfNeededForSharePCS_zonePCSData_(WeakRetained, v3, *(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
    {
      uint64_t v9 = objc_msgSend__handleSharePCSData_zonePCSData_(v4, v8, *(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;
    }
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v12 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    id v14 = v12;
    uint64_t v17 = objc_msgSend_shareID(v4, v15, v16);
    uint64_t v18 = (void *)v17;
    uint64_t v19 = @" with error: ";
    uint64_t v20 = *(__CFString **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (!v20)
    {
      uint64_t v19 = &stru_1F2044F30;
      uint64_t v20 = &stru_1F2044F30;
    }
    int v32 = 138412802;
    uint64_t v33 = v17;
    __int16 v34 = 2114;
    __int16 v35 = v19;
    __int16 v36 = 2112;
    __int16 v37 = v20;
    _os_log_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_INFO, "Done updating pcs for share %@%{public}@%@", (uint8_t *)&v32, 0x20u);
  }
  uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v21)
  {
    objc_msgSend_setError_(v4, v13, v21);
    objc_msgSend_setState_(v4, v22, 12);
  }
  else
  {
    objc_msgSend_setState_(v4, v13, 2);
  }
  uint64_t v25 = objc_msgSend_pcsGroup(v4, v23, v24);
  dispatch_group_leave(v25);

  id v28 = objc_msgSend_operation(v4, v26, v27);
  uint64_t v31 = objc_msgSend_stateTransitionGroup(v28, v29, v30);
  dispatch_group_leave(v31);
}

void sub_1C4EAB3D0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4EAB3EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v7 = WeakRetained;
  if (v3)
  {
    objc_msgSend_setError_(WeakRetained, v5, (uint64_t)v3);
    objc_msgSend_setState_(v7, v8, 12);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v9 = objc_msgSend_operation(WeakRetained, v5, v6);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = sub_1C4EAB528;
    v13[3] = &unk_1E64F4C78;
    objc_copyWeak(&v17, (id *)(a1 + 48));
    id v16 = *(id *)(a1 + 40);
    id v10 = v9;
    uint64_t v11 = *(void *)(a1 + 32);
    id v14 = v10;
    uint64_t v15 = v11;
    objc_msgSend__addPublicKeyToSelfParticipantWithCompletionHandler_(v7, v12, (uint64_t)v13);

    objc_destroyWeak(&v17);
  }
}

void sub_1C4EAB514(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1C4EAB528(uint64_t a1, void *a2)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v6 = WeakRetained;
  if (!v3)
  {
    id v106 = 0;
    char v8 = objc_msgSend__setupParticipantsProtectionInfos_(WeakRetained, v5, (uint64_t)&v106);
    id v9 = v106;
    id v11 = v9;
    if (v8)
    {
      id v105 = v9;
      char updated = objc_msgSend__updateSharePublicPCSWithError_(v6, v10, (uint64_t)&v105);
      id v13 = v105;

      if ((updated & 1) == 0)
      {
        objc_msgSend_setError_(v6, v14, (uint64_t)v13);
        objc_msgSend_setState_(v6, v50, 12);
        (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
        id v11 = v13;
        goto LABEL_37;
      }
      id v104 = v13;
      char v15 = objc_msgSend__serializePCSDataForShareWithError_(v6, v14, (uint64_t)&v104);
      id v11 = v104;

      if (v15)
      {
        id v94 = v11;
        id v17 = objc_msgSend_container(*(void **)(a1 + 32), v10, v16);
        uint64_t v20 = objc_msgSend_options(v17, v18, v19);
        if (objc_msgSend_useAnonymousToServerShareParticipants(v20, v21, v22))
        {
          uint64_t v25 = objc_msgSend_share(v6, v23, v24);
          id v28 = objc_msgSend_currentUserParticipant(v25, v26, v27);
          uint64_t v31 = objc_msgSend_role(v28, v29, v30);

          if (v31 != 1)
          {
LABEL_24:
            long long v98 = 0u;
            long long v99 = 0u;
            long long v96 = 0u;
            long long v97 = 0u;
            uint64_t v51 = objc_msgSend_share(v6, v32, v33);
            uint64_t v54 = objc_msgSend_addedParticipants(v51, v52, v53);

            uint64_t v56 = objc_msgSend_countByEnumeratingWithState_objects_count_(v54, v55, (uint64_t)&v96, v107, 16);
            if (v56)
            {
              uint64_t v59 = v56;
              uint64_t v60 = *(void *)v97;
              do
              {
                for (uint64_t i = 0; i != v59; ++i)
                {
                  if (*(void *)v97 != v60) {
                    objc_enumerationMutation(v54);
                  }
                  uint64_t v62 = *(void **)(*((void *)&v96 + 1) + 8 * i);
                  uint64_t v63 = objc_msgSend_container(*(void **)(a1 + 32), v57, v58);
                  uint64_t v66 = objc_msgSend_entitlements(v63, v64, v65);
                  int hasOutOfProcessUIEntitlement = objc_msgSend_hasOutOfProcessUIEntitlement(v66, v67, v68);
                  objc_msgSend_setCreatedInProcess_(v62, v70, hasOutOfProcessUIEntitlement ^ 1u);
                }
                uint64_t v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(v54, v57, (uint64_t)&v96, v107, 16);
              }
              while (v59);
            }

            id v73 = objc_msgSend_sharePCSData(v6, v71, v72);
            uint64_t v76 = objc_msgSend_invitedPCS(v73, v74, v75);

            if (v76)
            {
              CFTypeRef v79 = objc_msgSend_share(v6, v77, v78);
              id v82 = objc_msgSend_sharePCSData(v6, v80, v81);
              uint64_t v85 = objc_msgSend_invitedPCS(v82, v83, v84);
              id v88 = objc_msgSend_pcsManager(v6, v86, v87);
              objc_msgSend__decryptPersonalInfoWithPCSBlob_pcsManager_(v79, v89, v85, v88);
            }
            objc_msgSend__alignParticipantPermissions(v6, v77, v78);
            if (objc_msgSend_state(v6, v90, v91) == 5)
            {
              uint64_t v92 = *(void *)(a1 + 48);
              v95.receiver = *(id *)(a1 + 40);
              v95.super_class = (Class)CKDModifyShareHandler;
              objc_msgSendSuper2(&v95, sel_prepareForSaveWithCompletionHandler_, v92);
            }
            else
            {
              (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
            }
            id v11 = v94;
            goto LABEL_37;
          }
          long long v102 = 0u;
          long long v103 = 0u;
          long long v100 = 0u;
          long long v101 = 0u;
          __int16 v34 = objc_msgSend_share(v6, v32, v33);
          id v17 = objc_msgSend_allParticipants(v34, v35, v36);

          uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v37, (uint64_t)&v100, v108, 16);
          if (v38)
          {
            uint64_t v41 = v38;
            uint64_t v93 = v6;
            uint64_t v42 = *(void *)v101;
            uint64_t v43 = (unsigned char *)MEMORY[0x1E4F1A4E0];
            do
            {
              for (uint64_t j = 0; j != v41; ++j)
              {
                if (*(void *)v101 != v42) {
                  objc_enumerationMutation(v17);
                }
                uint64_t v45 = *(void **)(*((void *)&v100 + 1) + 8 * j);
                if (objc_msgSend_role(v45, v39, v40) != 1)
                {
                  objc_msgSend_setIsAnonymousInvitedParticipant_(v45, v39, 1);
                  if (*v43)
                  {
                    id v46 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v39, v40);
                    uint64_t v48 = objc_msgSend_objectForKeyedSubscript_(v46, v47, @"ForceSendPublicKeyForAnonymousParticipants");

                    if (v48) {
                      objc_msgSend_setForceSendPublicKeyForAnonymousParticipants_(v45, v39, 1);
                    }
                  }
                }
              }
              uint64_t v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v39, (uint64_t)&v100, v108, 16);
            }
            while (v41);
            uint64_t v6 = v93;
            id v3 = 0;
          }
        }
        else
        {
        }
        goto LABEL_24;
      }
    }
    objc_msgSend_setError_(v6, v10, (uint64_t)v11);
    objc_msgSend_setState_(v6, v49, 12);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_37:

    goto LABEL_38;
  }
  objc_msgSend_setError_(WeakRetained, v5, (uint64_t)v3);
  objc_msgSend_setState_(v6, v7, 12);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_38:
}

void sub_1C4EABC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4EABCBC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!a2 || v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v18 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void **)(a1 + 32);
      uint64_t v26 = v18;
      uint64_t v29 = objc_msgSend_participantID(v25, v27, v28);
      int v32 = objc_msgSend_shareID(WeakRetained, v30, v31);
      *(_DWORD *)buf = 138543874;
      __int16 v34 = v29;
      __int16 v35 = 2114;
      uint64_t v36 = v32;
      __int16 v37 = 2114;
      id v38 = v5;
      _os_log_error_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_ERROR, "Failed to decrypt self participant PCS for participant %{public}@ on share %{public}@, error: %{public}@", buf, 0x20u);

      if (v5) {
        goto LABEL_17;
      }
    }
    else if (v5)
    {
LABEL_17:
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

      goto LABEL_18;
    }
    uint64_t v21 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v22 = *MEMORY[0x1E4F19DD8];
    long long v23 = objc_msgSend_participantID(*(void **)(a1 + 32), v19, v20);
    objc_msgSend_errorWithDomain_code_format_(v21, v24, v22, 5005, @"Couldn't decrypt self PPPCS for participant %@ when setting up other participants", v23);
    id v5 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_17;
  }
  uint64_t v7 = (const void *)PCSFPGetOwnerIdentity();
  WeakRetained[19] = v7;
  if (v7) {
    CFRetain(v7);
  }
  char v8 = (const void *)WeakRetained[18];
  if (v8) {
    CFRetain(v8);
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v9 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    id v10 = *(void **)(a1 + 32);
    id v11 = v9;
    id v14 = objc_msgSend_participantID(v10, v12, v13);
    id v17 = objc_msgSend_shareID(WeakRetained, v15, v16);
    *(_DWORD *)buf = 138543874;
    __int16 v34 = a2;
    __int16 v35 = 2112;
    uint64_t v36 = v14;
    __int16 v37 = 2114;
    id v38 = v17;
    _os_log_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_INFO, "Successfully decrypted self participant PCS %{public}@ for participant %@ on share %{public}@", buf, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_18:
}

void sub_1C4EAE650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4EAE67C(uint64_t a1, char a2, void *a3)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v11 = objc_msgSend_operation(WeakRetained, v7, v8);
  if (v5 || (a2 & 1) == 0)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v33 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v36 = v33;
      uint64_t v39 = objc_msgSend_operationID(v11, v37, v38);
      *(_DWORD *)buf = 138543618;
      id v73 = v39;
      __int16 v74 = 2112;
      id v75 = v5;
      _os_log_impl(&dword_1C4CFF000, v36, OS_LOG_TYPE_INFO, "User key sync failed for operation %{public}@ with error %@", buf, 0x16u);
    }
    if (!v5)
    {
      uint64_t v40 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v41 = *MEMORY[0x1E4F19DD8];
      uint64_t v42 = objc_msgSend_shareID(WeakRetained, v34, v35);
      objc_msgSend_errorWithDomain_code_format_(v40, v43, v41, 5000, @"Couldn't get a current public CloudDocs identity for the owner on share %@", v42);
      id v5 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    uint64_t v12 = objc_msgSend_pcsManager(WeakRetained, v9, v10);
    uint64_t v13 = *(void *)(a1 + 56);
    id v71 = 0;
    char v15 = objc_msgSend_participantPublicKeyForServiceType_error_(v12, v14, v13, &v71);
    id v5 = v71;
    uint64_t v18 = objc_msgSend_userIdentity(*(void **)(a1 + 32), v16, v17);
    objc_msgSend_setPublicSharingKey_(v18, v19, (uint64_t)v15);

    uint64_t v20 = (void *)MEMORY[0x1E4F1A550];
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v21 = (os_log_t *)MEMORY[0x1E4F1A500];
    uint64_t v22 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = v22;
      uint64_t v28 = objc_msgSend_operationID(v11, v26, v27);
      uint64_t v29 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      id v73 = v28;
      __int16 v74 = 2112;
      id v75 = v29;
      _os_log_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_INFO, "User key sync succeeded for operation %{public}@. Obtained the public sharing key for participant %@ on a retry", buf, 0x16u);
    }
    uint64_t v30 = objc_msgSend_protectionInfo(*(void **)(a1 + 32), v23, v24);
    if (v30)
    {
    }
    else
    {
      uint64_t v44 = objc_msgSend_share(WeakRetained, v31, v32);
      uint64_t v47 = objc_msgSend_addedParticipants(v44, v45, v46);
      char v49 = objc_msgSend_containsObject_(v47, v48, *(void *)(a1 + 32));

      if ((v49 & 1) == 0)
      {
        objc_msgSend_setIsALegacyPublicShareThatNeedsOwnerPPPCSUpgrade_(WeakRetained, v50, 1);
        uint64_t v53 = objc_msgSend_share(WeakRetained, v51, v52);
        uint64_t v56 = objc_msgSend_privatePCS(v53, v54, v55);

        if (v56)
        {
          uint64_t v59 = *(void *)(a1 + 32);
          uint64_t v60 = objc_msgSend_share(WeakRetained, v57, v58);
          uint64_t v63 = objc_msgSend_privatePCS(v60, v61, v62);
          uint64_t v65 = objc_msgSend__ensurePrivateParticipant_isInInvitedSharePCS_(WeakRetained, v64, v59, v63);

          id v5 = (id)v65;
        }
        else
        {
          if (*v20 != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          os_log_t v66 = *v21;
          if (os_log_type_enabled(*v21, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v67 = v66;
            uint64_t v70 = objc_msgSend_shareID(WeakRetained, v68, v69);
            *(_DWORD *)buf = 138412290;
            id v73 = v70;
            _os_log_debug_impl(&dword_1C4CFF000, v67, OS_LOG_TYPE_DEBUG, "Couldn't get a private PCS for the share %@, so we can't upgrade our owner's PPPCS", buf, 0xCu);
          }
        }
      }
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_1C4EAFF4C(uint64_t a1)
{
  PCSPublicIdentityGetPublicID();
  uint64_t v2 = (const char *)objc_claimAutoreleasedReturnValue();
  if (v2) {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v2, (uint64_t)v2);
  }
  return MEMORY[0x1F41817F8]();
}

id sub_1C4EB3554(uint64_t a1, void *a2, uint64_t a3)
{
  id v3 = objc_msgSend_userIdentity(a2, (const char *)a2, a3);
  uint64_t v6 = objc_msgSend_lookupInfo(v3, v4, v5);

  if (objc_msgSend_lookupField(v6, v7, v8)) {
    id v9 = v6;
  }
  else {
    id v9 = 0;
  }
  id v10 = v9;

  return v10;
}

void sub_1C4EB4100()
{
  id v0 = (void *)qword_1EBBCFD28;
  qword_1EBBCFD28 = (uint64_t)&unk_1F20ABE98;
}

uint64_t sub_1C4EB4250(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPSubscription);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (sub_1C4F3D120((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4EB4768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4EB4780(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4EB4790(uint64_t a1)
{
}

uint64_t sub_1C4EB4798()
{
  return 1;
}

void sub_1C4EB47A0(uint64_t a1, void *a2, uint64_t a3)
{
  id v11 = a2;
  if (v11)
  {
    id v5 = objc_alloc(MEMORY[0x1E4F730C8]);
    uint64_t v7 = objc_msgSend_initWithSource_(v5, v6, (uint64_t)v11);
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    unsigned int v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    objc_msgSend_setFlags_(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v10, 391);
  }
  else
  {
    NSLog(&cfstr_CouldnTOpenOsL.isa, a3);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1C4EB4970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4EB4988(uint64_t a1, void *a2, uint64_t a3)
{
  id v11 = a2;
  if (v11)
  {
    id v5 = objc_alloc(MEMORY[0x1E4F730A8]);
    uint64_t v7 = objc_msgSend_initWithLiveSource_(v5, v6, (uint64_t)v11);
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    unsigned int v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    objc_msgSend_setFlags_(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v10, 391);
  }
  else
  {
    NSLog(&cfstr_CouldnTOpenOsL_0.isa, a3);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1C4EB5114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id location)
{
  objc_destroyWeak(v41);
  objc_destroyWeak(v40);
  objc_destroyWeak(v39);
  objc_destroyWeak(v38);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4EB519C(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = (void *)MEMORY[0x1C8789E70]();
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v8 = objc_msgSend_streamObservers(WeakRetained, v6, v7, 0);
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v15, v19, 16);
  if (v10)
  {
    uint64_t v12 = v10;
    uint64_t v13 = *(void *)v16;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v16 != v13) {
          objc_enumerationMutation(v8);
        }
        objc_msgSend__handleEvent_(*(void **)(*((void *)&v15 + 1) + 8 * v14++), v11, (uint64_t)v3);
      }
      while (v12 != v14);
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v15, v19, 16);
    }
    while (v12);
  }
}

void sub_1C4EB52C8(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = (void *)MEMORY[0x1C8789E70]();
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v8 = objc_msgSend_streamObservers(WeakRetained, v6, v7, 0);
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v15, v19, 16);
  if (v10)
  {
    uint64_t v12 = v10;
    uint64_t v13 = *(void *)v16;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v16 != v13) {
          objc_enumerationMutation(v8);
        }
        objc_msgSend__handleEvent_(*(void **)(*((void *)&v15 + 1) + 8 * v14++), v11, (uint64_t)v3);
      }
      while (v12 != v14);
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v15, v19, 16);
    }
    while (v12);
  }
}

void sub_1C4EB53F4(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v6 = objc_msgSend_streamObservers(WeakRetained, v4, v5, 0);
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v21, v25, 16);
  if (v8)
  {
    uint64_t v11 = v8;
    uint64_t v12 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v22 != v12) {
          objc_enumerationMutation(v6);
        }
        objc_msgSend_finish(*(void **)(*((void *)&v21 + 1) + 8 * i), v9, v10);
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v21, v25, 16);
    }
    while (v11);
  }

  if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 4)
  {
    long long v16 = 0;
  }
  else
  {
    long long v16 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v14, @"IMadeUpThisErrorDomain", a2, 0);
  }
  long long v17 = objc_msgSend_completionHandler(WeakRetained, v14, v15);

  if (v17)
  {
    objc_msgSend_completionHandler(WeakRetained, v18, v19);
    uint64_t v20 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
    ((void (**)(void, void *))v20)[2](v20, v16);
  }
}

void sub_1C4EB5574(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v6 = objc_msgSend_liveStream(WeakRetained, v4, v5);

  if (v6 && (a2 & 0xFFFFFFFFFFFFFFFELL) == 4)
  {
    unsigned int v9 = objc_msgSend_liveStream(WeakRetained, v7, v8);
    objc_msgSend_activate(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

uint64_t sub_1C4EB5618(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4EB5760(void *a1, const char *a2, void *a3)
{
  objc_msgSend_dataUsingEncoding_(a3, a2, 4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(a1, v4, (uint64_t)v5);
}

void sub_1C4EB57BC(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  objc_msgSend_description(a1, v5, v6);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeString_(v4, v7, (uint64_t)v8);
}

void sub_1C4EB5820(void *a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = sub_1C4EB5A20();
  objc_msgSend_writeData_(v5, v7, (uint64_t)v6);

  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v10 = objc_msgSend_allKeys(a1, v8, v9);
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v33, v37, 16);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v34;
    uint64_t v15 = (a4 + 1);
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v34 != v14) {
          objc_enumerationMutation(v10);
        }
        long long v17 = *(void **)(*((void *)&v33 + 1) + 8 * v16);
        long long v18 = (void *)MEMORY[0x1C8789E70]();
        uint64_t v19 = sub_1C4EB5A74();
        objc_msgSend_writeData_(v5, v20, (uint64_t)v19);

        sub_1C4EB5AC8(v15, v5);
        objc_msgSend__CKLogToFileHandle_atDepth_(v17, v21, (uint64_t)v5, v15);
        long long v22 = sub_1C4EB5D2C();
        objc_msgSend_writeData_(v5, v23, (uint64_t)v22);

        uint64_t v25 = objc_msgSend_objectForKeyedSubscript_(a1, v24, (uint64_t)v17);
        objc_msgSend__CKLogToFileHandle_atDepth_(v25, v26, (uint64_t)v5, v15);

        ++v16;
      }
      while (v13 != v16);
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v27, (uint64_t)&v33, v37, 16);
    }
    while (v13);
  }

  uint64_t v28 = sub_1C4EB5A74();
  objc_msgSend_writeData_(v5, v29, (uint64_t)v28);

  sub_1C4EB5AC8(a4, v5);
  uint64_t v30 = sub_1C4EB5D80();
  objc_msgSend_writeData_(v5, v31, (uint64_t)v30);
}

id sub_1C4EB5A20()
{
  if (qword_1EBBCFD60 != -1) {
    dispatch_once(&qword_1EBBCFD60, &unk_1F2043A50);
  }
  id v0 = (void *)qword_1EBBCFD58;
  return v0;
}

id sub_1C4EB5A74()
{
  if (qword_1EBBCFD70 != -1) {
    dispatch_once(&qword_1EBBCFD70, &unk_1F2043A70);
  }
  id v0 = (void *)qword_1EBBCFD68;
  return v0;
}

void sub_1C4EB5AC8(int a1, void *a2)
{
  id v12 = a2;
  switch(a1)
  {
    case 0:
      break;
    case 1:
      uint64_t v5 = sub_1C4EB98AC();
      goto LABEL_25;
    case 2:
      if (qword_1EBBCFD90 != -1) {
        dispatch_once(&qword_1EBBCFD90, &unk_1F2043AB0);
      }
      objc_msgSend_writeData_(v12, v4, qword_1EBBCFD88);
      break;
    case 3:
      if (qword_1EBBCFDA0 != -1) {
        dispatch_once(&qword_1EBBCFDA0, &unk_1F2043AD0);
      }
      objc_msgSend_writeData_(v12, v4, qword_1EBBCFD98);
      break;
    case 4:
      if (qword_1EBBCFDB0 != -1) {
        dispatch_once(&qword_1EBBCFDB0, &unk_1F2043AF0);
      }
      objc_msgSend_writeData_(v12, v4, qword_1EBBCFDA8);
      break;
    case 5:
      if (qword_1EBBCFDC0 != -1) {
        dispatch_once(&qword_1EBBCFDC0, &unk_1F2043B10);
      }
      objc_msgSend_writeData_(v12, v4, qword_1EBBCFDB8);
      break;
    case 6:
      if (qword_1EBBCFDD0 != -1) {
        dispatch_once(&qword_1EBBCFDD0, &unk_1F2043B30);
      }
      objc_msgSend_writeData_(v12, v4, qword_1EBBCFDC8);
      break;
    case 7:
      if (qword_1EBBCFDE0 != -1) {
        dispatch_once(&qword_1EBBCFDE0, &unk_1F2043B50);
      }
      objc_msgSend_writeData_(v12, v4, qword_1EBBCFDD8);
      break;
    case 8:
      uint64_t v5 = sub_1C4EB9900();
LABEL_25:
      uint64_t v11 = (void *)v5;
      objc_msgSend_writeData_(v12, v6, v5);

      break;
    default:
      uint64_t v7 = sub_1C4EB9900();
      objc_msgSend_writeData_(v12, v8, (uint64_t)v7);

      if (a1 >= 9)
      {
        do
        {
          uint64_t v9 = sub_1C4EB98AC();
          objc_msgSend_writeData_(v12, v10, (uint64_t)v9);

          --v2;
        }
        while (v2);
      }
      break;
  }
}

id sub_1C4EB5D2C()
{
  if (qword_1EBBCFE00 != -1) {
    dispatch_once(&qword_1EBBCFE00, &unk_1F2043B90);
  }
  id v0 = (void *)qword_1EBBCFDF8;
  return v0;
}

id sub_1C4EB5D80()
{
  if (qword_1EBBCFE10 != -1) {
    dispatch_once(&qword_1EBBCFE10, &unk_1F2043BB0);
  }
  id v0 = (void *)qword_1EBBCFE08;
  return v0;
}

void sub_1C4EB5DD4(void *a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = sub_1C4EB6188();
  objc_msgSend_writeData_(v6, v8, (uint64_t)v7);

  uint64_t v9 = sub_1C4EB5A74();
  objc_msgSend_writeData_(v6, v10, (uint64_t)v9);

  int v35 = a4;
  uint64_t v11 = (a4 + 1);
  sub_1C4EB5AC8(a4 + 1, v6);
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v12 = a1;
  uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v37, v41, 16);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)v38;
    do
    {
      uint64_t v18 = 0;
      uint64_t v36 = v16;
      uint64_t v19 = v16 + 1;
      do
      {
        if (*(void *)v38 != v17) {
          objc_enumerationMutation(v12);
        }
        uint64_t v20 = *(void **)(*((void *)&v37 + 1) + 8 * v18);
        long long v21 = (void *)MEMORY[0x1C8789E70]();
        objc_msgSend__CKLogToFileHandle_atDepth_(v20, v22, (uint64_t)v6, v11);
        if (v19 + v18 < (unint64_t)objc_msgSend_count(v12, v23, v24))
        {
          uint64_t v25 = sub_1C4EB61DC();
          objc_msgSend_writeData_(v6, v26, (uint64_t)v25);

          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            goto LABEL_10;
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            goto LABEL_10;
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            goto LABEL_10;
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                {
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) == 0)
                  {
                    objc_opt_class();
                    if ((objc_opt_isKindOfClass() & 1) == 0)
                    {
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) == 0)
                      {
                        objc_opt_class();
                        if ((objc_opt_isKindOfClass() & 1) == 0)
                        {
                          objc_opt_class();
                          if ((objc_opt_isKindOfClass() & 1) == 0)
                          {
                            objc_opt_class();
                            if ((objc_opt_isKindOfClass() & 1) == 0)
                            {
                              objc_opt_class();
                              if ((objc_opt_isKindOfClass() & 1) == 0)
                              {
LABEL_10:
                                uint64_t v27 = sub_1C4EB5A74();
                                objc_msgSend_writeData_(v6, v28, (uint64_t)v27);

                                sub_1C4EB5AC8(v11, v6);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v18;
      }
      while (v15 != v18);
      uint64_t v16 = v15 + v36;
      uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v29, (uint64_t)&v37, v41, 16);
      uint64_t v15 = v30;
    }
    while (v30);
  }

  uint64_t v31 = sub_1C4EB5A74();
  objc_msgSend_writeData_(v6, v32, (uint64_t)v31);

  sub_1C4EB5AC8(v35, v6);
  long long v33 = sub_1C4EB6230();
  objc_msgSend_writeData_(v6, v34, (uint64_t)v33);
}

id sub_1C4EB6188()
{
  if (qword_1EBBCFE20 != -1) {
    dispatch_once(&qword_1EBBCFE20, &unk_1F2043BD0);
  }
  id v0 = (void *)qword_1EBBCFE18;
  return v0;
}

id sub_1C4EB61DC()
{
  if (qword_1EBBCFE30 != -1) {
    dispatch_once(&qword_1EBBCFE30, &unk_1F2043BF0);
  }
  id v0 = (void *)qword_1EBBCFE28;
  return v0;
}

id sub_1C4EB6230()
{
  if (qword_1EBBCFE40 != -1) {
    dispatch_once(&qword_1EBBCFE40, &unk_1F2043C10);
  }
  id v0 = (void *)qword_1EBBCFE38;
  return v0;
}

uint64_t sub_1C4EB6284(uint64_t a1, const char *a2, void *a3)
{
  return objc_msgSend_writeString_(a3, a2, a1);
}

void sub_1C4EB6294(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (qword_1EBBCFE50 != -1) {
    dispatch_once(&qword_1EBBCFE50, &unk_1F2043C30);
  }
  objc_msgSend_writeData_(v5, v4, qword_1EBBCFE48);
  NSUInteger v6 = NSPageSize();
  uint64_t v9 = objc_msgSend_length(a1, v7, v8);
  if (v9)
  {
    unint64_t v11 = v9;
    unint64_t v12 = 0;
    uint64_t v13 = v9;
    do
    {
      uint64_t v14 = v13 - v6;
      id v15 = a1;
      objc_msgSend_bytes(v15, v16, v17);
      uint64_t v18 = CKHexCharFromBytes();
      id v19 = objc_alloc(MEMORY[0x1E4F1C9B8]);
      long long v21 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v19, v20, v18, 0, 1);
      objc_msgSend_writeData_(v5, v22, (uint64_t)v21);
      v12 += v6;

      uint64_t v13 = v14;
    }
    while (v12 < v11);
  }
  if (qword_1EBBCFE60 != -1) {
    dispatch_once(&qword_1EBBCFE60, &unk_1F2043C50);
  }
  objc_msgSend_writeData_(v5, v10, qword_1EBBCFE58);
}

id sub_1C4EB63EC()
{
  if (qword_1EBBCFD40 != -1) {
    dispatch_once(&qword_1EBBCFD40, &unk_1F2043A10);
  }
  id v0 = (void *)qword_1EBBCFD38;
  return v0;
}

uint64_t sub_1C4EB6440(uint64_t a1, const char *a2, uint64_t a3)
{
  qword_1EBBCFD38 = objc_msgSend_currentCalendar(MEMORY[0x1E4F1C9A8], a2, a3);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4EB6480(uint64_t a1, uint64_t a2, void *a3)
{
  id v14 = a3;
  if (qword_1EBBCFD50 != -1) {
    dispatch_once(&qword_1EBBCFD50, &unk_1F2043A30);
  }
  uint64_t v5 = *MEMORY[0x1E4F1A670];
  uint64_t v6 = objc_msgSend_objectForKey_((void *)qword_1EBBCFD48, v4, *MEMORY[0x1E4F1A670]);
  id v7 = (id)v6;
  if (!v6)
  {
    id v7 = objc_alloc_init(MEMORY[0x1E4F28C10]);
    objc_msgSend_setDateFormat_(v7, v8, @"yyyy-MM-dd HH:mm:ss ZZZ");
    uint64_t v6 = objc_msgSend_setObject_forKey_((void *)qword_1EBBCFD48, v9, (uint64_t)v7, v5);
  }
  uint64_t v10 = (void *)MEMORY[0x1C8789E70](v6);
  unint64_t v12 = objc_msgSend_stringFromDate_(v7, v11, a1);
  objc_msgSend_writeString_(v14, v13, (uint64_t)v12);
}

uint64_t sub_1C4EB6580()
{
  qword_1EBBCFD48 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1C998]);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4EB65BC(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  objc_msgSend_stringValue(a1, v5, v6);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeString_(v4, v7, (uint64_t)v8);
}

uint64_t sub_1C4EB6620(void *a1, int a2, Ivar v)
{
  Name = ivar_getName(v);
  TypeEncoding = ivar_getTypeEncoding(v);
  if (strncmp(Name, "_has", 4uLL) && *TypeEncoding != 123)
  {
    id v8 = NSString;
    uint64_t v9 = __toupper(Name[1]);
    objc_msgSend_stringWithFormat_(v8, v10, @"has%c%s", v9, Name + 2);
    unint64_t v11 = (NSString *)objc_claimAutoreleasedReturnValue();
    unint64_t v12 = NSSelectorFromString(v11);
    if (objc_opt_respondsToSelector())
    {
      uint64_t v13 = (objc_class *)objc_opt_class();
      IMP MethodImplementation = class_getMethodImplementation(v13, v12);
      if (MethodImplementation)
      {
        uint64_t v7 = ((uint64_t (*)(void *, const char *))MethodImplementation)(a1, v12);
LABEL_16:

        return v7;
      }
LABEL_10:
      uint64_t v7 = 0;
      goto LABEL_16;
    }
    uint64_t v15 = object_getIvar(a1, v);
    if (!v15) {
      goto LABEL_10;
    }
    uint64_t v16 = (void *)v15;
    if (objc_opt_respondsToSelector())
    {
      uint64_t v19 = objc_msgSend_count(v16, v17, v18);
    }
    else
    {
      if ((objc_opt_respondsToSelector() & 1) == 0)
      {
        uint64_t v7 = 1;
        goto LABEL_15;
      }
      uint64_t v19 = objc_msgSend_length(v16, v20, v21);
    }
    uint64_t v7 = v19 != 0;
LABEL_15:

    goto LABEL_16;
  }
  return 0;
}

void sub_1C4EB6780(char *a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = (objc_class *)objc_opt_class();
  id v8 = NSStringFromClass(v7);
  objc_msgSend_writeString_(v6, v9, (uint64_t)v8);

  uint64_t v10 = sub_1C4EB6F54();
  objc_msgSend_writeData_(v6, v11, (uint64_t)v10);

  unint64_t v12 = sub_1C4EB5A20();
  objc_msgSend_writeData_(v6, v13, (uint64_t)v12);

  HIDWORD(v98) = 0;
  id v14 = (objc_class *)objc_opt_class();
  uint64_t v15 = class_copyIvarList(v14, (unsigned int *)&v98 + 1);
  unint64_t v16 = 8 * HIDWORD(v98);
  uint64_t v17 = (Ivar *)((char *)&v96 - ((v16 + 15) & 0xFFFFFFFF0));
  if (v16 >= 0x200) {
    size_t v18 = 512;
  }
  else {
    size_t v18 = 8 * HIDWORD(v98);
  }
  bzero((char *)&v96 - ((v16 + 15) & 0xFFFFFFFF0), v18);
  if (!HIDWORD(v98)) {
    goto LABEL_57;
  }
  unint64_t v20 = 0;
  unsigned int v21 = 0;
  do
  {
    uint64_t v22 = (uint64_t)v15[v20];
    if (objc_msgSend__hasIvar_(a1, v19, v22)) {
      v17[v21++] = (Ivar)v22;
    }
    ++v20;
  }
  while (v20 < HIDWORD(v98));
  if (v21)
  {
    long long v96 = v15;
    long long v97 = (void **)&v96;
    uint64_t v23 = v21;
    LODWORD(v98) = a4;
    uint64_t v24 = (a4 + 1);
    do
    {
      uint64_t v25 = (void *)MEMORY[0x1C8789E70]();
      uint64_t v26 = sub_1C4EB5A74();
      objc_msgSend_writeData_(v6, v27, (uint64_t)v26);

      sub_1C4EB5AC8(v24, v6);
      uint64_t v28 = *v17;
      uint64_t v29 = ivar_getName(*v17) + 1;
      uint64_t v31 = objc_msgSend_stringWithUTF8String_(NSString, v30, (uint64_t)v29);
      objc_msgSend_writeString_(v6, v32, (uint64_t)v31);

      long long v33 = sub_1C4EB5D2C();
      objc_msgSend_writeData_(v6, v34, (uint64_t)v33);

      objc_msgSend_stringWithFormat_(NSString, v35, @"_%sCKLogValue", v29);
      uint64_t v36 = (NSString *)objc_claimAutoreleasedReturnValue();
      long long v37 = NSSelectorFromString(v36);
      if (objc_opt_respondsToSelector())
      {
        long long v38 = (objc_class *)objc_opt_class();
        IMP MethodImplementation = class_getMethodImplementation(v38, v37);
        if (MethodImplementation)
        {
          ((void (*)(char *, const char *))MethodImplementation)(a1, v37);
          id v41 = (id)objc_claimAutoreleasedReturnValue();
          if (v41) {
            goto LABEL_42;
          }
        }
      }
      int v42 = *ivar_getTypeEncoding(v28);
      if (v42 > 80)
      {
        switch(v42)
        {
          case 'c':
            uint64_t v45 = (void *)MEMORY[0x1E4F28ED0];
            ptrdiff_t Offset = ivar_getOffset(v28);
            uint64_t v48 = objc_msgSend_numberWithChar_(v45, v47, a1[Offset]);
            break;
          case 'd':
            uint64_t v67 = (void *)MEMORY[0x1E4F28ED0];
            ptrdiff_t v68 = ivar_getOffset(v28);
            uint64_t v48 = objc_msgSend_numberWithDouble_(v67, v69, v70, *(double *)&a1[v68]);
            break;
          case 'e':
          case 'g':
          case 'h':
          case 'j':
          case 'k':
          case 'm':
          case 'n':
          case 'o':
          case 'p':
          case 'r':
            goto LABEL_43;
          case 'f':
            id v71 = (void *)MEMORY[0x1E4F28ED0];
            LODWORD(v72) = *(_DWORD *)&a1[ivar_getOffset(v28)];
            uint64_t v48 = objc_msgSend_numberWithFloat_(v71, v73, v74, v72);
            break;
          case 'i':
            id v75 = (void *)MEMORY[0x1E4F28ED0];
            ptrdiff_t v76 = ivar_getOffset(v28);
            uint64_t v48 = objc_msgSend_numberWithInt_(v75, v77, *(unsigned int *)&a1[v76]);
            break;
          case 'l':
            uint64_t v78 = (void *)MEMORY[0x1E4F28ED0];
            ptrdiff_t v79 = ivar_getOffset(v28);
            uint64_t v48 = objc_msgSend_numberWithLong_(v78, v80, *(void *)&a1[v79]);
            break;
          case 'q':
            uint64_t v81 = (void *)MEMORY[0x1E4F28ED0];
            ptrdiff_t v82 = ivar_getOffset(v28);
            uint64_t v48 = objc_msgSend_numberWithLongLong_(v81, v83, *(void *)&a1[v82]);
            break;
          case 's':
            uint64_t v84 = (void *)MEMORY[0x1E4F28ED0];
            ptrdiff_t v85 = ivar_getOffset(v28);
            uint64_t v48 = objc_msgSend_numberWithShort_(v84, v86, *(__int16 *)&a1[v85]);
            break;
          default:
            if (v42 == 81)
            {
              uint64_t v87 = (void *)MEMORY[0x1E4F28ED0];
              ptrdiff_t v88 = ivar_getOffset(v28);
              uint64_t v48 = objc_msgSend_numberWithUnsignedLongLong_(v87, v89, *(void *)&a1[v88], v96, v97, v98, v99);
            }
            else
            {
              if (v42 != 83) {
                goto LABEL_43;
              }
              uint64_t v52 = (void *)MEMORY[0x1E4F28ED0];
              ptrdiff_t v53 = ivar_getOffset(v28);
              uint64_t v48 = objc_msgSend_numberWithUnsignedShort_(v52, v54, *(unsigned __int16 *)&a1[v53]);
            }
            break;
        }
      }
      else
      {
        switch(v42)
        {
          case '@':
            uint64_t v43 = object_getIvar(a1, v28);
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              goto LABEL_19;
            }
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              goto LABEL_19;
            }
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              goto LABEL_19;
            }
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_56;
            }
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              goto LABEL_56;
            }
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              goto LABEL_56;
            }
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            {
LABEL_56:
              id v41 = v43;
            }
            else
            {
LABEL_19:
              objc_msgSend__CKLogToFileHandle_atDepth_(v43, v44, (uint64_t)v6, v24, v96);
              id v41 = 0;
            }

            if (v41) {
              goto LABEL_42;
            }
            goto LABEL_43;
          case 'A':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'H':
            goto LABEL_43;
          case 'B':
            uint64_t v55 = (void *)MEMORY[0x1E4F28ED0];
            ptrdiff_t v56 = ivar_getOffset(v28);
            uint64_t v48 = objc_msgSend_numberWithBool_(v55, v57, a1[v56]);
            break;
          case 'C':
            uint64_t v58 = (void *)MEMORY[0x1E4F28ED0];
            ptrdiff_t v59 = ivar_getOffset(v28);
            uint64_t v48 = objc_msgSend_numberWithUnsignedChar_(v58, v60, a1[v59]);
            break;
          case 'I':
            uint64_t v61 = (void *)MEMORY[0x1E4F28ED0];
            ptrdiff_t v62 = ivar_getOffset(v28);
            uint64_t v48 = objc_msgSend_numberWithUnsignedInt_(v61, v63, *(unsigned int *)&a1[v62]);
            break;
          default:
            if (v42 == 42)
            {
              uint64_t v64 = NSString;
              ptrdiff_t v65 = ivar_getOffset(v28);
              uint64_t v48 = objc_msgSend_stringWithUTF8String_(v64, v66, (uint64_t)&a1[v65]);
            }
            else
            {
              if (v42 != 76) {
                goto LABEL_43;
              }
              char v49 = (void *)MEMORY[0x1E4F28ED0];
              ptrdiff_t v50 = ivar_getOffset(v28);
              uint64_t v48 = objc_msgSend_numberWithUnsignedLong_(v49, v51, *(void *)&a1[v50]);
            }
            break;
        }
      }
      id v41 = (id)v48;
      if (v48)
      {
LABEL_42:
        objc_msgSend__CKLogToFileHandle_atDepth_(v41, v40, (uint64_t)v6, v24, v96);
      }
LABEL_43:

      ++v17;
      --v23;
    }
    while (v23);
    free(v96);
    uint64_t v92 = sub_1C4EB5A74();
    objc_msgSend_writeData_(v6, v93, (uint64_t)v92);

    sub_1C4EB5AC8(v98, v6);
    id v94 = sub_1C4EB5D80();
    objc_msgSend_writeData_(v6, v95, (uint64_t)v94);
  }
  else
  {
LABEL_57:
    uint64_t v90 = sub_1C4EB5D80();
    objc_msgSend_writeData_(v6, v91, (uint64_t)v90);

    free(v15);
  }
}

id sub_1C4EB6F54()
{
  if (qword_1EBBCFE70 != -1) {
    dispatch_once(&qword_1EBBCFE70, &unk_1F2043C70);
  }
  id v0 = (void *)qword_1EBBCFE68;
  return v0;
}

id sub_1C4EB74C0()
{
  if (qword_1EBBCFE80 != -1) {
    dispatch_once(&qword_1EBBCFE80, &unk_1F2043C90);
  }
  id v0 = (void *)qword_1EBBCFE78;
  return v0;
}

id sub_1C4EB7514()
{
  if (qword_1EBBCFE90 != -1) {
    dispatch_once(&qword_1EBBCFE90, &unk_1F2043CB0);
  }
  id v0 = (void *)qword_1EBBCFE88;
  return v0;
}

id sub_1C4EB7568()
{
  if (qword_1EBBCFEA0 != -1) {
    dispatch_once(&qword_1EBBCFEA0, &unk_1F2043CD0);
  }
  id v0 = (void *)qword_1EBBCFE98;
  return v0;
}

void sub_1C4EB76AC(void *a1, uint64_t a2, void *a3)
{
  id v24 = a3;
  id v4 = (void *)MEMORY[0x1C8789E70]();
  uint64_t v5 = sub_1C4EB7568();
  objc_msgSend_writeData_(v24, v6, (uint64_t)v5);

  uint64_t v9 = objc_msgSend_name(a1, v7, v8);
  objc_msgSend_writeString_(v24, v10, (uint64_t)v9);

  unint64_t v11 = sub_1C4EB7568();
  objc_msgSend_writeData_(v24, v12, (uint64_t)v11);

  uint64_t v13 = sub_1C4EB6F54();
  objc_msgSend_writeData_(v24, v14, (uint64_t)v13);

  uint64_t v15 = sub_1C4EB74C0();
  objc_msgSend_writeData_(v24, v16, (uint64_t)v15);

  uint64_t v19 = objc_msgSend_type(a1, v17, v18);
  if ((v19 - 1) >= 8)
  {
    objc_msgSend_stringWithFormat_(NSString, v20, @"(unknown: %i)", v19);
    unsigned int v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    unsigned int v21 = off_1E64F4E40[(int)v19 - 1];
  }
  objc_msgSend_writeString_(v24, v20, (uint64_t)v21);

  uint64_t v22 = sub_1C4EB7514();
  objc_msgSend_writeData_(v24, v23, (uint64_t)v22);
}

void sub_1C4EB780C(void *a1, uint64_t a2, void *a3, int a4)
{
  id v21 = a3;
  id v6 = (void *)MEMORY[0x1C8789E70]();
  if (objc_msgSend_hasValue(a1, v7, v8))
  {
    unint64_t v11 = objc_msgSend_value(a1, v9, v10);
    objc_msgSend__CKLogToFileHandle_atDepth_(v11, v12, (uint64_t)v21, (a4 + 1));
  }
  uint64_t v13 = sub_1C4EB78E0();
  objc_msgSend_writeData_(v21, v14, (uint64_t)v13);

  if (objc_msgSend_hasZoneIdentifier(a1, v15, v16))
  {
    uint64_t v19 = objc_msgSend_zoneIdentifier(a1, v17, v18);
    objc_msgSend__CKLogToFileHandle_atDepth_(v19, v20, (uint64_t)v21, (a4 + 1));
  }
}

id sub_1C4EB78E0()
{
  if (qword_1EBBCFEC0 != -1) {
    dispatch_once(&qword_1EBBCFEC0, &unk_1F2043D10);
  }
  id v0 = (void *)qword_1EBBCFEB8;
  return v0;
}

void sub_1C4EB7934(void *a1, uint64_t a2, void *a3, int a4)
{
  id v27 = a3;
  id v6 = (void *)MEMORY[0x1C8789E70]();
  if (objc_msgSend_hasValue(a1, v7, v8))
  {
    unint64_t v11 = objc_msgSend_value(a1, v9, v10);
    objc_msgSend__CKLogToFileHandle_atDepth_(v11, v12, (uint64_t)v27, (a4 + 1));
  }
  uint64_t v13 = sub_1C4EB78E0();
  objc_msgSend_writeData_(v27, v14, (uint64_t)v13);

  if (objc_msgSend_hasOwnerIdentifier(a1, v15, v16))
  {
    uint64_t v19 = objc_msgSend_ownerIdentifier(a1, v17, v18);
    objc_msgSend__CKLogToFileHandle_atDepth_(v19, v20, (uint64_t)v27, (a4 + 1));
  }
  if (objc_msgSend_hasDatabaseType(a1, v17, v18))
  {
    id v21 = sub_1C4EB78E0();
    objc_msgSend_writeData_(v27, v22, (uint64_t)v21);

    objc_msgSend_databaseType(a1, v23, v24);
    uint64_t v25 = CKDatabaseScopeString();
    objc_msgSend__CKLogToFileHandle_atDepth_(v25, v26, (uint64_t)v27, (a4 + 1));
  }
}

void sub_1C4EB803C(void *a1, uint64_t a2, void *a3, int a4)
{
  id v6 = (void *)MEMORY[0x1E4F1C9C8];
  id v7 = a3;
  objc_msgSend_time(a1, v8, v9);
  unint64_t v12 = objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(v6, v10, v11);
  uint64_t v13 = (a4 + 1);
  objc_msgSend__CKLogToFileHandle_atDepth_(v12, v14, (uint64_t)v7, v13);

  uint64_t v15 = sub_1C4EB6F54();
  objc_msgSend_writeData_(v7, v16, (uint64_t)v15);

  uint64_t v17 = sub_1C4EB74C0();
  objc_msgSend_writeData_(v7, v18, (uint64_t)v17);

  uint64_t v19 = (void *)MEMORY[0x1E4F28ED0];
  objc_msgSend_time(a1, v20, v21);
  uint64_t v24 = objc_msgSend_numberWithDouble_(v19, v22, v23);
  objc_msgSend__CKLogToFileHandle_atDepth_(v24, v25, (uint64_t)v7, v13);

  sub_1C4EB7514();
  id v27 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeData_(v7, v26, (uint64_t)v27);
}

uint64_t sub_1C4EB9824(uint64_t a1, const char *a2)
{
  qword_1EBBCFD58 = objc_msgSend_dataUsingEncoding_(@"{ ", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9868(uint64_t a1, const char *a2)
{
  qword_1EBBCFD68 = objc_msgSend_dataUsingEncoding_(@"\n", a2, 4);
  return MEMORY[0x1F41817F8]();
}

id sub_1C4EB98AC()
{
  if (qword_1EBBCFD80 != -1) {
    dispatch_once(&qword_1EBBCFD80, &unk_1F2043A90);
  }
  id v0 = (void *)qword_1EBBCFD78;
  return v0;
}

id sub_1C4EB9900()
{
  if (qword_1EBBCFDF0 != -1) {
    dispatch_once(&qword_1EBBCFDF0, &unk_1F2043B70);
  }
  id v0 = (void *)qword_1EBBCFDE8;
  return v0;
}

uint64_t sub_1C4EB9954(uint64_t a1, const char *a2)
{
  qword_1EBBCFD78 = objc_msgSend_dataUsingEncoding_(@"  ", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9998(uint64_t a1, const char *a2)
{
  qword_1EBBCFD88 = objc_msgSend_dataUsingEncoding_(@"    ", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB99DC(uint64_t a1, const char *a2)
{
  qword_1EBBCFD98 = objc_msgSend_dataUsingEncoding_(@"      ", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9A20(uint64_t a1, const char *a2)
{
  qword_1EBBCFDA8 = objc_msgSend_dataUsingEncoding_(@"        ", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9A64(uint64_t a1, const char *a2)
{
  qword_1EBBCFDB8 = objc_msgSend_dataUsingEncoding_(@"          ", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9AA8(uint64_t a1, const char *a2)
{
  qword_1EBBCFDC8 = objc_msgSend_dataUsingEncoding_(@"            ", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9AEC(uint64_t a1, const char *a2)
{
  qword_1EBBCFDD8 = objc_msgSend_dataUsingEncoding_(@"              ", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9B30(uint64_t a1, const char *a2)
{
  qword_1EBBCFDE8 = objc_msgSend_dataUsingEncoding_(@"                ", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9B74(uint64_t a1, const char *a2)
{
  qword_1EBBCFDF8 = objc_msgSend_dataUsingEncoding_(@" = ", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9BB8(uint64_t a1, const char *a2)
{
  qword_1EBBCFE08 = objc_msgSend_dataUsingEncoding_(@" }", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9BFC(uint64_t a1, const char *a2)
{
  qword_1EBBCFE18 = objc_msgSend_dataUsingEncoding_(@"[ ", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9C40(uint64_t a1, const char *a2)
{
  qword_1EBBCFE28 = objc_msgSend_dataUsingEncoding_(@", ", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9C84(uint64_t a1, const char *a2)
{
  qword_1EBBCFE38 = objc_msgSend_dataUsingEncoding_(@" ]", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9CC8(uint64_t a1, const char *a2)
{
  qword_1EBBCFE48 = objc_msgSend_dataUsingEncoding_(@"<", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9D0C(uint64_t a1, const char *a2)
{
  qword_1EBBCFE58 = objc_msgSend_dataUsingEncoding_(@">", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9D50(uint64_t a1, const char *a2)
{
  qword_1EBBCFE68 = objc_msgSend_dataUsingEncoding_(@" ", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9D94(uint64_t a1, const char *a2)
{
  qword_1EBBCFE78 = objc_msgSend_dataUsingEncoding_(@"("), a2, 4;
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9DD8(uint64_t a1, const char *a2)
{
  qword_1EBBCFE88 = objc_msgSend_dataUsingEncoding_(@""), a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9E1C(uint64_t a1, const char *a2)
{
  qword_1EBBCFE98 = objc_msgSend_dataUsingEncoding_(@"\"", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9E60(uint64_t a1, const char *a2)
{
  qword_1EBBCFEA8 = objc_msgSend_dataUsingEncoding_(@": ", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9EA4(uint64_t a1, const char *a2)
{
  qword_1EBBCFEB8 = objc_msgSend_dataUsingEncoding_(@"|", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9EE8(uint64_t a1, const char *a2)
{
  qword_1EBBCFEC8 = objc_msgSend_dataUsingEncoding_(@"[", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9F2C(uint64_t a1, const char *a2)
{
  qword_1EBBCFED8 = objc_msgSend_dataUsingEncoding_(@",", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EB9F70(uint64_t a1, const char *a2)
{
  qword_1EBBCFEE8 = objc_msgSend_dataUsingEncoding_(@"]", a2, 4);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4EBA0D8(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4EBA7A4(void *a1, uint64_t a2, void *a3, void *a4)
{
  buf[3] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  if (objc_msgSend_needsEncryption(a1, v7, v8))
  {
    uint64_t v11 = objc_msgSend_copy(v6, v9, v10);
    id v14 = objc_msgSend_mergeableValueID(v11, v12, v13);

    if (!v14)
    {
      uint64_t v17 = objc_msgSend_valueID(a1, v15, v16);
      objc_msgSend_setMergeableValueID_(v11, v18, (uint64_t)v17);
    }
    uint64_t v19 = objc_msgSend_metadata(a1, v15, v16);
    uint64_t v22 = objc_msgSend_envelope(v19, v20, v21);

    if (v22)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v25 = (void *)*MEMORY[0x1E4F1A510];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_DEBUG))
      {
        char v49 = v25;
        uint64_t v52 = objc_msgSend_deltaID(a1, v50, v51);
        LODWORD(buf[0]) = 138412290;
        *(void *)((char *)buf + 4) = v52;
        _os_log_debug_impl(&dword_1C4CFF000, v49, OS_LOG_TYPE_DEBUG, "Throwing away cached envelope for %@", (uint8_t *)buf, 0xCu);
      }
      uint64_t v28 = objc_msgSend_metadata(a1, v26, v27);
      objc_msgSend_setEnvelope_(v28, v29, 0);
    }
    uint64_t v30 = objc_msgSend_metadata(a1, v23, v24);
    uint64_t v32 = objc_msgSend__encryptWithContext_error_(v30, v31, (uint64_t)v11, a4);

    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_1C4EBAB64;
    aBlock[3] = &unk_1E64F1B50;
    void aBlock[4] = v32;
    int v35 = (void (**)(void))_Block_copy(aBlock);
    if (v32)
    {
      uint64_t v36 = objc_msgSend_asset(a1, v33, v34);
      BOOL v37 = v36 == 0;

      if (!v37)
      {
LABEL_12:
        uint64_t v39 = 1;
LABEL_24:
        v35[2](v35);

        goto LABEL_25;
      }
      buf[0] = 0;
      id v53 = 0;
      long long v40 = objc_msgSend_dataWithError_(a1, v38, (uint64_t)&v53);
      id v43 = v53;
      if (v40)
      {
        objc_msgSend_shareProtection(v11, v41, v42);
        objc_msgSend_dataUsingEncoding_(@"payload", v44, 4);
        uint64_t v46 = (void *)PCSKeyEnvelopeEncrypt();
        if (v46)
        {
          objc_msgSend_setEncryptedData_(a1, v45, (uint64_t)v46);

          goto LABEL_12;
        }
        if (a4)
        {
          uint64_t v47 = (void *)buf[0];
          objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v45, *MEMORY[0x1E4F19DD8], 1000, buf[0], @"Failed to encrypt delta payload");
          *a4 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
      else
      {
        if (a4)
        {
          objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v41, *MEMORY[0x1E4F19DD8], 2003, v43, @"Mergeable delta encryption failed, missing delta payload");
          *a4 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
    }
    uint64_t v39 = 0;
    goto LABEL_24;
  }
  uint64_t v39 = 1;
LABEL_25:

  return v39;
}

void sub_1C4EBAB30(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_1C4EBAB64(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_1C4EBAB74(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  unsigned int v9 = objc_msgSend_copy(v6, v7, v8);
  unint64_t v12 = objc_msgSend_mergeableValueID(v9, v10, v11);

  if (!v12)
  {
    int v15 = objc_msgSend_valueID(a1, v13, v14);
    objc_msgSend_setMergeableValueID_(v9, v16, (uint64_t)v15);
  }
  uint64_t v17 = objc_msgSend_metadata(a1, v13, v14);
  int v20 = objc_msgSend_needsDecryption(v17, v18, v19);

  if (v20)
  {
    uint64_t v23 = objc_msgSend_metadata(a1, v21, v22);
    uint64_t v25 = objc_msgSend__decryptWithContext_error_(v23, v24, (uint64_t)v9, a4);
  }
  else
  {
    uint64_t v25 = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1C4EBAE4C;
  aBlock[3] = &unk_1E64F1B50;
  void aBlock[4] = v25;
  uint64_t v26 = (void (**)(void))_Block_copy(aBlock);
  if (objc_msgSend_needsDecryption(a1, v27, v28))
  {
    if (v25)
    {
      uint64_t v31 = objc_msgSend_asset(a1, v29, v30);

      if (v31)
      {
        uint64_t v34 = objc_msgSend_shareProtection(v6, v32, v33);
        BOOL v37 = objc_msgSend_pcsManager(v6, v35, v36);
        char v39 = objc_msgSend_unwrapAssetKeyWithShareProtection_pcsManager_error_(a1, v38, v34, v37, a4);

        if ((v39 & 1) == 0) {
          goto LABEL_20;
        }
        goto LABEL_14;
      }
      uint64_t v42 = objc_msgSend_encryptedData(a1, v32, v33);
      if (v42)
      {
        objc_msgSend_shareProtection(v9, v40, v41);
        objc_msgSend_dataUsingEncoding_(@"payload", v43, 4);
        uint64_t v45 = (void *)PCSKeyEnvelopeDecrypt();
        if (!v45)
        {
          if (a4)
          {
            objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v44, *MEMORY[0x1E4F19DD8], 5004, 0, @"Failed to decrypt mergeable delta payload");
            *a4 = (id)objc_claimAutoreleasedReturnValue();
          }
          goto LABEL_20;
        }
        objc_msgSend_set_data_(a1, v44, (uint64_t)v45);
        objc_msgSend_setEncryptedData_(a1, v46, 0);

        goto LABEL_14;
      }
      if (a4)
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v40, *MEMORY[0x1E4F19DD8], 2003, @"Mergeable delta decryption failed, encrypted payload missing");
        uint64_t v47 = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_21;
      }
    }
LABEL_20:
    uint64_t v47 = 0;
    goto LABEL_21;
  }
LABEL_14:
  uint64_t v47 = 1;
LABEL_21:
  v26[2](v26);

  return v47;
}

void sub_1C4EBAE24(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_1C4EBAE4C(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

BOOL sub_1C4EBAE5C(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v8 = a4;
  uint64_t v11 = objc_msgSend_asset(a1, v9, v10);
  uint64_t v14 = objc_msgSend_valueID(a1, v12, v13);
  uint64_t v17 = objc_msgSend_recordID(v14, v15, v16);

  if (v17)
  {
    int v20 = objc_msgSend_valueID(a1, v18, v19);
    uint64_t v23 = objc_msgSend_key(v20, v21, v22);

    if (v23)
    {
      if (v11)
      {
        uint64_t v25 = [CKDWrappingContext alloc];
        uint64_t v28 = objc_msgSend_valueID(a1, v26, v27);
        uint64_t v31 = objc_msgSend_recordID(v28, v29, v30);
        objc_msgSend_valueID(a1, v32, v33);
        uint64_t v34 = v59 = v8;
        BOOL v37 = objc_msgSend_key(v34, v35, v36);
        long long v40 = objc_msgSend_deltaID(a1, v38, v39);
        id v43 = objc_msgSend_signature(v11, v41, v42);
        objc_msgSend_referenceSignature(v11, v44, v45);
        uint64_t v46 = v58 = a3;
        uint64_t v48 = objc_msgSend_initWithRecordID_fieldName_mergeableDeltaID_fileSignature_referenceSignature_(v25, v47, (uint64_t)v31, v37, v40, v43, v46);

        id v8 = v59;
        uint64_t v51 = objc_msgSend_wrappedAssetKey(v11, v49, v50);
        id v60 = 0;
        id v53 = objc_msgSend_unwrapAssetKey_withRecordPCS_inContext_withError_(v59, v52, (uint64_t)v51, v58, v48, &v60);
        id v54 = v60;

        if (v53)
        {
          objc_msgSend_setAssetKey_(v11, v55, (uint64_t)v53);
          ptrdiff_t v56 = 0;
        }
        else
        {
          ptrdiff_t v56 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v55, *MEMORY[0x1E4F19DD8], 5004, v54, @"Failed to unwrap mergeable delta asset key");
        }
      }
      else
      {
        ptrdiff_t v56 = 0;
      }
      goto LABEL_12;
    }
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v24, *MEMORY[0x1E4F19DD8], 1017, @"Can't unwrap asset key for mergeable delta with no field name");
  }
  else
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v18, *MEMORY[0x1E4F19DD8], 1017, @"Can't unwrap asset key for mergeable delta with no record ID");
  ptrdiff_t v56 = };
LABEL_12:
  if (a5) {
    *a5 = v56;
  }

  return v56 == 0;
}

uint64_t sub_1C4EBB0F0(void *a1, const char *a2, uint64_t a3)
{
  id v3 = objc_msgSend_valueID(a1, a2, a3);
  uint64_t isEncrypted = objc_msgSend_isEncrypted(v3, v4, v5);

  return isEncrypted;
}

BOOL sub_1C4EBB128(void *a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_valueID(a1, a2, a3);
  int isEncrypted = objc_msgSend_isEncrypted(v4, v5, v6);

  if (!isEncrypted) {
    return 0;
  }
  uint64_t v10 = objc_msgSend_asset(a1, v8, v9);

  if (v10)
  {
    uint64_t v13 = objc_msgSend_asset(a1, v11, v12);
    uint64_t v16 = objc_msgSend_assetKey(v13, v14, v15);
    BOOL v17 = v16 == 0;
  }
  else
  {
    uint64_t v13 = objc_msgSend_encryptedData(a1, v11, v12);
    BOOL v17 = v13 != 0;
  }

  return v17;
}

id sub_1C4EBB1D0(void *a1)
{
  return objc_getAssociatedObject(a1, "CKEnvelopeData");
}

void sub_1C4EBB1DC(void *a1, uint64_t a2, void *a3)
{
}

id sub_1C4EBB1EC(void *a1)
{
  return objc_getAssociatedObject(a1, "CKEncryptedTimestampsKey");
}

void sub_1C4EBB1F8(void *a1, uint64_t a2, void *a3)
{
}

id sub_1C4EBB208(void *a1)
{
  return objc_getAssociatedObject(a1, "CKEnvelopeAuthenticatedTimestampsKey");
}

void sub_1C4EBB214(void *a1, uint64_t a2, void *a3)
{
}

uint64_t sub_1C4EBB224(void *a1, uint64_t a2, void *a3, int a4, void *a5)
{
  id v8 = a3;
  uint64_t v11 = objc_msgSend_identifier(a1, v9, v10);
  uint64_t v13 = objc_msgSend_envelopeContextWithIdentifier_error_(v8, v12, (uint64_t)v11, a5);

  if (v13)
  {
    uint64_t v18 = objc_msgSend_envelope(a1, v14, v15);
    if (v18)
    {
      objc_msgSend_shareProtection(v8, v16, v17);
      uint64_t v19 = PCSKeyEnvelopeCreateWithValues();
      if (v19)
      {
        uint64_t v21 = v19;
LABEL_17:

        goto LABEL_18;
      }
      if (a5)
      {
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v20, *MEMORY[0x1E4F19DD8], 5004, 0, @"Failed to decrypt mergeable delta envelope");
LABEL_15:
        *a5 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
    else if (a4)
    {
      objc_msgSend_shareProtection(v8, v16, v17);
      uint64_t v22 = PCSKeyEnvelopeCreate();
      if (v22)
      {
        uint64_t v21 = v22;
        uint64_t Envelope = PCSKeyEnvelopeGetEnvelope();
        objc_msgSend_setEnvelope_(a1, v25, Envelope);
        goto LABEL_17;
      }
      if (a5)
      {
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v23, *MEMORY[0x1E4F19DD8], 1000, 0, @"Failed to create mergeable delta envelope");
        goto LABEL_15;
      }
    }
    else if (a5)
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v16, *MEMORY[0x1E4F19DD8], 2003, @"Mergeable delta envelope missing");
      uint64_t v21 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_17;
    }
    uint64_t v21 = 0;
    goto LABEL_17;
  }
  uint64_t v21 = 0;
LABEL_18:

  return v21;
}

const void *sub_1C4EBB3D4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v8 = (const void *)objc_msgSend__envelopeWithContext_allowCreation_error_(a1, v7, (uint64_t)v6, 1, a4);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1C4EBB654;
  aBlock[3] = &unk_1E64F1B50;
  void aBlock[4] = v8;
  uint64_t v11 = (void (**)(void))_Block_copy(aBlock);
  if (v8)
  {
    uint64_t v12 = (void *)MEMORY[0x1E4F1A158];
    uint64_t v13 = objc_msgSend_vectors(a1, v9, v10);
    uint64_t v15 = objc_msgSend_pDistributedTimestampsFromDeltaMetadataVectors_(v12, v14, (uint64_t)v13);

    uint64_t v18 = objc_msgSend_data(v15, v16, v17);
    if (objc_msgSend_encryptMergeableValueMetadata(v6, v19, v20))
    {
      objc_msgSend_shareProtection(v6, v21, v22);
      objc_msgSend_dataUsingEncoding_(@"encryptedTimestamps", v23, 4);
      uint64_t v25 = (void *)PCSKeyEnvelopeEncrypt();
      if (v25)
      {
        objc_msgSend_setEncryptedTimestamps_(a1, v24, (uint64_t)v25);
LABEL_7:

        CFRetain(v8);
LABEL_14:

        goto LABEL_15;
      }
      if (a4)
      {
        uint64_t v31 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v24, *MEMORY[0x1E4F19DD8], 1000, 0, @"Failed to encrypt mergeable delta timestamps");
LABEL_12:
        *a4 = v31;
      }
    }
    else
    {
      objc_msgSend_shareProtection(v6, v21, v22);
      uint64_t v25 = (void *)PCSKeyEnvelopeAuthenticate();
      if (v25)
      {
        id v27 = objc_alloc(MEMORY[0x1E4F1A470]);
        uint64_t v29 = objc_msgSend_initWithObject1_object2_(v27, v28, (uint64_t)v18, v25);
        objc_msgSend_setAuthenticatedTimestamps_(a1, v30, (uint64_t)v29);

        goto LABEL_7;
      }
      if (a4)
      {
        uint64_t v31 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v26, *MEMORY[0x1E4F19DD8], 1000, 0, @"Failed to authenticate mergeable delta timestamps");
        goto LABEL_12;
      }
    }
    id v8 = 0;
    goto LABEL_14;
  }
LABEL_15:
  v11[2](v11);

  return v8;
}

void sub_1C4EBB628(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_1C4EBB654(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

BOOL sub_1C4EBB664(void *a1, const char *a2, uint64_t a3)
{
  id v3 = (const void *)objc_msgSend__decryptWithContext_error_(a1, a2, a3);
  id v4 = v3;
  if (v3) {
    CFRelease(v3);
  }
  return v4 != 0;
}

const void *sub_1C4EBB69C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v8 = (const void *)objc_msgSend__envelopeWithContext_allowCreation_error_(a1, v7, (uint64_t)v6, 0, a4);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1C4EBBEF0;
  aBlock[3] = &unk_1E64F1B50;
  void aBlock[4] = v8;
  uint64_t v11 = (void (**)(void))_Block_copy(aBlock);
  if (v8)
  {
    v215 = v6;
    uint64_t v12 = objc_msgSend_packageProcessBasePath(MEMORY[0x1E4F1A250], v9, v10);
    v214 = objc_msgSend_standaloneTranslatorWithPackageStagingDirectory_databaseScope_(CKDProtocolTranslator, v13, (uint64_t)v12, 2);

    uint64_t v18 = objc_msgSend_authenticatedTimestamps(a1, v14, v15);
    if (!v18) {
      goto LABEL_14;
    }
    v217 = 0;
    objc_msgSend_shareProtection(v215, v16, v17);
    uint64_t v21 = objc_msgSend_v2(v18, v19, v20);
    uint64_t v24 = objc_msgSend_v1(v18, v22, v23);
    CFBooleanRef v25 = (const __CFBoolean *)PCSKeyEnvelopeVerify();

    v216[0] = MEMORY[0x1E4F143A8];
    v216[1] = 3221225472;
    v216[2] = sub_1C4EBBF00;
    v216[3] = &unk_1E64F1B50;
    v216[4] = v25;
    id v27 = (void (**)(void))_Block_copy(v216);
    if (v25 && CFBooleanGetValue(v25))
    {
      id v28 = objc_alloc(MEMORY[0x1E4F19F00]);
      uint64_t v31 = objc_msgSend_v1(v18, v29, v30);
      uint64_t v33 = objc_msgSend_initWithData_(v28, v32, (uint64_t)v31);

      uint64_t v35 = objc_msgSend_deltaMetadataVectorsFromPDistributedTimestamps_error_(v214, v34, v33, a4);
      uint64_t v212 = (void *)v33;
      if (v35)
      {
        long long v38 = (void *)v35;
        uint64_t v39 = objc_msgSend_vectors(a1, v36, v37);
        uint64_t v42 = objc_msgSend_previous(v39, v40, v41);
        v210 = objc_msgSend_mutableCopy(v42, v43, v44);

        uint64_t v47 = objc_msgSend_vectors(a1, v45, v46);
        uint64_t v50 = objc_msgSend_contents(v47, v48, v49);
        v208 = objc_msgSend_mutableCopy(v50, v51, v52);

        uint64_t v55 = objc_msgSend_vectors(a1, v53, v54);
        uint64_t v58 = objc_msgSend_removals(v55, v56, v57);
        uint64_t v206 = objc_msgSend_mutableCopy(v58, v59, v60);

        uint64_t v63 = objc_msgSend_vectors(a1, v61, v62);
        uint64_t v64 = v38;
        uint64_t v67 = objc_msgSend_dependencies(v63, v65, v66);
        v204 = objc_msgSend_mutableCopy(v67, v68, v69);

        double v72 = objc_msgSend_backingVector(v210, v70, v71);
        id v75 = objc_msgSend_previous(v38, v73, v74);
        uint64_t v78 = objc_msgSend_backingVector(v75, v76, v77);
        objc_msgSend_addAllClockValuesFromVector_(v72, v79, (uint64_t)v78);

        ptrdiff_t v82 = objc_msgSend_backingVector(v208, v80, v81);
        ptrdiff_t v85 = objc_msgSend_contents(v64, v83, v84);
        ptrdiff_t v88 = objc_msgSend_backingVector(v85, v86, v87);
        objc_msgSend_addAllClockValuesFromVector_(v82, v89, (uint64_t)v88);

        uint64_t v92 = objc_msgSend_backingVector(v206, v90, v91);
        objc_super v95 = objc_msgSend_removals(v64, v93, v94);
        uint64_t v98 = objc_msgSend_backingVector(v95, v96, v97);
        objc_msgSend_addAllClockValuesFromVector_(v92, v99, (uint64_t)v98);

        long long v102 = objc_msgSend_backingVector(v204, v100, v101);
        id v105 = objc_msgSend_dependencies(v64, v103, v104);
        uint64_t v108 = objc_msgSend_backingVector(v105, v106, v107);
        objc_msgSend_addAllClockValuesFromVector_(v102, v109, (uint64_t)v108);

        id v110 = objc_alloc(MEMORY[0x1E4F1A158]);
        uint64_t v112 = objc_msgSend_initWithPreviousVector_contentsVector_removalsVector_dependenciesVector_(v110, v111, (uint64_t)v210, v208, v206, v204);

        objc_msgSend_setVectors_(a1, v113, (uint64_t)v112);
        int v114 = 0;
LABEL_10:

        goto LABEL_12;
      }
    }
    else
    {
      if (!a4)
      {
        int v114 = 1;
LABEL_12:
        v27[2](v27);

        if (v114)
        {
          id v8 = 0;
LABEL_24:

          id v6 = v215;
          goto LABEL_25;
        }
LABEL_14:
        uint64_t v117 = objc_msgSend_encryptedTimestamps(a1, v16, v17);
        if (v117)
        {
          v217 = 0;
          objc_msgSend_shareProtection(v215, v115, v116);
          objc_msgSend_dataUsingEncoding_(@"encryptedTimestamps", v118, 4);
          uint64_t v120 = (void *)PCSKeyEnvelopeDecrypt();
          if (v120)
          {
            id v121 = objc_alloc(MEMORY[0x1E4F19F00]);
            uint64_t v123 = objc_msgSend_initWithData_(v121, v122, (uint64_t)v120);
            uint64_t v127 = objc_msgSend_deltaMetadataVectorsFromPDistributedTimestamps_error_(v214, v124, (uint64_t)v123, a4);
            if (v127)
            {
              uint64_t v128 = objc_msgSend_vectors(a1, v125, v126);
              uint64_t v131 = objc_msgSend_previous(v128, v129, v130);
              v213 = objc_msgSend_mutableCopy(v131, v132, v133);

              uint64_t v136 = objc_msgSend_vectors(a1, v134, v135);
              uint64_t v139 = objc_msgSend_contents(v136, v137, v138);
              v211 = objc_msgSend_mutableCopy(v139, v140, v141);
              v205 = v123;

              uint64_t v144 = objc_msgSend_vectors(a1, v142, v143);
              uint64_t v147 = objc_msgSend_removals(v144, v145, v146);
              uint64_t v209 = objc_msgSend_mutableCopy(v147, v148, v149);

              v152 = objc_msgSend_vectors(a1, v150, v151);
              id v155 = objc_msgSend_dependencies(v152, v153, v154);
              v207 = objc_msgSend_mutableCopy(v155, v156, v157);

              long long v160 = objc_msgSend_backingVector(v213, v158, v159);
              long long v163 = objc_msgSend_previous(v127, v161, v162);
              long long v166 = objc_msgSend_backingVector(v163, v164, v165);
              objc_msgSend_addAllClockValuesFromVector_(v160, v167, (uint64_t)v166);

              uint64_t v170 = objc_msgSend_backingVector(v211, v168, v169);
              uint64_t v173 = objc_msgSend_contents(v127, v171, v172);
              uint64_t v176 = objc_msgSend_backingVector(v173, v174, v175);
              objc_msgSend_addAllClockValuesFromVector_(v170, v177, (uint64_t)v176);

              uint64_t v180 = objc_msgSend_backingVector(v209, v178, v179);
              long long v183 = objc_msgSend_removals(v127, v181, v182);
              long long v186 = objc_msgSend_backingVector(v183, v184, v185);
              objc_msgSend_addAllClockValuesFromVector_(v180, v187, (uint64_t)v186);

              v190 = objc_msgSend_backingVector(v207, v188, v189);
              v193 = objc_msgSend_dependencies(v127, v191, v192);
              v196 = objc_msgSend_backingVector(v193, v194, v195);
              objc_msgSend_addAllClockValuesFromVector_(v190, v197, (uint64_t)v196);

              id v198 = objc_alloc(MEMORY[0x1E4F1A158]);
              uint64_t v200 = objc_msgSend_initWithPreviousVector_contentsVector_removalsVector_dependenciesVector_(v198, v199, (uint64_t)v213, v211, v209, v207);

              objc_msgSend_setVectors_(a1, v201, (uint64_t)v200);
              goto LABEL_18;
            }
          }
          else if (a4)
          {
            v202 = v217;
            objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v119, *MEMORY[0x1E4F19DD8], 5004, v217, @"Failed to decrypt mergeable delta timestamps");
            *a4 = (id)objc_claimAutoreleasedReturnValue();
          }
          id v8 = 0;
          goto LABEL_23;
        }
LABEL_18:
        CFRetain(v8);
LABEL_23:

        goto LABEL_24;
      }
      uint64_t v212 = v217;
      objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v26, *MEMORY[0x1E4F19DD8], 5004);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    int v114 = 1;
    goto LABEL_10;
  }
LABEL_25:
  v11[2](v11);

  return v8;
}

void sub_1C4EBBE74(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_1C4EBBEF0(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

void sub_1C4EBBF00(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

BOOL sub_1C4EBBF10(void *a1, const char *a2, uint64_t a3)
{
  id v6 = objc_msgSend_encryptedTimestamps(a1, a2, a3);
  if (v6)
  {
    BOOL v7 = 0;
  }
  else
  {
    id v8 = objc_msgSend_authenticatedTimestamps(a1, v4, v5);
    BOOL v7 = v8 == 0;
  }
  return v7;
}

BOOL sub_1C4EBBF68(void *a1, const char *a2, uint64_t a3)
{
  id v6 = objc_msgSend_encryptedTimestamps(a1, a2, a3);
  if (v6)
  {
    BOOL v7 = 1;
  }
  else
  {
    id v8 = objc_msgSend_authenticatedTimestamps(a1, v4, v5);
    BOOL v7 = v8 != 0;
  }
  return v7;
}

BOOL sub_1C4EBC570(char *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    BOOL v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 80;
          goto LABEL_35;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 40;
          goto LABEL_35;
        case 3u:
          uint64_t v20 = PBReaderReadString();
          if (v20) {
            objc_msgSend_addLocalizedArguments_(a1, v19, (uint64_t)v20);
          }
          goto LABEL_36;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_35;
        case 5u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
          goto LABEL_35;
        case 6u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 48;
          goto LABEL_35;
        case 7u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
          goto LABEL_35;
        case 8u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 88;
          goto LABEL_35;
        case 9u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 104;
          goto LABEL_35;
        case 0xAu:
          uint64_t v20 = PBReaderReadString();
          if (v20) {
            objc_msgSend_addTitleLocalizedArguments_(a1, v21, (uint64_t)v20);
          }
          goto LABEL_36;
        case 0xBu:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 56;
          goto LABEL_35;
        case 0xCu:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 72;
LABEL_35:
          uint64_t v20 = *(void **)&a1[v18];
          *(void *)&a1[v18] = v17;
          goto LABEL_36;
        case 0xDu:
          uint64_t v20 = PBReaderReadString();
          if (v20) {
            objc_msgSend_addSubtitleLocalizedArguments_(a1, v22, (uint64_t)v20);
          }
LABEL_36:

          goto LABEL_37;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_37:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4EBE458(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  BOOL v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = (CKDPRecordType *)objc_alloc_init(MEMORY[0x1E4F19F20]);
        objc_storeStrong((id *)(a1 + 24), v17);
        if PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom()) {
          goto LABEL_37;
        }
        goto LABEL_44;
      case 2u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v19;

        goto LABEL_42;
      case 3u:
        uint64_t v17 = objc_alloc_init(CKDPRecordType);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordTypeReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_44;
        }
        goto LABEL_37;
      case 4u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_41;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + 40) = v23;
        goto LABEL_42;
      case 5u:
        uint64_t v17 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 16), v17);
        if PBReaderPlaceMark() && (CKDPRecordReadFrom((uint64_t)v17, a2))
        {
LABEL_37:
          PBReaderRecallMark();

LABEL_42:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_44:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_42;
    }
  }
}

void sub_1C4EBEEC0()
{
  id v0 = (void *)qword_1EBBCDE28;
  qword_1EBBCDE28 = (uint64_t)&unk_1F20ABEC0;
}

uint64_t sub_1C4EBF1DC(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  BOOL v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = (CKDPAssetsToDownload *)objc_alloc_init(MEMORY[0x1E4F19F30]);
        objc_storeStrong((id *)(a1 + 32), v17);
        if PBReaderPlaceMark() && (CKDPRecordZoneIdentifierReadFrom()) {
          goto LABEL_41;
        }
        goto LABEL_52;
      case 2u:
        uint64_t v19 = PBReaderReadData();
        uint64_t v20 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v19;

        goto LABEL_50;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_45:
        *(unsigned char *)(a1 + 40) = v23 != 0;
        goto LABEL_50;
      case 4u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          uint64_t v30 = *v3;
          unint64_t v31 = *(void *)(a2 + v30);
          if (v31 == -1 || v31 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              BOOL v14 = v28++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_49:
        *(_DWORD *)(a1 + 24) = v29;
        goto LABEL_50;
      case 5u:
        uint64_t v17 = objc_alloc_init(CKDPAssetsToDownload);
        objc_storeStrong((id *)(a1 + 16), v17);
        if PBReaderPlaceMark() && (sub_1C4FD2BD0((uint64_t)v17, a2))
        {
LABEL_41:
          PBReaderRecallMark();

LABEL_50:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_52:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_50;
    }
  }
}

uint64_t sub_1C4EBFF88(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  BOOL v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = (CKDPUserAlias *)objc_alloc_init(MEMORY[0x1E4F19F08]);
        objc_storeStrong((id *)(a1 + 24), v17);
        if PBReaderPlaceMark() && (CKDPIdentifierReadFrom()) {
          goto LABEL_32;
        }
        goto LABEL_46;
      case 2u:
        uint64_t v17 = objc_alloc_init(CKDPUserAlias);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (sub_1C4E7A6E8((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_46;
        }
        goto LABEL_32;
      case 3u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 16;
        goto LABEL_29;
      case 4u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 32;
LABEL_29:
        char v21 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;

        goto LABEL_44;
      case 5u:
        uint64_t v17 = objc_alloc_init(CKDPProtectionInfo);
        objc_storeStrong((id *)(a1 + 40), v17);
        if (PBReaderPlaceMark() && sub_1C4D5BCB4((uint64_t)v17, a2))
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_44:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_46:

        return 0;
      case 6u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 52) |= 1u;
        while (2)
        {
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 == -1 || v26 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              BOOL v14 = v23++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
LABEL_43:
        *(unsigned char *)(a1 + 48) = v24 != 0;
        goto LABEL_44;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_44;
    }
  }
}

BOOL sub_1C4EC0DE4(id *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    BOOL v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = objc_alloc_init(CKDPAsset);
    objc_msgSend_addAssets_(a1, v18, (uint64_t)v17);
    if (!PBReaderPlaceMark() || (CKDPAssetReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4EC23B4(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    BOOL v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPUserPrivacySettingsBatchLookupResponseContainerPrivacySettings);
        objc_msgSend_addContainerPrivacySettings_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (sub_1C4D84CB0((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4EC2D20(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    BOOL v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPSubscription);
        objc_msgSend_addSubscriptions_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (sub_1C4F3D120((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4EC3628(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    BOOL v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4EC424C(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    BOOL v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v17 = objc_alloc_init(CKDPUserInformationBlockedRequestAccess);
        objc_msgSend_addBlockedUsers_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !CKDPUserInformationBlockedRequestAccessReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *CKDMMCSRegisterOptionDescription(uint64_t a1, const char *a2, uint64_t a3)
{
  if (a1)
  {
    char v3 = a1;
    id v4 = objc_msgSend_array(MEMORY[0x1E4F1CA48], a2, a3);
    id v6 = v4;
    if ((v3 & 2) != 0)
    {
      objc_msgSend_addObject_(v4, v5, @"chunk");
      if ((v3 & 4) == 0)
      {
LABEL_4:
        if ((v3 & 8) == 0) {
          goto LABEL_5;
        }
        goto LABEL_16;
      }
    }
    else if ((v3 & 4) == 0)
    {
      goto LABEL_4;
    }
    objc_msgSend_addObject_(v6, v5, @"fetch");
    if ((v3 & 8) == 0)
    {
LABEL_5:
      if ((v3 & 0x10) == 0) {
        goto LABEL_6;
      }
      goto LABEL_17;
    }
LABEL_16:
    objc_msgSend_addObject_(v6, v5, @"fetch-chunks");
    if ((v3 & 0x10) == 0)
    {
LABEL_6:
      if ((v3 & 0x20) == 0) {
        goto LABEL_7;
      }
      goto LABEL_18;
    }
LABEL_17:
    objc_msgSend_addObject_(v6, v5, @"preauth");
    if ((v3 & 0x20) == 0)
    {
LABEL_7:
      if ((v3 & 0x40) == 0)
      {
LABEL_9:
        objc_msgSend_componentsJoinedByString_(v6, v5, @", ");
        BOOL v7 = (__CFString *)objc_claimAutoreleasedReturnValue();

        goto LABEL_11;
      }
LABEL_8:
      objc_msgSend_addObject_(v6, v5, @"chunk-padding");
      goto LABEL_9;
    }
LABEL_18:
    objc_msgSend_addObject_(v6, v5, @"inline-put-complete");
    if ((v3 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  BOOL v7 = @"none";
LABEL_11:
  return v7;
}

void sub_1C4EC4D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  objc_sync_exit(v17);
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v18 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4EC4DCC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_checkoutCount(*(void **)(a1 + 32), a2, a3) <= 0) {
    __assert_rtn("-[CKDMMCS drop]_block_invoke", "CKDMMCS.m", 129, "self.checkoutCount > 0");
  }
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = objc_msgSend_checkoutCount(v6, v4, v5);
  objc_msgSend_setCheckoutCount_(v6, v8, v7 - 1);
  uint64_t result = objc_msgSend_checkoutCount(*(void **)(a1 + 32), v9, v10);
  if (!result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    BOOL v14 = *(void **)(a1 + 32);
    int v15 = objc_msgSend_sharedWrappersByPath(CKDMMCS, v12, v13);
    uint64_t v18 = objc_msgSend_path(*(void **)(a1 + 32), v16, v17);
    uint64_t v20 = objc_msgSend_objectForKey_(v15, v19, (uint64_t)v18);

    if (v14 == v20)
    {
      uint64_t v34 = objc_msgSend_sharedWrappersByPath(CKDMMCS, v21, v22);
      uint64_t v37 = objc_msgSend_path(*(void **)(a1 + 32), v35, v36);
      objc_msgSend_removeObjectForKey_(v34, v38, (uint64_t)v37);
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      unsigned int v23 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        unint64_t v26 = *(void **)(a1 + 32);
        char v27 = v23;
        uint64_t v30 = objc_msgSend_path(v26, v28, v29);
        uint64_t v33 = objc_msgSend_CKSanitizedPath(v30, v31, v32);
        int v42 = 138412546;
        id v43 = v26;
        __int16 v44 = 2114;
        uint64_t v45 = v33;
        _os_log_error_impl(&dword_1C4CFF000, v27, OS_LOG_TYPE_ERROR, "%@ not in the sharedWrappers map at key %{public}@", (uint8_t *)&v42, 0x16u);
      }
    }
    objc_msgSend_drop(*(void **)(*(void *)(a1 + 32) + 40), v24, v25);
    uint64_t v39 = *(void *)(a1 + 32);
    long long v40 = *(void **)(v39 + 40);
    *(void *)(v39 + 40) = 0;

    uint64_t result = objc_msgSend_tearDownMMCSEngineWithContext_(CKDMMCSEngineContext, v41, *(void *)(a1 + 40));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = result;
  }
  return result;
}

void sub_1C4EC5068()
{
  MMCSSignatureGeneratorCreate();
  MEMORY[0x1C8788B30]();
  uint64_t v0 = MMCSSignatureGeneratorFinish();
  uint64_t v1 = (void *)v0;
  if (v0)
  {
    int v2 = (void *)MEMORY[0x1E4F1C9B8];
    uint64_t v3 = MEMORY[0x1C8788B00](v0);
    uint64_t v5 = objc_msgSend_dataWithBytes_length_(v2, v4, (uint64_t)v1, v3);
  }
  else
  {
    uint64_t v5 = 0;
  }
  free(v1);
  id v6 = (void *)qword_1EBBCFEF8;
  qword_1EBBCFEF8 = v5;
}

uint64_t sub_1C4EC5B08(uint64_t a1, const char *a2, uint64_t a3)
{
  qword_1EBBCFF08 = objc_msgSend_weakToWeakObjectsMapTable(MEMORY[0x1E4F28E10], a2, a3);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4EC612C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4EC615C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4EC616C(uint64_t a1)
{
}

void sub_1C4EC6174(uint64_t a1)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  int v2 = (void *)MEMORY[0x1C8789E70]();
  uint64_t v5 = objc_msgSend_sharedWrappersByPath(CKDMMCS, v3, v4);
  char v8 = objc_msgSend_mmcsWorkingDirectory(*(void **)(a1 + 32), v6, v7);
  uint64_t v10 = objc_msgSend_objectForKey_(v5, v9, (uint64_t)v8);
  uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
  unint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    int v15 = (id)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      ptrdiff_t v79 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      uint64_t v80 = objc_msgSend_mmcsWorkingDirectory(*(void **)(a1 + 32), v16, v17);
      uint64_t v83 = objc_msgSend_CKSanitizedPath(v80, v81, v82);
      uint64_t v86 = objc_msgSend_checkoutCount(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v84, v85);
      *(_DWORD *)buf = 138412802;
      long long v100 = v79;
      __int16 v101 = 2114;
      long long v102 = v83;
      __int16 v103 = 2048;
      uint64_t v104 = v86;
      _os_log_debug_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_DEBUG, "Found a cached MMCS wrapper %@ at path %{public}@ count %lld", buf, 0x20u);
    }
    uint64_t v18 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    uint64_t v21 = objc_msgSend_checkoutCount(v18, v19, v20);
    objc_msgSend_setCheckoutCount_(v18, v22, v21 + 1);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
  }
  else
  {
    unsigned int v23 = objc_msgSend_containerCloudKitDirectory(*(void **)(a1 + 32), v13, v14);
    unint64_t v26 = objc_msgSend_path(v23, v24, v25);
    char hasCachedCKDMMCSEngineContextForPath = objc_msgSend_hasCachedCKDMMCSEngineContextForPath_(CKDMMCSEngineContext, v27, (uint64_t)v26);

    if (hasCachedCKDMMCSEngineContextForPath)
    {
      unint64_t v31 = 0;
    }
    else
    {
      buf[0] = 0;
      uint64_t v67 = *(void *)(a1 + 32);
      uint64_t v66 = *(void *)(a1 + 40);
      uint64_t v68 = *(void *)(a1 + 48);
      uint64_t v69 = *(void *)(*(void *)(a1 + 72) + 8);
      id v98 = *(id *)(v69 + 40);
      unint64_t v31 = objc_msgSend_assetCacheWithApplicationBundleID_directoryContext_database_didInit_error_(CKDAssetCache, v29, v66, v67, v68, buf, &v98);
      objc_storeStrong((id *)(v69 + 40), v98);
      if (!v31) {
        goto LABEL_28;
      }
      if (buf[0] && objc_msgSend_isNewEmptyCache(v31, v29, v30))
      {
        uint64_t v70 = *(void **)(a1 + 80);
        uint64_t v71 = objc_msgSend_mmcsWorkingDirectory(*(void **)(a1 + 32), v29, v30);
        uint64_t v74 = objc_msgSend_path(v71, v72, v73);
        objc_msgSend_purgeMMCSDirectoryWithPath_(v70, v75, (uint64_t)v74);
      }
    }
    char v97 = 0;
    uint64_t v32 = *(void *)(a1 + 40);
    uint64_t v33 = objc_msgSend_mmcsWorkingDirectory(*(void **)(a1 + 32), v29, v30);
    uint64_t v36 = objc_msgSend_path(v33, v34, v35);
    uint64_t v37 = *(void *)(*(void *)(a1 + 72) + 8);
    id obj = *(id *)(v37 + 40);
    uint64_t v39 = objc_msgSend_setupMMCSEngineWithApplicationBundleID_path_wasCached_error_(CKDMMCSEngineContext, v38, v32, v36, &v97, &obj);
    objc_storeStrong((id *)(v37 + 40), obj);

    if (v39)
    {
      if (!v97 && !v31) {
        __assert_rtn("+[CKDMMCS MMCSWrapperForApplicationBundleID:directoryContext:database:error:]_block_invoke", "CKDMMCS.m", 467, "(wasCached || assetCache) && \"MMCS engine context was cached or we created an asset cache\"");
      }
      if (v31)
      {
        long long v40 = [CKDMMCS alloc];
        uint64_t v42 = objc_msgSend_initWithMMCSEngineContext_directoryContext_(v40, v41, (uint64_t)v39, *(void *)(a1 + 32));
        uint64_t v43 = *(void *)(*(void *)(a1 + 56) + 8);
        __int16 v44 = *(void **)(v43 + 40);
        *(void *)(v43 + 40) = v42;

        uint64_t v45 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        uint64_t v48 = objc_msgSend_checkoutCount(v45, v46, v47);
        objc_msgSend_setCheckoutCount_(v45, v49, v48 + 1);
        objc_msgSend_setMMCS_(v39, v50, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
        objc_msgSend_setAssetCache_(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v51, (uint64_t)v31);
        objc_msgSend_setMMCS_(v31, v52, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
        objc_msgSend_setupPersistentStateAtStartup(v31, v53, v54);
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v55 = (id)*MEMORY[0x1E4F1A500];
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v87 = objc_msgSend_path(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v56, v57);
          uint64_t v90 = objc_msgSend_CKSanitizedPath(v87, v88, v89);
          uint64_t v91 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
          uint64_t v94 = objc_msgSend_checkoutCount(v91, v92, v93);
          *(_DWORD *)buf = 138543874;
          long long v100 = v90;
          __int16 v101 = 2112;
          long long v102 = v91;
          __int16 v103 = 2048;
          uint64_t v104 = v94;
          _os_log_debug_impl(&dword_1C4CFF000, v55, OS_LOG_TYPE_DEBUG, "setting sharedWrappers map key %{public}@ value %@ count %lld", buf, 0x20u);
        }
        uint64_t v60 = objc_msgSend_sharedWrappersByPath(CKDMMCS, v58, v59);
        uint64_t v61 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        uint64_t v64 = objc_msgSend_path(v61, v62, v63);
        objc_msgSend_setObject_forKey_(v60, v65, (uint64_t)v61, v64);

        *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      ptrdiff_t v76 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        objc_super v95 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        long long v100 = v95;
        _os_log_error_impl(&dword_1C4CFF000, v76, OS_LOG_TYPE_ERROR, "Couldn't create a context, %@", buf, 0xCu);
      }
      objc_msgSend_drop(v31, v77, v78);
    }
  }
LABEL_28:
}

void sub_1C4EC6754(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(a1);
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v14 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v13;
      _os_log_error_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_ERROR, "Exception %{public}@", (uint8_t *)&buf, 0xCu);
    }

    objc_end_catch();
    JUMPOUT(0x1C4EC6534);
  }
  _Unwind_Resume(a1);
}

void sub_1C4EC6C74(_Unwind_Exception *exception_object)
{
}

id sub_1C4EC73D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *MEMORY[0x1E4F73940];
  id v7 = a2;
  if (objc_msgSend_isEqualToString_(v7, v8, v6))
  {
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = sub_1C4EC74F0;
    v17[3] = &unk_1E64F4F90;
    v17[4] = *(void *)(a1 + 32);
    uint64_t v10 = objc_msgSend_CKMap_(v5, v9, (uint64_t)v17);
    id v11 = objc_alloc(MEMORY[0x1E4F1A470]);
    id v13 = objc_msgSend_initWithObject1_object2_(v11, v12, (uint64_t)v7, v10);
  }
  else
  {
    id v14 = objc_alloc(MEMORY[0x1E4F1A470]);
    id v13 = objc_msgSend_initWithObject1_object2_(v14, v15, (uint64_t)v7, v5);
  }
  return v13;
}

id sub_1C4EC74F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = objc_msgSend_mutableCopy(v3, v4, v5);
  uint64_t v7 = *MEMORY[0x1E4F739E8];
  unsigned int v9 = objc_msgSend_objectForKeyedSubscript_(v3, v8, *MEMORY[0x1E4F739E8]);
  unint64_t v12 = objc_msgSend_mutableCopy(v9, v10, v11);

  uint64_t v13 = *MEMORY[0x1E4F738A8];
  int v15 = objc_msgSend_objectForKeyedSubscript_(v12, v14, *MEMORY[0x1E4F738A8]);

  if (v15)
  {
    uint64_t v17 = NSString;
    uint64_t v18 = *(void **)(a1 + 32);
    uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(v12, v16, v13);
    uint64_t v21 = objc_msgSend__referenceIdentifierFromAssetKey_(v18, v20, (uint64_t)v19);
    unsigned int v23 = objc_msgSend_stringWithFormat_(v17, v22, @"<key hash: %@>", v21);
    objc_msgSend_setObject_forKeyedSubscript_(v12, v24, (uint64_t)v23, v13);
  }
  if (v12) {
    objc_msgSend_setObject_forKeyedSubscript_(v6, v16, (uint64_t)v12, v7);
  }
  uint64_t v25 = *MEMORY[0x1E4F739F8];
  unint64_t v26 = objc_msgSend_objectForKeyedSubscript_(v3, v16, *MEMORY[0x1E4F739F8]);
  uint64_t v29 = objc_msgSend_mutableCopy(v26, v27, v28);

  unint64_t v31 = objc_msgSend_objectForKeyedSubscript_(v29, v30, v13);

  if (v31)
  {
    uint64_t v33 = NSString;
    uint64_t v34 = *(void **)(a1 + 32);
    uint64_t v35 = objc_msgSend_objectForKeyedSubscript_(v29, v32, v13);
    uint64_t v37 = objc_msgSend__referenceIdentifierFromAssetKey_(v34, v36, (uint64_t)v35);
    uint64_t v39 = objc_msgSend_stringWithFormat_(v33, v38, @"<key hash: %@>", v37);
    objc_msgSend_setObject_forKeyedSubscript_(v29, v40, (uint64_t)v39, v13);
  }
  if (v29) {
    objc_msgSend_setObject_forKeyedSubscript_(v6, v32, (uint64_t)v29, v25);
  }
  uint64_t v41 = *MEMORY[0x1E4F737D0];
  uint64_t v42 = objc_msgSend_objectForKeyedSubscript_(v3, v32, *MEMORY[0x1E4F737D0]);

  if (v42)
  {
    __int16 v44 = NSString;
    uint64_t v45 = objc_msgSend_objectForKeyedSubscript_(v3, v43, v41);
    uint64_t v48 = objc_msgSend_length(v45, v46, v47);
    uint64_t v50 = objc_msgSend_stringWithFormat_(v44, v49, @"<%lu bytes>", v48);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v51, (uint64_t)v50, v41);
  }
  return v6;
}

void sub_1C4EC7800(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_assetCache(*(void **)(a1 + 32), a2, a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_expireAssetHandlesIfNecessary(v5, v3, v4);
}

void sub_1C4EC7B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4EC7B60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = sub_1C4EC7C64(v3, v4, v5);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = sub_1C4EC7D18;
  v12[3] = &unk_1E64F5008;
  uint64_t v19 = *(void *)(a1 + 72);
  id v13 = *(id *)(a1 + 32);
  char v20 = *(unsigned char *)(a1 + 80);
  id v7 = *(id *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 64);
  id v14 = v7;
  id v15 = v3;
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  id v16 = v8;
  uint64_t v17 = v9;
  id v10 = v3;
  objc_msgSend_MMCSRunSerialized_(v6, v11, (uint64_t)v12);
}

id sub_1C4EC7C64(void *a1, const char *a2, uint64_t a3)
{
  id v3 = objc_msgSend_MMCS(a1, a2, a3);
  uint64_t v6 = objc_msgSend_MMCSEngineContext(v3, v4, v5);

  if (!v6)
  {
    id v10 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v7, v8);
    unint64_t v12 = objc_msgSend_stringWithUTF8String_(NSString, v11, (uint64_t)"CKDMMCSEngineContext *mmcsEngineContext(CKDMMCSItemGroupContext *__strong)");
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v10, v13, (uint64_t)v12, @"CKDMMCS.m", 804, @"Expected non nil CKDMMCSEngineContext");
  }
  return v6;
}

void sub_1C4EC7D18(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v5 = objc_msgSend_items(*(void **)(a1 + 32), a2, a3);
  uint64_t v8 = objc_msgSend_count(v5, v6, v7);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  int v9 = (v4 >> 4) & 1;
  int v10 = (v4 >> 6) & 1;
  uint64_t v11 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v27 = "Fetching";
    uint64_t v28 = *(void *)(a1 + 40);
    if (!*(unsigned char *)(a1 + 88)) {
      uint64_t v27 = "Registering";
    }
    *(_DWORD *)buf = 136315906;
    uint64_t v33 = v27;
    __int16 v34 = 2048;
    uint64_t v35 = v8;
    __int16 v36 = 2114;
    uint64_t v37 = v28;
    __int16 v38 = 2112;
    uint64_t v39 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "%s %lu MMCS items, operationID:%{public}@: %@", buf, 0x2Au);
  }
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = sub_1C4EC8018;
  v29[3] = &unk_1E64F4FE0;
  char v30 = v9;
  char v31 = v10;
  uint64_t v13 = *(void *)(a1 + 80);
  v29[4] = *(void *)(a1 + 72);
  v29[5] = v13;
  id v14 = objc_msgSend_CKCompactMap_(v5, v12, (uint64_t)v29);
  if (objc_msgSend_count(v14, v15, v16))
  {
    id v18 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    objc_msgSend_setObject_forKeyedSubscript_(v18, v19, (uint64_t)v14, *MEMORY[0x1E4F73940]);
    if (*(unsigned char *)(a1 + 88))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
    }
    else
    {
      uint64_t v21 = objc_msgSend_numberWithBool_(MEMORY[0x1E4F28ED0], v20, (*(void *)(a1 + 80) >> 4) & 1);
      objc_msgSend_setObject_forKeyedSubscript_(v18, v22, (uint64_t)v21, *MEMORY[0x1E4F73998]);
    }
    uint64_t v23 = *(void *)(a1 + 56);
    if (v23) {
      objc_msgSend_setObject_forKeyedSubscript_(v18, v20, v23, *MEMORY[0x1E4F73908]);
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24)) {
      objc_msgSend_setObject_forKeyedSubscript_(v18, v20, MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F73988]);
    }
    unint64_t v26 = objc_msgSend_cloneContext(*(void **)(a1 + 32), v20, v23);
    if (v26) {
      objc_msgSend_setObject_forKeyedSubscript_(v18, v24, (uint64_t)v26, *MEMORY[0x1E4F73990]);
    }
    objc_msgSend_getMMCSEngine(*(void **)(a1 + 64), v24, v25);
    MMCSRegisterItems();
  }
  else
  {
    objc_msgSend_didCompleteRequestWithError_(*(void **)(a1 + 48), v17, 0);
  }
}

id sub_1C4EC8018(uint64_t a1, void *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (!objc_msgSend_isAlreadyRegistered(v3, v4, v5) || *(unsigned char *)(a1 + 48) || *(unsigned char *)(a1 + 49))
  {
    uint64_t v8 = objc_opt_new();
    int v9 = (void *)MEMORY[0x1E4F28ED0];
    uint64_t v12 = objc_msgSend_itemID(v3, v10, v11);
    id v14 = objc_msgSend_numberWithUnsignedLongLong_(v9, v13, v12);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v15, (uint64_t)v14, *MEMORY[0x1E4F73868]);

    if ((*(unsigned char *)(a1 + 40) & 0x42) != 0) {
      objc_msgSend_setObject_forKey_(v8, v16, MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F738B8]);
    }
    id v18 = objc_msgSend_boundaryKey(v3, v16, v17);

    if (v18)
    {
      uint64_t v21 = objc_msgSend_boundaryKey(v3, v19, v20);
      objc_msgSend_setObject_forKeyedSubscript_(v8, v22, (uint64_t)v21, *MEMORY[0x1E4F737D0]);
    }
    if ((*(unsigned char *)(a1 + 40) & 0x10) != 0)
    {
      uint64_t v23 = objc_msgSend_referenceSignature(v3, v19, v20);
      if (v23)
      {
        uint64_t v24 = (void *)v23;
        uint64_t v25 = objc_msgSend_assetKey(v3, v19, v20);

        if (v25)
        {
          unint64_t v26 = objc_opt_new();
          uint64_t v29 = objc_msgSend_referenceSignature(v3, v27, v28);
          objc_msgSend_setObject_forKeyedSubscript_(v26, v30, (uint64_t)v29, *MEMORY[0x1E4F738B0]);

          uint64_t v33 = objc_msgSend_assetKey(v3, v31, v32);
          objc_msgSend_setObject_forKeyedSubscript_(v26, v34, (uint64_t)v33, *MEMORY[0x1E4F738A8]);

          objc_msgSend_setObject_forKeyedSubscript_(v8, v35, (uint64_t)v26, *MEMORY[0x1E4F739F8]);
        }
      }
    }
    __int16 v36 = objc_msgSend_asset(v3, v19, v20);
    int isReference = objc_msgSend_isReference(v36, v37, v38);

    if (isReference) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  else
  {
    uint64_t v41 = objc_msgSend_signature(v3, v6, v7);

    if (!v41)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v42 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v46 = v42;
        int v49 = 134217984;
        uint64_t v50 = objc_msgSend_itemID(v3, v47, v48);
        _os_log_error_impl(&dword_1C4CFF000, v46, OS_LOG_TYPE_ERROR, "itemID:%llu is missing file signature", (uint8_t *)&v49, 0xCu);
      }
      uint64_t v45 = objc_msgSend_signature(v3, v43, v44);
      if (!v45) {
        __assert_rtn("-[CKDMMCS _contextToRegisterItemGroup:operation:options:completionHandler:]_block_invoke", "CKDMMCS.m", 987, "MMCSItem.signature");
      }
    }
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_1C4EC8348(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = sub_1C4EC7C64(a1, a2, a3);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1C4ECE1B8;
  v7[3] = &unk_1E64F2D90;
  v7[4] = a1;
  v7[5] = a2;
  objc_msgSend_MMCSRunSerialized_(v5, v6, (uint64_t)v7);
}

void sub_1C4EC83DC(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = sub_1C4EC7C64(a1, a2, a3);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1C4ECFB90;
  v7[3] = &unk_1E64F2D90;
  v7[4] = a1;
  v7[5] = a2;
  objc_msgSend_MMCSRunSerialized_(v5, v6, (uint64_t)v7);
}

void sub_1C4EC89FC(uint64_t a1, void *a2)
{
  uint64_t v207 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  unsigned int v4 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    size_t v172 = *(void *)(a1 + 32);
    uint64_t v173 = *(void *)(a1 + 40);
    __int16 v174 = *(void **)(a1 + 48);
    *(_DWORD *)buf = 138412802;
    size_t v202 = v172;
    __int16 v203 = 2114;
    uint64_t v204 = v173;
    __int16 v205 = 2112;
    uint64_t v206 = v174;
    _os_log_debug_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_DEBUG, "Getting MMCS item group %@ for operationID:%{public}@ with options %@", buf, 0x20u);
  }
  id v198 = objc_msgSend_items(*(void **)(a1 + 32), v5, v6);
  size_t v9 = objc_msgSend_count(v198, v7, v8);
  v196 = malloc_type_calloc(v9, 8uLL, 0x100004000313F17uLL);
  uint64_t v195 = malloc_type_calloc(v9, 8uLL, 0x10040436913F5uLL);
  v194 = malloc_type_calloc(v9, 8uLL, 0x10040436913F5uLL);
  v199 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], v10, v9);
  uint64_t v184 = a1;
  uint64_t shouldCloneFileInAssetCache = objc_msgSend_shouldCloneFileInAssetCache(*(void **)(a1 + 48), v11, v12);
  objc_msgSend_setShouldCloneFileInAssetCache_(v3, v14, shouldCloneFileInAssetCache);
  long long v183 = v3;
  uint64_t v17 = objc_msgSend_operation(v3, v15, v16);
  uint64_t v20 = objc_msgSend_operationInfo(v17, v18, v19);

  uint64_t v185 = v20;
  int v25 = objc_msgSend_fetchingAssetsForRereference(v20, v21, v22);
  size_t v197 = v9;
  if (v9)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *MEMORY[0x1E4F73890];
    uint64_t v189 = *MEMORY[0x1E4F738A8];
    uint64_t v190 = *MEMORY[0x1E4F738B0];
    uint64_t v187 = *MEMORY[0x1E4F737E0];
    uint64_t v188 = *MEMORY[0x1E4F739E8];
    uint64_t v192 = *MEMORY[0x1E4F737F0];
    unint64_t v28 = -1;
    uint64_t v191 = *MEMORY[0x1E4F737E8];
    uint64_t v186 = *MEMORY[0x1E4F73840];
    do
    {
      uint64_t v29 = objc_msgSend_objectAtIndexedSubscript_(v198, v23, v26);
      uint64_t v32 = objc_msgSend_signature(v29, v30, v31);
      if (!objc_msgSend_itemID(v29, v33, v34))
      {
        __int16 v103 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v35, v36);
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v103, v104, *(void *)(v184 + 72), *(void *)(v184 + 56), @"CKDMMCS.m", 1102, @"Zero item ID");
      }
      uint64_t v37 = objc_msgSend_signature(v29, v35, v36);

      if (!v37)
      {
        uint64_t v105 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v38, v39);
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v105, v106, *(void *)(v184 + 72), *(void *)(v184 + 56), @"CKDMMCS.m", 1103, @"Null item signature");
      }
      v196[v26] = objc_msgSend_itemID(v29, v38, v39);
      v195[v26] = objc_msgSend_bytes(v32, v40, v41);
      uint64_t v44 = objc_msgSend_authToken(v29, v42, v43);

      if (!v44)
      {
        uint64_t v107 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v45, v46);
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v107, v108, *(void *)(v184 + 72), *(void *)(v184 + 56), @"CKDMMCS.m", 1108, @"No auth-token for item: %@", v29);
      }
      uint64_t v47 = objc_msgSend_authToken(v29, v45, v46);
      v194[v26] = objc_msgSend_UTF8String(v47, v48, v49);
      if (objc_msgSend_downloadTokenExpiration(v29, v50, v51) < v28) {
        unint64_t v28 = objc_msgSend_downloadTokenExpiration(v29, v52, v53);
      }
      uint64_t v54 = objc_opt_new();
      uint64_t v55 = (void *)MEMORY[0x1E4F28ED0];
      uint64_t v58 = objc_msgSend_asset(v29, v56, v57);
      uint64_t v61 = objc_msgSend_paddedFileSize(v58, v59, v60);
      uint64_t v63 = objc_msgSend_numberWithUnsignedLongLong_(v55, v62, v61);
      objc_msgSend_setObject_forKeyedSubscript_(v54, v64, (uint64_t)v63, v27);

      uint64_t v67 = objc_msgSend_referenceSignature(v29, v65, v66);
      if (v67)
      {
        uint64_t v70 = (void *)v67;
        uint64_t v71 = objc_msgSend_assetKey(v29, v68, v69);

        if (v71)
        {
          double v72 = objc_opt_new();
          id v75 = objc_msgSend_referenceSignature(v29, v73, v74);
          objc_msgSend_setObject_forKeyedSubscript_(v72, v76, (uint64_t)v75, v190);

          ptrdiff_t v79 = objc_msgSend_assetKey(v29, v77, v78);
          objc_msgSend_setObject_forKeyedSubscript_(v72, v80, (uint64_t)v79, v189);

          objc_msgSend_setObject_forKeyedSubscript_(v54, v81, (uint64_t)v72, v188);
        }
      }
      uint64_t v82 = objc_msgSend_asset(v29, v68, v69);
      uint64_t v85 = objc_msgSend_assetTransferOptions(v82, v83, v84);

      if (v85)
      {
        uint64_t v89 = objc_msgSend_sparseAware(v85, v86, v87);
        if (v89) {
          objc_msgSend_setObject_forKeyedSubscript_(v54, v88, (uint64_t)v89, v187);
        }
      }
      uint64_t v90 = objc_msgSend_constructedAssetDownloadURL(v29, v86, v87);

      if (v90)
      {
        uint64_t v93 = (void *)MEMORY[0x1E4F28ED0];
        uint64_t v94 = objc_msgSend_constructedAssetEstimatedSize(v29, v91, v92);
        long long v96 = objc_msgSend_numberWithUnsignedLongLong_(v93, v95, v94);
        objc_msgSend_setObject_forKeyedSubscript_(v54, v97, (uint64_t)v96, v192);

        long long v100 = objc_msgSend_constructedAssetDownloadURL(v29, v98, v99);
        objc_msgSend_setObject_forKeyedSubscript_(v54, v101, (uint64_t)v100, v191);
      }
      if (v25)
      {
        long long v102 = objc_msgSend_package(v29, v91, v92);

        if (!v102) {
          objc_msgSend_setObject_forKeyedSubscript_(v54, v91, MEMORY[0x1E4F1CC38], v186);
        }
      }
      objc_msgSend_addObject_(v199, v91, (uint64_t)v54);

      ++v26;
    }
    while (v197 != v26);
  }
  else
  {
    unint64_t v28 = -1;
  }
  double v109 = (double)v28 + -978307200.0;
  id v110 = objc_msgSend_MMCSOptions(*(void **)(v184 + 48), v23, v24);
  uint64_t v113 = objc_msgSend_downloadPreauthorization(*(void **)(v184 + 32), v111, v112);
  uint64_t v116 = objc_msgSend_contentResponseHeaders(v113, v114, v115);
  uint64_t v118 = objc_msgSend_CKObjectForKeyCaseInsensitive_(v116, v117, @"x-apple-mmcs-proto-version");

  id v121 = objc_msgSend_downloadPreauthorization(*(void **)(v184 + 32), v119, v120);
  uint64_t v124 = objc_msgSend_contentResponseBody(v121, v122, v123);

  if (v118)
  {
    if (v124)
    {
      uint64_t v127 = objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], v125, v126);
      int v130 = objc_msgSend_usePreauth(v127, v128, v129);

      if (v130)
      {
        objc_msgSend_setObject_forKeyedSubscript_(v110, v125, (uint64_t)v118, *MEMORY[0x1E4F739A0]);
        objc_msgSend_setObject_forKeyedSubscript_(v110, v131, (uint64_t)v124, *MEMORY[0x1E4F73960]);
      }
    }
  }
  objc_msgSend_setObject_forKeyedSubscript_(v110, v125, (uint64_t)v199, *MEMORY[0x1E4F73940]);
  objc_msgSend_setObject_forKeyedSubscript_(v110, v132, *(void *)(v184 + 64), *MEMORY[0x1E4F73908]);
  uint64_t v135 = objc_msgSend_numberWithDouble_(MEMORY[0x1E4F28ED0], v133, v134, v109);
  objc_msgSend_setObject_forKeyedSubscript_(v110, v136, (uint64_t)v135, *MEMORY[0x1E4F738E0]);

  uint64_t v137 = v183;
  uint64_t v140 = objc_msgSend_operationInfo(v183, v138, v139);
  if (objc_msgSend_destination(v140, v141, v142)) {
    objc_msgSend_setObject_forKeyedSubscript_(v110, v143, MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F73978]);
  }
  v193 = v140;
  if (objc_msgSend_destination(v140, v143, v144) == 1)
  {
    uint64_t v147 = MEMORY[0x1E4F1CC28];
    objc_msgSend_setObject_forKeyedSubscript_(v110, v145, MEMORY[0x1E4F1CC28], *MEMORY[0x1E4F739C8]);
    objc_msgSend_setObject_forKeyedSubscript_(v110, v148, v147, *MEMORY[0x1E4F739D0]);
  }
  if (v25)
  {
    uint64_t v149 = objc_msgSend_cloneContextReturnBlock(v185, v145, v146);

    if (v149) {
      objc_msgSend_setObject_forKeyedSubscript_(v110, v150, MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F73990]);
    }
  }
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A518], OS_LOG_TYPE_INFO)) {
    objc_msgSend__logMMCSOptions_(*(void **)(v184 + 56), v151, (uint64_t)v110);
  }
  CFTypeRef cf = 0;
  uint64_t v153 = objc_msgSend_contentBaseURL(*(void **)(v184 + 32), v151, v152);
  id v156 = objc_msgSend_owner(*(void **)(v184 + 32), v154, v155);
  uint64_t v158 = objc_msgSend_URLByAppendingPathComponent_(v153, v157, (uint64_t)v156);

  objc_msgSend_getMMCSEngine(*(void **)(v184 + 56), v159, v160);
  long long v163 = objc_msgSend_requestor(*(void **)(v184 + 32), v161, v162);
  uint64_t v182 = v194;
  LODWORD(v153) = MMCSGetItems();

  free(v196);
  free(v195);
  free(v194);
  if (!v153)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    long long v164 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v175 = *(void *)(v184 + 40);
      uint64_t v176 = (void *)MEMORY[0x1E4F1A280];
      CFTypeRef v177 = cf;
      uint64_t v178 = v164;
      uint64_t v179 = (uint64_t)v177;
      uint64_t v137 = v183;
      long long v181 = objc_msgSend_undeprecatedDescriptionForError_(v176, v180, v179, v194, &cf);
      *(_DWORD *)buf = 134218498;
      size_t v202 = v197;
      __int16 v203 = 2114;
      uint64_t v204 = v175;
      __int16 v205 = 2112;
      uint64_t v206 = v181;
      _os_log_error_impl(&dword_1C4CFF000, v178, OS_LOG_TYPE_ERROR, "Failed getting %lu MMCS items for operationID:%{public}@: %@", buf, 0x20u);
    }
    CFTypeRef v167 = cf;
    uint64_t v168 = objc_msgSend_mmcsOperationType(v137, v165, v166, v182);
    uint64_t v170 = objc_msgSend__errorWithMMCSError_description_operationType_(CKDMMCS, v169, (uint64_t)v167, @"Fetching asset batch failed", v168);
    objc_msgSend_didCompleteRequestWithError_(v137, v171, (uint64_t)v170);
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_1C4EC9B18(uint64_t a1, void *a2)
{
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  unsigned int v4 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    size_t v132 = *(void *)(a1 + 32);
    uint64_t v133 = *(void *)(a1 + 40);
    uint64_t v134 = *(void **)(a1 + 48);
    *(_DWORD *)buf = 138412802;
    size_t v163 = v132;
    __int16 v164 = 2114;
    uint64_t v165 = v133;
    __int16 v166 = 2112;
    CFTypeRef v167 = v134;
    _os_log_debug_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_DEBUG, "Putting MMCS item group %@ for operationID:%{public}@ with options %@", buf, 0x20u);
  }
  uint64_t v159 = objc_msgSend_items(*(void **)(a1 + 32), v5, v6);
  size_t v9 = objc_msgSend_count(v159, v7, v8);
  uint64_t v158 = malloc_type_calloc(v9, 8uLL, 0x100004000313F17uLL);
  uint64_t v157 = malloc_type_calloc(v9, 8uLL, 0x10040436913F5uLL);
  id v156 = malloc_type_calloc(v9, 8uLL, 0x10040436913F5uLL);
  uint64_t v155 = malloc_type_calloc(v9, 4uLL, 0x100004052888210uLL);
  uint64_t v145 = a1;
  uint64_t shouldCloneFileInAssetCache = objc_msgSend_shouldCloneFileInAssetCache(*(void **)(a1 + 48), v10, v11);
  uint64_t v144 = v3;
  objc_msgSend_setShouldCloneFileInAssetCache_(v3, v13, shouldCloneFileInAssetCache);
  uint64_t v160 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], v14, v9);
  if (v9)
  {
    uint64_t v17 = 0;
    uint64_t v148 = *MEMORY[0x1E4F738B0];
    uint64_t v147 = *MEMORY[0x1E4F738A8];
    uint64_t v146 = *MEMORY[0x1E4F739F8];
    uint64_t v152 = *MEMORY[0x1E4F73840];
    uint64_t v154 = *MEMORY[0x1E4F737D0];
    uint64_t v151 = *MEMORY[0x1E4F73890];
    unint64_t v18 = -1;
    uint64_t v150 = *MEMORY[0x1E4F739F0];
    uint64_t v149 = *MEMORY[0x1E4F739C0];
    do
    {
      uint64_t v19 = objc_msgSend_objectAtIndexedSubscript_(v159, v15, v17);
      if (!objc_msgSend_itemID(v19, v20, v21))
      {
        uint64_t v92 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v22, v23);
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v92, v93, *(void *)(v145 + 72), *(void *)(v145 + 56), @"CKDMMCS.m", 1257, @"Zero item ID");
      }
      uint64_t v24 = objc_msgSend_signature(v19, v22, v23);

      if (!v24)
      {
        uint64_t v94 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v25, v26);
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v94, v95, *(void *)(v145 + 72), *(void *)(v145 + 56), @"CKDMMCS.m", 1258, @"Null signature");
      }
      uint64_t v27 = objc_msgSend_authToken(v19, v25, v26);

      if (!v27)
      {
        long long v96 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v28, v29);
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v96, v97, *(void *)(v145 + 72), *(void *)(v145 + 56), @"CKDMMCS.m", 1259, @"Null auth-token");
      }
      v158[v17] = objc_msgSend_itemID(v19, v28, v29);
      uint64_t v32 = objc_msgSend_signature(v19, v30, v31);
      v157[v17] = objc_msgSend_bytes(v32, v33, v34);
      uint64_t v37 = objc_msgSend_authToken(v19, v35, v36);
      v156[v17] = objc_msgSend_UTF8String(v37, v38, v39);
      v155[v17] = 1;
      if (objc_msgSend_uploadTokenExpiration(v19, v40, v41) < v18) {
        unint64_t v18 = objc_msgSend_uploadTokenExpiration(v19, v42, v43);
      }
      uint64_t v44 = objc_opt_new();
      uint64_t v47 = objc_msgSend_referenceSignature(v19, v45, v46);
      if (v47)
      {
        uint64_t v50 = (void *)v47;
        uint64_t v51 = objc_msgSend_assetKey(v19, v48, v49);

        if (v51)
        {
          uint64_t v52 = objc_opt_new();
          uint64_t v55 = objc_msgSend_referenceSignature(v19, v53, v54);
          objc_msgSend_setObject_forKeyedSubscript_(v52, v56, (uint64_t)v55, v148);

          uint64_t v59 = objc_msgSend_assetKey(v19, v57, v58);
          objc_msgSend_setObject_forKeyedSubscript_(v52, v60, (uint64_t)v59, v147);

          objc_msgSend_setObject_forKeyedSubscript_(v44, v61, (uint64_t)v52, v146);
        }
      }
      uint64_t v62 = objc_msgSend_asset(v19, v48, v49);
      int isReference = objc_msgSend_isReference(v62, v63, v64);

      if (isReference) {
        objc_msgSend_setObject_forKeyedSubscript_(v44, v66, MEMORY[0x1E4F1CC38], v152);
      }
      uint64_t v68 = objc_msgSend_boundaryKey(v19, v66, v67);

      if (v68)
      {
        uint64_t v71 = objc_msgSend_boundaryKey(v19, v69, v70);
        objc_msgSend_setObject_forKeyedSubscript_(v44, v72, (uint64_t)v71, v154);
      }
      uint64_t v73 = objc_msgSend_assetZoneKey(v19, v69, v70);
      ptrdiff_t v76 = objc_msgSend_useMMCSEncryptionV2(v73, v74, v75);
      int v79 = objc_msgSend_BOOLValue(v76, v77, v78);

      if (v79)
      {
        uint64_t v82 = (void *)MEMORY[0x1E4F28ED0];
        uint64_t v83 = objc_msgSend_paddedFileSize(v19, v80, v81);
        uint64_t v85 = objc_msgSend_numberWithUnsignedLongLong_(v82, v84, v83);
        objc_msgSend_setObject_forKeyedSubscript_(v44, v86, (uint64_t)v85, v151);

        uint64_t v89 = objc_msgSend_verificationKey(v19, v87, v88);
        objc_msgSend_setObject_forKeyedSubscript_(v44, v90, (uint64_t)v89, v150);

        objc_msgSend_setObject_forKeyedSubscript_(v44, v91, MEMORY[0x1E4F1CC38], v149);
      }
      objc_msgSend_addObject_(v160, v80, (uint64_t)v44);

      ++v17;
    }
    while (v9 != v17);
  }
  else
  {
    unint64_t v18 = -1;
  }
  id v98 = objc_msgSend_MMCSOptions(*(void **)(v145 + 48), v15, v16);
  objc_msgSend_setObject_forKeyedSubscript_(v98, v99, (uint64_t)v160, *MEMORY[0x1E4F73940]);
  objc_msgSend_setObject_forKeyedSubscript_(v98, v100, *(void *)(v145 + 64), *MEMORY[0x1E4F73908]);
  __int16 v103 = objc_msgSend_numberWithDouble_(MEMORY[0x1E4F28ED0], v101, v102, (double)v18 + -978307200.0);
  objc_msgSend_setObject_forKeyedSubscript_(v98, v104, (uint64_t)v103, *MEMORY[0x1E4F738E0]);

  uint64_t v108 = objc_msgSend_cloneContext(*(void **)(v145 + 32), v105, v106);
  if (v108) {
    objc_msgSend_setObject_forKeyedSubscript_(v98, v107, (uint64_t)v108, *MEMORY[0x1E4F73990]);
  }
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A518], OS_LOG_TYPE_INFO)) {
    objc_msgSend__logMMCSOptions_(*(void **)(v145 + 56), v109, (uint64_t)v98);
  }
  uint64_t v111 = objc_msgSend_contentBaseURL(*(void **)(v145 + 32), v109, v110);
  int v114 = objc_msgSend_owner(*(void **)(v145 + 32), v112, v113);
  uint64_t v116 = objc_msgSend_URLByAppendingPathComponent_(v111, v115, (uint64_t)v114);

  CFTypeRef cf = 0;
  objc_msgSend_getMMCSEngine(*(void **)(v145 + 56), v117, v118);
  id v121 = objc_msgSend_requestor(*(void **)(v145 + 32), v119, v120);
  uint64_t v142 = v155;
  p_CFTypeRef cf = &cf;
  uint64_t v141 = v156;
  size_t v153 = v9;
  uint64_t v122 = v98;
  LODWORD(v111) = MMCSPutItems();

  free(v158);
  free(v157);
  free(v156);
  free(v155);
  if (!v111)
  {
    uint64_t v123 = v98;
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v124 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v135 = *(void *)(v145 + 40);
      uint64_t v136 = (void *)MEMORY[0x1E4F1A280];
      CFTypeRef v137 = cf;
      uint64_t v138 = v124;
      uint64_t v140 = objc_msgSend_undeprecatedDescriptionForError_(v136, v139, (uint64_t)v137, v156, v155, &cf);
      *(_DWORD *)buf = 134218498;
      size_t v163 = v153;
      __int16 v164 = 2114;
      uint64_t v165 = v135;
      __int16 v166 = 2112;
      CFTypeRef v167 = v140;
      _os_log_error_impl(&dword_1C4CFF000, v138, OS_LOG_TYPE_ERROR, "Failed putting %lu MMCS items for operationID:%{public}@: %@", buf, 0x20u);
    }
    CFTypeRef v127 = cf;
    uint64_t v128 = objc_msgSend_mmcsOperationType(v144, v125, v126, v141, v142, p_cf);
    int v130 = objc_msgSend__errorWithMMCSError_description_operationType_(CKDMMCS, v129, (uint64_t)v127, @"Saving asset batch failed", v128);
    objc_msgSend_didCompleteRequestWithError_(v144, v131, (uint64_t)v130);
    if (cf) {
      CFRelease(cf);
    }

    uint64_t v122 = v123;
  }
}

uint64_t sub_1C4ECAA60(uint64_t a1, const char *a2, uint64_t a3)
{
  return MMCSGetChunks();
}

uint64_t sub_1C4ECAAC4(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)MEMORY[0x1C8789E70]();
  id v7 = a1;
  int v10 = objc_msgSend_signatureToMutableData(v7, v8, v9);
  uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v10, v11, a2);

  if (!v12)
  {
    id v13 = objc_alloc(MEMORY[0x1E4F1CA58]);
    uint64_t v12 = objc_msgSend_initWithLength_(v13, v14, 0);
    uint64_t v17 = objc_msgSend_signatureToMutableData(v7, v15, v16);
    objc_msgSend_setObject_forKeyedSubscript_(v17, v18, (uint64_t)v12, a2);
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v19 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v21 = v19;
    uint64_t v24 = objc_msgSend_signatureToMutableData(v7, v22, v23);
    int v25 = 138413058;
    id v26 = v7;
    __int16 v27 = 2112;
    uint64_t v28 = a2;
    __int16 v29 = 2112;
    char v30 = v24;
    __int16 v31 = 2112;
    uint64_t v32 = v12;
    _os_log_debug_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_DEBUG, "_C3MMCSGetChunksChunkCallback(%@, %@, ...), signatureToMutableData=%@, mutableData=%@", (uint8_t *)&v25, 0x2Au);

    if (!a3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (a3) {
LABEL_7:
  }
    *a3 = MMCSItemReaderWriterCreateWithMutableData();
LABEL_8:

  return 1;
}

void sub_1C4ECAC94()
{
  uint64_t v0 = (void *)MEMORY[0x1C8789E70]();
}

void sub_1C4ECADEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4ECAE04(void *a1, const char *a2)
{
  uint64_t v4 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v5 = *(void **)(v4 + 40);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1C4ECAE9C;
  v9[3] = &unk_1E64F5080;
  v9[4] = v4;
  uint64_t v6 = objc_msgSend_registeredMMCSItemForRereferencedAsset_copyBlock_(v5, a2, v3, v9);
  uint64_t v7 = *(void *)(a1[6] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

id sub_1C4ECAE9C(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_getMMCSEngine(*(void **)(a1 + 32), a2, a3);
  if (MMCSDuplicateRegisteredfile())
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v3, *MEMORY[0x1E4F19DD8], 1017, @"failed to duplicate MMCS item for re-reference");
  }
  return v4;
}

void sub_1C4ECB148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4ECB168(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_getMMCSEngine(*(void **)(a1 + 32), a2, a3);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = MMCSEngineCopyStatusReport();
  return MEMORY[0x1F41817F8]();
}

void sub_1C4ECB568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4ECB594(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_getMMCSEngine(*(void **)(a1 + 32), a2, a3);
  uint64_t result = MMCSRegisteredItemCount();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result != 0;
  return result;
}

void sub_1C4ECBE0C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1C4ECBE78(void *a1, const char *a2)
{
  uint64_t v3 = (void *)a1[4];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = *(void *)(a1[6] + 8) + 24;
  uint64_t v7 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v7 + 40);
  char RegisteredItemsGreaterThan_itemIds_itemCount_error = objc_msgSend__getRegisteredItemsGreaterThan_itemIds_itemCount_error_(v3, a2, v4, v5, v6, &obj);
  objc_storeStrong((id *)(v7 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = RegisteredItemsGreaterThan_itemIds_itemCount_error;
}

intptr_t sub_1C4ECBEEC(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1C4ECC458(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__unregisterItemIDs_, *(void *)(a1 + 40));
}

void sub_1C4ECC820(uint64_t a1, void *a2)
{
  v129[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v6 = objc_msgSend_sectionItems(*(void **)(a1 + 32), v4, v5);
  unsigned int v9 = objc_msgSend_count(v6, v7, v8);
  uint64_t v119 = objc_msgSend_signature(*(void **)(a1 + 32), v10, v11);
  objc_msgSend_bytes(v119, v12, v13);
  uint64_t v118 = objc_msgSend_authToken(*(void **)(a1 + 32), v14, v15);
  uint64_t v117 = objc_msgSend_UTF8String(v118, v16, v17);
  uint64_t v20 = objc_msgSend_putPackageSectionIdentifier(*(void **)(a1 + 32), v18, v19);

  if (!v20)
  {
    uint64_t v111 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v21, v22);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v111, v112, *(void *)(a1 + 72), *(void *)(a1 + 40), @"CKDMMCS.m", 1544, @"nil section ID");
  }
  objc_msgSend_setMMCSPackageSectionItem_(v3, v21, *(void *)(a1 + 32));
  uint64_t v24 = malloc_type_calloc(v9, 8uLL, 0x100004000313F17uLL);
  if (v9)
  {
    uint64_t v25 = 0;
    unint64_t v26 = -1;
    do
    {
      __int16 v27 = objc_msgSend_objectAtIndexedSubscript_(v6, v23, v25);
      if (!objc_msgSend_itemID(v27, v28, v29))
      {
        uint64_t v120 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v30, v31);
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v120, v36, *(void *)(a1 + 72), *(void *)(a1 + 40), @"CKDMMCS.m", 1550, @"Zero item ID");
      }
      v24[v25] = objc_msgSend_itemID(v27, v30, v31);
      if (objc_msgSend_uploadTokenExpiration(v27, v32, v33) < v26) {
        unint64_t v26 = objc_msgSend_uploadTokenExpiration(v27, v34, v35);
      }

      ++v25;
    }
    while (v9 != v25);
  }
  else
  {
    unint64_t v26 = -1;
  }
  id v121 = v3;
  uint64_t v37 = objc_opt_new();
  uint64_t v40 = objc_msgSend_referenceSignature(*(void **)(a1 + 32), v38, v39);
  if (v40)
  {
    uint64_t v43 = (void *)v40;
    uint64_t v44 = objc_msgSend_assetKey(*(void **)(a1 + 32), v41, v42);

    if (v44)
    {
      uint64_t v45 = objc_opt_new();
      uint64_t v48 = objc_msgSend_referenceSignature(*(void **)(a1 + 32), v46, v47);
      objc_msgSend_setObject_forKeyedSubscript_(v45, v49, (uint64_t)v48, *MEMORY[0x1E4F738B0]);

      uint64_t v52 = objc_msgSend_assetKey(*(void **)(a1 + 32), v50, v51);
      objc_msgSend_setObject_forKeyedSubscript_(v45, v53, (uint64_t)v52, *MEMORY[0x1E4F738A8]);

      ptrdiff_t v56 = objc_msgSend_boundaryKey(*(void **)(a1 + 32), v54, v55);
      objc_msgSend_setObject_forKeyedSubscript_(v37, v57, (uint64_t)v56, *MEMORY[0x1E4F737D0]);

      uint64_t v58 = (void *)MEMORY[0x1E4F28ED0];
      uint64_t v61 = objc_msgSend_paddedFileSize(*(void **)(a1 + 32), v59, v60);
      uint64_t v63 = objc_msgSend_numberWithUnsignedLongLong_(v58, v62, v61);
      objc_msgSend_setObject_forKeyedSubscript_(v37, v64, (uint64_t)v63, *MEMORY[0x1E4F73890]);

      objc_msgSend_setObject_forKeyedSubscript_(v37, v65, (uint64_t)v45, *MEMORY[0x1E4F739F8]);
      uint64_t v68 = objc_msgSend_verificationKey(*(void **)(a1 + 32), v66, v67);
      objc_msgSend_setObject_forKeyedSubscript_(v37, v69, (uint64_t)v68, *MEMORY[0x1E4F739F0]);
    }
  }
  double v70 = (double)v26 + -978307200.0;
  uint64_t v71 = objc_msgSend_MMCSOptions(*(void **)(a1 + 48), v41, v42);
  uint64_t v116 = v37;
  v129[0] = v37;
  uint64_t v73 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v72, (uint64_t)v129, 1);
  objc_msgSend_setObject_forKeyedSubscript_(v71, v74, (uint64_t)v73, *MEMORY[0x1E4F73940]);

  objc_msgSend_setObject_forKeyedSubscript_(v71, v75, *(void *)(a1 + 56), *MEMORY[0x1E4F73908]);
  uint64_t v78 = objc_msgSend_numberWithDouble_(MEMORY[0x1E4F28ED0], v76, v77, v70);
  objc_msgSend_setObject_forKeyedSubscript_(v71, v79, (uint64_t)v78, *MEMORY[0x1E4F738E0]);

  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A518], OS_LOG_TYPE_INFO)) {
    objc_msgSend__logMMCSOptions_(*(void **)(a1 + 40), v80, (uint64_t)v71);
  }
  uint64_t v82 = objc_msgSend_contentBaseURL(*(void **)(a1 + 32), v80, v81);
  uint64_t v85 = objc_msgSend_owner(*(void **)(a1 + 32), v83, v84);
  uint64_t v87 = objc_msgSend_URLByAppendingPathComponent_(v82, v86, (uint64_t)v85);

  CFTypeRef cf = 0;
  objc_msgSend_getMMCSEngine(*(void **)(a1 + 40), v88, v89);
  uint64_t v92 = objc_msgSend_requestor(*(void **)(a1 + 32), v90, v91);
  objc_super v95 = objc_msgSend_putPackageSectionIdentifier(*(void **)(a1 + 32), v93, v94);
  LODWORD(v115) = 1;
  uint64_t v113 = v24;
  uint64_t v114 = v117;
  long long v96 = v121;
  LODWORD(v82) = MMCSPutSection();

  free(v24);
  if (!v82)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    char v97 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v105 = *(void *)(a1 + 64);
      uint64_t v106 = (void *)MEMORY[0x1E4F1A280];
      CFTypeRef v107 = cf;
      uint64_t v108 = v97;
      uint64_t v110 = objc_msgSend_undeprecatedDescriptionForError_(v106, v109, (uint64_t)v107, v113, v117, 1, &cf);
      *(_DWORD *)buf = 134218498;
      uint64_t v124 = v9;
      __int16 v125 = 2114;
      uint64_t v126 = v105;
      __int16 v127 = 2112;
      uint64_t v128 = v110;
      _os_log_error_impl(&dword_1C4CFF000, v108, OS_LOG_TYPE_ERROR, "Failed putting section with %lu MMCS items for operationID:%{public}@: %@", buf, 0x20u);

      long long v96 = v121;
    }
    CFTypeRef v100 = cf;
    uint64_t v101 = objc_msgSend_mmcsOperationType(v96, v98, v99, v113, v114, v115);
    __int16 v103 = objc_msgSend__errorWithMMCSError_description_operationType_(CKDMMCS, v102, (uint64_t)v100, @"Saving asset batch failed", v101);
    objc_msgSend_didCompleteRequestWithError_(v96, v104, (uint64_t)v103);
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_1C4ECD49C(uint64_t a1, void *a2)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v112 = objc_msgSend_sectionItems(*(void **)(a1 + 32), v4, v5);
  size_t v8 = objc_msgSend_count(v112, v6, v7);
  uint64_t v114 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], v9, v8);
  uint64_t v12 = objc_msgSend_signature(*(void **)(a1 + 32), v10, v11);
  objc_msgSend_bytes(v12, v13, v14);
  uint64_t v101 = objc_msgSend_authToken(*(void **)(a1 + 32), v15, v16);
  objc_msgSend_UTF8String(v101, v17, v18);
  uint64_t v19 = objc_opt_new();
  uint64_t v111 = malloc_type_calloc(v8, 8uLL, 0x100004000313F17uLL);
  uint64_t v110 = malloc_type_calloc(v8, 8uLL, 0x10040436913F5uLL);
  double v109 = malloc_type_calloc(v8, 8uLL, 0x100004000313F17uLL);
  uint64_t v113 = malloc_type_calloc(v8, 8uLL, 0x100004000313F17uLL);
  uint64_t v102 = v3;
  uint64_t v22 = objc_msgSend_operation(v3, v20, v21);
  uint64_t v25 = objc_msgSend_operationInfo(v22, v23, v24);

  CFTypeRef v100 = v25;
  int v28 = objc_msgSend_fetchingAssetsForRereference(v25, v26, v27);
  if (v8)
  {
    int v31 = v28;
    uint64_t v32 = 0;
    uint64_t v105 = *MEMORY[0x1E4F738B0];
    uint64_t v104 = *MEMORY[0x1E4F738A8];
    uint64_t v103 = *MEMORY[0x1E4F739E8];
    uint64_t v107 = *MEMORY[0x1E4F73840];
    unint64_t v33 = -1;
    do
    {
      uint64_t v34 = v12;
      uint64_t v35 = objc_msgSend_objectAtIndexedSubscript_(v112, v29, v32);
      uint64_t v12 = objc_msgSend_signature(v35, v36, v37);

      if (!objc_msgSend_itemID(v35, v38, v39))
      {
        uint64_t v68 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v40, v41);
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v68, v69, *(void *)(a1 + 72), *(void *)(a1 + 40), @"CKDMMCS.m", 1664, @"Zero item ID");
      }
      size_t v42 = v8;
      v111[v32] = objc_msgSend_itemID(v35, v40, v41);
      v110[v32] = objc_msgSend_bytes(v12, v43, v44);
      v109[v32] = objc_msgSend_offset(v35, v45, v46);
      v113[v32] = objc_msgSend_fileSize(v35, v47, v48);
      if (objc_msgSend_downloadTokenExpiration(v35, v49, v50) < v33) {
        unint64_t v33 = objc_msgSend_downloadTokenExpiration(v35, v51, v52);
      }
      uint64_t v53 = objc_msgSend_referenceSignature(*(void **)(a1 + 32), v51, v52);
      if (v53)
      {
        ptrdiff_t v56 = (void *)v53;
        uint64_t v57 = objc_msgSend_assetKey(*(void **)(a1 + 32), v54, v55);

        if (v57)
        {
          uint64_t v58 = objc_opt_new();
          uint64_t v61 = objc_msgSend_referenceSignature(*(void **)(a1 + 32), v59, v60);
          objc_msgSend_setObject_forKeyedSubscript_(v58, v62, (uint64_t)v61, v105);

          ptrdiff_t v65 = objc_msgSend_assetKey(*(void **)(a1 + 32), v63, v64);
          objc_msgSend_setObject_forKeyedSubscript_(v58, v66, (uint64_t)v65, v104);

          objc_msgSend_setObject_forKeyedSubscript_(v19, v67, (uint64_t)v58, v103);
        }
      }
      if (v31) {
        objc_msgSend_setObject_forKeyedSubscript_(v19, v54, MEMORY[0x1E4F1CC38], v107);
      }
      objc_msgSend_addObject_(v114, v54, (uint64_t)v19);

      ++v32;
      size_t v8 = v42;
    }
    while (v42 != v32);
  }
  else
  {
    unint64_t v33 = -1;
  }
  double v70 = objc_msgSend_MMCSOptions(*(void **)(a1 + 48), v29, v30);
  objc_msgSend_setObject_forKeyedSubscript_(v70, v71, (uint64_t)v114, *MEMORY[0x1E4F73940]);
  objc_msgSend_setObject_forKeyedSubscript_(v70, v72, *(void *)(a1 + 56), *MEMORY[0x1E4F73908]);
  uint64_t v75 = objc_msgSend_numberWithDouble_(MEMORY[0x1E4F28ED0], v73, v74, (double)v33 + -978307200.0);
  objc_msgSend_setObject_forKeyedSubscript_(v70, v76, (uint64_t)v75, *MEMORY[0x1E4F738E0]);

  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A518], OS_LOG_TYPE_INFO)) {
    objc_msgSend__logMMCSOptions_(*(void **)(a1 + 40), v77, (uint64_t)v70);
  }
  int v79 = objc_msgSend_contentBaseURL(*(void **)(a1 + 32), v77, v78);
  uint64_t v82 = objc_msgSend_owner(*(void **)(a1 + 32), v80, v81);
  uint64_t v108 = objc_msgSend_URLByAppendingPathComponent_(v79, v83, (uint64_t)v82);

  CFTypeRef v115 = 0;
  objc_msgSend_getMMCSEngine(*(void **)(a1 + 40), v84, v85);
  uint64_t v88 = objc_msgSend_requestor(*(void **)(a1 + 32), v86, v87);
  uint64_t v89 = v70;
  int v106 = MMCSGetItemsWithSection();

  free(v111);
  free(v110);
  free(v109);
  free(v113);
  if (!v106)
  {
    uint64_t v92 = v70;
    uint64_t v93 = (uint64_t)v115;
    uint64_t v94 = objc_msgSend_mmcsOperationType(v102, v90, v91, v111, v110, v109, v113, &v115);
    long long v96 = objc_msgSend__errorWithMMCSError_description_operationType_(CKDMMCS, v95, v93, @"Fetching section failed", v94);
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    char v97 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v99 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 134218498;
      size_t v117 = v8;
      __int16 v118 = 2114;
      uint64_t v119 = v99;
      __int16 v120 = 2112;
      id v121 = v96;
      _os_log_error_impl(&dword_1C4CFF000, v97, OS_LOG_TYPE_ERROR, "Failed getting a section with %lu MMCS items for operationID:%{public}@: %@", buf, 0x20u);
    }
    objc_msgSend_didCompleteRequestWithError_(v102, v98, (uint64_t)v96);
    if (v115) {
      CFRelease(v115);
    }

    uint64_t v89 = v92;
  }
}

void sub_1C4ECDECC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4ECE044(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4ECE0E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4ECE1B8(uint64_t a1)
{
}

void sub_1C4ECE1C8(void *a1, void *a2, int a3)
{
  uint64_t v402 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  size_t v8 = v5;
  unsigned int v9 = "register";
  if (a3) {
    unsigned int v9 = "fetch";
  }
  v363 = v9;
  uint64_t v10 = "Registered";
  if (a3) {
    uint64_t v10 = "Fetched";
  }
  v338 = v10;
  v345 = objc_msgSend_operation(v5, v6, v7);
  id v11 = a2;
  uint64_t v360 = *MEMORY[0x1E4F739D8];
  uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(v11, v12, *MEMORY[0x1E4F739D8]);
  uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(v11, v14, *MEMORY[0x1E4F73940]);
  uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(v11, v16, *MEMORY[0x1E4F73998]);
  if (!v13)
  {
    uint64_t v20 = objc_msgSend_itemGroup(v8, v17, v18);
    objc_msgSend_setAuthPutRequest_(v20, v21, v19);
  }
  v341 = (void *)v19;
  uint64_t v22 = objc_msgSend_count(v15, v17, v18);
  uint64_t v25 = objc_msgSend_itemGroup(v8, v23, v24);
  int v28 = objc_msgSend_items(v25, v26, v27);

  int v31 = objc_msgSend_operationInfo(v8, v29, v30);
  unsigned int v34 = objc_msgSend_options(v31, v32, v33);

  int v35 = (v34 >> 4) & 1;
  uint64_t v38 = objc_msgSend_operationInfo(v8, v36, v37);
  LOBYTE(v34) = objc_msgSend_options(v38, v39, v40);

  v381[0] = MEMORY[0x1E4F143A8];
  v381[1] = 3221225472;
  v381[2] = sub_1C4ECFB40;
  v381[3] = &unk_1E64F5118;
  char v382 = v35;
  char v383 = a3;
  BOOL v384 = (v34 & 0x40) != 0;
  v343 = v28;
  v339 = objc_msgSend_CKFilter_(v28, v41, (uint64_t)v381);
  uint64_t v44 = objc_msgSend_count(v339, v42, v43);
  uint64_t v46 = (void *)MEMORY[0x1E4F1A550];
  uint64_t v342 = v22;
  v340 = v15;
  if (!v13)
  {
    uint64_t v60 = v44;
    if (v44 != v22)
    {
      v289 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v45, *MEMORY[0x1E4F19DD8], 3001, @"Failed to register all assets");
      if (*v46 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      v290 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        v333 = v290;
        v336 = objc_msgSend_operationID(v345, v334, v335);
        *(_DWORD *)buf = 136447234;
        v386 = v363;
        __int16 v387 = 2048;
        uint64_t v388 = v22;
        __int16 v389 = 2048;
        uint64_t v390 = v60;
        __int16 v391 = 2114;
        uint64_t v392 = (uint64_t)v336;
        __int16 v393 = 2112;
        unint64_t v394 = (unint64_t)v289;
        _os_log_error_impl(&dword_1C4CFF000, v333, OS_LOG_TYPE_ERROR, "Failed to %{public}s MMCS items (%lu/%lu) not already registered for operationID:%{public}@: %@", buf, 0x34u);
      }
      id v49 = v289;
      long long v373 = 0u;
      long long v374 = 0u;
      long long v375 = 0u;
      long long v376 = 0u;
      id v50 = v28;
      uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v291, (uint64_t)&v373, v400, 16);
      if (!v54)
      {
        v288 = v49;
        goto LABEL_149;
      }
      id v55 = v11;
      uint64_t v294 = *(void *)v374;
      do
      {
        for (uint64_t i = 0; i != v54; ++i)
        {
          if (*(void *)v374 != v294) {
            objc_enumerationMutation(v50);
          }
          v296 = *(void **)(*((void *)&v373 + 1) + 8 * i);
          v297 = objc_msgSend_error(v296, v292, v293);

          if (!v297) {
            objc_msgSend_setError_(v296, v292, (uint64_t)v49);
          }
        }
        uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v292, (uint64_t)&v373, v400, 16);
      }
      while (v54);
      goto LABEL_148;
    }
    long long v371 = 0u;
    long long v372 = 0u;
    long long v369 = 0u;
    long long v370 = 0u;
    id v50 = v15;
    uint64_t v361 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v61, (uint64_t)&v369, v399, 16);
    if (!v361)
    {
      id v49 = 0;
      uint64_t v54 = 0;
      v288 = 0;
      goto LABEL_149;
    }
    id v337 = v11;
    id v49 = 0;
    uint64_t v355 = 0;
    uint64_t v358 = *MEMORY[0x1E4F73868];
    uint64_t v359 = *(void *)v370;
    uint64_t v344 = *MEMORY[0x1E4F19C40];
    uint64_t v352 = *MEMORY[0x1E4F739E0];
    uint64_t v351 = *MEMORY[0x1E4F73838];
    uint64_t v350 = *MEMORY[0x1E4F73890];
    uint64_t v349 = *MEMORY[0x1E4F737D8];
    v346 = v8;
    int v347 = a3;
LABEL_25:
    uint64_t v63 = 0;
    while (1)
    {
      if (*(void *)v370 != v359) {
        objc_enumerationMutation(v50);
      }
      uint64_t v64 = *(void **)(*((void *)&v369 + 1) + 8 * v63);
      uint64_t v67 = objc_msgSend_objectForKeyedSubscript_(v64, v62, v358);
      if (!v67)
      {
        v276 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v65, v66);
        v278 = objc_msgSend_stringWithUTF8String_(NSString, v277, (uint64_t)"void CKDMMCSFetchOrRegisterCompleteCallback(void *, CFDictionaryRef, BOOL)");
        objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v276, v279, (uint64_t)v278, @"CKDMMCS.m", 670, @"Invalid response from MMCS");
      }
      uint64_t v68 = objc_msgSend_unsignedLongLongValue(v67, v65, v66);
      double v72 = objc_msgSend_findTrackedMMCSItemByItemID_(v8, v69, v68);
      if (!v72)
      {
        v280 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v70, v71);
        v282 = objc_msgSend_stringWithUTF8String_(NSString, v281, (uint64_t)"void CKDMMCSFetchOrRegisterCompleteCallback(void *, CFDictionaryRef, BOOL)");
        objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v280, v283, (uint64_t)v282, @"CKDMMCS.m", 672, @"Item not found");
      }
      uint64_t v73 = objc_msgSend_itemID(v72, v70, v71);
      if (v73 != objc_msgSend_unsignedLongLongValue(v67, v74, v75))
      {
        v284 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v76, v77);
        v286 = objc_msgSend_stringWithUTF8String_(NSString, v285, (uint64_t)"void CKDMMCSFetchOrRegisterCompleteCallback(void *, CFDictionaryRef, BOOL)");
        objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v284, v287, (uint64_t)v286, @"CKDMMCS.m", 673, @"itemID mismatch");
      }
      uint64_t v362 = objc_msgSend_itemID(v72, v76, v77);
      uint64_t v80 = objc_msgSend_fileURL(v72, v78, v79);
      v364 = objc_msgSend_path(v80, v81, v82);

      uint64_t v84 = objc_msgSend_objectForKeyedSubscript_(v64, v83, v360);

      if (v84) {
        goto LABEL_35;
      }
      if ((objc_msgSend_isAlreadyRegistered(v72, v85, v86) & 1) == 0
        && (objc_msgSend_isReaderReadFrom(v72, v94, v95) & 1) == 0)
      {
        if (objc_msgSend_canBeRegistered(v72, v94, v96))
        {
          id v98 = (void *)MEMORY[0x1E4F1A280];
          uint64_t v99 = objc_msgSend_fileURL(v72, v94, v97);
          uint64_t v102 = objc_msgSend_CKSanitizedPath(v99, v100, v101);
          uint64_t v84 = objc_msgSend_errorWithDomain_code_path_format_(v98, v103, v344, 17, v102, @"Stale chunk state found during registration when none expected");

          size_t v8 = v346;
          if (v84)
          {
LABEL_35:
            uint64_t v87 = (void *)*MEMORY[0x1E4F1A548];
            if (a3)
            {
              if (*MEMORY[0x1E4F1A550] != -1) {
                dispatch_once(MEMORY[0x1E4F1A550], v87);
              }
              uint64_t v88 = (void *)*MEMORY[0x1E4F1A500];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
              {
                v261 = v88;
                v264 = objc_msgSend_operationID(v345, v262, v263);
                *(_DWORD *)buf = 134218498;
                v386 = (const char *)v362;
                __int16 v387 = 2114;
                uint64_t v388 = (uint64_t)v264;
                __int16 v389 = 2112;
                uint64_t v390 = (uint64_t)v84;
                _os_log_error_impl(&dword_1C4CFF000, v261, OS_LOG_TYPE_ERROR, "Failed to fetch registered MMCS item %llu for operationID:%{public}@ %@", buf, 0x20u);
              }
              uint64_t v91 = objc_msgSend_mmcsOperationType(v8, v89, v90);
              objc_msgSend__errorWithMMCSError_path_description_operationType_(CKDMMCS, v92, (uint64_t)v84, 0, @"Failed to check registered asset", v91);
              id v49 = (id)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              if (*MEMORY[0x1E4F1A550] != -1) {
                dispatch_once(MEMORY[0x1E4F1A550], v87);
              }
              __int16 v120 = (void *)*MEMORY[0x1E4F1A500];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
              {
                v265 = v120;
                v268 = objc_msgSend_operationID(v345, v266, v267);
                v271 = objc_msgSend_CKSanitizedPath(v364, v269, v270);
                *(_DWORD *)buf = 134218754;
                v386 = (const char *)v362;
                __int16 v387 = 2114;
                uint64_t v388 = (uint64_t)v268;
                __int16 v389 = 2114;
                uint64_t v390 = (uint64_t)v271;
                __int16 v391 = 2112;
                uint64_t v392 = (uint64_t)v84;
                _os_log_error_impl(&dword_1C4CFF000, v265, OS_LOG_TYPE_ERROR, "Failed to register MMCS item %llu for operationID:%{public}@ at %{public}@: %@", buf, 0x2Au);
              }
              uint64_t v123 = objc_msgSend_CKSanitizedPath(v364, v121, v122);
              uint64_t v126 = objc_msgSend_mmcsOperationType(v8, v124, v125);
              objc_msgSend__errorWithMMCSError_path_description_operationType_(CKDMMCS, v127, (uint64_t)v84, v123, @"Failed to register asset", v126);
              id v49 = (id)objc_claimAutoreleasedReturnValue();
            }
            objc_msgSend_setError_(v72, v93, (uint64_t)v49);
            goto LABEL_131;
          }
        }
      }
      uint64_t v104 = objc_msgSend_objectForKeyedSubscript_(v64, v94, v352);
      int v106 = objc_msgSend_objectForKeyedSubscript_(v64, v105, v351);
      uint64_t v108 = objc_msgSend_objectForKeyedSubscript_(v64, v107, v350);
      uint64_t v110 = objc_msgSend_objectForKeyedSubscript_(v64, v109, v349);
      v356 = (void *)v104;
      objc_msgSend_setSignature_(v72, v111, v104);
      v354 = v106;
      uint64_t v114 = objc_msgSend_unsignedLongLongValue(v106, v112, v113);
      objc_msgSend_setFileSize_(v72, v115, v114);
      v353 = v108;
      uint64_t v118 = v108 ? objc_msgSend_unsignedLongLongValue(v108, v116, v117) : objc_msgSend_fileSize(v72, v116, v117);
      objc_msgSend_setPaddedFileSize_(v72, v119, v118);
      v357 = v110;
      uint64_t v130 = objc_msgSend_unsignedIntValue(v110, v128, v129);
      objc_msgSend_setChunkCount_(v72, v131, v130);
      uint64_t v134 = objc_msgSend_signature(v72, v132, v133);
      CFTypeRef v137 = objc_msgSend_zeroSizeFileSignature(CKDMMCS, v135, v136);
      int isEqualToData = objc_msgSend_isEqualToData_(v134, v138, (uint64_t)v137);

      uint64_t v144 = objc_msgSend_mmcsOperationType(v8, v140, v141);
      BOOL v145 = v144 == 6 && objc_msgSend_chunkCount(v72, v142, v143) == 0;
      uint64_t v146 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
      if (((isEqualToData | v145) & 1) == 0 && ((a3 & 1) != 0 || objc_msgSend_fileSize(v72, v142, v143)))
      {
        uint64_t v154 = v357;
        if (v144 == 6 && !objc_msgSend_chunkCount(v72, v142, v143)) {
          __assert_rtn("CKDMMCSFetchOrRegisterCompleteCallback", "CKDMMCS.m", 720, "MMCSItem.chunkCount != 0 && \"Expected MMCSItem.chunkCount != 0\"");
        }
      }
      else
      {
        uint64_t v147 = (void *)MEMORY[0x1E4F1A3B8];
        uint64_t v148 = objc_msgSend_signature(v72, v142, v143);
        LODWORD(v147) = objc_msgSend_isValidV2Signature_(v147, v149, (uint64_t)v148);

        if (((v147 | isEqualToData) & 1) == 0) {
          __assert_rtn("CKDMMCSFetchOrRegisterCompleteCallback", "CKDMMCS.m", 712, "isZeroFileSignature && \"Expected zeroSizeFileSignature\"");
        }
        if (objc_msgSend_mmcsOperationType(v8, v150, v151) == 6
          && objc_msgSend_chunkCount(v72, v152, v153))
        {
          __assert_rtn("CKDMMCSFetchOrRegisterCompleteCallback", "CKDMMCS.m", 715, "MMCSItem.chunkCount == 0 && \"Expected MMCSItem.chunkCount == 0\"");
        }
        if (objc_msgSend_fileSize(v72, v152, v153)) {
          __assert_rtn("CKDMMCSFetchOrRegisterCompleteCallback", "CKDMMCS.m", 717, "MMCSItem.fileSize == 0 && \"MMCSItem.size == 0\"");
        }
        if (*v146 != -1) {
          dispatch_once(v146, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v154 = v357;
        uint64_t v155 = *MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          v386 = (const char *)v362;
          _os_log_debug_impl(&dword_1C4CFF000, v155, OS_LOG_TYPE_DEBUG, "Zero-length asset with itemID %llu", buf, 0xCu);
        }
      }
      if ((objc_msgSend_isAlreadyRegistered(v72, v142, v143) & 1) == 0 && (a3 & 1) == 0)
      {
        uint64_t v158 = objc_msgSend_asset(v72, v156, v157);
        long long v161 = objc_msgSend_signature(v72, v159, v160);
        objc_msgSend_setSignature_(v158, v162, (uint64_t)v161);

        uint64_t v165 = objc_msgSend_fileSize(v72, v163, v164);
        objc_msgSend_setSize_(v158, v166, v165);
        uint64_t v169 = objc_msgSend_paddedFileSize(v72, v167, v168);
        objc_msgSend_setPaddedFileSize_(v158, v170, v169);
        if (*v146 != -1) {
          dispatch_once(v146, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v171 = (void *)*MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
        {
          v272 = v171;
          objc_msgSend_asset(v72, v273, v274);
          v275 = (char *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v386 = v275;
          __int16 v387 = 2112;
          uint64_t v388 = (uint64_t)v72;
          _os_log_debug_impl(&dword_1C4CFF000, v272, OS_LOG_TYPE_DEBUG, "Register complete: Pushed sig and size to asset:%@ for item %@", buf, 0x16u);
        }
        uint64_t v172 = MEMORY[0x1C8789E70]();
        id v368 = 0;
        __int16 v174 = objc_msgSend_getCKDMMCSItemReaderByPathForMMCSItem_error_(v8, v173, (uint64_t)v72, &v368);
        id v175 = v368;
        CFTypeRef v177 = v175;
        context = (void *)v172;
        if (v174)
        {
          id v367 = v175;
          int v178 = objc_msgSend_openWithError_(v174, v176, (uint64_t)&v367);
          id v179 = v367;

          if (v178)
          {
            id v366 = v179;
            long long v181 = objc_msgSend_getFileMetadataWithError_(v174, v180, (uint64_t)&v366);
            id v182 = v366;

            if (v181)
            {
              uint64_t v185 = objc_msgSend_deviceID(v181, v183, v184);
              objc_msgSend_setDeviceID_(v72, v186, (uint64_t)v185);

              uint64_t v189 = objc_msgSend_fileID(v181, v187, v188);
              objc_msgSend_setFileID_(v72, v190, (uint64_t)v189);

              v193 = objc_msgSend_generationID(v181, v191, v192);
              objc_msgSend_setGenerationID_(v72, v194, (uint64_t)v193);

              size_t v197 = objc_msgSend_modTimeInSeconds(v181, v195, v196);
              objc_msgSend_setModTimeInSeconds_(v72, v198, (uint64_t)v197);
            }
            else
            {
              if (*v146 != -1) {
                dispatch_once(v146, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
              }
              v201 = *MEMORY[0x1E4F1A500];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                v386 = (const char *)v72;
                __int16 v387 = 2112;
                uint64_t v388 = (uint64_t)v182;
                _os_log_error_impl(&dword_1C4CFF000, v201, OS_LOG_TYPE_ERROR, "Unable to get info for %@: %@", buf, 0x16u);
              }
              size_t v197 = v182;
              id v182 = 0;
            }

            id v365 = v182;
            char v203 = objc_msgSend_closeWithError_(v174, v202, (uint64_t)&v365);
            id v179 = v365;

            if (v203)
            {
              uint64_t v146 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
            }
            else
            {
              uint64_t v146 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
              if (*MEMORY[0x1E4F1A550] != -1) {
                dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
              }
              uint64_t v204 = *MEMORY[0x1E4F1A500];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                v386 = (const char *)v72;
                __int16 v387 = 2112;
                uint64_t v388 = (uint64_t)v179;
                _os_log_error_impl(&dword_1C4CFF000, v204, OS_LOG_TYPE_ERROR, "Unable to close for %@: %@", buf, 0x16u);
              }

              id v179 = 0;
            }

            size_t v8 = v346;
          }
          else
          {
            if (*v146 != -1) {
              dispatch_once(v146, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            size_t v8 = v346;
            uint64_t v200 = *MEMORY[0x1E4F1A500];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              v386 = (const char *)v72;
              __int16 v387 = 2112;
              uint64_t v388 = (uint64_t)v179;
              _os_log_error_impl(&dword_1C4CFF000, v200, OS_LOG_TYPE_ERROR, "Unable to open for %@: %@", buf, 0x16u);
            }
          }
        }
        else
        {
          if (*v146 != -1) {
            dispatch_once(v146, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          v199 = *MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            v386 = (const char *)v72;
            __int16 v387 = 2112;
            uint64_t v388 = (uint64_t)v177;
            _os_log_error_impl(&dword_1C4CFF000, v199, OS_LOG_TYPE_ERROR, "Unable to open reader for %@: %@", buf, 0x16u);
          }
          __int16 v174 = v177;
        }

        a3 = v347;
        uint64_t v154 = v357;
      }
      if ((a3 & 1) == 0) {
        break;
      }
      if (!v154)
      {
        uint64_t v233 = objc_msgSend_fileSize(v72, v156, v157);
        v234 = (void *)*MEMORY[0x1E4F1A548];
        if (!v233)
        {
          if (*v146 != -1) {
            dispatch_once(v146, v234);
          }
          v257 = (void *)*MEMORY[0x1E4F1A500];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG)) {
            goto LABEL_130;
          }
          uint64_t v206 = v257;
          v260 = objc_msgSend_signature(v72, v258, v259);
          *(_DWORD *)buf = 136446722;
          v386 = "Fetched";
          __int16 v387 = 2048;
          uint64_t v388 = v362;
          __int16 v389 = 2112;
          uint64_t v390 = (uint64_t)v260;
          _os_log_debug_impl(&dword_1C4CFF000, v206, OS_LOG_TYPE_DEBUG, "%{public}s MMCS item %llu signature:%@", buf, 0x20u);

          goto LABEL_129;
        }
        if (*v146 != -1) {
          dispatch_once(v146, v234);
        }
        v235 = (void *)*MEMORY[0x1E4F1A500];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG)) {
          goto LABEL_130;
        }
        uint64_t v206 = v235;
        uint64_t v238 = objc_msgSend_fileSize(v72, v236, v237);
        uint64_t v241 = objc_msgSend_paddedFileSize(v72, v239, v240);
        long long v229 = objc_msgSend_signature(v72, v242, v243);
        *(_DWORD *)buf = 136447234;
        v386 = "Fetched";
        __int16 v387 = 2048;
        uint64_t v388 = v362;
        __int16 v389 = 2048;
        uint64_t v390 = v238;
        __int16 v391 = 2048;
        uint64_t v392 = v241;
        __int16 v393 = 2112;
        unint64_t v394 = (unint64_t)v229;
        long long v230 = v206;
        long long v231 = "%{public}s MMCS item %llu with size:%llu, paddedSize:%llu, signature:%@";
        uint32_t v232 = 52;
LABEL_120:
        _os_log_debug_impl(&dword_1C4CFF000, v230, OS_LOG_TYPE_DEBUG, v231, buf, v232);

        uint64_t v154 = v357;
        goto LABEL_129;
      }
      if (*v146 != -1) {
        dispatch_once(v146, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      __int16 v205 = (void *)*MEMORY[0x1E4F1A500];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG)) {
        goto LABEL_130;
      }
      uint64_t v206 = v205;
      uint64_t v209 = objc_msgSend_fileSize(v72, v207, v208);
      uint64_t v212 = objc_msgSend_paddedFileSize(v72, v210, v211);
      unsigned int v215 = objc_msgSend_chunkCount(v72, v213, v214);
      *(_DWORD *)buf = 136447490;
      v386 = "Fetched";
      __int16 v387 = 2048;
      uint64_t v388 = v362;
      __int16 v389 = 2048;
      uint64_t v390 = v209;
      __int16 v391 = 2048;
      uint64_t v392 = v212;
      __int16 v393 = 2048;
      unint64_t v394 = v215;
      __int16 v395 = 2112;
      v396 = v356;
      _os_log_debug_impl(&dword_1C4CFF000, v206, OS_LOG_TYPE_DEBUG, "%{public}s MMCS item %llu with size:%llu, paddedSize:%llu, chunkCount:%lu, signature:%@", buf, 0x3Eu);
LABEL_129:

LABEL_130:
      ++v355;

      id v49 = 0;
LABEL_131:

      if (v361 == ++v63)
      {
        uint64_t v361 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v62, (uint64_t)&v369, v399, 16);
        if (!v361)
        {
          v288 = 0;
          id v11 = v337;
          uint64_t v47 = v342;
          uint64_t v54 = v355;
          goto LABEL_150;
        }
        goto LABEL_25;
      }
    }
    id v216 = (void *)*MEMORY[0x1E4F1A548];
    if (!v154)
    {
      if (*v146 != -1) {
        dispatch_once(v146, v216);
      }
      v244 = (void *)*MEMORY[0x1E4F1A500];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG)) {
        goto LABEL_130;
      }
      uint64_t v206 = v244;
      uint64_t v247 = objc_msgSend_fileSize(v72, v245, v246);
      uint64_t v250 = objc_msgSend_paddedFileSize(v72, v248, v249);
      v253 = objc_msgSend_signature(v72, v251, v252);
      v256 = objc_msgSend_CKSanitizedPath(v364, v254, v255);
      *(_DWORD *)buf = 136316418;
      v386 = "Registered";
      __int16 v387 = 2048;
      uint64_t v388 = v362;
      __int16 v389 = 2048;
      uint64_t v390 = v247;
      __int16 v391 = 2048;
      uint64_t v392 = v250;
      __int16 v393 = 2112;
      unint64_t v394 = (unint64_t)v253;
      __int16 v395 = 2112;
      v396 = v256;
      _os_log_debug_impl(&dword_1C4CFF000, v206, OS_LOG_TYPE_DEBUG, "{public}%s MMCS item %llu with size:%llu, paddedSize:%llu, signature:%@, path:%@", buf, 0x3Eu);

      uint64_t v154 = v357;
      size_t v8 = v346;
      goto LABEL_129;
    }
    if (*v146 != -1) {
      dispatch_once(v146, v216);
    }
    v217 = (void *)*MEMORY[0x1E4F1A500];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG)) {
      goto LABEL_130;
    }
    uint64_t v206 = v217;
    uint64_t v220 = objc_msgSend_fileSize(v72, v218, v219);
    uint64_t v223 = objc_msgSend_paddedFileSize(v72, v221, v222);
    unint64_t v226 = objc_msgSend_chunkCount(v72, v224, v225);
    long long v229 = objc_msgSend_CKSanitizedPath(v364, v227, v228);
    *(_DWORD *)buf = 136447746;
    v386 = "Registered";
    __int16 v387 = 2048;
    uint64_t v388 = v362;
    __int16 v389 = 2048;
    uint64_t v390 = v220;
    __int16 v391 = 2048;
    uint64_t v392 = v223;
    __int16 v393 = 2048;
    unint64_t v394 = v226;
    size_t v8 = v346;
    __int16 v395 = 2112;
    v396 = v356;
    __int16 v397 = 2112;
    v398 = v229;
    long long v230 = v206;
    long long v231 = "%{public}s MMCS item %llu with size:%llu, paddedSize:%llu, chunkCount:%lu, signature:%@, path:%@";
    uint32_t v232 = 72;
    goto LABEL_120;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v47 = v22;
  uint64_t v48 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
  {
    v322 = v48;
    uint64_t v325 = objc_msgSend_count(v28, v323, v324);
    v328 = objc_msgSend_operationID(v345, v326, v327);
    *(_DWORD *)buf = 136446978;
    v386 = v363;
    __int16 v387 = 2048;
    uint64_t v388 = v325;
    uint64_t v47 = v22;
    __int16 v389 = 2114;
    uint64_t v390 = (uint64_t)v328;
    __int16 v391 = 2112;
    uint64_t v392 = (uint64_t)v13;
    _os_log_error_impl(&dword_1C4CFF000, v322, OS_LOG_TYPE_ERROR, "Failed to %{public}s %lu MMCS items for operationID:%{public}@: %@", buf, 0x2Au);
  }
  id v49 = v13;
  long long v377 = 0u;
  long long v378 = 0u;
  long long v379 = 0u;
  long long v380 = 0u;
  id v50 = v28;
  uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v51, (uint64_t)&v377, v401, 16);
  if (!v54)
  {
    v288 = v49;
    goto LABEL_150;
  }
  id v55 = v11;
  uint64_t v56 = *(void *)v378;
  do
  {
    for (uint64_t j = 0; j != v54; ++j)
    {
      if (*(void *)v378 != v56) {
        objc_enumerationMutation(v50);
      }
      uint64_t v58 = *(void **)(*((void *)&v377 + 1) + 8 * j);
      uint64_t v59 = objc_msgSend_error(v58, v52, v53);

      if (!v59) {
        objc_msgSend_setError_(v58, v52, (uint64_t)v49);
      }
    }
    uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v52, (uint64_t)&v377, v401, 16);
  }
  while (v54);
LABEL_148:
  v288 = v49;
  id v11 = v55;
LABEL_149:
  uint64_t v47 = v342;
LABEL_150:

  v298 = (void *)*MEMORY[0x1E4F1A548];
  uint64_t v299 = *MEMORY[0x1E4F1A550];
  if (v54 == v47)
  {
    v301 = v339;
    v300 = v340;
    if (v299 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v298);
    }
    v302 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      v305 = v302;
      uint64_t v308 = objc_msgSend_operationID(v345, v306, v307);
      uint64_t v309 = v47;
      v310 = (void *)v308;
      *(_DWORD *)buf = 136446722;
      v386 = v338;
      __int16 v387 = 2048;
      uint64_t v388 = v309;
      __int16 v389 = 2114;
      uint64_t v390 = v308;
      v311 = "%{public}s %lu MMCS items for operationID:%{public}@";
      v312 = v305;
      uint32_t v313 = 32;
      goto LABEL_164;
    }
  }
  else
  {
    uint64_t v314 = v54;
    v301 = v339;
    v300 = v340;
    if (v299 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v298);
    }
    v315 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      v305 = v315;
      uint64_t v331 = objc_msgSend_operationID(v345, v329, v330);
      uint64_t v332 = v47;
      v310 = (void *)v331;
      *(_DWORD *)buf = 136446978;
      v386 = v338;
      __int16 v387 = 2048;
      uint64_t v388 = v314;
      __int16 v389 = 2048;
      uint64_t v390 = v332;
      __int16 v391 = 2114;
      uint64_t v392 = v331;
      v311 = "%{public}s %lu/%lu MMCS items for operationID:%{public}@";
      v312 = v305;
      uint32_t v313 = 42;
LABEL_164:
      _os_log_debug_impl(&dword_1C4CFF000, v312, OS_LOG_TYPE_DEBUG, v311, buf, v313);

      if (a3) {
        goto LABEL_160;
      }
      goto LABEL_159;
    }
  }
  if ((a3 & 1) == 0)
  {
LABEL_159:
    v316 = objc_msgSend_MMCS(v8, v303, v304);
    v319 = objc_msgSend_assetCache(v316, v317, v318);
    id v321 = (id)objc_msgSend_updateAssetHandlesForRegisteredMMCSItems_error_(v319, v320, (uint64_t)v301, 0);
  }
LABEL_160:
  objc_msgSend_didCompleteRequestWithError_(v8, v303, (uint64_t)v288);
}

BOOL sub_1C4ECFB40(unsigned char *a1, void *a2, uint64_t a3)
{
  return !objc_msgSend_isAlreadyRegistered(a2, (const char *)a2, a3) || a1[32] || a1[33] || a1[34] != 0;
}

void sub_1C4ECFB90(uint64_t a1)
{
}

void sub_1C4ED0008(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_declineCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_declineCompletionBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1C4ED08A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,id a25)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a25);
  _Unwind_Resume(a1);
}

void sub_1C4ED08FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend__handleShareURLDeclined_responseCode_(WeakRetained, v7, (uint64_t)v6, v5);
}

void sub_1C4ED0974(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = objc_msgSend_error(v3, v4, v5);

  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unsigned int v9 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = v9;
      uint64_t v15 = objc_msgSend_error(v3, v13, v14);
      int v19 = 138412290;
      uint64_t v20 = v15;
      _os_log_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_INFO, "Error declining shares: %@", (uint8_t *)&v19, 0xCu);
    }
    uint64_t v16 = objc_msgSend_error(v3, v10, v11);
    objc_msgSend_setError_(WeakRetained, v17, (uint64_t)v16);
  }
  uint64_t v18 = objc_msgSend_stateTransitionGroup(WeakRetained, v7, v8);
  dispatch_group_leave(v18);
}

void sub_1C4ED3BCC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 136));
  _Block_object_dispose((const void *)(v2 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4ED3C08(uint64_t a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    id v7 = objc_msgSend_sharePCSData(v3, v4, v5);

    if (v7)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v8 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v22 = *(void **)(a1 + 40);
        uint64_t v23 = v8;
        unint64_t v26 = objc_msgSend_zoneID(v22, v24, v25);
        *(_DWORD *)buf = 138412290;
        uint64_t v32 = v26;
        _os_log_debug_impl(&dword_1C4CFF000, v23, OS_LOG_TYPE_DEBUG, "Fetched zone PCS for zone %@ and it has a share PCS on it. Setting signing PCS for our record to be the per-participant PCS", buf, 0xCu);
      }
      objc_msgSend_sharePCSData(v3, v9, v10);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_myParticipantPCS(v11, v12, v13);
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = PCSFPCopyObject();
    }
    else
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v14 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Record should be of a hierarchical share. Fetching its signing PCS by fetching its record PCS", buf, 2u);
      }
      uint64_t v17 = objc_msgSend_pcsCache(WeakRetained, v15, v16);
      uint64_t v18 = *(void **)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v20 = *(void *)(a1 + 72);
      v27[0] = MEMORY[0x1E4F143A8];
      v27[1] = 3221225472;
      v27[2] = sub_1C4ED3EAC;
      v27[3] = &unk_1E64F5140;
      uint64_t v30 = *(void *)(a1 + 56);
      id v28 = v18;
      id v29 = *(id *)(a1 + 32);
      objc_msgSend_fetchPCSForRecordWithID_forOperation_options_withCompletionHandler_(v17, v21, (uint64_t)v28, v19, v20, v27);

      id v11 = v28;
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4ED3EAC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v8 = a3;
  if (v5)
  {
    objc_msgSend_signingPCS(v5, v6, v7);
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = PCSFPCopyObject();
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unsigned int v9 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 138412290;
      uint64_t v12 = v10;
      _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "Could not fetch record PCS for record %@. Record may not exist on server. Done with our attempt with fetch signing PCS", (uint8_t *)&v11, 0xCu);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1C4ED3FD4(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*MEMORY[0x1E4F1A548];
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v2);
    }
    id v3 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v20 = *(void *)(a1 + 32);
      int v22 = 138412290;
      uint64_t v23 = v20;
      _os_log_debug_impl(&dword_1C4CFF000, v3, OS_LOG_TYPE_DEBUG, "Successfully fetched signing PCS (PPPCS) for record %@", (uint8_t *)&v22, 0xCu);
    }
    uint64_t v4 = objc_opt_new();
    objc_msgSend_setRecordPCSData_(*(void **)(a1 + 40), v5, (uint64_t)v4);

    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    unsigned int v9 = objc_msgSend_recordPCSData(*(void **)(a1 + 40), v7, v8);
    objc_msgSend_setSigningPCS_(v9, v10, v6);

    uint64_t v12 = *(const void **)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v2);
    }
    uint64_t v13 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = *(void *)(a1 + 32);
      int v22 = 138412290;
      uint64_t v23 = v21;
      _os_log_debug_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_DEBUG, "Could not fetch the signing PCS for record %@", (uint8_t *)&v22, 0xCu);
    }
  }
  objc_msgSend_setState_(*(void **)(a1 + 40), v11, 5);
  uint64_t v16 = objc_msgSend_pcsGroup(*(void **)(a1 + 40), v14, v15);
  dispatch_group_leave(v16);

  uint64_t v19 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 48), v17, v18);
  dispatch_group_leave(v19);
}

void sub_1C4ED53B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1C4ED53E8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v10 = WeakRetained;
  if (v5)
  {
    objc_msgSend__addShareToPCSData_withError_(WeakRetained, v8, (uint64_t)v5, v6);
    goto LABEL_21;
  }
  int v11 = objc_msgSend_domain(v6, v8, v9);
  uint64_t v12 = *MEMORY[0x1E4F19DD8];
  if (objc_msgSend_isEqualToString_(v11, v13, *MEMORY[0x1E4F19DD8])
    && objc_msgSend_code(v6, v14, v15) == 5010)
  {
    uint64_t v16 = *(void *)(a1 + 48);

    if ((v16 & 2) != 0)
    {
      unint64_t v19 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFDLL;
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v20 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        int v22 = *(void **)(a1 + 32);
        uint64_t v23 = v20;
        unint64_t v26 = objc_msgSend_recordID(v22, v24, v25);
        int v54 = 138412546;
        id v55 = v26;
        __int16 v56 = 2048;
        unint64_t v57 = v19;
        _os_log_impl(&dword_1C4CFF000, v23, OS_LOG_TYPE_INFO, "Got an error fetching PCS data locally for record %@. Attempting another network-based fetch with options %lx", (uint8_t *)&v54, 0x16u);
      }
      objc_msgSend__reallyFetchPCSDataWithOptions_(v10, v21, v19);
      goto LABEL_21;
    }
  }
  else
  {
  }
  if (!v6 || (objc_msgSend_CKIsObjectNotFoundError(v6, v17, v18) & 1) != 0) {
    goto LABEL_14;
  }
  size_t v42 = objc_msgSend_domain(v6, v27, v28);
  if (objc_msgSend_isEqualToString_(v42, v43, v12) && objc_msgSend_code(v6, v44, v45) == 5007)
  {
    uint64_t v46 = *(void *)(a1 + 48);

    if ((v46 & 2) != 0)
    {
LABEL_14:
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v29 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        int v31 = *(void **)(a1 + 32);
        uint64_t v32 = v29;
        int v35 = objc_msgSend_recordID(v31, v33, v34);
        int found = objc_msgSend_CKIsNotFoundError(v6, v36, v37);
        uint64_t v39 = @"no PCS data and no error";
        if (found) {
          uint64_t v39 = @"record does not exist";
        }
        int v54 = 138412546;
        id v55 = v35;
        __int16 v56 = 2114;
        unint64_t v57 = (unint64_t)v39;
        _os_log_impl(&dword_1C4CFF000, v32, OS_LOG_TYPE_INFO, "Didn't get PCS data for record %@: %{public}@. Fetching the zone PCS and creating new PCS data", (uint8_t *)&v54, 0x16u);
      }
      objc_msgSend_setRequiresRecordSaveForMergeableDeltas_(*(void **)(a1 + 32), v30, 1);
      objc_msgSend__createAndSavePCS(v10, v40, v41);
      goto LABEL_21;
    }
  }
  else
  {
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v47 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v49 = *(void **)(a1 + 32);
    id v50 = v47;
    uint64_t v53 = objc_msgSend_recordID(v49, v51, v52);
    int v54 = 138412546;
    id v55 = v53;
    __int16 v56 = 2112;
    unint64_t v57 = (unint64_t)v6;
    _os_log_debug_impl(&dword_1C4CFF000, v50, OS_LOG_TYPE_DEBUG, "Got an error fetching PCS data for record %@: %@", (uint8_t *)&v54, 0x16u);
  }
  objc_msgSend__addShareToPCSData_withError_(v10, v48, 0, v6);
LABEL_21:
}

void sub_1C4ED5B74(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_recordPCSData(*(void **)(a1 + 32), a2, a3);

  id v5 = (void *)*MEMORY[0x1E4F1A548];
  if (v4)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v5);
    }
    id v6 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v20 = *(void **)(a1 + 32);
      uint64_t v21 = v6;
      uint64_t v24 = objc_msgSend_recordPCSData(v20, v22, v23);
      *(_DWORD *)buf = 138412290;
      uint64_t v32 = v24;
      _os_log_debug_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_DEBUG, "Using parent PCS data from our current batch %@", buf, 0xCu);
    }
    uint64_t v9 = 0;
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v5);
    }
    uint64_t v10 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      unint64_t v26 = *(void **)(a1 + 40);
      uint64_t v25 = *(void **)(a1 + 48);
      uint64_t v27 = v10;
      uint64_t v30 = objc_msgSend_recordID(v25, v28, v29);
      *(_DWORD *)buf = 138412546;
      uint64_t v32 = v26;
      __int16 v33 = 2112;
      uint64_t v34 = v30;
      _os_log_debug_impl(&dword_1C4CFF000, v27, OS_LOG_TYPE_DEBUG, "Parent record %@ in the same batch didn't have chain PCS data on it for record %@", buf, 0x16u);
    }
    uint64_t v13 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v14 = *MEMORY[0x1E4F19DD8];
    uint64_t v15 = *(void *)(a1 + 40);
    uint64_t v16 = objc_msgSend_recordID(*(void **)(a1 + 48), v11, v12);
    uint64_t v9 = objc_msgSend_errorWithDomain_code_format_(v13, v17, v14, 5001, @"Parent record %@ in the same batch didn't have chain PCS data on it for record %@", v15, v16);
  }
  uint64_t v18 = *(void *)(a1 + 56);
  unint64_t v19 = objc_msgSend_recordPCSData(*(void **)(a1 + 32), v7, v8);
  (*(void (**)(uint64_t, void *, void *))(v18 + 16))(v18, v19, v9);
}

uint64_t sub_1C4ED5DB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4ED606C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_sharePCSData(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_pcs(v4, v5, v6);

  if (v7)
  {
    id v17 = 0;
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v11 = *MEMORY[0x1E4F19DD8];
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = objc_msgSend_recordID(*(void **)(a1 + 48), v8, v9);
    objc_msgSend_errorWithDomain_code_format_(v10, v14, v11, 5001, @"Couldn't get PCS data for share %@ to add to record %@", v12, v13);
    id v17 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = objc_msgSend_sharePCSData(*(void **)(a1 + 32), v8, v9);
  (*(void (**)(uint64_t, void *, id))(v15 + 16))(v15, v16, v17);
}

void sub_1C4ED615C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (!objc_msgSend_pcs(v5, v7, v8))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v9 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v22 = v12;
      __int16 v23 = 2112;
      id v24 = v6;
      _os_log_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_INFO, "Warn: Failed to fetch share with ID %@. Not adding it to the record PCS: %@", buf, 0x16u);
    }
    if (v6)
    {
      if (objc_msgSend_CKIsNotFoundError(v6, v10, v11))
      {
        uint64_t v15 = (void *)MEMORY[0x1E4F1A280];
        uint64_t v16 = *MEMORY[0x1E4F19DD8];
        uint64_t v17 = *(void *)(a1 + 32);
        uint64_t v18 = objc_msgSend_recordID(*(void **)(a1 + 40), v13, v14);
        uint64_t v20 = objc_msgSend_errorWithDomain_code_format_(v15, v19, v16, 2025, @"Share record %@ referenced by record %@ does not exist on the server", v17, v18);

        id v6 = (id)v20;
      }
    }
    else
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v10, *MEMORY[0x1E4F19DD8], 5001, @"Didn't get PCS data for share %@", *(void *)(a1 + 32));
      id v6 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1C4ED6DD4(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 184));
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4ED6E2C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4ED6E3C(uint64_t a1)
{
}

void sub_1C4ED6E44(uint64_t a1, void *a2, void *a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (!objc_msgSend_pcs(v5, v7, v8))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unint64_t v26 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v29 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      id v44 = v29;
      __int16 v45 = 2112;
      id v46 = v6;
      _os_log_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_INFO, "Warn: Failed to fetch share with ID %@. Not adding it to the record PCS: %@", buf, 0x16u);
    }
    if (v6)
    {
      if (!objc_msgSend_CKIsNotFoundError(v6, v27, v28))
      {
LABEL_18:
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v6);
        id v22 = v6;
        goto LABEL_19;
      }
      uint64_t v32 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v33 = *MEMORY[0x1E4F19DD8];
      uint64_t v34 = *(void *)(a1 + 40);
      uint64_t v35 = objc_msgSend_recordID(*(void **)(a1 + 48), v30, v31);
      uint64_t v37 = objc_msgSend_errorWithDomain_code_format_(v32, v36, v33, 2025, @"Share record %@ referenced by record %@ does not exist on the server", v34, v35);

      id v6 = (id)v37;
    }
    else
    {
      uint64_t v38 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v39 = *MEMORY[0x1E4F19DD8];
      uint64_t v40 = *(void *)(a1 + 40);
      uint64_t v35 = objc_msgSend_recordID(*(void **)(a1 + 48), v27, v28);
      objc_msgSend_errorWithDomain_code_format_(v38, v41, v39, 5001, @"Didn't get PCS data for share %@ to add to record %@", v40, v35);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
    }

    goto LABEL_18;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  uint64_t v12 = objc_msgSend_pcsManager(WeakRetained, v10, v11);
  uint64_t v15 = objc_msgSend_pcs(v5, v13, v14);
  uint64_t v18 = objc_msgSend_pcs(*(void **)(a1 + 32), v16, v17);
  id v42 = v6;
  char v20 = objc_msgSend_addSharePCS_toRecordPCS_error_(v12, v19, v15, v18, &v42);
  id v21 = v42;
  id v22 = v42;

  if ((v20 & 1) == 0)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v24 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      id v44 = v5;
      __int16 v45 = 2112;
      id v46 = v25;
      __int16 v47 = 2112;
      id v48 = v22;
      _os_log_impl(&dword_1C4CFF000, v24, OS_LOG_TYPE_INFO, "Warn: Error adding share PCS %@ to record PCS %@: %@", buf, 0x20u);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v21);
  }
  objc_msgSend_setSharePCSData_(*(void **)(a1 + 32), v23, (uint64_t)v5);
LABEL_19:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1C4ED7158(uint64_t a1, void *a2, void *a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (objc_msgSend_pcs(v5, v8, v9))
  {
    uint64_t v12 = objc_msgSend_pcsManager(WeakRetained, v10, v11);
    uint64_t v15 = objc_msgSend_pcs(v5, v13, v14);
    uint64_t v18 = objc_msgSend_pcs(*(void **)(a1 + 32), v16, v17);
    id v54 = v6;
    char v20 = objc_msgSend_removeSharePCS_fromRecordPCS_error_(v12, v19, v15, v18, &v54);
    id v21 = v54;
    id v22 = v54;

    if (v20)
    {
      if ((objc_msgSend_didRollRecordPCSMasterKey(WeakRetained, v23, v24) & 1) == 0)
      {
        uint64_t v27 = objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], v25, v26);
        int v30 = objc_msgSend_rollRecordMasterKeysOnUnshare(v27, v28, v29);

        if (v30)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          uint64_t v31 = (void *)*MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
          {
            uint64_t v49 = *(void **)(a1 + 40);
            id v50 = v31;
            uint64_t v53 = objc_msgSend_recordID(v49, v51, v52);
            *(_DWORD *)buf = 138412290;
            id v56 = v53;
            _os_log_debug_impl(&dword_1C4CFF000, v50, OS_LOG_TYPE_DEBUG, "Rolling record PCS master key since we removed a share for record %@", buf, 0xCu);
          }
          uint64_t v34 = objc_msgSend_pcsManager(WeakRetained, v32, v33);
          uint64_t v37 = objc_msgSend_pcs(*(void **)(a1 + 32), v35, v36);
          uint64_t v40 = objc_msgSend_operation(WeakRetained, v38, v39);
          uint64_t v42 = objc_msgSend_rollMasterKeyForRecordPCS_forOperation_(v34, v41, v37, v40);
          uint64_t v43 = *(void *)(*(void *)(a1 + 64) + 8);
          id v44 = *(void **)(v43 + 40);
          *(void *)(v43 + 40) = v42;

          if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)) {
            objc_msgSend_setDidRollRecordPCSMasterKey_(WeakRetained, v25, 1);
          }
        }
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      __int16 v47 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        id v48 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412802;
        id v56 = v5;
        __int16 v57 = 2112;
        id v58 = v48;
        __int16 v59 = 2112;
        id v60 = v22;
        _os_log_impl(&dword_1C4CFF000, v47, OS_LOG_TYPE_INFO, "Warn: Error remvoing share PCS %@ from record PCS %@: %@", buf, 0x20u);
      }
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v21);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    __int16 v45 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      id v46 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      id v56 = v46;
      __int16 v57 = 2112;
      id v58 = v6;
      _os_log_impl(&dword_1C4CFF000, v45, OS_LOG_TYPE_INFO, "Warn: Failed to fetch share with ID %@. Not removing it from the record PCS: %@", buf, 0x16u);
    }
    id v22 = v6;
  }
  objc_msgSend_setSharePCSData_(*(void **)(a1 + 32), v25, (uint64_t)v5);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_1C4ED7500(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*MEMORY[0x1E4F1A548];
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v2);
    }
    id v3 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      id v5 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      int v13 = 138412290;
      uint64_t v14 = v5;
      _os_log_debug_impl(&dword_1C4CFF000, v3, OS_LOG_TYPE_DEBUG, "Error fetching share PCS and adding it to the record PCS: %@", (uint8_t *)&v13, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v2);
    }
    id v6 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void **)(a1 + 32);
      uint64_t v9 = v6;
      uint64_t v12 = objc_msgSend_recordID(v8, v10, v11);
      int v13 = 138412290;
      uint64_t v14 = v12;
      _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "All shares have been fetched and the record PCS is updated for %@", (uint8_t *)&v13, 0xCu);
    }
  }
  return objc_msgSend__fetchParentPCSForData_withError_(*(void **)(a1 + 32), v4, *(void *)(a1 + 40), *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
}

void sub_1C4ED7FC4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Unwind_Resume(a1);
}

void sub_1C4ED8010(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_recordPCSData(*(void **)(a1 + 32), a2, a3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = (void *)*MEMORY[0x1E4F1A548];
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    uint64_t v8 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v35 = v9;
      _os_log_debug_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_DEBUG, "Using PCS data for parent from our current batch: %@", buf, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    uint64_t v10 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v29 = *(void **)(a1 + 40);
      int v30 = v10;
      uint64_t v33 = objc_msgSend_recordID(v29, v31, v32);
      *(_DWORD *)buf = 138412290;
      uint64_t v35 = v33;
      _os_log_debug_impl(&dword_1C4CFF000, v30, OS_LOG_TYPE_DEBUG, "Parent exists in the same batch but it doesn't have any chain PCS data, so we can't save %@", buf, 0xCu);
    }
    int v13 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v14 = *MEMORY[0x1E4F19DD8];
    uint64_t v15 = objc_msgSend_record(*(void **)(a1 + 40), v11, v12);
    uint64_t v18 = objc_msgSend_parent(v15, v16, v17);
    id v21 = objc_msgSend_recordID(v18, v19, v20);
    uint64_t v24 = objc_msgSend_recordID(*(void **)(a1 + 40), v22, v23);
    uint64_t v26 = objc_msgSend_errorWithDomain_code_format_(v13, v25, v14, 5001, @"Parent record %@ in the same batch didn't have chain PCS data on it for record %@", v21, v24);
    uint64_t v27 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v28 = *(void **)(v27 + 40);
    *(void *)(v27 + 40) = v26;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1C4ED8260(uint64_t a1, void *a2, void *a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A548];
  if (v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    uint64_t v8 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *(void **)(a1 + 32);
      uint64_t v15 = v8;
      uint64_t v18 = objc_msgSend_record(v14, v16, v17);
      id v21 = objc_msgSend_parent(v18, v19, v20);
      uint64_t v24 = objc_msgSend_recordID(v21, v22, v23);
      uint64_t v27 = objc_msgSend_recordID(*(void **)(a1 + 32), v25, v26);
      int v42 = 138412802;
      uint64_t v43 = v24;
      __int16 v44 = 2112;
      __int16 v45 = v27;
      __int16 v46 = 2112;
      id v47 = v5;
      _os_log_debug_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_DEBUG, "Fetched parent PCS data with record ID %@ for record %@: %@", (uint8_t *)&v42, 0x20u);
    }
    uint64_t v9 = (void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    uint64_t v10 = v5;
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    uint64_t v11 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = *(void **)(a1 + 32);
      uint64_t v29 = v11;
      uint64_t v32 = objc_msgSend_record(v28, v30, v31);
      uint64_t v35 = objc_msgSend_parent(v32, v33, v34);
      uint64_t v38 = objc_msgSend_recordID(v35, v36, v37);
      uint64_t v41 = objc_msgSend_recordID(*(void **)(a1 + 32), v39, v40);
      int v42 = 138412546;
      uint64_t v43 = v38;
      __int16 v44 = 2112;
      __int16 v45 = v41;
      _os_log_debug_impl(&dword_1C4CFF000, v29, OS_LOG_TYPE_DEBUG, "Couldn't get PCS data for parent %@ of record %@", (uint8_t *)&v42, 0x16u);
    }
    uint64_t v9 = (void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    uint64_t v10 = v6;
  }
  id v12 = v10;
  int v13 = *v9;
  *uint64_t v9 = v12;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1C4ED84E4(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v3)
  {
    uint64_t v4 = objc_msgSend__addParentPCS_toRecordPCS_(*(void **)(a1 + 32), a2, v3, *(void *)(a1 + 40));
    uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    objc_msgSend_setParentPCSData_(*(void **)(a1 + 40), v7, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
    goto LABEL_8;
  }
  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  if (v8)
  {
    if (!objc_msgSend_CKIsNotFoundError(v8, a2, 0)) {
      goto LABEL_8;
    }
    uint64_t v11 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v12 = *MEMORY[0x1E4F19DD8];
    int v13 = objc_msgSend_record(*(void **)(a1 + 32), v9, v10);
    uint64_t v16 = objc_msgSend_parent(v13, v14, v15);
    unint64_t v19 = objc_msgSend_recordID(v16, v17, v18);
    objc_msgSend_errorWithDomain_code_format_(v11, v20, v12, 2025, @"Parent record %@ does not exist on the server", v19);
  }
  else
  {
    id v21 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v22 = *MEMORY[0x1E4F19DD8];
    int v13 = objc_msgSend_record(*(void **)(a1 + 32), a2, 0);
    uint64_t v16 = objc_msgSend_parent(v13, v23, v24);
    unint64_t v19 = objc_msgSend_recordID(v16, v25, v26);
    objc_msgSend_errorWithDomain_code_format_(v21, v27, v22, 5001, @"Couldn't fetch parent PCS data for parent record %@", v19);
  uint64_t v28 = };
  uint64_t v29 = *(void *)(*(void *)(a1 + 64) + 8);
  int v30 = *(void **)(v29 + 40);
  *(void *)(v29 + 40) = v28;

LABEL_8:
  uint64_t v31 = *(NSObject **)(a1 + 48);
  dispatch_group_leave(v31);
}

uint64_t sub_1C4ED8664(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*MEMORY[0x1E4F1A548];
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v2);
    }
    uint64_t v3 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      int v13 = 138412290;
      uint64_t v14 = v5;
      _os_log_debug_impl(&dword_1C4CFF000, v3, OS_LOG_TYPE_DEBUG, "Error fetching parent PCS and adding it to the record PCS: %@", (uint8_t *)&v13, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v2);
    }
    id v6 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void **)(a1 + 32);
      uint64_t v9 = v6;
      uint64_t v12 = objc_msgSend_recordID(v8, v10, v11);
      int v13 = 138412290;
      uint64_t v14 = v12;
      _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "All parent records have been fetched and the record PCS is updated for %@", (uint8_t *)&v13, 0xCu);
    }
  }
  return objc_msgSend__handlePCSData_withError_(*(void **)(a1 + 32), v4, *(void *)(a1 + 40), *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
}

void sub_1C4ED93A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 240), 8);
  _Block_object_dispose((const void *)(v37 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1C4ED93E8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v9 = a3;
  if (v9)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v10 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void **)(a1 + 40);
      uint64_t v12 = v10;
      uint64_t v15 = objc_msgSend_recordID(v11, v13, v14);
      uint64_t v18 = objc_msgSend_zoneID(v15, v16, v17);
      int v28 = 138412546;
      uint64_t v29 = v18;
      __int16 v30 = 2112;
      id v31 = v9;
      _os_log_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS for zone %@: %@", (uint8_t *)&v28, 0x16u);
    }
    uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v21 = *(void *)(v19 + 40);
    uint64_t v20 = (id *)(v19 + 40);
    if (!v21)
    {
      uint64_t v22 = a3;
LABEL_10:
      objc_storeStrong(v20, v22);
    }
  }
  else if (objc_msgSend_pcs(v6, v7, v8) {
         || objc_msgSend_databaseScope(*(void **)(a1 + 32), v23, v24) == 3
  }
         && (objc_msgSend_pcsData(v6, v25, v26),
             uint64_t v27 = objc_claimAutoreleasedReturnValue(),
             v27,
             v27))
  {
    uint64_t v20 = (id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    uint64_t v22 = a2;
    goto LABEL_10;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1C4ED95A4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = v7;
  if (v6 && !v7)
  {
    id v9 = (id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    uint64_t v10 = a2;
LABEL_10:
    objc_storeStrong(v9, v10);
    goto LABEL_11;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v11 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    int v15 = 138412546;
    uint64_t v16 = v12;
    __int16 v17 = 2112;
    uint64_t v18 = v8;
    _os_log_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS for share %@: %@", (uint8_t *)&v15, 0x16u);
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v14 = *(void *)(v13 + 40);
  id v9 = (id *)(v13 + 40);
  if (!v14)
  {
    uint64_t v10 = a3;
    goto LABEL_10;
  }
LABEL_11:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1C4ED96F4(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1E4F1A550];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v3 = (id *)MEMORY[0x1E4F1A500];
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *(void **)(a1 + 32);
    uint64_t v20 = v4;
    uint64_t v23 = objc_msgSend_recordID(v19, v21, v22);
    int v24 = 138412290;
    uint64_t v25 = (uint64_t)v23;
    _os_log_debug_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEBUG, "All PCS data fetched. Creating PCS for record %@", (uint8_t *)&v24, 0xCu);
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)) {
    return objc_msgSend__continueCreateAndSavePCSWithZonePCS_sharePCS_(*(void **)(a1 + 40), v5, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40));
  }
  if (*v2 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v6 = *v3;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v9 = objc_msgSend_recordID(*(void **)(a1 + 32), v7, v8);
    uint64_t v12 = objc_msgSend_zoneID(v9, v10, v11);
    uint64_t v13 = (void *)v12;
    uint64_t v14 = @" and share ";
    int v15 = &stru_1F2044F30;
    if (*(unsigned char *)(a1 + 72)) {
      int v15 = *(__CFString **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    }
    else {
      uint64_t v14 = &stru_1F2044F30;
    }
    uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    int v24 = 138413058;
    uint64_t v25 = v12;
    __int16 v26 = 2114;
    uint64_t v27 = v14;
    __int16 v28 = 2114;
    uint64_t v29 = v15;
    __int16 v30 = 2112;
    uint64_t v31 = v16;
    _os_log_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_INFO, "Warn: Couldn't get PCS data for zone %@%{public}@%{public}@. Error was %@", (uint8_t *)&v24, 0x2Au);
  }
  return objc_msgSend__addShareToPCSData_withError_(*(void **)(a1 + 40), v17, 0, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
}

void sub_1C4EDA520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4EDA544(uint64_t a1, void *a2, void *a3)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v10 = WeakRetained;
  if (v5 && !v6)
  {
    if (*MEMORY[0x1E4F1A4E0])
    {
      uint64_t v11 = objc_msgSend_operation(WeakRetained, v8, v9);
      uint64_t v14 = objc_msgSend_deviceContext(v11, v12, v13);
      uint64_t v17 = objc_msgSend_testDeviceReference(v14, v15, v16);
      if (v17)
      {
        uint64_t v20 = (void *)v17;
        uint64_t v21 = objc_msgSend_protectionData(*(void **)(a1 + 32), v18, v19);
        uint64_t v23 = objc_msgSend_dataUsingEncoding_(@"_NEW_PROTECTION_DATA_PLOX", v22, 4);
        int isEqualToData = objc_msgSend_isEqualToData_(v21, v24, (uint64_t)v23);

        if (isEqualToData)
        {
          objc_msgSend__createAndSavePCS(v10, v8, v9);
          __int16 v26 = 0;
          id v6 = 0;
LABEL_37:

          goto LABEL_38;
        }
      }
      else
      {
      }
    }
    __int16 v45 = objc_msgSend_pcsManager(v10, v8, v9);
    uint64_t v48 = objc_msgSend_protectionData(*(void **)(a1 + 32), v46, v47);
    uint64_t v51 = objc_msgSend_pcs(v5, v49, v50);
    id v81 = 0;
    uint64_t v53 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v45, v52, (uint64_t)v48, 1, v51, &v81);
    id v6 = v81;

    if (v6)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v56 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v83 = v6;
        _os_log_impl(&dword_1C4CFF000, v56, OS_LOG_TYPE_INFO, "Warn: Couldn't deserialize record PCS provided by the client: %@", buf, 0xCu);
      }
    }
    if (v53)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      __int16 v57 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        __int16 v59 = *(void **)(a1 + 32);
        id v60 = v57;
        uint64_t v63 = objc_msgSend_recordID(v59, v61, v62);
        *(_DWORD *)buf = 138412290;
        id v83 = v63;
        _os_log_impl(&dword_1C4CFF000, v60, OS_LOG_TYPE_INFO, "Successfully deserialized client PCS data for record %@", buf, 0xCu);
      }
      __int16 v26 = objc_msgSend_dataWithRecord_(CKDRecordPCSData, v58, *(void *)(a1 + 32));
      objc_msgSend_setPcs_(v26, v64, (uint64_t)v53);
      objc_msgSend_setZonePCSData_(v26, v65, (uint64_t)v5);
      if (objc_msgSend__canSetPreviousProtectionEtag(v10, v66, v67))
      {
        double v70 = objc_msgSend_previousProtectionEtag(*(void **)(a1 + 32), v68, v69);
        objc_msgSend_setEtag_(v26, v71, (uint64_t)v70);
      }
      else
      {
        objc_msgSend_setEtag_(v26, v68, 0);
      }
      uint64_t v74 = objc_msgSend_previousProtectionEtagFromUnitTest(*(void **)(a1 + 32), v72, v73);

      if (v74)
      {
        uint64_t v77 = objc_msgSend_previousProtectionEtagFromUnitTest(*(void **)(a1 + 32), v75, v76);
        objc_msgSend_setEtag_(v26, v78, (uint64_t)v77);
      }
      objc_msgSend_etag(v26, v75, v76);
    }
    else
    {
      __int16 v26 = 0;
      objc_msgSend_etag(0, v54, v55);
    uint64_t v79 = };

    if (v53 && v79)
    {
      objc_msgSend__addShareToPCSData_withError_(v10, v80, (uint64_t)v26, 0);
    }
    else
    {
      objc_msgSend__fetchExistingPCSForProvidedPCSData_(v10, v80, (uint64_t)v26);
      if (!v53) {
        goto LABEL_37;
      }
    }
    CFRelease(v53);
    goto LABEL_37;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v27 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    __int16 v30 = *(void **)(a1 + 32);
    uint64_t v31 = v27;
    uint64_t v34 = objc_msgSend_recordID(v30, v32, v33);
    uint64_t v37 = objc_msgSend_zoneID(v34, v35, v36);
    *(_DWORD *)buf = 138412546;
    id v83 = v37;
    __int16 v84 = 2112;
    id v85 = v6;
    _os_log_impl(&dword_1C4CFF000, v31, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS for zone %@: %@", buf, 0x16u);
  }
  if (!v6)
  {
    uint64_t v38 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v39 = *MEMORY[0x1E4F19DD8];
    uint64_t v40 = objc_msgSend_recordID(*(void **)(a1 + 32), v28, v29);
    uint64_t v43 = objc_msgSend_zoneID(v40, v41, v42);
    objc_msgSend_errorWithDomain_code_format_(v38, v44, v39, 5001, @"Couldn't fetch PCS for zone %@", v43);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend__addShareToPCSData_withError_(v10, v28, 0, v6);
LABEL_38:
}

void sub_1C4EDAB3C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4EDAB58(uint64_t a1, void *a2, void *a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v10 = WeakRetained;
  if (v5 && !v6)
  {
    if (*MEMORY[0x1E4F1A4E0])
    {
      uint64_t v11 = objc_msgSend_operation(WeakRetained, v8, v9);
      uint64_t v14 = objc_msgSend_deviceContext(v11, v12, v13);
      uint64_t v17 = objc_msgSend_testDeviceReference(v14, v15, v16);
      if (v17)
      {
        uint64_t v20 = (void *)v17;
        uint64_t v21 = objc_msgSend_protectionData(*(void **)(a1 + 32), v18, v19);
        uint64_t v23 = objc_msgSend_dataUsingEncoding_(@"_NEW_PROTECTION_DATA_PLOX", v22, 4);
        int isEqualToData = objc_msgSend_isEqualToData_(v21, v24, (uint64_t)v23);

        if (isEqualToData)
        {
          objc_msgSend__createAndSavePCS(v10, v8, v9);
          __int16 v26 = 0;
          id v6 = 0;
LABEL_37:

          goto LABEL_38;
        }
      }
      else
      {
      }
    }
    __int16 v30 = objc_msgSend_pcsManager(v10, v8, v9);
    uint64_t v33 = objc_msgSend_protectionData(*(void **)(a1 + 32), v31, v32);
    uint64_t v36 = objc_msgSend_pcs(v5, v34, v35);
    id v66 = 0;
    uint64_t v38 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v30, v37, (uint64_t)v33, 1, v36, &v66);
    id v6 = v66;

    if (v6)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v41 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v68 = v6;
        _os_log_impl(&dword_1C4CFF000, v41, OS_LOG_TYPE_INFO, "Warn: Couldn't deserialize record PCS provided by the client: %@", buf, 0xCu);
      }
    }
    if (v38)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v42 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        __int16 v44 = *(void **)(a1 + 32);
        __int16 v45 = v42;
        uint64_t v48 = objc_msgSend_recordID(v44, v46, v47);
        *(_DWORD *)buf = 138412290;
        id v68 = v48;
        _os_log_impl(&dword_1C4CFF000, v45, OS_LOG_TYPE_INFO, "Successfully deserialized client PCS data for record %@", buf, 0xCu);
      }
      __int16 v26 = objc_msgSend_dataWithRecord_(CKDRecordPCSData, v43, *(void *)(a1 + 32));
      objc_msgSend_setPcs_(v26, v49, (uint64_t)v38);
      objc_msgSend_setSharePCSData_(v26, v50, (uint64_t)v5);
      if (objc_msgSend__canSetPreviousProtectionEtag(v10, v51, v52))
      {
        uint64_t v55 = objc_msgSend_previousProtectionEtag(*(void **)(a1 + 32), v53, v54);
        objc_msgSend_setEtag_(v26, v56, (uint64_t)v55);
      }
      else
      {
        objc_msgSend_setEtag_(v26, v53, 0);
      }
      __int16 v59 = objc_msgSend_previousProtectionEtagFromUnitTest(*(void **)(a1 + 32), v57, v58);

      if (v59)
      {
        uint64_t v62 = objc_msgSend_previousProtectionEtagFromUnitTest(*(void **)(a1 + 32), v60, v61);
        objc_msgSend_setEtag_(v26, v63, (uint64_t)v62);
      }
      objc_msgSend_etag(v26, v60, v61);
    }
    else
    {
      __int16 v26 = 0;
      objc_msgSend_etag(0, v39, v40);
    uint64_t v64 = };

    if (v38 && v64)
    {
      objc_msgSend__addShareToPCSData_withError_(v10, v65, (uint64_t)v26, 0);
    }
    else
    {
      objc_msgSend__fetchExistingPCSForProvidedPCSData_(v10, v65, (uint64_t)v26);
      if (!v38) {
        goto LABEL_37;
      }
    }
    CFRelease(v38);
    goto LABEL_37;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v27 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v29 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    id v68 = v29;
    __int16 v69 = 2112;
    id v70 = v6;
    _os_log_impl(&dword_1C4CFF000, v27, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS for share %@: %@", buf, 0x16u);
  }
  if (!v6)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v28, *MEMORY[0x1E4F19DD8], 5001, @"Couldn't fetch PCS for share %@", *(void *)(a1 + 40));
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend__addShareToPCSData_withError_(v10, v28, 0, v6);
LABEL_38:
}

void sub_1C4EDB10C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4EDB130(uint64_t a1, void *a2, void *a3)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!v6)
  {
    uint64_t v13 = objc_msgSend_chainPCSData(v5, v7, v8);

    if (v13)
    {
      if (*MEMORY[0x1E4F1A4E0])
      {
        uint64_t v16 = objc_msgSend_operation(WeakRetained, v14, v15);
        uint64_t v19 = objc_msgSend_deviceContext(v16, v17, v18);
        uint64_t v22 = objc_msgSend_testDeviceReference(v19, v20, v21);
        if (v22)
        {
          uint64_t v25 = (void *)v22;
          __int16 v26 = objc_msgSend_protectionData(*(void **)(a1 + 32), v23, v24);
          __int16 v28 = objc_msgSend_dataUsingEncoding_(@"_NEW_PROTECTION_DATA_PLOX", v27, 4);
          int isEqualToData = objc_msgSend_isEqualToData_(v26, v29, (uint64_t)v28);

          if (isEqualToData)
          {
            objc_msgSend__createAndSavePCS(WeakRetained, v14, v15);
            id v6 = 0;
            uint64_t v31 = 0;
LABEL_37:

            goto LABEL_38;
          }
        }
        else
        {
        }
      }
      uint64_t v32 = objc_msgSend_pcsManager(WeakRetained, v14, v15);
      uint64_t v35 = objc_msgSend_protectionData(*(void **)(a1 + 32), v33, v34);
      uint64_t v38 = objc_msgSend_chainPCSData(v5, v36, v37);
      uint64_t v41 = objc_msgSend_pcs(v38, v39, v40);
      id v71 = 0;
      uint64_t v43 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v32, v42, (uint64_t)v35, 1, v41, &v71);
      id v6 = v71;

      if (v6)
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        __int16 v46 = *MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v73 = v6;
          _os_log_impl(&dword_1C4CFF000, v46, OS_LOG_TYPE_INFO, "Warn: Couldn't deserialize record PCS provided by the client: %@", buf, 0xCu);
        }
      }
      if (v43)
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v47 = (void *)*MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
        {
          uint64_t v49 = *(void **)(a1 + 32);
          uint64_t v50 = v47;
          uint64_t v53 = objc_msgSend_recordID(v49, v51, v52);
          *(_DWORD *)buf = 138412290;
          id v73 = v53;
          _os_log_impl(&dword_1C4CFF000, v50, OS_LOG_TYPE_INFO, "Successfully deserialized client PCS data for record %@", buf, 0xCu);
        }
        uint64_t v31 = objc_msgSend_dataWithRecord_(CKDRecordPCSData, v48, *(void *)(a1 + 32));
        objc_msgSend_setPcs_(v31, v54, (uint64_t)v43);
        objc_msgSend_setParentPCSData_(v31, v55, (uint64_t)v5);
        if (objc_msgSend__canSetPreviousProtectionEtag(WeakRetained, v56, v57))
        {
          id v60 = objc_msgSend_previousProtectionEtag(*(void **)(a1 + 32), v58, v59);
          objc_msgSend_setEtag_(v31, v61, (uint64_t)v60);
        }
        else
        {
          objc_msgSend_setEtag_(v31, v58, 0);
        }
        uint64_t v64 = objc_msgSend_previousProtectionEtagFromUnitTest(*(void **)(a1 + 32), v62, v63);

        if (v64)
        {
          uint64_t v67 = objc_msgSend_previousProtectionEtagFromUnitTest(*(void **)(a1 + 32), v65, v66);
          objc_msgSend_setEtag_(v31, v68, (uint64_t)v67);
        }
        objc_msgSend_etag(v31, v65, v66);
      }
      else
      {
        uint64_t v31 = 0;
        objc_msgSend_etag(0, v44, v45);
      __int16 v69 = };

      if (v43 && v69)
      {
        objc_msgSend__addShareToPCSData_withError_(WeakRetained, v70, (uint64_t)v31, 0);
      }
      else
      {
        objc_msgSend__fetchExistingPCSForProvidedPCSData_(WeakRetained, v70, (uint64_t)v31);
        if (!v43) {
          goto LABEL_37;
        }
      }
      CFRelease(v43);
      goto LABEL_37;
    }
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v10 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    id v73 = v12;
    __int16 v74 = 2112;
    id v75 = v6;
    _os_log_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS for parent %@: %@", buf, 0x16u);
  }
  if (!v6)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v11, *MEMORY[0x1E4F19DD8], 5001, @"Couldn't fetch PCS for parent %@", *(void *)(a1 + 40));
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend__addShareToPCSData_withError_(WeakRetained, v11, 0, v6);
LABEL_38:
}

void sub_1C4EDB740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4EDB764(void **a1, void *a2, void *a3)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  uint64_t v12 = objc_msgSend_operation(WeakRetained, v8, v9);
  if (v5)
  {
    uint64_t v13 = objc_msgSend_pcs(v5, v10, v11);
    uint64_t v15 = objc_msgSend_protectionIdentifierFromShareProtection_(CKDPCSManager, v14, v13);
    uint64_t v18 = objc_msgSend_CKUppercaseHexStringWithoutSpaces(v15, v16, v17);

    uint64_t v21 = objc_msgSend_pcs(a1[4], v19, v20);
    uint64_t v23 = objc_msgSend_protectionIdentifierFromShareProtection_(CKDPCSManager, v22, v21);
    __int16 v26 = objc_msgSend_CKUppercaseHexStringWithoutSpaces(v23, v24, v25);

    if (*MEMORY[0x1E4F1A4E0])
    {
      int v106 = v26;
      id v29 = WeakRetained;
      id v30 = v5;
      uint64_t v31 = v18;
      id v32 = v6;
      uint64_t v33 = v12;
      uint64_t v34 = objc_msgSend_container(v12, v27, v28);
      uint64_t v37 = objc_msgSend_deviceContext(v34, v35, v36);
      uint64_t v41 = objc_msgSend_testDeviceReference(v37, v38, v39);
      if (v41)
      {
        uint64_t v42 = objc_msgSend_objectForKeyedSubscript_(a1[5], v40, @"UNIT_TESTING_FAIL_PCS_ETAG_CHECK");
        BOOL v43 = v42 != 0;
      }
      else
      {
        BOOL v43 = 0;
      }

      uint64_t v12 = v33;
      id v6 = v32;
      uint64_t v18 = v31;
      id v5 = v30;
      id WeakRetained = v29;
      __int16 v26 = v106;
    }
    else
    {
      BOOL v43 = 0;
    }
    if (!objc_msgSend_isEqualToString_(v26, v27, (uint64_t)v18) || v43)
    {
      if (!objc_msgSend_retryPCSFailures(v12, v50, v51))
      {
        id v68 = (void *)MEMORY[0x1E4F1A280];
        id v69 = v6;
        id v70 = v12;
        uint64_t v71 = *MEMORY[0x1E4F19DD8];
        double v72 = objc_msgSend_recordID(a1[5], v58, v59);
        uint64_t v73 = v71;
        uint64_t v12 = v70;
        id v6 = v69;
        objc_msgSend_errorWithDomain_code_format_(v68, v74, v73, 5004, @"Attempted PCS data (%@) had a different identifier than the server PCS data (%@) for record %@", v26, v18, v72);
        id v48 = (id)objc_claimAutoreleasedReturnValue();

        id v47 = 0;
        goto LABEL_32;
      }
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v60 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        uint64_t v63 = a1[5];
        uint64_t v64 = v60;
        uint64_t v67 = objc_msgSend_recordID(v63, v65, v66);
        *(_DWORD *)buf = 138543874;
        uint64_t v108 = v26;
        __int16 v109 = 2114;
        id v110 = v18;
        __int16 v111 = 2112;
        uint64_t v112 = v67;
        _os_log_impl(&dword_1C4CFF000, v64, OS_LOG_TYPE_INFO, "Attempted PCS data (%{public}@) had a different identifier than the server PCS data (%{public}@) for record %@. Using the server's PCS data", buf, 0x20u);
      }
      objc_msgSend__clearRecordProtectionDataForRecord(WeakRetained, v61, v62);
      id v57 = v5;
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v52 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        id v86 = v6;
        uint64_t v87 = v12;
        uint64_t v88 = a1[5];
        uint64_t v89 = v52;
        uint64_t v92 = objc_msgSend_recordID(v88, v90, v91);
        uint64_t v95 = objc_msgSend_etag(v5, v93, v94);
        *(_DWORD *)buf = 138412802;
        uint64_t v108 = v92;
        __int16 v109 = 2114;
        id v110 = v26;
        __int16 v111 = 2114;
        uint64_t v112 = v95;
        _os_log_debug_impl(&dword_1C4CFF000, v89, OS_LOG_TYPE_DEBUG, "PCS identifiers for record %@ match (%{public}@), so we'll use %{public}@ as our previous protection etag", buf, 0x20u);

        uint64_t v12 = v87;
        id v6 = v86;
      }
      uint64_t v55 = objc_msgSend_etag(v5, v53, v54);
      objc_msgSend_setEtag_(a1[4], v56, (uint64_t)v55);

      id v57 = a1[4];
    }
    id v47 = v57;
    id v48 = 0;
LABEL_32:

    objc_msgSend__addShareToPCSData_withError_(WeakRetained, v75, (uint64_t)v47, v48);
LABEL_33:

    goto LABEL_34;
  }
  if (v6 && !objc_msgSend_CKIsObjectNotFoundError(v6, v10, v11))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v76 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v77 = a1[5];
      uint64_t v78 = v76;
      id v81 = objc_msgSend_recordID(v77, v79, v80);
      *(_DWORD *)buf = 138412546;
      uint64_t v108 = v81;
      __int16 v109 = 2112;
      id v110 = v6;
      _os_log_impl(&dword_1C4CFF000, v78, OS_LOG_TYPE_INFO, "Couldn't fetch PCS data to verify client provided protection data for record %@: %@", buf, 0x16u);
    }
    id v48 = v6;
    id v47 = 0;
    objc_msgSend__addShareToPCSData_withError_(WeakRetained, v82, 0, v48);
    goto LABEL_33;
  }
  if (!objc_msgSend_CKIsObjectNotFoundError(v6, v10, v11) || objc_msgSend_pcs(a1[4], v44, v45))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    __int16 v46 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v96 = a1[5];
      uint64_t v97 = v46;
      CFTypeRef v100 = objc_msgSend_recordID(v96, v98, v99);
      *(_DWORD *)buf = 138412290;
      uint64_t v108 = v100;
      _os_log_debug_impl(&dword_1C4CFF000, v97, OS_LOG_TYPE_DEBUG, "PCS data for record %@ wasn't fetched from the server. Using the client-provided PCS data", buf, 0xCu);
    }
    id v47 = a1[4];
    id v48 = 0;
    objc_msgSend__addShareToPCSData_withError_(WeakRetained, v49, (uint64_t)v47, 0);
    goto LABEL_33;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v83 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v101 = a1[5];
    uint64_t v102 = v83;
    uint64_t v105 = objc_msgSend_recordID(v101, v103, v104);
    *(_DWORD *)buf = 138412290;
    uint64_t v108 = v105;
    _os_log_debug_impl(&dword_1C4CFF000, v102, OS_LOG_TYPE_DEBUG, "We couldn't deserialize the client-provided PCS and PCS data for record %@ wasn't fetched from the server because the record doesn't exist on the server. Creating new record PCS", buf, 0xCu);
  }
  objc_msgSend__createAndSavePCS(WeakRetained, v84, v85);
LABEL_34:
}

void sub_1C4EDD8C0(uint64_t a1, void *a2)
{
  id v7 = a2;
  uint64_t v5 = objc_msgSend_recordKeysRemoved(v7, v3, v4);
  objc_msgSend_setRecordKeysRemoved_(v7, v6, *(void *)(a1 + 32) + v5);
}

void sub_1C4EDECE8(_Unwind_Exception *a1)
{
}

BOOL sub_1C4EDEDB0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v54 = 0;
  int v12 = objc_msgSend__prepareAsset_recordKey_mergeableDeltaID_record_error_(v9, v11, (uint64_t)v7, v8, a4, v10, &v54);
  id v13 = v54;
  uint64_t v14 = (void *)*MEMORY[0x1E4F1A548];
  if (v13)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v14);
    }
    uint64_t v15 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void **)(a1 + 40);
      uint64_t v34 = v15;
      uint64_t v37 = objc_msgSend_recordID(v33, v35, v36);
      *(_DWORD *)buf = 138412802;
      id v56 = v37;
      __int16 v57 = 2114;
      id v58 = v8;
      __int16 v59 = 2112;
      id v60 = v13;
      _os_log_error_impl(&dword_1C4CFF000, v34, OS_LOG_TYPE_ERROR, "Failing save of record %@ due to error preparing asset for upload for key \"%{public}@\": %@", buf, 0x20u);
    }
    objc_msgSend_setState_(*(void **)(a1 + 32), v16, 12);
    uint64_t v17 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v18 = *MEMORY[0x1E4F19DD8];
    uint64_t v21 = objc_msgSend_recordID(*(void **)(a1 + 40), v19, v20);
    uint64_t v23 = objc_msgSend_errorWithDomain_code_error_format_(v17, v22, v18, 1021, v13, @"Error preparing asset for upload for key \"%@\" on record %@: %@", v8, v21, v13);
    objc_msgSend_setError_(*(void **)(a1 + 32), v24, (uint64_t)v23);

    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
  }
  else if (v12)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v14);
    }
    uint64_t v25 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v38 = *(void **)(a1 + 40);
      uint64_t v39 = v25;
      uint64_t v42 = objc_msgSend_recordID(v38, v40, v41);
      uint64_t v45 = objc_msgSend_operationID(*(void **)(a1 + 48), v43, v44);
      *(_DWORD *)buf = 138413058;
      id v56 = v7;
      __int16 v57 = 2114;
      id v58 = v8;
      __int16 v59 = 2112;
      id v60 = v42;
      __int16 v61 = 2114;
      uint64_t v62 = v45;
      _os_log_debug_impl(&dword_1C4CFF000, v39, OS_LOG_TYPE_DEBUG, "Uploading asset %@ for key \"%{public}@\" on record %@ and operation %{public}@", buf, 0x2Au);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
    uint64_t v28 = objc_msgSend_batchRank(*(void **)(a1 + 32), v26, v27);
    objc_msgSend_setUploadRank_(v7, v29, v28);
    objc_msgSend_addObject_(*(void **)(a1 + 56), v30, (uint64_t)v7);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v14);
    }
    uint64_t v31 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      __int16 v46 = *(void **)(a1 + 40);
      id v47 = v31;
      uint64_t v50 = objc_msgSend_recordID(v46, v48, v49);
      uint64_t v53 = objc_msgSend_operationID(*(void **)(a1 + 48), v51, v52);
      *(_DWORD *)buf = 138413058;
      id v56 = v7;
      __int16 v57 = 2114;
      id v58 = v8;
      __int16 v59 = 2112;
      id v60 = v50;
      __int16 v61 = 2114;
      uint64_t v62 = v53;
      _os_log_debug_impl(&dword_1C4CFF000, v47, OS_LOG_TYPE_DEBUG, "Skipping asset %@ for key \"%{public}@\" on record %@ and operation %{public}@", buf, 0x2Au);
    }
  }

  return v13 == 0;
}

void sub_1C4EE3534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4EE3554(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4EE3564(uint64_t a1)
{
}

id sub_1C4EE356C(void *a1, const char *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a1[4];
  uint64_t v4 = a1[5];
  id v16 = 0;
  uint64_t v5 = objc_msgSend_entryWithValues_label_error_setupBlock_(v3, a2, v4, off_1E64F53E0, &v16, &unk_1F2043DF0);
  id v6 = v16;
  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v7 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = a1[6];
      *(_DWORD *)buf = 138412546;
      uint64_t v18 = v15;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_error_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_ERROR, "Encountered unexpected error when fetching usage for IDString in Usage SQL Cache for IDString %@. Error: %@", buf, 0x16u);
    }
    id v8 = v6;
  }
  else if (v5)
  {
    uint64_t v9 = [CKUsageInfo alloc];
    uint64_t v11 = objc_msgSend_initWithUsageInfoEntry_(v9, v10, (uint64_t)v5);
    uint64_t v12 = *(void *)(a1[7] + 8);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
  return v6;
}

void sub_1C4EE36E8(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F28F60];
  id v3 = a2;
  objc_msgSend_predicateWithFormat_(v2, v4, @"IDString = $IDString AND itemType = $itemType");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v3, v5, (uint64_t)v6);
}

void sub_1C4EE4610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1C4EE4630(void *a1, const char *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)a1[4];
  uint64_t v4 = a1[5];
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = sub_1C4EE4880;
  v26[3] = &unk_1E64F5410;
  v26[4] = a1[8];
  id v27 = 0;
  uint64_t v5 = objc_msgSend_entriesWithValues_label_error_setupBlock_(v3, a2, v4, off_1E64F53F8, &v27, v26);
  id v8 = v27;
  if (v8)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v9 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      unint64_t v22 = a1[9] - 1;
      if (v22 > 2) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = off_1E64F5520[v22];
      }
      uint64_t v24 = a1[6];
      *(_DWORD *)buf = 138412802;
      id v29 = v23;
      __int16 v30 = 2112;
      uint64_t v31 = v24;
      __int16 v32 = 2112;
      id v33 = v8;
      uint64_t v25 = v9;
      _os_log_error_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_ERROR, "Encountered unexpected errors when fetching usages of type %@ for containerID %@, error: %@", buf, 0x20u);
    }
    id v10 = v8;
  }
  else
  {
    uint64_t v11 = objc_msgSend_nextObject(v5, v6, v7);
    if (v11)
    {
      id v13 = (void *)v11;
      do
      {
        uint64_t v14 = *(void **)(*(void *)(a1[7] + 8) + 40);
        if (!v14)
        {
          uint64_t v15 = objc_opt_new();
          uint64_t v16 = *(void *)(a1[7] + 8);
          uint64_t v17 = *(void **)(v16 + 40);
          *(void *)(v16 + 40) = v15;

          uint64_t v14 = *(void **)(*(void *)(a1[7] + 8) + 40);
        }
        objc_msgSend_addObject_(v14, v12, (uint64_t)v13);
        uint64_t v20 = objc_msgSend_nextObject(v5, v18, v19);

        id v13 = (void *)v20;
      }
      while (v20);
    }
    id v10 = 0;
  }

  return v10;
}

void sub_1C4EE4880(uint64_t a1, void *a2)
{
  id v10 = a2;
  uint64_t v4 = objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], v3, @"itemType = $itemType");
  objc_msgSend_setSearchPredicate_(v10, v5, (uint64_t)v4);
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    id v8 = objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E4F28ED0], v6, v7);
    objc_msgSend_setLimit_(v10, v9, (uint64_t)v8);
  }
}

id sub_1C4EE4BF8(uint64_t a1, const char *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v49 = 0;
  uint64_t v5 = objc_msgSend_entryWithValues_label_error_setupBlock_(v3, a2, v4, off_1E64F5458, &v49, &unk_1F2043E10);
  id v8 = v49;
  if (v8 && (objc_msgSend_CKIsNoMatchingRowError_(MEMORY[0x1E4F28C58], v6, (uint64_t)v8) & 1) == 0)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    __int16 v30 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = *(void *)(a1 + 48);
      unint64_t v37 = *(void *)(a1 + 64) - 1;
      if (v37 > 2) {
        uint64_t v38 = 0;
      }
      else {
        uint64_t v38 = off_1E64F5520[v37];
      }
      uint64_t v44 = *(void **)(a1 + 32);
      uint64_t v45 = v30;
      id v48 = objc_msgSend_containerID(v44, v46, v47);
      *(_DWORD *)buf = 138413058;
      uint64_t v51 = v36;
      __int16 v52 = 2112;
      uint64_t v53 = v38;
      __int16 v54 = 2112;
      uint64_t v55 = v48;
      __int16 v56 = 2112;
      uint64_t v57 = (uint64_t)v8;
      _os_log_error_impl(&dword_1C4CFF000, v45, OS_LOG_TYPE_ERROR, "Encountered unexpected error when fetching IDString %@ for type %@ in DeviceCapabilityUsageSQLTable for container %@. Error %@", buf, 0x2Au);
    }
  }
  else
  {
    if (!v5) {
      uint64_t v5 = objc_opt_new();
    }
    uint64_t v9 = objc_msgSend_lastSent(*(void **)(a1 + 56), v6, v7);
    objc_msgSend_setLastSent_(v5, v10, (uint64_t)v9);

    id v13 = objc_msgSend_lastUsed(*(void **)(a1 + 56), v11, v12);
    objc_msgSend_setLastUsed_(v5, v14, (uint64_t)v13);

    uint64_t v17 = objc_msgSend_sending(*(void **)(a1 + 56), v15, v16);
    objc_msgSend_setSending_(v5, v18, (uint64_t)v17);

    uint64_t v21 = objc_msgSend_failureCount(*(void **)(a1 + 56), v19, v20);
    objc_msgSend_setFailureCount_(v5, v22, v21);
    uint64_t v24 = objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E4F28ED0], v23, *(void *)(a1 + 64));
    objc_msgSend_setItemType_(v5, v25, (uint64_t)v24);

    objc_msgSend_setIDString_(v5, v26, *(void *)(a1 + 48));
    uint64_t v28 = objc_msgSend_insertObject_orUpdateProperties_label_(*(void **)(a1 + 32), v27, (uint64_t)v5, 0, off_1E64F5470);

    if (v28)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v29 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = *(void *)(a1 + 48);
        unint64_t v34 = *(void *)(a1 + 64) - 1;
        if (v34 > 2) {
          uint64_t v35 = 0;
        }
        else {
          uint64_t v35 = off_1E64F5520[v34];
        }
        uint64_t v39 = *(void **)(a1 + 32);
        uint64_t v40 = v29;
        BOOL v43 = objc_msgSend_containerID(v39, v41, v42);
        *(_DWORD *)buf = 138413058;
        uint64_t v51 = v33;
        __int16 v52 = 2112;
        uint64_t v53 = v35;
        __int16 v54 = 2112;
        uint64_t v55 = v43;
        __int16 v56 = 2112;
        uint64_t v57 = v28;
        _os_log_error_impl(&dword_1C4CFF000, v40, OS_LOG_TYPE_ERROR, "Failed to set usage for IDString %@ for type %@ in DeviceCapabilityUsageSQLTable for container %@. Error %@", buf, 0x2Au);
      }
    }
    id v8 = (id)v28;
  }
  id v31 = v8;

  return v31;
}

void sub_1C4EE4F94(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F28F60];
  id v3 = a2;
  objc_msgSend_predicateWithFormat_(v2, v4, @"IDString = $IDString AND itemType = $itemType");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v3, v5, (uint64_t)v6);
}

uint64_t sub_1C4EE52D0(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"IDString = $IDString AND itemType = $itemType");
}

id sub_1C4EE5500(uint64_t *a1)
{
  v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_opt_new();
  objc_msgSend_setRowID_(v2, v3, (uint64_t)&unk_1F20AC750);
  uint64_t v5 = objc_msgSend_sqliteRepresentations_(MEMORY[0x1E4F19F58], v4, a1[4]);
  objc_msgSend_setDeviceCapabilityStringSet_(v2, v6, (uint64_t)v5);

  objc_msgSend_setCapabilitySetSavedDate_(v2, v7, a1[5]);
  id v8 = (void *)a1[6];
  v24[0] = @"deviceCapabilityStringSet";
  v24[1] = @"capabilitySetSavedDate";
  id v10 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v9, (uint64_t)v24, 2);
  uint64_t v12 = objc_msgSend_insertObject_orUpdateProperties_label_(v8, v11, (uint64_t)v2, v10, off_1E64F54C8);

  if (v12)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v13 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = (void *)a1[6];
      uint64_t v16 = v13;
      uint64_t v19 = objc_msgSend_containerID(v15, v17, v18);
      int v20 = 138412546;
      uint64_t v21 = v19;
      __int16 v22 = 2112;
      uint64_t v23 = v12;
      _os_log_error_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_ERROR, "Failed to update last sent capabilities and its date in LastSentCapabilitiesAndUsageTable for containerID %@. Error %@", (uint8_t *)&v20, 0x16u);
    }
  }

  return v12;
}

id sub_1C4EE5770(uint64_t a1)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_opt_new();
  objc_msgSend_setRowID_(v2, v3, (uint64_t)&unk_1F20AC750);
  objc_msgSend_setUsageSavedDate_(v2, v4, *(void *)(a1 + 32));
  uint64_t v5 = *(void **)(a1 + 40);
  v21[0] = @"usageSavedDate";
  uint64_t v7 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v6, (uint64_t)v21, 1);
  uint64_t v9 = objc_msgSend_insertObject_orUpdateProperties_label_(v5, v8, (uint64_t)v2, v7, off_1E64F54E0);

  if (v9)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v10 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void **)(a1 + 40);
      id v13 = v10;
      uint64_t v16 = objc_msgSend_containerID(v12, v14, v15);
      int v17 = 138412546;
      uint64_t v18 = v16;
      __int16 v19 = 2112;
      int v20 = v9;
      _os_log_error_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_ERROR, "Failed to update usage saved date in LastSentCapabilitiesAndUsageTable for containerID %@. Error %@", (uint8_t *)&v17, 0x16u);
    }
  }

  return v9;
}

void sub_1C4EE5A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1C4EE5A1C(uint64_t a1, const char *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v20 = 0;
  uint64_t v4 = objc_msgSend_fetchAllEntries_(v3, a2, (uint64_t)&v20);
  id v7 = v20;
  if (v7 || objc_msgSend_count(v4, v5, v6) != 1)
  {
    if ((unint64_t)objc_msgSend_count(v4, v5, v6) < 2) {
      goto LABEL_7;
    }
    int v17 = *(void **)(a1 + 32);
    id v19 = v7;
    objc_msgSend_deleteAllEntries_(v17, v16, (uint64_t)&v19);
    id v15 = v19;
  }
  else
  {
    id v8 = [CKLastSentCapabilitiesAndUsage alloc];
    objc_msgSend_firstObject(v4, v9, v10);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t SentCapabilitiesAndUsageEntry = objc_msgSend_initWithLastSentCapabilitiesAndUsageEntry_(v8, v11, (uint64_t)v7);
    uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = SentCapabilitiesAndUsageEntry;

    id v15 = 0;
  }

  id v7 = v15;
LABEL_7:

  return v7;
}

uint64_t sub_1C4EE6554(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_parserData(*(void **)(a1 + 32), a2, a3);

  if (!v4)
  {
    id v7 = objc_opt_new();
    objc_msgSend_setParserData_(*(void **)(a1 + 32), v8, (uint64_t)v7);
  }
  uint64_t v9 = objc_msgSend_parserData(*(void **)(a1 + 32), v5, v6);
  objc_msgSend_appendData_(v9, v10, *(void *)(a1 + 40));

  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t v12 = *(uint64_t (**)(void))(result + 16);
    return v12();
  }
  return result;
}

void sub_1C4EE66AC(uint64_t a1)
{
  uint64_t v2 = dispatch_group_create();
  uint64_t v5 = objc_msgSend_parserData(*(void **)(a1 + 32), v3, v4);
  uint64_t v8 = objc_msgSend_length(v5, v6, v7);

  if (v8)
  {
    uint64_t v11 = (void *)MEMORY[0x1E4F28D90];
    uint64_t v12 = objc_msgSend_parserData(*(void **)(a1 + 32), v9, v10);
    id v43 = 0;
    uint64_t v14 = objc_msgSend_JSONObjectWithData_options_error_(v11, v13, (uint64_t)v12, 0, &v43);
    id v15 = v43;

    objc_msgSend_setParserError_(*(void **)(a1 + 32), v16, (uint64_t)v15);
    if (v14)
    {
      if (!v15)
      {
        id v19 = objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v17, v18);

        if (v19)
        {
          dispatch_group_enter(v2);
          objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v20, v21);
          __int16 v22 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
          uint64_t v25 = objc_msgSend_parserData(*(void **)(a1 + 32), v23, v24);
          v41[0] = MEMORY[0x1E4F143A8];
          v41[1] = 3221225472;
          v41[2] = sub_1C4EE6978;
          v41[3] = &unk_1E64F05C8;
          __int16 v26 = v2;
          uint64_t v42 = v26;
          ((void (**)(void, void *, void *, void *))v22)[2](v22, v14, v25, v41);

          if (*MEMORY[0x1E4F1A4E0]
            && objc_msgSend_testRepeatedParseResults(*(void **)(a1 + 32), v27, v28))
          {
            dispatch_group_enter(v26);
            objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v29, v30);
            id v31 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
            unint64_t v34 = objc_msgSend_parserData(*(void **)(a1 + 32), v32, v33);
            v39[0] = MEMORY[0x1E4F143A8];
            v39[1] = 3221225472;
            void v39[2] = sub_1C4EE6980;
            v39[3] = &unk_1E64F05C8;
            uint64_t v40 = v26;
            ((void (**)(void, void *, void *, void *))v31)[2](v31, v14, v34, v39);
          }
        }
      }
    }
  }
  if (*(void *)(a1 + 40))
  {
    objc_msgSend_qualityOfService(*(void **)(a1 + 32), v9, v10);
    uint64_t v35 = CKGetGlobalQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4EE6988;
    block[3] = &unk_1E64F0790;
    id v36 = *(id *)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v38 = v36;
    dispatch_group_notify(v2, v35, block);
  }
}

void sub_1C4EE6978(uint64_t a1)
{
}

void sub_1C4EE6980(uint64_t a1)
{
}

void sub_1C4EE6988(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  objc_msgSend_parserError(*(void **)(a1 + 32), a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

uint64_t sub_1C4EE6B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 16) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v1_Block_object_dispose(&STACK[0x3F0], 8) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4EE6FCC()
{
  uint64_t v0 = (void *)qword_1EBBCFF18;
  qword_1EBBCFF18 = (uint64_t)&unk_1F20ABEE8;
}

uint64_t sub_1C4EE711C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(MEMORY[0x1E4F19F08]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4EE759C()
{
  uint64_t v0 = (void *)qword_1EBBCDE38;
  qword_1EBBCDE38 = (uint64_t)&unk_1F20ABF10;
}

uint64_t sub_1C4EE7A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        int v16 = v10 & 7;
        if (!v15 && v16 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              id v18 = objc_alloc_init(MEMORY[0x1E4F19F20]);
              objc_storeStrong((id *)(a1 + 48), v18);
              if PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom())
              {
                PBReaderRecallMark();
                goto LABEL_54;
              }

              return 0;
            case 2u:
              char v19 = 0;
              unsigned int v20 = 0;
              uint64_t v21 = 0;
              *(unsigned char *)(a1 + 68) |= 2u;
              while (2)
              {
                uint64_t v22 = *v3;
                unint64_t v23 = *(void *)(a2 + v22);
                if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
                  *(void *)(a2 + v22) = v23 + 1;
                  v21 |= (unint64_t)(v24 & 0x7F) << v19;
                  if (v24 < 0)
                  {
                    v19 += 7;
                    BOOL v14 = v20++ >= 9;
                    if (v14)
                    {
                      uint64_t v21 = 0;
                      goto LABEL_58;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v21 = 0;
              }
LABEL_58:
              *(unsigned char *)(a1 + 64) = v21 != 0;
              goto LABEL_73;
            case 3u:
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              *(unsigned char *)(a1 + 68) |= 1u;
              while (2)
              {
                uint64_t v28 = *v3;
                unint64_t v29 = *(void *)(a2 + v28);
                if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
                  *(void *)(a2 + v2_Block_object_dispose(&STACK[0x3F0], 8) = v29 + 1;
                  v27 |= (unint64_t)(v30 & 0x7F) << v25;
                  if (v30 < 0)
                  {
                    v25 += 7;
                    BOOL v14 = v26++ >= 9;
                    if (v14)
                    {
                      uint64_t v27 = 0;
                      goto LABEL_62;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v27 = 0;
              }
LABEL_62:
              *(void *)(a1 + 32) = v27;
              goto LABEL_73;
            case 4u:
              uint64_t v31 = PBReaderReadString();
              __int16 v32 = *(void **)(a1 + 40);
              *(void *)(a1 + 40) = v31;

              goto LABEL_73;
            case 5u:
              if (v16 == 2)
              {
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v34 = 0;
                  unsigned int v35 = 0;
                  uint64_t v36 = 0;
                  while (1)
                  {
                    uint64_t v37 = *v3;
                    unint64_t v38 = *(void *)(a2 + v37);
                    if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
                    *(void *)(a2 + v37) = v38 + 1;
                    v36 |= (unint64_t)(v39 & 0x7F) << v34;
                    if (v39 < 0)
                    {
                      v34 += 7;
                      BOOL v14 = v35++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_51;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_51:
                  PBRepeatedInt64Add();
                }
                PBReaderRecallMark();
              }
              else
              {
                char v41 = 0;
                unsigned int v42 = 0;
                uint64_t v43 = 0;
                while (1)
                {
                  uint64_t v44 = *v3;
                  unint64_t v45 = *(void *)(a2 + v44);
                  if (v45 == -1 || v45 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v45);
                  *(void *)(a2 + v44) = v45 + 1;
                  v43 |= (unint64_t)(v46 & 0x7F) << v41;
                  if (v46 < 0)
                  {
                    v41 += 7;
                    BOOL v14 = v42++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_72;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_72:
                PBRepeatedInt64Add();
              }
LABEL_73:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
            case 6u:
              PBReaderReadString();
              id v18 = (id)objc_claimAutoreleasedReturnValue();
              if (v18) {
                objc_msgSend_addPackagePutReceipts_((void *)a1, v40, (uint64_t)v18);
              }
LABEL_54:

              goto LABEL_73;
            default:
              if (PBReaderSkipValueWithTag()) {
                goto LABEL_73;
              }
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4EE8B14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
LABEL_22:
        char v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&STACK[0x3F0], 8) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadData();
    uint64_t v18 = 8;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4EE926C(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPUserPrivacySettings);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (sub_1C5015AC0((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    PBReaderReadString();
    uint64_t v17 = (CKDPUserPrivacySettings *)objc_claimAutoreleasedReturnValue();
    if (v17) {
      objc_msgSend_addApplicationBundle_(a1, v18, (uint64_t)v17);
    }
LABEL_25:

    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4EE9DB8()
{
  qword_1EBBCDE50 = objc_opt_new();
  return MEMORY[0x1F41817F8]();
}

void sub_1C4EEA2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4EEA2EC(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1C8789E70]();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1C4EEA49C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_invalidateCachedAccountInfo(MEMORY[0x1E4F19E20], a2, a3);
  uint64_t v5 = NSString;
  uint64_t v6 = CKTestNotificationPrefix();
  char v8 = objc_msgSend_stringWithFormat_(v5, v7, @"%@%@", v6, *MEMORY[0x1E4F1A558]);

  if (*(unsigned char *)(a1 + 32))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v11 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "Supressing account change notification while warming up", buf, 2u);
    }
    id v12 = (id)*MEMORY[0x1E4F1A560];

    uint64_t v15 = objc_msgSend_UTF8String(v12, v13, v14);
    *(void *)buf = MEMORY[0x1E4F143A8];
    uint64_t v22 = 3221225472;
    unint64_t v23 = sub_1C4EEA874;
    char v24 = &unk_1E64F1B50;
    uint64_t v25 = v15;
    if (qword_1EBBCDE58 != -1) {
      dispatch_once(&qword_1EBBCDE58, buf);
    }
    int v16 = dword_1EBBCDC70;
    char v8 = v12;
  }
  else
  {
    uint64_t v17 = objc_msgSend_UTF8String(v8, v9, v10);
    *(void *)buf = MEMORY[0x1E4F143A8];
    uint64_t v22 = 3221225472;
    unint64_t v23 = sub_1C4EEA884;
    char v24 = &unk_1E64F1B50;
    uint64_t v25 = v17;
    if (qword_1EBBCDE60 != -1) {
      dispatch_once(&qword_1EBBCDE60, buf);
    }
    int v16 = dword_1EBBCDC74;
  }
  notify_set_state(v16, v4);
  unsigned int v20 = (const char *)objc_msgSend_UTF8String(v8, v18, v19);
  notify_post(v20);
}

void sub_1C4EEA6CC(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1C4EEA794;
  v8[3] = &unk_1E64F5588;
  id v9 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v10 = v5;
  id v11 = v6;
  char v12 = a3;
  id v7 = v5;
  CKMuckingWithPersonas(v8);
}

uint64_t sub_1C4EEA794(uint64_t a1)
{
  uint64_t result = CKAdoptPersonaID(*(void **)(a1 + 32));
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return v3();
  }
  return result;
}

uint64_t sub_1C4EEA874(uint64_t a1)
{
  return notify_register_check(*(const char **)(a1 + 32), &dword_1EBBCDC70);
}

uint64_t sub_1C4EEA884(uint64_t a1)
{
  return notify_register_check(*(const char **)(a1 + 32), &dword_1EBBCDC74);
}

void sub_1C4EEA8E8()
{
  uint64_t v0 = (void *)qword_1EBBCDE68;
  qword_1EBBCDE68 = (uint64_t)&unk_1F20ABF38;
}

BOOL sub_1C4EEAA78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPMergeableValueIdentifier);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || !sub_1C4E62940((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadData();
    uint64_t v17 = *(CKDPMergeableValueIdentifier **)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

SecCertificateRef sub_1C4EEB8E8(uint64_t a1, const __CFData *a2)
{
  SecCertificateRef v2 = SecCertificateCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
  return v2;
}

void sub_1C4EEC4AC(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_defaultContext(CKDLogicalDeviceContext, a2, a3);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = objc_msgSend_tokenRegistrationScheduler(v7, v3, v4);
  objc_msgSend_refreshAllClientsNow_(v5, v6, 0);
}

void sub_1C4EEC908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4EEC940(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v5 = objc_msgSend_operations(*(void **)(a1 + 32), v2, v3);
    objc_sync_enter(v5);
    char v8 = objc_msgSend_operations(*(void **)(a1 + 32), v6, v7);
    uint64_t v11 = objc_msgSend_operation(WeakRetained, v9, v10);
    objc_msgSend_removeObject_(v8, v12, (uint64_t)v11);

    objc_sync_exit(v5);
  }
  char v13 = objc_msgSend_error(WeakRetained, v2, v3);

  if (v13)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    int v16 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = v16;
      unsigned int v20 = objc_msgSend_error(WeakRetained, v18, v19);
      int v23 = 138412290;
      char v24 = v20;
      _os_log_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_INFO, "Failed to refresh token with server: %@", (uint8_t *)&v23, 0xCu);
    }
  }
  uint64_t v21 = *(void *)(a1 + 40);
  uint64_t v22 = objc_msgSend_error(WeakRetained, v14, v15);
  (*(void (**)(uint64_t, void *))(v21 + 16))(v21, v22);
}

void sub_1C4EECAF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4EECEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4EECED8(void **a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    id v5 = objc_msgSend_operations(a1[4], v2, v3);
    objc_sync_enter(v5);
    char v8 = objc_msgSend_operations(a1[4], v6, v7);
    uint64_t v11 = objc_msgSend_operation(WeakRetained, v9, v10);
    objc_msgSend_removeObject_(v8, v12, (uint64_t)v11);

    objc_sync_exit(v5);
  }
  char v13 = objc_msgSend_queue(a1[4], v2, v3);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = sub_1C4EED014;
  v16[3] = &unk_1E64F0790;
  id v14 = a1[5];
  id v17 = WeakRetained;
  id v18 = v14;
  id v15 = WeakRetained;
  dispatch_async(v13, v16);
}

void sub_1C4EED000(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4EED014(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  objc_msgSend_error(*(void **)(a1 + 32), a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

void sub_1C4EED440(uint64_t a1)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1C4EED4EC;
  v5[3] = &unk_1E64F5600;
  SecCertificateRef v2 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v2;
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  id v7 = v3;
  uint64_t v8 = v4;
  char v9 = *(unsigned char *)(a1 + 64);
  CKMuckingWithPersonas(v5);
}

void sub_1C4EED4EC(uint64_t a1)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  SecCertificateRef v2 = (void *)MEMORY[0x1E4F1A550];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v3 = (os_log_t *)MEMORY[0x1E4F1A500];
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v67 = *(void **)(a1 + 32);
    id v68 = v4;
    uint64_t v71 = objc_msgSend_appContainerTuple(v67, v69, v70);
    __int16 v74 = objc_msgSend_accountID(*(void **)(a1 + 32), v72, v73);
    *(_DWORD *)buf = 138412546;
    id v83 = v71;
    __int16 v84 = 2112;
    uint64_t v85 = v74;
    _os_log_debug_impl(&dword_1C4CFF000, v68, OS_LOG_TYPE_DEBUG, "Checking push token for container tuple %@, accountID %@", buf, 0x16u);
  }
  id v7 = objc_msgSend_appContainerTuple(*(void **)(a1 + 32), v5, v6);
  uint64_t v10 = objc_msgSend_containerID(v7, v8, v9);
  int isTestContainer = objc_msgSend_isTestContainer(v10, v11, v12);

  if (isTestContainer
    || (objc_msgSend_appContainerTuple(*(void **)(a1 + 32), v14, v15),
        int v16 = objc_claimAutoreleasedReturnValue(),
        objc_msgSend_personaID(v16, v17, v18),
        uint64_t v19 = objc_claimAutoreleasedReturnValue(),
        BOOL v20 = CKAdoptPersonaID(v19),
        v19,
        v16,
        !v20))
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
  else
  {
    int v23 = objc_msgSend_metadataCache(*(void **)(a1 + 48), v21, v22);
    unsigned int v26 = objc_msgSend_applicationID(v7, v24, v25);
    uint64_t v28 = objc_msgSend_applicationMetadataForApplicationID_(v23, v27, (uint64_t)v26);

    uint64_t v29 = *(void *)(a1 + 32);
    __int16 v32 = objc_msgSend_deviceContext(*(void **)(a1 + 56), v30, v31);
    unsigned int v35 = objc_msgSend_sharedInternalUseContainers(CKDContainer, v33, v34);
    uint64_t v37 = objc_msgSend_containerWithAppContainerAccountTuple_deviceContext_sharedContainerTable_(CKDContainer, v36, v29, v32, v35);

    uint64_t v40 = objc_msgSend_adopterProcessType(v28, v38, v39);
    uint64_t v43 = objc_msgSend_adopterProcessType(v37, v41, v42);
    if (v40 == 4 || v43 != 4)
    {
      if (*(unsigned char *)(a1 + 64))
      {
        if (*v2 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        id v49 = *v3;
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          id v83 = v7;
          _os_log_debug_impl(&dword_1C4CFF000, v49, OS_LOG_TYPE_DEBUG, "Tossing push token for container tuple %@", buf, 0xCu);
        }
        __int16 v52 = objc_msgSend_metadataCache(*(void **)(a1 + 48), v50, v51);
        objc_msgSend_setPushToken_forAppContainerAccountTuple_(v52, v53, 0, *(void *)(a1 + 32));
      }
      __int16 v54 = objc_msgSend_metadataCache(*(void **)(a1 + 48), v44, v45);
      __int16 v56 = objc_msgSend_appContainerAccountMetadataForAppContainerAccountTuple_(v54, v55, *(void *)(a1 + 32));

      if (objc_msgSend_tokenRegistered(v56, v57, v58) == 1)
      {
        __int16 v61 = objc_msgSend_apsEnvironmentString(v37, v59, v60);
        uint64_t v63 = objc_msgSend_sharedConnectionForAPSEnvironmentString_(CKDPushConnection, v62, (uint64_t)v61);

        if (*v2 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        os_log_t v64 = *v3;
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
        {
          id v75 = v64;
          uint64_t v78 = objc_msgSend_applicationBundleIdentifierForPush(v37, v76, v77);
          *(_DWORD *)buf = 138412546;
          id v83 = v7;
          __int16 v84 = 2114;
          uint64_t v85 = v78;
          _os_log_debug_impl(&dword_1C4CFF000, v75, OS_LOG_TYPE_DEBUG, "Requesting token for container tuple %@, push bundle identifier %{public}@", buf, 0x16u);
        }
        v79[0] = MEMORY[0x1E4F143A8];
        v79[1] = 3221225472;
        v79[2] = sub_1C4EEDAEC;
        v79[3] = &unk_1E64F55D8;
        v79[4] = *(void *)(a1 + 56);
        id v80 = v37;
        id v81 = *(id *)(a1 + 40);
        objc_msgSend_getToken_(v63, v65, (uint64_t)v79);
      }
      else
      {
        if (*v2 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v66 = *v3;
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          id v83 = v7;
          _os_log_debug_impl(&dword_1C4CFF000, v66, OS_LOG_TYPE_DEBUG, "NOT requesting token for container tuple %@", buf, 0xCu);
        }
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
      }
    }
    else
    {
      if (*v2 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      char v46 = *v3;
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v83 = v37;
        _os_log_impl(&dword_1C4CFF000, v46, OS_LOG_TYPE_INFO, "Unregistering push token for %@ because it is no longer installed", buf, 0xCu);
      }
      objc_msgSend_unregisterTokenForAppContainerAccountTuple_(*(void **)(a1 + 56), v47, *(void *)(a1 + 32));
      if (*v2 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v48 = *v3;
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        id v83 = v7;
        _os_log_debug_impl(&dword_1C4CFF000, v48, OS_LOG_TYPE_DEBUG, "NOT registering token for container tuple %@", buf, 0xCu);
      }
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    }
  }
}

void sub_1C4EEDAEC(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1C4EEDB8C;
  v6[3] = &unk_1E64F05C8;
  id v7 = *(id *)(a1 + 48);
  objc_msgSend__handlePushToken_forContainer_completionBlock_(v3, v5, a2, v4, v6);
}

void sub_1C4EEDB8C(uint64_t a1)
{
}

uint64_t sub_1C4EEDB94(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_metadataCache(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_dateOfLastTokenUpdate(v4, v5, v6);
  char v13 = (const char *)objc_claimAutoreleasedReturnValue();

  uint64_t v8 = v13;
  if (!v13 || (uint64_t v9 = objc_msgSend_compare_(*(void **)(a1 + 40), v13, (uint64_t)v13), v8 = v13, v9 == 1))
  {
    uint64_t v10 = objc_msgSend_metadataCache(*(void **)(a1 + 32), v8, v7);
    objc_msgSend_setDateOfLastTokenUpdate_(v10, v11, *(void *)(a1 + 40));
  }
  return MEMORY[0x1F41817F8]();
}

void sub_1C4EEDF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state)
{
}

void sub_1C4EEDF8C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_callbackTimers(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = objc_msgSend_objectForKey_(v4, v5, *(void *)(a1 + 40));

  if (v6)
  {
    dispatch_source_cancel(v6);
    uint64_t v11 = objc_msgSend_callbackTimers(*(void **)(a1 + 32), v9, v10);
    objc_msgSend_removeObjectForKey_(v11, v12, *(void *)(a1 + 40));
  }
  char v13 = objc_msgSend_unitTestingPushTokens(*(void **)(a1 + 32), v7, v8);

  int v16 = *(void **)(a1 + 32);
  if (v13)
  {
    id v17 = objc_msgSend_unitTestingPushTokens(v16, v14, v15);
    uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(v17, v18, *(void *)(a1 + 48));
  }
  else
  {
    id v17 = objc_msgSend_deviceContext(v16, v14, v15);
    uint64_t v22 = objc_msgSend_metadataCache(v17, v20, v21);
    uint64_t v19 = objc_msgSend_pushTokenForAppContainerAccountTuple_filterOldTokens_(v22, v23, *(void *)(a1 + 40), 1);
  }
  if (v19
    && objc_msgSend_isEqual_(v19, v24, *(void *)(a1 + 56))
    && objc_msgSend_tokenRegistered(*(void **)(a1 + 64), v24, v25) == 1
    || (objc_msgSend_unitTestingPushTokens(*(void **)(a1 + 32), v24, v25),
        unsigned int v26 = objc_claimAutoreleasedReturnValue(),
        v26,
        !v6)
    && v26)
  {
    uint64_t v27 = objc_msgSend_callbackBlocks(*(void **)(a1 + 32), v24, v25);
    uint64_t v29 = objc_msgSend_objectForKey_(v27, v28, *(void *)(a1 + 40));

    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    id v30 = v29;
    uint64_t v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v54, v58, 16);
    if (v32)
    {
      uint64_t v33 = v32;
      uint64_t v34 = *(void *)v55;
      do
      {
        uint64_t v35 = 0;
        do
        {
          if (*(void *)v55 != v34) {
            objc_enumerationMutation(v30);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v54 + 1) + 8 * v35++) + 16))();
        }
        while (v33 != v35);
        uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v36, (uint64_t)&v54, v58, 16);
      }
      while (v33);
    }

    uint64_t v39 = objc_msgSend_callbackBlocks(*(void **)(a1 + 32), v37, v38);
    objc_msgSend_removeObjectForKey_(v39, v40, *(void *)(a1 + 40));

    uint64_t v41 = *(void *)(a1 + 80);
    if (v41) {
      (*(void (**)(void))(v41 + 16))();
    }
  }
  else
  {
    uint64_t v42 = *(void **)(a1 + 32);
    uint64_t v43 = objc_msgSend_apsToken(*(void **)(a1 + 56), v24, v25);
    uint64_t v44 = *(void *)(a1 + 72);
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 3221225472;
    v48[2] = sub_1C4EEE2B0;
    v48[3] = &unk_1E64F5628;
    id v45 = *(id *)(a1 + 48);
    uint64_t v46 = *(void *)(a1 + 32);
    id v49 = v45;
    uint64_t v50 = v46;
    id v51 = *(id *)(a1 + 56);
    id v52 = *(id *)(a1 + 40);
    id v53 = *(id *)(a1 + 80);
    objc_msgSend__refreshApsToken_container_completionBlock_(v42, v47, (uint64_t)v43, v44, v48);

    id v30 = v49;
  }
}

void sub_1C4EEE2B0(uint64_t a1, void *a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A548];
  if (v3)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v4);
    }
    id v5 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v46 = v8;
      __int16 v47 = 2112;
      id v48 = v3;
      uint64_t v9 = "Warn: Failed to register push token for %@: %@";
      uint64_t v10 = v5;
      uint32_t v11 = 22;
LABEL_10:
      _os_log_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_INFO, v9, buf, v11);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v4);
    }
    uint64_t v12 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v46 = v13;
      uint64_t v9 = "Successfully registered push token for %@";
      uint64_t v10 = v12;
      uint32_t v11 = 12;
      goto LABEL_10;
    }
  }
  id v14 = objc_msgSend_unitTestingPushTokens(*(void **)(a1 + 40), v6, v7);

  if (v14)
  {
    if (!v3)
    {
      id v17 = objc_msgSend_queue(*(void **)(a1 + 40), v15, v16);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1C4EEE60C;
      block[3] = &unk_1E64F0120;
      int8x16_t v38 = *(int8x16_t *)(a1 + 32);
      id v18 = (id)v38.i64[0];
      int8x16_t v43 = vextq_s8(v38, v38, 8uLL);
      id v44 = *(id *)(a1 + 48);
      dispatch_async(v17, block);
    }
  }
  else
  {
    uint64_t v19 = objc_msgSend_deviceContext(*(void **)(a1 + 40), v15, v16);
    uint64_t v22 = objc_msgSend_metadataCache(v19, v20, v21);
    char v24 = objc_msgSend_appContainerAccountMetadataForAppContainerAccountTuple_(v22, v23, *(void *)(a1 + 56));

    uint64_t v25 = CKTernaryFromBOOL();
    objc_msgSend_setTokenRegistered_(v24, v26, v25);
    uint64_t v29 = objc_msgSend_metadataCache(v19, v27, v28);
    objc_msgSend_setAppContainerAccountMetadata_forAppContainerAccountTuple_(v29, v30, (uint64_t)v24, *(void *)(a1 + 56));

    uint64_t v33 = objc_msgSend_metadataCache(v19, v31, v32);
    objc_msgSend_setPushToken_forAppContainerAccountTuple_(v33, v34, *(void *)(a1 + 48), *(void *)(a1 + 56));
  }
  uint64_t v35 = objc_msgSend_queue(*(void **)(a1 + 40), v15, v16, *(_OWORD *)&v38);
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 3221225472;
  void v39[2] = sub_1C4EEE668;
  v39[3] = &unk_1E64F0120;
  void v39[4] = *(void *)(a1 + 40);
  id v40 = *(id *)(a1 + 56);
  id v36 = v3;
  id v41 = v36;
  dispatch_async(v35, v39);

  uint64_t v37 = *(void *)(a1 + 64);
  if (v37) {
    (*(void (**)(void))(v37 + 16))();
  }
}

void sub_1C4EEE60C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 48);
  objc_msgSend_unitTestingPushTokens(*(void **)(a1 + 32), a2, a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v5, v4, *(void *)(a1 + 40));
}

void sub_1C4EEE668(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_callbackBlocks(*(void **)(a1 + 32), a2, a3);
  id v6 = objc_msgSend_objectForKey_(v4, v5, *(void *)(a1 + 40));
  uint64_t v9 = objc_msgSend_copy(v6, v7, v8);

  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v10 = v9;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v21, v25, 16);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v22;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v22 != v14) {
          objc_enumerationMutation(v10);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v21 + 1) + 8 * v15) + 16))(*(void *)(*((void *)&v21 + 1) + 8 * v15));
        ++v15;
      }
      while (v13 != v15);
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v16, (uint64_t)&v21, v25, 16);
    }
    while (v13);
  }

  uint64_t v19 = objc_msgSend_callbackBlocks(*(void **)(a1 + 32), v17, v18, (void)v21);
  objc_msgSend_removeObjectForKey_(v19, v20, *(void *)(a1 + 40));
}

void sub_1C4EEEA5C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_deviceContext(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_metadataCache(v4, v5, v6);
  uint64_t v9 = objc_msgSend_pushTokenForAppContainerAccountTuple_filterOldTokens_(v7, v8, *(void *)(a1 + 40), 0);

  if (v9)
  {
    uint64_t v12 = objc_msgSend_metadataCache(v4, v10, v11);
    uint64_t v14 = objc_msgSend_appContainerAccountMetadataForAppContainerAccountTuple_(v12, v13, *(void *)(a1 + 40));

    if (objc_msgSend_tokenRegistered(v14, v15, v16) == 1)
    {
      uint64_t v19 = *(void **)(a1 + 32);
      BOOL v20 = objc_msgSend_apsToken(v9, v17, v18);
      uint64_t v21 = *(void *)(a1 + 40);
      v27[0] = MEMORY[0x1E4F143A8];
      v27[1] = 3221225472;
      v27[2] = sub_1C4EEEC94;
      v27[3] = &unk_1E64F28A0;
      id v28 = v14;
      id v29 = v4;
      id v30 = *(id *)(a1 + 40);
      objc_msgSend__removeApsToken_appContainerAccountTuple_completionBlock_(v19, v22, (uint64_t)v20, v21, v27);
    }
    long long v23 = objc_msgSend_metadataCache(v4, v17, v18);
    objc_msgSend_setPushToken_forAppContainerAccountTuple_(v23, v24, 0, *(void *)(a1 + 40));
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v25 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v26 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v32 = v26;
      _os_log_debug_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_DEBUG, "No registered token found for appContainerAccountTuple %@. Skipping token unregister.", buf, 0xCu);
    }
  }
}

void sub_1C4EEEC94(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    objc_msgSend_setTokenRegistered_(*(void **)(a1 + 32), (const char *)a2, 0);
    objc_msgSend_metadataCache(*(void **)(a1 + 40), v4, v5);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAppContainerAccountMetadata_forAppContainerAccountTuple_(v7, v6, *(void *)(a1 + 32), *(void *)(a1 + 48));
  }
}

void sub_1C4EEEF84(uint64_t a1)
{
  dispatch_group_t v2 = dispatch_group_create();
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x3032000000;
  v13[3] = sub_1C4EEF120;
  void v13[4] = sub_1C4EEF130;
  id v14 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1C4EEF138;
  v9[3] = &unk_1E64F2158;
  id v3 = *(void **)(a1 + 40);
  v9[4] = *(void *)(a1 + 32);
  id v10 = v3;
  uint64_t v4 = v2;
  uint64_t v11 = v4;
  uint64_t v12 = v13;
  CKMuckingWithPersonas(v9);
  uint64_t v5 = CKGetGlobalQueue();
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1C4EEF5B4;
  v6[3] = &unk_1E64F07E0;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = v13;
  dispatch_group_notify(v4, v5, v6);

  _Block_object_dispose(v13, 8);
}

void sub_1C4EEF108(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4EEF120(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4EEF130(uint64_t a1)
{
}

void sub_1C4EEF138(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_deviceContext(*(void **)(a1 + 32), a2, a3);
  id v7 = objc_msgSend_metadataCache(v4, v5, v6);
  uint64_t v52 = a1;
  uint64_t v9 = objc_msgSend_knownAppContainerAccountTuplesForAccountID_(v7, v8, *(void *)(a1 + 40));

  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  id v10 = v9;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v59, v65, 16);
  if (v12)
  {
    uint64_t v16 = v12;
    uint64_t v17 = *(void *)v60;
    uint64_t v49 = v54;
    uint64_t v18 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
    *(void *)&long long v15 = 138412290;
    long long v48 = v15;
    id v50 = v10;
    do
    {
      uint64_t v19 = 0;
      do
      {
        if (*(void *)v60 != v17) {
          objc_enumerationMutation(v10);
        }
        BOOL v20 = *(void **)(*((void *)&v59 + 1) + 8 * v19);
        uint64_t v21 = objc_msgSend_appContainerTuple(v20, v13, v14, v48, v49);
        long long v24 = objc_msgSend_personaID(v21, v22, v23);
        BOOL v25 = CKAdoptPersonaID(v24);

        if (v25)
        {
          uint64_t v26 = objc_msgSend_metadataCache(v4, v13, v14);
          id v28 = objc_msgSend_pushTokenForAppContainerAccountTuple_filterOldTokens_(v26, v27, (uint64_t)v20, 0);

          if (v28)
          {
            uint64_t v31 = objc_msgSend_metadataCache(v4, v29, v30);
            uint64_t v33 = objc_msgSend_appContainerAccountMetadataForAppContainerAccountTuple_(v31, v32, (uint64_t)v20);

            id v36 = objc_msgSend_metadataCache(v4, v34, v35);
            objc_msgSend_setPushToken_forAppContainerAccountTuple_(v36, v37, 0, v20);

            if (objc_msgSend_tokenRegistered(v33, v38, v39) == 1)
            {
              dispatch_group_enter(*(dispatch_group_t *)(v52 + 48));
              if (*v18 != -1) {
                dispatch_once(v18, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
              }
              id v40 = *MEMORY[0x1E4F1A500];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = v48;
                os_log_t v64 = v20;
                _os_log_debug_impl(&dword_1C4CFF000, v40, OS_LOG_TYPE_DEBUG, "Unregistering token for %@", buf, 0xCu);
              }
              int8x16_t v43 = *(void **)(v52 + 32);
              id v44 = objc_msgSend_apsToken(v28, v41, v42);
              v53[0] = MEMORY[0x1E4F143A8];
              v53[1] = 3221225472;
              v54[0] = sub_1C4EEF514;
              v54[1] = &unk_1E64F5678;
              id v55 = v33;
              id v56 = v4;
              long long v57 = v20;
              long long v51 = *(_OWORD *)(v52 + 48);
              id v45 = (id)v51;
              long long v58 = v51;
              objc_msgSend__removeApsToken_appContainerAccountTuple_completionBlock_(v43, v46, (uint64_t)v44, v20, v53);

              id v10 = v50;
              uint64_t v18 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
            }
          }
          else
          {
            if (*v18 != -1) {
              dispatch_once(v18, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            __int16 v47 = *MEMORY[0x1E4F1A500];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = v48;
              os_log_t v64 = v20;
              _os_log_debug_impl(&dword_1C4CFF000, v47, OS_LOG_TYPE_DEBUG, "No registered token found for appContainerAccountTuple %@. Skipping token unregister.", buf, 0xCu);
            }
          }
        }
        ++v19;
      }
      while (v16 != v19);
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v59, v65, 16);
    }
    while (v16);
  }
}

void sub_1C4EEF514(uint64_t a1, void *a2)
{
  id v12 = a2;
  if (!v12)
  {
    objc_msgSend_setTokenRegistered_(*(void **)(a1 + 32), v4, 0);
    id v7 = objc_msgSend_metadataCache(*(void **)(a1 + 40), v5, v6);
    objc_msgSend_setAppContainerAccountMetadata_forAppContainerAccountTuple_(v7, v8, *(void *)(a1 + 32), *(void *)(a1 + 48));
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v11 = *(void *)(v9 + 40);
  id v10 = (id *)(v9 + 40);
  if (!v11) {
    objc_storeStrong(v10, a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_1C4EEF5B4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
  return result;
}

void sub_1C4EEF754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1C4EEFAEC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_callbackBlocks(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = objc_msgSend_objectForKey_(v4, v5, *(void *)(a1 + 40));

  if (!v6)
  {
    id v12 = objc_msgSend_unitTestingPushTokens(*(void **)(a1 + 32), v7, v8);

    long long v15 = *(void **)(a1 + 32);
    if (v12)
    {
      uint64_t v16 = objc_msgSend_unitTestingPushTokens(v15, v13, v14);
      uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(v16, v17, *(void *)(a1 + 48));
      BOOL v19 = v18 == 0;

      BOOL v20 = NSString;
      uint64_t v23 = objc_msgSend_accountID(*(void **)(a1 + 40), v21, v22);
      objc_msgSend_stringWithFormat_(v20, v24, @"For unit testing account %@, ", v23);
      BOOL v25 = (__CFString *)objc_claimAutoreleasedReturnValue();

      id v28 = 0;
      if (!v19)
      {
LABEL_6:
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        id v29 = (void *)*MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
        {
          uint64_t v75 = *(void *)(a1 + 48);
          __int16 v74 = *(void **)(a1 + 56);
          uint64_t v76 = v29;
          uint64_t v79 = objc_msgSend_apsEnvironmentString(v74, v77, v78);
          *(_DWORD *)handler = 138543874;
          *(void *)&handler[4] = v25;
          *(_WORD *)&handler[12] = 2112;
          *(void *)&handler[14] = v75;
          *(_WORD *)&handler[22] = 2112;
          uint64_t v94 = v79;
          _os_log_debug_impl(&dword_1C4CFF000, v76, OS_LOG_TYPE_DEBUG, "%{public}@Not refreshing token for %@ in environment %@, we're already registered", handler, 0x20u);
        }
        (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
        uint64_t v6 = 0;
LABEL_21:

        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v30 = objc_msgSend_deviceContext(v15, v13, v14);
      uint64_t v33 = objc_msgSend_metadataCache(v30, v31, v32);
      id v28 = objc_msgSend_appContainerAccountMetadataForAppContainerAccountTuple_(v33, v34, *(void *)(a1 + 40));

      BOOL v25 = &stru_1F2044F30;
      if (objc_msgSend_tokenRegistered(v28, v35, v36) == 1) {
        goto LABEL_6;
      }
    }
    uint64_t v37 = *(void *)(a1 + 40);
    uint64_t v38 = *(void *)(a1 + 64);
    uint64_t v39 = objc_msgSend_sharedInternalUseContainers(CKDContainer, v26, v27);
    id v41 = objc_msgSend_containerWithAppContainerAccountTuple_deviceContext_sharedContainerTable_(CKDContainer, v40, v37, v38, v39);

    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v42 = (id *)MEMORY[0x1E4F1A500];
    int8x16_t v43 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      id v80 = v43;
      id v83 = objc_msgSend_apsEnvironmentString(v41, v81, v82);
      *(_DWORD *)handler = 138543874;
      *(void *)&handler[4] = v25;
      *(_WORD *)&handler[12] = 2112;
      *(void *)&handler[14] = v41;
      *(_WORD *)&handler[22] = 2112;
      uint64_t v94 = v83;
      _os_log_debug_impl(&dword_1C4CFF000, v80, OS_LOG_TYPE_DEBUG, "%{public}@Refreshing token for %@ in environment %@", handler, 0x20u);
    }
    uint64_t v46 = (void *)MEMORY[0x1E4F1CA48];
    __int16 v47 = objc_msgSend_copy(*(void **)(a1 + 72), v44, v45);
    uint64_t v6 = objc_msgSend_arrayWithObject_(v46, v48, (uint64_t)v47);

    long long v51 = objc_msgSend_callbackBlocks(*(void **)(a1 + 32), v49, v50);
    objc_msgSend_setObject_forKey_(v51, v52, (uint64_t)v6, *(void *)(a1 + 40));

    id v55 = objc_msgSend_queue(*(void **)(a1 + 32), v53, v54);
    dispatch_source_t v56 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v55);

    objc_initWeak(&location, *(id *)(a1 + 32));
    v88[0] = MEMORY[0x1E4F143A8];
    v88[1] = 3221225472;
    v88[2] = sub_1C4EF01A8;
    v88[3] = &unk_1E64F0238;
    objc_copyWeak(&v91, &location);
    id v89 = *(id *)(a1 + 40);
    long long v57 = v56;
    uint64_t v90 = v57;
    long long v58 = v88;
    *(void *)handler = MEMORY[0x1E4F143A8];
    *(void *)&handler[8] = 3221225472;
    *(void *)&handler[16] = sub_1C4EF043C;
    uint64_t v94 = &unk_1E64F0A80;
    id v95 = v58;
    dispatch_source_set_event_handler(v57, handler);

    dispatch_time_t v59 = dispatch_time(0, 30000000000);
    dispatch_source_set_timer(v57, v59, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    long long v62 = objc_msgSend_callbackTimers(*(void **)(a1 + 32), v60, v61);
    objc_msgSend_setObject_forKey_(v62, v63, (uint64_t)v57, *(void *)(a1 + 40));

    dispatch_resume(v57);
    uint64_t v66 = objc_msgSend_apsEnvironmentString(v41, v64, v65);
    id v68 = objc_msgSend_sharedConnectionForAPSEnvironmentString_(CKDPushConnection, v67, (uint64_t)v66);

    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v69 = *v42;
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v85 = *(void *)(a1 + 48);
      __int16 v84 = objc_msgSend_applicationBundleIdentifierForPush(v41, v70, v71);
      *(_DWORD *)handler = 138412546;
      *(void *)&handler[4] = v85;
      *(_WORD *)&handler[12] = 2114;
      *(void *)&handler[14] = v84;
      _os_log_debug_impl(&dword_1C4CFF000, v69, OS_LOG_TYPE_DEBUG, "Requesting token for container tuple %@, push bundle identifier %{public}@", handler, 0x16u);
    }
    v86[0] = MEMORY[0x1E4F143A8];
    v86[1] = 3221225472;
    v86[2] = sub_1C4EF0364;
    v86[3] = &unk_1E64F56A0;
    v86[4] = *(void *)(a1 + 32);
    id v72 = v41;
    id v87 = v72;
    objc_msgSend_getToken_(v68, v73, (uint64_t)v86);

    objc_destroyWeak(&v91);
    objc_destroyWeak(&location);

    goto LABEL_21;
  }
  uint64_t v9 = *(void **)(a1 + 72);
  if (v9)
  {
    id v10 = objc_msgSend_copy(v9, v7, v8);
    objc_msgSend_addObject_(v6, v11, (uint64_t)v10);
  }
LABEL_22:
}

void sub_1C4EF017C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4EF01A8(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = objc_msgSend_callbackBlocks(WeakRetained, v2, v3);
  uint64_t v6 = objc_msgSend_objectForKey_(v4, v5, *(void *)(a1 + 32));

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v7 = v6;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v26, v30, 16);
  if (v9)
  {
    uint64_t v11 = v9;
    uint64_t v12 = *(void *)v27;
    uint64_t v13 = *MEMORY[0x1E4F19DD8];
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v27 != v12) {
          objc_enumerationMutation(v7);
        }
        uint64_t v15 = *(void *)(*((void *)&v26 + 1) + 8 * v14);
        uint64_t v16 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v10, v13, 1015, @"Failed to get push token");
        (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);

        ++v14;
      }
      while (v11 != v14);
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v26, v30, 16);
    }
    while (v11);
  }

  BOOL v19 = objc_msgSend_callbackBlocks(WeakRetained, v17, v18);
  objc_msgSend_removeObjectForKey_(v19, v20, *(void *)(a1 + 32));

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
  uint64_t v23 = objc_msgSend_callbackTimers(WeakRetained, v21, v22);
  objc_msgSend_removeObjectForKey_(v23, v24, *(void *)(a1 + 32));
}

uint64_t sub_1C4EF0364(uint64_t a1, const char *a2)
{
  return objc_msgSend__handlePushToken_forContainer_completionBlock_(*(void **)(a1 + 32), a2, (uint64_t)a2, *(void *)(a1 + 40), 0);
}

void sub_1C4EF043C(uint64_t a1)
{
  dispatch_group_t v2 = (void *)MEMORY[0x1C8789E70]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1C4EF05AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t CKDPMergeableValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(MEMORY[0x1E4F19F08]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4EF2EA8()
{
  uint64_t v0 = [CKDDeviceCapabilityManager alloc];
  qword_1EBBCFF28 = objc_msgSend_initInternal(v0, v1, v2);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4EF319C(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1C8789E70]();
  uint64_t v5 = objc_msgSend_capabilitiesAndUsagesCachePerContainer(*(void **)(a1 + 32), v3, v4);
  id v7 = objc_msgSend_objectForKeyedSubscript_(v5, v6, *(void *)(a1 + 40));

  if (v7)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    char v8 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      int v14 = 138412290;
      uint64_t v15 = v13;
      _os_log_debug_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_DEBUG, "Dropping device capability and usage cache connection for container with ID: %@", (uint8_t *)&v14, 0xCu);
    }
    uint64_t v11 = objc_msgSend_capabilitiesAndUsagesCachePerContainer(*(void **)(a1 + 32), v9, v10);
    objc_msgSend_removeObjectForKey_(v11, v12, *(void *)(a1 + 40));
  }
}

void sub_1C4EF41F4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1C4EF4210(uint64_t a1)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (id *)(a1 + 80);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained)
  {
    uint64_t v6 = objc_msgSend_queue(*(void **)(a1 + 32), v3, v4);
    dispatch_assert_queue_V2(v6);

    objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v7, v8);
    double v10 = v9;
    objc_msgSend_lastTrackedFailureTime(*(void **)(a1 + 32), v11, v12);
    double v14 = v13;
    objc_msgSend_failureBackoffDelay(*(void **)(a1 + 32), v15, v16);
    if (v14 + v19 <= v10 || *(unsigned char *)(a1 + 88))
    {
      BOOL v20 = objc_msgSend_updateOperationsPerContainer(*(void **)(a1 + 32), v17, v18);
      uint64_t v22 = objc_msgSend_objectForKey_(v20, v21, *(void *)(a1 + 40));

      if (v22)
      {
LABEL_59:

        goto LABEL_60;
      }
      long long v24 = objc_msgSend__lastSentCapabilityAndUsageForContainer_(*(void **)(a1 + 32), v23, *(void *)(a1 + 48));
      long long v27 = v24;
      if (v24)
      {
        CFTypeRef v100 = objc_msgSend_capabilitySet(v24, v25, v26);
        if (v100)
        {
          uint64_t v30 = *(void **)(a1 + 32);
          uint64_t v31 = objc_msgSend_capabilitySetSavedDate(v27, v28, v29);
          LOBYTE(v30) = objc_msgSend_isObsoleteCapabilities_operation_(v30, v32, (uint64_t)v31, *(void *)(a1 + 56));

          if (v30)
          {
            int v33 = 1;
            int v34 = 1;
          }
          else
          {
            uint64_t v35 = *(void *)(a1 + 64);
            int v34 = 0;
            int v36 = objc_msgSend_isCapabilitySet_equalTo_(MEMORY[0x1E4F19F58], v28, (uint64_t)v100, v35) ^ 1;
            if (v35) {
              int v33 = v36;
            }
            else {
              int v33 = 0;
            }
          }
        }
        else
        {
          int v34 = 0;
          int v33 = 1;
        }
        uint64_t v37 = *(void **)(a1 + 32);
        uint64_t v38 = objc_msgSend_usageSavedDate(v27, v28, v29);
        LODWORD(v37) = objc_msgSend_isObsoleteUsage_operation_(v37, v39, (uint64_t)v38, *(void *)(a1 + 56));

        if ((v33 | v37) != 1)
        {
          int v33 = 0;
          uint64_t v42 = 0;
          uint64_t v101 = 0;
          goto LABEL_17;
        }
      }
      else
      {
        int v34 = 0;
        CFTypeRef v100 = 0;
        int v33 = 1;
      }
      uint64_t v101 = objc_msgSend__prepareZoneUsageSendForContainer_maxCount_triggerOperation_(*(void **)(a1 + 32), v25, *(void *)(a1 + 48), 1024, *(void *)(a1 + 56));
      uint64_t v42 = objc_msgSend__prepareShareUsageSendForContainer_maxCount_triggerOperation_(*(void **)(a1 + 32), v41, *(void *)(a1 + 48), 1024, *(void *)(a1 + 56));
LABEL_17:
      uint64_t v43 = objc_msgSend_count(v101, v25, v40);
      uint64_t v46 = objc_msgSend_count(v42, v44, v45);
      uint64_t v47 = v46;
      if ((v33 & 1) == 0 && !v43 && !v46)
      {
LABEL_58:

        goto LABEL_59;
      }
      id v98 = v42;
      if (!v33)
      {
        uint64_t v99 = 0;
LABEL_41:
        if (v43 | v47)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          long long v60 = (void *)*MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
          {
            uint64_t v61 = v60;
            uint64_t v64 = objc_msgSend_count(v101, v62, v63);
            uint64_t v67 = objc_msgSend_count(v98, v65, v66);
            id v68 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 72);
            *(_DWORD *)buf = 134218498;
            *(void *)&uint8_t buf[4] = v64;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v67;
            *(_WORD *)&buf[22] = 2114;
            uint64_t v125 = v68;
            _os_log_impl(&dword_1C4CFF000, v61, OS_LOG_TYPE_INFO, "Sending %zu zone usage and %zu share usage for container ID %{public}@", buf, 0x20u);
          }
        }
        id v69 = [CKUpdateDeviceCapabilitiesOperationInfo alloc];
        if (v43) {
          uint64_t v71 = v101;
        }
        else {
          uint64_t v71 = 0;
        }
        if (v47) {
          uint64_t SentCapabilities_zoneUsages_shareUsages = objc_msgSend_initWithSupportedCapabilities_lastSentCapabilities_zoneUsages_shareUsages_(v69, v70, (uint64_t)v99, v100, v71, v98);
        }
        else {
          uint64_t SentCapabilities_zoneUsages_shareUsages = objc_msgSend_initWithSupportedCapabilities_lastSentCapabilities_zoneUsages_shareUsages_(v69, v70, (uint64_t)v99, v100, v71, 0);
        }
        uint64_t v96 = (void *)SentCapabilities_zoneUsages_shareUsages;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3221225472;
        aBlock[2] = sub_1C4EF4BFC;
        aBlock[3] = &unk_1E64F5718;
        objc_copyWeak(&v122, v2);
        void aBlock[4] = *(void *)(a1 + 32);
        id v121 = *(id *)(a1 + 48);
        char v123 = *(unsigned char *)(a1 + 88);
        id v95 = _Block_copy(aBlock);
        v116[0] = MEMORY[0x1E4F143A8];
        v116[1] = 3221225472;
        v116[2] = sub_1C4EF4D88;
        v116[3] = &unk_1E64F5768;
        objc_copyWeak(&v118, v2);
        v116[4] = *(void *)(a1 + 32);
        id v117 = *(id *)(a1 + 48);
        char v119 = *(unsigned char *)(a1 + 88);
        uint64_t v97 = _Block_copy(v116);
        v112[0] = MEMORY[0x1E4F143A8];
        v112[1] = 3221225472;
        v112[2] = sub_1C4EF4F38;
        v112[3] = &unk_1E64F5790;
        objc_copyWeak(&v114, v2);
        v112[4] = *(void *)(a1 + 32);
        id v113 = *(id *)(a1 + 48);
        char v115 = *(unsigned char *)(a1 + 88);
        uint64_t v73 = _Block_copy(v112);
        v108[0] = MEMORY[0x1E4F143A8];
        v108[1] = 3221225472;
        v108[2] = sub_1C4EF50E8;
        v108[3] = &unk_1E64F57B8;
        objc_copyWeak(&v111, v2);
        v108[4] = *(void *)(a1 + 32);
        id v109 = *(id *)(a1 + 40);
        id v110 = *(id *)(a1 + 72);
        __int16 v74 = _Block_copy(v108);
        *(void *)buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&uint8_t buf[16] = 0x3032000000;
        uint64_t v125 = sub_1C4EF5238;
        uint64_t v126 = sub_1C4EF5248;
        id v127 = 0;
        if (*(unsigned char *)(a1 + 89))
        {
          uint64_t v75 = *(void **)(a1 + 56);
          uint64_t v76 = objc_opt_class();
          v102[0] = MEMORY[0x1E4F143A8];
          v102[1] = 3221225472;
          v102[2] = sub_1C4EF5250;
          v102[3] = &unk_1E64F57E0;
          uint64_t v107 = buf;
          id v103 = v95;
          id v104 = v97;
          id v105 = v73;
          id v106 = v74;
          objc_msgSend_spawnAndRunOperationOfClass_operationInfo_operationConfigurationBlock_(v75, v77, v76, v96, v102);

          uint64_t v78 = v103;
        }
        else
        {
          uint64_t v79 = [CKDUpdateDeviceCapabilitiesOperation alloc];
          uint64_t v81 = objc_msgSend_initWithOperationInfo_container_(v79, v80, (uint64_t)v96, *(void *)(a1 + 48));
          uint64_t v82 = *(void **)(*(void *)&buf[8] + 40);
          *(void *)(*(void *)&buf[8] + 40) = v81;

          if (*MEMORY[0x1E4F1A4E0]) {
            objc_msgSend_setSkipSettingUnitTestOverrides_(*(void **)(*(void *)&buf[8] + 40), v83, 1);
          }
          objc_msgSend_setUpdateDeviceCapabilitiesCompletionBlock_(*(void **)(*(void *)&buf[8] + 40), v83, (uint64_t)v95);
          objc_msgSend_setPerZoneUsageCompletionBlock_(*(void **)(*(void *)&buf[8] + 40), v84, (uint64_t)v97);
          objc_msgSend_setPerShareUsageCompletionBlock_(*(void **)(*(void *)&buf[8] + 40), v85, (uint64_t)v73);
          objc_msgSend_setCompletionBlock_(*(void **)(*(void *)&buf[8] + 40), v86, (uint64_t)v74);
          uint64_t v78 = objc_msgSend_operationQueue(*(void **)(a1 + 48), v87, v88);
          objc_msgSend_addOperation_(v78, v89, *(void *)(*(void *)&buf[8] + 40));
        }

        uint64_t v90 = *(void *)(*(void *)&buf[8] + 40);
        uint64_t v93 = objc_msgSend_updateOperationsPerContainer(WeakRetained, v91, v92);
        objc_msgSend_setObject_forKeyedSubscript_(v93, v94, v90, *(void *)(a1 + 40));

        _Block_object_dispose(buf, 8);
        objc_destroyWeak(&v111);

        objc_destroyWeak(&v114);
        objc_destroyWeak(&v118);

        objc_destroyWeak(&v122);
        uint64_t v42 = v98;
        goto LABEL_58;
      }
      long long v48 = *(void **)(a1 + 64);
      if (v48) {
        id v49 = v48;
      }
      else {
        id v49 = (id)objc_opt_new();
      }
      uint64_t v99 = v49;
      if (v34)
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v50 = *MEMORY[0x1E4F1A500];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO)) {
          goto LABEL_41;
        }
        uint64_t v51 = *(void *)(a1 + 72);
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = v51;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v99;
        uint64_t v52 = "Device capabilities for container ID %{public}@ have not been sent to the server recently, will send: %{public}@";
      }
      else
      {
        id v53 = (void *)*MEMORY[0x1E4F1A548];
        uint64_t v54 = *MEMORY[0x1E4F1A550];
        if (v100)
        {
          if (v54 != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], v53);
          }
          id v55 = *MEMORY[0x1E4F1A500];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO)) {
            goto LABEL_41;
          }
          uint64_t v56 = *(void *)(a1 + 72);
          *(_DWORD *)buf = 138543874;
          *(void *)&uint8_t buf[4] = v56;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v99;
          *(_WORD *)&buf[22] = 2114;
          uint64_t v125 = (uint64_t (*)(uint64_t, uint64_t))v100;
          uint64_t v52 = "Device capabilities for container ID %{public}@ have changed, will send updated capabilities to the serv"
                "er. new: %{public}@, previous: %{public}@";
          long long v57 = v55;
          uint32_t v58 = 32;
          goto LABEL_40;
        }
        if (v54 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], v53);
        }
        uint64_t v50 = *MEMORY[0x1E4F1A500];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO)) {
          goto LABEL_41;
        }
        uint64_t v59 = *(void *)(a1 + 72);
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = v59;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v99;
        uint64_t v52 = "Device capabilities for container ID %{public}@ have not previously been sent to the server, will send: %{public}@";
      }
      long long v57 = v50;
      uint32_t v58 = 22;
LABEL_40:
      _os_log_impl(&dword_1C4CFF000, v57, OS_LOG_TYPE_INFO, v52, buf, v58);
      goto LABEL_41;
    }
  }
LABEL_60:
}

void sub_1C4EF4BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, id *a11, id *location)
{
  _Block_object_dispose((const void *)(v13 - 176), 8);
  objc_destroyWeak(v12);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(a10);
  _Unwind_Resume(a1);
}

void sub_1C4EF4BFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    double v10 = objc_msgSend_queue(*(void **)(a1 + 32), v7, v8);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_1C4EF4D2C;
    v12[3] = &unk_1E64F56F0;
    objc_copyWeak(&v16, (id *)(a1 + 48));
    uint64_t v11 = *(void **)(a1 + 40);
    void v12[4] = *(void *)(a1 + 32);
    id v13 = v11;
    id v14 = v5;
    char v17 = *(unsigned char *)(a1 + 56);
    id v15 = v6;
    dispatch_async(v10, v12);

    objc_destroyWeak(&v16);
  }
}

void sub_1C4EF4D2C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    objc_msgSend__handleDeviceCapabilitiesResultForContainer_savedCapabilities_skipErrorMitigation_withError_(*(void **)(a1 + 32), v3, *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 72), *(void *)(a1 + 56));
    id WeakRetained = v4;
  }
}

void sub_1C4EF4D88(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v13 = objc_msgSend_queue(*(void **)(a1 + 32), v10, v11);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4EF4ED8;
    block[3] = &unk_1E64F5740;
    objc_copyWeak(&v20, (id *)(a1 + 48));
    id v14 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v16 = v14;
    id v17 = v7;
    id v18 = v8;
    char v21 = *(unsigned char *)(a1 + 56);
    id v19 = v9;
    dispatch_async(v13, block);

    objc_destroyWeak(&v20);
  }
}

void sub_1C4EF4ED8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    objc_msgSend__handleZoneUsageResultForContainer_zoneID_date_skipErrorMitigation_withError_(*(void **)(a1 + 32), v3, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned __int8 *)(a1 + 80), *(void *)(a1 + 64));
    id WeakRetained = v4;
  }
}

void sub_1C4EF4F38(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v13 = objc_msgSend_queue(*(void **)(a1 + 32), v10, v11);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4EF5088;
    block[3] = &unk_1E64F5740;
    objc_copyWeak(&v20, (id *)(a1 + 48));
    id v14 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v16 = v14;
    id v17 = v7;
    id v18 = v8;
    char v21 = *(unsigned char *)(a1 + 56);
    id v19 = v9;
    dispatch_async(v13, block);

    objc_destroyWeak(&v20);
  }
}

void sub_1C4EF5088(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    objc_msgSend__handleShareUsageResultForContainer_shareID_date_skipErrorMitigation_withError_(*(void **)(a1 + 32), v3, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned __int8 *)(a1 + 80), *(void *)(a1 + 64));
    id WeakRetained = v4;
  }
}

void sub_1C4EF50E8(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 56);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v6 = objc_msgSend_queue(*(void **)(a1 + 32), v3, v4);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = sub_1C4EF51E0;
    v8[3] = &unk_1E64F57B8;
    objc_copyWeak(&v11, v2);
    id v7 = *(void **)(a1 + 40);
    void v8[4] = *(void *)(a1 + 32);
    id v9 = v7;
    id v10 = *(id *)(a1 + 48);
    dispatch_async(v6, v8);

    objc_destroyWeak(&v11);
  }
}

void sub_1C4EF51E0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    objc_msgSend__handleOperationCompletedForContainerLookupName_containerID_(*(void **)(a1 + 32), v3, *(void *)(a1 + 40), *(void *)(a1 + 48));
    id WeakRetained = v4;
  }
}

uint64_t sub_1C4EF5238(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4EF5248(uint64_t a1)
{
}

void sub_1C4EF5250(uint64_t *a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(a1[8] + 8) + 40), a2);
  id v9 = a2;
  objc_msgSend_setUseEncryption_(*(void **)(*(void *)(a1[8] + 8) + 40), v4, 1);
  objc_msgSend_setUpdateDeviceCapabilitiesCompletionBlock_(*(void **)(*(void *)(a1[8] + 8) + 40), v5, a1[4]);
  objc_msgSend_setPerZoneUsageCompletionBlock_(*(void **)(*(void *)(a1[8] + 8) + 40), v6, a1[5]);
  objc_msgSend_setPerShareUsageCompletionBlock_(*(void **)(*(void *)(a1[8] + 8) + 40), v7, a1[6]);
  objc_msgSend_setCompletionBlock_(*(void **)(*(void *)(a1[8] + 8) + 40), v8, a1[7]);
}

void sub_1C4EF56E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C4EF5710(void *a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v10 = objc_msgSend_startSendingWithResendingRefreshInterval_maxFailureCount_(v8, v9, 3, 86400.0);
  unint64_t v14 = objc_msgSend_failureCount(v8, v11, v12);
  uint64_t v15 = (void *)a1[4];
  if (v14 < 4)
  {
    objc_msgSend__setZoneUsage_forZoneID_inContainer_(v15, v13, (uint64_t)v8, v7, a1[5]);
    if (v10)
    {
      id v17 = *(void **)(*(void *)(a1[6] + 8) + 40);
      if (!v17)
      {
        uint64_t v18 = objc_opt_new();
        uint64_t v19 = *(void *)(a1[6] + 8);
        id v20 = *(void **)(v19 + 40);
        *(void *)(v19 + 40) = v18;

        id v17 = *(void **)(*(void *)(a1[6] + 8) + 40);
      }
      objc_msgSend_setObject_forKeyedSubscript_(v17, v16, (uint64_t)v10, v7);
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      char v21 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        long long v24 = (void *)a1[5];
        BOOL v25 = v21;
        long long v28 = objc_msgSend_containerID(v24, v26, v27);
        int v29 = 138543874;
        uint64_t v30 = v28;
        __int16 v31 = 2112;
        uint64_t v32 = v10;
        __int16 v33 = 2114;
        id v34 = v7;
        _os_log_debug_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_DEBUG, "Sending zone usage to the server. \n\tcontainerID: %{public}@ \n\tdate: %@ \n\tzoneID: %{public}@", (uint8_t *)&v29, 0x20u);
      }
      uint64_t v22 = *(void *)(a1[7] + 8);
      unint64_t v23 = *(void *)(v22 + 24) + 1;
      *(void *)(v22 + 24) = v23;
      if (v23 >= a1[8]) {
        *a4 = 1;
      }
    }
  }
  else
  {
    objc_msgSend__deleteZoneUsageForZoneID_inContainer_(v15, v13, (uint64_t)v7, a1[5]);
  }
}

void sub_1C4EF5C74(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1C4EF5CA8(void *a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v10 = objc_msgSend_startSendingWithResendingRefreshInterval_maxFailureCount_(a3, v8, 3, 86400.0);
  if (v10)
  {
    id v11 = *(void **)(*(void *)(a1[5] + 8) + 40);
    if (!v11)
    {
      uint64_t v12 = objc_opt_new();
      uint64_t v13 = *(void *)(a1[5] + 8);
      unint64_t v14 = *(void **)(v13 + 40);
      *(void *)(v13 + 40) = v12;

      id v11 = *(void **)(*(void *)(a1[5] + 8) + 40);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v11, v9, (uint64_t)v10, v7);
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v15 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = (void *)a1[4];
      uint64_t v19 = v15;
      uint64_t v22 = objc_msgSend_containerID(v18, v20, v21);
      int v23 = 138543874;
      long long v24 = v22;
      __int16 v25 = 2112;
      uint64_t v26 = v10;
      __int16 v27 = 2114;
      id v28 = v7;
      _os_log_debug_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_DEBUG, "Sending share usage to the server. \n\tcontainerID: %{public}@ \n\tdate: %@ \n\tshareID: %{public}@", (uint8_t *)&v23, 0x20u);
    }
    uint64_t v16 = *(void *)(a1[6] + 8);
    unint64_t v17 = *(void *)(v16 + 24) + 1;
    *(void *)(v16 + 24) = v17;
    if (v17 >= a1[7]) {
      *a4 = 1;
    }
  }
}

void sub_1C4EF5E74(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v15 = a3;
  uint64_t v7 = a1[6];
  id v8 = *(void (**)(uint64_t, id, id, uint64_t))(v7 + 16);
  id v9 = a2;
  v8(v7, v9, v15, a4);
  unint64_t v13 = objc_msgSend_failureCount(v15, v10, v11);
  unint64_t v14 = (void *)a1[4];
  if (v13 < 4) {
    objc_msgSend__setShareUsage_forShareID_inContainer_(v14, v12, (uint64_t)v15, v9, a1[5]);
  }
  else {
    objc_msgSend__deleteShareUsageForShareID_inContainer_(v14, v12, (uint64_t)v9, a1[5]);
  }
}

void sub_1C4EF5F30(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  uint64_t v7 = objc_msgSend_shareIDForRecordID_(*(void **)(a1 + 32), v6, (uint64_t)v14);
  if (v7)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    unint64_t v11 = objc_msgSend_failureCount(v5, v8, v9);
    uint64_t v12 = *(void **)(a1 + 40);
    if (v11 < 4)
    {
      objc_msgSend__setShareUsage_forShareID_inContainer_(v12, v10, (uint64_t)v5, v7, *(void *)(a1 + 48));
      objc_msgSend__deleteRecordWithUnknownShareUsage_inContainer_(*(void **)(a1 + 40), v13, (uint64_t)v14, *(void *)(a1 + 48));
    }
    else
    {
      objc_msgSend__deleteShareUsageForShareID_inContainer_(v12, v10, (uint64_t)v7, *(void *)(a1 + 48));
    }
  }
}

void sub_1C4EF6D60(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v6 = objc_msgSend_now(MEMORY[0x1E4F1C9C8], a2, a3);
  uint64_t v7 = (unsigned char *)MEMORY[0x1E4F1A4E0];
  if (*MEMORY[0x1E4F1A4E0])
  {
    id v8 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v4, v5);
    id v10 = objc_msgSend_objectForKeyedSubscript_(v8, v9, @"InvalidUsageTimestamp");
    int v13 = objc_msgSend_BOOLValue(v10, v11, v12);

    if (v13)
    {
      uint64_t v16 = (void *)MEMORY[0x1E4F1C9C8];
      objc_msgSend_timeIntervalSince1970(v6, v14, v15);
      uint64_t v20 = objc_msgSend_dateWithTimeIntervalSince1970_(v16, v18, v19, v17 + -2764800.0);
LABEL_7:

      id v6 = (void *)v20;
      goto LABEL_8;
    }
    if (*v7)
    {
      uint64_t v21 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v14, v15);
      int v23 = objc_msgSend_objectForKey_(v21, v22, @"ZoneAndShareUsageDate");

      if (v23)
      {
        uint64_t v26 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v24, v25);
        uint64_t v20 = objc_msgSend_objectForKeyedSubscript_(v26, v27, @"ZoneAndShareUsageDate");

        id v6 = v26;
        goto LABEL_7;
      }
    }
  }
LABEL_8:
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id v28 = *(id *)(a1 + 40);
  uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v28, v29, (uint64_t)&v42, v46, 16);
  if (v30)
  {
    uint64_t v32 = v30;
    uint64_t v33 = *(void *)v43;
    do
    {
      for (uint64_t i = 0; i != v32; ++i)
      {
        if (*(void *)v43 != v33) {
          objc_enumerationMutation(v28);
        }
        uint64_t v35 = *(void *)(*((void *)&v42 + 1) + 8 * i);
        int v36 = objc_msgSend__zoneUsageForZoneID_inContainer_(*(void **)(a1 + 48), v31, v35, *(void *)(a1 + 56), (void)v42);
        if (v36)
        {
          Used = v36;
          objc_msgSend_setLastUsed_(v36, v37, (uint64_t)v6);
        }
        else
        {
          uint64_t v40 = [CKUsageInfo alloc];
          Used = objc_msgSend_initWithLastUsed_(v40, v41, (uint64_t)v6);
        }
        objc_msgSend__setZoneUsage_forZoneID_inContainer_(*(void **)(a1 + 48), v39, (uint64_t)Used, v35, *(void *)(a1 + 56));
      }
      uint64_t v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v28, v31, (uint64_t)&v42, v46, 16);
    }
    while (v32);
  }
}

void sub_1C4EF7DA0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4EF7DBC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    id v7 = WeakRetained;
    uint64_t v3 = [CKUsageInfo alloc];
    Used = objc_msgSend_initWithLastUsed_(v3, v4, *(void *)(a1 + 32));
    objc_msgSend__setRecordWithUnknownShareUsage_forRecordID_inContainer_(*(void **)(a1 + 40), v6, (uint64_t)Used, *(void *)(a1 + 48), *(void *)(a1 + 56));

    id WeakRetained = v7;
  }
}

void sub_1C4EF7F68(uint64_t a1, const char *a2)
{
  uint64_t v3 = objc_msgSend__shareUsageForShareID_inContainer_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(void *)(a1 + 48));
  if (v3)
  {
    id Used = v3;
    objc_msgSend_setLastUsed_(v3, v4, *(void *)(a1 + 56));
  }
  else
  {
    id v6 = [CKUsageInfo alloc];
    id Used = (id)objc_msgSend_initWithLastUsed_(v6, v7, *(void *)(a1 + 56));
  }
  objc_msgSend__setShareUsage_forShareID_inContainer_(*(void **)(a1 + 32), v5, (uint64_t)Used, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

BOOL sub_1C4EF8440(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 24) |= 4u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
            {
              long long v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__minimumSchemaVersion;
              goto LABEL_53;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              break;
            }
            v17 += 7;
            BOOL v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              long long v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__minimumSchemaVersion;
              goto LABEL_56;
            }
          }
          long long v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__minimumSchemaVersion;
          goto LABEL_54;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 24) |= 8u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              long long v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__mmcsVersion;
              goto LABEL_53;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                long long v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__mmcsVersion;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          long long v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__mmcsVersion;
          goto LABEL_54;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 24) |= 2u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              long long v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__encryptedFieldContextType;
              goto LABEL_53;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                long long v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__encryptedFieldContextType;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          long long v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__encryptedFieldContextType;
          goto LABEL_54;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 24) |= 1u;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
          return 0;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v19 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
        {
          long long v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__assetKeyEncryptionType;
          goto LABEL_54;
        }
        v35 += 7;
        BOOL v23 = v36++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          long long v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__assetKeyEncryptionType;
          goto LABEL_56;
        }
      }
      long long v24 = &OBJC_IVAR___CKDPFieldCryptoFeatureSet__assetKeyEncryptionType;
LABEL_53:
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_54:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_56:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4EF9D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v17 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4EF9DBC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = objc_msgSend_error(v2, v3, v4);
  objc_msgSend_finishWithError_(WeakRetained, v6, (uint64_t)v5);
}

BOOL sub_1C4EF9F64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
LABEL_22:
        uint64_t v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&STACK[0x3F0], 8) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4EFA630(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 16;
LABEL_22:
        uint64_t v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&STACK[0x3F0], 8) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadData();
    uint64_t v18 = 8;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id sub_1C4EFADB8(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v6 = objc_msgSend_translator(v2, v4, v5);
  char v8 = objc_msgSend_containerPrivacySettingsFromPContainerPrivacySettings_(v6, v7, (uint64_t)v3);

  return v8;
}

BOOL CKDPUserInformationBlockedRequestAccessReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(CKDPContactInformation **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = objc_alloc_init(CKDPContactInformation);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark() || !CKDPContactInformationReadFrom((uint64_t)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4EFBF9C()
{
  uint64_t v0 = (void *)qword_1EBBCDE78;
  qword_1EBBCDE78 = (uint64_t)&unk_1F20ABF60;
}

BOOL sub_1C4EFC124(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(CKDPUserPrivacySettings **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = objc_alloc_init(CKDPUserPrivacySettings);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || (sub_1C5015AC0((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4EFC814(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPListRange);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || !sub_1C4F65720((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4EFD148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_1C4EFD180(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = (void *)MEMORY[0x1E4F1A550];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v5 = (os_log_t *)MEMORY[0x1E4F1A508];
  id v6 = *MEMORY[0x1E4F1A508];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v22) = 0;
    _os_log_debug_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_DEBUG, "Completed updating missing asset status", (uint8_t *)&v22, 2u);
  }
  unsigned int v9 = objc_msgSend_error(v3, v7, v8);

  if (v9)
  {
    if (*v4 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v12 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
    {
      int v15 = v12;
      uint64_t v18 = objc_msgSend_error(v3, v16, v17);
      int v22 = 138412290;
      BOOL v23 = v18;
      _os_log_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_INFO, "Error updating missing asset status: %@", (uint8_t *)&v22, 0xCu);
    }
    uint64_t v19 = objc_msgSend_error(v3, v13, v14);
    objc_msgSend_setError_(WeakRetained, v20, (uint64_t)v19);
  }
  unint64_t v21 = objc_msgSend_stateTransitionGroup(WeakRetained, v10, v11);
  dispatch_group_leave(v21);
}

uint64_t sub_1C4EFD5E8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_parserData(*(void **)(a1 + 32), a2, a3);

  if (!v4)
  {
    id v7 = objc_opt_new();
    objc_msgSend_setParserData_(*(void **)(a1 + 32), v8, (uint64_t)v7);
  }
  if (*(void *)(a1 + 40))
  {
    unsigned int v9 = objc_msgSend_parserData(*(void **)(a1 + 32), v5, v6);
    objc_msgSend_appendData_(v9, v10, *(void *)(a1 + 40));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    os_log_t v12 = *(uint64_t (**)(void))(result + 16);
    return v12();
  }
  return result;
}

void sub_1C4EFD748(uint64_t a1)
{
  id v2 = dispatch_group_create();
  uint64_t v5 = objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v3, v4);
  if (v5)
  {
    uint64_t v8 = (void *)v5;
    unsigned int v9 = objc_msgSend_parserData(*(void **)(a1 + 32), v6, v7);
    uint64_t v12 = objc_msgSend_length(v9, v10, v11);

    if (v12)
    {
      dispatch_group_enter(v2);
      objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v13, v14);
      int v15 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
      uint64_t v18 = objc_msgSend_parserData(*(void **)(a1 + 32), v16, v17);
      unint64_t v21 = objc_msgSend_parserData(*(void **)(a1 + 32), v19, v20);
      v40[0] = MEMORY[0x1E4F143A8];
      v40[1] = 3221225472;
      void v40[2] = sub_1C4EFD9D4;
      v40[3] = &unk_1E64F05C8;
      int v22 = v2;
      id v41 = v22;
      ((void (**)(void, void *, void *, void *))v15)[2](v15, v18, v21, v40);

      if (*MEMORY[0x1E4F1A4E0] && objc_msgSend_testRepeatedParseResults(*(void **)(a1 + 32), v23, v24))
      {
        dispatch_group_enter(v22);
        objc_msgSend_objectParsedBlock(*(void **)(a1 + 32), v25, v26);
        uint64_t v27 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
        char v30 = objc_msgSend_parserData(*(void **)(a1 + 32), v28, v29);
        unint64_t v33 = objc_msgSend_parserData(*(void **)(a1 + 32), v31, v32);
        v38[0] = MEMORY[0x1E4F143A8];
        v38[1] = 3221225472;
        v38[2] = sub_1C4EFD9DC;
        v38[3] = &unk_1E64F05C8;
        char v39 = v22;
        ((void (**)(void, void *, void *, void *))v27)[2](v27, v30, v33, v38);
      }
    }
  }
  if (*(void *)(a1 + 40))
  {
    objc_msgSend_qualityOfService(*(void **)(a1 + 32), v6, v7);
    char v34 = CKGetGlobalQueue();
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    v36[2] = sub_1C4EFD9E4;
    v36[3] = &unk_1E64F0790;
    id v35 = *(id *)(a1 + 40);
    v36[4] = *(void *)(a1 + 32);
    id v37 = v35;
    dispatch_group_notify(v2, v34, v36);
  }
}

void sub_1C4EFD9D4(uint64_t a1)
{
}

void sub_1C4EFD9DC(uint64_t a1)
{
}

void sub_1C4EFD9E4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  objc_msgSend_parserError(*(void **)(a1 + 32), a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

void sub_1C4EFDA94()
{
  uint64_t v0 = (void *)qword_1EBBCDE88;
  qword_1EBBCDE88 = (uint64_t)&unk_1F20ABF88;
}

uint64_t sub_1C4EFE234(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = (CKDPSupportedCapabilitiesCapability *)objc_alloc_init(MEMORY[0x1E4F19F30]);
        objc_storeStrong((id *)(a1 + 32), v17);
        if PBReaderPlaceMark() && (CKDPRecordZoneIdentifierReadFrom()) {
          goto LABEL_32;
        }
        goto LABEL_47;
      case 2u:
        uint64_t v17 = objc_alloc_init(CKDPSupportedCapabilitiesCapability);
        objc_msgSend_addZoneLevelCapabilities_((void *)a1, v19, (uint64_t)v17);
        goto LABEL_27;
      case 3u:
        uint64_t v17 = objc_alloc_init(CKDPSupportedCapabilitiesCapability);
        objc_msgSend_addRecordLevelCapabilities_((void *)a1, v20, (uint64_t)v17);
        goto LABEL_27;
      case 4u:
        uint64_t v17 = objc_alloc_init(CKDPSupportedCapabilitiesCapability);
        objc_msgSend_addFieldLevelCapabilities_((void *)a1, v21, (uint64_t)v17);
LABEL_27:
        if (!PBReaderPlaceMark() || !sub_1C4E44A38(v17, a2)) {
          goto LABEL_47;
        }
        goto LABEL_32;
      case 5u:
        uint64_t v17 = (CKDPSupportedCapabilitiesCapability *)objc_alloc_init(MEMORY[0x1E4F19EF8]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if PBReaderPlaceMark() && (CKDPDateReadFrom())
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_33:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_47:

        return 0;
      case 6u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 52) |= 1u;
        while (2)
        {
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 == -1 || v26 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              BOOL v14 = v23++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
LABEL_45:
        *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x3F0], 8) = v24 != 0;
        goto LABEL_33;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_33;
    }
  }
}

uint64_t CKDPShareMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 56;
        goto LABEL_23;
      case 2u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 40;
LABEL_23:
        uint64_t v20 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&STACK[0x3F0], 8) = v17;

        goto LABEL_66;
      case 3u:
        unint64_t v21 = objc_alloc_init(CKDPParticipant);
        uint64_t v22 = 16;
        goto LABEL_26;
      case 4u:
        unint64_t v21 = objc_alloc_init(CKDPParticipant);
        uint64_t v22 = 8;
LABEL_26:
        objc_storeStrong((id *)(a1 + v22), v21);
        if (!PBReaderPlaceMark() || (CKDPParticipantReadFrom((uint64_t)v21, a2) & 1) == 0) {
          goto LABEL_68;
        }
        goto LABEL_52;
      case 5u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 64) |= 1u;
        while (2)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              BOOL v14 = v24++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_56:
        uint64_t v39 = 24;
        goto LABEL_65;
      case 6u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 64) |= 2u;
        while (2)
        {
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 1;
            v25 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              BOOL v14 = v30++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_60:
        uint64_t v39 = 28;
        goto LABEL_65;
      case 7u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 64) |= 4u;
        while (2)
        {
          uint64_t v36 = *v3;
          unint64_t v37 = *(void *)(a2 + v36);
          if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v25 |= (unint64_t)(v38 & 0x7F) << v34;
            if (v38 < 0)
            {
              v34 += 7;
              BOOL v14 = v35++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_64:
        uint64_t v39 = 32;
LABEL_65:
        *(_DWORD *)(a1 + v39) = v25;
        goto LABEL_66;
      case 8u:
        unint64_t v21 = objc_alloc_init(CKDPRecordType);
        objc_storeStrong((id *)(a1 + 48), v21);
        if PBReaderPlaceMark() && (CKDPRecordTypeReadFrom((uint64_t)v21, a2))
        {
LABEL_52:
          PBReaderRecallMark();

LABEL_66:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_68:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_66;
    }
  }
}

uint64_t sub_1C4F00C94(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPCodeFunctionInvokeResponseAttestationResponseAttestation);
        objc_msgSend_addAttestations_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1C4E6CF78((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4F01540(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v6 = a3;
  if (v10)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    if (*(unsigned char *)(a1 + 48)) {
      objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v10, v5, v7);
    }
    else {
    unsigned int v9 = objc_msgSend_remoteObjectProxyWithErrorHandler_(v10, v5, v7);
    }
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1C4F0172C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  id v8 = *(id *)(a1 + 32);
  objc_sync_enter(v8);
  if (v7)
  {
    id v9 = *(id *)(a1 + 32);
    objc_sync_enter(v9);
    unint64_t v12 = objc_msgSend_logicalDeviceScopedClientProxyCreator(*(void **)(a1 + 32), v10, v11);

    if (v12)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      BOOL v14 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        int v25 = 138412546;
        uint64_t v26 = v17;
        __int16 v27 = 2112;
        id v28 = v7;
        _os_log_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_INFO, "Ignoring superfluous logical device scoped client proxy for %@: %@", (uint8_t *)&v25, 0x16u);
      }
      uint64_t v18 = objc_msgSend_logicalDeviceScopedClientProxyCreator(*(void **)(a1 + 32), v15, v16);
    }
    else
    {
      objc_msgSend_setLogicalDeviceScopedClientProxyCreator_(*(void **)(a1 + 32), v13, (uint64_t)v7);
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      char v23 = *MEMORY[0x1E4F1A500];
      uint64_t v18 = v7;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        uint64_t v24 = *(void *)(a1 + 32);
        int v25 = 138412546;
        uint64_t v26 = v24;
        __int16 v27 = 2112;
        id v28 = v7;
        _os_log_impl(&dword_1C4CFF000, v23, OS_LOG_TYPE_INFO, "Got a logical device scoped client proxy for %@: %@", (uint8_t *)&v25, 0x16u);
        uint64_t v18 = v7;
      }
    }
    objc_sync_exit(v9);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v19 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v22 = *(void *)(a1 + 32);
      int v25 = 138412546;
      uint64_t v26 = v22;
      __int16 v27 = 2112;
      id v28 = v6;
      _os_log_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_INFO, "Ignoring failed attempt to get logical device scoped client proxy for %@: %@", (uint8_t *)&v25, 0x16u);
    }
    uint64_t v18 = objc_msgSend_logicalDeviceScopedClientProxyCreator(*(void **)(a1 + 32), v20, v21);
  }
  objc_sync_exit(v8);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1C4F01A1C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F01D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F01D70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4F01D80(uint64_t a1)
{
}

void sub_1C4F01D88(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4F01DE8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1C4F01E90;
  v7[3] = &unk_1E64F1E08;
  uint64_t v9 = *(void *)(a1 + 56);
  long long v6 = *(_OWORD *)(a1 + 40);
  id v4 = (id)v6;
  long long v8 = v6;
  objc_msgSend_openFileWithOpenInfo_reply_(a2, v5, v3, v7);
}

void sub_1C4F01E90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4F02250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C4F02278(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4F022D8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1C4F02394;
  v9[3] = &unk_1E64F1920;
  uint64_t v11 = *(void *)(a1 + 56);
  long long v8 = *(_OWORD *)(a1 + 40);
  id v6 = (id)v8;
  long long v10 = v8;
  objc_msgSend_readBytesOfInMemoryAssetContentWithUUID_offset_length_reply_(a2, v7, v3, v4, v5, v9);
}

void sub_1C4F02394(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1C4F02524(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_resetThrottles(a2, (const char *)a2, a3);
}

void sub_1C4F025D0(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend_throttleBlockingUntilNextRequestWindow(v2, v4, v5);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addThrottle_(v3, v6, (uint64_t)v7);
}

uint64_t sub_1C4F02828(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4F02D64(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
          goto LABEL_24;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
          goto LABEL_24;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
LABEL_24:
          uint64_t v20 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&STACK[0x3F0], 8) = v17;

          continue;
        case 4u:
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 40) |= 1u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v24 = *v3;
        unint64_t v25 = *(void *)(a2 + v24);
        if (v25 == -1 || v25 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
        *(void *)(a2 + v24) = v25 + 1;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0) {
          goto LABEL_33;
        }
        v21 += 7;
        BOOL v14 = v22++ >= 9;
        if (v14)
        {
          uint64_t v23 = 0;
          goto LABEL_35;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v23 = 0;
      }
LABEL_35:
      *(void *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v23;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4F03B3C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v8 = a3;
  unsigned int v9 = *(void **)(a1 + 32);
  if (v8)
  {
    objc_msgSend_setError_(v9, v6, (uint64_t)v8);
LABEL_3:
    unint64_t v10 = 0;
    goto LABEL_4;
  }
  uint64_t v15 = objc_msgSend_type(v9, v6, v7);
  if (!v15)
  {
    char v26 = objc_msgSend_container(*(void **)(a1 + 32), v16, v17);
    uint64_t v29 = objc_msgSend_containerID(v26, v27, v28);
    uint64_t v31 = objc_msgSend_transcodeServerPublicKeyURLs_(v5, v30, (uint64_t)v29);

    if (v31)
    {
      char v34 = objc_msgSend_transcodeServerHostname(*(void **)(a1 + 32), v32, v33);
      unint64_t v10 = objc_msgSend_objectForKeyedSubscript_(v31, v35, (uint64_t)v34);

      if (v10)
      {

        goto LABEL_15;
      }
      uint64_t v54 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v55 = *MEMORY[0x1E4F19DD8];
      uint64_t v52 = objc_msgSend_transcodeServerHostname(*(void **)(a1 + 32), v36, v37);
      long long v57 = objc_msgSend_errorWithDomain_code_format_(v54, v56, v55, 2005, @"Could not find assetKeyEncryption URL for template URL %@", v52);
      objc_msgSend_setError_(*(void **)(a1 + 32), v58, (uint64_t)v57);
    }
    else
    {
      uint64_t v52 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v32, *MEMORY[0x1E4F19DD8], 2005, @"Server configuration did not contain assetKeyEncryption URL info");
      objc_msgSend_setError_(*(void **)(a1 + 32), v53, (uint64_t)v52);
    }

    goto LABEL_3;
  }
  if (v15 != 1) {
    goto LABEL_3;
  }
  uint64_t v18 = objc_msgSend_container(*(void **)(a1 + 32), v16, v17);
  char v21 = objc_msgSend_containerID(v18, v19, v20);
  unint64_t v10 = objc_msgSend_cloudMediaProcessingPublicKeyURLString_(v5, v22, (uint64_t)v21);

  if (!v10)
  {
    uint64_t v24 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v23, *MEMORY[0x1E4F19DD8], 2005, @"Server configuration did not contain CMP public key URL");
    objc_msgSend_setError_(*(void **)(a1 + 32), v25, (uint64_t)v24);

    goto LABEL_3;
  }
LABEL_15:
  uint64_t v38 = objc_msgSend_URLWithString_(MEMORY[0x1E4F1CB10], v23, (uint64_t)v10);
  if (v38)
  {
    uint64_t v40 = v38;
    objc_msgSend_setTranscodeServerPublicKeyURL_(*(void **)(a1 + 32), v39, v38);
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v41 = (void *)*MEMORY[0x1E4F1A500];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG)) {
      goto LABEL_22;
    }
    long long v42 = *(void **)(a1 + 32);
    long long v43 = v41;
    uint64_t v46 = objc_msgSend_transcodeServerPublicKeyURL(v42, v44, v45);
    *(_DWORD *)buf = 138543362;
    long long v60 = v46;
    _os_log_debug_impl(&dword_1C4CFF000, v43, OS_LOG_TYPE_DEBUG, "Transcode server public key hosted at %{public}@", buf, 0xCu);

LABEL_21:
LABEL_22:

    goto LABEL_7;
  }
  uint64_t v50 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v39, *MEMORY[0x1E4F19DD8], 1005, @"Couldn't create URL from transcode server URL string: %@", v10);
  objc_msgSend_setError_(*(void **)(a1 + 32), v51, (uint64_t)v50);

LABEL_4:
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v11 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v47 = *(void **)(a1 + 32);
    uint64_t v40 = v11;
    long long v43 = objc_msgSend_error(v47, v48, v49);
    *(_DWORD *)buf = 138412290;
    long long v60 = v43;
    _os_log_error_impl(&dword_1C4CFF000, v40, OS_LOG_TYPE_ERROR, "Error getting transcode server public key URL: %@", buf, 0xCu);
    goto LABEL_21;
  }
LABEL_7:
  BOOL v14 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v12, v13);
  dispatch_group_leave(v14);
}

void sub_1C4F044DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F04504(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v3 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v37 = v3;
    uint64_t v40 = objc_msgSend_verifiedPublicKey(WeakRetained, v38, v39);
    long long v43 = objc_msgSend_error(WeakRetained, v41, v42);
    int v44 = 138412546;
    uint64_t v45 = v40;
    __int16 v46 = 2112;
    uint64_t v47 = v43;
    _os_log_debug_impl(&dword_1C4CFF000, v37, OS_LOG_TYPE_DEBUG, "Fetched transcode server public key %@ with error %@", (uint8_t *)&v44, 0x16u);
  }
  id v6 = objc_msgSend_error(WeakRetained, v4, v5);
  objc_msgSend_setError_(*(void **)(a1 + 32), v7, (uint64_t)v6);

  unint64_t v12 = objc_msgSend_error(WeakRetained, v8, v9);
  if (v12) {
    goto LABEL_8;
  }
  uint64_t v13 = objc_msgSend_verifiedPublicKey(WeakRetained, v10, v11);
  char hasExpired = objc_msgSend_hasExpired(v13, v14, v15);

  if ((hasExpired & 1) == 0)
  {
    uint64_t v19 = objc_msgSend_verifiedPublicKey(WeakRetained, v17, v18);
    objc_msgSend_setTranscodeServerPublicKey_(*(void **)(a1 + 32), v20, (uint64_t)v19);

    unint64_t v12 = objc_msgSend_deviceContext(*(void **)(a1 + 32), v21, v22);
    unint64_t v25 = objc_msgSend_metadataCache(v12, v23, v24);
    uint64_t v28 = objc_msgSend_verifiedPublicKey(WeakRetained, v26, v27);
    uint64_t v31 = objc_msgSend_transcodeServerPublicKeyURL(*(void **)(a1 + 32), v29, v30);
    char v34 = objc_msgSend_absoluteString(v31, v32, v33);
    objc_msgSend_setPublicKey_ofType_withIdentifier_(v25, v35, (uint64_t)v28, @"transcodeServerPublicKey", v34);

LABEL_8:
  }
  uint64_t v36 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v17, v18);
  dispatch_group_leave(v36);
}

void sub_1C4F04BF4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v11 = 0;
  uint64_t v5 = objc_msgSend_invocation(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_getArgument_atIndex_(v5, v6, (uint64_t)&v11, a2);

  if (!v11)
  {
    uint64_t v9 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v7, v8);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v9, v10, *(void *)(a1 + 56), *(void *)(a1 + 32), @"CKDLongLivedOperationPersistedCallback.m", 47, @"Unexpectedly nil reply block for -[%@ %@]", *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1C4F04C94(uint64_t a1, const char *a2, uint64_t a3)
{
  id v19 = 0;
  uint64_t v5 = objc_msgSend_invocation(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_getArgument_atIndex_(v5, v6, (uint64_t)&v19, a2);

  id v7 = v19;
  if (v7)
  {
    uint64_t v8 = CKOperationProgressCallbackClasses();
    uint64_t v9 = objc_opt_class();
    if (v9)
    {
      Superclass = (objc_class *)v9;
      while ((objc_msgSend_containsObject_(v8, v10, (uint64_t)Superclass) & 1) == 0)
      {
        Superclass = class_getSuperclass(Superclass);
        if (!Superclass) {
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      uint64_t v13 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v10, v11);
      uint64_t v14 = *(void *)(a1 + 56);
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v16 = (objc_class *)objc_opt_class();
      uint64_t v17 = NSStringFromClass(v16);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v13, v18, v14, v15, @"CKDLongLivedOperationPersistedCallback.m", 68, @"Unsuitable object type %@ for -[%@ %@]", v17, *(void *)(a1 + 40), *(void *)(a1 + 48));
    }
  }
}

void sub_1C4F054AC(uint64_t a1, const char *a2)
{
  uint64_t v4 = objc_msgSend_stringWithFormat_(NSString, a2, @"Argument-%lu", a2);
  uint64_t v9 = 0;
  id v5 = *(id *)(a1 + 32);
  uint64_t v7 = objc_msgSend_decodeBytesForKey_returnedLength_(v5, v6, (uint64_t)v4, &v9);
  objc_msgSend_setArgument_atIndex_(*(void **)(a1 + 40), v8, v7, a2);
}

void sub_1C4F0552C(uint64_t a1, const char *a2)
{
  uint64_t v4 = objc_msgSend_stringWithFormat_(NSString, a2, @"Argument-%lu", a2);
  id v5 = CKOperationProgressCallbackClasses();
  uint64_t v7 = objc_msgSend_decodeObjectOfClasses_forKey_(*(void **)(a1 + 32), v6, (uint64_t)v5, v4);
  id v9 = v7;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v9 = 0;
  }
  objc_msgSend_setArgument_atIndex_(*(void **)(a1 + 40), v8, (uint64_t)&v9, a2);
}

void sub_1C4F055F4(uint64_t a1, const char *a2)
{
  uint64_t v4 = objc_msgSend_stringWithFormat_(NSString, a2, @"Argument-%lu", a2);
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = objc_opt_class();
  objc_msgSend_decodeObjectOfClass_forKey_(v5, v7, v6, v4);
  id v8 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_UTF8String(v8, v9, v10);
  id v12 = (id)__NSMakeSpecialForwardingCaptureBlock();
  objc_msgSend_setArgument_atIndex_(*(void **)(a1 + 40), v11, (uint64_t)&v12, a2);
}

void sub_1C4F059A4(uint64_t a1, const char *a2, uint64_t a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend_stringWithFormat_(NSString, a2, @"Argument-%lu", a2);
  id v9 = objc_msgSend_invocation(*(void **)(a1 + 32), v7, v8);
  objc_msgSend_getArgument_atIndex_(v9, v10, (uint64_t)v12 - ((a3 + 15) & 0xFFFFFFFFFFFFFFF0), a2);

  objc_msgSend_encodeBytes_length_forKey_(*(void **)(a1 + 40), v11, (uint64_t)v12 - ((a3 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v6);
}

void sub_1C4F05A90(uint64_t a1, const char *a2)
{
  uint64_t v4 = objc_msgSend_stringWithFormat_(NSString, a2, @"Argument-%lu", a2);
  id v12 = 0;
  uint64_t v7 = objc_msgSend_invocation(*(void **)(a1 + 32), v5, v6);
  objc_msgSend_getArgument_atIndex_(v7, v8, (uint64_t)&v12, a2);

  id v11 = v12;
  if (!v11)
  {
    objc_msgSend_null(MEMORY[0x1E4F1CA98], v9, v10);
    id v11 = (id)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend_encodeObject_forKey_(*(void **)(a1 + 40), v9, (uint64_t)v11, v4);
}

void sub_1C4F05B44(uint64_t a1, const char *a2)
{
  uint64_t v4 = objc_msgSend_stringWithFormat_(NSString, a2, @"Argument-%lu", a2);
  aBlock = 0;
  uint64_t v7 = objc_msgSend_invocation(*(void **)(a1 + 32), v5, v6);
  objc_msgSend_getArgument_atIndex_(v7, v8, (uint64_t)&aBlock, a2);

  id v9 = _Block_signature(aBlock);
  id v11 = objc_msgSend_stringWithUTF8String_(NSString, v10, (uint64_t)v9);
  objc_msgSend_encodeObject_forKey_(*(void **)(a1 + 40), v12, (uint64_t)v11, v4);
}

uint64_t CKDPMergeableDeltaReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    uint64_t v16 = v10 & 7;
    if (v15 || v16 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    uint64_t v18 = (const char *)(v10 >> 3);
    switch((v10 >> 3))
    {
      case 0x10u:
        objc_msgSend_clearOneofValuesForPayload((void *)a1, v18, v16);
        *(unsigned char *)(a1 + 52) |= 1u;
        *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x3F0], 8) = 1;
        uint64_t v19 = PBReaderReadData();
        uint64_t v20 = 16;
        goto LABEL_30;
      case 0x11u:
        objc_msgSend_clearOneofValuesForPayload((void *)a1, v18, v16);
        *(unsigned char *)(a1 + 52) |= 1u;
        *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x3F0], 8) = 2;
        uint64_t v19 = PBReaderReadData();
        uint64_t v20 = 32;
LABEL_30:
        uint64_t v27 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;

        goto LABEL_42;
      case 0x12u:
        objc_msgSend_clearOneofValuesForPayload((void *)a1, v18, v16);
        *(unsigned char *)(a1 + 52) |= 1u;
        *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x3F0], 8) = 3;
        uint64_t v28 = objc_alloc_init(CKDPAsset);
        uint64_t v29 = 8;
        goto LABEL_33;
      case 0x13u:
        objc_msgSend_clearOneofValuesForPayload((void *)a1, v18, v16);
        *(unsigned char *)(a1 + 52) |= 1u;
        *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x3F0], 8) = 4;
        uint64_t v28 = objc_alloc_init(CKDPAsset);
        uint64_t v29 = 24;
LABEL_33:
        objc_storeStrong((id *)(a1 + v29), v28);
        if (!PBReaderPlaceMark() || (CKDPAssetReadFrom((uint64_t)v28, a2) & 1) == 0) {
          goto LABEL_44;
        }
        goto LABEL_38;
      default:
        if (v18 != 1)
        {
          if (v18)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          else
          {
            unsigned int v21 = 0;
            while (1)
            {
              uint64_t v22 = *v3;
              unint64_t v23 = *(void *)(a2 + v22);
              if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
                break;
              }
              unint64_t v24 = v23 + 1;
              int v25 = *(char *)(*(void *)(a2 + *v7) + v23);
              *(void *)(a2 + v22) = v24;
              if (v25 < 0 && v21++ <= 8) {
                continue;
              }
              goto LABEL_42;
            }
            *(unsigned char *)(a2 + *v5) = 1;
          }
          goto LABEL_42;
        }
        uint64_t v28 = objc_alloc_init(CKDPMergeableDeltaMetadata);
        objc_storeStrong((id *)(a1 + 40), v28);
        if (PBReaderPlaceMark() && sub_1C5010554((id *)&v28->super.super.isa, a2))
        {
LABEL_38:
          PBReaderRecallMark();

LABEL_42:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_44:

        return 0;
    }
  }
}

uint64_t sub_1C4F06ED8(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"itemID == $ITEMID");
}

void sub_1C4F07250(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  objc_msgSend_setFetchedProperties_(v3, v4, v2);
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], v5, @"status=$STATUS");
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v3, v6, (uint64_t)v7);
}

void sub_1C4F07400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F07418(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4F07428(uint64_t a1)
{
}

id sub_1C4F07430(void *a1, const char *a2)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  v18[0] = @"FILE_SIGNATURE";
  v18[1] = @"STATUS";
  v19[0] = v3;
  v19[1] = &unk_1F20AC840;
  uint64_t v4 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v19, v18, 2);
  id v5 = (void *)a1[5];
  id v17 = 0;
  id v7 = objc_msgSend_entriesWithValues_label_error_setupBlock_(v5, v6, (uint64_t)v4, off_1E64F5DA0, &v17, &unk_1F2044010);
  id v10 = v17;
  if (!v10)
  {
    uint64_t v11 = objc_msgSend_nextObject(v7, v8, v9);
    uint64_t v12 = *(void *)(a1[6] + 8);
    char v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    objc_msgSend_error(v7, v14, v15);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v10;
}

void sub_1C4F07558(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_msgSend_setFetchedProperties_(v2, v3, (uint64_t)&unk_1F20AB760);
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], v4, @"fileSignature = $FILE_SIGNATURE AND status = $STATUS");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v2, v5, (uint64_t)v6);
}

void sub_1C4F076F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = objc_msgSend_volumeIndex(v3, v4, v5);
  id v7 = *(void **)(*(void *)(a1 + 32) + 120);
  id v10 = objc_msgSend_volumeUUID(v3, v8, v9);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v11, (uint64_t)v6, v10);

  objc_msgSend_volumeUUID(v3, v12, v13);
  id v19 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v14 = *(void **)(*(void *)(a1 + 32) + 112);
  id v17 = objc_msgSend_volumeIndex(v3, v15, v16);

  objc_msgSend_setObject_forKeyedSubscript_(v14, v18, (uint64_t)v19, v17);
}

void sub_1C4F07CA0(uint64_t a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v6 = objc_msgSend_volumeIndex(v3, v4, v5);
  if (v6
    && (uint64_t v9 = (void *)v6,
        objc_msgSend_volumeUUID(v3, v7, v8),
        id v10 = objc_claimAutoreleasedReturnValue(),
        v10,
        v9,
        v10))
  {
    uint64_t v13 = objc_msgSend_volumeUUID(v3, v11, v12);
    uint64_t v15 = objc_msgSend_deviceIDForVolumeUUID_(CKDVolumeManager, v14, (uint64_t)v13);

    if (v15)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 104));
      id v17 = *(void **)(a1 + 40);
      uint64_t v20 = objc_msgSend_volumeIndex(v3, v18, v19);
      unint64_t v23 = objc_msgSend_volumeUUID(v3, v21, v22);
      objc_msgSend__lockedSetVolumeIndex_forVolumeUUID_(v17, v24, (uint64_t)v20, v23);

      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 104));
    }
    else
    {
      objc_msgSend_addObject_(*(void **)(a1 + 32), v16, (uint64_t)v3);
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v28 = *MEMORY[0x1E4F1A4F8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
      {
        int v29 = 138412290;
        id v30 = v3;
        _os_log_error_impl(&dword_1C4CFF000, v28, OS_LOG_TYPE_ERROR, "Volume %@ is not mounted. Deleting all asset handles for this volume", (uint8_t *)&v29, 0xCu);
      }
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    int v25 = *MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      int v29 = 138412290;
      id v30 = v3;
      _os_log_error_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_ERROR, "Invalid device volume %@", (uint8_t *)&v29, 0xCu);
    }
    id v27 = (id)objc_msgSend_deleteObject_(*(void **)(a1 + 40), v26, (uint64_t)v3);
  }
}

void sub_1C4F08304()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  NSStringFromClass(v0);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = (const char *)objc_msgSend_UTF8String(v7, v1, v2);
  uint64_t v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v5 = dispatch_queue_create(v3, v4);
  uint64_t v6 = (void *)qword_1EBBCDE98;
  qword_1EBBCDE98 = (uint64_t)v5;
}

uint64_t sub_1C4F083E0(uint64_t a1, const char *a2, uint64_t a3)
{
  qword_1EBBCDEA8 = objc_msgSend_strongToWeakObjectsMapTable(MEMORY[0x1E4F28E10], a2, a3);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4F0869C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4F086CC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_containerCloudKitDirectory(*(void **)(a1 + 32), a2, a3);
  id v7 = objc_msgSend__sharedCachesByDirectory(CKDAssetCache, v5, v6);
  uint64_t v9 = objc_msgSend_objectForKey_(v7, v8, (uint64_t)v4);
  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v14) {
    goto LABEL_2;
  }
  uint64_t v17 = [CKDAssetCache alloc];
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v20 = *(void *)(a1 + 48);
  uint64_t v21 = *(void *)(*(void *)(a1 + 64) + 8);
  id obj = *(id *)(v21 + 40);
  uint64_t v23 = objc_msgSend__initWithApplicationBundleID_directoryContext_database_error_(v17, v22, v18, v19, v20, &obj);
  objc_storeStrong((id *)(v21 + 40), obj);
  uint64_t v24 = *(void *)(*(void *)(a1 + 56) + 8);
  int v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 40) = v23;

  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
    uint64_t v28 = objc_msgSend__sharedCachesByDirectory(CKDAssetCache, v26, v27);
    objc_msgSend_setObject_forKey_(v28, v29, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v4);

    uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    if (v14)
    {
LABEL_2:
      uint64_t v15 = objc_msgSend_checkoutCount(v14, v12, v13);
      objc_msgSend_setCheckoutCount_(v14, v16, v15 + 1);
    }
  }
}

void sub_1C4F08ED8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend__sharedCachesQueue(CKDAssetCache, a2, a3);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4F08F6C;
  block[3] = &unk_1E64F05C8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_sync(v4, block);
}

void sub_1C4F08F6C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_checkoutCount(*(void **)(a1 + 32), a2, a3);
  if (v4 <= 0) {
    __assert_rtn("-[CKDAssetCache drop]_block_invoke_2", "CKDAssetCache.m", 471, "checkoutCount > 0");
  }
  uint64_t v6 = v4;
  objc_msgSend_setCheckoutCount_(*(void **)(a1 + 32), v5, v4 - 1);
  if (v6 == 1)
  {
    objc_msgSend_setDidDrop_(*(void **)(a1 + 32), v7, 1);
    uint64_t v8 = (uint64_t *)MEMORY[0x1E4F1A550];
    uint64_t v9 = (void **)MEMORY[0x1E4F1A548];
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v10 = (os_log_t *)MEMORY[0x1E4F1A4F8];
    uint64_t v11 = *MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v37 = *(void *)(a1 + 32);
      int v39 = 138412290;
      uint64_t v40 = v37;
      _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "Did drop: %@", (uint8_t *)&v39, 0xCu);
    }
    uint64_t v14 = objc_msgSend_directoryContext(*(void **)(a1 + 32), v12, v13);
    uint64_t v17 = objc_msgSend_containerCloudKitDirectory(v14, v15, v16);

    uint64_t v18 = *(void **)(a1 + 32);
    uint64_t v21 = objc_msgSend__sharedCachesByDirectory(CKDAssetCache, v19, v20);
    uint64_t v23 = objc_msgSend_objectForKey_(v21, v22, (uint64_t)v17);

    uint64_t v24 = *v9;
    uint64_t v25 = *v8;
    if (v18 == v23)
    {
      if (v25 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v24);
      }
      uint64_t v28 = *v10;
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v38 = *(void *)(a1 + 32);
        int v39 = 138412290;
        uint64_t v40 = v38;
        _os_log_debug_impl(&dword_1C4CFF000, v28, OS_LOG_TYPE_DEBUG, "Removing from sharedCache map: %@", (uint8_t *)&v39, 0xCu);
      }
      uint64_t v31 = objc_msgSend__sharedCachesByDirectory(CKDAssetCache, v29, v30);
      objc_msgSend_removeObjectForKey_(v31, v32, (uint64_t)v17);

      uint64_t v33 = *(void *)(a1 + 32);
      char v34 = *(void **)(v33 + 40);
      *(void *)(v33 + 40) = 0;

      uint64_t v35 = *(void *)(a1 + 32);
      uint64_t v36 = *(void **)(v35 + 48);
      *(void *)(v35 + 4_Block_object_dispose(&STACK[0x3F0], 8) = 0;
    }
    else
    {
      if (v25 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v24);
      }
      char v26 = *v10;
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = *(void *)(a1 + 32);
        int v39 = 138412290;
        uint64_t v40 = v27;
        _os_log_error_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_ERROR, "Not in the sharedCache map: %@", (uint8_t *)&v39, 0xCu);
      }
    }
  }
}

uint64_t sub_1C4F09550(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_unmountedAssetVolumes(*(void **)(*(void *)(a1 + 32) + 48), a2, a3);
  id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v40 = objc_alloc_init(CKDAssetHandle);
  objc_msgSend_setStatus_(v40, v6, (uint64_t)&unk_1F20AC870);
  uint64_t v42 = objc_msgSend_MMCS(*(void **)(v3 + 32), v7, v8);
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id obj = v4;
  uint64_t v44 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v49, v58, 16);
  if (v44)
  {
    uint64_t v43 = *(void *)v50;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v50 != v43) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void **)(*((void *)&v49 + 1) + 8 * v12);
        v56[0] = @"INDEX";
        uint64_t v14 = objc_msgSend_volumeIndex(v13, v10, v11);
        v56[1] = @"UNREGISTERING";
        v57[0] = v14;
        v57[1] = &unk_1F20AC870;
        uint64_t v16 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v15, (uint64_t)v57, v56, 2);

        uint64_t v17 = v3;
        uint64_t v19 = objc_msgSend_entriesWithValues_label_error_setupBlock_(*(void **)(*(void *)(v3 + 32) + 40), v18, (uint64_t)v16, off_1E64F5E30, 0, &unk_1F2044050);
        long long v45 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v45, v55, 16);
        if (v21)
        {
          uint64_t v24 = v21;
          uint64_t v25 = *(void *)v46;
          do
          {
            uint64_t v26 = 0;
            do
            {
              if (*(void *)v46 != v25) {
                objc_enumerationMutation(v19);
              }
              uint64_t v27 = objc_msgSend_itemID(*(void **)(*((void *)&v45 + 1) + 8 * v26), v22, v23);
              objc_msgSend_addObject_(v5, v28, (uint64_t)v27);

              ++v26;
            }
            while (v24 != v26);
            uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v22, (uint64_t)&v45, v55, 16);
          }
          while (v24);
        }
        if (objc_msgSend_count(v5, v22, v23))
        {
          objc_msgSend_unregisterItemIDs_(v42, v29, (uint64_t)v5);
          objc_msgSend_removeAllObjects(v5, v31, v32);
        }
        id v53 = @"INDEX";
        uint64_t v33 = objc_msgSend_volumeIndex(v13, v29, v30);
        uint64_t v54 = v33;
        uint64_t v35 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v34, (uint64_t)&v54, &v53, 1);

        uint64_t v3 = v17;
        objc_msgSend_deleteEntriesMatching_label_error_predicate_(*(void **)(*(void *)(v17 + 32) + 40), v36, (uint64_t)v35, off_1E64F5E48, 0, &unk_1F2044070);
        id v38 = (id)objc_msgSend_deleteObject_(*(void **)(*(void *)(v17 + 32) + 48), v37, (uint64_t)v13);

        ++v12;
      }
      while (v12 != v44);
      uint64_t v44 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v49, v58, 16);
    }
    while (v44);
  }

  return 0;
}

void sub_1C4F09890(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_msgSend_setFetchedProperties_(v2, v3, (uint64_t)&unk_1F20AB778);
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], v4, @"volumeIndex=$INDEX AND status!=$UNREGISTERING");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v2, v5, (uint64_t)v6);
}

uint64_t sub_1C4F09908(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"volumeIndex=$INDEX");
}

void sub_1C4F09AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4F09ADC(uint64_t *a1, const char *a2)
{
  objc_msgSend_volumeUUIDForDeviceID_(CKDVolumeManager, a2, a1[4]);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = objc_msgSend_volumeIndexForVolumeUUID_(*(void **)(a1[5] + 48), v3, (uint64_t)v7);
  uint64_t v5 = *(void *)(a1[6] + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1C4F09C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F09C8C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v12 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(const char **)(a1 + 48);
      uint64_t v15 = v12;
      uint64_t v16 = NSStringFromSelector(v14);
      int v17 = 138412546;
      uint64_t v18 = v13;
      __int16 v19 = 2114;
      uint64_t v20 = v16;
      _os_log_error_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", (uint8_t *)&v17, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache clearForced:]_block_invoke", "CKDAssetCache.m", 586, "0 && \"already dropped\"");
  }
  uint64_t v5 = objc_msgSend__evictAllFilesForced_(*(void **)(a1 + 32), v4, *(unsigned __int8 *)(a1 + 56));
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  uint64_t v10 = *(void **)(a1 + 32);
  return objc_msgSend_expireAssetHandlesIfNecessary(v10, v8, v9);
}

void sub_1C4F09FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4F0A014(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v26 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void **)(a1 + 32);
      uint64_t v28 = *(const char **)(a1 + 48);
      int v29 = v26;
      uint64_t v30 = NSStringFromSelector(v28);
      *(_DWORD *)buf = 138412546;
      id v39 = v27;
      __int16 v40 = 2114;
      uint64_t v41 = v30;
      _os_log_error_impl(&dword_1C4CFF000, v29, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache clearAssetCache]_block_invoke", "CKDAssetCache.m", 599, "0 && \"already dropped\"");
  }
  uint64_t v4 = [CKDAssetCacheEvictionInfo alloc];
  uint64_t v6 = objc_msgSend_initWithForced_(v4, v5, 1);
  objc_msgSend_setClearRegisteredItems_(v6, v7, 1);
  uint64_t v9 = objc_msgSend__evictWithEvictionInfo_(*(void **)(a1 + 32), v8, (uint64_t)v6);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  objc_msgSend_unregisterItemIDsAndDeleteAssetHandlesWithEvictionInfo_(*(void **)(a1 + 32), v12, (uint64_t)v6);
  objc_msgSend_expireAssetHandlesIfNecessary(*(void **)(a1 + 32), v13, v14);
  int v17 = objc_msgSend_fileDownloadPath(*(void **)(a1 + 32), v15, v16);
  uint64_t v20 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v18, v19);
  id v37 = 0;
  char v22 = objc_msgSend_removeItemAtPath_error_(v20, v21, (uint64_t)v17, &v37);
  id v23 = v37;
  if ((v22 & 1) == 0)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v24 = *MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v39 = v23;
      _os_log_error_impl(&dword_1C4CFF000, v24, OS_LOG_TYPE_ERROR, "Failed to remove download directory while clearning cache: %{public}@", buf, 0xCu);
    }
  }
  CKCreateDirectoryAtPath();
  char v36 = 0;
  if (!objc_msgSend_fileExistsAtPath_isDirectory_(v20, v25, (uint64_t)v17, &v36) || !v36)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v31 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C4CFF000, v31, OS_LOG_TYPE_ERROR, "No download directory after clearing cache", buf, 2u);
    }
    uint64_t v33 = objc_msgSend_stringWithFormat_(NSString, v32, @"No download directory after clearing cache");
    objc_msgSend_UTF8String(v33, v34, v35);
    _os_crash();
    __break(1u);
  }
}

void sub_1C4F0A5F8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v42 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *(void **)(a1 + 32);
      uint64_t v44 = *(const char **)(a1 + 48);
      long long v45 = v42;
      NSStringFromSelector(v44);
      long long v46 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      long long v57 = v43;
      __int16 v58 = 2114;
      uint64_t v59 = v46;
      _os_log_error_impl(&dword_1C4CFF000, v45, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache checkAssetHandlesForRegisteredMMCSItems:]_block_invoke", "CKDAssetCache.m", 630, "0 && \"already dropped\"");
  }
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id v4 = *(id *)(v3 + 40);
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v52, v62, 16);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v53;
    id v50 = v4;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v53 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void **)(*((void *)&v52 + 1) + 8 * v9);
        uint64_t v11 = (void *)MEMORY[0x1C8789E70]();
        uint64_t v14 = objc_msgSend_error(v10, v12, v13);

        if (!v14)
        {
          int v17 = (void *)MEMORY[0x1E4F28ED0];
          uint64_t v18 = objc_msgSend_itemID(v10, v15, v16);
          uint64_t v20 = objc_msgSend_numberWithUnsignedLongLong_(v17, v19, v18);
          uint64_t v21 = *(void **)(*(void *)(v3 + 32) + 40);
          id v51 = 0;
          id v23 = objc_msgSend_entryWithPrimaryKey_fetchProperties_label_error_(v21, v22, (uint64_t)v20, &unk_1F20AB790, off_1E64F5ED8, &v51);
          uint64_t v24 = (__CFString *)v51;
          uint64_t v25 = v24;
          if (v23)
          {
            if (*MEMORY[0x1E4F1A550] != -1) {
              dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            uint64_t v26 = (id)*MEMORY[0x1E4F1A4F8];
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              uint64_t v31 = objc_msgSend_signature(v10, v27, v28);
              if (v31)
              {
                long long v49 = objc_msgSend_signature(v10, v29, v30);
                objc_msgSend_CKLowercaseHexStringWithoutSpaces(v49, v32, v33);
                long long v48 = (__CFString *)objc_claimAutoreleasedReturnValue();
                char v34 = v48;
              }
              else
              {
                char v34 = @"none";
              }
              *(_DWORD *)buf = 138543874;
              long long v57 = v20;
              __int16 v58 = 2114;
              uint64_t v59 = v34;
              __int16 v60 = 2114;
              uint64_t v61 = @"cachedAndRegistered";
              _os_log_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_INFO, "%{public}@, %{public}@, %{public}@", buf, 0x20u);
              if (v31)
              {
              }
              uint64_t v3 = a1;
            }

            id v4 = v50;
          }
          else
          {
            uint64_t v35 = (void *)*MEMORY[0x1E4F1A548];
            if (v24)
            {
              if (*MEMORY[0x1E4F1A550] != -1) {
                dispatch_once(MEMORY[0x1E4F1A550], v35);
              }
              char v36 = *MEMORY[0x1E4F1A4F8];
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_INFO)) {
                goto LABEL_29;
              }
              *(_DWORD *)buf = 138543618;
              long long v57 = v20;
              __int16 v58 = 2114;
              uint64_t v59 = v25;
              id v37 = v36;
              id v38 = "%{public}@ db error: %{public}@";
              uint32_t v39 = 22;
            }
            else
            {
              if (*MEMORY[0x1E4F1A550] != -1) {
                dispatch_once(MEMORY[0x1E4F1A550], v35);
              }
              __int16 v40 = *MEMORY[0x1E4F1A4F8];
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_INFO)) {
                goto LABEL_29;
              }
              *(_DWORD *)buf = 138543362;
              long long v57 = v20;
              id v37 = v40;
              id v38 = "%{public}@ not found";
              uint32_t v39 = 12;
            }
            _os_log_impl(&dword_1C4CFF000, v37, OS_LOG_TYPE_INFO, v38, buf, v39);
          }
LABEL_29:
        }
        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v41, (uint64_t)&v52, v62, 16);
    }
    while (v7);
  }
}

void sub_1C4F0AB58(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v68 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v69 = *(void *)(a1 + 32);
      uint64_t v70 = *(const char **)(a1 + 48);
      uint64_t v71 = v68;
      id v72 = NSStringFromSelector(v70);
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v69;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v72;
      _os_log_error_impl(&dword_1C4CFF000, v71, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache showAssetCacheInContainer:]_block_invoke", "CKDAssetCache.m", 663, "0 && \"already dropped\"");
  }
  uint64_t v76 = objc_msgSend_MMCS(*(void **)(a1 + 32), v4, v5);
  objc_msgSend_showRegisteredItemsInContainer_(v76, v6, *(void *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A4F8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = v7;
    uint64_t v13 = objc_msgSend_path(v76, v11, v12);
    *(_DWORD *)buf = 138543362;
    *(void *)&uint8_t buf[4] = v13;
    _os_log_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_INFO, "Report for %{public}@\n----\n", buf, 0xCu);
  }
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000;
  uint64_t v97 = sub_1C4F07418;
  id v98 = sub_1C4F07428;
  objc_msgSend_string(MEMORY[0x1E4F28E78], v8, v9);
  id v99 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v14, v15);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  int v17 = *MEMORY[0x1E4F1A4F8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v89 = 0;
    _os_log_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_INFO, "itemID, file signature, status, fileStatus, lastAccess(hrs), lastAssetDbAccess(hrs), expectedSize, actualSize", v89, 2u);
  }
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v19 = *(void **)(v18 + 40);
  v86[0] = MEMORY[0x1E4F143A8];
  v86[1] = 3221225472;
  v86[2] = sub_1C4F0B2F0;
  v86[3] = &unk_1E64F5EF8;
  v86[4] = v18;
  uint64_t v88 = buf;
  id v75 = v16;
  id v87 = v75;
  id v21 = (id)objc_msgSend_performTransaction_(v19, v20, (uint64_t)v86);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  char v22 = (id)*MEMORY[0x1E4F1A4F8];
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    uint64_t v25 = objc_msgSend_path(v76, v23, v24);
    *(_DWORD *)id v89 = 138543362;
    uint64_t v90 = v25;
    _os_log_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_INFO, "End Report for %{public}@\n----\n", v89, 0xCu);
  }
  uint64_t v78 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v26, v27);
  char v85 = 0;
  uint64_t v30 = objc_msgSend_directoryContext(*(void **)(a1 + 32), v28, v29);
  uint64_t v33 = objc_msgSend_fileDownloadDirectory(v30, v31, v32);
  char v36 = objc_msgSend_path(v33, v34, v35);
  int isDirectory = objc_msgSend_fileExistsAtPath_isDirectory_(v78, v37, (uint64_t)v36, &v85);
  if (v85) {
    int v39 = isDirectory;
  }
  else {
    int v39 = 0;
  }

  if (v39)
  {
    uint64_t v42 = objc_msgSend_fileDownloadPath(*(void **)(a1 + 32), v40, v41);
    id v84 = 0;
    __int16 v74 = objc_msgSend_contentsOfDirectoryAtPath_error_(v78, v43, (uint64_t)v42, &v84);
    id v73 = v84;

    uint64_t v44 = v74;
    if (v74)
    {
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      id obj = v74;
      long long v46 = 0;
      uint64_t v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v45, (uint64_t)&v80, v95, 16, v73);
      if (v49)
      {
        uint64_t v50 = *(void *)v81;
        do
        {
          uint64_t v51 = 0;
          do
          {
            if (*(void *)v81 != v50) {
              objc_enumerationMutation(obj);
            }
            uint64_t v52 = *(void *)(*((void *)&v80 + 1) + 8 * v51);
            long long v53 = objc_msgSend_fileDownloadPath(*(void **)(a1 + 32), v47, v48);
            long long v55 = objc_msgSend_stringByAppendingPathComponent_(v53, v54, v52);

            long long v57 = objc_msgSend_assetHandleWithCachedPath_(*(void **)(a1 + 32), v56, (uint64_t)v55);
            id v79 = 0;
            uint64_t v59 = objc_msgSend_attributesOfItemAtPath_error_(v78, v58, (uint64_t)v55, &v79);
            id v60 = v79;
            if (v59)
            {
              if (*MEMORY[0x1E4F1A550] != -1) {
                dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
              }
              uint64_t v61 = (id)*MEMORY[0x1E4F1A4F8];
              if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
              {
                uint64_t v64 = objc_msgSend_fileSize(v59, v62, v63);
                *(_DWORD *)id v89 = 138543874;
                uint64_t v90 = v55;
                __int16 v91 = 2048;
                uint64_t v92 = v64;
                __int16 v93 = 2112;
                uint64_t v94 = v57;
                _os_log_impl(&dword_1C4CFF000, v61, OS_LOG_TYPE_INFO, "%{public}@ bytes:%llu assetHandle:%@", v89, 0x20u);
              }

              v46 += objc_msgSend_fileSize(v59, v65, v66);
            }

            ++v51;
          }
          while (v49 != v51);
          uint64_t v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v47, (uint64_t)&v80, v95, 16);
        }
        while (v49);
      }

      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v67 = *MEMORY[0x1E4F1A4F8];
      uint64_t v44 = v74;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)id v89 = 134217984;
        uint64_t v90 = v46;
        _os_log_impl(&dword_1C4CFF000, v67, OS_LOG_TYPE_INFO, "total bytes:%llu", v89, 0xCu);
      }
    }
  }
  _Block_object_dispose(buf, 8);
}

void sub_1C4F0B2A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F0B2F0(uint64_t a1, const char *a2)
{
  uint64_t v2 = a1;
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  objc_msgSend_entryEnumerator_(*(void **)(*(void *)(a1 + 32) + 40), a2, 0);
  long long v147 = 0u;
  long long v148 = 0u;
  long long v149 = 0u;
  long long v150 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v135 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v147, v163, 16);
  if (v135)
  {
    uint64_t v133 = *(void *)v148;
    uint64_t v131 = (void *)*MEMORY[0x1E4F19DD8];
    uint64_t v134 = v2;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v148 != v133) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v147 + 1) + 8 * v4);
        uint64_t v6 = MEMORY[0x1C8789E70]();
        uint64_t v7 = *(void **)(*(void *)(*(void *)(v2 + 48) + 8) + 40);
        uint64_t v10 = objc_msgSend_length(v7, v8, v9);
        objc_msgSend_deleteCharactersInRange_(v7, v11, 0, v10);
        int HaveAssetCacheManagedFile = objc_msgSend_mayHaveAssetCacheManagedFile(v5, v12, v13);
        int v17 = objc_msgSend_lastUsedTime(v5, v15, v16);

        if (v17)
        {
          uint64_t v20 = objc_msgSend_lastUsedTime(v5, v18, v19);
          objc_msgSend_description(v20, v21, v22);
          uint64_t v141 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          uint64_t v141 = @"none";
        }
        id v23 = objc_msgSend_fileSize(v5, v18, v19);

        if (v23)
        {
          uint64_t v26 = NSString;
          uint64_t v27 = objc_msgSend_fileSize(v5, v24, v25);
          objc_msgSend_stringWithFormat_(v26, v28, @"%@", v27);
          uint64_t v29 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          uint64_t v29 = @"none";
        }
        uint64_t v30 = *(void **)(*(void *)(*(void *)(v2 + 48) + 8) + 40);
        uint64_t v140 = objc_msgSend_itemID(v5, v24, v25);
        uint64_t v35 = objc_msgSend_fileSignature(v5, v31, v32);
        uint64_t v142 = (void *)v6;
        uint64_t v143 = v4;
        uint64_t v144 = v29;
        int v138 = HaveAssetCacheManagedFile;
        uint64_t v139 = v30;
        if (v35)
        {
          CFTypeRef v137 = objc_msgSend_fileSignature(v5, v33, v34);
          objc_msgSend_CKLowercaseHexStringWithoutSpaces(v137, v36, v37);
          id v38 = (__CFString *)objc_claimAutoreleasedReturnValue();
          uint64_t v136 = v38;
        }
        else
        {
          id v38 = @"none";
        }
        int v39 = objc_msgSend_volumeIndex(v5, v33, v34);
        __int16 v40 = *(void **)(*(void *)(v2 + 32) + 48);
        uint64_t v43 = objc_msgSend_volumeIndex(v5, v41, v42);
        long long v45 = objc_msgSend_volumeUUIDWithVolumeIndex_(v40, v44, (uint64_t)v43);
        long long v46 = *(void **)(v2 + 32);
        uint64_t v49 = objc_msgSend_volumeIndex(v5, v47, v48);
        uint64_t v51 = objc_msgSend_deviceIDForVolumeIndex_(v46, v50, (uint64_t)v49);
        long long v54 = objc_msgSend_status(v5, v52, v53);
        uint64_t v57 = objc_msgSend_integerValue(v54, v55, v56);
        uint64_t v59 = objc_msgSend_descriptionWithStatus_(CKDAssetHandle, v58, v57);
        objc_msgSend_appendFormat_(v139, v60, @"%@, %@, %@, %@, %@, %@", v140, v38, v39, v45, v51, v59);

        if (v35)
        {
        }
        uint64_t v63 = objc_msgSend_volumeIndex(v5, v61, v62);
        if (v63)
        {
          uint64_t v66 = (void *)v63;
          uint64_t v67 = objc_msgSend_fileID(v5, v64, v65);

          if (v67)
          {
            id v68 = objc_alloc(MEMORY[0x1E4F1A120]);
            uint64_t v2 = v134;
            uint64_t v69 = *(void **)(v134 + 32);
            id v72 = objc_msgSend_volumeIndex(v5, v70, v71);
            __int16 v74 = objc_msgSend_deviceIDForVolumeIndex_(v69, v73, (uint64_t)v72);
            uint64_t v77 = objc_msgSend_fileID(v5, v75, v76);
            long long v80 = objc_msgSend_generationID(v5, v78, v79);
            RawEncryptedData_fileHandle_assetDownloadStagingInfo = objc_msgSend_initWithUUID_path_deviceID_fileID_generationID_shouldReadRawEncryptedData_fileHandle_assetDownloadStagingInfo_(v68, v81, 0, 0, v74, v77, v80, 0, 0, 0);

            id v146 = 0;
            id v84 = objc_msgSend_openWithOpenInfo_error_(MEMORY[0x1E4F19E50], v83, (uint64_t)RawEncryptedData_fileHandle_assetDownloadStagingInfo, &v146);
            id v85 = v146;
            uint64_t v88 = v85;
            id v89 = v144;
            if (v84)
            {
              uint64_t v90 = (void *)MEMORY[0x1E4F19E50];
              __int16 v91 = objc_msgSend_fileHandle(v84, v86, v87);
              id v145 = 0;
              __int16 v93 = objc_msgSend_getFileMetadataWithFileHandle_openInfo_error_(v90, v92, (uint64_t)v91, RawEncryptedData_fileHandle_assetDownloadStagingInfo, &v145);
              id v94 = v145;

              if (v93)
              {
                uint64_t v97 = NSString;
                objc_msgSend_timeIntervalSince1970(*(void **)(v134 + 40), v95, v96);
                double v99 = v98;
                uint64_t v102 = objc_msgSend_modTimeInSeconds(v93, v100, v101);
                objc_msgSend_doubleValue(v102, v103, v104);
                objc_msgSend_stringWithFormat_(v97, v106, @"%0.2f", (v99 - v105) / 3600.0);
                uint64_t v107 = (__CFString *)objc_claimAutoreleasedReturnValue();

                uint64_t v108 = NSString;
                id v111 = objc_msgSend_fileSize(v93, v109, v110);
                objc_msgSend_stringWithFormat_(v108, v112, @"%@", v111);
                id v113 = (__CFString *)objc_claimAutoreleasedReturnValue();

                id v89 = v144;
              }
              else
              {
                id v113 = @"none";
                uint64_t v107 = @"n/a";
              }
              uint64_t v115 = v143;

              id v114 = @"exists";
LABEL_32:
              uint64_t v116 = v142;
            }
            else
            {
              id v117 = objc_msgSend_domain(v85, v86, v87);
              int isEqualToString = objc_msgSend_isEqualToString_(v131, v118, (uint64_t)v117);

              if (!isEqualToString)
              {
                objc_msgSend_description(v88, v120, v121);
                id v114 = (__CFString *)objc_claimAutoreleasedReturnValue();
                id v113 = @"none";
                uint64_t v107 = @"n/a";
                uint64_t v115 = v143;
                goto LABEL_32;
              }
              uint64_t v116 = v142;
              uint64_t v115 = v143;
              if (objc_msgSend_code(v88, v120, v121) == 3002)
              {
                id v113 = @"none";
                uint64_t v107 = @"n/a";
                id v114 = @"not found";
              }
              else if (objc_msgSend_code(v88, v122, v123) == 3003)
              {
                id v113 = @"none";
                uint64_t v107 = @"n/a";
                id v114 = @"modified";
              }
              else
              {
                objc_msgSend_description(v88, v127, v128);
                id v114 = (__CFString *)objc_claimAutoreleasedReturnValue();
                id v113 = @"none";
                uint64_t v107 = @"n/a";
              }
            }

            goto LABEL_34;
          }
        }
        if (v138) {
          id v114 = @"expected but missing";
        }
        else {
          id v114 = @"none expected";
        }
        id v113 = @"none";
        uint64_t v107 = @"n/a";
        uint64_t v2 = v134;
        uint64_t v116 = v142;
        uint64_t v115 = v143;
        id v89 = v144;
LABEL_34:
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v124 = *MEMORY[0x1E4F1A4F8];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_INFO))
        {
          uint64_t v125 = *(void *)(*(void *)(*(void *)(v2 + 48) + 8) + 40);
          *(_DWORD *)buf = 138544642;
          uint64_t v152 = v125;
          __int16 v153 = 2114;
          uint64_t v154 = v114;
          __int16 v155 = 2114;
          id v156 = v107;
          __int16 v157 = 2114;
          uint64_t v158 = v141;
          __int16 v159 = 2114;
          uint64_t v160 = v89;
          __int16 v161 = 2114;
          uint64_t v162 = v113;
          _os_log_impl(&dword_1C4CFF000, v124, OS_LOG_TYPE_INFO, "%{public}@, %{public}@, %{public}@, %{public}@, %{public}@, %{public}@", buf, 0x3Eu);
        }

        uint64_t v4 = v115 + 1;
      }
      while (v135 != v4);
      uint64_t v129 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v126, (uint64_t)&v147, v163, 16);
      uint64_t v135 = v129;
    }
    while (v129);
  }

  return 0;
}

uint64_t sub_1C4F0BC04(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  v45[0] = 0;
  v45[1] = v45;
  v45[2] = 0x2020000000;
  v45[3] = 0;
  uint64_t v4 = objc_msgSend_count(*(void **)(a1 + 32), a2, a3);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1C4F0BF18;
  aBlock[3] = &unk_1E64F5F60;
  id v38 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 32);
  uint64_t v43 = v45;
  uint64_t v44 = v4;
  uint64_t v6 = *(void **)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 48);
  id v39 = v5;
  uint64_t v40 = v7;
  id v41 = v6;
  id v42 = *(id *)(a1 + 64);
  uint64_t v8 = (void (**)(void *, void))_Block_copy(aBlock);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v9 = *(id *)(a1 + 56);
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v33, v47, 16);
  if (v11)
  {
    uint64_t v12 = *(void *)v34;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v34 != v12) {
          objc_enumerationMutation(v9);
        }
        v8[2](v8, *(void *)(*((void *)&v33 + 1) + 8 * v13++));
      }
      while (v11 != v13);
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v14, (uint64_t)&v33, v47, 16);
    }
    while (v11);
  }

  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v15 = *(id *)(a1 + 64);
  uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v29, v46, 16);
  if (v17)
  {
    uint64_t v18 = *(void *)v30;
    do
    {
      uint64_t v19 = 0;
      do
      {
        if (*(void *)v30 != v18) {
          objc_enumerationMutation(v15);
        }
        v8[2](v8, *(void *)(*((void *)&v29 + 1) + 8 * v19++));
      }
      while (v17 != v19);
      uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v20, (uint64_t)&v29, v46, 16);
    }
    while (v17);
  }

  id v21 = *(void **)(a1 + 40);
  id v23 = objc_msgSend_objectAtIndex_(*(void **)(a1 + 32), v22, 0, (void)v29);
  uint64_t v25 = objc_msgSend_objectForKey_(v21, v24, (uint64_t)v23);

  if (v25)
  {
    do
      ((void (**)(void *, void *))v8)[2](v8, v25);
    while (objc_msgSend_count(*(void **)(a1 + 40), v26, v27));
  }

  _Block_object_dispose(v45, 8);
  return 0;
}

void sub_1C4F0BED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_1C4F0BF18(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
  id v6 = a2;
  uint64_t v8 = objc_msgSend_objectAtIndex_(v4, v7, v5);
  objc_msgSend_setObject_forKey_(v3, v9, (uint64_t)v6, v8);

  if (++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) == *(void *)(a1 + 80))
  {
    uint64_t v10 = *(void **)(*(void *)(a1 + 48) + 40);
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = 3221225472;
    uint64_t v17 = sub_1C4F0C064;
    uint64_t v18 = &unk_1E64F5F38;
    id v19 = *(id *)(a1 + 56);
    id v20 = *(id *)(a1 + 64);
    objc_msgSend_deleteEntriesMatching_label_error_predicate_(v10, v12, v11, off_1E64F5F18, 0, &v15);
    objc_msgSend_removeAllObjects(*(void **)(a1 + 32), v13, v14, v15, v16, v17, v18);
    *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 0;
  }
}

uint64_t sub_1C4F0C064(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"status = %ld AND (itemID = $K1 OR itemID = $K2 OR itemID = $K3 OR itemID = $K4 OR itemID = $K5 OR itemID = $K6 OR itemID = $K7 OR itemID = $K8)", 7, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_1C4F0CD58(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v162 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v142 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v143 = *(void *)(a1 + 32);
      uint64_t v144 = *(const char **)(a1 + 64);
      id v145 = v142;
      id v146 = NSStringFromSelector(v144);
      *(_DWORD *)buf = 138412546;
      uint64_t v159 = v143;
      __int16 v160 = 2114;
      id v161 = v146;
      _os_log_error_impl(&dword_1C4CFF000, v145, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache updateAssetHandlesForRegisteredMMCSItems:error:]_block_invoke", "CKDAssetCache.m", 927, "0 && \"already dropped\"");
  }
  long long v155 = 0u;
  long long v156 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  id obj = *(id *)(v3 + 40);
  uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v153, v157, 16);
  if (v5)
  {
    uint64_t v6 = v5;
    unint64_t v7 = 0x1E64EE000uLL;
    uint64_t v151 = *(void *)v154;
    uint64_t v147 = *MEMORY[0x1E4F19C40];
    do
    {
      uint64_t v8 = 0;
      uint64_t v149 = v6;
      do
      {
        if (*(void *)v154 != v151) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v153 + 1) + 8 * v8);
        uint64_t v10 = (void *)MEMORY[0x1C8789E70]();
        if (!objc_msgSend_itemID(v9, v11, v12)) {
          __assert_rtn("-[CKDAssetCache updateAssetHandlesForRegisteredMMCSItems:error:]_block_invoke", "CKDAssetCache.m", 931, "MMCSItem.itemID != 0 && \"MMCSItem.itemID != 0\"");
        }
        uint64_t v15 = (void *)MEMORY[0x1E4F28ED0];
        uint64_t v16 = objc_msgSend_itemID(v9, v13, v14);
        uint64_t v18 = objc_msgSend_numberWithUnsignedLongLong_(v15, v17, v16);
        id v19 = objc_alloc(*(Class *)(v7 + 3120));
        id v21 = objc_msgSend_initWithItemID_UUID_path_(v19, v20, (uint64_t)v18, 0, 0);
        uint64_t v24 = objc_msgSend_error(v9, v22, v23);

        if (!v24)
        {
          uint64_t v27 = *(void **)(v3 + 32);
          uint64_t v28 = objc_msgSend_deviceID(v9, v25, v26);
          long long v30 = objc_msgSend_volumeIndexForDeviceID_(v27, v29, (uint64_t)v28);
          objc_msgSend_setVolumeIndex_(v21, v31, (uint64_t)v30);

          long long v34 = objc_msgSend_fileID(v9, v32, v33);
          objc_msgSend_setFileID_(v21, v35, (uint64_t)v34);

          id v38 = objc_msgSend_generationID(v9, v36, v37);
          objc_msgSend_setGenerationID_(v21, v39, (uint64_t)v38);

          id v42 = objc_msgSend_signature(v9, v40, v41);
          objc_msgSend_setFileSignature_(v21, v43, (uint64_t)v42);

          uint64_t v44 = (void *)MEMORY[0x1E4F28ED0];
          uint64_t v47 = objc_msgSend_chunkCount(v9, v45, v46);
          uint64_t v49 = objc_msgSend_numberWithUnsignedInt_(v44, v48, v47);
          objc_msgSend_setChunkCount_(v21, v50, (uint64_t)v49);

          uint64_t v53 = objc_msgSend_modTimeInSeconds(v9, v51, v52);
          uint64_t v56 = v53;
          if (v53)
          {
            uint64_t v57 = (void *)MEMORY[0x1E4F1C9C8];
            objc_msgSend_doubleValue(v53, v54, v55);
            id v60 = objc_msgSend_dateWithTimeIntervalSince1970_(v57, v58, v59);
            objc_msgSend_setModTime_(v21, v61, (uint64_t)v60);
          }
          uint64_t v62 = (void *)MEMORY[0x1E4F28ED0];
          uint64_t v63 = objc_msgSend_fileSize(v9, v54, v55);
          uint64_t v65 = objc_msgSend_numberWithUnsignedLongLong_(v62, v64, v63);
          objc_msgSend_setFileSize_(v21, v66, (uint64_t)v65);

          objc_msgSend_setStatus_(v21, v67, (uint64_t)&unk_1F20AC8A0);
          uint64_t v70 = objc_msgSend_boundaryKey(v9, v68, v69);
          objc_msgSend_setBoundaryKeyHashUsingBoundaryKey_(v21, v71, (uint64_t)v70);

          unint64_t v7 = 0x1E64EE000uLL;
        }
        if (objc_msgSend_assetHandleExistsInDatabase_(*(void **)(*(void *)(v3 + 32) + 40), v25, (uint64_t)v18))
        {
          id v72 = objc_alloc_init(*(Class *)(v7 + 3120));
          objc_msgSend_setItemID_(v72, v73, (uint64_t)v18);
          uint64_t v76 = objc_msgSend_error(v9, v74, v75);

          if (v76)
          {
            if (*MEMORY[0x1E4F1A550] != -1) {
              dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            uint64_t v78 = (void *)*MEMORY[0x1E4F1A4F8];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_INFO))
            {
              long long v80 = v78;
              long long v83 = objc_msgSend_error(v9, v81, v82);
              *(_DWORD *)buf = 138543618;
              uint64_t v159 = (uint64_t)v18;
              __int16 v160 = 2112;
              id v161 = v83;
              _os_log_impl(&dword_1C4CFF000, v80, OS_LOG_TYPE_INFO, "Warn: itemID:%{public}@ error during register %@", buf, 0x16u);

              unint64_t v7 = 0x1E64EE000;
            }
            objc_msgSend_setFinished_(v9, v79, 1);
            sub_1C4F0D63C(*(void **)(v3 + 48), v18);
            objc_msgSend_setStatus_(v72, v84, (uint64_t)&unk_1F20AC870);
            id v86 = (id)objc_msgSend_saveStatus_(*(void **)(*(void *)(v3 + 32) + 40), v85, (uint64_t)v72);
          }
          else
          {
            id v92 = (id)objc_msgSend_fetchAllProperties_(*(void **)(*(void *)(v3 + 32) + 40), v77, (uint64_t)v72);
            id v152 = 0;
            int isEqualRevisionOfAssetHandle_differencesDescription = objc_msgSend_isEqualRevisionOfAssetHandle_differencesDescription_(v72, v93, (uint64_t)v21, &v152);
            id v97 = v152;
            if (isEqualRevisionOfAssetHandle_differencesDescription)
            {
              objc_msgSend_setItemID_(v21, v95, (uint64_t)v18);
              id v99 = (id)objc_msgSend_updateUsingObject_(*(void **)(*(void *)(v3 + 32) + 40), v98, (uint64_t)v21);
            }
            else
            {
              int v100 = objc_msgSend_isReaderReadFrom(v9, v95, v96);
              uint64_t v101 = (void *)*MEMORY[0x1E4F1A548];
              if (v100)
              {
                if (*MEMORY[0x1E4F1A550] != -1) {
                  dispatch_once(MEMORY[0x1E4F1A550], v101);
                }
                uint64_t v102 = *MEMORY[0x1E4F1A4F8];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138543618;
                  uint64_t v159 = (uint64_t)v18;
                  __int16 v160 = 2114;
                  id v161 = v97;
                  _os_log_impl(&dword_1C4CFF000, v102, OS_LOG_TYPE_INFO, "Warn: itemID:%{public}@ modified during register %{public}@", buf, 0x16u);
                }
                objc_msgSend_setFinished_(v9, v103, 1);
                uint64_t v104 = (void *)MEMORY[0x1E4F1A280];
                uint64_t v107 = objc_msgSend_fileURL(v9, v105, v106);
                uint64_t v110 = objc_msgSend_path(v107, v108, v109);
                uint64_t v112 = objc_msgSend_errorWithDomain_code_path_format_(v104, v111, v147, 17, v110, @"File appears to have changed during registration");
                objc_msgSend_setError_(v9, v113, (uint64_t)v112);
              }
              else
              {
                if (*MEMORY[0x1E4F1A550] != -1) {
                  dispatch_once(MEMORY[0x1E4F1A550], v101);
                }
                uint64_t v116 = *MEMORY[0x1E4F1A4F8];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138543618;
                  uint64_t v159 = (uint64_t)v18;
                  __int16 v160 = 2114;
                  id v161 = v97;
                  _os_log_impl(&dword_1C4CFF000, v116, OS_LOG_TYPE_INFO, "Warn: stale chunk registry state for itemID:%{public}@  %{public}@", buf, 0x16u);
                }
                objc_msgSend_setFinished_(v9, v117, 1);
                id v118 = (void *)MEMORY[0x1E4F1A280];
                uint64_t v121 = objc_msgSend_fileURL(v9, v119, v120);
                uint64_t v124 = objc_msgSend_path(v121, v122, v123);
                uint64_t v126 = objc_msgSend_errorWithDomain_code_path_format_(v118, v125, v147, 17, v124, @"Stale chunk state found during registration");
                objc_msgSend_setError_(v9, v127, (uint64_t)v126);
              }
              uint64_t v128 = *(void **)(a1 + 48);
              uint64_t v129 = (void *)MEMORY[0x1E4F28ED0];
              uint64_t v130 = objc_msgSend_itemID(v9, v114, v115);
              size_t v132 = objc_msgSend_numberWithUnsignedLongLong_(v129, v131, v130);
              uint64_t v133 = v128;
              uint64_t v3 = a1;
              sub_1C4F0D63C(v133, v132);

              objc_msgSend_setStatus_(v72, v134, (uint64_t)&unk_1F20AC870);
              id v136 = (id)objc_msgSend_saveStatus_(*(void **)(*(void *)(a1 + 32) + 40), v135, (uint64_t)v72);
            }

            unint64_t v7 = 0x1E64EE000;
          }

          uint64_t v6 = v149;
        }
        else
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          uint64_t v87 = (void *)*MEMORY[0x1E4F1A4F8];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_INFO))
          {
            uint64_t v88 = v87;
            uint64_t v91 = objc_msgSend_unsignedLongLongValue(v18, v89, v90);
            *(_DWORD *)buf = 134217984;
            uint64_t v159 = v91;
            _os_log_impl(&dword_1C4CFF000, v88, OS_LOG_TYPE_INFO, "Warn: itemID:%llu missing asset handle", buf, 0xCu);

            uint64_t v3 = a1;
          }
        }

        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v137, (uint64_t)&v153, v157, 16);
    }
    while (v6);
  }

  objc_msgSend_unregisterItemsAndDeleteUnregisteredAssetHandlesWithIDs_deleteUnregisteredAssetHandlesWithIDs_(*(void **)(v3 + 32), v138, *(void *)(v3 + 48), *(void *)(v3 + 56));
  return objc_msgSend_expireAssetHandlesIfNecessary(*(void **)(v3 + 32), v139, v140);
}

void sub_1C4F0D63C(void *a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (objc_msgSend_containsObject_(v3, v5, (uint64_t)v4))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unint64_t v7 = *MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      int v8 = 138412290;
      id v9 = v4;
      _os_log_error_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_ERROR, "set already contained object %@", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    objc_msgSend_addObject_(v3, v6, (uint64_t)v4);
  }
}

void sub_1C4F0D810(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    long long v30 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *(void *)(a1 + 32);
      long long v32 = *(const char **)(a1 + 48);
      uint64_t v33 = v30;
      long long v34 = NSStringFromSelector(v32);
      *(_DWORD *)buf = 138412546;
      uint64_t v41 = v31;
      __int16 v42 = 2114;
      uint64_t v43 = v34;
      _os_log_error_impl(&dword_1C4CFF000, v33, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache updateAssetHandlesForChunkedMMCSItems:error:]_block_invoke", "CKDAssetCache.m", 994, "0 && \"already dropped\"");
  }
  id v4 = objc_alloc_init(CKDAssetHandle);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v5 = *(id *)(a1 + 40);
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v35, v39, 16);
  if (v7)
  {
    uint64_t v10 = v7;
    uint64_t v11 = *(void *)v36;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v36 != v11) {
          objc_enumerationMutation(v5);
        }
        uint64_t v13 = *(void **)(*((void *)&v35 + 1) + 8 * i);
        if (objc_msgSend_itemID(v13, v8, v9, (void)v35))
        {
          uint64_t v16 = (void *)MEMORY[0x1E4F28ED0];
          uint64_t v17 = objc_msgSend_itemID(v13, v14, v15);
          id v19 = objc_msgSend_numberWithUnsignedLongLong_(v16, v18, v17);
          objc_msgSend_setItemID_(v4, v20, (uint64_t)v19);
        }
        else
        {
          id v19 = 0;
          objc_msgSend_setItemID_(v4, v14, 0);
        }
        uint64_t v23 = (void *)MEMORY[0x1E4F28ED0];
        uint64_t v24 = objc_msgSend_chunkCount(v13, v21, v22);
        uint64_t v26 = objc_msgSend_numberWithUnsignedInt_(v23, v25, v24);
        objc_msgSend_setChunkCount_(v4, v27, (uint64_t)v26);

        id v29 = (id)objc_msgSend_saveChunkCount_(*(void **)(*(void *)(a1 + 32) + 40), v28, (uint64_t)v4);
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v35, v39, 16);
    }
    while (v10);
  }
}

void sub_1C4F0DC50(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v185 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    long long v155 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v156 = *(void *)(a1 + 32);
      __int16 v157 = *(const char **)(a1 + 64);
      uint64_t v158 = v155;
      uint64_t v159 = NSStringFromSelector(v157);
      *(_DWORD *)buf = 138412546;
      uint64_t v182 = v156;
      __int16 v183 = 2114;
      uint64_t v184 = v159;
      _os_log_error_impl(&dword_1C4CFF000, v158, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache updateAssetHandlesForGetMMCSItems:cloneItems:error:]_block_invoke", "CKDAssetCache.m", 1024, "0 && \"already dropped\"");
  }
  id v4 = objc_alloc_init(CKDAssetHandle);
  long long v174 = 0u;
  long long v175 = 0u;
  long long v176 = 0u;
  long long v177 = 0u;
  id v5 = *(id *)(v3 + 40);
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v174, v180, 16);
  if (v7)
  {
    uint64_t v11 = v7;
    unint64_t v12 = 0x1E4F28000uLL;
    uint64_t v171 = *(void *)v175;
    uint64_t v168 = *MEMORY[0x1E4F19DD8];
    *(void *)&long long v10 = 138412290;
    long long v160 = v10;
    id v166 = v5;
    do
    {
      uint64_t v13 = 0;
      uint64_t v170 = v11;
      do
      {
        if (*(void *)v175 != v171) {
          objc_enumerationMutation(v5);
        }
        uint64_t v14 = *(void **)(*((void *)&v174 + 1) + 8 * v13);
        if (!objc_msgSend_itemID(v14, v8, v9, v160)) {
          __assert_rtn("-[CKDAssetCache updateAssetHandlesForGetMMCSItems:cloneItems:error:]_block_invoke", "CKDAssetCache.m", 1029, "MMCSItem.itemID != 0 && \"0 itemID\"");
        }
        uint64_t v17 = *(void **)(v12 + 3792);
        uint64_t v18 = objc_msgSend_itemID(v14, v15, v16);
        id v20 = objc_msgSend_numberWithUnsignedLongLong_(v17, v19, v18);
        objc_msgSend_setItemID_(v4, v21, (uint64_t)v20);
        uint64_t v25 = objc_msgSend_fetchAllProperties_(*(void **)(*(void *)(v3 + 32) + 40), v22, (uint64_t)v4);
        if (!v25)
        {
          uint64_t v31 = objc_msgSend_error(v14, v23, v24);

          if (v31)
          {
            long long v34 = objc_msgSend_error(v14, v32, v33);
            long long v37 = objc_msgSend_domain(v34, v35, v36);
            if (objc_msgSend_isEqualToString_(v37, v38, v168))
            {
              uint64_t v41 = objc_msgSend_error(v14, v39, v40);
              if (objc_msgSend_code(v41, v42, v43) == 3003)
              {

                id v5 = v166;
                goto LABEL_26;
              }
              id v84 = objc_msgSend_error(v14, v44, v45);
              uint64_t v87 = objc_msgSend_code(v84, v85, v86);

              id v5 = v166;
              if (v87 == 3006)
              {
LABEL_26:
                objc_msgSend_setStatus_(v4, v46, (uint64_t)&unk_1F20AC870);
                uint64_t v88 = *(void **)(v3 + 48);
                uint64_t v91 = objc_msgSend_itemID(v4, v89, v90);
                sub_1C4F0D63C(v88, v91);

LABEL_27:
                uint64_t v11 = v170;
LABEL_59:
                id v149 = (id)objc_msgSend_updateUsingObject_(*(void **)(*(void *)(v3 + 32) + 40), v83, (uint64_t)v4);
                goto LABEL_60;
              }
            }
            else
            {
            }
            objc_msgSend_setStatus_(v4, v46, (uint64_t)&unk_1F20AC840);
            goto LABEL_27;
          }
          uint64_t v169 = objc_msgSend_deviceID(v14, v32, v33);
          if (!v169) {
            goto LABEL_19;
          }
          uint64_t v49 = *(void **)(v3 + 32);
          uint64_t v50 = objc_msgSend_deviceID(v14, v47, v48);
          uint64_t v52 = objc_msgSend_volumeIndexForDeviceID_(v49, v51, (uint64_t)v50);
          objc_msgSend_setVolumeIndex_(v4, v53, (uint64_t)v52);

          uint64_t v56 = objc_msgSend_volumeIndex(v4, v54, v55);

          if (!v56)
          {
            if (*MEMORY[0x1E4F1A550] != -1) {
              dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            uint64_t v110 = (void *)*MEMORY[0x1E4F1A4F8];
            uint64_t v11 = v170;
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
            {
              long long v150 = v110;
              long long v153 = objc_msgSend_deviceID(v14, v151, v152);
              *(_DWORD *)buf = 138543618;
              uint64_t v182 = (uint64_t)v153;
              __int16 v183 = 2112;
              uint64_t v184 = v14;
              _os_log_error_impl(&dword_1C4CFF000, v150, OS_LOG_TYPE_ERROR, "Unable to find volumeIndex for deviceID %{public}@: Deleting asset handle for %@", buf, 0x16u);

              uint64_t v11 = v170;
            }
            objc_msgSend_setStatus_(v4, v111, (uint64_t)&unk_1F20AC870);
            uint64_t v112 = *(void **)(v3 + 48);
            uint64_t v115 = objc_msgSend_itemID(v4, v113, v114);
            sub_1C4F0D63C(v112, v115);

            if (*MEMORY[0x1E4F1A550] != -1) {
              dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            uint64_t v116 = (void *)v169;
            id v117 = *MEMORY[0x1E4F1A4F8];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v160;
              uint64_t v182 = (uint64_t)v4;
              _os_log_error_impl(&dword_1C4CFF000, v117, OS_LOG_TYPE_ERROR, "Unregistering %@", buf, 0xCu);
            }
          }
          else
          {
LABEL_19:
            uint64_t v57 = objc_msgSend_fileID(v14, v47, v48);
            objc_msgSend_setFileID_(v4, v58, (uint64_t)v57);

            uint64_t v61 = objc_msgSend_generationID(v14, v59, v60);
            objc_msgSend_setGenerationID_(v4, v62, (uint64_t)v61);

            uint64_t v65 = objc_msgSend_modTimeInSeconds(v14, v63, v64);
            id v68 = v65;
            if (v65)
            {
              uint64_t v69 = (void *)MEMORY[0x1E4F1C9C8];
              objc_msgSend_doubleValue(v65, v66, v67);
              id v72 = objc_msgSend_dateWithTimeIntervalSince1970_(v69, v70, v71);
              objc_msgSend_setModTime_(v4, v73, (uint64_t)v72);
            }
            if (objc_msgSend_hasSize(v14, v66, v67))
            {
              uint64_t v76 = (void *)MEMORY[0x1E4F28ED0];
              uint64_t v77 = objc_msgSend_fileSize(v14, v74, v75);
              uint64_t v79 = objc_msgSend_numberWithUnsignedLongLong_(v76, v78, v77);
              objc_msgSend_setFileSize_(v4, v80, (uint64_t)v79);

              uint64_t v3 = a1;
            }
            else
            {
              objc_msgSend_setFileSize_(v4, v74, 0);
            }
            id v92 = (void *)MEMORY[0x1E4F28ED0];
            uint64_t v93 = objc_msgSend_chunkCount(v14, v81, v82);
            id v95 = objc_msgSend_numberWithUnsignedInt_(v92, v94, v93);
            objc_msgSend_setChunkCount_(v4, v96, (uint64_t)v95);

            objc_msgSend_setStatus_(v4, v97, (uint64_t)&unk_1F20AC8B8);
            if (*(unsigned char *)(v3 + 72))
            {
              v178[0] = @"SIG";
              int v100 = objc_msgSend_fileSignature(v4, v98, v99);
              v178[1] = @"CLONED";
              v179[0] = v100;
              v179[1] = &unk_1F20AC8D0;
              uint64_t v102 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v101, (uint64_t)v179, v178, 2);

              id v103 = (void *)v102;
              uint64_t v104 = *(void **)(*(void *)(v3 + 32) + 40);
              id v173 = 0;
              objc_msgSend_entryWithValues_label_error_setupBlock_(v104, v105, v102, off_1E64F5FD0, &v173, &unk_1F2044090);
              id v106 = (id)objc_claimAutoreleasedReturnValue();
              id v167 = v173;
              if (v167)
              {
                if (*MEMORY[0x1E4F1A550] != -1) {
                  dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
                }
                uint64_t v109 = *MEMORY[0x1E4F1A4F8];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138543362;
                  uint64_t v182 = (uint64_t)v167;
                  _os_log_error_impl(&dword_1C4CFF000, v109, OS_LOG_TYPE_ERROR, "Cloned file cache search error: %{public}@", buf, 0xCu);
                }
              }
              else
              {
                uint64_t v164 = v103;
                if (v106)
                {
                  uint64_t v118 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v107, v108);
                  uint64_t v121 = objc_msgSend_path(v106, v119, v120);
                  uint64_t v162 = (void *)v118;
                  LOBYTE(v11_Block_object_dispose(&STACK[0x3F0], 8) = objc_msgSend_fileExistsAtPath_((void *)v118, v122, (uint64_t)v121);

                  if (v118)
                  {

                    id v5 = v166;
                    id v103 = v164;
                    goto LABEL_56;
                  }
                  uint64_t v125 = (void *)MEMORY[0x1E4F1CAA0];
                  uint64_t v126 = objc_msgSend_itemID(v106, v123, v124);
                  uint64_t v128 = objc_msgSend_orderedSetWithObject_(v125, v127, (uint64_t)v126);

                  objc_msgSend_unregisterItemsAndDeleteUnregisteredAssetHandlesWithIDs_deleteUnregisteredAssetHandlesWithIDs_(*(void **)(v3 + 32), v129, (uint64_t)v128, 0);
                  id v5 = v166;
                }
                uint64_t v130 = objc_msgSend_clonedFileCache(*(void **)(v3 + 32), v107, v108);
                id v172 = 0;
                size_t v132 = objc_msgSend_cloneMMCSItem_error_(v130, v131, (uint64_t)v14, &v172);
                id v106 = v172;

                size_t v163 = v132;
                if (v132)
                {
                  uint64_t v135 = objc_msgSend_path(v132, v133, v134);
                  int v138 = objc_msgSend_getFileMetadataAtPath_error_(MEMORY[0x1E4F19E50], v136, (uint64_t)v135, 0);
                  if (v138)
                  {
                    objc_msgSend_setPath_(v4, v137, (uint64_t)v135);
                    objc_msgSend_fileID(v138, v139, v140);
                    uint64_t v141 = v161 = v135;
                    objc_msgSend_setFileID_(v4, v142, (uint64_t)v141);

                    id v145 = objc_msgSend_generationID(v138, v143, v144);
                    objc_msgSend_setGenerationID_(v4, v146, (uint64_t)v145);

                    uint64_t v135 = v161;
                    objc_msgSend_setIsCloned_(v4, v147, (uint64_t)&unk_1F20AC8D0);
                  }

                  id v103 = v164;
                }
                else
                {
                  if (*MEMORY[0x1E4F1A550] != -1) {
                    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
                  }
                  id v103 = v164;
                  long long v148 = *MEMORY[0x1E4F1A4F8];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138543362;
                    uint64_t v182 = (uint64_t)v106;
                    _os_log_error_impl(&dword_1C4CFF000, v148, OS_LOG_TYPE_ERROR, "Failed to clone item: %{public}@", buf, 0xCu);
                  }
                }
              }
LABEL_56:
            }
            uint64_t v11 = v170;
            uint64_t v116 = (void *)v169;
          }

          goto LABEL_59;
        }
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v26 = (void *)*MEMORY[0x1E4F1A4F8];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_INFO))
        {
          uint64_t v27 = v26;
          uint64_t v30 = objc_msgSend_unsignedLongLongValue(v20, v28, v29);
          *(_DWORD *)buf = 134217984;
          uint64_t v182 = v30;
          _os_log_impl(&dword_1C4CFF000, v27, OS_LOG_TYPE_INFO, "Warn: itemID:%llu missing asset handle", buf, 0xCu);
        }
LABEL_60:

        ++v13;
        unint64_t v12 = 0x1E4F28000;
      }
      while (v11 != v13);
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v174, v180, 16);
    }
    while (v11);
  }

  objc_msgSend_unregisterItemsAndDeleteUnregisteredAssetHandlesWithIDs_deleteUnregisteredAssetHandlesWithIDs_(*(void **)(v3 + 32), v154, *(void *)(v3 + 48), *(void *)(v3 + 56));
}

void sub_1C4F0E744(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F28F60];
  id v7 = a2;
  id v4 = objc_msgSend_predicateWithFormat_(v2, v3, @"fileSignature = $SIG AND isCloned = $CLONED");
  objc_msgSend_setSearchPredicate_(v7, v5, (uint64_t)v4);

  objc_msgSend_setFetchedProperties_(v7, v6, (uint64_t)&unk_1F20AB7C0);
}

void sub_1C4F0E8EC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v84 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v85 = *(void *)(a1 + 32);
      uint64_t v86 = *(const char **)(a1 + 64);
      uint64_t v87 = v84;
      uint64_t v88 = NSStringFromSelector(v86);
      *(_DWORD *)buf = 138412546;
      uint64_t v100 = v85;
      __int16 v101 = 2114;
      uint64_t v102 = v88;
      _os_log_error_impl(&dword_1C4CFF000, v87, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache updateAssetHandlesForPutMMCSItems:cloneItems:error:]_block_invoke", "CKDAssetCache.m", 1134, "0 && \"already dropped\"");
  }
  id v4 = objc_alloc_init(CKDAssetHandle);
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  id obj = *(id *)(a1 + 40);
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v94, v98, 16);
  if (v6)
  {
    uint64_t v9 = v6;
    uint64_t v10 = *(void *)v95;
    uint64_t v90 = *MEMORY[0x1E4F19DD8];
    uint64_t v91 = *(void *)v95;
    do
    {
      uint64_t v11 = 0;
      uint64_t v92 = v9;
      do
      {
        if (*(void *)v95 != v10) {
          objc_enumerationMutation(obj);
        }
        unint64_t v12 = *(void **)(*((void *)&v94 + 1) + 8 * v11);
        if (!objc_msgSend_itemID(v12, v7, v8)) {
          __assert_rtn("-[CKDAssetCache updateAssetHandlesForPutMMCSItems:cloneItems:error:]_block_invoke", "CKDAssetCache.m", 1139, "MMCSItem.itemID != 0 && \"0 itemID\"");
        }
        uint64_t v15 = (void *)MEMORY[0x1E4F28ED0];
        uint64_t v16 = objc_msgSend_itemID(v12, v13, v14);
        uint64_t v18 = objc_msgSend_numberWithUnsignedLongLong_(v15, v17, v16);
        objc_msgSend_setItemID_(v4, v19, (uint64_t)v18);
        uint64_t v23 = objc_msgSend_fetchAllProperties_(*(void **)(*(void *)(a1 + 32) + 40), v20, (uint64_t)v4);
        if (v23)
        {
          if (objc_msgSend_CKIsNoMatchingRowError_(MEMORY[0x1E4F28C58], v21, (uint64_t)v23))
          {
            if (*MEMORY[0x1E4F1A550] != -1) {
              dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            uint64_t v24 = (void *)*MEMORY[0x1E4F1A4F8];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_INFO))
            {
              uint64_t v25 = v24;
              uint64_t v28 = objc_msgSend_unsignedLongLongValue(v18, v26, v27);
              *(_DWORD *)buf = 134217984;
              uint64_t v100 = v28;
              _os_log_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_INFO, "Warn: itemID:%llu missing asset handle", buf, 0xCu);
            }
          }
          goto LABEL_38;
        }
        uint64_t v29 = objc_msgSend_error(v12, v21, v22);

        if (!v29)
        {
          if (!objc_msgSend_chunkCount(v12, v30, v31))
          {
            uint64_t v47 = objc_msgSend_package(v12, v45, v46);

            if (!v47)
            {
              if (*MEMORY[0x1E4F1A550] != -1) {
                dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
              }
              uint64_t v48 = (void *)*MEMORY[0x1E4F1A4F8];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
              {
                uint64_t v49 = v48;
                uint64_t v52 = objc_msgSend_unsignedLongLongValue(v18, v50, v51);
                *(_DWORD *)buf = 134217984;
                uint64_t v100 = v52;
                _os_log_error_impl(&dword_1C4CFF000, v49, OS_LOG_TYPE_ERROR, "itemID:%llu, missing chunk count", buf, 0xCu);
                goto LABEL_27;
              }
            }
LABEL_28:
            objc_msgSend_setStatus_(v4, v45, (uint64_t)&unk_1F20AC8B8);
            goto LABEL_31;
          }
LABEL_26:
          long long v54 = (void *)MEMORY[0x1E4F28ED0];
          uint64_t v55 = objc_msgSend_chunkCount(v12, v45, v46);
          uint64_t v49 = objc_msgSend_numberWithUnsignedInt_(v54, v56, v55);
          objc_msgSend_setChunkCount_(v4, v57, (uint64_t)v49);
LABEL_27:

          goto LABEL_28;
        }
        long long v32 = objc_msgSend_error(v12, v30, v31);
        long long v35 = objc_msgSend_domain(v32, v33, v34);
        if ((objc_msgSend_isEqualToString_(v35, v36, v90) & 1) == 0)
        {

LABEL_25:
          uint64_t v10 = v91;
          uint64_t v9 = v92;
          if (!objc_msgSend_chunkCount(v12, v44, v53)) {
            goto LABEL_28;
          }
          goto LABEL_26;
        }
        id v39 = objc_msgSend_error(v12, v37, v38);
        if (objc_msgSend_code(v39, v40, v41) == 3003)
        {
        }
        else
        {
          uint64_t v60 = objc_msgSend_error(v12, v42, v43);
          uint64_t v89 = objc_msgSend_code(v60, v61, v62);

          if (v89 != 3006) {
            goto LABEL_25;
          }
        }
        objc_msgSend_setStatus_(v4, v44, (uint64_t)&unk_1F20AC870);
        sub_1C4F0D63C(*(void **)(a1 + 48), v18);
        uint64_t v10 = v91;
        uint64_t v9 = v92;
LABEL_31:
        uint64_t v63 = *(void ***)(a1 + 32);
        if (*(unsigned char *)(a1 + 72))
        {
          uint64_t v64 = objc_msgSend_clonedFileCache(v63, v58, v59);
          uint64_t v66 = objc_msgSend_cloneMMCSItem_error_(v64, v65, (uint64_t)v12, 0);

          if (v66)
          {
            uint64_t v69 = objc_msgSend_path(v66, v67, v68);
            id v72 = objc_msgSend_getFileMetadataAtPath_error_(MEMORY[0x1E4F19E50], v70, (uint64_t)v69, 0);
            if (v72)
            {
              objc_msgSend_setPath_(v4, v71, (uint64_t)v69);
              uint64_t v75 = objc_msgSend_fileID(v72, v73, v74);
              objc_msgSend_setFileID_(v4, v76, (uint64_t)v75);

              uint64_t v79 = objc_msgSend_generationID(v72, v77, v78);
              objc_msgSend_setGenerationID_(v4, v80, (uint64_t)v79);
            }
            uint64_t v10 = v91;
            uint64_t v9 = v92;
          }
          id v81 = (id)objc_msgSend_updateUsingObject_(*(void **)(*(void *)(a1 + 32) + 40), v67, (uint64_t)v4);
        }
        else
        {
          id v82 = (id)objc_msgSend_saveStatusAndChunkCount_(v63[5], v58, (uint64_t)v4);
        }
LABEL_38:

        ++v11;
      }
      while (v9 != v11);
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v94, v98, 16);
    }
    while (v9);
  }

  objc_msgSend_unregisterItemsAndDeleteUnregisteredAssetHandlesWithIDs_deleteUnregisteredAssetHandlesWithIDs_(*(void **)(a1 + 32), v83, *(void *)(a1 + 48), *(void *)(a1 + 56));
}

void sub_1C4F0F22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4F0F248(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unint64_t v12 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(const char **)(a1 + 72);
      uint64_t v15 = v12;
      uint64_t v16 = NSStringFromSelector(v14);
      *(_DWORD *)buf = 138412546;
      uint64_t v23 = v13;
      __int16 v24 = 2114;
      uint64_t v25 = v16;
      _os_log_error_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache trackCachedButNotRegisteredMMCSItems:error:]_block_invoke", "CKDAssetCache.m", 1215, "0 && \"already dropped\"");
  }
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 40);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = sub_1C4F0F43C;
  v17[3] = &unk_1E64F5490;
  v17[4] = v4;
  id v18 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 72);
  id v19 = v6;
  uint64_t v21 = v7;
  id v20 = *(id *)(a1 + 56);
  uint64_t v9 = objc_msgSend_performTransaction_(v5, v8, (uint64_t)v17);
  uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

id sub_1C4F0F43C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  objc_msgSend_fileDownloadPath(*(void **)(a1 + 32), a2, a3);
  id v106 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = objc_msgSend_count(*(void **)(v3 + 40), v4, v5);
  if (v6 != objc_msgSend_count(*(void **)(v3 + 48), v7, v8))
  {
    uint64_t v100 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v9, v10);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v100, v101, *(void *)(v3 + 64), *(void *)(v3 + 32), @"CKDAssetCache.m", 1222, @"handles and items count don't match");
  }
  long long v118 = 0u;
  long long v119 = 0u;
  long long v116 = 0u;
  long long v117 = 0u;
  id obj = *(id *)(v3 + 48);
  uint64_t v113 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v116, v121, 16);
  if (v113)
  {
    uint64_t v14 = 0;
    id v114 = 0;
    uint64_t v112 = *(void *)v117;
    uint64_t v103 = *MEMORY[0x1E4F19DD8];
    uint64_t v104 = v3;
LABEL_5:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(void *)v117 != v112) {
        objc_enumerationMutation(obj);
      }
      uint64_t v16 = *(void **)(*((void *)&v116 + 1) + 8 * v15);
      uint64_t v17 = objc_msgSend_fileURL(v16, v12, v13);
      id v20 = objc_msgSend_path(v17, v18, v19);
      if (objc_msgSend_itemID(v16, v21, v22))
      {
        uint64_t v25 = (void *)MEMORY[0x1E4F28ED0];
        uint64_t v26 = objc_msgSend_itemID(v16, v23, v24);
        uint64_t v28 = objc_msgSend_numberWithUnsignedLongLong_(v25, v27, v26);
      }
      else
      {
        uint64_t v28 = 0;
      }
      uint64_t v29 = objc_msgSend_signature(v16, v23, v24);
      long long v32 = objc_msgSend_error(v16, v30, v31);

      if (v32)
      {
        objc_msgSend_error(v16, v33, v34);
        long long v35 = v114;
        int v36 = 4;
        id v114 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        uint64_t v109 = v14;
        uint64_t v110 = v28;
        long long v35 = objc_msgSend_objectAtIndex_(*(void **)(v3 + 40), v33, v14);
        id v38 = (id)objc_msgSend_insertObject_(*(void **)(*(void *)(v3 + 32) + 40), v37, (uint64_t)v35);
        uint64_t v41 = objc_msgSend_UUID(v35, v39, v40);
        uint64_t v44 = objc_msgSend_UUIDString(v41, v42, v43);

        id v45 = [NSString alloc];
        uint64_t v46 = CKStringWithData();
        __darwin_time_t v111 = v44;
        uint64_t v48 = objc_msgSend_initWithFormat_(v45, v47, @"%@.%@", v44, v46);

        uint64_t v108 = (void *)v48;
        uint64_t v50 = objc_msgSend_stringByAppendingPathComponent_(v106, v49, v48);
        id v51 = v20;
        long long v54 = (const std::__fs::filesystem::path *)objc_msgSend_fileSystemRepresentation(v51, v52, v53);
        id v55 = v50;
        __int16 v58 = (const std::__fs::filesystem::path *)objc_msgSend_fileSystemRepresentation(v55, v56, v57);
        rename(v54, v58, v59);
        if (v60)
        {
          double v105 = v55;
          uint64_t v61 = *__error();
          if (v61 == 2)
          {
            memset(&v120, 0, sizeof(v120));
            id v62 = v106;
            uint64_t v65 = (const char *)objc_msgSend_fileSystemRepresentation(v62, v63, v64);
            if (stat(v65, &v120) == -1 && *__error() == 2)
            {
              if (*MEMORY[0x1E4F1A550] != -1) {
                dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
              }
              uint64_t v102 = *MEMORY[0x1E4F1A500];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_1C4CFF000, v102, OS_LOG_TYPE_ERROR, "Cache directory was unexpectedly removed. cloudd exiting to recover.", buf, 2u);
              }
              exit(1);
            }
          }
          uint64_t v66 = (void *)MEMORY[0x1E4F1A280];
          uint64_t v67 = strerror(v61);
          uint64_t v69 = objc_msgSend_errorWithDomain_code_format_(v66, v68, v103, 1000, @"rename failed: %d (%s)", v61, v67);

          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          uint64_t v70 = (void *)*MEMORY[0x1E4F1A4F8];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
          {
            uint64_t v79 = v70;
            id v82 = objc_msgSend_CKSanitizedPath(v51, v80, v81);
            uint64_t v85 = objc_msgSend_CKSanitizedPath(v105, v83, v84);
            uint64_t v88 = objc_msgSend_unsignedLongLongValue(v110, v86, v87);
            v120.st_dev = 138544386;
            *(void *)&v120.st_mode = v82;
            WORD2(v120.st_ino) = 2114;
            *(__darwin_ino64_t *)((char *)&v120.st_ino + 6) = (__darwin_ino64_t)v85;
            HIWORD(v120.st_gid) = 2048;
            *(void *)&v120.st_rdev = v88;
            LOWORD(v120.st_atimespec.tv_sec) = 2114;
            *(__darwin_time_t *)((char *)&v120.st_atimespec.tv_sec + 2) = v111;
            WORD1(v120.st_atimespec.tv_nsec) = 2112;
            *(uint64_t *)((char *)&v120.st_atimespec.tv_nsec + 4) = v69;
            _os_log_error_impl(&dword_1C4CFF000, v79, OS_LOG_TYPE_ERROR, "Failed moving asset from %{public}@ to %{public}@ for itemID %llu and UUID %{public}@: %@", (uint8_t *)&v120, 0x34u);
          }
          objc_msgSend_setError_(v16, v71, v69);
          int v36 = 4;
          id v114 = (id)v69;
          uint64_t v3 = v104;
          id v72 = v105;
          id v73 = (void *)v111;
        }
        else
        {
          id v72 = v55;
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          uint64_t v74 = (void *)*MEMORY[0x1E4F1A4F8];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_DEBUG))
          {
            uint64_t v89 = v74;
            uint64_t v92 = objc_msgSend_CKSanitizedPath(v51, v90, v91);
            long long v95 = objc_msgSend_CKSanitizedPath(v72, v93, v94);
            uint64_t v98 = objc_msgSend_unsignedLongLongValue(v110, v96, v97);
            v120.st_dev = 138544130;
            *(void *)&v120.st_mode = v92;
            WORD2(v120.st_ino) = 2114;
            *(__darwin_ino64_t *)((char *)&v120.st_ino + 6) = (__darwin_ino64_t)v95;
            HIWORD(v120.st_gid) = 2048;
            *(void *)&v120.st_rdev = v98;
            LOWORD(v120.st_atimespec.tv_sec) = 2114;
            *(__darwin_time_t *)((char *)&v120.st_atimespec.tv_sec + 2) = v111;
            _os_log_debug_impl(&dword_1C4CFF000, v89, OS_LOG_TYPE_DEBUG, "Moved asset from %{public}@ to %{public}@ for itemID %llu and UUID %{public}@", (uint8_t *)&v120, 0x2Au);
          }
          uint64_t v76 = objc_msgSend_fileURLWithPath_isDirectory_(MEMORY[0x1E4F1CB10], v75, (uint64_t)v72, 0);
          objc_msgSend_setFileURL_(v16, v77, (uint64_t)v76);

          uint64_t v3 = v104;
          id v73 = (void *)v111;
          objc_msgSend_setObject_forKey_(*(void **)(v104 + 56), v78, (uint64_t)v16, v111);
          int v36 = 0;
        }
        uint64_t v14 = v109 + 1;

        uint64_t v28 = v110;
      }

      if (v36) {
        break;
      }
      if (v113 == ++v15)
      {
        uint64_t v113 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v116, v121, 16);
        if (v113) {
          goto LABEL_5;
        }
        break;
      }
    }
  }
  else
  {
    id v114 = 0;
  }

  return v114;
}

uint64_t sub_1C4F0FB08(uint64_t a1, const char *a2, void *a3)
{
  return objc_msgSend_setTrackingUUID_(a3, a2, (uint64_t)a2);
}

uint64_t sub_1C4F10108(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4F104B8(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F28F60];
  uint64_t v3 = *(void *)(a1 + 32);
  id v8 = a2;
  uint64_t v5 = objc_msgSend_predicateWithFormat_(v2, v4, @"chunkCount != NULL AND chunkCount > 0 AND volumeIndex = $VOL AND status = $STATUS AND fileID IN %@", v3);
  objc_msgSend_setSearchPredicate_(v8, v6, (uint64_t)v5);

  objc_msgSend_setFetchedProperties_(v8, v7, (uint64_t)&unk_1F20AB7D8);
}

void sub_1C4F10844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4F10868(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v8 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(const char **)(a1 + 72);
      uint64_t v11 = v8;
      unint64_t v12 = NSStringFromSelector(v10);
      *(_DWORD *)buf = 138412546;
      uint64_t v18 = v9;
      __int16 v19 = 2114;
      id v20 = v12;
      _os_log_error_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache startTrackingRegisterOrPutAssetHandles:operationType:error:]_block_invoke", "CKDAssetCache.m", 1410, "0 && \"already dropped\"");
  }
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C4F10A30;
  v13[3] = &unk_1E64F60B0;
  void v13[4] = v4;
  long long v15 = *(_OWORD *)(a1 + 64);
  char v16 = *(unsigned char *)(a1 + 80);
  id v14 = *(id *)(a1 + 48);
  objc_msgSend_enumerateAssetHandlesSegregatedByVolume_block_(v4, v6, v5, v13);
  objc_msgSend_unregisterItemsAndDeleteUnregisteredAssetHandlesWithIDs_deleteUnregisteredAssetHandlesWithIDs_(*(void **)(a1 + 32), v7, *(void *)(a1 + 48), *(void *)(a1 + 56));
}

void sub_1C4F10A30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)MEMORY[0x1E4F1CA98];
  id v7 = a2;
  objc_msgSend_null(v6, v8, v9);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  if (v10 == v7) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v7;
  }
  id v12 = v11;

  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = *(void **)(v13 + 40);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = sub_1C4F10B70;
  v22[3] = &unk_1E64F6088;
  id v23 = v12;
  uint64_t v24 = v13;
  uint64_t v15 = *(void *)(a1 + 56);
  id v25 = v5;
  uint64_t v27 = v15;
  char v28 = *(unsigned char *)(a1 + 64);
  id v26 = *(id *)(a1 + 40);
  id v16 = v5;
  id v17 = v12;
  uint64_t v19 = objc_msgSend_performTransaction_(v14, v18, (uint64_t)v22);
  uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v21 = *(void **)(v20 + 40);
  *(void *)(v20 + 40) = v19;
}

id sub_1C4F10B70(uint64_t a1, const char *a2)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    uint64_t v65 = objc_msgSend_existingEntriesForRegisterOrPutHandles_volumeIndex_(*(void **)(a1 + 40), a2, *(void *)(a1 + 48));
  }
  else
  {
    uint64_t v65 = 0;
  }
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  id v3 = *(id *)(a1 + 48);
  uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v72, v83, 16);
  if (v5)
  {
    uint64_t v9 = v5;
    uint64_t v10 = *(void *)v73;
    *(void *)&long long v8 = 138412290;
    long long v61 = v8;
    uint64_t v62 = *(void *)v73;
    id v63 = v3;
LABEL_6:
    uint64_t v11 = 0;
    uint64_t v64 = v9;
    while (1)
    {
      if (*(void *)v73 != v10) {
        objc_enumerationMutation(v3);
      }
      id v12 = *(void **)(*((void *)&v72 + 1) + 8 * v11);
      uint64_t v13 = objc_msgSend_itemID(v12, v6, v7, v61);

      if (v13)
      {
        __int16 v58 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v14, v15);
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v58, v59, *(void *)(a1 + 64), *(void *)(a1 + 40), @"CKDAssetCache.m", 1422, @"Expected nil itemID");
      }
      objc_msgSend_setStatus_(v12, v14, (uint64_t)&unk_1F20AC8E8);
      uint64_t v18 = objc_msgSend_fileID(v12, v16, v17);
      uint64_t v21 = (void *)v18;
      if (*(void *)(a1 + 32))
      {
        if (v18)
        {
          uint64_t v22 = objc_msgSend_generationID(v12, v19, v20);

          if (v22)
          {
            uint64_t v66 = v21;
            id v23 = objc_msgSend_objectForKey_(v65, v19, (uint64_t)v21);
            long long v68 = 0u;
            long long v69 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            id v24 = v23;
            uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v68, v82, 16);
            if (v26)
            {
              uint64_t v28 = v26;
              uint64_t v29 = *(void *)v69;
              while (2)
              {
                uint64_t v30 = 0;
                do
                {
                  if (*(void *)v69 != v29) {
                    objc_enumerationMutation(v24);
                  }
                  uint64_t v31 = *(void **)(*((void *)&v68 + 1) + 8 * v30);
                  id v67 = 0;
                  int isEqualRevisionOfAssetHandle_differencesDescription = objc_msgSend_isEqualRevisionOfAssetHandle_differencesDescription_(v12, v27, (uint64_t)v31, &v67);
                  id v35 = v67;
                  if (isEqualRevisionOfAssetHandle_differencesDescription)
                  {
                    if (*(unsigned char *)(a1 + 72))
                    {
                      uint64_t v44 = objc_msgSend_itemID(v31, v33, v34);
                      objc_msgSend_setItemID_(v12, v45, (uint64_t)v44);

                      uint64_t v48 = objc_msgSend_fileSignature(v31, v46, v47);
                      objc_msgSend_setFileSignature_(v12, v49, (uint64_t)v48);

                      uint64_t v52 = objc_msgSend_chunkCount(v31, v50, v51);
                      objc_msgSend_setChunkCount_(v12, v53, (uint64_t)v52);

                      objc_msgSend_removeObject_(v24, v54, (uint64_t)v31);
                      objc_msgSend_setStatus_(v12, v55, (uint64_t)&unk_1F20AC8A0);
                      if (*MEMORY[0x1E4F1A550] != -1) {
                        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
                      }
                      uint64_t v56 = *MEMORY[0x1E4F1A4F8];
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = v61;
                        uint64_t v77 = v12;
                        _os_log_debug_impl(&dword_1C4CFF000, v56, OS_LOG_TYPE_DEBUG, "Reusing assetHandle %@", buf, 0xCu);
                      }

                      goto LABEL_34;
                    }
                    if (*MEMORY[0x1E4F1A550] != -1) {
                      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
                    }
                    int v36 = *MEMORY[0x1E4F1A4F8];
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 138412802;
                      uint64_t v77 = v31;
                      __int16 v78 = 2112;
                      uint64_t v79 = v12;
                      __int16 v80 = 2114;
                      id v81 = v35;
                      _os_log_debug_impl(&dword_1C4CFF000, v36, OS_LOG_TYPE_DEBUG, "Cleaning up old assetHandle %@ because it did not match %@: %{public}@", buf, 0x20u);
                    }
                    objc_msgSend_setStatus_(v31, v37, (uint64_t)&unk_1F20AC870);
                    id v39 = (id)objc_msgSend_saveStatus_(*(void **)(*(void *)(a1 + 40) + 40), v38, (uint64_t)v31);
                    uint64_t v40 = *(void **)(a1 + 56);
                    uint64_t v43 = objc_msgSend_itemID(v31, v41, v42);
                    sub_1C4F0D63C(v40, v43);
                  }
                  ++v30;
                }
                while (v28 != v30);
                uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v27, (uint64_t)&v68, v82, 16);
                if (v28) {
                  continue;
                }
                break;
              }
            }
LABEL_34:

            uint64_t v10 = v62;
            id v3 = v63;
            uint64_t v9 = v64;
            uint64_t v21 = v66;
          }
        }
      }
      uint64_t v57 = objc_msgSend_saveOrInsert_(*(void **)(*(void *)(a1 + 40) + 40), v19, (uint64_t)v12);

      if (v57) {
        break;
      }
      if (++v11 == v9)
      {
        uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v6, (uint64_t)&v72, v83, 16);
        if (v9) {
          goto LABEL_6;
        }
        goto LABEL_38;
      }
    }
  }
  else
  {
LABEL_38:
    uint64_t v57 = 0;
  }

  return v57;
}

void sub_1C4F112F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4F11314(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v12 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      id v14 = *(const char **)(a1 + 56);
      uint64_t v15 = v12;
      id v16 = NSStringFromSelector(v14);
      *(_DWORD *)buf = 138412546;
      uint64_t v22 = v13;
      __int16 v23 = 2114;
      id v24 = v16;
      _os_log_error_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache startTrackingGetAssetHandles:operationType:error:]_block_invoke", "CKDAssetCache.m", 1479, "0 && \"already dropped\"");
  }
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 40);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = sub_1C4F114E0;
  v17[3] = &unk_1E64F6100;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v18 = v5;
  uint64_t v19 = v7;
  uint64_t v20 = v6;
  uint64_t v9 = objc_msgSend_performTransaction_(v4, v8, (uint64_t)v17);
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

id sub_1C4F114E0(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id obj = *(id *)(a1 + 32);
  uint64_t v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v2, (uint64_t)&v48, v54, 16);
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)v49;
    *(void *)&long long v4 = 138412290;
    long long v45 = v4;
    while (2)
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v49 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void **)(*((void *)&v48 + 1) + 8 * v8);
        uint64_t v10 = (void *)MEMORY[0x1C8789E70]();
        uint64_t v13 = objc_msgSend_itemID(v9, v11, v12);

        if (v13)
        {
          uint64_t v40 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v14, v15);
          objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v40, v41, *(void *)(a1 + 48), *(void *)(a1 + 40), @"CKDAssetCache.m", 1483, @"Expected nil itemID");
        }
        objc_msgSend_setStatus_(v9, v14, (uint64_t)&unk_1F20AC900, v45);
        id v18 = objc_msgSend_fileSignature(v9, v16, v17);

        if (!v18)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          uint64_t v21 = *MEMORY[0x1E4F1A4F8];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v45;
            uint64_t v53 = v9;
            _os_log_debug_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_DEBUG, "Look at assetHandle %@", buf, 0xCu);
          }
        }
        uint64_t v22 = objc_msgSend_fileSignature(v9, v19, v20);

        if (!v22)
        {
          uint64_t v42 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v23, v24);
          objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v42, v43, *(void *)(a1 + 48), *(void *)(a1 + 40), @"CKDAssetCache.m", 1491, @"nil assetHandle.fileSignature");
        }
        uint64_t v25 = *(void **)(*(void *)(a1 + 40) + 40);
        uint64_t v26 = objc_msgSend_fileSignature(v9, v23, v24);
        id v47 = v6;
        uint64_t v28 = objc_msgSend_interruptedAssetWithSignature_error_(v25, v27, (uint64_t)v26, &v47);
        id v29 = v47;

        if (v29)
        {

          uint64_t v6 = v29;
          goto LABEL_24;
        }
        if (v28)
        {
          long long v32 = objc_msgSend_itemID(v28, v30, v31);
          objc_msgSend_setItemID_(v9, v33, (uint64_t)v32);

          int v36 = objc_msgSend_chunkCount(v28, v34, v35);
          objc_msgSend_setChunkCount_(v9, v37, (uint64_t)v36);

          objc_msgSend_updateUsingObject_(*(void **)(*(void *)(a1 + 40) + 40), v38, (uint64_t)v9);
        }
        else
        {
          objc_msgSend_insertObject_(*(void **)(*(void *)(a1 + 40) + 40), v30, (uint64_t)v9);
        uint64_t v6 = };

        ++v8;
      }
      while (v5 != v8);
      uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v39, (uint64_t)&v48, v54, 16);
      if (v5) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
LABEL_24:

  return v6;
}

void sub_1C4F11900(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v13 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(const char **)(a1 + 48);
      id v16 = v13;
      uint64_t v17 = NSStringFromSelector(v15);
      *(_DWORD *)buf = 138412546;
      uint64_t v21 = v14;
      __int16 v22 = 2114;
      __int16 v23 = v17;
      _os_log_error_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache updateLastAccessTimeForUUID:]_block_invoke", "CKDAssetCache.m", 1523, "0 && \"already dropped\"");
  }
  long long v4 = objc_alloc_init(CKDAssetHandle);
  uint64_t v7 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v5, v6);
  objc_msgSend_setLastUsedTime_(v4, v8, (uint64_t)v7);

  uint64_t v9 = *(void *)(a1 + 40);
  id v18 = @"UUID";
  uint64_t v19 = v9;
  uint64_t v11 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v10, (uint64_t)&v19, &v18, 1);
  objc_msgSend_setProperties_valuesToStore_inEntriesMatching_label_error_predicate_(*(void **)(*(void *)(a1 + 32) + 40), v12, (uint64_t)&unk_1F20AB7F0, v4, v11, off_1E64F6120, 0, &unk_1F20440D0);
}

uint64_t sub_1C4F11AD8(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"UUID=$UUID");
}

void sub_1C4F11DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4F11DFC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v25 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *(void **)(a1 + 32);
      uint64_t v27 = *(const char **)(a1 + 56);
      uint64_t v28 = v25;
      id v29 = NSStringFromSelector(v27);
      *(_DWORD *)buf = 138412546;
      long long v37 = v26;
      __int16 v38 = 2114;
      id v39 = v29;
      _os_log_error_impl(&dword_1C4CFF000, v28, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache stopTrackingAssetHandlesByItemIDs:]_block_invoke", "CKDAssetCache.m", 1543, "0 && \"already dropped\"");
  }
  long long v4 = objc_opt_new();
  uint64_t v30 = objc_opt_new();
  uint64_t v5 = objc_alloc_init(CKDAssetHandle);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v6 = *(id *)(a1 + 40);
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v31, v35, 16);
  if (v8)
  {
    uint64_t v11 = v8;
    uint64_t v12 = *(void *)v32;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v32 != v12) {
          objc_enumerationMutation(v6);
        }
        uint64_t v14 = *(void **)(*((void *)&v31 + 1) + 8 * v13);
        if (objc_msgSend_unsignedLongLongValue(v14, v9, v10))
        {
          objc_msgSend_setItemID_(v5, v9, (uint64_t)v14);
          objc_msgSend_setStatus_(v5, v15, (uint64_t)&unk_1F20AC870);
          uint64_t v17 = objc_msgSend_saveStatus_(*(void **)(*(void *)(a1 + 32) + 40), v16, (uint64_t)v5);
          uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8);
          uint64_t v19 = *(void **)(v18 + 40);
          *(void *)(v18 + 40) = v17;

          sub_1C4F0D63C(v4, v14);
          if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
          {
            if (*MEMORY[0x1E4F1A550] != -1) {
              dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            uint64_t v20 = *MEMORY[0x1E4F1A4F8];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
            {
              __int16 v23 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
              *(_DWORD *)buf = 138543618;
              long long v37 = v14;
              __int16 v38 = 2114;
              id v39 = v23;
              _os_log_error_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_ERROR, "Failed to stop tracking asset files with itemID %{public}@: %{public}@", buf, 0x16u);
            }
            uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 8);
            __int16 v22 = *(void **)(v21 + 40);
            *(void *)(v21 + 40) = 0;
          }
        }
        ++v13;
      }
      while (v11 != v13);
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v31, v35, 16);
    }
    while (v11);
  }

  objc_msgSend_unregisterItemsAndDeleteUnregisteredAssetHandlesWithIDs_deleteUnregisteredAssetHandlesWithIDs_(*(void **)(a1 + 32), v24, (uint64_t)v4, v30);
}

void sub_1C4F12358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C4F1237C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v21 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)(a1 + 32);
      __int16 v23 = *(const char **)(a1 + 56);
      uint64_t v24 = v21;
      uint64_t v25 = NSStringFromSelector(v23);
      *(_DWORD *)buf = 138412546;
      uint64_t v28 = v22;
      __int16 v29 = 2114;
      uint64_t v30 = v25;
      _os_log_error_impl(&dword_1C4CFF000, v24, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache findAssetHandleForItemID:error:]_block_invoke", "CKDAssetCache.m", 1587, "0 && \"already dropped\"");
  }
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 40);
  id v6 = objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E4F28ED0], v4, *(void *)(a1 + 64));
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v7 + 40);
  uint64_t v9 = objc_msgSend_entryWithPrimaryKey_fetchProperties_label_error_(v5, v8, (uint64_t)v6, 0, off_1E64F6160, &obj);
  objc_storeStrong((id *)(v7 + 40), obj);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  uint64_t v12 = (void *)*MEMORY[0x1E4F1A548];
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v12);
    }
    uint64_t v13 = *MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 134217984;
      uint64_t v28 = v14;
      uint64_t v15 = "Unable to find asset handle with itemID:%llu";
      id v16 = v13;
      uint32_t v17 = 12;
LABEL_12:
      _os_log_debug_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEBUG, v15, buf, v17);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v12);
    }
    uint64_t v18 = *MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = *(void *)(a1 + 64);
      uint64_t v20 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      *(_DWORD *)buf = 134218242;
      uint64_t v28 = v19;
      __int16 v29 = 2112;
      uint64_t v30 = v20;
      uint64_t v15 = "Found asset handle with itemID:%llu %@";
      id v16 = v18;
      uint32_t v17 = 22;
      goto LABEL_12;
    }
  }
}

void sub_1C4F12BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4F12BD8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v24 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void **)(a1 + 32);
      uint64_t v26 = *(const char **)(a1 + 56);
      uint64_t v27 = v24;
      uint64_t v28 = NSStringFromSelector(v26);
      *(_DWORD *)buf = 138412546;
      long long v32 = v25;
      __int16 v33 = 2114;
      long long v34 = v28;
      _os_log_error_impl(&dword_1C4CFF000, v27, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache assetHandleWithCachedPath:]_block_invoke", "CKDAssetCache.m", 1657, "0 && \"already dropped\"");
  }
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v29 = 0;
  id v30 = 0;
  int v7 = objc_msgSend_parseCachedPath_assetHandleUUID_assetSignature_(v5, v4, v6, &v30, &v29);
  id v8 = v30;
  id v9 = v29;
  uint64_t v12 = v9;
  if (v7)
  {
    if (!v8 || !v9)
    {
      uint64_t v22 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v10, v11);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v22, v23, *(void *)(a1 + 56), *(void *)(a1 + 32), @"CKDAssetCache.m", 1661, @"should have thrown by now");
    }
    uint64_t v13 = objc_msgSend_assetHandleWithUUID_(*(void **)(*(void *)(a1 + 32) + 40), v10, (uint64_t)v8);
    uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v16 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint32_t v17 = *(void **)(a1 + 40);
      uint64_t v18 = v16;
      uint64_t v21 = objc_msgSend_CKSanitizedPath(v17, v19, v20);
      *(_DWORD *)buf = 138543362;
      long long v32 = v21;
      _os_log_error_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_ERROR, "Attempt to find asset by path that is not parsable %{public}@", buf, 0xCu);
    }
  }
}

void sub_1C4F13284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1C4F1329C(uint64_t a1, const char *a2)
{
  uint64_t v3 = objc_msgSend_insertObject_(*(void **)(*(void *)(a1 + 32) + 40), a2, *(void *)(a1 + 40));
  if (!v3)
  {
    uint64_t v6 = objc_msgSend_itemID(*(void **)(a1 + 40), v4, v5);
    uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v12 = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 48), v10, v11);
    uint64_t v15 = objc_msgSend_unsignedLongLongValue(*(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v13, v14);
    uint64_t v3 = (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v9, v12, v15);
  }
  return v3;
}

void sub_1C4F133D4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v19 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void **)(a1 + 32);
      uint64_t v20 = *(const char **)(a1 + 40);
      uint64_t v22 = v19;
      __int16 v23 = NSStringFromSelector(v20);
      *(_DWORD *)buf = 138412546;
      long long v32 = v21;
      __int16 v33 = 2114;
      long long v34 = v23;
      _os_log_error_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", buf, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache _scheduleEvictionForDownloadedFiles]_block_invoke", "CKDAssetCache.m", 1720, "0 && \"already dropped\"");
  }
  int isEvictionScheduled = objc_msgSend_isEvictionScheduled(*(void **)(a1 + 32), v4, v5);
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A548];
  if (isEvictionScheduled)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    id v8 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void **)(a1 + 32);
      uint64_t v10 = v8;
      uint64_t v13 = objc_msgSend_applicationBundleID(v9, v11, v12);
      *(_DWORD *)buf = 138543362;
      long long v32 = v13;
      _os_log_debug_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_DEBUG, "Not scheduling redundant downloads eviction for %{public}@", buf, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    uint64_t v14 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = *(void **)(a1 + 32);
      uint64_t v25 = v14;
      uint64_t v28 = objc_msgSend_applicationBundleID(v24, v26, v27);
      *(_DWORD *)buf = 138543362;
      long long v32 = v28;
      _os_log_debug_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_DEBUG, "Scheduling downloads eviction for %{public}@", buf, 0xCu);
    }
    objc_msgSend_setIsEvictionScheduled_(*(void **)(a1 + 32), v15, 1);
    objc_initWeak((id *)buf, *(id *)(a1 + 32));
    id v16 = (void *)MEMORY[0x1E4F1CB00];
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = sub_1C4F13714;
    v29[3] = &unk_1E64F61D0;
    objc_copyWeak(&v30, (id *)buf);
    id v18 = (id)objc_msgSend_scheduledTimerWithTimeInterval_repeats_block_(v16, v17, 0, v29, 10.0);
    objc_destroyWeak(&v30);
    objc_destroyWeak((id *)buf);
  }
}

void sub_1C4F136F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F13714(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = WeakRetained;
  if (WeakRetained && (objc_msgSend_didDrop(WeakRetained, v5, v6) & 1) == 0)
  {
    if (objc_msgSend_isEvictionScheduled(v7, v8, v9))
    {
      uint64_t v10 = (void *)MEMORY[0x1C8789E70]();
      uint64_t v11 = [CKDAssetCacheEvictionInfo alloc];
      uint64_t v13 = objc_msgSend_initWithForced_(v11, v12, 0);
      id v15 = (id)objc_msgSend__evictWithEvictionInfo_(v7, v14, (uint64_t)v13);
      objc_msgSend_unregisterItemIDsAndDeleteAssetHandlesWithEvictionInfo_(v7, v16, (uint64_t)v13);
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint32_t v17 = (void *)*MEMORY[0x1E4F1A4F8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v19 = v17;
        uint64_t v22 = objc_msgSend_applicationBundleID(v7, v20, v21);
        int v27 = 138543362;
        uint64_t v28 = v22;
        _os_log_debug_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_DEBUG, "Completed unregister for evicted downloads for %{public}@", (uint8_t *)&v27, 0xCu);
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v18 = (void *)*MEMORY[0x1E4F1A4F8];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_DEBUG))
      {
        __int16 v23 = v18;
        uint64_t v26 = objc_msgSend_applicationBundleID(v7, v24, v25);
        int v27 = 138543362;
        uint64_t v28 = v26;
        _os_log_debug_impl(&dword_1C4CFF000, v23, OS_LOG_TYPE_DEBUG, "Scheduled downloads eviction cancelled for %{public}@", (uint8_t *)&v27, 0xCu);
      }
    }
  }
}

void sub_1C4F145A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F14650(uint64_t a1, void *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v6 = *MEMORY[0x1E4F1A4F8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
  {
    int v8 = 138412546;
    id v9 = v4;
    __int16 v10 = 2112;
    id v11 = v5;
    _os_log_error_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_ERROR, "%@ %@", (uint8_t *)&v8, 0x16u);
  }

  return 1;
}

uint64_t sub_1C4F14758(uint64_t a1, void *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v6 = *MEMORY[0x1E4F1A4F8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
  {
    int v8 = 138543618;
    id v9 = v4;
    __int16 v10 = 2112;
    id v11 = v5;
    _os_log_error_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_ERROR, "%{public}@ %@", (uint8_t *)&v8, 0x16u);
  }

  return 1;
}

uint64_t sub_1C4F14860(uint64_t a1, const char *a2)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  objc_msgSend_entriesWithValues_label_error_setupBlock_(*(void **)(*(void *)(a1 + 32) + 40), a2, 0, off_1E64F61F0, 0, &unk_1F2044130);
  long long v117 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v112 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v117, v131, 16);
  if (!v112) {
    goto LABEL_56;
  }
  uint64_t v111 = *(void *)v118;
  uint64_t v108 = (void *)*MEMORY[0x1E4F281F8];
  while (2)
  {
    uint64_t v4 = 0;
    do
    {
      if (*(void *)v118 != v111) {
        objc_enumerationMutation(obj);
      }
      id v5 = *(void **)(*((void *)&v117 + 1) + 8 * v4);
      uint64_t v6 = (void *)MEMORY[0x1C8789E70]();
      uint64_t v7 = *(void **)(a1 + 40);
      __int16 v10 = objc_msgSend_lastUsedTime(v5, v8, v9);
      objc_msgSend_timeIntervalSinceDate_(v7, v11, (uint64_t)v10);
      double v13 = v12;

      if ((objc_msgSend_forced(*(void **)(a1 + 48), v14, v15) & 1) != 0
        || v13 > (double)*(unint64_t *)(a1 + 96)
        || *(unsigned char *)(a1 + 128)
        && (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) > 0x3E8uLL
         || *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) >= 0x6400001uLL)
        && v13 > (double)*(unint64_t *)(a1 + 104))
      {
        context = v6;
        id v18 = NSString;
        uint64_t v19 = objc_msgSend_UUID(v5, v16, v17);
        uint64_t v22 = objc_msgSend_UUIDString(v19, v20, v21);
        uint64_t v25 = objc_msgSend_fileSignature(v5, v23, v24);
        uint64_t v26 = CKStringWithData();
        uint64_t v28 = objc_msgSend_stringWithFormat_(v18, v27, @"%@.%@", v22, v26);

        uint64_t v31 = objc_msgSend_fileDownloadPath(*(void **)(a1 + 32), v29, v30);
        __int16 v33 = objc_msgSend_stringByAppendingPathComponent_(v31, v32, (uint64_t)v28);

        long long v34 = *(void **)(a1 + 56);
        id v116 = 0;
        int v36 = objc_msgSend_attributesOfItemAtPath_error_(v34, v35, (uint64_t)v33, &v116);
        id v39 = v116;
        if (v36)
        {
          unint64_t v40 = objc_msgSend_fileSize(v36, v37, v38);
          if (!v5) {
            goto LABEL_28;
          }
        }
        else
        {
          unint64_t v40 = 0;
          if (!v5) {
            goto LABEL_28;
          }
        }
        if (!objc_msgSend_mayBeEvicted(v5, v37, v38))
        {
          id v62 = v39;
          goto LABEL_47;
        }
        uint64_t v43 = objc_msgSend_itemID(v5, v41, v42);

        if (v43)
        {
          uint64_t v46 = objc_msgSend_itemID(v5, v44, v45);
          uint64_t v109 = objc_msgSend_unsignedLongLongValue(v46, v47, v48);

          objc_msgSend_setStatus_(v5, v49, (uint64_t)&unk_1F20AC870);
          id v51 = (id)objc_msgSend_saveStatus_(*(void **)(*(void *)(a1 + 32) + 40), v50, (uint64_t)v5);
          int shouldBeUnregisteredBeforeDeleted = objc_msgSend_shouldBeUnregisteredBeforeDeleted(v5, v52, v53);
          uint64_t v57 = *(void **)(a1 + 48);
          if (shouldBeUnregisteredBeforeDeleted)
          {
            __int16 v58 = objc_msgSend_itemIDsToUnregister(v57, v54, v55);
            long long v61 = objc_msgSend_itemID(v5, v59, v60);
            sub_1C4F0D63C(v58, v61);
          }
          else
          {
            __int16 v58 = objc_msgSend_assetHandleItemIDsToDelete(v57, v54, v55);
            long long v61 = objc_msgSend_itemID(v5, v63, v64);
            objc_msgSend_addObject_(v58, v65, (uint64_t)v61);
          }

          if (v109)
          {
            if (*MEMORY[0x1E4F1A550] != -1) {
              dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            uint64_t v66 = (void *)*MEMORY[0x1E4F1A4F8];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_INFO))
            {
              long long v68 = v66;
              long long v71 = objc_msgSend_UUID(v5, v69, v70);
              long long v74 = objc_msgSend_UUIDString(v71, v72, v73);
              *(_DWORD *)buf = 138413058;
              uint64_t v122 = v28;
              __int16 v123 = 2048;
              unint64_t v124 = v109;
              __int16 v125 = 2114;
              uint64_t v126 = v74;
              __int16 v127 = 2048;
              unint64_t v128 = v40;
              _os_log_impl(&dword_1C4CFF000, v68, OS_LOG_TYPE_INFO, "Removing file %@ for asset with itemID %llu and UUID %{public}@ (size:%llu)", buf, 0x2Au);
            }
            goto LABEL_32;
          }
        }
LABEL_28:
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        long long v75 = *MEMORY[0x1E4F1A4F8];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          uint64_t v122 = v28;
          __int16 v123 = 2048;
          unint64_t v124 = v40;
          _os_log_impl(&dword_1C4CFF000, v75, OS_LOG_TYPE_INFO, "Removing file %@ (size:%llu) with no associated asset handle", buf, 0x16u);
        }
LABEL_32:
        uint64_t v76 = *(void **)(a1 + 56);
        id v115 = v39;
        char v77 = objc_msgSend_removeItemAtPath_error_(v76, v67, (uint64_t)v33, &v115);
        id v62 = v115;

        if (v77) {
          goto LABEL_33;
        }
        uint64_t v84 = objc_msgSend_domain(v62, v78, v79);
        if (objc_msgSend_isEqualToString_(v108, v85, (uint64_t)v84))
        {
          uint64_t v88 = objc_msgSend_code(v62, v86, v87);

          if (v88 == 4)
          {
LABEL_33:
            ++*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
            *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) += v40;
            *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) -= *(void *)(*(void *)(*(void *)(a1 + 64)
                                                                                                 + 8)
                                                                                     + 24) != 0;
            uint64_t v80 = *(void *)(*(void *)(a1 + 72) + 8);
            unint64_t v81 = *(void *)(v80 + 24);
            BOOL v82 = v81 >= v40;
            unint64_t v83 = v81 - v40;
            if (!v82) {
              unint64_t v83 = 0;
            }
            *(void *)(v80 + 24) = v83;
            if ((objc_msgSend_forced(*(void **)(a1 + 48), v78, v79) & 1) == 0
              && *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) <= 0x63uLL
              && *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) >> 21 <= 4uLL)
            {
              if (*MEMORY[0x1E4F1A550] != -1) {
                dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
              }
              long long v95 = (void *)*MEMORY[0x1E4F1A4F8];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_DEBUG))
              {
                uint64_t v97 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
                uint64_t v98 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
                unint64_t v99 = *(void *)(a1 + 112);
                unint64_t v113 = *(void *)(a1 + 120);
                uint64_t v100 = *(void **)(a1 + 32);
                __int16 v101 = v95;
                uint64_t v104 = objc_msgSend_fileDownloadPath(v100, v102, v103);
                uint64_t v107 = objc_msgSend_CKSanitizedPath(v104, v105, v106);
                *(_DWORD *)buf = 134219010;
                uint64_t v122 = v97;
                __int16 v123 = 2048;
                unint64_t v124 = v99;
                __int16 v125 = 2048;
                uint64_t v126 = v98;
                __int16 v127 = 2048;
                unint64_t v128 = v113;
                __int16 v129 = 2114;
                uint64_t v130 = v107;
                _os_log_debug_impl(&dword_1C4CFF000, v101, OS_LOG_TYPE_DEBUG, "Evicted %llu/%llu files (%llu/%llu bytes) at %{public}@", buf, 0x34u);
              }
              goto LABEL_56;
            }
            goto LABEL_47;
          }
        }
        else
        {
        }
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v89 = (void *)*MEMORY[0x1E4F1A4F8];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
        {
          uint64_t v91 = v89;
          uint64_t v94 = objc_msgSend_CKSanitizedPath(v33, v92, v93);
          *(_DWORD *)buf = 138543618;
          uint64_t v122 = v94;
          __int16 v123 = 2112;
          unint64_t v124 = (unint64_t)v62;
          _os_log_error_impl(&dword_1C4CFF000, v91, OS_LOG_TYPE_ERROR, "Failed removing cached asset file at %{public}@: %@", buf, 0x16u);
        }
LABEL_47:

        uint64_t v6 = context;
      }
      ++v4;
    }
    while (v112 != v4);
    uint64_t v112 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v90, (uint64_t)&v117, v131, 16);
    if (v112) {
      continue;
    }
    break;
  }
LABEL_56:

  return 0;
}

void sub_1C4F15078(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_msgSend_setFetchedProperties_(v4, v2, (uint64_t)&unk_1F20AB808);
  objc_msgSend_orderAscendingByProperty_(v4, v3, @"lastUsedTime");
}

uint64_t sub_1C4F150CC(uint64_t a1, const char *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  objc_msgSend_selectProperties_inAssetHandlesWithStatus_error_(*(void **)(*(void *)(a1 + 32) + 40), a2, (uint64_t)&unk_1F20AB820, 3, 0);
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v26, v32, 16);
  if (v4)
  {
    uint64_t v6 = v4;
    uint64_t v7 = *(void *)v27;
    int v8 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
    uint64_t v9 = (os_log_t *)MEMORY[0x1E4F1A4F8];
    *(void *)&long long v5 = 138412290;
    long long v24 = v5;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v27 != v7) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v26 + 1) + 8 * v10);
        if (*v8 != -1) {
          dispatch_once(v8, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        double v12 = *v9;
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v24;
          uint64_t v31 = v11;
          _os_log_debug_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_DEBUG, "Removing registered asset handle for %@", buf, 0xCu);
        }
        uint64_t v15 = objc_msgSend_itemIDsToUnregister(*(void **)(a1 + 40), v13, v14, v24);
        id v18 = objc_msgSend_itemID(v11, v16, v17);
        sub_1C4F0D63C(v15, v18);

        objc_msgSend_setStatus_(v11, v19, (uint64_t)&unk_1F20AC870);
        id v21 = (id)objc_msgSend_saveStatus_(*(void **)(*(void *)(a1 + 32) + 40), v20, (uint64_t)v11);
        ++v10;
      }
      while (v6 != v10);
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v22, (uint64_t)&v26, v32, 16);
    }
    while (v6);
  }

  return 0;
}

void sub_1C4F15470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F15488(uint64_t a1, const char *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend__evictAllFilesForced_(*(void **)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 48));
  return MEMORY[0x1F41817F8]();
}

void sub_1C4F1579C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F157C8(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"status=$NOT_REGISTERED and lastUsedTime < $EXPIRYDATE");
}

uint64_t sub_1C4F157DC(uint64_t a1, const char *a2)
{
  v36[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  v35[0] = @"EXPIRYDATE";
  v35[1] = @"REGISTERED";
  v36[0] = v3;
  v36[1] = &unk_1F20AC8B8;
  v35[2] = @"INTERRUPTED";
  v36[2] = &unk_1F20AC840;
  long long v27 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v36, v35, 3);
  long long v5 = objc_msgSend_entriesWithValues_label_error_setupBlock_(*(void **)(*(void *)(a1 + 40) + 40), v4, (uint64_t)v27, off_1E64F6248, 0, &unk_1F2044170);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v28, v34, 16);
  if (v7)
  {
    uint64_t v10 = v7;
    uint64_t v11 = *(void *)v29;
    double v12 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
    double v13 = (os_log_t *)MEMORY[0x1E4F1A4F8];
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v29 != v11) {
          objc_enumerationMutation(v5);
        }
        uint64_t v15 = *(void **)(*((void *)&v28 + 1) + 8 * v14);
        if (objc_msgSend_mayBeEvicted(v15, v8, v9))
        {
          ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
          id v18 = objc_msgSend_itemIDsToUnregister(*(void **)(a1 + 48), v16, v17);
          id v21 = objc_msgSend_itemID(v15, v19, v20);
          sub_1C4F0D63C(v18, v21);

          objc_msgSend_setStatus_(v15, v22, (uint64_t)&unk_1F20AC870);
          id v24 = (id)objc_msgSend_saveStatus_(*(void **)(*(void *)(a1 + 40) + 40), v23, (uint64_t)v15);
        }
        else
        {
          if (*v12 != -1) {
            dispatch_once(v12, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          uint64_t v25 = *v13;
          if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v33 = v15;
            _os_log_error_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_ERROR, "Attempting to evict asset handle in wrong state %@", buf, 0xCu);
          }
        }
        ++v14;
      }
      while (v10 != v14);
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v28, v34, 16);
    }
    while (v10);
  }
  objc_msgSend_unregisterItemIDsAndDeleteAssetHandlesWithEvictionInfo_(*(void **)(a1 + 40), v8, *(void *)(a1 + 48));

  return 0;
}

void sub_1C4F15A74(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_msgSend_setFetchedProperties_(v2, v3, (uint64_t)&unk_1F20AB838);
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], v4, @"(status=$REGISTERED OR status=$INTERRUPTED) AND lastUsedTime < $EXPIRYDATE");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v2, v5, (uint64_t)v6);
}

uint64_t sub_1C4F15DCC(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc(MEMORY[0x1E4F1CA80]);
  uint64_t v4 = objc_msgSend_initWithCapacity_(v2, v3, 500);
  id v6 = objc_msgSend_entriesWithValues_label_error_setupBlock_(*(void **)(*(void *)(a1 + 32) + 40), v5, (uint64_t)&unk_1F20AC000, off_1E64F6288, 0, &unk_1F2044190);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v38, v50, 16);
  if (v8)
  {
    uint64_t v11 = v8;
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)v39;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v39 != v13) {
          objc_enumerationMutation(v6);
        }
        uint64_t v15 = objc_msgSend_itemID(*(void **)(*((void *)&v38 + 1) + 8 * i), v9, v10);
        if (objc_msgSend_longLongValue(v15, v16, v17)) {
          objc_msgSend_addObject_(v4, v18, (uint64_t)v15);
        }
        if ((unint64_t)objc_msgSend_count(v4, v18, v19) >= 0x1F4)
        {
          v12 += objc_msgSend_count(v4, v20, v21);
          id v24 = objc_msgSend_allObjects(v4, v22, v23);
          objc_msgSend_unregisterItemIDs_(*(void **)(a1 + 40), v25, (uint64_t)v24);
          objc_msgSend_removeAllObjects(v4, v26, v27);
        }
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v38, v50, 16);
    }
    while (v11);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v28 = objc_msgSend_deleteEntriesMatching_label_error_predicate_(*(void **)(*(void *)(a1 + 32) + 40), v9, (uint64_t)&unk_1F20AC000, off_1E64F62A0, 0, &unk_1F20441B0);
  long long v29 = objc_alloc_init(CKDAssetHandle);
  objc_msgSend_setStatus_(v29, v30, (uint64_t)&unk_1F20AC8B8);
  uint64_t v32 = objc_msgSend_setProperties_valuesToStore_inEntriesMatching_label_error_predicate_(*(void **)(*(void *)(a1 + 32) + 40), v31, (uint64_t)&unk_1F20AB868, v29, &unk_1F20AC028, off_1E64F62B8, 0, &unk_1F20441D0);
  objc_msgSend_setStatus_(v29, v33, (uint64_t)&unk_1F20AC840);
  uint64_t v35 = objc_msgSend_setProperties_valuesToStore_inEntriesMatching_label_error_predicate_(*(void **)(*(void *)(a1 + 32) + 40), v34, (uint64_t)&unk_1F20AB880, v29, &unk_1F20AC050, off_1E64F62D0, 0, &unk_1F20441F0);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  int v36 = *MEMORY[0x1E4F1A4F8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218752;
    uint64_t v43 = v28;
    __int16 v44 = 2048;
    uint64_t v45 = v32;
    __int16 v46 = 2048;
    uint64_t v47 = v35;
    __int16 v48 = 2048;
    uint64_t v49 = v12;
    _os_log_impl(&dword_1C4CFF000, v36, OS_LOG_TYPE_INFO, "In-flight asset handles marked as interrupted during un/registering:%llu upload:%llu download:%llu item unregistred:%llu", buf, 0x2Au);
  }

  return 0;
}

void sub_1C4F160E8(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_msgSend_setFetchedProperties_(v2, v3, (uint64_t)&unk_1F20AB850);
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], v4, @"status=$REGISTERING OR status=$UNREGISTERING");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v2, v5, (uint64_t)v6);
}

uint64_t sub_1C4F16160(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"status=$REGISTERING OR status=$UNREGISTERING");
}

uint64_t sub_1C4F16174(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"status=$STATUS");
}

uint64_t sub_1C4F16188(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"status=$STATUS");
}

uint64_t sub_1C4F16230(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_didDrop(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v8 = (void *)*MEMORY[0x1E4F1A4F8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A4F8], OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v9 = *(const char **)(a1 + 40);
      uint64_t v11 = v8;
      uint64_t v12 = NSStringFromSelector(v9);
      int v14 = 138412546;
      uint64_t v15 = v10;
      __int16 v16 = 2114;
      uint64_t v17 = v12;
      _os_log_error_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_ERROR, "already dropped %@ in %{public}@", (uint8_t *)&v14, 0x16u);
    }
    __assert_rtn("-[CKDAssetCache setupPersistentStateAtStartup]_block_invoke", "CKDAssetCache.m", 2092, "0 && \"already dropped\"");
  }
  objc_msgSend__deleteAssetHandlesAndUnregisterItemsForUnmountedAssetVolumes(*(void **)(a1 + 32), v4, v5);
  uint64_t v7 = *(void *)(a1 + 32);
  return MEMORY[0x1F4181798](v7, sel__resetAssetInflight, v6);
}

void sub_1C4F170DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F17110(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v5 = objc_msgSend_osActivity(WeakRetained, v2, v3, 0, 0);
    os_activity_scope_enter(v5, &v8);

    objc_msgSend__recordFetchesAvailable(v4, v6, v7);
    os_activity_scope_leave(&v8);
  }
}

void sub_1C4F17178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1C4F1718C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v5 = objc_msgSend_osActivity(WeakRetained, v2, v3, 0, 0);
    os_activity_scope_enter(v5, &v8);

    objc_msgSend__flushFetchedRecordsToConsumerLocked(v4, v6, v7);
    os_activity_scope_leave(&v8);
  }
}

void sub_1C4F171F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1C4F172D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F174FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F17518(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4F17528(uint64_t a1)
{
}

void sub_1C4F17530(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1C8789E70]();
  uint64_t v57 = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v5 = objc_msgSend_fetchInfosByOrder(*(void **)(a1 + 32), v3, v4);
  os_activity_scope_state_s v8 = objc_msgSend_allValues(v5, v6, v7);

  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v50, v54, 16);
  if (v12)
  {
    uint64_t v13 = *(void *)v51;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v51 != v13) {
          objc_enumerationMutation(v8);
        }
        uint64_t v15 = objc_msgSend_state(*(void **)(*((void *)&v50 + 1) + 8 * i), v10, v11);
        ++*((void *)&v55 + v15);
      }
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v10, (uint64_t)&v50, v54, 16);
    }
    while (v12);
    uint64_t v16 = *((void *)&v55 + 1);
    uint64_t v12 = v55;
    uint64_t v17 = *((void *)&v56 + 1);
    uint64_t v18 = v56;
    uint64_t v19 = v57;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = 0;
  }

  uint64_t v20 = *(void **)(a1 + 40);
  uint64_t v22 = objc_msgSend_stringWithFormat_(NSString, v21, @"notStarted=%lu", v12);
  objc_msgSend_addObject_(v20, v23, (uint64_t)v22);

  id v24 = *(void **)(a1 + 40);
  long long v26 = objc_msgSend_stringWithFormat_(NSString, v25, @"waitingForFetch=%lu", v16);
  objc_msgSend_addObject_(v24, v27, (uint64_t)v26);

  uint64_t v28 = *(void **)(a1 + 40);
  long long v30 = objc_msgSend_stringWithFormat_(NSString, v29, @"fetchingFromServer=%lu", v18);
  objc_msgSend_addObject_(v28, v31, (uint64_t)v30);

  uint64_t v32 = *(void **)(a1 + 40);
  long long v34 = objc_msgSend_stringWithFormat_(NSString, v33, @"needsCallback=%lu", v17);
  objc_msgSend_addObject_(v32, v35, (uint64_t)v34);

  int v36 = *(void **)(a1 + 40);
  long long v38 = objc_msgSend_stringWithFormat_(NSString, v37, @"finished=%lu", v19);
  objc_msgSend_addObject_(v36, v39, (uint64_t)v38);

  long long v40 = NSString;
  uint64_t v42 = objc_msgSend_componentsJoinedByString_(*(void **)(a1 + 40), v41, @", ");
  uint64_t v45 = objc_msgSend_fetchInfosByOrder(*(void **)(a1 + 32), v43, v44);
  uint64_t v47 = objc_msgSend_stringWithFormat_(v40, v46, @"fetchInfos (%@) = %@", v42, v45);
  uint64_t v48 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v49 = *(void **)(v48 + 40);
  *(void *)(v48 + 40) = v47;
}

void sub_1C4F179DC(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_performCallback(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = objc_msgSend_fetchGroup(*(void **)(a1 + 40), v4, v5);
  dispatch_group_leave(v6);
}

void sub_1C4F184A8(uint64_t a1, void *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  v47[0] = 0;
  v47[1] = v47;
  v47[2] = 0x2020000000;
  char v48 = 0;
  objc_msgSend_setFullRecordsToFetch_(v3, v4, *(void *)(a1 + 32));
  uint64_t v7 = objc_msgSend_forceDecryptionAttempt(*(void **)(a1 + 40), v5, v6);
  objc_msgSend_setForcePCSDecrypt_(v3, v8, v7);
  uint64_t v11 = objc_msgSend_useRecordCache(*(void **)(a1 + 40), v9, v10);
  objc_msgSend_setUseRecordCache_(v3, v12, v11);
  objc_initWeak(&location, *(id *)(a1 + 40));
  objc_initWeak(&from, v3);
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 3221225472;
  void v39[2] = sub_1C4F18880;
  v39[3] = &unk_1E64F62F0;
  objc_copyWeak(v44, &location);
  uint64_t v13 = *(void **)(a1 + 64);
  uint64_t v43 = v47;
  v44[1] = v13;
  id v14 = *(id *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 40);
  id v40 = v14;
  uint64_t v41 = v15;
  id v42 = *(id *)(a1 + 56);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v16, (uint64_t)v39);
  uint64_t v31 = MEMORY[0x1E4F143A8];
  uint64_t v32 = 3221225472;
  uint64_t v33 = sub_1C4F18CDC;
  long long v34 = &unk_1E64F6318;
  objc_copyWeak(&v37, &location);
  objc_copyWeak(&v38, &from);
  int v36 = v47;
  id v35 = *(id *)(a1 + 56);
  objc_msgSend_setCompletionBlock_(v3, v17, (uint64_t)&v31);
  objc_msgSend_setCurrentFetchOp_(*(void **)(a1 + 40), v18, (uint64_t)v3, v31, v32, v33, v34);
  uint64_t v21 = objc_msgSend_fetchGroup(*(void **)(a1 + 40), v19, v20);
  dispatch_group_enter(v21);

  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v22 = (id)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = (objc_class *)objc_opt_class();
    NSStringFromClass(v25);
    id v26 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v27 = *(void **)(a1 + 40);
    long long v30 = objc_msgSend_ckShortDescription(v27, v28, v29);
    *(_DWORD *)buf = 134218754;
    id v50 = v3;
    __int16 v51 = 2114;
    id v52 = v26;
    __int16 v53 = 2048;
    long long v54 = v27;
    __int16 v55 = 2114;
    long long v56 = v30;
    _os_log_debug_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_DEBUG, "Starting fetch records operation %p for <%{public}@: %p; %{public}@>",
      buf,
      0x2Au);
  }
  objc_msgSend_hash(*(void **)(a1 + 40), v23, v24);
  kdebug_trace();

  objc_destroyWeak(&v38);
  objc_destroyWeak(&v37);

  objc_destroyWeak(v44);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
  _Block_object_dispose(v47, 8);
}

void sub_1C4F18820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location,id a28,char a29)
{
  objc_destroyWeak(v31);
  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a28);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1C4F18880(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    uint64_t v13 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v10, v11);
    uint64_t v14 = *(void *)(a1 + 72);
    uint64_t v16 = objc_msgSend_stringWithUTF8String_(NSString, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKitTools/Daemon/Operations/Database/CKDRecordFetchAggregator.m");
    uint64_t v19 = objc_msgSend_operationID(*(void **)(a1 + 32), v17, v18);
    uint64_t v21 = (void *)v19;
    if (v9) {
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v13, v20, v14, WeakRetained, v16, 383, @"Trying to invoke the record fetch completion block on completed operation %@ with record %@ and record ID %@%@%@", v19, v7, v8, @". Error was ", v9);
    }
    else {
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v13, v20, v14, WeakRetained, v16, 383, @"Trying to invoke the record fetch completion block on completed operation %@ with record %@ and record ID %@%@%@", v19, v7, v8, &stru_1F2044F30, &stru_1F2044F30);
    }
  }
  uint64_t v73 = v8;
  id v75 = v7;
  long long v72 = WeakRetained;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v22 = (uint64_t)v8;
  uint64_t v23 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v62 = v23;
    id v63 = (objc_class *)objc_opt_class();
    uint64_t v64 = NSStringFromClass(v63);
    uint64_t v65 = *(void **)(a1 + 40);
    uint64_t v68 = objc_msgSend_ckShortDescription(v65, v66, v67);
    long long v69 = (void *)v68;
    *(_DWORD *)buf = 138544642;
    uint64_t v70 = @" Error was ";
    unint64_t v83 = v64;
    long long v71 = &stru_1F2044F30;
    __int16 v84 = 2048;
    if (!v9) {
      uint64_t v70 = &stru_1F2044F30;
    }
    uint64_t v85 = v65;
    if (v9) {
      long long v71 = v9;
    }
    __int16 v86 = 2114;
    uint64_t v87 = v68;
    __int16 v88 = 2112;
    id v89 = v8;
    __int16 v90 = 2114;
    uint64_t v91 = v70;
    __int16 v92 = 2112;
    uint64_t v93 = v71;
    uint64_t v22 = (uint64_t)v8;
    _os_log_debug_impl(&dword_1C4CFF000, v62, OS_LOG_TYPE_DEBUG, "Record fetcher <%{public}@: %p; %{public}@> fetched a record with ID %@.%{public}@%@",
      buf,
      0x3Eu);
  }
  uint64_t v25 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 48), v24, v22);
  if (!objc_msgSend_count(v25, v26, v27))
  {
    long long v30 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v28, v29);
    uint64_t v31 = *(void *)(a1 + 72);
    uint64_t v33 = objc_msgSend_stringWithUTF8String_(NSString, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKitTools/Daemon/Operations/Database/CKDRecordFetchAggregator.m");
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v30, v34, v31, WeakRetained, v33, 387, @"Didn't get any fetch infos for record with ID %@", v22);
  }
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  id obj = v25;
  uint64_t v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v35, (uint64_t)&v77, v81, 16);
  long long v39 = v75;
  if (v36)
  {
    uint64_t v40 = v36;
    uint64_t v76 = *(void *)v78;
    do
    {
      for (uint64_t i = 0; i != v40; ++i)
      {
        if (*(void *)v78 != v76) {
          objc_enumerationMutation(obj);
        }
        id v42 = *(void **)(*((void *)&v77 + 1) + 8 * i);
        uint64_t v43 = objc_msgSend_record(v42, v37, v38);
        uint64_t v46 = objc_msgSend_etag(v43, v44, v45);
        if (!v46)
        {

LABEL_20:
          objc_msgSend_setError_(v42, v37, (uint64_t)v9);
          objc_msgSend_setRecord_(v42, v60, (uint64_t)v39);
          objc_msgSend_setState_(v42, v61, 3);
          continue;
        }
        uint64_t v49 = (void *)v46;
        objc_msgSend_record(v42, v47, v48);
        v51 = id v50 = v9;
        long long v54 = objc_msgSend_etag(v51, v52, v53);
        uint64_t v57 = objc_msgSend_etag(v39, v55, v56);
        int isEqualToString = objc_msgSend_isEqualToString_(v54, v58, (uint64_t)v57);

        long long v39 = v75;
        uint64_t v9 = v50;

        if (isEqualToString) {
          goto LABEL_20;
        }
      }
      uint64_t v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v37, (uint64_t)&v77, v81, 16);
    }
    while (v40);
  }
}

void sub_1C4F18CDC(uint64_t a1)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = objc_loadWeakRetained((id *)(a1 + 56));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  uint64_t v6 = objc_msgSend_error(v3, v4, v5);

  uint64_t v9 = (os_log_t *)MEMORY[0x1E4F1A500];
  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v10 = *v9;
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = v10;
      uint64_t v16 = objc_msgSend_error(v3, v14, v15);
      *(_DWORD *)buf = 138412290;
      uint64_t v73 = v16;
      _os_log_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_INFO, "Error fetching records: %@", buf, 0xCu);
    }
    uint64_t v17 = objc_msgSend_error(WeakRetained, v11, v12);

    if (!v17)
    {
      uint64_t v18 = objc_msgSend_error(v3, v7, v8);
      objc_msgSend_setError_(WeakRetained, v19, (uint64_t)v18);
    }
  }
  uint64_t v59 = v3;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  objc_msgSend_allValues(*(void **)(a1 + 32), v7, v8);
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v20, (uint64_t)&v68, v81, 16);
  if (v62)
  {
    uint64_t v61 = *(void *)v69;
    uint64_t v21 = *MEMORY[0x1E4F19DD8];
    do
    {
      uint64_t v22 = 0;
      do
      {
        if (*(void *)v69 != v61) {
          objc_enumerationMutation(obj);
        }
        uint64_t v63 = v22;
        uint64_t v23 = *(void **)(*((void *)&v68 + 1) + 8 * v22);
        long long v64 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        id v24 = v23;
        uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v64, v80, 16);
        if (v26)
        {
          uint64_t v29 = v26;
          uint64_t v30 = *(void *)v65;
          do
          {
            for (uint64_t i = 0; i != v29; ++i)
            {
              if (*(void *)v65 != v30) {
                objc_enumerationMutation(v24);
              }
              uint64_t v32 = *(void **)(*((void *)&v64 + 1) + 8 * i);
              if ((unint64_t)objc_msgSend_state(v32, v27, v28) <= 2)
              {
                id v35 = objc_msgSend_error(WeakRetained, v27, v28);
                if (v35)
                {
                  objc_msgSend_setError_(v32, v33, (uint64_t)v35);
                }
                else
                {
                  uint64_t v36 = (void *)MEMORY[0x1E4F1A280];
                  id v37 = objc_msgSend_recordID(v32, v33, v34);
                  long long v39 = objc_msgSend_errorWithDomain_code_format_(v36, v38, v21, 2003, @"We didn't get a callback for record %@", v37);
                  objc_msgSend_setError_(v32, v40, (uint64_t)v39);
                }
                objc_msgSend_setState_(v32, v41, 3);
              }
            }
            uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v27, (uint64_t)&v64, v80, 16);
          }
          while (v29);
        }

        uint64_t v22 = v63 + 1;
      }
      while (v63 + 1 != v62);
      uint64_t v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v42, (uint64_t)&v68, v81, 16);
    }
    while (v62);
  }

  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v43 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v53 = v43;
    long long v54 = (objc_class *)objc_opt_class();
    __int16 v55 = NSStringFromClass(v54);
    uint64_t v58 = objc_msgSend_ckShortDescription(WeakRetained, v56, v57);
    *(_DWORD *)buf = 134218754;
    uint64_t v73 = v59;
    __int16 v74 = 2114;
    id v75 = v55;
    __int16 v76 = 2048;
    id v77 = WeakRetained;
    __int16 v78 = 2114;
    long long v79 = v58;
    _os_log_debug_impl(&dword_1C4CFF000, v53, OS_LOG_TYPE_DEBUG, "Fetch records operation %p completed for <%{public}@: %p; %{public}@>",
      buf,
      0x2Au);
  }
  objc_msgSend_hash(WeakRetained, v44, v45);
  kdebug_trace();
  objc_msgSend_setCurrentFetchOp_(WeakRetained, v46, 0);
  uint64_t v49 = objc_msgSend_fetchSource(WeakRetained, v47, v48);
  dispatch_source_merge_data(v49, 1uLL);

  id v52 = objc_msgSend_fetchGroup(WeakRetained, v50, v51);
  dispatch_group_leave(v52);
}

void sub_1C4F192F8(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v40, v44, 16);
  if (v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = *(void *)v41;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v41 != v8) {
          objc_enumerationMutation(v2);
        }
        os_log_t v10 = *(void **)(*((void *)&v40 + 1) + 8 * v9);
        uint64_t v11 = objc_msgSend_fetchInfosByOrder(*(void **)(a1 + 40), v5, v6);
        uint64_t v12 = (void *)MEMORY[0x1E4F28ED0];
        uint64_t Order = objc_msgSend_fetchOrder(v10, v13, v14);
        uint64_t v17 = objc_msgSend_numberWithUnsignedInteger_(v12, v16, Order);
        uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(v11, v18, (uint64_t)v17);

        if (v19)
        {
          uint64_t v30 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v20, v21);
          uint64_t v32 = *(void *)(a1 + 40);
          uint64_t v31 = *(void *)(a1 + 48);
          uint64_t v35 = objc_msgSend_fetchOrder(v10, v33, v34);
          objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v30, v36, v31, v32, @"CKDRecordFetchAggregator.m", 441, @"A fetch info with order %lu already exists. %@", v35, v10, (void)v40);
        }
        uint64_t v22 = objc_msgSend_fetchInfosByOrder(*(void **)(a1 + 40), v20, v21);
        uint64_t v23 = (void *)MEMORY[0x1E4F28ED0];
        uint64_t v26 = objc_msgSend_fetchOrder(v10, v24, v25);
        uint64_t v28 = objc_msgSend_numberWithUnsignedInteger_(v23, v27, v26);
        objc_msgSend_setObject_forKeyedSubscript_(v22, v29, (uint64_t)v10, v28);

        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v40, v44, 16);
    }
    while (v7);
  }

  long long v39 = objc_msgSend_fetchSource(*(void **)(a1 + 40), v37, v38);
  dispatch_source_merge_data(v39, 1uLL);
}

void sub_1C4F1974C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F1A254(_Unwind_Exception *exception_object)
{
}

void sub_1C4F1A4A0(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v2 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = v2;
    uint64_t v9 = (objc_class *)objc_opt_class();
    os_log_t v10 = NSStringFromClass(v9);
    uint64_t v11 = *(void **)(a1 + 32);
    uint64_t v14 = objc_msgSend_ckShortDescription(v11, v12, v13);
    int v15 = 138543874;
    uint64_t v16 = v10;
    __int16 v17 = 2048;
    uint64_t v18 = v11;
    __int16 v19 = 2114;
    uint64_t v20 = v14;
    _os_log_debug_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_DEBUG, "Fetch aggregator <%{public}@: %p; %{public}@> finished",
      (uint8_t *)&v15,
      0x20u);
  }
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = objc_msgSend_error(v5, v3, v4);
  objc_msgSend_finishWithError_(v5, v7, (uint64_t)v6);
}

void sub_1C4F1A9E4(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x1C8789E70]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1C4F1AED8(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_cancelAllOperations(a2, (const char *)a2, a3);
}

uint64_t sub_1C4F1AEE0(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_invalidate(a2, (const char *)a2, a3);
}

void sub_1C4F1B250(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F1B268(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4F1B27C(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = (void *)MEMORY[0x1C8789E70]();
  uint64_t v6 = objc_msgSend_container(v7, v4, v5);
  if (v6) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1C4F1C254(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F1C6B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F1C6D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_noteSystemIsAvailable, a3);
}

void sub_1C4F1C868(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_processScopedClientProxy(*(void **)(a1 + 32), a2, a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleSignificantIssueBehavior_reason_(v5, v4, 6, *(void *)(a1 + 40));
}

void sub_1C4F1C9F0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4F1CA14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = objc_msgSend_processScopedClientProxy(WeakRetained, v3, v4);
  int IsAttached = objc_msgSend_processIsAttached(v5, v6, v7);

  if (IsAttached)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    id v15 = 0;
    uint64_t v12 = objc_msgSend_containerProxyFromSetupInfo_containerScopedClientProxy_outError_(WeakRetained, v9, v10, v11, &v15);
    id v13 = v15;
  }
  else
  {
    uint64_t v12 = 0;
    id v13 = 0;
  }
  uint64_t v14 = *(void *)(a1 + 48);
  if (v14) {
    (*(void (**)(uint64_t, void *, id))(v14 + 16))(v14, v12, v13);
  }
}

void sub_1C4F1CB9C(uint64_t a1, const char *a2)
{
  objc_msgSend_deviceContextForTestDeviceReference_(CKDLogicalDeviceContext, a2, *(void *)(a1 + 32));
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = objc_msgSend_deviceScopedStateManager(v6, v3, v4);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1C4F1CCC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [CKDProcessScopedStateManagerEntitledWrapper alloc];
  objc_msgSend_processScopedClientProxy(*(void **)(a1 + 32), v4, v5);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = objc_msgSend_clientEntitlements(v11, v6, v7);
  uint64_t v10 = objc_msgSend_initWithEntitlements_(v3, v9, (uint64_t)v8);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v10);
}

void sub_1C4F1CE58(uint64_t a1)
{
  Class v4 = NSClassFromString(&cfstr_Cloudkittestin.isa);
  if (!v4)
  {
    uint64_t v5 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v2, v3);
    uint64_t v7 = objc_msgSend_stringWithUTF8String_(NSString, v6, (uint64_t)"-[CKDXPCConnection getDaemonTestServerManagerProxyCreatorWithCompletionHandler:]_block_invoke");
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v8, (uint64_t)v7, @"CKDXPCConnection.m", 367, @"Couldn't find CKDTestServerManager in test process");
  }
  objc_msgSend_sharedManager(v4, v2, v3);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4F1D100(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F1D240(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1C4F1D258(void *a1, int a2, void *a3)
{
  uint64_t v7 = a3;
  if (a1)
  {
    uint64_t v8 = objc_msgSend_xpcConnection(a1, v5, v6);
    uint64_t v10 = v8;
    if (v8)
    {
      if (a2) {
        objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v8, v9, (uint64_t)v7);
      }
      else {
      uint64_t v14 = objc_msgSend_remoteObjectProxyWithErrorHandler_(v8, v9, (uint64_t)v7);
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v11 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v16 = 0;
        _os_log_error_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_ERROR, "Couldn't get connection to client", v16, 2u);
      }
      id v13 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v12, *MEMORY[0x1E4F19C40], 1, @"Couldn't get connection to client");
      if (v7) {
        v7[2](v7, v13);
      }

      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }

  return v14;
}

uint64_t sub_1C4F1D3BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1C4F1D510(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1C4F1D528(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4F1D6EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F1DBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,id a23)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a23);
  _Unwind_Resume(a1);
}

void sub_1C4F1DC40(void **a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  if (*MEMORY[0x1E4F1A4E0])
  {
    uint64_t v10 = objc_msgSend_unitTestOverrides(a1[4], v7, v8);
    uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v10, v11, @"DropToken");

    if (v12)
    {

      id v5 = 0;
    }
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v13 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v31 = v13;
    *(_DWORD *)buf = 138412546;
    id v35 = v5;
    __int16 v36 = 2048;
    uint64_t v37 = (int)objc_msgSend_code(v6, v32, v33);
    _os_log_debug_impl(&dword_1C4CFF000, v31, OS_LOG_TYPE_DEBUG, "Fetched web auth token (%@) with response code %ld", buf, 0x16u);
  }
  if (objc_msgSend_code(v6, v14, v15) != 1)
  {
    __int16 v17 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v18 = *MEMORY[0x1E4F19DD8];
    uint64_t v19 = sub_1C4E94D98(v6);
    id v20 = objc_loadWeakRetained(a1 + 6);
    uint64_t v21 = sub_1C4E940D0(v20, v6);
    id v24 = objc_msgSend_error(v6, v22, v23);
    uint64_t v27 = objc_msgSend_errorDescription(v24, v25, v26);
    uint64_t v29 = objc_msgSend_errorWithDomain_code_userInfo_format_(v17, v28, v18, v19, v21, @"Error fetching web auth token from server: %@", v27);
    objc_msgSend_setError_(WeakRetained, v30, (uint64_t)v29);
  }
  objc_msgSend_setWebAuthToken_(WeakRetained, v16, (uint64_t)v5);
}

void sub_1C4F1DE8C(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  Class v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v9 = v4;
    uint64_t v10 = (objc_class *)objc_opt_class();
    id v11 = NSStringFromClass(v10);
    uint64_t v14 = objc_msgSend_ckShortDescription(WeakRetained, v12, v13);
    __int16 v17 = objc_msgSend_error(v3, v15, v16);
    int v18 = 138544130;
    uint64_t v19 = v11;
    __int16 v20 = 2048;
    id v21 = WeakRetained;
    __int16 v22 = 2114;
    uint64_t v23 = v14;
    __int16 v24 = 2112;
    uint64_t v25 = v17;
    _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "Fetch web auth token operation <%{public}@: %p; %{public}@> finished with error %@",
      (uint8_t *)&v18,
      0x2Au);
  }
  uint64_t v7 = objc_msgSend_error(v3, v5, v6);
  objc_msgSend_finishWithError_(WeakRetained, v8, (uint64_t)v7);
}

uint64_t CKDPResponseOperationResultErrorReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  Class v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        __int16 v17 = objc_alloc_init(CKDPResponseOperationResultErrorClient);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (PBReaderPlaceMark()
          && (CKDPResponseOperationResultErrorClientReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          goto LABEL_43;
        }
        goto LABEL_50;
      case 2u:
        __int16 v17 = objc_alloc_init(CKDPResponseOperationResultErrorServer);
        objc_storeStrong((id *)(a1 + 64), v17);
        if (!PBReaderPlaceMark()
          || (CKDPResponseOperationResultErrorServerReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_50;
        }
        goto LABEL_43;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 72) |= 1u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_47:
        *(_DWORD *)(a1 + 56) = v21;
        goto LABEL_48;
      case 4u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 24;
        goto LABEL_37;
      case 5u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 40;
        goto LABEL_37;
      case 6u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 32;
LABEL_37:
        uint64_t v27 = *(void **)(a1 + v26);
        *(void *)(a1 + v26) = v25;

        goto LABEL_48;
      case 7u:
        __int16 v17 = objc_alloc_init(CKDPResponseOperationResultErrorExtension);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (!PBReaderPlaceMark()
          || (CKDPResponseOperationResultErrorExtensionReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_50;
        }
        goto LABEL_43;
      case 8u:
        __int16 v17 = objc_alloc_init(CKDPResponseOperationResultErrorAuxiliaryError);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark()
          && (CKDPResponseOperationResultErrorAuxiliaryErrorReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_43:
          PBReaderRecallMark();

LABEL_48:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_50:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_48;
    }
  }
}

void sub_1C4F20558()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  NSStringFromClass(v0);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = (const char *)objc_msgSend_UTF8String(v7, v1, v2);
  Class v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v5 = dispatch_queue_create(v3, v4);
  uint64_t v6 = (void *)qword_1EBBCFF38;
  qword_1EBBCFF38 = (uint64_t)v5;
}

uint64_t sub_1C4F20634(uint64_t a1, const char *a2, uint64_t a3)
{
  qword_1EBBCFF48 = objc_msgSend_strongToStrongObjectsMapTable(MEMORY[0x1E4F28E10], a2, a3);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4F21234(void *a1, uint64_t a2, double a3, uint64_t a4, int a5, uint64_t a6)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1C4F22CFC;
  v6[3] = &unk_1E64F6470;
  void v6[4] = a1;
  int v7 = a5;
  *(double *)&void v6[5] = a3;
  v6[6] = a2;
  v6[7] = a6;
  sub_1C4F22C20(a1, v6);
}

void sub_1C4F212AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1C4F22D20;
  v6[3] = &unk_1E64F6490;
  void v6[4] = a1;
  void v6[5] = a3;
  v6[6] = a4;
  v6[7] = a2;
  void v6[8] = a5;
  v6[9] = a6;
  sub_1C4F22C20(a1, v6);
}

void sub_1C4F21320(void *a1, uint64_t a2, double a3, uint64_t a4, int a5, uint64_t a6)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1C4F22E08;
  v6[3] = &unk_1E64F6470;
  void v6[4] = a1;
  int v7 = a5;
  *(double *)&void v6[5] = a3;
  v6[6] = a2;
  v6[7] = a6;
  sub_1C4F22C20(a1, v6);
}

void sub_1C4F21398(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1C4F22E2C;
  v4[3] = &unk_1E64F64B0;
  void v4[4] = a1;
  v4[5] = a3;
  v4[6] = a2;
  v4[7] = a4;
  sub_1C4F22C20(a1, v4);
}

void sub_1C4F21408(void *a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = sub_1C4F22EB8;
  v2[3] = &unk_1E64F2D90;
  v2[4] = a1;
  v2[5] = a2;
  sub_1C4F22C20(a1, v2);
}

uint64_t sub_1C4F21474(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = 0;
  unsigned int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1C4F22F7C;
  v7[3] = &unk_1E64F64D8;
  void v7[6] = a2;
  v7[7] = a3;
  void v7[4] = &v8;
  v7[5] = a1;
  v7[8] = a4;
  v7[9] = a5;
  sub_1C4F22C20(a2, v7);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1C4F21528(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C4F21540(void *a1, double a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1C4F23210;
  v7[3] = &unk_1E64F64F8;
  void v7[4] = a1;
  int v8 = a5;
  *(double *)&v7[5] = a2;
  void v7[6] = a7;
  sub_1C4F22C20(a1, v7);
}

void sub_1C4F215B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1C4F232F0;
  v4[3] = &unk_1E64F6518;
  void v4[4] = a1;
  v4[5] = a3;
  v4[6] = a4;
  sub_1C4F22C20(a1, v4);
}

BOOL sub_1C4F21628(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  unsigned int v9 = (void *)MEMORY[0x1C8789E70]();
  uint64_t v40 = 0;
  long long v41 = &v40;
  uint64_t v42 = 0x3032000000;
  long long v43 = sub_1C4F2337C;
  uint64_t v44 = sub_1C4F2338C;
  id v45 = 0;
  id v10 = a2;
  char v13 = objc_msgSend_currentProcess(CKDDaemonProcess, v11, v12);
  uint64_t v16 = objc_msgSend_multipeer(v13, v14, v15);

  if (_os_feature_enabled_impl())
  {
    if (v16)
    {
      id v35 = v9;
      dispatch_semaphore_t v18 = dispatch_semaphore_create(0);
      uint64_t v21 = objc_msgSend_operation(v10, v19, v20);
      char v24 = objc_msgSend_container(v21, v22, v23);
      uint64_t v27 = objc_msgSend_containerID(v24, v25, v26);
      uint64_t v30 = objc_msgSend_containerIdentifier(v27, v28, v29);
      v36[0] = MEMORY[0x1E4F143A8];
      v36[1] = 3221225472;
      v36[2] = sub_1C4F23394;
      v36[3] = &unk_1E64F6540;
      uint64_t v38 = &v40;
      long long v39 = a4;
      uint64_t v31 = v18;
      uint64_t v37 = v31;
      objc_msgSend_discoverChunkSignature_forContainerIdentifier_chunkDataCallback_(v16, v32, a3, v30, v36);

      dispatch_semaphore_wait(v31, 0xFFFFFFFFFFFFFFFFLL);
      unsigned int v9 = v35;
      goto LABEL_11;
    }
    uint64_t v33 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v17, *MEMORY[0x1E4F19DD8], 1000, @"expected non-nil object, expected if feature flag is toggled without restarting cloudd");
  }
  else
  {
    uint64_t v33 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v17, *MEMORY[0x1E4F19DD8], 1000, @"feature flag disabled");
  }
  uint64_t v31 = v41[5];
  v41[5] = v33;
LABEL_11:

  if (a5) {
    *a5 = (id)v41[5];
  }

  _Block_object_dispose(&v40, 8);
  return a4 && *a4 != 0;
}

void sub_1C4F218A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F21BFC(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_MMCSEngine(*(void **)(a1 + 32), a2, a3);
  MMCSEngineDestroy();
  uint64_t v5 = *(void **)(a1 + 32);
  return objc_msgSend_setMMCSEngine_(v5, v4, 0);
}

void sub_1C4F2243C(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  MMCSEngineCancelRequests();
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 48);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_debug_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_DEBUG, "Did cancel for MMCS engine wrapper %@ to cancel the requests for %@", (uint8_t *)&v5, 0x16u);
  }
}

void sub_1C4F225FC(uint64_t a1)
{
}

void sub_1C4F22608(pthread_t *a1, void *a2)
{
  uint64_t v3 = a2;
  *a1 = pthread_self();
  v3[2](v3);

  *a1 = 0;
}

void sub_1C4F22740(uint64_t a1)
{
}

void sub_1C4F22980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  objc_sync_exit(v15);
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F229A0(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (a3) {
    *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  }
  *a4 = 1;
  return result;
}

void sub_1C4F22AEC(_Unwind_Exception *exception_object)
{
}

void sub_1C4F22C20(void *a1, void *a2)
{
  id v15 = a2;
  int v5 = objc_msgSend_MMCS(a1, v3, v4);
  id v10 = objc_msgSend_MMCSEngineContext(v5, v6, v7);
  if (!v10)
  {
    char v11 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v8, v9);
    char v13 = objc_msgSend_stringWithUTF8String_(NSString, v12, (uint64_t)"void runSerialized(void *, void (^__strong)(void))");
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v11, v14, (uint64_t)v13, @"CKDMMCSEngineContext.m", 134, @"Expected a non nil CKDMMCSEngineContext");
  }
  objc_msgSend_MMCSRunSerialized_(v10, v8, (uint64_t)v15);
}

uint64_t sub_1C4F22CFC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_updateProgressForItemID_state_progress_error_, *(void *)(a1 + 48));
}

void sub_1C4F22D20(uint64_t a1)
{
  id v13 = *(id *)(a1 + 32);
  uint64_t v2 = (void *)MEMORY[0x1E4F1C9B8];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = MEMORY[0x1C8788B00](v3);
  uint64_t v8 = objc_msgSend_dataWithBytes_length_(v2, v5, v3, v4);
  if (*(void *)(a1 + 48))
  {
    uint64_t v9 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v6, v7);
    size_t v10 = strlen(*(const char **)(a1 + 48));
    uint64_t v12 = objc_msgSend_stringWithFileSystemRepresentation_length_(v9, v11, *(void *)(a1 + 48), v10);
  }
  else
  {
    uint64_t v12 = 0;
  }
  objc_msgSend_didGetItemID_signature_path_error_results_(v13, v6, *(void *)(a1 + 56), v8, v12, *(void *)(a1 + 64), *(void *)(a1 + 72));
}

uint64_t sub_1C4F22E08(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_updateProgressForItemID_state_progress_results_, *(void *)(a1 + 48));
}

void sub_1C4F22E2C(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F1C9B8];
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = MEMORY[0x1C8788B00](v3);
  objc_msgSend_dataWithBytes_length_(v2, v6, v3, v5);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_didPutItemID_signature_results_(v4, v7, *(void *)(a1 + 48), v8, *(void *)(a1 + 56));
}

void sub_1C4F22EB8(uint64_t a1)
{
  id v11 = *(id *)(a1 + 32);
  id v4 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v2, @"metricObject");
  if (v4) {
    objc_msgSend_didGetMetricsForRequest_(v11, v3, (uint64_t)v4);
  }
  uint64_t v5 = objc_msgSend_objectForKey_(*(void **)(a1 + 40), v3, *MEMORY[0x1E4F73990]);
  id v8 = objc_msgSend_itemGroup(v11, v6, v7);
  objc_msgSend_setCloneContext_(v8, v9, (uint64_t)v5);

  objc_msgSend_didCompleteRequestWithError_(v11, v10, 0);
}

void sub_1C4F22F7C(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v2 = *(id *)(a1 + 40);
  id v3 = *(id *)(a1 + 48);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    id v3 = 0;
  }
  id v4 = *(id *)(a1 + 48);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    id v4 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = objc_msgSend_MMCS(v2, v5, v6);
  id v17 = 0;
  uint64_t MMCSItemReaderForItemID_MMCS_itemGroupContext_downloadChunkContext_error = objc_msgSend_getMMCSItemReaderForItemID_MMCS_itemGroupContext_downloadChunkContext_error_(CKDMMCSItemGroupContext, v9, v7, v8, v3, v4, &v17);
  id v11 = v17;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = MMCSItemReaderForItemID_MMCS_itemGroupContext_downloadChunkContext_error != 0;
  uint64_t v12 = (void *)*MEMORY[0x1E4F1A548];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v12);
    }
    id v13 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 134218242;
      uint64_t v19 = v15;
      __int16 v20 = 2112;
      id v21 = v11;
      _os_log_debug_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_DEBUG, "Created a readerWriter for itemID:%llu error: %@", buf, 0x16u);
    }
    **(void **)(a1 + 64) = MMCSItemReaderForItemID_MMCS_itemGroupContext_downloadChunkContext_error;
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v12);
    }
    BOOL v14 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 134218242;
      uint64_t v19 = v16;
      __int16 v20 = 2112;
      id v21 = v11;
      _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Failed to get the item readerWriter for itemID:%llu error: %@", buf, 0x16u);
    }
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) && *(void *)(a1 + 72)) {
    **(void **)(a1 + 72) = v11;
  }
}

void sub_1C4F23210(uint64_t a1)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = *(unsigned int *)(a1 + 56);
  double v5 = -1.0;
  if (v4 == 4) {
    double v5 = *(double *)(a1 + 40);
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6)
  {
    uint64_t v9 = *MEMORY[0x1E4F739D8];
    v10[0] = v6;
    uint64_t v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v2, (uint64_t)v10, &v9, 1);
    objc_msgSend_updateProgressForPackageSectionState_progress_results_(v3, v8, *(unsigned int *)(a1 + 56), v7, v5);
  }
  else
  {
    uint64_t v7 = 0;
    objc_msgSend_updateProgressForPackageSectionState_progress_results_(v3, v2, v4, 0, v5);
  }
}

void sub_1C4F232F0(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x1E4F1C9B8];
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = MEMORY[0x1C8788B00](v3);
  objc_msgSend_dataWithBytes_length_(v2, v6, v3, v5);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_didPutSectionWithSignature_results_(v4, v7, (uint64_t)v8, *(void *)(a1 + 48));
}

uint64_t sub_1C4F2337C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4F2338C(uint64_t a1)
{
}

void sub_1C4F23394(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (*(void *)(a1 + 48)) {
    **(void **)(a1 + 4_Block_object_dispose(&STACK[0x3F0], 8) = MMCSItemReaderWriterCreateWithData();
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
  id v7 = v4;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1C4F23830(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v10 = 0;
  char v4 = objc_msgSend__setupMMCSItemsWithError_(v3, a2, (uint64_t)&v10);
  id v7 = v10;
  id v8 = *(void **)(a1 + 32);
  if (v4)
  {
    objc_msgSend_startBlock(v8, v5, v6);
    uint64_t v9 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
    v9[2](v9, *(void *)(a1 + 32));
  }
  else
  {
    objc_msgSend_didCompleteRequestWithError_(v8, v5, (uint64_t)v7);
  }
}

void sub_1C4F23BA4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F23DE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F23E94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F26C5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F26C78(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  objc_msgSend_completionBlock(*(void **)(a1 + 32), v3, v4);
  uint64_t v5 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
  objc_msgSend_setCompletionBlock_(*(void **)(a1 + 32), v6, 0);
  objc_sync_exit(v2);

  if (v5)
  {
    uint64_t v9 = objc_msgSend_itemGroup(*(void **)(a1 + 32), v7, v8);
    ((void (**)(void, void *))v5)[2](v5, v9);
  }
  BOOL v10 = *(void *)(a1 + 40) == 0;
  id v11 = objc_msgSend_signpost(*(void **)(a1 + 32), v7, v8);

  if (v10)
  {
    if (v11)
    {
      uint64_t v29 = objc_msgSend_signpost(*(void **)(a1 + 32), v12, v13);
      id v17 = objc_msgSend_log(v29, v30, v31);

      uint64_t v34 = objc_msgSend_signpost(*(void **)(a1 + 32), v32, v33);
      uint64_t v37 = objc_msgSend_identifier(v34, v35, v36);

      if ((unint64_t)(v37 - 1) > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v17)) {
        goto LABEL_13;
      }
      LOWORD(v3_Block_object_dispose(&STACK[0x3F0], 8) = 0;
      uint64_t v25 = "";
      uint64_t v26 = v17;
      os_signpost_id_t v27 = v37;
      uint32_t v28 = 2;
      goto LABEL_12;
    }
  }
  else if (v11)
  {
    BOOL v14 = objc_msgSend_signpost(*(void **)(a1 + 32), v12, v13);
    id v17 = objc_msgSend_log(v14, v15, v16);

    __int16 v20 = objc_msgSend_signpost(*(void **)(a1 + 32), v18, v19);
    uint64_t v23 = objc_msgSend_identifier(v20, v21, v22);

    if ((unint64_t)(v23 - 1) > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v17)) {
      goto LABEL_13;
    }
    uint64_t v24 = *(void *)(a1 + 40);
    int v38 = 138412290;
    uint64_t v39 = v24;
    uint64_t v25 = "Error: %@";
    uint64_t v26 = v17;
    os_signpost_id_t v27 = v23;
    uint32_t v28 = 12;
LABEL_12:
    _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v26, OS_SIGNPOST_INTERVAL_END, v27, "CKDMMCSItemGroupContext", v25, (uint8_t *)&v38, v28);
LABEL_13:
  }
}

void sub_1C4F26E94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1C4F29944(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = (void *)MEMORY[0x1C8789E70]();
  id v38 = 0;
  uint64_t v9 = objc_msgSend_getFileMetadataWithError_(a2, v8, (uint64_t)&v38);
  id v10 = v38;
  id v11 = v10;
  if (a3 && v9)
  {
    id v12 = objc_alloc(MEMORY[0x1E4F1CA60]);
    BOOL v14 = objc_msgSend_initWithCapacity_(v12, v13, 4);
    id v17 = objc_msgSend_fileSize(v9, v15, v16);

    if (v17)
    {
      __int16 v20 = objc_msgSend_fileSize(v9, v18, v19);
      objc_msgSend_setObject_forKeyedSubscript_(v14, v21, (uint64_t)v20, *MEMORY[0x1E4F73880]);
    }
    uint64_t v22 = objc_msgSend_fileID(v9, v18, v19);

    if (v22)
    {
      uint64_t v25 = objc_msgSend_fileID(v9, v23, v24);
      objc_msgSend_setObject_forKeyedSubscript_(v14, v26, (uint64_t)v25, *MEMORY[0x1E4F73888]);
    }
    os_signpost_id_t v27 = objc_msgSend_generationID(v9, v23, v24);

    if (v27)
    {
      uint64_t v30 = objc_msgSend_generationID(v9, v28, v29);
      objc_msgSend_setObject_forKeyedSubscript_(v14, v31, (uint64_t)v30, *MEMORY[0x1E4F73870]);
    }
    uint64_t v32 = objc_msgSend_modTimeInSeconds(v9, v28, v29);

    if (v32)
    {
      id v35 = objc_msgSend_modTimeInSeconds(v9, v33, v34);
      objc_msgSend_setObject_forKeyedSubscript_(v14, v36, (uint64_t)v35, *MEMORY[0x1E4F73878]);
    }
    *a3 = v14;
  }
  else if (a4 && !v9)
  {
    *a4 = v10;
  }

  return v9 != 0;
}

uint64_t sub_1C4F29B14(uint64_t a1, void *a2, void *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v7 = objc_msgSend_MMCSItem(v4, v5, v6);
  id v10 = objc_msgSend_MMCSRequest(v4, v8, v9);
  uint64_t v13 = objc_msgSend_MMCS(v10, v11, v12);
  dispatch_semaphore_t v18 = objc_msgSend_operation(v10, v14, v15);
  if (v13)
  {
    uint64_t v36 = 0;
  }
  else
  {
    uint64_t v36 = objc_msgSend_downloadChunkContext(v4, v16, v17);
    uint64_t v13 = objc_msgSend_MMCS(v36, v19, v20);
  }
  objc_msgSend_assetCache(v13, v16, v17);
  id v21 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v22 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v36;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v13;
    *(_WORD *)&buf[22] = 2112;
    uint64_t v51 = v21;
    _os_log_debug_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_DEBUG, "CKDMMCSItemReaderOpen %@ %@ %@", buf, 0x20u);
    if (v21) {
      goto LABEL_8;
    }
LABEL_13:
    __assert_rtn("CKDMMCSItemReaderOpen", "CKDMMCSItemGroupContext.m", 907, "assetCache && \"Expected non-nil asset cache\"");
  }
  if (!v21) {
    goto LABEL_13;
  }
LABEL_8:
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000;
  uint64_t v51 = sub_1C4F2A784;
  id v52 = sub_1C4F2A794;
  id v53 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = &v46;
  uint64_t v48 = 0x2020000000;
  char v49 = 0;
  uint64_t v25 = objc_msgSend_MMCSEngineContext(v13, v23, v24);
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  v37[2] = sub_1C4F2A79C;
  v37[3] = &unk_1E64F6568;
  id v26 = v7;
  id v38 = v26;
  uint64_t v44 = &v46;
  id v27 = v4;
  id v39 = v27;
  id v45 = buf;
  id v28 = v18;
  id v40 = v28;
  id v29 = v10;
  id v41 = v29;
  id v30 = v13;
  id v42 = v30;
  uint64_t v31 = v21;
  long long v43 = v31;
  objc_msgSend_MMCSRunSerialized_(v25, v32, (uint64_t)v37);

  uint64_t v33 = v47;
  uint64_t v34 = *((unsigned __int8 *)v47 + 24);
  if (a3 && !*((unsigned char *)v47 + 24))
  {
    *a3 = *(id *)(*(void *)&buf[8] + 40);
    uint64_t v34 = *((unsigned __int8 *)v33 + 24);
  }

  _Block_object_dispose(&v46, 8);
  _Block_object_dispose(buf, 8);

  return v34;
}

void sub_1C4F29E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_1C4F29E98(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v13 = (void *)MEMORY[0x1C8789E70]();
  id v19 = 0;
  uint64_t v15 = objc_msgSend_readBytesAtOffset_bytes_length_bytesRead_error_(a2, v14, a3, a4, a5, a6, &v19);
  id v16 = v19;
  uint64_t v17 = v16;
  if (a7 && (v15 & 1) == 0) {
    *a7 = v16;
  }

  return v15;
}

uint64_t sub_1C4F29F44(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)MEMORY[0x1C8789E70]();
  id v11 = 0;
  uint64_t v7 = objc_msgSend_closeWithError_(a2, v6, (uint64_t)&v11);
  id v8 = v11;
  uint64_t v9 = v8;
  if (a3 && (v7 & 1) == 0) {
    *a3 = v8;
  }

  return v7;
}

void sub_1C4F29FC0(void *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    int v3 = 134217984;
    id v4 = a1;
    _os_log_debug_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_DEBUG, "invalidate, reader:%p", (uint8_t *)&v3, 0xCu);
  }
}

uint64_t sub_1C4F2A09C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v13 = (void *)MEMORY[0x1C8789E70]();
  id v19 = 0;
  uint64_t v15 = objc_msgSend_writeBytesAtOffset_bytes_length_bytesWritten_error_(a2, v14, a3, a4, a5, a6, &v19);
  id v16 = v19;
  uint64_t v17 = v16;
  if (a7 && (v15 & 1) == 0) {
    *a7 = v16;
  }

  return v15;
}

uint64_t sub_1C4F2A148(uint64_t a1, void *a2, const void *a3)
{
  uint64_t v3 = 0;
  if (a1 && a2 && a3)
  {
    uint64_t v6 = (void *)MEMORY[0x1C8789E70]();
    id v7 = a2;
    id v10 = objc_msgSend_MMCSRequest(v7, v8, v9);
    uint64_t v13 = objc_msgSend_operation(v10, v11, v12);
    id v16 = objc_msgSend_container(v13, v14, v15);

    id v19 = objc_msgSend_serverConfig(v16, v17, v18);
    uint64_t v22 = objc_msgSend_containerID(v16, v20, v21);
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F73860]))
    {
      uint64_t v24 = objc_msgSend_chunkProfileConfigurationVersion_(v19, v23, (uint64_t)v22);
    }
    else if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F73858]))
    {
      uint64_t v24 = objc_msgSend_chunkProfileConfigurationFileExtensionToProfileMap_(v19, v25, (uint64_t)v22);
    }
    else
    {
      if (!CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F73850]))
      {
        id v29 = objc_msgSend_MMCSItem(v7, v26, v27);
        uint64_t v32 = objc_msgSend_assetChunkerOptions(v29, v30, v31);

        if (v32 && CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F73848]))
        {
          uint64_t v3 = objc_msgSend_objectForKeyedSubscript_(v32, v33, *MEMORY[0x1E4F1A578]);
        }
        else
        {
          uint64_t v3 = 0;
        }

        goto LABEL_11;
      }
      uint64_t v24 = objc_msgSend_chunkProfileConfigurationDefaultProfilePolicy_(v19, v26, (uint64_t)v22);
    }
    uint64_t v3 = v24;
LABEL_11:
  }
  return v3;
}

uint64_t sub_1C4F2A784(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4F2A794(uint64_t a1)
{
}

void sub_1C4F2A79C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_itemID(*(void **)(a1 + 32), a2, a3);
  id v7 = objc_msgSend_trackingUUID(*(void **)(a1 + 32), v5, v6);
  id v8 = objc_alloc(MEMORY[0x1E4F29128]);
  id v10 = objc_msgSend_initWithUUIDString_(v8, v9, (uint64_t)v7);
  id v11 = *(void **)(a1 + 40);
  uint64_t v12 = *(void *)(*(void *)(a1 + 88) + 8);
  id obj = *(id *)(v12 + 40);
  char v14 = objc_msgSend_openWithError_(v11, v13, (uint64_t)&obj);
  objc_storeStrong((id *)(v12 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v14;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24))
  {
    if ((objc_msgSend_shouldFetchAssetContentInMemory(*(void **)(a1 + 56), v15, v16) & 1) == 0) {
      objc_msgSend_updateLastAccessTimeForUUID_(*(void **)(a1 + 72), v17, (uint64_t)v10);
    }
  }
  else
  {
    uint64_t v18 = (void *)MEMORY[0x1E4F1A550];
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v19 = (os_log_t *)MEMORY[0x1E4F1A500];
    uint64_t v20 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v31 = *(void **)(a1 + 40);
      uint64_t v32 = v20;
      id v35 = objc_msgSend_MMCSItem(v31, v33, v34);
      id v38 = objc_msgSend_operationID(*(void **)(a1 + 48), v36, v37);
      uint64_t v39 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
      *(_DWORD *)buf = 138412802;
      uint64_t v42 = (uint64_t)v35;
      __int16 v43 = 2114;
      uint64_t v44 = v38;
      __int16 v45 = 2112;
      uint64_t v46 = v39;
      _os_log_debug_impl(&dword_1C4CFF000, v32, OS_LOG_TYPE_DEBUG, "Failed to open %@ for operationID:%{public}@: %@", buf, 0x20u);
    }
    if ((objc_msgSend_shouldFetchAssetContentInMemory(*(void **)(a1 + 56), v21, v22) & 1) == 0
      && (objc_msgSend_isTrackingItemID_(*(void **)(a1 + 64), v23, v4) & 1) == 0)
    {
      if (*v18 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v24 = *v19;
      if (os_log_type_enabled(*v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218242;
        uint64_t v42 = v4;
        __int16 v43 = 2114;
        uint64_t v44 = v10;
        _os_log_debug_impl(&dword_1C4CFF000, v24, OS_LOG_TYPE_DEBUG, "Deleting the asset handle with itemID:%llu, UUID:%{public}@", buf, 0x16u);
      }
      id v26 = (void *)MEMORY[0x1E4F1CAA0];
      uint64_t v27 = objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E4F28ED0], v25, v4);
      id v29 = objc_msgSend_orderedSetWithObject_(v26, v28, (uint64_t)v27);

      objc_msgSend_unregisterItemsAndDeleteUnregisteredAssetHandlesWithIDs_deleteUnregisteredAssetHandlesWithIDs_(*(void **)(a1 + 72), v30, (uint64_t)v29, 0);
    }
  }
}

uint64_t sub_1C4F2ACAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (1)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0) {
            goto LABEL_41;
          }
          v23 += 7;
          BOOL v14 = v24++ >= 9;
          if (v14)
          {
            uint64_t v25 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
LABEL_43:
        *(unsigned char *)(a1 + 12) = v25 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_37;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_39:
        *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4F2BA7C()
{
  return 1;
}

void sub_1C4F2BA84(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1C4F2BC14;
  v9[3] = &unk_1E64F6590;
  objc_copyWeak(&v10, &location);
  objc_msgSend_setSaveCompletionBlock_(v3, v4, (uint64_t)v9);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1C4F2BC7C;
  v6[3] = &unk_1E64F0170;
  objc_copyWeak(&v7, &location);
  objc_copyWeak(&v8, &from);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)v6);
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4F2BBD8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 64));
  objc_destroyWeak((id *)(v4 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4F2BC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v8) {
    objc_msgSend_setError_(WeakRetained, v6, (uint64_t)v8);
  }
}

void sub_1C4F2BC7C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = objc_msgSend_error(v2, v3, v4);

  if (v5)
  {
    id v8 = objc_msgSend_error(v2, v6, v7);
    objc_msgSend_setError_(WeakRetained, v9, (uint64_t)v8);
  }
  id v10 = objc_msgSend_stateTransitionGroup(WeakRetained, v6, v7);
  dispatch_group_leave(v10);
}

void sub_1C4F2BDEC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v10 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      int v29 = 138412290;
      id v30 = v9;
      _os_log_error_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_ERROR, "Error while trying to determine userID: %@", (uint8_t *)&v29, 0xCu);
    }
    objc_msgSend_setError_(*(void **)(a1 + 32), v11, (uint64_t)v9);
  }
  else
  {
    BOOL v14 = [CKDProtocolTranslator alloc];
    char v17 = objc_msgSend_initWithContainer_databaseScope_(v14, v15, *(void *)(a1 + 40), *(void *)(a1 + 48));
    if (v17)
    {
      objc_msgSend_setTranslator_(*(void **)(a1 + 32), v16, (uint64_t)v17);
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      unsigned int v18 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        LOWORD(v29) = 0;
        _os_log_error_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_ERROR, "CKDSerializeRecordModificationsOperation is unable to instantiate a CKDProtocolTranslator", (uint8_t *)&v29, 2u);
      }
      uint64_t v20 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v19, *MEMORY[0x1E4F19C40], 1000, @"CKDSerializeRecordModificationsOperation is unable to instantiate a CKDProtocolTranslator");
      objc_msgSend_setError_(*(void **)(a1 + 32), v21, (uint64_t)v20);
    }
  }
  unsigned int v24 = objc_msgSend_error(*(void **)(a1 + 32), v12, v13);
  if (!v24)
  {
    uint64_t v25 = objc_msgSend_translator(*(void **)(a1 + 32), v22, v23);
    if (!v25) {
      __assert_rtn("-[CKDSerializeRecordModificationsOperation _setupTranslator]_block_invoke", "CKDSerializeRecordModificationsOperation.m", 214, "self.error != nil || self.translator != nil");
    }
  }
  char v28 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v26, v27);
  dispatch_group_leave(v28);
}

void sub_1C4F2C7EC(void **a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v56 = a4;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  id v8 = objc_alloc_init(CKDPRealTimeMessageAssociatedMergeableDeltas);
  uint64_t v11 = objc_msgSend_translator(a1[4], v9, v10);
  BOOL v14 = objc_msgSend_recordID(a1[5], v12, v13);
  uint64_t v16 = objc_msgSend_pRecordIdentifierFromRecordID_(v11, v15, (uint64_t)v14);
  objc_msgSend_setRecordIdentifier_(v8, v17, (uint64_t)v16);

  unsigned int v18 = objc_opt_new();
  objc_msgSend_setFieldIdentifier_(v8, v19, (uint64_t)v18);

  char v22 = objc_msgSend_fieldIdentifier(v8, v20, v21);
  id v58 = v6;
  objc_msgSend_setName_(v22, v23, (uint64_t)v6);

  uint64_t v26 = objc_msgSend_translator(a1[4], v24, v25);
  int v29 = objc_msgSend_valueID(v7, v27, v28);
  uint64_t v31 = objc_msgSend_pMergeableValueIdentifierFromMergeableValueID_(v26, v30, (uint64_t)v29);
  objc_msgSend_setIdentifier_(v8, v32, (uint64_t)v31);

  id v33 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  id v57 = v7;
  uint64_t v36 = objc_msgSend_deltasToSave(v7, v34, v35);
  uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v37, (uint64_t)&v60, v66, 16);
  if (v38)
  {
    uint64_t v41 = v38;
    uint64_t v42 = *(void *)v61;
    while (2)
    {
      for (uint64_t i = 0; i != v41; ++i)
      {
        if (*(void *)v61 != v42) {
          objc_enumerationMutation(v36);
        }
        uint64_t v44 = *(void *)(*((void *)&v60 + 1) + 8 * i);
        __int16 v45 = objc_msgSend_translator(a1[4], v39, v40, v56);
        id v59 = 0;
        uint64_t v47 = objc_msgSend_pMergeableDeltaFromDelta_error_(v45, v46, v44, &v59);
        id v48 = v59;

        if (v48)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          id v53 = v57;
          id v52 = v58;
          uint64_t v54 = *MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            id v65 = v48;
            _os_log_error_impl(&dword_1C4CFF000, v54, OS_LOG_TYPE_ERROR, "Error translating CKMergerableDeltas during serialization: %@", buf, 0xCu);
          }
          objc_msgSend_setError_(a1[4], v55, (uint64_t)v48);
          unsigned char *v56 = 1;

          goto LABEL_15;
        }
        objc_msgSend_addObject_(v33, v49, (uint64_t)v47);
      }
      uint64_t v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v39, (uint64_t)&v60, v66, 16);
      if (v41) {
        continue;
      }
      break;
    }
  }

  objc_msgSend_setMergeableDeltas_(v8, v50, (uint64_t)v33);
  objc_msgSend_addObject_(a1[6], v51, (uint64_t)v8);
  id v53 = v57;
  id v52 = v58;
LABEL_15:
}

void sub_1C4F2CC9C()
{
  id v0 = objc_alloc(MEMORY[0x1E4F28E78]);
  id v16 = (id)objc_msgSend_initWithString_(v0, v1, @"com.apple.cloudkit");
  uint64_t v4 = objc_msgSend_currentProcess(CKDDaemonProcess, v2, v3);
  uint64_t v7 = objc_msgSend_processType(v4, v5, v6);

  if (v7 == 2) {
    objc_msgSend_appendString_(v16, v8, @".test");
  }
  objc_msgSend_appendString_(v16, v8, @".tcc-event-subscriber");
  id v9 = [CKDAuthorizationObserver alloc];
  uint64_t v11 = objc_msgSend_initWithIdentifier_(v9, v10, (uint64_t)v16);
  unint64_t v12 = (void *)qword_1EBBCFF58;
  qword_1EBBCFF58 = v11;

  BOOL v14 = objc_msgSend_setWithObject_(MEMORY[0x1E4F1CAD0], v13, *MEMORY[0x1E4FA9A90]);
  objc_msgSend_setServices_((void *)qword_1EBBCFF58, v15, (uint64_t)v14);
}

void sub_1C4F2CF8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F2D07C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F2D4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  objc_sync_exit(v16);
  _Unwind_Resume(a1);
}

void sub_1C4F2D50C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (id *)(a1 + 40);
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(v5);
  objc_msgSend__handleTCCAuthorizationEventWithType_record_block_(WeakRetained, v7, a2, v6, *(void *)(a1 + 32));
}

void sub_1C4F2E590()
{
  id v0 = (void *)qword_1EBBCFF68;
  qword_1EBBCFF68 = (uint64_t)&unk_1F20AC078;
}

uint64_t sub_1C4F2EA74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        unsigned int v18 = objc_alloc_init(CKDPShare);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (CKDPShareReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if (v17 == 2)
        {
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_37;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_39;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v21) = 0;
          }
LABEL_39:
          *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v21;
          continue;
        }
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        unsigned int v18 = objc_alloc_init(CKDPShareIdentifier);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || !CKDPShareIdentifierReadFrom((uint64_t)v18, a2)) {
          goto LABEL_42;
        }
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4F2F27C()
{
  qword_1EBBCFF78 = objc_opt_new();
  return MEMORY[0x1F41817F8]();
}

void sub_1C4F2F4BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F2F69C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F2FAA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F2FB34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F2FBC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F2FC4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F2FCE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F2FD7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F2FE14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F2FF08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F2FF94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F30020(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t CKDPShareReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    unint64_t v17 = v10 >> 3;
    switch((v10 >> 3))
    {
      case 1u:
        unsigned int v18 = objc_alloc_init(CKDPShareIdentifier);
        objc_storeStrong((id *)(a1 + 104), v18);
        if (PBReaderPlaceMark() && CKDPShareIdentifierReadFrom((uint64_t)v18, a2)) {
          goto LABEL_89;
        }
        goto LABEL_121;
      case 2u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 24;
        goto LABEL_92;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 132) |= 2u;
        while (2)
        {
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 == -1 || v26 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              BOOL v14 = v23++ >= 9;
              if (v14)
              {
                LODWORD(v24) = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v24) = 0;
        }
LABEL_96:
        uint64_t v61 = 80;
        goto LABEL_113;
      case 4u:
        unsigned int v18 = objc_alloc_init(CKDPProtectionInfo);
        uint64_t v28 = 40;
        goto LABEL_37;
      case 5u:
        unsigned int v18 = objc_alloc_init(CKDPProtectionInfo);
        uint64_t v28 = 96;
LABEL_37:
        objc_storeStrong((id *)(a1 + v28), v18);
        if (!PBReaderPlaceMark() || !sub_1C4D5BCB4((uint64_t)v18, a2)) {
          goto LABEL_121;
        }
        goto LABEL_89;
      case 6u:
        unsigned int v18 = objc_alloc_init(CKDPParticipant);
        objc_msgSend_addParticipant_((void *)a1, v29, (uint64_t)v18);
        goto LABEL_43;
      case 7u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 120;
        goto LABEL_92;
      case 8u:
        unsigned int v18 = objc_alloc_init(CKDPParticipant);
        objc_msgSend_addPotentialMatch_((void *)a1, v30, (uint64_t)v18);
LABEL_43:
        if (!PBReaderPlaceMark() || (CKDPParticipantReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_121;
        }
        goto LABEL_89;
      case 9u:
        PBReaderReadData();
        unsigned int v18 = (CKDPShareIdentifier *)objc_claimAutoreleasedReturnValue();
        if (v18) {
          objc_msgSend_addInvitedKeyToRemove_((void *)a1, v31, (uint64_t)v18);
        }
        goto LABEL_90;
      case 0xAu:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        *(unsigned char *)(a1 + 132) |= 0x20u;
        while (2)
        {
          uint64_t v35 = *v3;
          unint64_t v36 = *(void *)(a2 + v35);
          if (v36 == -1 || v36 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
            *(void *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              BOOL v14 = v33++ >= 9;
              if (v14)
              {
                uint64_t v34 = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v34 = 0;
        }
LABEL_100:
        BOOL v62 = v34 != 0;
        uint64_t v63 = 130;
        goto LABEL_118;
      case 0xBu:
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v40 = 0;
        *(unsigned char *)(a1 + 132) |= 8u;
        while (2)
        {
          uint64_t v41 = *v3;
          unint64_t v42 = *(void *)(a2 + v41);
          if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
            *(void *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              BOOL v14 = v39++ >= 9;
              if (v14)
              {
                uint64_t v40 = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v40 = 0;
        }
LABEL_104:
        BOOL v62 = v40 != 0;
        uint64_t v63 = 128;
        goto LABEL_118;
      case 0xCu:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 16;
        goto LABEL_92;
      case 0xDu:
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 132) |= 4u;
        while (2)
        {
          uint64_t v46 = *v3;
          unint64_t v47 = *(void *)(a2 + v46);
          if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v48 = *(unsigned char *)(*(void *)(a2 + *v7) + v47);
            *(void *)(a2 + v46) = v47 + 1;
            v24 |= (unint64_t)(v48 & 0x7F) << v44;
            if (v48 < 0)
            {
              v44 += 7;
              BOOL v14 = v45++ >= 9;
              if (v14)
              {
                LODWORD(v24) = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v24) = 0;
        }
LABEL_108:
        uint64_t v61 = 84;
        goto LABEL_113;
      case 0xEu:
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 132) |= 1u;
        while (2)
        {
          uint64_t v51 = *v3;
          unint64_t v52 = *(void *)(a2 + v51);
          if (v52 == -1 || v52 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v53 = *(unsigned char *)(*(void *)(a2 + *v7) + v52);
            *(void *)(a2 + v51) = v52 + 1;
            v24 |= (unint64_t)(v53 & 0x7F) << v49;
            if (v53 < 0)
            {
              v49 += 7;
              BOOL v14 = v50++ >= 9;
              if (v14)
              {
                LODWORD(v24) = 0;
                goto LABEL_112;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v24) = 0;
        }
LABEL_112:
        uint64_t v61 = 56;
LABEL_113:
        *(_DWORD *)(a1 + v61) = v24;
        goto LABEL_119;
      case 0xFu:
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v56 = 0;
        *(unsigned char *)(a1 + 132) |= 0x10u;
        while (2)
        {
          uint64_t v57 = *v3;
          unint64_t v58 = *(void *)(a2 + v57);
          if (v58 == -1 || v58 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v59 = *(unsigned char *)(*(void *)(a2 + *v7) + v58);
            *(void *)(a2 + v57) = v58 + 1;
            v56 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              BOOL v14 = v55++ >= 9;
              if (v14)
              {
                uint64_t v56 = 0;
                goto LABEL_117;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v56 = 0;
        }
LABEL_117:
        BOOL v62 = v56 != 0;
        uint64_t v63 = 129;
LABEL_118:
        *(unsigned char *)(a1 + v63) = v62;
        goto LABEL_119;
      case 0x10u:
      case 0x11u:
        goto LABEL_25;
      case 0x12u:
        unsigned int v18 = objc_alloc_init(CKDPShareAccessRequesters);
        objc_storeStrong((id *)(a1 + 88), v18);
        if (!PBReaderPlaceMark() || (sub_1C4F5A620(v18, a2) & 1) == 0) {
          goto LABEL_121;
        }
        goto LABEL_89;
      case 0x13u:
        unsigned int v18 = objc_alloc_init(CKDPShareAccessBlockedRequesters);
        objc_storeStrong((id *)(a1 + 8), v18);
        if PBReaderPlaceMark() && (sub_1C4EC424C(v18, a2))
        {
LABEL_89:
          PBReaderRecallMark();
LABEL_90:

LABEL_119:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_121:

        return 0;
      default:
        if (v17 == 101)
        {
          uint64_t v19 = PBReaderReadData();
          uint64_t v20 = 112;
        }
        else
        {
          if (v17 != 102)
          {
LABEL_25:
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            goto LABEL_119;
          }
          uint64_t v19 = PBReaderReadString();
          uint64_t v20 = 48;
        }
LABEL_92:
        long long v60 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;

        goto LABEL_119;
    }
  }
}

void sub_1C4F336D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v17 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4F33704(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = objc_msgSend_error(v2, v3, v4);

  if (!v5)
  {
    char v8 = objc_msgSend_containerPrivacySettings(v2, v6, v7);
    objc_msgSend_setContainerPrivacySettings_(WeakRetained, v9, (uint64_t)v8);
  }
  unint64_t v10 = objc_msgSend_error(v2, v6, v7);
  objc_msgSend_finishWithError_(WeakRetained, v11, (uint64_t)v10);
}

uint64_t sub_1C4F345BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = (CKDPZoneCapabilities *)objc_alloc_init(MEMORY[0x1E4F19F30]);
        objc_storeStrong((id *)(a1 + 32), v17);
        if PBReaderPlaceMark() && (CKDPRecordZoneIdentifierReadFrom()) {
          goto LABEL_50;
        }
        goto LABEL_66;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_54:
        uint64_t v36 = 24;
        goto LABEL_59;
      case 3u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (2)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_58:
        uint64_t v36 = 28;
LABEL_59:
        *(_DWORD *)(a1 + v36) = v21;
        goto LABEL_64;
      case 4u:
        uint64_t v17 = objc_alloc_init(CKDPZoneCapabilities);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (sub_1C4F8113C((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_66;
        }
        goto LABEL_50;
      case 5u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        *(unsigned char *)(a1 + 44) |= 4u;
        while (2)
        {
          uint64_t v33 = *v3;
          unint64_t v34 = *(void *)(a2 + v33);
          if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
            *(void *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              BOOL v14 = v31++ >= 9;
              if (v14)
              {
                uint64_t v32 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
LABEL_63:
        *(unsigned char *)(a1 + 40) = v32 != 0;
        goto LABEL_64;
      case 6u:
        uint64_t v17 = objc_alloc_init(CKDPAnonymousZoneInfo);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark() && sub_1C4EE8B14((uint64_t)v17, a2))
        {
LABEL_50:
          PBReaderRecallMark();

LABEL_64:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_66:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_64;
    }
  }
}

BOOL sub_1C4F35368(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
LABEL_22:
        char v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&STACK[0x3F0], 8) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4F35CB4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F35CD4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = a2;
  objc_msgSend_protocol(v3, v5, v6);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKInvokeAndNilOutReplyBlockWithError_forProtocol_(v2, v7, (uint64_t)v4, v8);
}

void sub_1C4F35E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4F35F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4F35FE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F371C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location)
{
  objc_destroyWeak(v33);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F371F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = objc_msgSend_stateTransitionGroup(WeakRetained, v6, v7);
  dispatch_group_enter(v8);

  id v9 = v3;
  objc_initWeak(&location, v9);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_1C4F37374;
  v14[3] = &unk_1E64F6590;
  objc_copyWeak(&v15, v4);
  objc_msgSend_setSaveCompletionBlock_(v9, v10, (uint64_t)v14);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = sub_1C4F373D8;
  v12[3] = &unk_1E64F01E8;
  objc_copyWeak(&v13, &location);
  void v12[4] = WeakRetained;
  objc_msgSend_setCompletionBlock_(v9, v11, (uint64_t)v12);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&location);
}

void sub_1C4F37348(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4F37374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5)
  {
    uint64_t v5 = (id *)(a1 + 32);
    id v6 = a5;
    id WeakRetained = objc_loadWeakRetained(v5);
    objc_msgSend_setError_(WeakRetained, v7, (uint64_t)v6);
  }
}

void sub_1C4F373D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = objc_msgSend_error(WeakRetained, v2, v3);

  if (v4)
  {
    uint64_t v7 = objc_msgSend_error(WeakRetained, v5, v6);
    objc_msgSend_setError_(*(void **)(a1 + 32), v8, (uint64_t)v7);
  }
  id v9 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v5, v6);
  dispatch_group_leave(v9);
}

void sub_1C4F376C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F376EC(uint64_t a1, void *a2)
{
  v24[2] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = objc_msgSend_stateTransitionGroup(WeakRetained, v5, v6);
  dispatch_group_enter(v7);

  id v8 = v3;
  objc_initWeak(&location, v8);
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v11 = objc_msgSend_UUID(MEMORY[0x1E4F29128], v9, v10);
  objc_msgSend_getUUIDBytes_(v11, v12, (uint64_t)v24);

  BOOL v14 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v13, (uint64_t)v24, 16);
  objc_msgSend_setAttestationEntropy_(v8, v15, (uint64_t)v14);

  objc_msgSend_setReplaceLocalSerializationsBlobs_(v8, v16, (uint64_t)&unk_1F20442F0);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = sub_1C4F3798C;
  v21[3] = &unk_1E64F6730;
  objc_copyWeak(&v22, &location);
  v21[4] = WeakRetained;
  objc_msgSend_setInitialResponseReceivedCallback_(v8, v17, (uint64_t)v21);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_1C4F37D4C;
  void v19[3] = &unk_1E64F01E8;
  objc_copyWeak(&v20, &location);
  v19[4] = WeakRetained;
  objc_msgSend_setCompletionBlock_(v8, v18, (uint64_t)v19);
  objc_destroyWeak(&v20);
  objc_destroyWeak(&v22);
  objc_destroyWeak(&location);
}

void sub_1C4F378D0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 80));
  _Unwind_Resume(a1);
}

void sub_1C4F37914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void, void))
{
  uint64_t v6 = a5;
  id v7 = (id)objc_opt_new();
  ((void (**)(void, id, void))a5)[2](v6, v7, 0);
}

void sub_1C4F3798C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  uint64_t v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v10 = objc_msgSend_error(WeakRetained, v8, v9);

  if (v10)
  {
    id v13 = objc_msgSend_error(WeakRetained, v11, v12);
    objc_msgSend_setError_(*(void **)(a1 + 32), v14, (uint64_t)v13);
  }
  else
  {
    id v15 = [CKDPCodeFunctionInvokeResponseAttestationResponse alloc];
    uint64_t v17 = objc_msgSend_initWithData_(v15, v16, (uint64_t)v5);
    id v20 = objc_msgSend_attestations(v17, v18, v19);
    uint64_t v23 = objc_msgSend_count(v20, v21, v22);

    if (!v23)
    {
      long long v70 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v24, *MEMORY[0x1E4F19DD8], 9000, @"Did not receive attestation from server");
      v6[2](v6, 0, v70);

      goto LABEL_4;
    }
    id v73 = WeakRetained;
    __int16 v74 = v6;
    id v75 = v5;
    id v25 = objc_alloc(MEMORY[0x1E4F1CA48]);
    unint64_t v28 = objc_msgSend_attestations(v17, v26, v27);
    uint64_t v31 = objc_msgSend_count(v28, v29, v30);
    id v77 = objc_msgSend_initWithCapacity_(v25, v32, v31);

    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v72 = v17;
    objc_msgSend_attestations(v17, v33, v34);
    id obj = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v35, (uint64_t)&v78, v82, 16);
    if (v36)
    {
      uint64_t v37 = v36;
      uint64_t v38 = *(void *)v79;
      do
      {
        for (uint64_t i = 0; i != v37; ++i)
        {
          if (*(void *)v79 != v38) {
            objc_enumerationMutation(obj);
          }
          uint64_t v40 = *(void **)(*((void *)&v78 + 1) + 8 * i);
          uint64_t v41 = [PCCAttestation alloc];
          char v44 = objc_msgSend_pckCertificate(v40, v42, v43);
          unint64_t v47 = objc_msgSend_appQuote(v40, v45, v46);
          unsigned int v50 = objc_msgSend_aqeQuote(v40, v48, v49);
          char v53 = objc_msgSend_routingToken(v40, v51, v52);
          unsigned int v55 = objc_msgSend_initWithCertificate_applicationEnclaveQuote_quotingEnclaveQuote_routingToken_(v41, v54, (uint64_t)v44, v47, v50, v53);

          uint64_t v56 = [PCCWrappedKey alloc];
          char v59 = objc_msgSend_pccKey(*(void **)(a1 + 32), v57, v58);
          BOOL v62 = objc_msgSend_permittedRemoteMeasurement(*(void **)(a1 + 32), v60, v61);
          long long v64 = objc_msgSend_initWithKey_permittedRemoteMeasurement_attestation_(v56, v63, (uint64_t)v59, v62, v55);

          if (v64) {
            objc_msgSend_addObject_(v77, v65, (uint64_t)v64);
          }
        }
        uint64_t v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v66, (uint64_t)&v78, v82, 16);
      }
      while (v37);
    }

    id WeakRetained = v73;
    if (!objc_msgSend_count(v77, v67, v68))
    {
      long long v71 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v69, *MEMORY[0x1E4F19DD8], 9001, @"Could not verify attestation using the permittedRemoteMeasurement provided");
      uint64_t v6 = v74;
      v74[2](v74, 0, v71);

      id v5 = v75;
      goto LABEL_4;
    }
    objc_msgSend_setPccWrappedKeys_(*(void **)(a1 + 32), v69, (uint64_t)v77);

    uint64_t v6 = v74;
    id v5 = v75;
  }
  v6[2](v6, MEMORY[0x1E4F1CBF0], 0);
LABEL_4:
}

void sub_1C4F37D4C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = objc_msgSend_error(WeakRetained, v2, v3);

  if (v4)
  {
    id v7 = objc_msgSend_error(WeakRetained, v5, v6);
    objc_msgSend_setError_(*(void **)(a1 + 32), v8, (uint64_t)v7);
  }
  uint64_t v9 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v5, v6);
  dispatch_group_leave(v9);
}

void sub_1C4F37F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F37FA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, v3);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1C4F3809C;
  v5[3] = &unk_1E64F33C0;
  objc_copyWeak(&v6, &location);
  objc_copyWeak(&v7, (id *)(a1 + 40));
  void v5[4] = *(void *)(a1 + 32);
  objc_msgSend_setCompletionBlock_(v3, v4, (uint64_t)v5);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
}

void sub_1C4F38078(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4F3809C(void **a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  id v3 = objc_loadWeakRetained(a1 + 6);
  id v6 = objc_msgSend_transcodeServerPublicKey(WeakRetained, v4, v5);
  uint64_t v9 = objc_msgSend_error(WeakRetained, v7, v8);

  if (v9 || !v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    char v24 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v27 = v24;
      uint64_t v30 = objc_msgSend_error(WeakRetained, v28, v29);
      *(_DWORD *)buf = 138412290;
      uint64_t v36 = v30;
      _os_log_impl(&dword_1C4CFF000, v27, OS_LOG_TYPE_INFO, "Failed to fetch public key from trusted target: %@", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v12 = objc_msgSend_trustedTargetKey(a1[4], v10, v11);
    id v15 = objc_msgSend_key(v12, v13, v14);
    id v33 = 0;
    id v34 = 0;
    int v16 = CKEncryptWithPublicKey(v6, v15, 0, &v34, &v33);
    id v17 = v34;
    id v18 = v33;

    if (v16 && v17)
    {
      id v20 = [CKDTrustedTargetWrappedKey alloc];
      uint64_t v22 = objc_msgSend_initWithWrappedKey_publicKey_(v20, v21, (uint64_t)v17, v6);
      objc_msgSend_setTrustedTargetWrappedKey_(a1[4], v23, (uint64_t)v22);
    }
    else
    {
      uint64_t v22 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v19, *MEMORY[0x1E4F19DD8], 1000, v18, @"Failed to wrap invocation key");
      objc_msgSend_setError_(v3, v31, (uint64_t)v22);
    }
  }
  uint64_t v32 = objc_msgSend_stateTransitionGroup(v3, v25, v26);
  dispatch_group_leave(v32);
}

void sub_1C4F384A0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v8 = a3;
  uint64_t v9 = (void *)MEMORY[0x1E4F1A550];
  uint64_t v10 = (os_log_t *)MEMORY[0x1E4F1A500];
  if (v8)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v11 = *v10;
    if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v39 = 138412290;
      id v40 = v8;
      _os_log_error_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_ERROR, "Error fetching configuration to check if we should send record keys: %@", (uint8_t *)&v39, 0xCu);
    }
    uint64_t v14 = 0;
  }
  else
  {
    id v15 = objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], v6, v7);
    int isAppleInternalInstall = objc_msgSend_isAppleInternalInstall(v15, v16, v17);

    if (isAppleInternalInstall)
    {
      if (*v9 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v21 = *v10;
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v39) = 0;
        _os_log_debug_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_DEBUG, "Always sending record keys for internal installs", (uint8_t *)&v39, 2u);
      }
      uint64_t v14 = 1;
    }
    else
    {
      uint64_t v22 = objc_msgSend_containerID(*(void **)(a1 + 32), v19, v20);
      uint64_t v14 = objc_msgSend_allowCloudMediaProcessingOffloadForGM_(v5, v23, (uint64_t)v22);
    }
  }
  if (*MEMORY[0x1E4F1A4E0])
  {
    char v24 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v12, v13);
    uint64_t v26 = objc_msgSend_objectForKeyedSubscript_(v24, v25, @"AllowSendingRecordKeysForCMP");

    if (v26)
    {
      if (*v9 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      os_log_t v27 = *v10;
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
      {
        char v35 = v27;
        int v38 = objc_msgSend_BOOLValue(v26, v36, v37);
        int v39 = 67109120;
        LODWORD(v40) = v38;
        _os_log_debug_impl(&dword_1C4CFF000, v35, OS_LOG_TYPE_DEBUG, "Overriding allowSendingRecordPCSKeys = %d", (uint8_t *)&v39, 8u);
      }
      uint64_t v14 = objc_msgSend_BOOLValue(v26, v28, v29);
    }
  }
  if (*v9 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v30 = *v10;
  if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
  {
    int v39 = 67109120;
    LODWORD(v40) = v14;
    _os_log_debug_impl(&dword_1C4CFF000, v30, OS_LOG_TYPE_DEBUG, "Setting shouldSendRecordPCSKeys = %d", (uint8_t *)&v39, 8u);
  }
  objc_msgSend_setShouldSendRecordPCSKeys_(*(void **)(a1 + 32), v31, v14);
  id v34 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v32, v33);
  dispatch_group_leave(v34);
}

uint64_t sub_1C4F38C4C(uint64_t a1, const char *a2)
{
  return objc_msgSend_encryptData_(*(void **)(a1 + 32), a2, (uint64_t)a2);
}

void sub_1C4F38C58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  objc_initWeak(&location, *(id *)(a1 + 40));
  id v8 = objc_msgSend_container(*(void **)(a1 + 40), v6, v7);
  uint64_t v11 = objc_msgSend_pcsCache(v8, v9, v10);
  uint64_t v14 = objc_msgSend_recordID(v5, v12, v13);
  uint64_t v15 = *(void *)(a1 + 40);
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = sub_1C4F38DD8;
  v18[3] = &unk_1E64F67A8;
  objc_copyWeak(v22, &location);
  id v16 = v5;
  id v19 = v16;
  id v20 = *(id *)(a1 + 48);
  v22[1] = a3;
  id v21 = *(id *)(a1 + 32);
  objc_msgSend_fetchPCSForRecordWithID_forOperation_options_withCompletionHandler_(v11, v17, (uint64_t)v14, v15, 0, v18);

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
}

void sub_1C4F38DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F38DD8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v10 = objc_msgSend_pcs(v6, v8, v9);

  if (WeakRetained)
  {
    if (v5)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v11 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(void **)(a1 + 32);
        uint64_t v13 = v11;
        id v16 = objc_msgSend_recordID(v12, v14, v15);
        int v52 = 138412546;
        char v53 = v16;
        __int16 v54 = 2112;
        id v55 = v5;
        _os_log_error_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_ERROR, "Error fetching PCS data in secure compute operation for %@: %@", (uint8_t *)&v52, 0x16u);
        goto LABEL_25;
      }
    }
    else
    {
      if (v10)
      {
        uint64_t v13 = PCSFPGetCurrentMasterKey();
        if (*MEMORY[0x1E4F1A4E0])
        {
          id v20 = objc_msgSend_unitTestOverrides(WeakRetained, v18, v19);
          uint64_t v22 = objc_msgSend_objectForKeyedSubscript_(v20, v21, @"SendFakeEncryptedMasterKeysInRecordTransports");
          int v25 = objc_msgSend_BOOLValue(v22, v23, v24);

          if (v25)
          {
            unint64_t v28 = objc_msgSend_UUID(MEMORY[0x1E4F29128], v26, v27);
            uint64_t v31 = objc_msgSend_UUIDString(v28, v29, v30);
            uint64_t v33 = objc_msgSend_dataUsingEncoding_(v31, v32, 4);

            uint64_t v13 = v33;
          }
        }
        id v34 = (void *)*MEMORY[0x1E4F1A548];
        if (v13)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], v34);
          }
          char v35 = (void *)*MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
          {
            uint64_t v43 = *(void **)(a1 + 32);
            char v44 = v35;
            unint64_t v47 = objc_msgSend_recordID(v43, v45, v46);
            int v52 = 138412290;
            char v53 = v47;
            _os_log_debug_impl(&dword_1C4CFF000, v44, OS_LOG_TYPE_DEBUG, "Setting master key on secure compute operation for %@", (uint8_t *)&v52, 0xCu);
          }
          id v16 = objc_msgSend_encryptData_(WeakRetained, v36, (uint64_t)v13);
          objc_msgSend_setObject_atIndexedSubscript_(*(void **)(a1 + 40), v37, (uint64_t)v16, *(void *)(a1 + 64));
        }
        else
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], v34);
          }
          unint64_t v42 = (void *)*MEMORY[0x1E4F1A500];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG)) {
            goto LABEL_29;
          }
          char v48 = *(void **)(a1 + 32);
          id v16 = v42;
          uint64_t v51 = objc_msgSend_recordID(v48, v49, v50);
          int v52 = 138412290;
          char v53 = v51;
          _os_log_debug_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEBUG, "Couldn't get master key in secure compute operation for %@", (uint8_t *)&v52, 0xCu);
        }
LABEL_25:

LABEL_29:
        goto LABEL_30;
      }
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      int v38 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        int v39 = *(void **)(a1 + 32);
        uint64_t v13 = v38;
        id v16 = objc_msgSend_recordID(v39, v40, v41);
        int v52 = 138412290;
        char v53 = v16;
        _os_log_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_INFO, "No error, but also no PCS data during secure compute operation for record %@", (uint8_t *)&v52, 0xCu);
        goto LABEL_25;
      }
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v17 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v52) = 0;
      _os_log_error_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_ERROR, "We lost ourself trying to fetch PCS to get record keys for secure compute", (uint8_t *)&v52, 2u);
    }
  }
LABEL_30:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1C4F39254(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_pccKey(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_clear(v4, v5, v6);

  objc_msgSend_setPccKey_(*(void **)(a1 + 32), v7, 0);
  objc_msgSend_replaceLocalSerializationsBlobs(*(void **)(a1 + 32), v8, v9);
  uint64_t v10 = (void (**)(void, void, void, void, void))objc_claimAutoreleasedReturnValue();
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_1C4F39318;
  v14[3] = &unk_1E64F67F8;
  void v14[4] = *(void *)(a1 + 32);
  ((void (**)(void, uint64_t, uint64_t, uint64_t, void *))v10)[2](v10, v11, v12, v13, v14);
}

void sub_1C4F39318(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  objc_msgSend_setSerializedArguments_(*(void **)(a1 + 32), v5, a2);
  if (v9) {
    objc_msgSend_setError_(*(void **)(a1 + 32), v6, (uint64_t)v9);
  }
  id v8 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v6, v7);
  dispatch_group_leave(v8);
}

void sub_1C4F39664(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 96));
  objc_destroyWeak((id *)(v5 - 88));
  _Unwind_Resume(a1);
}

void sub_1C4F396AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v11 = objc_msgSend_translator(v8, v9, v10);
  objc_msgSend_setTranslator_(WeakRetained, v12, (uint64_t)v11);

  int v15 = objc_msgSend_code(v6, v13, v14);
  id v16 = (void *)*MEMORY[0x1E4F1A548];
  uint64_t v17 = *MEMORY[0x1E4F1A550];
  if (v15 == 1)
  {
    if (v17 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v16);
    }
    id v18 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_DEBUG, "Function invocation completed", buf, 2u);
    }
    objc_msgSend_setSerializedResponse_(WeakRetained, v19, (uint64_t)v5);
  }
  else
  {
    if (v17 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v16);
    }
    id v43 = v5;
    id v20 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      id v46 = v6;
      _os_log_debug_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEBUG, "Error %@ when invoking function", buf, 0xCu);
    }
    char v44 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v21 = *MEMORY[0x1E4F19DD8];
    uint64_t v22 = sub_1C4E94D98(v6);
    int v25 = objc_msgSend_request(WeakRetained, v23, v24);
    uint64_t v26 = sub_1C4E940D0(v25, v6);
    uint64_t v29 = objc_msgSend_functionName(WeakRetained, v27, v28);
    uint64_t v32 = objc_msgSend_serviceName(WeakRetained, v30, v31);
    char v35 = objc_msgSend_error(v6, v33, v34);
    int v38 = objc_msgSend_errorDescription(v35, v36, v37);
    id v40 = objc_msgSend_errorWithDomain_code_userInfo_format_(v44, v39, v21, v22, v26, @"Error %@ when invoking function %@ on service %@: %@", v6, v29, v32, v38);

    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v5 = v43;
    uint64_t v41 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      id v46 = v40;
      _os_log_debug_impl(&dword_1C4CFF000, v41, OS_LOG_TYPE_DEBUG, "Error %@", buf, 0xCu);
    }
    objc_msgSend_setError_(WeakRetained, v42, (uint64_t)v40);
  }
}

void sub_1C4F399DC(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  id v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = @" with error ";
    uint64_t v11 = &stru_1F2044F30;
    if (v6) {
      uint64_t v11 = v6;
    }
    else {
      uint64_t v10 = &stru_1F2044F30;
    }
    int v16 = 138543618;
    uint64_t v17 = v10;
    __int16 v18 = 2112;
    uint64_t v19 = v11;
    _os_log_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_INFO, "CKCode Function invocation finished%{public}@%@", (uint8_t *)&v16, 0x16u);
  }
  uint64_t v12 = objc_msgSend_error(WeakRetained, v8, v9);

  if (!v12) {
    objc_msgSend_setError_(WeakRetained, v13, (uint64_t)v6);
  }
  int v15 = objc_msgSend_stateTransitionGroup(WeakRetained, v13, v14);
  dispatch_group_leave(v15);
}

void sub_1C4F39DE8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 96));
  objc_destroyWeak((id *)(v5 - 88));
  _Unwind_Resume(a1);
}

void sub_1C4F39E30(uint64_t a1, void *a2, void *a3)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v11 = objc_msgSend_translator(v8, v9, v10);
  objc_msgSend_setTranslator_(WeakRetained, v12, (uint64_t)v11);

  int hasCode = objc_msgSend_hasCode(v6, v13, v14);
  int v16 = (void *)*MEMORY[0x1E4F1A548];
  uint64_t v17 = (os_log_t *)MEMORY[0x1E4F1A500];
  if (hasCode)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v16);
    }
    __int16 v18 = *v17;
    if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      id v126 = v6;
      _os_log_debug_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_DEBUG, "Error %@ when invoking function", buf, 0xCu);
    }
    int v21 = objc_msgSend_code(v6, v19, v20);
    uint64_t v22 = 1000;
    if (v21 == 2) {
      uint64_t v22 = 6000;
    }
    if (v21 == 1) {
      uint64_t v22 = 1013;
    }
    uint64_t v119 = v22;
    uint64_t v23 = objc_opt_new();
    if (objc_msgSend_hasMessage(v6, v24, v25))
    {
      uint64_t v28 = objc_msgSend_message(v6, v26, v27);
      objc_msgSend_setObject_forKeyedSubscript_(v23, v29, (uint64_t)v28, @"ServerMessage");
    }
    if (objc_msgSend_hasAuxiliaryDomain(v6, v26, v27))
    {
      uint64_t v32 = objc_msgSend_auxiliaryDomain(v6, v30, v31);
      if (!objc_msgSend_length(v32, v33, v34) || !objc_msgSend_hasAuxiliaryCode(v6, v35, v36)) {
        goto LABEL_49;
      }
      int v39 = objc_msgSend_auxiliaryCode(v6, v37, v38);

      if (v39)
      {
        if (!objc_msgSend_auxiliaryUserInfosCount(v6, v30, v31))
        {
          uint64_t v32 = 0;
          goto LABEL_48;
        }
        long long v117 = v23;
        id v118 = v5;
        id v42 = objc_alloc(MEMORY[0x1E4F1CA60]);
        uint64_t v45 = objc_msgSend_auxiliaryUserInfosCount(v6, v43, v44);
        uint64_t v32 = objc_msgSend_initWithCapacity_(v42, v46, v45);
        long long v120 = 0u;
        long long v121 = 0u;
        long long v122 = 0u;
        long long v123 = 0u;
        uint64_t v49 = objc_msgSend_auxiliaryUserInfos(v6, v47, v48);
        uint64_t v51 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v50, (uint64_t)&v120, v124, 16);
        if (!v51) {
          goto LABEL_39;
        }
        uint64_t v54 = v51;
        uint64_t v55 = *(void *)v121;
        while (1)
        {
          for (uint64_t i = 0; i != v54; ++i)
          {
            if (*(void *)v121 != v55) {
              objc_enumerationMutation(v49);
            }
            uint64_t v57 = *(void **)(*((void *)&v120 + 1) + 8 * i);
            if (objc_msgSend_hasKey(v57, v52, v53))
            {
              uint64_t v58 = objc_msgSend_key(v57, v52, v53);
              if (objc_msgSend_length(v58, v59, v60))
              {
                int hasValue = objc_msgSend_hasValue(v57, v61, v62);

                if (!hasValue) {
                  continue;
                }
                uint64_t v58 = objc_msgSend_value(v57, v52, v53);
                if (objc_msgSend_hasDoubleValue(v58, v64, v65))
                {
                  uint64_t v68 = (void *)MEMORY[0x1E4F28ED0];
                  objc_msgSend_doubleValue(v58, v66, v67);
                  uint64_t v71 = objc_msgSend_numberWithDouble_(v68, v69, v70);
                  goto LABEL_35;
                }
                if (objc_msgSend_hasInt64Value(v58, v66, v67))
                {
                  __int16 v76 = (void *)MEMORY[0x1E4F28ED0];
                  uint64_t v77 = objc_msgSend_int64Value(v58, v74, v75);
                  uint64_t v71 = objc_msgSend_numberWithInteger_(v76, v78, v77);
                  goto LABEL_35;
                }
                if (objc_msgSend_hasBoolValue(v58, v74, v75))
                {
                  long long v81 = (void *)MEMORY[0x1E4F28ED0];
                  uint64_t v82 = objc_msgSend_BOOLValue(v58, v79, v80);
                  uint64_t v71 = objc_msgSend_numberWithBool_(v81, v83, v82);
                  goto LABEL_35;
                }
                if (objc_msgSend_hasStringValue(v58, v79, v80))
                {
                  uint64_t v71 = objc_msgSend_stringValue(v58, v84, v85);
                  goto LABEL_35;
                }
                if (objc_msgSend_hasBytesValue(v58, v84, v85))
                {
                  uint64_t v71 = objc_msgSend_bytesValue(v58, v86, v87);
LABEL_35:
                  __int16 v88 = (void *)v71;
                  id v89 = objc_msgSend_key(v57, v72, v73);
                  objc_msgSend_setObject_forKeyedSubscript_(v32, v90, (uint64_t)v88, v89);
                }
              }

              continue;
            }
          }
          uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v52, (uint64_t)&v120, v124, 16);
          if (!v54)
          {
LABEL_39:

            if (!objc_msgSend_count(v32, v91, v92))
            {

              uint64_t v32 = 0;
            }
            uint64_t v23 = v117;
            id v5 = v118;
            uint64_t v17 = (os_log_t *)MEMORY[0x1E4F1A500];
LABEL_48:
            long long v95 = (void *)MEMORY[0x1E4F28C58];
            long long v96 = objc_msgSend_auxiliaryDomain(v6, v40, v41);
            int v99 = objc_msgSend_auxiliaryCode(v6, v97, v98);
            __int16 v101 = objc_msgSend_errorWithDomain_code_userInfo_(v95, v100, (uint64_t)v96, v99, v32);

            objc_msgSend_setObject_forKeyedSubscript_(v23, v102, (uint64_t)v101, *MEMORY[0x1E4F28A50]);
            objc_msgSend_setObject_forKeyedSubscript_(v23, v103, (uint64_t)v101, *MEMORY[0x1E4F19DE8]);

LABEL_49:
            break;
          }
        }
      }
    }
    if (!objc_msgSend_count(v23, v30, v31))
    {

      uint64_t v23 = 0;
    }
    uint64_t v106 = (void *)MEMORY[0x1E4F1A550];
    uint64_t v107 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v108 = *MEMORY[0x1E4F19DD8];
    uint64_t v109 = objc_msgSend_functionName(WeakRetained, v104, v105);
    uint64_t v112 = objc_msgSend_serviceName(WeakRetained, v110, v111);
    id v114 = objc_msgSend_errorWithDomain_code_userInfo_format_(v107, v113, v108, v119, v23, @"Error when locally invoking function %@ on service %@", v109, v112);

    if (*v106 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v115 = *v17;
    if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      id v126 = v114;
      _os_log_debug_impl(&dword_1C4CFF000, v115, OS_LOG_TYPE_DEBUG, "Error %@", buf, 0xCu);
    }
    objc_msgSend_setError_(WeakRetained, v116, (uint64_t)v114);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v16);
    }
    uint64_t v93 = *v17;
    if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v93, OS_LOG_TYPE_DEBUG, "Function invocation completed", buf, 2u);
    }
    objc_msgSend_setSerializedResponse_(WeakRetained, v94, (uint64_t)v5);
  }
}

void sub_1C4F3A444(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(v3, v4, v5);
  id v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = @" with error ";
    uint64_t v11 = &stru_1F2044F30;
    if (v6) {
      uint64_t v11 = v6;
    }
    else {
      uint64_t v10 = &stru_1F2044F30;
    }
    int v16 = 138543618;
    uint64_t v17 = v10;
    __int16 v18 = 2112;
    uint64_t v19 = v11;
    _os_log_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_INFO, "CKCode Local Function invocation finished%{public}@%@", (uint8_t *)&v16, 0x16u);
  }
  uint64_t v12 = objc_msgSend_error(WeakRetained, v8, v9);

  if (!v12) {
    objc_msgSend_setError_(WeakRetained, v13, (uint64_t)v6);
  }
  int v15 = objc_msgSend_stateTransitionGroup(WeakRetained, v13, v14);
  dispatch_group_leave(v15);
}

void sub_1C4F3A6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F3A704(void **a1, void *a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (v6)
  {
    objc_msgSend_setError_(a1[4], v7, (uint64_t)v6);
  }
  else if (objc_msgSend_count(v5, v7, v8))
  {
    id v31 = v5;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id obj = v5;
    uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v34, v38, 16);
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v35;
      while (2)
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v35 != v14) {
            objc_enumerationMutation(obj);
          }
          uint64_t v16 = *(void *)(*((void *)&v34 + 1) + 8 * i);
          uint64_t v17 = [CKDPRecord alloc];
          uint64_t v19 = objc_msgSend_initWithData_(v17, v18, v16);
          uint64_t v22 = objc_msgSend_translator(WeakRetained, v20, v21);
          id v33 = 0;
          uint64_t v24 = objc_msgSend_recordFromPRecord_error_(v22, v23, (uint64_t)v19, &v33);
          id v25 = v33;

          if (!v24)
          {
            if (!v25)
            {
              objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v26, *MEMORY[0x1E4F19DD8], 1017, @"Invalid pRecord: %@", v19);
              id v25 = (id)objc_claimAutoreleasedReturnValue();
            }
            objc_msgSend_setError_(a1[4], v26, (uint64_t)v25);

            goto LABEL_16;
          }
          objc_msgSend_addObject_(a1[5], v26, (uint64_t)v24);
        }
        uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v27, (uint64_t)&v34, v38, 16);
        if (v13) {
          continue;
        }
        break;
      }
    }
LABEL_16:

    id v5 = v31;
  }
  objc_msgSend_setResponseRecords_(a1[4], v10, (uint64_t)a1[5]);
  uint64_t v30 = objc_msgSend_stateTransitionGroup(a1[4], v28, v29);
  dispatch_group_leave(v30);
}

void sub_1C4F3AA50(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = objc_msgSend_responseRecords(*(void **)(a1 + 32), v4, v5);
  objc_msgSend_setFullRecordsToFetch_(v3, v7, (uint64_t)v6);

  objc_msgSend_setUseRecordCache_(v3, v8, 0);
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = sub_1C4F3AD10;
  v20[3] = &unk_1E64F12C0;
  objc_copyWeak(&v22, &location);
  id v21 = *(id *)(a1 + 40);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v9, (uint64_t)v20);
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = sub_1C4F3AE5C;
  v18[3] = &unk_1E64F1270;
  objc_copyWeak(&v19, &location);
  objc_msgSend_setRecordFetchProgressBlock_(v3, v10, (uint64_t)v18);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = sub_1C4F3AEF8;
  v16[3] = &unk_1E64F15D8;
  objc_copyWeak(&v17, &location);
  objc_msgSend_setRecordFetchCommandBlock_(v3, v11, (uint64_t)v16);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C4F3AFA0;
  v13[3] = &unk_1E64F0170;
  objc_copyWeak(&v14, &location);
  objc_copyWeak(&v15, &from);
  objc_msgSend_setCompletionBlock_(v3, v12, (uint64_t)v13);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&v14);
  objc_destroyWeak(&v17);
  objc_destroyWeak(&v19);

  objc_destroyWeak(&v22);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4F3ACB4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 96));
  objc_destroyWeak((id *)(v6 - 88));
  _Unwind_Resume(a1);
}

void sub_1C4F3AD10(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v26 = a2;
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v12 = objc_msgSend_container(WeakRetained, v10, v11);
  id v15 = objc_msgSend_options(v12, v13, v14);
  if (!objc_msgSend_returnPCSMetadata(v15, v16, v17))
  {

    goto LABEL_5;
  }
  char v18 = CKIsPCSError();

  id v21 = v26;
  if ((v18 & 1) == 0)
  {
    objc_msgSend_fillOutPCSMetadataInfo(v26, v19, v20);
LABEL_5:
    id v21 = v26;
  }
  if (v21 && v7) {
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v19, (uint64_t)v26, v7);
  }
  if (v8) {
    objc_msgSend_setError_(WeakRetained, v19, (uint64_t)v8);
  }
  id v22 = objc_msgSend_recordFetchCompletionBlock(WeakRetained, v19, v20);

  if (v22)
  {
    objc_msgSend_recordFetchCompletionBlock(WeakRetained, v23, v24);
    id v25 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
    ((void (**)(void, id, id, id))v25)[2](v25, v26, v7, v8);
  }
}

void sub_1C4F3AE5C(uint64_t a1, void *a2, double a3)
{
  id v12 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = objc_msgSend_recordFetchProgressBlock(WeakRetained, v6, v7);

  if (v8)
  {
    objc_msgSend_recordFetchProgressBlock(WeakRetained, v9, v10);
    uint64_t v11 = (void (**)(void, void, double))objc_claimAutoreleasedReturnValue();
    ((void (**)(void, id, double))v11)[2](v11, v12, a3);
  }
}

void sub_1C4F3AEF8(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v9 = objc_msgSend_recordFetchCommandBlock(WeakRetained, v7, v8);

  if (v9)
  {
    objc_msgSend_recordFetchCommandBlock(WeakRetained, v10, v11);
    id v12 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
    ((void (**)(void, id, id))v12)[2](v12, v13, v5);
  }
}

void sub_1C4F3AFA0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = objc_msgSend_error(v2, v3, v4);

  if (v5)
  {
    objc_msgSend_error(v2, v6, v7);
    uint64_t v8 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
    objc_msgSend_setError_(WeakRetained, v9, (uint64_t)v8);
  }
  else
  {
    objc_msgSend_replaceWireSerializations(WeakRetained, v6, v7);
    uint64_t v8 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
    id v12 = objc_msgSend_responseRecords(WeakRetained, v10, v11);
    ((void (**)(void, void *))v8)[2](v8, v12);
  }
  id v15 = objc_msgSend_stateTransitionGroup(WeakRetained, v13, v14);
  dispatch_group_leave(v15);
}

void sub_1C4F3BCB4()
{
  id v0 = (void *)qword_1EBBCFF88;
  qword_1EBBCFF88 = (uint64_t)&unk_1F20AC0A0;
}

BOOL CKDPMergeableDeltaSaveRequestReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPMergeableValueIdentifier);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || !sub_1C4E62940((uint64_t)v17, a2)) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = objc_alloc_init(CKDPMergeableDelta);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || (CKDPMergeableDeltaReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4F3D120(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    int v16 = v10 & 7;
    if (v15 || v16 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = (CKDPSubscriptionNotification *)objc_alloc_init(MEMORY[0x1E4F19F08]);
        objc_storeStrong((id *)(a1 + 48), v18);
        if PBReaderPlaceMark() && (CKDPIdentifierReadFrom()) {
          goto LABEL_69;
        }
        goto LABEL_96;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 92) |= 1u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_73:
        uint64_t v45 = 32;
        goto LABEL_78;
      case 3u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 92) |= 2u;
        while (2)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_77:
        uint64_t v45 = 64;
LABEL_78:
        *(_DWORD *)(a1 + v45) = v21;
        goto LABEL_93;
      case 4u:
        if (v16 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v31 = 0;
            unsigned int v32 = 0;
            uint64_t v33 = 0;
            while (1)
            {
              uint64_t v34 = *v3;
              unint64_t v35 = *(void *)(a2 + v34);
              if (v35 == -1 || v35 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
              *(void *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                BOOL v14 = v32++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_48;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_48:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v48 = 0;
          while (1)
          {
            uint64_t v49 = *v3;
            unint64_t v50 = *(void *)(a2 + v49);
            if (v50 == -1 || v50 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v51 = *(unsigned char *)(*(void *)(a2 + *v7) + v50);
            *(void *)(a2 + v49) = v50 + 1;
            v48 |= (unint64_t)(v51 & 0x7F) << v46;
            if (v51 < 0)
            {
              v46 += 7;
              BOOL v14 = v47++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_92;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_92:
          PBRepeatedInt32Add();
        }
        goto LABEL_93;
      case 5u:
        char v18 = objc_alloc_init(CKDPSubscriptionNotification);
        objc_storeStrong((id *)(a1 + 56), v18);
        if (!PBReaderPlaceMark() || (sub_1C5048700((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_96;
        }
        goto LABEL_69;
      case 6u:
        char v18 = objc_alloc_init(CKDPQueryFilter);
        objc_msgSend_addFilters_((void *)a1, v37, (uint64_t)v18);
        if (!PBReaderPlaceMark() || (sub_1C4E8FE04((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_96;
        }
        goto LABEL_69;
      case 7u:
        char v18 = objc_alloc_init(CKDPRecordType);
        objc_msgSend_addRecordTypes_((void *)a1, v38, (uint64_t)v18);
        if (!PBReaderPlaceMark() || (CKDPRecordTypeReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_96;
        }
        goto LABEL_69;
      case 8u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(unsigned char *)(a1 + 92) |= 4u;
        while (2)
        {
          uint64_t v42 = *v3;
          unint64_t v43 = *(void *)(a2 + v42);
          if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
            *(void *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              BOOL v14 = v40++ >= 9;
              if (v14)
              {
                uint64_t v41 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v41 = 0;
        }
LABEL_82:
        *(unsigned char *)(a1 + 8_Block_object_dispose(&STACK[0x3F0], 8) = v41 != 0;
        goto LABEL_93;
      case 0xAu:
        char v18 = (CKDPSubscriptionNotification *)objc_alloc_init(MEMORY[0x1E4F19F30]);
        objc_storeStrong((id *)(a1 + 80), v18);
        if PBReaderPlaceMark() && (CKDPRecordZoneIdentifierReadFrom())
        {
LABEL_69:
          PBReaderRecallMark();

LABEL_93:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_96:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_93;
    }
  }
}

uint64_t sub_1C4F3EBAC(uint64_t a1, const char *a2, void *a3)
{
  return objc_msgSend_setCloneContext_(a3, a2, *(void *)(a1 + 32));
}

BOOL sub_1C4F3EDB4(id *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v18 = objc_alloc_init(CKDPFieldActionReplaceListRange);
        objc_storeStrong(a1 + 3, v18);
        if (!PBReaderPlaceMark() || !sub_1C4E100DC((id *)&v18->super.super.isa, a2))
        {
LABEL_34:

          return 0;
        }
        goto LABEL_29;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        char v18 = objc_alloc_init(CKDPFieldActionInsertIntoList);
        objc_storeStrong(a1 + 2, v18);
        if (!PBReaderPlaceMark() || (sub_1C4E27718((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_34;
        }
LABEL_29:
        PBReaderRecallMark();

        goto LABEL_31;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_31:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(CKDPFieldActionDeleteListRange);
    objc_storeStrong(a1 + 1, v18);
    if (!PBReaderPlaceMark() || (sub_1C4EFC814((uint64_t)v18, a2) & 1) == 0) {
      goto LABEL_34;
    }
    goto LABEL_29;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

SecCertificateRef sub_1C4F3FEE0(uint64_t a1, const __CFData *a2)
{
  SecCertificateRef v2 = SecCertificateCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
  return v2;
}

BOOL sub_1C4F407E0(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v21 = PBReaderReadData();
        char v18 = (CKDPZoneRetrieveResponseZoneSummary *)a1[2];
        a1[2] = v21;
        goto LABEL_28;
      }
      if (v17 == 1)
      {
        char v18 = objc_alloc_init(CKDPZoneRetrieveResponseZoneSummary);
        objc_msgSend_addZoneSummary_(a1, v19, (uint64_t)v18);
        if (!PBReaderPlaceMark() || (sub_1C4E35588((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_33;
        }
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_30:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(CKDPAnonymousZoneInfo);
    objc_msgSend_addAnonymousZoneInfo_(a1, v20, (uint64_t)v18);
    if (!PBReaderPlaceMark() || !sub_1C4EE8B14((uint64_t)v18, a2))
    {
LABEL_33:

      return 0;
    }
LABEL_26:
    PBReaderRecallMark();
LABEL_28:

    goto LABEL_30;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4F41DF8(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(CKDPRecordRetrieveChangesResponseRecordChange);
        objc_msgSend_addChangedRecord_((void *)a1, v18, (uint64_t)v17);
        if PBReaderPlaceMark() && (sub_1C4EBE458((uint64_t)v17, a2)) {
          goto LABEL_52;
        }
        goto LABEL_64;
      case 2u:
        uint64_t v19 = PBReaderReadData();
        uint64_t v20 = 48;
        goto LABEL_24;
      case 3u:
        uint64_t v19 = PBReaderReadData();
        uint64_t v20 = 32;
LABEL_24:
        uint64_t v21 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;

        goto LABEL_53;
      case 4u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 76) |= 1u;
        while (2)
        {
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 == -1 || v26 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              BOOL v14 = v23++ >= 9;
              if (v14)
              {
                LODWORD(v24) = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v24) = 0;
        }
LABEL_58:
        *(_DWORD *)(a1 + 40) = v24;
        goto LABEL_53;
      case 5u:
        unint64_t v17 = objc_alloc_init(CKDPRecordRetrieveChangesResponseShareChange);
        objc_msgSend_addChangedShare_((void *)a1, v28, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (sub_1C4F2EA74((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_64;
        }
        goto LABEL_52;
      case 6u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        *(unsigned char *)(a1 + 76) |= 2u;
        while (2)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v31 |= (unint64_t)(v34 & 0x7F) << v29;
            if (v34 < 0)
            {
              v29 += 7;
              BOOL v14 = v30++ >= 9;
              if (v14)
              {
                uint64_t v31 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v31 = 0;
        }
LABEL_62:
        *(unsigned char *)(a1 + 72) = v31 != 0;
        goto LABEL_53;
      case 7u:
        unint64_t v17 = objc_alloc_init(CKDPRecordRetrieveChangesResponseMergeableDeltaChange);
        objc_msgSend_addChangedDeltas_((void *)a1, v35, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1C4D5FAD4((id *)&v17->super.super.isa, a2)) {
          goto LABEL_64;
        }
        goto LABEL_52;
      case 8u:
        unint64_t v17 = objc_alloc_init(CKDPRecordRetrieveChangesResponseSyncObligation);
        objc_msgSend_addSyncObligations_((void *)a1, v36, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (sub_1C4DF5DF4((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_64;
        }
        goto LABEL_52;
      case 0xCu:
        unint64_t v17 = objc_alloc_init(CKDPRecordRetrieveChangesResponseZoneAttributesChange);
        objc_storeStrong((id *)(a1 + 64), v17);
        if PBReaderPlaceMark() && (sub_1C4E8E860((uint64_t)v17, a2))
        {
LABEL_52:
          PBReaderRecallMark();

LABEL_53:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_64:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_53;
    }
  }
}

void sub_1C4F434EC()
{
  id v0 = (void *)qword_1EBBCDEB8;
  qword_1EBBCDEB8 = (uint64_t)&unk_1F20AC0C8;
}

BOOL sub_1C4F4367C(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(CKDPMergeableValueIdentifier);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || !sub_1C4E62940((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadData();
    unint64_t v17 = *(CKDPMergeableValueIdentifier **)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4F44274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose((const void *)(v45 - 256), 8);
  _Block_object_dispose((const void *)(v45 - 224), 8);
  _Block_object_dispose((const void *)(v45 - 160), 8);
  _Unwind_Resume(a1);
}

id sub_1C4F442E8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_signature(*(void **)(a1 + 40), a2, a3);
  objc_msgSend_setSignature_(*(void **)(a1 + 32), v5, (uint64_t)v4);

  char v8 = objc_msgSend_verificationKey(*(void **)(a1 + 40), v6, v7);
  objc_msgSend_setVerificationKey_(*(void **)(a1 + 32), v9, (uint64_t)v8);

  uint64_t v10 = objc_opt_class();
  objc_msgSend_setClassOfNextMessage_(*(void **)(a1 + 48), v11, v10);
  Message = 0;
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 0;
  int v15 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
  do
  {
    int v16 = Message;
    Message = objc_msgSend_nextMessage(*(void **)(a1 + 48), v12, v13);

    if (!Message)
    {
      if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
      {
        char v46 = objc_msgSend_errorWithDomain_code_path_format_(MEMORY[0x1E4F1A280], v17, *MEMORY[0x1E4F19C40], 1000, *(void *)(a1 + 56), @"Failed reading section object from manifest");
      }
      else
      {
        if (*v15 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v93 = *MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
        {
          uint64_t v97 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          uint64_t v103 = v97;
          _os_log_debug_impl(&dword_1C4CFF000, v93, OS_LOG_TYPE_DEBUG, "Found empty package %@", buf, 0xCu);
        }
        char v46 = 0;
      }
      goto LABEL_41;
    }
    id v18 = objc_alloc(MEMORY[0x1E4F1A260]);
    uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
    char v22 = objc_msgSend_signature(Message, v20, v21);
    uint64_t v25 = objc_msgSend_size(Message, v23, v24);
    unint64_t v28 = objc_msgSend_verificationKey(Message, v26, v27);
    unsigned int v30 = objc_msgSend_initWithIndex_signature_size_paddedSize_verificationKey_(v18, v29, v19, v22, v25, 0, v28);

    objc_msgSend_addSection_(*(void **)(a1 + 32), v31, (uint64_t)v30);
    objc_msgSend_addObject_(*(void **)(a1 + 64), v32, (uint64_t)v30);
    if (*v15 != -1) {
      dispatch_once(v15, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unint64_t v33 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v38 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      char v39 = v33;
      uint64_t v42 = objc_msgSend_size(Message, v40, v41);
      uint64_t v45 = objc_msgSend_signature(Message, v43, v44);
      *(_DWORD *)buf = 134218498;
      uint64_t v103 = v38;
      __int16 v104 = 2048;
      uint64_t v105 = v42;
      __int16 v106 = 2112;
      uint64_t v107 = v45;
      _os_log_debug_impl(&dword_1C4CFF000, v39, OS_LOG_TYPE_DEBUG, "Read section with index %ld, size %lld, signature %@", buf, 0x20u);
    }
    ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) += objc_msgSend_size(v30, v34, v35);
  }
  while (!objc_msgSend_lastSection(Message, v36, v37));
  if (*v15 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  unsigned int v47 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v95 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
    uint64_t v96 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 134218242;
    uint64_t v103 = v95;
    __int16 v104 = 2112;
    uint64_t v105 = v96;
    _os_log_debug_impl(&dword_1C4CFF000, v47, OS_LOG_TYPE_DEBUG, "Read %ld sections from manifest for package %@", buf, 0x16u);
  }
  uint64_t v48 = objc_opt_class();
  objc_msgSend_setClassOfNextMessage_(*(void **)(a1 + 48), v49, v48);
  int v52 = 0;
  uint64_t v53 = 0;
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 0;
  unint64_t v54 = 0x1E4F1A000uLL;
  while (1)
  {
    uint64_t v55 = v52;
    int v52 = objc_msgSend_nextMessage(*(void **)(a1 + 48), v50, v51);

    if (!v52)
    {
      objc_msgSend_errorWithDomain_code_path_format_(MEMORY[0x1E4F1A280], v56, *MEMORY[0x1E4F19C40], 1000, *(void *)(a1 + 56), @"Failed reading item object from manifest");
      goto LABEL_38;
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) && objc_msgSend_size(v52, v56, v57)) {
      break;
    }
    if (!v53) {
      goto LABEL_21;
    }
LABEL_23:
    uint64_t v63 = *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24);
    unint64_t v65 = objc_msgSend_size(v52, v56, v57) + v63;
    if (v65 < *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24)
      || *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) < v65)
    {
      objc_msgSend_errorWithDomain_code_path_format_(MEMORY[0x1E4F1A280], v64, *MEMORY[0x1E4F19C40], 1000, *(void *)(a1 + 56), @"Package manifest is corrupt - item boundary is not aligned with section boundary");
      char v46 = LABEL_38:;

      goto LABEL_40;
    }
    id v66 = objc_alloc(*(Class *)(v54 + 600));
    uint64_t v68 = objc_msgSend_initWithFileURL_(v66, v67, 0);
    objc_msgSend_setPackageIndex_(v68, v69, *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24));
    uint64_t v72 = objc_msgSend_size(v52, v70, v71);
    objc_msgSend_setSize_(v68, v73, v72);
    __int16 v76 = objc_msgSend_signature(v52, v74, v75);
    objc_msgSend_setSignature_(v68, v77, (uint64_t)v76);

    objc_msgSend_setSectionIndex_(v68, v78, *(unsigned int *)(*(void *)(*(void *)(a1 + 96) + 8) + 24));
    objc_msgSend_setOffset_(v68, v79, *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24));
    objc_msgSend_addItem_(*(void **)(a1 + 32), v80, (uint64_t)v68);
    if (*v15 != -1) {
      dispatch_once(v15, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    long long v81 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v99 = *(int *)(*(void *)(*(void *)(a1 + 96) + 8) + 24);
      uint64_t v100 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      uint64_t v98 = *(void **)(*(void *)(*(void *)(a1 + 112) + 8) + 24);
      log = v81;
      unint64_t v88 = v54;
      uint64_t v89 = objc_msgSend_size(v52, v86, v87);
      uint64_t v92 = objc_msgSend_signature(v52, v90, v91);
      *(_DWORD *)buf = 134219010;
      uint64_t v103 = v100;
      __int16 v104 = 2048;
      uint64_t v105 = v99;
      __int16 v106 = 2048;
      uint64_t v107 = v98;
      __int16 v108 = 2048;
      uint64_t v109 = v89;
      unint64_t v54 = v88;
      __int16 v110 = 2112;
      uint64_t v111 = v92;
      _os_log_debug_impl(&dword_1C4CFF000, log, OS_LOG_TYPE_DEBUG, "Read item with index %ld, section index %ld, section offset %llu, size %lld, signature %@", buf, 0x34u);
    }
    *(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 24) += objc_msgSend_size(v68, v82, v83);
    *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) = v65;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 112) + 8)
                                                                           + 24) == *(void *)(*(void *)(*(void *)(a1 + 104) + 8)
                                                                                                + 24);
    ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);

    if (objc_msgSend_lastItem(v52, v84, v85))
    {

      char v46 = 0;
      goto LABEL_40;
    }
  }
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 96) + 8) + 24);

  *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = 0;
  *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) = 0;
LABEL_21:
  unint64_t v58 = objc_msgSend_count(*(void **)(a1 + 64), v56, v57);
  unint64_t v60 = *(int *)(*(void *)(*(void *)(a1 + 96) + 8) + 24);
  if (v58 > v60)
  {
    uint64_t v53 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 64), v59, v60);
    *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = objc_msgSend_size(v53, v61, v62);
    goto LABEL_23;
  }
  char v46 = objc_msgSend_errorWithDomain_code_path_format_(MEMORY[0x1E4F1A280], v59, *MEMORY[0x1E4F19C40], 1000, *(void *)(a1 + 56), @"Package manifest is corrupt - section index %ld is out of bounds", v60);
LABEL_40:

LABEL_41:
  return v46;
}

BOOL sub_1C4F4553C(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        id v18 = *(CKCDPErrorUserInfoValue **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    id v18 = objc_alloc_init(CKCDPErrorUserInfoValue);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || (sub_1C4F7E950((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4F45C54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  id v3 = *(NSObject **)(a1 + 32);
  dispatch_group_leave(v3);
}

uint64_t sub_1C4F462A0(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = v2;
    unint64_t v10 = objc_msgSend_ckShortDescription(v6, v8, v9);
    int v11 = 138543362;
    unint64_t v12 = v10;
    _os_log_debug_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_DEBUG, "Placeholder op %{public}@ finished", (uint8_t *)&v11, 0xCu);
  }
  return objc_msgSend_transitionToFinished(*(void **)(a1 + 32), v3, v4);
}

uint64_t sub_1C4F46880()
{
  qword_1EBBCDEC8 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1C998]);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4F4743C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 96));
  objc_destroyWeak((id *)(v6 - 88));
  _Unwind_Resume(a1);
}

void sub_1C4F4749C(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained) {
    objc_msgSend_setDeviceCapabiltiesUpdateResult_(WeakRetained, v4, (uint64_t)v6);
  }
}

void sub_1C4F47500(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v17 = a2;
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    unint64_t v10 = objc_msgSend_zoneUsageResults(*(void **)(a1 + 32), v7, v8);

    if (!v10)
    {
      uint64_t v13 = objc_opt_new();
      objc_msgSend_setZoneUsageResults_(*(void **)(a1 + 32), v14, (uint64_t)v13);
    }
    int v15 = objc_msgSend_zoneUsageResults(WeakRetained, v11, v12);
    objc_msgSend_setObject_forKeyedSubscript_(v15, v16, (uint64_t)v6, v17);
  }
}

void sub_1C4F475C8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v17 = a2;
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    unint64_t v10 = objc_msgSend_shareUsageResults(*(void **)(a1 + 32), v7, v8);

    if (!v10)
    {
      uint64_t v13 = objc_opt_new();
      objc_msgSend_setShareUsageResults_(*(void **)(a1 + 32), v14, (uint64_t)v13);
    }
    int v15 = objc_msgSend_shareUsageResults(WeakRetained, v11, v12);
    objc_msgSend_setObject_forKeyedSubscript_(v15, v16, (uint64_t)v6, v17);
  }
}

void sub_1C4F47690(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v18 = WeakRetained;
    id v5 = objc_loadWeakRetained((id *)(a1 + 40));
    if (v5)
    {
      objc_msgSend_handleRequestCompleted_(v18, v3, (uint64_t)v5);
    }
    else
    {
      uint64_t v8 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v9 = *MEMORY[0x1E4F19C40];
      unint64_t v10 = objc_msgSend_operationID(v18, v3, v4);
      uint64_t v12 = objc_msgSend_errorWithDomain_code_format_(v8, v11, v9, 20, @"Operation %@ was cancelled internally by CloudKit", v10);
      objc_msgSend_setError_(v18, v13, (uint64_t)v12);
    }
    BOOL v14 = objc_msgSend_error(v18, v6, v7);

    if (v14) {
      objc_msgSend_invokeCompletionHandlers(v18, v15, v16);
    }
    id v17 = objc_msgSend_stateTransitionGroup(v18, v15, v16);
    dispatch_group_leave(v17);

    id WeakRetained = v18;
  }
}

void sub_1C4F4812C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F48158(uint64_t a1, char a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_noteOperationDidFinishWaitingOnPCS(WeakRetained, v7, v8);
  uint64_t v9 = (void *)*MEMORY[0x1E4F1A548];
  uint64_t v10 = *MEMORY[0x1E4F1A550];
  if (v5 || (a2 & 1) == 0)
  {
    if (v10 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v9);
    }
    BOOL v14 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      int v20 = 138543618;
      uint64_t v21 = v19;
      __int16 v22 = 2112;
      id v23 = v5;
      _os_log_error_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_ERROR, "User key sync to update signing identities failed for operation %{public}@: %@", (uint8_t *)&v20, 0x16u);
    }
    objc_msgSend_setError_(WeakRetained, v15, (uint64_t)v5);
  }
  else
  {
    if (v10 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v9);
    }
    int v11 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      int v20 = 138543362;
      uint64_t v21 = v13;
      _os_log_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_INFO, "User key sync to update signing identities succeeded for operation %{public}@", (uint8_t *)&v20, 0xCu);
    }
  }
  objc_msgSend_setDidSynchronizeSigningIdentities_(WeakRetained, v12, 1);
  id v18 = objc_msgSend_stateTransitionGroup(WeakRetained, v16, v17);
  dispatch_group_leave(v18);
}

void sub_1C4F483EC(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4F48400(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!WeakRetained) {
    goto LABEL_20;
  }
  uint64_t v8 = objc_msgSend_error(*(void **)(a1 + 32), v3, v4);
  if (v8
    || (objc_msgSend_deviceCapabiltiesUpdateResult(*(void **)(a1 + 32), v6, v7),
        (uint64_t v1 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v9 = objc_msgSend_updateDeviceCapabilitiesCompletionBlock(*(void **)(a1 + 32), v6, v7);

    if (v8)
    {

      if (!v9) {
        goto LABEL_15;
      }
LABEL_8:
      uint64_t v10 = objc_msgSend_error(*(void **)(a1 + 32), v6, v7);
      uint64_t v13 = v10;
      if (v10)
      {
        id v14 = v10;
      }
      else
      {
        int v15 = *(void **)(a1 + 32);
        uint64_t v16 = objc_msgSend_deviceCapabiltiesUpdateResult(v15, v11, v12);
        objc_msgSend_errorForResult_fallbackDescription_(v15, v17, (uint64_t)v16, @"Failed to save device capabilities");
        id v14 = (id)objc_claimAutoreleasedReturnValue();
      }
      if (*MEMORY[0x1E4F1A4E0])
      {
        int v20 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v18, v19);
        __int16 v22 = objc_msgSend_objectForKeyedSubscript_(v20, v21, @"forceDeviceCapabilityUpdateFailure");

        if (v22)
        {
          id v23 = (void *)MEMORY[0x1E4F1A280];
          uint64_t v24 = *MEMORY[0x1E4F19C40];
          uint64_t v25 = objc_msgSend_operationID(*(void **)(a1 + 32), v18, v19);
          uint64_t v27 = objc_msgSend_errorWithDomain_code_format_(v23, v26, v24, 1, @"Forcing a failure to save device capabilties for operation %@", v25);

          id v14 = (id)v27;
        }
      }
      objc_msgSend_updateDeviceCapabilitiesCompletionBlock(*(void **)(a1 + 32), v18, v19);
      unint64_t v28 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
      uint64_t v31 = objc_msgSend_supportedCapabilities(*(void **)(a1 + 32), v29, v30);
      ((void (**)(void, void *, id))v28)[2](v28, v31, v14);

      objc_msgSend_setUpdateDeviceCapabilitiesCompletionBlock_(*(void **)(a1 + 32), v32, 0);
      goto LABEL_15;
    }

    if (v9) {
      goto LABEL_8;
    }
  }
LABEL_15:
  unint64_t v33 = objc_msgSend_perZoneUsageCompletionBlock(*(void **)(a1 + 32), v6, v7);

  if (v33)
  {
    char v36 = objc_msgSend_zoneUsageResults(*(void **)(a1 + 32), v34, v35);
    v57[0] = MEMORY[0x1E4F143A8];
    v57[1] = 3221225472;
    void v57[2] = sub_1C4F487D8;
    v57[3] = &unk_1E64F69B0;
    v57[4] = *(void *)(a1 + 32);
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v36, v37, (uint64_t)v57);

    unsigned int v40 = objc_msgSend_zoneUsages(*(void **)(a1 + 32), v38, v39);
    v56[0] = MEMORY[0x1E4F143A8];
    v56[1] = 3221225472;
    void v56[2] = sub_1C4F48940;
    v56[3] = &unk_1E64F69D8;
    v56[4] = *(void *)(a1 + 32);
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v40, v41, (uint64_t)v56);

    objc_msgSend_setPerZoneUsageCompletionBlock_(*(void **)(a1 + 32), v42, 0);
  }
  unint64_t v43 = objc_msgSend_perShareUsageCompletionBlock(*(void **)(a1 + 32), v34, v35);

  if (v43)
  {
    char v46 = objc_msgSend_shareUsageResults(*(void **)(a1 + 32), v44, v45);
    v55[0] = MEMORY[0x1E4F143A8];
    v55[1] = 3221225472;
    v55[2] = sub_1C4F48ACC;
    v55[3] = &unk_1E64F6A00;
    v55[4] = *(void *)(a1 + 32);
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v46, v47, (uint64_t)v55);

    unint64_t v50 = objc_msgSend_shareUsages(*(void **)(a1 + 32), v48, v49);
    v54[0] = MEMORY[0x1E4F143A8];
    v54[1] = 3221225472;
    void v54[2] = sub_1C4F48C34;
    void v54[3] = &unk_1E64F6A28;
    v54[4] = *(void *)(a1 + 32);
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v50, v51, (uint64_t)v54);

    objc_msgSend_setPerShareUsageCompletionBlock_(*(void **)(a1 + 32), v52, 0);
  }
  uint64_t v53 = objc_msgSend_stateTransitionGroup(WeakRetained, v44, v45);
  dispatch_group_leave(v53);

LABEL_20:
}

void sub_1C4F487D8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  objc_msgSend_errorForResult_fallbackDescription_(v5, v7, a3, @"Failed to save zone usage");
  id v24 = (id)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E4F1A4E0])
  {
    uint64_t v10 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v8, v9);
    uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v10, v11, @"forceZoneUsageUpdateFailure");

    if (v12)
    {
      uint64_t v13 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v14 = *MEMORY[0x1E4F19C40];
      int v15 = objc_msgSend_operationID(*(void **)(a1 + 32), v8, v9);
      uint64_t v17 = objc_msgSend_errorWithDomain_code_format_(v13, v16, v14, 1, @"Forcing a failure to save zone usage for operation %@", v15);

      id v24 = (id)v17;
    }
  }
  id v18 = objc_msgSend_zoneUsages(*(void **)(a1 + 32), v8, v9);
  int v20 = objc_msgSend_objectForKeyedSubscript_(v18, v19, (uint64_t)v6);

  objc_msgSend_perZoneUsageCompletionBlock(*(void **)(a1 + 32), v21, v22);
  id v23 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
  ((void (**)(void, id, void *, id))v23)[2](v23, v6, v20, v24);
}

void sub_1C4F48940(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v9 = objc_msgSend_zoneUsageResults(*(void **)(a1 + 32), v7, v8);
  int v11 = objc_msgSend_objectForKey_(v9, v10, (uint64_t)v5);

  if (!v11)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v12 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v19 = v5;
      _os_log_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_INFO, "Warn: Did not receive a zone usage result for zone ID %@", buf, 0xCu);
    }
    uint64_t v14 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v13, *MEMORY[0x1E4F19C40], 1, @"Failed to save zone usage at %@ for zone ID %@", v6, v5);
    objc_msgSend_perZoneUsageCompletionBlock(*(void **)(a1 + 32), v15, v16);
    uint64_t v17 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
    ((void (**)(void, id, id, void *))v17)[2](v17, v5, v6, v14);
  }
}

void sub_1C4F48ACC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  objc_msgSend_errorForResult_fallbackDescription_(v5, v7, a3, @"Failed to save share usage");
  id v24 = (id)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E4F1A4E0])
  {
    uint64_t v10 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v8, v9);
    uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v10, v11, @"forceShareUsageUpdateFailure");

    if (v12)
    {
      uint64_t v13 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v14 = *MEMORY[0x1E4F19C40];
      int v15 = objc_msgSend_operationID(*(void **)(a1 + 32), v8, v9);
      uint64_t v17 = objc_msgSend_errorWithDomain_code_format_(v13, v16, v14, 1, @"Forcing a failure to save share usage for operation %@", v15);

      id v24 = (id)v17;
    }
  }
  id v18 = objc_msgSend_shareUsages(*(void **)(a1 + 32), v8, v9);
  uint64_t v20 = objc_msgSend_objectForKeyedSubscript_(v18, v19, (uint64_t)v6);

  objc_msgSend_perShareUsageCompletionBlock(*(void **)(a1 + 32), v21, v22);
  id v23 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
  ((void (**)(void, id, void *, id))v23)[2](v23, v6, v20, v24);
}

void sub_1C4F48C34(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v9 = objc_msgSend_shareUsageResults(*(void **)(a1 + 32), v7, v8);
  int v11 = objc_msgSend_objectForKey_(v9, v10, (uint64_t)v5);

  if (!v11)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v12 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v19 = v5;
      _os_log_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_INFO, "Warn: Did not receive a share usage result for share ID %@", buf, 0xCu);
    }
    uint64_t v14 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v13, *MEMORY[0x1E4F19C40], 1, @"Failed to save share usage at %@ for share ID %@", v6, v5);
    objc_msgSend_perShareUsageCompletionBlock(*(void **)(a1 + 32), v15, v16);
    uint64_t v17 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
    ((void (**)(void, id, id, void *))v17)[2](v17, v5, v6, v14);
  }
}

void sub_1C4F496AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F4981C()
{
  id v0 = (void *)qword_1EBBCDED8;
  qword_1EBBCDED8 = (uint64_t)&unk_1F20AC0F0;
}

uint64_t sub_1C4F4A1CC(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(CKDPRecordType);
        objc_storeStrong((id *)(a1 + 56), v17);
        if PBReaderPlaceMark() && (CKDPRecordTypeReadFrom((uint64_t)v17, a2)) {
          goto LABEL_33;
        }
        goto LABEL_62;
      case 2u:
        uint64_t v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_62;
        }
        goto LABEL_33;
      case 3u:
        uint64_t v17 = objc_alloc_init(CKDPAsset);
        objc_msgSend_addAssets_((void *)a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (CKDPAssetReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_62;
        }
        goto LABEL_33;
      case 4u:
        uint64_t v17 = objc_alloc_init(CKDPAssetUploadTokenRetrieveRequestRecordAssetUpload);
        objc_msgSend_addUploads_((void *)a1, v19, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1C4E5106C((id *)&v17->super.super.isa, a2)) {
          goto LABEL_62;
        }
        goto LABEL_33;
      case 5u:
        uint64_t v17 = objc_alloc_init(CKDPAssetUploadTokenRetrieveRequestHeaderInfo);
        objc_msgSend_addContentRequestHeaders_((void *)a1, v20, (uint64_t)v17);
        if (PBReaderPlaceMark() && sub_1C4E12A38((uint64_t)v17, a2))
        {
LABEL_33:
          PBReaderRecallMark();

LABEL_34:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_62:

        return 0;
      case 6u:
        uint64_t v21 = PBReaderReadData();
        uint64_t v22 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = v21;

        goto LABEL_34;
      case 8u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 72) |= 2u;
        while (2)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              BOOL v14 = v25++ >= 9;
              if (v14)
              {
                LODWORD(v26) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_56:
        *(_DWORD *)(a1 + 32) = v26;
        goto LABEL_34;
      case 9u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        *(unsigned char *)(a1 + 72) |= 1u;
        while (2)
        {
          uint64_t v33 = *v3;
          unint64_t v34 = *(void *)(a2 + v33);
          if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
            *(void *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              BOOL v14 = v31++ >= 9;
              if (v14)
              {
                uint64_t v32 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
LABEL_60:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v32;
        goto LABEL_34;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_34;
    }
  }
}

void sub_1C4F4B80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F4B828(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_wipeAllConfigurations(WeakRetained, v1, v2);
}

uint64_t sub_1C4F4B910()
{
  qword_1EBBCFF98 = objc_opt_new();
  return MEMORY[0x1F41817F8]();
}

void sub_1C4F4BD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t sub_1C4F4BDB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4F4BDC8(uint64_t a1)
{
}

void sub_1C4F4BDD0(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  dispatch_group_t v5 = dispatch_group_create();
  objc_msgSend_setConfigurationFetchedGroup_(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v6, (uint64_t)v5);
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, *(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  uint64_t v13 = MEMORY[0x1E4F143A8];
  uint64_t v14 = 3221225472;
  int v15 = sub_1C4F4BF88;
  uint64_t v16 = &unk_1E64F24C8;
  objc_copyWeak(&v19, &location);
  objc_copyWeak(&v20, &from);
  id v17 = *(id *)(a1 + 40);
  uint64_t v7 = v5;
  id v18 = v7;
  objc_msgSend_setCompletionBlock_(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v8, (uint64_t)&v13);
  uint64_t v11 = objc_msgSend_globalConfigurationOps(*(void **)(a1 + 32), v9, v10, v13, v14, v15, v16);
  objc_msgSend_addObject_(v11, v12, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));

  dispatch_group_enter(v7);
  objc_destroyWeak(&v20);
  objc_destroyWeak(&v19);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4F4BF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4F4BF88(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v3 = objc_loadWeakRetained(a1 + 7);
  id v4 = objc_opt_new();
  uint64_t v7 = objc_msgSend_propertyQueue(WeakRetained, v5, v6);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4F4C0A8;
  block[3] = &unk_1E64F0198;
  id v11 = v3;
  id v12 = WeakRetained;
  id v13 = v4;
  id v14 = a1[4];
  id v15 = a1[5];
  id v8 = v4;
  id v9 = v3;
  dispatch_async(v7, block);
}

void sub_1C4F4C0A8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v4 = objc_msgSend_configuration(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    uint64_t v7 = objc_msgSend_deviceContext(*(void **)(a1 + 32), v5, v6);
    uint64_t v10 = objc_msgSend_metadataCache(v7, v8, v9);
    id v13 = objc_msgSend_configuration(*(void **)(a1 + 32), v11, v12);
    objc_msgSend_setGlobalConfiguration_(v10, v14, (uint64_t)v13);

    id v17 = objc_msgSend_configuration(*(void **)(a1 + 32), v15, v16);
    objc_msgSend_setGlobalConfiguration_(*(void **)(a1 + 40), v18, (uint64_t)v17);

    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    uint64_t v21 = objc_msgSend_globalConfigurationOps(*(void **)(a1 + 40), v19, v20);
    char v24 = objc_msgSend_copy(v21, v22, v23);

    uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v50, v56, 16);
    if (v26)
    {
      uint64_t v28 = v26;
      uint64_t v29 = *(void *)v51;
      do
      {
        for (uint64_t i = 0; i != v28; ++i)
        {
          if (*(void *)v51 != v29) {
            objc_enumerationMutation(v24);
          }
          uint64_t v31 = *(void *)(*((void *)&v50 + 1) + 8 * i);
          if (v31 != *(void *)(a1 + 32)) {
            objc_msgSend_addObject_(*(void **)(a1 + 48), v27, v31);
          }
        }
        uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v27, (uint64_t)&v50, v56, 16);
      }
      while (v28);
    }

    unint64_t v34 = objc_msgSend_globalConfigurationOps(*(void **)(a1 + 40), v32, v33);
    objc_msgSend_removeAllObjects(v34, v35, v36);

    if (objc_msgSend_count(*(void **)(a1 + 48), v37, v38))
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v39 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        unint64_t v43 = *(void **)(a1 + 48);
        uint64_t v44 = v39;
        uint64_t v47 = objc_msgSend_count(v43, v45, v46);
        *(_DWORD *)buf = 134217984;
        uint64_t v55 = v47;
        _os_log_debug_impl(&dword_1C4CFF000, v44, OS_LOG_TYPE_DEBUG, "Tearing down %lu superfluous global configuration operations", buf, 0xCu);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1C4F4C384;
      block[3] = &unk_1E64F05C8;
      unsigned int v40 = *(NSObject **)(a1 + 56);
      id v49 = *(id *)(a1 + 48);
      dispatch_async(v40, block);
    }
  }
  else
  {
    uint64_t v41 = objc_msgSend_globalConfigurationOps(*(void **)(a1 + 40), v5, v6);
    objc_msgSend_removeObject_(v41, v42, *(void *)(a1 + 32));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_1C4F4C384(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v1 = *(id *)(a1 + 32);
  uint64_t v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v9, v13, 16);
  if (v3)
  {
    uint64_t v6 = v3;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v1);
        }
        objc_msgSend_cancel(*(void **)(*((void *)&v9 + 1) + 8 * v8++), v4, v5, (void)v9);
      }
      while (v6 != v8);
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v4, (uint64_t)&v9, v13, 16);
    }
    while (v6);
  }
}

void sub_1C4F4C470(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    uint64_t v15 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 134218240;
    uint64_t v21 = v14;
    __int16 v22 = 2048;
    uint64_t v23 = v15;
    _os_log_debug_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_DEBUG, "Waited on outstanding global configuration operation %p for operation %p", buf, 0x16u);
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v5 = objc_msgSend_globalConfiguration(*(void **)(a1 + 40), v3, v4);
    uint64_t v8 = v5;
    if (v5 && !objc_msgSend_isExpired(v5, v6, v7))
    {
      long long v9 = 0;
      char v10 = 1;
    }
    else
    {
      long long v9 = objc_msgSend_error(*(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v6, v7);
      char v10 = 0;
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4F4C644;
    block[3] = &unk_1E64F5540;
    long long v11 = *(NSObject **)(a1 + 48);
    id v12 = *(id *)(a1 + 56);
    char v19 = v10;
    id v17 = v9;
    id v18 = v12;
    id v13 = v9;
    dispatch_async(v11, block);
  }
}

uint64_t sub_1C4F4C644(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

void sub_1C4F4CA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1C4F4CABC(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], a2, *MEMORY[0x1E4F19DD8], 1000, @"Operation's container was invalid when requesting container specific info: %@", *(void *)(a1 + 32));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0, v3);
}

void sub_1C4F4CB44(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a2);
  objc_msgSend_setRequireUserIDs_(*(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v5, *(unsigned __int8 *)(a1 + 80));
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, *(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40));
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = sub_1C4F4CD7C;
  v25[3] = &unk_1E64F6B20;
  objc_copyWeak(&v30, &location);
  objc_copyWeak(v31, &from);
  id v6 = *(id *)(a1 + 40);
  v31[1] = *(id *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 32);
  id v26 = v6;
  uint64_t v27 = v7;
  id v28 = *(id *)(a1 + 48);
  id v29 = *(id *)(a1 + 56);
  objc_msgSend_setCompletionBlock_(*(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v8, (uint64_t)v25);
  long long v11 = objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 32), v9, v10);
  id v13 = objc_msgSend_objectForKeyedSubscript_(v11, v12, *(void *)(a1 + 48));

  if (!v13)
  {
    uint64_t v16 = objc_opt_new();
    char v19 = objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 32), v17, v18);
    objc_msgSend_setObject_forKeyedSubscript_(v19, v20, (uint64_t)v16, *(void *)(a1 + 48));
  }
  uint64_t v21 = objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 32), v14, v15);
  uint64_t v23 = objc_msgSend_objectForKeyedSubscript_(v21, v22, *(void *)(a1 + 48));
  objc_msgSend_addObject_(v23, v24, *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40));

  objc_destroyWeak(v31);
  objc_destroyWeak(&v30);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4F4CD4C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 64));
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4F4CD7C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v3 = objc_loadWeakRetained((id *)(a1 + 72));
  id v6 = objc_msgSend_propertyQueue(WeakRetained, v4, v5);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4F4CE8C;
  block[3] = &unk_1E64F6AF8;
  id v13 = v3;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void **)(a1 + 48);
  id v14 = v7;
  uint64_t v15 = v9;
  uint64_t v19 = v8;
  id v16 = WeakRetained;
  id v17 = v10;
  id v18 = *(id *)(a1 + 56);
  id v11 = v3;
  dispatch_sync(v6, block);
}

void sub_1C4F4CE8C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  id v4 = objc_msgSend_error(*(void **)(a1 + 32), a2, a3);

  id v7 = (void *)MEMORY[0x1E4F1A550];
  uint64_t v8 = (os_log_t *)MEMORY[0x1E4F1A500];
  if (v4)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v9 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void **)(a1 + 32);
      id v11 = v9;
      id v14 = objc_msgSend_error(v10, v12, v13);
      *(_DWORD *)buf = 138412290;
      uint64_t v148 = (uint64_t)v14;
      _os_log_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_INFO, "Got an error from CKDContainerSpecificInfoOperation: %@", buf, 0xCu);
    }
  }
  uint64_t v15 = objc_msgSend_containerServerInfo(*(void **)(a1 + 32), v5, v6);

  if (v15)
  {
    id v18 = objc_msgSend_account(*(void **)(a1 + 40), v16, v17);
    unint64_t v21 = objc_msgSend_accountType(v18, v19, v20);

    if (v21 <= 1)
    {
      id v26 = objc_msgSend_containerID(*(void **)(a1 + 40), v22, v23);
      if (!v26)
      {
        int v138 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v24, v25);
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v138, v139, *(void *)(a1 + 80), *(void *)(a1 + 48), @"CKDServerConfigurationManager.m", 285, @"Unexpectedly-nil containerID for container %@", *(void *)(a1 + 40));
      }
      uint64_t v27 = objc_msgSend_deviceContext(*(void **)(a1 + 32), v24, v25);
      id v30 = objc_msgSend_metadataCache(v27, v28, v29);
      uint64_t v33 = objc_msgSend_containerServerInfo(*(void **)(a1 + 32), v31, v32);
      uint64_t v36 = objc_msgSend_containerID(*(void **)(a1 + 40), v34, v35);
      uint64_t v39 = objc_msgSend_account(*(void **)(a1 + 40), v37, v38);
      uint64_t v42 = objc_msgSend_accountID(v39, v40, v41);
      objc_msgSend_setContainerServerInfo_forContainerID_accountID_(v30, v43, (uint64_t)v33, v36, v42);
    }
    uint64_t v44 = objc_msgSend_containerSpecificInfos(*(void **)(a1 + 56), v22, v23);
    uint64_t v46 = objc_msgSend_objectForKeyedSubscript_(v44, v45, *(void *)(a1 + 64));
    id v49 = objc_msgSend_containerScopedUserID(v46, v47, v48);

    long long v52 = objc_msgSend_containerSpecificInfos(*(void **)(a1 + 56), v50, v51);
    unint64_t v54 = objc_msgSend_objectForKeyedSubscript_(v52, v53, *(void *)(a1 + 64));
    uint64_t v57 = objc_msgSend_orgAdminUserID(v54, v55, v56);

    unint64_t v60 = objc_msgSend_containerServerInfo(*(void **)(a1 + 32), v58, v59);
    uint64_t v63 = objc_msgSend_containerSpecificInfos(*(void **)(a1 + 56), v61, v62);
    objc_msgSend_setObject_forKeyedSubscript_(v63, v64, (uint64_t)v60, *(void *)(a1 + 64));

    if (v49)
    {
      uint64_t v67 = objc_msgSend_containerSpecificInfos(*(void **)(a1 + 56), v65, v66);
      long long v69 = objc_msgSend_objectForKeyedSubscript_(v67, v68, *(void *)(a1 + 64));
      uint64_t v72 = objc_msgSend_containerScopedUserID(v69, v70, v71);

      if (!v72)
      {
        uint64_t v73 = objc_msgSend_containerSpecificInfos(*(void **)(a1 + 56), v65, v66);
        uint64_t v75 = objc_msgSend_objectForKeyedSubscript_(v73, v74, *(void *)(a1 + 64));
        objc_msgSend_setContainerScopedUserID_(v75, v76, (uint64_t)v49);
      }
    }
    if (v57)
    {
      uint64_t v77 = objc_msgSend_containerSpecificInfos(*(void **)(a1 + 56), v65, v66);
      long long v79 = objc_msgSend_objectForKeyedSubscript_(v77, v78, *(void *)(a1 + 64));
      uint64_t v82 = objc_msgSend_orgAdminUserID(v79, v80, v81);

      if (!v82)
      {
        uint64_t v85 = objc_msgSend_containerSpecificInfos(*(void **)(a1 + 56), v83, v84);
        uint64_t v87 = objc_msgSend_objectForKeyedSubscript_(v85, v86, *(void *)(a1 + 64));
        objc_msgSend_setOrgAdminUserID_(v87, v88, (uint64_t)v57);
      }
    }
    if (*v7 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v89 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
    {
      __int16 v129 = *(void **)(a1 + 32);
      uint64_t v130 = v89;
      uint64_t v133 = objc_msgSend_containerServerInfo(v129, v131, v132);
      *(_DWORD *)buf = 138412290;
      uint64_t v148 = (uint64_t)v133;
      _os_log_debug_impl(&dword_1C4CFF000, v130, OS_LOG_TYPE_DEBUG, "Set in-memory container specific info from op result: %@", buf, 0xCu);
    }
    __int16 v90 = objc_opt_new();
    long long v142 = 0u;
    long long v143 = 0u;
    long long v144 = 0u;
    long long v145 = 0u;
    uint64_t v93 = objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 56), v91, v92);
    uint64_t v95 = objc_msgSend_objectForKeyedSubscript_(v93, v94, *(void *)(a1 + 64));
    uint64_t v98 = objc_msgSend_copy(v95, v96, v97);

    uint64_t v100 = objc_msgSend_countByEnumeratingWithState_objects_count_(v98, v99, (uint64_t)&v142, v146, 16);
    if (v100)
    {
      uint64_t v102 = v100;
      uint64_t v103 = *(void *)v143;
      do
      {
        for (uint64_t i = 0; i != v102; ++i)
        {
          if (*(void *)v143 != v103) {
            objc_enumerationMutation(v98);
          }
          uint64_t v105 = *(void *)(*((void *)&v142 + 1) + 8 * i);
          if (v105 != *(void *)(a1 + 32)) {
            objc_msgSend_addObject_(v90, v101, v105);
          }
        }
        uint64_t v102 = objc_msgSend_countByEnumeratingWithState_objects_count_(v98, v101, (uint64_t)&v142, v146, 16);
      }
      while (v102);
    }

    __int16 v108 = objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 56), v106, v107);
    objc_msgSend_removeObjectForKey_(v108, v109, *(void *)(a1 + 64));

    if (objc_msgSend_count(v90, v110, v111))
    {
      if (*v7 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      os_log_t v112 = *v8;
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v134 = v112;
        uint64_t v137 = objc_msgSend_count(v90, v135, v136);
        *(_DWORD *)buf = 134217984;
        uint64_t v148 = v137;
        _os_log_debug_impl(&dword_1C4CFF000, v134, OS_LOG_TYPE_DEBUG, "Tearing down %lu superfluous container specific info operations", buf, 0xCu);
      }
      unint64_t v113 = *(NSObject **)(a1 + 72);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1C4F4D56C;
      block[3] = &unk_1E64F05C8;
      id v141 = v90;
      dispatch_async(v113, block);
    }
    goto LABEL_37;
  }
  id v114 = objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 56), v16, v17);
  id v116 = objc_msgSend_objectForKeyedSubscript_(v114, v115, *(void *)(a1 + 64));
  objc_msgSend_removeObject_(v116, v117, *(void *)(a1 + 32));

  long long v120 = objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 56), v118, v119);
  long long v122 = objc_msgSend_objectForKeyedSubscript_(v120, v121, *(void *)(a1 + 64));
  uint64_t v125 = objc_msgSend_count(v122, v123, v124);

  if (!v125)
  {
    id v49 = objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 56), v126, v127);
    objc_msgSend_removeObjectForKey_(v49, v128, *(void *)(a1 + 64));
LABEL_37:
  }
}

void sub_1C4F4D56C(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v1 = *(id *)(a1 + 32);
  uint64_t v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v9, v13, 16);
  if (v3)
  {
    uint64_t v6 = v3;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v1);
        }
        objc_msgSend_cancel(*(void **)(*((void *)&v9 + 1) + 8 * v8++), v4, v5, (void)v9);
      }
      while (v6 != v8);
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v4, (uint64_t)&v9, v13, 16);
    }
    while (v6);
  }
}

void sub_1C4F4D658(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_containerSpecificInfos(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = objc_msgSend_objectForKeyedSubscript_(v4, v5, *(void *)(a1 + 40));

  long long v11 = objc_msgSend_publicCloudDBURL(v6, v7, v8);
  if (v11)
  {
    uint64_t v14 = objc_msgSend_publicShareServiceURL(v6, v9, v10);
    if (v14)
    {
      uint64_t v17 = objc_msgSend_publicCodeServiceURL(v6, v12, v13);
      if (v17)
      {
        uint64_t v20 = objc_msgSend_publicMetricsServiceURL(v6, v15, v16);
        if (v20)
        {
          uint64_t v23 = objc_msgSend_publicDeviceServiceURL(v6, v18, v19);
          if (v23) {
            BOOL v24 = objc_msgSend_environment(v6, v21, v22) != -1;
          }
          else {
            BOOL v24 = 0;
          }
        }
        else
        {
          BOOL v24 = 0;
        }
      }
      else
      {
        BOOL v24 = 0;
      }
    }
    else
    {
      BOOL v24 = 0;
    }
  }
  else
  {
    BOOL v24 = 0;
  }

  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v27 = objc_msgSend_containerScopedUserID(v6, v25, v26);
    if (!v27) {
      BOOL v24 = 0;
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4F4D7FC;
  block[3] = &unk_1E64F6B70;
  id v28 = *(NSObject **)(a1 + 48);
  id v29 = *(id *)(a1 + 56);
  BOOL v34 = v24;
  uint64_t v30 = *(void *)(a1 + 64);
  id v32 = v29;
  uint64_t v33 = v30;
  dispatch_async(v28, block);
}

void sub_1C4F4D7FC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  objc_msgSend_error(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2, a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, v3, v5);
}

void sub_1C4F4D970(void **a1, const char *a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A4E0]
    && objc_msgSend_checkAndClearUnitTestOverrides_(a1[4], a2, @"ForceFetchGlobalConfig"))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v4 = *MEMORY[0x1E4F1A500];
    int v5 = 1;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_INFO, "Forcing a fetch of the global config", buf, 2u);
    }
  }
  else
  {
    int v5 = 0;
  }
  uint64_t v6 = objc_msgSend_globalConfiguration(a1[5], a2, a3);
  id v9 = v6;
  if (v5)
  {

    id v9 = 0;
LABEL_17:
    unint64_t v21 = a1[4];
    uint64_t v22 = a1[5];
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    v33[2] = sub_1C4F4DC9C;
    v33[3] = &unk_1E64F6BC0;
    uint64_t v23 = (id *)v34;
    id v24 = v21;
    uint64_t v25 = a1[5];
    v34[0] = v24;
    v34[1] = v25;
    id v36 = a1[7];
    id v35 = a1[6];
    objc_msgSend__fetchGlobalConfigForOperation_completionHandler_(v22, v26, (uint64_t)v24, v33);

    uint64_t v27 = v36;
    goto LABEL_18;
  }
  if (!v6)
  {
    uint64_t v10 = objc_msgSend_deviceContext(a1[4], v7, v8);
    uint64_t v13 = objc_msgSend_metadataCache(v10, v11, v12);
    uint64_t v16 = objc_msgSend_globalConfiguration(v13, v14, v15);
    objc_msgSend_setGlobalConfiguration_(a1[5], v17, (uint64_t)v16);

    objc_msgSend_globalConfiguration(a1[5], v18, v19);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!v9) {
      goto LABEL_17;
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v20 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      id v38 = v9;
      _os_log_debug_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEBUG, "Fetched global configuration from metadata cache: %@", buf, 0xCu);
    }
  }
  if (objc_msgSend_isExpired(v9, v7, v8)) {
    goto LABEL_17;
  }
  id v28 = a1[7];
  if (!v28) {
    goto LABEL_19;
  }
  id v29 = a1[6];
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  void v30[2] = sub_1C4F4DE38;
  v30[3] = &unk_1E64F0790;
  uint64_t v23 = &v32;
  id v32 = v28;
  id v9 = v9;
  id v31 = v9;
  dispatch_async(v29, v30);
  uint64_t v27 = v31;
LABEL_18:

LABEL_19:
}

void sub_1C4F4DC9C(uint64_t a1, int a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v6 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 134217984;
    uint64_t v15 = v8;
    _os_log_debug_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_DEBUG, "Finished fetching global config on behalf of operation %p", buf, 0xCu);
    if (a2) {
      goto LABEL_5;
    }
  }
  else if (a2)
  {
LABEL_5:
    objc_msgSend_configurationForOperation_completionHandler_(*(void **)(a1 + 40), v7, *(void *)(a1 + 32), *(void *)(a1 + 56));
    goto LABEL_9;
  }
  id v9 = *(void **)(a1 + 56);
  if (v9)
  {
    uint64_t v10 = *(NSObject **)(a1 + 48);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = sub_1C4F4DE20;
    v11[3] = &unk_1E64F0790;
    id v13 = v9;
    id v12 = v5;
    dispatch_async(v10, v11);
  }
LABEL_9:
}

uint64_t sub_1C4F4DE20(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

uint64_t sub_1C4F4DE38(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1C4F4E0E0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = (void *)MEMORY[0x1E4F1A280];
  uint64_t v5 = *MEMORY[0x1E4F19DD8];
  uint64_t v6 = objc_msgSend_operationID(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_errorWithDomain_code_format_(v4, v7, v5, 1000, @"Failed to get server info for container, operation unexpectedly missing container: %@ ", v6);
  id v8 = (id)objc_claimAutoreleasedReturnValue();

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1C4F4E188(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_containerSpecificInfos(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = objc_msgSend_objectForKeyedSubscript_(v4, v5, *(void *)(a1 + 40));

  id v9 = objc_msgSend_account(*(void **)(a1 + 48), v7, v8);
  unint64_t v12 = objc_msgSend_accountType(v9, v10, v11);

  if (v12 <= 1 && v6 == 0)
  {
    uint64_t v16 = objc_msgSend_deviceContext(*(void **)(a1 + 56), v13, v14);
    uint64_t v19 = objc_msgSend_metadataCache(v16, v17, v18);
    uint64_t v22 = objc_msgSend_containerID(*(void **)(a1 + 48), v20, v21);
    uint64_t v25 = objc_msgSend_account(*(void **)(a1 + 48), v23, v24);
    id v28 = objc_msgSend_accountID(v25, v26, v27);
    uint64_t v6 = objc_msgSend_containerServerInfoForContainerID_accountID_(v19, v29, (uint64_t)v22, v28);

    if (v6)
    {
      id v32 = objc_msgSend_containerSpecificInfos(*(void **)(a1 + 32), v30, v31);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v33, (uint64_t)v6, *(void *)(a1 + 40));

      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      BOOL v34 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v61 = v6;
        _os_log_debug_impl(&dword_1C4CFF000, v34, OS_LOG_TYPE_DEBUG, "Set container info from cached metadata: %@", buf, 0xCu);
      }
    }
  }
  id v35 = v6;
  id v38 = v35;
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v39 = objc_msgSend_containerScopedUserID(v35, v36, v37);

    if (!v39)
    {

      goto LABEL_17;
    }
  }
  if (!v38)
  {
LABEL_17:
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v44 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v44, OS_LOG_TYPE_DEBUG, "No in-memory containerSpecificInfo, going to the server", buf, 2u);
    }
    uint64_t v45 = *(void **)(a1 + 32);
    uint64_t v46 = *(unsigned __int8 *)(a1 + 80);
    v54[0] = MEMORY[0x1E4F143A8];
    v54[1] = 3221225472;
    void v54[2] = sub_1C4F4E554;
    void v54[3] = &unk_1E64F6C10;
    unint64_t v43 = (id *)v55;
    uint64_t v47 = *(void *)(a1 + 56);
    id v48 = *(id *)(a1 + 48);
    uint64_t v49 = *(void *)(a1 + 32);
    v55[0] = v48;
    v55[1] = v49;
    id v56 = *(id *)(a1 + 56);
    char v59 = *(unsigned char *)(a1 + 80);
    id v58 = *(id *)(a1 + 72);
    id v57 = *(id *)(a1 + 64);
    objc_msgSend__fetchContainerSpecificInfoForOperation_requireUserIDs_completionHandler_(v45, v50, v47, v46, v54);

    id v41 = 0;
    goto LABEL_22;
  }
  unsigned int v40 = *(void **)(a1 + 72);
  id v41 = v38;
  if (v40)
  {
    uint64_t v42 = *(NSObject **)(a1 + 64);
    v51[0] = MEMORY[0x1E4F143A8];
    v51[1] = 3221225472;
    v51[2] = sub_1C4F4E70C;
    v51[3] = &unk_1E64F0790;
    unint64_t v43 = &v53;
    id v53 = v40;
    id v41 = v38;
    id v52 = v41;
    dispatch_async(v42, v51);

LABEL_22:
  }
}

void sub_1C4F4E554(uint64_t a1, int a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v6 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412802;
    uint64_t v15 = v8;
    __int16 v16 = 1024;
    int v17 = a2;
    __int16 v18 = 2112;
    id v19 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_DEBUG, "Fetching container info for container %@ gave success %d error %@", buf, 0x1Cu);
    if (a2) {
      goto LABEL_5;
    }
  }
  else if (a2)
  {
LABEL_5:
    objc_msgSend_containerServerInfoForOperation_requireUserIDs_completionHandler_(*(void **)(a1 + 40), v7, *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 72), *(void *)(a1 + 64));
    goto LABEL_9;
  }
  id v9 = *(void **)(a1 + 64);
  if (v9)
  {
    uint64_t v10 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = sub_1C4F4E6F4;
    v11[3] = &unk_1E64F0790;
    id v13 = v9;
    id v12 = v5;
    dispatch_async(v10, v11);
  }
LABEL_9:
}

uint64_t sub_1C4F4E6F4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

uint64_t sub_1C4F4E70C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_1C4F4E824(uint64_t a1, const char *a2)
{
  objc_msgSend_setGlobalConfiguration_(*(void **)(a1 + 32), a2, 0);
  id v5 = objc_msgSend_containerSpecificInfos(*(void **)(a1 + 32), v3, v4);
  objc_msgSend_removeAllObjects(v5, v6, v7);

  uint64_t v10 = objc_msgSend_defaultContext(CKDLogicalDeviceContext, v8, v9);
  id v13 = objc_msgSend_metadataCache(v10, v11, v12);
  objc_msgSend_expungeAllData(v13, v14, v15);

  int v17 = *(void **)(a1 + 32);
  return objc_msgSend_setShouldDropAllConfigurations_(v17, v16, 0);
}

void sub_1C4F4ECC4(uint64_t a1, int a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v5 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = @"NO";
    if (a2) {
      uint64_t v6 = @"YES";
    }
    int v9 = 138412802;
    uint64_t v10 = v6;
    if (v4) {
      uint64_t v7 = @" error: ";
    }
    else {
      uint64_t v7 = &stru_1F2044F30;
    }
    __int16 v11 = 2112;
    uint64_t v12 = v7;
    if (v4) {
      uint64_t v8 = v4;
    }
    else {
      uint64_t v8 = &stru_1F2044F30;
    }
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    _os_log_debug_impl(&dword_1C4CFF000, v5, OS_LOG_TYPE_DEBUG, "Registration for app site association data completed with success: %@%@%@", (uint8_t *)&v9, 0x20u);
  }
}

uint64_t sub_1C4F4EF1C(uint64_t a1, const char *a2)
{
  return objc_msgSend_setGlobalConfiguration_(*(void **)(a1 + 32), a2, 0);
}

void sub_1C4F4EFDC(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1C4FC499C(*(void **)(a1 + 32));
  id v5 = objc_msgSend_containerSpecificInfos(*(void **)(a1 + 40), v3, v4);
  objc_msgSend_removeObjectForKey_(v5, v6, (uint64_t)v2);

  uint64_t v7 = (void *)MEMORY[0x1E4F1A550];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v8 = (os_log_t *)MEMORY[0x1E4F1A500];
  int v9 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    int v30 = 138412290;
    uint64_t v31 = v2;
    _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "Expiring configuration for %@", (uint8_t *)&v30, 0xCu);
  }
  uint64_t v14 = objc_msgSend_containerID(*(void **)(a1 + 32), v10, v11);
  if (v14)
  {
    uint64_t v15 = objc_msgSend_account(*(void **)(a1 + 32), v12, v13);
    if ((unint64_t)objc_msgSend_accountType(v15, v16, v17) <= 1)
    {
      uint64_t v20 = objc_msgSend_deviceContext(*(void **)(a1 + 32), v18, v19);
      uint64_t v23 = objc_msgSend_metadataCache(v20, v21, v22);
      uint64_t v26 = objc_msgSend_accountID(v15, v24, v25);
      objc_msgSend_setContainerServerInfo_forContainerID_accountID_(v23, v27, 0, v14, v26);
    }
  }
  else
  {
    if (*v7 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v28 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_FAULT))
    {
      id v29 = *(void **)(a1 + 32);
      int v30 = 138412290;
      uint64_t v31 = v29;
      _os_log_fault_impl(&dword_1C4CFF000, v28, OS_LOG_TYPE_FAULT, "Failed to expire configuration for container, unable to determine containerID: %@ ", (uint8_t *)&v30, 0xCu);
    }
  }
}

void sub_1C4F4F2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F4F310(uint64_t a1, const char *a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend_globalConfiguration(*(void **)(a1 + 32), a2, a3);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4F4F42C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_globalConfigurationOps(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_count(v4, v5, v6);

  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  uint64_t v10 = objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 32), v8, v9);
  uint64_t v13 = objc_msgSend_allValues(v10, v11, v12);

  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v82, v89, 16);
  if (v15)
  {
    uint64_t v18 = v15;
    uint64_t v19 = *(void *)v83;
    do
    {
      uint64_t v20 = 0;
      do
      {
        if (*(void *)v83 != v19) {
          objc_enumerationMutation(v13);
        }
        v7 += objc_msgSend_count(*(void **)(*((void *)&v82 + 1) + 8 * v20++), v16, v17);
      }
      while (v18 != v20);
      uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v82, v89, 16);
    }
    while (v18);
  }

  uint64_t v21 = *(void **)(a1 + 40);
  uint64_t v23 = objc_msgSend_stringWithFormat_(NSString, v22, @"\tGlobal Configuration Manager (%lu running ops)", v7);
  objc_msgSend_addObject_(v21, v24, (uint64_t)v23);

  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  uint64_t v27 = objc_msgSend_globalConfigurationOps(*(void **)(a1 + 32), v25, v26);
  uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v78, v88, 16);
  if (v29)
  {
    uint64_t v31 = v29;
    uint64_t v32 = *(void *)v79;
    do
    {
      uint64_t v33 = 0;
      do
      {
        if (*(void *)v79 != v32) {
          objc_enumerationMutation(v27);
        }
        BOOL v34 = *(void **)(a1 + 40);
        id v35 = objc_msgSend_stringWithFormat_(NSString, v30, @"\t\tGlobal configuration operation: %@", *(void *)(*((void *)&v78 + 1) + 8 * v33));
        objc_msgSend_addObject_(v34, v36, (uint64_t)v35);

        ++v33;
      }
      while (v31 != v33);
      uint64_t v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v30, (uint64_t)&v78, v88, 16);
    }
    while (v31);
  }

  uint64_t v39 = objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 32), v37, v38);
  uint64_t v42 = objc_msgSend_count(v39, v40, v41);

  if (v42)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v43, @"\t\tContainer specific operations:");
    uint64_t v44 = objc_opt_new();
    long long v74 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    uint64_t v47 = objc_msgSend_containerSpecificInfoOperations(*(void **)(a1 + 32), v45, v46);
    long long v50 = objc_msgSend_allValues(v47, v48, v49);

    uint64_t v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v51, (uint64_t)&v74, v87, 16);
    if (v52)
    {
      uint64_t v55 = v52;
      uint64_t v56 = *(void *)v75;
      do
      {
        uint64_t v57 = 0;
        do
        {
          if (*(void *)v75 != v56) {
            objc_enumerationMutation(v50);
          }
          id v58 = objc_msgSend_allObjects(*(void **)(*((void *)&v74 + 1) + 8 * v57), v53, v54);
          objc_msgSend_addObjectsFromArray_(v44, v59, (uint64_t)v58);

          ++v57;
        }
        while (v55 != v57);
        uint64_t v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v53, (uint64_t)&v74, v87, 16);
      }
      while (v55);
    }

    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    id v60 = v44;
    uint64_t v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(v60, v61, (uint64_t)&v70, v86, 16);
    if (v62)
    {
      uint64_t v64 = v62;
      uint64_t v65 = *(void *)v71;
      do
      {
        uint64_t v66 = 0;
        do
        {
          if (*(void *)v71 != v65) {
            objc_enumerationMutation(v60);
          }
          uint64_t v67 = *(void **)(a1 + 40);
          uint64_t v68 = objc_msgSend_statusReportWithIndent_(*(void **)(*((void *)&v70 + 1) + 8 * v66), v63, 3);
          objc_msgSend_addObject_(v67, v69, (uint64_t)v68);

          ++v66;
        }
        while (v64 != v66);
        uint64_t v64 = objc_msgSend_countByEnumeratingWithState_objects_count_(v60, v63, (uint64_t)&v70, v86, 16);
      }
      while (v64);
    }
  }
}

BOOL sub_1C4F4FC20(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPQueryRetrieveResponseQueryResult);
        objc_msgSend_addQueryResults_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (sub_1C4FB2838((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v19 = PBReaderReadData();
    uint64_t v17 = (CKDPQueryRetrieveResponseQueryResult *)a1[1];
    a1[1] = v19;
LABEL_24:

    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL CKDPContactInformationReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
          goto LABEL_24;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_24;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
          goto LABEL_24;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
          goto LABEL_24;
        case 5u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 40;
LABEL_24:
          uint64_t v19 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&STACK[0x3F0], 8) = v17;

          goto LABEL_25;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_25:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4F51474(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        int v16 = v10 & 7;
        if (!v15 && v16 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v18 = 0;
              unsigned int v19 = 0;
              uint64_t v20 = 0;
              *(unsigned char *)(a1 + 84) |= 1u;
              while (1)
              {
                uint64_t v21 = *v3;
                unint64_t v22 = *(void *)(a2 + v21);
                if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
                *(void *)(a2 + v21) = v22 + 1;
                v20 |= (unint64_t)(v23 & 0x7F) << v18;
                if ((v23 & 0x80) == 0) {
                  goto LABEL_69;
                }
                v18 += 7;
                BOOL v14 = v19++ >= 9;
                if (v14)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_71;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_69:
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v20) = 0;
              }
LABEL_71:
              *(_DWORD *)(a1 + 80) = v20;
              goto LABEL_95;
            case 2u:
              if (v16 != 2)
              {
                char v42 = 0;
                unsigned int v43 = 0;
                uint64_t v44 = 0;
                while (1)
                {
                  uint64_t v45 = *v3;
                  unint64_t v46 = *(void *)(a2 + v45);
                  if (v46 == -1 || v46 >= *(void *)(a2 + *v4)) {
                    goto LABEL_93;
                  }
                  char v47 = *(unsigned char *)(*(void *)(a2 + *v7) + v46);
                  *(void *)(a2 + v45) = v46 + 1;
                  v44 |= (unint64_t)(v47 & 0x7F) << v42;
                  if (v47 < 0)
                  {
                    v42 += 7;
                    BOOL v14 = v43++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_94;
                }
              }
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v24 = 0;
                unsigned int v25 = 0;
                uint64_t v26 = 0;
                while (1)
                {
                  uint64_t v27 = *v3;
                  unint64_t v28 = *(void *)(a2 + v27);
                  if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
                  *(void *)(a2 + v27) = v28 + 1;
                  v26 |= (unint64_t)(v29 & 0x7F) << v24;
                  if (v29 < 0)
                  {
                    v24 += 7;
                    BOOL v14 = v25++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_40;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_40:
                PBRepeatedInt32Add();
              }
              goto LABEL_67;
            case 3u:
              if (v16 != 2)
              {
                char v48 = 0;
                unsigned int v49 = 0;
                uint64_t v50 = 0;
                while (1)
                {
                  uint64_t v51 = *v3;
                  unint64_t v52 = *(void *)(a2 + v51);
                  if (v52 == -1 || v52 >= *(void *)(a2 + *v4)) {
                    goto LABEL_93;
                  }
                  char v53 = *(unsigned char *)(*(void *)(a2 + *v7) + v52);
                  *(void *)(a2 + v51) = v52 + 1;
                  v50 |= (unint64_t)(v53 & 0x7F) << v48;
                  if (v53 < 0)
                  {
                    v48 += 7;
                    BOOL v14 = v49++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_94;
                }
              }
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v30 = 0;
                unsigned int v31 = 0;
                uint64_t v32 = 0;
                while (1)
                {
                  uint64_t v33 = *v3;
                  unint64_t v34 = *(void *)(a2 + v33);
                  if (v34 == -1 || v34 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
                  *(void *)(a2 + v33) = v34 + 1;
                  v32 |= (unint64_t)(v35 & 0x7F) << v30;
                  if (v35 < 0)
                  {
                    v30 += 7;
                    BOOL v14 = v31++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_53;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
                PBRepeatedInt32Add();
              }
              goto LABEL_67;
            case 4u:
              if (v16 == 2)
              {
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v36 = 0;
                  unsigned int v37 = 0;
                  uint64_t v38 = 0;
                  while (1)
                  {
                    uint64_t v39 = *v3;
                    unint64_t v40 = *(void *)(a2 + v39);
                    if (v40 == -1 || v40 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
                    *(void *)(a2 + v39) = v40 + 1;
                    v38 |= (unint64_t)(v41 & 0x7F) << v36;
                    if (v41 < 0)
                    {
                      v36 += 7;
                      BOOL v14 = v37++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_66;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_66:
                  PBRepeatedInt32Add();
                }
LABEL_67:
                PBReaderRecallMark();
              }
              else
              {
                char v54 = 0;
                unsigned int v55 = 0;
                uint64_t v56 = 0;
                while (1)
                {
                  uint64_t v57 = *v3;
                  unint64_t v58 = *(void *)(a2 + v57);
                  if (v58 == -1 || v58 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v59 = *(unsigned char *)(*(void *)(a2 + *v7) + v58);
                  *(void *)(a2 + v57) = v58 + 1;
                  v56 |= (unint64_t)(v59 & 0x7F) << v54;
                  if (v59 < 0)
                  {
                    v54 += 7;
                    BOOL v14 = v55++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_94;
                }
LABEL_93:
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_94:
                PBRepeatedInt32Add();
              }
LABEL_95:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
            default:
              if (PBReaderSkipValueWithTag()) {
                goto LABEL_95;
              }
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4F520F0()
{
  id v0 = (void *)qword_1EBBCFFA8;
  qword_1EBBCFFA8 = (uint64_t)&unk_1F20AC118;
}

void sub_1C4F522C0()
{
  id v0 = (void *)qword_1EBBCDEE8;
  qword_1EBBCDEE8 = (uint64_t)&unk_1F20AC140;
}

uint64_t sub_1C4F5281C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          id v17 = objc_alloc_init(MEMORY[0x1E4F19F20]);
          objc_storeStrong((id *)(a1 + 16), v17);
          if PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom())
          {
            PBReaderRecallMark();
            goto LABEL_36;
          }

          return 0;
        case 2u:
          uint64_t v19 = PBReaderReadString();
          uint64_t v20 = 24;
          goto LABEL_45;
        case 3u:
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 60) |= 1u;
          while (2)
          {
            uint64_t v24 = *v3;
            unint64_t v25 = *(void *)(a2 + v24);
            if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
              *(void *)(a2 + v24) = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if (v26 < 0)
              {
                v21 += 7;
                BOOL v14 = v22++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v23) = 0;
          }
LABEL_56:
          *(_DWORD *)(a1 + 40) = v23;
          continue;
        case 4u:
          PBReaderReadData();
          id v17 = (id)objc_claimAutoreleasedReturnValue();
          if (v17) {
            objc_msgSend_addFileSignature_((void *)a1, v27, (uint64_t)v17);
          }
          goto LABEL_36;
        case 5u:
          PBReaderReadData();
          id v17 = (id)objc_claimAutoreleasedReturnValue();
          if (v17) {
            objc_msgSend_addReferenceSignature_((void *)a1, v28, (uint64_t)v17);
          }
LABEL_36:

          continue;
        case 6u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          *(unsigned char *)(a1 + 60) |= 2u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v31 |= (unint64_t)(v34 & 0x7F) << v29;
              if (v34 < 0)
              {
                v29 += 7;
                BOOL v14 = v30++ >= 9;
                if (v14)
                {
                  uint64_t v31 = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v31 = 0;
          }
LABEL_60:
          BOOL v42 = v31 != 0;
          uint64_t v43 = 56;
          goto LABEL_65;
        case 7u:
          uint64_t v19 = PBReaderReadString();
          uint64_t v20 = 8;
LABEL_45:
          char v35 = *(void **)(a1 + v20);
          *(void *)(a1 + v20) = v19;

          continue;
        case 8u:
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v38 = 0;
          *(unsigned char *)(a1 + 60) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v39 = *v3;
        unint64_t v40 = *(void *)(a2 + v39);
        if (v40 == -1 || v40 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
        *(void *)(a2 + v39) = v40 + 1;
        v38 |= (unint64_t)(v41 & 0x7F) << v36;
        if ((v41 & 0x80) == 0) {
          goto LABEL_62;
        }
        v36 += 7;
        BOOL v14 = v37++ >= 9;
        if (v14)
        {
          uint64_t v38 = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v38 = 0;
      }
LABEL_64:
      BOOL v42 = v38 != 0;
      uint64_t v43 = 57;
LABEL_65:
      *(unsigned char *)(a1 + v43) = v42;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4F55760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F55784(uint64_t a1, void *a2, void *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (*MEMORY[0x1E4F1A4E0]
    && (objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v7, v8),
        unint64_t v10 = objc_claimAutoreleasedReturnValue(),
        objc_msgSend_objectForKeyedSubscript_(v10, v11, @"FailZonePCSDecryptionOnZoneAggregation"),
        unint64_t v12 = objc_claimAutoreleasedReturnValue(),
        v12,
        v10,
        v12))
  {

    uint64_t v14 = objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E4F1A280], v13, *MEMORY[0x1E4F19DD8], 5004, 0, @"Unit test Zone PCS decryption failure");

    id v6 = (id)v14;
  }
  else if (v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    int v15 = *MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v49 = v18;
      _os_log_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_INFO, "Fetched pcs info for zone %@", buf, 0xCu);
    }
    uint64_t v19 = objc_msgSend_zonePCSDataByZoneID(WeakRetained, v16, v17);
    objc_msgSend_setObject_forKeyedSubscript_(v19, v20, (uint64_t)v5, *(void *)(a1 + 40));
    goto LABEL_24;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  char v21 = *MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
  {
    uint64_t v24 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    uint64_t v49 = v24;
    __int16 v50 = 2112;
    id v51 = v6;
    _os_log_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS data for zone %@: %@", buf, 0x16u);
  }
  if (v6)
  {
    unint64_t v25 = objc_msgSend_error(WeakRetained, v22, v23);

    if (!v25)
    {
      if (objc_msgSend_CKIsNotFoundError(v6, v22, v23))
      {
        unsigned int v30 = objc_msgSend_userInfo(v6, v26, v27);
        if (v30)
        {
          uint64_t v31 = objc_msgSend_userInfo(v6, v28, v29);
          uint64_t v19 = objc_msgSend_mutableCopy(v31, v32, v33);
        }
        else
        {
          uint64_t v19 = objc_opt_new();
        }

        objc_msgSend_setObject_forKeyedSubscript_(v19, v35, *(void *)(a1 + 40), *MEMORY[0x1E4F19C48]);
        char v36 = (void *)MEMORY[0x1E4F1A280];
        uint64_t v37 = *MEMORY[0x1E4F19DD8];
        uint64_t v40 = objc_msgSend_code(v6, v38, v39);
        uint64_t v43 = objc_msgSend_localizedDescription(v6, v41, v42);
        uint64_t v45 = objc_msgSend_errorWithDomain_code_userInfo_format_(v36, v44, v37, v40, v19, @"%@", v43);

        objc_msgSend_setError_(WeakRetained, v46, (uint64_t)v45);
      }
      else
      {
        uint64_t v19 = objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E4F1A280], v26, *MEMORY[0x1E4F19DD8], 5001, 0, @"Error fetching PCS data for zone %@", *(void *)(a1 + 40));
        objc_msgSend_setError_(WeakRetained, v34, (uint64_t)v19);
      }
      id v5 = 0;
LABEL_24:

      goto LABEL_25;
    }
  }
  id v5 = 0;
LABEL_25:
  char v47 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v22, v23);
  dispatch_group_leave(v47);
}

void sub_1C4F563B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,id a21)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a21);
  _Unwind_Resume(a1);
}

void sub_1C4F563F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend__handleZoneSavedWithID_responseCode_(WeakRetained, v7, (uint64_t)v6, v5);
}

void sub_1C4F56470(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = objc_loadWeakRetained((id *)(a1 + 40));
    id v6 = objc_msgSend_error(v3, v4, v5);

    if (!v6)
    {
LABEL_19:
      uint64_t v29 = objc_msgSend_stateTransitionGroup(WeakRetained, v7, v8);
      dispatch_group_leave(v29);

      goto LABEL_20;
    }
    unsigned int v9 = objc_msgSend_error(v3, v7, v8);
    if ((objc_msgSend_needsSynchronizeSigningIdentities(WeakRetained, v10, v11) & 1) == 0)
    {
      int v16 = objc_msgSend_domain(v9, v12, v13);
      if (v16 == (void *)*MEMORY[0x1E4F19DD8] && objc_msgSend_code(v9, v14, v15) == 5000)
      {
        uint64_t v19 = objc_msgSend_description(v9, v17, v18);
        unsigned int v22 = objc_msgSend_lowercaseString(v19, v20, v21);
        int v24 = objc_msgSend_containsString_(v22, v23, @"failed to create cryptographic signature");

        if (v24)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          unint64_t v25 = *MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
          {
            int v30 = 138412290;
            uint64_t v31 = v9;
            _os_log_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_INFO, "Signing identity missing when modifying record zone: %@", (uint8_t *)&v30, 0xCu);
          }
          objc_msgSend_setNeedsSynchronizeSigningIdentities_(WeakRetained, v26, 1);
LABEL_18:

          goto LABEL_19;
        }
      }
      else
      {
      }
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v27 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      int v30 = 138412290;
      uint64_t v31 = v9;
      _os_log_impl(&dword_1C4CFF000, v27, OS_LOG_TYPE_INFO, "Error modifying record zone: %@", (uint8_t *)&v30, 0xCu);
    }
    objc_msgSend_setError_(WeakRetained, v28, (uint64_t)v9);
    goto LABEL_18;
  }
LABEL_20:
}

void sub_1C4F568CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F568F8(uint64_t a1, char a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v7 = (void *)*MEMORY[0x1E4F1A548];
    uint64_t v8 = *MEMORY[0x1E4F1A550];
    if (v5 || (a2 & 1) == 0)
    {
      if (v8 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v7);
      }
      unint64_t v12 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        int v18 = 138543618;
        uint64_t v19 = v17;
        __int16 v20 = 2112;
        id v21 = v5;
        _os_log_error_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_ERROR, "User key sync to update signing identities failed for operation %{public}@: %@", (uint8_t *)&v18, 0x16u);
      }
      objc_msgSend_setError_(WeakRetained, v13, (uint64_t)v5);
    }
    else
    {
      if (v8 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v7);
      }
      unsigned int v9 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        int v18 = 138543362;
        uint64_t v19 = v11;
        _os_log_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_INFO, "User key sync to update signing identities succeeded for operation %{public}@", (uint8_t *)&v18, 0xCu);
      }
    }
    objc_msgSend_setDidSynchronizeSigningIdentities_(WeakRetained, v10, 1);
    int v16 = objc_msgSend_stateTransitionGroup(WeakRetained, v14, v15);
    dispatch_group_leave(v16);
  }
}

void sub_1C4F56CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F56CE0(uint64_t a1, char a2, void *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    unint64_t v10 = (void *)*MEMORY[0x1E4F1A548];
    uint64_t v11 = *MEMORY[0x1E4F1A550];
    if (v7 || (a2 & 1) == 0)
    {
      if (v11 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v10);
      }
      int v16 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        int v24 = 138543618;
        uint64_t v25 = v18;
        __int16 v26 = 2112;
        id v27 = v7;
        _os_log_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_INFO, "User key sync failed for operation %{public}@ with error %@", (uint8_t *)&v24, 0x16u);
      }
      objc_msgSend_setCurrentError_(WeakRetained, v17, (uint64_t)v7);
      objc_msgSend_setError_(v8, v19, (uint64_t)v7);
      objc_msgSend_setOverallResult_(v8, v20, @"failure");
    }
    else
    {
      if (v11 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v10);
      }
      unint64_t v12 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        int v24 = 138543362;
        uint64_t v25 = v14;
        _os_log_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_INFO, "User key sync succeeded for operation %{public}@", (uint8_t *)&v24, 0xCu);
      }
      objc_msgSend_setZoneWaitingOnKeyRegistrySync_(WeakRetained, v13, 0);
    }
    objc_msgSend_setKeySyncAnalytics_(WeakRetained, v15, (uint64_t)v8);
    uint64_t v23 = objc_msgSend_stateTransitionGroup(WeakRetained, v21, v22);
    dispatch_group_leave(v23);
  }
}

void sub_1C4F577E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F57814(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  unsigned int v9 = WeakRetained;
  if (!a2 || v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    __int16 v26 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v27 = *(void *)(a1 + 32);
      int v29 = 138412546;
      uint64_t v30 = v27;
      __int16 v31 = 2112;
      id v32 = v5;
      _os_log_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_INFO, "Warn: Couldn't decrypt pcs data for zone %@: %@", (uint8_t *)&v29, 0x16u);
    }
  }
  else
  {
    unint64_t v10 = objc_msgSend_targetZone(WeakRetained, v7, v8);
    uint64_t v13 = objc_msgSend_protectionData(v10, v11, v12);
    uint64_t v15 = objc_msgSend_etagFromPCSData_(CKDPCSManager, v14, (uint64_t)v13);

    uint64_t v18 = objc_msgSend_targetZone(v9, v16, v17);
    __int16 v20 = objc_msgSend_dataWithZone_(CKDZonePCSData, v19, (uint64_t)v18);

    objc_msgSend_setPcs_(v20, v21, a2);
    objc_msgSend_setEtag_(v20, v22, (uint64_t)v15);
    objc_msgSend_setPCSData_forFetchedZoneID_(v9, v23, (uint64_t)v20, *(void *)(a1 + 32));
  }
  uint64_t v28 = objc_msgSend_stateTransitionGroup(v9, v24, v25);
  dispatch_group_leave(v28);
}

uint64_t sub_1C4F57CC4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setZoneIDs_, *(void *)(a1 + 32));
}

id sub_1C4F58364(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v7 = objc_msgSend_translator(v3, v5, v6);
  unsigned int v9 = objc_msgSend_pAliasWithIdentityLookupInfo_(v7, v8, (uint64_t)v4);

  unint64_t v10 = *(void **)(a1 + 32);
  uint64_t v13 = objc_msgSend_operationType(v10, v11, v12);
  uint64_t v15 = objc_msgSend_operationRequestWithType_(v10, v14, v13);
  int v16 = objc_opt_new();
  objc_msgSend_setUserQueryRequest_(v15, v17, (uint64_t)v16);

  __int16 v20 = objc_msgSend_userQueryRequest(v15, v18, v19);
  objc_msgSend_setAlias_(v20, v21, (uint64_t)v9);

  uint64_t v22 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 384);
  uint64_t v25 = objc_msgSend_userQueryRequest(v15, v23, v24);
  objc_msgSend_setPublicKeyRequested_(v25, v26, v22);

  uint64_t v27 = *(void **)(*(void *)(a1 + 32) + 408);
  uint64_t v30 = objc_msgSend_request(v15, v28, v29);
  uint64_t v33 = objc_msgSend_operationUUID(v30, v31, v32);
  objc_msgSend_setObject_forKeyedSubscript_(v27, v34, (uint64_t)v4, v33);

  return v15;
}

uint64_t sub_1C4F5A620(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPUserInformationRequestAccess);
        objc_msgSend_addRequestingAccessUsers_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !CKDPUserInformationRequestAccessReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t CKDPAssetReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 112;
        goto LABEL_75;
      case 2u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 152;
        goto LABEL_75;
      case 4u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 168) |= 0x10u;
        while (2)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                uint64_t v22 = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_79:
        uint64_t v48 = 40;
        goto LABEL_96;
      case 5u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 104;
        goto LABEL_75;
      case 6u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 96;
        goto LABEL_75;
      case 8u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 80;
        goto LABEL_75;
      case 9u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 144;
        goto LABEL_75;
      case 0xAu:
        __int16 v26 = (CKDPProtectionInfo *)objc_alloc_init(MEMORY[0x1E4F19F20]);
        objc_storeStrong((id *)(a1 + 128), v26);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0) {
          goto LABEL_99;
        }
        goto LABEL_48;
      case 0xBu:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 160;
        goto LABEL_75;
      case 0xDu:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 88;
        goto LABEL_75;
      case 0xEu:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 168) |= 8u;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v22 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              BOOL v14 = v28++ >= 9;
              if (v14)
              {
                uint64_t v22 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_83:
        uint64_t v48 = 32;
        goto LABEL_96;
      case 0xFu:
        __int16 v26 = objc_alloc_init(CKDPProtectionInfo);
        objc_storeStrong((id *)(a1 + 120), v26);
        if (PBReaderPlaceMark() && sub_1C4D5BCB4((uint64_t)v26, a2))
        {
LABEL_48:
          PBReaderRecallMark();

LABEL_97:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_99:

        return 0;
      case 0x11u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 136;
        goto LABEL_75;
      case 0x12u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 168) |= 4u;
        while (2)
        {
          uint64_t v34 = *v3;
          unint64_t v35 = *(void *)(a2 + v34);
          if (v35 == -1 || v35 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
            *(void *)(a2 + v34) = v35 + 1;
            v22 |= (unint64_t)(v36 & 0x7F) << v32;
            if (v36 < 0)
            {
              v32 += 7;
              BOOL v14 = v33++ >= 9;
              if (v14)
              {
                uint64_t v22 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_87:
        uint64_t v48 = 24;
        goto LABEL_96;
      case 0x14u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 56;
        goto LABEL_75;
      case 0x15u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 48;
        goto LABEL_75;
      case 0x16u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 72;
        goto LABEL_75;
      case 0x17u:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 168) |= 2u;
        while (2)
        {
          uint64_t v39 = *v3;
          unint64_t v40 = *(void *)(a2 + v39);
          if (v40 == -1 || v40 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
            *(void *)(a2 + v39) = v40 + 1;
            v22 |= (unint64_t)(v41 & 0x7F) << v37;
            if (v41 < 0)
            {
              v37 += 7;
              BOOL v14 = v38++ >= 9;
              if (v14)
              {
                uint64_t v22 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_91:
        uint64_t v48 = 16;
        goto LABEL_96;
      case 0x18u:
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 168) |= 1u;
        while (2)
        {
          uint64_t v44 = *v3;
          unint64_t v45 = *(void *)(a2 + v44);
          if (v45 == -1 || v45 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v45);
            *(void *)(a2 + v44) = v45 + 1;
            v22 |= (unint64_t)(v46 & 0x7F) << v42;
            if (v46 < 0)
            {
              v42 += 7;
              BOOL v14 = v43++ >= 9;
              if (v14)
              {
                uint64_t v22 = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_95:
        uint64_t v48 = 8;
LABEL_96:
        *(void *)(a1 + v4_Block_object_dispose(&STACK[0x3F0], 8) = v22;
        goto LABEL_97;
      case 0x19u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 64;
LABEL_75:
        char v47 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&STACK[0x3F0], 8) = v17;

        goto LABEL_97;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_97;
    }
  }
}

uint64_t CKDPParticipantReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = (CKDPContactInformation *)objc_alloc_init(MEMORY[0x1E4F19F08]);
        uint64_t v18 = 72;
        goto LABEL_46;
      case 2u:
        uint64_t v17 = (CKDPContactInformation *)objc_alloc_init(MEMORY[0x1E4F19F08]);
        uint64_t v18 = 120;
        goto LABEL_46;
      case 3u:
        uint64_t v17 = objc_alloc_init(CKDPContactInformation);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (!PBReaderPlaceMark() || !CKDPContactInformationReadFrom((uint64_t)v17, a2)) {
          goto LABEL_191;
        }
        goto LABEL_116;
      case 4u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 136) |= 0x40u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_138;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_138:
        uint64_t v98 = 116;
        goto LABEL_179;
      case 5u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 136) |= 8u;
        while (2)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_142;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_142:
        uint64_t v98 = 80;
        goto LABEL_179;
      case 6u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 136) |= 0x10u;
        while (2)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v21 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v14 = v31++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_146;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_146:
        uint64_t v98 = 84;
        goto LABEL_179;
      case 7u:
        uint64_t v17 = (CKDPContactInformation *)objc_alloc_init(MEMORY[0x1E4F19F08]);
        uint64_t v18 = 48;
LABEL_46:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0) {
          goto LABEL_191;
        }
        goto LABEL_116;
      case 8u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        *(_WORD *)(a1 + 136) |= 0x100u;
        while (2)
        {
          uint64_t v38 = *v3;
          unint64_t v39 = *(void *)(a2 + v38);
          if (v39 == -1 || v39 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v40 = *(unsigned char *)(*(void *)(a2 + *v7) + v39);
            *(void *)(a2 + v3_Block_object_dispose(&STACK[0x3F0], 8) = v39 + 1;
            v37 |= (unint64_t)(v40 & 0x7F) << v35;
            if (v40 < 0)
            {
              v35 += 7;
              BOOL v14 = v36++ >= 9;
              if (v14)
              {
                uint64_t v37 = 0;
                goto LABEL_150;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v37 = 0;
        }
LABEL_150:
        BOOL v99 = v37 != 0;
        uint64_t v100 = 129;
        goto LABEL_188;
      case 9u:
        uint64_t v17 = objc_alloc_init(CKDPProtectionInfo);
        uint64_t v41 = 104;
        goto LABEL_65;
      case 0xAu:
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + 136) |= 1u;
        while (2)
        {
          uint64_t v45 = *v3;
          unint64_t v46 = *(void *)(a2 + v45);
          if (v46 == -1 || v46 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v47 = *(unsigned char *)(*(void *)(a2 + *v7) + v46);
            *(void *)(a2 + v45) = v46 + 1;
            v44 |= (unint64_t)(v47 & 0x7F) << v42;
            if (v47 < 0)
            {
              v42 += 7;
              BOOL v14 = v43++ >= 9;
              if (v14)
              {
                uint64_t v44 = 0;
                goto LABEL_154;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v44 = 0;
        }
LABEL_154:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v44;
        goto LABEL_189;
      case 0xBu:
        uint64_t v17 = objc_alloc_init(CKDPProtectionInfo);
        uint64_t v41 = 88;
LABEL_65:
        objc_storeStrong((id *)(a1 + v41), v17);
        if (!PBReaderPlaceMark() || !sub_1C4D5BCB4((uint64_t)v17, a2)) {
          goto LABEL_191;
        }
        goto LABEL_116;
      case 0xCu:
        uint64_t v48 = PBReaderReadData();
        uint64_t v49 = 64;
        goto LABEL_134;
      case 0xDu:
        char v50 = 0;
        unsigned int v51 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 136) |= 4u;
        while (2)
        {
          uint64_t v52 = *v3;
          unint64_t v53 = *(void *)(a2 + v52);
          if (v53 == -1 || v53 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v53);
            *(void *)(a2 + v52) = v53 + 1;
            v21 |= (unint64_t)(v54 & 0x7F) << v50;
            if (v54 < 0)
            {
              v50 += 7;
              BOOL v14 = v51++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_158;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_158:
        uint64_t v98 = 60;
        goto LABEL_179;
      case 0xEu:
        char v55 = 0;
        unsigned int v56 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 136) |= 0x20u;
        while (2)
        {
          uint64_t v57 = *v3;
          unint64_t v58 = *(void *)(a2 + v57);
          if (v58 == -1 || v58 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v59 = *(unsigned char *)(*(void *)(a2 + *v7) + v58);
            *(void *)(a2 + v57) = v58 + 1;
            v21 |= (unint64_t)(v59 & 0x7F) << v55;
            if (v59 < 0)
            {
              v55 += 7;
              BOOL v14 = v56++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_162;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_162:
        uint64_t v98 = 112;
        goto LABEL_179;
      case 0xFu:
        char v60 = 0;
        unsigned int v61 = 0;
        uint64_t v62 = 0;
        *(_WORD *)(a1 + 136) |= 0x80u;
        while (2)
        {
          uint64_t v63 = *v3;
          unint64_t v64 = *(void *)(a2 + v63);
          if (v64 == -1 || v64 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v65 = *(unsigned char *)(*(void *)(a2 + *v7) + v64);
            *(void *)(a2 + v63) = v64 + 1;
            v62 |= (unint64_t)(v65 & 0x7F) << v60;
            if (v65 < 0)
            {
              v60 += 7;
              BOOL v14 = v61++ >= 9;
              if (v14)
              {
                uint64_t v62 = 0;
                goto LABEL_166;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v62 = 0;
        }
LABEL_166:
        BOOL v99 = v62 != 0;
        uint64_t v100 = 128;
        goto LABEL_188;
      case 0x10u:
        char v66 = 0;
        unsigned int v67 = 0;
        uint64_t v68 = 0;
        *(_WORD *)(a1 + 136) |= 0x800u;
        while (2)
        {
          uint64_t v69 = *v3;
          unint64_t v70 = *(void *)(a2 + v69);
          if (v70 == -1 || v70 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v71 = *(unsigned char *)(*(void *)(a2 + *v7) + v70);
            *(void *)(a2 + v69) = v70 + 1;
            v68 |= (unint64_t)(v71 & 0x7F) << v66;
            if (v71 < 0)
            {
              v66 += 7;
              BOOL v14 = v67++ >= 9;
              if (v14)
              {
                uint64_t v68 = 0;
                goto LABEL_170;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v68 = 0;
        }
LABEL_170:
        BOOL v99 = v68 != 0;
        uint64_t v100 = 132;
        goto LABEL_188;
      case 0x11u:
        uint64_t v17 = (CKDPContactInformation *)objc_alloc_init(MEMORY[0x1E4F19EF8]);
        uint64_t v72 = 16;
        goto LABEL_114;
      case 0x12u:
        char v73 = 0;
        unsigned int v74 = 0;
        uint64_t v75 = 0;
        *(_WORD *)(a1 + 136) |= 0x1000u;
        while (2)
        {
          uint64_t v76 = *v3;
          unint64_t v77 = *(void *)(a2 + v76);
          if (v77 == -1 || v77 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v78 = *(unsigned char *)(*(void *)(a2 + *v7) + v77);
            *(void *)(a2 + v76) = v77 + 1;
            v75 |= (unint64_t)(v78 & 0x7F) << v73;
            if (v78 < 0)
            {
              v73 += 7;
              BOOL v14 = v74++ >= 9;
              if (v14)
              {
                uint64_t v75 = 0;
                goto LABEL_174;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v75 = 0;
        }
LABEL_174:
        BOOL v99 = v75 != 0;
        uint64_t v100 = 133;
        goto LABEL_188;
      case 0x13u:
        uint64_t v48 = PBReaderReadData();
        uint64_t v49 = 96;
        goto LABEL_134;
      case 0x14u:
        char v79 = 0;
        unsigned int v80 = 0;
        uint64_t v21 = 0;
        *(_WORD *)(a1 + 136) |= 2u;
        while (2)
        {
          uint64_t v81 = *v3;
          unint64_t v82 = *(void *)(a2 + v81);
          if (v82 == -1 || v82 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v83 = *(unsigned char *)(*(void *)(a2 + *v7) + v82);
            *(void *)(a2 + v81) = v82 + 1;
            v21 |= (unint64_t)(v83 & 0x7F) << v79;
            if (v83 < 0)
            {
              v79 += 7;
              BOOL v14 = v80++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_178;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_178:
        uint64_t v98 = 56;
LABEL_179:
        *(_DWORD *)(a1 + v9_Block_object_dispose(&STACK[0x3F0], 8) = v21;
        goto LABEL_189;
      case 0x15u:
        uint64_t v17 = (CKDPContactInformation *)objc_alloc_init(MEMORY[0x1E4F19EF8]);
        uint64_t v72 = 40;
LABEL_114:
        objc_storeStrong((id *)(a1 + v72), v17);
        if PBReaderPlaceMark() && (CKDPDateReadFrom())
        {
LABEL_116:
          PBReaderRecallMark();

LABEL_189:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_191:

        return 0;
      case 0x17u:
        char v85 = 0;
        unsigned int v86 = 0;
        uint64_t v87 = 0;
        *(_WORD *)(a1 + 136) |= 0x200u;
        while (2)
        {
          uint64_t v88 = *v3;
          unint64_t v89 = *(void *)(a2 + v88);
          if (v89 == -1 || v89 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v90 = *(unsigned char *)(*(void *)(a2 + *v7) + v89);
            *(void *)(a2 + v8_Block_object_dispose(&STACK[0x3F0], 8) = v89 + 1;
            v87 |= (unint64_t)(v90 & 0x7F) << v85;
            if (v90 < 0)
            {
              v85 += 7;
              BOOL v14 = v86++ >= 9;
              if (v14)
              {
                uint64_t v87 = 0;
                goto LABEL_183;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v87 = 0;
        }
LABEL_183:
        BOOL v99 = v87 != 0;
        uint64_t v100 = 130;
        goto LABEL_188;
      case 0x18u:
        char v91 = 0;
        unsigned int v92 = 0;
        uint64_t v93 = 0;
        *(_WORD *)(a1 + 136) |= 0x400u;
        while (2)
        {
          uint64_t v94 = *v3;
          unint64_t v95 = *(void *)(a2 + v94);
          if (v95 == -1 || v95 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v96 = *(unsigned char *)(*(void *)(a2 + *v7) + v95);
            *(void *)(a2 + v94) = v95 + 1;
            v93 |= (unint64_t)(v96 & 0x7F) << v91;
            if (v96 < 0)
            {
              v91 += 7;
              BOOL v14 = v92++ >= 9;
              if (v14)
              {
                uint64_t v93 = 0;
                goto LABEL_187;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v93 = 0;
        }
LABEL_187:
        BOOL v99 = v93 != 0;
        uint64_t v100 = 131;
LABEL_188:
        *(unsigned char *)(a1 + v100) = v99;
        goto LABEL_189;
      case 0x19u:
        uint64_t v48 = PBReaderReadData();
        uint64_t v49 = 32;
LABEL_134:
        uint64_t v97 = *(void **)(a1 + v49);
        *(void *)(a1 + v49) = v48;

        goto LABEL_189;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_189;
    }
  }
}

void sub_1C4F60DE0(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_personaID(*(void **)(a1 + 32), a2, a3);
  BOOL v5 = CKAdoptPersonaID(v4);

  if (v5)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    objc_msgSend_delegate(*(void **)(a1 + 32), v6, v7);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v9);
  }
}

void sub_1C4F61170(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_cacheDelegateQueue(*(void **)(a1 + 32), a2, a3);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1C4F6122C;
  v8[3] = &unk_1E64F6DE8;
  BOOL v5 = *(void **)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v5;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v10 = v6;
  uint64_t v11 = v7;
  dispatch_sync(v4, v8);
}

void sub_1C4F6122C(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 32), a2, a3);
  id v6 = objc_msgSend_objectForKeyedSubscript_(v4, v5, *(void *)(a1 + 40));

  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = sub_1C4F613D4;
  void v24[3] = &unk_1E64F6D98;
  id v25 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  id v26 = v7;
  uint64_t v27 = v8;
  uint64_t v28 = *(void *)(a1 + 56);
  objc_msgSend_performWithDelegate_(v6, v9, (uint64_t)v24);
  id v10 = [CKDOperationInfoDelegateWrapper alloc];
  unint64_t v12 = objc_msgSend_initWithDelegate_(v10, v11, *(void *)(a1 + 48));
  int v15 = objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 32), v13, v14);
  objc_msgSend_setObject_forKeyedSubscript_(v15, v16, (uint64_t)v12, *(void *)(a1 + 40));

  char v19 = objc_msgSend_cacheQueue(*(void **)(a1 + 32), v17, v18);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4F61554;
  block[3] = &unk_1E64F0120;
  unsigned int v20 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v22 = v20;
  id v23 = *(id *)(a1 + 48);
  dispatch_async(v19, block);
}

void sub_1C4F613D4(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v6 = v3;
  if (v3)
  {
    if (objc_msgSend_isInvalidated(v3, v4, v5))
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v9 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        uint64_t v18 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138543874;
        uint64_t v20 = v17;
        __int16 v21 = 2112;
        id v22 = v6;
        __int16 v23 = 2112;
        uint64_t v24 = v18;
        _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "An existing invalidated proxy operation was found for operation %{public}@: %@. Unregistering that operation and setting %@ as the new delegate", buf, 0x20u);
      }
      unint64_t v12 = objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 48), v10, v11);
      objc_msgSend_setObject_forKeyedSubscript_(v12, v13, 0, *(void *)(a1 + 32));

      objc_msgSend_wasUnexpectedlyUnregisteredForOperationID_(v6, v14, *(void *)(a1 + 32));
    }
    else
    {
      int v15 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v7, v8);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v15, v16, *(void *)(a1 + 56), *(void *)(a1 + 48), @"CKDOperationInfoCache.m", 157, @"A valid delegate is already registered (%@) for operation ID %@", v6, *(void *)(a1 + 32));
    }
  }
}

void sub_1C4F61554(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1C4F61604;
  v5[3] = &unk_1E64F6DC0;
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 40);
  objc_msgSend__locked_enumerateCallbacksForOperationWithID_usingBlock_(v2, v4, v3, v5);
}

uint64_t sub_1C4F61604(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_operationWithID_receivedCallback_, *(void *)(a1 + 40));
}

void sub_1C4F616EC(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_objectForKeyedSubscript_(v4, v5, *(void *)(a1 + 40));
  id v14 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v8 = objc_msgSend_delegate(v14, v6, v7);
  id v9 = *(void **)(a1 + 48);

  if (v8 == v9)
  {
    unint64_t v12 = objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 32), v10, v11);
    objc_msgSend_setObject_forKeyedSubscript_(v12, v13, 0, *(void *)(a1 + 40));
  }
}

void sub_1C4F618C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F618D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4F618E8(uint64_t a1)
{
}

void sub_1C4F618F0(void *a1, const char *a2)
{
  v40[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = objc_msgSend_stringWithFormat_(NSString, a2, @"%@ = ?", @"operationID");
  id v4 = (void *)a1[4];
  v40[0] = @"operationInfo";
  v40[1] = @"retryNumber";
  void v40[2] = @"lastAttemptDate";
  id v6 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v5, (uint64_t)v40, 3);
  uint64_t v39 = a1[5];
  uint64_t v8 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v7, (uint64_t)&v39, 1);
  id v10 = objc_msgSend_select_from_where_bindings_(v4, v9, (uint64_t)v6, @"OperationInfo", v3, v8);

  if (objc_msgSend_count(v10, v11, v12))
  {
    int v15 = objc_msgSend_firstObject(v10, v13, v14);
    if (v15)
    {
      uint64_t v17 = v15;
      uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(v15, v16, @"operationInfo");
      uint64_t v20 = objc_msgSend_objectForKeyedSubscript_(v17, v19, @"retryNumber");
      id v22 = objc_msgSend_objectForKeyedSubscript_(v17, v21, @"lastAttemptDate");
      objc_msgSend_doubleValue(v22, v23, v24);
      double v26 = v25;

      char v29 = objc_msgSend_dateWithTimeIntervalSince1970_(MEMORY[0x1E4F1C9C8], v27, v28, v26);
      if (v18 && v20)
      {
        char v30 = [CKDOperationInfoMetadata alloc];
        uint64_t AttemptDate_retryNumber = objc_msgSend_initWithOperationInfo_lastAttemptDate_retryNumber_(v30, v31, (uint64_t)v18, v29, v20);
        uint64_t v33 = *(void *)(a1[6] + 8);
        char v34 = *(void **)(v33 + 40);
        *(void *)(v33 + 40) = AttemptDate_retryNumber;
      }
    }
  }
  if (!*(void *)(*(void *)(a1[6] + 8) + 40))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    char v35 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v36 = a1[5];
      *(_DWORD *)buf = 138543362;
      uint64_t v38 = v36;
      _os_log_impl(&dword_1C4CFF000, v35, OS_LOG_TYPE_INFO, "Couldn't find metadata for operation %{public}@", buf, 0xCu);
    }
  }
}

void sub_1C4F61C8C(uint64_t a1, void *a2)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  v11[0] = *(void *)(a1 + 40);
  id v4 = (void *)MEMORY[0x1E4F1C978];
  id v5 = a2;
  uint64_t v7 = objc_msgSend_arrayWithObjects_count_(v4, v6, (uint64_t)v11, 1);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1C4F61D9C;
  v9[3] = &unk_1E64F6E10;
  id v10 = *(id *)(a1 + 48);
  objc_msgSend_selectFrom_where_bindings_orderBy_limit_block_(v5, v8, @"Callback", v3, v7, 0, 0, v9);
}

void sub_1C4F61D9C(uint64_t a1, void *a2, unsigned char *a3)
{
  if (a2)
  {
    id v5 = objc_msgSend_objectForKeyedSubscript_(a2, (const char *)a2, @"callback");
    id v6 = (void *)MEMORY[0x1E4F28DC0];
    uint64_t v7 = objc_opt_class();
    id v9 = objc_msgSend_unarchivedObjectOfClass_fromData_error_(v6, v8, v7, v5, 0);
    if (v9)
    {
      char v11 = 0;
      uint64_t v10 = *(void *)(a1 + 32);
      if (v10)
      {
        (*(void (**)(uint64_t, void *, char *))(v10 + 16))(v10, v9, &v11);
        if (v11) {
          *a3 = 1;
        }
      }
    }
  }
}

uint64_t sub_1C4F61F34(uint64_t a1, const char *a2)
{
  return objc_msgSend__locked_enumerateCallbacksForOperationWithID_usingBlock_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_1C4F6201C(uint64_t a1, const char *a2)
{
  v100[7] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  v100[0] = @"applicationID";
  v100[1] = @"personaID";
  v100[2] = @"containerID";
  v100[3] = @"accountID";
  v100[4] = @"operationInfo";
  v100[5] = @"lastAttemptDate";
  v100[6] = @"retryNumber";
  uint64_t v3 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], a2, (uint64_t)v100, 7);
  id v5 = objc_msgSend_stringWithFormat_(NSString, v4, @"%@ = 0", @"operationIsComplete");
  uint64_t v7 = objc_msgSend_select_from_where_bindings_(v2, v6, (uint64_t)v3, @"OperationInfo", v5, 0);

  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  id obj = v7;
  uint64_t v79 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v88, v99, 16);
  if (v79)
  {
    uint64_t v78 = *(void *)v89;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v89 != v78) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v88 + 1) + 8 * v9);
        char v11 = [CKDApplicationID alloc];
        char v13 = objc_msgSend_objectForKeyedSubscript_(v10, v12, @"applicationID");
        unint64_t v82 = objc_msgSend_initWithSqliteRepresentation_(v11, v14, (uint64_t)v13);

        int v16 = objc_msgSend_objectForKeyedSubscript_(v10, v15, @"personaID");
        id v17 = objc_alloc(MEMORY[0x1E4F19ED8]);
        char v19 = objc_msgSend_objectForKeyedSubscript_(v10, v18, @"containerID");
        uint64_t v81 = objc_msgSend_initWithSqliteRepresentation_(v17, v20, (uint64_t)v19);

        id v22 = objc_msgSend_objectForKeyedSubscript_(v10, v21, @"accountID");
        unsigned int v80 = objc_msgSend_objectForKeyedSubscript_(v10, v23, @"retryNumber");
        double v25 = objc_msgSend_objectForKeyedSubscript_(v10, v24, @"lastAttemptDate");
        objc_msgSend_doubleValue(v25, v26, v27);
        double v29 = v28;

        uint64_t v33 = objc_msgSend_objectForKeyedSubscript_(v10, v30, @"operationInfo");
        if (v33)
        {
          char v34 = (void *)MEMORY[0x1E4F28DC0];
          uint64_t v35 = objc_opt_class();
          uint64_t v37 = objc_msgSend_unarchivedObjectOfClass_fromData_error_(v34, v36, v35, v33, 0);
        }
        else
        {
          uint64_t v37 = 0;
        }
        uint64_t v38 = objc_msgSend_CKNilIfLengthZero(v16, v31, v32);

        uint64_t v41 = objc_msgSend_CKNilIfLengthZero(v22, v39, v40);

        if (v82 && v81 && v37)
        {
          *(void *)&long long v94 = 0;
          *((void *)&v94 + 1) = &v94;
          uint64_t v95 = 0x3032000000;
          char v96 = sub_1C4F618D8;
          uint64_t v97 = sub_1C4F618E8;
          id v98 = 0;
          uint64_t v44 = objc_msgSend_cacheDelegateQueue(*(void **)(a1 + 32), v42, v43);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = sub_1C4F62768;
          block[3] = &unk_1E64F30F0;
          uint64_t v45 = *(void *)(a1 + 32);
          uint64_t v87 = &v94;
          void block[4] = v45;
          id v46 = v37;
          id v86 = v46;
          dispatch_sync(v44, block);

          if (*(void *)(*((void *)&v94 + 1) + 40))
          {
            if (*MEMORY[0x1E4F1A550] != -1) {
              dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            char v47 = (id)*MEMORY[0x1E4F1A500];
            if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
            {
              char v50 = objc_msgSend_operationID(v46, v48, v49);
              *(_DWORD *)buf = 138543362;
              uint64_t v93 = v50;
              _os_log_impl(&dword_1C4CFF000, v47, OS_LOG_TYPE_INFO, "Not returning operation %{public}@ as resumable since it has a delegate", buf, 0xCu);
            }
          }
          else
          {
            uint64_t v52 = [CKDAppContainerTuple alloc];
            char v47 = objc_msgSend_initWithApplicationID_containerID_personaID_(v52, v53, (uint64_t)v82, v81, v38);
            char v54 = [CKDAppContainerAccountTuple alloc];
            unsigned int v56 = objc_msgSend_initWithAppContainerTuple_accountID_(v54, v55, (uint64_t)v47, v41);
            uint64_t v57 = [CKDOperationInfoMetadata alloc];
            char v60 = objc_msgSend_dateWithTimeIntervalSince1970_(MEMORY[0x1E4F1C9C8], v58, v59, v29);
            uint64_t AttemptDate_retryNumber = objc_msgSend_initWithOperationInfo_lastAttemptDate_retryNumber_(v57, v61, (uint64_t)v46, v60, v80);

            objc_msgSend_setObject_forKey_(*(void **)(a1 + 40), v63, (uint64_t)AttemptDate_retryNumber, v56);
          }

          _Block_object_dispose(&v94, 8);
        }
        else
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          unsigned int v51 = *MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
          {
            LODWORD(v94) = 138412290;
            *(void *)((char *)&v94 + 4) = v10;
            _os_log_error_impl(&dword_1C4CFF000, v51, OS_LOG_TYPE_ERROR, "Operation info entry is corrupted: %@", (uint8_t *)&v94, 0xCu);
          }
        }

        ++v9;
      }
      while (v79 != v9);
      uint64_t v79 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v64, (uint64_t)&v88, v99, 16);
    }
    while (v79);
  }

  if (*(unsigned char *)(a1 + 48))
  {
    unsigned int v67 = objc_msgSend_allValues(*(void **)(a1 + 40), v65, v66);
    uint64_t v69 = objc_msgSend_valueForKey_(v67, v68, @"operationInfo");
    char v71 = objc_msgSend_valueForKey_(v69, v70, @"operationID");
    uint64_t v72 = *(void **)(a1 + 32);
    v83[0] = MEMORY[0x1E4F143A8];
    v83[1] = 3221225472;
    v83[2] = sub_1C4F627EC;
    v83[3] = &unk_1E64F6E60;
    id v84 = v71;
    id v73 = v71;
    id v75 = (id)objc_msgSend_performDatabaseOperation_(v72, v74, (uint64_t)v83);
  }
}

void sub_1C4F62738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_1C4F62768(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 32), a2, a3);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  id v6 = objc_msgSend_operationID(*(void **)(a1 + 40), v4, v5);
  uint64_t v8 = objc_msgSend_objectForKeyedSubscript_(v11, v7, (uint64_t)v6);
  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;
}

void sub_1C4F627EC(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = *(id *)(a1 + 32);
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v13, v18, 16);
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)v14;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v4);
        }
        uint64_t v17 = *(void *)(*((void *)&v13 + 1) + 8 * v10);
        id v11 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v7, (uint64_t)&v17, 1, (void)v13);
        objc_msgSend_deleteFrom_where_bindings_(v3, v12, @"Callback", @"operationID = ?", v11);

        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v13, v18, 16);
    }
    while (v8);
  }
}

void sub_1C4F62A28(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_count(*(void **)(a1 + 32), a2, a3))
  {
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id obj = *(id *)(a1 + 32);
    uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v41, v50, 16);
    if (v34)
    {
      uint64_t v33 = *(void *)v42;
      do
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v42 != v33) {
            objc_enumerationMutation(obj);
          }
          uint64_t v36 = v6;
          uint64_t v7 = *(void *)(*((void *)&v41 + 1) + 8 * v6);
          uint64_t v8 = objc_msgSend_stringWithFormat_(NSString, v5, @"%@ = ?", @"operationID");
          uint64_t v9 = *(void **)(a1 + 40);
          uint64_t v49 = @"operationInfo";
          id v11 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v10, (uint64_t)&v49, 1);
          uint64_t v48 = v7;
          long long v13 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v12, (uint64_t)&v48, 1);
          uint64_t v35 = (void *)v8;
          long long v15 = objc_msgSend_select_from_where_bindings_(v9, v14, (uint64_t)v11, @"OperationInfo", v8, v13);

          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          id v16 = v15;
          uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v37, v47, 16);
          if (v18)
          {
            uint64_t v20 = v18;
            uint64_t v21 = *(void *)v38;
            do
            {
              uint64_t v22 = 0;
              do
              {
                if (*(void *)v38 != v21) {
                  objc_enumerationMutation(v16);
                }
                __int16 v23 = *(void **)(*((void *)&v37 + 1) + 8 * v22);
                uint64_t v24 = objc_msgSend_objectForKeyedSubscript_(v23, v19, @"operationInfo");
                if (v24
                  && (double v25 = (void *)MEMORY[0x1E4F28DC0],
                      uint64_t v26 = objc_opt_class(),
                      objc_msgSend_unarchivedObjectOfClass_fromData_error_(v25, v27, v26, v24, 0),
                      (uint64_t v28 = objc_claimAutoreleasedReturnValue()) != 0))
                {
                  char v30 = (void *)v28;
                  objc_msgSend_addObject_(*(void **)(a1 + 48), v29, v28);
                }
                else
                {
                  if (*MEMORY[0x1E4F1A550] != -1) {
                    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
                  }
                  unsigned int v31 = *MEMORY[0x1E4F1A500];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138412290;
                    id v46 = v23;
                    _os_log_error_impl(&dword_1C4CFF000, v31, OS_LOG_TYPE_ERROR, "Operation info entry is corrupted: %@", buf, 0xCu);
                  }
                }

                ++v22;
              }
              while (v20 != v22);
              uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v19, (uint64_t)&v37, v47, 16);
            }
            while (v20);
          }

          uint64_t v6 = v36 + 1;
        }
        while (v36 + 1 != v34);
        uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v41, v50, 16);
      }
      while (v34);
    }
  }
}

void sub_1C4F62E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4F62EB0(uint64_t a1, const char *a2, uint64_t a3)
{
  void v48[4] = *MEMORY[0x1E4F143B8];
  v47[0] = @"applicationID";
  id v4 = objc_msgSend_appContainerTuple(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_applicationID(v4, v5, v6);
  v48[0] = v7;
  v47[1] = @"personaID";
  uint64_t v10 = objc_msgSend_appContainerTuple(*(void **)(a1 + 32), v8, v9);
  uint64_t v13 = objc_msgSend_personaID(v10, v11, v12);
  id v16 = (void *)v13;
  if (v13) {
    uint64_t v17 = (__CFString *)v13;
  }
  else {
    uint64_t v17 = &stru_1F2044F30;
  }
  v48[1] = v17;
  v47[2] = @"containerID";
  uint64_t v18 = objc_msgSend_appContainerTuple(*(void **)(a1 + 32), v14, v15);
  uint64_t v21 = objc_msgSend_containerID(v18, v19, v20);
  v48[2] = v21;
  void v47[3] = @"accountID";
  uint64_t v24 = objc_msgSend_accountID(*(void **)(a1 + 32), v22, v23);
  uint64_t v26 = (void *)v24;
  if (v24) {
    uint64_t v27 = (__CFString *)v24;
  }
  else {
    uint64_t v27 = &stru_1F2044F30;
  }
  v48[3] = v27;
  uint64_t v28 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v25, (uint64_t)v48, v47, 4);

  char v30 = objc_msgSend_equalityClauseAndBindingsForDict_(MEMORY[0x1E4F1A368], v29, (uint64_t)v28);
  unsigned int v31 = *(void **)(a1 + 40);
  id v46 = @"operationID";
  uint64_t v33 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v32, (uint64_t)&v46, 1);
  uint64_t v36 = objc_msgSend_v1(v30, v34, v35);
  long long v39 = objc_msgSend_v2(v30, v37, v38);
  long long v41 = objc_msgSend_select_from_where_bindings_(v31, v40, (uint64_t)v33, @"OperationInfo", v36, v39);

  uint64_t v43 = objc_msgSend_CKCompactMap_(v41, v42, (uint64_t)&unk_1F2044430);
  uint64_t v44 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v45 = *(void **)(v44 + 40);
  *(void *)(v44 + 40) = v43;
}

id sub_1C4F630E4(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v4 = objc_msgSend_objectForKeyedSubscript_(v2, v3, @"operationID");
  if (!v4)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v5 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      int v7 = 138412290;
      id v8 = v2;
      _os_log_error_impl(&dword_1C4CFF000, v5, OS_LOG_TYPE_ERROR, "Unexpected operation info result: %@", (uint8_t *)&v7, 0xCu);
    }
  }

  return v4;
}

void sub_1C4F632AC(uint64_t a1)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1C4F6333C;
  v4[3] = &unk_1E64F6E60;
  id v1 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v3 = (id)objc_msgSend_performDatabaseOperation_(v1, v2, (uint64_t)v4);
}

void sub_1C4F6333C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v7 = a3;
  if (*(void *)(a1 + 32))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v8 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v23 = v10;
      _os_log_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_INFO, "Removing all cached long-lived operation info for account ID %@", buf, 0xCu);
    }
    id v11 = objc_msgSend_stringWithFormat_(NSString, v9, @"%@ = ?", @"accountID");
    uint64_t v21 = *(void *)(a1 + 32);
    uint64_t v13 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v12, (uint64_t)&v21, 1);
    objc_msgSend_deleteFrom_where_bindings_(v5, v14, @"OperationInfo", v11, v13);
  }
  else
  {
    id v11 = objc_msgSend_stringWithFormat_(NSString, v6, @"%@ < ?", @"expirationDate");
    uint64_t v13 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v15, v16);
    uint64_t v20 = v13;
    uint64_t v18 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v17, (uint64_t)&v20, 1);
    objc_msgSend_deleteFrom_where_bindings_(v5, v19, @"OperationInfo", v11, v18);
  }
}

void sub_1C4F6364C(uint64_t a1, void *a2)
{
  v42[6] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v4 = (void *)MEMORY[0x1E4F28DB0];
    id v5 = a2;
    id v7 = objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(v4, v6, v3, 1, 0);
    id v8 = *(void **)(a1 + 48);
    v42[0] = *(void *)(a1 + 40);
    v41[0] = @"operationID";
    v41[1] = @"applicationID";
    objc_msgSend_appContainerTuple(v8, v9, v10);
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    long long v14 = objc_msgSend_applicationID(v11, v12, v13);
    v42[1] = v14;
    v41[2] = @"personaID";
    uint64_t v17 = objc_msgSend_appContainerTuple(*(void **)(a1 + 48), v15, v16);
    uint64_t v20 = objc_msgSend_personaID(v17, v18, v19);
    uint64_t v23 = (void *)v20;
    if (v20) {
      uint64_t v24 = (__CFString *)v20;
    }
    else {
      uint64_t v24 = &stru_1F2044F30;
    }
    v42[2] = v24;
    v41[3] = @"containerID";
    double v25 = objc_msgSend_appContainerTuple(*(void **)(a1 + 48), v21, v22);
    uint64_t v28 = objc_msgSend_containerID(v25, v26, v27);
    v42[3] = v28;
    void v41[4] = @"accountID";
    uint64_t v31 = objc_msgSend_accountID(*(void **)(a1 + 48), v29, v30);
    uint64_t v33 = (void *)v31;
    if (v31) {
      uint64_t v34 = (__CFString *)v31;
    }
    else {
      uint64_t v34 = &stru_1F2044F30;
    }
    v41[5] = @"operationInfo";
    v42[4] = v34;
    v42[5] = v7;
    uint64_t v35 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v32, (uint64_t)v42, v41, 6);
    objc_msgSend_insertOrReplaceInto_values_(v5, v36, @"OperationInfo", v35);
  }
  else
  {
    uint64_t v40 = *(void *)(a1 + 40);
    long long v37 = (void *)MEMORY[0x1E4F1C978];
    id v11 = a2;
    id v7 = objc_msgSend_arrayWithObjects_count_(v37, v38, (uint64_t)&v40, 1);
    objc_msgSend_deleteFrom_where_bindings_(v11, v39, @"OperationInfo", @"operationID = ?", v7, v40);
  }
}

uint64_t sub_1C4F63974(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__lockedSetOperationInfo_forOperationID_appContainerAccountTuple_, *(void *)(a1 + 40));
}

void sub_1C4F63C4C(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = objc_msgSend_objectForKeyedSubscript_(v4, v5, *(void *)(a1 + 40));

  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1C4F63D1C;
  v8[3] = &unk_1E64F6ED0;
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  objc_msgSend_performWithDelegate_(v6, v7, (uint64_t)v8);
}

uint64_t sub_1C4F63D1C(uint64_t result, uint64_t a2)
{
  if (a2) {
    return MEMORY[0x1F4181798](a2, sel_operationWithID_receivedCallback_, *(void *)(result + 32));
  }
  return result;
}

void sub_1C4F63D30(uint64_t a1, void *a2)
{
  v36[2] = *MEMORY[0x1E4F143B8];
  v35[0] = @"operationID";
  v35[1] = @"callback";
  uint64_t v3 = *(void *)(a1 + 40);
  v36[0] = *(void *)(a1 + 32);
  v36[1] = v3;
  id v4 = (void *)MEMORY[0x1E4F1C9E8];
  id v5 = a2;
  id v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(v4, v6, (uint64_t)v36, v35, 2);
  objc_msgSend_insertOrReplaceInto_values_(v5, v8, @"Callback", v7);

  v34[0] = *(void *)(a1 + 32);
  v33[0] = @"operationID";
  v33[1] = @"applicationID";
  id v10 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 48), v9, @"applicationID");
  v34[1] = v10;
  v33[2] = @"personaID";
  uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 48), v11, @"personaID");
  long long v14 = (void *)v12;
  if (v12) {
    uint64_t v15 = (__CFString *)v12;
  }
  else {
    uint64_t v15 = &stru_1F2044F30;
  }
  void v34[2] = v15;
  v33[3] = @"containerID";
  uint64_t v16 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 48), v13, @"containerID");
  v34[3] = v16;
  void v33[4] = @"accountID";
  uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 48), v17, @"accountID");
  uint64_t v20 = (void *)v18;
  if (v18) {
    uint64_t v21 = (__CFString *)v18;
  }
  else {
    uint64_t v21 = &stru_1F2044F30;
  }
  v34[4] = v21;
  v33[5] = @"operationInfo";
  uint64_t v22 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 48), v19, @"operationInfo");
  v34[5] = v22;
  v33[6] = @"operationIsComplete";
  uint64_t v23 = (void *)MEMORY[0x1E4F28ED0];
  uint64_t isCompletionCallback = objc_msgSend_isCompletionCallback(*(void **)(a1 + 56), v24, v25);
  uint64_t v28 = objc_msgSend_numberWithBool_(v23, v27, isCompletionCallback);
  v33[7] = @"expirationDate";
  uint64_t v29 = *(void *)(a1 + 64);
  v34[6] = v28;
  v34[7] = v29;
  uint64_t v31 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v30, (uint64_t)v34, v33, 8);
  objc_msgSend_insertOrReplaceInto_values_(v5, v32, @"OperationInfo", v31);
}

uint64_t sub_1C4F64030(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__lockedArchiveCallback_forOperationID_, *(void *)(a1 + 40));
}

void sub_1C4F640F4(uint64_t a1, const char *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend__locked_operationInfoForID_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
  if (v5)
  {
    uint64_t v6 = objc_msgSend_cacheDelegateQueue(*(void **)(a1 + 32), v3, v4);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4F64284;
    block[3] = &unk_1E64F0120;
    id v7 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v11 = v7;
    id v12 = v5;
    dispatch_sync(v6, block);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v8 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      uint64_t v14 = v9;
      _os_log_error_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_ERROR, "Couldn't find an operation with ID %{public}@ to register a retry", buf, 0xCu);
    }
  }
}

void sub_1C4F64284(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v34 = 0;
  uint64_t v35 = &v34;
  uint64_t v36 = 0x2020000000;
  char v37 = 1;
  uint64_t v4 = objc_msgSend_delegateWrappersByOperationID(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = objc_msgSend_objectForKeyedSubscript_(v4, v5, *(void *)(a1 + 40));

  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  v33[2] = sub_1C4F645B0;
  v33[3] = &unk_1E64F6F20;
  void v33[4] = &v34;
  objc_msgSend_performWithDelegate_(v6, v7, (uint64_t)v33);
  if (*((unsigned char *)v35 + 24))
  {
    id v10 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v8, v9);
    objc_msgSend_timeIntervalSince1970(v10, v11, v12);
    uint64_t v14 = v13;

    uint64_t v16 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 48), v15, @"retryNumber");
    uint64_t v19 = objc_msgSend_integerValue(v16, v17, v18);

    uint64_t v20 = v19 + 1;
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v21 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v22 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)long long v39 = v20;
      *(_WORD *)&void v39[4] = 2114;
      *(void *)&v39[6] = v22;
      _os_log_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_INFO, "Registering retry number %d for operation %{public}@", buf, 0x12u);
    }
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = sub_1C4F645C4;
    v28[3] = &unk_1E64F6F48;
    uint64_t v23 = *(void **)(a1 + 32);
    id v29 = *(id *)(a1 + 40);
    id v30 = *(id *)(a1 + 48);
    uint64_t v31 = v14;
    uint64_t v32 = v20;
    id v25 = (id)objc_msgSend_performDatabaseOperation_(v23, v24, (uint64_t)v28);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v26 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v27 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      *(void *)long long v39 = v27;
      _os_log_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_INFO, "Not registering a retry for operation %{public}@ since we have an interested delegate", buf, 0xCu);
    }
  }

  _Block_object_dispose(&v34, 8);
}

void sub_1C4F64588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F645B0(uint64_t result, uint64_t a2)
{
  if (a2) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
  return result;
}

void sub_1C4F645C4(uint64_t a1, void *a2)
{
  v28[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(a1 + 40);
  v28[0] = *(void *)(a1 + 32);
  v27[0] = @"operationID";
  v27[1] = @"applicationID";
  id v4 = a2;
  uint64_t v6 = objc_msgSend_objectForKeyedSubscript_(v3, v5, @"applicationID");
  v28[1] = v6;
  v27[2] = @"personaID";
  uint64_t v8 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v7, @"personaID");
  id v10 = (void *)v8;
  if (v8) {
    id v11 = (__CFString *)v8;
  }
  else {
    id v11 = &stru_1F2044F30;
  }
  v28[2] = v11;
  v27[3] = @"containerID";
  uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v9, @"containerID");
  v28[3] = v12;
  void v27[4] = @"accountID";
  uint64_t v14 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v13, @"accountID");
  uint64_t v16 = (void *)v14;
  if (v14) {
    uint64_t v17 = (__CFString *)v14;
  }
  else {
    uint64_t v17 = &stru_1F2044F30;
  }
  void v28[4] = v17;
  v27[5] = @"operationInfo";
  uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v15, @"operationInfo");
  v28[5] = v18;
  v27[6] = @"lastAttemptDate";
  uint64_t v21 = objc_msgSend_numberWithDouble_(MEMORY[0x1E4F28ED0], v19, v20, *(double *)(a1 + 48));
  v28[6] = v21;
  v27[7] = @"retryNumber";
  uint64_t v23 = objc_msgSend_numberWithInteger_(MEMORY[0x1E4F28ED0], v22, *(void *)(a1 + 56));
  v28[7] = v23;
  id v25 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v24, (uint64_t)v28, v27, 8);
  objc_msgSend_insertOrReplaceInto_values_(v4, v26, @"OperationInfo", v25);
}

void sub_1C4F649B4(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_defaultContext(CKDLogicalDeviceContext, a2, a3);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = objc_msgSend_operationInfoCache(v7, v3, v4);
  objc_msgSend_expungeOperationInfoForDeletedAccountID_(v5, v6, 0);
}

void sub_1C4F64D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4F64D40(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v6 = objc_msgSend_error(v3, v4, v5);

  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v9 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = v9;
      uint64_t v27 = objc_msgSend_error(v3, v25, v26);
      int v28 = 138412290;
      id v29 = v27;
      _os_log_error_impl(&dword_1C4CFF000, v24, OS_LOG_TYPE_ERROR, "Error fetching configuration from the server: %@", (uint8_t *)&v28, 0xCu);
    }
    uint64_t v12 = objc_msgSend_error(v3, v10, v11);
    objc_msgSend_finishWithError_(WeakRetained, v13, (uint64_t)v12);
  }
  else
  {
    uint64_t v14 = objc_msgSend_configuration(v3, v7, v8);

    if (v14)
    {
      uint64_t v17 = objc_msgSend_configuration(v3, v15, v16);
      objc_msgSend_setConfiguration_(WeakRetained, v18, (uint64_t)v17);

      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v19 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = v19;
        uint64_t v23 = objc_msgSend_configuration(WeakRetained, v21, v22);
        int v28 = 138412290;
        id v29 = v23;
        _os_log_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_INFO, "Fetched configuration from the server: %@", (uint8_t *)&v28, 0xCu);
      }
    }
    objc_msgSend_finishWithError_(WeakRetained, v15, 0);
  }
}

void sub_1C4F6506C()
{
  id v0 = (void *)qword_1EBBCFFB8;
  qword_1EBBCFFB8 = (uint64_t)&unk_1F20AC168;
}

uint64_t sub_1C4F651BC(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPTokenRegistrationBody);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (sub_1C4E80684((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4F65720(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v17 = objc_alloc_init(CKDPListPosition);
        uint64_t v18 = 16;
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
          continue;
        }
        uint64_t v17 = objc_alloc_init(CKDPListPosition);
        uint64_t v18 = 8;
      }
      objc_storeStrong((id *)(a1 + v18), v17);
      if (!PBReaderPlaceMark() || (sub_1C4F2ACAC((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id sub_1C4F66268(uint64_t a1, void *a2)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v6 = objc_msgSend_configurationsByRecordZoneID(*(void **)(a1 + 32), v4, v5);
  char v8 = objc_msgSend_objectForKeyedSubscript_(v6, v7, (uint64_t)v3);

  unsigned int v9 = *(void **)(a1 + 32);
  uint64_t v12 = objc_msgSend_operationType(v9, v10, v11);
  uint64_t v14 = objc_msgSend_operationRequestWithType_(v9, v13, v12);
  int v15 = objc_opt_new();
  objc_msgSend_setFetchArchivedRecordsRequest_(v14, v16, (uint64_t)v15);

  uint64_t v19 = objc_msgSend_previousServerChangeToken(v8, v17, v18);
  uint64_t v22 = objc_msgSend_data(v19, v20, v21);
  id v25 = objc_msgSend_fetchArchivedRecordsRequest(v14, v23, v24);
  objc_msgSend_setArchiveContinuationToken_(v25, v26, (uint64_t)v22);

  id v29 = objc_msgSend_translator(*(void **)(a1 + 32), v27, v28);
  uint64_t v31 = objc_msgSend_pRecordZoneIdentifierFromRecordZoneID_(v29, v30, (uint64_t)v3);
  uint64_t v34 = objc_msgSend_fetchArchivedRecordsRequest(v14, v32, v33);
  objc_msgSend_setZoneIdentifier_(v34, v35, (uint64_t)v31);

  uint64_t v38 = objc_msgSend_fetchArchivedRecordsRequest(v14, v36, v37);
  objc_msgSend_setNewestFirst_(v38, v39, 1);

  long long v42 = objc_msgSend_desiredAssetKeys(*(void **)(a1 + 32), v40, v41);
  uint64_t v45 = objc_msgSend_count(v42, v43, v44);

  if (v45)
  {
    __int16 v110 = v8;
    uint64_t v48 = objc_opt_new();
    uint64_t v51 = objc_msgSend_fetchArchivedRecordsRequest(v14, v49, v50);
    objc_msgSend_setAssetsToDownload_(v51, v52, (uint64_t)v48);

    unint64_t v53 = objc_opt_new();
    unsigned int v56 = objc_msgSend_fetchArchivedRecordsRequest(v14, v54, v55);
    uint64_t v59 = objc_msgSend_assetsToDownload(v56, v57, v58);
    objc_msgSend_setAssetFields_(v59, v60, (uint64_t)v53);

    long long v113 = 0u;
    long long v114 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    uint64_t v109 = a1;
    uint64_t v63 = objc_msgSend_desiredAssetKeys(*(void **)(a1 + 32), v61, v62);
    uint64_t v65 = objc_msgSend_countByEnumeratingWithState_objects_count_(v63, v64, (uint64_t)&v111, v115, 16);
    if (v65)
    {
      uint64_t v66 = v65;
      uint64_t v67 = *(void *)v112;
      do
      {
        for (uint64_t i = 0; i != v66; ++i)
        {
          if (*(void *)v112 != v67) {
            objc_enumerationMutation(v63);
          }
          uint64_t v69 = *(void *)(*((void *)&v111 + 1) + 8 * i);
          unint64_t v70 = objc_opt_new();
          objc_msgSend_setName_(v70, v71, v69);
          unsigned int v74 = objc_msgSend_fetchArchivedRecordsRequest(v14, v72, v73);
          unint64_t v77 = objc_msgSend_assetsToDownload(v74, v75, v76);
          unsigned int v80 = objc_msgSend_assetFields(v77, v78, v79);
          objc_msgSend_addFields_(v80, v81, (uint64_t)v70);
        }
        uint64_t v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(v63, v82, (uint64_t)&v111, v115, 16);
      }
      while (v66);
    }

    char v8 = v110;
    a1 = v109;
  }
  else if (objc_msgSend_shouldFetchAssetContent(*(void **)(a1 + 32), v46, v47))
  {
    char v85 = objc_opt_new();
    long long v88 = objc_msgSend_fetchArchivedRecordsRequest(v14, v86, v87);
    objc_msgSend_setAssetsToDownload_(v88, v89, (uint64_t)v85);

    uint64_t AssetContent = objc_msgSend_shouldFetchAssetContent(*(void **)(a1 + 32), v90, v91);
    uint64_t v95 = objc_msgSend_fetchArchivedRecordsRequest(v14, v93, v94);
    id v98 = objc_msgSend_assetsToDownload(v95, v96, v97);
    objc_msgSend_setAllAssets_(v98, v99, AssetContent);
  }
  uint64_t v100 = objc_msgSend_zoneIDsByRequestOperationUUID(*(void **)(a1 + 32), v83, v84);
  uint64_t v103 = objc_msgSend_request(v14, v101, v102);
  __int16 v106 = objc_msgSend_operationUUID(v103, v104, v105);
  objc_msgSend_setObject_forKeyedSubscript_(v100, v107, (uint64_t)v3, v106);

  return v14;
}

void sub_1C4F67320(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F674C0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v8 = a3;
  if (v8)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unsigned int v9 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void **)(a1 + 32);
      uint64_t v19 = v9;
      uint64_t v22 = objc_msgSend_recordID(v18, v20, v21);
      *(_DWORD *)buf = 138412546;
      id v25 = v22;
      __int16 v26 = 2112;
      id v27 = v8;
      _os_log_debug_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_DEBUG, "Error fetching PCS data from the database for %@: %@", buf, 0x16u);
    }
    uint64_t v12 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v10, v11);
    dispatch_group_leave(v12);
  }
  else
  {
    char v13 = objc_msgSend_recordID(*(void **)(a1 + 32), v6, v7);
    uint64_t v16 = objc_msgSend_databaseScope(*(void **)(a1 + 32), v14, v15);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = sub_1C4F67690;
    v23[3] = &unk_1E64F6F70;
    void v23[4] = *(void *)(a1 + 32);
    objc_msgSend_fetchPCSDataForRecordWithID_databaseScope_withCompletionHandler_(v5, v17, (uint64_t)v13, v16, v23);
  }
}

void sub_1C4F67690(uint64_t a1, void *a2, void *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  unsigned int v9 = v6;
  if (v5)
  {
    if ((objc_msgSend_fetchOptions(*(void **)(a1 + 32), v7, v8) & 4) == 0
      || (objc_msgSend_chainPCSData(v5, v10, v11),
          uint64_t v12 = objc_claimAutoreleasedReturnValue(),
          v12,
          v12))
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      char v13 = (void *)*MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v37 = *(void **)(a1 + 32);
        uint64_t v38 = v13;
        uint64_t v41 = objc_msgSend_recordID(v37, v39, v40);
        *(_DWORD *)long long v42 = 138412290;
        *(void *)&v42[4] = v41;
        _os_log_debug_impl(&dword_1C4CFF000, v38, OS_LOG_TYPE_DEBUG, "PCS data was fetched from the database for record %@", v42, 0xCu);
      }
      objc_msgSend_setWasFetchedFromCache_(*(void **)(a1 + 32), v14, 1);
      objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), v15, (uint64_t)v5, 0);
      goto LABEL_24;
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v32 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v33 = *(void **)(a1 + 32);
      uint64_t v21 = v32;
      uint64_t v24 = objc_msgSend_recordID(v33, v34, v35);
      *(_DWORD *)long long v42 = 138412290;
      *(void *)&v42[4] = v24;
      id v25 = "PCS data was found in the database, but it didn't have the requested chain PCS. Fetching PCS data from the s"
            "erver for record %@.";
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v18 = (void *)*MEMORY[0x1E4F1A548];
    if (v6)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v18);
      }
      uint64_t v19 = (void *)*MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = *(void **)(a1 + 32);
        uint64_t v21 = v19;
        uint64_t v24 = objc_msgSend_recordID(v20, v22, v23);
        *(_DWORD *)long long v42 = 138412546;
        *(void *)&v42[4] = v24;
        *(_WORD *)&v42[12] = 2112;
        *(void *)&v42[14] = v9;
        id v25 = "Error fetching PCS data from the database for %@: %@";
        __int16 v26 = v21;
        uint32_t v27 = 22;
LABEL_23:
        _os_log_debug_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_DEBUG, v25, v42, v27);
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v18);
      }
      uint64_t v28 = (void *)*MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
      {
        id v29 = *(void **)(a1 + 32);
        uint64_t v21 = v28;
        uint64_t v24 = objc_msgSend_recordID(v29, v30, v31);
        *(_DWORD *)long long v42 = 138412290;
        *(void *)&v42[4] = v24;
        id v25 = "No PCS data was found in the database for record %@";
LABEL_22:
        __int16 v26 = v21;
        uint32_t v27 = 12;
        goto LABEL_23;
      }
    }
  }
LABEL_24:
  uint64_t v36 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v16, v17, *(_OWORD *)v42, *(void *)&v42[16], v43);
  dispatch_group_leave(v36);
}

void sub_1C4F67AD0(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v12 = v9;
  if (v7 && !v9)
  {
    char v13 = objc_msgSend_recordType(v7, v10, v11);
    objc_msgSend_setServerRecordType_(*(void **)(a1 + 32), v14, (uint64_t)v13);
  }
  uint64_t v15 = objc_msgSend_protectionData(v7, v10, v11);
  if (v15)
  {

LABEL_7:
    uint64_t v21 = objc_msgSend_dataWithRecord_(CKDRecordPCSData, v18, (uint64_t)v7);
    objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), v22, (uint64_t)v21, v12);
    goto LABEL_8;
  }
  uint64_t v19 = objc_msgSend_zoneishKeyID(v7, v16, v17);

  if (v19) {
    goto LABEL_7;
  }
  if (v12)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    __int16 v26 = *MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      int v28 = 138412290;
      id v29 = v12;
      _os_log_debug_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_DEBUG, "Error fetching PCS data from the server: %@", (uint8_t *)&v28, 0xCu);
    }
  }
  else if ((objc_msgSend_fetchOptions(*(void **)(a1 + 32), v18, v20) & 4) == 0)
  {
    objc_msgSend_setServerRecordHasNoProtectionData_(*(void **)(a1 + 32), v27, 1);
  }
  uint64_t v21 = 0;
  objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), v27, 0, v12);
LABEL_8:
  id v25 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v23, v24);
  dispatch_group_leave(v25);
}

void sub_1C4F67F24(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1C4F6808C;
  v8[3] = &unk_1E64F3398;
  objc_copyWeak(&v10, &location);
  id v9 = *(id *)(a1 + 40);
  objc_msgSend_setSaveCompletionBlock_(v3, v4, (uint64_t)v8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1C4F68294;
  v6[3] = &unk_1E64F09E0;
  objc_copyWeak(&v7, &location);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)v6);
  objc_destroyWeak(&v7);

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void sub_1C4F68060(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4F6808C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  id v8 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v10 = (void *)*MEMORY[0x1E4F1A548];
  if (v8)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v10);
    }
    uint64_t v11 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      int v26 = 138412290;
      id v27 = v8;
      _os_log_error_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_ERROR, "Got an error trying to save parent chain PCS data: %@", (uint8_t *)&v26, 0xCu);
    }
    uint64_t v14 = objc_msgSend_fetchError(WeakRetained, v12, v13);

    if (!v14) {
      objc_msgSend_setFetchError_(WeakRetained, v15, (uint64_t)v8);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v10);
    }
    uint64_t v16 = *MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      id v25 = *(void **)(a1 + 32);
      int v26 = 138412290;
      id v27 = v25;
      _os_log_debug_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEBUG, "Successfully saved chain PCS data on record %@", (uint8_t *)&v26, 0xCu);
    }
    uint64_t v19 = objc_msgSend_protectionData(v7, v17, v18);

    if (v19)
    {
      objc_msgSend_setRecordPCSData_(WeakRetained, v20, 0);
      objc_msgSend_setDidFetchData_(WeakRetained, v21, 0);
      uint64_t v23 = objc_msgSend_dataWithRecord_(CKDRecordPCSData, v22, (uint64_t)v7);
      objc_msgSend__handlePCSDataFetched_withError_(WeakRetained, v24, (uint64_t)v23, 0);
    }
  }
}

void sub_1C4F68294(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  dispatch_group_leave(v3);
}

void sub_1C4F685E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F68614(uint64_t a1, void *a2, void *a3)
{
  id v47 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!objc_msgSend_pcs(v47, v7, v8))
  {
    uint64_t v32 = objc_msgSend_domain(v5, v9, v10);
    uint64_t v33 = *MEMORY[0x1E4F19DD8];
    if (objc_msgSend_isEqualToString_(v32, v34, *MEMORY[0x1E4F19DD8]))
    {
      uint64_t v37 = objc_msgSend_code(v5, v35, v36);

      if (v37 == 5007)
      {
        uint64_t v40 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v38, v33, 5010, v5, @"PCS fetch requested local cache only.");
        objc_msgSend_setFetchError_(WeakRetained, v41, (uint64_t)v40);
LABEL_11:

        goto LABEL_12;
      }
    }
    else
    {
    }
    long long v42 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v40 = objc_msgSend_recordID(WeakRetained, v38, v39);
    uint64_t v44 = objc_msgSend_errorWithDomain_code_error_format_(v42, v43, v33, 2003, v5, @"Couldn't fetch zone PCS for record %@ from the server: %@", v40, v5);
    objc_msgSend_setFetchError_(WeakRetained, v45, (uint64_t)v44);

    goto LABEL_11;
  }
  uint64_t v11 = objc_msgSend_recordPCSData(WeakRetained, v9, v10);
  objc_msgSend_setZonePCSData_(v11, v12, (uint64_t)v47);

  uint64_t v15 = objc_msgSend_recordPCSData(WeakRetained, v13, v14);
  uint64_t v18 = objc_msgSend_zoneishPublicKeyID(v15, v16, v17);
  if (!v18)
  {

    goto LABEL_13;
  }
  uint64_t v21 = (void *)v18;
  uint64_t v22 = objc_msgSend_zoneishPCS(v47, v19, v20);

  if (v22) {
    goto LABEL_13;
  }
  id v25 = (void *)MEMORY[0x1E4F1A280];
  uint64_t v26 = *MEMORY[0x1E4F19DD8];
  id v27 = objc_msgSend_recordID(WeakRetained, v23, v24);
  id v29 = objc_msgSend_errorWithDomain_code_error_format_(v25, v28, v26, 2003, v5, @"Couldn't fetch record PCS from zone for record %@ from the server: %@", v27, v5);
  objc_msgSend_setFetchError_(WeakRetained, v30, (uint64_t)v29);

LABEL_12:
  objc_msgSend_setShouldRetry_(WeakRetained, v31, 0);
LABEL_13:
  id v46 = objc_msgSend_stateTransitionGroup(WeakRetained, v23, v24);
  dispatch_group_leave(v46);
}

void sub_1C4F6912C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 168), 8);
  objc_destroyWeak((id *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_1C4F691B4(uint64_t a1, void *a2, void *a3)
{
  id v21 = a2;
  id v5 = a3;
  if (objc_msgSend_pcs(v21, v6, v7))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    uint64_t v13 = objc_msgSend_recordPCSData(WeakRetained, v11, v12);
    objc_msgSend_setParentPCSData_(v13, v14, (uint64_t)v21);

LABEL_6:
    goto LABEL_7;
  }
  id WeakRetained = objc_msgSend_domain(v5, v8, v9);
  if (!objc_msgSend_isEqualToString_(WeakRetained, v15, *MEMORY[0x1E4F19DD8])) {
    goto LABEL_6;
  }
  if (objc_msgSend_code(v5, v16, v17) == 5007)
  {
  }
  else
  {
    uint64_t v20 = objc_msgSend_code(v5, v18, v19);

    if (v20 != 5010) {
      goto LABEL_7;
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
LABEL_7:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4F692C0(uint64_t a1, void *a2, void *a3)
{
  id v21 = a2;
  id v5 = a3;
  if (objc_msgSend_pcs(v21, v6, v7))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    uint64_t v13 = objc_msgSend_recordPCSData(WeakRetained, v11, v12);
    objc_msgSend_setSharePCSData_(v13, v14, (uint64_t)v21);

LABEL_6:
    goto LABEL_7;
  }
  id WeakRetained = objc_msgSend_domain(v5, v8, v9);
  if (!objc_msgSend_isEqualToString_(WeakRetained, v15, *MEMORY[0x1E4F19DD8])) {
    goto LABEL_6;
  }
  if (objc_msgSend_code(v5, v16, v17) == 5007)
  {
  }
  else
  {
    uint64_t v20 = objc_msgSend_code(v5, v18, v19);

    if (v20 != 5010) {
      goto LABEL_7;
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
LABEL_7:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4F693CC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v10 = objc_msgSend_shareID(v5, v8, v9);

  if (v10)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v13 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v43 = *(void **)(a1 + 32);
      uint64_t v44 = v13;
      id v47 = objc_msgSend_recordID(v43, v45, v46);
      uint64_t v48 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      uint64_t v50 = v47;
      __int16 v51 = 2112;
      uint64_t v52 = v48;
      _os_log_debug_impl(&dword_1C4CFF000, v44, OS_LOG_TYPE_DEBUG, "Record %@ is in shared zone %@. Using zone PCS data to decrypt it.", buf, 0x16u);
    }
  }
  if (!objc_msgSend_pcs(v5, v11, v12))
  {
    uint64_t v20 = objc_msgSend_domain(v6, v14, v15);
    if (objc_msgSend_isEqualToString_(v20, v37, *MEMORY[0x1E4F19DD8]))
    {
      if (objc_msgSend_code(v6, v38, v39) == 5007)
      {
      }
      else
      {
        uint64_t v42 = objc_msgSend_code(v6, v40, v41);

        if (v42 != 5010) {
          goto LABEL_16;
        }
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  uint64_t v16 = objc_msgSend_recordPCSData(WeakRetained, v14, v15);
  objc_msgSend_setZonePCSData_(v16, v17, (uint64_t)v5);

  uint64_t v20 = objc_msgSend_recordPCSData(WeakRetained, v18, v19);
  uint64_t v23 = objc_msgSend_zoneishPublicKeyID(v20, v21, v22);
  if (!v23)
  {
LABEL_13:

    goto LABEL_16;
  }
  uint64_t v26 = (void *)v23;
  uint64_t v27 = objc_msgSend_zoneishPCS(v5, v24, v25);

  if (!v27)
  {
    uint64_t v30 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v31 = *MEMORY[0x1E4F19DD8];
    uint64_t v32 = objc_msgSend_recordID(WeakRetained, v28, v29);
    uint64_t v34 = objc_msgSend_errorWithDomain_code_error_format_(v30, v33, v31, 2003, v6, @"Couldn't fetch zoneish PCS from zone for record %@ from the server: %@", v32, v6);
    objc_msgSend_setFetchError_(WeakRetained, v35, (uint64_t)v34);

    objc_msgSend_setShouldRetry_(WeakRetained, v36, 0);
  }
LABEL_16:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1C4F69680(uint64_t a1)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v3 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    unint64_t v70 = v3;
    uint64_t v73 = objc_msgSend_recordID(WeakRetained, v71, v72);
    *(_DWORD *)buf = 138412290;
    uint64_t v87 = v73;
    _os_log_debug_impl(&dword_1C4CFF000, v70, OS_LOG_TYPE_DEBUG, "All PCS fetches for shared record %@ have finished.", buf, 0xCu);
  }
  id v6 = objc_msgSend_recordPCSData(WeakRetained, v4, v5);
  uint64_t v11 = objc_msgSend_parentPCSData(v6, v7, v8);
  if (v11) {
    goto LABEL_8;
  }
  uint64_t v11 = objc_msgSend_recordPCSData(WeakRetained, v9, v10);
  uint64_t v14 = objc_msgSend_sharePCSData(v11, v12, v13);
  if (v14)
  {

LABEL_8:
    goto LABEL_9;
  }
  char v60 = objc_msgSend_recordPCSData(WeakRetained, v15, v16);
  uint64_t v63 = objc_msgSend_zonePCSData(v60, v61, v62);

  if (!v63)
  {
    unint64_t v64 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v65 = *MEMORY[0x1E4F19DD8];
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      uint64_t v66 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v17, *MEMORY[0x1E4F19DD8], 5010, @"PCS fetch requested local cache only");
      objc_msgSend_setFetchError_(WeakRetained, v67, (uint64_t)v66);
    }
    else
    {
      uint64_t v66 = objc_msgSend_recordPCSData(WeakRetained, v17, v18);
      uint64_t v76 = objc_msgSend_parentID(v66, v74, v75);
      uint64_t v77 = *(void *)(a1 + 32);
      uint64_t v78 = *(void *)(a1 + 40);
      uint64_t v81 = objc_msgSend_recordID(WeakRetained, v79, v80);
      char v83 = objc_msgSend_errorWithDomain_code_format_(v64, v82, v65, 2003, @"Couldn't fetch parent PCS (%@) or share PCS (%@) or any shared zone PCS (%@) for record %@ from the server", v76, v77, v78, v81);
      objc_msgSend_setFetchError_(WeakRetained, v84, (uint64_t)v83);
    }
    objc_msgSend_setShouldRetry_(WeakRetained, v85, 0);
    goto LABEL_16;
  }
LABEL_9:
  if ((objc_msgSend_fetchOptions(WeakRetained, v17, v18) & 0x10) != 0)
  {
    id v21 = objc_msgSend_recordPCSData(WeakRetained, v19, v20);
    uint64_t v24 = objc_msgSend_sharePCSData(v21, v22, v23);

    uint64_t v27 = objc_msgSend_recordPCSData(WeakRetained, v25, v26);
    uint64_t v30 = v27;
    if (v24)
    {
      uint64_t v31 = objc_msgSend_sharePCSData(v27, v28, v29);
      uint64_t v34 = objc_msgSend_myParticipantPCS(v31, v32, v33);
    }
    else
    {
      uint64_t v40 = objc_msgSend_zonePCSData(v27, v28, v29);
      uint64_t v43 = objc_msgSend_shareID(v40, v41, v42);

      uint64_t v46 = objc_msgSend_recordPCSData(WeakRetained, v44, v45);
      uint64_t v30 = v46;
      if (v43)
      {
        uint64_t v31 = objc_msgSend_zonePCSData(v46, v47, v48);
        __int16 v51 = objc_msgSend_sharePCSData(v31, v49, v50);
        uint64_t v54 = objc_msgSend_myParticipantPCS(v51, v52, v53);
        uint64_t v57 = objc_msgSend_recordPCSData(WeakRetained, v55, v56);
        objc_msgSend_setSigningPCS_(v57, v58, v54);

        goto LABEL_15;
      }
      uint64_t v31 = objc_msgSend_parentPCSData(v46, v47, v48);
      uint64_t v34 = objc_msgSend_signingPCS(v31, v68, v69);
    }
    uint64_t v37 = v34;
    uint64_t v38 = objc_msgSend_recordPCSData(WeakRetained, v35, v36);
    objc_msgSend_setSigningPCS_(v38, v39, v37);

LABEL_15:
  }
LABEL_16:
  uint64_t v59 = objc_msgSend_stateTransitionGroup(WeakRetained, v19, v20);
  dispatch_group_leave(v59);
}

void sub_1C4F6B11C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 144));
  _Unwind_Resume(a1);
}

void sub_1C4F6B19C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  dispatch_group_leave(v3);
}

void sub_1C4F6B1F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  dispatch_group_leave(v3);
}

void sub_1C4F6B24C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  dispatch_group_leave(v3);
}

void sub_1C4F6B2A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  dispatch_group_leave(v3);
}

void sub_1C4F6B4F0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4F6B518(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  dispatch_group_leave(v3);
}

void sub_1C4F6B570(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  dispatch_group_leave(v3);
}

uint64_t sub_1C4F6B934(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_33;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_35:
        *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v20;
      }
      else if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(MEMORY[0x1E4F19F30]);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordZoneIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4F6C254(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(CKCDPCodeServiceResponseAttestationResponseAttestation);
        objc_msgSend_addAttestations_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1C4FB5D9C((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4F6CBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_31:
        *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4F6E2D0(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_performRequest(*(void **)(a1 + 32), a2, a3);
}

uint64_t sub_1C4F6E8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 16) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        unsigned int v18 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4F6FDC0()
{
  id v0 = (void *)qword_1EBBCFFC8;
  qword_1EBBCFFC8 = (uint64_t)&unk_1F20AC190;
}

uint64_t sub_1C4F6FF10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 3)
      {
        uint64_t v17 = objc_alloc_init(CKDPSignedVersionedBlob);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (sub_1C4E9180C((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4F70C24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 64) |= 4u;
        while (1)
        {
          uint64_t v21 = *v3;
          uint64_t v22 = *(void *)(a2 + v21);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0) {
            goto LABEL_55;
          }
          v18 += 7;
          BOOL v15 = v19++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_57;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_55:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_57:
        *(_DWORD *)(a1 + 56) = v20;
        goto LABEL_68;
      case 2u:
        uint64_t v26 = PBReaderReadData();
        uint64_t v27 = 24;
        goto LABEL_47;
      case 3u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        *(unsigned char *)(a1 + 64) |= 8u;
        while (2)
        {
          uint64_t v31 = *v3;
          uint64_t v32 = *(void *)(a2 + v31);
          unint64_t v33 = v32 + 1;
          if (v32 == -1 || v33 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if (v34 < 0)
            {
              v28 += 7;
              BOOL v15 = v29++ >= 9;
              if (v15)
              {
                uint64_t v30 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v30 = 0;
        }
LABEL_61:
        *(unsigned char *)(a1 + 60) = v30 != 0;
        goto LABEL_68;
      case 4u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        *(unsigned char *)(a1 + 64) |= 2u;
        while (2)
        {
          uint64_t v38 = *v3;
          uint64_t v39 = *(void *)(a2 + v38);
          unint64_t v40 = v39 + 1;
          if (v39 == -1 || v40 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v39);
            *(void *)(a2 + v3_Block_object_dispose(&STACK[0x3F0], 8) = v40;
            v37 |= (unint64_t)(v41 & 0x7F) << v35;
            if (v41 < 0)
            {
              v35 += 7;
              BOOL v15 = v36++ >= 9;
              if (v15)
              {
                uint64_t v37 = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v37 = 0;
        }
LABEL_65:
        *(void *)(a1 + 16) = v37;
        goto LABEL_68;
      case 5u:
        *(unsigned char *)(a1 + 64) |= 1u;
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v44 = *(void *)(*(void *)(a2 + *v7) + v43);
          *(void *)(a2 + v42) = v43 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v44 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v44;
        goto LABEL_68;
      case 6u:
        uint64_t v26 = PBReaderReadString();
        uint64_t v27 = 48;
LABEL_47:
        uint64_t v45 = *(void **)(a1 + v27);
        *(void *)(a1 + v27) = v26;

        goto LABEL_68;
      case 7u:
        uint64_t v46 = objc_alloc_init(CKDPConfigurationField);
        objc_msgSend_addFieldValues_((void *)a1, v47, (uint64_t)v46);
        if (!PBReaderPlaceMark() || (sub_1C4DF6328(v46, a2) & 1) == 0) {
          goto LABEL_70;
        }
        goto LABEL_53;
      case 8u:
        uint64_t v46 = objc_alloc_init(CKDPConfigurationFieldValue);
        objc_msgSend_addListValues_((void *)a1, v48, (uint64_t)v46);
        if PBReaderPlaceMark() && (sub_1C4F70C24(v46, a2))
        {
LABEL_53:
          PBReaderRecallMark();

LABEL_68:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_70:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_68;
    }
  }
}

uint64_t sub_1C4F71EF4()
{
  qword_1EBBCFFD8 = objc_alloc_init(CKDAccountStore);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4F72110(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F7219C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4F72228(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F7223C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4F7224C(uint64_t a1)
{
}

uint64_t sub_1C4F72254(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v6 = objc_msgSend_accountStore(*(void **)(a1 + 32), v3, v4);
    uint64_t v9 = objc_msgSend_aa_primaryAppleAccount(v6, v7, v8);
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }
  uint64_t v12 = objc_msgSend_identifier(v5, v3, v4);
  BOOL v15 = objc_msgSend_identifier(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v13, v14);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v12, v16, (uint64_t)v15);

  return isEqualToString;
}

uint64_t sub_1C4F72498(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_isProvisionedForDataclass_(v3, v4, *MEMORY[0x1E4F17A78]))
  {
    uint64_t v7 = objc_msgSend_personaIdentifier(v3, v5, v6);
    uint64_t isEqualToString = objc_msgSend_isEqualToString_(v7, v8, *(void *)(a1 + 32));
  }
  else
  {
    uint64_t isEqualToString = 0;
  }

  return isEqualToString;
}

id sub_1C4F7250C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_accountStore(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_aa_appleAccounts(v4, v5, v6);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = sub_1C4F725E0;
  v11[3] = &unk_1E64F7148;
  id v12 = *(id *)(a1 + 40);
  uint64_t v9 = objc_msgSend_CKFirstObjectPassingTest_(v7, v8, (uint64_t)v11);

  return v9;
}

uint64_t sub_1C4F725E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_isProvisionedForDataclass_(v3, v4, *MEMORY[0x1E4F17A78]))
  {
    uint64_t v7 = objc_msgSend_personaIdentifier(v3, v5, v6);
    uint64_t isEqualToString = objc_msgSend_isEqualToString_(v7, v8, *(void *)(a1 + 32));
  }
  else
  {
    uint64_t isEqualToString = 0;
  }

  return isEqualToString;
}

uint64_t sub_1C4F727E0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_identifier(a2, (const char *)a2, a3);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v4, v5, *(void *)(a1 + 32));

  return isEqualToString;
}

id sub_1C4F72824(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_accountStore(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = objc_msgSend_accountWithIdentifier_(v4, v5, *(void *)(a1 + 40));

  return v6;
}

uint64_t sub_1C4F72A08(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_aa_altDSID(a2, (const char *)a2, a3);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v4, v5, *(void *)(a1 + 32));

  return isEqualToString;
}

id sub_1C4F72A4C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_accountStore(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = objc_msgSend_aa_appleAccountWithAltDSID_(v4, v5, *(void *)(a1 + 40));

  return v6;
}

uint64_t sub_1C4F72AA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4F72B88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F72DA0()
{
  id v0 = (void *)qword_1EBBCFFE8;
  qword_1EBBCFFE8 = (uint64_t)&unk_1F20AC1B8;
}

void sub_1C4F72F70()
{
  id v0 = (void *)qword_1EBBCDEF8;
  qword_1EBBCDEF8 = (uint64_t)&unk_1F20AC1E0;
}

uint64_t sub_1C4F73280(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(CKDPQuery);
        objc_storeStrong((id *)(a1 + 32), v17);
        if PBReaderPlaceMark() && (sub_1C4E929BC((uint64_t)v17, a2)) {
          goto LABEL_40;
        }
        goto LABEL_47;
      case 2u:
        uint64_t v19 = PBReaderReadData();
        uint64_t v20 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v19;

        goto LABEL_45;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 56) |= 1u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_44;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_44:
        *(_DWORD *)(a1 + 24) = v23;
        goto LABEL_45;
      case 4u:
        uint64_t v17 = (CKDPQuery *)objc_alloc_init(MEMORY[0x1E4F19F30]);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordZoneIdentifierReadFrom() & 1) == 0) {
          goto LABEL_47;
        }
        goto LABEL_40;
      case 5u:
        uint64_t v17 = objc_alloc_init(CKDPRequestedFields);
        objc_storeStrong((id *)(a1 + 40), v17);
        if (!PBReaderPlaceMark() || !CKDPRequestedFieldsReadFrom(v17, a2)) {
          goto LABEL_47;
        }
        goto LABEL_40;
      case 6u:
        uint64_t v17 = objc_alloc_init(CKDPAssetsToDownload);
        objc_storeStrong((id *)(a1 + 8), v17);
        if PBReaderPlaceMark() && (sub_1C4FD2BD0((uint64_t)v17, a2))
        {
LABEL_40:
          PBReaderRecallMark();

LABEL_45:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_47:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_45;
    }
  }
}

void sub_1C4F74404(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F75A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void *sub_1C4F75A9C(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1C4F75AC8(uint64_t a1)
{
}

uint64_t sub_1C4F75AD0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4F75AE0(uint64_t a1)
{
}

void sub_1C4F75AE8(uint64_t a1, const char *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = objc_msgSend_objectAtIndex_(*(void **)(a1 + 32), a2, 0);
  objc_msgSend_removeObjectAtIndex_(*(void **)(a1 + 32), v4, 0);
  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
  {
    uint64_t v7 = objc_msgSend_error(v3, v5, v6);
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    unsigned int v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  if (v10)
  {
    (*(void (**)(void))(v10 + 16))();
    uint64_t v11 = *(void *)(*(void *)(a1 + 64) + 8);
    unint64_t v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = 0;
  }
  if (objc_msgSend_count(*(void **)(a1 + 32), v5, v6))
  {
    BOOL v14 = objc_msgSend_objectAtIndex_(*(void **)(a1 + 32), v13, 0);
    uint64_t v17 = objc_msgSend_completionBlock(v14, v15, v16);
    uint64_t v18 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;

    objc_msgSend_setCompletionBlock_(v14, v20, *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40));
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    char v21 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      int v30 = 138412290;
      uint64_t v31 = v14;
      _os_log_debug_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_DEBUG, "Executing chained batched requests, triggering %@", (uint8_t *)&v30, 0xCu);
    }
    objc_msgSend_performRequest_(*(void **)(a1 + 40), v22, (uint64_t)v14);
  }
  else
  {
    uint64_t v23 = (void *)*MEMORY[0x1E4F1A548];
    if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v23);
      }
      uint64_t v24 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        unint64_t v25 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        int v30 = 138412290;
        uint64_t v31 = v25;
        _os_log_error_impl(&dword_1C4CFF000, v24, OS_LOG_TYPE_ERROR, "Fetching public identities failed: %@", (uint8_t *)&v30, 0xCu);
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v23);
      }
      char v26 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v30) = 0;
        _os_log_debug_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_DEBUG, "Fetching public identities completed", (uint8_t *)&v30, 2u);
      }
    }
    uint64_t v27 = *(void *)(*(void *)(a1 + 72) + 8);
    char v28 = *(void **)(v27 + 40);
    *(void *)(v27 + 40) = 0;

    objc_msgSend_finishWithError_(*(void **)(a1 + 48), v29, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
  }
}

void sub_1C4F76090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F760B8(void **a1, void *a2, void *a3, void *a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  unint64_t v12 = v9;
  char v13 = (void *)MEMORY[0x1E4F1A550];
  BOOL v14 = (os_log_t *)MEMORY[0x1E4F1A500];
  if (v8)
  {
    int v15 = (dispatch_block_t *)MEMORY[0x1E4F1A548];
    if (*MEMORY[0x1E4F1A4E0])
    {
      uint64_t v16 = objc_msgSend_unitTestOverrides(a1[4], v10, v11);
      uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(v16, v17, @"GenerateOONPrivateKey");

      if (v18)
      {
        if (*v13 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], *v15);
        }
        uint64_t v19 = *v14;
        if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_DEBUG, "Forcing OON private key generation due to unit test", buf, 2u);
        }
        objc_msgSend_setPublicSharingKey_(v8, v20, 0);
      }
    }
    char v21 = objc_msgSend_publicSharingKey(v8, v10, v11);

    dispatch_block_t v22 = *v15;
    if (v21)
    {
      if (*v13 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v22);
      }
      os_log_t v23 = *v14;
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v58 = v23;
        unsigned int v61 = objc_msgSend_publicSharingKey(v8, v59, v60);
        *(_DWORD *)buf = 138412546;
        id v65 = v8;
        __int16 v66 = 2114;
        uint64_t v67 = v61;
        _os_log_debug_impl(&dword_1C4CFF000, v58, OS_LOG_TYPE_DEBUG, "Saving user identity %@ with publicSharingKey %{public}@", buf, 0x16u);
      }
      objc_msgSend__saveUserIdentity_forLookupInfo_(a1[5], v24, (uint64_t)v8, v7);
    }
    else
    {
      if (*v13 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v22);
      }
      unint64_t v40 = *v14;
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        id v65 = v8;
        _os_log_debug_impl(&dword_1C4CFF000, v40, OS_LOG_TYPE_DEBUG, "Got OON user identity %@", buf, 0xCu);
      }
      id WeakRetained = objc_loadWeakRetained((id *)a1[5] + 1);
      uint64_t v44 = objc_msgSend_container(WeakRetained, v42, v43);
      id v47 = objc_msgSend_pcsManager(v44, v45, v46);
      id v63 = 0;
      uint64_t v49 = objc_msgSend_generateOONPrivateKeyWithError_(v47, v48, (uint64_t)&v63);
      id v50 = v63;

      if (v50)
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], *v15);
        }
        uint64_t v52 = *MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v65 = v50;
          _os_log_error_impl(&dword_1C4CFF000, v52, OS_LOG_TYPE_ERROR, "Error while generating private key for OON user identity: %@", buf, 0xCu);
        }
        uint64_t v54 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v53, *MEMORY[0x1E4F19DD8], 5005, v50, @"Error while generating private key for OON user identity: %@", v8);
        objc_msgSend__receivedUserIdentity_forLookupInfo_error_(a1[5], v55, 0, v7, v54);
      }
      else
      {
        objc_msgSend_setOutOfNetworkPrivateKey_(v8, v51, (uint64_t)v49);
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], *v15);
        }
        uint64_t v56 = *MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          id v65 = v8;
          _os_log_debug_impl(&dword_1C4CFF000, v56, OS_LOG_TYPE_DEBUG, "Generated private key for OON user identity: %@", buf, 0xCu);
        }
        objc_msgSend__saveUserIdentity_forLookupInfo_(a1[5], v57, (uint64_t)v8, v7);
      }
    }
  }
  else
  {
    if (v9 && objc_msgSend_hasError(v9, v10, v11))
    {
      uint64_t v62 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v25 = *MEMORY[0x1E4F19DD8];
      uint64_t v26 = sub_1C4E94D98(v12);
      id v27 = objc_loadWeakRetained(a1 + 6);
      char v28 = sub_1C4E940D0(v27, v12);
      uint64_t v31 = objc_msgSend_error(v12, v29, v30);
      char v34 = objc_msgSend_errorDescription(v31, v32, v33);
      uint64_t v35 = v26;
      BOOL v14 = (os_log_t *)MEMORY[0x1E4F1A500];
      uint64_t v37 = objc_msgSend_errorWithDomain_code_userInfo_format_(v62, v36, v25, v35, v28, @"Error fetching user identity for %@ from server: %@", v7, v34);

      char v13 = (void *)MEMORY[0x1E4F1A550];
    }
    else
    {
      uint64_t v37 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v10, *MEMORY[0x1E4F19DD8], 5000, @"Failed to fetch user identity for %@", v7);
    }
    if (*v13 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v38 = *v14;
    if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412546;
      id v65 = v7;
      __int16 v66 = 2112;
      uint64_t v67 = v37;
      _os_log_debug_impl(&dword_1C4CFF000, v38, OS_LOG_TYPE_DEBUG, "Failed to perform a user identity lookup for lookup info %@: %@", buf, 0x16u);
    }
    objc_msgSend__receivedUserIdentity_forLookupInfo_error_(a1[5], v39, 0, v7, v37);
  }
}

void sub_1C4F77108(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C4F772D0;
  v13[3] = &unk_1E64F7210;
  objc_copyWeak(&v14, &from);
  objc_copyWeak(&v15, &location);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v4, (uint64_t)v13);
  uint64_t v7 = MEMORY[0x1E4F143A8];
  uint64_t v8 = 3221225472;
  id v9 = sub_1C4F77478;
  uint64_t v10 = &unk_1E64F0170;
  objc_copyWeak(&v11, &location);
  objc_copyWeak(&v12, &from);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)&v7);
  objc_msgSend_setFetchOperation_(*(void **)(a1 + 32), v6, (uint64_t)v3, v7, v8, v9, v10);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&v14);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4F77288(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 80));
  objc_destroyWeak((id *)(v5 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4F772D0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = v9;
  if (v7)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v12 = (void *)*MEMORY[0x1E4F1A508];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_ERROR))
    {
      id v14 = v12;
      id v15 = (objc_class *)objc_opt_class();
      uint64_t v16 = NSStringFromClass(v15);
      uint64_t v19 = objc_msgSend_ckShortDescription(WeakRetained, v17, v18);
      int v20 = 138544130;
      char v21 = v16;
      __int16 v22 = 2048;
      id v23 = WeakRetained;
      __int16 v24 = 2114;
      uint64_t v25 = v19;
      __int16 v26 = 2112;
      id v27 = v7;
      _os_log_error_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> could not fetch record with error %@",
        (uint8_t *)&v20,
        0x2Au);
    }
    objc_msgSend_setError_(v11, v13, (uint64_t)v7);
  }
  else
  {
    objc_msgSend_setRecord_(v9, v10, (uint64_t)v6);
  }
}

void sub_1C4F77478(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = objc_msgSend_error(v3, v4, v5);

  id v7 = (void *)*MEMORY[0x1E4F1A548];
  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    uint64_t v8 = (void *)*MEMORY[0x1E4F1A508];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = v8;
      uint64_t v19 = (objc_class *)objc_opt_class();
      int v20 = NSStringFromClass(v19);
      id v23 = objc_msgSend_ckShortDescription(v3, v21, v22);
      __int16 v26 = objc_msgSend_error(v3, v24, v25);
      int v32 = 138544130;
      uint64_t v33 = v20;
      __int16 v34 = 2048;
      id v35 = v3;
      __int16 v36 = 2114;
      uint64_t v37 = v23;
      __int16 v38 = 2112;
      uint64_t v39 = v26;
      _os_log_error_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed fetch record with error %@",
        (uint8_t *)&v32,
        0x2Au);
    }
    id v11 = objc_msgSend_error(v3, v9, v10);
    objc_msgSend_setError_(WeakRetained, v12, (uint64_t)v11);
    goto LABEL_7;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v7);
  }
  id v14 = (void *)*MEMORY[0x1E4F1A508];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_DEBUG))
  {
    id v11 = v14;
    id v27 = (objc_class *)objc_opt_class();
    uint64_t v28 = NSStringFromClass(v27);
    uint64_t v31 = objc_msgSend_ckShortDescription(v3, v29, v30);
    int v32 = 138543874;
    uint64_t v33 = v28;
    __int16 v34 = 2048;
    id v35 = v3;
    __int16 v36 = 2114;
    uint64_t v37 = v31;
    _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed fetch record",
      (uint8_t *)&v32,
      0x20u);

LABEL_7:
  }
  objc_msgSend_setFetchOperation_(WeakRetained, v13, 0);
  uint64_t v17 = objc_msgSend_stateTransitionGroup(WeakRetained, v15, v16);
  dispatch_group_leave(v17);
}

void sub_1C4F778D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  objc_msgSend_setUseEncryption_(v3, v4, 0);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_1C4F77AAC;
  v14[3] = &unk_1E64F7238;
  objc_copyWeak(&v15, &location);
  objc_copyWeak(&v16, &from);
  objc_msgSend_setRecordZoneFetchedProgressBlock_(v3, v5, (uint64_t)v14);
  uint64_t v8 = MEMORY[0x1E4F143A8];
  uint64_t v9 = 3221225472;
  uint64_t v10 = sub_1C4F77C64;
  id v11 = &unk_1E64F0170;
  objc_copyWeak(&v12, &location);
  objc_copyWeak(&v13, &from);
  objc_msgSend_setCompletionBlock_(v3, v6, (uint64_t)&v8);
  objc_msgSend_setZoneFetchOperation_(*(void **)(a1 + 32), v7, (uint64_t)v3, v8, v9, v10, v11);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4F77A5C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 80));
  objc_destroyWeak((id *)(v5 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4F77AAC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v11 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v7 && objc_msgSend_code(v7, v9, v10) != 2036)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v12 = (void *)*MEMORY[0x1E4F1A508];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_ERROR))
    {
      id v14 = v12;
      id v15 = (objc_class *)objc_opt_class();
      id v16 = NSStringFromClass(v15);
      uint64_t v19 = objc_msgSend_ckShortDescription(v11, v17, v18);
      int v20 = 138544130;
      char v21 = v16;
      __int16 v22 = 2048;
      id v23 = v11;
      __int16 v24 = 2114;
      uint64_t v25 = v19;
      __int16 v26 = 2112;
      id v27 = v7;
      _os_log_error_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> could not fetch repair zone with error %@",
        (uint8_t *)&v20,
        0x2Au);
    }
    objc_msgSend_setError_(WeakRetained, v13, (uint64_t)v7);
  }
  else
  {
    objc_msgSend_setRepairZone_(WeakRetained, v9, (uint64_t)v6);
  }
}

void sub_1C4F77C64(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = objc_msgSend_error(v3, v4, v5);

  id v7 = (void *)*MEMORY[0x1E4F1A548];
  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    uint64_t v8 = (void *)*MEMORY[0x1E4F1A508];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = v8;
      uint64_t v19 = (objc_class *)objc_opt_class();
      int v20 = NSStringFromClass(v19);
      id v23 = objc_msgSend_ckShortDescription(v3, v21, v22);
      __int16 v26 = objc_msgSend_error(v3, v24, v25);
      int v32 = 138544130;
      uint64_t v33 = v20;
      __int16 v34 = 2048;
      id v35 = v3;
      __int16 v36 = 2114;
      uint64_t v37 = v23;
      __int16 v38 = 2112;
      uint64_t v39 = v26;
      _os_log_error_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed repair zone fetch with error %@",
        (uint8_t *)&v32,
        0x2Au);
    }
    id v11 = objc_msgSend_error(v3, v9, v10);
    objc_msgSend_setError_(WeakRetained, v12, (uint64_t)v11);
    goto LABEL_7;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v7);
  }
  id v14 = (void *)*MEMORY[0x1E4F1A508];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_DEBUG))
  {
    id v11 = v14;
    id v27 = (objc_class *)objc_opt_class();
    uint64_t v28 = NSStringFromClass(v27);
    uint64_t v31 = objc_msgSend_ckShortDescription(v3, v29, v30);
    int v32 = 138543874;
    uint64_t v33 = v28;
    __int16 v34 = 2048;
    id v35 = v3;
    __int16 v36 = 2114;
    uint64_t v37 = v31;
    _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed repair zone fetch",
      (uint8_t *)&v32,
      0x20u);

LABEL_7:
  }
  objc_msgSend_setZoneFetchOperation_(WeakRetained, v13, 0);
  uint64_t v17 = objc_msgSend_stateTransitionGroup(WeakRetained, v15, v16);
  dispatch_group_leave(v17);
}

void sub_1C4F780E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  int v6 = objc_msgSend_bypassPCSEncryptionForTouchRepairZone(*(void **)(a1 + 32), v4, v5);
  objc_msgSend_setUseEncryption_(v3, v7, v6 ^ 1u);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = sub_1C4F782C4;
  v17[3] = &unk_1E64F7260;
  objc_copyWeak(&v18, &location);
  objc_copyWeak(&v19, &from);
  objc_msgSend_setSaveCompletionBlock_(v3, v8, (uint64_t)v17);
  uint64_t v11 = MEMORY[0x1E4F143A8];
  uint64_t v12 = 3221225472;
  id v13 = sub_1C4F78444;
  id v14 = &unk_1E64F0170;
  objc_copyWeak(&v15, &location);
  objc_copyWeak(&v16, &from);
  objc_msgSend_setCompletionBlock_(v3, v9, (uint64_t)&v11);
  objc_msgSend_setZoneCreateOperation_(*(void **)(a1 + 32), v10, (uint64_t)v3, v11, v12, v13, v14);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&v19);
  objc_destroyWeak(&v18);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4F78274(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 80));
  objc_destroyWeak((id *)(v5 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4F782C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v8 = (void *)*MEMORY[0x1E4F1A508];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = v8;
      uint64_t v11 = (objc_class *)objc_opt_class();
      uint64_t v12 = NSStringFromClass(v11);
      id v15 = objc_msgSend_ckShortDescription(v7, v13, v14);
      int v16 = 138544130;
      uint64_t v17 = v12;
      __int16 v18 = 2048;
      id v19 = v7;
      __int16 v20 = 2114;
      char v21 = v15;
      __int16 v22 = 2112;
      id v23 = v5;
      _os_log_error_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> could not save repair zone with error %@",
        (uint8_t *)&v16,
        0x2Au);
    }
    objc_msgSend_setError_(WeakRetained, v9, (uint64_t)v5);
  }
}

void sub_1C4F78444(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  int v6 = objc_msgSend_error(v3, v4, v5);

  id v7 = (void *)*MEMORY[0x1E4F1A548];
  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    uint64_t v8 = (void *)*MEMORY[0x1E4F1A508];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_ERROR))
    {
      __int16 v18 = v8;
      id v19 = (objc_class *)objc_opt_class();
      __int16 v20 = NSStringFromClass(v19);
      id v23 = objc_msgSend_ckShortDescription(v3, v21, v22);
      __int16 v26 = objc_msgSend_error(v3, v24, v25);
      int v32 = 138544130;
      uint64_t v33 = v20;
      __int16 v34 = 2048;
      id v35 = v3;
      __int16 v36 = 2114;
      uint64_t v37 = v23;
      __int16 v38 = 2112;
      uint64_t v39 = v26;
      _os_log_error_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed repair zone touch with error %@",
        (uint8_t *)&v32,
        0x2Au);
    }
    uint64_t v11 = objc_msgSend_error(v3, v9, v10);
    objc_msgSend_setError_(WeakRetained, v12, (uint64_t)v11);
    goto LABEL_7;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v7);
  }
  uint64_t v14 = (void *)*MEMORY[0x1E4F1A508];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = v14;
    id v27 = (objc_class *)objc_opt_class();
    uint64_t v28 = NSStringFromClass(v27);
    uint64_t v31 = objc_msgSend_ckShortDescription(v3, v29, v30);
    int v32 = 138543874;
    uint64_t v33 = v28;
    __int16 v34 = 2048;
    id v35 = v3;
    __int16 v36 = 2114;
    uint64_t v37 = v31;
    _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed repair zone touch",
      (uint8_t *)&v32,
      0x20u);

LABEL_7:
  }
  objc_msgSend_setZoneCreateOperation_(WeakRetained, v13, 0);
  uint64_t v17 = objc_msgSend_stateTransitionGroup(WeakRetained, v15, v16);
  dispatch_group_leave(v17);
}

id sub_1C4F78B68(uint64_t a1, void *a2)
{
  uint64_t v2 = (objc_class *)MEMORY[0x1E4F19E80];
  id v3 = a2;
  id v4 = [v2 alloc];
  id v7 = objc_msgSend_signature(v3, v5, v6);
  uint64_t v10 = objc_msgSend_referenceSignature(v3, v8, v9);

  uint64_t v12 = objc_msgSend_initWithFileSignature_referenceSignature_assetKey_(v4, v11, (uint64_t)v7, v10, 0);
  return v12;
}

void sub_1C4F78C00(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C4F78DC8;
  v13[3] = &unk_1E64F72A8;
  objc_copyWeak(&v14, &location);
  objc_copyWeak(&v15, &from);
  objc_msgSend_setSaveCompletionBlock_(v3, v4, (uint64_t)v13);
  uint64_t v7 = MEMORY[0x1E4F143A8];
  uint64_t v8 = 3221225472;
  uint64_t v9 = sub_1C4F78F48;
  uint64_t v10 = &unk_1E64F0170;
  objc_copyWeak(&v11, &location);
  objc_copyWeak(&v12, &from);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)&v7);
  objc_msgSend_setCorruptOperation_(*(void **)(a1 + 32), v6, (uint64_t)v3, v7, v8, v9, v10);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&v14);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4F78D80(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 80));
  objc_destroyWeak((id *)(v5 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4F78DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v6 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v9 = (void *)*MEMORY[0x1E4F1A508];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_ERROR))
    {
      id v11 = v9;
      id v12 = (objc_class *)objc_opt_class();
      id v13 = NSStringFromClass(v12);
      uint64_t v16 = objc_msgSend_ckShortDescription(v8, v14, v15);
      int v17 = 138544130;
      __int16 v18 = v13;
      __int16 v19 = 2048;
      id v20 = v8;
      __int16 v21 = 2114;
      uint64_t v22 = v16;
      __int16 v23 = 2112;
      id v24 = v6;
      _os_log_error_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> could not upload corrupted asset with error %@",
        (uint8_t *)&v17,
        0x2Au);
    }
    objc_msgSend_setError_(WeakRetained, v10, (uint64_t)v6);
  }
}

void sub_1C4F78F48(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = objc_msgSend_error(v3, v4, v5);

  uint64_t v7 = (void *)*MEMORY[0x1E4F1A548];
  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    id v8 = (void *)*MEMORY[0x1E4F1A508];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_ERROR))
    {
      __int16 v18 = v8;
      __int16 v19 = (objc_class *)objc_opt_class();
      id v20 = NSStringFromClass(v19);
      __int16 v23 = objc_msgSend_ckShortDescription(v3, v21, v22);
      __int16 v26 = objc_msgSend_error(v3, v24, v25);
      int v32 = 138544130;
      uint64_t v33 = v20;
      __int16 v34 = 2048;
      id v35 = v3;
      __int16 v36 = 2114;
      uint64_t v37 = v23;
      __int16 v38 = 2112;
      uint64_t v39 = v26;
      _os_log_error_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_ERROR, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed uploading corrupted asset with error %@",
        (uint8_t *)&v32,
        0x2Au);
    }
    id v11 = objc_msgSend_error(v3, v9, v10);
    objc_msgSend_setError_(WeakRetained, v12, (uint64_t)v11);
    goto LABEL_7;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v7);
  }
  id v14 = (void *)*MEMORY[0x1E4F1A508];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_DEBUG))
  {
    id v11 = v14;
    id v27 = (objc_class *)objc_opt_class();
    uint64_t v28 = NSStringFromClass(v27);
    uint64_t v31 = objc_msgSend_ckShortDescription(v3, v29, v30);
    int v32 = 138543874;
    uint64_t v33 = v28;
    __int16 v34 = 2048;
    id v35 = v3;
    __int16 v36 = 2114;
    uint64_t v37 = v31;
    _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "Simulate asset corruption operation <%{public}@: %p; %{public}@> completed corrupted asset upload",
      (uint8_t *)&v32,
      0x20u);

LABEL_7:
  }
  objc_msgSend_setCorruptOperation_(WeakRetained, v13, 0);
  int v17 = objc_msgSend_stateTransitionGroup(WeakRetained, v15, v16);
  dispatch_group_leave(v17);
}

void sub_1C4F79910(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [CKDMarkAssetBrokenURLRequest alloc];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v8 = objc_msgSend_writeRepairRecord(*(void **)(a1 + 40), v6, v7);
  uint64_t v10 = objc_msgSend_initWithOperation_assetOrPackageMetadata_writeRepairRecord_(v4, v9, (uint64_t)v3, v5, v8);
  objc_initWeak(&location, *(id *)(a1 + 40));
  objc_initWeak(&v23, v3);
  objc_initWeak(&from, v10);
  objc_msgSend_setUseEncryption_(v3, v11, 0);
  objc_msgSend_setUrlRequest_(v3, v12, (uint64_t)v10);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_1C4F79B50;
  void v19[3] = &unk_1E64F72D0;
  objc_copyWeak(&v20, &location);
  objc_copyWeak(&v21, &from);
  objc_msgSend_setAssetBrokenBlock_(v10, v13, (uint64_t)v19);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = sub_1C4F79F30;
  v16[3] = &unk_1E64F0170;
  objc_copyWeak(&v17, &location);
  objc_copyWeak(&v18, &v23);
  objc_msgSend_setCompletionBlock_(v3, v14, (uint64_t)v16);
  objc_msgSend_setWrapperOperation_(*(void **)(a1 + 40), v15, (uint64_t)v3);
  objc_destroyWeak(&v18);
  objc_destroyWeak(&v17);
  objc_destroyWeak(&v21);
  objc_destroyWeak(&v20);
  objc_destroyWeak(&from);
  objc_destroyWeak(&v23);
  objc_destroyWeak(&location);
}

void sub_1C4F79AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v26 - 96));
  objc_destroyWeak((id *)(v26 - 88));
  _Unwind_Resume(a1);
}

void sub_1C4F79B50(uint64_t a1, void *a2, void *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v9 = (void *)*MEMORY[0x1E4F1A508];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v37 = v9;
    *(_DWORD *)buf = 134217984;
    uint64_t v46 = (int)objc_msgSend_code(v6, v38, v39);
    _os_log_debug_impl(&dword_1C4CFF000, v37, OS_LOG_TYPE_DEBUG, "Marked asset broken with response code %ld", buf, 0xCu);
  }
  if (objc_msgSend_code(v6, v10, v11) == 1)
  {
    id v14 = objc_msgSend_assetOrPackageMarkedBrokenBlock(WeakRetained, v12, v13);

    if (v14)
    {
      id v17 = objc_msgSend_callbackQueue(WeakRetained, v15, v16);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1C4F79ED0;
      block[3] = &unk_1E64F0948;
      void block[4] = WeakRetained;
      id v41 = v5;
      dispatch_async(v17, block);
    }
  }
  else
  {
    id v18 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v19 = *MEMORY[0x1E4F19DD8];
    uint64_t v20 = sub_1C4E94D98(v6);
    id v21 = sub_1C4E940D0(v8, v6);
    id v24 = objc_msgSend_error(v6, v22, v23);
    id v27 = objc_msgSend_errorDescription(v24, v25, v26);
    unsigned int v29 = objc_msgSend_errorWithDomain_code_userInfo_format_(v18, v28, v19, v20, v21, @"Error marking asset as broken: %@", v27);

    objc_msgSend_setError_(WeakRetained, v30, (uint64_t)v29);
    uint64_t v33 = objc_msgSend_assetOrPackageMarkedBrokenBlock(WeakRetained, v31, v32);

    if (v33)
    {
      __int16 v36 = objc_msgSend_callbackQueue(WeakRetained, v34, v35);
      v42[0] = MEMORY[0x1E4F143A8];
      v42[1] = 3221225472;
      v42[2] = sub_1C4F79E74;
      v42[3] = &unk_1E64F0120;
      v42[4] = WeakRetained;
      id v43 = v5;
      id v44 = v29;
      dispatch_async(v36, v42);
    }
  }
}

void sub_1C4F79E74(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_assetOrPackageMarkedBrokenBlock(*(void **)(a1 + 32), a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, void, void))v4 + 2))(v4, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_1C4F79ED0(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_assetOrPackageMarkedBrokenBlock(*(void **)(a1 + 32), a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, void, void))v4 + 2))(v4, *(void *)(a1 + 40), 0);
}

void sub_1C4F79F30(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = objc_msgSend_error(v3, v4, v5);

  uint64_t v7 = (void *)*MEMORY[0x1E4F1A548];
  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    id v8 = (void *)*MEMORY[0x1E4F1A508];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = v8;
      id v14 = objc_msgSend_error(v3, v12, v13);
      int v22 = 138412290;
      uint64_t v23 = v14;
      _os_log_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_INFO, "Error breaking asset: %@", (uint8_t *)&v22, 0xCu);
    }
    uint64_t v15 = objc_msgSend_error(v3, v9, v10);
    objc_msgSend_setMarkAssetBrokenError_(WeakRetained, v16, (uint64_t)v15);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    id v18 = *MEMORY[0x1E4F1A508];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A508], OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v22) = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_DEBUG, "Completed marking asset broken", (uint8_t *)&v22, 2u);
    }
  }
  objc_msgSend_setWrapperOperation_(WeakRetained, v17, 0);
  id v21 = objc_msgSend_stateTransitionGroup(WeakRetained, v19, v20);
  dispatch_group_leave(v21);
}

void sub_1C4F7AB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F7ABA8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_msgSend_urlRequest(WeakRetained, v1, v2);
  id v6 = objc_msgSend_error(v3, v4, v5);

  if (v6)
  {
    uint64_t v9 = objc_msgSend_urlRequest(WeakRetained, v7, v8);
    id v12 = objc_msgSend_error(v9, v10, v11);
    objc_msgSend_finishWithError_(WeakRetained, v13, (uint64_t)v12);
  }
  else
  {
    objc_msgSend_finishWithError_(WeakRetained, v7, 0);
  }
}

uint64_t sub_1C4F7B018(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_33;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            uint64_t v21 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_35:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(CKCDPCodeServiceRequestAssetAuthorizeGetRequestOptionsHeaderInfo);
        objc_msgSend_addContentRequestHeaders_((void *)a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1C4E2B21C((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4F7B9F0(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(MEMORY[0x1E4F19F08]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4F7C798(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 136));
  objc_destroyWeak((id *)(v5 - 128));
  _Unwind_Resume(a1);
}

void sub_1C4F7C808(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  unsigned int v9 = (id *)(a1 + 40);
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  id v13 = a2;
  id WeakRetained = objc_loadWeakRetained(v9);
  objc_msgSend__handleSupportedDeviceCapabilitiesCheckedForZoneID_capabilitySet_result_responseCode_(*(void **)(a1 + 32), v14, (uint64_t)v13, v12, v11, v10);
}

void sub_1C4F7C8B8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  id v9 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = (void *)MEMORY[0x1E4F1A280];
  uint64_t v12 = *MEMORY[0x1E4F19DD8];
  uint64_t v13 = sub_1C4E94D98(v8);
  uint64_t v35 = WeakRetained;
  uint64_t v16 = objc_msgSend_request(WeakRetained, v14, v15);
  id v17 = sub_1C4E940D0(v16, v8);
  unsigned int v20 = objc_msgSend_error(v8, v18, v19);

  unint64_t v23 = objc_msgSend_errorDescription(v20, v21, v22);
  uint64_t v25 = objc_msgSend_errorWithDomain_code_userInfo_format_(v11, v24, v12, v13, v17, @"Error checking supported device capabilities with server: %@", v23);

  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v26 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v28 = v26;
    unsigned int v29 = (objc_class *)objc_opt_class();
    uint64_t v30 = NSStringFromClass(v29);
    uint64_t v31 = *(void **)(a1 + 32);
    __int16 v34 = objc_msgSend_ckShortDescription(v31, v32, v33);
    *(_DWORD *)buf = 138544386;
    uint64_t v37 = v30;
    __int16 v38 = 2048;
    uint64_t v39 = v31;
    __int16 v40 = 2114;
    id v41 = v34;
    __int16 v42 = 2112;
    id v43 = v25;
    __int16 v44 = 2112;
    id v45 = v7;
    _os_log_impl(&dword_1C4CFF000, v28, OS_LOG_TYPE_INFO, "Check supported device capabilities operation <%{public}@: %p; %{public}@> received an error: %@ for zone: %@",
      buf,
      0x34u);
  }
  objc_msgSend__handleError_forZoneID_capabilitySet_(*(void **)(a1 + 32), v27, (uint64_t)v25, v7, v9);
}

void sub_1C4F7CB10(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v10 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = v10;
    uint64_t v13 = (objc_class *)objc_opt_class();
    BOOL v14 = NSStringFromClass(v13);
    uint64_t v15 = *(void **)(a1 + 32);
    id v18 = objc_msgSend_ckShortDescription(v15, v16, v17);
    int v19 = 138544386;
    unsigned int v20 = v14;
    __int16 v21 = 2048;
    uint64_t v22 = v15;
    __int16 v23 = 2114;
    char v24 = v18;
    __int16 v25 = 2112;
    id v26 = v7;
    __int16 v27 = 2112;
    id v28 = v8;
    _os_log_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_INFO, "Warn: Check supported device capabilities operation <%{public}@: %p; %{public}@> validation of the server reponse "
      "failed. Error: %@ for zone: %@",
      (uint8_t *)&v19,
      0x34u);
  }
  objc_msgSend__handleError_forZoneID_capabilitySet_(*(void **)(a1 + 32), v11, (uint64_t)v7, v8, v9);
}

void sub_1C4F7CCA8(void **a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  id v3 = objc_loadWeakRetained(a1 + 6);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = v4;
    BOOL v14 = (objc_class *)objc_opt_class();
    uint64_t v15 = NSStringFromClass(v14);
    uint64_t v16 = a1[4];
    int v19 = objc_msgSend_ckShortDescription(v16, v17, v18);
    uint64_t v22 = objc_msgSend_error(v3, v20, v21);
    int v23 = 138544130;
    char v24 = v15;
    __int16 v25 = 2048;
    id v26 = v16;
    __int16 v27 = 2114;
    id v28 = v19;
    __int16 v29 = 2112;
    uint64_t v30 = v22;
    _os_log_debug_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_DEBUG, "Check supported device capabilities operation <%{public}@: %p; %{public}@> finished with error %@",
      (uint8_t *)&v23,
      0x2Au);
  }
  id v7 = objc_msgSend_error(a1[4], v5, v6);

  if (!v7)
  {
    id v10 = objc_msgSend_error(v3, v8, v9);
    objc_msgSend_setError_(a1[4], v11, (uint64_t)v10);
  }
  uint64_t v12 = objc_msgSend_stateTransitionGroup(a1[4], v8, v9);
  dispatch_group_leave(v12);
}

void sub_1C4F7D2E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, v3);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = sub_1C4F7D448;
  v12[3] = &unk_1E64F39A0;
  id v13 = *(id *)(a1 + 32);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v4, (uint64_t)v12);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1C4F7D9A8;
  v8[3] = &unk_1E64F0238;
  objc_copyWeak(&v11, &location);
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v9 = v5;
  uint64_t v10 = v6;
  objc_msgSend_setCompletionBlock_(v3, v7, (uint64_t)v8);

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);
}

void sub_1C4F7D424(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4F7D448(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v73 = a4;
  id v70 = v7;
  id v9 = objc_opt_new();
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  uint64_t v67 = a1;
  id obj = *(id *)(a1 + 32);
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v83, v92, 16);
  if (v11)
  {
    uint64_t v14 = v11;
    if (v70) {
      BOOL v15 = v73 == 0;
    }
    else {
      BOOL v15 = 0;
    }
    int v16 = !v15;
    int v76 = v16;
    uint64_t v17 = *(void *)v84;
    uint64_t v75 = *MEMORY[0x1E4F19C40];
    uint64_t v68 = v9;
    id v69 = v8;
    uint64_t v71 = *(void *)v84;
    do
    {
      uint64_t v18 = 0;
      uint64_t v72 = v14;
      do
      {
        if (*(void *)v84 != v17) {
          objc_enumerationMutation(obj);
        }
        int v19 = *(void **)(*((void *)&v83 + 1) + 8 * v18);
        unsigned int v20 = objc_msgSend_result(v19, v12, v13);
        int v23 = objc_msgSend_shareID(v20, v21, v22);
        int isEqual = objc_msgSend_isEqual_(v23, v24, (uint64_t)v8);

        if (isEqual)
        {
          objc_msgSend_addObject_(v9, v12, (uint64_t)v19);
          if (v76)
          {
            int found = objc_msgSend_CKIsNotFoundError(v73, v26, v27);
            __int16 v29 = (void *)*MEMORY[0x1E4F1A548];
            if (found)
            {
              if (*MEMORY[0x1E4F1A550] != -1) {
                dispatch_once(MEMORY[0x1E4F1A550], v29);
              }
              uint64_t v30 = *MEMORY[0x1E4F1A500];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138543618;
                id v89 = v8;
                __int16 v90 = 2112;
                id v91 = v73;
                _os_log_impl(&dword_1C4CFF000, v30, OS_LOG_TYPE_INFO, "Warn: Failed to validate share usage from the server, shareID %{public}@ not found: %@", buf, 0x16u);
              }
              objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v31, v75, 161, @"Deleted or invalid share in device capability check response");
            }
            else
            {
              if (*MEMORY[0x1E4F1A550] != -1) {
                dispatch_once(MEMORY[0x1E4F1A550], v29);
              }
              uint64_t v59 = *MEMORY[0x1E4F1A500];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138543618;
                id v89 = v8;
                __int16 v90 = 2112;
                id v91 = v73;
                _os_log_impl(&dword_1C4CFF000, v59, OS_LOG_TYPE_INFO, "Warn: Failed to validate share usage from the server, failed to fetch share with shareID %{public}@: %@", buf, 0x16u);
              }
              objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v60, v75, 161, @"Failed to fetch share when validating device capability check response");
            uint64_t v35 = };
            objc_msgSend_setError_(v19, v61, (uint64_t)v35);
          }
          else
          {
            uint64_t v78 = v18;
            unsigned int v74 = v19;
            uint64_t v32 = objc_msgSend_result(v19, v26, v27);
            uint64_t v35 = objc_msgSend_userID(v32, v33, v34);

            long long v81 = 0u;
            long long v82 = 0u;
            long long v79 = 0u;
            long long v80 = 0u;
            __int16 v38 = objc_msgSend_participants(v70, v36, v37);
            uint64_t v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v39, (uint64_t)&v79, v87, 16);
            if (v40)
            {
              uint64_t v43 = v40;
              uint64_t v44 = *(void *)v80;
LABEL_22:
              uint64_t v45 = 0;
              while (1)
              {
                if (*(void *)v80 != v44) {
                  objc_enumerationMutation(v38);
                }
                uint64_t v46 = *(void **)(*((void *)&v79 + 1) + 8 * v45);
                uint64_t v47 = objc_msgSend_userIdentity(v46, v41, v42);
                id v50 = objc_msgSend_userRecordID(v47, v48, v49);
                uint64_t v53 = objc_msgSend_recordName(v50, v51, v52);
                char isEqualToString = objc_msgSend_isEqualToString_(v53, v54, (uint64_t)v35);

                if (isEqualToString) {
                  break;
                }
                if (v43 == ++v45)
                {
                  uint64_t v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v41, (uint64_t)&v79, v87, 16);
                  uint64_t v17 = v71;
                  uint64_t v14 = v72;
                  if (v43) {
                    goto LABEL_22;
                  }
                  goto LABEL_28;
                }
              }
              id v56 = v46;

              if (!v56)
              {
                id v9 = v68;
                id v8 = v69;
                uint64_t v17 = v71;
                uint64_t v14 = v72;
                goto LABEL_39;
              }
              id v9 = v68;
              id v8 = v69;
              uint64_t v17 = v71;
              uint64_t v14 = v72;
              uint64_t v18 = v78;
              if (objc_msgSend_acceptanceStatus(v56, v57, v58) != 2) {
                goto LABEL_39;
              }
            }
            else
            {
LABEL_28:

              id v56 = 0;
              id v9 = v68;
              id v8 = v69;
LABEL_39:
              if (*MEMORY[0x1E4F1A550] != -1) {
                dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
              }
              uint64_t v62 = *MEMORY[0x1E4F1A500];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138543618;
                id v89 = v35;
                __int16 v90 = 2114;
                id v91 = v8;
                _os_log_impl(&dword_1C4CFF000, v62, OS_LOG_TYPE_INFO, "Warn: Failed to validate share usage from the server, userID %{public}@ is not an accepted participant of the share with shareID: %{public}@", buf, 0x16u);
              }
              unint64_t v64 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v63, v75, 161, @"Obsolete share participant in device capability check response");
              objc_msgSend_setError_(v74, v65, (uint64_t)v64);

              uint64_t v18 = v78;
            }
          }
        }
        ++v18;
      }
      while (v18 != v14);
      uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v83, v92, 16);
    }
    while (v14);
  }

  objc_msgSend_removeObjectsInArray_(*(void **)(v67 + 32), v66, (uint64_t)v9);
}

void sub_1C4F7D9A8(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v5 = objc_msgSend_error(WeakRetained, v3, v4);

  uint64_t v6 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
  id v7 = (os_log_t *)MEMORY[0x1E4F1A500];
  if (v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v8 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v50 = v5;
      _os_log_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_INFO, "Warn: Failed to fetch shares for participant validation: %@", buf, 0xCu);
    }
  }
  uint64_t v41 = a1;
  uint64_t v42 = (void *)v5;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id obj = *(id *)(a1 + 32);
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v45, v53, 16);
  if (v10)
  {
    uint64_t v13 = v10;
    uint64_t v14 = *(void *)v46;
    uint64_t v15 = *MEMORY[0x1E4F19C40];
    unint64_t v16 = 0x1E4F1A000uLL;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v46 != v14) {
          objc_enumerationMutation(obj);
        }
        uint64_t v18 = *(void **)(*((void *)&v45 + 1) + 8 * v17);
        int v19 = objc_msgSend_result(v18, v11, v12, v41, v42);
        uint64_t v44 = objc_msgSend_userID(v19, v20, v21);

        if (*v6 != -1) {
          dispatch_once(v6, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        os_log_t v22 = *v7;
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_INFO))
        {
          char v24 = v22;
          uint64_t v27 = objc_msgSend_result(v18, v25, v26);
          objc_msgSend_shareID(v27, v28, v29);
          unint64_t v30 = v16;
          uint64_t v31 = v13;
          uint64_t v32 = v15;
          uint64_t v33 = v14;
          v35 = uint64_t v34 = v7;
          *(_DWORD *)buf = 138543618;
          uint64_t v50 = (uint64_t)v44;
          __int16 v51 = 2114;
          uint64_t v52 = v35;
          _os_log_impl(&dword_1C4CFF000, v24, OS_LOG_TYPE_INFO, "Warn: Failed to validate share usage of participant %{public}@ for shareID %{public}@", buf, 0x16u);

          id v7 = v34;
          uint64_t v14 = v33;
          uint64_t v15 = v32;
          uint64_t v13 = v31;
          unint64_t v16 = v30;

          uint64_t v6 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
        }
        __int16 v36 = objc_msgSend_errorWithDomain_code_format_(*(void **)(v16 + 640), v23, v15, 161, @"Failed to validate share participant in device capability check response");
        objc_msgSend_setError_(v18, v37, (uint64_t)v36);

        ++v17;
      }
      while (v13 != v17);
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v45, v53, 16);
    }
    while (v13);
  }

  uint64_t v40 = objc_msgSend_stateTransitionGroup(*(void **)(v41 + 40), v38, v39);
  dispatch_group_leave(v40);
}

uint64_t sub_1C4F7E950(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      uint64_t v17 = v10 & 7;
      if (v16 || v17 == 4) {
        break;
      }
      int v19 = (const char *)(v10 >> 3);
      switch((v10 >> 3))
      {
        case 0u:
          unsigned int v20 = 0;
          do
          {
            uint64_t v21 = *v3;
            uint64_t v22 = *(void *)(a2 + v21);
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
              goto LABEL_59;
            }
            int v24 = *(char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v23;
            if ((v24 & 0x80000000) == 0) {
              break;
            }
          }
          while (v20++ <= 8);
          continue;
        case 1u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          *(unsigned char *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 1;
          *(unsigned char *)(a1 + 48) |= 1u;
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v29 = *(void *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v29 = 0;
          }
          *(void *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v29;
          continue;
        case 2u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v32 = 0;
          *(unsigned char *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 2;
          *(unsigned char *)(a1 + 48) |= 2u;
          while (2)
          {
            uint64_t v33 = *v3;
            uint64_t v34 = *(void *)(a2 + v33);
            unint64_t v35 = v34 + 1;
            if (v34 == -1 || v35 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
              *(void *)(a2 + v33) = v35;
              v32 |= (unint64_t)(v36 & 0x7F) << v30;
              if (v36 < 0)
              {
                v30 += 7;
                BOOL v15 = v31++ >= 9;
                if (v15)
                {
                  uint64_t v32 = 0;
                  goto LABEL_52;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v32 = 0;
          }
LABEL_52:
          *(void *)(a1 + 16) = v32;
          continue;
        case 3u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v39 = 0;
          *(unsigned char *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 3;
          *(unsigned char *)(a1 + 48) |= 8u;
          break;
        case 4u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          *(unsigned char *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 4;
          uint64_t v44 = PBReaderReadString();
          uint64_t v45 = 32;
          goto LABEL_47;
        case 5u:
          objc_msgSend_clearOneofValuesForValue((void *)a1, v19, v17);
          *(unsigned char *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 40) = 5;
          uint64_t v44 = PBReaderReadData();
          uint64_t v45 = 24;
LABEL_47:
          long long v46 = *(void **)(a1 + v45);
          *(void *)(a1 + v45) = v44;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v40 = *v3;
        uint64_t v41 = *(void *)(a2 + v40);
        unint64_t v42 = v41 + 1;
        if (v41 == -1 || v42 > *(void *)(a2 + *v4)) {
          break;
        }
        char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
        *(void *)(a2 + v40) = v42;
        v39 |= (unint64_t)(v43 & 0x7F) << v37;
        if ((v43 & 0x80) == 0) {
          goto LABEL_54;
        }
        v37 += 7;
        BOOL v15 = v38++ >= 9;
        if (v15)
        {
          uint64_t v39 = 0;
          goto LABEL_56;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_54:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v39 = 0;
      }
LABEL_56:
      *(unsigned char *)(a1 + 44) = v39 != 0;
LABEL_59:
      ;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4F7F86C(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_shareRecordID(a2, (const char *)a2, a3);
}

uint64_t sub_1C4F7F908(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_shareRecordID(a2, (const char *)a2, a3);
}

uint64_t sub_1C4F8113C(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 20) |= 2u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          BOOL v54 = v19 != 0;
          uint64_t v55 = 12;
          goto LABEL_87;
        case 2u:
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 20) |= 8u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                BOOL v14 = v24++ >= 9;
                if (v14)
                {
                  uint64_t v25 = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v25 = 0;
          }
LABEL_70:
          BOOL v54 = v25 != 0;
          uint64_t v55 = 14;
          goto LABEL_87;
        case 4u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v32 = 0;
          *(unsigned char *)(a1 + 20) |= 4u;
          while (2)
          {
            uint64_t v33 = *v3;
            unint64_t v34 = *(void *)(a2 + v33);
            if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
              *(void *)(a2 + v33) = v34 + 1;
              v32 |= (unint64_t)(v35 & 0x7F) << v30;
              if (v35 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  uint64_t v32 = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v32 = 0;
          }
LABEL_74:
          BOOL v54 = v32 != 0;
          uint64_t v55 = 13;
          goto LABEL_87;
        case 5u:
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v38 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (2)
          {
            uint64_t v39 = *v3;
            unint64_t v40 = *(void *)(a2 + v39);
            if (v40 == -1 || v40 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
              *(void *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                BOOL v14 = v37++ >= 9;
                if (v14)
                {
                  LODWORD(v3_Block_object_dispose(&STACK[0x3F0], 8) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v3_Block_object_dispose(&STACK[0x3F0], 8) = 0;
          }
LABEL_78:
          *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v38;
          continue;
        case 6u:
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v44 = 0;
          *(unsigned char *)(a1 + 20) |= 0x20u;
          while (2)
          {
            uint64_t v45 = *v3;
            unint64_t v46 = *(void *)(a2 + v45);
            if (v46 == -1 || v46 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v47 = *(unsigned char *)(*(void *)(a2 + *v7) + v46);
              *(void *)(a2 + v45) = v46 + 1;
              v44 |= (unint64_t)(v47 & 0x7F) << v42;
              if (v47 < 0)
              {
                v42 += 7;
                BOOL v14 = v43++ >= 9;
                if (v14)
                {
                  uint64_t v44 = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v44 = 0;
          }
LABEL_82:
          BOOL v54 = v44 != 0;
          uint64_t v55 = 16;
          goto LABEL_87;
        case 7u:
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v50 = 0;
          *(unsigned char *)(a1 + 20) |= 0x10u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v51 = *v3;
        unint64_t v52 = *(void *)(a2 + v51);
        if (v52 == -1 || v52 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v53 = *(unsigned char *)(*(void *)(a2 + *v7) + v52);
        *(void *)(a2 + v51) = v52 + 1;
        v50 |= (unint64_t)(v53 & 0x7F) << v48;
        if ((v53 & 0x80) == 0) {
          goto LABEL_84;
        }
        v48 += 7;
        BOOL v14 = v49++ >= 9;
        if (v14)
        {
          uint64_t v50 = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v50 = 0;
      }
LABEL_86:
      BOOL v54 = v50 != 0;
      uint64_t v55 = 15;
LABEL_87:
      *(unsigned char *)(a1 + v55) = v54;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4F822EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F82318(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  unint64_t v10 = (void *)*MEMORY[0x1E4F1A548];
  uint64_t v11 = (NSObject **)MEMORY[0x1E4F1A500];
  if (v8)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v10);
    }
    unint64_t v12 = *v11;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      char v13 = v12;
      int v16 = objc_msgSend_ckShortDescription(v7, v14, v15);
      *(_DWORD *)buf = 138543362;
      unsigned int v49 = v16;
      _os_log_debug_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_DEBUG, "Fetched record %{public}@", buf, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v10);
    }
    char v17 = *v11;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v33 = v17;
      char v36 = objc_msgSend_ckShortDescription(v7, v34, v35);
      *(_DWORD *)buf = 138543618;
      unsigned int v49 = v36;
      __int16 v50 = 2112;
      id v51 = v9;
      _os_log_debug_impl(&dword_1C4CFF000, v33, OS_LOG_TYPE_DEBUG, "Failed to fetch record %{public}@ with error: %@", buf, 0x16u);
    }
  }
  objc_initWeak((id *)buf, *(id *)(a1 + 32));
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4F826EC;
  block[3] = &unk_1E64F7420;
  objc_copyWeak(&v46, (id *)buf);
  objc_copyWeak(&v47, (id *)(a1 + 56));
  id v18 = v9;
  id v41 = v18;
  id v19 = v7;
  id v42 = v19;
  id v43 = *(id *)(a1 + 40);
  id v20 = v8;
  uint64_t v21 = *(void *)(a1 + 48);
  id v44 = v20;
  uint64_t v45 = v21;
  dispatch_block_t v22 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  objc_msgSend_addPerRequestCallbackBlock_(*(void **)(a1 + 32), v23, (uint64_t)v22);
  uint64_t v26 = objc_msgSend_perRequestCallbackGroup(*(void **)(a1 + 32), v24, v25);
  uint64_t v29 = objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v27, v28);
  dispatch_group_async(v26, v29, v22);

  uint64_t v32 = objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v30, v31);
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  v37[2] = sub_1C4F82AB4;
  v37[3] = &unk_1E64F01E8;
  objc_copyWeak(&v39, (id *)(a1 + 56));
  id v38 = *(id *)(a1 + 32);
  dispatch_async(v32, v37);

  objc_destroyWeak(&v39);
  objc_destroyWeak(&v47);
  objc_destroyWeak(&v46);
  objc_destroyWeak((id *)buf);
}

void sub_1C4F826C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(location);
  objc_destroyWeak(&a27);
  _Unwind_Resume(a1);
}

void sub_1C4F826EC(id *a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 9);
  char isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
  {
    id v6 = objc_loadWeakRetained(a1 + 10);
    id v9 = a1[4];
    if (*MEMORY[0x1E4F1A4E0])
    {
      unint64_t v10 = objc_msgSend_unitTestOverrides(v6, v7, v8);
      unint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v10, v11, @"RecordNameForDecryptionFailureOnSync");
      uint64_t v15 = objc_msgSend_recordName(a1[5], v13, v14);
      int isEqualToString = objc_msgSend_isEqualToString_(v12, v16, (uint64_t)v15);

      if (isEqualToString)
      {
        uint64_t v18 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v7, *MEMORY[0x1E4F19DD8], 5004, 0, @"TEST PCS decrypt failure");

        id v9 = (id)v18;
      }
    }
    if (v9)
    {
      id v19 = objc_msgSend_objectForKeyedSubscript_(a1[6], v7, (uint64_t)a1[5]);
      if (objc_msgSend_isMergeableValueDeltaRecord(v19, v20, v21)
        && objc_msgSend_CKIsNotFoundError(v9, v22, v23))
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        unsigned int v24 = (void *)*MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
        {
          uint64_t v25 = v24;
          uint64_t v28 = objc_msgSend_recordID(v19, v26, v27);
          *(_DWORD *)buf = 138412290;
          id v44 = v28;
          _os_log_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_INFO, "Dropping mergeable value delta record on the floor because we got a not-found error fetching changes: %@", buf, 0xCu);
        }
        id v9 = 0;
LABEL_15:
        uint64_t v31 = objc_msgSend_errorReportingStyle(v6, v29, v30);
        if (v31 == 1)
        {
          int v34 = CKIsPCSError();
          if (!v9) {
            goto LABEL_23;
          }
        }
        else
        {
          if (v31 != 2) {
            goto LABEL_23;
          }
          int v34 = 0;
          if (!v9) {
            goto LABEL_23;
          }
        }
        if (!v34)
        {
          uint64_t v35 = objc_msgSend_error(v6, v32, v33);

          if (v35)
          {
LABEL_27:

            return;
          }
          unsigned int v37 = objc_msgSend__possiblyWrapError_forRecordWithID_withCode_format_(a1[8], v36, (uint64_t)v9, a1[5], 1000, @"Encountered an error fetching records");
          objc_msgSend_setError_(v6, v38, (uint64_t)v37);
LABEL_26:

          goto LABEL_27;
        }
LABEL_23:
        if (v9) {
          goto LABEL_27;
        }
        id v39 = objc_msgSend_error(v6, v32, v33);

        if (v39) {
          goto LABEL_27;
        }
        v41[0] = MEMORY[0x1E4F143A8];
        v41[1] = 3221225472;
        v41[2] = sub_1C4F82A20;
        v41[3] = &unk_1E64F1D18;
        id v42 = a1[7];
        objc_msgSend_updateCloudKitMetrics_(v6, v40, (uint64_t)v41);
        unsigned int v37 = v42;
        goto LABEL_26;
      }
    }
    objc_msgSend__noteChangedRecordWithID_record_error_(v6, v7, (uint64_t)a1[5], a1[7], v9);
    goto LABEL_15;
  }
}

void sub_1C4F82A20(uint64_t a1, void *a2)
{
  id v21 = a2;
  uint64_t v5 = objc_msgSend_recordsDownloaded(v21, v3, v4);
  objc_msgSend_setRecordsDownloaded_(v21, v6, v5 + 1);
  uint64_t v9 = objc_msgSend_assetCount(*(void **)(a1 + 32), v7, v8);
  uint64_t v12 = objc_msgSend_assetsDownloaded(v21, v10, v11);
  objc_msgSend_setAssetsDownloaded_(v21, v13, v12 + v9);
  uint64_t v16 = objc_msgSend_assetDiskSize(*(void **)(a1 + 32), v14, v15);
  uint64_t v19 = objc_msgSend_assetsDownloadedFileSize(v21, v17, v18);
  objc_msgSend_setAssetsDownloadedFileSize_(v21, v20, v19 + v16);
}

void sub_1C4F82AB4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = objc_msgSend_perRequestCallbackGroup(*(void **)(a1 + 32), v2, v3);
  dispatch_group_leave(v4);

  id v7 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v8 = objc_msgSend_fetchRecordsGroup(WeakRetained, v5, v6);
    dispatch_group_leave(v8);

    id v7 = WeakRetained;
  }
}

void sub_1C4F82D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F82D28(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  char isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    MEMORY[0x1F4181798](v6, sel__noteDeletedRecordWithID_recordType_, v7);
  }
}

void sub_1C4F82ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F82EF0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  char isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    MEMORY[0x1F4181798](v6, sel__noteAttributesChangedForZone_, v7);
  }
}

void sub_1C4F83044(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = v4;
    unint64_t v10 = objc_msgSend_zoneID(v6, v8, v9);
    *(_DWORD *)buf = 138412290;
    uint64_t v14 = v10;
    _os_log_debug_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_DEBUG, "Spawning operation to apply PCS changes for zone %@", buf, 0xCu);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = sub_1C4F831B8;
  v11[3] = &unk_1E64F05C8;
  id v12 = *(id *)(a1 + 32);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)v11);
}

void sub_1C4F831B8(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = v2;
    uint64_t v7 = objc_msgSend_zoneID(v3, v5, v6);
    int v8 = 138412290;
    uint64_t v9 = v7;
    _os_log_debug_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_DEBUG, "Operation to apply PCS changes completed for zone %@", (uint8_t *)&v8, 0xCu);
  }
}

void sub_1C4F83620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location)
{
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v28 - 128));
  _Unwind_Resume(a1);
}

void sub_1C4F83684(uint64_t a1)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v4 = (dispatch_block_t *)MEMORY[0x1E4F1A548];
  uint64_t v5 = (void *)*MEMORY[0x1E4F1A548];
  uint64_t v6 = (void *)MEMORY[0x1E4F1A550];
  if (WeakRetained)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v5);
    }
    uint64_t v7 = (os_log_t *)MEMORY[0x1E4F1A500];
    int v8 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      log = v8;
      id v43 = (objc_class *)objc_opt_class();
      unsigned int v61 = NSStringFromClass(v43);
      id v46 = objc_msgSend_ckShortDescription(v3, v44, v45);
      unsigned int v49 = objc_msgSend_operationID(WeakRetained, v47, v48);
      uint64_t v52 = objc_msgSend_error(v3, v50, v51);
      *(_DWORD *)buf = 138544386;
      uint64_t v74 = (uint64_t)v61;
      __int16 v75 = 2048;
      id v76 = v3;
      __int16 v77 = 2114;
      uint64_t v78 = v46;
      __int16 v79 = 2114;
      long long v80 = v49;
      __int16 v81 = 2112;
      long long v82 = v52;
      _os_log_debug_impl(&dword_1C4CFF000, log, OS_LOG_TYPE_DEBUG, "Batch Record Fetch request <%{public}@: %p; %{public}@> for operation %{public}@ finished with error %@",
        buf,
        0x34u);
    }
    uint64_t v10 = objc_msgSend__optionsForZonesWithPendingChangesAfterRequest_(WeakRetained, v9, (uint64_t)v3);
    char v13 = objc_msgSend_allKeys(v10, v11, v12);
    uint64_t v16 = objc_msgSend_numRequestsSent(WeakRetained, v14, v15);
    objc_msgSend_setNumRequestsSent_(WeakRetained, v17, v16 + 1);
    dispatch_block_t v22 = objc_msgSend_error(v3, v18, v19);
    if (!v22
      && objc_msgSend_isExecuting(WeakRetained, v20, v21)
      && (objc_msgSend_isCancelled(WeakRetained, v23, v24) & 1) == 0
      && objc_msgSend_fetchAllChanges(WeakRetained, v25, v26)
      && objc_msgSend_count(v13, v27, v28))
    {
      if (objc_msgSend_numRequestsSent(WeakRetained, v29, v30))
      {
        if (*v6 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], *v4);
        }
        os_log_t v33 = *v7;
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v57 = v33;
          uint64_t v60 = objc_msgSend_count(v13, v58, v59);
          *(_DWORD *)buf = 134218242;
          uint64_t v74 = v60;
          __int16 v75 = 2112;
          id v76 = v10;
          _os_log_debug_impl(&dword_1C4CFF000, v57, OS_LOG_TYPE_DEBUG, "We're not done here. Sending another fetch changes request for %lu zones with options:\n%@", buf, 0x16u);
        }
        objc_msgSend__sendFetchChangesRequestForZoneIDs_withOptions_previousRequestSchedulerInfo_(WeakRetained, v34, (uint64_t)v13, v10, *(void *)(a1 + 32));
        uint64_t v35 = *(NSObject **)(a1 + 40);
        id v38 = objc_msgSend_callbackQueue(WeakRetained, v36, v37);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_1C4F83B44;
        block[3] = &unk_1E64F1D90;
        void block[4] = WeakRetained;
        id v71 = *(id *)(a1 + 32);
        char v72 = *(unsigned char *)(a1 + 64);
        dispatch_group_notify(v35, v38, block);

        id v39 = v71;
        goto LABEL_19;
      }
    }
    else
    {
    }
    unint64_t v40 = *(NSObject **)(a1 + 40);
    id v41 = objc_msgSend_callbackQueue(WeakRetained, v31, v32);
    v63[0] = MEMORY[0x1E4F143A8];
    v63[1] = 3221225472;
    v63[2] = sub_1C4F83BD8;
    v63[3] = &unk_1E64F7470;
    id v64 = *(id *)(a1 + 32);
    id v65 = v3;
    id v66 = WeakRetained;
    id v67 = v13;
    id v68 = v10;
    char v69 = *(unsigned char *)(a1 + 64);
    dispatch_group_notify(v40, v41, v63);

    id v39 = v64;
LABEL_19:

    goto LABEL_24;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v5);
  }
  id v42 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    char v53 = v42;
    id v56 = objc_msgSend_requestUUID(v3, v54, v55);
    *(_DWORD *)buf = 138543362;
    uint64_t v74 = (uint64_t)v56;
    _os_log_debug_impl(&dword_1C4CFF000, v53, OS_LOG_TYPE_DEBUG, "Owning operation for request %{public}@ no longer around. Bailing.", buf, 0xCu);
  }
LABEL_24:
}

void sub_1C4F83B44(uint64_t a1, const char *a2)
{
  objc_msgSend__handleFetchChangesRequestFinishedWithSchedulerInfo_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v5 = objc_msgSend_error(*(void **)(a1 + 32), v3, v4);

    if (v5) {
      objc_msgSend_cancelAndDisablePerRequestCallbackBlocks(*(void **)(a1 + 40), v6, v7);
    }
    objc_msgSend_resumeCallbackQueue(*(void **)(a1 + 40), v6, v7);
  }
  objc_msgSend_disablePerRequestCallbackBlocks(*(void **)(a1 + 40), v3, v4);
  uint64_t v10 = objc_msgSend_fetchRecordsGroup(*(void **)(a1 + 32), v8, v9);
  dispatch_group_leave(v10);
}

void sub_1C4F83BD8(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4F83D78;
  block[3] = &unk_1E64F0198;
  id v20 = *(id *)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void **)(a1 + 56);
  id v21 = v2;
  uint64_t v22 = v3;
  id v23 = v4;
  id v24 = *(id *)(a1 + 64);
  dispatch_block_t v5 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  objc_msgSend_addPerRequestCallbackBlock_(*(void **)(a1 + 32), v6, (uint64_t)v5);
  uint64_t v9 = objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v7, v8);
  dispatch_async(v9, v5);

  uint64_t v12 = objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v10, v11);
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = sub_1C4F83F50;
  v18[3] = &unk_1E64F05C8;
  void v18[4] = *(void *)(a1 + 48);
  dispatch_async(v12, v18);

  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v15 = objc_msgSend_error(*(void **)(a1 + 48), v13, v14);

    if (v15) {
      objc_msgSend_cancelAndDisablePerRequestCallbackBlocks(*(void **)(a1 + 32), v16, v17);
    }
    objc_msgSend_resumeCallbackQueue(*(void **)(a1 + 32), v16, v17);
  }
  objc_msgSend_disablePerRequestCallbackBlocks(*(void **)(a1 + 32), v13, v14);
}

void sub_1C4F83D78(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if ((objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3) & 1) == 0)
  {
    uint64_t v6 = objc_msgSend_error(*(void **)(a1 + 40), v4, v5);

    if (v6)
    {
      uint64_t v9 = objc_msgSend_error(*(void **)(a1 + 40), v7, v8);
      objc_msgSend_setError_(*(void **)(a1 + 48), v10, (uint64_t)v9);

      uint64_t v25 = objc_msgSend_perRequestGroup(*(void **)(a1 + 32), v11, v12);
      dispatch_group_leave(v25);
    }
    else
    {
      objc_msgSend__handleFetchChangesRequestFinishedWithSchedulerInfo_(*(void **)(a1 + 48), v7, *(void *)(a1 + 32));
      if (objc_msgSend_fetchAllChanges(*(void **)(a1 + 48), v13, v14)
        && objc_msgSend_count(*(void **)(a1 + 56), v15, v16))
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v17 = (void *)*MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
        {
          uint64_t v19 = *(void **)(a1 + 56);
          id v20 = v17;
          uint64_t v23 = objc_msgSend_count(v19, v21, v22);
          uint64_t v24 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218242;
          uint64_t v27 = v23;
          __int16 v28 = 2112;
          uint64_t v29 = v24;
          _os_log_debug_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEBUG, "We're not done here. Sending another fetch changes request for %lu zones with options:\n%@", buf, 0x16u);
        }
        objc_msgSend__sendFetchChangesRequestForZoneIDs_withOptions_previousRequestSchedulerInfo_(*(void **)(a1 + 48), v18, *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 32));
      }
    }
  }
}

void sub_1C4F83F50(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = objc_msgSend_fetchRecordsGroup(*(void **)(a1 + 32), a2, a3);
  dispatch_group_leave(v3);
}

void sub_1C4F84558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id location)
{
  objc_destroyWeak(v36);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F845B0(uint64_t a1, void *a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1C4F8463C;
  v4[3] = &unk_1E64F2220;
  id v5 = *(id *)(a1 + 32);
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a2, v3, (uint64_t)v4);
}

void sub_1C4F8463C(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  uint64_t v8 = objc_msgSend_shouldFetchAssetContent(v5, v6, v7);
  if (v8)
  {
    uint64_t v11 = (void *)v8;
    uint64_t v12 = objc_msgSend_shouldFetchAssetContent(v5, v9, v10);
    int v15 = objc_msgSend_BOOLValue(v12, v13, v14);

    if (v15) {
      objc_msgSend_addObject_(*(void **)(a1 + 32), v16, (uint64_t)v17);
    }
  }
}

void sub_1C4F846E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_setRecordFetcher_(*(void **)(a1 + 32), v4, (uint64_t)v3);
  uint64_t v7 = objc_msgSend_recordFetcher(*(void **)(a1 + 32), v5, v6);
  objc_msgSend_setUseRecordCache_(v7, v8, 0);

  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C4F847D0;
  v13[3] = &unk_1E64F22C0;
  objc_copyWeak(&v14, (id *)(a1 + 40));
  uint64_t v11 = objc_msgSend_recordFetcher(*(void **)(a1 + 32), v9, v10);
  objc_msgSend_setFetchAggregatorCompletionBlock_(v11, v12, (uint64_t)v13);

  objc_destroyWeak(&v14);
}

void sub_1C4F847BC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F847D0(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v5 = *MEMORY[0x1E4F1A500];
  if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    if (!v3) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  char v13 = @" with error: ";
  id v14 = &stru_1F2044F30;
  if (v3) {
    id v14 = v3;
  }
  else {
    char v13 = &stru_1F2044F30;
  }
  int v15 = 138543618;
  uint64_t v16 = v13;
  __int16 v17 = 2112;
  uint64_t v18 = v14;
  _os_log_debug_impl(&dword_1C4CFF000, v5, OS_LOG_TYPE_DEBUG, "Batched Record fetches finished%{public}@%@", (uint8_t *)&v15, 0x16u);
  if (v3)
  {
LABEL_5:
    uint64_t v8 = objc_msgSend_error(WeakRetained, v6, v7);

    if (!v8) {
      objc_msgSend_setError_(WeakRetained, v6, (uint64_t)v3);
    }
  }
LABEL_7:
  objc_msgSend__noteOperationFinishedBlockEnd(WeakRetained, v6, v7);
  uint64_t v11 = objc_msgSend_error(WeakRetained, v9, v10);
  objc_msgSend_finishWithError_(WeakRetained, v12, (uint64_t)v11);
}

void sub_1C4F84948(uint64_t a1)
{
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_debug_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_DEBUG, "Waiting for all record fetches to finish...", v8, 2u);
  }
  id v5 = objc_msgSend_recordFetcher(*(void **)(a1 + 32), v3, v4);
  objc_msgSend_finishIfAppropriate(v5, v6, v7);
}

uint64_t sub_1C4F84B04(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setZoneIDs_, *(void *)(a1 + 32));
}

void sub_1C4F85F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id *location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,id a45)
{
}

void sub_1C4F85FBC(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v4 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_debug_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_DEBUG, "Failed to remove anonymous share. error: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = objc_msgSend_fetchRecordsGroup(WeakRetained, v6, v7);
  dispatch_group_leave(v8);
}

void sub_1C4F860D0(void **a1, const char *a2, uint64_t a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_fetchAllChanges(a1[4], a2, a3)) {
    int v6 = 1;
  }
  else {
    int v6 = objc_msgSend_clientIsUsingLegacyCKFetchRecordChangesOperationAPI(a1[4], v4, v5) ^ 1;
  }
  uint64_t v7 = objc_msgSend_serverChangeTokenUpdatedBlock(a1[4], v4, v5);
  if (!v7) {
    goto LABEL_19;
  }
  id v10 = (void *)v7;
  uint64_t v11 = objc_msgSend_error(a1[4], v8, v9);
  if (v11) {
    int v6 = 0;
  }

  if (v6 == 1)
  {
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    id obj = a1[5];
    uint64_t v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v63, v68, 16);
    if (v53)
    {
      uint64_t v52 = *(void *)v64;
      do
      {
        for (uint64_t i = 0; i != v53; ++i)
        {
          if (*(void *)v64 != v52) {
            objc_enumerationMutation(obj);
          }
          uint64_t v15 = *(void *)(*((void *)&v63 + 1) + 8 * i);
          uint64_t v16 = objc_msgSend_objectForKeyedSubscript_(a1[6], v13, v15);
          uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(a1[7], v17, v15);
          id v21 = objc_msgSend_resultServerChangeTokenData(v16, v19, v20);

          id v56 = (void *)v18;
          if (v21)
          {
            id v24 = objc_alloc(MEMORY[0x1E4F1A388]);
            uint64_t v27 = objc_msgSend_resultServerChangeTokenData(v16, v25, v26);
            uint64_t v55 = objc_msgSend_initWithData_(v24, v28, (uint64_t)v27);
          }
          else
          {
            uint64_t v55 = 0;
          }
          objc_msgSend_serverChangeTokenUpdatedBlock(a1[4], v22, v23);
          uint64_t v29 = (void (**)(void, void, void, void, void, void, void, void, void))objc_claimAutoreleasedReturnValue();
          uint64_t v32 = objc_msgSend_resultClientChangeTokenData(v16, v30, v31);
          uint64_t v35 = objc_msgSend_status(v16, v33, v34);
          uint64_t hasPendingArchivedRecords = objc_msgSend_hasPendingArchivedRecords(v16, v36, v37);
          id v41 = objc_msgSend_syncObligationZoneIDs(v16, v39, v40);
          v61[0] = MEMORY[0x1E4F143A8];
          v61[1] = 3221225472;
          v61[2] = sub_1C4F86464;
          v61[3] = &unk_1E64F0680;
          v61[4] = a1[4];
          id v62 = a1[8];
          ((void (**)(void, uint64_t, void *, void *, uint64_t, uint64_t, void *, void *, void *))v29)[2](v29, v15, v55, v32, v35, hasPendingArchivedRecords, v41, v56, v61);
        }
        uint64_t v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v13, (uint64_t)&v63, v68, 16);
      }
      while (v53);
    }
  }
  else
  {
LABEL_19:
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    id obj = a1[5];
    uint64_t v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v42, (uint64_t)&v57, v67, 16);
    if (v43)
    {
      uint64_t v46 = v43;
      uint64_t v47 = *(void *)v58;
      while (1)
      {
        if (*(void *)v58 != v47) {
          objc_enumerationMutation(obj);
        }
        uint64_t v48 = objc_msgSend_perRequestGroup(a1[8], v44, v45);
        dispatch_group_leave(v48);

        if (!--v46)
        {
          uint64_t v46 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v44, (uint64_t)&v57, v67, 16);
          if (!v46) {
            break;
          }
        }
      }
    }
  }

  uint64_t v51 = objc_msgSend_fetchRecordsGroup(a1[4], v49, v50);
  dispatch_group_leave(v51);
}

void sub_1C4F86464(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    int v6 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void **)(a1 + 32);
      uint64_t v9 = v6;
      uint64_t v12 = objc_msgSend_operationID(v8, v10, v11);
      int v14 = 138543618;
      uint64_t v15 = v12;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_INFO, "Finishing daemon operation %{public}@ due to client-returned error %@", (uint8_t *)&v14, 0x16u);
    }
    objc_msgSend_finishWithError_(*(void **)(a1 + 32), v7, (uint64_t)v5);
  }
  char v13 = objc_msgSend_perRequestGroup(*(void **)(a1 + 40), v3, v4);
  dispatch_group_leave(v13);
}

void sub_1C4F868E8(void **a1, void *a2, void *a3)
{
  id v29 = a2;
  id v5 = a3;
  if (objc_msgSend_status(v5, v6, v7) != 3)
  {
    uint64_t v9 = objc_msgSend_objectForKeyedSubscript_(a1[4], v8, (uint64_t)v29);

    if (!v9)
    {
      uint64_t v12 = objc_msgSend_configurationsByRecordZoneID(a1[5], v10, v11);
      int v14 = objc_msgSend_objectForKeyedSubscript_(v12, v13, (uint64_t)v29);
      id v17 = objc_msgSend_copy(v14, v15, v16);
      uint64_t v18 = v17;
      if (v17) {
        id v19 = v17;
      }
      else {
        id v19 = (id)objc_opt_new();
      }
      uint64_t v20 = v19;

      id v21 = objc_alloc(MEMORY[0x1E4F1A388]);
      id v24 = objc_msgSend_resultServerChangeTokenData(v5, v22, v23);
      uint64_t v26 = objc_msgSend_initWithData_(v21, v25, (uint64_t)v24);
      objc_msgSend_setPreviousServerChangeToken_(v20, v27, (uint64_t)v26);

      objc_msgSend_setObject_forKeyedSubscript_(a1[6], v28, (uint64_t)v20, v29);
    }
  }
}

void sub_1C4F86EE0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 168));
  objc_destroyWeak((id *)(v3 - 160));
  _Unwind_Resume(a1);
}

void sub_1C4F86F68(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (objc_msgSend_isFinished(WeakRetained, v4, v5))
  {

    id v8 = (id)MEMORY[0x1E4F1CBF0];
  }
  id v6 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend__handleChangedRecords_perRequestSchedulerInfo_(WeakRetained, v7, (uint64_t)v8, v6);
}

void sub_1C4F86FF8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (id *)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  id WeakRetained = objc_loadWeakRetained(v5);
  id v8 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend__handleRecordDelete_recordType_perRequestSchedulerInfo_(WeakRetained, v9, (uint64_t)v7, v6, v8);
}

void sub_1C4F8708C(uint64_t a1, void *a2)
{
  uint64_t v3 = (id *)(a1 + 32);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v5 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend__handleAttributesChangedForZone_perRequestSchedulerInfo_(WeakRetained, v6, (uint64_t)v4, v5);
}

uint64_t sub_1C4F8710C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setZoneIDs_, *(void *)(a1 + 32));
}

void sub_1C4F87AA0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_serverChangeTokenUpdatedBlock(*(void **)(a1 + 32), a2, a3);
  if (v4
    && (id v7 = (void *)v4,
        int v8 = objc_msgSend_shouldReturnServerChangeTokensToAdopter(*(void **)(a1 + 32), v5, v6),
        v7,
        v8))
  {
    objc_msgSend_serverChangeTokenUpdatedBlock(*(void **)(a1 + 32), v5, v6);
    uint64_t v9 = (void (**)(void, void, void, void, void))objc_claimAutoreleasedReturnValue();
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 40);
    int v14 = objc_msgSend_error(*(void **)(a1 + 32), v12, v13);
    uint64_t v19 = MEMORY[0x1E4F143A8];
    uint64_t v20 = 3221225472;
    id v21 = sub_1C4F87BE0;
    uint64_t v22 = &unk_1E64F0680;
    uint64_t v23 = *(void *)(a1 + 32);
    id v24 = *(id *)(a1 + 48);
    ((void (**)(void, uint64_t, uint64_t, void *, uint64_t *))v9)[2](v9, v11, v10, v14, &v19);
  }
  else
  {
    id v17 = objc_msgSend_perRequestGroup(*(void **)(a1 + 48), v5, v6);
    dispatch_group_leave(v17);
  }
  uint64_t v18 = objc_msgSend_fetchZonesGroup(*(void **)(a1 + 32), v15, v16, v19, v20, v21, v22, v23);
  dispatch_group_leave(v18);
}

void sub_1C4F87BE0(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v6 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      int v8 = *(void **)(a1 + 32);
      uint64_t v9 = v6;
      uint64_t v12 = objc_msgSend_operationID(v8, v10, v11);
      int v14 = 138543618;
      uint64_t v15 = v12;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_INFO, "Finishing daemon operation %{public}@ due to client-returned error %@", (uint8_t *)&v14, 0x16u);
    }
    objc_msgSend_finishWithError_(*(void **)(a1 + 32), v7, (uint64_t)v5);
  }
  uint64_t v13 = objc_msgSend_perRequestGroup(*(void **)(a1 + 40), v3, v4);
  dispatch_group_leave(v13);
}

void sub_1C4F88334(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v6 - 144));
  objc_destroyWeak((id *)(v6 - 136));
  objc_destroyWeak((id *)(v6 - 128));
  _Unwind_Resume(a1);
}

void sub_1C4F88424(uint64_t a1)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = objc_loadWeakRetained((id *)(a1 + 48));
  id v6 = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    if (*MEMORY[0x1E4F1A4E0])
    {
      id v7 = objc_msgSend_unitTestOverrides(WeakRetained, v4, v5);
      uint64_t v9 = objc_msgSend_objectForKeyedSubscript_(v7, v8, @"PipelineMetasyncRequestsForever");

      int v10 = v9 != 0;
    }
    else
    {
      int v10 = 0;
    }
    __int16 v16 = (void *)MEMORY[0x1E4F1A550];
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v17 = (os_log_t *)MEMORY[0x1E4F1A500];
    uint64_t v18 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      log = v18;
      uint64_t v50 = (objc_class *)objc_opt_class();
      long long v64 = NSStringFromClass(v50);
      long long v63 = objc_msgSend_ckShortDescription(v3, v51, v52);
      uint64_t v55 = objc_msgSend_operationID(WeakRetained, v53, v54);
      objc_msgSend_error(v3, v56, v57);
      *(_DWORD *)buf = 138544386;
      id v76 = v64;
      __int16 v77 = 2048;
      id v78 = v3;
      __int16 v79 = 2114;
      long long v80 = v63;
      __int16 v81 = 2114;
      long long v82 = v55;
      uint64_t v84 = v83 = 2112;
      long long v58 = (void *)v84;
      _os_log_debug_impl(&dword_1C4CFF000, log, OS_LOG_TYPE_DEBUG, "Fetch database changes request <%{public}@: %p; %{public}@> for operation %{public}@ finished with error %@",
        buf,
        0x34u);
    }
    uint64_t v21 = objc_msgSend_numRequestsSent(WeakRetained, v19, v20);
    objc_msgSend_setNumRequestsSent_(WeakRetained, v22, v21 + 1);
    uint64_t v27 = objc_msgSend_error(v3, v23, v24);
    if (v27
      || !objc_msgSend_isExecuting(WeakRetained, v25, v26)
      || (objc_msgSend_isCancelled(WeakRetained, v28, v29) & 1) != 0
      || !objc_msgSend_fetchAllChanges(WeakRetained, v30, v31)
      || ((objc_msgSend_status(v3, v32, v33) == 2) & ~v10) != 0)
    {
    }
    else if (objc_msgSend_numRequestsSent(WeakRetained, v34, v35))
    {
      if (*v16 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      os_log_t v38 = *v17;
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
      {
        long long v59 = v38;
        id v62 = objc_msgSend_serverChangeTokenData(v3, v60, v61);
        *(_DWORD *)buf = 138543362;
        id v76 = v62;
        _os_log_debug_impl(&dword_1C4CFF000, v59, OS_LOG_TYPE_DEBUG, "We're not done here. Sending another fetch request with change token %{public}@", buf, 0xCu);
      }
      id v41 = objc_msgSend_serverChangeTokenData(v3, v39, v40);
      objc_msgSend__sendFetchDatabaseChangesRequestWithChangeToken_previousRequestSchedulerInfo_(WeakRetained, v42, (uint64_t)v41, v6);

      uint64_t v43 = *(NSObject **)(a1 + 32);
      uint64_t v46 = objc_msgSend_callbackQueue(WeakRetained, v44, v45);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1C4F88934;
      block[3] = &unk_1E64F1D90;
      void block[4] = WeakRetained;
      id v73 = v6;
      char v74 = *(unsigned char *)(a1 + 64);
      dispatch_group_notify(v43, v46, block);

      uint64_t v47 = v73;
      goto LABEL_26;
    }
    uint64_t v48 = *(NSObject **)(a1 + 32);
    unsigned int v49 = objc_msgSend_callbackQueue(WeakRetained, v36, v37);
    v66[0] = MEMORY[0x1E4F143A8];
    v66[1] = 3221225472;
    v66[2] = sub_1C4F889C8;
    v66[3] = &unk_1E64F7560;
    id v67 = v6;
    id v68 = v3;
    id v69 = WeakRetained;
    char v70 = v10;
    char v71 = *(unsigned char *)(a1 + 64);
    dispatch_group_notify(v48, v49, v66);

    uint64_t v47 = v67;
LABEL_26:

    goto LABEL_27;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v11 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = v11;
    uint64_t v15 = objc_msgSend_requestUUID(v3, v13, v14);
    *(_DWORD *)buf = 138543362;
    id v76 = v15;
    _os_log_debug_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_DEBUG, "Owning operation for request %{public}@ no longer around. Bailing.", buf, 0xCu);
  }
LABEL_27:
}

void sub_1C4F88934(uint64_t a1, const char *a2)
{
  objc_msgSend__handleFetchDatabaseChangesRequestFinishedWithSchedulerInfo_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v5 = objc_msgSend_error(*(void **)(a1 + 32), v3, v4);

    if (v5) {
      objc_msgSend_cancelAndDisablePerRequestCallbackBlocks(*(void **)(a1 + 40), v6, v7);
    }
    objc_msgSend_resumeCallbackQueue(*(void **)(a1 + 40), v6, v7);
  }
  objc_msgSend_disablePerRequestCallbackBlocks(*(void **)(a1 + 40), v3, v4);
  int v10 = objc_msgSend_fetchZonesGroup(*(void **)(a1 + 32), v8, v9);
  dispatch_group_leave(v10);
}

void sub_1C4F889C8(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4F88B4C;
  block[3] = &unk_1E64F2248;
  id v19 = *(id *)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  id v20 = v2;
  uint64_t v21 = v3;
  char v22 = *(unsigned char *)(a1 + 56);
  dispatch_block_t v4 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  objc_msgSend_addPerRequestCallbackBlock_(*(void **)(a1 + 32), v5, (uint64_t)v4);
  int v8 = objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v6, v7);
  dispatch_async(v8, v4);

  uint64_t v11 = objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v9, v10);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = sub_1C4F88D40;
  v17[3] = &unk_1E64F05C8;
  void v17[4] = *(void *)(a1 + 48);
  dispatch_async(v11, v17);

  if (*(unsigned char *)(a1 + 57))
  {
    uint64_t v14 = objc_msgSend_error(*(void **)(a1 + 48), v12, v13);

    if (v14) {
      objc_msgSend_cancelAndDisablePerRequestCallbackBlocks(*(void **)(a1 + 32), v15, v16);
    }
    objc_msgSend_resumeCallbackQueue(*(void **)(a1 + 32), v15, v16);
  }
  objc_msgSend_disablePerRequestCallbackBlocks(*(void **)(a1 + 32), v12, v13);
}

void sub_1C4F88B4C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if ((objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3) & 1) == 0)
  {
    id v6 = objc_msgSend_error(*(void **)(a1 + 40), v4, v5);

    if (v6)
    {
      uint64_t v9 = objc_msgSend_error(*(void **)(a1 + 40), v7, v8);
      objc_msgSend_setError_(*(void **)(a1 + 48), v10, (uint64_t)v9);

      __int16 v28 = objc_msgSend_perRequestGroup(*(void **)(a1 + 32), v11, v12);
      dispatch_group_leave(v28);
    }
    else
    {
      objc_msgSend__handleFetchDatabaseChangesRequestFinishedWithSchedulerInfo_(*(void **)(a1 + 48), v7, *(void *)(a1 + 32));
      if (objc_msgSend_fetchAllChanges(*(void **)(a1 + 48), v13, v14)
        && (objc_msgSend_status(*(void **)(a1 + 40), v15, v16) != 2 || *(unsigned char *)(a1 + 56)))
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        id v17 = (void *)*MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
        {
          uint64_t v23 = *(void **)(a1 + 40);
          uint64_t v24 = v17;
          uint64_t v27 = objc_msgSend_serverChangeTokenData(v23, v25, v26);
          *(_DWORD *)buf = 138412290;
          uint64_t v30 = v27;
          _os_log_debug_impl(&dword_1C4CFF000, v24, OS_LOG_TYPE_DEBUG, "We're not done here. Sending another fetch request with change token %@", buf, 0xCu);
        }
        id v20 = *(void **)(a1 + 48);
        uint64_t v21 = objc_msgSend_serverChangeTokenData(*(void **)(a1 + 40), v18, v19);
        objc_msgSend__sendFetchDatabaseChangesRequestWithChangeToken_previousRequestSchedulerInfo_(v20, v22, (uint64_t)v21, *(void *)(a1 + 32));
      }
    }
  }
}

void sub_1C4F88D40(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = objc_msgSend_fetchZonesGroup(*(void **)(a1 + 32), a2, a3);
  dispatch_group_leave(v3);
}

void sub_1C4F88D84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5)
  {
    objc_initWeak(&location, v5);
    uint64_t v14 = MEMORY[0x1E4F143A8];
    uint64_t v15 = 3221225472;
    uint64_t v16 = sub_1C4F88EEC;
    id v17 = &unk_1E64F0238;
    objc_copyWeak(&v20, &location);
    id v18 = WeakRetained;
    id v19 = v3;
    dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &v14);
    objc_msgSend_addPerRequestCallbackBlock_(v5, v7, (uint64_t)v6, v14, v15, v16, v17, v18);
    uint64_t v10 = objc_msgSend_perRequestCallbackGroup(v5, v8, v9);
    uint64_t v13 = objc_msgSend_perRequestCallbackQueue(v5, v11, v12);
    dispatch_group_async(v10, v13, v6);

    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);
  }
}

void sub_1C4F88ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F88EEC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  char isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
  {
    uint64_t v8 = objc_msgSend_recordZoneWithIDChangedBlock(*(void **)(a1 + 32), v6, v7);

    if (v8)
    {
      objc_msgSend_recordZoneWithIDChangedBlock(*(void **)(a1 + 32), v9, v10);
      uint64_t v11 = (void (**)(id, void))objc_claimAutoreleasedReturnValue();
      v11[2](v11, *(void *)(a1 + 40));
    }
  }
}

void sub_1C4F88F98(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5)
  {
    objc_initWeak(&location, v5);
    uint64_t v14 = MEMORY[0x1E4F143A8];
    uint64_t v15 = 3221225472;
    uint64_t v16 = sub_1C4F89100;
    id v17 = &unk_1E64F0238;
    objc_copyWeak(&v20, &location);
    id v18 = WeakRetained;
    id v19 = v3;
    dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &v14);
    objc_msgSend_addPerRequestCallbackBlock_(v5, v7, (uint64_t)v6, v14, v15, v16, v17, v18);
    uint64_t v10 = objc_msgSend_perRequestCallbackGroup(v5, v8, v9);
    uint64_t v13 = objc_msgSend_perRequestCallbackQueue(v5, v11, v12);
    dispatch_group_async(v10, v13, v6);

    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);
  }
}

void sub_1C4F890E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F89100(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  char isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
  {
    uint64_t v8 = objc_msgSend_container(*(void **)(a1 + 32), v6, v7);
    uint64_t v11 = objc_msgSend_recordCache(v8, v9, v10);
    objc_msgSend_clearAllRecordsForZoneWithID_(v11, v12, *(void *)(a1 + 40));

    uint64_t v15 = objc_msgSend_recordZoneWithIDWasDeletedBlock(*(void **)(a1 + 32), v13, v14);

    if (v15)
    {
      objc_msgSend_recordZoneWithIDWasDeletedBlock(*(void **)(a1 + 32), v16, v17);
      id v18 = (void (**)(id, void))objc_claimAutoreleasedReturnValue();
      v18[2](v18, *(void *)(a1 + 40));
    }
  }
}

void sub_1C4F891D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5)
  {
    objc_initWeak(&location, v5);
    uint64_t v14 = MEMORY[0x1E4F143A8];
    uint64_t v15 = 3221225472;
    uint64_t v16 = sub_1C4F89340;
    uint64_t v17 = &unk_1E64F0238;
    objc_copyWeak(&v20, &location);
    id v18 = WeakRetained;
    id v19 = v3;
    dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &v14);
    objc_msgSend_addPerRequestCallbackBlock_(v5, v7, (uint64_t)v6, v14, v15, v16, v17, v18);
    uint64_t v10 = objc_msgSend_perRequestCallbackGroup(v5, v8, v9);
    uint64_t v13 = objc_msgSend_perRequestCallbackQueue(v5, v11, v12);
    dispatch_group_async(v10, v13, v6);

    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);
  }
}

void sub_1C4F89324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F89340(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  char isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
  {
    uint64_t v8 = objc_msgSend_container(*(void **)(a1 + 32), v6, v7);
    uint64_t v11 = objc_msgSend_recordCache(v8, v9, v10);
    objc_msgSend_clearAllRecordsForZoneWithID_(v11, v12, *(void *)(a1 + 40));

    uint64_t v15 = objc_msgSend_recordZoneWithIDWasPurgedBlock(*(void **)(a1 + 32), v13, v14);

    if (v15)
    {
      objc_msgSend_recordZoneWithIDWasPurgedBlock(*(void **)(a1 + 32), v16, v17);
      id v18 = (void (**)(id, void))objc_claimAutoreleasedReturnValue();
      v18[2](v18, *(void *)(a1 + 40));
    }
  }
}

void sub_1C4F89418(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5)
  {
    objc_initWeak(&location, v5);
    uint64_t v14 = MEMORY[0x1E4F143A8];
    uint64_t v15 = 3221225472;
    uint64_t v16 = sub_1C4F89580;
    uint64_t v17 = &unk_1E64F0238;
    objc_copyWeak(&v20, &location);
    id v18 = WeakRetained;
    id v19 = v3;
    dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &v14);
    objc_msgSend_addPerRequestCallbackBlock_(v5, v7, (uint64_t)v6, v14, v15, v16, v17, v18);
    uint64_t v10 = objc_msgSend_perRequestCallbackGroup(v5, v8, v9);
    uint64_t v13 = objc_msgSend_perRequestCallbackQueue(v5, v11, v12);
    dispatch_group_async(v10, v13, v6);

    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);
  }
}

void sub_1C4F89564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F89580(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  char isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
  {
    uint64_t v8 = objc_msgSend_container(*(void **)(a1 + 32), v6, v7);
    uint64_t v11 = objc_msgSend_recordCache(v8, v9, v10);
    objc_msgSend_clearAllRecordsForZoneWithID_(v11, v12, *(void *)(a1 + 40));

    uint64_t v15 = objc_msgSend_recordZoneWithIDWasDeletedDueToEncryptedDataResetBlock(*(void **)(a1 + 32), v13, v14);

    if (v15)
    {
      objc_msgSend_recordZoneWithIDWasDeletedDueToEncryptedDataResetBlock(*(void **)(a1 + 32), v16, v17);
      id v18 = (void (**)(id, void))objc_claimAutoreleasedReturnValue();
      v18[2](v18, *(void *)(a1 + 40));
    }
  }
}

void sub_1C4F89658(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5)
  {
    objc_initWeak(&location, v5);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4F897D4;
    block[3] = &unk_1E64F57B8;
    objc_copyWeak(&v18, &location);
    void block[4] = WeakRetained;
    id v16 = v3;
    id v6 = v5;
    id v17 = v6;
    dispatch_block_t v7 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    objc_msgSend_addPerRequestCallbackBlock_(v6, v8, (uint64_t)v7);
    uint64_t v11 = objc_msgSend_perRequestCallbackGroup(v6, v9, v10);
    uint64_t v14 = objc_msgSend_perRequestCallbackQueue(v6, v12, v13);
    dispatch_group_async(v11, v14, v7);

    objc_destroyWeak(&v18);
    objc_destroyWeak(&location);
  }
}

void sub_1C4F897B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F897D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  char isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    MEMORY[0x1F4181798](v6, sel__handleAnonymousZoneDataObjects_schedulerInfo_, v7);
  }
}

void sub_1C4F89B04(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1C4F89B30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_initWeak(&location, *(id *)(a1 + 32));
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4F89D4C;
  block[3] = &unk_1E64F75D8;
  objc_copyWeak(&v26, &location);
  void block[4] = *(void *)(a1 + 40);
  objc_copyWeak(&v27, (id *)(a1 + 56));
  id v7 = v5;
  uint64_t v8 = *(void *)(a1 + 48);
  id v24 = v7;
  uint64_t v25 = v8;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  objc_msgSend_addPerRequestCallbackBlock_(*(void **)(a1 + 32), v10, (uint64_t)v9);
  uint64_t v13 = objc_msgSend_perRequestCallbackGroup(*(void **)(a1 + 32), v11, v12);
  id v16 = objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v14, v15);
  dispatch_group_async(v13, v16, v9);

  id v19 = objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v17, v18);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = sub_1C4F8A198;
  v20[3] = &unk_1E64F01E8;
  objc_copyWeak(&v22, (id *)(a1 + 56));
  id v21 = *(id *)(a1 + 32);
  dispatch_async(v19, v20);

  objc_destroyWeak(&v22);
  objc_destroyWeak(&v27);
  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);
}

void sub_1C4F89D28(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_1C4F89D4C(void **a1)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  char isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if ((isCancelled & 1) == 0)
  {
    uint64_t v8 = (void *)MEMORY[0x1E4F1A550];
    dispatch_block_t v9 = (os_log_t *)MEMORY[0x1E4F1A500];
    if (*MEMORY[0x1E4F1A4E0])
    {
      uint64_t v10 = objc_msgSend_unitTestOverrides(a1[4], v6, v7);
      uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v10, v11, @"FailAnonymousShareDecryption");

      if (v12)
      {
        uint64_t v14 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v13, *MEMORY[0x1E4F19C40], 1000, @"Unable to decrypt encrypted anonymous share.");
        if (*v8 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        os_log_t v15 = *v9;
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
        {
          uint64_t v54 = a1[4];
          uint64_t v55 = v15;
          long long v58 = objc_msgSend_operationID(v54, v56, v57);
          int v64 = 138543618;
          long long v65 = v58;
          __int16 v66 = 2112;
          id v67 = v14;
          _os_log_error_impl(&dword_1C4CFF000, v55, OS_LOG_TYPE_ERROR, "Override FailAnonymousShareDecryption: Finishing daemon operation %{public}@ due to client-returned error %@", (uint8_t *)&v64, 0x16u);
        }
        objc_msgSend_finishWithError_(a1[4], v16, (uint64_t)v14);
      }
    }
    id v18 = objc_loadWeakRetained(a1 + 8);
    if (a1[5])
    {
      if (*v8 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      os_log_t v19 = *v9;
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v49 = a1[5];
        uint64_t v50 = v19;
        uint64_t v53 = objc_msgSend_zoneID(v49, v51, v52);
        int v64 = 138412290;
        long long v65 = v53;
        _os_log_debug_impl(&dword_1C4CFF000, v50, OS_LOG_TYPE_DEBUG, "Handling encrypted anonymous share processing for: %@", (uint8_t *)&v64, 0xCu);
      }
      if (objc_msgSend_changeType(a1[6], v20, v21) == 1)
      {
        id v24 = objc_msgSend_recordZoneWithIDChangedBlock(v18, v22, v23);

        if (!v24)
        {
LABEL_24:

          return;
        }
        uint64_t v27 = objc_msgSend_recordZoneWithIDChangedBlock(v18, v25, v26);
      }
      else
      {
        if (objc_msgSend_changeType(a1[6], v22, v23) != 2) {
          goto LABEL_24;
        }
        if (objc_msgSend_deleteType(a1[6], v34, v35) == 2)
        {
          os_log_t v38 = objc_msgSend_recordZoneWithIDWasPurgedBlock(v18, v36, v37);

          if (!v38) {
            goto LABEL_24;
          }
          uint64_t v27 = objc_msgSend_recordZoneWithIDWasPurgedBlock(v18, v39, v40);
        }
        else if (objc_msgSend_deleteType(a1[6], v36, v37) == 3)
        {
          uint64_t v43 = objc_msgSend_recordZoneWithIDWasDeletedDueToEncryptedDataResetBlock(v18, v41, v42);

          if (!v43) {
            goto LABEL_24;
          }
          uint64_t v27 = objc_msgSend_recordZoneWithIDWasDeletedDueToEncryptedDataResetBlock(v18, v44, v45);
        }
        else
        {
          uint64_t v46 = objc_msgSend_recordZoneWithIDWasDeletedBlock(v18, v41, v42);

          if (!v46) {
            goto LABEL_24;
          }
          uint64_t v27 = objc_msgSend_recordZoneWithIDWasDeletedBlock(v18, v47, v48);
        }
      }
      uint64_t v30 = (void (**)(void, void))v27;
      uint64_t v31 = objc_msgSend_zoneID(a1[5], v28, v29);
      ((void (**)(void, void *))v30)[2](v30, v31);
    }
    else
    {
      objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v17, *MEMORY[0x1E4F19C40], 1000, @"Unable to decrypt encrypted anonymous share.");
      uint64_t v30 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
      if (*v8 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      os_log_t v32 = *v9;
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        long long v59 = a1[4];
        long long v60 = v32;
        long long v63 = objc_msgSend_operationID(v59, v61, v62);
        int v64 = 138543618;
        long long v65 = v63;
        __int16 v66 = 2112;
        id v67 = v30;
        _os_log_error_impl(&dword_1C4CFF000, v60, OS_LOG_TYPE_ERROR, "Finishing daemon operation %{public}@ due to client-returned error %@", (uint8_t *)&v64, 0x16u);
      }
      objc_msgSend_finishWithError_(a1[4], v33, (uint64_t)v30);
    }

    goto LABEL_24;
  }
}

void sub_1C4F8A198(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = objc_msgSend_perRequestCallbackGroup(*(void **)(a1 + 32), v2, v3);
  dispatch_group_leave(v4);

  uint64_t v7 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v8 = objc_msgSend_fetchZonesGroup(WeakRetained, v5, v6);
    dispatch_group_leave(v8);

    uint64_t v7 = WeakRetained;
  }
}

void sub_1C4F8A324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1C4F8A338(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = objc_msgSend_requestInfos(WeakRetained, v1, v2);
  objc_msgSend_removeAllObjects(v3, v4, v5);

  uint64_t v8 = objc_msgSend_error(WeakRetained, v6, v7);
  objc_msgSend_finishWithError_(WeakRetained, v9, (uint64_t)v8);
}

void sub_1C4F8ABBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F8AC9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F8AF5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F8BAA0(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3);
}

void sub_1C4F8BB64(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C4F8BB88(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend_setError_(WeakRetained, v4, (uint64_t)v3);

  uint64_t v7 = objc_msgSend_stateTransitionGroup(WeakRetained, v5, v6);
  dispatch_group_leave(v7);
}

void sub_1C4F8BD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F8BD68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = v3;
  objc_msgSend_setDidAttemptDugongKeyRoll_(v5, v6, 1);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = sub_1C4F8BE68;
  v10[3] = &unk_1E64F7628;
  void v10[4] = WeakRetained;
  objc_msgSend_setSaveCompletionBlock_(v5, v7, (uint64_t)v10);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1C4F8BFFC;
  v9[3] = &unk_1E64F05C8;
  void v9[4] = WeakRetained;
  objc_msgSend_setCompletionBlock_(v5, v8, (uint64_t)v9);
}

void sub_1C4F8BE68(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  os_log_t v15 = v12;
  if (v9 && v12)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v16 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      int v24 = 138412546;
      id v25 = v9;
      __int16 v26 = 2112;
      uint64_t v27 = v15;
      _os_log_debug_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEBUG, "Ignoring key-rolling error for record %@: %@", (uint8_t *)&v24, 0x16u);
    }
    os_log_t v19 = objc_msgSend_shareRecordsToUpdateByRecordID(*(void **)(a1 + 32), v17, v18);
    uint64_t v21 = objc_msgSend_objectForKeyedSubscript_(v19, v20, (uint64_t)v9);

    id v11 = (id)v21;
  }
  id v22 = objc_msgSend_fetchRecordsGroup(*(void **)(a1 + 32), v13, v14);
  dispatch_group_enter(v22);

  objc_msgSend__continueHandleFetchedRecord_recordID_(*(void **)(a1 + 32), v23, (uint64_t)v11, v9);
}

void sub_1C4F8BFFC(uint64_t a1, const char *a2, uint64_t a3)
{
  id v3 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), a2, a3);
  dispatch_group_leave(v3);
}

void sub_1C4F8CB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,id location,id a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  objc_destroyWeak(v55);
  objc_destroyWeak(v56);
  objc_destroyWeak(v58);
  objc_destroyWeak(v57);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a49);
  _Block_object_dispose(&a55, 8);
  _Unwind_Resume(a1);
}

void sub_1C4F8CBC8(uint64_t a1, void *a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1C4F8CC54;
  v4[3] = &unk_1E64F2220;
  id v5 = *(id *)(a1 + 32);
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a2, v3, (uint64_t)v4);
}

void sub_1C4F8CC54(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  uint64_t v8 = objc_msgSend_shouldFetchAssetContent(v5, v6, v7);
  if (v8)
  {
    id v11 = (void *)v8;
    id v12 = objc_msgSend_shouldFetchAssetContent(v5, v9, v10);
    int v15 = objc_msgSend_BOOLValue(v12, v13, v14);

    if (v15) {
      objc_msgSend_addObject_(*(void **)(a1 + 32), v16, (uint64_t)v17);
    }
  }
}

void sub_1C4F8CCF8(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v23 = a2;
  id v9 = a3;
  id v10 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v14 = objc_loadWeakRetained((id *)(a1 + 48));
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v15 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v12, v13);
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v18 = objc_msgSend_stringWithUTF8String_(NSString, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKitTools/Daemon/Operations/Database/Records/CKDFetchRecordsOperation.m");
    uint64_t v21 = objc_msgSend_requestUUID(v14, v19, v20);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v15, v22, v16, WeakRetained, v18, 518, @"Request with UUID %@ invoked progress callout after completion callout.  Progress recordID %@", v21, v9);
  }
  objc_msgSend__handleRecordFetch_recordID_etagMatched_responseCode_(WeakRetained, v12, (uint64_t)v23, v9, a4, v10);
}

void sub_1C4F8CE3C(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = objc_loadWeakRetained((id *)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = v4;
    uint64_t v8 = (objc_class *)objc_opt_class();
    id v9 = NSStringFromClass(v8);
    id v12 = objc_msgSend_ckShortDescription(v3, v10, v11);
    *(_DWORD *)buf = 138543874;
    uint64_t v34 = v9;
    __int16 v35 = 2048;
    id v36 = v3;
    __int16 v37 = 2114;
    os_log_t v38 = v12;
    _os_log_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_INFO, "Fetch records url request completed. Waiting for all record callbacks to finish before completing request <%{public}@: %p; %{public}@>",
      buf,
      0x20u);
  }
  uint64_t v13 = objc_msgSend_requestUUID(v3, v5, v6);
  uint64_t v16 = objc_msgSend_error(v3, v14, v15);
  objc_msgSend_setRequest_(WeakRetained, v17, 0);
  uint64_t v20 = objc_msgSend_fetchRecordsGroup(WeakRetained, v18, v19);
  id v23 = objc_msgSend_callbackQueue(WeakRetained, v21, v22);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4F8D090;
  block[3] = &unk_1E64F0120;
  id v30 = v13;
  id v31 = v16;
  id v32 = WeakRetained;
  id v24 = v16;
  id v25 = v13;
  dispatch_group_notify(v20, v23, block);

  uint64_t v28 = objc_msgSend_fetchRecordsGroup(WeakRetained, v26, v27);
  dispatch_group_leave(v28);
}

void sub_1C4F8D090(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1E4F1A550];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v3 = (os_log_t *)MEMORY[0x1E4F1A500];
  uint64_t v4 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    id v5 = *(void **)(a1 + 32);
    int v29 = 138543362;
    id v30 = v5;
    _os_log_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_INFO, "All record callbacks are complete. Finishing request %{public}@", (uint8_t *)&v29, 0xCu);
    uint64_t v6 = (void *)*MEMORY[0x1E4F1A548];
    if (*(void *)(a1 + 40))
    {
      if (*v2 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v6);
      }
      goto LABEL_8;
    }
    if (*v2 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v6);
    }
  }
  else if (*(void *)(a1 + 40))
  {
LABEL_8:
    os_log_t v7 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
    {
      id v9 = v7;
      id v10 = (objc_class *)objc_opt_class();
      uint64_t v11 = NSStringFromClass(v10);
      id v12 = *(void **)(a1 + 48);
      uint64_t v15 = objc_msgSend_ckShortDescription(v12, v13, v14);
      uint64_t v16 = *(void *)(a1 + 40);
      int v29 = 138544130;
      id v30 = v11;
      __int16 v31 = 2048;
      id v32 = v12;
      __int16 v33 = 2114;
      uint64_t v34 = v15;
      __int16 v35 = 2112;
      uint64_t v36 = v16;
      _os_log_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_INFO, "Failed to fetch records for <%{public}@: %p; %{public}@>: %@",
        (uint8_t *)&v29,
        0x2Au);
    }
    objc_msgSend_setError_(*(void **)(a1 + 48), v8, *(void *)(a1 + 40));
    goto LABEL_15;
  }
  os_log_t v19 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = v19;
    id v23 = (objc_class *)objc_opt_class();
    id v24 = NSStringFromClass(v23);
    id v25 = *(void **)(a1 + 48);
    uint64_t v28 = objc_msgSend_ckShortDescription(v25, v26, v27);
    int v29 = 138543874;
    id v30 = v24;
    __int16 v31 = 2048;
    id v32 = v25;
    __int16 v33 = 2114;
    uint64_t v34 = v28;
    _os_log_debug_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_DEBUG, "Fetched records for <%{public}@: %p; %{public}@>",
      (uint8_t *)&v29,
      0x20u);
  }
LABEL_15:
  uint64_t v20 = *(void **)(a1 + 48);
  if (v20)
  {
    uint64_t v21 = objc_msgSend_stateTransitionGroup(v20, v17, v18);
    dispatch_group_leave(v21);
  }
}

void sub_1C4F8D340(uint64_t a1)
{
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_INFO, "All record callbacks are complete. Finishing fetch operation", v6, 2u);
  }
  id v5 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v3, v4);
  dispatch_group_leave(v5);
}

uint64_t sub_1C4F8D3F4(uint64_t a1)
{
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_INFO, "All record callbacks are complete. Finishing decrypt operation if any.", v6, 2u);
  }
  return objc_msgSend_finishDecryption(*(void **)(a1 + 32), v3, v4);
}

void sub_1C4F8D530(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F8D608(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F8E06C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_1C4F8E090(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  os_log_t v7 = WeakRetained;
  if (a2 || !WeakRetained)
  {
    objc_msgSend_removePackages(*(void **)(a1 + 32), v5, v6);
  }
  else
  {
    id v10 = objc_msgSend_errorForRecordID_(WeakRetained, v5, *(void *)(a1 + 40));
    if (!v10)
    {
      uint64_t v11 = objc_msgSend_recordFetchProgressBlock(v7, v8, v9);

      if (v11)
      {
        objc_msgSend_recordFetchProgressBlock(v7, v8, v9);
        id v12 = (void (**)(void, void, double))objc_claimAutoreleasedReturnValue();
        v12[2](v12, *(void *)(a1 + 40), 1.0);
      }
    }
    uint64_t v13 = objc_msgSend_recordFetchCompletionBlock(v7, v8, v9);

    if (v13)
    {
      uint64_t v16 = objc_msgSend_recordFetchCompletionBlock(v7, v14, v15);
      id v17 = (void *)v16;
      if (*(unsigned char *)(a1 + 56)) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = *(void *)(a1 + 32);
      }
      (*(void (**)(uint64_t, uint64_t, void, void *))(v16 + 16))(v16, v18, *(void *)(a1 + 40), v10);
    }
    os_log_t v19 = objc_msgSend_error(v7, v14, v15);

    if (!v19)
    {
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      void v21[2] = sub_1C4F8E218;
      v21[3] = &unk_1E64F1D18;
      id v22 = *(id *)(a1 + 32);
      objc_msgSend_updateCloudKitMetrics_(v7, v20, (uint64_t)v21);
    }
  }
}

void sub_1C4F8E218(uint64_t a1, void *a2)
{
  id v21 = a2;
  uint64_t v5 = objc_msgSend_recordsDownloaded(v21, v3, v4);
  objc_msgSend_setRecordsDownloaded_(v21, v6, v5 + 1);
  uint64_t v9 = objc_msgSend_assetCount(*(void **)(a1 + 32), v7, v8);
  uint64_t v12 = objc_msgSend_assetsDownloaded(v21, v10, v11);
  objc_msgSend_setAssetsDownloaded_(v21, v13, v12 + v9);
  uint64_t v16 = objc_msgSend_assetDiskSize(*(void **)(a1 + 32), v14, v15);
  uint64_t v19 = objc_msgSend_assetsDownloadedFileSize(v21, v17, v18);
  objc_msgSend_setAssetsDownloadedFileSize_(v21, v20, v19 + v16);
}

void sub_1C4F8E2AC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_recordFetchCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_recordFetchCompletionBlock(*(void **)(a1 + 32), v5, v6);
    uint64_t v11 = (void (**)(id, void, uint64_t, void *))objc_claimAutoreleasedReturnValue();
    if (*(unsigned char *)(a1 + 56)) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = *(void *)(a1 + 40);
    }
    uint64_t v9 = *(void *)(a1 + 48);
    id v10 = objc_msgSend_errorForRecordID_(*(void **)(a1 + 32), v7, v9);
    v11[2](v11, v8, v9, v10);
  }
}

void sub_1C4F8E494(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F8E4AC(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 456), a2);
  id v4 = a2;
  uint64_t v7 = objc_msgSend_forcePCSDecrypt(*(void **)(a1 + 32), v5, v6);
  objc_msgSend_setForcePCSDecrypt_(*(void **)(*(void *)(a1 + 32) + 456), v8, v7);
  uint64_t v11 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v9, v10);
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = sub_1C4F8E5AC;
  v18[3] = &unk_1E64F05C8;
  id v19 = v11;
  uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 456);
  id v13 = v11;
  objc_msgSend_setCompletionBlock_(v12, v14, (uint64_t)v18);
  id v17 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v15, v16);
  dispatch_group_enter(v17);
}

void sub_1C4F8E5AC(uint64_t a1)
{
}

void sub_1C4F8E628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4F8E7D4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4F8E7F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (v6)
  {
    uint64_t v10 = (void *)MEMORY[0x1E4F1A550];
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v11 = (os_log_t *)MEMORY[0x1E4F1A500];
    uint64_t v12 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void **)(a1 + 32);
      uint64_t v16 = v12;
      id v19 = objc_msgSend_recordID(v15, v17, v18);
      *(_DWORD *)buf = 138412546;
      id v44 = v19;
      __int16 v45 = 2112;
      id v46 = v6;
      _os_log_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_INFO, "Couldn't decrypt record %@: %@", buf, 0x16u);
    }
    if (objc_msgSend_wasCached(v5, v13, v14)
      && CKIsPCSError()
      && (objc_msgSend_useCachedEtags(WeakRetained, v7, v8) & 1) != 0)
    {
      if (*v10 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      os_log_t v20 = *v11;
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
      {
        id v23 = *(void **)(a1 + 32);
        id v24 = v20;
        uint64_t v27 = objc_msgSend_recordID(v23, v25, v26);
        *(_DWORD *)buf = 138412290;
        id v44 = v27;
        _os_log_impl(&dword_1C4CFF000, v24, OS_LOG_TYPE_INFO, "Failed to decrypt a record from our cache. Refetching record %@ from the server and trying again", buf, 0xCu);
      }
      uint64_t v28 = objc_msgSend_recordIDsToRefetch(WeakRetained, v21, v22);
      __int16 v31 = objc_msgSend_recordID(v5, v29, v30);
      objc_msgSend_addObject_(v28, v32, (uint64_t)v31);

      __int16 v35 = objc_msgSend_fetchRecordsGroup(WeakRetained, v33, v34);
      dispatch_group_leave(v35);

      goto LABEL_19;
    }
    if (*(void *)(a1 + 40)) {
      objc_msgSend_setError_forRecordID_(WeakRetained, v7, (uint64_t)v6);
    }
  }
  if (objc_msgSend_shouldUpdateTimestampsForFetchedMergeableValues(WeakRetained, v7, v8))
  {
    os_log_t v38 = objc_msgSend_encryptedValueStore(*(void **)(a1 + 32), v36, v37);
    uint64_t v42 = objc_opt_class();
    uint64_t v40 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v39, (uint64_t)&v42, 1);
    objc_msgSend_enumerateKeysAndValuesOfClasses_usingBlock_(v38, v41, (uint64_t)v40, &unk_1F2044590);
  }
  objc_msgSend__continueHandleFetchedRecord_recordID_(WeakRetained, v36, (uint64_t)v5, *(void *)(a1 + 40));
LABEL_19:
}

void sub_1C4F8EAD4(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  objc_msgSend_unmergedDeltas(v3, v4, v5);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = objc_msgSend_allObjects(v10, v6, v7);
  objc_msgSend_mergeLastKnownServerTimestampVectorFromDeltas_(v3, v9, (uint64_t)v8);
}

void sub_1C4F8EC68(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4F8EC8C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v10 = WeakRetained;
  if (WeakRetained)
  {
    if (v5)
    {
      uint64_t v11 = objc_msgSend_container(WeakRetained, v8, v9);
      uint64_t v14 = objc_msgSend_pcsManager(v11, v12, v13);
      id v17 = objc_msgSend_pcsKeysToRemove(v5, v15, v16);
      uint64_t v20 = objc_msgSend_pcs(v5, v18, v19);
      id v23 = objc_msgSend_protectionEtag(*(void **)(a1 + 40), v21, v22);
      uint64_t v25 = objc_msgSend_removePCSKeys_fromPCS_withProtectionEtag_forOperation_(v14, v24, (uint64_t)v17, v20, v23, *(void *)(a1 + 48));

      if (v25)
      {
        uint64_t v28 = *(void **)(a1 + 48);
        v57[0] = MEMORY[0x1E4F143A8];
        v57[1] = 3221225472;
        void v57[2] = sub_1C4F8EFF8;
        v57[3] = &unk_1E64F2E00;
        v57[4] = v25;
        objc_msgSend_updateCloudKitMetrics_(v28, v26, (uint64_t)v57);
      }
      uint64_t v29 = objc_msgSend_pcs(v5, v26, v27);
      objc_msgSend_setRecordPCS_(*(void **)(a1 + 40), v30, v29);
      __int16 v33 = objc_msgSend_container(v10, v31, v32);
      uint64_t v36 = objc_msgSend_pcsManager(v33, v34, v35);
      uint64_t v39 = objc_msgSend_pcs(v5, v37, v38);
      id v56 = 0;
      id v41 = objc_msgSend_dataFromRecordPCS_error_(v36, v40, v39, &v56);
      id v42 = v56;

      if (v41)
      {
        objc_msgSend_setProtectionData_(*(void **)(a1 + 40), v43, (uint64_t)v41);
        __int16 v45 = objc_msgSend_etagFromPCSData_(CKDPCSManager, v44, (uint64_t)v41);
        objc_msgSend_setProtectionEtag_(*(void **)(a1 + 40), v46, (uint64_t)v45);

        uint64_t v47 = 0;
      }
      else
      {
        uint64_t v47 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v43, *MEMORY[0x1E4F19DD8], 5001, v42, @"Failed to create PCS data from fetched PCS while decrypting mergeable values");
      }

      if (v47)
      {
LABEL_15:
        uint64_t v54 = *(void *)(a1 + 32);
        if (v54)
        {
          objc_msgSend_setError_forRecordID_(v10, v53, (uint64_t)v47);
          uint64_t v54 = *(void *)(a1 + 32);
        }
        objc_msgSend__continueHandleFetchedRecord_recordID_(v10, v53, *(void *)(a1 + 40), v54);
        goto LABEL_21;
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v48 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v55 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        uint64_t v59 = v55;
        __int16 v60 = 2112;
        id v61 = v6;
        _os_log_error_impl(&dword_1C4CFF000, v48, OS_LOG_TYPE_ERROR, "Failed to fetch PCS to decrypt mergeable value delta record %@: %@", buf, 0x16u);
      }
      if (objc_msgSend_CKIsNotFoundError(v6, v49, v50))
      {
        id v52 = v6;
      }
      else
      {
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v51, *MEMORY[0x1E4F19DD8], 5001, v6, @"Failed to fetch PCS to decrypt mergeable values");
        id v52 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v47 = v52;
      if (v52) {
        goto LABEL_15;
      }
    }
    objc_msgSend__reallyDecryptPropertiesOnRecord_recordID_(v10, v53, *(void *)(a1 + 40), *(void *)(a1 + 32));
LABEL_21:
  }
}

void sub_1C4F8EFF8(uint64_t a1, void *a2)
{
  id v7 = a2;
  uint64_t v5 = objc_msgSend_recordKeysRemoved(v7, v3, v4);
  objc_msgSend_setRecordKeysRemoved_(v7, v6, *(void *)(a1 + 32) + v5);
}

void sub_1C4F8FAE0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_1C4F8FB0C(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v4 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_debug_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_DEBUG, "Failed to remove anonymous share. error: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = objc_msgSend_fetchRecordsGroup(WeakRetained, v6, v7);
  dispatch_group_leave(v8);
}

void sub_1C4F8FC20(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_recordFetchCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    uint64_t v7 = objc_msgSend_recordFetchCompletionBlock(*(void **)(a1 + 32), v5, v6);
    if (*(unsigned char *)(a1 + 64)) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = *(void *)(a1 + 40);
    }
    id v9 = (id)v7;
    (*(void (**)(uint64_t, uint64_t, void, void))(v7 + 16))(v7, v8, *(void *)(a1 + 48), *(void *)(a1 + 56));
  }
}

void sub_1C4F8FF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_1C4F8FF74(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1E4F1A550];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v6 = (os_log_t *)MEMORY[0x1E4F1A528];
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    id v44 = *(void **)(a1 + 32);
    __int16 v45 = v7;
    uint64_t v48 = objc_msgSend_recordID(v44, v46, v47);
    unsigned int v49 = *(void **)(a1 + 40);
    uint64_t v50 = @" and error: ";
    *(_DWORD *)buf = 138413058;
    uint64_t v51 = &stru_1F2044F30;
    long long v58 = v48;
    if (!v4) {
      uint64_t v50 = &stru_1F2044F30;
    }
    __int16 v59 = 2112;
    if (v4) {
      uint64_t v51 = v4;
    }
    id v60 = v49;
    __int16 v61 = 2114;
    uint64_t v62 = v50;
    __int16 v63 = 2112;
    int v64 = v51;
    _os_log_debug_impl(&dword_1C4CFF000, v45, OS_LOG_TYPE_DEBUG, "Prepped PCS data for share %@ with container %@%{public}@%@", buf, 0x2Au);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v11 = WeakRetained;
  if (v4) {
    objc_msgSend_setError_forRecordID_(WeakRetained, v9, (uint64_t)v4, *(void *)(a1 + 48));
  }
  uint64_t v12 = objc_msgSend_mutableEncryptedPSK(*(void **)(a1 + 32), v9, v10);

  if (!v12)
  {
    uint64_t v15 = objc_msgSend_pcsManager(*(void **)(a1 + 40), v13, v14);
    uint64_t v18 = objc_msgSend_publicPCS(*(void **)(a1 + 32), v16, v17);
    id v56 = 0;
    uint64_t v20 = objc_msgSend_sharingIdentityDataFromPCS_error_(v15, v19, v18, &v56);
    id v21 = v56;

    uint64_t v22 = (os_log_t *)MEMORY[0x1E4F1A500];
    if (v20)
    {
      id v23 = objc_alloc(MEMORY[0x1E4F19FA0]);
      uint64_t v25 = objc_msgSend_initWithData_(v23, v24, (uint64_t)v20);
      objc_msgSend_setMutableEncryptedPSK_(*(void **)(a1 + 32), v26, (uint64_t)v25);
    }
    else
    {
      if (*v5 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      os_log_t v28 = *v22;
      if (!os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        if (v21)
        {
LABEL_16:
          uint64_t v29 = *v22;
          if (os_log_type_enabled(*v22, OS_LOG_TYPE_INFO))
          {
            __int16 v31 = *(void **)(a1 + 48);
            *(_DWORD *)buf = 138412546;
            long long v58 = v31;
            __int16 v59 = 2112;
            id v60 = v21;
            _os_log_impl(&dword_1C4CFF000, v29, OS_LOG_TYPE_INFO, "Warn: Couldn't get a public sharing identity for share %@: %@", buf, 0x16u);
          }
          if (!v4) {
            objc_msgSend_setError_forRecordID_(v11, v30, (uint64_t)v21, *(void *)(a1 + 48));
          }
LABEL_24:

          goto LABEL_25;
        }
LABEL_22:
        os_log_t v32 = *v6;
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_INFO))
        {
          __int16 v33 = *(void **)(a1 + 32);
          uint64_t v34 = v32;
          uint64_t v37 = objc_msgSend_recordID(v33, v35, v36);
          uint64_t v40 = objc_msgSend_mutableEncryptedPSK(*(void **)(a1 + 32), v38, v39);
          uint64_t v43 = objc_msgSend_data(v40, v41, v42);
          *(_DWORD *)buf = 138412546;
          long long v58 = v37;
          __int16 v59 = 2112;
          id v60 = v43;
          _os_log_impl(&dword_1C4CFF000, v34, OS_LOG_TYPE_INFO, "Public sharing identity for share %@ is %@", buf, 0x16u);
        }
        goto LABEL_24;
      }
      id v52 = *(void **)(a1 + 32);
      uint64_t v25 = v28;
      uint64_t v55 = objc_msgSend_recordID(v52, v53, v54);
      *(_DWORD *)buf = 138412290;
      long long v58 = v55;
      _os_log_error_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_ERROR, "Didn't get a sharing identity from the public PCS for share %@", buf, 0xCu);
    }
    uint64_t v27 = (void *)*MEMORY[0x1E4F1A548];
    if (v21)
    {
      if (*v5 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v27);
      }
      goto LABEL_16;
    }
    if (*v5 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v27);
    }
    goto LABEL_22;
  }
LABEL_25:
  objc_msgSend__decryptPropertiesIfNeededForRecord_record_(v11, v13, *(void *)(a1 + 32), *(void *)(a1 + 48));
}

void sub_1C4F90BD4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4F90BF0(uint64_t a1)
{
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x3032000000;
  v8[3] = sub_1C4F90D04;
  void v8[4] = sub_1C4F90D14;
  id v9 = 0;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1C4F90D1C;
  v5[3] = &unk_1E64F7738;
  uint64_t v7 = v8;
  uint64_t v3 = *(void *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  objc_msgSend__addAssetDownloadTaskForRecord_completionBlock_(WeakRetained, v4, v3, v5);

  _Block_object_dispose(v8, 8);
}

void sub_1C4F90CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F90D04(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4F90D14(uint64_t a1)
{
}

void sub_1C4F90D1C(uint64_t a1, void *a2)
{
  id v6 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  uint64_t v4 = (void *)MEMORY[0x1C8789E70]();
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
}

void sub_1C4F91D40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F91D5C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_1C4F91D78(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v43 = v5;
    if (a2 == 2)
    {
      uint64_t v35 = objc_opt_new();
      uint64_t v38 = objc_msgSend_recordPCS(*(void **)(a1 + 56), v36, v37);
      objc_msgSend_setRecordPCS_(v35, v39, v38);
      objc_msgSend_setAsset_(v35, v40, (uint64_t)v43);
      objc_msgSend_addObject_(*(void **)(a1 + 64), v41, (uint64_t)v35);
    }
    else
    {
      if (a2 == 1)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v9 = v43;
          uint64_t v12 = objc_msgSend_constructedAssetDownloadURLTemplate(v9, v10, v11);
          if (v12)
          {
            uint64_t v15 = (void *)v12;
            uint64_t v16 = (void *)MEMORY[0x1E4F19E50];
            uint64_t v17 = objc_msgSend_constructedAssetDownloadURLTemplate(v9, v13, v14);
            LODWORD(v16) = objc_msgSend__templateURLRequiresAssetKey_(v16, v18, (uint64_t)v17);

            if (v16)
            {
              id v21 = (void *)MEMORY[0x1E4F19E50];
              uint64_t v22 = objc_msgSend_constructedAssetDownloadURLTemplate(v9, v19, v20);
              id v24 = objc_msgSend__canonicalizeTemplateURL_(v21, v23, (uint64_t)v22);

              uint64_t v29 = objc_msgSend_host(v24, v25, v26);
              if (v29)
              {
                uint64_t v30 = objc_msgSend_null(MEMORY[0x1E4F1CA98], v27, v28);
                __int16 v33 = objc_msgSend_keyOrErrorForHostname(*(void **)(a1 + 32), v31, v32);
                objc_msgSend_setObject_forKeyedSubscript_(v33, v34, (uint64_t)v30, v29);
              }
            }
          }
        }
        if (*(unsigned char *)(a1 + 80) && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
          objc_msgSend_addObject_(*(void **)(a1 + 40), v8, (uint64_t)v43);
        }
        else {
          objc_msgSend_addObject_(*(void **)(a1 + 48), v8, (uint64_t)v43);
        }
        goto LABEL_18;
      }
      uint64_t v35 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v6, v7);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v35, v42, *(void *)(a1 + 72), *(void *)(a1 + 32), @"CKDFetchRecordsOperation.m", 1120, @"Invalid parameters to takeActionOnValue");
    }

LABEL_18:
    id v5 = v43;
  }
}

uint64_t sub_1C4F91F88(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_1C4F91FA4(uint64_t a1)
{
  uint64_t v4 = (void *)MEMORY[0x1C8789E70]();
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    id v6 = objc_msgSend_error(*(void **)(a1 + 32), v2, v3);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
}

void sub_1C4F92558(uint64_t a1)
{
}

void sub_1C4F92560(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1C8789E70]();
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(void))(v3 + 16))();
  }
}

void sub_1C4F92AD8(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_1C4F92B10(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, v3);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1C4F92C0C;
  v5[3] = &unk_1E64F33C0;
  objc_copyWeak(&v6, &location);
  objc_copyWeak(&v7, (id *)(a1 + 40));
  void v5[4] = *(void *)(a1 + 32);
  objc_msgSend_setCompletionBlock_(v3, v4, (uint64_t)v5);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
}

void sub_1C4F92BE8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4F92C0C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v2 = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v5 = objc_msgSend_error(WeakRetained, v3, v4);
  if (v5)
  {

    uint64_t v10 = WeakRetained;
  }
  else
  {
    uint64_t v17 = objc_msgSend_transcodeServerPublicKey(WeakRetained, v6, v7);

    uint64_t v10 = WeakRetained;
    if (v17)
    {
      uint64_t v13 = objc_msgSend_transcodeServerPublicKey(WeakRetained, v8, v9);
      uint64_t v14 = objc_msgSend_keyOrErrorForHostname(v2, v18, v19);
      objc_msgSend_setObject_forKeyedSubscript_(v14, v20, (uint64_t)v13, *(void *)(a1 + 32));
LABEL_9:

      goto LABEL_10;
    }
  }
  uint64_t v13 = objc_msgSend_error(v10, v8, v9);
  uint64_t v14 = v13;
  if (!v13)
  {
    uint64_t v14 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v11, *MEMORY[0x1E4F19DD8], 1000, @"No public cert key and no error");
  }
  uint64_t v15 = objc_msgSend_keyOrErrorForHostname(v2, v11, v12);
  objc_msgSend_setObject_forKeyedSubscript_(v15, v16, (uint64_t)v14, *(void *)(a1 + 32));

  if (!v13) {
    goto LABEL_9;
  }
LABEL_10:

  id v23 = objc_msgSend_stateTransitionGroup(v2, v21, v22);
  dispatch_group_leave(v23);
}

void sub_1C4F93134(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, v3);
  id v6 = objc_msgSend_keyOrErrorForHostname(*(void **)(a1 + 32), v4, v5);
  objc_msgSend_setKeyOrErrorForHostname_(v3, v7, (uint64_t)v6);

  uint64_t v11 = objc_msgSend_recordFetchProgressBlock(*(void **)(a1 + 32), v8, v9);
  if (v11)
  {
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    v36[2] = sub_1C4F93464;
    void v36[3] = &unk_1E64F7788;
    long long v37 = *(_OWORD *)(a1 + 32);
    objc_msgSend_setDownloadPreparationBlock_(v3, v10, (uint64_t)v36);
  }
  else
  {
    objc_msgSend_setDownloadPreparationBlock_(v3, v10, 0);
  }

  uint64_t v15 = objc_msgSend_recordFetchProgressBlock(*(void **)(a1 + 32), v12, v13);
  if (v15)
  {
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    void v34[2] = sub_1C4F935E8;
    v34[3] = &unk_1E64F77B0;
    long long v35 = *(_OWORD *)(a1 + 32);
    objc_msgSend_setDownloadProgressBlock_(v3, v14, (uint64_t)v34);
  }
  else
  {
    objc_msgSend_setDownloadProgressBlock_(v3, v14, 0);
  }

  uint64_t v19 = objc_msgSend_recordFetchCommandBlock(*(void **)(a1 + 32), v16, v17);
  if (v19)
  {
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = sub_1C4F93824;
    v32[3] = &unk_1E64F77D8;
    long long v33 = *(_OWORD *)(a1 + 32);
    objc_msgSend_setDownloadCommandBlock_(v3, v18, (uint64_t)v32);
  }
  else
  {
    objc_msgSend_setDownloadCommandBlock_(v3, v18, 0);
  }

  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  void v30[2] = sub_1C4F93A5C;
  v30[3] = &unk_1E64F7800;
  long long v31 = *(_OWORD *)(a1 + 32);
  objc_msgSend_setDownloadCompletionBlock_(v3, v20, (uint64_t)v30);
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = sub_1C4F93D7C;
  v28[3] = &unk_1E64F7828;
  long long v29 = *(_OWORD *)(a1 + 32);
  objc_msgSend_setUrlFilledOutBlock_(v3, v21, (uint64_t)v28);
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = sub_1C4F940AC;
  v26[3] = &unk_1E64F01E8;
  objc_copyWeak(&v27, &location);
  v26[4] = *(void *)(a1 + 32);
  objc_msgSend_setCompletionBlock_(v3, v22, (uint64_t)v26);
  uint64_t v25 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v23, v24);
  dispatch_group_enter(v25);

  objc_destroyWeak(&v27);
  objc_destroyWeak(&location);
}

void sub_1C4F9343C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1C4F93464(uint64_t a1, void *a2)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v8 = objc_msgSend_record(v3, v4, v5);
  if (!v8)
  {
    id v21 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v6, v7);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v21, v22, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDFetchRecordsOperation.m", 1332, @"Expected non-nil record for asset %@", v3);
  }
  uint64_t v9 = objc_msgSend_downloadTasksByRecordID(*(void **)(a1 + 32), v6, v7);
  uint64_t v12 = objc_msgSend_recordID(v8, v10, v11);
  uint64_t v14 = objc_msgSend_objectForKey_(v9, v13, (uint64_t)v12);

  if (!v14)
  {
    id v23 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v15, v16);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v23, v24, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDFetchRecordsOperation.m", 1334, @"Expected non-nil download task for record %@", v8);
  }
  uint64_t v17 = objc_msgSend_progressTracker(v14, v15, v16);
  v25[0] = v3;
  uint64_t v19 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v18, (uint64_t)v25, 1);
  objc_msgSend_startTrackingItems_(v17, v20, (uint64_t)v19);
}

void sub_1C4F935E8(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  uint64_t v10 = objc_msgSend_record(v5, v6, v7);
  if (!v10)
  {
    id v27 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v8, v9);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v27, v28, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDFetchRecordsOperation.m", 1340, @"Expected non-nil record for asset %@", v5);
  }
  uint64_t v11 = objc_msgSend_downloadTasksByRecordID(*(void **)(a1 + 32), v8, v9);
  uint64_t v14 = objc_msgSend_recordID(v10, v12, v13);
  uint64_t v16 = objc_msgSend_objectForKey_(v11, v15, (uint64_t)v14);

  if (!v16)
  {
    long long v29 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v17, v18);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v29, v30, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDFetchRecordsOperation.m", 1342, @"Expected non-nil download task for record %@", v10);
  }
  uint64_t v19 = objc_msgSend_progressTracker(v16, v17, v18);
  objc_msgSend_updateProgressWithItem_progress_(v19, v20, (uint64_t)v5, a3);
  uint64_t v22 = v21;

  uint64_t v25 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), v23, v24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4F937AC;
  block[3] = &unk_1E64F19C0;
  void block[4] = *(void *)(a1 + 32);
  id v32 = v10;
  uint64_t v33 = v22;
  id v26 = v10;
  dispatch_async(v25, block);
}

void sub_1C4F937AC(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_recordFetchProgressBlock(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = (void (**)(id, void *, double))objc_claimAutoreleasedReturnValue();
  id v6 = objc_msgSend_recordID(*(void **)(a1 + 40), v4, v5);
  v7[2](v7, v6, *(double *)(a1 + 48));
}

void sub_1C4F93824(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v11 = objc_msgSend_record(v5, v7, v8);
  if (!v11)
  {
    id v23 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v9, v10);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v23, v24, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDFetchRecordsOperation.m", 1352, @"Expected non-nil record for asset %@", v5);
  }
  uint64_t v12 = objc_msgSend_downloadTasksByRecordID(*(void **)(a1 + 32), v9, v10);
  uint64_t v15 = objc_msgSend_recordID(v11, v13, v14);
  uint64_t v17 = objc_msgSend_objectForKey_(v12, v16, (uint64_t)v15);

  if (!v17)
  {
    uint64_t v25 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v18, v19);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v25, v26, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDFetchRecordsOperation.m", 1354, @"Expected non-nil download task for record %@", v11);
  }
  uint64_t v20 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), v18, v19);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4F939E4;
  block[3] = &unk_1E64F0120;
  void block[4] = *(void *)(a1 + 32);
  id v28 = v11;
  id v29 = v6;
  id v21 = v6;
  id v22 = v11;
  dispatch_async(v20, block);
}

void sub_1C4F939E4(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_recordFetchCommandBlock(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = (void (**)(id, void *, void))objc_claimAutoreleasedReturnValue();
  id v6 = objc_msgSend_recordID(*(void **)(a1 + 40), v4, v5);
  v7[2](v7, v6, *(void *)(a1 + 48));
}

void sub_1C4F93A5C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v11 = objc_msgSend_record(v5, v7, v8);
  if (!v11)
  {
    uint64_t v42 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v9, v10);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v42, v43, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDFetchRecordsOperation.m", 1362, @"Expected non-nil record for asset %@", v5);
  }
  uint64_t v12 = objc_msgSend_downloadTasksByRecordID(*(void **)(a1 + 32), v9, v10);
  uint64_t v15 = objc_msgSend_recordID(v11, v13, v14);
  uint64_t v17 = objc_msgSend_objectForKey_(v12, v16, (uint64_t)v15);

  if (!v17)
  {
    id v44 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v18, v19);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v44, v45, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDFetchRecordsOperation.m", 1364, @"Expected non-nil download task for record %@", v11);
  }
  uint64_t v20 = (void *)*MEMORY[0x1E4F1A548];
  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v20);
    }
    id v21 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      long long v35 = v21;
      uint64_t v38 = objc_msgSend_recordID(v11, v36, v37);
      id v41 = objc_msgSend_operationID(*(void **)(a1 + 32), v39, v40);
      *(_DWORD *)buf = 138413058;
      id v47 = v5;
      __int16 v48 = 2112;
      unsigned int v49 = v38;
      __int16 v50 = 2114;
      uint64_t v51 = v41;
      __int16 v52 = 2112;
      id v53 = v6;
      _os_log_error_impl(&dword_1C4CFF000, v35, OS_LOG_TYPE_ERROR, "Failed to download asset %@ for record %@ and operation %{public}@: %@", buf, 0x2Au);
    }
    uint64_t v24 = *(void **)(a1 + 32);
    uint64_t v25 = objc_msgSend_recordID(v11, v22, v23);
    objc_msgSend_setError_forRecordID_(v24, v26, (uint64_t)v6, v25);
    goto LABEL_15;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v20);
  }
  id v27 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v25 = v27;
    long long v31 = objc_msgSend_recordID(v11, v29, v30);
    uint64_t v34 = objc_msgSend_operationID(*(void **)(a1 + 32), v32, v33);
    *(_DWORD *)buf = 138412802;
    id v47 = v5;
    __int16 v48 = 2112;
    unsigned int v49 = v31;
    __int16 v50 = 2114;
    uint64_t v51 = v34;
    _os_log_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_INFO, "Downloaded asset %@ for record %@ and operation %{public}@", buf, 0x20u);

LABEL_15:
  }
  objc_msgSend_didDownloadAsset_error_(v17, v28, (uint64_t)v5, v6);
}

void sub_1C4F93D7C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v9 = objc_msgSend_asset(v5, v7, v8);
  uint64_t v12 = objc_msgSend_record(v9, v10, v11);

  if (!v12)
  {
    __int16 v45 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v13, v14);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v45, v46, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDFetchRecordsOperation.m", 1376, @"Expected non-nil record for urlInfo %@", v5);
  }
  uint64_t v15 = objc_msgSend_downloadTasksByRecordID(*(void **)(a1 + 32), v13, v14);
  uint64_t v18 = objc_msgSend_recordID(v12, v16, v17);
  uint64_t v20 = objc_msgSend_objectForKey_(v15, v19, (uint64_t)v18);

  if (!v20)
  {
    id v47 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v21, v22);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v47, v48, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDFetchRecordsOperation.m", 1378, @"Expected non-nil download task for record %@", v12);
  }
  uint64_t v23 = (void *)*MEMORY[0x1E4F1A548];
  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v23);
    }
    uint64_t v24 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = v24;
      id v41 = objc_msgSend_recordID(v12, v39, v40);
      id v44 = objc_msgSend_operationID(*(void **)(a1 + 32), v42, v43);
      *(_DWORD *)buf = 138413058;
      id v50 = v5;
      __int16 v51 = 2112;
      __int16 v52 = v41;
      __int16 v53 = 2114;
      uint64_t v54 = v44;
      __int16 v55 = 2112;
      id v56 = v6;
      _os_log_error_impl(&dword_1C4CFF000, v38, OS_LOG_TYPE_ERROR, "Failed to fill out download URL info %@ for record %@ and operation %{public}@: %@", buf, 0x2Au);
    }
    id v27 = *(void **)(a1 + 32);
    id v28 = objc_msgSend_recordID(v12, v25, v26);
    objc_msgSend_setError_forRecordID_(v27, v29, (uint64_t)v6, v28);
    goto LABEL_15;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v23);
  }
  uint64_t v30 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    id v28 = v30;
    uint64_t v34 = objc_msgSend_recordID(v12, v32, v33);
    uint64_t v37 = objc_msgSend_operationID(*(void **)(a1 + 32), v35, v36);
    *(_DWORD *)buf = 138412802;
    id v50 = v5;
    __int16 v51 = 2112;
    __int16 v52 = v34;
    __int16 v53 = 2114;
    uint64_t v54 = v37;
    _os_log_impl(&dword_1C4CFF000, v28, OS_LOG_TYPE_INFO, "Filled out URL info %@ for record %@ and operation %{public}@", buf, 0x20u);

LABEL_15:
  }
  objc_msgSend_didFillOutURLInfo_error_(v20, v31, (uint64_t)v5, v6);
}

void sub_1C4F940AC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(WeakRetained, v3, v4);
  id v10 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend_setError_(*(void **)(a1 + 32), v5, (uint64_t)v10);
  objc_msgSend__didDownloadAssetsWithError_(*(void **)(a1 + 32), v6, (uint64_t)v10);
  uint64_t v9 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v7, v8);
  dispatch_group_leave(v9);
}

void sub_1C4F943CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4F943F8(id *a1, void *a2)
{
  id v3 = a2;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1C4F94534;
  v8[3] = &unk_1E64F1880;
  a1 += 4;
  objc_copyWeak(&v9, a1);
  objc_msgSend_setDeltasFetchedBlock_(v3, v4, (uint64_t)v8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1C4F94828;
  v6[3] = &unk_1E64F09E0;
  objc_copyWeak(&v7, a1);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)v6);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&v9);
}

void sub_1C4F94510(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F94534(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v13 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v14 = objc_msgSend_mergeableValueDownloadTasks(WeakRetained, v11, v12);
    uint64_t v16 = objc_msgSend_objectForKeyedSubscript_(v14, v15, (uint64_t)v7);

    if (!v8 || v9)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v29 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        int v34 = 138412546;
        id v35 = v7;
        __int16 v36 = 2112;
        id v37 = v9;
        _os_log_error_impl(&dword_1C4CFF000, v29, OS_LOG_TYPE_ERROR, "Error fetching mergeable delta %@: %@", (uint8_t *)&v34, 0x16u);
      }
      uint64_t v24 = objc_msgSend_recordID(v7, v30, v31);
      objc_msgSend_setError_forRecordID_(v13, v32, (uint64_t)v9, v24);
    }
    else
    {
      uint64_t v17 = (void *)*MEMORY[0x1E4F1A548];
      if (!v16)
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], v17);
        }
        uint64_t v33 = *MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_FAULT))
        {
          int v34 = 138412546;
          id v35 = v7;
          __int16 v36 = 2112;
          id v37 = v8;
          _os_log_fault_impl(&dword_1C4CFF000, v33, OS_LOG_TYPE_FAULT, "No mergeable value task for fetched deltas for %@: %@", (uint8_t *)&v34, 0x16u);
        }
        goto LABEL_16;
      }
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v17);
      }
      uint64_t v18 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        int v34 = 138412546;
        id v35 = v7;
        __int16 v36 = 2112;
        id v37 = v8;
        _os_log_debug_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_DEBUG, "Fetched deltas for mergeable %@: %@", (uint8_t *)&v34, 0x16u);
      }
      id v21 = objc_msgSend_recordValue(v16, v19, v20);
      objc_msgSend_addUnmergedDeltas_(v21, v22, (uint64_t)v8);

      uint64_t v24 = objc_msgSend_CKMap_(v8, v23, (uint64_t)&unk_1F20445B0);
      id v27 = objc_msgSend_recordValue(v16, v25, v26);
      objc_msgSend_addServerDeltaMetadatas_(v27, v28, (uint64_t)v24);
    }
LABEL_16:
  }
}

uint64_t sub_1C4F94820(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_metadata(a2, (const char *)a2, a3);
}

void sub_1C4F94828(uint64_t a1)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v3 = (os_log_t *)MEMORY[0x1E4F1A500];
    uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      id v47 = v4;
      id v50 = objc_msgSend_operationID(WeakRetained, v48, v49);
      *(_DWORD *)buf = 138543362;
      __int16 v59 = v50;
      _os_log_debug_impl(&dword_1C4CFF000, v47, OS_LOG_TYPE_DEBUG, "Finished mergeable delta fetch operation for %{public}@", buf, 0xCu);
    }
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    __int16 v52 = WeakRetained;
    id v7 = objc_msgSend_mergeableValueDownloadTasks(WeakRetained, v5, v6);
    id v10 = objc_msgSend_allValues(v7, v8, v9);

    uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v54, v62, 16);
    if (v12)
    {
      uint64_t v16 = v12;
      uint64_t v17 = *(void *)v55;
      *(void *)&long long v15 = 138412546;
      long long v51 = v15;
      do
      {
        uint64_t v18 = 0;
        do
        {
          if (*(void *)v55 != v17) {
            objc_enumerationMutation(v10);
          }
          uint64_t v19 = *(void **)(*((void *)&v54 + 1) + 8 * v18);
          uint64_t v20 = objc_msgSend_recordValue(v19, v13, v14, v51);
          uint64_t v23 = v20;
          if (v20)
          {
            uint64_t v24 = objc_msgSend_unmergedDeltas(v20, v21, v22);
            id v27 = objc_msgSend_allObjects(v24, v25, v26);
            objc_msgSend_mergeLastKnownServerTimestampVectorFromDeltas_(v23, v28, (uint64_t)v27);
          }
          else
          {
            if (*v2 != -1) {
              dispatch_once(v2, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            os_log_t v31 = *v3;
            if (os_log_type_enabled(*v3, OS_LOG_TYPE_FAULT))
            {
              __int16 v36 = v31;
              objc_msgSend_mergeableValueID(v19, v37, v38);
              v40 = uint64_t v39 = v2;
              uint64_t v43 = objc_msgSend_operationID(v52, v41, v42);
              *(_DWORD *)buf = v51;
              __int16 v59 = v40;
              __int16 v60 = 2114;
              __int16 v61 = v43;
              _os_log_fault_impl(&dword_1C4CFF000, v36, OS_LOG_TYPE_FAULT, "No mergeable value delta on download task for %@ in operation %{public}@", buf, 0x16u);

              uint64_t v2 = v39;
              id v3 = (os_log_t *)MEMORY[0x1E4F1A500];
            }
          }
          id v32 = objc_msgSend_completionBlock(v19, v29, v30);

          if (v32)
          {
            objc_msgSend_completionBlock(v19, v33, v34);
            id v35 = (void (**)(void))objc_claimAutoreleasedReturnValue();
            v35[2]();
          }
          ++v18;
        }
        while (v16 != v18);
        uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v54, v62, 16);
      }
      while (v16);
    }

    id WeakRetained = v52;
    id v46 = objc_msgSend_callbackQueue(v52, v44, v45);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4F94BAC;
    block[3] = &unk_1E64F05C8;
    void block[4] = v52;
    dispatch_async(v46, block);
  }
}

void sub_1C4F94BAC(uint64_t a1, const char *a2, uint64_t a3)
{
  id v3 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), a2, a3);
  dispatch_group_leave(v3);
}

uint64_t sub_1C4F94E54(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setZoneIDs_, *(void *)(a1 + 32));
}

void sub_1C4F95A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v24 - 88));
  _Unwind_Resume(a1);
}

void sub_1C4F95A50(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend__handleRecordFetch_recordID_etagMatched_responseCode_(WeakRetained, v10, (uint64_t)v9, v8, 0, v7);

  objc_msgSend_setUserRecord_(WeakRetained, v11, (uint64_t)v9);
}

void sub_1C4F95AEC(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    id v7 = v4;
    id v8 = (objc_class *)objc_opt_class();
    id v9 = NSStringFromClass(v8);
    uint64_t v12 = objc_msgSend_ckShortDescription(v3, v10, v11);
    *(_DWORD *)buf = 138543874;
    uint64_t v33 = v9;
    __int16 v34 = 2048;
    id v35 = v3;
    __int16 v36 = 2114;
    id v37 = v12;
    _os_log_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_INFO, "Fetch user record url request completed. Waiting for all record callbacks to finish before completing request <%{public}@: %p; %{public}@>",
      buf,
      0x20u);
  }
  uint64_t v13 = objc_msgSend_requestUUID(v3, v5, v6);
  uint64_t v16 = objc_msgSend_error(v3, v14, v15);
  objc_msgSend_setRequest_(WeakRetained, v17, 0);
  objc_msgSend_finishDecryption(WeakRetained, v18, v19);
  uint64_t v22 = objc_msgSend_fetchRecordsGroup(WeakRetained, v20, v21);
  uint64_t v25 = objc_msgSend_callbackQueue(WeakRetained, v23, v24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4F95D20;
  block[3] = &unk_1E64F0120;
  id v29 = v13;
  id v30 = v16;
  id v31 = WeakRetained;
  id v26 = v16;
  id v27 = v13;
  dispatch_group_notify(v22, v25, block);
}

void sub_1C4F95D20(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1E4F1A550];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v3 = (os_log_t *)MEMORY[0x1E4F1A500];
  uint64_t v4 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    id v5 = *(void **)(a1 + 32);
    int v28 = 138543362;
    id v29 = v5;
    _os_log_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_INFO, "All record callbacks are complete. Finishing request %{public}@", (uint8_t *)&v28, 0xCu);
    uint64_t v6 = (void *)*MEMORY[0x1E4F1A548];
    if (*(void *)(a1 + 40))
    {
      if (*v2 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v6);
      }
      goto LABEL_8;
    }
    if (*v2 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v6);
    }
  }
  else if (*(void *)(a1 + 40))
  {
LABEL_8:
    os_log_t v7 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
    {
      id v9 = v7;
      id v10 = (objc_class *)objc_opt_class();
      uint64_t v11 = NSStringFromClass(v10);
      uint64_t v12 = *(void **)(a1 + 48);
      uint64_t v15 = objc_msgSend_ckShortDescription(v12, v13, v14);
      uint64_t v16 = *(void *)(a1 + 40);
      int v28 = 138544130;
      id v29 = v11;
      __int16 v30 = 2048;
      id v31 = v12;
      __int16 v32 = 2114;
      uint64_t v33 = v15;
      __int16 v34 = 2112;
      uint64_t v35 = v16;
      _os_log_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_INFO, "Failed to fetch records for <%{public}@: %p; %{public}@>: %@",
        (uint8_t *)&v28,
        0x2Au);
    }
    objc_msgSend_setError_(*(void **)(a1 + 48), v8, *(void *)(a1 + 40));
    goto LABEL_15;
  }
  os_log_t v19 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v21 = v19;
    uint64_t v22 = (objc_class *)objc_opt_class();
    uint64_t v23 = NSStringFromClass(v22);
    uint64_t v24 = *(void **)(a1 + 48);
    id v27 = objc_msgSend_ckShortDescription(v24, v25, v26);
    int v28 = 138543874;
    id v29 = v23;
    __int16 v30 = 2048;
    id v31 = v24;
    __int16 v32 = 2114;
    uint64_t v33 = v27;
    _os_log_debug_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_DEBUG, "Fetched records for <%{public}@: %p; %{public}@>",
      (uint8_t *)&v28,
      0x20u);
  }
LABEL_15:
  uint64_t v20 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 48), v17, v18);
  dispatch_group_leave(v20);
}

void sub_1C4F97884(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_recordArchivedBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_recordArchivedBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1C4F97C78(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 120));
  objc_destroyWeak((id *)(v4 - 112));
  _Unwind_Resume(a1);
}

void sub_1C4F97CC0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend__handleRecordArchived_responseCode_(WeakRetained, v7, (uint64_t)v6, v5);
}

void sub_1C4F97D38(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = objc_msgSend_error(WeakRetained, v2, v3);

  if (v4)
  {
    id v7 = objc_msgSend_error(WeakRetained, v5, v6);
    id v8 = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend_setError_(v8, v9, (uint64_t)v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4F97DD0(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = v2;
    uint64_t v12 = objc_msgSend_operationID(v8, v10, v11);
    int v13 = 138543362;
    uint64_t v14 = v12;
    _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "Archive records request %{public}@ is complete", (uint8_t *)&v13, 0xCu);
  }
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = objc_msgSend_error(v5, v3, v4);
  objc_msgSend_finishWithError_(v5, v7, (uint64_t)v6);
}

void sub_1C4F98860(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_shareParticipantKeyFetchedBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_shareParticipantKeyFetchedBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
  }
}

void sub_1C4F98F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  objc_destroyWeak(v31);
  objc_destroyWeak((id *)(v32 - 112));
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v32 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F98FBC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4F98FCC(uint64_t a1)
{
}

void sub_1C4F98FD4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  id v9 = WeakRetained;
  if (a2 && !v5)
  {
    id v10 = objc_msgSend_pcsManager(WeakRetained, v7, v8);
    uint64_t v11 = *(void *)(*(void *)(a1 + 64) + 8);
    id obj = *(id *)(v11 + 40);
    objc_msgSend_sharingIdentityDataFromPCS_error_(v10, v12, a2, &obj);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)(v11 + 40), obj);

    uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    if (v15) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = v5 == 0;
    }
    if (v16)
    {
      if (!v15)
      {
        uint64_t v17 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v13, *MEMORY[0x1E4F19DD8], 5005, @"Couldn't get sharing identity data for per-participant PCS");
        uint64_t v18 = *(void *)(*(void *)(a1 + 64) + 8);
        os_log_t v19 = *(void **)(v18 + 40);
        *(void *)(v18 + 40) = v17;
      }
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v20 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v21 = *(const void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
        *(_DWORD *)buf = 138543362;
        unsigned int v92 = v21;
        _os_log_debug_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEBUG, "Couldn't get sharing identity data for per-participant PCS. Error: %{public}@", buf, 0xCu);
      }
      goto LABEL_52;
    }
    uint64_t v23 = NSString;
    uint64_t v24 = *(void *)(a1 + 32);
    uint64_t v25 = *(void *)(a1 + 40);
    uint64_t v26 = objc_msgSend_CKBase64URLSafeString(v5, v13, v14);
    uint64_t v29 = objc_msgSend_containerScopedUserID(v9, v27, v28);
    uint64_t v32 = (void *)v29;
    if (v24)
    {
      uint64_t v33 = objc_msgSend_recordName(*(void **)(a1 + 32), v30, v31);
      uint64_t v36 = objc_msgSend_CKBase64EncodedURLSafeString(v33, v34, v35);
      uint64_t v38 = objc_msgSend_stringWithFormat_(v23, v37, @"v4:%@:%@:%@:%@", v25, v26, v32, v36);
      uint64_t v39 = *(void *)(*(void *)(a1 + 72) + 8);
      uint64_t v40 = *(void **)(v39 + 40);
      *(void *)(v39 + 40) = v38;
    }
    else
    {
      uint64_t v41 = objc_msgSend_stringWithFormat_(v23, v30, @"v2:%@:%@:%@", v25, v26, v29);
      uint64_t v42 = *(void *)(*(void *)(a1 + 72) + 8);
      uint64_t v33 = *(void **)(v42 + 40);
      *(void *)(v42 + 40) = v41;
    }

    uint64_t v45 = objc_msgSend_deviceContext(v9, v43, v44);
    __int16 v48 = objc_msgSend_testDeviceReference(v45, v46, v47);

    if (!v48)
    {
LABEL_34:
      char v71 = objc_msgSend_dataUsingEncoding_(*(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40), v49, 4);
      uint64_t v74 = objc_msgSend_CKBase64URLSafeString(v71, v72, v73);
      uint64_t v75 = *(void *)(*(void *)(a1 + 80) + 8);
      id v76 = *(void **)(v75 + 40);
      *(void *)(v75 + 40) = v74;

      uint64_t v22 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
      goto LABEL_53;
    }
    id v50 = (uint64_t *)MEMORY[0x1E4F1A550];
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    long long v51 = (os_log_t *)MEMORY[0x1E4F1A500];
    __int16 v52 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v52, OS_LOG_TYPE_DEBUG, "Verifying decryption of the invited PCS using the exported per-participant PCS key", buf, 2u);
    }
    long long v55 = objc_msgSend_pcsManager(v9, v53, v54);
    uint64_t v56 = *(void *)(*(void *)(a1 + 64) + 8);
    id v89 = *(id *)(v56 + 40);
    long long v58 = (const void *)objc_msgSend_createSharingIdentityFromData_error_(v55, v57, (uint64_t)v5, &v89);
    objc_storeStrong((id *)(v56 + 40), v89);

    if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) || !v58)
    {
      if (*v50 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      __int16 v77 = *v51;
      if (os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1C4CFF000, v77, OS_LOG_TYPE_ERROR, "Couldn't create a participant identity from the exported per participant key", buf, 2u);
      }
      if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
      {
        uint64_t v79 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v78, *MEMORY[0x1E4F19DD8], 5005, @"Couldn't create a participant identity from the exported per participant key");
        uint64_t v80 = *(void *)(*(void *)(a1 + 64) + 8);
        __int16 v81 = *(void **)(v80 + 40);
        *(void *)(v80 + 40) = v79;
      }
      if (!v58) {
        goto LABEL_52;
      }
    }
    else
    {
      __int16 v61 = objc_msgSend_pcsManager(v9, v59, v60);
      int v64 = objc_msgSend_invitedProtectionData(*(void **)(a1 + 48), v62, v63);
      uint64_t v65 = *(void *)(*(void *)(a1 + 64) + 8);
      id v88 = *(id *)(v65 + 40);
      id v67 = (const void *)objc_msgSend_createSharePCSFromData_sharingIdentity_error_(v61, v66, (uint64_t)v64, v58, &v88);
      objc_storeStrong((id *)(v65 + 40), v88);

      uint64_t v68 = (void *)*MEMORY[0x1E4F1A548];
      uint64_t v69 = *v50;
      if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) && v67)
      {
        if (v69 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], v68);
        }
        char v70 = *v51;
        if (os_log_type_enabled(*v51, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          unsigned int v92 = v67;
          _os_log_debug_impl(&dword_1C4CFF000, v70, OS_LOG_TYPE_DEBUG, "Successfully decrypted the share invited PCS: %@", buf, 0xCu);
        }
        CFRelease(v58);
        CFRelease(v67);
        goto LABEL_34;
      }
      if (v69 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v68);
      }
      long long v82 = *v51;
      if (os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
      {
        uint64_t v87 = *(const void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
        *(_DWORD *)buf = 138543362;
        unsigned int v92 = v87;
        _os_log_error_impl(&dword_1C4CFF000, v82, OS_LOG_TYPE_ERROR, "Couldn't create a participant identity from the exported per participant key: %{public}@", buf, 0xCu);
      }
      if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
      {
        uint64_t v84 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v83, *MEMORY[0x1E4F19DD8], 5005, @"Couldn't decrypt the share invitedPCS using per-participant PCS");
        uint64_t v85 = *(void *)(*(void *)(a1 + 64) + 8);
        long long v86 = *(void **)(v85 + 40);
        *(void *)(v85 + 40) = v84;
      }
      if (v67) {
        CFRelease(v67);
      }
    }
    CFRelease(v58);
LABEL_52:
    uint64_t v22 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    goto LABEL_53;
  }
  if (!v5)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v7, *MEMORY[0x1E4F19DD8], 5004, @"Couldn't decrypt our per-participant PCS");
    id v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v22 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
LABEL_53:
  v22();
}

void sub_1C4F99A78(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend__performCallbackForShareID_withParticipantKey_error_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a2, a3);
  uint64_t v6 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v4, v5);
  dispatch_group_leave(v6);
}

void sub_1C4F99D68(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1C4F99EF8;
  v9[3] = &unk_1E64F1AD8;
  objc_copyWeak(&v10, &location);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v4, (uint64_t)v9);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1C4F99F84;
  v6[3] = &unk_1E64F0170;
  objc_copyWeak(&v7, &location);
  objc_copyWeak(&v8, &from);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)v6);
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4F99EBC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 64));
  objc_destroyWeak((id *)(v4 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4F99EF8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend__handleFetchedShare_withID_error_(WeakRetained, v10, (uint64_t)v9, v8, v7);
}

void sub_1C4F99F84(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = v4;
    uint64_t v15 = objc_msgSend_operationID(WeakRetained, v13, v14);
    uint64_t v20 = objc_msgSend_error(v3, v16, v17);
    if (v20) {
      uint64_t v21 = @" with error ";
    }
    else {
      uint64_t v21 = &stru_1F2044F30;
    }
    uint64_t v22 = objc_msgSend_error(v3, v18, v19);
    uint64_t v23 = (void *)v22;
    *(_DWORD *)uint64_t v25 = 138543874;
    if (v22) {
      uint64_t v24 = (__CFString *)v22;
    }
    else {
      uint64_t v24 = &stru_1F2044F30;
    }
    *(void *)&void v25[4] = v15;
    __int16 v26 = 2114;
    id v27 = v21;
    __int16 v28 = 2112;
    uint64_t v29 = v24;
    _os_log_debug_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_DEBUG, "Fetch share participant key operation %{public}@ finished%{public}@%@", v25, 0x20u);
  }
  id v7 = objc_msgSend_error(v3, v5, v6, *(void *)v25);
  objc_msgSend_setError_(WeakRetained, v8, (uint64_t)v7);

  uint64_t v11 = objc_msgSend_stateTransitionGroup(WeakRetained, v9, v10);
  dispatch_group_leave(v11);
}

void sub_1C4F9A2E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1C4F9A470;
  v9[3] = &unk_1E64F6590;
  objc_copyWeak(&v10, &location);
  objc_msgSend_setSaveCompletionBlock_(v3, v4, (uint64_t)v9);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1C4F9A5C8;
  v6[3] = &unk_1E64F0170;
  objc_copyWeak(&v7, &location);
  objc_copyWeak(&v8, &from);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)v6);
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4F9A434(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 64));
  objc_destroyWeak((id *)(v4 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4F9A470(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v12 = WeakRetained;
  if (v8)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    int v13 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      int v20 = 138412546;
      id v21 = v7;
      __int16 v22 = 2112;
      id v23 = v8;
      _os_log_debug_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_DEBUG, "Error updating share %@ on the server: %@", (uint8_t *)&v20, 0x16u);
    }
  }
  else
  {
    uint64_t v14 = objc_msgSend_shareIDs(WeakRetained, v10, v11);
    objc_msgSend_addObject_(v14, v15, (uint64_t)v7);

    uint64_t v18 = objc_msgSend_sharesNeedingUpdateByID(v12, v16, v17);
    objc_msgSend_setObject_forKeyedSubscript_(v18, v19, 0, v7);
  }
}

void sub_1C4F9A5C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v3 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v15 = 0;
    _os_log_debug_impl(&dword_1C4CFF000, v3, OS_LOG_TYPE_DEBUG, "All shares have been updated on the server", v15, 2u);
  }
  uint64_t v6 = objc_msgSend_error(WeakRetained, v4, v5);

  if (!v6)
  {
    id v9 = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v12 = objc_msgSend_error(v9, v10, v11);
    objc_msgSend_setError_(WeakRetained, v13, (uint64_t)v12);
  }
  uint64_t v14 = objc_msgSend_stateTransitionGroup(WeakRetained, v7, v8);
  dispatch_group_leave(v14);
}

uint64_t sub_1C4F9A93C()
{
  id v0 = [CKDDeviceIDManager alloc];
  qword_1EBBCFFF8 = objc_msgSend_initInternal(v0, v1, v2);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4F9BFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F9BFD8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4F9BFE8(uint64_t a1)
{
}

void sub_1C4F9BFF0(uint64_t a1, const char *a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend__perServiceLookupKeyForContainer_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
  if (*(unsigned char *)(a1 + 72)) {
    goto LABEL_2;
  }
  int v20 = *(void **)(a1 + 32);
  id v21 = objc_msgSend_containerID(*(void **)(a1 + 40), v3, v4);
  uint64_t v24 = objc_msgSend_environment(v21, v22, v23);
  __int16 v26 = objc_msgSend_deviceIDsByContainerIdentifierInContainerEnvironment_(v20, v25, v24);
  uint64_t v28 = objc_msgSend_objectForKeyedSubscript_(v26, v27, (uint64_t)v5);

  if (!v28)
  {
LABEL_2:
    uint64_t v6 = objc_msgSend_deviceContext(*(void **)(a1 + 40), v3, v4);
    id v9 = objc_msgSend_testDeviceReference(v6, v7, v8);

    if (v9)
    {
      if (qword_1EBBD0010 != -1) {
        dispatch_once(&qword_1EBBD0010, &unk_1F20445F0);
      }
      uint64_t v12 = NSString;
      int v13 = objc_msgSend_containerID(*(void **)(a1 + 40), v10, v11);
      BOOL v16 = objc_msgSend_containerIdentifier(v13, v14, v15);
      uint64_t v18 = objc_msgSend_stringWithFormat_(v12, v17, @"%@-%@", v16, qword_1EBBD0008);

      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v18);
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v19 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v65 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v68 = v65;
        __int16 v69 = 2112;
        char v70 = v5;
        _os_log_debug_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_DEBUG, "Returning test deviceID %@ for %@", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v18 = objc_msgSend__fetchDeviceIDForService_lookupKey_keychainSuccess_(*(void **)(a1 + 32), v10, *(void *)(a1 + 48), *(void *)(a1 + 56), 0);
      if (v18 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        if (!*(unsigned char *)(a1 + 72))
        {
          uint64_t v33 = *(void **)(a1 + 32);
          __int16 v34 = objc_msgSend_containerID(*(void **)(a1 + 40), v31, v32);
          uint64_t v37 = objc_msgSend_environment(v34, v35, v36);
          uint64_t v39 = objc_msgSend_deviceIDsByContainerIdentifierInContainerEnvironment_(v33, v38, v37);
          objc_msgSend_setObject_forKeyedSubscript_(v39, v40, (uint64_t)v18, v5);
        }
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v18);
      }
      else if (*(unsigned char *)(a1 + 73))
      {
        uint64_t v41 = CKCreateGUID();
        uint64_t v42 = *(void *)(*(void *)(a1 + 64) + 8);
        uint64_t v43 = *(void **)(v42 + 40);
        *(void *)(v42 + 40) = v41;

        uint64_t v44 = (void *)MEMORY[0x1E4F1A550];
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v45 = (os_log_t *)MEMORY[0x1E4F1A500];
        id v46 = *MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
        {
          uint64_t v48 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
          *(_DWORD *)buf = 138543618;
          uint64_t v68 = v48;
          __int16 v69 = 2112;
          char v70 = v5;
          _os_log_impl(&dword_1C4CFF000, v46, OS_LOG_TYPE_INFO, "Creating new deviceID %{public}@ for %@", buf, 0x16u);
        }
        char v66 = 0;
        objc_msgSend__saveDeviceIdentifier_forService_lookupKey_sysBound_success_(*(void **)(a1 + 32), v47, *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), 0, &v66);
        if (!v66)
        {
          if (*v44 != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          long long v51 = *v45;
          if (os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1C4CFF000, v51, OS_LOG_TYPE_ERROR, "Failed to save new device ID to keychain, returning nil", buf, 2u);
          }
          uint64_t v52 = *(void *)(*(void *)(a1 + 64) + 8);
          __int16 v53 = *(void **)(v52 + 40);
          *(void *)(v52 + 40) = 0;
        }
        if (!*(unsigned char *)(a1 + 72))
        {
          uint64_t v54 = *(void **)(a1 + 32);
          long long v55 = objc_msgSend_containerID(*(void **)(a1 + 40), v49, v50);
          uint64_t v58 = objc_msgSend_environment(v55, v56, v57);
          uint64_t v60 = objc_msgSend_deviceIDsByContainerIdentifierInContainerEnvironment_(v54, v59, v58);
          objc_msgSend_setObject_forKeyedSubscript_(v60, v61, (uint64_t)v18, v5);
        }
      }
      else
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v62 = *MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1C4CFF000, v62, OS_LOG_TYPE_INFO, "Warn: No deviceID available, returning nil", buf, 2u);
        }
        uint64_t v63 = *(void *)(*(void *)(a1 + 64) + 8);
        int v64 = *(void **)(v63 + 40);
        *(void *)(v63 + 40) = 0;
      }
    }
  }
  else
  {
    uint64_t v29 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v30 = *(void **)(v29 + 40);
    *(void *)(v29 + 40) = v28;
  }
}

uint64_t sub_1C4F9C4F0()
{
  qword_1EBBD0008 = CKCreateGUID();
  return MEMORY[0x1F41817F8]();
}

void sub_1C4F9C6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4F9C6D8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 64)
    || (objc_msgSend_globalDeviceID(*(void **)(a1 + 32), a2, a3), (uint64_t v9 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    char v22 = 1;
    uint64_t v4 = objc_msgSend__fetchDeviceIDForService_lookupKey_keychainSuccess_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(void *)(a1 + 48), &v22);
    uint64_t v5 = (void *)v4;
    if (v22)
    {
      if (v4)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          if (!*(unsigned char *)(a1 + 64)) {
            objc_msgSend_setGlobalDeviceID_(*(void **)(a1 + 32), v6, (uint64_t)v5);
          }
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v5);
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          id v7 = *MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
          {
            uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
            *(_DWORD *)buf = 138543362;
            uint64_t v24 = v8;
            _os_log_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_INFO, "Fetched global deviceID %{public}@ from keychain.", buf, 0xCu);
          }
          goto LABEL_29;
        }
      }
      if (!*(unsigned char *)(a1 + 65)) {
        goto LABEL_29;
      }
      uint64_t v10 = CKCreateGUID();
      uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;

      int v13 = (void *)MEMORY[0x1E4F1A550];
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v14 = (os_log_t *)MEMORY[0x1E4F1A500];
      uint64_t v15 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        *(_DWORD *)buf = 138543362;
        uint64_t v24 = v17;
        _os_log_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_INFO, "Creating new global deviceID %{public}@", buf, 0xCu);
      }
      objc_msgSend__saveDeviceIdentifier_forService_lookupKey_sysBound_success_(*(void **)(a1 + 32), v16, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(void *)(a1 + 40), *(void *)(a1 + 48), 1, &v22);
      if (v22) {
        goto LABEL_29;
      }
      if (*v13 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v18 = *v14;
      if (!os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
LABEL_28:
        uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8);
        id v21 = *(void **)(v20 + 40);
        *(void *)(v20 + 40) = 0;

LABEL_29:
        return;
      }
      *(_WORD *)buf = 0;
      uint64_t v19 = "Unexpected error saving new global deviceID to keychain, returning nil";
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v18 = *MEMORY[0x1E4F1A500];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_28;
      }
      *(_WORD *)buf = 0;
      uint64_t v19 = "Unexpected error fetching global deviceID from keychain, returning nil.";
    }
    _os_log_error_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_ERROR, v19, buf, 2u);
    goto LABEL_28;
  }
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = v9;
  MEMORY[0x1F41817F8]();
}

void sub_1C4F9DA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
}

void sub_1C4F9DACC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v7 = objc_msgSend_deltasToSave(v4, v5, v6);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += objc_msgSend_count(v7, v8, v9);

  objc_msgSend_pendingReplacementRequests(v4, v10, v11);
  id v14 = (id)objc_claimAutoreleasedReturnValue();

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += objc_msgSend_count(v14, v12, v13);
}

void sub_1C4F9DD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4F9DD44(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4F9DD54(uint64_t a1)
{
}

uint64_t sub_1C4F9DD5C(uint64_t a1, int a2, int a3, id obj)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), obj);
  return 1;
}

void sub_1C4F9DD94(uint64_t a1, char a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v6 = v4;
  if ((a2 & 1) == 0)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v13, v17, 16);
    if (v7)
    {
      uint64_t v10 = v7;
      uint64_t v11 = *(void *)v14;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v14 != v11) {
            objc_enumerationMutation(v6);
          }
          objc_msgSend_removeDB(*(void **)(*((void *)&v13 + 1) + 8 * v12++), v8, v9);
        }
        while (v10 != v12);
        uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v8, (uint64_t)&v13, v17, 16);
      }
      while (v10);
    }
  }
}

void sub_1C4F9E4A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4F9E4C0(uint64_t a1, void *a2)
{
}

void sub_1C4F9E548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

uint64_t sub_1C4F9EB98(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_deleteCallbackWithMetadata_error_, *(void *)(a1 + 40));
}

uint64_t sub_1C4F9EBA8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_saveCallbackWithMetadata_error_, *(void *)(a1 + 40));
}

void sub_1C4F9F024(uint64_t a1, void *a2)
{
  id v27 = a2;
  if ((objc_msgSend_shouldOnlySaveAssetContent(*(void **)(a1 + 32), v3, v4) & 1) == 0)
  {
    uint64_t v7 = objc_msgSend_recordsUploaded(v27, v5, v6);
    objc_msgSend_setRecordsUploaded_(v27, v8, v7 + 1);
  }
  uint64_t v9 = objc_msgSend_record(*(void **)(a1 + 40), v5, v6);
  uint64_t v12 = objc_msgSend_assetCount(v9, v10, v11);
  uint64_t v15 = objc_msgSend_assetsUploaded(v27, v13, v14);
  objc_msgSend_setAssetsUploaded_(v27, v16, v15 + v12);

  uint64_t v19 = objc_msgSend_record(*(void **)(a1 + 40), v17, v18);
  uint64_t v22 = objc_msgSend_assetDiskSize(v19, v20, v21);
  uint64_t v25 = objc_msgSend_assetsUploadedFileSize(v27, v23, v24);
  objc_msgSend_setAssetsUploadedFileSize_(v27, v26, v25 + v22);
}

void sub_1C4F9F214(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v4 = objc_msgSend_recordsDeleted(v6, v2, v3);
  objc_msgSend_setRecordsDeleted_(v6, v5, v4 + 1);
}

void sub_1C4F9F584(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v4 = objc_msgSend_retries(v6, v2, v3);
  objc_msgSend_setRetries_(v6, v5, v4 + 1);
}

void sub_1C4F9FD48(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v4 = objc_msgSend_retries(v6, v2, v3);
  objc_msgSend_setRetries_(v6, v5, v4 + 1);
}

void sub_1C4FA0084(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4FA00A8(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = objc_msgSend_container(WeakRetained, v3, v4);
  objc_msgSend_setCachedEnvironment_(v5, v6, a2);

  uint64_t v9 = objc_msgSend_stateTransitionGroup(WeakRetained, v7, v8);
  dispatch_group_leave(v9);
}

void sub_1C4FA04D4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C4FA04F8(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend_setError_(WeakRetained, v4, (uint64_t)v3);

  uint64_t v7 = objc_msgSend_stateTransitionGroup(WeakRetained, v5, v6);
  dispatch_group_leave(v7);
}

void sub_1C4FA05DC(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v6 = objc_msgSend_sideEffectRecordIDs(v3, v4, v5);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v25, v29, 16);
  if (v8)
  {
    uint64_t v11 = v8;
    uint64_t v12 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v26 != v12) {
          objc_enumerationMutation(v6);
        }
        uint64_t v14 = *(void *)(*((void *)&v25 + 1) + 8 * i);
        uint64_t v15 = objc_msgSend_handlersByRecordID(*(void **)(a1 + 32), v9, v10);
        uint64_t v17 = objc_msgSend_objectForKeyedSubscript_(v15, v16, v14);

        if (v17)
        {
          if (objc_msgSend_isDelete(v17, v18, v19))
          {
            objc_msgSend_noteSideEffectRecordPendingDelete_(v3, v20, v14);
          }
          else
          {
            uint64_t v22 = objc_msgSend_record(v17, v20, v21);
            objc_msgSend_noteSideEffectRecordPendingModify_(v3, v23, (uint64_t)v22);
          }
        }
        else
        {
          objc_msgSend_noteSideEffectRecordAbsent_(v3, v18, v14);
        }
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v25, v29, 16);
    }
    while (v11);
  }
  if (objc_msgSend_isShare(v3, v9, v10)) {
    objc_msgSend_setState_(v3, v24, 1);
  }
  else {
    objc_msgSend_setState_(v3, v24, 2);
  }
}

void sub_1C4FA10D4(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (objc_msgSend_isDelete(v10, v3, v4))
  {
    objc_msgSend_setState_(v10, v5, 1);
  }
  else
  {
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = objc_msgSend_shareID(v10, v5, v6);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v9, (uint64_t)v10, v8);
  }
}

void sub_1C4FA1158(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, v3);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = sub_1C4FA12B8;
  v12[3] = &unk_1E64F39A0;
  id v13 = *(id *)(a1 + 32);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v4, (uint64_t)v12);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1C4FA13EC;
  v8[3] = &unk_1E64F0238;
  objc_copyWeak(&v11, &location);
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v9 = v5;
  uint64_t v10 = v6;
  objc_msgSend_setCompletionBlock_(v3, v7, (uint64_t)v8);

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);
}

void sub_1C4FA1294(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4FA12B8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v10 = a4;
  if (v8)
  {
    id v11 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v9, (uint64_t)v8);
    objc_msgSend_updateParticipantsForFetchedShare_error_(v11, v12, (uint64_t)v7, v10);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v13 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      int v14 = 138412290;
      id v15 = v10;
      _os_log_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_INFO, "Warn: Got a fetched share callback without a recordID: %@", (uint8_t *)&v14, 0xCu);
    }
  }
}

void sub_1C4FA13EC(void **a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = objc_msgSend_error(WeakRetained, v3, v4);

  if (v5)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v8 = objc_msgSend_allValues(a1[4], v6, v7, 0);
    uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v21, v25, 16);
    if (v10)
    {
      uint64_t v13 = v10;
      uint64_t v14 = *(void *)v22;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v22 != v14) {
            objc_enumerationMutation(v8);
          }
          uint64_t v16 = *(void **)(*((void *)&v21 + 1) + 8 * i);
          if (objc_msgSend_state(v16, v11, v12) == 10)
          {
            if (objc_msgSend_CKIsObjectNotFoundError(v5, v11, v12))
            {
              objc_msgSend_setState_(v16, v17, 1);
              objc_msgSend_setError_(v16, v18, 0);
            }
            else
            {
              objc_msgSend_setState_(v16, v17, 12);
              objc_msgSend_setError_(v16, v19, (uint64_t)v5);
            }
          }
        }
        uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v21, v25, 16);
      }
      while (v13);
    }
  }
  uint64_t v20 = objc_msgSend_stateTransitionGroup(a1[5], v6, v7);
  dispatch_group_leave(v20);
}

void sub_1C4FA1814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4FA1848(uint64_t a1, void *a2)
{
  id v35 = a2;
  if (objc_msgSend_isDelete(v35, v3, v4)) {
    goto LABEL_8;
  }
  uint64_t v7 = objc_msgSend_record(v35, v5, v6);
  if (objc_msgSend_hasUpdatedParent(v7, v8, v9))
  {
    uint64_t v12 = objc_msgSend_record(v35, v10, v11);
    id v15 = objc_msgSend_parent(v12, v13, v14);

    uint64_t v18 = v35;
    if (!v15) {
      goto LABEL_6;
    }
    uint64_t v19 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    uint64_t v7 = objc_msgSend_record(v35, v16, v17);
    long long v22 = objc_msgSend_parent(v7, v20, v21);
    long long v25 = objc_msgSend_recordID(v22, v23, v24);
    objc_msgSend_addObject_(v19, v26, (uint64_t)v25);
  }
  uint64_t v18 = v35;
LABEL_6:
  long long v27 = objc_msgSend_record(v18, v16, v17);
  uint64_t v30 = objc_msgSend_share(v27, v28, v29);

  if (v30)
  {
    uint64_t v33 = objc_msgSend_record(v35, v31, v32);
    objc_msgSend_setWantsChainPCS_(v33, v34, 1);
  }
LABEL_8:
}

void sub_1C4FA1AD8(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (objc_msgSend_isDelete(v3, v4, v5))
  {
    objc_msgSend_setState_(v3, v6, 5);
  }
  else if (objc_msgSend_useEncryption(*(void **)(a1 + 32), v6, v7))
  {
    uint64_t v10 = objc_msgSend_pcsGroup(v3, v8, v9);
    dispatch_group_enter(v10);

    objc_msgSend_addObject_(*(void **)(a1 + 40), v11, (uint64_t)v3);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v12 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = v12;
      uint64_t v17 = objc_msgSend_recordID(v3, v15, v16);
      int v18 = 138412290;
      uint64_t v19 = v17;
      _os_log_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_INFO, "Skipping fetch of share PCS data for %@ because encryption is disabled", (uint8_t *)&v18, 0xCu);
    }
    objc_msgSend_setState_(v3, v13, 3);
  }
}

void sub_1C4FA1E08(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (objc_msgSend_isDelete(v3, v4, v5)
    && (objc_msgSend__needsSigningPCS(*(void **)(a1 + 32), v6, v7) & 1) == 0)
  {
    objc_msgSend_setState_(v3, v6, 5);
  }
  else if (objc_msgSend_useEncryption(*(void **)(a1 + 32), v6, v7))
  {
    uint64_t v10 = objc_msgSend_pcsGroup(v3, v8, v9);
    dispatch_group_enter(v10);

    objc_msgSend_addObject_(*(void **)(a1 + 40), v11, (uint64_t)v3);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v12 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = v12;
      uint64_t v17 = objc_msgSend_recordID(v3, v15, v16);
      int v18 = 138412290;
      uint64_t v19 = v17;
      _os_log_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_INFO, "Skipping fetch of record PCS data for %@ because encryption is disabled", (uint8_t *)&v18, 0xCu);
    }
    objc_msgSend_setState_(v3, v13, 3);
  }
}

void sub_1C4FA32D8(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  if (objc_msgSend_count(v5, v6, v7))
  {
    uint64_t v9 = objc_msgSend_CKMap_(v5, v8, (uint64_t)&unk_1F2044690);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v10, (uint64_t)v9, v11);
  }
}

id sub_1C4FA3368(uint64_t a1, void *a2, uint64_t a3)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = @"assetReference";
  id v3 = objc_msgSend_assetReference(a2, (const char *)a2, a3);
  v8[0] = v3;
  id v5 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v4, (uint64_t)v8, &v7, 1);

  return v5;
}

void sub_1C4FA3AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void sub_1C4FA3B40(uint64_t a1, void *a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v7 = a3;
  if (v7)
  {
    objc_msgSend_setObject_forKey_(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v6, (uint64_t)v7, v5);
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v8 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = v8;
      uint64_t v12 = objc_msgSend_CKLowercaseHexStringWithoutSpaces(v5, v10, v11);
      int v14 = 138412290;
      id v15 = v12;
      _os_log_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_INFO, "cache clone context for asset with signature %@", (uint8_t *)&v14, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v13 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14) = 0;
      _os_log_error_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_ERROR, "received a nil clone context", (uint8_t *)&v14, 2u);
    }
  }
}

void sub_1C4FA3CF0(uint64_t a1, void *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  objc_msgSend_setDatabaseScope_(v3, v4, *(void *)(a1 + 48));
  if (objc_msgSend_useClearAssetEncryption(*(void **)(a1 + 32), v5, v6))
  {
    long long v27 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v7, v8);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v27, v28, *(void *)(a1 + 56), *(void *)(a1 + 32), @"CKDModifyRecordsOperation.m", 1517, @"useClearAssetEncryption should be false!");
  }
  if (objc_msgSend_databaseScope(v3, v7, v8) == 2)
  {
    objc_msgSend_setUseEncryption_(v3, v9, 1);
  }
  else
  {
    BOOL v13 = objc_msgSend_databaseScope(v3, v9, v10) == 3;
    objc_msgSend_setUseEncryption_(v3, v14, v13);
  }
  id v15 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v11, v12);
  dispatch_group_enter(v15);

  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  v33[2] = sub_1C4FA40B4;
  v33[3] = &unk_1E64F12C0;
  objc_copyWeak(&v35, &location);
  id v34 = *(id *)(a1 + 40);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v16, (uint64_t)v33);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = sub_1C4FA416C;
  v29[3] = &unk_1E64F33C0;
  objc_copyWeak(&v31, &location);
  objc_copyWeak(&v32, &from);
  id v30 = *(id *)(a1 + 40);
  objc_msgSend_setCompletionBlock_(v3, v17, (uint64_t)v29);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  int v18 = (id)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v21 = (objc_class *)objc_opt_class();
    NSStringFromClass(v21);
    id v22 = (id)objc_claimAutoreleasedReturnValue();
    long long v23 = *(void **)(a1 + 32);
    uint64_t v26 = objc_msgSend_ckShortDescription(v23, v24, v25);
    *(_DWORD *)buf = 134218754;
    id v39 = v3;
    __int16 v40 = 2114;
    id v41 = v22;
    __int16 v42 = 2048;
    uint64_t v43 = v23;
    __int16 v44 = 2114;
    uint64_t v45 = v26;
    _os_log_debug_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_DEBUG, "Starting fetch records operation %p for <%{public}@: %p; %{public}@>",
      buf,
      0x2Au);
  }
  objc_msgSend_hash(*(void **)(a1 + 32), v19, v20);
  kdebug_trace();

  objc_destroyWeak(&v32);
  objc_destroyWeak(&v31);

  objc_destroyWeak(&v35);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4FA4058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,id a24)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a24);
  _Unwind_Resume(a1);
}

void sub_1C4FA40B4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v13 = a2;
  id v7 = a4;
  id v8 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v10, (uint64_t)v8);

  if (v11) {
    objc_msgSend_assetArray_didFetchRecord_error_(WeakRetained, v12, (uint64_t)v11, v13, v7);
  }
}

void sub_1C4FA416C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v2 = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend__didCompleteRecordFetchOperation_assetArrayByRecordID_(WeakRetained, v3, (uint64_t)v2, *(void *)(a1 + 32));
  uint64_t v6 = objc_msgSend_stateTransitionGroup(WeakRetained, v4, v5);
  dispatch_group_leave(v6);
}

void sub_1C4FA48AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void sub_1C4FA4900(uint64_t a1, void *a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v7 = a3;
  if (v7)
  {
    objc_msgSend_setObject_forKey_(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v6, (uint64_t)v7, v5);
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v8 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = v8;
      uint64_t v12 = objc_msgSend_CKLowercaseHexStringWithoutSpaces(v5, v10, v11);
      int v14 = 138412290;
      id v15 = v12;
      _os_log_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_INFO, "cache clone context for pacakge item with signature %@", (uint8_t *)&v14, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v13 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14) = 0;
      _os_log_error_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_ERROR, "received a nil clone context", (uint8_t *)&v14, 2u);
    }
  }
}

void sub_1C4FA4AB0(uint64_t a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_msgSend_setDatabaseScope_(v3, v4, *(void *)(a1 + 48));
  if (objc_msgSend_databaseScope(v3, v5, v6) != 2 && objc_msgSend_databaseScope(v3, v7, v8) != 3)
  {
    uint64_t v24 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v7, v9);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v24, v25, *(void *)(a1 + 56), *(void *)(a1 + 32), @"CKDModifyRecordsOperation.m", 1608, @"Expected valid source for CKAssetReference");
  }
  objc_msgSend_setUseEncryption_(v3, v7, 1);
  uint64_t v12 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v10, v11);
  dispatch_group_enter(v12);

  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  id v31[2] = sub_1C4FA4E10;
  v31[3] = &unk_1E64F12C0;
  objc_copyWeak(&v33, &location);
  id v32 = *(id *)(a1 + 40);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v13, (uint64_t)v31);
  uint64_t v26 = MEMORY[0x1E4F143A8];
  uint64_t v27 = 3221225472;
  long long v28 = sub_1C4FA4EDC;
  uint64_t v29 = &unk_1E64F09E0;
  objc_copyWeak(&v30, &location);
  objc_msgSend_setCompletionBlock_(v3, v14, (uint64_t)&v26);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v15 = (id)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    int v18 = (objc_class *)objc_opt_class();
    NSStringFromClass(v18);
    id v19 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v20 = *(void **)(a1 + 32);
    long long v23 = objc_msgSend_ckShortDescription(v20, v21, v22, v26, v27, v28, v29);
    *(_DWORD *)buf = 134218754;
    id v36 = v3;
    __int16 v37 = 2114;
    id v38 = v19;
    __int16 v39 = 2048;
    __int16 v40 = v20;
    __int16 v41 = 2114;
    __int16 v42 = v23;
    _os_log_debug_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_DEBUG, "Starting fetch records operation %p for <%{public}@: %p; %{public}@>",
      buf,
      0x2Au);
  }
  objc_msgSend_hash(*(void **)(a1 + 32), v16, v17);
  kdebug_trace();
  objc_destroyWeak(&v30);

  objc_destroyWeak(&v33);
  objc_destroyWeak(&location);
}

void sub_1C4FA4DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4FA4E10(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v15 = a2;
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v10, (uint64_t)v7);
  if (v12)
  {
    id v13 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v11, (uint64_t)v7);
    objc_msgSend_packageArray_didFetchRecord_error_(WeakRetained, v14, (uint64_t)v13, v15, v8);
  }
}

void sub_1C4FA4EDC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  dispatch_group_leave(v3);
}

void sub_1C4FA4FFC(uint64_t a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v6 = objc_msgSend_assetsWhichNeedRecordFetch(v3, v4, v5);
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v32, v36, 16);
  if (v8)
  {
    uint64_t v11 = v8;
    uint64_t v12 = *(void *)v33;
    unint64_t v13 = 0x1E4F28000uLL;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v33 != v12) {
          objc_enumerationMutation(v6);
        }
        uint64_t v15 = *(void *)(*((void *)&v32 + 1) + 8 * i);
        if (objc_msgSend_useClearAssetEncryption(*(void **)(a1 + 32), v9, v10))
        {
          uint64_t v22 = objc_msgSend_currentHandler(*(void **)(v13 + 2816), v16, v17);
          objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v22, v23, *(void *)(a1 + 48), *(void *)(a1 + 32), @"CKDModifyRecordsOperation.m", 1643, @"useClearAssetEncryption should be false!");
        }
        if (objc_msgSend_databaseScope(*(void **)(a1 + 32), v16, v17) != 1
          && objc_msgSend_databaseScope(*(void **)(a1 + 32), v18, v19) != 2
          && objc_msgSend_databaseScope(*(void **)(a1 + 32), v18, v20) != 3)
        {
          uint64_t v24 = objc_msgSend_currentHandler(*(void **)(v13 + 2816), v18, v21);
          uint64_t v25 = *(void *)(a1 + 48);
          uint64_t v26 = *(void **)(a1 + 32);
          uint64_t v29 = objc_msgSend_databaseScope(v26, v27, v28);
          id v30 = v26;
          unint64_t v13 = 0x1E4F28000;
          objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v24, v31, v25, v30, @"CKDModifyRecordsOperation.m", 1644, @"Expected valid destination for CKAssetReference, not %lu", v29);
        }
        objc_msgSend_setObject_forKey_(*(void **)(a1 + 40), v18, (uint64_t)v3, v15);
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v32, v36, 16);
    }
    while (v11);
  }
  objc_msgSend_setState_(v3, v9, 4);
}

void sub_1C4FA556C(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v19 = 0;
  uint64_t v5 = objc_msgSend_prepareAssetsForUploadWithError_(v3, v4, (uint64_t)&v19);
  id v6 = v19;
  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v7 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      id v22 = v3;
      __int16 v23 = 2112;
      id v24 = v6;
      _os_log_error_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_ERROR, "Error preparing assets for handler %@: %@", buf, 0x16u);
    }
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v8 = v5;
    uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v15, v20, 16);
    if (v10)
    {
      uint64_t v12 = v10;
      uint64_t v13 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v16 != v13) {
            objc_enumerationMutation(v8);
          }
          objc_msgSend_setObject_forKey_(*(void **)(a1 + 32), v11, (uint64_t)v3, *(void *)(*((void *)&v15 + 1) + 8 * i), (void)v15);
        }
        uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v15, v20, 16);
      }
      while (v12);
    }
  }
}

void sub_1C4FA58FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1C4FA592C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_noteOperationDidFinishWaitingOnPCS(WeakRetained, v8, v9);
  if (*MEMORY[0x1E4F1A4E0])
  {
    uint64_t v12 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v10, v11);
    int v14 = objc_msgSend_objectForKeyedSubscript_(v12, v13, @"FailBoundaryKeyFetch");

    if (v14)
    {
      uint64_t v16 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v15, *MEMORY[0x1E4F19DD8], 5005, @"Couldn't fetch boundary key because the unit test asked for it");

      id v5 = 0;
      id v6 = (id)v16;
    }
  }
  long long v17 = (void *)*MEMORY[0x1E4F1A548];
  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v17);
    }
    long long v18 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v25 = v18;
      uint64_t v28 = objc_msgSend_operationID(WeakRetained, v26, v27);
      *(_DWORD *)buf = 138543618;
      __int16 v40 = v28;
      __int16 v41 = 2112;
      id v42 = v6;
      _os_log_debug_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_DEBUG, "Error fetching user boundary key for operation %{public}@: %@", buf, 0x16u);
    }
    objc_msgSend_setError_(WeakRetained, v19, (uint64_t)v6);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v17);
    }
    id v22 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v29 = v22;
      long long v32 = objc_msgSend_operationID(WeakRetained, v30, v31);
      long long v33 = NSString;
      uint64_t v36 = objc_msgSend_length(v5, v34, v35);
      id v38 = objc_msgSend_stringWithFormat_(v33, v37, @"<%lu bytes>", v36);
      *(_DWORD *)buf = 138543618;
      __int16 v40 = v32;
      __int16 v41 = 2112;
      id v42 = v38;
      _os_log_debug_impl(&dword_1C4CFF000, v29, OS_LOG_TYPE_DEBUG, "Fetched user boundary key for operation %{public}@: %@", buf, 0x16u);
    }
    objc_msgSend_setCachedGlobalPerUserBoundaryKeyData_(WeakRetained, v23, (uint64_t)v5);
  }
  id v24 = objc_msgSend_stateTransitionGroup(WeakRetained, v20, v21);
  dispatch_group_leave(v24);
}

void sub_1C4FA5FFC(void **a1, void *a2)
{
  id v5 = a2;
  id v8 = objc_msgSend_container(a1[4], v6, v7);
  objc_msgSend_clientSDKVersion(v8, v9, v10);
  char v11 = CKLinkCheck48d9728e8c354416a38f82379cbb35e3();

  if ((v11 & 1) == 0)
  {
    uint64_t v14 = objc_msgSend_atomic(a1[4], v12, v13);
    objc_msgSend_setAtomic_(v5, v15, v14);
  }
  objc_initWeak(&location, v5);
  v45[0] = MEMORY[0x1E4F143A8];
  v45[1] = 3221225472;
  v45[2] = sub_1C4FA6350;
  v45[3] = &unk_1E64F7BB0;
  uint64_t v16 = a1[4];
  v47[1] = a1[6];
  void v45[4] = v16;
  objc_copyWeak(v47, &location);
  id v46 = a1[5];
  objc_msgSend_setUploadPreparationBlock_(v5, v17, (uint64_t)v45);
  uint64_t v21 = objc_msgSend_saveProgressBlock(a1[4], v18, v19);
  if (v21)
  {
    id v22 = v42;
    v42[0] = MEMORY[0x1E4F143A8];
    v42[1] = 3221225472;
    v42[2] = sub_1C4FA64C0;
    v42[3] = &unk_1E64F7BD8;
    __int16 v23 = a1[4];
    v44[1] = a1[6];
    v42[4] = v23;
    uint64_t v2 = v44;
    objc_copyWeak(v44, &location);
    id v3 = &v43;
    id v43 = a1[5];
  }
  else
  {
    id v22 = 0;
  }
  objc_msgSend_setUploadProgressBlock_(v5, v20, (uint64_t)v22);

  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 3221225472;
  void v39[2] = sub_1C4FA6760;
  v39[3] = &unk_1E64F7C00;
  objc_copyWeak(v41, &location);
  id v24 = a1[5];
  uint64_t v25 = a1[4];
  v41[1] = a1[6];
  void v39[4] = v25;
  id v40 = v24;
  objc_msgSend_setUploadCompletionBlock_(v5, v26, (uint64_t)v39);
  uint64_t v32 = MEMORY[0x1E4F143A8];
  uint64_t v33 = 3221225472;
  long long v34 = sub_1C4FA7030;
  uint64_t v35 = &unk_1E64F0238;
  objc_copyWeak(&v38, &location);
  uint64_t v27 = a1[5];
  uint64_t v36 = a1[4];
  id v37 = v27;
  objc_msgSend_setCompletionBlock_(v5, v28, (uint64_t)&v32);
  uint64_t v31 = objc_msgSend_stateTransitionGroup(a1[4], v29, v30, v32, v33, v34, v35, v36);
  dispatch_group_enter(v31);

  objc_destroyWeak(&v38);
  objc_destroyWeak(v41);
  if (v21)
  {

    objc_destroyWeak(v2);
  }

  objc_destroyWeak(v47);
  objc_destroyWeak(&location);
}

void sub_1C4FA62F4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  if (v2) {
    objc_destroyWeak(v3);
  }
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 104));
  _Unwind_Resume(a1);
}

void sub_1C4FA6350(uint64_t a1, void *a2)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (!v5)
  {
    uint64_t v13 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v3, v4);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 32);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v13, v17, v14, v15, @"CKDModifyRecordsOperation.m", 1777, @"Expected non-nil asset for %@", WeakRetained);
  }
  id v8 = objc_msgSend_objectForKey_(*(void **)(a1 + 40), v3, (uint64_t)v5);
  if (!v8)
  {
    long long v18 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v6, v7);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v18, v19, *(void *)(a1 + 56), *(void *)(a1 + 32), @"CKDModifyRecordsOperation.m", 1779, @"Expected non-nil handler for %@", v5);
  }
  uint64_t v9 = objc_msgSend_progressTracker(v8, v6, v7);
  v20[0] = v5;
  char v11 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v10, (uint64_t)v20, 1);
  objc_msgSend_startTrackingItems_(v9, v12, (uint64_t)v11);
}

void sub_1C4FA64C0(uint64_t a1, void *a2, double a3)
{
  id v7 = a2;
  if (!v7)
  {
    uint64_t v25 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v5, v6);
    uint64_t v26 = *(void *)(a1 + 56);
    uint64_t v27 = *(void *)(a1 + 32);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v25, v29, v26, v27, @"CKDModifyRecordsOperation.m", 1784, @"Expected non-nil asset for %@", WeakRetained);
  }
  id v8 = objc_msgSend_record(v7, v5, v6);
  char v11 = objc_msgSend_recordID(v8, v9, v10);

  if (!v11)
  {
    uint64_t v30 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v12, v13);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v30, v31, *(void *)(a1 + 56), *(void *)(a1 + 32), @"CKDModifyRecordsOperation.m", 1786, @"Expected non-nil recordID for %@", v7);
  }
  uint64_t v16 = objc_msgSend_objectForKey_(*(void **)(a1 + 40), v12, (uint64_t)v7);
  if (!v16)
  {
    uint64_t v32 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v14, v15);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v32, v33, *(void *)(a1 + 56), *(void *)(a1 + 32), @"CKDModifyRecordsOperation.m", 1788, @"Expected non-nil handler for %@", v7);
  }
  long long v17 = objc_msgSend_progressTracker(v16, v14, v15);
  objc_msgSend_updateProgressWithItem_progress_(v17, v18, (uint64_t)v7, a3);
  uint64_t v20 = v19;

  __int16 v23 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), v21, v22);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4FA66D8;
  block[3] = &unk_1E64F19C0;
  void block[4] = *(void *)(a1 + 32);
  id v35 = v11;
  uint64_t v36 = v20;
  id v24 = v11;
  dispatch_async(v23, block);
}

void sub_1C4FA66D8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_saveProgressBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_saveProgressBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (void (**)(id, void, double))objc_claimAutoreleasedReturnValue();
    v7[2](v7, *(void *)(a1 + 40), *(double *)(a1 + 48));
  }
}

void sub_1C4FA6760(uint64_t a1, void *a2, void *a3)
{
  v133[1] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v115 = a1;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!v5)
  {
    __int16 v101 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v7, v8);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v101, v102, *(void *)(a1 + 56), *(void *)(a1 + 32), @"CKDModifyRecordsOperation.m", 1797, @"Expected non-nil asset for %@", WeakRetained);
  }
  uint64_t v10 = objc_msgSend_record(v5, v7, v8);
  uint64_t v13 = objc_msgSend_recordID(v10, v11, v12);

  if (!v13)
  {
    uint64_t v103 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v14, v15);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v103, v104, *(void *)(a1 + 56), *(void *)(a1 + 32), @"CKDModifyRecordsOperation.m", 1799, @"Expected non-nil recordID for %@", v5);
  }
  long long v18 = objc_msgSend_objectForKey_(*(void **)(a1 + 40), v14, (uint64_t)v5);
  if (!v18)
  {
    uint64_t v105 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v16, v17);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v105, v106, *(void *)(a1 + 56), *(void *)(a1 + 32), @"CKDModifyRecordsOperation.m", 1801, @"Expected non-nil handler for %@", v5);
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v21 = objc_msgSend_assets(v5, v19, v20);
  }
  else
  {
    v133[0] = v5;
    uint64_t v21 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v19, (uint64_t)v133, 1);
  }
  uint64_t v22 = v21;
  if (v6)
  {
LABEL_29:
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v93 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v95 = *(void **)(v115 + 32);
      char v96 = v93;
      BOOL v99 = objc_msgSend_operationID(v95, v97, v98);
      *(_DWORD *)buf = 138413058;
      id v125 = v5;
      __int16 v126 = 2112;
      uint64_t v127 = v13;
      __int16 v128 = 2114;
      __int16 v129 = v99;
      __int16 v130 = 2112;
      id v131 = v6;
      _os_log_impl(&dword_1C4CFF000, v96, OS_LOG_TYPE_INFO, "Failed to upload asset %@ for record %@ and operation %{public}@: %@", buf, 0x2Au);
    }
    objc_msgSend_setState_(v18, v94, 12);
    objc_msgSend_setError_(v18, v100, (uint64_t)v6);
    goto LABEL_34;
  }
  long long v114 = v18;
  __int16 v108 = v13;
  id v109 = v5;
  long long v122 = 0u;
  long long v123 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  uint64_t v107 = v21;
  id v23 = v21;
  uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v120, v132, 16);
  if (!v25) {
    goto LABEL_25;
  }
  uint64_t v28 = v25;
  uint64_t v29 = *(void *)v121;
  long long v111 = v23;
  id v112 = WeakRetained;
  uint64_t v110 = *(void *)v121;
  while (2)
  {
    uint64_t v30 = 0;
    uint64_t v113 = v28;
    do
    {
      if (*(void *)v121 != v29) {
        objc_enumerationMutation(v23);
      }
      uint64_t v31 = *(void **)(*((void *)&v120 + 1) + 8 * v30);
      int v32 = objc_msgSend_useEncryption(WeakRetained, v26, v27);
      int v35 = objc_msgSend_useClearAssetEncryption(WeakRetained, v33, v34);
      id v38 = objc_msgSend_mergeableDeltaID(v31, v36, v37);

      if (v38)
      {
        __int16 v39 = objc_msgSend_mergeableDeltaID(v31, v26, v27);
        id v42 = objc_msgSend_valueID(v39, v40, v41);
        int isEncrypted = objc_msgSend_isEncrypted(v42, v43, v44);

        int v35 = isEncrypted ^ 1;
        if ((isEncrypted & v32 & 1) == 0) {
          goto LABEL_21;
        }
      }
      else if (!v32)
      {
        goto LABEL_21;
      }
      id v46 = [CKDWrappingContext alloc];
      uint64_t v49 = objc_msgSend_record(v31, v47, v48);
      uint64_t v52 = objc_msgSend_recordID(v49, v50, v51);
      long long v55 = objc_msgSend_recordKey(v31, v53, v54);
      uint64_t v58 = objc_msgSend_mergeableDeltaID(v31, v56, v57);
      __int16 v61 = objc_msgSend_signature(v31, v59, v60);
      int v64 = objc_msgSend_referenceSignature(v31, v62, v63);
      char v66 = objc_msgSend_initWithRecordID_fieldName_mergeableDeltaID_fileSignature_referenceSignature_(v46, v65, (uint64_t)v52, v55, v58, v61, v64);

      __int16 v69 = objc_msgSend_container(*(void **)(v115 + 32), v67, v68);
      char v72 = objc_msgSend_pcsManager(v69, v70, v71);
      uint64_t v75 = objc_msgSend_assetKey(v31, v73, v74);
      id v78 = objc_msgSend_record(v114, v76, v77);
      uint64_t v81 = objc_msgSend_recordPCS(v78, v79, v80);
      id v119 = 0;
      __int16 v83 = objc_msgSend_wrapAssetKey_withRecordPCS_inContext_withError_(v72, v82, (uint64_t)v75, v81, v66, &v119);
      id v6 = v119;
      objc_msgSend_setWrappedAssetKey_(v31, v84, (uint64_t)v83);

      uint64_t v28 = v113;
      id WeakRetained = v112;

      id v23 = v111;
      uint64_t v29 = v110;

      if (v6)
      {

        uint64_t v13 = v108;
        id v5 = v109;
        long long v18 = v114;
        uint64_t v22 = v107;
        goto LABEL_29;
      }
LABEL_21:
      if (v35)
      {
        uint64_t v85 = objc_msgSend_assetKey(v31, v26, v27);
        objc_msgSend_setClearAssetKey_(v31, v86, (uint64_t)v85);
      }
      ++v30;
    }
    while (v28 != v30);
    uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v26, (uint64_t)&v120, v132, 16);
    if (v28) {
      continue;
    }
    break;
  }
LABEL_25:

  long long v18 = v114;
  id v89 = objc_msgSend_error(v114, v87, v88);

  if (!v89) {
    objc_msgSend_setState_(v114, v90, 5);
  }
  unsigned int v92 = objc_msgSend_callbackQueue(*(void **)(v115 + 32), v90, v91);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4FA6DB0;
  block[3] = &unk_1E64F0120;
  void block[4] = *(void *)(v115 + 32);
  id v117 = v23;
  uint64_t v13 = v108;
  id v118 = v108;
  dispatch_async(v92, block);

  id v6 = 0;
  id v5 = v109;
  uint64_t v22 = v107;
LABEL_34:
}

void sub_1C4FA6DB0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_uploadCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    id obj = *(id *)(v3 + 40);
    uint64_t v50 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v56, v60, 16);
    if (v50)
    {
      uint64_t v48 = *(void *)v57;
      uint64_t v49 = v3;
      do
      {
        for (uint64_t i = 0; i != v50; ++i)
        {
          if (*(void *)v57 != v48) {
            objc_enumerationMutation(obj);
          }
          uint64_t v9 = *(void **)(*((void *)&v56 + 1) + 8 * i);
          objc_msgSend_uploadCompletionBlock(*(void **)(v3 + 32), v6, v7);
          uint64_t v10 = (void (**)(void, void, void, void, void, void, void, void, double, void, void, void, void, void))objc_claimAutoreleasedReturnValue();
          uint64_t v11 = *(void *)(v3 + 48);
          uint64_t v14 = objc_msgSend_recordKey(v9, v12, v13);
          uint64_t v17 = objc_msgSend_arrayIndex(v9, v15, v16);
          uint64_t v20 = objc_msgSend_signature(v9, v18, v19);
          uint64_t v23 = objc_msgSend_size(v9, v21, v22);
          uint64_t v52 = objc_msgSend_paddedFileSize(v9, v24, v25);
          uint64_t v54 = v17;
          uint64_t v55 = v11;
          uint64_t v53 = v23;
          if (objc_msgSend_shouldOnlySaveAssetContent(*(void **)(v3 + 32), v26, v27)) {
            unsigned int v51 = objc_msgSend_uploaded(v9, v28, v29);
          }
          else {
            unsigned int v51 = 0;
          }
          uint64_t v30 = (void *)v14;
          shouldOnlySaveuint64_t AssetContent = objc_msgSend_shouldOnlySaveAssetContent(*(void **)(v3 + 32), v28, v29);
          if (shouldOnlySaveAssetContent)
          {
            uint64_t v34 = objc_msgSend_uploadReceipt(v9, v31, v32);
            uint64_t v47 = (void *)v34;
          }
          else
          {
            uint64_t v34 = 0;
          }
          double v37 = 0.0;
          if (objc_msgSend_shouldOnlySaveAssetContent(*(void **)(v3 + 32), v31, v32))
          {
            objc_msgSend_uploadReceiptExpiration(v9, v35, v36);
            double v37 = v38;
          }
          __int16 v39 = objc_msgSend_wrappedAssetKey(v9, v35, v36);
          id v42 = objc_msgSend_clearAssetKey(v9, v40, v41);
          uint64_t v45 = objc_msgSend_referenceSignature(v9, v43, v44);
          ((void (**)(void, uint64_t, void *, uint64_t, void *, uint64_t, uint64_t, void, double, uint64_t, void *, void *, void *, void))v10)[2](v10, v55, v30, v54, v20, v53, v52, v51, v37, v34, v39, v42, v45, 0);

          if (shouldOnlySaveAssetContent) {
          uint64_t v3 = v49;
          }
        }
        uint64_t v50 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v56, v60, 16);
      }
      while (v50);
    }
  }
}

void sub_1C4FA7030(void **a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = objc_msgSend_error(WeakRetained, v3, v4);

  if (v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v8 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = a1[4];
      uint64_t v12 = v8;
      uint64_t v15 = objc_msgSend_operationID(v11, v13, v14);
      long long v18 = objc_msgSend_error(WeakRetained, v16, v17);
      *(_DWORD *)buf = 138543618;
      uint64_t v41 = v15;
      __int16 v42 = 2112;
      id v43 = v18;
      _os_log_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_INFO, "Failed to upload assets for operation %{public}@: %@", buf, 0x16u);
    }
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    uint64_t v19 = objc_msgSend_objectEnumerator(a1[5], v9, v10, 0);
    uint64_t v22 = objc_msgSend_allObjects(v19, v20, v21);

    uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v23, (uint64_t)&v35, v39, 16);
    if (v24)
    {
      uint64_t v26 = v24;
      uint64_t v27 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          if (*(void *)v36 != v27) {
            objc_enumerationMutation(v22);
          }
          uint64_t v29 = *(void **)(*((void *)&v35 + 1) + 8 * i);
          objc_msgSend_setState_(v29, v25, 12);
          uint64_t v32 = objc_msgSend_error(WeakRetained, v30, v31);
          objc_msgSend_setError_(v29, v33, (uint64_t)v32);
        }
        uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v25, (uint64_t)&v35, v39, 16);
      }
      while (v26);
    }
  }
  uint64_t v34 = objc_msgSend_stateTransitionGroup(a1[4], v6, v7);
  dispatch_group_leave(v34);
}

void sub_1C4FA7950(uint64_t a1, void *a2)
{
  id v13 = a2;
  if ((objc_msgSend_isDelete(v13, v3, v4) & 1) == 0)
  {
    uint64_t v9 = objc_msgSend_record(v13, v5, v6);
    if (!v9)
    {
      uint64_t v11 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v7, v8);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v11, v12, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDModifyRecordsOperation.m", 1985, @"Expected a non-nil record for handler %@", v13);
    }
    if (objc_msgSend_includeMergeableDeltasInModifyRecordsRequest(*(void **)(a1 + 32), v7, v8)) {
      objc_msgSend_setState_(v13, v10, 8);
    }
    else {
      objc_msgSend_setState_(v13, v10, 7);
    }
  }
}

void sub_1C4FA7EB8(uint64_t a1)
{
}

void sub_1C4FA7EC0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_haveOutstandingHandlers(*(void **)(a1 + 32), a2, a3))
  {
    uint64_t v6 = objc_opt_new();
    uint64_t v103 = objc_opt_new();
    uint64_t v102 = objc_opt_new();
    BOOL v99 = objc_opt_new();
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    uint64_t v9 = objc_msgSend_modifyHandlersByZoneID(*(void **)(v3 + 32), v7, v8);
    uint64_t v12 = objc_msgSend_allKeys(v9, v10, v11);

    id obj = v12;
    uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v108, v115, 16);
    if (v14)
    {
      uint64_t v16 = v14;
      uint64_t v17 = *(void *)v109;
      uint64_t v100 = v6;
      uint64_t v101 = v3;
      uint64_t v95 = *(void *)v109;
      do
      {
        uint64_t v18 = 0;
        uint64_t v96 = v16;
        do
        {
          if (*(void *)v109 != v17) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = *(void *)(*((void *)&v108 + 1) + 8 * v18);
          if (objc_msgSend_containsObject_(*(void **)(v3 + 40), v15, v19))
          {
            if (*MEMORY[0x1E4F1A550] != -1) {
              dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            uint64_t v22 = *MEMORY[0x1E4F1A500];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v114 = v19;
              _os_log_debug_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_DEBUG, "Skipping zone %@ because some items in that zone aren't ready to be uploaded yet", buf, 0xCu);
            }
          }
          else
          {
            uint64_t v98 = v18;
            uint64_t v23 = objc_msgSend_modifyHandlersByZoneID(*(void **)(v3 + 32), v20, v21);
            uint64_t v25 = objc_msgSend_objectForKeyedSubscript_(v23, v24, v19);

            long long v106 = 0u;
            long long v107 = 0u;
            long long v104 = 0u;
            long long v105 = 0u;
            id v26 = v25;
            uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v27, (uint64_t)&v104, v112, 16);
            if (v28)
            {
              uint64_t v31 = v28;
              uint64_t v32 = *(void *)v105;
              do
              {
                uint64_t v33 = 0;
                do
                {
                  if (*(void *)v105 != v32) {
                    objc_enumerationMutation(v26);
                  }
                  uint64_t v34 = *(void **)(*((void *)&v104 + 1) + 8 * v33);
                  if (objc_msgSend_state(v34, v29, v30) == 6)
                  {
                    long long v35 = objc_msgSend_record(v34, v29, v30);
                    if (objc_msgSend_isDelete(v34, v36, v37))
                    {
                      id v40 = objc_msgSend_recordID(v34, v38, v39);

                      if (!v40)
                      {
                        uint64_t v87 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v41, v42);
                        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v87, v88, *(void *)(v3 + 48), *(void *)(v3 + 32), @"CKDModifyRecordsOperation.m", 2052, @"Lost a recordID");
                      }
                      id v43 = objc_msgSend_recordID(v34, v41, v42);
                      objc_msgSend_addObject_(v103, v44, (uint64_t)v43);

                      uint64_t v47 = objc_msgSend_etag(v34, v45, v46);

                      if (v47)
                      {
                        uint64_t v50 = objc_msgSend_etag(v34, v48, v49);
                        uint64_t v53 = objc_msgSend_recordID(v34, v51, v52);
                        objc_msgSend_setObject_forKeyedSubscript_(v102, v54, (uint64_t)v50, v53);
                      }
                      if (objc_msgSend__needsSigningPCS(*(void **)(v3 + 32), v48, v49))
                      {
                        long long v57 = objc_msgSend_recordPCSData(v34, v55, v56);
                        uint64_t v60 = objc_msgSend_signingPCS(v57, v58, v59);

                        if (v60)
                        {
                          uint64_t v63 = objc_msgSend_recordPCSData(v34, v61, v62);
                          objc_msgSend_signingPCS(v63, v64, v65);
                          char v66 = (const void *)PCSFPCopyCurrentPrivateKey();

                          if (v66)
                          {
                            __int16 v69 = objc_msgSend_container(*(void **)(v3 + 32), v67, v68);
                            char v72 = objc_msgSend_pcsManager(v69, v70, v71);
                            uint64_t v74 = objc_msgSend_dataFromSharingIdentity_error_(v72, v73, (uint64_t)v66, 0);

                            if (v74)
                            {
                              uint64_t v77 = objc_msgSend_recordID(v34, v75, v76);
                              objc_msgSend_setObject_forKeyedSubscript_(v99, v78, (uint64_t)v74, v77);
                            }
                            CFRelease(v66);

                            uint64_t v6 = v100;
                            uint64_t v3 = v101;
                          }
                          else
                          {
                            if (*MEMORY[0x1E4F1A550] != -1) {
                              dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
                            }
                            uint64_t v79 = (void *)*MEMORY[0x1E4F1A500];
                            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
                            {
                              uint64_t v80 = v79;
                              __int16 v83 = objc_msgSend_recordPCSData(v34, v81, v82);
                              uint64_t v86 = objc_msgSend_signingPCS(v83, v84, v85);
                              *(_DWORD *)buf = 138412290;
                              uint64_t v114 = v86;
                              _os_log_debug_impl(&dword_1C4CFF000, v80, OS_LOG_TYPE_DEBUG, "Record does have signing PCS %@ but failed to get private key", buf, 0xCu);

                              uint64_t v3 = v101;
                              uint64_t v6 = v100;
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      objc_msgSend_addObject_(v6, v38, (uint64_t)v35);
                    }
                  }
                  ++v33;
                }
                while (v31 != v33);
                uint64_t v89 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v29, (uint64_t)&v104, v112, 16);
                uint64_t v31 = v89;
              }
              while (v89);
            }

            uint64_t v17 = v95;
            uint64_t v16 = v96;
            uint64_t v18 = v98;
          }
          ++v18;
        }
        while (v18 != v16);
        uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v15, (uint64_t)&v108, v115, 16);
      }
      while (v16);
    }

    objc_msgSend_setRecordsToSave_(*(void **)(v3 + 32), v90, (uint64_t)v6);
    objc_msgSend_setRecordIDsToDelete_(*(void **)(v3 + 32), v91, (uint64_t)v103);
    objc_msgSend_setRecordIDsToDeleteToEtags_(*(void **)(v3 + 32), v92, (uint64_t)v102);
    objc_msgSend_setRecordIDsToDeleteToSigningPCSIdentity_(*(void **)(v3 + 32), v93, (uint64_t)v99);
  }
  uint64_t v94 = objc_msgSend_stateTransitionGroup(*(void **)(v3 + 32), v4, v5);
  dispatch_group_leave(v94);
}

void sub_1C4FA8E08(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v8 = a3;
  if (v8)
  {
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = objc_msgSend_recordID(v5, v6, v7);
    objc_msgSend__handleDecryptionFailure_forRecordID_(v9, v11, (uint64_t)v8, v10);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v14 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = v14;
      uint64_t v19 = objc_msgSend_recordID(v5, v17, v18);
      int v20 = 138412290;
      uint64_t v21 = v19;
      _os_log_debug_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEBUG, "Successfully decrypted record %@. Continuing with save of that record", (uint8_t *)&v20, 0xCu);
    }
  }
  uint64_t v15 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v12, v13);
  dispatch_group_leave(v15);
}

void sub_1C4FA92AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  id v8 = (void *)*MEMORY[0x1E4F1A548];
  uint64_t v9 = *MEMORY[0x1E4F1A550];
  if (!v5 || v6)
  {
    if (v9 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v8);
    }
    uint64_t v14 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v30 = *(void **)(a1 + 32);
      uint64_t v31 = v14;
      uint64_t v34 = objc_msgSend_recordID(v30, v32, v33);
      *(_DWORD *)buf = 138412290;
      long long v36 = v34;
      _os_log_debug_impl(&dword_1C4CFF000, v31, OS_LOG_TYPE_DEBUG, "Failed to decrypt server record %@. Returning as is.", buf, 0xCu);
    }
    objc_msgSend_setState_(*(void **)(a1 + 40), v15, 12);
    uint64_t v16 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v17 = *MEMORY[0x1E4F19DD8];
    int v20 = objc_msgSend_recordID(*(void **)(a1 + 32), v18, v19);
    uint64_t v22 = objc_msgSend_errorWithDomain_code_format_(v16, v21, v17, 5004, @"Couldn't decrypt record returned from the server in response to our save of record %@", v20);
    objc_msgSend_setError_(*(void **)(a1 + 40), v23, (uint64_t)v22);
  }
  else
  {
    if (v9 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v8);
    }
    uint64_t v10 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v25 = *(void **)(a1 + 32);
      id v26 = v10;
      uint64_t v29 = objc_msgSend_recordID(v25, v27, v28);
      *(_DWORD *)buf = 138412290;
      long long v36 = v29;
      _os_log_debug_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_DEBUG, "Successfully decrypted server record from save %@", buf, 0xCu);
    }
    objc_msgSend__reallyHandleRecordSaved_handler_etag_dateStatistics_expirationDate_responseCode_keysAssociatedWithETag_recordForOplockFailure_decryptedServerRecord_(*(void **)(a1 + 48), v11, *(void *)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), v5);
  }
  uint64_t v24 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 48), v12, v13);
  dispatch_group_leave(v24);
}

void sub_1C4FAABF0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_1C4FAAC1C(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v4 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_debug_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_DEBUG, "Failed to remove anonymous share. error: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = objc_msgSend_stateTransitionGroup(WeakRetained, v6, v7);
  dispatch_group_leave(v8);
}

uint64_t sub_1C4FAAD30(uint64_t a1, const char *a2)
{
  objc_msgSend_setError_(*(void **)(a1 + 32), a2, (uint64_t)a2);
  id v5 = objc_msgSend_error(*(void **)(a1 + 32), v3, v4);
  uint64_t v8 = objc_msgSend_code(v5, v6, v7);

  id v10 = *(void **)(a1 + 32);
  if (v8 == 2024) {
    uint64_t v11 = 11;
  }
  else {
    uint64_t v11 = 12;
  }
  return objc_msgSend_setState_(v10, v9, v11);
}

void sub_1C4FAADA0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  uint64_t v8 = (void *)*MEMORY[0x1E4F1A548];
  uint64_t v9 = *MEMORY[0x1E4F1A550];
  if (!v5 || v6)
  {
    if (v9 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v8);
    }
    uint64_t v25 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v39 = *(void **)(a1 + 32);
      id v40 = v25;
      id v43 = objc_msgSend_recordID(v39, v41, v42);
      *(_DWORD *)buf = 138412290;
      uint64_t v45 = v43;
      _os_log_debug_impl(&dword_1C4CFF000, v40, OS_LOG_TYPE_DEBUG, "Failed to decrypt the server record %@. Returning as is.", buf, 0xCu);

      if (!v7) {
        goto LABEL_13;
      }
    }
    else if (!v7)
    {
LABEL_13:
      uint64_t v28 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v29 = *MEMORY[0x1E4F19DD8];
      uint64_t v30 = *(void *)(a1 + 40);
      uint64_t v19 = objc_msgSend_recordID(*(void **)(a1 + 32), v26, v27);
      uint64_t v24 = objc_msgSend_errorWithDomain_code_userInfo_format_(v28, v31, v29, 5004, v30, @"Failed to decrypt the server record %@ returned from oplock failure.", v19);
      goto LABEL_14;
    }
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 40), v26, (uint64_t)v7, *MEMORY[0x1E4F28A50]);
    goto LABEL_13;
  }
  if (v9 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v8);
  }
  id v10 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    long long v35 = v10;
    long long v38 = objc_msgSend_recordID(v5, v36, v37);
    *(_DWORD *)buf = 138412290;
    uint64_t v45 = v38;
    _os_log_debug_impl(&dword_1C4CFF000, v35, OS_LOG_TYPE_DEBUG, "Successfully decrypted record %@", buf, 0xCu);
  }
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 40), v11, (uint64_t)v5, *MEMORY[0x1E4F19D10]);
  uint64_t v12 = (void *)MEMORY[0x1E4F1A280];
  uint64_t v13 = *MEMORY[0x1E4F19DD8];
  uint64_t v14 = sub_1C4E94D98(*(void **)(a1 + 48));
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v19 = objc_msgSend_error(*(void **)(a1 + 48), v17, v18);
  uint64_t v22 = objc_msgSend_errorDescription(v19, v20, v21);
  uint64_t v24 = objc_msgSend_errorWithDomain_code_userInfo_format_(v12, v23, v13, v14, v16, @"Error saving record %@ to server: %@", v15, v22);

LABEL_14:
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  uint64_t v34 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 64), v32, v33);
  dispatch_group_leave(v34);
}

void sub_1C4FAB544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4FAB570(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v4 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_debug_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_DEBUG, "Failed to remove anonymous share. error: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = objc_msgSend_stateTransitionGroup(WeakRetained, v6, v7);
  dispatch_group_leave(v8);
}

void sub_1C4FAC39C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v4 - 112));
  _Unwind_Resume(a1);
}

void sub_1C4FAC3E8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v34 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a7;
  id v19 = a8;
  id v20 = a9;
  uint64_t v21 = (id *)(a1 + 32);
  id v22 = a6;
  id v23 = a2;
  id WeakRetained = objc_loadWeakRetained(v21);
  uint64_t v27 = objc_msgSend_handlersByRecordID(WeakRetained, v25, v26);
  uint64_t v29 = objc_msgSend_objectForKeyedSubscript_(v27, v28, (uint64_t)v23);

  uint64_t v32 = objc_msgSend_record(v29, v30, v31);

  if (v32) {
    objc_msgSend__handleRecordSaved_handler_etag_dateStatistics_expirationDate_responseCode_keysAssociatedWithETag_recordForOplockFailure_serverRecord_(WeakRetained, v33, (uint64_t)v23, v29, v34, v16, v17, v22, v18, v19, v20);
  }
  else {
    objc_msgSend__handleRecordDeleted_handler_responseCode_(WeakRetained, v33, (uint64_t)v23, v29, v22);
  }
}

void sub_1C4FAC54C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend__handleMergeableDeltaSavedForRecordID_key_result_(WeakRetained, v10, (uint64_t)v9, v8, v7);
}

void sub_1C4FAC5D8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend__handleReplaceDeltasRequest_result_(WeakRetained, v7, (uint64_t)v6, v5);
}

BOOL sub_1C4FAC824(uint64_t a1, const char *a2)
{
  uint64_t v2 = objc_msgSend_objectForKey_(*(void **)(a1 + 32), a2, (uint64_t)a2);
  objc_opt_class();
  BOOL v7 = 1;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0
      || (objc_msgSend_firstObject(v2, v3, v4),
          id v5 = objc_claimAutoreleasedReturnValue(),
          objc_opt_class(),
          char isKindOfClass = objc_opt_isKindOfClass(),
          v5,
          (isKindOfClass & 1) == 0))
    {
      BOOL v7 = 0;
    }
  }

  return v7;
}

void sub_1C4FACA2C(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_recordsInFlightBlock(*(void **)(a1 + 32), a2, a3);
  uint64_t v4 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1C4FACAC4;
  v6[3] = &unk_1E64F08D0;
  uint64_t v5 = *(void *)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  ((void (**)(void, uint64_t, void *))v4)[2](v4, v5, v6);
}

void sub_1C4FACAC4(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v6 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      id v8 = *(void **)(a1 + 32);
      id v9 = v6;
      uint64_t v12 = objc_msgSend_operationID(v8, v10, v11);
      int v14 = 138543618;
      uint64_t v15 = v12;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_INFO, "Finishing daemon operation %{public}@ due to client-returned error %@", (uint8_t *)&v14, 0x16u);
    }
    objc_msgSend_finishWithError_(*(void **)(a1 + 32), v7, (uint64_t)v5);
  }
  uint64_t v13 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v3, v4);
  dispatch_group_leave(v13);
}

void sub_1C4FAD60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4FAD634(uint64_t a1, const char *a2)
{
  objc_msgSend_setRequest_(*(void **)(a1 + 32), a2, 0);
  id v6 = objc_msgSend_error(*(void **)(a1 + 32), v3, v4);
  if (v6)
  {
    objc_msgSend_setError_(*(void **)(a1 + 32), v5, (uint64_t)v6);
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    id v10 = objc_msgSend_error(WeakRetained, v8, v9);
    objc_msgSend_setError_(*(void **)(a1 + 32), v11, (uint64_t)v10);
  }
  int v14 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v12, v13);
  dispatch_group_leave(v14);
}

void sub_1C4FADAD0(uint64_t a1, void *a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v6 = objc_msgSend_record(v3, v4, v5);
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v9 = objc_msgSend_allKeys(v6, v7, v8);
  uint64_t v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v64, v69, 16);
  if (!v59)
  {

LABEL_26:
    objc_msgSend_setState_(v3, v54, 8);
    goto LABEL_27;
  }
  char v12 = 0;
  uint64_t v58 = *(void *)v65;
  uint64_t v55 = v6;
  uint64_t v56 = v9;
  do
  {
    for (uint64_t i = 0; i != v59; ++i)
    {
      if (*(void *)v65 != v58) {
        objc_enumerationMutation(v9);
      }
      uint64_t v14 = *(void *)(*((void *)&v64 + 1) + 8 * i);
      uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(v6, v11, v14);
      uint64_t v18 = v15;
      if (v15)
      {
        id v19 = v15;
      }
      else
      {
        id v20 = objc_msgSend_encryptedValues(v6, v16, v17);
        objc_msgSend_objectForKeyedSubscript_(v20, v21, v14);
        id v19 = (id)objc_claimAutoreleasedReturnValue();
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v22 = v19;
        uint64_t v25 = objc_msgSend_deltasToSave(v22, v23, v24);
        uint64_t v28 = objc_msgSend_count(v25, v26, v27);

        if (v28)
        {
          uint64_t v31 = *(void **)(a1 + 32);
          uint64_t v32 = objc_msgSend_deltasToSave(v22, v29, v30);
          long long v35 = objc_msgSend_allObjects(v32, v33, v34);
          objc_msgSend_addObjectsFromArray_(v31, v36, (uint64_t)v35);

          uint64_t v37 = *(void **)(a1 + 40);
          id v40 = objc_msgSend_valueID(v22, v38, v39);
          objc_msgSend_setObject_forKeyedSubscript_(v37, v41, (uint64_t)v3, v40);

          char v12 = 1;
        }
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        uint64_t v42 = objc_msgSend_pendingReplacementRequests(v22, v29, v30);
        uint64_t v44 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v43, (uint64_t)&v60, v68, 16);
        if (v44)
        {
          uint64_t v46 = v44;
          id v57 = v19;
          uint64_t v47 = *(void *)v61;
          do
          {
            for (uint64_t j = 0; j != v46; ++j)
            {
              if (*(void *)v61 != v47) {
                objc_enumerationMutation(v42);
              }
              objc_msgSend_addObject_(*(void **)(a1 + 48), v45, *(void *)(*((void *)&v60 + 1) + 8 * j));
              uint64_t v49 = *(void **)(a1 + 40);
              uint64_t v52 = objc_msgSend_valueID(v22, v50, v51);
              objc_msgSend_setObject_forKeyedSubscript_(v49, v53, (uint64_t)v3, v52);
            }
            uint64_t v46 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v45, (uint64_t)&v60, v68, 16);
          }
          while (v46);
          char v12 = 1;
          id v6 = v55;
          id v19 = v57;
        }

        uint64_t v9 = v56;
      }
    }
    uint64_t v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v11, (uint64_t)&v64, v69, 16);
  }
  while (v59);

  if ((v12 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_27:
}

id sub_1C4FADDD8(uint64_t a1, void *a2, uint64_t a3)
{
  id v3 = objc_msgSend_metadata(a2, (const char *)a2, a3);
  id v6 = objc_msgSend_identifier(v3, v4, v5);

  return v6;
}

void sub_1C4FADE28(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, v3);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  id v22[2] = sub_1C4FAE014;
  v22[3] = &unk_1E64F7D68;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v23 = v4;
  uint64_t v24 = v5;
  objc_msgSend_setUploadDeltaCompletionBlock_(v3, v6, (uint64_t)v22);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_1C4FAE308;
  void v19[3] = &unk_1E64F7D90;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v20 = v7;
  uint64_t v21 = v8;
  objc_msgSend_setReplaceDeltasRequestCompletionBlock_(v3, v9, (uint64_t)v19);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = sub_1C4FAE588;
  v16[3] = &unk_1E64F0238;
  objc_copyWeak(&v18, &location);
  int8x16_t v15 = *(int8x16_t *)(a1 + 32);
  id v10 = (id)v15.i64[0];
  int8x16_t v17 = vextq_s8(v15, v15, 8uLL);
  objc_msgSend_setCompletionBlock_(v3, v11, (uint64_t)v16);
  uint64_t v14 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v12, v13);
  dispatch_group_enter(v14);

  objc_destroyWeak(&v18);
  objc_destroyWeak(&location);
}

void sub_1C4FADFEC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4FAE014(uint64_t a1, void *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  id v10 = objc_msgSend_valueID(v5, v8, v9);
  char v12 = objc_msgSend_objectForKeyedSubscript_(v7, v11, (uint64_t)v10);

  if (v12)
  {
    uint64_t v13 = (void *)*MEMORY[0x1E4F1A548];
    if (v6)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v13);
      }
      uint64_t v14 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = v14;
        uint64_t v33 = objc_msgSend_metadata(v5, v31, v32);
        long long v36 = objc_msgSend_identifier(v33, v34, v35);
        uint64_t v39 = objc_msgSend_operationID(*(void **)(a1 + 40), v37, v38);
        int v40 = 138412802;
        uint64_t v41 = v36;
        __int16 v42 = 2114;
        id v43 = v39;
        __int16 v44 = 2112;
        id v45 = v6;
        _os_log_error_impl(&dword_1C4CFF000, v30, OS_LOG_TYPE_ERROR, "Failed to upload delta, %@, for operation %{public}@: %@", (uint8_t *)&v40, 0x20u);
      }
      objc_msgSend_setError_(v12, v15, (uint64_t)v6);
      objc_msgSend_setState_(v12, v16, 12);
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v13);
      }
      id v22 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        id v23 = v22;
        uint64_t v26 = objc_msgSend_metadata(v5, v24, v25);
        uint64_t v29 = objc_msgSend_identifier(v26, v27, v28);
        int v40 = 138412290;
        uint64_t v41 = v29;
        _os_log_impl(&dword_1C4CFF000, v23, OS_LOG_TYPE_INFO, "Successfully uploaded delta: %@", (uint8_t *)&v40, 0xCu);
      }
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    int8x16_t v17 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      id v18 = v17;
      uint64_t v21 = objc_msgSend_valueID(v5, v19, v20);
      int v40 = 138412290;
      uint64_t v41 = v21;
      _os_log_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_INFO, "No modify handler for delta: %@", (uint8_t *)&v40, 0xCu);
    }
  }
}

void sub_1C4FAE308(uint64_t a1, void *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  id v10 = objc_msgSend_valueID(v5, v8, v9);
  char v12 = objc_msgSend_objectForKeyedSubscript_(v7, v11, (uint64_t)v10);

  if (v12)
  {
    uint64_t v13 = (void *)*MEMORY[0x1E4F1A548];
    if (v6)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v13);
      }
      uint64_t v14 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        id v19 = *(void **)(a1 + 40);
        uint64_t v20 = v14;
        id v23 = objc_msgSend_operationID(v19, v21, v22);
        int v24 = 138412802;
        id v25 = v5;
        __int16 v26 = 2114;
        uint64_t v27 = v23;
        __int16 v28 = 2112;
        id v29 = v6;
        _os_log_error_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_ERROR, "Failed to replace deltas %@ for operation %{public}@: %@", (uint8_t *)&v24, 0x20u);
      }
      objc_msgSend_setError_(v12, v15, (uint64_t)v6);
      objc_msgSend_setState_(v12, v16, 12);
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v13);
      }
      id v18 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        int v24 = 138412290;
        id v25 = v5;
        _os_log_debug_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_DEBUG, "Successfully replaced deltas: %@", (uint8_t *)&v24, 0xCu);
      }
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    int8x16_t v17 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      int v24 = 138412290;
      id v25 = v5;
      _os_log_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_INFO, "No modify handler for replacement request: %@", (uint8_t *)&v24, 0xCu);
    }
  }
}

void sub_1C4FAE588(void **a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = objc_msgSend_error(WeakRetained, v3, v4);

  if (v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v8 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = a1[4];
      uint64_t v31 = v8;
      uint64_t v34 = objc_msgSend_operationID(v30, v32, v33);
      uint64_t v37 = objc_msgSend_error(WeakRetained, v35, v36);
      *(_DWORD *)buf = 138543618;
      __int16 v44 = v34;
      __int16 v45 = 2112;
      uint64_t v46 = v37;
      _os_log_error_impl(&dword_1C4CFF000, v31, OS_LOG_TYPE_ERROR, "Failed to upload delta for operation %{public}@: %@", buf, 0x16u);
    }
  }
  uint64_t v9 = (void *)MEMORY[0x1E4F1CAD0];
  id v10 = objc_msgSend_allValues(a1[5], v6, v7);
  char v12 = objc_msgSend_setWithArray_(v9, v11, (uint64_t)v10);

  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v13 = v12;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v38, v42, 16);
  if (v15)
  {
    uint64_t v18 = v15;
    uint64_t v19 = *(void *)v39;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v39 != v19) {
          objc_enumerationMutation(v13);
        }
        uint64_t v21 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        if (objc_msgSend_state(v21, v16, v17, (void)v38) == 7)
        {
          objc_msgSend_setState_(v21, v16, 8);
          int v24 = objc_msgSend_error(WeakRetained, v22, v23);

          if (v24)
          {
            id v25 = objc_msgSend_error(WeakRetained, v16, v17);
            objc_msgSend_setError_(v21, v26, (uint64_t)v25);
          }
        }
      }
      uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v38, v42, 16);
    }
    while (v18);
  }

  id v29 = objc_msgSend_stateTransitionGroup(a1[4], v27, v28);
  dispatch_group_leave(v29);
}

void sub_1C4FAF014(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v15, v19, 16);
  if (v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v16 != v9) {
          objc_enumerationMutation(v3);
        }
        uint64_t v11 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        if ((objc_msgSend_isDelete(v11, v6, v7) & 1) == 0
          && (objc_msgSend_saveCompletionBlockCalled(v11, v6, v7) & 1) == 0)
        {
          char v12 = objc_msgSend_record(v11, v6, v7);
          objc_msgSend_removePackages(v12, v13, v14);
        }
      }
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v6, (uint64_t)&v15, v19, 16);
    }
    while (v8);
  }
}

uint64_t sub_1C4FAF128(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setZoneIDs_, *(void *)(a1 + 32));
}

void sub_1C4FAF780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
}

uint64_t sub_1C4FAF7B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_21:
      uint64_t v9 = 0;
      goto LABEL_22;
    }
    char v12 = objc_msgSend_fileURL(v4, v10, v11);
    long long v16 = objc_msgSend_URLByResolvingSymlinksInPath(v12, v13, v14);
    if (!v16)
    {
LABEL_20:

      goto LABEL_21;
    }
    int canOpenFileAtURL = objc_msgSend_canOpenFileAtURL_(*(void **)(a1 + 40), v15, (uint64_t)v16);
    char v20 = canOpenFileAtURL;
    if (*MEMORY[0x1E4F1A4E0])
    {
      uint64_t v21 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v18, v19);
      uint64_t v23 = objc_msgSend_objectForKeyedSubscript_(v21, v22, @"SandboxFailureRoot");

      __int16 v26 = objc_msgSend_stringByResolvingSymlinksInPath(v23, v24, v25);
      uint64_t v27 = v26;
      if (v23)
      {
        char v74 = v20;
        id v28 = v16;
        uint64_t v31 = objc_msgSend_path(v28, v29, v30);
        char isEqualToString = objc_msgSend_isEqualToString_(v31, v32, @"/");

        if (isEqualToString)
        {
          uint64_t v36 = v28;
LABEL_18:

          if (v74) {
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v73 = v28;
          uint64_t v37 = v28;
          while (1)
          {
            long long v38 = objc_msgSend_path(v37, v34, v35);
            if (objc_msgSend_isEqualToString_(v38, v39, (uint64_t)v23)) {
              break;
            }
            __int16 v42 = objc_msgSend_path(v37, v40, v41);
            int v44 = objc_msgSend_isEqualToString_(v42, v43, (uint64_t)v27);

            if (v44) {
              goto LABEL_24;
            }
            uint64_t v36 = objc_msgSend_URLByDeletingLastPathComponent(v37, v45, v46);

            uint64_t v49 = objc_msgSend_path(v36, v47, v48);
            int v51 = objc_msgSend_isEqualToString_(v49, v50, @"/");

            uint64_t v37 = v36;
            if (v51) {
              goto LABEL_18;
            }
          }

LABEL_24:
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          uint64_t v53 = (void *)*MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
          {
            uint64_t v54 = v53;
            id v57 = objc_msgSend_path(v73, v55, v56);
            *(_DWORD *)buf = 138543362;
            uint64_t v76 = v57;
            _os_log_impl(&dword_1C4CFF000, v54, OS_LOG_TYPE_INFO, "Pretending this is an invalid sandbox path: %{public}@", buf, 0xCu);
          }
        }
LABEL_29:
        uint64_t v58 = objc_msgSend_directoryContext(*(void **)(a1 + 40), v18, v19);
        long long v61 = objc_msgSend_containerDirectory(v58, v59, v60);

        if (v61
          && (objc_msgSend_absoluteString(v16, v62, v63),
              long long v64 = objc_claimAutoreleasedReturnValue(),
              objc_msgSend_absoluteString(v61, v65, v66),
              long long v67 = objc_claimAutoreleasedReturnValue(),
              char hasPrefix = objc_msgSend_hasPrefix_(v64, v68, (uint64_t)v67),
              v67,
              v64,
              (hasPrefix & 1) == 0))
        {
          objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v62, *MEMORY[0x1E4F19C40], 12, @"Long Lived Operation %@ may not save a record with asset %@, whose fileURL %@ is inaccessible. Note that your app should not be re-installed between enqueueing and resuming a LongLivedOperation, as your container directory will change (it's now %@)", *(void *)(a1 + 32), v4, v12, v61);
        }
        else
        {
          objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v62, *MEMORY[0x1E4F19C40], 12, @"Long Lived Operation %@ may not save a record with asset %@, whose fileURL %@ is inaccessible", *(void *)(a1 + 32), v4, v12);
        uint64_t v70 = };
        uint64_t v71 = *(void *)(*(void *)(a1 + 48) + 8);
        char v72 = *(void **)(v71 + 40);
        *(void *)(v71 + 40) = v70;

        goto LABEL_3;
      }

      if ((v20 & 1) == 0) {
        goto LABEL_29;
      }
    }
    else if (!canOpenFileAtURL)
    {
      goto LABEL_29;
    }
LABEL_19:
    objc_msgSend_setRealPathURL_(v4, v18, (uint64_t)v16);
    goto LABEL_20;
  }
  uint64_t v6 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v5, *MEMORY[0x1E4F19C40], 12, @"Long Lived Operation %@ may not save a record with a CKPackage value.  Found %@", *(void *)(a1 + 32), v4);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

LABEL_3:
  uint64_t v9 = 1;
LABEL_22:

  return v9;
}

uint64_t sub_1C4FAFBD4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (objc_msgSend_boundaryKey(v4, v5, v6), uint64_t v7 = objc_claimAutoreleasedReturnValue(), v7, v7)
    && (objc_msgSend_entitlements(*(void **)(a1 + 32), v8, v9),
        id v10 = objc_claimAutoreleasedReturnValue(),
        char hasAssetBoundaryKeyEntitlement = objc_msgSend_hasAssetBoundaryKeyEntitlement(v10, v11, v12),
        v10,
        (hasAssetBoundaryKeyEntitlement & 1) == 0))
  {
    uint64_t v17 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v14, *MEMORY[0x1E4F19C40], 12, @"Usage of -[CKAsset boundaryKey] is CloudKit SPI and requires an entitlement. com.apple.private.cloudkit.assetBoundaryKey");
    uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;

    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v15 = 0;
  }

  return v15;
}

void sub_1C4FB0710(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4FB08B0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v8 = a3;
  if (v8)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v9 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void **)(a1 + 32);
      uint64_t v19 = v9;
      uint64_t v22 = objc_msgSend_shareID(v18, v20, v21);
      *(_DWORD *)buf = 138412546;
      uint64_t v25 = v22;
      __int16 v26 = 2112;
      id v27 = v8;
      _os_log_debug_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_DEBUG, "Error fetching PCS data from the database for %@: %@", buf, 0x16u);
    }
    uint64_t v12 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v10, v11);
    dispatch_group_leave(v12);
  }
  else
  {
    id v13 = objc_msgSend_shareID(*(void **)(a1 + 32), v6, v7);
    uint64_t v16 = objc_msgSend_databaseScope(*(void **)(a1 + 32), v14, v15);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = sub_1C4FB0A80;
    v23[3] = &unk_1E64F7E98;
    void v23[4] = *(void *)(a1 + 32);
    objc_msgSend_fetchPCSDataForShareWithID_databaseScope_withCompletionHandler_(v5, v17, (uint64_t)v13, v16, v23);
  }
}

void sub_1C4FB0A80(uint64_t a1, void *a2, void *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5)
  {
    uint64_t v25 = (void *)*MEMORY[0x1E4F1A548];
    if (v6)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v25);
      }
      __int16 v26 = (void *)*MEMORY[0x1E4F1A528];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG)) {
        goto LABEL_15;
      }
      id v29 = *(void **)(a1 + 32);
      uint64_t v30 = v26;
      uint64_t v33 = objc_msgSend_shareID(v29, v31, v32);
      *(_DWORD *)buf = 138412546;
      uint64_t v49 = v33;
      __int16 v50 = 2112;
      int v51 = v7;
      uint64_t v34 = "Error fetching PCS data from the database for %@: %@";
      uint64_t v35 = v30;
      uint32_t v36 = 22;
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v25);
      }
      uint64_t v37 = (void *)*MEMORY[0x1E4F1A528];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG)) {
        goto LABEL_15;
      }
      int v44 = *(void **)(a1 + 32);
      uint64_t v30 = v37;
      uint64_t v33 = objc_msgSend_shareID(v44, v45, v46);
      *(_DWORD *)buf = 138412290;
      uint64_t v49 = v33;
      uint64_t v34 = "No PCS data was found in the database for share %@";
      uint64_t v35 = v30;
      uint32_t v36 = 12;
    }
    _os_log_debug_impl(&dword_1C4CFF000, v35, OS_LOG_TYPE_DEBUG, v34, buf, v36);

LABEL_15:
    long long v38 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v27, v28);
    dispatch_group_leave(v38);

    goto LABEL_16;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v8 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    long long v39 = *(void **)(a1 + 32);
    long long v40 = v8;
    id v43 = objc_msgSend_shareID(v39, v41, v42);
    *(_DWORD *)buf = 138412290;
    uint64_t v49 = v43;
    _os_log_debug_impl(&dword_1C4CFF000, v40, OS_LOG_TYPE_DEBUG, "PCS data was fetched from the database for share %@", buf, 0xCu);
  }
  uint64_t v11 = objc_msgSend_container(*(void **)(a1 + 32), v9, v10);
  uint64_t v14 = objc_msgSend_pcsManager(v11, v12, v13);
  uint64_t v17 = objc_msgSend_shareModificationDate(v5, v15, v16);
  char v20 = objc_msgSend_topmostParentOperation(*(void **)(a1 + 32), v18, v19);
  uint64_t v23 = objc_msgSend_operationID(v20, v21, v22);
  v47[0] = MEMORY[0x1E4F143A8];
  v47[1] = 3221225472;
  id v47[2] = sub_1C4FB0DC8;
  void v47[3] = &unk_1E64F7E98;
  void v47[4] = *(void *)(a1 + 32);
  objc_msgSend_decryptPCSDataOnSharePCS_shareModificationDate_requestorOperationID_completionHandler_(v14, v24, (uint64_t)v5, v17, v23, v47);

LABEL_16:
}

void sub_1C4FB0DC8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v9 = objc_msgSend_pcs(v5, v7, v8);
  if (v6 || !v9)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v14 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(void **)(a1 + 32);
      uint64_t v17 = v14;
      char v20 = objc_msgSend_shareID(v16, v18, v19);
      int v21 = 138412546;
      uint64_t v22 = v20;
      __int16 v23 = 2112;
      id v24 = v6;
      _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "Couldn't decrypt PCS data for share %@ from the database with error %@. Ignoring it and re-fetching from the server", (uint8_t *)&v21, 0x16u);
    }
  }
  else
  {
    objc_msgSend_setWasFetchedFromCache_(*(void **)(a1 + 32), v10, 1);
    objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), v11, (uint64_t)v5, 0);
  }
  uint64_t v15 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v12, v13);
  dispatch_group_leave(v15);
}

void sub_1C4FB103C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  uint64_t v10 = objc_msgSend_invitedProtectionData(v6, v8, v9);

  uint64_t v13 = *(void **)(a1 + 32);
  if (v7 || !v10)
  {
    objc_msgSend__handlePCSDataFetched_withError_(v13, v11, 0, v7);
    id v27 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v25, v26);
    dispatch_group_leave(v27);
  }
  else
  {
    uint64_t v14 = objc_msgSend_container(v13, v11, v12);
    uint64_t v17 = objc_msgSend_pcsManager(v14, v15, v16);
    char v20 = objc_msgSend_topmostParentOperation(*(void **)(a1 + 32), v18, v19);
    __int16 v23 = objc_msgSend_operationID(v20, v21, v22);
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = sub_1C4FB1184;
    v28[3] = &unk_1E64F7E98;
    void v28[4] = *(void *)(a1 + 32);
    objc_msgSend_pcsDataFromFetchedShare_requestorOperationID_completionHandler_(v17, v24, (uint64_t)v6, v23, v28);
  }
}

void sub_1C4FB1184(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3);
  id v6 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v4, v5);
  dispatch_group_leave(v6);
}

void sub_1C4FB13E0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4FB1408(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  dispatch_group_leave(v3);
}

void sub_1C4FB1460(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  dispatch_group_leave(v3);
}

void sub_1C4FB150C()
{
  id v0 = (void *)qword_1EBBD0018;
  qword_1EBBD0018 = (uint64_t)&unk_1F20AC208;
}

uint64_t sub_1C4FB165C(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(MEMORY[0x1E4F19F08]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4FB1BD8()
{
  id v0 = (void *)qword_1EBBD0028;
  qword_1EBBD0028 = (uint64_t)&unk_1F20AC230;
}

BOOL sub_1C4FB1EE0(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2)
      {
        id v17 = objc_alloc_init(CKDPRecord);
        uint64_t v18 = 16;
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
          continue;
        }
        id v17 = objc_alloc_init(CKDPRecord);
        uint64_t v18 = 8;
      }
      objc_storeStrong((id *)(a1 + v18), v17);
      if (!PBReaderPlaceMark() || (CKDPRecordReadFrom((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4FB2838(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        id v17 = (CKDPRecord *)objc_alloc_init(MEMORY[0x1E4F19F20]);
        objc_storeStrong((id *)(a1 + 16), v17);
        if PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom()) {
          goto LABEL_34;
        }
        goto LABEL_41;
      case 2u:
        uint64_t v19 = PBReaderReadString();
        char v20 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x3F0], 8) = v19;

        goto LABEL_39;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_38:
        *(_DWORD *)(a1 + 32) = v23;
        goto LABEL_39;
      case 4u:
        id v17 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 24), v17);
        if PBReaderPlaceMark() && (CKDPRecordReadFrom((uint64_t)v17, a2))
        {
LABEL_34:
          PBReaderRecallMark();

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_41:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_39;
    }
  }
}

BOOL CKDPRequestedFieldsReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_msgSend_addFields_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    id v17 = objc_alloc_init(CKDPRequestedListField);
    objc_msgSend_addListField_(a1, v19, (uint64_t)v17);
    if (!PBReaderPlaceMark() || !sub_1C4E24338((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t CKDPRecordOneTimeStableUrlInfoReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(CKDPRecordOneTimeStableUrl);
        objc_msgSend_addOneTimeUrl_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (CKDPRecordOneTimeStableUrlReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4FB5D9C(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 8;
          goto LABEL_25;
        case 2u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 16;
          goto LABEL_25;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
          goto LABEL_25;
        case 4u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 32;
LABEL_25:
          uint64_t v19 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&STACK[0x3F0], 8) = v17;

          goto LABEL_26;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_26:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4FB695C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4FB7338(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4FB7350(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 456), a2);
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 3221225472;
  uint64_t v11 = sub_1C4FB7460;
  unint64_t v12 = &unk_1E64F09E0;
  objc_copyWeak(&v13, &location);
  objc_msgSend_setCompletionBlock_(*(void **)(*(void *)(a1 + 32) + 456), v5, (uint64_t)&v9);
  char v8 = objc_msgSend_fetchVersionsGroup(*(void **)(a1 + 32), v6, v7, v9, v10, v11, v12);
  dispatch_group_enter(v8);

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);
}

void sub_1C4FB7440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4FB7460(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_msgSend_fetchVersionsGroup(WeakRetained, v1, v2);
  dispatch_group_leave(v3);
}

void sub_1C4FB752C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4FB7B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  objc_destroyWeak((id *)(v53 - 160));
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4FB7BD8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4FB7BE8(uint64_t a1)
{
}

void sub_1C4FB7BF0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v10 = WeakRetained;
  if (!v5 || v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v29 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      int v40 = 138412546;
      id v41 = v5;
      __int16 v42 = 2112;
      id v43 = v6;
      _os_log_impl(&dword_1C4CFF000, v29, OS_LOG_TYPE_INFO, "Couldn't decrypt data for record version %@: %@", (uint8_t *)&v40, 0x16u);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
  }
  else
  {
    uint64_t v11 = objc_msgSend_container(WeakRetained, v8, v9);
    BOOL v14 = objc_msgSend_entitlements(v11, v12, v13);
    uint64_t hasProtectionDataEntitlement = objc_msgSend_hasProtectionDataEntitlement(v14, v15, v16);
    objc_msgSend_setSerializeProtectionData_(v5, v18, hasProtectionDataEntitlement);

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      char v21 = objc_msgSend_container(v10, v19, v20);
      uint64_t v24 = objc_msgSend_entitlements(v21, v22, v23);
      if (objc_msgSend_hasOutOfProcessUIEntitlement(v24, v25, v26))
      {
        objc_msgSend_setSerializePersonalInfo_(v5, v27, 1);
      }
      else
      {
        uint64_t v30 = objc_msgSend_container(v10, v27, v28);
        uint64_t v33 = objc_msgSend_entitlements(v30, v31, v32);
        uint64_t hasParticipantPIIEntitlement = objc_msgSend_hasParticipantPIIEntitlement(v33, v34, v35);
        objc_msgSend_setSerializePersonalInfo_(v5, v37, hasParticipantPIIEntitlement);
      }
    }
    id v38 = *(id *)(a1 + 32);
    objc_sync_enter(v38);
    objc_msgSend_addObject_(*(void **)(a1 + 32), v39, (uint64_t)v5);
    objc_sync_exit(v38);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1C4FB7E24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4FB7E40(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v5 = objc_msgSend_recordVersionFetchedBlock(WeakRetained, v3, v4);

  if (v5)
  {
    char v8 = objc_msgSend_callbackQueue(WeakRetained, v6, v7);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4FB7F48;
    block[3] = &unk_1E64F7F10;
    void block[4] = WeakRetained;
    id v13 = *(id *)(a1 + 32);
    char v16 = *(unsigned char *)(a1 + 72);
    id v9 = *(id *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 56);
    id v14 = v9;
    uint64_t v15 = v10;
    dispatch_async(v8, block);
  }
  uint64_t v11 = objc_msgSend_fetchVersionsGroup(*(void **)(a1 + 48), v6, v7);
  dispatch_group_leave(v11);
}

void sub_1C4FB7F48(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_recordVersionFetchedBlock(*(void **)(a1 + 32), a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, void, void, void, void))v4 + 2))(v4, *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 48), *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
}

void sub_1C4FB7FB4(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_recordVersionFetchedBlock(*(void **)(a1 + 32), a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, void, void, void, void))v4 + 2))(v4, *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 48), *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
}

void sub_1C4FB8268(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 80));
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4FB82A8(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  char v8 = (id *)(a1 + 32);
  id v9 = a5;
  id v10 = a4;
  id v11 = a2;
  id WeakRetained = objc_loadWeakRetained(v8);
  objc_msgSend__handleRecordVersionsFetchedForID_isDeleted_versions_responseCode_(WeakRetained, v12, (uint64_t)v11, a3, v10, v9);
}

void sub_1C4FB8344(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = objc_msgSend_error(v3, v4, v5);
  objc_msgSend_finishDecryption(WeakRetained, v7, v8);
  id v11 = objc_msgSend_fetchVersionsGroup(WeakRetained, v9, v10);
  id v14 = objc_msgSend_callbackQueue(WeakRetained, v12, v13);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = sub_1C4FB8444;
  v16[3] = &unk_1E64F0948;
  void v16[4] = WeakRetained;
  id v17 = v6;
  id v15 = v6;
  dispatch_group_notify(v11, v14, v16);
}

uint64_t sub_1C4FB8444(uint64_t a1, const char *a2)
{
  return objc_msgSend_finishWithError_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
}

uint64_t sub_1C4FB8708(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setZoneIDs_, *(void *)(a1 + 32));
}

void sub_1C4FB8AE0(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  CKOncePerBoot();
}

uint64_t sub_1C4FB8B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__expungeStaleDSIDs, a3);
}

uint64_t sub_1C4FB8C0C(uint64_t a1)
{
  id v1 = objc_alloc(*(Class *)(a1 + 32));
  qword_1EBBD0038 = objc_msgSend_initInternal(v1, v2, v3);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4FB9894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4FB98C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4FB98D0(uint64_t a1)
{
}

void sub_1C4FB98D8(uint64_t a1, const char *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = objc_msgSend_inlock_registrationsForDSID_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
  if (objc_msgSend_containsObject_(v3, v4, *(void *)(a1 + 48)))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v7 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      uint64_t v24 = v8;
      _os_log_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_INFO, "Not adding registration to PDS, as PDS is already aware of %@", buf, 0xCu);
    }
  }
  else
  {
    id v9 = objc_msgSend_inlock_registrar(*(void **)(a1 + 32), v5, v6);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v12 = objc_msgSend_userWithDSID_(MEMORY[0x1E4F83B70], v11, *(void *)(a1 + 40));
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    id obj = *(id *)(v13 + 40);
    LOBYTE(v10) = objc_msgSend_ensureRegistrationPresent_forUser_error_(v9, v14, v10, v12, &obj);
    objc_storeStrong((id *)(v13 + 40), obj);

    uint64_t v15 = (void *)*MEMORY[0x1E4F1A548];
    if (v10)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v15);
      }
      uint64_t v16 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        uint64_t v24 = v18;
        _os_log_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_INFO, "Added registration to PDS: %@", buf, 0xCu);
      }
      objc_msgSend_addObject_(v3, v17, *(void *)(a1 + 48));
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v15);
      }
      uint64_t v19 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a1 + 48);
        uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v24 = v20;
        __int16 v25 = 2112;
        uint64_t v26 = v21;
        _os_log_error_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_ERROR, "Unable to add registration to PDS: %@ %@", buf, 0x16u);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
    }
  }
}

uint64_t sub_1C4FB9FC0(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_aa_personID(a2, (const char *)a2, a3);
}

void sub_1C4FBA158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C4FBA17C(uint64_t a1, const char *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = objc_msgSend_inlock_registrationsForDSID_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
  if (objc_msgSend_containsObject_(v3, v4, *(void *)(a1 + 48)))
  {
    uint64_t v7 = objc_msgSend_inlock_registrar(*(void **)(a1 + 32), v5, v6);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v10 = objc_msgSend_userWithDSID_(MEMORY[0x1E4F83B70], v9, *(void *)(a1 + 40));
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
    id obj = *(id *)(v11 + 40);
    LOBYTE(v_Block_object_dispose(&STACK[0x3F0], 8) = objc_msgSend_removeRegistration_fromUser_error_(v7, v12, v8, v10, &obj);
    objc_storeStrong((id *)(v11 + 40), obj);

    uint64_t v13 = (void *)*MEMORY[0x1E4F1A548];
    if (v8)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v13);
      }
      uint64_t v14 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        uint64_t v24 = v16;
        _os_log_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_INFO, "Removed registration from PDS: %@", buf, 0xCu);
      }
      objc_msgSend_removeObject_(v3, v15, *(void *)(a1 + 48));
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v13);
      }
      uint64_t v19 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a1 + 48);
        uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v24 = v20;
        __int16 v25 = 2112;
        uint64_t v26 = v21;
        _os_log_error_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_ERROR, "Unable to remove registration from PDS: %@ %@", buf, 0x16u);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v17 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      uint64_t v24 = v18;
      _os_log_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_INFO, "Not removing registration from PDS, as PDS is not aware of %@", buf, 0xCu);
    }
  }
}

void sub_1C4FBA8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4FBA8DC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_inlock_registrar(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = objc_msgSend_userWithDSID_(MEMORY[0x1E4F83B70], v5, *(void *)(a1 + 40));
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v7 + 40);
  char v9 = objc_msgSend_removeAllRegistrationsFromUser_error_(v4, v8, (uint64_t)v6, &obj);
  objc_storeStrong((id *)(v7 + 40), obj);

  uint64_t v10 = (void *)*MEMORY[0x1E4F1A548];
  if (v9)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v10);
    }
    uint64_t v11 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      uint64_t v21 = v14;
      _os_log_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_INFO, "Removed all registrations for account %@ from PDS", buf, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v10);
    }
    uint64_t v15 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v21 = v18;
      _os_log_error_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_ERROR, "Unable to remove all registrations from PDS: %@", buf, 0xCu);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
  }
  uint64_t v16 = objc_msgSend_registrationsByDSID(*(void **)(a1 + 32), v12, v13);
  objc_msgSend_setObject_forKeyedSubscript_(v16, v17, 0, *(void *)(a1 + 40));
}