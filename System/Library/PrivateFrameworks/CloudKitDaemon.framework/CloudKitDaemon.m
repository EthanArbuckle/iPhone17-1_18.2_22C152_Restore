void sub_1C4D02894(void *a1, const char *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id obj;

  v3 = (void *)a1[4];
  v4 = a1[5];
  v5 = *(void *)(a1[7] + 8);
  obj = *(id *)(v5 + 40);
  v6 = objc_msgSend__lockediCloudAuthTokenWithContainer_error_(v3, a2, v4, &obj);
  objc_storeStrong((id *)(v5 + 40), obj);
  v7 = *(void *)(a1[6] + 8);
  v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_1C4D0290C(void *a1, const char *a2)
{
  v3 = (void *)a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = objc_msgSend__lockedCloudKitAuthTokenWithContainer_error_(v3, a2, v4, &obj);
  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = *(void *)(a1[6] + 8);
  v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_1C4D03170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D033B8(uint64_t a1, const char *a2)
{
  uint64_t result = objc_msgSend__lockedHasTCCAuthorization_(*(void **)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 48));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1C4D042BC(uint64_t a1, const char *a2)
{
  v3 = objc_msgSend_inlock_applicationMetadataForApplicationID_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
  uint64_t v4 = objc_opt_new();
  objc_msgSend_setObject_forKeyedSubscript_(v4, v5, *(void *)(a1 + 40), @"applicationID");
  uint64_t v8 = objc_msgSend_adopterProcessType(*(void **)(a1 + 48), v6, v7);
  uint64_t v13 = objc_msgSend_adopterProcessType(v3, v9, v10);
  v14 = (void *)MEMORY[0x1E4F28ED0];
  v15 = v3;
  BOOL v16 = v8 != v13;
  if (v8 != v13) {
    v15 = *(void **)(a1 + 48);
  }
  uint64_t v17 = objc_msgSend_adopterProcessType(v15, v11, v12);
  v19 = objc_msgSend_numberWithInteger_(v14, v18, v17);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v20, (uint64_t)v19, @"adopterProcessType");

  v23 = objc_msgSend_applicationContainerPath(*(void **)(a1 + 48), v21, v22);
  uint64_t v26 = objc_msgSend_applicationContainerPath(v3, v24, v25);
  if (v23 == (void *)v26)
  {

    v38 = v3;
  }
  else
  {
    v29 = (void *)v26;
    v30 = objc_msgSend_applicationContainerPath(*(void **)(a1 + 48), v27, v28);
    v33 = objc_msgSend_applicationContainerPath(v3, v31, v32);
    char isEqualToString = objc_msgSend_isEqualToString_(v30, v34, (uint64_t)v33);

    v38 = v3;
    if ((isEqualToString & 1) == 0)
    {
      BOOL v16 = 1;
      objc_msgSend_applicationContainerPath(*(void **)(a1 + 48), v36, v37);
      goto LABEL_8;
    }
  }
  objc_msgSend_applicationContainerPath(v38, v36, v37);
  uint64_t v39 = LABEL_8:;
  v41 = (void *)v39;
  if (v39) {
    objc_msgSend_setObject_forKeyedSubscript_(v4, v40, v39, @"applicationContainerPath");
  }
  else {
    objc_msgSend_setObject_forKeyedSubscript_(v4, v40, (uint64_t)&stru_1F2044F30, @"applicationContainerPath");
  }

  int v44 = objc_msgSend_clientSDKVersion(*(void **)(a1 + 48), v42, v43);
  int v49 = objc_msgSend_clientSDKVersion(v3, v45, v46);
  v50 = (void *)MEMORY[0x1E4F28ED0];
  v51 = v3;
  if (v44 != v49)
  {
    v51 = *(void **)(a1 + 48);
    BOOL v16 = 1;
  }
  uint64_t v52 = objc_msgSend_clientSDKVersion(v51, v47, v48);
  v54 = objc_msgSend_numberWithUnsignedInt_(v50, v53, v52);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v55, (uint64_t)v54, @"clientSDKVersion");

  v58 = objc_msgSend_containingBundleID(*(void **)(a1 + 48), v56, v57);
  uint64_t v61 = objc_msgSend_containingBundleID(v3, v59, v60);
  if (v58 == (void *)v61)
  {

    v73 = v3;
  }
  else
  {
    v64 = (void *)v61;
    v65 = objc_msgSend_containingBundleID(*(void **)(a1 + 48), v62, v63);
    v68 = objc_msgSend_containingBundleID(v3, v66, v67);
    char v70 = objc_msgSend_isEqualToString_(v65, v69, (uint64_t)v68);

    v73 = v3;
    if ((v70 & 1) == 0)
    {
      BOOL v16 = 1;
      objc_msgSend_containingBundleID(*(void **)(a1 + 48), v71, v72);
      goto LABEL_18;
    }
  }
  objc_msgSend_containingBundleID(v73, v71, v72);
  uint64_t v74 = LABEL_18:;
  v76 = (void *)v74;
  if (v74) {
    objc_msgSend_setObject_forKeyedSubscript_(v4, v75, v74, @"containingBundleID");
  }
  else {
    objc_msgSend_setObject_forKeyedSubscript_(v4, v75, (uint64_t)&stru_1F2044F30, @"containingBundleID");
  }

  v79 = objc_msgSend_entitlements(*(void **)(a1 + 48), v77, v78);
  uint64_t v82 = objc_msgSend_entitlements(v3, v80, v81);
  if (v79 == (void *)v82)
  {

    v94 = v3;
  }
  else
  {
    v85 = (void *)v82;
    v86 = objc_msgSend_entitlements(*(void **)(a1 + 48), v83, v84);
    v89 = objc_msgSend_entitlements(v3, v87, v88);
    char isEqual = objc_msgSend_isEqual_(v86, v90, (uint64_t)v89);

    v94 = v3;
    if ((isEqual & 1) == 0)
    {
      BOOL v16 = 1;
      objc_msgSend_entitlements(*(void **)(a1 + 48), v92, v93);
      goto LABEL_26;
    }
  }
  objc_msgSend_entitlements(v94, v92, v93);
  v95 = LABEL_26:;
  objc_msgSend_setObject_forKeyedSubscript_(v4, v96, (uint64_t)v95, @"entitlements");

  int isClientMainBundleAppleExecutable = objc_msgSend_isClientMainBundleAppleExecutable(*(void **)(a1 + 48), v97, v98);
  int v102 = objc_msgSend_isClientMainBundleAppleExecutable(v3, v100, v101);
  v105 = (void *)MEMORY[0x1E4F28ED0];
  if (isClientMainBundleAppleExecutable != v102)
  {
    uint64_t v106 = objc_msgSend_isClientMainBundleAppleExecutable(*(void **)(a1 + 48), v103, v104);
    v108 = objc_msgSend_numberWithBool_(v105, v107, v106);
    objc_msgSend_setObject_forKeyedSubscript_(v4, v109, (uint64_t)v108, @"isMainBundleAppleExecutable");

LABEL_29:
    v114 = *(void **)(a1 + 32);
    v117[0] = MEMORY[0x1E4F143A8];
    v117[1] = 3221225472;
    v117[2] = sub_1C5044BA8;
    v117[3] = &unk_1E64F8D30;
    id v118 = v4;
    id v119 = *(id *)(a1 + 40);
    id v116 = (id)objc_msgSend_performDatabaseOperation_(v114, v115, (uint64_t)v117);

    goto LABEL_30;
  }
  uint64_t v110 = objc_msgSend_isClientMainBundleAppleExecutable(v3, v103, v104);
  v112 = objc_msgSend_numberWithBool_(v105, v111, v110);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v113, (uint64_t)v112, @"isMainBundleAppleExecutable");

  if (v16) {
    goto LABEL_29;
  }
LABEL_30:
}

void sub_1C4D04A60(uint64_t a1, void *a2)
{
  v65[4] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v6 = objc_msgSend_appContainerTuple(*(void **)(a1 + 32), v4, v5);
  v64[0] = @"applicationID";
  uint64_t v9 = objc_msgSend_applicationID(v6, v7, v8);
  v65[0] = v9;
  v64[1] = @"containerID";
  uint64_t v12 = objc_msgSend_containerID(v6, v10, v11);
  v65[1] = v12;
  v64[2] = @"personaID";
  uint64_t v15 = objc_msgSend_personaID(v6, v13, v14);
  v18 = (void *)v15;
  if (v15) {
    v19 = (__CFString *)v15;
  }
  else {
    v19 = &stru_1F2044F30;
  }
  v65[2] = v19;
  v64[3] = @"accountID";
  uint64_t v20 = objc_msgSend_accountID(*(void **)(a1 + 32), v16, v17);
  uint64_t v22 = (void *)v20;
  if (v20) {
    v23 = (__CFString *)v20;
  }
  else {
    v23 = &stru_1F2044F30;
  }
  v65[3] = v23;
  v24 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v21, (uint64_t)v65, v64, 4);

  uint64_t v26 = objc_msgSend_equalityClauseAndBindingsForDict_(MEMORY[0x1E4F1A368], v25, (uint64_t)v24);
  uint64_t v63 = @"tokenRegistered";
  uint64_t v28 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v27, (uint64_t)&v63, 1);
  v31 = objc_msgSend_v1(v26, v29, v30);
  v34 = objc_msgSend_v2(v26, v32, v33);
  v36 = objc_msgSend_select_from_where_bindings_(v3, v35, (uint64_t)v28, @"AppContainerAccount", v31, v34);

  if (objc_msgSend_count(v36, v37, v38))
  {
    v41 = objc_msgSend_objectAtIndexedSubscript_(v36, v39, 0);
    if (objc_msgSend_tokenRegistered(*(void **)(a1 + 40), v42, v43) == -1)
    {
      v45 = objc_msgSend_objectForKeyedSubscript_(v41, v44, @"tokenRegistered");
      uint64_t v48 = objc_msgSend_integerValue(v45, v46, v47);
      objc_msgSend_setTokenRegistered_(*(void **)(a1 + 40), v49, v48);
    }
  }
  v50 = objc_msgSend_mutableCopy(v24, v39, v40);
  v53 = objc_msgSend_containerOptions(*(void **)(a1 + 40), v51, v52);
  objc_msgSend_setObject_forKeyedSubscript_(v50, v54, (uint64_t)v53, @"containerOptions");

  v55 = (void *)MEMORY[0x1E4F28ED0];
  uint64_t v58 = objc_msgSend_tokenRegistered(*(void **)(a1 + 40), v56, v57);
  uint64_t v60 = objc_msgSend_numberWithInteger_(v55, v59, v58);
  objc_msgSend_setObject_forKeyedSubscript_(v50, v61, (uint64_t)v60, @"tokenRegistered");

  objc_msgSend_insertOrReplaceInto_values_(v3, v62, @"AppContainerAccount", v50);
}

void sub_1C4D04D44(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_sandboxExtensions(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_count(v4, v5, v6);

  if (v7)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v8 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_DEBUG, "Sending sandbox extensions to client...", v14, 2u);
    }
    uint64_t v11 = *(void **)(a1 + 40);
    uint64_t v12 = objc_msgSend_sandboxExtensions(*(void **)(a1 + 32), v9, v10);
    objc_msgSend_consumeSandboxExtensions_reply_(v11, v13, (uint64_t)v12, &unk_1F2042AD0);
  }
}

void sub_1C4D08018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D08994(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D08C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D09464(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D09500(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D098E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D09B00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D0A214(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1C4D0A4DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D0A874(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1C4D0A894(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (!v4)
  {
    uint64_t v5 = objc_msgSend_accountStore(*(void **)(a1 + 32), a2, a3);
    uint64_t v8 = objc_msgSend_aa_primaryAppleAccount(v5, v6, v7);
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  }
  return v4;
}

void sub_1C4D0AA14(uint64_t a1, const char *a2)
{
  aBlock = 0;
  objc_msgSend_getArgument_atIndex_(*(void **)(a1 + 32), a2, (uint64_t)&aBlock, a2);
  _Block_signature(aBlock);
  uint64_t v4 = aBlock;
  id v5 = *(id *)(a1 + 40);
  objc_msgSend_beginContentAccess(v5, v6, v7);
  uint64_t v10 = MEMORY[0x1E4F143A8];
  uint64_t v11 = v4;
  id v8 = v4;
  id v12 = (id)__NSMakeSpecialForwardingCaptureBlock();
  objc_msgSend_setArgument_atIndex_(*(void **)(a1 + 32), v9, (uint64_t)&v12, a2, v10, 3221225472, sub_1C4D0B4F8, &unk_1E64F4380);
}

void sub_1C4D0AD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C4D0B288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D0B2B4(uint64_t a1, uint64_t a2, id obj)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), obj);
  id v5 = obj;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1C4D0B4DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D0B4F8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  objc_msgSend_setTarget_(v4, v5, v3);
  objc_msgSend_invoke(v4, v6, v7);

  uint64_t v10 = *(void **)(a1 + 40);
  return objc_msgSend_endContentAccess(v10, v8, v9);
}

void sub_1C4D0B5C8(uint64_t a1)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1C4D04A60;
  v5[3] = &unk_1E64F8D30;
  v2 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v4 = (id)objc_msgSend_performDatabaseOperation_(v2, v3, (uint64_t)v5);
}

void sub_1C4D0B670(uint64_t a1)
{
  uint64_t v7 = MEMORY[0x1E4F143A8];
  uint64_t v8 = 3221225472;
  uint64_t v9 = sub_1C4D0B814;
  uint64_t v10 = &unk_1E64F0E18;
  v2 = *(void **)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = v2;
  dispatch_block_t v3 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, &v7);
  id v6 = objc_msgSend_accountStatusWorkloop(*(void **)(a1 + 32), v4, v5, v7, v8, v9, v10, v11);
  dispatch_async(v6, v3);
}

void sub_1C4D0B814(uint64_t a1)
{
  uint64_t v177 = *MEMORY[0x1E4F143B8];
  v2 = objc_opt_new();
  uint64_t v5 = objc_msgSend__accountStatus(*(void **)(a1 + 32), v3, v4);
  objc_msgSend_setAccountStatus_(v2, v6, v5);
  objc_msgSend_setWalrusStatus_(v2, v7, 0);
  objc_msgSend_setDeviceToDeviceEncryptionAvailability_(v2, v8, 0);
  uint64_t v11 = objc_msgSend_options(*(void **)(a1 + 32), v9, v10);
  uint64_t v14 = objc_msgSend_bypassPCSEncryption(v11, v12, v13);
  objc_msgSend_setBypassPCSEncryption_(v2, v15, v14);

  BOOL v16 = 1;
  uint64_t hasTCCAuthorization = objc_msgSend_hasTCCAuthorization_(*(void **)(a1 + 32), v17, 1);
  objc_msgSend_setAccountAccessAuthorization_(v2, v19, hasTCCAuthorization);
  char v22 = objc_msgSend_bypassPCSEncryption(v2, v20, v21);
  uint64_t v25 = objc_msgSend_account(*(void **)(a1 + 32), v23, v24);
  if (objc_msgSend_isPrimaryAccount(v25, v26, v27))
  {
    BOOL v30 = 0;
  }
  else
  {
    v31 = objc_msgSend_deviceContext(*(void **)(a1 + 32), v28, v29);
    v34 = objc_msgSend_testDeviceReference(v31, v32, v33);
    BOOL v16 = v34 != 0;
    BOOL v30 = v34 == 0;
  }
  uint64_t v37 = objc_msgSend_account(*(void **)(a1 + 32), v35, v36);
  uint64_t v40 = (os_log_t *)MEMORY[0x1E4F1A500];
  v41 = (void *)MEMORY[0x1E4F1A550];
  if (!v37) {
    goto LABEL_6;
  }
  v42 = (void *)v37;
  uint64_t v43 = objc_msgSend_account(*(void **)(a1 + 32), v38, v39);
  uint64_t v46 = objc_msgSend_accountType(v43, v44, v45);

  if (v46 == 1) {
    goto LABEL_6;
  }
  if (*v41 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  os_log_t v47 = *v40;
  if (os_log_type_enabled(*v40, OS_LOG_TYPE_DEBUG))
  {
    if (v16) {
      v156 = @" not";
    }
    else {
      v156 = &stru_1F2044F30;
    }
    v157 = *(void **)(a1 + 32);
    v158 = v47;
    objc_msgSend_containerID(v157, v159, v160);
    v161 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412802;
    v170 = v156;
    __int16 v171 = 2048;
    v172 = v157;
    __int16 v173 = 2112;
    v174 = v161;
    _os_log_debug_impl(&dword_1C4CFF000, v158, OS_LOG_TYPE_DEBUG, "Current account is%@ secondary account for CKDContainer %p, containerID %@.", buf, 0x20u);

LABEL_6:
    if (*v41 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
  }
  os_log_t v48 = *v40;
  if (os_log_type_enabled(*v40, OS_LOG_TYPE_DEBUG))
  {
    v126 = *(void **)(a1 + 32);
    v127 = v48;
    objc_msgSend_accountOverrideInfo(v126, v128, v129);
    v130 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v131 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    v170 = v130;
    __int16 v171 = 2048;
    v172 = v131;
    _os_log_debug_impl(&dword_1C4CFF000, v127, OS_LOG_TYPE_DEBUG, "Account Override info %@ for CKDContainer %p", buf, 0x16u);
  }
  v51 = objc_msgSend_options(*(void **)(a1 + 32), v49, v50);
  int OnlyManatee = objc_msgSend_forceEnableReadOnlyManatee(v51, v52, v53);

  if (OnlyManatee)
  {
    objc_msgSend_setDeviceToDeviceEncryptionAvailability_(v2, v55, 3);
    goto LABEL_24;
  }
  if (objc_msgSend_accountStatus(v2, v55, v56) == 3) {
    char v59 = 1;
  }
  else {
    char v59 = v22;
  }
  if ((v59 & 1) == 0)
  {
    uint64_t v60 = objc_msgSend_deviceContext(*(void **)(a1 + 32), v57, v58);
    uint64_t v63 = objc_msgSend_accountDataSecurityObserver(v60, v61, v62);

    v66 = objc_msgSend_account(*(void **)(a1 + 32), v64, v65);
    int isSecondaryAccount_error = objc_msgSend_isManateeAvailableForAccount_isSecondaryAccount_error_(v63, v67, (uint64_t)v66, v30, 0);

    if (isSecondaryAccount_error)
    {
      uint64_t v71 = objc_msgSend_deviceToDeviceEncryptionAvailability(v2, v69, v70);
      objc_msgSend_setDeviceToDeviceEncryptionAvailability_(v2, v72, v71 | 2);
    }
    else
    {
      v75 = objc_msgSend_account(*(void **)(a1 + 32), v69, v70);
      int v77 = objc_msgSend_accountSupportsManatee_(v63, v76, (uint64_t)v75);

      if (!v77)
      {
LABEL_23:

        goto LABEL_24;
      }
    }
    uint64_t v78 = objc_msgSend_deviceToDeviceEncryptionAvailability(v2, v73, v74);
    objc_msgSend_setDeviceToDeviceEncryptionAvailability_(v2, v79, v78 | 1);
    goto LABEL_23;
  }
LABEL_24:
  v80 = objc_msgSend_account(*(void **)(a1 + 32), v57, v58);
  if (objc_msgSend_isCarryAccount(v80, v81, v82)) {
    objc_msgSend_setAccountPartition_(v2, v83, 2);
  }
  else {
    objc_msgSend_setAccountPartition_(v2, v83, 1);
  }

  objc_msgSend_setHasValidCredentials_(v2, v84, 1);
  objc_msgSend_setNeedsToVerifyTerms_(v2, v85, 0);
  uint64_t v88 = objc_msgSend_account(*(void **)(a1 + 32), v86, v87);
  uint64_t v89 = *(void *)(a1 + 32);
  id v168 = 0;
  v91 = objc_msgSend_iCloudAuthTokenWithContainer_error_(v88, v90, v89, &v168);
  id v92 = v168;

  if (!v91 || v92) {
    objc_msgSend_setHasValidCredentials_(v2, v93, 0);
  }
  v95 = objc_msgSend_account(*(void **)(a1 + 32), v93, v94);
  uint64_t v96 = *(void *)(a1 + 32);
  id v167 = v92;
  uint64_t v98 = objc_msgSend_cloudKitAuthTokenWithContainer_error_(v95, v97, v96, &v167);
  v99 = (__CFString *)v167;

  if (!v98 || v99)
  {
    int v102 = objc_msgSend_domain(v99, v100, v101);
    v105 = v102;
    if (v102 == (void *)*MEMORY[0x1E4F19DD8])
    {
      uint64_t v107 = objc_msgSend_code(v99, v103, v104);

      if (v107 == 1004) {
        objc_msgSend_setNeedsToVerifyTerms_(v2, v106, 1);
      }
    }
    else
    {
    }
    objc_msgSend_setHasValidCredentials_(v2, v106, 0);
  }
  if ((v22 & 1) == 0)
  {
    v108 = objc_msgSend_deviceContext(*(void **)(a1 + 32), v100, v101);
    v111 = objc_msgSend_accountDataSecurityObserver(v108, v109, v110);

    v114 = objc_msgSend_account(*(void **)(a1 + 32), v112, v113);
    if (objc_msgSend_isWalrusEnabledForAccount_allowBlockingFetch_(v111, v115, (uint64_t)v114, 1)) {
      objc_msgSend_setWalrusStatus_(v2, v116, 1);
    }
    else {
      objc_msgSend_setWalrusStatus_(v2, v116, 2);
    }
  }
  if (objc_msgSend_accountStatus(v2, v100, v101) == 1 && (objc_msgSend_hasValidCredentials(v2, v117, v118) & 1) == 0)
  {
    objc_msgSend_clientSDKVersion(*(void **)(a1 + 32), v117, v118);
    if (CKLinkCheck32f5805a68adfc1b65f94a0de69aa32177c7cd24())
    {
      if ((objc_msgSend__isAdopterAppleInternal(*(void **)(a1 + 32), v117, v118) & 1) == 0) {
        objc_msgSend_setAccountStatus_(v2, v117, 4);
      }
    }
  }
  if (objc_msgSend_accountStatus(v2, v117, v118) == 1
    && objc_msgSend_walrusStatus(v2, v119, v120) == 1
    && (objc_msgSend_deviceToDeviceEncryptionAvailability(v2, v119, v120) & 2) == 0
    && (objc_msgSend_bypassPCSEncryption(v2, v119, v120) & 1) == 0)
  {
    v121 = objc_msgSend_options(*(void **)(a1 + 32), v119, v120);
    if (objc_msgSend_useClearAssetEncryption(v121, v122, v123))
    {
    }
    else
    {
      objc_msgSend_clientSDKVersion(*(void **)(a1 + 32), v124, v125);
      int v132 = CKLinkCheck32f5805a68adfc1b65f94a0de69aa32177c7cd24();

      if (v132) {
        objc_msgSend_setAccountStatus_(v2, v119, 4);
      }
    }
  }
  if (objc_msgSend_shouldUsePCSEncryption(*(void **)(a1 + 32), v119, v120))
  {
    v135 = objc_msgSend_pcsManager(*(void **)(a1 + 32), v133, v134);
    objc_msgSend_pcsServiceName(v135, v136, v137);
    v138 = (__CFString *)objc_claimAutoreleasedReturnValue();

    v141 = objc_msgSend_sharedNotifier(CKDPCSNotifier, v139, v140);
    int v143 = objc_msgSend_serviceNeedsDBRReauthentication_(v141, v142, (uint64_t)v138);

    if (v143)
    {
      if (*v41 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      os_log_t v144 = *v40;
      if (os_log_type_enabled(*v40, OS_LOG_TYPE_DEBUG))
      {
        v162 = *(void **)(a1 + 32);
        v163 = v144;
        v166 = objc_msgSend_containerID(v162, v164, v165);
        *(_DWORD *)buf = 138412546;
        v170 = v138;
        __int16 v171 = 2112;
        v172 = v166;
        _os_log_debug_impl(&dword_1C4CFF000, v163, OS_LOG_TYPE_DEBUG, "Service: %@ needs DBR re-authentication. Setting account status temporarily unavailable for container: %@", buf, 0x16u);
      }
      objc_msgSend_setAccountStatus_(v2, v145, 4);
    }
  }
  v146 = objc_msgSend_build(v2, v133, v134);
  if (*v41 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  os_log_t v147 = *v40;
  if (os_log_type_enabled(*v40, OS_LOG_TYPE_DEBUG))
  {
    v149 = *(void **)(a1 + 32);
    v150 = v147;
    objc_msgSend_account(v149, v151, v152);
    v153 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v154 = &stru_1F2044F30;
    *(_DWORD *)buf = 138413058;
    v155 = @".\nError was ";
    v170 = v153;
    __int16 v171 = 2112;
    if (!v99) {
      v155 = &stru_1F2044F30;
    }
    v172 = v146;
    if (v99) {
      v154 = v99;
    }
    __int16 v173 = 2114;
    v174 = v155;
    __int16 v175 = 2112;
    v176 = v154;
    _os_log_debug_impl(&dword_1C4CFF000, v150, OS_LOG_TYPE_DEBUG, "Returning account info for account %@ \nto client: %@%{public}@%@", buf, 0x2Au);
  }
  uint64_t v148 = *(void *)(a1 + 40);
  if (v148) {
    (*(void (**)(uint64_t, void *, void))(v148 + 16))(v148, v146, 0);
  }
}

void sub_1C4D0C568(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_container(*(void **)(a1 + 32), a2, a3);
  id obj = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_beginContentAccess(obj, v4, v5))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      ++*(void *)(v6 + 64);
      uint64_t v7 = *(void *)(a1 + 32);
      if (v7)
      {
        *(unsigned char *)(v7 + 8) = 0;
        uint64_t v8 = *(void *)(a1 + 32);
        if (v8) {
          objc_storeStrong((id *)(v8 + 72), obj);
        }
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
}

void sub_1C4D0C820(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D0C834(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 64);
    if (v4)
    {
      *(void *)(v3 + 64) = v4 - 1;
      uint64_t v6 = *(void *)(a1 + 32);
      if (v6) {
        objc_msgSend_endContentAccess(*(void **)(v6 + 72), a2, a3);
      }
      else {
        objc_msgSend_endContentAccess(0, a2, a3);
      }
      uint64_t v9 = *(void *)(a1 + 32);
      if (v9)
      {
        if (!*(void *)(v9 + 64) && *(unsigned char *)(v9 + 9))
        {
          sub_1C4E669BC(v9, v7, v8);
        }
      }
    }
  }
}

void sub_1C4D0C974(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D0CA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4D0CBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id CKCurrentPersonaID()
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (sub_1C4D0D570())
  {
    v2 = objc_msgSend_sharedManager(MEMORY[0x1E4FB36F8], v0, v1);
    uint64_t v5 = objc_msgSend_currentPersona(v2, v3, v4);

    if (objc_msgSend_isDataSeparatedPersona(v5, v6, v7))
    {
      uint64_t v10 = objc_msgSend_userPersonaUniqueString(v5, v8, v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v11 = (id)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = v5 ? @"Current persona identifier is " : @"No current persona found.";
      if (v5)
      {
        objc_msgSend_userPersonaUniqueString(v5, v12, v13);
        BOOL v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        BOOL v16 = &stru_1F2044F30;
      }
      int v17 = 138412802;
      v18 = v15;
      __int16 v19 = 2112;
      uint64_t v20 = v16;
      __int16 v21 = 2112;
      char v22 = v10;
      _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "%@%@. Filtering to effective personaID %@", (uint8_t *)&v17, 0x20u);
      if (v5) {
    }
      }
  }
  else
  {
    uint64_t v10 = 0;
  }
  return v10;
}

uint64_t type metadata accessor for PartialTrafficLog(uint64_t a1)
{
  return sub_1C4D3961C(a1, qword_1EBBCDB00);
}

uint64_t type metadata accessor for PartialTrafficLog.ResponseMetadata(uint64_t a1)
{
  return sub_1C4D3961C(a1, qword_1EBBCD9B0);
}

uint64_t type metadata accessor for PartialTrafficLog.RequestMetadata(uint64_t a1)
{
  return sub_1C4D3961C(a1, qword_1EBBCD8F0);
}

uint64_t static TrafficLogger.shared.getter()
{
  if (qword_1EBBCD878 != -1) {
    swift_once();
  }
  return swift_retain();
}

void sub_1C4D0D2E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id CKGetPersonaAwareHomeCacheDirectory()
{
  if (CKThreadIsInDataSeparatedPersonaContext()) {
    CKGetDataSeparatedVolumeCacheDirectory();
  }
  else {
  v0 = CKGetHomeCacheDir();
  }
  return v0;
}

id CKGetPersonaAwareCacheDirectory()
{
  if (CKThreadIsInDataSeparatedPersonaContext()) {
    CKGetDataSeparatedVolumeCacheDirectory();
  }
  else {
  v0 = CKGetHomeCacheDir();
  }
  return v0;
}

uint64_t CKThreadIsInDataSeparatedPersonaContext()
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!sub_1C4D0D570()) {
    return 0;
  }
  v2 = objc_msgSend_sharedManager(MEMORY[0x1E4FB36F8], v0, v1);
  uint64_t v5 = objc_msgSend_currentPersona(v2, v3, v4);

  uint64_t isDataSeparatedPersona = objc_msgSend_isDataSeparatedPersona(v5, v6, v7);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v9 = (id)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = &stru_1F2044F30;
    if (isDataSeparatedPersona) {
      uint64_t v14 = &stru_1F2044F30;
    }
    else {
      uint64_t v14 = @" not";
    }
    if (v5) {
      uint64_t v15 = @" Current persona identifier is ";
    }
    else {
      uint64_t v15 = @" No current persona found.";
    }
    if (v5)
    {
      objc_msgSend_userPersonaUniqueString(v5, v10, v11);
      uint64_t v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    int v16 = 138412802;
    int v17 = v14;
    __int16 v18 = 2112;
    __int16 v19 = v15;
    __int16 v20 = 2112;
    __int16 v21 = v13;
    _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "CK is%@ running in data separated persona context.%@%@", (uint8_t *)&v16, 0x20u);
    if (v5) {
  }
    }
  return isDataSeparatedPersona;
}

id CKGetHomeCacheDir()
{
  if (qword_1EBBD0070 != -1) {
    dispatch_once(&qword_1EBBD0070, &unk_1F20447D0);
  }
  v0 = (void *)qword_1EBBD0068;
  return v0;
}

uint64_t sub_1C4D0D570()
{
  if (CKIsRunningInSyncBubble()) {
    return 0;
  }
  uint64_t v3 = objc_msgSend_sharedManager(MEMORY[0x1E4FB36F8], v0, v1);
  uint64_t v2 = objc_msgSend_isMultiUser(v3, v4, v5) ^ 1;

  return v2;
}

void sub_1C4D0D5F8(uint64_t a1)
{
  uint64_t v7 = MEMORY[0x1E4F143A8];
  uint64_t v8 = 3221225472;
  uint64_t v9 = sub_1C4D0D9B4;
  uint64_t v10 = &unk_1E64F0E18;
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = v2;
  dispatch_block_t v3 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, &v7);
  uint64_t v6 = objc_msgSend_accountStatusWorkloop(*(void **)(a1 + 32), v4, v5, v7, v8, v9, v10, v11);
  dispatch_async(v6, v3);
}

uint64_t sub_1C4D0D89C(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v6 = objc_msgSend_entitlements(a2, v4, v5);
  char hasCloudKitSystemServiceEntitlement = objc_msgSend_hasCloudKitSystemServiceEntitlement(v6, v7, v8);

  if ((hasCloudKitSystemServiceEntitlement & 1) != 0
    || (uint64_t v10 = (void *)MEMORY[0x1E4F74230],
        id v11 = v3,
        objc_msgSend_sharedConnection(v10, v12, v13),
        uint64_t v14 = objc_claimAutoreleasedReturnValue(),
        char isCloudSyncAllowed = objc_msgSend_isCloudSyncAllowed_(v14, v15, (uint64_t)v11),
        v11,
        v14,
        (isCloudSyncAllowed & 1) != 0))
  {
    uint64_t v17 = 0;
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    __int16 v19 = *MEMORY[0x1E4F1A500];
    uint64_t v17 = 1;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int16 v20 = 0;
      _os_log_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_INFO, "ManagedConfiguration is restricting account access", v20, 2u);
    }
  }

  return v17;
}

void sub_1C4D0D9B4(uint64_t a1, const char *a2, uint64_t a3)
{
  if (objc_msgSend__accountStatus(*(void **)(a1 + 32), a2, a3) == 1)
  {
    objc_msgSend_defaultConvenienceOperationConfiguration(MEMORY[0x1E4F1A208], v4, v5);
    id v28 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v6 = objc_opt_new();
    objc_msgSend_setResolvedConfiguration_(v6, v7, (uint64_t)v28);
    uint64_t v8 = [CKDOperationInfoHolderOperation alloc];
    uint64_t v10 = objc_msgSend_containerForOperationInfo_(*(void **)(a1 + 32), v9, (uint64_t)v6);
    id v12 = objc_msgSend_initWithOperationInfo_container_(v8, v11, (uint64_t)v6, v10);

    objc_msgSend_fetchImportantUserIDsForOperation_withCompletionHandler_(*(void **)(a1 + 32), v13, (uint64_t)v12, *(void *)(a1 + 40));
  }
  else
  {
    if (!*(void *)(a1 + 40)) {
      return;
    }
    uint64_t v14 = objc_msgSend_entitlements(*(void **)(a1 + 32), v4, v5);
    char isBackgroundAssetsExtension = objc_msgSend_isBackgroundAssetsExtension(v14, v15, v16);

    if (isBackgroundAssetsExtension)
    {
      __int16 v20 = @"Background Assets Extension processes don't have access to an iCloud account";
    }
    else
    {
      __int16 v21 = objc_msgSend_entitlements(*(void **)(a1 + 32), v18, v19);
      uint64_t v24 = objc_msgSend_cloudServices(v21, v22, v23);
      int v26 = objc_msgSend_containsObject_(v24, v25, *MEMORY[0x1E4F1A590]);

      __int16 v20 = @"CloudKit-Anonymous / App Clips processes don't have access to an iCloud account";
      if (v26) {
        __int16 v20 = @"No iCloud account is configured";
      }
    }
    uint64_t v27 = *(void *)(a1 + 40);
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v18, *MEMORY[0x1E4F19C40], 9, @"%@", v20);
    id v28 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, void))(v27 + 16))(v27, 0, 0);
  }
}

void sub_1C4D0DC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id CKVerifyFilters(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v1 = a1;
  uint64_t v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v18, v22, 16);
  if (v3)
  {
    uint64_t v6 = v3;
    uint64_t v7 = *(void *)v19;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v1);
        }
        uint64_t v9 = objc_msgSend_fieldName(*(void **)(*((void *)&v18 + 1) + 8 * i), v4, v5, (void)v18);
        id v12 = objc_msgSend_name(v9, v10, v11);

        uint64_t v13 = sub_1C4E93C58();
        char v15 = objc_msgSend_containsObject_(v13, v14, (uint64_t)v12);

        if ((v15 & 1) != 0 || !v12)
        {

          goto LABEL_13;
        }
        uint64_t v16 = CKValidateKeyName();

        if (v16) {
          goto LABEL_14;
        }
      }
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v4, (uint64_t)&v18, v22, 16);
      uint64_t v16 = 0;
      if (v6) {
        continue;
      }
      break;
    }
  }
  else
  {
LABEL_13:
    uint64_t v16 = 0;
  }
LABEL_14:

  return v16;
}

void sub_1C4D0E0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t CKIsBundleIDForeground(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v3 = objc_msgSend_predicateMatchingBundleIdentifier_(MEMORY[0x1E4F96430], v2, (uint64_t)v1);
  id v17 = 0;
  uint64_t v5 = objc_msgSend_handleForPredicate_error_(MEMORY[0x1E4F963E8], v4, (uint64_t)v3, &v17);
  id v8 = v17;
  if (v5)
  {
    uint64_t v9 = objc_msgSend_currentState(v5, v6, v7);
    id v12 = objc_msgSend_endowmentNamespaces(v9, v10, v11);
    uint64_t v14 = objc_msgSend_containsObject_(v12, v13, @"com.apple.frontboard.visibility");
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    char v15 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      id v19 = v1;
      __int16 v20 = 2112;
      id v21 = v8;
      _os_log_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_INFO, "Couldn't determine if bundle %@ is foreground: %@", buf, 0x16u);
    }
    uint64_t v14 = 0;
  }

  return v14;
}

uint64_t CKDaemonOperationTypeForClass(void *a1)
{
  uint64_t v1 = qword_1EBBD0080;
  id v3 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_1EBBD0080, &unk_1F20447F0);
  }
  uint64_t v4 = objc_msgSend_objectForKeyedSubscript_((void *)qword_1EBBD0078, v2, (uint64_t)v3);

  uint64_t v7 = objc_msgSend_integerValue(v4, v5, v6);
  return v7;
}

uint64_t CKDPResponseOperationResultReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v23 = objc_alloc_init(CKDPResponseOperationResultError);
        objc_storeStrong((id *)(a1 + 16), v23);
        if (!PBReaderPlaceMark() || (CKDPResponseOperationResultErrorReadFrom((uint64_t)v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_35:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t CKDPOperationReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
        goto LABEL_44;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (2)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_51:
        *(_DWORD *)(a1 + 32) = v22;
        goto LABEL_61;
      case 3u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 40) |= 4u;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v28 = 0;
                goto LABEL_55;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v28 = 0;
        }
LABEL_55:
        BOOL v40 = v28 != 0;
        uint64_t v41 = 37;
        goto LABEL_60;
      case 4u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        *(unsigned char *)(a1 + 40) |= 2u;
        while (2)
        {
          uint64_t v35 = *v3;
          unint64_t v36 = *(void *)(a2 + v35);
          if (v36 == -1 || v36 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
            *(void *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              BOOL v14 = v33++ >= 9;
              if (v14)
              {
                uint64_t v34 = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v34 = 0;
        }
LABEL_59:
        BOOL v40 = v34 != 0;
        uint64_t v41 = 36;
LABEL_60:
        *(unsigned char *)(a1 + v41) = v40;
        goto LABEL_61;
      case 5u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 24;
LABEL_44:
        uint64_t v38 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_61;
      case 6u:
        id v39 = objc_alloc_init(MEMORY[0x1E4F19F08]);
        objc_storeStrong((id *)(a1 + 8), v39);
        if PBReaderPlaceMark() && (CKDPIdentifierReadFrom())
        {
          PBReaderRecallMark();

LABEL_61:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_61;
    }
  }
}

uint64_t TrafficLogger.finishRequestLog(requestUUID:)()
{
  sub_1C4D16B80();
  v1[3] = v2;
  v1[4] = v0;
  uint64_t v4 = sub_1C4D16D78(v3);
  v1[5] = v4;
  sub_1C4D16C18(v4);
  v1[6] = sub_1C4D16BDC();
  sub_1C4D16C0C();
  return MEMORY[0x1F4188298]();
}

uint64_t TrafficLogger.logPartialResponseObjectData(requestUUID:objectData:)()
{
  sub_1C4D16B80();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  uint64_t v6 = sub_1C4D16D78(v5);
  v1[7] = v6;
  sub_1C4D16C18(v6);
  v1[8] = sub_1C4D16BDC();
  sub_1C4D16C0C();
  return MEMORY[0x1F4188298]();
}

uint64_t TrafficLogger.logPartialRequestObjectData(requestUUID:objectData:)()
{
  sub_1C4D16B80();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  uint64_t v6 = sub_1C4D16D78(v5);
  v1[7] = v6;
  sub_1C4D16C18(v6);
  v1[8] = sub_1C4D16BDC();
  sub_1C4D16C0C();
  return MEMORY[0x1F4188298]();
}

uint64_t TrafficLogger.logResponseConfiguration(requestUUID:format:messageClass:)()
{
  sub_1C4D16B80();
  v1[6] = v2;
  v1[7] = v0;
  v1[4] = v3;
  v1[5] = v4;
  v1[2] = v5;
  v1[3] = v6;
  uint64_t v7 = type metadata accessor for PartialTrafficLog(0);
  v1[8] = v7;
  sub_1C4D16C18(v7);
  v1[9] = sub_1C4D16BDC();
  sub_1C4D16C0C();
  return MEMORY[0x1F4188298]();
}

uint64_t TrafficLogger.logResponse(requestUUID:response:)()
{
  sub_1C4D16B80();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  uint64_t v5 = type metadata accessor for Logger();
  v1[7] = v5;
  sub_1C4D16BF4(v5);
  v1[8] = v6;
  v1[9] = sub_1C4D16BDC();
  uint64_t v7 = type metadata accessor for PartialTrafficLog(0);
  v1[10] = v7;
  sub_1C4D16C18(v7);
  v1[11] = sub_1C4D16BDC();
  sub_1C4D16C0C();
  return MEMORY[0x1F4188298]();
}

uint64_t TrafficLogger.logRequest(requestUUID:request:url:method:messageClass:parsingStandaloneMessage:)()
{
  sub_1C4D16B80();
  *(void *)(v1 + 112) = v2;
  *(void *)(v1 + 120) = v0;
  *(unsigned char *)(v1 + 152) = v13;
  *(void *)(v1 + 96) = v3;
  *(void *)(v1 + 104) = v4;
  *(void *)(v1 + 80) = v5;
  *(void *)(v1 + 88) = v6;
  *(void *)(v1 + 64) = v7;
  *(void *)(v1 + 72) = v8;
  *(void *)(v1 + 56) = v9;
  uint64_t v10 = type metadata accessor for PartialTrafficLog(0);
  *(void *)(v1 + 128) = v10;
  sub_1C4D16C18(v10);
  *(void *)(v1 + 136) = sub_1C4D16BDC();
  sub_1C4D16C0C();
  return MEMORY[0x1F4188298]();
}

uint64_t sub_1C4D0EE50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C4D0EEA8();
  *a1 = result;
  return result;
}

uint64_t sub_1C4D0EE7C()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return sub_1C4D0EEE0(v0);
}

uint64_t sub_1C4D0EEA8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C4D0EEE0(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1C4D0EF28())()
{
  return j__swift_endAccess;
}

uint64_t sub_1C4D0EF80(uint64_t a1)
{
  *(void *)(v1 + 136) = a1;
  return swift_unknownObjectRelease();
}

uint64_t sub_1C4D0EF90(uint64_t a1)
{
  *(void *)(v1 + 144) = a1;
  return swift_release();
}

uint64_t static TrafficLogger.maxAccumulatedCountBeforeFlush.getter()
{
  return 10;
}

uint64_t static TrafficLogger.maxAccumulatedSizeBeforeFlush.getter()
{
  return 300000;
}

void sub_1C4D0EFB4()
{
  qword_1EBBCDCB8 = 58;
  unk_1EBBCDCC0 = 0xE100000000000000;
}

id sub_1C4D0EFCC()
{
  type metadata accessor for TrafficLogger();
  swift_allocObject();
  id result = TrafficLogger.init()();
  qword_1EBBCD740 = (uint64_t)result;
  return result;
}

id TrafficLogger.__allocating_init()()
{
  return TrafficLogger.init()();
}

uint64_t sub_1C4D0F064()
{
  sub_1C4D16970();
  static __CKLogSubsystem.name.getter();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_1EBBCD730 = result;
  return result;
}

BOOL sub_1C4D0F0B4()
{
  id v0 = objc_msgSend(self, sel_sharedOptions);
  unsigned int v1 = objc_msgSend(v0, sel_logTraffic);

  if (!v1) {
    return 0;
  }
  if (qword_1EBBCD868 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1EBBCD730;
  os_log_type_t v3 = static os_log_type_t.info.getter();
  return os_log_type_enabled(v2, v3);
}

uint64_t sub_1C4D0F15C()
{
  sub_1C4D16B80();
  v1[5] = v2;
  v1[6] = v0;
  uint64_t v3 = sub_1C4D10728(&qword_1EBBCDBB8);
  sub_1C4D16C18(v3);
  v1[7] = sub_1C4D16BDC();
  uint64_t v4 = type metadata accessor for PartialTrafficLog(0);
  v1[8] = v4;
  sub_1C4D16BF4(v4);
  v1[9] = v5;
  v1[10] = sub_1C4D16BDC();
  sub_1C4D16C0C();
  return MEMORY[0x1F4188298]();
}

uint64_t sub_1C4D0F20C()
{
  sub_1C4D16C30();
  unsigned int v1 = (void *)v0[6];
  if (!v1[17])
  {
    uint64_t v2 = os_transaction_create();
    sub_1C4D0EF80(v2);
    unsigned int v1 = (void *)v0[6];
  }
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[5];
  swift_beginAccess();
  sub_1C4D14764();
  uint64_t v5 = *(void *)(v1[14] + 16);
  sub_1C4D147B0(v5);
  uint64_t v6 = v1[14];
  *(void *)(v6 + 16) = v5 + 1;
  sub_1C4D147F0(v4, v6+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v5);
  swift_endAccess();
  uint64_t result = sub_1C4D36060();
  uint64_t v8 = v1[15];
  BOOL v9 = __OFADD__(v8, result);
  uint64_t v10 = v8 + result;
  if (v9)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v11 = v0[10];
  uint64_t v12 = v0[5];
  v1[15] = v10;
  sub_1C4D147F0(v12, v11);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    uint64_t v13 = v0[6];
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v14 = *(void *)(v13 + 128);
    BOOL v9 = __OFADD__(v14, 1);
    uint64_t v15 = v14 + 1;
    if (!v9)
    {
      *(void *)(v13 + 128) = v15;
      goto LABEL_8;
    }
LABEL_24:
    __break(1u);
    return result;
  }
  sub_1C4D14854(v0[10]);
LABEL_8:
  id v16 = objc_msgSend(self, sel_sharedOptions);
  unsigned int v17 = objc_msgSend(v16, sel_shouldStreamTrafficLogs);

  if (v17)
  {
    uint64_t v18 = (void *)swift_task_alloc();
    v0[11] = v18;
    void *v18 = v0;
    uint64_t v19 = sub_1C4D0F558;
LABEL_15:
    v18[1] = v19;
    return sub_1C4D0FD88();
  }
  if (*(uint64_t *)(v0[6] + 128) > 9) {
    goto LABEL_14;
  }
  uint64_t isCurrentExecutor = swift_task_isCurrentExecutor();
  if ((isCurrentExecutor & 1) == 0) {
    uint64_t isCurrentExecutor = swift_task_reportUnexpectedExecutor();
  }
  if ((uint64_t)v1[15] >= 300001)
  {
LABEL_14:
    uint64_t v18 = (void *)swift_task_alloc();
    v0[12] = v18;
    void *v18 = v0;
    uint64_t v19 = sub_1C4D0F648;
    goto LABEL_15;
  }
  uint64_t v21 = v0[6];
  if (!*(void *)(v21 + 144))
  {
    uint64_t v22 = v0[7];
    MEMORY[0x1C8787BD0](isCurrentExecutor);
    uint64_t v23 = type metadata accessor for TaskPriority();
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(v22, 0, 1, v23);
    unint64_t v24 = (void *)swift_allocObject();
    v24[2] = 0;
    v24[3] = 0;
    v24[4] = v21;
    swift_retain();
    uint64_t v25 = sub_1C4D0FBEC(v22, (uint64_t)&unk_1EA3CB7B0, (uint64_t)v24);
    sub_1C4D168B0(v22, &qword_1EBBCDBB8);
    sub_1C4D0EF90(v25);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1C4D16B98();
  return v26();
}

uint64_t sub_1C4D0F558()
{
  sub_1C4D16B80();
  sub_1C4D16B68();
  uint64_t v1 = *v0;
  sub_1C4D16B58();
  void *v2 = v1;
  swift_task_dealloc();
  sub_1C4D16D58();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1C4D16C80();
  return v3();
}

uint64_t sub_1C4D0F648()
{
  sub_1C4D16B80();
  sub_1C4D16B68();
  uint64_t v1 = *v0;
  sub_1C4D16B58();
  void *v2 = v1;
  swift_task_dealloc();
  sub_1C4D16D58();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1C4D16C80();
  return v3();
}

uint64_t sub_1C4D0F738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1C4D0F7F8, 0, 0);
}

uint64_t sub_1C4D0F7F8()
{
  sub_1C4D16B80();
  ContinuousClock.init()();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1EA3CBA10 + dword_1EA3CBA10);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  void *v1 = v0;
  v1[1] = sub_1C4D0F8B8;
  sub_1C4D16DD0();
  return v6(v2, v3, v4, 0, 1);
}

uint64_t sub_1C4D0F8B8()
{
  sub_1C4D16BA4();
  sub_1C4D16B40();
  sub_1C4D16B8C();
  void *v3 = v2;
  uint64_t v5 = v4[5];
  uint64_t v6 = v4[4];
  uint64_t v7 = v4[3];
  uint64_t v8 = *v1;
  sub_1C4D16B58();
  *BOOL v9 = v8;
  *(void *)(v10 + 56) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  sub_1C4D16DD0();
  return MEMORY[0x1F4188298]();
}

uint64_t sub_1C4D0F9F0()
{
  sub_1C4D16B80();
  if (static Task<>.isCancelled.getter())
  {
    swift_task_dealloc();
    sub_1C4D16C70();
    return v1();
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v3;
    void *v3 = v0;
    v3[1] = sub_1C4D0FB14;
    return sub_1C4D0FD88();
  }
}

uint64_t sub_1C4D0FAB8()
{
  sub_1C4D16B80();
  swift_task_dealloc();
  sub_1C4D16B98();
  return v0();
}

uint64_t sub_1C4D0FB14()
{
  sub_1C4D16B80();
  sub_1C4D16B68();
  uint64_t v1 = *v0;
  sub_1C4D16B58();
  void *v2 = v1;
  swift_task_dealloc();
  sub_1C4D16D58();
  swift_task_dealloc();
  sub_1C4D16C80();
  return v3();
}

uint64_t sub_1C4D0FBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C4D10728(&qword_1EBBCDBB8);
  MEMORY[0x1F4188790]();
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4D16A98(a1, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for TaskPriority();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v6, 1, v7) == 1)
  {
    sub_1C4D168B0((uint64_t)v6, &qword_1EBBCDBB8);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v10 = v9;
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  if (v10 | v8)
  {
    v12[0] = 0;
    v12[1] = 0;
    v12[2] = v8;
    v12[3] = v10;
  }
  return swift_task_create();
}

uint64_t sub_1C4D0FD88()
{
  sub_1C4D16B80();
  *(void *)(v1 + 40) = v0;
  uint64_t v2 = sub_1C4D10728(&qword_1EBBCDBB8);
  sub_1C4D16C18(v2);
  *(void *)(v1 + 48) = sub_1C4D16BDC();
  sub_1C4D16C0C();
  return MEMORY[0x1F4188298]();
}

uint64_t sub_1C4D0FE08()
{
  sub_1C4D16BA4();
  uint64_t v1 = (void *)v0[5];
  swift_beginAccess();
  uint64_t v2 = v1[14];
  swift_bridgeObjectRetain();
  sub_1C4D0EEE0(MEMORY[0x1E4FBC860]);
  v1[15] = 0;
  v1[16] = 0;
  uint64_t v3 = v1[18];
  uint64_t v4 = MEMORY[0x1E4FBC848];
  if (v3)
  {
    swift_retain();
    uint64_t v5 = sub_1C4D10728(&qword_1EBBCD850);
    MEMORY[0x1C8787C00](v3, v4 + 8, v5, MEMORY[0x1E4FBC0F0]);
    swift_release();
  }
  uint64_t v6 = v0[6];
  sub_1C4D0EF90(0);
  uint64_t v7 = sub_1C4D0EF80(0);
  MEMORY[0x1C8787BD0](v7);
  uint64_t v8 = type metadata accessor for TaskPriority();
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v6, 0, 1, v8);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  v0[7] = sub_1C4D105C4(v6, (uint64_t)&unk_1EA3CB7C8, (uint64_t)v9);
  sub_1C4D168B0(v6, &qword_1EBBCDBB8);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[8] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1C4D0FFA8;
  return MEMORY[0x1F4187DC0]();
}

uint64_t sub_1C4D0FFA8()
{
  sub_1C4D16B80();
  sub_1C4D16B40();
  uint64_t v1 = *v0;
  sub_1C4D16B58();
  void *v2 = v1;
  swift_task_dealloc();
  sub_1C4D16C0C();
  return MEMORY[0x1F4188298]();
}

uint64_t sub_1C4D10084()
{
  sub_1C4D16B80();
  swift_release();
  swift_task_dealloc();
  sub_1C4D16B98();
  return v0();
}

uint64_t sub_1C4D100E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a4;
  uint64_t v5 = type metadata accessor for Logger();
  v4[5] = v5;
  v4[6] = *(void *)(v5 - 8);
  v4[7] = swift_task_alloc();
  v4[8] = swift_task_alloc();
  v4[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1C4D101C0, 0, 0);
}

void sub_1C4D101C0()
{
  uint64_t v1 = *(void *)(v0[4] + 16);
  CKLog.getter();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  char v20 = v0;
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)sub_1C4D16DB8();
    *(_DWORD *)uint64_t v4 = 134217984;
    v0[3] = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C4CFF000, v2, v3, "Will flush traffic logs. count=%ld", v4, 0xCu);
    sub_1C4D16C3C();
  }

  uint64_t v5 = (void *)v0[4];
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0[6] + 8);
  v21(v0[9], v0[5]);
  uint64_t v6 = static TrafficLogChunkedMessage.chunkedLogMessages(from:)(v5);
  uint64_t v7 = v6[2];
  if (v7)
  {
    uint64_t v8 = v6 + 5;
    do
    {
      uint64_t v9 = *(v8 - 1);
      unint64_t v10 = *v8;
      swift_bridgeObjectRetain();
      CKLogTrafficCompressed.getter();
      swift_bridgeObjectRetain();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.info.getter();
      BOOL v13 = os_log_type_enabled(v11, v12);
      uint64_t v14 = v0[8];
      uint64_t v15 = v0[5];
      if (v13)
      {
        uint64_t v16 = v9;
        uint64_t v17 = sub_1C4D16DB8();
        uint64_t v22 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v17 + 4) = sub_1C4D14B9C(v16, v10, &v22);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C4CFF000, v11, v12, "%s", (uint8_t *)v17, 0xCu);
        swift_arrayDestroy();
        sub_1C4D16C3C();
        uint64_t v0 = v20;
        sub_1C4D16C3C();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      v21(v14, v15);
      v8 += 2;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1C4D16B98();
  sub_1C4D16D3C();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_1C4D105C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C4D142DC(a1, 0, 0, 0, 1, 0, 0);
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  return swift_task_create();
}

id TrafficLogger.init()()
{
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = MEMORY[0x1E4FBC860];
  uint64_t v1 = (objc_class *)type metadata accessor for TrafficLogger();
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  v3.receiver = (id)v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t sub_1C4D10728(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t TrafficLogger.deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t TrafficLogger.__deallocating_deinit()
{
  TrafficLogger.deinit();
  return MEMORY[0x1F4188210](v0);
}

uint64_t TrafficLogger.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_1C4D10800()
{
  return TrafficLogger.unownedExecutor.getter();
}

void sub_1C4D1081C()
{
  if (sub_1C4D0F0B4())
  {
    uint64_t v1 = URLRequest.allHTTPHeaderFields.getter();
    if (!v1) {
      uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
    }
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)(v1 + 16);
    if (v3)
    {
      uint64_t v43 = MEMORY[0x1E4FBC860];
      sub_1C4D1801C(0, v3, 0);
      uint64_t v4 = sub_1C4D15968(v2);
      if ((v4 & 0x8000000000000000) == 0)
      {
        unint64_t v6 = v4;
        if (v4 < 1 << *(unsigned char *)(v2 + 32))
        {
          uint64_t v7 = v2 + 64;
          uint64_t v35 = (uint64_t *)(v0 + 48);
          uint64_t v36 = v0;
          while ((*(void *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
          {
            if (*(_DWORD *)(v2 + 36) != v5) {
              goto LABEL_30;
            }
            uint64_t v38 = v3;
            int v40 = v5;
            uint64_t v8 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v6);
            uint64_t v9 = *v8;
            uint64_t v10 = v8[1];
            uint64_t v11 = (unint64_t *)(*(void *)(v2 + 56) + 16 * v6);
            unint64_t v13 = *v11;
            unint64_t v12 = v11[1];
            uint64_t v42 = v9;
            *(void *)(v0 + 16) = v9;
            *(void *)(v0 + 24) = v10;
            strcpy((char *)(v0 + 32), "authorization");
            *(_WORD *)(v0 + 46) = -4864;
            sub_1C4D15918();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (!StringProtocol.caseInsensitiveCompare<A>(_:)())
            {
              swift_bridgeObjectRetain();
              _StringGuts.grow(_:)(36);
              swift_bridgeObjectRelease();
              uint64_t *v35 = String.count.getter();
              v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v14);
              swift_bridgeObjectRelease();
              v15._countAndFlagsBits = 0xD000000000000011;
              v15._object = (void *)0x80000001C5081560;
              String.append(_:)(v15);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v13 = 0xD000000000000011;
              unint64_t v12 = 0x80000001C5081540;
            }
            unint64_t v16 = *(void *)(v43 + 16);
            unint64_t v17 = *(void *)(v43 + 24);
            if (v16 >= v17 >> 1) {
              sub_1C4D1801C(v17 > 1, v16 + 1, 1);
            }
            *(void *)(v43 + 16) = v16 + 1;
            uint64_t v18 = (void *)(v43 + 32 * v16);
            v18[4] = v42;
            v18[5] = v10;
            v18[6] = v13;
            v18[7] = v12;
            if ((uint64_t)v6 >= -(-1 << *(unsigned char *)(v2 + 32))) {
              goto LABEL_31;
            }
            uint64_t v7 = v2 + 64;
            if ((*(void *)(v2 + 64 + 8 * (v6 >> 6)) & (1 << v6)) == 0) {
              goto LABEL_32;
            }
            if (*(_DWORD *)(v2 + 36) != v40) {
              goto LABEL_33;
            }
            uint64_t v19 = _HashTable.occupiedBucket(after:)();
            uint64_t v3 = v38 - 1;
            if (v38 == 1)
            {
              swift_bridgeObjectRelease();
              uint64_t v0 = v36;
              uint64_t v37 = v43;
              goto LABEL_26;
            }
            unint64_t v6 = v19;
            uint64_t v0 = v36;
            if ((v19 & 0x8000000000000000) == 0)
            {
              int v5 = *(_DWORD *)(v2 + 36);
              if (v19 < 1 << *(unsigned char *)(v2 + 32)) {
                continue;
              }
            }
            goto LABEL_34;
          }
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
        }
      }
LABEL_34:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v37 = MEMORY[0x1E4FBC860];
LABEL_26:
      uint64_t v21 = *(void **)(v0 + 136);
      char v41 = *(unsigned char *)(v0 + 152);
      uint64_t v22 = *(void *)(v0 + 112);
      uint64_t v39 = *(void *)(v0 + 104);
      uint64_t v23 = *(void *)(v0 + 88);
      uint64_t v24 = *(void *)(v0 + 96);
      uint64_t v25 = *(void *)(v0 + 80);
      uint64_t v26 = *(void *)(v0 + 56);
      uint64_t v27 = *(void *)(v0 + 64);
      uint64_t v28 = (int *)type metadata accessor for PartialTrafficLog.RequestMetadata(0);
      swift_bridgeObjectRetain();
      Date.init()();
      uint64_t v29 = (char *)v21 + v28[6];
      uint64_t v30 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v29, v25, v30);
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_1C4D10E04(v37);
      void *v21 = v26;
      v21[1] = v27;
      char v32 = (void *)((char *)v21 + v28[7]);
      *char v32 = v23;
      v32[1] = v24;
      *(void *)((char *)v21 + v28[8]) = v31;
      unsigned int v33 = (void *)((char *)v21 + v28[9]);
      void *v33 = v39;
      v33[1] = v22;
      *((unsigned char *)v21 + v28[10]) = v41;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      uint64_t v34 = (void *)swift_task_alloc();
      *(void *)(v0 + 144) = v34;
      void *v34 = v0;
      v34[1] = sub_1C4D10D18;
      sub_1C4D16C24(*(void *)(v0 + 136));
      sub_1C4D0F15C();
    }
  }
  else
  {
    swift_task_dealloc();
    sub_1C4D16B98();
    v20();
  }
}

uint64_t sub_1C4D10D18()
{
  sub_1C4D16B80();
  sub_1C4D16B40();
  uint64_t v2 = v1;
  sub_1C4D16B8C();
  void *v3 = v2;
  uint64_t v5 = *(void *)(v4 + 136);
  uint64_t v6 = *v0;
  sub_1C4D16B58();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  sub_1C4D14854(v5);
  swift_task_dealloc();
  sub_1C4D16B98();
  return v8();
}

BOOL sub_1C4D10DF8(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_1C4D10E04(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1C4D10728(&qword_1EBBCD800);
    uint64_t v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v1 = MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = v1;
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_1C4D152E8(v2, 1, &v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1C4D10F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, uint64_t a8)
{
  v8[2] = a8;
  uint64_t v10 = type metadata accessor for URL();
  v8[3] = v10;
  v8[4] = *(void *)(v10 - 8);
  v8[5] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for URLRequest();
  v8[6] = v11;
  v8[7] = *(void *)(v11 - 8);
  v8[8] = swift_task_alloc();
  v8[9] = _Block_copy(a7);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8[10] = v12;
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8[11] = v13;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8[12] = v14;
  swift_retain();
  Swift::String v15 = (void *)swift_task_alloc();
  v8[13] = v15;
  void *v15 = v8;
  v15[1] = sub_1C4D111AC;
  return TrafficLogger.logRequest(requestUUID:request:url:method:messageClass:parsingStandaloneMessage:)();
}

uint64_t sub_1C4D111AC()
{
  sub_1C4D16B40();
  uint64_t v2 = (void (**)(void))v1[9];
  uint64_t v3 = v1[8];
  uint64_t v4 = v1[7];
  uint64_t v12 = v1[6];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[3];
  uint64_t v8 = *v0;
  sub_1C4D16B58();
  *uint64_t v9 = v8;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v12);
  v2[2](v2);
  _Block_release(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v8 + 8);
  return v10();
}

uint64_t sub_1C4D113F8()
{
  uint64_t v32 = v0;
  if (!sub_1C4D0F0B4())
  {
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1C4D16B98();
    sub_1C4D16D3C();
    __asm { BRAA            X1, X16 }
  }
  id v1 = objc_msgSend(*(id *)(v0 + 40), sel_allHeaderFields);
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v3 = sub_1C4D11864(v2);
  swift_bridgeObjectRelease();
  if (!v3)
  {
    uint64_t v13 = *(void **)(v0 + 40);
    CKLog.getter();
    id v14 = v13;
    Swift::String v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = *(void *)(v0 + 64);
    uint64_t v19 = *(void *)(v0 + 72);
    uint64_t v20 = *(void *)(v0 + 56);
    uint64_t v21 = *(void **)(v0 + 40);
    if (v17)
    {
      log = v15;
      os_log_type_t type = v16;
      uint64_t v22 = (uint8_t *)sub_1C4D16DB8();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      id v23 = objc_msgSend(v21, sel_allHeaderFields);
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v24 = Dictionary.description.getter();
      unint64_t v26 = v25;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 16) = sub_1C4D14B9C(v24, v26, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C4CFF000, log, type, "Couldn't convert response headers to codable: %s", v22, 0xCu);
      swift_arrayDestroy();
      sub_1C4D16C3C();
      sub_1C4D16C3C();

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
    }
    goto LABEL_9;
  }
  uint64_t v4 = *(void **)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v5 = *(void **)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
  swift_bridgeObjectRetain();
  Date.init()();
  id v9 = objc_msgSend(v5, sel_statusCode);
  *uint64_t v4 = v7;
  v4[1] = v6;
  *(void *)((char *)v4 + *(int *)(v8 + 24)) = v9;
  *(void *)((char *)v4 + *(int *)(v8 + 28)) = v3;
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1C4D1175C;
  sub_1C4D16C24(*(void *)(v0 + 88));
  sub_1C4D16D3C();
  return sub_1C4D0F15C();
}

uint64_t sub_1C4D1175C()
{
  sub_1C4D16BA4();
  sub_1C4D16B68();
  uint64_t v3 = v2;
  sub_1C4D16B58();
  *uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v6 = *v1;
  *uint64_t v4 = *v1;
  swift_task_dealloc();
  sub_1C4D14854(v5);
  sub_1C4D16D58();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v6 + 8);
  return v7();
}

unint64_t sub_1C4D11864(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1C4D10728(&qword_1EBBCD800);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
  }
  sub_1C4D158E0(a1, v29);
  int64_t v3 = v29[3];
  unint64_t v4 = v29[4];
  int64_t v21 = (unint64_t)(v29[2] + 64) >> 6;
  uint64_t v22 = v29[1];
  uint64_t v23 = v29[0];
  unint64_t result = swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v6 = (v4 - 1) & v4;
  unint64_t v7 = __clz(__rbit64(v4)) | (v3 << 6);
  for (i = v3; ; unint64_t v7 = __clz(__rbit64(v10)) + (i << 6))
  {
    sub_1C4D16854(*(void *)(v23 + 48) + 40 * v7, (uint64_t)__src);
    sub_1C4D167F0(*(void *)(v23 + 56) + 32 * v7, (uint64_t)&__src[40]);
    memcpy(__dst, __src, sizeof(__dst));
    sub_1C4D16854((uint64_t)__dst, (uint64_t)v26);
    if (!swift_dynamicCast())
    {
      sub_1C4D168B0((uint64_t)__dst, (uint64_t *)&unk_1EBBCD7E0);
LABEL_33:
      swift_bridgeObjectRelease();
      sub_1C4D1684C();
      swift_release();
      return 0;
    }
    sub_1C4D167F0((uint64_t)&__dst[40], (uint64_t)v26);
    sub_1C4D168B0((uint64_t)__dst, (uint64_t *)&unk_1EBBCD7E0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
    unint64_t result = sub_1C4D21F44(v24, v25);
    unint64_t v12 = result;
    if (v13)
    {
      id v14 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v14 = v24;
      v14[1] = v25;
      Swift::String v15 = (uint64_t *)(v2[7] + 16 * v12);
      unint64_t result = swift_bridgeObjectRelease();
      uint64_t *v15 = v24;
      v15[1] = v25;
      goto LABEL_29;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    os_log_type_t v16 = (uint64_t *)(v2[6] + 16 * result);
    *os_log_type_t v16 = v24;
    v16[1] = v25;
    BOOL v17 = (uint64_t *)(v2[7] + 16 * result);
    *BOOL v17 = v24;
    v17[1] = v25;
    uint64_t v18 = v2[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_37;
    }
    v2[2] = v20;
LABEL_29:
    int64_t v3 = i;
    unint64_t v4 = v6;
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v9 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_38;
    }
    if (v9 >= v21) {
      goto LABEL_34;
    }
    unint64_t v10 = *(void *)(v22 + 8 * v9);
    int64_t i = v3 + 1;
    if (!v10)
    {
      int64_t i = v3 + 2;
      if (v3 + 2 >= v21) {
        goto LABEL_34;
      }
      unint64_t v10 = *(void *)(v22 + 8 * i);
      if (!v10)
      {
        int64_t i = v3 + 3;
        if (v3 + 3 >= v21) {
          goto LABEL_34;
        }
        unint64_t v10 = *(void *)(v22 + 8 * i);
        if (!v10)
        {
          int64_t i = v3 + 4;
          if (v3 + 4 >= v21) {
            goto LABEL_34;
          }
          unint64_t v10 = *(void *)(v22 + 8 * i);
          if (!v10)
          {
            int64_t i = v3 + 5;
            if (v3 + 5 >= v21) {
              goto LABEL_34;
            }
            unint64_t v10 = *(void *)(v22 + 8 * i);
            if (!v10)
            {
              int64_t v11 = v3 + 6;
              while (v11 < v21)
              {
                unint64_t v10 = *(void *)(v22 + 8 * v11++);
                if (v10)
                {
                  int64_t i = v11 - 1;
                  goto LABEL_21;
                }
              }
LABEL_34:
              sub_1C4D1684C();
              return (unint64_t)v2;
            }
          }
        }
      }
    }
LABEL_21:
    uint64_t v6 = (v10 - 1) & v10;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

unint64_t sub_1C4D11C08(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1C4D10728((uint64_t *)&unk_1EA3CB9D8);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
  }
  sub_1C4D158E0(a1, v43);
  uint64_t v3 = v43[0];
  uint64_t v4 = v43[3];
  int64_t v31 = (unint64_t)(v43[2] + 64) >> 6;
  uint64_t v32 = v43[1];
  unint64_t v5 = v43[4];
  uint64_t v6 = &__src[40];
  unint64_t v7 = &__dst[40];
  uint64_t v8 = &v37;
  int64_t v9 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v33 = (v5 - 1) & v5;
  uint64_t v34 = v4;
  for (unint64_t i = __clz(__rbit64(v5)) | (v4 << 6); ; unint64_t i = v15 + (v16 << 6))
  {
    sub_1C4D16854(*(void *)(v3 + 48) + 40 * i, (uint64_t)__src);
    sub_1C4D167F0(*(void *)(v3 + 56) + 32 * i, (uint64_t)v6);
    memcpy(__dst, __src, sizeof(__dst));
    sub_1C4D16854((uint64_t)__dst, (uint64_t)v36);
    if (!swift_dynamicCast())
    {
      sub_1C4D168B0((uint64_t)__dst, (uint64_t *)&unk_1EBBCD7E0);
      swift_bridgeObjectRelease();
      sub_1C4D16D90();
      sub_1C4D1684C();
      swift_release();
      return 0;
    }
    sub_1C4D167F0((uint64_t)v7, (uint64_t)v36);
    sub_1C4D168B0((uint64_t)__dst, (uint64_t *)&unk_1EBBCD7E0);
    sub_1C4D1690C(v36, v8);
    long long v38 = v35;
    sub_1C4D1690C(v8, v9);
    long long v17 = v38;
    sub_1C4D1690C(v9, v40);
    sub_1C4D1690C(v40, &v38);
    unint64_t result = sub_1C4D21F44(v17, *((uint64_t *)&v17 + 1));
    unint64_t v18 = result;
    if (v19)
    {
      uint64_t v20 = v9;
      int64_t v21 = v8;
      uint64_t v22 = v7;
      uint64_t v23 = v3;
      uint64_t v24 = v6;
      uint64_t v25 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v25 = v17;
      uint64_t v6 = v24;
      uint64_t v3 = v23;
      unint64_t v7 = v22;
      uint64_t v8 = v21;
      int64_t v9 = v20;
      unint64_t v26 = (_OWORD *)(v2[7] + 32 * v18);
      sub_1C4D1691C((uint64_t)v26);
      unint64_t result = (unint64_t)sub_1C4D1690C(&v38, v26);
      goto LABEL_27;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    sub_1C4D16D64((result >> 3) & 0x1FFFFFFFFFFFFFF8);
    *(_OWORD *)(v27 + 16 * v18) = v17;
    unint64_t result = (unint64_t)sub_1C4D1690C(&v38, (_OWORD *)(v2[7] + 32 * v18));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_33;
    }
    v2[2] = v30;
LABEL_27:
    unint64_t v5 = v33;
    uint64_t v4 = v34;
    if (v33) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_34;
    }
    if (v12 >= v31) {
      goto LABEL_30;
    }
    if (!*(void *)(v32 + 8 * v12))
    {
      if (v4 + 2 >= v31) {
        goto LABEL_30;
      }
      if (!*(void *)(v32 + 8 * (v4 + 2)))
      {
        if (v4 + 3 >= v31) {
          goto LABEL_30;
        }
        if (!*(void *)(v32 + 8 * (v4 + 3)))
        {
          if (v4 + 4 >= v31) {
            goto LABEL_30;
          }
          if (!*(void *)(v32 + 8 * (v4 + 4)))
          {
            if (v4 + 5 >= v31) {
              goto LABEL_30;
            }
            if (!*(void *)(v32 + 8 * (v4 + 5)))
            {
              int64_t v13 = v4 + 6;
              while (v13 < v31)
              {
                if (*(void *)(v32 + 8 * v13++)) {
                  goto LABEL_20;
                }
              }
LABEL_30:
              sub_1C4D16D90();
              sub_1C4D1684C();
              return (unint64_t)v2;
            }
          }
        }
      }
    }
LABEL_20:
    sub_1C4D16D24();
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

void sub_1C4D11F9C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1C4D10728(&qword_1EA3CB9C0);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
  }
  sub_1C4D158E0(a1, v42);
  uint64_t v3 = v42[0];
  uint64_t v4 = v42[3];
  unint64_t v5 = v42[4];
  int64_t v34 = (unint64_t)(v42[2] + 64) >> 6;
  uint64_t v35 = v42[1];
  uint64_t v6 = &v41;
  swift_bridgeObjectRetain();
  unint64_t v7 = (uint64_t *)&unk_1EA3CB9C8;
  uint64_t v8 = (uint64_t *)&unk_1EA3CB9D0;
  uint64_t v9 = MEMORY[0x1E4FBC840] + 8;
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v36 = (v5 - 1) & v5;
  uint64_t v37 = v4;
  for (unint64_t i = __clz(__rbit64(v5)) | (v4 << 6); ; unint64_t i = v14 + (v15 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    sub_1C4D167F0(*(void *)(v3 + 56) + 32 * i, (uint64_t)v6);
    v40[0] = v18;
    v40[1] = v17;
    sub_1C4D167F0((uint64_t)v6, (uint64_t)v39);
    swift_bridgeObjectRetain_n();
    sub_1C4D168B0((uint64_t)v40, v7);
    sub_1C4D10728(v8);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1C4D16DA4();
      sub_1C4D1684C();
      swift_release();
      return;
    }
    unint64_t v19 = sub_1C4D21F44(v18, v17);
    unint64_t v20 = v19;
    if (v21)
    {
      uint64_t v22 = v9;
      uint64_t v23 = v8;
      uint64_t v24 = v6;
      uint64_t v25 = v3;
      unint64_t v26 = v7;
      uint64_t v27 = (uint64_t *)(v2[6] + 16 * v19);
      swift_bridgeObjectRelease();
      uint64_t *v27 = v18;
      v27[1] = v17;
      unint64_t v7 = v26;
      uint64_t v3 = v25;
      uint64_t v6 = v24;
      uint64_t v8 = v23;
      uint64_t v9 = v22;
      uint64_t v28 = v2[7];
      swift_bridgeObjectRelease();
      *(void *)(v28 + 8 * v20) = v38;
      goto LABEL_27;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    sub_1C4D16D64((v19 >> 3) & 0x1FFFFFFFFFFFFFF8);
    uint64_t v30 = (uint64_t *)(v29 + 16 * v20);
    uint64_t *v30 = v18;
    v30[1] = v17;
    *(void *)(v2[7] + 8 * v20) = v38;
    uint64_t v31 = v2[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_32;
    }
    v2[2] = v33;
LABEL_27:
    unint64_t v5 = v36;
    uint64_t v4 = v37;
    if (v36) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_33;
    }
    if (v11 >= v34) {
      goto LABEL_30;
    }
    if (!*(void *)(v35 + 8 * v11))
    {
      if (v4 + 2 >= v34) {
        goto LABEL_30;
      }
      if (!*(void *)(v35 + 8 * (v4 + 2)))
      {
        if (v4 + 3 >= v34) {
          goto LABEL_30;
        }
        if (!*(void *)(v35 + 8 * (v4 + 3)))
        {
          if (v4 + 4 >= v34) {
            goto LABEL_30;
          }
          if (!*(void *)(v35 + 8 * (v4 + 4)))
          {
            if (v4 + 5 >= v34) {
              goto LABEL_30;
            }
            if (!*(void *)(v35 + 8 * (v4 + 5)))
            {
              int64_t v12 = v4 + 6;
              while (v12 < v34)
              {
                if (*(void *)(v35 + 8 * v12++)) {
                  goto LABEL_20;
                }
              }
LABEL_30:
              sub_1C4D16DA4();
              sub_1C4D1684C();
              return;
            }
          }
        }
      }
    }
LABEL_20:
    sub_1C4D16D24();
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
}

uint64_t sub_1C4D122E0(int a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[5] = v6;
  id v7 = a2;
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v4[6] = v8;
  void *v8 = v4;
  v8[1] = sub_1C4D123CC;
  return TrafficLogger.logResponse(requestUUID:response:)();
}

uint64_t sub_1C4D123CC()
{
  sub_1C4D16BA4();
  sub_1C4D16B40();
  uint64_t v2 = *(void (***)(void))(v1 + 32);
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *v0;
  sub_1C4D16B58();
  *unint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();

  v2[2](v2);
  _Block_release(v2);
  sub_1C4D16B98();
  return v6();
}

uint64_t sub_1C4D12510()
{
  sub_1C4D16BA4();
  if (sub_1C4D0F0B4())
  {
    sub_1C4D16CE4();
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    sub_1C4D159E8(v0, v1);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v2 + 72) = v3;
    void *v3 = v2;
    v3[1] = sub_1C4D12608;
    sub_1C4D16C24(*(void *)(v2 + 64));
    return sub_1C4D0F15C();
  }
  else
  {
    swift_task_dealloc();
    sub_1C4D16B98();
    return v5();
  }
}

uint64_t sub_1C4D12608()
{
  sub_1C4D16B80();
  sub_1C4D16B40();
  uint64_t v2 = v1;
  sub_1C4D16B8C();
  void *v3 = v2;
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *v0;
  sub_1C4D16B58();
  *id v7 = v6;
  swift_task_dealloc();
  sub_1C4D14854(v5);
  swift_task_dealloc();
  sub_1C4D16B98();
  return v8();
}

uint64_t sub_1C4D12708(int a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[4] = v6;
  id v7 = a2;
  swift_retain();
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v4[5] = v8;
  v4[6] = v10;
  int64_t v11 = (void *)swift_task_alloc();
  v4[7] = v11;
  void *v11 = v4;
  v11[1] = sub_1C4D1280C;
  return TrafficLogger.logPartialRequestObjectData(requestUUID:objectData:)();
}

uint64_t sub_1C4D1280C()
{
  sub_1C4D16C30();
  sub_1C4D16B40();
  unint64_t v2 = v1[6];
  uint64_t v3 = v1[5];
  uint64_t v4 = (void (**)(void))v1[3];
  uint64_t v5 = *v0;
  sub_1C4D16B58();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  sub_1C4D16298(v3, v2);
  swift_bridgeObjectRelease();
  swift_release();
  v4[2](v4);
  _Block_release(v4);
  sub_1C4D16B98();
  return v7();
}

uint64_t TrafficLogger.logRequestBodyStreamReset(requestUUID:)()
{
  sub_1C4D16B80();
  v1[3] = v2;
  v1[4] = v0;
  uint64_t v4 = sub_1C4D16D78(v3);
  v1[5] = v4;
  sub_1C4D16C18(v4);
  v1[6] = sub_1C4D16BDC();
  sub_1C4D16C0C();
  return MEMORY[0x1F4188298]();
}

uint64_t sub_1C4D129F0()
{
  sub_1C4D16B80();
  if (sub_1C4D0F0B4())
  {
    uint64_t v1 = (void *)v0[6];
    uint64_t v2 = v0[3];
    void *v1 = v0[2];
    v1[1] = v2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[7] = v3;
    void *v3 = v0;
    v3[1] = sub_1C4D16B30;
    sub_1C4D16C24(v0[6]);
    return sub_1C4D0F15C();
  }
  else
  {
    swift_task_dealloc();
    sub_1C4D16B98();
    return v5();
  }
}

uint64_t sub_1C4D12AFC(int a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[4] = v4;
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v3[5] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1C4D16B28;
  return TrafficLogger.logRequestBodyStreamReset(requestUUID:)();
}

uint64_t sub_1C4D12BD0()
{
  sub_1C4D16BA4();
  if (sub_1C4D0F0B4())
  {
    uint64_t v1 = *(void *)(v0 + 72);
    uint64_t v2 = *(void *)(v0 + 48);
    uint64_t v3 = *(void *)(v0 + 24);
    long long v4 = *(_OWORD *)(v0 + 32);
    *(void *)uint64_t v1 = *(void *)(v0 + 16);
    *(void *)(v1 + 8) = v3;
    *(_OWORD *)(v1 + 16) = v4;
    *(void *)(v1 + 32) = v2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1C4D12CE0;
    sub_1C4D16C24(*(void *)(v0 + 72));
    return sub_1C4D0F15C();
  }
  else
  {
    swift_task_dealloc();
    sub_1C4D16B98();
    return v7();
  }
}

uint64_t sub_1C4D12CE0()
{
  sub_1C4D16B80();
  sub_1C4D16B40();
  uint64_t v2 = v1;
  sub_1C4D16B8C();
  void *v3 = v2;
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *v0;
  sub_1C4D16B58();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  sub_1C4D14854(v5);
  swift_task_dealloc();
  sub_1C4D16B98();
  return v8();
}

uint64_t sub_1C4D12E64(int a1, int a2, uint64_t a3, void *aBlock, uint64_t a5)
{
  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  if (a3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = 0;
  }
  void v5[4] = v10;
  v5[5] = v8;
  swift_retain();
  int64_t v11 = (void *)swift_task_alloc();
  v5[6] = v11;
  void *v11 = v5;
  v11[1] = sub_1C4D12F78;
  return TrafficLogger.logResponseConfiguration(requestUUID:format:messageClass:)();
}

uint64_t sub_1C4D12F78()
{
  sub_1C4D16BA4();
  sub_1C4D16B40();
  uint64_t v2 = *(void (***)(void))(v1 + 24);
  uint64_t v3 = *v0;
  sub_1C4D16B58();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v2[2](v2);
  _Block_release(v2);
  sub_1C4D16B98();
  return v5();
}

uint64_t sub_1C4D130C0()
{
  sub_1C4D16BA4();
  if (sub_1C4D0F0B4())
  {
    sub_1C4D16CE4();
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    sub_1C4D159E8(v0, v1);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v2 + 72) = v3;
    void *v3 = v2;
    v3[1] = sub_1C4D16B3C;
    sub_1C4D16C24(*(void *)(v2 + 64));
    return sub_1C4D0F15C();
  }
  else
  {
    swift_task_dealloc();
    sub_1C4D16B98();
    return v5();
  }
}

uint64_t sub_1C4D131D8(uint64_t a1, int a2, void *a3, void *a4, void *aBlock, uint64_t a6, uint64_t a7)
{
  int64_t v11 = _Block_copy(aBlock);
  int64_t v12 = (void *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  void v12[4] = v11;
  v12[5] = a1;
  id v13 = a3;
  id v14 = a4;
  swift_retain();
  return sub_1C4D2EB24(a7, (uint64_t)v12);
}

uint64_t sub_1C4D13268(int a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[4] = v6;
  id v7 = a2;
  swift_retain();
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v4[5] = v8;
  v4[6] = v10;
  int64_t v11 = (void *)swift_task_alloc();
  v4[7] = v11;
  void *v11 = v4;
  v11[1] = sub_1C4D16B34;
  return TrafficLogger.logPartialResponseObjectData(requestUUID:objectData:)();
}

uint64_t sub_1C4D1336C()
{
  sub_1C4D16B80();
  if (sub_1C4D0F0B4())
  {
    unint64_t v1 = (void *)v0[6];
    uint64_t v2 = v0[3];
    void *v1 = v0[2];
    v1[1] = v2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[7] = v3;
    void *v3 = v0;
    v3[1] = sub_1C4D13458;
    sub_1C4D16C24(v0[6]);
    return sub_1C4D0F15C();
  }
  else
  {
    swift_task_dealloc();
    sub_1C4D16B98();
    return v5();
  }
}

uint64_t sub_1C4D13458()
{
  sub_1C4D16B80();
  sub_1C4D16B40();
  uint64_t v2 = v1;
  sub_1C4D16B8C();
  void *v3 = v2;
  uint64_t v5 = *(void *)(v4 + 48);
  uint64_t v6 = *v0;
  sub_1C4D16B58();
  *id v7 = v6;
  swift_task_dealloc();
  sub_1C4D14854(v5);
  swift_task_dealloc();
  sub_1C4D16B98();
  return v8();
}

uint64_t sub_1C4D13558(uint64_t a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = _Block_copy(aBlock);
  sub_1C4D16D14();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a3;
  v10[3] = v9;
  v10[4] = a1;
  id v11 = a3;
  swift_retain();
  return sub_1C4D2EB24(a6, (uint64_t)v10);
}

uint64_t sub_1C4D135D8(int a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[4] = v4;
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v3[5] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1C4D136AC;
  return TrafficLogger.finishRequestLog(requestUUID:)();
}

uint64_t sub_1C4D136AC()
{
  sub_1C4D16BA4();
  sub_1C4D16B40();
  uint64_t v2 = *(void (***)(void))(v1 + 24);
  uint64_t v3 = *v0;
  sub_1C4D16B58();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  v2[2](v2);
  _Block_release(v2);
  sub_1C4D16B98();
  return v5();
}

unint64_t ResponseFormat.init(rawValue:)(unint64_t result)
{
  if (result > 4) {
    return 0;
  }
  return result;
}

BOOL sub_1C4D137EC(uint64_t *a1, uint64_t *a2)
{
  return sub_1C4D10DF8(*a1, *a2);
}

Swift::Int sub_1C4D137F8()
{
  return sub_1C4D13800(*v0);
}

Swift::Int sub_1C4D13800(Swift::UInt a1)
{
  return Hasher._finalize()();
}

void sub_1C4D13848(int a1)
{
  sub_1C4D13850(a1, *v1);
}

void sub_1C4D13850(int a1, Swift::UInt a2)
{
}

Swift::Int sub_1C4D13878(uint64_t a1)
{
  return sub_1C4D13880(a1, *v1);
}

Swift::Int sub_1C4D13880(uint64_t a1, Swift::UInt a2)
{
  return Hasher._finalize()();
}

unint64_t sub_1C4D138C4@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = ResponseFormat.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_1C4D138F8(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1C4D13904()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1C4D13964()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1C4D139B4(uint64_t a1)
{
  uint64_t v2 = sub_1C4D15E38(&qword_1EA3CB8B0, type metadata accessor for CKError);
  return MEMORY[0x1F40E6E20](a1, v2);
}

uint64_t sub_1C4D13A20(uint64_t a1)
{
  uint64_t v2 = sub_1C4D15E38(&qword_1EA3CB8B0, type metadata accessor for CKError);
  return MEMORY[0x1F40E6E10](a1, v2);
}

uint64_t sub_1C4D13A90(uint64_t a1)
{
  uint64_t v2 = sub_1C4D15E38((unint64_t *)&qword_1EA3CB8E8, type metadata accessor for CKError);
  return MEMORY[0x1F40E4480](a1, v2);
}

id sub_1C4D13AFC()
{
  return *v0;
}

uint64_t sub_1C4D13B04@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1C4D13B10()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1C4D13B20(uint64_t a1)
{
  uint64_t v2 = sub_1C4D15E38((unint64_t *)&qword_1EA3CB8E8, type metadata accessor for CKError);
  return MEMORY[0x1F40E44F0](a1, v2);
}

uint64_t sub_1C4D13B8C(uint64_t a1)
{
  uint64_t v2 = sub_1C4D15E38((unint64_t *)&qword_1EA3CB8E8, type metadata accessor for CKError);
  return MEMORY[0x1F40E44A8](a1, v2);
}

uint64_t sub_1C4D13BF8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4D15E38((unint64_t *)&qword_1EA3CB8E8, type metadata accessor for CKError);
  id v5 = a1;
  return MEMORY[0x1F40E4498](v5, a2, v4);
}

uint64_t sub_1C4D13C88()
{
  return sub_1C4D16124(*v0);
}

uint64_t sub_1C4D13C90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4D15E38((unint64_t *)&qword_1EA3CB8E8, type metadata accessor for CKError);
  return MEMORY[0x1F40E44D8](a1, a2, v4);
}

Swift::Int sub_1C4D13D0C()
{
  return Hasher._finalize()();
}

void sub_1C4D13D6C(uint64_t a1@<X8>)
{
  sub_1C4D13DA0();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3 & 1;
}

uint64_t sub_1C4D13DA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = nullsub_1(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1C4D13DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4D15E38((unint64_t *)&qword_1EA3CB8E8, type metadata accessor for CKError);
  return MEMORY[0x1F40E44B8](a1, a2, a3, v6);
}

uint64_t sub_1C4D13E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return MEMORY[0x1F4188298](sub_1C4D13F60, 0, 0);
}

uint64_t sub_1C4D13F60()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_1C4D15E38(&qword_1EBBCD7F8, MEMORY[0x1E4FBD1A8]);
  dispatch thunk of Clock.now.getter();
  sub_1C4D15E38(&qword_1EBBCD7F0, MEMORY[0x1E4FBD178]);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1C4D140FC;
  uint64_t v8 = sub_1C4D16C24(v0[11]);
  return MEMORY[0x1F4188178](v8, v0 + 2, v4, v5);
}

uint64_t sub_1C4D140FC()
{
  sub_1C4D16C30();
  sub_1C4D16B40();
  uint64_t v3 = v2;
  sub_1C4D16B8C();
  *uint64_t v4 = v3;
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v5[12];
  uint64_t v7 = v5[11];
  uint64_t v8 = v5[8];
  uint64_t v9 = *v1;
  sub_1C4D16B58();
  *uint64_t v10 = v9;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  v6(v7, v8);
  if (v0)
  {
    sub_1C4D16DD0();
    return MEMORY[0x1F4188298]();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1C4D16C70();
    return v11();
  }
}

uint64_t sub_1C4D14278()
{
  sub_1C4D16B80();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1C4D16B98();
  return v0();
}

uint64_t sub_1C4D142DC(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  sub_1C4D10728(&qword_1EBBCDBB8);
  MEMORY[0x1F4188790]();
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4D16A98(a1, (uint64_t)v15);
  uint64_t v16 = type metadata accessor for TaskPriority();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v15, 1, v16) == 1)
  {
    sub_1C4D168B0((uint64_t)v15, &qword_1EBBCDBB8);
    uint64_t result = 0;
    if ((a2 & 1) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned __int8 v18 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
    uint64_t result = v18;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if (a3) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  result |= 0x100uLL;
  if (a3)
  {
LABEL_4:
    result |= 0x400uLL;
    if ((a4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  if ((a4 & 1) == 0)
  {
LABEL_5:
    if ((a5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_15:
  result |= 0x800uLL;
  if (a5) {
LABEL_6:
  }
    result |= 0x1000uLL;
LABEL_7:
  if (a6) {
    result |= 0x2000uLL;
  }
  if (a7) {
    return result | 0x4000;
  }
  return result;
}

uint64_t sub_1C4D14444(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1C4D14520;
  return v6(a1);
}

uint64_t sub_1C4D14520()
{
  sub_1C4D16B80();
  sub_1C4D16B40();
  uint64_t v1 = *v0;
  sub_1C4D16B58();
  void *v2 = v1;
  swift_task_dealloc();
  sub_1C4D16C70();
  return v3();
}

uint64_t sub_1C4D145E0(uint64_t a1)
{
  return sub_1C4D14610(a1, (void (*)(void))type metadata accessor for PartialTrafficLog);
}

uint64_t sub_1C4D145F8(uint64_t a1)
{
  return sub_1C4D14610(a1, (void (*)(void))type metadata accessor for CKLogEvent);
}

uint64_t sub_1C4D14610(uint64_t a1, void (*a2)(void))
{
  if (a1 < 0)
  {
    sub_1C4D16CCC();
    uint64_t result = sub_1C4D16CA8();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      a2(0);
      uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v4 + 16) = a1;
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4FBC860];
    }
    ((uint64_t (*)(void))a2)(0);
    return v4;
  }
  return result;
}

uint64_t sub_1C4D146E0(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_1C4D16CCC();
    uint64_t result = sub_1C4D16CA8();
    __break(1u);
  }
  else if (a1)
  {
    type metadata accessor for TrafficLogMessage();
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) = a1;
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t sub_1C4D14764()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v0 = v1;
  if (!result)
  {
    uint64_t result = sub_1C4D29300(0, *(void *)(v1 + 16) + 1, 1, v1);
    uint64_t *v0 = result;
  }
  return result;
}

uint64_t sub_1C4D147B0(uint64_t result)
{
  unint64_t v2 = *(void *)(*v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
  {
    uint64_t result = sub_1C4D29300(v2 > 1, result + 1, 1, *v1);
    uint64_t *v1 = result;
  }
  return result;
}

uint64_t sub_1C4D147F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PartialTrafficLog(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C4D14854(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PartialTrafficLog(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1C4D148D8()
{
  return sub_1C4D14A64(MEMORY[0x1E4FBC8D0]);
}

uint64_t sub_1C4D148F0()
{
  sub_1C4D16BA4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1C4D16BD0(v0);
  void *v1 = v2;
  v1[1] = sub_1C4D1498C;
  uint64_t v3 = sub_1C4D16C90();
  return sub_1C4D0F738(v3, v4, v5, v6);
}

uint64_t sub_1C4D1498C()
{
  sub_1C4D16B80();
  sub_1C4D16B40();
  uint64_t v1 = *v0;
  sub_1C4D16B58();
  void *v2 = v1;
  swift_task_dealloc();
  sub_1C4D16B98();
  return v3();
}

uint64_t sub_1C4D14A4C()
{
  return sub_1C4D14A64(MEMORY[0x1E4FBC898]);
}

uint64_t sub_1C4D14A64(void (*a1)(void))
{
  swift_unknownObjectRelease();
  a1(*(void *)(v1 + 32));
  uint64_t v3 = sub_1C4D16D14();
  return MEMORY[0x1F4186498](v3);
}

uint64_t sub_1C4D14AAC()
{
  sub_1C4D16BA4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1C4D16BD0(v0);
  void *v1 = v2;
  v1[1] = sub_1C4D16B2C;
  uint64_t v3 = sub_1C4D16C90();
  return sub_1C4D100E4(v3, v4, v5, v6);
}

uint64_t type metadata accessor for TrafficLogger()
{
  return self;
}

uint64_t sub_1C4D14B70(uint64_t result)
{
  if (result + 1 > *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  return result;
}

uint64_t sub_1C4D14B9C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  sub_1C4D16DD0();
  uint64_t v9 = sub_1C4D14C6C(v6, v7, v8, 1, a1, a2);
  uint64_t v10 = v15[0];
  if (v9)
  {
    uint64_t v11 = v9;
    uint64_t ObjectType = swift_getObjectType();
    v15[0] = v11;
    uint64_t v12 = *a3;
    if (*a3)
    {
      sub_1C4D167F0((uint64_t)v15, *a3);
      *a3 = v12 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v15[0] = a1;
    v15[1] = a2;
    uint64_t v13 = *a3;
    if (*a3)
    {
      sub_1C4D167F0((uint64_t)v15, *a3);
      *a3 = v13 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1C4D1691C((uint64_t)v15);
  return v10;
}

uint64_t sub_1C4D14C6C(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_1C4D14DC4((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = sub_1C4D14E9C(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_1C4D14DC4(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t sub_1C4D14E9C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1C4D14F34(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)sub_1C4D150A8(0, *(void *)(v2 + 16) + 1, 1, v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = (uint64_t)sub_1C4D150A8((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1C4D14F34(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return MEMORY[0x1E4FBC860];
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
LABEL_6:
  unint64_t v3 = sub_1C4D29934(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1C4D150A8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C4D10728((uint64_t *)&unk_1EA3CB9E8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1C4D15258(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C4D15180(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1C4D15180(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_1C4D15258(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

void sub_1C4D152E8(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  char v5 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
  while (1)
  {
    uint64_t v7 = *(v5 - 3);
    uint64_t v6 = *(v5 - 2);
    uint64_t v9 = *(v5 - 1);
    uint64_t v8 = *v5;
    uint64_t v10 = (void *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_1C4D21F44(v7, v6);
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    char v16 = v11;
    if (v10[3] < v15) {
      break;
    }
    if (a2)
    {
      if (v11) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_1C4D10728((uint64_t *)&unk_1EBBCDC08);
      _NativeDictionary.copy()();
      if (v16) {
        goto LABEL_14;
      }
    }
LABEL_10:
    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    unint64_t v20 = (uint64_t *)(v19[6] + 16 * v12);
    uint64_t *v20 = v7;
    v20[1] = v6;
    char v21 = (void *)(v19[7] + 16 * v12);
    void *v21 = v9;
    v21[1] = v8;
    uint64_t v22 = v19[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_18;
    }
    v5 += 4;
    v19[2] = v24;
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  sub_1C4D155CC(v15, a2 & 1);
  unint64_t v17 = sub_1C4D21F44(v7, v6);
  if ((v16 & 1) != (v18 & 1)) {
    goto LABEL_19;
  }
  unint64_t v12 = v17;
  if ((v16 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v25 = (void *)swift_allocError();
  swift_willThrow();
  id v26 = v25;
  sub_1C4D10728(&qword_1EBBCD850);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    return;
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v27._object = (void *)0x80000001C5081AE0;
  v27._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v27);
  _print_unlocked<A, B>(_:_:)();
  v28._countAndFlagsBits = 39;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1C4D155CC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1C4D10728(&qword_1EBBCD800);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v37 = v2;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    unint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    BOOL v23 = (uint64_t *)(*(void *)(v5 + 56) + 16 * i);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) == 0)
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v11 + 8 * v28);
        if (v33 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    int64_t v34 = (void *)(*(void *)(v7 + 48) + 16 * v29);
    void *v34 = v22;
    v34[1] = v21;
    uint64_t v35 = (void *)(*(void *)(v7 + 56) + 16 * v29);
    void *v35 = v24;
    v35[1] = v25;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_41;
    }
    if (v16 >= v38)
    {
      swift_release();
      uint64_t v3 = v37;
      unint64_t v17 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    unint64_t v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v39 + 8 * v16);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v38) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v39 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v38)
  {
    unint64_t v18 = *(void *)(v39 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_42;
        }
        if (v13 >= v38) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v39 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    int64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
  uint64_t v3 = v37;
LABEL_34:
  if (v40)
  {
    uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
    if (v36 >= 64) {
      sub_1C4D299F8(0, (unint64_t)(v36 + 63) >> 6, v17);
    }
    else {
      *unint64_t v17 = -1 << v36;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1C4D158E0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

unint64_t sub_1C4D15918()
{
  unint64_t result = qword_1EBBCDBA8;
  if (!qword_1EBBCDBA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDBA8);
  }
  return result;
}

uint64_t sub_1C4D15968(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1C4D159E8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

unint64_t sub_1C4D15A44()
{
  unint64_t result = qword_1EA3CB810;
  if (!qword_1EA3CB810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CB810);
  }
  return result;
}

uint64_t method lookup function for TrafficLogger(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TrafficLogger);
}

uint64_t dispatch thunk of TrafficLogger.accumulatedLogs.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of TrafficLogger.accumulatedLogs.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of TrafficLogger.accumulatedLogs.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of TrafficLogger.log(_:)()
{
  sub_1C4D16BA4();
  uint64_t v2 = v1;
  uint64_t v3 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100);
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v3 + *v3);
  uint64_t v4 = swift_task_alloc();
  char v5 = (void *)sub_1C4D16BD0(v4);
  *char v5 = v6;
  v5[1] = sub_1C4D16B2C;
  return v8(v2);
}

uint64_t dispatch thunk of TrafficLogger.flushToOSLog()()
{
  sub_1C4D16BA4();
  uint64_t v1 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108);
  uint64_t v6 = (uint64_t (*)(void))((char *)v1 + *v1);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1C4D16BD0(v2);
  void *v3 = v4;
  v3[1] = sub_1C4D16B2C;
  return v6();
}

uint64_t dispatch thunk of TrafficLogger.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

ValueMetadata *type metadata accessor for ResponseFormat()
{
  return &type metadata for ResponseFormat;
}

void type metadata accessor for CKError(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

uint64_t sub_1C4D15DA8()
{
  return sub_1C4D15E38(&qword_1EA3CB8A0, type metadata accessor for CKError);
}

uint64_t sub_1C4D15DF0()
{
  return sub_1C4D15E38(&qword_1EA3CB8A8, type metadata accessor for CKError);
}

uint64_t sub_1C4D15E38(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C4D15E80()
{
  return sub_1C4D15E38(&qword_1EA3CB8B0, type metadata accessor for CKError);
}

uint64_t sub_1C4D15EC8()
{
  return sub_1C4D15E38(&qword_1EA3CB8B8, type metadata accessor for CKError);
}

uint64_t sub_1C4D15F10()
{
  return sub_1C4D15E38(&qword_1EA3CB8C0, type metadata accessor for CKError);
}

uint64_t sub_1C4D15F58()
{
  return sub_1C4D15E38(&qword_1EA3CB8C8, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

void sub_1C4D15FB4(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1C4D15FFC()
{
  return sub_1C4D15E38(&qword_1EA3CB8D0, type metadata accessor for Code);
}

unint64_t sub_1C4D16048()
{
  unint64_t result = qword_1EA3CB8D8;
  if (!qword_1EA3CB8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CB8D8);
  }
  return result;
}

uint64_t sub_1C4D16094()
{
  return sub_1C4D15E38(&qword_1EA3CB8E0, type metadata accessor for Code);
}

uint64_t sub_1C4D160DC()
{
  return sub_1C4D15E38((unint64_t *)&qword_1EA3CB8E8, type metadata accessor for CKError);
}

uint64_t sub_1C4D16124(void *a1)
{
  id v1 = a1;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1C4D1615C()
{
  sub_1C4D16BA4();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)sub_1C4D16BD0(v0);
  void *v1 = v2;
  v1[1] = sub_1C4D16B2C;
  uint64_t v3 = sub_1C4D16C54();
  return v4(v3);
}

uint64_t sub_1C4D161F8()
{
  sub_1C4D16C30();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)sub_1C4D16BD0(v0);
  void *v1 = v2;
  v1[1] = sub_1C4D16B2C;
  uint64_t v3 = sub_1C4D16BB0();
  return v4(v3);
}

uint64_t sub_1C4D16298(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1C4D162F0()
{
  _Block_release(*(const void **)(v0 + 40));
  swift_release();
  return MEMORY[0x1F4186498](v0);
}

uint64_t sub_1C4D16340()
{
  sub_1C4D16C30();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)sub_1C4D16BD0(v0);
  void *v1 = v2;
  v1[1] = sub_1C4D16B2C;
  uint64_t v3 = sub_1C4D16CFC();
  return v4(v3);
}

uint64_t sub_1C4D163F4()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();
  uint64_t v1 = sub_1C4D16D14();
  return MEMORY[0x1F4186498](v1);
}

uint64_t sub_1C4D16434()
{
  sub_1C4D16BA4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1C4D16BD0(v0);
  void *v1 = v2;
  v1[1] = sub_1C4D16B2C;
  uint64_t v3 = sub_1C4D16C54();
  return v4(v3);
}

uint64_t sub_1C4D164D0()
{
  sub_1C4D16C30();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1C4D16BD0(v0);
  void *v1 = v2;
  v1[1] = sub_1C4D16B2C;
  uint64_t v3 = sub_1C4D16BB0();
  return v4(v3);
}

uint64_t sub_1C4D16574()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return MEMORY[0x1F4186498](v0);
}

uint64_t sub_1C4D165C4()
{
  sub_1C4D16C30();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1C4D16BD0(v0);
  void *v1 = v2;
  v1[1] = sub_1C4D16B2C;
  uint64_t v3 = sub_1C4D16BB0();
  return v4(v3);
}

uint64_t sub_1C4D16664()
{
  _Block_release(*(const void **)(v0 + 64));
  swift_release();
  return MEMORY[0x1F4186498](v0);
}

uint64_t sub_1C4D166CC()
{
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1C4D16BD0(v0);
  void *v1 = v2;
  v1[1] = sub_1C4D1498C;
  uint64_t v3 = sub_1C4D16CFC();
  return v4(v3);
}

unint64_t sub_1C4D167A4()
{
  unint64_t result = qword_1EBBCD880;
  if (!qword_1EBBCD880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD880);
  }
  return result;
}

uint64_t sub_1C4D167F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1C4D1684C()
{
  return swift_release();
}

uint64_t sub_1C4D16854(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C4D168B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1C4D10728(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *sub_1C4D1690C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1C4D1691C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_1C4D16970()
{
  unint64_t result = qword_1EBBCDBC0;
  if (!qword_1EBBCDBC0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBBCDBC0);
  }
  return result;
}

uint64_t sub_1C4D169B0()
{
  swift_release();
  return MEMORY[0x1F4186498](v0);
}

uint64_t sub_1C4D169E8()
{
  sub_1C4D16BA4();
  uint64_t v2 = v1;
  uint64_t v3 = *(int **)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  char v5 = (void *)sub_1C4D16BD0(v4);
  *char v5 = v6;
  v5[1] = sub_1C4D16B2C;
  uint64_t v7 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA3CB9F8 + dword_1EA3CB9F8);
  return v7(v2, v3);
}

uint64_t sub_1C4D16A98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4D10728(&qword_1EBBCDBB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_1C4D16B98()
{
  return v0 + 8;
}

uint64_t sub_1C4D16BB0()
{
  return v0;
}

uint64_t sub_1C4D16BD0(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_1C4D16BDC()
{
  return swift_task_alloc();
}

uint64_t sub_1C4D16BF4(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_1C4D16C18(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_1C4D16C24@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

void sub_1C4D16C3C()
{
  JUMPOUT(0x1C878A850);
}

uint64_t sub_1C4D16C54()
{
  return v0;
}

uint64_t sub_1C4D16C70()
{
  return v0 + 8;
}

uint64_t sub_1C4D16C80()
{
  return v0 + 8;
}

uint64_t sub_1C4D16C90()
{
  return v0;
}

uint64_t sub_1C4D16CA8()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void *sub_1C4D16CE4()
{
  unint64_t result = (void *)v0[8];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[3];
  *unint64_t result = v0[2];
  result[1] = v4;
  result[2] = v2;
  result[3] = v3;
  return result;
}

uint64_t sub_1C4D16CFC()
{
  return v0;
}

uint64_t sub_1C4D16D14()
{
  return v0;
}

void sub_1C4D16D64(uint64_t a1@<X8>)
{
  *(void *)(v2 + a1) |= v1;
}

uint64_t sub_1C4D16D78(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return type metadata accessor for PartialTrafficLog(0);
}

uint64_t sub_1C4D16D90()
{
  return v0;
}

uint64_t sub_1C4D16DA4()
{
  return v0;
}

uint64_t sub_1C4D16DB8()
{
  return swift_slowAlloc();
}

id static TrafficLogChunkedMessage.chunkedLogMessages(from:)(void *a1)
{
  v101[1] = *(id *)MEMORY[0x1E4F143B8];
  type metadata accessor for UUID();
  sub_1C4D18454();
  uint64_t v92 = v4;
  uint64_t v93 = v3;
  ((void (*)(void))MEMORY[0x1F4188790])();
  sub_1C4D184E4();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for Logger();
  sub_1C4D18454();
  uint64_t v91 = v9;
  ((void (*)(void))MEMORY[0x1F4188790])();
  sub_1C4D184E4();
  uint64_t v12 = v11 - v10;
  type metadata accessor for String.Encoding();
  ((void (*)(void))MEMORY[0x1F4188790])();
  sub_1C4D184E4();
  uint64_t v15 = (v14 - v13);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  uint64_t v16 = PropertyListEncoder.init()();
  id v17 = (id)v16;
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  v101[0] = a1;
  sub_1C4D10728(&qword_1EBBCD7C8);
  sub_1C4D18390((unint64_t *)&unk_1EBBCD7D0, &qword_1EBBCD7B8);
  uint64_t v18 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v1) {
    goto LABEL_2;
  }
  unint64_t v20 = v19;
  uint64_t v89 = v7;
  uint64_t v90 = v12;
  v99 = v15;
  uint64_t v87 = a1;
  uint64_t v88 = v8;
  uint64_t v21 = v18;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v101[0] = 0;
  id v23 = [(objc_class *)isa compressedDataUsingAlgorithm:0 error:v101];

  if (!v23)
  {
    unint64_t v35 = v20;
    id v17 = v101[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_1C4D16298(v21, v35);
LABEL_2:
    swift_release();
    return v17;
  }
  uint64_t v84 = v21;
  uint64_t v86 = 0;
  id v24 = v101[0];
  id v25 = objc_msgSend(v23, sel_base64EncodedDataWithOptions_, 0);
  uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v28 = v27;

  unint64_t v100 = v28;
  uint64_t v29 = Data.count.getter();
  uint64_t v30 = v29;
  unint64_t v85 = v20;
  if (v29 >= 1)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    while (1)
    {
      uint64_t v33 = v31 + 1;
      if (__OFADD__(v31, 1)) {
        break;
      }
      BOOL v34 = __OFADD__(v32, 31000);
      v32 += 31000;
      if (v34) {
        uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
      }
      ++v31;
      if (v32 >= v29) {
        goto LABEL_13;
      }
    }
    __break(1u);
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v33 = 0;
LABEL_13:
  v101[0] = (id)MEMORY[0x1E4FBC860];
  sub_1C4D17FFC(0, v33 & ~(v33 >> 63), 0);
  if (v33 < 0)
  {
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
  }
  uint64_t v36 = v101[0];
  uint64_t v97 = v26;
  uint64_t v98 = BYTE6(v100);
  v82[1] = v16;
  id v83 = v23;
  if (v33)
  {
    sub_1C4D1848C(SHIDWORD(v26));
    v82[0] = v38;
    uint64_t v96 = v38;
    while (2)
    {
      uint64_t v39 = v99;
      if (v37 < v30)
      {
        if (v37 != 0x7FFFFFFFFFFF9F18)
        {
          uint64_t v40 = v37 + 31000;
          uint64_t v41 = v98;
          switch(v96)
          {
            case 1:
              uint64_t v41 = v94;
              if (v95) {
                goto LABEL_61;
              }
              goto LABEL_22;
            case 2:
              uint64_t v43 = *(void *)(v26 + 16);
              uint64_t v42 = *(void *)(v26 + 24);
              BOOL v34 = __OFSUB__(v42, v43);
              uint64_t v41 = v42 - v43;
              if (!v34) {
                goto LABEL_22;
              }
              goto LABEL_62;
            case 3:
              uint64_t v44 = v40 & (v40 >> 63);
              goto LABEL_26;
            default:
LABEL_22:
              if (v41 >= v40) {
                uint64_t v44 = v37 + 31000;
              }
              else {
                uint64_t v44 = v41;
              }
LABEL_26:
              if (v44 < v37) {
                goto LABEL_58;
              }
              Data._Representation.subscript.getter();
              uint64_t v46 = v45;
              static String.Encoding.utf8.getter();
              String.init(data:encoding:)();
              if (!v47) {
                goto LABEL_66;
              }
              sub_1C4D18508();
              sub_1C4D184F4();
              if (v49)
              {
                sub_1C4D184C0(v48);
                uint64_t v36 = v101[0];
              }
              _OWORD v36[2] = v46;
              uint64_t v50 = (char *)&v36[2 * v16];
              *((void *)v50 + 4) = v39;
              *((void *)v50 + 5) = v28;
              uint64_t v37 = v40;
              --v33;
              uint64_t v26 = v97;
              if (v33) {
                continue;
              }
              unsigned int v51 = v82[0];
              if (v40 >= v30) {
                goto LABEL_50;
              }
              goto LABEL_35;
          }
        }
        goto LABEL_57;
      }
      break;
    }
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (v30 >= 1)
  {
    uint64_t v40 = 0;
    sub_1C4D1848C(SHIDWORD(v26));
LABEL_35:
    uint64_t v96 = v51;
    while (2)
    {
      uint64_t v52 = v40 + 31000;
      if (!__OFADD__(v40, 31000))
      {
        uint64_t v53 = v98;
        v54 = v99;
        switch(v96)
        {
          case 1:
            uint64_t v53 = v94;
            if (v95) {
              goto LABEL_63;
            }
            goto LABEL_41;
          case 2:
            uint64_t v56 = *(void *)(v26 + 16);
            uint64_t v55 = *(void *)(v26 + 24);
            BOOL v34 = __OFSUB__(v55, v56);
            uint64_t v53 = v55 - v56;
            if (!v34) {
              goto LABEL_41;
            }
            goto LABEL_64;
          case 3:
            uint64_t v57 = v52 & (v52 >> 63);
            goto LABEL_45;
          default:
LABEL_41:
            if (v53 >= v52) {
              uint64_t v57 = v40 + 31000;
            }
            else {
              uint64_t v57 = v53;
            }
LABEL_45:
            if (v57 < v40) {
              goto LABEL_60;
            }
            Data._Representation.subscript.getter();
            uint64_t v59 = v58;
            static String.Encoding.utf8.getter();
            String.init(data:encoding:)();
            if (!v60) {
              goto LABEL_67;
            }
            sub_1C4D18508();
            sub_1C4D184F4();
            if (v49)
            {
              sub_1C4D184C0(v61);
              uint64_t v36 = v101[0];
            }
            _OWORD v36[2] = v59;
            uint64_t v62 = (char *)&v36[2 * v16];
            *((void *)v62 + 4) = v54;
            *((void *)v62 + 5) = v28;
            v40 += 31000;
            uint64_t v26 = v97;
            if (v52 >= v30) {
              goto LABEL_50;
            }
            continue;
        }
      }
      goto LABEL_59;
    }
  }
LABEL_50:
  uint64_t v63 = v90;
  CKLog.getter();
  v64 = v87;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v65 = v83;
  v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v66, v67))
  {
    v99 = v65;
    uint64_t v68 = swift_slowAlloc();
    *(_DWORD *)uint64_t v68 = 134218496;
    v69 = (void *)v64[2];
    swift_bridgeObjectRelease();
    v101[0] = v69;
    sub_1C4D184A4();
    swift_bridgeObjectRelease();
    *(_WORD *)(v68 + 12) = 2048;
    uint64_t v70 = (void *)v36[2];
    swift_release();
    v101[0] = v70;
    sub_1C4D184A4();
    swift_release();
    *(_WORD *)(v68 + 22) = 2048;
    uint64_t v71 = v99;
    uint64_t v72 = NSData.startIndex.getter();
    uint64_t v73 = NSData.endIndex.getter();
    uint64_t v74 = (void *)sub_1C4D18088(v72, v73);

    v101[0] = v74;
    sub_1C4D184A4();

    _os_log_impl(&dword_1C4CFF000, v66, v67, "Flushed traffic logs. count=%ld chunks=%ld dataSize=%ld", (uint8_t *)v68, 0x20u);
    uint64_t v75 = v68;
    uint64_t v65 = v99;
    uint64_t v63 = v90;
    MEMORY[0x1C878A850](v75, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();

    v66 = v65;
  }

  (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v63, v88);
  UUID.init()();
  uint64_t v76 = UUID.uuidString.getter();
  uint64_t v78 = v77;
  uint64_t v79 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 8))(v89, v93);
  MEMORY[0x1F4188790](v79);
  v82[-4] = v76;
  v82[-3] = v78;
  v82[-2] = v80;
  id v17 = (id)sub_1C4D177C8((uint64_t)v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1C4D1807C);
  sub_1C4D16298(v84, v85);
  sub_1C4D16298(v26, v100);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return v17;
}

void sub_1C4D17600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v6)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v9 = a1;
  uint64_t v18 = MEMORY[0x1E4FBC860];
  sub_1C4D17FFC(0, v6 & ~(v6 >> 63), 0);
  if (a2 >= v9 && (v6 & 0x8000000000000000) == 0)
  {
    while (a2 != v9)
    {
      if (!*(void *)(a6 + 16)) {
        goto LABEL_14;
      }
      unint64_t v10 = sub_1C4D21FBC(v9);
      if ((v11 & 1) == 0) {
        goto LABEL_15;
      }
      uint64_t v12 = (uint64_t *)(*(void *)(a6 + 56) + 16 * v10);
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      unint64_t v16 = *(void *)(v18 + 16);
      unint64_t v15 = *(void *)(v18 + 24);
      swift_bridgeObjectRetain();
      if (v16 >= v15 >> 1) {
        sub_1C4D17FFC(v15 > 1, v16 + 1, 1);
      }
      *(void *)(v18 + 16) = v16 + 1;
      uint64_t v17 = v18 + 16 * v16;
      *(void *)(v17 + 32) = v13;
      *(void *)(v17 + 40) = v14;
      if (a2 == ++v9) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
}

BOOL TrafficLogChunkedMessage.hasAllChunks.getter()
{
  return *(void *)(*(void *)(v0 + 24) + 16) == *(void *)(v0 + 16);
}

uint64_t static TrafficLogChunkedMessage.maxOSLogMessageSize.getter()
{
  return 31000;
}

uint64_t sub_1C4D17780(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1C4D177C8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v16 = MEMORY[0x1E4FBC860];
  sub_1C4D17FFC(0, 0, 0);
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      swift_bridgeObjectRetain();
      uint64_t v8 = a2(v4, v7, v6);
      uint64_t v10 = v9;
      swift_bridgeObjectRelease();
      unint64_t v12 = *(void *)(v16 + 16);
      unint64_t v11 = *(void *)(v16 + 24);
      if (v12 >= v11 >> 1) {
        sub_1C4D17FFC(v11 > 1, v12 + 1, 1);
      }
      ++v4;
      v5 += 2;
      *(void *)(v16 + 16) = v12 + 1;
      uint64_t v13 = v16 + 16 * v12;
      *(void *)(v13 + 32) = v8;
      *(void *)(v13 + 40) = v10;
    }
    while (v3 != v4);
  }
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_1C4D178EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = qword_1EBBCD700;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1EBBCDCB8;
  uint64_t v8 = (void *)unk_1EBBCDCC0;
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = qword_1EBBCDCB8;
  unint64_t v12 = (void *)unk_1EBBCDCC0;
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = qword_1EBBCDCB8;
  uint64_t v16 = (void *)unk_1EBBCDCC0;
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = a2;
  v18._object = a3;
  String.append(_:)(v18);
  return a4;
}

uint64_t static TrafficLogChunkedMessage.partialTrafficLogs(from:)(uint64_t a1)
{
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v10 = MEMORY[0x1E4FBC860];
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      uint64_t v6 = *(i - 1);
      uint64_t v7 = *i;
      uint64_t v8 = *(i - 2);
      v9[0] = *(i - 3);
      v9[1] = v8;
      v9[2] = v6;
      v9[3] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1C4D17B4C((uint64_t)&v10, v9);
      if (v1) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        return v10;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1C4D17B4C(uint64_t a1, uint64_t *a2)
{
  v20[3] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v3 = a2[2];
  if (v3 < 0) {
    __break(1u);
  }
  uint64_t v4 = a2[3];
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1C4D17600(0, v3, v6, v5, v3, v4);
  v20[0] = v7;
  sub_1C4D10728(&qword_1EA3CBA80);
  sub_1C4D182FC();
  uint64_t v8 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  sub_1C4D18350();
  swift_bridgeObjectRetain();
  id v11 = sub_1C4D17E68(v8, (uint64_t)v10, 0);
  if (v11)
  {
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    v20[0] = 0;
    id v13 = objc_msgSend(v12, sel_decompressedDataUsingAlgorithm_error_, 0, v20);
    id v14 = v20[0];
    if (v13)
    {
      uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      PropertyListDecoder.init()();
      sub_1C4D10728(&qword_1EBBCD7C8);
      sub_1C4D18390(&qword_1EA3CBA98, &qword_1EA3CBAA0);
      sub_1C4D18470();
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      if (v2)
      {

        type metadata accessor for JSONDecoder();
        swift_allocObject();
        JSONDecoder.init()();
        sub_1C4D18470();
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        sub_1C4D17EE4((uint64_t)v20[0]);
        swift_release();
      }
      else
      {
        sub_1C4D17EE4((uint64_t)v20[0]);
      }
      swift_release();
      sub_1C4D16298(v15, v17);
    }
    else
    {
      unint64_t v19 = v14;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    v20[0] = (id)0xD000000000000029;
    v20[1] = (id)0x80000001C5081B60;
    v18._countAndFlagsBits = v8;
    v18._object = v10;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    related decl 'e' for CKErrorCode.init(_:description:)();
    swift_willThrow();
  }
}

id sub_1C4D17E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v7 = (void *)MEMORY[0x1C87879B0](a1, a2);
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithBase64EncodedString_options_, v7, a3);

  return v8;
}

uint64_t sub_1C4D17EE4(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (!result || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v7 = v4 + v2;
    }
    else {
      uint64_t v7 = v4;
    }
    uint64_t result = sub_1C4D29300(result, v7, 1, v3);
    uint64_t v3 = result;
  }
  if (!*(void *)(v6 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = type metadata accessor for PartialTrafficLog(0);
  uint64_t v12 = *(void *)(v10 - 8);
  uint64_t result = v10 - 8;
  uint64_t v11 = v12;
  if (v9 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t result = sub_1C4D21B00(v6 + v13, v2, v3 + v13 + *(void *)(v11 + 72) * v8);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v1 = v3;
    return result;
  }
  uint64_t v14 = *(void *)(v3 + 16);
  BOOL v15 = __OFADD__(v14, v2);
  uint64_t v16 = v14 + v2;
  if (!v15)
  {
    *(void *)(v3 + 16) = v16;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

void sub_1C4D17FFC(char a1, uint64_t a2, char a3)
{
  sub_1C4D29A14(a1, a2, a3, *v3);
  uint64_t *v3 = v4;
}

void sub_1C4D1801C(char a1, uint64_t a2, char a3)
{
  sub_1C4D29AD8(a1, a2, a3, *v3);
  uint64_t *v3 = v4;
}

void sub_1C4D1803C(char a1, uint64_t a2, char a3)
{
  sub_1C4D29B0C(a1, a2, a3, *v3);
  uint64_t *v3 = v4;
}

void sub_1C4D1805C(char a1, uint64_t a2, char a3)
{
  sub_1C4D29B54(a1, a2, a3, *v3);
  uint64_t *v3 = v4;
}

uint64_t sub_1C4D1807C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1C4D178EC(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_1C4D18088(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = NSData.startIndex.getter();
  uint64_t result = NSData.endIndex.getter();
  if (v4 > a1 || result < a1)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = NSData.startIndex.getter();
  uint64_t result = NSData.endIndex.getter();
  if (v7 > a2 || result < a2) {
    goto LABEL_12;
  }
  uint64_t result = a2 - a1;
  if (__OFSUB__(a2, a1)) {
LABEL_13:
  }
    __break(1u);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PartialTrafficLog.RequestObject(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for TrafficLogChunkedMessage()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for TrafficLogChunkedMessage(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TrafficLogChunkedMessage(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PartialTrafficLog.RequestObject(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for TrafficLogChunkedMessage(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrafficLogChunkedMessage(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrafficLogChunkedMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrafficLogChunkedMessage()
{
  return &type metadata for TrafficLogChunkedMessage;
}

unint64_t sub_1C4D182FC()
{
  unint64_t result = qword_1EA3CBA88;
  if (!qword_1EA3CBA88)
  {
    sub_1C4D17780(&qword_1EA3CBA80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CBA88);
  }
  return result;
}

unint64_t sub_1C4D18350()
{
  unint64_t result = qword_1EA3CBA90;
  if (!qword_1EA3CBA90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA3CBA90);
  }
  return result;
}

uint64_t sub_1C4D18390(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C4D17780(&qword_1EBBCD7C8);
    sub_1C4D18410(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C4D18410(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PartialTrafficLog(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C4D18470()
{
  return v0;
}

void sub_1C4D1848C(int a1@<W8>)
{
  BOOL v3 = __OFSUB__(a1, v1);
  int v4 = a1 - v1;
  int v5 = v3;
  *(_DWORD *)(v2 - 156) = v5;
  *(void *)(v2 - 168) = v4;
}

uint64_t sub_1C4D184A4()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_1C4D184C0(unint64_t a1@<X8>)
{
  sub_1C4D17FFC(a1 > 1, v1, 1);
}

void sub_1C4D184F4()
{
  *(void *)(v1 - 104) = v0;
}

uint64_t sub_1C4D18508()
{
  return sub_1C4D16298(v0, v1);
}

uint64_t CKLogEvent.id.getter()
{
  return sub_1C4D1B014();
}

uint64_t CKLogEvent.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CKLogEvent.id.modify())(void)
{
  return nullsub_1;
}

uint64_t CKLogEvent.device.getter()
{
  return sub_1C4D1B014();
}

uint64_t CKLogEvent.device.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*CKLogEvent.device.modify())(void)
{
  return nullsub_1;
}

uint64_t CKLogEvent.process.getter()
{
  return sub_1C4D1B014();
}

uint64_t CKLogEvent.process.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*CKLogEvent.process.modify())(void)
{
  return nullsub_1;
}

uint64_t CKLogEvent.pid.getter()
{
  return *(unsigned int *)(v0 + 48);
}

uint64_t CKLogEvent.pid.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*CKLogEvent.pid.modify())(void)
{
  return nullsub_1;
}

uint64_t CKLogEvent.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CKLogEvent() + 32);
  return sub_1C4D18770(v3, a1);
}

uint64_t type metadata accessor for CKLogEvent()
{
  uint64_t result = qword_1EA3CBAD0;
  if (!qword_1EA3CBAD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C4D18770(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CKLogEvent.startDate.setter()
{
  uint64_t v2 = v1 + *(int *)(sub_1C4D1AFE4() + 32);
  return sub_1C4D18814(v0, v2);
}

uint64_t sub_1C4D18814(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*CKLogEvent.startDate.modify())(void)
{
  return nullsub_1;
}

uint64_t CKLogEvent.endDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CKLogEvent() + 36);
  return sub_1C4D18770(v3, a1);
}

uint64_t CKLogEvent.endDate.setter()
{
  uint64_t v2 = v1 + *(int *)(sub_1C4D1AFE4() + 36);
  return sub_1C4D18814(v0, v2);
}

uint64_t (*CKLogEvent.endDate.modify())(void)
{
  return nullsub_1;
}

uint64_t CKLogEvent.timeZone.getter()
{
  type metadata accessor for CKLogEvent();
  type metadata accessor for TimeZone();
  sub_1C4D1B074();
  uint64_t v0 = sub_1C4D1B014();
  return v1(v0);
}

uint64_t CKLogEvent.timeZone.setter()
{
  uint64_t v2 = v1 + *(int *)(sub_1C4D1AFE4() + 40);
  type metadata accessor for TimeZone();
  sub_1C4D1B074();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);
  return v5(v2, v0, v3);
}

uint64_t (*CKLogEvent.timeZone.modify())(void)
{
  return nullsub_1;
}

uint64_t CKLogEvent.type.getter()
{
  return sub_1C4D1B014();
}

uint64_t CKLogEvent.type.setter()
{
  sub_1C4D1B020();
  uint64_t result = sub_1C4D1B0AC();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*CKLogEvent.type.modify())(void)
{
  return nullsub_1;
}

uint64_t CKLogEvent.container.getter()
{
  return sub_1C4D1B014();
}

uint64_t CKLogEvent.container.setter()
{
  sub_1C4D1B020();
  uint64_t result = sub_1C4D1B0AC();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*CKLogEvent.container.modify())(void)
{
  return nullsub_1;
}

uint64_t CKLogEvent.database.getter()
{
  return sub_1C4D1B014();
}

uint64_t CKLogEvent.database.setter()
{
  sub_1C4D1B020();
  uint64_t result = sub_1C4D1B0AC();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*CKLogEvent.database.modify())(void)
{
  return nullsub_1;
}

uint64_t CKLogEvent.input.getter()
{
  return sub_1C4D1B014();
}

uint64_t CKLogEvent.input.setter()
{
  sub_1C4D1B020();
  uint64_t result = sub_1C4D1B0AC();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*CKLogEvent.input.modify())(void)
{
  return nullsub_1;
}

uint64_t CKLogEvent.output.getter()
{
  return sub_1C4D1B014();
}

uint64_t CKLogEvent.output.setter()
{
  sub_1C4D1B020();
  uint64_t result = sub_1C4D1B0AC();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*CKLogEvent.output.modify())(void)
{
  return nullsub_1;
}

uint64_t static CKLogEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  sub_1C4D18454();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  uint64_t v82 = &v74[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_1C4D10728(&qword_1EA3CBAA8);
  sub_1C4D1B074();
  MEMORY[0x1F4188790](v10);
  sub_1C4D1B0E0();
  uint64_t v80 = v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = &v74[-v13];
  uint64_t v15 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  MEMORY[0x1F4188790](v15 - 8);
  sub_1C4D1B0E0();
  uint64_t v79 = v16;
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  unint64_t v20 = &v74[-v19];
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  uint64_t v81 = &v74[-v22];
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  id v25 = &v74[-v24];
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  unint64_t v28 = &v74[-v27];
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = &v74[-v29];
  BOOL v31 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (!v31)
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    char v32 = sub_1C4D1B084();
    if ((v33 & 1) == 0) {
      return v32 & 1;
    }
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16) || *(void *)(a1 + 24) != *(void *)(a2 + 24))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    char v32 = sub_1C4D1B084();
    if ((v35 & 1) == 0) {
      return v32 & 1;
    }
  }
  if (*(void *)(a1 + 32) != *(void *)(a2 + 32) || *(void *)(a1 + 40) != *(void *)(a2 + 40))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    char v32 = sub_1C4D1B084();
    if ((v37 & 1) == 0) {
      return v32 & 1;
    }
  }
  if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
  {
LABEL_37:
    char v32 = 0;
    return v32 & 1;
  }
  uint64_t v78 = v6;
  uint64_t v38 = type metadata accessor for CKLogEvent();
  sub_1C4D18770(a1 + *(int *)(v38 + 32), (uint64_t)v30);
  uint64_t v77 = (int *)v38;
  sub_1C4D18770(a2 + *(int *)(v38 + 32), (uint64_t)v28);
  uint64_t v39 = (uint64_t)&v14[*(int *)(v9 + 48)];
  sub_1C4D18770((uint64_t)v30, (uint64_t)v14);
  sub_1C4D18770((uint64_t)v28, v39);
  sub_1C4D1AFC4((uint64_t)v14);
  if (v31)
  {
    sub_1C4D19490((uint64_t)v28, (uint64_t *)&unk_1EA3CC170);
    sub_1C4D19490((uint64_t)v30, (uint64_t *)&unk_1EA3CC170);
    sub_1C4D1AFC4(v39);
    if (v31)
    {
      sub_1C4D19490((uint64_t)v14, (uint64_t *)&unk_1EA3CC170);
      goto LABEL_27;
    }
LABEL_25:
    uint64_t v41 = (uint64_t)v14;
LABEL_36:
    sub_1C4D19490(v41, &qword_1EA3CBAA8);
    goto LABEL_37;
  }
  sub_1C4D18770((uint64_t)v14, (uint64_t)v25);
  sub_1C4D1AFC4(v39);
  if (v40)
  {
    sub_1C4D19490((uint64_t)v28, (uint64_t *)&unk_1EA3CC170);
    sub_1C4D19490((uint64_t)v30, (uint64_t *)&unk_1EA3CC170);
    (*(void (**)(unsigned char *, uint64_t))(v78 + 8))(v25, v4);
    goto LABEL_25;
  }
  sub_1C4D1B114();
  v42();
  sub_1C4D19B40(&qword_1EA3CBAB0, MEMORY[0x1E4F27928]);
  int v75 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v76 = *(void (**)(unsigned char *, uint64_t))(v78 + 8);
  v76(v82, v4);
  sub_1C4D19490((uint64_t)v28, (uint64_t *)&unk_1EA3CC170);
  sub_1C4D19490((uint64_t)v30, (uint64_t *)&unk_1EA3CC170);
  v76(v25, v4);
  sub_1C4D19490((uint64_t)v14, (uint64_t *)&unk_1EA3CC170);
  if ((v75 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_27:
  uint64_t v43 = v77;
  uint64_t v44 = v81;
  sub_1C4D18770(a1 + v77[9], (uint64_t)v81);
  sub_1C4D18770(a2 + v43[9], (uint64_t)v20);
  uint64_t v45 = v80;
  uint64_t v46 = v80 + *(int *)(v9 + 48);
  sub_1C4D18770((uint64_t)v44, v80);
  sub_1C4D18770((uint64_t)v20, v46);
  sub_1C4D1AFC4(v45);
  if (v31)
  {
    sub_1C4D19490((uint64_t)v20, (uint64_t *)&unk_1EA3CC170);
    sub_1C4D19490((uint64_t)v44, (uint64_t *)&unk_1EA3CC170);
    sub_1C4D1AFC4(v46);
    if (v31)
    {
      sub_1C4D19490(v45, (uint64_t *)&unk_1EA3CC170);
      goto LABEL_40;
    }
    goto LABEL_35;
  }
  uint64_t v47 = v79;
  sub_1C4D18770(v45, v79);
  sub_1C4D1AFC4(v46);
  if (v48)
  {
    sub_1C4D19490((uint64_t)v20, (uint64_t *)&unk_1EA3CC170);
    sub_1C4D19490((uint64_t)v44, (uint64_t *)&unk_1EA3CC170);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v47, v4);
LABEL_35:
    uint64_t v41 = v45;
    goto LABEL_36;
  }
  uint64_t v50 = v78;
  unsigned int v51 = v82;
  sub_1C4D1B114();
  v52();
  sub_1C4D19B40(&qword_1EA3CBAB0, MEMORY[0x1E4F27928]);
  char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
  v54 = *(void (**)(unsigned char *, uint64_t))(v50 + 8);
  v54(v51, v4);
  sub_1C4D19490((uint64_t)v20, (uint64_t *)&unk_1EA3CC170);
  sub_1C4D19490((uint64_t)v81, (uint64_t *)&unk_1EA3CC170);
  v54((unsigned char *)v47, v4);
  uint64_t v43 = v77;
  sub_1C4D19490(v45, (uint64_t *)&unk_1EA3CC170);
  if ((v53 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_40:
  if ((MEMORY[0x1C8787810](a1 + v43[10], a2 + v43[10]) & 1) == 0) {
    goto LABEL_37;
  }
  sub_1C4D1AFAC(v43[11]);
  BOOL v57 = v31 && v55 == v56;
  if (v57 || (_stringCompareWithSmolCheck(_:_:expecting:)(), char v32 = sub_1C4D1B084(), (v58 & 1) != 0))
  {
    sub_1C4D1AFAC(v43[12]);
    BOOL v61 = v31 && v59 == v60;
    if (v61 || (_stringCompareWithSmolCheck(_:_:expecting:)(), char v32 = sub_1C4D1B084(), (v62 & 1) != 0))
    {
      sub_1C4D1AFAC(v43[13]);
      BOOL v65 = v31 && v63 == v64;
      if (v65 || (_stringCompareWithSmolCheck(_:_:expecting:)(), char v32 = sub_1C4D1B084(), (v66 & 1) != 0))
      {
        sub_1C4D1AFAC(v43[14]);
        BOOL v69 = v31 && v67 == v68;
        if (v69 || (_stringCompareWithSmolCheck(_:_:expecting:)(), char v32 = sub_1C4D1B084(), (v70 & 1) != 0))
        {
          sub_1C4D1AFAC(v43[15]);
          if (v31 && v71 == v72) {
            char v32 = 1;
          }
          else {
            char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
        }
      }
    }
  }
  return v32 & 1;
}

uint64_t sub_1C4D19490(uint64_t a1, uint64_t *a2)
{
  sub_1C4D10728(a2);
  sub_1C4D1B074();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t CKLogEvent.hash(into:)()
{
  uint64_t v1 = type metadata accessor for Date();
  sub_1C4D18454();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v17 - v11;
  swift_bridgeObjectRetain();
  sub_1C4D1B0C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1C4D1B0C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1C4D1B0C4();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_DWORD *)(v0 + 48));
  uint64_t v13 = type metadata accessor for CKLogEvent();
  sub_1C4D18770(v0 + *(int *)(v13 + 32), (uint64_t)v12);
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v12, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_1C4D1B114();
    v14();
    Hasher._combine(_:)(1u);
    sub_1C4D19B40(&qword_1EA3CBAB8, MEMORY[0x1E4F27928]);
    sub_1C4D1B0F4();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v1);
  }
  sub_1C4D18770(v0 + *(int *)(v13 + 36), (uint64_t)v10);
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v10, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_1C4D1B114();
    v15();
    Hasher._combine(_:)(1u);
    sub_1C4D19B40(&qword_1EA3CBAB8, MEMORY[0x1E4F27928]);
    sub_1C4D1B0F4();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v1);
  }
  type metadata accessor for TimeZone();
  sub_1C4D19B40(&qword_1EA3CBAC0, MEMORY[0x1E4F27D68]);
  dispatch thunk of Hashable.hash(into:)();
  sub_1C4D1B058();
  sub_1C4D1B090();
  swift_bridgeObjectRelease();
  sub_1C4D1B058();
  sub_1C4D1B090();
  swift_bridgeObjectRelease();
  sub_1C4D1B058();
  sub_1C4D1B090();
  swift_bridgeObjectRelease();
  sub_1C4D1B058();
  sub_1C4D1B090();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1C4D1B014();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int CKLogEvent.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t sub_1C4D198BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKLogEvent.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int sub_1C4D198F0()
{
  return Hasher._finalize()();
}

uint64_t CKLogSet.events.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CKLogSet.events.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*CKLogSet.events.modify())(void)
{
  return nullsub_1;
}

uint64_t static CKLogSet.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_1C4D1998C(*a1, *a2);
}

uint64_t sub_1C4D1998C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CKLogEvent() - 8;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_1C4D1AEEC(a1 + v12, (uint64_t)v10);
        sub_1C4D1AEEC(a2 + v12, (uint64_t)v7);
        char v15 = static CKLogEvent.== infix(_:_:)((uint64_t)v10, (uint64_t)v7);
        sub_1C4D1AF50((uint64_t)v7);
        sub_1C4D1AF50((uint64_t)v10);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1C4D19AEC()
{
  return MEMORY[0x1E4FBB1B0];
}

uint64_t sub_1C4D19AF8()
{
  return sub_1C4D19B40(&qword_1EA3CBAC8, (void (*)(uint64_t))type metadata accessor for CKLogEvent);
}

uint64_t sub_1C4D19B40(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CKLogEvent(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[4];
    uint64_t v10 = a2[5];
    *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
    uint64_t v11 = a3[8];
    unint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (char *)a2 + v11;
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v10;
    uint64_t v14 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v13, 1, v14))
    {
      uint64_t v15 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
      memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v12, 0, 1, v14);
    }
    uint64_t v17 = a3[9];
    uint64_t v18 = (char *)v4 + v17;
    uint64_t v19 = (char *)a2 + v17;
    if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)a2 + v17, 1, v14))
    {
      uint64_t v20 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v18, v19, v14);
      _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v18, 0, 1, v14);
    }
    uint64_t v21 = a3[10];
    uint64_t v22 = (char *)v4 + v21;
    uint64_t v23 = (uint64_t)a2 + v21;
    uint64_t v24 = type metadata accessor for TimeZone();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
    uint64_t v25 = a3[11];
    uint64_t v26 = a3[12];
    uint64_t v27 = (void *)((char *)v4 + v25);
    unint64_t v28 = (uint64_t *)((char *)a2 + v25);
    uint64_t v29 = v28[1];
    void *v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = (void *)((char *)v4 + v26);
    BOOL v31 = (uint64_t *)((char *)a2 + v26);
    uint64_t v32 = v31[1];
    void *v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = a3[13];
    uint64_t v34 = a3[14];
    char v35 = (void *)((char *)v4 + v33);
    uint64_t v36 = (uint64_t *)((char *)a2 + v33);
    uint64_t v37 = v36[1];
    void *v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = (void *)((char *)v4 + v34);
    uint64_t v39 = (uint64_t *)((char *)a2 + v34);
    uint64_t v40 = v39[1];
    void *v38 = *v39;
    v38[1] = v40;
    uint64_t v41 = a3[15];
    uint64_t v42 = (void *)((char *)v4 + v41);
    uint64_t v43 = (uint64_t *)((char *)a2 + v41);
    uint64_t v44 = v43[1];
    void *v42 = *v43;
    v42[1] = v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for CKLogEvent(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[8];
  uint64_t v5 = type metadata accessor for Date();
  if (!_s14CloudKitDaemon17PartialTrafficLogOwet_0(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = a1 + a2[9];
  if (!_s14CloudKitDaemon17PartialTrafficLogOwet_0(v6, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v6, v5);
  }
  uint64_t v7 = a1 + a2[10];
  uint64_t v8 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CKLogEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)(a1 + v10);
  unint64_t v12 = (const void *)(a2 + v10);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v13 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v12, 1, v13))
  {
    uint64_t v14 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
    memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v11, 0, 1, v13);
  }
  uint64_t v15 = a3[9];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(a2 + v15, 1, v13))
  {
    uint64_t v18 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 16))(v16, v17, v13);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v16, 0, 1, v13);
  }
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  uint64_t v23 = a3[11];
  uint64_t v24 = a3[12];
  uint64_t v25 = (void *)(a1 + v23);
  uint64_t v26 = (void *)(a2 + v23);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  unint64_t v28 = (void *)(a1 + v24);
  uint64_t v29 = (void *)(a2 + v24);
  uint64_t v30 = v29[1];
  *unint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = a3[13];
  uint64_t v32 = a3[14];
  uint64_t v33 = (void *)(a1 + v31);
  uint64_t v34 = (void *)(a2 + v31);
  uint64_t v35 = v34[1];
  void *v33 = *v34;
  v33[1] = v35;
  uint64_t v36 = (void *)(a1 + v32);
  uint64_t v37 = (void *)(a2 + v32);
  uint64_t v38 = v37[1];
  void *v36 = *v37;
  v36[1] = v38;
  uint64_t v39 = a3[15];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (void *)(a2 + v39);
  uint64_t v42 = v41[1];
  void *v40 = *v41;
  v40[1] = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CKLogEvent(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v6 = a3[8];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  int v10 = _s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[9];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  int v17 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(a1 + v14, 1, v9);
  int v18 = _s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v16, 1, v9);
  if (!v17)
  {
    uint64_t v19 = *(void *)(v9 - 8);
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v19 + 24))(v15, v16, v9);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v15, v9);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    uint64_t v20 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v15, v16, v9);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v15, 0, 1, v9);
LABEL_13:
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  *uint64_t v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[12];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  void *v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[13];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  *uint64_t v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[14];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  void *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[15];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (void *)(a2 + v37);
  void *v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CKLogEvent(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v7 = a3[8];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[9];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(a2 + v12, 1, v10))
  {
    uint64_t v15 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v13, v14, v10);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v13, 0, 1, v10);
  }
  uint64_t v16 = a3[10];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  uint64_t v20 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  uint64_t v21 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t assignWithTake for CKLogEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v9 = a3[8];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for Date();
  int v13 = _s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v10, 1, v12);
  int v14 = _s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v11, 1, v12);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)(v12 - 8);
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
LABEL_6:
    uint64_t v16 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v10, v11, v12);
LABEL_7:
  uint64_t v17 = a3[9];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  int v20 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(a1 + v17, 1, v12);
  int v21 = _s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v19, 1, v12);
  if (!v20)
  {
    uint64_t v22 = *(void *)(v12 - 8);
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(v22 + 40))(v18, v19, v12);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v18, v12);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    uint64_t v23 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v18, v19, v12);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v18, 0, 1, v12);
LABEL_13:
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 40))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  void *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[12];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  void *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[13];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (uint64_t *)(a2 + v38);
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  *uint64_t v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[14];
  uint64_t v44 = (void *)(a1 + v43);
  uint64_t v45 = (uint64_t *)(a2 + v43);
  uint64_t v47 = *v45;
  uint64_t v46 = v45[1];
  *uint64_t v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[15];
  char v49 = (void *)(a1 + v48);
  uint64_t v50 = (uint64_t *)(a2 + v48);
  uint64_t v52 = *v50;
  uint64_t v51 = v50[1];
  *char v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CKLogEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C4D1AC28);
}

uint64_t sub_1C4D1AC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
    sub_1C4D1AFFC();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 32);
    }
    else
    {
      uint64_t v10 = type metadata accessor for TimeZone();
      uint64_t v11 = *(int *)(a3 + 40);
    }
    return _s14CloudKitDaemon17PartialTrafficLogOwet_0(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CKLogEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C4D1ACEC);
}

uint64_t sub_1C4D1ACEC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
    sub_1C4D1AFFC();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 32);
    }
    else
    {
      uint64_t v10 = type metadata accessor for TimeZone();
      uint64_t v11 = *(int *)(a4 + 40);
    }
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1C4D1AD98()
{
  sub_1C4D1AE84();
  if (v0 <= 0x3F)
  {
    type metadata accessor for TimeZone();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1C4D1AE84()
{
  if (!qword_1EA3CC1B0)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA3CC1B0);
    }
  }
}

ValueMetadata *type metadata accessor for CKLogSet()
{
  return &type metadata for CKLogSet;
}

uint64_t sub_1C4D1AEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CKLogEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C4D1AF50(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CKLogEvent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C4D1AFAC@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

uint64_t sub_1C4D1AFC4(uint64_t a1)
{
  return _s14CloudKitDaemon17PartialTrafficLogOwet_0(a1, 1, v1);
}

uint64_t sub_1C4D1AFE4()
{
  return type metadata accessor for CKLogEvent();
}

uint64_t sub_1C4D1B014()
{
  return v0;
}

uint64_t sub_1C4D1B020()
{
  return type metadata accessor for CKLogEvent();
}

uint64_t sub_1C4D1B03C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C4D1B058()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C4D1B084()
{
  return 0;
}

uint64_t sub_1C4D1B090()
{
  return String.hash(into:)();
}

uint64_t sub_1C4D1B0AC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C4D1B0C4()
{
  return String.hash(into:)();
}

uint64_t sub_1C4D1B0F4()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_1C4D1B120(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = sub_1C4D15964(a1);
    if (result < 0 || (unint64_t v5 = result, result >= 1 << *(unsigned char *)(a1 + 32)))
    {
LABEL_13:
      __break(1u);
      return v13;
    }
    else
    {
      int v6 = v4;
      uint64_t v7 = a1 + 64;
      while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_17;
        }
        uint64_t v12 = v2;
        uint64_t v8 = v7;
        uint64_t v9 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v5);
        uint64_t v11 = *v9;
        unint64_t v10 = v9[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1C4D1D62C(v11, v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized ContiguousArray._endMutation()();
        if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
          goto LABEL_18;
        }
        if ((*(void *)(v8 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
          goto LABEL_19;
        }
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_20;
        }
        uint64_t v7 = v8;
        uint64_t result = _HashTable.occupiedBucket(after:)();
        uint64_t v2 = v12 - 1;
        if (v12 == 1) {
          return v13;
        }
        unint64_t v5 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          int v6 = *(_DWORD *)(a1 + 36);
          if (result < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1C4D1B2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = a2;
  uint64_t v6 = type metadata accessor for CKLogEvent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v18 = v3;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    sub_1C4D1803C(0, v10, 0);
    uint64_t v11 = v20;
    unint64_t v12 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v13 = a1 + v12;
    uint64_t v14 = *(void *)(v7 + 72);
    do
    {
      sub_1C4D1AEEC(v13, (uint64_t)v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v9 + 2) = v19;
      *((void *)v9 + 3) = a3;
      uint64_t v20 = v11;
      unint64_t v16 = *(void *)(v11 + 16);
      unint64_t v15 = *(void *)(v11 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1C4D1803C(v15 > 1, v16 + 1, 1);
        uint64_t v11 = v20;
      }
      *(void *)(v11 + 16) = v16 + 1;
      sub_1C4D24FD4((uint64_t)v9, v11 + v12 + v16 * v14);
      v13 += v14;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return v11;
}

uint64_t sub_1C4D1B49C()
{
  type metadata accessor for CKLogParser();
  uint64_t v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  qword_1EA3CBAE0 = v0;
  return result;
}

uint64_t static CKLogParser.shared.getter()
{
  if (qword_1EA3CB6E8 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t sub_1C4D1B534()
{
  sub_1C4D16B80();
  v1[21] = v2;
  v1[22] = v0;
  v1[20] = v3;
  uint64_t v4 = sub_1C4D10728(&qword_1EA3CBD40);
  v1[23] = v4;
  sub_1C4D16BF4(v4);
  v1[24] = v5;
  v1[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v1[26] = v6;
  sub_1C4D16BF4(v6);
  v1[27] = v7;
  v1[28] = sub_1C4D25E30();
  v1[29] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v1[30] = v8;
  sub_1C4D16BF4(v8);
  v1[31] = v9;
  v1[32] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1C4D1B648, v0, 0);
}

uint64_t sub_1C4D1B648()
{
  uint64_t v32 = v0;
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[27];
  CKLog.getter();
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v30(v2, v1, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v27 = v0[31];
    uint64_t v28 = v0[30];
    uint64_t v29 = v0[32];
    uint64_t v26 = v0[29];
    uint64_t v7 = v0[26];
    uint64_t v8 = v0[27];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    sub_1C4D24C60(&qword_1EA3CBD60, 255, MEMORY[0x1E4F276F0]);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[19] = sub_1C4D14B9C(v10, v11, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v26, v7);
    _os_log_impl(&dword_1C4CFF000, v5, v6, "About to parse logs from URL: %s", v9, 0xCu);
    swift_arrayDestroy();
    sub_1C4D16C3C();
    sub_1C4D16C3C();

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
  }
  else
  {
    uint64_t v13 = v0[31];
    uint64_t v12 = v0[32];
    uint64_t v14 = v0[30];
    (*(void (**)(void, void))(v0[27] + 8))(v0[29], v0[26]);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  uint64_t v15 = v0[28];
  uint64_t v16 = v0[25];
  uint64_t v17 = v0[26];
  uint64_t v18 = v0[23];
  uint64_t v19 = v0[24];
  uint64_t v20 = v0[20];
  sub_1C4D24BD0(0, &qword_1EA3CBD48);
  v30(v15, v20, v17);
  id v22 = sub_1C4D1BF10(v15, v21);
  v0[33] = v22;
  v0[2] = v0;
  v0[7] = v0 + 18;
  v0[3] = sub_1C4D1BA20;
  swift_continuation_init();
  v0[17] = v18;
  uint64_t v23 = sub_1C4D1BFA8(v0 + 14);
  sub_1C4D24BD0(0, &qword_1EA3CBD50);
  sub_1C4D10728(&qword_1EBBCD850);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v19 + 32))(v23, v16, v18);
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 1107296256;
  v0[12] = sub_1C4D1C00C;
  v0[13] = &unk_1F20415B8;
  objc_msgSend(v22, sel_prepareWithCompletionHandler_);
  sub_1C4D16D3C();
  return MEMORY[0x1F41881E8]();
}

uint64_t sub_1C4D1BA20()
{
  sub_1C4D16B80();
  sub_1C4D16B40();
  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v2 + 272) = v1;
  uint64_t v3 = *(void *)(v0 + 176);
  if (v1) {
    uint64_t v4 = sub_1C4D1BDC8;
  }
  else {
    uint64_t v4 = sub_1C4D1BB18;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

uint64_t sub_1C4D1BB18()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[18];
  v0[35] = v2;
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F730C8]), sel_initWithSource_, v2);
  v0[36] = v3;
  uint64_t v4 = swift_task_alloc();
  v0[37] = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[38] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1C4D1BC0C;
  sub_1C4D25E4C();
  return sub_1C4D1C1A0();
}

uint64_t sub_1C4D1BC0C(uint64_t a1)
{
  sub_1C4D16B40();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_1C4D16B58();
  *uint64_t v7 = v6;
  v5[39] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v8 = v5[22];
    uint64_t v9 = sub_1C4D1BE64;
  }
  else
  {
    uint64_t v10 = v5[22];
    v5[40] = a1;
    swift_task_dealloc();
    uint64_t v9 = sub_1C4D1BD20;
    uint64_t v8 = v10;
  }
  return MEMORY[0x1F4188298](v9, v8, 0);
}

uint64_t sub_1C4D1BD20()
{
  sub_1C4D16C30();
  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v2 = *(void **)(v0 + 264);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 320);
  return v3(v4);
}

uint64_t sub_1C4D1BDC8()
{
  sub_1C4D16C30();
  uint64_t v1 = *(void **)(v0 + 264);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1C4D1BE64()
{
  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v2 = *(void **)(v0 + 264);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

id sub_1C4D1BF10@<X0>(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  URL._bridgeToObjectiveC()(a2);
  uint64_t v4 = v3;
  id v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_storeWithArchiveURL_, v3);

  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return v5;
}

uint64_t *sub_1C4D1BFA8(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void sub_1C4D1C00C(uint64_t a1, void *a2, void *a3)
{
  id v5 = sub_1C4D25A9C((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v7 = a3;
    sub_1C4D1C0F0((uint64_t)v5, (uint64_t)v7, MEMORY[0x1E4FBCF38]);
  }
  else if (a2)
  {
    id v6 = a2;
    sub_1C4D1C0F0((uint64_t)v5, (uint64_t)v6, MEMORY[0x1E4FBCF40]);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1C4D1C0D8(uint64_t a1, uint64_t a2)
{
  return sub_1C4D167F0(a2 + 32, a1 + 32);
}

uint64_t sub_1C4D1C0E8(uint64_t a1)
{
  return sub_1C4D1691C(a1 + 32);
}

uint64_t sub_1C4D1C0F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t))
{
  uint64_t v6 = a2;
  uint64_t v4 = sub_1C4D10728(&qword_1EA3CBD40);
  return a3(&v6, v4);
}

void sub_1C4D1C13C(void *a1)
{
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_activateStreamFromDate_, isa);
}

void sub_1C4D1C198()
{
  sub_1C4D1C13C(*(void **)(v0 + 16));
}

uint64_t sub_1C4D1C1A0()
{
  sub_1C4D16B80();
  v1[25] = v2;
  v1[26] = v0;
  v1[23] = v3;
  v1[24] = v4;
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass();
  v1[27] = v5;
  sub_1C4D16BF4(v5);
  v1[28] = v6;
  v1[29] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v1[30] = v7;
  sub_1C4D16BF4(v7);
  v1[31] = v8;
  v1[32] = sub_1C4D25E30();
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v1[36] = v9;
  sub_1C4D16BF4(v9);
  v1[37] = v10;
  v1[38] = sub_1C4D25E30();
  v1[39] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1C4D1C2CC, v0, 0);
}

uint64_t sub_1C4D1C2CC()
{
  Swift::Int v1 = v0;
  uint64_t v3 = (uint64_t *)(v0 + 184);
  uint64_t v2 = *(void **)(v0 + 184);
  CKLog.getter();
  id v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  uint64_t v110 = (void *)v1;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void **)(v1 + 184);
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v1 + 176) = v7;
    id v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v7;

    _os_log_impl(&dword_1C4CFF000, v5, v6, "About to parse logs from stream: %@", v8, 0xCu);
    sub_1C4D10728(&qword_1EA3CBEA0);
    swift_arrayDestroy();
    sub_1C4D16C3C();
    sub_1C4D16C3C();
  }
  else
  {
    id v11 = (id)*v3;
  }
  uint64_t v12 = *(void *)(v1 + 312);
  uint64_t v13 = *(void *)(v1 + 288);
  uint64_t v14 = *(void *)(v1 + 296);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  *(void *)(v1 + 320) = v15;
  *(void *)(v1 + 328) = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v15(v12, v13);
  Date.init()();
  if (qword_1EA3CB6F0 != -1) {
    goto LABEL_69;
  }
LABEL_5:
  uint64_t v16 = *((void *)off_1EA3CBAE8 + 2);
  uint64_t v17 = (void *)MEMORY[0x1E4FBC868];
  if (!v16) {
    goto LABEL_38;
  }
  v112 = v3;
  uint64_t v3 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
  while (1)
  {
    uint64_t v116 = v16;
    uint64_t v18 = *(v3 - 1);
    uint64_t v19 = *v3;
    uint64_t v20 = v3[1];
    uint64_t v22 = v3[2];
    int v21 = (void *)v3[3];
    uint64_t v23 = v17[2];
    id v114 = (id)*(v3 - 2);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v24 = v21;
    swift_retain();
    uint64_t v119 = v18;
    if (v23 && (unint64_t v25 = sub_1C4D21F44(v18, v19), (v26 & 1) != 0))
    {
      uint64_t v27 = *(void *)(v17[7] + 8 * v25);
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_1C4D10728(&qword_1EA3CBD68);
      uint64_t v27 = Dictionary.init(dictionaryLiteral:)();
    }
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void *)(v27 + 16);
    swift_bridgeObjectRetain();
    if (v28)
    {
      sub_1C4D21F44(v20, v22);
      uint64_t v29 = MEMORY[0x1E4FBC860];
      if (v30) {
        uint64_t v29 = swift_bridgeObjectRetain();
      }
    }
    else
    {
      uint64_t v29 = MEMORY[0x1E4FBC860];
    }
    v117 = v17;
    uint64_t v121 = v29;
    swift_bridgeObjectRelease();
    id v31 = v24;
    MEMORY[0x1C8787B30]();
    if (*(void *)((v121 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v121 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v122 = (void *)v27;
    uint64_t v33 = v20;
    unint64_t v34 = sub_1C4D21F44(v20, v22);
    uint64_t v36 = *(void *)(v27 + 16);
    BOOL v37 = (v35 & 1) == 0;
    Swift::Int v1 = v36 + v37;
    if (__OFADD__(v36, v37))
    {
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      swift_once();
      goto LABEL_5;
    }
    unint64_t v38 = v34;
    char v39 = v35;
    sub_1C4D10728(&qword_1EA3CBD70);
    Swift::Bool v40 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v1);
    Swift::Int v1 = (Swift::Int)v122;
    if (v40)
    {
      unint64_t v41 = sub_1C4D21F44(v33, v22);
      if ((v39 & 1) != (v42 & 1)) {
        goto LABEL_35;
      }
      unint64_t v38 = v41;
    }
    if (v39)
    {
      uint64_t v43 = v122[7];
      swift_bridgeObjectRelease();
      *(void *)(v43 + 8 * v38) = v121;
    }
    else
    {
      sub_1C4D25E18((uint64_t)&v122[v38 >> 6]);
      uint64_t v44 = (uint64_t *)(v122[6] + 16 * v38);
      *uint64_t v44 = v33;
      v44[1] = v22;
      *(void *)(v122[7] + 8 * v38) = v121;
      uint64_t v45 = v122[2];
      BOOL v46 = __OFADD__(v45, 1);
      uint64_t v47 = v45 + 1;
      if (v46) {
        goto LABEL_66;
      }
      v122[2] = v47;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v48 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v49 = sub_1C4D25E70();
    unint64_t v51 = sub_1C4D21F44(v49, v50);
    uint64_t v53 = v117[2];
    BOOL v54 = (v52 & 1) == 0;
    Swift::Int v55 = v53 + v54;
    if (__OFADD__(v53, v54)) {
      goto LABEL_65;
    }
    unint64_t v56 = v51;
    char v57 = v52;
    sub_1C4D10728(&qword_1EA3CBD78);
    Swift::Bool v58 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v48, v55);
    uint64_t v17 = v117;
    if (v58) {
      break;
    }
LABEL_29:
    if (v57)
    {
      uint64_t v63 = v117[7];
      swift_bridgeObjectRelease();
      *(void *)(v63 + 8 * v56) = v122;
    }
    else
    {
      sub_1C4D25E18((uint64_t)&v117[v56 >> 6]);
      uint64_t v64 = (uint64_t *)(v117[6] + 16 * v56);
      uint64_t *v64 = v119;
      v64[1] = v19;
      *(void *)(v117[7] + 8 * v56) = v122;
      uint64_t v65 = v117[2];
      BOOL v46 = __OFADD__(v65, 1);
      uint64_t v66 = v65 + 1;
      if (v46) {
        goto LABEL_67;
      }
      v117[2] = v66;
      swift_bridgeObjectRetain();
    }
    v3 += 8;
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = v116 - 1;
    if (v116 == 1)
    {
      swift_bridgeObjectRelease();
      Swift::Int v1 = (Swift::Int)v110;
      uint64_t v3 = v112;
LABEL_38:
      BOOL v69 = (char *)(v3 - 5);
      uint64_t v70 = MEMORY[0x1E4FBC860];
      sub_1C4D10728(&qword_1EA3CBD80);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C507EA40;
      *(void *)(inited + 32) = 0x74694B64756F6C43;
      *(void *)(inited + 40) = 0xE800000000000000;
      sub_1C4D10728(&qword_1EA3CBD88);
      uint64_t v72 = swift_allocObject();
      *(_OWORD *)(v72 + 16) = xmmword_1C507EA50;
      sub_1C4D24BD0(0, &qword_1EA3CBD90);
      *(void *)(v72 + 32) = NSPredicate.init(format:_:)();
      specialized Array._endMutation()();
      *(void *)(inited + 48) = v72;
      sub_1C4D10728(&qword_1EA3CBD68);
      Dictionary.init(dictionaryLiteral:)();
      sub_1C4D25E4C();
      char v73 = swift_isUniquelyReferenced_nonNull_native();
      sub_1C4D24650(inited, 0x6C7070612E6D6F63, 0xED000073766B2E65, v73);
      *(void *)(v1 + 336) = v17;
      swift_bridgeObjectRelease();
      *(void *)(v1 + 144) = v70;
      v111 = v17 + 8;
      uint64_t v74 = -1;
      uint64_t v75 = -1 << *((unsigned char *)v17 + 32);
      if (-v75 < 64) {
        uint64_t v74 = ~(-1 << -(char)v75);
      }
      unint64_t v76 = v74 & v17[8];
      int64_t v113 = (unint64_t)(63 - v75) >> 6;
      swift_bridgeObjectRetain();
      int64_t v77 = 0;
      if (v76)
      {
LABEL_41:
        unint64_t v78 = __clz(__rbit64(v76));
        v76 &= v76 - 1;
        unint64_t v79 = v78 | (v77 << 6);
        goto LABEL_56;
      }
      while (1)
      {
        int64_t v80 = v77 + 1;
        if (__OFADD__(v77, 1))
        {
          __break(1u);
          goto LABEL_64;
        }
        if (v80 >= v113) {
          goto LABEL_60;
        }
        unint64_t v81 = v111[v80];
        ++v77;
        if (!v81)
        {
          int64_t v77 = v80 + 1;
          if (v80 + 1 >= v113) {
            goto LABEL_60;
          }
          unint64_t v81 = v111[v77];
          if (!v81)
          {
            int64_t v77 = v80 + 2;
            if (v80 + 2 >= v113) {
              goto LABEL_60;
            }
            unint64_t v81 = v111[v77];
            if (!v81)
            {
              int64_t v82 = v80 + 3;
              if (v82 >= v113)
              {
LABEL_60:
                swift_release();
                sub_1C4D24BD0(0, &qword_1EA3CBD98);
                swift_bridgeObjectRetain();
                id v92 = sub_1C4D1D7AC();
                v110[43] = v92;
                type metadata accessor for CKLogParser.StreamState();
                uint64_t v93 = (void *)swift_allocObject();
                v110[44] = v93;
                uint64_t v94 = MEMORY[0x1E4FBC868];
                v93[2] = MEMORY[0x1E4FBC868];
                v93[3] = v94;
                v93[4] = 0;
                v93[5] = 0;
                id v95 = objc_allocWithZone(MEMORY[0x1E4F28FD8]);
                id v96 = sub_1C4D21A24(0xD000000000000017, 0x80000001C5081C40, 0);
                v110[45] = v96;
                v110[46] = 0;
                uint64_t v97 = v96;
                uint64_t v99 = v110[28];
                uint64_t v98 = v110[29];
                uint64_t v100 = v110[27];
                uint64_t v120 = v110[25];
                uint64_t v115 = v110[26];
                long long v118 = *(_OWORD *)(v110 + 23);
                uint64_t v101 = (void *)v110[23];
                objc_msgSend(v101, sel_setFlags_, 391);
                objc_msgSend(v101, sel_setFilterPredicate_, v92);
                sub_1C4D24BD0(0, &qword_1EA3CBDA0);
                (*(void (**)(uint64_t, void, uint64_t))(v99 + 104))(v98, *MEMORY[0x1E4FBCB28], v100);
                int v102 = (void *)static OS_dispatch_queue.global(qos:)();
                (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v98, v100);
                objc_msgSend(v101, sel_setQueue_, v102);

                v103 = (void *)swift_allocObject();
                v103[2] = v93;
                v103[3] = v115;
                v103[4] = v97;
                v110[13] = sub_1C4D24C54;
                v110[14] = v103;
                v110[9] = MEMORY[0x1E4F143A8];
                v110[10] = 1107296256;
                v110[11] = sub_1C4D1E034;
                v110[12] = &unk_1F2041608;
                uint64_t v104 = _Block_copy(v110 + 9);
                swift_retain();
                swift_retain();
                id v105 = v97;
                swift_release();
                objc_msgSend(v101, sel_setEventHandler_, v104);
                _Block_release(v104);
                sub_1C4D24C60(&qword_1EA3CBDA8, v106, (void (*)(uint64_t))type metadata accessor for CKLogParser);
                uint64_t v107 = swift_task_alloc();
                v110[47] = v107;
                *(_OWORD *)(v107 + 16) = v118;
                *(void *)(v107 + 32) = v120;
                v108 = (void *)swift_task_alloc();
                v110[48] = v108;
                void *v108 = v110;
                v108[1] = sub_1C4D1D034;
                sub_1C4D25DFC();
                return MEMORY[0x1F41880D8]();
              }
              unint64_t v81 = v111[v82];
              if (!v81)
              {
                while (1)
                {
                  int64_t v77 = v82 + 1;
                  if (__OFADD__(v82, 1)) {
                    goto LABEL_68;
                  }
                  if (v77 >= v113) {
                    goto LABEL_60;
                  }
                  unint64_t v81 = v111[v77];
                  ++v82;
                  if (v81) {
                    goto LABEL_55;
                  }
                }
              }
              int64_t v77 = v82;
            }
          }
        }
LABEL_55:
        unint64_t v76 = (v81 - 1) & v81;
        unint64_t v79 = __clz(__rbit64(v81)) + (v77 << 6);
LABEL_56:
        id v83 = (uint64_t *)(v17[6] + 16 * v79);
        uint64_t v84 = *v83;
        unint64_t v85 = (void *)v83[1];
        swift_bridgeObjectRetain();
        uint64_t v86 = swift_bridgeObjectRetain();
        sub_1C4D1B120(v86);
        swift_bridgeObjectRelease();
        sub_1C4D24BD0(0, &qword_1EA3CBD98);
        uint64_t v3 = (uint64_t *)sub_1C4D1D7AC();
        Swift::Int v1 = swift_allocObject();
        *(_OWORD *)(v1 + 16) = xmmword_1C507EA60;
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        v87._countAndFlagsBits = v84;
        v87._object = v85;
        String.append(_:)(v87);
        swift_bridgeObjectRelease();
        v88._countAndFlagsBits = 39;
        v88._object = (void *)0xE100000000000000;
        String.append(_:)(v88);
        uint64_t v89 = NSPredicate.init(format:_:)();
        swift_bridgeObjectRelease();
        *(void *)(v1 + 32) = v89;
        *(void *)(v1 + 40) = v3;
        specialized Array._endMutation()();
        uint64_t v90 = v3;
        id v91 = sub_1C4D1D7AC();
        MEMORY[0x1C8787B30]();
        if (*(void *)((*(void *)v69 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v69 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        if (v76) {
          goto LABEL_41;
        }
      }
    }
  }
  uint64_t v59 = sub_1C4D25E70();
  unint64_t v61 = sub_1C4D21F44(v59, v60);
  if ((v57 & 1) == (v62 & 1))
  {
    unint64_t v56 = v61;
    goto LABEL_29;
  }
LABEL_35:
  sub_1C4D25DFC();
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_1C4D1D034()
{
  sub_1C4D16B80();
  sub_1C4D16B40();
  uint64_t v2 = *(void *)(v1 + 208);
  uint64_t v3 = *v0;
  sub_1C4D16B58();
  *id v4 = v3;
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1C4D1D130, v2, 0);
}

uint64_t sub_1C4D1D130()
{
  uint64_t v45 = v0;
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[44];
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain_n();
  size_t v4 = sub_1C4D2264C(v3);
  swift_bridgeObjectRelease();
  v44[0] = v4;
  sub_1C4D225A4((uint64_t *)v44);
  if (!v1)
  {
    uint64_t v7 = v0[44];
    swift_bridgeObjectRelease();
    uint64_t v8 = v44[0];
    uint64_t v9 = *(void *)(v7 + 40);
    if (v9)
    {
      uint64_t v10 = *(void *)(v0[44] + 32);
      swift_bridgeObjectRetain_n();
      sub_1C4D1B2EC(v8, v10, v9);
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = v0[34];
    uint64_t v11 = v0[35];
    uint64_t v14 = v0[32];
    uint64_t v13 = v0[33];
    uint64_t v16 = v0[30];
    uint64_t v15 = v0[31];
    swift_bridgeObjectRelease();
    Date.init()();
    CKLog.getter();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    v17(v13, v12, v16);
    v17(v14, v11, v16);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    log = v18;
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v41 = (void *)v0[45];
      char v42 = (void *)v0[43];
      uint64_t v20 = v0[33];
      uint64_t v40 = v0[32];
      uint64_t v21 = v0[30];
      uint64_t v22 = v0[31];
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 134217984;
      Date.timeIntervalSince(_:)();
      v0[20] = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v25 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v25(v20, v21);
      v25(v40, v21);
      _os_log_impl(&dword_1C4CFF000, log, v19, "Parsing logs took %f seconds", v23, 0xCu);
      sub_1C4D16C3C();

      swift_release();
      char v26 = log;
    }
    else
    {
      uint64_t v27 = (void *)v0[43];
      uint64_t v29 = v0[32];
      uint64_t v28 = v0[33];
      uint64_t v30 = v0[30];
      uint64_t v31 = v0[31];

      unint64_t v25 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v25(v28, v30);
      v25(v29, v30);
      swift_release();

      char v26 = v0[45];
    }
    uint64_t v32 = (void (*)(uint64_t, uint64_t))v0[40];
    uint64_t v33 = v0[38];
    uint64_t v35 = v0[35];
    uint64_t v34 = v0[36];
    uint64_t v36 = v0[34];
    uint64_t v37 = v0[30];

    v32(v33, v34);
    v25(v36, v37);
    v25(v35, v37);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1C4D16D3C();
    __asm { BRAA            X2, X16 }
  }
  sub_1C4D16D3C();
  return swift_release();
}

uint64_t sub_1C4D1D4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4D10728(&qword_1EA3CBDC0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CKLogEvent();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(a1, 1, v12) == 1)
  {
    sub_1C4D19490(a1, &qword_1EA3CBDC0);
    sub_1C4D22440(a2, a3, (uint64_t)v8);
    swift_bridgeObjectRelease();
    return sub_1C4D19490((uint64_t)v8, &qword_1EA3CBDC0);
  }
  else
  {
    sub_1C4D24FD4(a1, (uint64_t)v11);
    sub_1C4D3518C((uint64_t)v11, a2, a3);
    return swift_bridgeObjectRelease();
  }
}

id sub_1C4D1D62C(uint64_t a1, unint64_t a2)
{
  sub_1C4D24BD0(0, &qword_1EA3CBD98);
  swift_bridgeObjectRetain();
  id v4 = sub_1C4D1D7AC();
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    sub_1C4D10728(&qword_1EA3CBD88);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1C507EA60;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = a1;
    v7._object = (void *)a2;
    String.append(_:)(v7);
    sub_1C4D24BD0(0, &qword_1EA3CBD90);
    v8._countAndFlagsBits = 39;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    uint64_t v9 = NSPredicate.init(format:_:)();
    swift_bridgeObjectRelease();
    *(void *)(v6 + 32) = v9;
    *(void *)(v6 + 40) = v4;
    specialized Array._endMutation()();
    return sub_1C4D1D7AC();
  }
  return v4;
}

id sub_1C4D1D7AC()
{
  sub_1C4D25DF0();
  sub_1C4D24BD0(0, &qword_1EA3CBD90);
  Array._bridgeToObjectiveC()();
  sub_1C4D25E4C();
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), *v0, v1);

  return v2;
}

uint64_t sub_1C4D1D828(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for TimeZone();
  uint64_t v86 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v85 = (char *)v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for CKLogEvent();
  MEMORY[0x1F4188790](v89);
  Swift::String v87 = (uint64_t *)((char *)v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_1C4D10728(&qword_1EA3CBDC0);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v84 = (uint64_t)v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v72 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v90 = (uint64_t)v72 - v16;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    swift_task_reportUnexpectedExecutor();
  }
  uint64_t result = sub_1C4D25208(a1, (SEL *)&selRef_composedMessage);
  if (v22)
  {
    uint64_t v23 = result;
    uint64_t v24 = v22;
    uint64_t v74 = v7;
    v72[0] = a4;
    uint64_t v75 = v17;
    uint64_t v78 = v18;
    id v88 = (id)sub_1C4D25208(a1, (SEL *)&selRef_subsystem);
    unint64_t v83 = v25;
    uint64_t v26 = sub_1C4D25208(a1, (SEL *)&selRef_category);
    id v81 = v27;
    uint64_t v82 = v26;
    uint64_t v28 = v23;
    uint64_t v80 = sub_1C4D25208(a1, (SEL *)&selRef_process);
    uint64_t v30 = v29;
    unsigned int v79 = objc_msgSend(a1, sel_processIdentifier);
    id v31 = objc_msgSend(a1, sel_activityIdentifier);
    id v32 = objc_msgSend(a1, sel_date);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v72[1] = (id)(a2 + 24);
    swift_beginAccess();
    uint64_t v33 = sub_1C4D2EC20((uint64_t)v31, *(void *)(a2 + 24));
    uint64_t v34 = a2;
    uint64_t v91 = v24;
    uint64_t v35 = v33;
    uint64_t v36 = v20;
    uint64_t v38 = v37;
    swift_endAccess();
    swift_beginAccess();
    uint64_t v77 = v34;
    uint64_t v39 = *(void *)(v34 + 16);
    swift_bridgeObjectRetain();
    uint64_t v71 = v35;
    uint64_t v73 = v28;
    unint64_t v76 = v36;
    uint64_t v70 = (uint64_t)v36;
    uint64_t v40 = v90;
    unint64_t v41 = v83;
    sub_1C4D1E308(v88, v83, v82, v81, v80, v30, v79, (uint64_t)v31, v90, v70, v28, v91, v39, v71, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C4D259D8(v40, (uint64_t)v15, &qword_1EA3CBDC0);
    uint64_t v42 = v89;
    if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v15, 1, v89) == 1)
    {
      swift_bridgeObjectRelease();
      sub_1C4D19490((uint64_t)v15, &qword_1EA3CBDC0);
      uint64_t v43 = v78;
      uint64_t v44 = v77;
      uint64_t v45 = v76;
    }
    else
    {
      uint64_t v46 = (uint64_t)v15;
      uint64_t v47 = v87;
      sub_1C4D24FD4(v46, (uint64_t)v87);
      id v48 = objc_msgSend(a1, sel_timeZone);
      uint64_t v49 = v85;
      static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v86 + 40))((char *)v47 + *(int *)(v42 + 40), v49, v74);
      uint64_t v50 = *v47;
      uint64_t v51 = v47[1];
      uint64_t v52 = v84;
      sub_1C4D1AEEC((uint64_t)v47, v84);
      _s14CloudKitDaemon17PartialTrafficLogOwst_0(v52, 0, 1, v42);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_1C4D1D4E8(v52, v50, v51);
      swift_endAccess();
      if (v38)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_beginAccess();
        swift_bridgeObjectRetain();
        sub_1C4D35174(v50, v51, (uint64_t)v31);
        swift_endAccess();
      }
      uint64_t v43 = v78;
      uint64_t v44 = v77;
      uint64_t v45 = v76;
      sub_1C4D1AF50((uint64_t)v47);
    }
    if (*(void *)(v44 + 40))
    {
      swift_bridgeObjectRelease();
    }
    else if (v41)
    {
      if (v88 == (id)0x6C7070612E6D6F63 && v41 == 0xED000073766B2E65)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v54 & 1) == 0) {
          goto LABEL_25;
        }
      }
      uint64_t v55 = v73;
      uint64_t v56 = v91;
      uint64_t v92 = v73;
      uint64_t v93 = v91;
      strcpy((char *)v94, "modifiedBy='");
      HIBYTE(v94[6]) = 0;
      v94[7] = -5120;
      sub_1C4D15918();
      if (StringProtocol.contains<A>(_:)())
      {
        char v57 = (void *)MEMORY[0x1C87879B0](v55, v56);
        uint64_t result = String.count.getter();
        if (result < 0)
        {
          __break(1u);
          return result;
        }
        id v58 = objc_msgSend(v72[0], sel_firstMatchInString_options_range_, v57, 0, 0, result);

        if (v58)
        {
          if ((uint64_t)objc_msgSend(v58, sel_numberOfRanges) >= 2)
          {
            objc_msgSend(v58, sel_rangeAtIndex_, 1);
            Range<>.init(_:in:)();
            if ((v59 & 1) == 0)
            {
              uint64_t v60 = String.subscript.getter();
              uint64_t v62 = v61;
              uint64_t v64 = v63;
              uint64_t v66 = v65;
              swift_bridgeObjectRelease();
              uint64_t v67 = MEMORY[0x1C8787A30](v60, v62, v64, v66);
              uint64_t v69 = v68;

              swift_bridgeObjectRelease();
              sub_1C4D19490(v40, &qword_1EA3CBDC0);
              (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v75);
              *(void *)(v44 + 32) = v67;
              *(void *)(v44 + 40) = v69;
              return swift_bridgeObjectRelease();
            }
          }
          swift_bridgeObjectRelease();

          goto LABEL_26;
        }
      }
    }
LABEL_25:
    swift_bridgeObjectRelease();
LABEL_26:
    sub_1C4D19490(v40, &qword_1EA3CBDC0);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v45, v75);
  }
  return result;
}

void sub_1C4D1E034(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_1C4D1E09C(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = sub_1C4D10728(&qword_1EA3CBDF0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v10 + v9, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1C4D25940;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C4D1E290;
  aBlock[3] = &unk_1F2041658;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_setInvalidationHandler_, v11);
  _Block_release(v11);
  return a3();
}

uint64_t sub_1C4D1E25C()
{
  return CheckedContinuation.resume(returning:)();
}

void sub_1C4D1E290(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, id))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, v6);
  swift_release();
}

uint64_t sub_1C4D1E308@<X0>(id a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, id a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v50 = a8;
  unsigned int v49 = a7;
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  uint64_t v53 = a3;
  unint64_t v57 = a2;
  uint64_t v18 = sub_1C4D10728(&qword_1EA3CBDC0);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v46 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EA3CB6F0 != -1) {
LABEL_27:
  }
    swift_once();
  uint64_t v20 = *((void *)off_1EA3CBAE8 + 2);
  if (v20)
  {
    uint64_t v44 = a15;
    uint64_t v45 = a10;
    uint64_t v43 = a14;
    if (v57) {
      uint64_t v21 = (uint64_t)a1;
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v56 = v21;
    unint64_t v22 = 0xE000000000000000;
    if (v57) {
      unint64_t v22 = v57;
    }
    id v54 = a4;
    unint64_t v55 = v22;
    uint64_t v51 = a12;
    uint64_t v52 = a11;
    uint64_t v41 = a9;
    uint64_t v42 = a13;
    uint64_t v40 = swift_bridgeObjectRetain();
    uint64_t v23 = (void *)(v40 + 48);
    while (1)
    {
      uint64_t v24 = v23[1];
      a1 = (id)v23[2];
      unint64_t v25 = (void *)v23[3];
      a9 = v23[5];
      id v58 = (void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, uint64_t))v23[4];
      a4 = (id)*(v23 - 2);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      id v26 = v25;
      swift_retain();
      swift_bridgeObjectRetain();
      char v27 = sub_1C4D1E668();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0 || !v54) {
        goto LABEL_20;
      }
      BOOL v28 = v24 == v53 && a1 == v54;
      if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_20;
      }
      uint64_t v29 = sub_1C4D25E70();
      uint64_t v30 = (void *)MEMORY[0x1C87879B0](v29);
      sub_1C4D25E70();
      uint64_t v31 = String.count.getter();
      if (v31 < 0)
      {
        __break(1u);
        goto LABEL_27;
      }
      id v32 = objc_msgSend(a4, sel_firstMatchInString_options_range_, v30, 0, 0, v31, v40);

      if (v32)
      {
        uint64_t v33 = (uint64_t)v46;
        v58(v47, v48, v49, v50, v45, v52, v51, v32, v42, v43, v44);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        uint64_t v34 = type metadata accessor for CKLogEvent();
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v33, 1, v34) != 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v39 = v41;
          sub_1C4D24FD4(v33, v41);
          uint64_t v36 = v39;
          uint64_t v37 = 0;
          uint64_t v35 = v34;
          return _s14CloudKitDaemon17PartialTrafficLogOwst_0(v36, v37, 1, v35);
        }
        sub_1C4D19490(v33, &qword_1EA3CBDC0);
      }
      else
      {
LABEL_20:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
      }
      v23 += 8;
      if (!--v20)
      {
        swift_bridgeObjectRelease();
        a9 = v41;
        break;
      }
    }
  }
  uint64_t v35 = type metadata accessor for CKLogEvent();
  uint64_t v36 = a9;
  uint64_t v37 = 1;
  return _s14CloudKitDaemon17PartialTrafficLogOwst_0(v36, v37, 1, v35);
}

uint64_t sub_1C4D1E668()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    while (1)
    {
      Swift::String_optional v3 = String.Iterator.next()();
      if (!v3.value._object) {
        break;
      }
      if (countAndFlagsBits == v3.value._countAndFlagsBits && object == v3.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v5 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      Swift::String_optional v6 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v6.value._countAndFlagsBits;
      object = v6.value._object;
      if (!v6.value._object) {
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v7 = String.Iterator.next()().value._object;
    swift_bridgeObjectRelease();
    BOOL v8 = v7 == 0;
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_1C4D1E7C8()
{
  sub_1C4D10728(&qword_1EA3CBE08);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C507EA70;
  if (qword_1EA3CB6F8 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_1EA3CBAF0;
  uint64_t v2 = *(void *)algn_1EA3CBAF8;
  uint64_t v4 = qword_1EA3CBB00;
  uint64_t v3 = unk_1EA3CBB08;
  uint64_t v5 = qword_1EA3CBB10;
  uint64_t v6 = qword_1EA3CBB28;
  *(void *)(v0 + 32) = qword_1EA3CBAF0;
  *(void *)(v0 + 40) = v2;
  *(void *)(v0 + 48) = v4;
  *(void *)(v0 + 56) = v3;
  *(void *)(v0 + 64) = v5;
  uint64_t v82 = (void *)unk_1EA3CBB18;
  *(_OWORD *)(v0 + 72) = unk_1EA3CBB18;
  *(void *)(v0 + 88) = v6;
  uint64_t v7 = qword_1EA3CB700;
  id v8 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v82;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_1EA3CBB30;
  uint64_t v11 = *(void *)algn_1EA3CBB38;
  uint64_t v13 = qword_1EA3CBB40;
  uint64_t v12 = unk_1EA3CBB48;
  uint64_t v14 = qword_1EA3CBB50;
  uint64_t v15 = qword_1EA3CBB68;
  *(void *)(v0 + 96) = qword_1EA3CBB30;
  *(void *)(v0 + 104) = v11;
  *(void *)(v0 + 112) = v13;
  *(void *)(v0 + 120) = v12;
  *(void *)(v0 + 128) = v14;
  unint64_t v83 = (void *)unk_1EA3CBB58;
  *(_OWORD *)(v0 + 136) = unk_1EA3CBB58;
  *(void *)(v0 + 152) = v15;
  uint64_t v16 = qword_1EA3CB708;
  id v17 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v18 = v83;
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v19 = (void *)qword_1EA3CBB70;
  uint64_t v20 = *(void *)algn_1EA3CBB78;
  uint64_t v22 = qword_1EA3CBB80;
  uint64_t v21 = unk_1EA3CBB88;
  uint64_t v23 = qword_1EA3CBB90;
  uint64_t v24 = qword_1EA3CBBA8;
  *(void *)(v0 + 160) = qword_1EA3CBB70;
  *(void *)(v0 + 168) = v20;
  *(void *)(v0 + 176) = v22;
  *(void *)(v0 + 184) = v21;
  *(void *)(v0 + 192) = v23;
  uint64_t v84 = (void *)unk_1EA3CBB98;
  *(_OWORD *)(v0 + 200) = unk_1EA3CBB98;
  *(void *)(v0 + 216) = v24;
  uint64_t v25 = qword_1EA3CB710;
  id v26 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v27 = v84;
  swift_retain();
  if (v25 != -1) {
    swift_once();
  }
  BOOL v28 = (void *)qword_1EA3CBBB0;
  uint64_t v29 = *(void *)algn_1EA3CBBB8;
  uint64_t v31 = qword_1EA3CBBC0;
  uint64_t v30 = unk_1EA3CBBC8;
  uint64_t v32 = qword_1EA3CBBD0;
  uint64_t v33 = qword_1EA3CBBE8;
  *(void *)(v0 + 224) = qword_1EA3CBBB0;
  *(void *)(v0 + 232) = v29;
  *(void *)(v0 + 240) = v31;
  *(void *)(v0 + 248) = v30;
  *(void *)(v0 + 256) = v32;
  unint64_t v85 = (void *)unk_1EA3CBBD8;
  *(_OWORD *)(v0 + 264) = unk_1EA3CBBD8;
  *(void *)(v0 + 280) = v33;
  uint64_t v34 = qword_1EA3CB718;
  id v35 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v36 = v85;
  swift_retain();
  if (v34 != -1) {
    swift_once();
  }
  uint64_t v37 = (void *)qword_1EA3CBBF0;
  uint64_t v38 = *(void *)algn_1EA3CBBF8;
  uint64_t v40 = qword_1EA3CBC00;
  uint64_t v39 = unk_1EA3CBC08;
  uint64_t v41 = qword_1EA3CBC10;
  uint64_t v42 = qword_1EA3CBC28;
  *(void *)(v0 + 288) = qword_1EA3CBBF0;
  *(void *)(v0 + 296) = v38;
  *(void *)(v0 + 304) = v40;
  *(void *)(v0 + 312) = v39;
  *(void *)(v0 + 320) = v41;
  uint64_t v86 = (void *)unk_1EA3CBC18;
  *(_OWORD *)(v0 + 328) = unk_1EA3CBC18;
  *(void *)(v0 + 344) = v42;
  uint64_t v43 = qword_1EA3CB720;
  id v44 = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v45 = v86;
  swift_retain();
  if (v43 != -1) {
    swift_once();
  }
  uint64_t v46 = (void *)qword_1EA3CBC30;
  uint64_t v47 = *(void *)algn_1EA3CBC38;
  uint64_t v49 = qword_1EA3CBC40;
  uint64_t v48 = unk_1EA3CBC48;
  uint64_t v50 = qword_1EA3CBC50;
  uint64_t v51 = qword_1EA3CBC68;
  *(void *)(v0 + 352) = qword_1EA3CBC30;
  *(void *)(v0 + 360) = v47;
  *(void *)(v0 + 368) = v49;
  *(void *)(v0 + 376) = v48;
  *(void *)(v0 + 384) = v50;
  Swift::String v87 = (void *)unk_1EA3CBC58;
  *(_OWORD *)(v0 + 392) = unk_1EA3CBC58;
  *(void *)(v0 + 408) = v51;
  uint64_t v52 = qword_1EA3CB728;
  id v53 = v46;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v54 = v87;
  swift_retain();
  if (v52 != -1) {
    swift_once();
  }
  unint64_t v55 = (void *)qword_1EA3CBC70;
  uint64_t v56 = *(void *)algn_1EA3CBC78;
  uint64_t v58 = qword_1EA3CBC80;
  uint64_t v57 = unk_1EA3CBC88;
  uint64_t v59 = qword_1EA3CBC90;
  uint64_t v60 = qword_1EA3CBCA8;
  *(void *)(v0 + 416) = qword_1EA3CBC70;
  *(void *)(v0 + 424) = v56;
  *(void *)(v0 + 432) = v58;
  *(void *)(v0 + 440) = v57;
  *(void *)(v0 + 448) = v59;
  id v88 = (void *)unk_1EA3CBC98;
  *(_OWORD *)(v0 + 456) = unk_1EA3CBC98;
  *(void *)(v0 + 472) = v60;
  uint64_t v61 = qword_1EA3CB740;
  id v62 = v55;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v63 = v88;
  swift_retain();
  if (v61 != -1) {
    swift_once();
  }
  uint64_t v64 = (void *)qword_1EA3CBCF8;
  uint64_t v65 = *(void *)byte_1EA3CBD00;
  uint64_t v67 = qword_1EA3CBD08;
  uint64_t v66 = unk_1EA3CBD10;
  uint64_t v68 = qword_1EA3CBD18;
  uint64_t v69 = qword_1EA3CBD30;
  *(void *)(v0 + 480) = qword_1EA3CBCF8;
  *(void *)(v0 + 488) = v65;
  *(void *)(v0 + 496) = v67;
  *(void *)(v0 + 504) = v66;
  *(void *)(v0 + 512) = v68;
  uint64_t v89 = (void *)unk_1EA3CBD20;
  *(_OWORD *)(v0 + 520) = unk_1EA3CBD20;
  *(void *)(v0 + 536) = v69;
  uint64_t v70 = qword_1EA3CB730;
  id v71 = v64;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v72 = v89;
  swift_retain();
  if (v70 != -1) {
    swift_once();
  }
  uint64_t v73 = (void *)qword_1EA3CBCB0;
  uint64_t v74 = *(void *)algn_1EA3CBCB8;
  uint64_t v76 = qword_1EA3CBCC0;
  uint64_t v75 = unk_1EA3CBCC8;
  uint64_t v77 = qword_1EA3CBCD0;
  uint64_t v78 = qword_1EA3CBCE8;
  *(void *)(v0 + 544) = qword_1EA3CBCB0;
  *(void *)(v0 + 552) = v74;
  *(void *)(v0 + 560) = v76;
  *(void *)(v0 + 568) = v75;
  *(void *)(v0 + 576) = v77;
  uint64_t v90 = (void *)unk_1EA3CBCD8;
  *(_OWORD *)(v0 + 584) = unk_1EA3CBCD8;
  *(void *)(v0 + 600) = v78;
  off_1EA3CBAE8 = (_UNKNOWN *)v0;
  id v79 = v73;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v80 = v90;
  return swift_retain();
}

uint64_t sub_1C4D1ED30()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F28FD8]);
  id v1 = sub_1C4D21A24(0xD000000000000056, 0x80000001C50822D0, 0);
  sub_1C4D24BD0(0, &qword_1EA3CBD90);
  uint64_t result = NSPredicate.init(format:_:)();
  qword_1EA3CBAF0 = (uint64_t)v1;
  *(void *)algn_1EA3CBAF8 = 0xD000000000000012;
  qword_1EA3CBB00 = 0x80000001C5081E40;
  unk_1EA3CBB08 = 20559;
  qword_1EA3CBB10 = 0xE200000000000000;
  unk_1EA3CBB18 = result;
  qword_1EA3CBB20 = (uint64_t)sub_1C4D1EE3C;
  qword_1EA3CBB28 = 0;
  return result;
}

uint64_t sub_1C4D1EE3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, void *a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v57 = a4;
  uint64_t v12 = sub_1C4D10728(&qword_1EA3CBDC0);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v58 = (uint64_t)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (int *)type metadata accessor for CKLogEvent();
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v61 = a1;
    uint64_t v62 = a2;
    uint64_t v59 = 0x6464756F6C63;
    unint64_t v60 = 0xE600000000000000;
    sub_1C4D15918();
    if (StringProtocol.contains<A>(_:)()) {
      return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
    }
  }
  if ((uint64_t)objc_msgSend(a5, sel_numberOfRanges) < 4) {
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  }
  uint64_t v54 = a1;
  int v56 = a3;
  objc_msgSend(a5, sel_rangeAtIndex_, 1);
  uint64_t v55 = Range<>.init(_:in:)();
  if (v17) {
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  }
  objc_msgSend(a5, sel_rangeAtIndex_, 2);
  uint64_t v18 = Range<>.init(_:in:)();
  uint64_t v52 = v19;
  uint64_t v53 = v18;
  if (v20) {
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  }
  objc_msgSend(a5, sel_rangeAtIndex_, 3);
  Range<>.init(_:in:)();
  if (v22) {
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  }
  uint64_t v49 = v21;
  uint64_t v50 = a7;
  uint64_t v23 = String.subscript.getter();
  uint64_t v55 = MEMORY[0x1C8787A30](v23);
  uint64_t v51 = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = String.subscript.getter();
  uint64_t v26 = MEMORY[0x1C8787A30](v25);
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = String.subscript.getter();
  uint64_t v30 = MEMORY[0x1C8787A30](v29);
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v33 = v58;
  sub_1C4D2EC64(v26, v28, v50, v58);
  swift_bridgeObjectRelease();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v33, 1, (uint64_t)v14) == 1)
  {
    uint64_t v34 = (uint64_t)&v16[v14[8]];
    uint64_t v35 = v26;
    uint64_t v36 = type metadata accessor for Date();
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(v34, 1, 1, v36);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)&v16[v14[9]], 1, 1, v36);
    static TimeZone.current.getter();
    *(void *)uint64_t v16 = v35;
    *((void *)v16 + 1) = v28;
    *((void *)v16 + 2) = 0;
    *((void *)v16 + 3) = 0xE000000000000000;
    *((void *)v16 + 4) = 0;
    *((void *)v16 + 5) = 0xE000000000000000;
    *((_DWORD *)v16 + 12) = 0;
    uint64_t v37 = &v16[v14[11]];
    *(void *)uint64_t v37 = 0;
    *((void *)v37 + 1) = 0xE000000000000000;
    uint64_t v38 = &v16[v14[12]];
    *(void *)uint64_t v38 = 0;
    *((void *)v38 + 1) = 0xE000000000000000;
    uint64_t v39 = &v16[v14[13]];
    *(void *)uint64_t v39 = 0;
    *((void *)v39 + 1) = 0xE000000000000000;
    uint64_t v40 = &v16[v14[14]];
    *(void *)uint64_t v40 = 0;
    *((void *)v40 + 1) = 0xE000000000000000;
    uint64_t v41 = &v16[v14[15]];
    *(void *)uint64_t v41 = 0;
    *((void *)v41 + 1) = 0xE000000000000000;
    sub_1C4D19490(v58, &qword_1EA3CBDC0);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1C4D24FD4(v33, (uint64_t)v16);
  }
  int v43 = v56;
  id v44 = (uint64_t *)&v16[v14[11]];
  swift_bridgeObjectRelease();
  uint64_t v45 = v51;
  *id v44 = v55;
  v44[1] = v45;
  uint64_t v46 = (uint64_t *)&v16[v14[13]];
  swift_bridgeObjectRelease();
  *uint64_t v46 = v30;
  v46[1] = v32;
  uint64_t v47 = (uint64_t)&v16[v14[8]];
  sub_1C4D19490(v47, (uint64_t *)&unk_1EA3CC170);
  uint64_t v48 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16))(v47, v57, v48);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v47, 0, 1, v48);
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v16 + 4) = v54;
    *((void *)v16 + 5) = a2;
    *((_DWORD *)v16 + 12) = v43;
  }
  sub_1C4D1AEEC((uint64_t)v16, a6);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 0, 1, (uint64_t)v14);
  return sub_1C4D1AF50((uint64_t)v16);
}

uint64_t sub_1C4D1F2B4()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F28FD8]);
  id v1 = sub_1C4D21A24(0xD000000000000056, 0x80000001C5082240, 0);
  sub_1C4D24BD0(0, &qword_1EA3CBD90);
  uint64_t result = NSPredicate.init(format:_:)();
  qword_1EA3CBB30 = (uint64_t)v1;
  *(void *)algn_1EA3CBB38 = 0xD000000000000012;
  qword_1EA3CBB40 = 0x80000001C5081E40;
  unk_1EA3CBB48 = 20559;
  qword_1EA3CBB50 = 0xE200000000000000;
  unk_1EA3CBB58 = result;
  qword_1EA3CBB60 = (uint64_t)sub_1C4D1F3C0;
  qword_1EA3CBB68 = 0;
  return result;
}

uint64_t sub_1C4D1F3C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, void *a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v55 = a4;
  uint64_t v12 = sub_1C4D10728(&qword_1EA3CBDC0);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v56 = (uint64_t)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (int *)type metadata accessor for CKLogEvent();
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v59 = a1;
    uint64_t v60 = a2;
    uint64_t v57 = 0x6464756F6C63;
    unint64_t v58 = 0xE600000000000000;
    sub_1C4D15918();
    if (StringProtocol.contains<A>(_:)()) {
      return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
    }
  }
  if ((uint64_t)objc_msgSend(a5, sel_numberOfRanges) < 4) {
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  }
  uint64_t v52 = a1;
  int v54 = a3;
  objc_msgSend(a5, sel_rangeAtIndex_, 1);
  uint64_t v53 = Range<>.init(_:in:)();
  if (v17) {
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  }
  objc_msgSend(a5, sel_rangeAtIndex_, 2);
  Range<>.init(_:in:)();
  uint64_t v51 = v18;
  if (v19) {
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  }
  objc_msgSend(a5, sel_rangeAtIndex_, 3);
  Range<>.init(_:in:)();
  if (v21) {
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v14);
  }
  v48[1] = v20;
  uint64_t v49 = a7;
  uint64_t v22 = String.subscript.getter();
  uint64_t v53 = MEMORY[0x1C8787A30](v22);
  uint64_t v50 = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = String.subscript.getter();
  uint64_t v25 = MEMORY[0x1C8787A30](v24);
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = String.subscript.getter();
  uint64_t v29 = MEMORY[0x1C8787A30](v28);
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v32 = v56;
  sub_1C4D2EC64(v25, v27, v49, v56);
  swift_bridgeObjectRelease();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v32, 1, (uint64_t)v14) == 1)
  {
    uint64_t v33 = (uint64_t)&v16[v14[8]];
    uint64_t v34 = v25;
    uint64_t v35 = type metadata accessor for Date();
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(v33, 1, 1, v35);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)&v16[v14[9]], 1, 1, v35);
    static TimeZone.current.getter();
    *(void *)uint64_t v16 = v34;
    *((void *)v16 + 1) = v27;
    *((void *)v16 + 2) = 0;
    *((void *)v16 + 3) = 0xE000000000000000;
    *((void *)v16 + 4) = 0;
    *((void *)v16 + 5) = 0xE000000000000000;
    *((_DWORD *)v16 + 12) = 0;
    uint64_t v36 = &v16[v14[11]];
    *(void *)uint64_t v36 = 0;
    *((void *)v36 + 1) = 0xE000000000000000;
    uint64_t v37 = &v16[v14[12]];
    *(void *)uint64_t v37 = 0;
    *((void *)v37 + 1) = 0xE000000000000000;
    uint64_t v38 = &v16[v14[13]];
    *(void *)uint64_t v38 = 0;
    *((void *)v38 + 1) = 0xE000000000000000;
    uint64_t v39 = &v16[v14[14]];
    *(void *)uint64_t v39 = 0;
    *((void *)v39 + 1) = 0xE000000000000000;
    uint64_t v40 = &v16[v14[15]];
    *(void *)uint64_t v40 = 0;
    *((void *)v40 + 1) = 0xE000000000000000;
    sub_1C4D19490(v56, &qword_1EA3CBDC0);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1C4D24FD4(v32, (uint64_t)v16);
  }
  int v42 = v54;
  int v43 = (uint64_t *)&v16[v14[11]];
  swift_bridgeObjectRelease();
  uint64_t v44 = v50;
  *int v43 = v53;
  v43[1] = v44;
  uint64_t v45 = (uint64_t *)&v16[v14[13]];
  swift_bridgeObjectRelease();
  uint64_t *v45 = v29;
  v45[1] = v31;
  uint64_t v46 = (uint64_t)&v16[v14[8]];
  sub_1C4D19490(v46, (uint64_t *)&unk_1EA3CC170);
  uint64_t v47 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16))(v46, v55, v47);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v46, 0, 1, v47);
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v16 + 4) = v52;
    *((void *)v16 + 5) = a2;
    *((_DWORD *)v16 + 12) = v42;
  }
  sub_1C4D1AEEC((uint64_t)v16, a6);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 0, 1, (uint64_t)v14);
  return sub_1C4D1AF50((uint64_t)v16);
}

uint64_t sub_1C4D1F840()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F28FD8]);
  id v1 = sub_1C4D21A24(0xD00000000000003DLL, 0x80000001C50821D0, 0);
  sub_1C4D24BD0(0, &qword_1EA3CBD90);
  uint64_t result = NSPredicate.init(format:_:)();
  qword_1EA3CBB70 = (uint64_t)v1;
  *(void *)algn_1EA3CBB78 = 0xD000000000000012;
  qword_1EA3CBB80 = 0x80000001C5081E40;
  unk_1EA3CBB88 = 20559;
  qword_1EA3CBB90 = 0xE200000000000000;
  unk_1EA3CBB98 = result;
  qword_1EA3CBBA0 = (uint64_t)sub_1C4D1F948;
  qword_1EA3CBBA8 = 0;
  return result;
}

uint64_t sub_1C4D1F948@<X0>(void *a1@<X7>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v5 = sub_1C4D10728(&qword_1EA3CBDC0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CKLogEvent();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((uint64_t)objc_msgSend(a1, sel_numberOfRanges) < 3
    || (uint64_t v23 = a3, objc_msgSend(a1, sel_rangeAtIndex_, 1), Range<>.init(_:in:)(), (v11 & 1) != 0)
    || (objc_msgSend(a1, sel_rangeAtIndex_, 2), Range<>.init(_:in:)(), (v12 & 1) != 0))
  {
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, v8);
  }
  else
  {
    uint64_t v13 = String.subscript.getter();
    uint64_t v22 = MEMORY[0x1C8787A30](v13);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    uint64_t v16 = String.subscript.getter();
    uint64_t v17 = MEMORY[0x1C8787A30](v16);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    sub_1C4D2EC64(v22, v15, v23, (uint64_t)v7);
    swift_bridgeObjectRelease();
    if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v7, 1, v8) == 1)
    {
      swift_bridgeObjectRelease();
      sub_1C4D19490((uint64_t)v7, &qword_1EA3CBDC0);
      return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, v8);
    }
    else
    {
      sub_1C4D24FD4((uint64_t)v7, (uint64_t)v10);
      char v21 = (uint64_t *)&v10[*(int *)(v8 + 48)];
      swift_bridgeObjectRelease();
      uint64_t *v21 = v17;
      v21[1] = v19;
      sub_1C4D1AEEC((uint64_t)v10, a2);
      _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 0, 1, v8);
      return sub_1C4D1AF50((uint64_t)v10);
    }
  }
}

uint64_t sub_1C4D1FBE4()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F28FD8]);
  id v1 = sub_1C4D21A24(0xD00000000000003BLL, 0x80000001C5082160, 0);
  sub_1C4D24BD0(0, &qword_1EA3CBD90);
  uint64_t result = NSPredicate.init(format:_:)();
  qword_1EA3CBBB0 = (uint64_t)v1;
  *(void *)algn_1EA3CBBB8 = 0xD000000000000012;
  qword_1EA3CBBC0 = 0x80000001C5081E40;
  unk_1EA3CBBC8 = 20559;
  qword_1EA3CBBD0 = 0xE200000000000000;
  unk_1EA3CBBD8 = result;
  qword_1EA3CBBE0 = (uint64_t)sub_1C4D1FCF0;
  qword_1EA3CBBE8 = 0;
  return result;
}

uint64_t sub_1C4D1FCF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, void *a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v51 = a4;
  uint64_t v12 = sub_1C4D10728(&qword_1EA3CBDC0);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v52 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (int *)type metadata accessor for CKLogEvent();
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2
    && (uint64_t v55 = a1,
        uint64_t v56 = a2,
        uint64_t v53 = 0x6464756F6C63,
        unint64_t v54 = 0xE600000000000000,
        sub_1C4D15918(),
        (StringProtocol.contains<A>(_:)() & 1) != 0)
    || (uint64_t)objc_msgSend(a5, sel_numberOfRanges) < 3)
  {
    uint64_t v17 = a6;
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(v17, 1, 1, (uint64_t)v14);
  }
  uint64_t v48 = a1;
  int v49 = a3;
  uint64_t v50 = a6;
  objc_msgSend(a5, sel_rangeAtIndex_, 1);
  Range<>.init(_:in:)();
  if (v18 & 1) != 0 || (objc_msgSend(a5, sel_rangeAtIndex_, 2), Range<>.init(_:in:)(), (v19))
  {
    uint64_t v17 = v50;
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(v17, 1, 1, (uint64_t)v14);
  }
  uint64_t v47 = a7;
  uint64_t v20 = String.subscript.getter();
  uint64_t v21 = MEMORY[0x1C8787A30](v20);
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = String.subscript.getter();
  uint64_t v25 = MEMORY[0x1C8787A30](v24);
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v28 = v52;
  sub_1C4D2EC64(v25, v27, v47, v52);
  swift_bridgeObjectRelease();
  uint64_t v29 = v21;
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v28, 1, (uint64_t)v14) == 1)
  {
    uint64_t v30 = (uint64_t)&v16[v14[8]];
    uint64_t v31 = type metadata accessor for Date();
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(v30, 1, 1, v31);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)&v16[v14[9]], 1, 1, v31);
    static TimeZone.current.getter();
    *(void *)uint64_t v16 = v25;
    *((void *)v16 + 1) = v27;
    *((void *)v16 + 2) = 0;
    *((void *)v16 + 3) = 0xE000000000000000;
    *((void *)v16 + 4) = 0;
    *((void *)v16 + 5) = 0xE000000000000000;
    *((_DWORD *)v16 + 12) = 0;
    uint64_t v32 = &v16[v14[11]];
    *(void *)uint64_t v32 = 0;
    *((void *)v32 + 1) = 0xE000000000000000;
    uint64_t v33 = &v16[v14[12]];
    *(void *)uint64_t v33 = 0;
    *((void *)v33 + 1) = 0xE000000000000000;
    uint64_t v34 = &v16[v14[13]];
    *(void *)uint64_t v34 = 0;
    *((void *)v34 + 1) = 0xE000000000000000;
    uint64_t v35 = &v16[v14[14]];
    *(void *)uint64_t v35 = 0;
    *((void *)v35 + 1) = 0xE000000000000000;
    uint64_t v36 = &v16[v14[15]];
    *(void *)uint64_t v36 = 0;
    *((void *)v36 + 1) = 0xE000000000000000;
    sub_1C4D19490(v28, &qword_1EA3CBDC0);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1C4D24FD4(v28, (uint64_t)v16);
  }
  uint64_t v39 = v50;
  uint64_t v38 = v51;
  uint64_t v40 = (uint64_t)&v16[v14[9]];
  sub_1C4D19490(v40, (uint64_t *)&unk_1EA3CC170);
  uint64_t v41 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(v40, v38, v41);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v40, 0, 1, v41);
  int v42 = &v16[v14[11]];
  unint64_t v43 = *((void *)v42 + 1);
  uint64_t v44 = *(void *)v42 & 0xFFFFFFFFFFFFLL;
  if ((v43 & 0x2000000000000000) != 0) {
    uint64_t v44 = HIBYTE(v43) & 0xF;
  }
  if (v44)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)int v42 = v29;
    *((void *)v42 + 1) = v23;
  }
  unint64_t v45 = *((void *)v16 + 5);
  uint64_t v46 = *((void *)v16 + 4) & 0xFFFFFFFFFFFFLL;
  if ((v45 & 0x2000000000000000) != 0) {
    uint64_t v46 = HIBYTE(v45) & 0xF;
  }
  if (a2)
  {
    if (!v46)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v16 + 4) = v48;
      *((void *)v16 + 5) = a2;
      *((_DWORD *)v16 + 12) = v49;
    }
  }
  sub_1C4D1AEEC((uint64_t)v16, v39);
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v39, 0, 1, (uint64_t)v14);
  return sub_1C4D1AF50((uint64_t)v16);
}

uint64_t sub_1C4D20148()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F28FD8]);
  id v1 = sub_1C4D21A24(0xD000000000000035, 0x80000001C50820E0, 0);
  sub_1C4D24BD0(0, &qword_1EA3CBD90);
  uint64_t result = NSPredicate.init(format:_:)();
  qword_1EA3CBBF0 = (uint64_t)v1;
  *(void *)algn_1EA3CBBF8 = 0xD000000000000012;
  qword_1EA3CBC00 = 0x80000001C5081E40;
  unk_1EA3CBC08 = 19267;
  qword_1EA3CBC10 = 0xE200000000000000;
  unk_1EA3CBC18 = result;
  qword_1EA3CBC20 = (uint64_t)sub_1C4D2025C;
  qword_1EA3CBC28 = 0;
  return result;
}

uint64_t sub_1C4D2025C@<X0>(void *a1@<X7>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v5 = sub_1C4D10728(&qword_1EA3CBDC0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for CKLogEvent();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((uint64_t)objc_msgSend(a1, sel_numberOfRanges) < 3
    || (uint64_t v32 = a3, objc_msgSend(a1, sel_rangeAtIndex_, 1), Range<>.init(_:in:)(), (v11 & 1) != 0)
    || (objc_msgSend(a1, sel_rangeAtIndex_, 2), Range<>.init(_:in:)(), (v12 & 1) != 0))
  {
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, (uint64_t)v8);
  }
  else
  {
    uint64_t v13 = String.subscript.getter();
    uint64_t v14 = MEMORY[0x1C8787A30](v13);
    uint64_t v16 = v15;
    uint64_t v17 = v14;
    swift_bridgeObjectRelease();
    uint64_t v18 = String.subscript.getter();
    uint64_t v19 = MEMORY[0x1C8787A30](v18);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1C4D2EC64(v17, v16, v32, (uint64_t)v7);
    swift_bridgeObjectRelease();
    if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v7, 1, (uint64_t)v8) == 1)
    {
      uint64_t v22 = (uint64_t)&v10[v8[8]];
      uint64_t v23 = type metadata accessor for Date();
      _s14CloudKitDaemon17PartialTrafficLogOwst_0(v22, 1, 1, v23);
      _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)&v10[v8[9]], 1, 1, v23);
      static TimeZone.current.getter();
      *(void *)uint64_t v10 = v17;
      *((void *)v10 + 1) = v16;
      *((void *)v10 + 2) = 0;
      *((void *)v10 + 3) = 0xE000000000000000;
      *((void *)v10 + 4) = 0;
      *((void *)v10 + 5) = 0xE000000000000000;
      *((_DWORD *)v10 + 12) = 0;
      uint64_t v24 = &v10[v8[11]];
      *(void *)uint64_t v24 = 0;
      *((void *)v24 + 1) = 0xE000000000000000;
      uint64_t v25 = &v10[v8[12]];
      *(void *)uint64_t v25 = 0;
      *((void *)v25 + 1) = 0xE000000000000000;
      uint64_t v26 = &v10[v8[13]];
      *(void *)uint64_t v26 = 0;
      *((void *)v26 + 1) = 0xE000000000000000;
      uint64_t v27 = &v10[v8[14]];
      *(void *)uint64_t v27 = 0;
      *((void *)v27 + 1) = 0xE000000000000000;
      uint64_t v28 = &v10[v8[15]];
      *(void *)uint64_t v28 = 0;
      *((void *)v28 + 1) = 0xE000000000000000;
      sub_1C4D19490((uint64_t)v7, &qword_1EA3CBDC0);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1C4D24FD4((uint64_t)v7, (uint64_t)v10);
    }
    uint64_t v30 = (uint64_t *)&v10[v8[14]];
    swift_bridgeObjectRelease();
    uint64_t *v30 = v19;
    v30[1] = v21;
    sub_1C4D1AEEC((uint64_t)v10, a2);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 0, 1, (uint64_t)v8);
    return sub_1C4D1AF50((uint64_t)v10);
  }
}

uint64_t sub_1C4D20590()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F28FD8]);
  id v1 = sub_1C4D21A24(0xD00000000000002ELL, 0x80000001C5082070, 0);
  sub_1C4D24BD0(0, &qword_1EA3CBD90);
  uint64_t result = NSPredicate.init(format:_:)();
  qword_1EA3CBC30 = (uint64_t)v1;
  *(void *)algn_1EA3CBC38 = 0xD000000000000012;
  qword_1EA3CBC40 = 0x80000001C5081E40;
  unk_1EA3CBC48 = 19267;
  qword_1EA3CBC50 = 0xE200000000000000;
  unk_1EA3CBC58 = result;
  qword_1EA3CBC60 = (uint64_t)sub_1C4D20698;
  qword_1EA3CBC68 = 0;
  return result;
}

uint64_t sub_1C4D20698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = sub_1C4D10728(&qword_1EA3CBDC0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (int *)type metadata accessor for CKLogEvent();
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v31[2] = a1;
    v31[3] = a2;
    v31[0] = 0x6464756F6C63;
    v31[1] = 0xE600000000000000;
    sub_1C4D15918();
    if (StringProtocol.contains<A>(_:)()) {
      return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a4, 1, 1, (uint64_t)v14);
    }
  }
  if ((uint64_t)objc_msgSend(a3, sel_numberOfRanges) < 2) {
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a4, 1, 1, (uint64_t)v14);
  }
  objc_msgSend(a3, sel_rangeAtIndex_, 1);
  Range<>.init(_:in:)();
  if (v17) {
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a4, 1, 1, (uint64_t)v14);
  }
  uint64_t v18 = String.subscript.getter();
  uint64_t v19 = MEMORY[0x1C8787A30](v18);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  if (a7)
  {
    swift_bridgeObjectRetain();
    sub_1C4D2EC64(a6, a7, a5, (uint64_t)v13);
    if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v13, 1, (uint64_t)v14) == 1)
    {
      uint64_t v22 = (uint64_t)&v16[v14[8]];
      uint64_t v23 = type metadata accessor for Date();
      _s14CloudKitDaemon17PartialTrafficLogOwst_0(v22, 1, 1, v23);
      _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)&v16[v14[9]], 1, 1, v23);
      static TimeZone.current.getter();
      *(void *)uint64_t v16 = a6;
      *((void *)v16 + 1) = a7;
      *((void *)v16 + 2) = 0;
      *((void *)v16 + 3) = 0xE000000000000000;
      *((void *)v16 + 4) = 0;
      *((void *)v16 + 5) = 0xE000000000000000;
      *((_DWORD *)v16 + 12) = 0;
      uint64_t v24 = &v16[v14[11]];
      *(void *)uint64_t v24 = 0;
      *((void *)v24 + 1) = 0xE000000000000000;
      uint64_t v25 = &v16[v14[12]];
      *(void *)uint64_t v25 = 0;
      *((void *)v25 + 1) = 0xE000000000000000;
      uint64_t v26 = &v16[v14[13]];
      *(void *)uint64_t v26 = 0;
      *((void *)v26 + 1) = 0xE000000000000000;
      uint64_t v27 = &v16[v14[14]];
      *(void *)uint64_t v27 = 0;
      *((void *)v27 + 1) = 0xE000000000000000;
      uint64_t v28 = &v16[v14[15]];
      *(void *)uint64_t v28 = 0;
      *((void *)v28 + 1) = 0xE000000000000000;
      sub_1C4D19490((uint64_t)v13, &qword_1EA3CBDC0);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1C4D24FD4((uint64_t)v13, (uint64_t)v16);
    }
    uint64_t v30 = (uint64_t *)&v16[v14[14]];
    swift_bridgeObjectRelease();
    uint64_t *v30 = v19;
    v30[1] = v21;
    sub_1C4D1AEEC((uint64_t)v16, a4);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(a4, 0, 1, (uint64_t)v14);
    return sub_1C4D1AF50((uint64_t)v16);
  }
  else
  {
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(a4, 1, 1, (uint64_t)v14);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1C4D209A4()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F28FD8]);
  id v1 = sub_1C4D21A24(0xD00000000000006FLL, 0x80000001C5081FE0, 0);
  sub_1C4D24BD0(0, &qword_1EA3CBD90);
  uint64_t result = NSPredicate.init(format:_:)();
  qword_1EA3CBC70 = (uint64_t)v1;
  *(void *)algn_1EA3CBC78 = 0xD000000000000012;
  qword_1EA3CBC80 = 0x80000001C5081E40;
  unk_1EA3CBC88 = 19267;
  qword_1EA3CBC90 = 0xE200000000000000;
  unk_1EA3CBC98 = result;
  qword_1EA3CBCA0 = (uint64_t)sub_1C4D20AAC;
  qword_1EA3CBCA8 = 0;
  return result;
}

uint64_t sub_1C4D20AAC@<X0>(void *a1@<X7>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v5 = sub_1C4D10728(&qword_1EA3CBDC0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for CKLogEvent();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((uint64_t)objc_msgSend(a1, sel_numberOfRanges) < 3
    || (v42 = v7, uint64_t v43 = a3, objc_msgSend(a1, sel_rangeAtIndex_, 1), Range<>.init(_:in:)(), (v11 & 1) != 0)
    || (objc_msgSend(a1, sel_rangeAtIndex_, 2), Range<>.init(_:in:)(), (v13 & 1) != 0))
  {
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, (uint64_t)v8);
  }
  else
  {
    v41[0] = a2;
    v41[1] = v12;
    uint64_t v14 = String.subscript.getter();
    uint64_t v15 = MEMORY[0x1C8787A30](v14);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    uint64_t v44 = v15;
    uint64_t v45 = v17;
    uint64_t v18 = String.subscript.getter();
    uint64_t v19 = MEMORY[0x1C8787A30](v18);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    if ((uint64_t)objc_msgSend(a1, sel_numberOfRanges) >= 4)
    {
      objc_msgSend(a1, sel_rangeAtIndex_, 3);
      Range<>.init(_:in:)();
      if ((v22 & 1) == 0)
      {
        uint64_t v23 = String.subscript.getter();
        uint64_t v24 = MEMORY[0x1C8787A30](v23);
        uint64_t v26 = v25;
        swift_bridgeObjectRelease();
        v27._uint64_t countAndFlagsBits = v24;
        v27._object = v26;
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v28 = (uint64_t)v42;
    sub_1C4D2EC64(v19, v21, v43, (uint64_t)v42);
    swift_bridgeObjectRelease();
    if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v28, 1, (uint64_t)v8) == 1)
    {
      uint64_t v29 = (uint64_t)&v10[v8[8]];
      uint64_t v30 = type metadata accessor for Date();
      _s14CloudKitDaemon17PartialTrafficLogOwst_0(v29, 1, 1, v30);
      _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)&v10[v8[9]], 1, 1, v30);
      static TimeZone.current.getter();
      *(void *)uint64_t v10 = v19;
      *((void *)v10 + 1) = v21;
      *((void *)v10 + 2) = 0;
      *((void *)v10 + 3) = 0xE000000000000000;
      *((void *)v10 + 4) = 0;
      *((void *)v10 + 5) = 0xE000000000000000;
      *((_DWORD *)v10 + 12) = 0;
      uint64_t v31 = &v10[v8[11]];
      *(void *)uint64_t v31 = 0;
      *((void *)v31 + 1) = 0xE000000000000000;
      uint64_t v32 = &v10[v8[12]];
      *(void *)uint64_t v32 = 0;
      *((void *)v32 + 1) = 0xE000000000000000;
      uint64_t v33 = &v10[v8[13]];
      *(void *)uint64_t v33 = 0;
      *((void *)v33 + 1) = 0xE000000000000000;
      uint64_t v34 = &v10[v8[14]];
      *(void *)uint64_t v34 = 0;
      *((void *)v34 + 1) = 0xE000000000000000;
      uint64_t v35 = &v10[v8[15]];
      *(void *)uint64_t v35 = 0;
      *((void *)v35 + 1) = 0xE000000000000000;
      sub_1C4D19490(v28, &qword_1EA3CBDC0);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1C4D24FD4(v28, (uint64_t)v10);
    }
    uint64_t v37 = v41[0];
    uint64_t v38 = v44;
    uint64_t v39 = v45;
    uint64_t v40 = &v10[v8[14]];
    swift_bridgeObjectRelease();
    *(void *)uint64_t v40 = v38;
    *((void *)v40 + 1) = v39;
    sub_1C4D1AEEC((uint64_t)v10, v37);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(v37, 0, 1, (uint64_t)v8);
    return sub_1C4D1AF50((uint64_t)v10);
  }
}

uint64_t sub_1C4D20E5C()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F28FD8]);
  id v1 = sub_1C4D21A24(0xD000000000000030, 0x80000001C5081E00, 0);
  sub_1C4D24BD0(0, &qword_1EA3CBD90);
  uint64_t result = NSPredicate.init(format:_:)();
  qword_1EA3CBCB0 = (uint64_t)v1;
  *(void *)algn_1EA3CBCB8 = 0xD000000000000012;
  qword_1EA3CBCC0 = 0x80000001C5081E40;
  unk_1EA3CBCC8 = 19267;
  qword_1EA3CBCD0 = 0xE200000000000000;
  unk_1EA3CBCD8 = result;
  qword_1EA3CBCE0 = (uint64_t)sub_1C4D20F64;
  qword_1EA3CBCE8 = 0;
  return result;
}

uint64_t sub_1C4D20F64@<X0>(void *a1@<X7>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v5 = sub_1C4D10728(&qword_1EA3CBDC0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CKLogEvent();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((uint64_t)objc_msgSend(a1, sel_numberOfRanges) < 3
    || (uint64_t v25 = a3, objc_msgSend(a1, sel_rangeAtIndex_, 1), Range<>.init(_:in:)(), (v11 & 1) != 0)
    || (objc_msgSend(a1, sel_rangeAtIndex_, 2), Range<>.init(_:in:)(), (v12 & 1) != 0))
  {
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a2, 1, 1, v8);
  }
  else
  {
    uint64_t v13 = String.subscript.getter();
    uint64_t v24 = MEMORY[0x1C8787A30](v13);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    uint64_t v16 = String.subscript.getter();
    uint64_t v17 = MEMORY[0x1C8787A30](v16);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    sub_1C4D2EC64(v24, v15, v25, (uint64_t)v7);
    swift_bridgeObjectRelease();
    if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v7, 1, v8) == 1)
    {
      swift_bridgeObjectRelease();
      sub_1C4D19490((uint64_t)v7, &qword_1EA3CBDC0);
      uint64_t v20 = a2;
      uint64_t v21 = 1;
    }
    else
    {
      sub_1C4D24FD4((uint64_t)v7, (uint64_t)v10);
      v26._uint64_t countAndFlagsBits = v17;
      v26._object = v19;
      v23._uint64_t countAndFlagsBits = 10;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      sub_1C4D24FD4((uint64_t)v10, a2);
      uint64_t v20 = a2;
      uint64_t v21 = 0;
    }
    return _s14CloudKitDaemon17PartialTrafficLogOwst_0(v20, v21, 1, v8);
  }
}

id sub_1C4D21208()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F28FD8]);
  id result = sub_1C4D21A24(0xD000000000000042, 0x80000001C5081F90, 0);
  qword_1EA3CBCF0 = (uint64_t)result;
  return result;
}

uint64_t sub_1C4D21294()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F28FD8]);
  id v1 = sub_1C4D21A24(0xD000000000000043, 0x80000001C5081E90, 0);
  sub_1C4D24BD0(0, &qword_1EA3CBD90);
  uint64_t result = NSPredicate.init(format:_:)();
  qword_1EA3CBCF8 = (uint64_t)v1;
  strcpy(byte_1EA3CBD00, "com.apple.apsd");
  HIBYTE(qword_1EA3CBD08) = -18;
  unk_1EA3CBD10 = 0x697463656E6E6F63;
  qword_1EA3CBD18 = 0xEA00000000006E6FLL;
  unk_1EA3CBD20 = result;
  qword_1EA3CBD28 = (uint64_t)sub_1C4D213C0;
  qword_1EA3CBD30 = 0;
  return result;
}

uint64_t sub_1C4D213C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, void *a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v62 = a4;
  int v60 = a3;
  uint64_t v59 = a1;
  uint64_t v8 = (int *)type metadata accessor for CKLogEvent();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((uint64_t)objc_msgSend(a5, sel_numberOfRanges) >= 2)
  {
    objc_msgSend(a5, sel_rangeAtIndex_, 1);
    Range<>.init(_:in:)();
    if ((v15 & 1) == 0)
    {
      uint64_t v57 = a6;
      uint64_t v16 = String.subscript.getter();
      uint64_t v17 = MEMORY[0x1C8787A30](v16);
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      if (qword_1EA3CB738 != -1) {
        swift_once();
      }
      uint64_t v20 = (void *)qword_1EA3CBCF0;
      uint64_t v21 = (void *)MEMORY[0x1C87879B0](v17, v19);
      uint64_t v58 = v19;
      uint64_t v22 = String.count.getter();
      if (v22 < 0)
      {
        __break(1u);
      }
      else
      {
        id v23 = objc_msgSend(v20, sel_firstMatchInString_options_range_, v21, 0, 0, v22);

        uint64_t v56 = v17;
        if (!v23)
        {
          UUID.init()();
          uint64_t v24 = UUID.uuidString.getter();
          Swift::String v26 = v28;
          goto LABEL_13;
        }
        if ((uint64_t)objc_msgSend(v23, sel_numberOfRanges) < 4)
        {
          UUID.init()();
          uint64_t v24 = UUID.uuidString.getter();
          Swift::String v26 = v25;

LABEL_13:
          (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
          uint64_t v53 = 0;
          uint64_t v54 = 0;
          uint64_t v55 = 0;
          uint64_t v29 = 0;
LABEL_18:
          uint64_t v63 = 0;
          unint64_t v64 = 0xE000000000000000;
          swift_bridgeObjectRetain();
          v40._uint64_t countAndFlagsBits = v24;
          v40._object = v26;
          String.append(_:)(v40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v41 = (uint64_t)&v10[v8[8]];
          uint64_t v42 = type metadata accessor for Date();
          _s14CloudKitDaemon17PartialTrafficLogOwst_0(v41, 1, 1, v42);
          uint64_t v43 = (uint64_t)&v10[v8[9]];
          _s14CloudKitDaemon17PartialTrafficLogOwst_0(v43, 1, 1, v42);
          static TimeZone.current.getter();
          *(void *)uint64_t v10 = v24;
          *((void *)v10 + 1) = v26;
          *((void *)v10 + 2) = 0;
          *((void *)v10 + 3) = 0xE000000000000000;
          *((void *)v10 + 4) = 0;
          *((void *)v10 + 5) = 0xE000000000000000;
          *((_DWORD *)v10 + 12) = 0;
          uint64_t v44 = (uint64_t *)&v10[v8[12]];
          *uint64_t v44 = 0;
          v44[1] = 0xE000000000000000;
          uint64_t v45 = &v10[v8[13]];
          *(void *)uint64_t v45 = 0;
          *((void *)v45 + 1) = 0xE000000000000000;
          uint64_t v46 = (uint64_t *)&v10[v8[14]];
          *uint64_t v46 = 0;
          v46[1] = 0xE000000000000000;
          uint64_t v47 = &v10[v8[15]];
          *(void *)uint64_t v47 = 0;
          *((void *)v47 + 1) = 0xE000000000000000;
          uint64_t v48 = &v10[v8[11]];
          *(void *)uint64_t v48 = 1752397136;
          *((void *)v48 + 1) = 0xE400000000000000;
          uint64_t v49 = v61;
          if (v61)
          {
            *((void *)v10 + 4) = v59;
            *((void *)v10 + 5) = v49;
            *((_DWORD *)v10 + 12) = v60;
          }
          swift_bridgeObjectRetain();
          sub_1C4D19490(v41, (uint64_t *)&unk_1EA3CC170);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(v41, v62, v42);
          _s14CloudKitDaemon17PartialTrafficLogOwst_0(v41, 0, 1, v42);
          sub_1C4D25A34(v41, v43);
          if (v29)
          {
            swift_bridgeObjectRelease();
            *uint64_t v44 = v54;
            v44[1] = v29;
          }
          uint64_t v50 = v55;
          if (v55)
          {
            swift_bridgeObjectRelease();
            *uint64_t v46 = v53;
            v46[1] = v50;
          }
          swift_bridgeObjectRelease();
          uint64_t v51 = v57;
          uint64_t v52 = v58;
          *(void *)uint64_t v47 = v56;
          *((void *)v47 + 1) = v52;
          sub_1C4D1AEEC((uint64_t)v10, v51);
          _s14CloudKitDaemon17PartialTrafficLogOwst_0(v51, 0, 1, (uint64_t)v8);
          return sub_1C4D1AF50((uint64_t)v10);
        }
        objc_msgSend(v23, sel_rangeAtIndex_, 1);
        Range<>.init(_:in:)();
        if ((v30 & 1) == 0)
        {
          uint64_t v31 = String.subscript.getter();
          uint64_t v54 = MEMORY[0x1C8787A30](v31);
          uint64_t v33 = v32;
          swift_bridgeObjectRelease();
          objc_msgSend(v23, sel_rangeAtIndex_, 2);
          Range<>.init(_:in:)();
          if ((v34 & 1) == 0)
          {
            uint64_t v35 = String.subscript.getter();
            uint64_t v24 = MEMORY[0x1C8787A30](v35);
            Swift::String v26 = v36;
            swift_bridgeObjectRelease();
            objc_msgSend(v23, sel_rangeAtIndex_, 3);
            Range<>.init(_:in:)();
            if ((v37 & 1) == 0)
            {
              uint64_t v29 = v33;
              uint64_t v38 = String.subscript.getter();
              uint64_t v53 = MEMORY[0x1C8787A30](v38);
              uint64_t v55 = v39;
              swift_bridgeObjectRelease();

              goto LABEL_18;
            }
LABEL_28:
            uint64_t result = swift_bridgeObjectRelease();
            __break(1u);
            return result;
          }
LABEL_27:
          swift_bridgeObjectRelease();
          __break(1u);
          goto LABEL_28;
        }
      }
      __break(1u);
      goto LABEL_27;
    }
  }
  return _s14CloudKitDaemon17PartialTrafficLogOwst_0(a6, 1, 1, (uint64_t)v8);
}

uint64_t CKLogParser.deinit()
{
  swift_defaultActor_destroy();
  return v0;
}

uint64_t CKLogParser.__deallocating_deinit()
{
  swift_defaultActor_destroy();
  return MEMORY[0x1F4188210](v0);
}

uint64_t CKLogParser.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_1C4D219A8()
{
  return CKLogParser.unownedExecutor.getter();
}

uint64_t sub_1C4D219C4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1C4D219F4()
{
  uint64_t v0 = sub_1C4D219C4();
  return MEMORY[0x1F4186488](v0, 48, 7);
}

id sub_1C4D21A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)MEMORY[0x1C87879B0]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  id v6 = objc_msgSend(v3, sel_initWithPattern_options_error_, v5, a3, v10);

  if (v6)
  {
    id v7 = v10[0];
  }
  else
  {
    id v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_1C4D21B00(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1C4D21CA0(a1, a2, a3);
}

uint64_t sub_1C4D21B18(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_1C4D25DA8();
    sub_1C4D25DE0();
LABEL_11:
    uint64_t result = sub_1C4D25E58();
    __break(1u);
    return result;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    sub_1C4D25DA8();
    sub_1C4D25DD0();
    goto LABEL_11;
  }
  return swift_arrayInitWithCopy();
}

uint64_t sub_1C4D21BC8(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_1C4D25DA8();
    sub_1C4D25DE0();
LABEL_11:
    uint64_t result = sub_1C4D25E58();
    __break(1u);
    return result;
  }
  sub_1C4D25DF0();
  if (v4 + 32 * v3 > v2 && v2 + 32 * v3 > v4)
  {
    sub_1C4D25DA8();
    sub_1C4D25DD0();
    goto LABEL_11;
  }
  sub_1C4D10728((uint64_t *)&unk_1EBBCD858);
  sub_1C4D25E7C();
  return swift_arrayInitWithCopy();
}

uint64_t sub_1C4D21C88(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1C4D21CA0(a1, a2, a3);
}

uint64_t sub_1C4D21CA0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_1C4D25DA8();
    sub_1C4D25DE0();
LABEL_11:
    uint64_t result = sub_1C4D25E58();
    __break(1u);
    return result;
  }
  sub_1C4D25DF0();
  v6(0);
  sub_1C4D1B074();
  uint64_t v8 = *(void *)(v7 + 72) * v3;
  unint64_t v9 = a3 + v8;
  unint64_t v10 = v4 + v8;
  if (v9 > v4 && v10 > a3)
  {
    sub_1C4D25DA8();
    sub_1C4D25DD0();
    goto LABEL_11;
  }
  sub_1C4D25E7C();
  return swift_arrayInitWithCopy();
}

uint64_t sub_1C4D21D74(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 8 * a2 > a1 ? (BOOL v3 = a1 + 8 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for TrafficLogMessage();
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_1C4D21E70(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_1C4D25DA8();
    sub_1C4D25DE0();
LABEL_11:
    uint64_t result = sub_1C4D25E58();
    __break(1u);
    return result;
  }
  if (a3 + 32 * a2 > a1 && a1 + 32 * a2 > a3)
  {
    sub_1C4D25DA8();
    sub_1C4D25DD0();
    goto LABEL_11;
  }
  return swift_arrayInitWithCopy();
}

unint64_t sub_1C4D21F20(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

unint64_t sub_1C4D21F44(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return sub_1C4D220FC(a1, a2, v4);
}

unint64_t sub_1C4D21FBC(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return sub_1C4D221E0(a1, v2);
}

unint64_t sub_1C4D21FF8(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1C4D2227C(a1, v4);
}

unint64_t sub_1C4D2203C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v8 = Hasher._finalize()();
  return sub_1C4D22344(a1, a2, a3, a4, v8);
}

unint64_t sub_1C4D220FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1C4D221E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1C4D2227C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1C4D16854(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x1C8787DB0](v9, a1);
      sub_1C4D251B4((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1C4D22344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v13 = ~v7;
    uint64_t v14 = *(void *)(v5 + 48);
    do
    {
      char v15 = (void *)(v14 + 32 * v8);
      uint64_t v16 = v15[2];
      uint64_t v17 = v15[3];
      BOOL v18 = *v15 == a1 && v15[1] == a2;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v19 = v16 == a3 && v17 == a4;
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v8 = (v8 + 1) & v13;
    }
    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

uint64_t sub_1C4D22440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1C4D21F44(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v4;
    uint64_t v11 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    Swift::Int v12 = *(void *)(v11 + 24);
    sub_1C4D10728(&qword_1EA3CBE00);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v19 + 56);
    uint64_t v14 = type metadata accessor for CKLogEvent();
    sub_1C4D24FD4(v13 + *(void *)(*(void *)(v14 - 8) + 72) * v8, a3);
    _NativeDictionary._delete(at:)();
    *unint64_t v4 = v19;
    swift_bridgeObjectRelease();
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v14;
  }
  else
  {
    uint64_t v17 = type metadata accessor for CKLogEvent();
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }
  return _s14CloudKitDaemon17PartialTrafficLogOwst_0(v15, v16, 1, v17);
}

void sub_1C4D225A4(uint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for CKLogEvent() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1C4D2DDEC(v3);
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_1C4D22894(v6);
  *a1 = v3;
}

size_t sub_1C4D2264C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  sub_1C4D10728(&qword_1EA3CBDE8);
  uint64_t v3 = *(void *)(type metadata accessor for CKLogEvent() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      uint64_t v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      uint64_t v9 = sub_1C4D25268(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_1C4D1684C();
      if (v9 == v1) {
        return (size_t)v6;
      }
      __break(1u);
      return MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1C4D227A0(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      sub_1C4D10728(&qword_1EA3CBD88);
      uint64_t v3 = (void *)swift_allocObject();
      size_t v4 = j__malloc_size(v3);
      v3[2] = v2;
      v3[3] = (2 * ((uint64_t)(v4 - 32) / 8)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1C4D2566C((uint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v5;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return (void *)MEMORY[0x1E4FBC860];
    }
  }
  return v3;
}

void sub_1C4D22894(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v196 = (uint64_t)&v171 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v195 = (uint64_t)&v171 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v171 - v10;
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v171 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v171 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v171 - v18;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v171 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  v208 = (char *)&v171 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  v186 = (char *)&v171 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  v190 = (char *)&v171 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  v178 = (char *)&v171 - v32;
  MEMORY[0x1F4188790](v31);
  v179 = (char *)&v171 - v33;
  uint64_t v203 = type metadata accessor for CKLogEvent();
  uint64_t v192 = *(void *)(v203 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v203);
  uint64_t v185 = (uint64_t)&v171 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v205 = (uint64_t)&v171 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v198 = (uint64_t)&v171 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  uint64_t v207 = (uint64_t)&v171 - v41;
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v193 = (uint64_t)&v171 - v43;
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  uint64_t v189 = (uint64_t)&v171 - v45;
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  uint64_t v181 = (uint64_t)&v171 - v47;
  MEMORY[0x1F4188790](v46);
  uint64_t v180 = (uint64_t)&v171 - v48;
  v210 = a1;
  Swift::Int v49 = a1[1];
  Swift::Int v50 = _minimumMergeRunLength(_:)(v49);
  if (v50 >= v49)
  {
    if (v49 < 0) {
      goto LABEL_158;
    }
    if (v49) {
      sub_1C4D2391C(0, v49, 1, v210);
    }
    return;
  }
  Swift::Int v176 = v50;
  uint64_t v174 = sub_1C4D145F8(v49 / 2);
  unint64_t v191 = v51;
  uint64_t v175 = v49;
  if (v49 <= 0) {
    goto LABEL_121;
  }
  v183 = v14;
  uint64_t v52 = 0;
  v200 = (void (**)(char *, uint64_t))(v21 + 8);
  v201 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v53 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v54 = v49;
  v188 = v11;
  __int16 v173 = v17;
  uint64_t v177 = v19;
  uint64_t v204 = v20;
  v194 = v24;
  while (1)
  {
    uint64_t v55 = v52;
    uint64_t v56 = v52 + 1;
    v184 = v53;
    uint64_t v187 = v52;
    uint64_t v206 = v54;
    if (v52 + 1 >= v54)
    {
      uint64_t v62 = v52 + 1;
      uint64_t v63 = v203;
      uint64_t v64 = v198;
    }
    else
    {
      uint64_t v57 = *v210;
      uint64_t v58 = *(void *)(v192 + 72);
      uint64_t v59 = v180;
      sub_1C4D1AEEC(*v210 + v58 * v56, v180);
      uint64_t v197 = v57;
      uint64_t v209 = v58;
      sub_1C4D1AEEC(v57 + v58 * v55, v181);
      sub_1C4D259D8(v59 + *(int *)(v203 + 32), (uint64_t)v19, (uint64_t *)&unk_1EA3CC170);
      int v60 = _s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v19, 1, v20);
      uint64_t v61 = v178;
      if (v60 == 1)
      {
        static Date.distantPast.getter();
        sub_1C4D19490((uint64_t)v19, (uint64_t *)&unk_1EA3CC170);
      }
      else
      {
        (*v201)(v179, v19, v20);
      }
      uint64_t v65 = (uint64_t)v173;
      sub_1C4D259D8(v181 + *(int *)(v203 + 32), (uint64_t)v173, (uint64_t *)&unk_1EA3CC170);
      int v66 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(v65, 1, v20);
      uint64_t v64 = v198;
      if (v66 == 1)
      {
        static Date.distantPast.getter();
        sub_1C4D19490(v65, (uint64_t *)&unk_1EA3CC170);
      }
      else
      {
        (*v201)(v61, (char *)v65, v20);
      }
      uint64_t v67 = v179;
      LODWORD(v202) = static Date.< infix(_:_:)();
      uint64_t v68 = *v200;
      (*v200)(v61, v20);
      v68(v67, v20);
      sub_1C4D1AF50(v181);
      sub_1C4D1AF50(v180);
      uint64_t v62 = v187 + 2;
      uint64_t v54 = v206;
      if (v187 + 2 >= v206)
      {
        uint64_t v63 = v203;
      }
      else
      {
        uint64_t v172 = v2;
        uint64_t v199 = v209 * v56;
        uint64_t v69 = v197;
        uint64_t v70 = v209 * v62;
        uint64_t v63 = v203;
        while (1)
        {
          uint64_t v71 = v62;
          uint64_t v72 = v189;
          sub_1C4D1AEEC(v69 + v70, v189);
          sub_1C4D1AEEC(v69 + v199, v193);
          uint64_t v73 = (uint64_t)v183;
          sub_1C4D259D8(v72 + *(int *)(v63 + 32), (uint64_t)v183, (uint64_t *)&unk_1EA3CC170);
          uint64_t v74 = v204;
          if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v73, 1, v204) == 1)
          {
            static Date.distantPast.getter();
            sub_1C4D19490(v73, (uint64_t *)&unk_1EA3CC170);
          }
          else
          {
            (*v201)(v190, (char *)v73, v74);
          }
          uint64_t v75 = v74;
          sub_1C4D259D8(v193 + *(int *)(v63 + 32), (uint64_t)v11, (uint64_t *)&unk_1EA3CC170);
          int v76 = _s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v11, 1, v74);
          uint64_t v77 = v186;
          if (v76 == 1)
          {
            static Date.distantPast.getter();
            sub_1C4D19490((uint64_t)v11, (uint64_t *)&unk_1EA3CC170);
          }
          else
          {
            (*v201)(v186, v11, v75);
          }
          uint64_t v78 = v190;
          int v79 = static Date.< infix(_:_:)();
          v68(v77, v75);
          v68(v78, v75);
          sub_1C4D1AF50(v193);
          sub_1C4D1AF50(v189);
          if ((v202 ^ v79)) {
            break;
          }
          uint64_t v62 = v71 + 1;
          v69 += v209;
          uint64_t v54 = v206;
          uint64_t v63 = v203;
          if (v71 + 1 >= v206)
          {
            uint64_t v62 = v206;
            uint64_t v20 = v204;
            uint64_t v64 = v198;
            uint64_t v2 = v172;
            goto LABEL_25;
          }
        }
        uint64_t v63 = v203;
        uint64_t v20 = v204;
        uint64_t v64 = v198;
        uint64_t v62 = v71;
        uint64_t v2 = v172;
        uint64_t v54 = v206;
      }
LABEL_25:
      uint64_t v55 = v187;
      if (v202)
      {
        if (v62 < v187) {
          goto LABEL_159;
        }
        if (v187 < v62)
        {
          uint64_t v80 = 0;
          uint64_t v81 = v209 * (v62 - 1);
          uint64_t v82 = v62 * v209;
          uint64_t v83 = v187;
          uint64_t v84 = v187 * v209;
          do
          {
            if (v83 != v62 + v80 - 1)
            {
              uint64_t v85 = v2;
              uint64_t v86 = v62;
              uint64_t v87 = v197;
              if (!v197) {
                goto LABEL_165;
              }
              unint64_t v88 = v197 + v84;
              uint64_t v202 = v197 + v81;
              sub_1C4D24FD4(v197 + v84, v185);
              if (v84 < v81 || v88 >= v87 + v82)
              {
                uint64_t v90 = v202;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v90 = v202;
                if (v84 != v81) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              sub_1C4D24FD4(v185, v90);
              uint64_t v20 = v204;
              uint64_t v62 = v86;
              uint64_t v2 = v85;
            }
            ++v83;
            --v80;
            v81 -= v209;
            v82 -= v209;
            v84 += v209;
          }
          while (v83 < v62 + v80);
          uint64_t v11 = v188;
          uint64_t v63 = v203;
          uint64_t v64 = v198;
          uint64_t v55 = v187;
          uint64_t v54 = v206;
        }
      }
    }
    if (v62 < v54)
    {
      if (__OFSUB__(v62, v55)) {
        goto LABEL_157;
      }
      if (v62 - v55 < v176)
      {
        if (__OFADD__(v55, v176)) {
          goto LABEL_160;
        }
        uint64_t v91 = v206;
        if (v55 + v176 < v206) {
          uint64_t v91 = v55 + v176;
        }
        if (v91 < v55)
        {
LABEL_161:
          __break(1u);
          goto LABEL_162;
        }
        if (v62 != v91)
        {
          uint64_t v172 = v2;
          uint64_t v92 = *(void *)(v192 + 72);
          uint64_t v209 = v92 * (v62 - 1);
          uint64_t v197 = v92;
          uint64_t v93 = v62 * v92;
          uint64_t v182 = v91;
          do
          {
            uint64_t v94 = 0;
            uint64_t v202 = v62;
            uint64_t v199 = v93;
            while (1)
            {
              uint64_t v95 = *v210;
              uint64_t v206 = v93 + v94;
              uint64_t v96 = v93 + v94 + v95;
              uint64_t v97 = v207;
              sub_1C4D1AEEC(v96, v207);
              sub_1C4D1AEEC(v209 + v94 + v95, v64);
              uint64_t v98 = v195;
              sub_1C4D259D8(v97 + *(int *)(v63 + 32), v195, (uint64_t *)&unk_1EA3CC170);
              if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v98, 1, v20) == 1)
              {
                static Date.distantPast.getter();
                sub_1C4D19490(v98, (uint64_t *)&unk_1EA3CC170);
              }
              else
              {
                (*v201)(v208, (char *)v98, v20);
              }
              uint64_t v99 = v196;
              sub_1C4D259D8(v64 + *(int *)(v63 + 32), v196, (uint64_t *)&unk_1EA3CC170);
              if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v99, 1, v20) == 1)
              {
                uint64_t v100 = v194;
                static Date.distantPast.getter();
                sub_1C4D19490(v99, (uint64_t *)&unk_1EA3CC170);
              }
              else
              {
                uint64_t v100 = v194;
                (*v201)(v194, (char *)v99, v20);
              }
              uint64_t v101 = v20;
              int v102 = v208;
              char v103 = static Date.< infix(_:_:)();
              uint64_t v104 = *v200;
              (*v200)(v100, v101);
              v104(v102, v101);
              uint64_t v64 = v198;
              sub_1C4D1AF50(v198);
              sub_1C4D1AF50(v207);
              if ((v103 & 1) == 0) {
                break;
              }
              uint64_t v105 = *v210;
              uint64_t v63 = v203;
              uint64_t v93 = v199;
              if (!*v210) {
                goto LABEL_163;
              }
              uint64_t v106 = v105 + v209 + v94;
              sub_1C4D24FD4(v105 + v199 + v94, v205);
              swift_arrayInitWithTakeFrontToBack();
              sub_1C4D24FD4(v205, v106);
              v94 -= v197;
              ++v55;
              uint64_t v107 = v202;
              uint64_t v20 = v204;
              if (v202 == v55) {
                goto LABEL_63;
              }
            }
            uint64_t v63 = v203;
            uint64_t v20 = v204;
            uint64_t v107 = v202;
            uint64_t v93 = v199;
LABEL_63:
            uint64_t v62 = v107 + 1;
            v209 += v197;
            v93 += v197;
            uint64_t v55 = v187;
          }
          while (v62 != v182);
          uint64_t v62 = v182;
          uint64_t v2 = v172;
          uint64_t v11 = v188;
        }
      }
    }
    if (v62 < v55) {
      goto LABEL_156;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v202 = v62;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v53 = v184;
    }
    else
    {
      sub_1C4D2CAF8(0, *((void *)v184 + 2) + 1, 1, v184);
      uint64_t v53 = v161;
    }
    unint64_t v110 = *((void *)v53 + 2);
    unint64_t v109 = *((void *)v53 + 3);
    unint64_t v111 = v110 + 1;
    if (v110 >= v109 >> 1)
    {
      sub_1C4D2CAF8(v109 > 1, v110 + 1, 1, v53);
      uint64_t v53 = v162;
    }
    *((void *)v53 + 2) = v111;
    v112 = v53 + 32;
    int64_t v113 = &v53[16 * v110 + 32];
    uint64_t v114 = v202;
    *(void *)int64_t v113 = v187;
    *((void *)v113 + 1) = v114;
    if (v110) {
      break;
    }
    unint64_t v111 = 1;
LABEL_113:
    uint64_t v54 = v210[1];
    uint64_t v52 = v202;
    uint64_t v19 = v177;
    if (v202 >= v54) {
      goto LABEL_122;
    }
  }
  while (1)
  {
    unint64_t v115 = v111 - 1;
    if (v111 >= 4)
    {
      uint64_t v120 = &v112[16 * v111];
      uint64_t v121 = *((void *)v120 - 8);
      uint64_t v122 = *((void *)v120 - 7);
      BOOL v126 = __OFSUB__(v122, v121);
      uint64_t v123 = v122 - v121;
      if (v126) {
        goto LABEL_141;
      }
      uint64_t v125 = *((void *)v120 - 6);
      uint64_t v124 = *((void *)v120 - 5);
      BOOL v126 = __OFSUB__(v124, v125);
      uint64_t v118 = v124 - v125;
      char v119 = v126;
      if (v126) {
        goto LABEL_142;
      }
      unint64_t v127 = v111 - 2;
      v128 = &v112[16 * v111 - 32];
      uint64_t v130 = *(void *)v128;
      uint64_t v129 = *((void *)v128 + 1);
      BOOL v126 = __OFSUB__(v129, v130);
      uint64_t v131 = v129 - v130;
      if (v126) {
        goto LABEL_143;
      }
      BOOL v126 = __OFADD__(v118, v131);
      uint64_t v132 = v118 + v131;
      if (v126) {
        goto LABEL_145;
      }
      if (v132 >= v123)
      {
        v150 = &v112[16 * v115];
        uint64_t v152 = *(void *)v150;
        uint64_t v151 = *((void *)v150 + 1);
        BOOL v126 = __OFSUB__(v151, v152);
        uint64_t v153 = v151 - v152;
        if (v126) {
          goto LABEL_151;
        }
        BOOL v143 = v118 < v153;
        goto LABEL_102;
      }
    }
    else
    {
      if (v111 != 3)
      {
        uint64_t v144 = *((void *)v53 + 4);
        uint64_t v145 = *((void *)v53 + 5);
        BOOL v126 = __OFSUB__(v145, v144);
        uint64_t v137 = v145 - v144;
        char v138 = v126;
        goto LABEL_96;
      }
      uint64_t v117 = *((void *)v53 + 4);
      uint64_t v116 = *((void *)v53 + 5);
      BOOL v126 = __OFSUB__(v116, v117);
      uint64_t v118 = v116 - v117;
      char v119 = v126;
    }
    if (v119) {
      goto LABEL_144;
    }
    unint64_t v127 = v111 - 2;
    v133 = &v112[16 * v111 - 32];
    uint64_t v135 = *(void *)v133;
    uint64_t v134 = *((void *)v133 + 1);
    BOOL v136 = __OFSUB__(v134, v135);
    uint64_t v137 = v134 - v135;
    char v138 = v136;
    if (v136) {
      goto LABEL_146;
    }
    v139 = &v112[16 * v115];
    uint64_t v141 = *(void *)v139;
    uint64_t v140 = *((void *)v139 + 1);
    BOOL v126 = __OFSUB__(v140, v141);
    uint64_t v142 = v140 - v141;
    if (v126) {
      goto LABEL_148;
    }
    if (__OFADD__(v137, v142)) {
      goto LABEL_150;
    }
    if (v137 + v142 >= v118)
    {
      BOOL v143 = v118 < v142;
LABEL_102:
      if (v143) {
        unint64_t v115 = v127;
      }
      goto LABEL_104;
    }
LABEL_96:
    if (v138) {
      goto LABEL_147;
    }
    v146 = &v112[16 * v115];
    uint64_t v148 = *(void *)v146;
    uint64_t v147 = *((void *)v146 + 1);
    BOOL v126 = __OFSUB__(v147, v148);
    uint64_t v149 = v147 - v148;
    if (v126) {
      goto LABEL_149;
    }
    if (v149 < v137) {
      goto LABEL_113;
    }
LABEL_104:
    unint64_t v154 = v115 - 1;
    if (v115 - 1 >= v111)
    {
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
    if (!*v210) {
      goto LABEL_164;
    }
    v155 = v53;
    v156 = &v112[16 * v154];
    uint64_t v157 = *(void *)v156;
    v158 = &v112[16 * v115];
    uint64_t v159 = *((void *)v158 + 1);
    sub_1C4D23DA0(*v210 + *(void *)(v192 + 72) * *(void *)v156, *v210 + *(void *)(v192 + 72) * *(void *)v158, *v210 + *(void *)(v192 + 72) * v159, v191);
    if (v2) {
      break;
    }
    if (v159 < v157) {
      goto LABEL_138;
    }
    if (v115 > *((void *)v155 + 2)) {
      goto LABEL_139;
    }
    *(void *)v156 = v157;
    *(void *)&v112[16 * v154 + 8] = v159;
    unint64_t v160 = *((void *)v155 + 2);
    if (v115 >= v160) {
      goto LABEL_140;
    }
    unint64_t v111 = v160 - 1;
    memmove(&v112[16 * v115], v158 + 16, 16 * (v160 - 1 - v115));
    uint64_t v53 = v155;
    *((void *)v155 + 2) = v160 - 1;
    uint64_t v11 = v188;
    uint64_t v20 = v204;
    if (v160 <= 2) {
      goto LABEL_113;
    }
  }
LABEL_119:
  swift_bridgeObjectRelease();
  if (v175 >= -1) {
    goto LABEL_134;
  }
  __break(1u);
LABEL_121:
  uint64_t v53 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v111 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_122:
  if (v111 >= 2)
  {
    uint64_t v163 = *v210;
    while (1)
    {
      unint64_t v164 = v111 - 2;
      if (v111 < 2) {
        break;
      }
      if (!v163) {
        goto LABEL_166;
      }
      uint64_t v165 = (uint64_t)v53;
      uint64_t v166 = *(void *)&v53[16 * v164 + 32];
      uint64_t v167 = *(void *)&v53[16 * v111 + 24];
      sub_1C4D23DA0(v163 + *(void *)(v192 + 72) * v166, v163 + *(void *)(v192 + 72) * *(void *)&v53[16 * v111 + 16], v163 + *(void *)(v192 + 72) * v167, v191);
      if (v2) {
        goto LABEL_119;
      }
      if (v167 < v166) {
        goto LABEL_153;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C4D2CBD0(v165);
        uint64_t v165 = v170;
      }
      if (v164 >= *(void *)(v165 + 16)) {
        goto LABEL_154;
      }
      id v168 = (void *)(v165 + 32 + 16 * v164);
      *id v168 = v166;
      v168[1] = v167;
      unint64_t v169 = *(void *)(v165 + 16);
      if (v111 > v169) {
        goto LABEL_155;
      }
      memmove((void *)(v165 + 32 + 16 * (v111 - 1)), (const void *)(v165 + 32 + 16 * v111), 16 * (v169 - v111));
      uint64_t v53 = (char *)v165;
      *(void *)(v165 + 16) = v169 - 1;
      unint64_t v111 = v169 - 1;
      if (v169 <= 2) {
        goto LABEL_133;
      }
    }
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
    goto LABEL_161;
  }
LABEL_133:
  swift_bridgeObjectRelease();
  if (v175 >= -1)
  {
LABEL_134:
    *(void *)(v174 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
}

uint64_t sub_1C4D2391C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  Swift::Int v49 = a4;
  uint64_t v39 = a1;
  uint64_t v6 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v44 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v45 = (uint64_t)&v37 - v9;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v43 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v51 = (char *)&v37 - v14;
  uint64_t v15 = type metadata accessor for CKLogEvent();
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v48 = (uint64_t)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v54 = (uint64_t)&v37 - v19;
  uint64_t result = MEMORY[0x1F4188790](v18);
  uint64_t v50 = (uint64_t)&v37 - v22;
  uint64_t v47 = a3;
  uint64_t v38 = a2;
  if (a3 != a2)
  {
    uint64_t v23 = *(void *)(v21 + 72);
    uint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v11 + 32);
    uint64_t v41 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v46 = v23;
    uint64_t v52 = v23 * v47;
    uint64_t v53 = v23 * (v47 - 1);
    uint64_t v42 = v15;
    while (2)
    {
      uint64_t v24 = 0;
      uint64_t v25 = v39;
      do
      {
        uint64_t v26 = v50;
        uint64_t v27 = *v49;
        sub_1C4D1AEEC(v52 + v24 + *v49, v50);
        sub_1C4D1AEEC(v53 + v24 + v27, v54);
        uint64_t v28 = v45;
        sub_1C4D259D8(v26 + *(int *)(v15 + 32), v45, (uint64_t *)&unk_1EA3CC170);
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v28, 1, v10) == 1)
        {
          static Date.distantPast.getter();
          sub_1C4D19490(v28, (uint64_t *)&unk_1EA3CC170);
        }
        else
        {
          (*v40)(v51, v28, v10);
        }
        uint64_t v30 = v43;
        uint64_t v29 = v44;
        sub_1C4D259D8(v54 + *(int *)(v15 + 32), v44, (uint64_t *)&unk_1EA3CC170);
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v29, 1, v10) == 1)
        {
          static Date.distantPast.getter();
          sub_1C4D19490(v29, (uint64_t *)&unk_1EA3CC170);
        }
        else
        {
          (*v40)(v30, v29, v10);
        }
        uint64_t v31 = v51;
        char v32 = static Date.< infix(_:_:)();
        uint64_t v33 = v30;
        uint64_t v34 = *v41;
        (*v41)(v33, v10);
        v34(v31, v10);
        sub_1C4D1AF50(v54);
        uint64_t result = sub_1C4D1AF50(v50);
        uint64_t v15 = v42;
        if ((v32 & 1) == 0) {
          break;
        }
        uint64_t v35 = *v49;
        if (!*v49)
        {
          __break(1u);
          return result;
        }
        uint64_t v36 = v35 + v53 + v24;
        sub_1C4D24FD4(v35 + v52 + v24, v48);
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = sub_1C4D24FD4(v48, v36);
        v24 -= v46;
        ++v25;
      }
      while (v47 != v25);
      v53 += v46;
      v52 += v46;
      if (++v47 != v38) {
        continue;
      }
      break;
    }
  }
  return result;
}

void sub_1C4D23DA0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v99 = a3;
  uint64_t v7 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v95 = (uint64_t)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v97 = (uint64_t)&v91 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  unint64_t v94 = (unint64_t)&v91 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v96 = (void (**)(char *, uint64_t))((char *)&v91 - v14);
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v93 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  int v102 = (char *)&v91 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (void (**)(char *, uint64_t, uint64_t))((char *)&v91 - v22);
  MEMORY[0x1F4188790](v21);
  uint64_t v101 = (char *)&v91 - v24;
  uint64_t v25 = type metadata accessor for CKLogEvent();
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  uint64_t v106 = (char *)&v91 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  char v103 = (uint64_t *)((char *)&v91 - v29);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  char v32 = (char *)&v91 - v31;
  MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v91 - v33;
  uint64_t v36 = *(void *)(v35 + 72);
  if (!v36)
  {
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  int64_t v37 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v36 == -1) {
    goto LABEL_91;
  }
  int64_t v39 = v99 - a2;
  if (v99 - a2 == 0x8000000000000000 && v36 == -1) {
    goto LABEL_92;
  }
  uint64_t v91 = v16;
  uint64_t v92 = v23;
  unint64_t v98 = a4;
  uint64_t v41 = v37 / v36;
  uint64_t v42 = v36;
  uint64_t v43 = v39 / v36;
  uint64_t v100 = v25;
  uint64_t v104 = v36;
  if (v37 / v36 >= v39 / v36)
  {
    unint64_t v47 = v98;
    sub_1C4D29778(a2, v39 / v36, v98);
    unint64_t v45 = v47 + v43 * v42;
    if (v43 * v42 < 1 || a1 >= a2)
    {
      unint64_t v44 = v47;
    }
    else
    {
      uint64_t v64 = -v42;
      uint64_t v92 = (void (**)(char *, uint64_t, uint64_t))(v91 + 32);
      uint64_t v96 = (void (**)(char *, uint64_t))(v91 + 8);
      unint64_t v65 = v99;
      unint64_t v94 = a1;
      do
      {
        int v66 = (char *)v65;
        unint64_t v105 = v45;
        unint64_t v67 = v45 + v64;
        uint64_t v68 = v103;
        sub_1C4D1AEEC(v45 + v64, (uint64_t)v103);
        uint64_t v69 = (char *)(a2 + v64);
        sub_1C4D1AEEC(a2 + v64, (uint64_t)v106);
        uint64_t v70 = (uint64_t)v68 + *(int *)(v25 + 32);
        uint64_t v71 = v97;
        sub_1C4D259D8(v70, v97, (uint64_t *)&unk_1EA3CC170);
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v71, 1, v15) == 1)
        {
          static Date.distantPast.getter();
          sub_1C4D19490(v71, (uint64_t *)&unk_1EA3CC170);
        }
        else
        {
          (*v92)(v102, v71, v15);
        }
        uint64_t v72 = v95;
        uint64_t v101 = (char *)a2;
        sub_1C4D259D8((uint64_t)&v106[*(int *)(v25 + 32)], v95, (uint64_t *)&unk_1EA3CC170);
        int v73 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(v72, 1, v15);
        unint64_t v99 = v67;
        uint64_t v74 = v93;
        if (v73 == 1)
        {
          static Date.distantPast.getter();
          sub_1C4D19490(v72, (uint64_t *)&unk_1EA3CC170);
        }
        else
        {
          (*v92)(v93, v72, v15);
        }
        uint64_t v75 = v64;
        unint64_t v65 = (unint64_t)&v66[v64];
        int v76 = v102;
        char v77 = static Date.< infix(_:_:)();
        uint64_t v78 = v74;
        int v79 = *v96;
        (*v96)(v78, v15);
        uint64_t v80 = v76;
        uint64_t v81 = v15;
        v79(v80, v15);
        sub_1C4D1AF50((uint64_t)v106);
        sub_1C4D1AF50((uint64_t)v103);
        if (v77)
        {
          uint64_t v25 = v100;
          BOOL v82 = v66 < v101 || v65 >= (unint64_t)v101;
          unint64_t v83 = v94;
          if (v82)
          {
            swift_arrayInitWithTakeFrontToBack();
            uint64_t v84 = v69;
            unint64_t v44 = v98;
            unint64_t v45 = v105;
            uint64_t v64 = v75;
          }
          else
          {
            uint64_t v64 = v75;
            if (v66 != v101) {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v84 = v69;
            unint64_t v44 = v98;
            unint64_t v45 = v105;
          }
        }
        else
        {
          BOOL v85 = (unint64_t)v66 < v105 || v65 >= v105;
          uint64_t v25 = v100;
          unint64_t v83 = v94;
          if (v85)
          {
            unint64_t v86 = v99;
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v45 = v86;
            unint64_t v44 = v98;
            uint64_t v64 = v75;
            uint64_t v15 = v81;
          }
          else
          {
            unint64_t v44 = v98;
            uint64_t v64 = v75;
            if (v66 == (char *)v105)
            {
              unint64_t v45 = v99;
            }
            else
            {
              unint64_t v87 = v99;
              swift_arrayInitWithTakeBackToFront();
              unint64_t v45 = v87;
            }
          }
          uint64_t v84 = v101;
        }
        BOOL v88 = v45 > v44 && (unint64_t)v84 > v83;
        a2 = (unint64_t)v84;
      }
      while (v88);
    }
  }
  else
  {
    unint64_t v44 = v98;
    sub_1C4D29778(a1, v37 / v36, v98);
    unint64_t v45 = v44 + v41 * v42;
    if (v41 * v42 >= 1 && a2 < v99)
    {
      int v102 = (char *)(v91 + 32);
      char v103 = (void *)(v91 + 8);
      uint64_t v106 = v32;
      unint64_t v105 = v44 + v41 * v42;
      do
      {
        sub_1C4D1AEEC(a2, (uint64_t)v34);
        sub_1C4D1AEEC(v44, (uint64_t)v32);
        Swift::Int v49 = v96;
        sub_1C4D259D8((uint64_t)&v34[*(int *)(v25 + 32)], (uint64_t)v96, (uint64_t *)&unk_1EA3CC170);
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v49, 1, v15) == 1)
        {
          static Date.distantPast.getter();
          sub_1C4D19490((uint64_t)v49, (uint64_t *)&unk_1EA3CC170);
        }
        else
        {
          (*(void (**)(char *, void (**)(char *, uint64_t), uint64_t))v102)(v101, v49, v15);
        }
        uint64_t v50 = v94;
        sub_1C4D259D8((uint64_t)&v32[*(int *)(v25 + 32)], v94, (uint64_t *)&unk_1EA3CC170);
        unint64_t v51 = v44;
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v50, 1, v15) == 1)
        {
          uint64_t v52 = v92;
          static Date.distantPast.getter();
          sub_1C4D19490(v50, (uint64_t *)&unk_1EA3CC170);
        }
        else
        {
          uint64_t v52 = v92;
          (*(void (**)(void, uint64_t, uint64_t))v102)(v92, v50, v15);
        }
        uint64_t v53 = v101;
        char v54 = static Date.< infix(_:_:)();
        uint64_t v55 = v52;
        char v56 = v54;
        uint64_t v57 = (void (*)(char *, uint64_t))*v103;
        ((void (*)(void (**)(char *, uint64_t, uint64_t), uint64_t))*v103)(v55, v15);
        v57(v53, v15);
        char v32 = v106;
        sub_1C4D1AF50((uint64_t)v106);
        sub_1C4D1AF50((uint64_t)v34);
        if ((v56 & 1) == 0)
        {
          unint64_t v61 = v51;
          unint64_t v44 = v51 + v104;
          if (a1 < v51 || a1 >= v44)
          {
            uint64_t v25 = v100;
            swift_arrayInitWithTakeFrontToBack();
          }
          else
          {
            uint64_t v25 = v100;
            if (a1 != v61) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v58 = a2;
          goto LABEL_48;
        }
        unint64_t v58 = a2 + v104;
        if (a1 < a2 || a1 >= v58)
        {
          uint64_t v60 = v100;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          if (a1 == a2)
          {
            unint64_t v44 = v51;
            uint64_t v25 = v100;
            goto LABEL_48;
          }
          uint64_t v60 = v100;
          swift_arrayInitWithTakeBackToFront();
        }
        unint64_t v44 = v51;
        uint64_t v25 = v60;
LABEL_48:
        unint64_t v45 = v105;
        a1 += v104;
        BOOL v63 = v44 >= v105 || v58 >= v99;
        a2 = v58;
      }
      while (!v63);
    }
    a2 = a1;
  }
  int64_t v89 = v45 - v44;
  if (v104 != -1 || v89 != 0x8000000000000000)
  {
    sub_1C4D29778(v44, v89 / v104, a2);
    return;
  }
LABEL_93:
  __break(1u);
}

uint64_t sub_1C4D24650(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_1C4D21F44(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_1C4D10728(&qword_1EA3CBD78);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_1C4D21F44(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = v20[7];
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_1C4D24B64(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1C4D24778(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1C4D2490C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1C4D25D98, &qword_1EA3CBDF8);
}

uint64_t sub_1C4D247A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v10 = *v4;
  sub_1C4D21F44(a2, a3);
  sub_1C4D25DBC();
  if (v13)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v14 = v11;
  char v15 = v12;
  sub_1C4D10728(&qword_1EA3CBE00);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v10)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_1C4D21F44(a2, a3);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  unint64_t v18 = (void *)*v5;
  if (v15)
  {
    uint64_t v19 = v18[7];
    uint64_t v20 = v19 + *(void *)(*(void *)(type metadata accessor for CKLogEvent() - 8) + 72) * v14;
    return sub_1C4D25850(a1, v20);
  }
  else
  {
    sub_1C4D25038(v14, a2, a3, a1, v18);
    return swift_bridgeObjectRetain();
  }
}

unint64_t sub_1C4D248E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1C4D2490C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1C4D21FBC, &qword_1EA3CBDE0);
}

unint64_t sub_1C4D2490C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(uint64_t), uint64_t *a6)
{
  unint64_t v11 = v7;
  sub_1C4D25DF0();
  Swift::Int v14 = *v7;
  v16(v15);
  sub_1C4D25DBC();
  if (v19)
  {
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v20 = v17;
  char v21 = v18;
  sub_1C4D10728(a6);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14)) {
    goto LABEL_5;
  }
  uint64_t v22 = a5(a3);
  if ((v21 & 1) != (v23 & 1))
  {
LABEL_9:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v20 = v22;
LABEL_5:
  uint64_t v24 = (void *)*v11;
  if ((v21 & 1) == 0) {
    return sub_1C4D250D0(v20, a3, v8, v6, v24);
  }
  uint64_t v25 = (uint64_t *)(v24[7] + 16 * v20);
  unint64_t result = swift_bridgeObjectRelease();
  *uint64_t v25 = v8;
  v25[1] = v6;
  return result;
}

void sub_1C4D24A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = v6;
  Swift::Int v14 = *v6;
  sub_1C4D2203C(a2, a3, a4, a5);
  sub_1C4D25DBC();
  if (v17)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v18 = v15;
  char v19 = v16;
  sub_1C4D10728(&qword_1EA3CBDC8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a6 & 1, v14)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_1C4D2203C(a2, a3, a4, a5);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = (void *)*v7;
  if (v19)
  {
    uint64_t v23 = v22[7];

    *(void *)(v23 + 8 * v18) = a1;
  }
  else
  {
    sub_1C4D25168(v18, a2, a3, a4, a5, a1, v22);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
}

unint64_t sub_1C4D24B64(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t type metadata accessor for CKLogParser.StreamState()
{
  return self;
}

uint64_t sub_1C4D24BD0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1C4D24C0C()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0);
}

uint64_t sub_1C4D24C54(void *a1)
{
  return sub_1C4D1D828(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1C4D24C60(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for CKLogParser()
{
  return self;
}

uint64_t sub_1C4D24CCC(uint64_t a1)
{
  return sub_1C4D1E09C(a1, *(void **)(v1 + 16), *(uint64_t (**)(void))(v1 + 24));
}

uint64_t method lookup function for CKLogParser(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CKLogParser);
}

uint64_t dispatch thunk of CKLogParser.logEvents(archiveURL:from:)()
{
  sub_1C4D16C30();
  sub_1C4D25DF0();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v1 + 88) + **(int **)(*(void *)v1 + 88));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v3;
  void *v3 = v2;
  v3[1] = sub_1C4D24DF0;
  uint64_t v4 = sub_1C4D25E4C();
  return v6(v4, v0);
}

uint64_t sub_1C4D24DF0()
{
  sub_1C4D16B80();
  uint64_t v2 = v1;
  sub_1C4D16B40();
  uint64_t v3 = *v0;
  sub_1C4D16B58();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t dispatch thunk of CKLogParser.logEvents(stream:activation:)()
{
  sub_1C4D16C30();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  Swift::Int v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v0 + 96)
                                                          + **(int **)(*(void *)v0 + 96));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  void *v8 = v1;
  v8[1] = sub_1C4D25DA4;
  return v10(v7, v5, v3);
}

uint64_t sub_1C4D24FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CKLogEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C4D25038(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  void *v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for CKLogEvent();
  uint64_t result = sub_1C4D24FD4(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

unint64_t sub_1C4D250D0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_1C4D25118(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  a8[(result >> 6) + 8] |= 1 << result;
  uint64_t v8 = (void *)(a8[6] + 16 * result);
  void *v8 = a2;
  v8[1] = a3;
  uint64_t v9 = (void *)(a8[7] + 32 * result);
  *uint64_t v9 = a4;
  v9[1] = a5;
  v9[2] = a6;
  v9[3] = a7;
  uint64_t v10 = a8[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a8[2] = v12;
  }
  return result;
}

unint64_t sub_1C4D25168(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  BOOL v7 = (void *)(a7[6] + 32 * result);
  *BOOL v7 = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  *(void *)(a7[7] + 8 * result) = a6;
  uint64_t v8 = a7[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a7[2] = v10;
  }
  return result;
}

uint64_t sub_1C4D251B4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1C4D25208(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_1C4D25268(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CKLogEvent();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v10);
  unint64_t v15 = (char *)&v30 - v14;
  uint64_t v35 = a4;
  uint64_t v18 = *(void *)(a4 + 64);
  uint64_t v17 = a4 + 64;
  uint64_t v16 = v18;
  uint64_t v19 = -1 << *(unsigned char *)(v17 - 32);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1 << -(char)v19);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v35;
    a1[1] = v17;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    int64_t v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v32 = -1 << *(unsigned char *)(v17 - 32);
  uint64_t v33 = a1;
  int64_t v22 = 0;
  uint64_t v23 = 0;
  int64_t v34 = (unint64_t)(63 - v19) >> 6;
  int64_t v31 = v34 - 1;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    uint64_t v29 = *(void *)(v9 + 72);
    sub_1C4D1AEEC(*(void *)(v35 + 56) + v29 * v25, (uint64_t)v12);
    sub_1C4D24FD4((uint64_t)v12, (uint64_t)v15);
    uint64_t result = sub_1C4D24FD4((uint64_t)v15, a2);
    if (v23 == a3) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    unint64_t v21 = 0;
    int64_t v22 = v26;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v34) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    unint64_t v21 = 0;
    int64_t v22 = v26 + 2;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v22;
    goto LABEL_18;
  }
  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    unint64_t v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v26 >= v34)
    {
      unint64_t v21 = 0;
      int64_t v22 = v31;
      goto LABEL_36;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void (*sub_1C4D25534(void *a1, unint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1C4D255E4(v6, a2, a3);
  return sub_1C4D2559C;
}

void sub_1C4D2559C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1C4D255E4(void *a1, unint64_t a2, uint64_t a3))(id *a1)
{
  unint64_t v6 = a3 & 0xC000000000000001;
  sub_1C4D21F20(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6) {
    id v7 = (id)MEMORY[0x1C8787DF0](a2, a3);
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return sub_1C4D25664;
}

void sub_1C4D25664(id *a1)
{
}

uint64_t sub_1C4D2566C(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_1C4D257FC();
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            sub_1C4D10728(&qword_1EA3CBDD0);
            uint64_t v10 = sub_1C4D25534(v13, i, a3);
            id v12 = *v11;
            ((void (*)(void *, void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1C4D21D74((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10), v5);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1C4D257FC()
{
  unint64_t result = qword_1EA3CBDD8;
  if (!qword_1EA3CBDD8)
  {
    sub_1C4D17780(&qword_1EA3CBDD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CBDD8);
  }
  return result;
}

uint64_t sub_1C4D25850(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CKLogEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C4D258B4()
{
  sub_1C4D10728(&qword_1EA3CBDF0);
  sub_1C4D1B074();
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return MEMORY[0x1F4186498](v0);
}

uint64_t sub_1C4D25940()
{
  sub_1C4D25DF0();
  sub_1C4D10728(&qword_1EA3CBDF0);
  return sub_1C4D1E25C();
}

uint64_t sub_1C4D259C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1C4D259D0()
{
  return swift_release();
}

uint64_t sub_1C4D259D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1C4D10728(a3);
  sub_1C4D1B074();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_1C4D25A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void *sub_1C4D25A9C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t destroy for CKLogParser.LogFilter(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for CKLogParser.LogFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 56);
  long long v10 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v10;
  *(void *)(a1 + 56) = v6;
  id v7 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = (id)v10;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CKLogParser.LogFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v7 = *(void **)(a2 + 40);
  id v8 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v7;
  id v9 = v7;

  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for CKLogParser.LogFilter(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CKLogParser.LogFilter(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  id v6 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CKLogParser.LogFilter(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CKLogParser.LogFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKLogParser.LogFilter()
{
  return &type metadata for CKLogParser.LogFilter;
}

void sub_1C4D25E18(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= 1 << v1;
}

uint64_t sub_1C4D25E30()
{
  return swift_task_alloc();
}

uint64_t sub_1C4D25E4C()
{
  return v0;
}

uint64_t sub_1C4D25E58()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_1C4D25E70()
{
  return v0;
}

uint64_t sub_1C4D25E7C()
{
  return v0;
}

uint64_t sub_1C4D25E90()
{
  char v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR___CKDTrafficLogParser_lock);
  uint64_t v2 = v1 + 4;
  long long v3 = v1 + 8;
  os_unfair_lock_lock(v1 + 8);
  sub_1C4D25EF8(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1C4D25EF8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

void sub_1C4D25F18()
{
  sub_1C4D2E824(OBJC_IVAR___CKDTrafficLogParser_lock);
  sub_1C4D26054(v0);
  os_unfair_lock_unlock(v1);
}

void *sub_1C4D25F74(void *result, uint64_t a2)
{
  long long v3 = result;
  long long v4 = (void *)*result;
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v7 = (uint64_t *)(a2 + 40);
    while (1)
    {
      uint64_t v8 = *v7;
      v9[0] = *(v7 - 1);
      v9[1] = v8;
      swift_bridgeObjectRetain();
      sub_1C4D26070(&v10, v9);
      if (v2) {
        break;
      }
      v7 += 2;
      swift_bridgeObjectRelease();
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        __n128 result = (void *)swift_bridgeObjectRelease();
        long long v4 = v10;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  else
  {
LABEL_6:
    void *v3 = v4;
  }
  return result;
}

void *sub_1C4D26054(void *a1)
{
  return sub_1C4D25F74(a1, *(void *)(v1 + 16));
}

uint64_t sub_1C4D26070(void **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = (void *)a2[1];
  if (qword_1EBBCD700 != -1) {
    swift_once();
  }
  sub_1C4D2E110();
  uint64_t v5 = (void *)Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)();
  id v6 = v5;
  if (v5[2] != 4)
  {
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(59);
    v20._uint64_t countAndFlagsBits = 0xD000000000000035;
    v20._object = (void *)0x80000001C50826A0;
    String.append(_:)(v20);
    uint64_t v21 = qword_1EBBCDCB8;
    int64_t v22 = (void *)unk_1EBBCDCC0;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v21;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    unint64_t v24 = 8250;
    unint64_t v25 = 0xE200000000000000;
LABEL_10:
    String.append(_:)(*(Swift::String *)&v24);
LABEL_18:
    v34._uint64_t countAndFlagsBits = v3;
    v34._object = v4;
    String.append(_:)(v34);
    related decl 'e' for CKErrorCode.init(_:description:)();
    return swift_willThrow();
  }
  uint64_t v7 = v5[4];
  uint64_t v8 = v5[5];
  uint64_t v9 = v5[6];
  uint64_t v10 = v5[7];
  swift_bridgeObjectRetain();
  uint64_t v58 = MEMORY[0x1C8787A30](v7, v8, v9, v10);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  if (v6[2] < 2uLL)
  {
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v60 = v12;
  uint64_t v13 = v6[8];
  uint64_t v14 = v6[9];
  if ((v14 ^ (unint64_t)v13) < 0x4000) {
    goto LABEL_17;
  }
  unint64_t v15 = v6[10];
  unint64_t v16 = v6[11];
  uint64_t v17 = sub_1C4D2E15C(v6[8], v6[9], v15, v16, 10);
  if ((v18 & 0x100) == 0)
  {
    if ((v18 & 1) == 0)
    {
      uint64_t v19 = (unsigned __int8 *)v17;
      goto LABEL_12;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_1C4D2CBE4(v13, v14, v15, v16, 10);
  char v27 = v26;
  swift_bridgeObjectRelease();
  if (v27) {
    goto LABEL_17;
  }
LABEL_12:
  if (v6[2] < 3uLL)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v29 = v6[12];
  uint64_t v28 = v6[13];
  if ((v28 ^ (unint64_t)v29) < 0x4000)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(52);
    unint64_t v24 = 0xD000000000000032;
    unint64_t v25 = 0x80000001C5082710;
    goto LABEL_10;
  }
  unint64_t v30 = v6[14];
  unint64_t v31 = v6[15];
  uint64_t v32 = sub_1C4D2E15C(v6[12], v6[13], v30, v31, 10);
  if ((v33 & 0x100) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v57 = sub_1C4D2CBE4(v29, v28, v30, v31, 10);
    char v37 = v36;
    swift_bridgeObjectRelease();
    if (v37) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v57 = (unsigned __int8 *)v32;
    if (v33) {
      goto LABEL_16;
    }
  }
  if (v6[2] < 4uLL) {
    goto LABEL_30;
  }
  uint64_t v38 = v6[16];
  uint64_t v39 = v6[17];
  uint64_t v40 = v6[18];
  uint64_t v41 = v6[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = MEMORY[0x1C8787A30](v38, v39, v40, v41);
  uint64_t v55 = v43;
  uint64_t v56 = v42;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v45 = *a1;
  uint64_t v59 = *a1;
  *a1 = (void *)0x8000000000000000;
  unint64_t v46 = sub_1C4D21F44(v58, v60);
  uint64_t v48 = v45[2];
  BOOL v49 = (v47 & 1) == 0;
  Swift::Int v50 = v48 + v49;
  if (__OFADD__(v48, v49))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  unint64_t v51 = v46;
  char v52 = v47;
  sub_1C4D10728(&qword_1EA3CBE30);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v50))
  {
    unint64_t v53 = sub_1C4D21F44(v58, v60);
    if ((v52 & 1) == (v54 & 1))
    {
      unint64_t v51 = v53;
      goto LABEL_25;
    }
LABEL_32:
    swift_bridgeObjectRelease_n();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_25:
  *a1 = v59;
  swift_bridgeObjectRelease();
  if ((v52 & 1) == 0)
  {
    sub_1C4D25118(v51, v58, v60, v58, v60, (uint64_t)v57, MEMORY[0x1E4FBC868], *a1);
    swift_bridgeObjectRetain_n();
  }
  sub_1C4D35208(v56, v55, (uint64_t)v19);
  return swift_bridgeObjectRelease_n();
}

void sub_1C4D265F0()
{
  swift_getObjectType();
  sub_1C4D2E824(OBJC_IVAR___CKDTrafficLogParser_lock);
  sub_1C4D273B8(v1, &v3);
  os_unfair_lock_unlock(v2);
  if (!v0)
  {
    CKCheckedUnsafeObjectTransfer.extractValue()();
    swift_release();
  }
}

uint64_t sub_1C4D26678@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  BOOL v126 = a2;
  uint64_t v3 = type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
  MEMORY[0x1F4188790](v3 - 8);
  v128 = (uint64_t *)((char *)&v123 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for PartialTrafficLog.RequestMetadata(0);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v127 = (uint64_t *)((char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v132 = type metadata accessor for PartialTrafficLog(0);
  uint64_t v130 = *(void *)(v132 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v132);
  uint64_t v135 = (uint64_t *)((char *)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  BOOL v136 = (uint64_t *)((char *)&v123 - v10);
  MEMORY[0x1F4188790](v9);
  uint64_t v133 = (uint64_t)&v123 - v11;
  uint64_t v134 = a1;
  sub_1C4D158DC(v138, *a1);
  uint64_t v13 = v138[0];
  uint64_t v12 = v138[1];
  int64_t v14 = v138[3];
  unint64_t v15 = v138[4];
  int64_t v16 = (unint64_t)(v138[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v17 = MEMORY[0x1E4FBC860];
  while (v15)
  {
    unint64_t v18 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v19 = v18 | (v14 << 6);
LABEL_22:
    unint64_t v25 = (unint64_t *)(*(void *)(v13 + 56) + 32 * v19);
    unint64_t v27 = v25[2];
    unint64_t v26 = v25[3];
    if (*(void *)(v26 + 16) == v27)
    {
      unint64_t v28 = v25[1];
      unint64_t v131 = *v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v137[0] = v17;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1C4D1805C(0, *(void *)(v17 + 16) + 1, 1);
        uint64_t v17 = v137[0];
      }
      uint64_t v30 = v17;
      unint64_t v31 = *(void *)(v17 + 16);
      unint64_t v32 = *(void *)(v30 + 24);
      unint64_t v33 = v31 + 1;
      if (v31 >= v32 >> 1)
      {
        unint64_t v124 = v28;
        unint64_t v125 = v31 + 1;
        sub_1C4D1805C(v32 > 1, v31 + 1, 1);
        unint64_t v33 = v125;
        unint64_t v28 = v124;
        uint64_t v30 = v137[0];
      }
      *(void *)(v30 + 16) = v33;
      Swift::String v34 = (void *)(v30 + 32 * v31);
      v34[4] = v131;
      v34[5] = v28;
      v34[6] = v27;
      v34[7] = v26;
      uint64_t v17 = v30;
    }
  }
  int64_t v20 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    unint64_t v122 = swift_bridgeObjectRetain();
    uint64_t v119 = (uint64_t)sub_1C4D227A0(v122);
    swift_bridgeObjectRelease();
LABEL_105:
    v137[0] = v119;
    uint64_t v120 = v134;
    sub_1C4D29DF0(v137);
    if (v120)
    {
LABEL_121:
      swift_release();
      __break(1u);
      JUMPOUT(0x1C4D2739CLL);
    }
    swift_bridgeObjectRelease();
    sub_1C4D10728(&qword_1EA3CBE28);
    swift_allocObject();
    uint64_t result = CKCheckedUnsafeObjectTransfer.init(_:)();
    uint64_t *v126 = result;
    return result;
  }
  uint64_t v21 = v134;
  if (v20 >= v16) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v12 + 8 * v20);
  int64_t v23 = v14 + 1;
  if (v22) {
    goto LABEL_21;
  }
  int64_t v23 = v14 + 2;
  if (v14 + 2 >= v16) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v12 + 8 * v23);
  if (v22) {
    goto LABEL_21;
  }
  int64_t v23 = v14 + 3;
  if (v14 + 3 >= v16) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v12 + 8 * v23);
  if (v22) {
    goto LABEL_21;
  }
  int64_t v23 = v14 + 4;
  if (v14 + 4 >= v16) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v12 + 8 * v23);
  if (v22) {
    goto LABEL_21;
  }
  int64_t v23 = v14 + 5;
  if (v14 + 5 >= v16) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v12 + 8 * v23);
  if (v22) {
    goto LABEL_21;
  }
  int64_t v23 = v14 + 6;
  if (v14 + 6 >= v16) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v12 + 8 * v23);
  if (v22)
  {
LABEL_21:
    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v23 << 6);
    int64_t v14 = v23;
    goto LABEL_22;
  }
  int64_t v24 = v14 + 7;
  while (v24 < v16)
  {
    unint64_t v22 = *(void *)(v12 + 8 * v24++);
    if (v22)
    {
      int64_t v23 = v24 - 1;
      goto LABEL_21;
    }
  }
LABEL_28:
  swift_release();
  uint64_t v35 = *(void *)(v17 + 16);
  if (!v35) {
    goto LABEL_40;
  }
  swift_retain();
  unint64_t v131 = v17;
  uint64_t v36 = v17 + 56;
  do
  {
    uint64_t v37 = *(void *)(v36 - 24);
    uint64_t v38 = *(void *)(v36 - 16);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1C4D21F44(v37, v38);
    LOBYTE(v37) = v39;
    swift_bridgeObjectRelease();
    if (v37)
    {
      char v40 = swift_isUniquelyReferenced_nonNull_native();
      v137[0] = *v21;
      uint64_t v41 = v137[0];
      uint64_t *v21 = 0x8000000000000000;
      Swift::Int v42 = *(void *)(v41 + 24);
      sub_1C4D10728(&qword_1EA3CBE30);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(v40, v42);
      uint64_t v43 = v137[0];
      swift_bridgeObjectRelease();
      _NativeDictionary._delete(at:)();
      uint64_t *v21 = v43;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    v36 += 32;
    --v35;
  }
  while (v35);
  unint64_t v44 = v131;
  swift_release();
  uint64_t v45 = *(void *)(v44 + 16);
  unint64_t v139 = MEMORY[0x1E4FBC860];
  if (!v45)
  {
LABEL_40:
    swift_release();
    unint64_t v54 = MEMORY[0x1E4FBC860];
    uint64_t v48 = v133;
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  uint64_t v46 = 0;
  char v47 = (uint64_t *)(v44 + 56);
  uint64_t v48 = v133;
  while (1)
  {
    uint64_t v49 = v46 + 1;
    if (__OFADD__(v46, 1)) {
      goto LABEL_117;
    }
    uint64_t v50 = *(v47 - 1);
    uint64_t v51 = *v47;
    uint64_t v52 = *(v47 - 2);
    v137[0] = *(v47 - 3);
    v137[1] = v52;
    v137[2] = v50;
    v137[3] = v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v53 = v129;
    sub_1C4D17B4C((uint64_t)&v139, v137);
    uint64_t v129 = v53;
    if (v53) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v47 += 4;
    ++v46;
    if (v49 == v45)
    {
      swift_release_n();
      unint64_t v54 = v139;
      uint64_t v21 = v134;
LABEL_41:
      uint64_t v55 = (void *)v21[1];
      uint64_t v56 = *(void *)(v54 + 16);
      if (!v56)
      {
        swift_bridgeObjectRetain();
        goto LABEL_64;
      }
      unint64_t v131 = (*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80);
      uint64_t v57 = v54 + v131;
      uint64_t v130 = *(void *)(v130 + 72);
      swift_bridgeObjectRetain();
      unint64_t v125 = v54;
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1C4D147F0(v57, v48);
        sub_1C4D147F0(v48, (uint64_t)v136);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
          case 5u:
            uint64_t v58 = *v136;
            uint64_t v59 = v136[1];
            sub_1C4D16298(v136[2], v136[3]);
            break;
          case 2u:
          case 6u:
            uint64_t v58 = *v136;
            uint64_t v59 = v136[1];
            break;
          case 3u:
            uint64_t v60 = type metadata accessor for PartialTrafficLog.ResponseMetadata;
            unint64_t v61 = type metadata accessor for PartialTrafficLog.ResponseMetadata;
            uint64_t v62 = v136;
            BOOL v63 = v128;
            goto LABEL_49;
          case 4u:
            uint64_t v58 = *v136;
            uint64_t v59 = v136[1];
            swift_bridgeObjectRelease();
            break;
          default:
            uint64_t v60 = type metadata accessor for PartialTrafficLog.RequestMetadata;
            unint64_t v61 = type metadata accessor for PartialTrafficLog.RequestMetadata;
            uint64_t v62 = v136;
            BOOL v63 = v127;
LABEL_49:
            sub_1C4D2DD34((uint64_t)v62, (uint64_t)v63, (void (*)(void))v60);
            uint64_t v58 = *v63;
            uint64_t v59 = v63[1];
            swift_bridgeObjectRetain();
            sub_1C4D2DD94((uint64_t)v63, (void (*)(void))v61);
            break;
        }
        sub_1C4D147F0(v48, (uint64_t)v135);
        char v64 = swift_isUniquelyReferenced_nonNull_native();
        v137[0] = (uint64_t)v55;
        unint64_t v65 = sub_1C4D21F44(v58, v59);
        uint64_t v67 = v55[2];
        BOOL v68 = (v66 & 1) == 0;
        Swift::Int v69 = v67 + v68;
        if (__OFADD__(v67, v68)) {
          goto LABEL_109;
        }
        unint64_t v70 = v65;
        char v71 = v66;
        sub_1C4D10728(&qword_1EA3CBE20);
        Swift::Bool v72 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v64, v69);
        uint64_t v55 = (void *)v137[0];
        if (v72)
        {
          unint64_t v73 = sub_1C4D21F44(v58, v59);
          if ((v71 & 1) != (v74 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            goto LABEL_121;
          }
          unint64_t v70 = v73;
        }
        swift_bridgeObjectRelease();
        if ((v71 & 1) == 0)
        {
          v55[(v70 >> 6) + 8] |= 1 << v70;
          uint64_t v75 = (uint64_t *)(v55[6] + 16 * v70);
          uint64_t *v75 = v58;
          v75[1] = v59;
          *(void *)(v55[7] + 8 * v70) = MEMORY[0x1E4FBC860];
          uint64_t v76 = v55[2];
          BOOL v77 = __OFADD__(v76, 1);
          uint64_t v78 = v76 + 1;
          if (v77) {
            goto LABEL_116;
          }
          v55[2] = v78;
          swift_bridgeObjectRetain();
        }
        uint64_t v79 = v55[7];
        uint64_t v80 = *(void *)(v79 + 8 * v70);
        char v81 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v79 + 8 * v70) = v80;
        if ((v81 & 1) == 0)
        {
          uint64_t v80 = sub_1C4D29300(0, *(void *)(v80 + 16) + 1, 1, v80);
          *(void *)(v79 + 8 * v70) = v80;
        }
        unint64_t v83 = *(void *)(v80 + 16);
        unint64_t v82 = *(void *)(v80 + 24);
        if (v83 >= v82 >> 1)
        {
          uint64_t v80 = sub_1C4D29300(v82 > 1, v83 + 1, 1, v80);
          *(void *)(v79 + 8 * v70) = v80;
        }
        *(void *)(v80 + 16) = v83 + 1;
        uint64_t v84 = v130;
        sub_1C4D2DD34((uint64_t)v135, v80 + v131 + v83 * v130, (void (*)(void))type metadata accessor for PartialTrafficLog);
        swift_bridgeObjectRelease();
        uint64_t v48 = v133;
        sub_1C4D2DD94(v133, (void (*)(void))type metadata accessor for PartialTrafficLog);
        v57 += v84;
        if (!--v56)
        {
          swift_bridgeObjectRelease();
          uint64_t v21 = v134;
LABEL_64:
          swift_bridgeObjectRelease();
          v21[1] = (uint64_t)v55;
          swift_bridgeObjectRelease();
          uint64_t v85 = swift_bridgeObjectRetain();
          unint64_t v86 = v129;
          uint64_t v87 = sub_1C4D2D450(v85);
          uint64_t v134 = v86;
          swift_bridgeObjectRelease();
          BOOL v88 = (uint64_t *)(v87 + 64);
          uint64_t v89 = 1 << *(unsigned char *)(v87 + 32);
          uint64_t v90 = -1;
          if (v89 < 64) {
            uint64_t v90 = ~(-1 << v89);
          }
          unint64_t v91 = v90 & *(void *)(v87 + 64);
          uint64_t v135 = (uint64_t *)((unint64_t)(v89 + 63) >> 6);
          swift_retain();
          uint64_t v92 = 0;
          BOOL v136 = (uint64_t *)(v87 + 64);
          while (1)
          {
            if (v91)
            {
              unint64_t v93 = __clz(__rbit64(v91));
              v91 &= v91 - 1;
              unint64_t v94 = v93 | (v92 << 6);
            }
            else
            {
              uint64_t v95 = v92 + 1;
              if (__OFADD__(v92, 1)) {
                goto LABEL_115;
              }
              if (v95 >= (uint64_t)v135)
              {
LABEL_87:
                swift_release();
                uint64_t v108 = *(void *)(v87 + 16);
                if (v108)
                {
                  uint64_t v135 = &v123;
                  v137[0] = MEMORY[0x1E4FBC860];
                  specialized ContiguousArray.reserveCapacity(_:)();
                  uint64_t v109 = sub_1C4D15964(v87);
                  if ((v109 & 0x8000000000000000) == 0)
                  {
                    unint64_t v111 = v109;
                    if (v109 < 1 << *(unsigned char *)(v87 + 32))
                    {
                      int v112 = v110;
                      while ((v88[v111 >> 6] & (1 << v111)) != 0)
                      {
                        if (v112 != *(_DWORD *)(v87 + 36)) {
                          goto LABEL_111;
                        }
                        int64_t v113 = (uint64_t *)(*(void *)(v87 + 48) + 16 * v111);
                        uint64_t v115 = *v113;
                        uint64_t v114 = (void *)v113[1];
                        uint64_t v116 = *(void *)(*(void *)(v87 + 56) + 8 * v111);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        sub_1C4D273D4(v115, v114, v116);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                        specialized ContiguousArray._endMutation()();
                        if ((uint64_t)v111 >= -(-1 << *(unsigned char *)(v87 + 32))) {
                          goto LABEL_112;
                        }
                        BOOL v88 = v136;
                        if ((v136[v111 >> 6] & (1 << v111)) == 0) {
                          goto LABEL_113;
                        }
                        if (v112 != *(_DWORD *)(v87 + 36)) {
                          goto LABEL_114;
                        }
                        uint64_t v117 = _HashTable.occupiedBucket(after:)();
                        if (!--v108) {
                          goto LABEL_100;
                        }
                        unint64_t v111 = v117;
                        if ((v117 & 0x8000000000000000) == 0)
                        {
                          int v112 = *(_DWORD *)(v87 + 36);
                          if (v117 < 1 << *(unsigned char *)(v87 + 32)) {
                            continue;
                          }
                        }
                        goto LABEL_99;
                      }
                      goto LABEL_110;
                    }
                  }
LABEL_99:
                  __break(1u);
LABEL_100:
                  uint64_t v118 = v137[0];
                  swift_release();
                }
                else
                {
                  swift_release();
                  uint64_t v118 = MEMORY[0x1E4FBC860];
                }
                if ((v118 & 0x8000000000000000) == 0 && (v118 & 0x4000000000000000) == 0)
                {
                  uint64_t v119 = v118 & 0xFFFFFFFFFFFFFF8;
                  swift_bridgeObjectRetain();
                  goto LABEL_105;
                }
                goto LABEL_119;
              }
              unint64_t v96 = v88[v95];
              ++v92;
              if (!v96)
              {
                uint64_t v92 = v95 + 1;
                if (v95 + 1 >= (uint64_t)v135) {
                  goto LABEL_87;
                }
                unint64_t v96 = v88[v92];
                if (!v96)
                {
                  uint64_t v92 = v95 + 2;
                  if (v95 + 2 >= (uint64_t)v135) {
                    goto LABEL_87;
                  }
                  unint64_t v96 = v88[v92];
                  if (!v96)
                  {
                    uint64_t v97 = v95 + 3;
                    if (v97 >= (uint64_t)v135) {
                      goto LABEL_87;
                    }
                    unint64_t v96 = v88[v97];
                    if (!v96)
                    {
                      while (1)
                      {
                        uint64_t v92 = v97 + 1;
                        if (__OFADD__(v97, 1)) {
                          goto LABEL_118;
                        }
                        if (v92 >= (uint64_t)v135) {
                          goto LABEL_87;
                        }
                        unint64_t v96 = v88[v92];
                        ++v97;
                        if (v96) {
                          goto LABEL_82;
                        }
                      }
                    }
                    uint64_t v92 = v97;
                  }
                }
              }
LABEL_82:
              unint64_t v91 = (v96 - 1) & v96;
              unint64_t v94 = __clz(__rbit64(v96)) + (v92 << 6);
            }
            unint64_t v98 = (uint64_t *)(*(void *)(v87 + 48) + 16 * v94);
            uint64_t v100 = *v98;
            uint64_t v99 = v98[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1C4D21F44(v100, v99);
            char v102 = v101;
            swift_bridgeObjectRelease();
            if (v102)
            {
              char v103 = swift_isUniquelyReferenced_nonNull_native();
              v137[0] = v21[1];
              uint64_t v104 = v137[0];
              v21[1] = 0x8000000000000000;
              Swift::Int v105 = *(void *)(v104 + 24);
              sub_1C4D10728(&qword_1EA3CBE20);
              Swift::Int v106 = v105;
              BOOL v88 = v136;
              _NativeDictionary.ensureUnique(isUnique:capacity:)(v103, v106);
              uint64_t v107 = v137[0];
              swift_bridgeObjectRelease();
              sub_1C4D10728(&qword_1EBBCD7C8);
              _NativeDictionary._delete(at:)();
              v21[1] = v107;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
          }
        }
      }
    }
  }
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C4D273B8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C4D26678(a1, a2);
}

id sub_1C4D273D4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v142 = a2;
  uint64_t v141 = a1;
  uint64_t v140 = type metadata accessor for DispatchTimeInterval();
  sub_1C4D2E6EC();
  uint64_t v138 = v4;
  MEMORY[0x1F4188790](v5);
  sub_1C4D2E72C();
  sub_1C4D2E7FC(v6);
  uint64_t v139 = type metadata accessor for DispatchTime();
  sub_1C4D2E6EC();
  uint64_t v137 = v7;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v134 = (char *)v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = sub_1C4D2E7FC((uint64_t)v133 - v11);
  uint64_t v156 = type metadata accessor for PartialTrafficLog.ResponseMetadata(v12);
  sub_1C4D1B074();
  MEMORY[0x1F4188790](v13);
  sub_1C4D2E72C();
  v155 = (NSString *)v14;
  uint64_t v15 = sub_1C4D10728(&qword_1EA3CBE40);
  MEMORY[0x1F4188790](v15 - 8);
  sub_1C4D2E72C();
  uint64_t v154 = v16;
  uint64_t v17 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  MEMORY[0x1F4188790](v17 - 8);
  sub_1C4D2E72C();
  uint64_t v19 = sub_1C4D2E7FC(v18);
  uint64_t v153 = type metadata accessor for PartialTrafficLog.RequestMetadata(v19);
  sub_1C4D1B074();
  MEMORY[0x1F4188790](v20);
  sub_1C4D184E4();
  uint64_t v23 = v22 - v21;
  int64_t v24 = (NSString *)type metadata accessor for PartialTrafficLog(0);
  sub_1C4D2E6EC();
  uint64_t v170 = v25;
  MEMORY[0x1F4188790](v26);
  sub_1C4D184E4();
  uint64_t v29 = (void *)(v28 - v27);
  Class isa = (void *)swift_allocObject();
  uint64_t v31 = MEMORY[0x1E4FBC860];
  isa[2] = MEMORY[0x1E4FBC860];
  v146 = isa + 2;
  uint64_t v32 = swift_allocObject();
  uint64_t v157 = v32;
  *(void *)(v32 + 16) = v31;
  uint64_t v145 = v32 + 16;
  unint64_t v33 = (objc_class *)type metadata accessor for TrafficMetadata();
  uint64_t v34 = (uint64_t)objc_msgSend(objc_allocWithZone(v33), sel_init);
  uint64_t v159 = (char *)objc_msgSend(objc_allocWithZone(v33), sel_init);
  uint64_t aBlock = a3;
  swift_bridgeObjectRetain();
  sub_1C4D29E6C(&aBlock);
  uint64_t v35 = aBlock;
  sub_1C4D24BD0(0, &qword_1EA3CBE48);
  id v36 = objc_allocWithZone((Class)CKDProtobufResponseBodyParser);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v37 = objc_msgSend(v36, sel_initWithQoS_messageClass_parsingStandaloneMessage_, 25);
  uint64_t v175 = sub_1C4D2DF04;
  Swift::Int v176 = isa;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v172 = 1107296256;
  __int16 v173 = sub_1C4D28894;
  uint64_t v174 = &unk_1F20417E0;
  uint64_t v38 = _Block_copy(&aBlock);
  id v39 = v37;
  swift_retain();
  swift_release();
  objc_msgSend(v39, sel_setObjectParsedBlock_, v38);
  _Block_release(v38);
  id v168 = v39;

  char v40 = *(char **)(v35 + 16);
  uint64_t v166 = isa;
  v158 = (NSString *)v34;
  uint64_t v41 = v35;
  if (v40)
  {
    uint64_t v151 = &v159[OBJC_IVAR___CKDTrafficMetadata_timestamp];
    Swift::Int v42 = &v159[OBJC_IVAR___CKDTrafficMetadata_status];
    uint64_t v149 = (char *)(v34 + OBJC_IVAR___CKDTrafficMetadata_timestamp);
    uint64_t v148 = (char *)(v34 + OBJC_IVAR___CKDTrafficMetadata_url);
    unint64_t v169 = (v35
                      + ((*((unsigned __int8 *)v170 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v170 + 80)));
    uint64_t v147 = (unsigned char *)(v34 + OBJC_IVAR___CKDTrafficMetadata_parsingStandaloneMessage);
    swift_beginAccess();
    swift_beginAccess();
    v150 = v42;
    swift_beginAccess();
    sub_1C4D2E794();
    uint64_t v43 = 0;
    sub_1C4D2E878();
    unint64_t v160 = &v173;
    v133[1] = v40 - 1;
    v162 = v24;
    uint64_t v165 = v41;
    uint64_t v167 = v40;
    while (2)
    {
      if ((unint64_t)v43 < *(void *)(v41 + 16))
      {
        uint64_t v34 = (uint64_t)v43++;
        sub_1C4D147F0((uint64_t)v169 + v170[9] * v34, (uint64_t)v29);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            char v40 = (char *)v29[1];
            uint64_t v84 = v29[2];
            unint64_t v85 = v29[3];
            id v86 = v168;
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v86, sel_processData_completionHandler_, isa, 0);
            sub_1C4D2E86C();
            swift_bridgeObjectRelease();
            id v168 = v86;

            sub_1C4D2E860();
            sub_1C4D16298(v84, v85);
            uint64_t v43 = (char *)(v34 + 1);
            sub_1C4D2E8E8(1);
            if (!v87) {
              continue;
            }
            goto LABEL_36;
          case 2u:
            swift_bridgeObjectRelease();
            if (__OFADD__(v163, 1)) {
              goto LABEL_52;
            }
            ++v163;
            isa[2] = MEMORY[0x1E4FBC860];
            swift_bridgeObjectRelease();
            char v40 = (char *)v168;
            id v66 = objc_msgSend(v40, sel_messageClass);
            id v67 = objc_msgSend(v40, sel_parsingStandaloneMessage);
            id v68 = objc_allocWithZone((Class)CKDProtobufResponseBodyParser);
            id v69 = v67;
            uint64_t v41 = v165;
            id v70 = objc_msgSend(v68, sel_initWithQoS_messageClass_parsingStandaloneMessage_, 25, v66, v69);

            uint64_t v175 = sub_1C4D2DF04;
            Swift::Int v176 = isa;
            uint64_t aBlock = MEMORY[0x1E4F143A8];
            uint64_t v172 = 1107296256;
            __int16 v173 = sub_1C4D28894;
            uint64_t v174 = &unk_1F20418D0;
            char v71 = _Block_copy(&aBlock);
            Class isa = v176;
            swift_retain();
            id v72 = v70;
            sub_1C4D2E860();
            swift_release();
            objc_msgSend(v72, sel_setObjectParsedBlock_, v71);
            _Block_release(v71);

            sub_1C4D2E86C();
            id v168 = v72;

            goto LABEL_22;
          case 3u:
            char v40 = (char *)type metadata accessor for PartialTrafficLog.ResponseMetadata;
            int64_t v24 = v155;
            sub_1C4D2DD34((uint64_t)v29, (uint64_t)v155, (void (*)(void))type metadata accessor for PartialTrafficLog.ResponseMetadata);
            uint64_t v34 = v156;
            unint64_t v73 = (char *)v24 + *(int *)(v156 + 20);
            uint64_t v74 = type metadata accessor for Date();
            sub_1C4D1B074();
            uint64_t v76 = v161;
            (*(void (**)(uint64_t, char *, uint64_t))(v75 + 16))(v161, v73, v74);
            _s14CloudKitDaemon17PartialTrafficLogOwst_0(v76, 0, 1, v74);
            uint64_t v77 = (uint64_t)v151;
            sub_1C4D2E8D0();
            uint64_t v78 = v76;
            uint64_t v41 = v165;
            sub_1C4D2E000(v78, v77, (uint64_t *)&unk_1EA3CC170);
            swift_endAccess();
            uint64_t v79 = swift_bridgeObjectRetain();
            sub_1C4D40EF0(v79);
            uint64_t v80 = *(uint64_t *)((char *)v24 + *(int *)(v34 + 24));
            sub_1C4D2E7E4();
            sub_1C4D2E86C();
            sub_1C4D2DD94(v81, v82);
            *(void *)v150 = v80;
            goto LABEL_22;
          case 4u:
            uint64_t v63 = v29[2];
            char v40 = (char *)v29[4];
            switch(v63)
            {
              case 0:
              case 4:
                if (v40)
                {
                  uint64_t v64 = v29[3];
                  swift_bridgeObjectRetain();
                  int64_t v24 = (NSString *)MEMORY[0x1C87879B0](v64, v40);
                  swift_bridgeObjectRelease();
                  Class isa = NSClassFromString(v24);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  if (isa)
                  {
                    id v65 = objc_msgSend(objc_allocWithZone((Class)CKDProtobufResponseBodyParser), sel_initWithQoS_messageClass_parsingStandaloneMessage_, 25, isa, v63 == 4);
                    sub_1C4D2E7E4();
LABEL_20:
                    sub_1C4D2E884();
                    uint64_t v34 = v157;
                    uint64_t v175 = sub_1C4D2DFF8;
                    Swift::Int v176 = (void *)v157;
                    uint64_t aBlock = MEMORY[0x1E4F143A8];
                    uint64_t v172 = 1107296256;
                    __int16 v173 = sub_1C4D28894;
                    uint64_t v174 = &unk_1F20418A8;
                    char v40 = (char *)_Block_copy(&aBlock);
                    Class isa = v65;
                    swift_retain();
                    swift_release();
                    objc_msgSend(isa, sel_setObjectParsedBlock_, v40);
                    _Block_release(v40);

                    id v164 = v65;
                    sub_1C4D2E860();
                  }
                  else
                  {
                    sub_1C4D2E884();
                    sub_1C4D2E878();
                    sub_1C4D2E860();
                    sub_1C4D2E7E4();
                  }
                }
                else
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_1C4D2E884();
                  sub_1C4D2E878();
                }
                break;
              case 1:
                unint64_t v83 = CKDJSONResponseBodyParser;
                goto LABEL_19;
              case 2:
                unint64_t v83 = CKDPlistResponseBodyParser;
                goto LABEL_19;
              case 3:
                unint64_t v83 = CKDPlaintextResponseBodyParser;
LABEL_19:
                id v65 = objc_msgSend(objc_allocWithZone((Class)v83), sel_initWithQoS_, 25);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_20;
              default:
                uint64_t aBlock = v29[2];
                _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
                __break(1u);
                swift_release();
                __break(1u);
                JUMPOUT(0x1C4D287A4);
            }
            goto LABEL_21;
          case 5u:
            uint64_t v88 = v29[2];
            unint64_t v89 = v29[3];
            if (v164)
            {
              Class isa = v164;
              int64_t v24 = (NSString *)Data._bridgeToObjectiveC()().super.isa;
              objc_msgSend(isa, sel_processData_completionHandler_, v24, 0);
              swift_bridgeObjectRelease();
              sub_1C4D16298(v88, v89);

              sub_1C4D2E860();
              sub_1C4D2E7E4();
            }
            else
            {
              swift_bridgeObjectRelease();
              sub_1C4D16298(v88, v89);
            }
            uint64_t v43 = (char *)(v34 + 1);
            sub_1C4D2E8E8(1);
            char v40 = v167;
            if (!v87) {
              continue;
            }
            goto LABEL_36;
          case 6u:
            swift_bridgeObjectRelease();
            goto LABEL_22;
          default:
            sub_1C4D2DD34((uint64_t)v29, v23, (void (*)(void))type metadata accessor for PartialTrafficLog.RequestMetadata);
            uint64_t v44 = v153;
            uint64_t v45 = (uint64_t *)(v23 + *(int *)(v153 + 36));
            uint64_t v46 = *v45;
            uint64_t v47 = v45[1];
            swift_bridgeObjectRetain();
            sub_1C4D41104(v46, v47);
            uint64_t v48 = type metadata accessor for Date();
            sub_1C4D1B074();
            uint64_t v49 = sub_1C4D2E7B0();
            v50(v49);
            _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v24, 0, 1, v48);
            uint64_t v51 = (uint64_t)v149;
            sub_1C4D2E8D0();
            sub_1C4D2E000((uint64_t)v24, v51, (uint64_t *)&unk_1EA3CC170);
            swift_endAccess();
            uint64_t v52 = type metadata accessor for URL();
            sub_1C4D1B074();
            uint64_t v53 = sub_1C4D2E7B0();
            v54(v53);
            _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v24, 0, 1, v52);
            uint64_t v55 = (uint64_t)v148;
            sub_1C4D2E8D0();
            sub_1C4D2E000((uint64_t)v24, v55, &qword_1EA3CBE40);
            swift_endAccess();
            uint64_t v56 = (uint64_t *)(v23 + *(int *)(v44 + 28));
            uint64_t v57 = *v56;
            uint64_t v34 = v56[1];
            swift_bridgeObjectRetain();
            sub_1C4D40C78(v57, v34);
            uint64_t v58 = swift_bridgeObjectRetain();
            sub_1C4D40EF0(v58);
            *uint64_t v147 = *(unsigned char *)(v23 + *(int *)(v44 + 40));
            objc_msgSend(v168, sel_setParsingStandaloneMessage_);
            uint64_t v59 = *v45;
            uint64_t v60 = v45[1];
            swift_bridgeObjectRetain();
            unint64_t v61 = (NSString *)MEMORY[0x1C87879B0](v59, v60);
            swift_bridgeObjectRelease();
            char v40 = (char *)NSClassFromString(v61);

            uint64_t v62 = ObjCClassFromMetadata;
            if (v40)
            {
              swift_getObjCClassMetadata();
              uint64_t v62 = swift_getObjCClassFromMetadata();
            }
            objc_msgSend(v168, sel_setMessageClass_, v62);
            sub_1C4D2DD94(v23, (void (*)(void))type metadata accessor for PartialTrafficLog.RequestMetadata);
            sub_1C4D2E7E4();
            uint64_t v41 = v165;
LABEL_21:
            sub_1C4D2E86C();
LABEL_22:
            if (v40 == v43) {
              goto LABEL_36;
            }
            continue;
        }
      }
      break;
    }
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  sub_1C4D2E794();
  sub_1C4D2E878();
LABEL_36:
  swift_release();
  uint64_t v90 = dispatch_group_create();
  dispatch_group_enter(v90);
  unint64_t v91 = (void *)swift_allocObject();
  uint64_t v92 = v141;
  unint64_t v93 = v142;
  v91[2] = v141;
  v91[3] = v93;
  v91[4] = v90;
  uint64_t v175 = sub_1C4D2DF3C;
  Swift::Int v176 = v91;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v172 = 1107296256;
  __int16 v173 = sub_1C4D28DB8;
  uint64_t v174 = &unk_1F2041830;
  unint64_t v94 = _Block_copy(&aBlock);
  id v95 = v168;
  swift_bridgeObjectRetain();
  unint64_t v96 = v90;
  swift_release();
  objc_msgSend(v95, sel_finishWithCompletion_, v94);
  _Block_release(v94);
  uint64_t v170 = v95;

  if (v164)
  {
    id v97 = v164;
    dispatch_group_enter(v96);
    unint64_t v98 = (void *)swift_allocObject();
    v98[2] = v92;
    v98[3] = v93;
    v98[4] = v96;
    uint64_t v175 = sub_1C4D2DFBC;
    Swift::Int v176 = v98;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v172 = 1107296256;
    __int16 v173 = sub_1C4D28DB8;
    uint64_t v174 = &unk_1F2041880;
    uint64_t v99 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    uint64_t v100 = v96;
    swift_release();
    objc_msgSend(v97, sel_finishWithCompletion_, v99);
    _Block_release(v99);
  }
  char v101 = v134;
  static DispatchTime.now()();
  char v102 = v136;
  void *v136 = 5;
  uint64_t v103 = v138;
  uint64_t v104 = v140;
  (*(void (**)(void *, void, uint64_t))(v138 + 104))(v102, *MEMORY[0x1E4FBCAE8], v140);
  Swift::Int v105 = v135;
  MEMORY[0x1C8787920](v101, v102);
  (*(void (**)(void *, uint64_t))(v103 + 8))(v102, v104);
  Swift::Int v106 = *(void (**)(char *, uint64_t))(v137 + 8);
  uint64_t v107 = (uint64_t *)v139;
  v106(v101, v139);
  unint64_t v169 = v96;
  MEMORY[0x1C8787C90](v105);
  v106(v105, (uint64_t)v107);
  char v108 = static DispatchTimeoutResult.== infix(_:_:)();
  unint64_t v109 = MEMORY[0x1E4FBB1A0];
  uint64_t v110 = v92;
  if (v108)
  {
    sub_1C4D10728(&qword_1EA3CBE58);
    unint64_t v111 = (__n128 *)sub_1C4D2E848();
    sub_1C4D2E780(v111, (__n128)xmmword_1C507EA40);
    _StringGuts.grow(_:)(106);
    sub_1C4D2E80C(0xD00000000000003DLL, (uint64_t)"cloudkitlog parse error: object parser timed out for request ");
    v112._uint64_t countAndFlagsBits = v92;
    v112._object = v93;
    String.append(_:)(v112);
    v113._object = (void *)0x80000001C5082520;
    v113._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v113);
    uint64_t v114 = aBlock;
    v111[3].n128_u64[1] = v109;
    sub_1C4D2E704(v114);
    swift_bridgeObjectRelease();
  }
  uint64_t v34 = (uint64_t)v93;
  int64_t v24 = v158;
  if (v143)
  {
    sub_1C4D2E760();
    if (!((unint64_t)*v107 >> 62))
    {
      if (*(void *)((*v107 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_44;
      }
      goto LABEL_43;
    }
    sub_1C4D2E89C();
    uint64_t v131 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v131)
    {
LABEL_43:
      sub_1C4D10728(&qword_1EA3CBE58);
      uint64_t v115 = (__n128 *)sub_1C4D2E848();
      sub_1C4D2E780(v115, (__n128)xmmword_1C507EA40);
      _StringGuts.grow(_:)(117);
      sub_1C4D2E80C(0xD000000000000042, (uint64_t)"cloudkitlog parse error: received request object data for request ");
      v116._uint64_t countAndFlagsBits = v110;
      v116._object = (void *)v34;
      String.append(_:)(v116);
      sub_1C4D2E80C(0xD000000000000031, (uint64_t)" but wasn't able to parse a single request object");
      uint64_t v117 = aBlock;
      v115[3].n128_u64[1] = v109;
      sub_1C4D2E704(v117);
      swift_bridgeObjectRelease();
    }
  }
LABEL_44:
  if ((v144 & 1) == 0) {
    goto LABEL_48;
  }
  sub_1C4D2E760();
  if (!((unint64_t)*v107 >> 62))
  {
    if (*(void *)((*v107 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  sub_1C4D2E89C();
  uint64_t v132 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v132)
  {
LABEL_47:
    sub_1C4D10728(&qword_1EA3CBE58);
    uint64_t v118 = (__n128 *)sub_1C4D2E848();
    sub_1C4D2E780(v118, (__n128)xmmword_1C507EA40);
    _StringGuts.grow(_:)(119);
    sub_1C4D2E80C(0xD000000000000043, (uint64_t)"cloudkitlog parse error: received response object data for request ");
    v119._uint64_t countAndFlagsBits = v110;
    v119._object = (void *)v34;
    String.append(_:)(v119);
    sub_1C4D2E80C(0xD000000000000032, (uint64_t)" but wasn't able to parse a single response object");
    uint64_t v120 = aBlock;
    v118[3].n128_u64[1] = v109;
    sub_1C4D2E704(v120);
    swift_bridgeObjectRelease();
  }
LABEL_48:
  sub_1C4D2E760();
  uint64_t v121 = *v107;
  Class isa = (void *)v110;
  if ((unint64_t)*v107 >> 62)
  {
LABEL_53:
    uint64_t v122 = v34;
    swift_bridgeObjectRetain();
    uint64_t v130 = v24;
    swift_bridgeObjectRetain();
    sub_1C4D10728(&qword_1EA3CBE50);
    uint64_t v124 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v122 = v34;
  swift_bridgeObjectRetain();
  uint64_t v123 = v24;
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  swift_bridgeObjectRelease();
  uint64_t v124 = v121;
LABEL_50:
  swift_beginAccess();
  uint64_t v125 = *(void *)(v157 + 16);
  objc_allocWithZone((Class)type metadata accessor for TrafficLogMessage());
  BOOL v126 = v159;
  unint64_t v127 = v159;
  swift_bridgeObjectRetain();
  id v128 = TrafficLogMessage.init(uuid:requestMetadata:requestObjects:bodyStreamResetCount:responseMetadata:responseObjects:)((uint64_t)isa, v122, (char *)v24, v124, v163, v126, v125);
  swift_release();
  swift_release();

  sub_1C4D2E884();
  return v128;
}

uint64_t sub_1C4D28894(uint64_t a1, uint64_t a2, void *a3, const void *a4)
{
  uint64_t v7 = *(void (**)(void *, uint64_t, unint64_t, uint64_t (*)(), uint64_t))(a1 + 32);
  void v15[3] = swift_getObjectType();
  v15[0] = a2;
  swift_retain();
  swift_unknownObjectRetain();
  id v8 = a3;
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  uint64_t v12 = _Block_copy(a4);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  v7(v15, v9, v11, sub_1C4D2E094, v13);
  swift_release();
  sub_1C4D16298(v9, v11);
  swift_release();
  return sub_1C4D1691C((uint64_t)v15);
}

uint64_t sub_1C4D2898C(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  sub_1C4D167F0((uint64_t)a1, (uint64_t)&v20);
  sub_1C4D24BD0(0, &qword_1EA3CBE60);
  if (swift_dynamicCast())
  {
    sub_1C4D2E8D0();
    id v9 = v19;
    MEMORY[0x1C8787B30]();
    sub_1C4D14B6C(*(void *)((*(void *)(a6 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10));
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  else
  {
    sub_1C4D10728(&qword_1EA3CBE58);
    uint64_t v11 = sub_1C4D2E848();
    *(_OWORD *)(v11 + 16) = xmmword_1C507EA40;
    unint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v20 = 0xD000000000000021;
    unint64_t v21 = 0x80000001C5082550;
    sub_1C4D25A9C(a1, a1[3]);
    sub_1C4D2E6EC();
    MEMORY[0x1F4188790](v12);
    sub_1C4D184E4();
    (*(void (**)(uint64_t))(v15 + 16))(v14 - v13);
    v16._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    uint64_t v17 = v20;
    *(void *)(v11 + 56) = MEMORY[0x1E4FBB1A0];
    sub_1C4D2E704(v17);
    uint64_t v10 = swift_bridgeObjectRelease();
  }
  return a4(v10);
}

uint64_t sub_1C4D28B7C(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  sub_1C4D167F0((uint64_t)a1, (uint64_t)&v21);
  sub_1C4D10728(&qword_1EA3CBE50);
  if (swift_dynamicCast())
  {
    swift_beginAccess();
    uint64_t v9 = swift_unknownObjectRetain();
    MEMORY[0x1C8787B30](v9);
    sub_1C4D14B6C(*(void *)((*(void *)(a6 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10));
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    uint64_t v10 = swift_unknownObjectRelease();
  }
  else
  {
    sub_1C4D10728(&qword_1EA3CBE58);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1C507EA40;
    uint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v12._object = (void *)0x80000001C5082580;
    v12._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
    String.append(_:)(v12);
    uint64_t v13 = sub_1C4D25A9C(a1, a1[3]);
    MEMORY[0x1F4188790](v13);
    (*(void (**)(char *))(v15 + 16))((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    v16._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    uint64_t v17 = v21;
    unint64_t v18 = v22;
    *(void *)(v11 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v11 + 32) = v17;
    *(void *)(v11 + 40) = v18;
    print(_:separator:terminator:)();
    uint64_t v10 = swift_bridgeObjectRelease();
  }
  return a4(v10);
}

void sub_1C4D28DB8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void sub_1C4D28E24(void *a1, uint64_t a2, void *a3, dispatch_group_t group, Swift::Int a5, uint64_t a6, void *a7)
{
  if (a1)
  {
    sub_1C4D10728(&qword_1EA3CBE58);
    uint64_t v14 = sub_1C4D2E848();
    *(_OWORD *)(v14 + 16) = xmmword_1C507EA40;
    id v15 = a1;
    _StringGuts.grow(_:)(a5);
    v16._uint64_t countAndFlagsBits = a6;
    v16._object = a7;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = a2;
    v17._object = a3;
    String.append(_:)(v17);
    v18._uint64_t countAndFlagsBits = 8250;
    v18._object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    swift_getErrorValue();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    *(void *)(v14 + 56) = MEMORY[0x1E4FBB1A0];
    sub_1C4D2E704(0);
    swift_bridgeObjectRelease();
  }
  dispatch_group_leave(group);
}

id TrafficLogParser.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id TrafficLogParser.init()()
{
  uint64_t v1 = OBJC_IVAR___CKDTrafficLogParser_lock;
  sub_1C4D10728(&qword_1EA3CBE18);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 32) = 0;
  uint64_t v3 = MEMORY[0x1E4FBC868];
  *(void *)(v2 + 16) = MEMORY[0x1E4FBC868];
  *(void *)(v2 + 24) = v3;
  *(void *)&v0[v1] = v2;
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for TrafficLogParser();
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t type metadata accessor for TrafficLogParser()
{
  return self;
}

id TrafficLogParser.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TrafficLogParser();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for TrafficLogParser(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TrafficLogParser);
}

uint64_t dispatch thunk of TrafficLogParser.accumulatedChunkedMessages.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of TrafficLogParser.parse(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of TrafficLogParser.consumeParsedTrafficLogs()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t destroy for TrafficLogParser.State()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *_s14CloudKitDaemon16TrafficLogParserC5StateVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TrafficLogParser.State(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PartialTrafficLog.RequestBodyStreamReset(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for TrafficLogParser.State(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrafficLogParser.State(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrafficLogParser.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrafficLogParser.State()
{
  return &type metadata for TrafficLogParser.State;
}

uint64_t sub_1C4D29300(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_1C4D2E750();
    if (v7 != v8)
    {
      sub_1C4D2E7F0();
      if (v7)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_1C4D2E740();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (!v10)
  {
    Swift::String v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_18;
  }
  sub_1C4D10728(&qword_1EBBCDC00);
  uint64_t v11 = type metadata accessor for PartialTrafficLog(0);
  sub_1C4D16BF4(v11);
  uint64_t v13 = *(void *)(v12 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  Swift::String v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v13 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v13 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_23:
    sub_1C4D25DA8();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v9;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v13);
LABEL_18:
  uint64_t v19 = *(void *)(type metadata accessor for PartialTrafficLog(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if (a1)
  {
    sub_1C4D29790(a4 + v20, v9, v21, (void (*)(void))type metadata accessor for PartialTrafficLog);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1C4D294F0(0, v9, v21, a4);
  }
  return (uint64_t)v16;
}

uint64_t sub_1C4D294F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for PartialTrafficLog(0) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1C4D29650(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

char *sub_1C4D296E4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

void sub_1C4D29778(unint64_t a1, uint64_t a2, unint64_t a3)
{
}

void sub_1C4D29790(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    sub_1C4D25DA8();
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a3 < a1 || (a4(0), sub_1C4D1B074(), a1 + *(void *)(v8 + 72) * a2 <= a3))
  {
    a4(0);
    sub_1C4D2E8BC();
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (a3 != a1)
  {
    sub_1C4D2E8BC();
    swift_arrayInitWithTakeBackToFront();
  }
}

char *sub_1C4D298A0(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

void *sub_1C4D29934(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  sub_1C4D10728((uint64_t *)&unk_1EA3CB9E8);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1C4D2999C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v6 = String.UTF16View.index(_:offsetBy:)();
    sub_1C4D2E7CC(v6);
    return v7 | 4;
  }
  else
  {
    uint64_t v3 = MEMORY[0x1C8787AB0](15, a1 >> 16);
    sub_1C4D2E7CC(v3);
    return v4 | 8;
  }
}

uint64_t sub_1C4D299F8(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void sub_1C4D29A14(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_1C4D2E750();
    if (v7 != v8)
    {
      sub_1C4D2E7F0();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_1C4D2E740();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    sub_1C4D10728(&qword_1EBBCD848);
    unint64_t v11 = (char *)swift_allocObject();
    j__malloc_size(v11);
    sub_1C4D2E8FC();
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = v12;
  }
  else
  {
    unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if (a1)
  {
    sub_1C4D29650(v14, v9, v13);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C4D21B18((unint64_t)v14, v9, (unint64_t)v13);
  }
  swift_release();
}

void sub_1C4D29AD8(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1C4D29B0C(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1C4D29B54(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1C4D29B88(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, void *), void (*a7)(uint64_t, uint64_t, void *))
{
  if (a3)
  {
    sub_1C4D2E750();
    if (v12 != v13)
    {
      sub_1C4D2E7F0();
      if (v12)
      {
        __break(1u);
        return;
      }
      sub_1C4D2E740();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    sub_1C4D10728(a5);
    Swift::String v16 = (void *)swift_allocObject();
    size_t v17 = j__malloc_size(v16);
    v16[2] = v14;
    v16[3] = 2 * ((uint64_t)(v17 - 32) / 32);
  }
  else
  {
    Swift::String v16 = (void *)MEMORY[0x1E4FBC860];
  }
  BOOL v18 = v16 + 4;
  uint64_t v19 = a4 + 32;
  if (a1)
  {
    a6(v19, v14, v18);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v19, v14, v18);
  }
  swift_release();
}

void sub_1C4D29C6C(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(void), void (*a8)(unint64_t, uint64_t, unint64_t))
{
  if (a3)
  {
    sub_1C4D2E750();
    if (v14 != v15)
    {
      sub_1C4D2E7F0();
      if (v14)
      {
LABEL_24:
        __break(1u);
        return;
      }
      sub_1C4D2E740();
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    uint64_t v23 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_18;
  }
  sub_1C4D10728(a5);
  uint64_t v18 = a6(0);
  sub_1C4D16BF4(v18);
  uint64_t v20 = *(void *)(v19 + 72);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = (void *)swift_allocObject();
  size_t v24 = j__malloc_size(v23);
  if (!v20)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v24 - v22 == 0x8000000000000000 && v20 == -1) {
    goto LABEL_23;
  }
  v23[2] = v16;
  v23[3] = 2 * ((uint64_t)(v24 - v22) / v20);
LABEL_18:
  uint64_t v26 = *(void *)(a6(0) - 8);
  unint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  unint64_t v28 = (unint64_t)v23 + v27;
  unint64_t v29 = a4 + v27;
  if (a1)
  {
    sub_1C4D29790(v29, v16, v28, a7);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a8(v29, v16, v28);
  }
  swift_release();
}

uint64_t sub_1C4D29DF0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    sub_1C4D2DE58();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1C4D29F14(v6);
  return specialized ContiguousArray._endMutation()();
}

void sub_1C4D29E6C(uint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for PartialTrafficLog(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1C4D2E0A4(v3);
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_1C4D2AC08(v6);
  *a1 = v3;
}

void sub_1C4D29F14(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  v178 = (char *)&v158 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v158 - v8;
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  char v12 = (char *)&v158 - v11;
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v175 = (char *)&v158 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v158 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v163 = (uint64_t)&v158 - v18;
  uint64_t v170 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v170 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v170);
  uint64_t v177 = (char *)&v158 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  v184 = (char *)&v158 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v158 - v25;
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  __int16 v173 = (char *)&v158 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  v162 = (char *)&v158 - v30;
  MEMORY[0x1F4188790](v29);
  id v164 = a1;
  uint64_t v165 = (char *)&v158 - v31;
  Swift::Int v32 = a1[1];
  Swift::Int v33 = _minimumMergeRunLength(_:)(v32);
  if (v33 >= v32)
  {
    if ((v32 & 0x8000000000000000) == 0)
    {
      if (v32) {
        sub_1C4D2B8C4(0, v32, 1, v164);
      }
      return;
    }
    goto LABEL_153;
  }
  Swift::Int v160 = v33;
  uint64_t v34 = sub_1C4D146E0(v32 / 2);
  uint64_t v174 = v35;
  uint64_t v185 = v34;
  uint64_t v171 = v32;
  if (v32 <= 0)
  {
LABEL_117:
    uint64_t v38 = MEMORY[0x1E4FBC860];
    unint64_t v97 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_118:
    if (v97 < 2)
    {
LABEL_129:
      swift_bridgeObjectRelease();
      if (v171 >= -1) {
        goto LABEL_130;
      }
      goto LABEL_157;
    }
    uint64_t v151 = *v164;
    while (1)
    {
      unint64_t v152 = v97 - 2;
      if (v97 < 2) {
        break;
      }
      if (!v151) {
        goto LABEL_161;
      }
      uint64_t v153 = *(void *)(v38 + 32 + 16 * v152);
      uint64_t v154 = *(void *)(v38 + 32 + 16 * (v97 - 1) + 8);
      sub_1C4D2BEF8((char *)(v151 + 8 * v153), (char *)(v151 + 8 * *(void *)(v38 + 32 + 16 * (v97 - 1))), (char *)(v151 + 8 * v154), v174);
      if (v2) {
        goto LABEL_115;
      }
      if (v154 < v153) {
        goto LABEL_148;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C4D2CBD0(v38);
        uint64_t v38 = v157;
      }
      if (v152 >= *(void *)(v38 + 16)) {
        goto LABEL_149;
      }
      v155 = (void *)(v38 + 32 + 16 * v152);
      void *v155 = v153;
      v155[1] = v154;
      unint64_t v156 = *(void *)(v38 + 16);
      if (v97 > v156) {
        goto LABEL_150;
      }
      memmove((void *)(v38 + 32 + 16 * (v97 - 1)), (const void *)(v38 + 32 + 16 * v97), 16 * (v156 - v97));
      *(void *)(v38 + 16) = v156 - 1;
      unint64_t v97 = v156 - 1;
      if (v156 <= 2) {
        goto LABEL_129;
      }
    }
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
    return;
  }
  uint64_t v167 = v26;
  uint64_t v159 = v17;
  uint64_t v36 = 0;
  uint64_t v37 = *v164;
  v179 = (void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v180 = (void (**)(char *, uint64_t, uint64_t))(v19 + 32);
  uint64_t v158 = v37 - 8;
  uint64_t v38 = MEMORY[0x1E4FBC860];
  uint64_t v39 = v171;
  uint64_t v181 = v9;
  uint64_t v183 = v37;
  id v168 = v12;
  while (1)
  {
    uint64_t v40 = v36;
    uint64_t v41 = v36 + 1;
    if (v41 >= v39)
    {
      uint64_t v182 = v41;
      uint64_t v47 = (uint64_t)v178;
    }
    else
    {
      uint64_t v161 = v38;
      Swift::Int v42 = *(void **)(v37 + 8 * v41);
      uint64_t v43 = *(void **)(v37 + 8 * v40);
      uint64_t v44 = v163;
      sub_1C4D18770((uint64_t)v42 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, v163);
      uint64_t v45 = v170;
      int v46 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(v44, 1, v170);
      uint64_t v47 = (uint64_t)v178;
      if (v46 == 1)
      {
        id v48 = v42;
        id v49 = v43;
        static Date.distantPast.getter();
        sub_1C4D2DE6C(v44);
      }
      else
      {
        (*v180)(v165, v44, v45);
        id v50 = v42;
        id v51 = v43;
      }
      uint64_t v52 = (uint64_t)v159;
      sub_1C4D18770((uint64_t)v43 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, (uint64_t)v159);
      int v53 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(v52, 1, v45);
      uint64_t v176 = v2;
      unint64_t v54 = v162;
      if (v53 == 1)
      {
        static Date.distantPast.getter();
        sub_1C4D2DE6C(v52);
      }
      else
      {
        (*v180)(v162, v52, v45);
      }
      uint64_t v55 = v165;
      LODWORD(v172) = static Date.< infix(_:_:)();
      uint64_t v56 = *v179;
      (*v179)(v54, v45);
      v56(v55, v45);

      char v12 = v168;
      uint64_t v57 = (uint64_t)v175;
      if (v40 + 2 >= v171)
      {
        uint64_t v182 = v40 + 2;
        uint64_t v37 = v183;
      }
      else
      {
        uint64_t v169 = v40;
        uint64_t v58 = v40;
        uint64_t v37 = v183;
        while (1)
        {
          uint64_t v59 = v37 + 8 * v58;
          uint64_t v60 = *(void **)(v59 + 8);
          unint64_t v61 = *(void **)(v59 + 16);
          sub_1C4D18770((uint64_t)v61 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, v57);
          uint64_t v62 = v170;
          if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v57, 1, v170) == 1)
          {
            id v63 = v61;
            id v64 = v60;
            static Date.distantPast.getter();
            sub_1C4D2DE6C(v57);
          }
          else
          {
            (*v180)(v173, v57, v62);
            id v65 = v61;
            id v66 = v60;
          }
          sub_1C4D18770((uint64_t)v60 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, (uint64_t)v12);
          if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v12, 1, v62) == 1)
          {
            id v67 = v167;
            static Date.distantPast.getter();
            sub_1C4D2DE6C((uint64_t)v12);
          }
          else
          {
            id v67 = v167;
            (*v180)(v167, (uint64_t)v12, v62);
          }
          id v68 = v173;
          int v69 = static Date.< infix(_:_:)();
          v56(v67, v62);
          v56(v68, v62);

          if ((v172 ^ v69)) {
            break;
          }
          uint64_t v70 = v58 + 3;
          ++v58;
          uint64_t v37 = v183;
          char v12 = v168;
          uint64_t v57 = (uint64_t)v175;
          if (v70 >= v171)
          {
            uint64_t v182 = v171;
            uint64_t v47 = (uint64_t)v178;
            goto LABEL_25;
          }
        }
        uint64_t v182 = v58 + 2;
        uint64_t v47 = (uint64_t)v178;
        uint64_t v37 = v183;
        char v12 = v168;
LABEL_25:
        uint64_t v40 = v169;
      }
      uint64_t v2 = v176;
      uint64_t v38 = v161;
      if ((v172 & 1) == 0) {
        goto LABEL_35;
      }
      uint64_t v71 = v182;
      if (v182 < v40) {
        goto LABEL_154;
      }
      if (v40 < v182)
      {
        id v72 = (uint64_t *)(v158 + 8 * v182);
        uint64_t v73 = v40;
        uint64_t v74 = (uint64_t *)(v37 + 8 * v40);
        uint64_t v9 = v181;
        do
        {
          if (v73 != --v71)
          {
            if (!v37) {
              goto LABEL_160;
            }
            uint64_t v75 = *v74;
            *uint64_t v74 = *v72;
            *id v72 = v75;
          }
          ++v73;
          --v72;
          ++v74;
        }
        while (v73 < v71);
      }
      else
      {
LABEL_35:
        uint64_t v9 = v181;
      }
    }
    if (v182 < v171)
    {
      if (__OFSUB__(v182, v40)) {
        goto LABEL_152;
      }
      if (v182 - v40 < v160)
      {
        if (__OFADD__(v40, v160)) {
          goto LABEL_155;
        }
        uint64_t v76 = v171;
        if (v40 + v160 < v171) {
          uint64_t v76 = v40 + v160;
        }
        if (v76 < v40) {
          goto LABEL_156;
        }
        uint64_t v169 = v40;
        uint64_t v77 = v182;
        if (v182 != v76)
        {
          uint64_t v161 = v38;
          uint64_t v176 = v2;
          uint64_t v78 = v158 + 8 * v182;
          uint64_t v79 = v170;
          uint64_t v166 = v76;
          do
          {
            uint64_t v80 = *(void **)(v37 + 8 * v77);
            uint64_t v81 = v169;
            uint64_t v172 = v78;
            uint64_t v182 = v77;
            while (1)
            {
              unint64_t v82 = *(void **)v78;
              sub_1C4D18770((uint64_t)v80 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, (uint64_t)v9);
              if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v9, 1, v79) == 1)
              {
                id v83 = v80;
                id v84 = v82;
                static Date.distantPast.getter();
                sub_1C4D2DE6C((uint64_t)v9);
              }
              else
              {
                (*v180)(v184, (uint64_t)v9, v79);
                id v85 = v80;
                id v86 = v82;
              }
              sub_1C4D18770((uint64_t)v82 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, v47);
              int v87 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(v47, 1, v79);
              uint64_t v88 = v177;
              if (v87 == 1)
              {
                static Date.distantPast.getter();
                sub_1C4D2DE6C(v47);
              }
              else
              {
                (*v180)(v177, v47, v79);
              }
              unint64_t v89 = v184;
              char v90 = static Date.< infix(_:_:)();
              unint64_t v91 = v88;
              uint64_t v92 = *v179;
              (*v179)(v91, v79);
              v92(v89, v79);

              if ((v90 & 1) == 0) {
                break;
              }
              uint64_t v9 = v181;
              uint64_t v93 = v182;
              uint64_t v37 = v183;
              if (!v183) {
                goto LABEL_158;
              }
              unint64_t v94 = *(void **)v78;
              uint64_t v80 = *(void **)(v78 + 8);
              *(void *)uint64_t v78 = v80;
              *(void *)(v78 + 8) = v94;
              v78 -= 8;
              ++v81;
              uint64_t v47 = (uint64_t)v178;
              if (v93 == v81) {
                goto LABEL_57;
              }
            }
            uint64_t v47 = (uint64_t)v178;
            uint64_t v9 = v181;
            uint64_t v93 = v182;
            uint64_t v37 = v183;
LABEL_57:
            uint64_t v77 = v93 + 1;
            uint64_t v78 = v172 + 8;
          }
          while (v77 != v166);
          uint64_t v182 = v166;
          uint64_t v2 = v176;
          uint64_t v38 = v161;
          char v12 = v168;
        }
        uint64_t v40 = v169;
      }
    }
    if (v182 < v40) {
      goto LABEL_151;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1C4D2CAF8(0, *(void *)(v38 + 16) + 1, 1, (char *)v38);
      uint64_t v38 = v149;
    }
    unint64_t v96 = *(void *)(v38 + 16);
    unint64_t v95 = *(void *)(v38 + 24);
    unint64_t v97 = v96 + 1;
    uint64_t v37 = v183;
    uint64_t v176 = v2;
    if (v96 >= v95 >> 1)
    {
      sub_1C4D2CAF8(v95 > 1, v96 + 1, 1, (char *)v38);
      uint64_t v37 = v183;
      uint64_t v38 = v150;
    }
    *(void *)(v38 + 16) = v97;
    unint64_t v98 = (uint64_t *)(v38 + 32 + 16 * v96);
    uint64_t v99 = v182;
    *unint64_t v98 = v40;
    v98[1] = v99;
    if (v96) {
      break;
    }
    unint64_t v97 = 1;
    uint64_t v9 = v181;
LABEL_109:
    uint64_t v39 = v171;
    uint64_t v36 = v182;
    uint64_t v2 = v176;
    if (v182 >= v171) {
      goto LABEL_118;
    }
  }
  uint64_t v9 = v181;
  uint64_t v100 = v38 + 32;
  while (1)
  {
    unint64_t v101 = v97 - 1;
    if (v97 >= 4)
    {
      unint64_t v106 = v100 + 16 * v97;
      uint64_t v107 = *(void *)(v106 - 64);
      uint64_t v108 = *(void *)(v106 - 56);
      BOOL v112 = __OFSUB__(v108, v107);
      uint64_t v109 = v108 - v107;
      if (v112) {
        goto LABEL_136;
      }
      uint64_t v111 = *(void *)(v106 - 48);
      uint64_t v110 = *(void *)(v106 - 40);
      BOOL v112 = __OFSUB__(v110, v111);
      uint64_t v104 = v110 - v111;
      char v105 = v112;
      if (v112) {
        goto LABEL_137;
      }
      unint64_t v113 = v97 - 2;
      uint64_t v114 = (uint64_t *)(v100 + 16 * (v97 - 2));
      uint64_t v116 = *v114;
      uint64_t v115 = v114[1];
      BOOL v112 = __OFSUB__(v115, v116);
      uint64_t v117 = v115 - v116;
      if (v112) {
        goto LABEL_138;
      }
      BOOL v112 = __OFADD__(v104, v117);
      uint64_t v118 = v104 + v117;
      if (v112) {
        goto LABEL_140;
      }
      if (v118 >= v109)
      {
        BOOL v136 = (uint64_t *)(v100 + 16 * v101);
        uint64_t v138 = *v136;
        uint64_t v137 = v136[1];
        BOOL v112 = __OFSUB__(v137, v138);
        uint64_t v139 = v137 - v138;
        if (v112) {
          goto LABEL_146;
        }
        BOOL v129 = v104 < v139;
        goto LABEL_98;
      }
    }
    else
    {
      if (v97 != 3)
      {
        uint64_t v130 = *(void *)(v38 + 32);
        uint64_t v131 = *(void *)(v38 + 40);
        BOOL v112 = __OFSUB__(v131, v130);
        uint64_t v123 = v131 - v130;
        char v124 = v112;
        goto LABEL_92;
      }
      uint64_t v103 = *(void *)(v38 + 32);
      uint64_t v102 = *(void *)(v38 + 40);
      BOOL v112 = __OFSUB__(v102, v103);
      uint64_t v104 = v102 - v103;
      char v105 = v112;
    }
    if (v105) {
      goto LABEL_139;
    }
    unint64_t v113 = v97 - 2;
    Swift::String v119 = (uint64_t *)(v100 + 16 * (v97 - 2));
    uint64_t v121 = *v119;
    uint64_t v120 = v119[1];
    BOOL v122 = __OFSUB__(v120, v121);
    uint64_t v123 = v120 - v121;
    char v124 = v122;
    if (v122) {
      goto LABEL_141;
    }
    uint64_t v125 = (uint64_t *)(v100 + 16 * v101);
    uint64_t v127 = *v125;
    uint64_t v126 = v125[1];
    BOOL v112 = __OFSUB__(v126, v127);
    uint64_t v128 = v126 - v127;
    if (v112) {
      goto LABEL_143;
    }
    if (__OFADD__(v123, v128)) {
      goto LABEL_145;
    }
    if (v123 + v128 >= v104)
    {
      BOOL v129 = v104 < v128;
LABEL_98:
      if (v129) {
        unint64_t v101 = v113;
      }
      goto LABEL_100;
    }
LABEL_92:
    if (v124) {
      goto LABEL_142;
    }
    uint64_t v132 = (uint64_t *)(v100 + 16 * v101);
    uint64_t v134 = *v132;
    uint64_t v133 = v132[1];
    BOOL v112 = __OFSUB__(v133, v134);
    uint64_t v135 = v133 - v134;
    if (v112) {
      goto LABEL_144;
    }
    if (v135 < v123) {
      goto LABEL_109;
    }
LABEL_100:
    unint64_t v140 = v101 - 1;
    if (v101 - 1 >= v97)
    {
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
    if (!v37) {
      goto LABEL_159;
    }
    uint64_t v141 = v12;
    uint64_t v142 = v38;
    char v143 = (uint64_t *)(v100 + 16 * v140);
    uint64_t v144 = *v143;
    uint64_t v145 = (void *)(v100 + 16 * v101);
    uint64_t v146 = v145[1];
    uint64_t v147 = v176;
    sub_1C4D2BEF8((char *)(v37 + 8 * *v143), (char *)(v37 + 8 * *v145), (char *)(v37 + 8 * v146), v174);
    uint64_t v176 = v147;
    if (v147) {
      break;
    }
    if (v146 < v144) {
      goto LABEL_133;
    }
    if (v101 > *(void *)(v142 + 16)) {
      goto LABEL_134;
    }
    *char v143 = v144;
    *(void *)(v100 + 16 * v140 + 8) = v146;
    unint64_t v148 = *(void *)(v142 + 16);
    if (v101 >= v148) {
      goto LABEL_135;
    }
    uint64_t v38 = v142;
    unint64_t v97 = v148 - 1;
    memmove((void *)(v100 + 16 * v101), v145 + 2, 16 * (v148 - 1 - v101));
    *(void *)(v142 + 16) = v148 - 1;
    BOOL v129 = v148 > 2;
    uint64_t v9 = v181;
    char v12 = v141;
    uint64_t v37 = v183;
    if (!v129) {
      goto LABEL_109;
    }
  }
  uint64_t v2 = v176;
LABEL_115:
  swift_bridgeObjectRelease();
  if (v171 < -1)
  {
    __break(1u);
    goto LABEL_117;
  }
LABEL_130:
  *(void *)((v185 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()();
  swift_bridgeObjectRelease();
}

void sub_1C4D2AC08(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v181 = type metadata accessor for PartialTrafficLog(0);
  uint64_t v172 = *(void *)(v181 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v181);
  uint64_t v164 = (uint64_t)&v153 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v182 = (uint64_t)&v153 - v7;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v176 = (uint64_t)&v153 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v175 = (uint64_t)&v153 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v174 = (uint64_t)&v153 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v173 = (uint64_t)&v153 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v168 = (uint64_t)&v153 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v167 = (uint64_t)&v153 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v166 = (uint64_t)&v153 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v165 = (uint64_t)&v153 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v153 - v25;
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = (char *)&v153 - v28;
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  Swift::Int v32 = (char *)&v153 - v31;
  MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v153 - v33;
  Swift::Int v35 = a1[1];
  Swift::Int v162 = _minimumMergeRunLength(_:)(v35);
  if (v162 >= v35)
  {
    if ((v35 & 0x8000000000000000) == 0)
    {
      if (v35) {
        sub_1C4D2BBD0(0, v35, 1, a1);
      }
      return;
    }
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  uint64_t v158 = sub_1C4D145E0(v35 / 2);
  unint64_t v171 = v36;
  uint64_t v159 = v35;
  if (v35 <= 0)
  {
    uint64_t v38 = MEMORY[0x1E4FBC860];
    unint64_t v92 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_102:
    if (v92 < 2) {
      goto LABEL_116;
    }
    uint64_t v144 = *a1;
    while (1)
    {
      unint64_t v145 = v92 - 2;
      if (v92 < 2) {
        break;
      }
      if (!v144) {
        goto LABEL_148;
      }
      uint64_t v146 = v38;
      uint64_t v147 = v38 + 32;
      uint64_t v148 = *(void *)(v38 + 32 + 16 * v145);
      uint64_t v149 = *(void *)(v38 + 32 + 16 * (v92 - 1) + 8);
      sub_1C4D2C510(v144 + *(void *)(v172 + 72) * v148, v144 + *(void *)(v172 + 72) * *(void *)(v147 + 16 * (v92 - 1)), v144 + *(void *)(v172 + 72) * v149, v171);
      if (v2) {
        goto LABEL_114;
      }
      if (v149 < v148) {
        goto LABEL_135;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C4D2CBD0(v146);
        uint64_t v146 = v152;
      }
      if (v145 >= *(void *)(v146 + 16)) {
        goto LABEL_136;
      }
      uint64_t v150 = (void *)(v146 + 32 + 16 * v145);
      void *v150 = v148;
      v150[1] = v149;
      unint64_t v151 = *(void *)(v146 + 16);
      if (v92 > v151) {
        goto LABEL_137;
      }
      uint64_t v38 = v146;
      memmove((void *)(v146 + 32 + 16 * (v92 - 1)), (const void *)(v146 + 32 + 16 * v92), 16 * (v151 - v92));
      *(void *)(v146 + 16) = v151 - 1;
      unint64_t v92 = v151 - 1;
      if (v151 <= 2) {
        goto LABEL_116;
      }
    }
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
  uint64_t v161 = v34;
  v155 = v32;
  unint64_t v156 = v29;
  uint64_t v157 = v26;
  uint64_t v37 = 0;
  uint64_t v38 = MEMORY[0x1E4FBC860];
  Swift::Int v39 = v35;
  uint64_t v170 = a1;
  while (1)
  {
    uint64_t v40 = v37;
    Swift::Int v41 = v37 + 1;
    uint64_t v169 = v37;
    if (v37 + 1 >= v39)
    {
      Swift::Int v59 = v162;
    }
    else
    {
      uint64_t v42 = *a1;
      uint64_t v43 = *(void *)(v172 + 72);
      uint64_t v184 = v43;
      uint64_t v44 = (uint64_t)v161;
      sub_1C4D147F0(v42 + v43 * v41, (uint64_t)v161);
      uint64_t v45 = v42 + v43 * v40;
      uint64_t v46 = (uint64_t)v155;
      sub_1C4D147F0(v45, (uint64_t)v155);
      uint64_t v47 = (uint64_t)v156;
      sub_1C4D147F0(v44, (uint64_t)v156);
      Swift::Int v183 = v39;
      LODWORD(v180) = swift_getEnumCaseMultiPayload();
      sub_1C4D2DD94(v47, (void (*)(void))type metadata accessor for PartialTrafficLog);
      uint64_t v48 = (uint64_t)v157;
      sub_1C4D147F0(v46, (uint64_t)v157);
      Swift::Int v39 = v183;
      LODWORD(v179) = swift_getEnumCaseMultiPayload();
      sub_1C4D2DD94(v48, (void (*)(void))type metadata accessor for PartialTrafficLog);
      uint64_t v49 = v46;
      uint64_t v40 = v169;
      sub_1C4D2DD94(v49, (void (*)(void))type metadata accessor for PartialTrafficLog);
      sub_1C4D2DD94((uint64_t)v161, (void (*)(void))type metadata accessor for PartialTrafficLog);
      uint64_t v163 = v42;
      if (v40 + 2 >= v39)
      {
        Swift::Int v41 = v40 + 2;
      }
      else
      {
        uint64_t v154 = v2;
        uint64_t v160 = v38;
        uint64_t v50 = v42;
        uint64_t v177 = v184 * (v40 + 2);
        uint64_t v178 = v184 * v41;
        Swift::Int v51 = v40 + 2;
        while (1)
        {
          BOOL v52 = v180 < v179;
          uint64_t v53 = v165;
          sub_1C4D147F0(v50 + v177, v165);
          uint64_t v54 = v166;
          sub_1C4D147F0(v50 + v178, v166);
          uint64_t v55 = v167;
          sub_1C4D147F0(v53, v167);
          unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          sub_1C4D2DD94(v55, (void (*)(void))type metadata accessor for PartialTrafficLog);
          uint64_t v57 = v168;
          sub_1C4D147F0(v54, v168);
          unsigned int v58 = swift_getEnumCaseMultiPayload();
          sub_1C4D2DD94(v57, (void (*)(void))type metadata accessor for PartialTrafficLog);
          sub_1C4D2DD94(v54, (void (*)(void))type metadata accessor for PartialTrafficLog);
          sub_1C4D2DD94(v53, (void (*)(void))type metadata accessor for PartialTrafficLog);
          if (v52 == EnumCaseMultiPayload >= v58) {
            break;
          }
          ++v51;
          v50 += v184;
          Swift::Int v39 = v183;
          if (v51 >= v183)
          {
            Swift::Int v41 = v183;
            uint64_t v40 = v169;
            a1 = v170;
            uint64_t v38 = v160;
            uint64_t v2 = v154;
            goto LABEL_13;
          }
        }
        uint64_t v40 = v169;
        a1 = v170;
        uint64_t v38 = v160;
        Swift::Int v41 = v51;
        uint64_t v2 = v154;
        Swift::Int v39 = v183;
      }
LABEL_13:
      Swift::Int v59 = v162;
      if (v180 < v179)
      {
        if (v41 < v40) {
          goto LABEL_141;
        }
        if (v40 < v41)
        {
          uint64_t v160 = v38;
          uint64_t v60 = 0;
          uint64_t v61 = v184;
          uint64_t v62 = v184 * (v41 - 1);
          uint64_t v63 = v40;
          Swift::Int v64 = v41 * v184;
          Swift::Int v65 = v63;
          uint64_t v66 = v63 * v184;
          do
          {
            if (v65 != v41 + v60 - 1)
            {
              uint64_t v67 = v2;
              Swift::Int v68 = v41;
              uint64_t v69 = v163;
              if (!v163) {
                goto LABEL_147;
              }
              unint64_t v70 = v163 + v66;
              uint64_t v180 = v163 + v62;
              sub_1C4D2DD34(v163 + v66, v164, (void (*)(void))type metadata accessor for PartialTrafficLog);
              if (v66 < v62 || v70 >= v69 + v64)
              {
                uint64_t v72 = v180;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v72 = v180;
                if (v66 != v62) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              sub_1C4D2DD34(v164, v72, (void (*)(void))type metadata accessor for PartialTrafficLog);
              Swift::Int v41 = v68;
              uint64_t v2 = v67;
              uint64_t v61 = v184;
            }
            ++v65;
            --v60;
            v62 -= v61;
            v64 -= v61;
            v66 += v61;
          }
          while (v65 < v41 + v60);
          uint64_t v40 = v169;
          a1 = v170;
          uint64_t v38 = v160;
          Swift::Int v59 = v162;
          Swift::Int v39 = v183;
        }
      }
    }
    if (v41 < v39)
    {
      if (__OFSUB__(v41, v40)) {
        goto LABEL_139;
      }
      if (v41 - v40 < v59)
      {
        if (__OFADD__(v40, v59)) {
          goto LABEL_142;
        }
        if (v40 + v59 >= v39) {
          Swift::Int v73 = v39;
        }
        else {
          Swift::Int v73 = v40 + v59;
        }
        if (v73 < v40) {
          goto LABEL_143;
        }
        if (v41 != v73)
        {
          uint64_t v160 = v38;
          uint64_t v154 = v2;
          uint64_t v74 = *(void *)(v172 + 72);
          uint64_t v75 = v74 * (v41 - 1);
          uint64_t v177 = v74;
          uint64_t v76 = v41 * v74;
          uint64_t v163 = v73;
          do
          {
            uint64_t v77 = 0;
            uint64_t v179 = v75;
            uint64_t v180 = v41;
            uint64_t v178 = v76;
            while (1)
            {
              Swift::Int v183 = v40;
              uint64_t v78 = *a1;
              uint64_t v79 = v76 + v77 + *a1;
              uint64_t v80 = v173;
              sub_1C4D147F0(v79, v173);
              uint64_t v81 = v75 + v77 + v78;
              uint64_t v82 = v174;
              sub_1C4D147F0(v81, v174);
              uint64_t v83 = v175;
              sub_1C4D147F0(v80, v175);
              LODWORD(v184) = swift_getEnumCaseMultiPayload();
              sub_1C4D2DD94(v83, (void (*)(void))type metadata accessor for PartialTrafficLog);
              uint64_t v84 = v176;
              sub_1C4D147F0(v82, v176);
              unsigned int v85 = swift_getEnumCaseMultiPayload();
              sub_1C4D2DD94(v84, (void (*)(void))type metadata accessor for PartialTrafficLog);
              sub_1C4D2DD94(v82, (void (*)(void))type metadata accessor for PartialTrafficLog);
              sub_1C4D2DD94(v80, (void (*)(void))type metadata accessor for PartialTrafficLog);
              if (v184 >= v85) {
                break;
              }
              uint64_t v86 = *a1;
              if (!*a1) {
                goto LABEL_145;
              }
              uint64_t v76 = v178;
              uint64_t v75 = v179;
              uint64_t v87 = v86 + v179 + v77;
              sub_1C4D2DD34(v86 + v178 + v77, v182, (void (*)(void))type metadata accessor for PartialTrafficLog);
              swift_arrayInitWithTakeFrontToBack();
              sub_1C4D2DD34(v182, v87, (void (*)(void))type metadata accessor for PartialTrafficLog);
              v77 -= v177;
              uint64_t v40 = v183 + 1;
              uint64_t v88 = v180;
              if (v180 == v183 + 1) {
                goto LABEL_46;
              }
            }
            uint64_t v75 = v179;
            uint64_t v88 = v180;
            uint64_t v76 = v178;
LABEL_46:
            Swift::Int v41 = v88 + 1;
            v75 += v177;
            v76 += v177;
            uint64_t v40 = v169;
          }
          while (v41 != v163);
          Swift::Int v41 = v163;
          uint64_t v2 = v154;
          uint64_t v38 = v160;
        }
      }
    }
    if (v41 < v40) {
      goto LABEL_138;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v180 = v41;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1C4D2CAF8(0, *(void *)(v38 + 16) + 1, 1, (char *)v38);
      uint64_t v38 = v142;
    }
    unint64_t v91 = *(void *)(v38 + 16);
    unint64_t v90 = *(void *)(v38 + 24);
    unint64_t v92 = v91 + 1;
    if (v91 >= v90 >> 1)
    {
      sub_1C4D2CAF8(v90 > 1, v91 + 1, 1, (char *)v38);
      uint64_t v38 = v143;
    }
    *(void *)(v38 + 16) = v92;
    uint64_t v93 = v38 + 32;
    unint64_t v94 = (uint64_t *)(v38 + 32 + 16 * v91);
    uint64_t v95 = v180;
    uint64_t *v94 = v40;
    v94[1] = v95;
    if (v91) {
      break;
    }
    unint64_t v92 = 1;
LABEL_96:
    a1 = v170;
    Swift::Int v39 = v170[1];
    uint64_t v37 = v180;
    if (v180 >= v39) {
      goto LABEL_102;
    }
  }
  while (1)
  {
    unint64_t v96 = v92 - 1;
    if (v92 >= 4)
    {
      unint64_t v101 = v93 + 16 * v92;
      uint64_t v102 = *(void *)(v101 - 64);
      uint64_t v103 = *(void *)(v101 - 56);
      BOOL v107 = __OFSUB__(v103, v102);
      uint64_t v104 = v103 - v102;
      if (v107) {
        goto LABEL_123;
      }
      uint64_t v106 = *(void *)(v101 - 48);
      uint64_t v105 = *(void *)(v101 - 40);
      BOOL v107 = __OFSUB__(v105, v106);
      uint64_t v99 = v105 - v106;
      char v100 = v107;
      if (v107) {
        goto LABEL_124;
      }
      unint64_t v108 = v92 - 2;
      uint64_t v109 = (uint64_t *)(v93 + 16 * (v92 - 2));
      uint64_t v111 = *v109;
      uint64_t v110 = v109[1];
      BOOL v107 = __OFSUB__(v110, v111);
      uint64_t v112 = v110 - v111;
      if (v107) {
        goto LABEL_125;
      }
      BOOL v107 = __OFADD__(v99, v112);
      uint64_t v113 = v99 + v112;
      if (v107) {
        goto LABEL_127;
      }
      if (v113 >= v104)
      {
        uint64_t v131 = (uint64_t *)(v93 + 16 * v96);
        uint64_t v133 = *v131;
        uint64_t v132 = v131[1];
        BOOL v107 = __OFSUB__(v132, v133);
        uint64_t v134 = v132 - v133;
        if (v107) {
          goto LABEL_133;
        }
        BOOL v124 = v99 < v134;
        goto LABEL_85;
      }
    }
    else
    {
      if (v92 != 3)
      {
        uint64_t v125 = *(void *)(v38 + 32);
        uint64_t v126 = *(void *)(v38 + 40);
        BOOL v107 = __OFSUB__(v126, v125);
        uint64_t v118 = v126 - v125;
        char v119 = v107;
        goto LABEL_79;
      }
      uint64_t v98 = *(void *)(v38 + 32);
      uint64_t v97 = *(void *)(v38 + 40);
      BOOL v107 = __OFSUB__(v97, v98);
      uint64_t v99 = v97 - v98;
      char v100 = v107;
    }
    if (v100) {
      goto LABEL_126;
    }
    unint64_t v108 = v92 - 2;
    uint64_t v114 = (uint64_t *)(v93 + 16 * (v92 - 2));
    uint64_t v116 = *v114;
    uint64_t v115 = v114[1];
    BOOL v117 = __OFSUB__(v115, v116);
    uint64_t v118 = v115 - v116;
    char v119 = v117;
    if (v117) {
      goto LABEL_128;
    }
    uint64_t v120 = (uint64_t *)(v93 + 16 * v96);
    uint64_t v122 = *v120;
    uint64_t v121 = v120[1];
    BOOL v107 = __OFSUB__(v121, v122);
    uint64_t v123 = v121 - v122;
    if (v107) {
      goto LABEL_130;
    }
    if (__OFADD__(v118, v123)) {
      goto LABEL_132;
    }
    if (v118 + v123 >= v99)
    {
      BOOL v124 = v99 < v123;
LABEL_85:
      if (v124) {
        unint64_t v96 = v108;
      }
      goto LABEL_87;
    }
LABEL_79:
    if (v119) {
      goto LABEL_129;
    }
    uint64_t v127 = (uint64_t *)(v93 + 16 * v96);
    uint64_t v129 = *v127;
    uint64_t v128 = v127[1];
    BOOL v107 = __OFSUB__(v128, v129);
    uint64_t v130 = v128 - v129;
    if (v107) {
      goto LABEL_131;
    }
    if (v130 < v118) {
      goto LABEL_96;
    }
LABEL_87:
    unint64_t v135 = v96 - 1;
    if (v96 - 1 >= v92)
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if (!*v170) {
      goto LABEL_146;
    }
    uint64_t v136 = v38;
    uint64_t v137 = (uint64_t *)(v93 + 16 * v135);
    uint64_t v138 = *v137;
    uint64_t v139 = (void *)(v93 + 16 * v96);
    uint64_t v140 = v139[1];
    sub_1C4D2C510(*v170 + *(void *)(v172 + 72) * *v137, *v170 + *(void *)(v172 + 72) * *v139, *v170 + *(void *)(v172 + 72) * v140, v171);
    if (v2) {
      break;
    }
    if (v140 < v138) {
      goto LABEL_120;
    }
    if (v96 > *(void *)(v136 + 16)) {
      goto LABEL_121;
    }
    *uint64_t v137 = v138;
    *(void *)(v93 + 16 * v135 + 8) = v140;
    unint64_t v141 = *(void *)(v136 + 16);
    if (v96 >= v141) {
      goto LABEL_122;
    }
    uint64_t v38 = v136;
    unint64_t v92 = v141 - 1;
    memmove((void *)(v93 + 16 * v96), v139 + 2, 16 * (v141 - 1 - v96));
    *(void *)(v136 + 16) = v141 - 1;
    if (v141 <= 2) {
      goto LABEL_96;
    }
  }
LABEL_114:
  swift_bridgeObjectRelease();
  if (v159 >= -1) {
    goto LABEL_117;
  }
  __break(1u);
LABEL_116:
  swift_bridgeObjectRelease();
  if (v159 >= -1)
  {
LABEL_117:
    *(void *)(v158 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
}

void sub_1C4D2B8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v38 = a1;
  uint64_t v7 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v42 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v36 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v43 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v36 - v16;
  uint64_t v37 = a2;
  if (a3 != a2)
  {
    uint64_t v18 = *a4;
    uint64_t v40 = (void (**)(char *, char *, uint64_t))(v15 + 32);
    Swift::Int v41 = v11;
    uint64_t v19 = (void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v44 = v18;
    uint64_t v20 = v18 + 8 * a3 - 8;
    while (2)
    {
      uint64_t v45 = a3;
      uint64_t v21 = *(void **)(v44 + 8 * a3);
      uint64_t v22 = v38;
      uint64_t v39 = v20;
      do
      {
        uint64_t v23 = *(void **)v20;
        sub_1C4D18770((uint64_t)v21 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, (uint64_t)v11);
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v11, 1, v12) == 1)
        {
          id v24 = v21;
          id v25 = v23;
          static Date.distantPast.getter();
          sub_1C4D2DE6C((uint64_t)v11);
        }
        else
        {
          (*v40)(v17, v11, v12);
          id v26 = v21;
          id v27 = v23;
        }
        uint64_t v28 = v42;
        sub_1C4D18770((uint64_t)v23 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, v42);
        int v29 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(v28, 1, v12);
        uint64_t v30 = v43;
        if (v29 == 1)
        {
          static Date.distantPast.getter();
          sub_1C4D2DE6C(v28);
        }
        else
        {
          (*v40)(v43, (char *)v28, v12);
        }
        char v31 = static Date.< infix(_:_:)();
        Swift::Int v32 = v30;
        uint64_t v33 = *v19;
        (*v19)(v32, v12);
        v33(v17, v12);

        uint64_t v34 = v45;
        uint64_t v11 = v41;
        if ((v31 & 1) == 0) {
          break;
        }
        if (!v44)
        {
          __break(1u);
          return;
        }
        Swift::Int v35 = *(void **)v20;
        uint64_t v21 = *(void **)(v20 + 8);
        *(void *)uint64_t v20 = v21;
        *(void *)(v20 + 8) = v35;
        v20 -= 8;
        ++v22;
      }
      while (v34 != v22);
      a3 = v34 + 1;
      uint64_t v20 = v39 + 8;
      if (a3 != v37) {
        continue;
      }
      break;
    }
  }
}

uint64_t sub_1C4D2BBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v35 = a1;
  uint64_t v44 = type metadata accessor for PartialTrafficLog(0);
  uint64_t v7 = MEMORY[0x1F4188790](v44);
  uint64_t v45 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v39 = (uint64_t)&v33 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v38 = (uint64_t)&v33 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v37 = (uint64_t)&v33 - v14;
  uint64_t result = MEMORY[0x1F4188790](v13);
  uint64_t v36 = (uint64_t)&v33 - v17;
  uint64_t v43 = a3;
  uint64_t v34 = a2;
  if (a3 != a2)
  {
    uint64_t v18 = *(void *)(v16 + 72);
    uint64_t v19 = v18 * (v43 - 1);
    uint64_t v40 = v18;
    uint64_t v20 = v18 * v43;
    uint64_t v47 = a4;
    while (2)
    {
      uint64_t v21 = 0;
      uint64_t v22 = v35;
      uint64_t v41 = v20;
      uint64_t v42 = v19;
      do
      {
        uint64_t v23 = *v47;
        uint64_t v24 = v20 + v21 + *v47;
        uint64_t v25 = v36;
        sub_1C4D147F0(v24, v36);
        uint64_t v26 = v37;
        sub_1C4D147F0(v19 + v21 + v23, v37);
        uint64_t v27 = v38;
        sub_1C4D147F0(v25, v38);
        unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        sub_1C4D2DD94(v27, (void (*)(void))type metadata accessor for PartialTrafficLog);
        uint64_t v28 = v39;
        sub_1C4D147F0(v26, v39);
        LODWORD(v23) = swift_getEnumCaseMultiPayload();
        uint64_t v29 = v28;
        uint64_t v19 = v42;
        sub_1C4D2DD94(v29, (void (*)(void))type metadata accessor for PartialTrafficLog);
        sub_1C4D2DD94(v26, (void (*)(void))type metadata accessor for PartialTrafficLog);
        uint64_t v30 = v25;
        uint64_t v20 = v41;
        uint64_t result = sub_1C4D2DD94(v30, (void (*)(void))type metadata accessor for PartialTrafficLog);
        if (EnumCaseMultiPayload >= v23) {
          break;
        }
        uint64_t v31 = *v47;
        if (!*v47)
        {
          __break(1u);
          return result;
        }
        uint64_t v32 = v31 + v19 + v21;
        sub_1C4D2DD34(v31 + v20 + v21, v45, (void (*)(void))type metadata accessor for PartialTrafficLog);
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = sub_1C4D2DD34(v45, v32, (void (*)(void))type metadata accessor for PartialTrafficLog);
        v21 -= v40;
        ++v22;
      }
      while (v43 != v22);
      v19 += v40;
      v20 += v40;
      if (++v43 != v34) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_1C4D2BEF8(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v8 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v78 = (uint64_t)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v79 = (void (**)(char *, uint64_t, uint64_t))((char *)&v74 - v12);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v82 = (char *)&v74 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v81 = (char *)&v74 - v15;
  uint64_t v85 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v85 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v85);
  uint64_t v80 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v84 = (char *)&v74 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v77 = (char *)&v74 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v83 = (char *)&v74 - v23;
  uint64_t v24 = (a2 - a1) / 8;
  uint64_t v25 = (a3 - a2) / 8;
  if (v24 >= v25)
  {
    sub_1C4D298A0(a2, (a3 - a2) / 8, a4);
    uint64_t v26 = &a4[8 * v25];
    if (a3 - a2 >= 8 && a1 < a2)
    {
      uint64_t v75 = (void (**)(char *, uint64_t, uint64_t))(v16 + 32);
      uint64_t v77 = (char *)(v16 + 8);
      Swift::Int v51 = a3 - 8;
      uint64_t v87 = a4;
      uint64_t v76 = a1;
      BOOL v52 = v80;
      uint64_t v53 = v85;
      do
      {
        uint64_t v86 = v26;
        uint64_t v54 = (void *)*((void *)v26 - 1);
        uint64_t v81 = v26 - 8;
        uint64_t v55 = (void *)*((void *)a2 - 1);
        uint64_t v56 = v79;
        sub_1C4D18770((uint64_t)v54 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, (uint64_t)v79);
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v56, 1, v53) == 1)
        {
          id v57 = v54;
          id v58 = v55;
          static Date.distantPast.getter();
          sub_1C4D2DE6C((uint64_t)v56);
        }
        else
        {
          (*v75)(v84, (uint64_t)v56, v53);
          id v59 = v54;
          id v60 = v55;
        }
        uint64_t v61 = v78;
        sub_1C4D18770((uint64_t)v55 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, v78);
        int v62 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(v61, 1, v53);
        uint64_t v82 = a2 - 8;
        uint64_t v83 = a2;
        if (v62 == 1)
        {
          static Date.distantPast.getter();
          sub_1C4D2DE6C(v61);
        }
        else
        {
          (*v75)(v52, v61, v53);
        }
        uint64_t v63 = v51 + 8;
        Swift::Int v64 = v84;
        char v65 = static Date.< infix(_:_:)();
        uint64_t v66 = v52;
        char v67 = v65;
        Swift::Int v68 = *(void (**)(char *, uint64_t))v77;
        (*(void (**)(char *, uint64_t))v77)(v66, v53);
        v68(v64, v53);

        if (v67)
        {
          uint64_t v69 = v82;
          BOOL v70 = v63 != v83 || v51 >= v83;
          a2 = v82;
          a4 = v87;
          unint64_t v71 = (unint64_t)v76;
          uint64_t v26 = v86;
        }
        else
        {
          BOOL v70 = v63 != v86 || v51 >= v86;
          uint64_t v26 = v81;
          uint64_t v69 = v81;
          a4 = v87;
          a2 = v83;
          unint64_t v71 = (unint64_t)v76;
        }
        BOOL v52 = v80;
        if (v70) {
          *(void *)Swift::Int v51 = *(void *)v69;
        }
        v51 -= 8;
      }
      while (v26 > a4 && (unint64_t)a2 > v71);
    }
  }
  else
  {
    sub_1C4D298A0(a1, (a2 - a1) / 8, a4);
    uint64_t v26 = &a4[8 * v24];
    if (a2 - a1 >= 8 && a2 < a3)
    {
      uint64_t v79 = (void (**)(char *, uint64_t, uint64_t))(v16 + 32);
      uint64_t v84 = (char *)(v16 + 8);
      uint64_t v80 = a3;
      uint64_t v29 = (uint64_t)v81;
      uint64_t v28 = (uint64_t)v82;
      uint64_t v86 = &a4[8 * v24];
      uint64_t v30 = v85;
      do
      {
        uint64_t v31 = *(void **)a2;
        uint64_t v32 = *(void **)a4;
        sub_1C4D18770(*(void *)a2 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, v29);
        if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v29, 1, v30) == 1)
        {
          id v33 = v31;
          id v34 = v32;
          static Date.distantPast.getter();
          sub_1C4D2DE6C(v29);
        }
        else
        {
          (*v79)(v83, v29, v30);
          id v35 = v31;
          id v36 = v32;
        }
        sub_1C4D18770((uint64_t)v32 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, v28);
        int v37 = _s14CloudKitDaemon17PartialTrafficLogOwet_0(v28, 1, v30);
        uint64_t v87 = a4;
        uint64_t v38 = a1;
        uint64_t v39 = a2;
        uint64_t v40 = v77;
        if (v37 == 1)
        {
          static Date.distantPast.getter();
          sub_1C4D2DE6C(v28);
        }
        else
        {
          (*v79)(v77, v28, v30);
        }
        uint64_t v41 = v83;
        char v42 = static Date.< infix(_:_:)();
        uint64_t v43 = v40;
        uint64_t v44 = *(void (**)(char *, uint64_t))v84;
        (*(void (**)(char *, uint64_t))v84)(v43, v30);
        v44(v41, v30);

        if (v42)
        {
          uint64_t v45 = v39;
          a2 = v39 + 8;
          uint64_t v46 = v38;
          BOOL v47 = v38 == v39;
          uint64_t v26 = v86;
          uint64_t v48 = v80;
          uint64_t v29 = (uint64_t)v81;
          uint64_t v28 = (uint64_t)v82;
          a4 = v87;
        }
        else
        {
          uint64_t v45 = v87;
          a4 = v87 + 8;
          uint64_t v46 = v38;
          BOOL v47 = v38 == v87;
          a2 = v39;
          uint64_t v26 = v86;
          uint64_t v48 = v80;
          uint64_t v29 = (uint64_t)v81;
          uint64_t v28 = (uint64_t)v82;
        }
        if (!v47) {
          *(void *)uint64_t v46 = *(void *)v45;
        }
        a1 = v46 + 8;
      }
      while (a4 < v26 && a2 < v48);
    }
    a2 = a1;
  }
  sub_1C4D298A0(a4, (v26 - a4) / 8, a2);
  return 1;
}

void sub_1C4D2C510(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v73 = type metadata accessor for PartialTrafficLog(0);
  uint64_t v8 = MEMORY[0x1F4188790](v73);
  unint64_t v68 = (unint64_t)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v67 = (uint64_t)&v60 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v66 = (char *)&v60 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  char v65 = (char *)&v60 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  unint64_t v71 = (unint64_t)&v60 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  unint64_t v70 = (unint64_t)&v60 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  Swift::Int v64 = (char *)&v60 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v63 = (uint64_t)&v60 - v22;
  uint64_t v24 = *(void *)(v23 + 72);
  if (!v24)
  {
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  int64_t v25 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v24 == -1) {
    goto LABEL_77;
  }
  int64_t v27 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v24 == -1) {
    goto LABEL_78;
  }
  uint64_t v29 = v25 / v24;
  uint64_t v30 = v27 / v24;
  uint64_t v69 = v24;
  if (v25 / v24 < v27 / v24)
  {
    sub_1C4D29790(a1, v25 / v24, a4, (void (*)(void))type metadata accessor for PartialTrafficLog);
    unint64_t v31 = a4 + v29 * v24;
    if (v29 * v24 < 1 || a2 >= a3)
    {
LABEL_40:
      a2 = a1;
      goto LABEL_71;
    }
    unint64_t v68 = a4 + v29 * v24;
    unint64_t v62 = a3;
    uint64_t v33 = (uint64_t)v64;
    while (1)
    {
      unint64_t v72 = a2;
      uint64_t v34 = a2;
      uint64_t v35 = v63;
      sub_1C4D147F0(v34, v63);
      sub_1C4D147F0(a4, v33);
      uint64_t v36 = v70;
      sub_1C4D147F0(v35, v70);
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      sub_1C4D2DD94(v36, (void (*)(void))type metadata accessor for PartialTrafficLog);
      uint64_t v38 = v71;
      sub_1C4D147F0(v33, v71);
      unsigned int v39 = swift_getEnumCaseMultiPayload();
      sub_1C4D2DD94(v38, (void (*)(void))type metadata accessor for PartialTrafficLog);
      sub_1C4D2DD94(v33, (void (*)(void))type metadata accessor for PartialTrafficLog);
      sub_1C4D2DD94(v35, (void (*)(void))type metadata accessor for PartialTrafficLog);
      if (EnumCaseMultiPayload >= v39)
      {
        a2 = v72;
        uint64_t v24 = v69;
        if (a1 >= a4 && a1 < a4 + v69)
        {
          unint64_t v42 = v62;
          if (a1 != a4) {
            swift_arrayInitWithTakeBackToFront();
          }
          a4 += v24;
          goto LABEL_35;
        }
        swift_arrayInitWithTakeFrontToBack();
        a4 += v24;
      }
      else
      {
        uint64_t v24 = v69;
        a2 = v72 + v69;
        if (a1 >= v72 && a1 < a2)
        {
          unint64_t v42 = v62;
          if (a1 != v72) {
            swift_arrayInitWithTakeBackToFront();
          }
          goto LABEL_35;
        }
        swift_arrayInitWithTakeFrontToBack();
      }
      unint64_t v42 = v62;
LABEL_35:
      unint64_t v31 = v68;
      a1 += v24;
      if (a4 >= v68 || a2 >= v42) {
        goto LABEL_40;
      }
    }
  }
  sub_1C4D29790(a2, v27 / v24, a4, (void (*)(void))type metadata accessor for PartialTrafficLog);
  unint64_t v31 = a4 + v30 * v24;
  if (v30 * v24 >= 1 && a1 < a2)
  {
    uint64_t v63 = -v24;
    Swift::Int v64 = (char *)a4;
    unint64_t v61 = a1;
    uint64_t v45 = (uint64_t)v65;
    uint64_t v46 = (uint64_t)v66;
    while (1)
    {
      unint64_t v47 = a3;
      uint64_t v48 = v63;
      unint64_t v71 = v31 + v63;
      unint64_t v49 = v31;
      sub_1C4D147F0(v31 + v63, v45);
      unint64_t v70 = a2 + v48;
      sub_1C4D147F0(a2 + v48, v46);
      uint64_t v50 = v67;
      sub_1C4D147F0(v45, v67);
      LODWORD(v72) = swift_getEnumCaseMultiPayload();
      sub_1C4D2DD94(v50, (void (*)(void))type metadata accessor for PartialTrafficLog);
      unint64_t v51 = a2;
      uint64_t v52 = v68;
      sub_1C4D147F0(v46, v68);
      unsigned int v53 = swift_getEnumCaseMultiPayload();
      a3 = v47 + v48;
      sub_1C4D2DD94(v52, (void (*)(void))type metadata accessor for PartialTrafficLog);
      sub_1C4D2DD94(v46, (void (*)(void))type metadata accessor for PartialTrafficLog);
      sub_1C4D2DD94(v45, (void (*)(void))type metadata accessor for PartialTrafficLog);
      if (v72 < v53)
      {
        if (v47 < v51 || a3 >= v51)
        {
          a2 = v70;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a2 = v70;
          if (v47 != v51) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        unint64_t v31 = v49;
        goto LABEL_65;
      }
      BOOL v55 = v47 < v49 || a3 >= v49;
      a2 = v51;
      if (v55)
      {
        uint64_t v56 = v71;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        if (v47 == v49)
        {
          unint64_t v31 = v71;
          goto LABEL_65;
        }
        uint64_t v56 = v71;
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v31 = v56;
LABEL_65:
      if (v31 <= (unint64_t)v64 || a2 <= v61)
      {
        a4 = (unint64_t)v64;
        uint64_t v24 = v69;
        break;
      }
    }
  }
LABEL_71:
  int64_t v58 = v31 - a4;
  if (v24 != -1 || v58 != 0x8000000000000000)
  {
    sub_1C4D29790(a4, v58 / v24, a2, (void (*)(void))type metadata accessor for PartialTrafficLog);
    return;
  }
LABEL_79:
  __break(1u);
}

void sub_1C4D2CAF8(char a1, uint64_t a2, char a3, char *a4)
{
  if (a3)
  {
    sub_1C4D2E750();
    if (v7 != v8)
    {
      sub_1C4D2E7F0();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_1C4D2E740();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v6 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    sub_1C4D10728(&qword_1EA3CBE38);
    uint64_t v11 = (char *)swift_allocObject();
    j__malloc_size(v11);
    sub_1C4D2E8FC();
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = v12;
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || &v14[16 * v9] <= v13) {
      memmove(v13, v14, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v9);
  }
  swift_bridgeObjectRelease();
}

void sub_1C4D2CBD0(uint64_t a1)
{
}

unsigned __int8 *sub_1C4D2CBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_1C4D2E238();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_1C4D2CF54();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v13 = sub_1C4D2CCD8(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_1C4D2CCD8(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v15 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v16 = a3 + 48;
        unsigned __int8 v17 = a3 + 55;
        unsigned __int8 v18 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = 58;
        }
        else
        {
          unsigned __int8 v18 = 97;
          unsigned __int8 v17 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          uint64_t v19 = result + 1;
          do
          {
            unsigned int v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                uint64_t v13 = 0;
                if (v20 < 0x61 || v20 >= v18) {
                  return (unsigned __int8 *)v13;
                }
                char v21 = -87;
              }
              else
              {
                char v21 = -55;
              }
            }
            else
            {
              char v21 = -48;
            }
            uint64_t v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21))) {
              return 0;
            }
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v23 = a3 + 48;
        unsigned __int8 v24 = a3 + 55;
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v23 = 58;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v24 = 65;
        }
        if (result)
        {
          uint64_t v26 = 0;
          do
          {
            unsigned int v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                uint64_t v13 = 0;
                if (v27 < 0x61 || v27 >= v25) {
                  return (unsigned __int8 *)v13;
                }
                char v28 = -87;
              }
              else
              {
                char v28 = -55;
              }
            }
            else
            {
              char v28 = -48;
            }
            uint64_t v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
              return 0;
            }
            uint64_t v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28))) {
              return 0;
            }
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }
        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          for (unint64_t i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }
              else
              {
                char v12 = -55;
              }
            }
            else
            {
              char v12 = -48;
            }
            uint64_t v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12))) {
              return 0;
            }
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C4D2CF54()
{
  unint64_t v0 = sub_1C4D2CFC0();
  uint64_t v4 = sub_1C4D2CFF4(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1C4D2CFC0()
{
  return String.subscript.getter();
}

uint64_t sub_1C4D2CFF4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = sub_1C4D2D14C(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = sub_1C4D29934(v9, 0);
      unint64_t v12 = sub_1C4D2D24C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x1C8787A40);
      }
    }
    else
    {
      unsigned int v11 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v13 = MEMORY[0x1C8787A40](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1C8787A40]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_1C4D2D14C(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_1C4D2999C(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_1C4D2999C(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t sub_1C4D2D24C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0) {
    goto LABEL_38;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_35:
    *uint64_t v9 = a4;
    v9[1] = a5;
    uint64_t v9[2] = a6;
    v9[3] = a7;
    uint64_t v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    uint64_t result = v12;
    if ((v12 & 0xC) == v15) {
      uint64_t result = sub_1C4D2999C(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      uint64_t result = sub_1C4D2999C(v12, a6, a7);
      unint64_t v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16) {
      goto LABEL_37;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1C4D2D450(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v5 = (void *)((char *)v9 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1C4D299F8(0, v4, v5);
    uint64_t v6 = sub_1C4D2D5B4(v5, v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    unint64_t v7 = (unint64_t *)swift_slowAlloc();
    sub_1C4D299F8(0, v4, v7);
    uint64_t v2 = sub_1C4D2D5B4(v7, v4, v2);
    MEMORY[0x1C878A850](v7, -1, -1);
  }
  return v2;
}

uint64_t sub_1C4D2D5B4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v42 = a2;
  uint64_t v43 = a1;
  uint64_t v4 = type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
  MEMORY[0x1F4188790](v4 - 8);
  BOOL v55 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PartialTrafficLog.RequestMetadata(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v54 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PartialTrafficLog(0);
  uint64_t v45 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t *)((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (uint64_t *)((char *)&v42 - v13);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  unsigned __int8 v17 = (char *)&v42 - v16;
  int64_t v18 = 0;
  uint64_t v19 = *(void *)(a3 + 64);
  uint64_t v46 = 0;
  uint64_t v47 = a3 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  int64_t v48 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v56 = v15;
  uint64_t v44 = a3;
  while (1)
  {
LABEL_4:
    if (v22)
    {
      unint64_t v23 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v24 = v23 | (v18 << 6);
      goto LABEL_17;
    }
    BOOL v25 = __OFADD__(v18++, 1);
    if (v25)
    {
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      JUMPOUT(0x1C4D2DA84);
    }
    if (v18 >= v48) {
      return sub_1C4D2DAA0(v43, v42, v46, a3);
    }
    unint64_t v26 = *(void *)(v47 + 8 * v18);
    if (!v26) {
      break;
    }
LABEL_16:
    unint64_t v22 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v18 << 6);
LABEL_17:
    uint64_t v28 = *(void *)(*(void *)(a3 + 56) + 8 * v24);
    uint64_t v29 = *(void *)(v28 + 16);
    if (!v29) {
      continue;
    }
    unint64_t v52 = v22;
    int64_t v53 = v18;
    uint64_t v30 = *(void *)(a3 + 48);
    unint64_t v49 = v24;
    uint64_t v31 = *(void *)(v30 + 16 * v24 + 8);
    uint64_t v32 = v45;
    uint64_t v33 = v28 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
    uint64_t v51 = v28;
    swift_bridgeObjectRetain_n();
    uint64_t v50 = v31;
    swift_bridgeObjectRetain();
    uint64_t v57 = *(void *)(v32 + 72);
    while (1)
    {
      sub_1C4D147F0(v33, (uint64_t)v17);
      sub_1C4D147F0((uint64_t)v17, (uint64_t)v11);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 5u:
          uint64_t v35 = *v11;
          uint64_t v34 = v11[1];
          sub_1C4D16298(v11[2], v11[3]);
          break;
        case 2u:
        case 6u:
          uint64_t v35 = *v11;
          uint64_t v34 = v11[1];
          break;
        case 3u:
          uint64_t v36 = type metadata accessor for PartialTrafficLog.ResponseMetadata;
          int v37 = type metadata accessor for PartialTrafficLog.ResponseMetadata;
          uint64_t v38 = (uint64_t)v11;
          unsigned int v39 = (uint64_t *)v55;
          goto LABEL_24;
        case 4u:
          uint64_t v35 = *v11;
          uint64_t v34 = v11[1];
          swift_bridgeObjectRelease();
          break;
        default:
          uint64_t v36 = type metadata accessor for PartialTrafficLog.RequestMetadata;
          int v37 = type metadata accessor for PartialTrafficLog.RequestMetadata;
          uint64_t v38 = (uint64_t)v11;
          unsigned int v39 = (uint64_t *)v54;
LABEL_24:
          sub_1C4D2DD34(v38, (uint64_t)v39, (void (*)(void))v36);
          uint64_t v35 = *v39;
          uint64_t v34 = v39[1];
          swift_bridgeObjectRetain();
          sub_1C4D2DD94((uint64_t)v39, (void (*)(void))v37);
          break;
      }
      void *v14 = v35;
      v14[1] = v34;
      swift_storeEnumTagMultiPayload();
      char v40 = static PartialTrafficLog.== infix(_:_:)((uint64_t)v17, (uint64_t)v14);
      sub_1C4D2DD94((uint64_t)v14, (void (*)(void))type metadata accessor for PartialTrafficLog);
      sub_1C4D2DD94((uint64_t)v17, (void (*)(void))type metadata accessor for PartialTrafficLog);
      if (v40) {
        break;
      }
      v33 += v57;
      if (!--v29)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        a3 = v44;
        unint64_t v22 = v52;
        int64_t v18 = v53;
        goto LABEL_4;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    a3 = v44;
    *(unint64_t *)((char *)v43 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
    BOOL v25 = __OFADD__(v46++, 1);
    unint64_t v22 = v52;
    int64_t v18 = v53;
    if (v25) {
      goto LABEL_38;
    }
  }
  int64_t v27 = v18 + 1;
  if (v18 + 1 >= v48) {
    return sub_1C4D2DAA0(v43, v42, v46, a3);
  }
  unint64_t v26 = *(void *)(v47 + 8 * v27);
  if (v26) {
    goto LABEL_15;
  }
  int64_t v27 = v18 + 2;
  if (v18 + 2 >= v48) {
    return sub_1C4D2DAA0(v43, v42, v46, a3);
  }
  unint64_t v26 = *(void *)(v47 + 8 * v27);
  if (v26)
  {
LABEL_15:
    int64_t v18 = v27;
    goto LABEL_16;
  }
  int64_t v27 = v18 + 3;
  if (v18 + 3 < v48)
  {
    unint64_t v26 = *(void *)(v47 + 8 * v27);
    if (!v26)
    {
      while (1)
      {
        int64_t v18 = v27 + 1;
        if (__OFADD__(v27, 1)) {
          goto LABEL_39;
        }
        if (v18 >= v48) {
          return sub_1C4D2DAA0(v43, v42, v46, a3);
        }
        unint64_t v26 = *(void *)(v47 + 8 * v18);
        ++v27;
        if (v26) {
          goto LABEL_16;
        }
      }
    }
    goto LABEL_15;
  }
  return sub_1C4D2DAA0(v43, v42, v46, a3);
}

uint64_t sub_1C4D2DAA0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_1C4D10728(&qword_1EA3CBE68);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    int64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) == 0) {
      break;
    }
    unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    uint64_t v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    void *v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_39;
    }
    if (!v5) {
      return v9;
    }
  }
  char v26 = 0;
  unint64_t v27 = (unint64_t)(63 - v22) >> 6;
  while (++v24 != v27 || (v26 & 1) == 0)
  {
    BOOL v28 = v24 == v27;
    if (v24 == v27) {
      unint64_t v24 = 0;
    }
    v26 |= v28;
    uint64_t v29 = *(void *)(v12 + 8 * v24);
    if (v29 != -1)
    {
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1C4D2DD34(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1C4D1B074();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_1C4D2DD94(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1C4D1B074();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

void sub_1C4D2DDEC(uint64_t a1)
{
}

void sub_1C4D2DE58()
{
}

uint64_t sub_1C4D2DE6C(uint64_t a1)
{
  uint64_t v2 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C4D2DECC()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0);
}

uint64_t sub_1C4D2DF04(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  return sub_1C4D2898C(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_1C4D2DF20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1C4D2DF30()
{
  return swift_release();
}

void sub_1C4D2DF3C(void *a1)
{
  sub_1C4D28E24(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(dispatch_group_t *)(v1 + 32), 67, 0xD00000000000003DLL, (void *)0x80000001C5082600);
}

uint64_t sub_1C4D2DF7C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0);
}

void sub_1C4D2DFBC(void *a1)
{
  sub_1C4D28E24(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(dispatch_group_t *)(v1 + 32), 68, 0xD00000000000003ELL, (void *)0x80000001C50825C0);
}

uint64_t sub_1C4D2DFF8(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  return sub_1C4D28B7C(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_1C4D2E000(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1C4D10728(a3);
  sub_1C4D1B074();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
  return a2;
}

uint64_t sub_1C4D2E05C()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0);
}

uint64_t sub_1C4D2E094()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

void sub_1C4D2E0A4(uint64_t a1)
{
}

unint64_t sub_1C4D2E110()
{
  unint64_t result = qword_1EA3CBE78;
  if (!qword_1EA3CBE78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CBE78);
  }
  return result;
}

uint64_t sub_1C4D2E15C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    uint64_t v12 = HIBYTE(a4) & 0xF;
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v15;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_1C4D2E284((uint64_t)v11, v12, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v16 = v14 & 1;
LABEL_8:
    LOBYTE(v15[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

unint64_t sub_1C4D2E238()
{
  unint64_t result = qword_1EA3CBE80;
  if (!qword_1EA3CBE80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CBE80);
  }
  return result;
}

uint64_t sub_1C4D2E284(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v11 = a3;
  uint64_t v12 = result;
  uint64_t v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v14 = 4 << v13;
  unint64_t v15 = a3 & 0xC;
  unint64_t v16 = a3;
  if (v15 == 4 << v13)
  {
    unint64_t result = sub_1C4D2999C(a3, a5, a6);
    unint64_t v16 = result;
  }
  uint64_t v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000) != 0)
  {
    unint64_t v19 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000) != 0) {
      unint64_t v19 = HIBYTE(a6) & 0xF;
    }
    if (v19 < v16 >> 16) {
      goto LABEL_96;
    }
    unint64_t result = String.UTF8View._foreignDistance(from:to:)();
    uint64_t v18 = result;
    uint64_t v17 = HIBYTE(a6) & 0xF;
  }
  else
  {
    uint64_t v18 = v16 >> 16;
  }
  if (v15 == v14)
  {
    uint64_t v20 = v17;
    unint64_t result = sub_1C4D2999C(v11, a5, a6);
    uint64_t v17 = v20;
    unint64_t v11 = result;
  }
  if ((a4 & 0xC) == v14)
  {
    unint64_t v21 = a4;
    uint64_t v22 = v17;
    unint64_t result = sub_1C4D2999C(v21, a5, a6);
    uint64_t v17 = v22;
    a4 = result;
    if ((a6 & 0x1000000000000000) == 0) {
      goto LABEL_11;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
LABEL_11:
    unint64_t result = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }
  unint64_t v23 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000) != 0) {
    unint64_t v23 = v17;
  }
  if (v23 < v11 >> 16) {
    goto LABEL_92;
  }
  if (v23 < a4 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_22:
  uint64_t v24 = v18 + result;
  if (__OFADD__(v18, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v24 < v18)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  unint64_t v25 = (unsigned __int8 *)(v12 + v18);
  if (!v12) {
    unint64_t v25 = 0;
  }
  int v26 = *v25;
  if (v26 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v37 = a7 + 48;
        unsigned __int8 v38 = a7 + 55;
        unsigned __int8 v39 = a7 + 87;
        if (a7 > 10)
        {
          unsigned __int8 v37 = 58;
        }
        else
        {
          unsigned __int8 v39 = 97;
          unsigned __int8 v38 = 65;
        }
        if (v25)
        {
          uint64_t v30 = 0;
          char v40 = v25 + 1;
          uint64_t v41 = result - 1;
          do
          {
            unsigned int v42 = *v40;
            if (v42 < 0x30 || v42 >= v37)
            {
              if (v42 < 0x41 || v42 >= v38)
              {
                uint64_t v35 = 0;
                if (v42 < 0x61 || v42 >= v39) {
                  return v35;
                }
                char v43 = -87;
              }
              else
              {
                char v43 = -55;
              }
            }
            else
            {
              char v43 = -48;
            }
            uint64_t v44 = v30 * a7;
            if ((unsigned __int128)(v30 * (__int128)a7) >> 64 != (v30 * a7) >> 63) {
              return 0;
            }
            uint64_t v30 = v44 + (v42 + v43);
            if (__OFADD__(v44, (v42 + v43))) {
              return 0;
            }
            ++v40;
            --v41;
          }
          while (v41);
          return v30;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v26 != 45)
  {
    if (v24 != v18)
    {
      unsigned __int8 v45 = a7 + 48;
      unsigned __int8 v46 = a7 + 55;
      unsigned __int8 v47 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v45 = 58;
      }
      else
      {
        unsigned __int8 v47 = 97;
        unsigned __int8 v46 = 65;
      }
      if (v25)
      {
        uint64_t v48 = 0;
        do
        {
          unsigned int v49 = *v25;
          if (v49 < 0x30 || v49 >= v45)
          {
            if (v49 < 0x41 || v49 >= v46)
            {
              uint64_t v35 = 0;
              if (v49 < 0x61 || v49 >= v47) {
                return v35;
              }
              char v50 = -87;
            }
            else
            {
              char v50 = -55;
            }
          }
          else
          {
            char v50 = -48;
          }
          uint64_t v51 = v48 * a7;
          if ((unsigned __int128)(v48 * (__int128)a7) >> 64 != (v48 * a7) >> 63) {
            return 0;
          }
          uint64_t v48 = v51 + (v49 + v50);
          if (__OFADD__(v51, (v49 + v50))) {
            return 0;
          }
          ++v25;
          --result;
        }
        while (result);
        return v51 + (v49 + v50);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v27 = a7 + 48;
      unsigned __int8 v28 = a7 + 55;
      unsigned __int8 v29 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v27 = 58;
      }
      else
      {
        unsigned __int8 v29 = 97;
        unsigned __int8 v28 = 65;
      }
      if (v25)
      {
        uint64_t v30 = 0;
        uint64_t v31 = v25 + 1;
        uint64_t v32 = result - 1;
        while (1)
        {
          unsigned int v33 = *v31;
          if (v33 < 0x30 || v33 >= v27)
          {
            if (v33 < 0x41 || v33 >= v28)
            {
              uint64_t v35 = 0;
              if (v33 < 0x61 || v33 >= v29) {
                return v35;
              }
              char v34 = -87;
            }
            else
            {
              char v34 = -55;
            }
          }
          else
          {
            char v34 = -48;
          }
          uint64_t v36 = v30 * a7;
          if ((unsigned __int128)(v30 * (__int128)a7) >> 64 != (v30 * a7) >> 63) {
            return 0;
          }
          uint64_t v30 = v36 - (v33 + v34);
          if (__OFSUB__(v36, (v33 + v34))) {
            return 0;
          }
          ++v31;
          if (!--v32) {
            return v30;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

uint64_t sub_1C4D2E704@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  return print(_:separator:terminator:)();
}

uint64_t sub_1C4D2E760()
{
  return swift_beginAccess();
}

__n128 *sub_1C4D2E780(__n128 *result, __n128 a2)
{
  result[1] = a2;
  *(void *)(v2 - 160) = 0;
  *(void *)(v2 - 152) = 0xE000000000000000;
  return result;
}

void sub_1C4D2E794()
{
  *(_DWORD *)(v0 - 516) = 0;
  *(_DWORD *)(v0 - 520) = 0;
  *(void *)(v0 - 368) = 0;
}

uint64_t sub_1C4D2E7B0()
{
  return *(void *)(v0 - 256);
}

unint64_t sub_1C4D2E7CC(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_1C4D2E7FC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0;
}

void sub_1C4D2E80C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_1C4D2E824(uint64_t a1@<X8>)
{
  unint64_t v3 = *(os_unfair_lock_s **)(v1 + a1);
  os_unfair_lock_lock(v3 + 8);
}

uint64_t sub_1C4D2E848()
{
  return swift_allocObject();
}

void sub_1C4D2E878()
{
  *(void *)(v0 - 360) = 0;
}

void sub_1C4D2E884()
{
  uint64_t v2 = *(void **)(v0 - 360);
}

uint64_t sub_1C4D2E89C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C4D2E8BC()
{
  return v0;
}

uint64_t sub_1C4D2E8D0()
{
  return swift_beginAccess();
}

void sub_1C4D2E8E8(int a1@<W8>)
{
  *(_DWORD *)(v1 - 256) = a1;
}

uint64_t sub_1C4D2E910()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  unint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v4 = String.data(using:allowLossyConversion:)();
  unint64_t v6 = v5;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    qword_1EA3D1070 = v4;
    *(void *)algn_1EA3D1078 = v6;
  }
  return result;
}

Swift::Void __swiftcall NSObject.CKLogToFileHandle(_:)(NSFileHandle a1)
{
  objc_msgSend(v1, sel__CKLogToFileHandle_atDepth_, a1.super.isa, 0);
  if (qword_1EA3CB748 != -1) {
    swift_once();
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [(objc_class *)a1.super.isa writeData:isa];
}

void sub_1C4D2EABC(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  NSObject.CKLogToFileHandle(_:)((NSFileHandle)v4);
}

uint64_t sub_1C4D2EB24(uint64_t a1, uint64_t a2)
{
  sub_1C4D10728(&qword_1EBBCDBB8);
  MEMORY[0x1F4188790]();
  sub_1C4D184E4();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for TaskPriority();
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v6, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = 0;
  v9[3] = 0;
  uint64_t v9[4] = &unk_1EA3CBF58;
  v9[5] = v8;
  sub_1C4D34B70(v6, (uint64_t)&unk_1EA3CBF68, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_1C4D2EC20(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    sub_1C4D25D98(a1);
    if (v2) {
      sub_1C4D36028();
    }
  }
  return sub_1C4D1B014();
}

uint64_t sub_1C4D2EC64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_1C4D21F44(a1, a2), (v7 & 1) != 0))
  {
    unint64_t v8 = v6;
    uint64_t v9 = *(void *)(a3 + 56);
    uint64_t v10 = type metadata accessor for CKLogEvent();
    sub_1C4D1B074();
    sub_1C4D1AEEC(v9 + *(void *)(v11 + 72) * v8, a4);
    uint64_t v12 = a4;
    uint64_t v13 = 0;
    uint64_t v14 = v10;
  }
  else
  {
    uint64_t v14 = type metadata accessor for CKLogEvent();
    uint64_t v12 = a4;
    uint64_t v13 = 1;
  }
  return _s14CloudKitDaemon17PartialTrafficLogOwst_0(v12, v13, 1, v14);
}

double sub_1C4D2ED0C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_1C4D21F44(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    sub_1C4D167F0(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t sub_1C4D2ED70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_1C4D21F44(a1, a2);
    if (v3) {
      sub_1C4D36028();
    }
  }
  return sub_1C4D1B014();
}

id sub_1C4D2EDB4(id result)
{
  if (!result)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  id v2 = result;
  uint64_t v3 = sub_1C4D35690(result, (SEL *)&selRef_cloudKitToken);
  if (!v4)
  {
LABEL_11:
    v19.receiver = v1;
    v19.super_class = (Class)type metadata accessor for CKCredentialInterceptingAccount();
    return objc_msgSendSuper2(&v19, sel_aa_updateTokensWithProvisioningResponse_, v2);
  }
  uint64_t v5 = v3;
  uint64_t v6 = v4;
  double result = objc_msgSend(v1, sel_accountStore);
  if (!result) {
    goto LABEL_13;
  }
  char v7 = result;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = sub_1C4D3534C(v8, v9, v7);

  double result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F179B0]), sel_initWithAccountType_, v10);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = sub_1C4D35690(v1, (SEL *)&selRef_username);
    if (v13)
    {
      uint64_t v14 = (void *)MEMORY[0x1C87879B0](v12);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = 0;
    }
    objc_msgSend(v11, sel_setUsername_, v14);

    id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F179C0]), sel_init);
    sub_1C4D353F0(v5, v6, v15, (SEL *)&selRef_setToken_);
    objc_msgSend(v11, sel_setCredential_, v15);
    uint64_t v16 = MEMORY[0x1C878A950](&v1[OBJC_IVAR____TtC14CloudKitDaemonP33_510E43923520F9C83D223A8087C06B6B31CKCredentialInterceptingAccount_backingExplicitCredentialsAccount]);
    if (v16)
    {
      uint64_t v17 = (void *)v16;
      id v18 = v11;
      objc_msgSend(v17, sel_setFakeCKAccount_, v18);
    }
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
  return result;
}

id sub_1C4D2F03C(void *a1, SEL *a2)
{
  swift_unknownObjectWeakInit();
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for CKCredentialInterceptingAccount();
  id v5 = objc_msgSendSuper2(&v7, *a2, a1);

  return v5;
}

id sub_1C4D2F0E4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CKCredentialInterceptingAccount();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t CKDBackingExplicitCredentialsAccount.accountType.getter()
{
  return 2;
}

void sub_1C4D2F13C()
{
  objc_super v2 = v0;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(v2, sel_appleAccount);
  id v8 = objc_msgSend(v7, sel_accountProperties);

  if (!v8)
  {
    __break(1u);
    goto LABEL_10;
  }
  strcpy(v27, "localizedError");
  v27[15] = -18;
  id v9 = objc_msgSend(v8, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();

  if (!v9) {
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_1C4D1690C(&v25, v27);
  CKLog.getter();
  sub_1C4D167F0((uint64_t)v27, (uint64_t)&v25);
  id v1 = v2;
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v10, v11))
  {

    sub_1C4D1691C((uint64_t)&v25);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    goto LABEL_7;
  }
  uint64_t v22 = v3;
  uint64_t v12 = swift_slowAlloc();
  uint64_t v21 = swift_slowAlloc();
  uint64_t v24 = v21;
  *(_DWORD *)uint64_t v12 = 136315394;
  uint64_t v13 = sub_1C4D35710(objc_msgSend(v1, sel_appleAccount), (SEL *)&selRef_username);
  if (!v14)
  {
LABEL_10:

    __break(1u);
    return;
  }
  uint64_t v23 = sub_1C4D14B9C(v13, v14, &v24);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v12 + 12) = 2080;
  id v15 = sub_1C4D25A9C(&v25, v26);
  MEMORY[0x1F4188790](v15);
  (*(void (**)(char *))(v17 + 16))((char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = String.init<A>(describing:)();
  uint64_t v23 = sub_1C4D14B9C(v18, v19, &v24);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_1C4D1691C((uint64_t)&v25);
  _os_log_impl(&dword_1C4CFF000, v10, v11, "\n=\n==\n===\n====\n=====\n======\n=======\n\nIMPORTANT ERROR FOLLOWS:\nYou need to sign in to the account \"%s\" in Settings, possibly due to outdated Terms and Conditions. Error: %s \n\n=======\n======\n=====\n====\n"
    "===\n"
    "==\n"
    "=",
    (uint8_t *)v12,
    0x16u);
  uint64_t v20 = v21;
  swift_arrayDestroy();
  MEMORY[0x1C878A850](v20, -1, -1);
  MEMORY[0x1C878A850](v12, -1, -1);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v22);
LABEL_7:
  sub_1C4D1691C((uint64_t)v27);
}

uint64_t CKDBackingExplicitCredentialsAccount.authenticationController(_:shouldContinueWithAuthenticationResults:error:for:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v36 = type metadata accessor for Logger();
  sub_1C4D18454();
  uint64_t v7 = v6;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  os_log_type_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v9);
  unint64_t v14 = (char *)&v35 - v13;
  if (a3)
  {
    id v15 = a3;
    CKLog.getter();
    id v16 = a3;
    id v17 = a3;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)sub_1C4D16DB8();
      uint64_t v21 = (void *)sub_1C4D36048();
      *(_DWORD *)uint64_t v20 = 138412290;
      id v22 = a3;
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      v40[0] = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v21 = v23;

      _os_log_impl(&dword_1C4CFF000, v18, v19, "Couldn't do the AKAppleIDAuthenticationContext dance: %@", v20, 0xCu);
      sub_1C4D10728(&qword_1EA3CBEA0);
      swift_arrayDestroy();
      sub_1C4D16C3C();
      sub_1C4D16C3C();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v36);
    return 0;
  }
  if (a2)
  {
    *(void *)&v39[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v39[0] + 1) = v24;
    swift_bridgeObjectRetain();
    id v25 = objc_msgSend(a2, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    if (v25)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v39, 0, sizeof(v39));
    }
    sub_1C4D35DEC((uint64_t)v39, (uint64_t)v40, &qword_1EA3CBE98);
    if (v40[3])
    {
      if (swift_dynamicCast())
      {
        uint64_t v26 = v37;
        uint64_t v27 = v38;
        swift_bridgeObjectRelease();
        sub_1C4D353F0(v26, v27, v3, (SEL *)&selRef_setHsa2DevicePassword_);
        return 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1C4D35B6C((uint64_t)v40, &qword_1EA3CBE98);
    }
    CKLog.getter();
    unsigned __int8 v28 = a2;
    unsigned __int8 v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)sub_1C4D16DB8();
      uint64_t v32 = sub_1C4D36048();
      uint64_t v35 = v7;
      unsigned int v33 = (void *)v32;
      *(_DWORD *)uint64_t v31 = 138412290;
      v40[0] = v28;
      char v34 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v33 = a2;

      _os_log_impl(&dword_1C4CFF000, v29, v30, "Successfully pulled results, but didn't include password: %@", v31, 0xCu);
      sub_1C4D10728(&qword_1EA3CBEA0);
      swift_arrayDestroy();
      uint64_t v7 = v35;
      sub_1C4D16C3C();
      sub_1C4D16C3C();
    }
    else
    {

      unsigned __int8 v29 = v28;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v36);
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C4D2FA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v127 = a5;
  uint64_t v131 = (long long *)type metadata accessor for DispatchTime();
  unint64_t v130 = *((void *)v131 - 1);
  MEMORY[0x1F4188790](v131);
  uint64_t v12 = (char *)&v115 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = objc_msgSend(self, sel_sharedAccountStore);
  id v14 = objc_msgSend(v13, sel_accountStore);

  if (!v14) {
    goto LABEL_107;
  }
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v125 = v14;
  id v17 = sub_1C4D3534C(v15, v16, v14);
  id v18 = objc_allocWithZone((Class)type metadata accessor for CKCredentialInterceptingAccount());
  id v118 = v17;
  id v19 = objc_msgSend(v18, sel_initWithAccountType_, v17);
  if (!v19)
  {
LABEL_108:
    __break(1u);
LABEL_109:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v20 = v19;
  sub_1C4D353F0(a1, a2, v19, (SEL *)&selRef_setUsername_);
  id v21 = objc_allocWithZone(MEMORY[0x1E4F179C0]);
  swift_bridgeObjectRetain();
  id v22 = sub_1C4D34974(a3, a4);
  id v119 = v20;
  id v117 = v22;
  objc_msgSend(v20, sel_setCredential_);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v24 = [(objc_class *)isa CKDeepCopy];

  uint64_t v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v26 = sub_1C4D11C08(v25);
  swift_bridgeObjectRelease();
  if (!v26) {
    unint64_t v26 = Dictionary.init(dictionaryLiteral:)();
  }
  Class v27 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v28 = [(objc_class *)v27 CKDeepCopy];

  uint64_t v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = sub_1C4D11C08(v29);
  swift_bridgeObjectRelease();
  if (!v30) {
    uint64_t v30 = Dictionary.init(dictionaryLiteral:)();
  }
  uint64_t v128 = v30;
  if (a6)
  {
    uint64_t v31 = (void *)MEMORY[0x1C87879B0](v127, a6);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = 0;
  }
  id v32 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  unsigned int v33 = (void *)MEMORY[0x1C87879B0](a3, a4);
  swift_bridgeObjectRelease();
  id v34 = objc_msgSend(v32, sel_initWithAppleAccount_hsa2RecoveryKey_hsa2AccountPassword_, v119, v31, v33);

  swift_unknownObjectWeakAssign();
  id v35 = v34;
  dispatch_semaphore_t v36 = dispatch_semaphore_create(0);
  Dictionary.init(dictionaryLiteral:)();
  Class v37 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v36;
  unint64_t v141 = sub_1C4D356EC;
  uint64_t v142 = v38;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v139 = 1107296256;
  *(void *)&long long v140 = sub_1C4D30834;
  *((void *)&v140 + 1) = &unk_1F2041BD0;
  unsigned __int8 v39 = _Block_copy(&aBlock);
  char v40 = v36;
  swift_release();
  id v129 = v35;
  objc_msgSend(v35, sel_renewAuthTokenWithOptions_completionHandler_, v37, v39);
  _Block_release(v39);

  static DispatchTime.distantFuture.getter();
  uint64_t v116 = v40;
  MEMORY[0x1C8787CB0](v12);
  (*(void (**)(char *, long long *))(v130 + 8))(v12, v131);
  uint64_t v41 = 0;
  uint64_t v42 = *(void *)(v26 + 64);
  unint64_t v130 = v26 + 64;
  uint64_t v43 = 1 << *(unsigned char *)(v26 + 32);
  uint64_t v44 = -1;
  if (v43 < 64) {
    uint64_t v44 = ~(-1 << v43);
  }
  unint64_t v45 = v44 & v42;
  uint64_t v131 = (long long *)((unint64_t)(v43 + 63) >> 6);
  uint64_t v127 = (uint64_t)v131 - 1;
  if ((v44 & v42) == 0) {
    goto LABEL_15;
  }
LABEL_13:
  unint64_t v46 = __clz(__rbit64(v45));
  v45 &= v45 - 1;
  unint64_t v47 = v46 | (v41 << 6);
LABEL_14:
  uint64_t v48 = *(void *)(v26 + 56);
  unsigned int v49 = (void *)(*(void *)(v26 + 48) + 16 * v47);
  uint64_t v50 = v49[1];
  *(void *)&long long v135 = *v49;
  *((void *)&v135 + 1) = v50;
  sub_1C4D167F0(v48 + 32 * v47, (uint64_t)&v136);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1C4D35DEC((uint64_t)&v135, (uint64_t)&aBlock, &qword_1EA3CC000);
    uint64_t v54 = v139;
    if (!v139) {
      break;
    }
    uint64_t v55 = aBlock;
    sub_1C4D1690C(&v140, &v135);
    id v56 = objc_msgSend(v129, sel_appleAccount);
    sub_1C4D25A9C(&v135, *((uint64_t *)&v136 + 1));
    uint64_t v57 = _bridgeAnythingToObjectiveC<A>(_:)();
    sub_1C4D354EC(v57, v55, v54, v56);

    swift_unknownObjectRelease();
    sub_1C4D1691C((uint64_t)&v135);
    if (v45) {
      goto LABEL_13;
    }
LABEL_15:
    uint64_t v51 = v41 + 1;
    if (__OFADD__(v41, 1)) {
      goto LABEL_102;
    }
    if (v51 < (uint64_t)v131)
    {
      unint64_t v52 = *(void *)(v130 + 8 * v51);
      if (v52) {
        goto LABEL_18;
      }
      uint64_t v53 = v41 + 2;
      ++v41;
      if (v51 + 1 < (uint64_t)v131)
      {
        unint64_t v52 = *(void *)(v130 + 8 * v53);
        if (v52) {
          goto LABEL_21;
        }
        uint64_t v41 = v51 + 1;
        if (v51 + 2 < (uint64_t)v131)
        {
          unint64_t v52 = *(void *)(v130 + 8 * (v51 + 2));
          if (v52)
          {
            v51 += 2;
            goto LABEL_18;
          }
          uint64_t v53 = v51 + 3;
          uint64_t v41 = v51 + 2;
          if (v51 + 3 < (uint64_t)v131)
          {
            unint64_t v52 = *(void *)(v130 + 8 * v53);
            if (!v52)
            {
              while (1)
              {
                uint64_t v51 = v53 + 1;
                if (__OFADD__(v53, 1)) {
                  goto LABEL_106;
                }
                if (v51 >= (uint64_t)v131)
                {
                  uint64_t v41 = v127;
                  goto LABEL_32;
                }
                unint64_t v52 = *(void *)(v130 + 8 * v51);
                ++v53;
                if (v52) {
                  goto LABEL_18;
                }
              }
            }
LABEL_21:
            uint64_t v51 = v53;
LABEL_18:
            unint64_t v45 = (v52 - 1) & v52;
            unint64_t v47 = __clz(__rbit64(v52)) + (v51 << 6);
            uint64_t v41 = v51;
            goto LABEL_14;
          }
        }
      }
    }
LABEL_32:
    unint64_t v45 = 0;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v135 = 0u;
  }
  swift_release();
  sub_1C4D11F9C(v128);
  uint64_t v59 = v58;
  swift_bridgeObjectRelease();
  if (!v59)
  {

    id v66 = v129;
    char v65 = v125;
    goto LABEL_98;
  }
  uint64_t v60 = 0;
  uint64_t v61 = *(void *)(v59 + 64);
  uint64_t v121 = v59 + 64;
  uint64_t v62 = 1 << *(unsigned char *)(v59 + 32);
  if (v62 < 64) {
    uint64_t v63 = ~(-1 << v62);
  }
  else {
    uint64_t v63 = -1;
  }
  unint64_t v64 = v63 & v61;
  int64_t v122 = (unint64_t)(v62 + 63) >> 6;
  uint64_t v131 = &v136;
  uint64_t v120 = MEMORY[0x1E4FBC840] + 8;
  char v65 = v125;
  id v66 = v129;
  uint64_t v124 = v59;
  if (!v64) {
    goto LABEL_42;
  }
  while (2)
  {
    uint64_t v127 = (v64 - 1) & v64;
    uint64_t v128 = v60;
    unint64_t v67 = __clz(__rbit64(v64)) | (v60 << 6);
LABEL_56:
    uint64_t v72 = *(void *)(v59 + 56);
    uint64_t v73 = (uint64_t *)(*(void *)(v59 + 48) + 16 * v67);
    uint64_t v74 = *v73;
    uint64_t v75 = v73[1];
    uint64_t v76 = *(void *)(v72 + 8 * v67);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v77 = MEMORY[0x1C87879B0](v74, v75);
    swift_bridgeObjectRelease();
    id v78 = objc_msgSend(v66, sel_appleAccount);
    uint64_t v126 = (void *)v77;
    id v79 = objc_msgSend(v78, sel_propertiesForDataclass_, v77);

    if (v79)
    {
      uint64_t v80 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v80 = (void *)Dictionary.init(dictionaryLiteral:)();
    }
    int64_t v81 = 0;
    uint64_t v82 = *(void *)(v76 + 64);
    unint64_t v130 = v76 + 64;
    uint64_t v83 = 1 << *(unsigned char *)(v76 + 32);
    if (v83 < 64) {
      uint64_t v84 = ~(-1 << v83);
    }
    else {
      uint64_t v84 = -1;
    }
    unint64_t v85 = v84 & v82;
    int64_t v86 = (unint64_t)(v83 + 63) >> 6;
    int64_t v123 = v86 - 1;
    if ((v84 & v82) != 0)
    {
LABEL_63:
      unint64_t v87 = __clz(__rbit64(v85));
      v85 &= v85 - 1;
      unint64_t v88 = v87 | (v81 << 6);
LABEL_64:
      uint64_t v89 = *(void *)(v76 + 56);
      unint64_t v90 = (void *)(*(void *)(v76 + 48) + 16 * v88);
      uint64_t v91 = v90[1];
      *(void *)&long long v135 = *v90;
      *((void *)&v135 + 1) = v91;
      sub_1C4D167F0(v89 + 32 * v88, (uint64_t)v131);
      swift_bridgeObjectRetain();
      goto LABEL_83;
    }
    while (1)
    {
      int64_t v92 = v81 + 1;
      if (__OFADD__(v81, 1)) {
        goto LABEL_101;
      }
      if (v92 < v86)
      {
        unint64_t v93 = *(void *)(v130 + 8 * v92);
        if (v93) {
          goto LABEL_68;
        }
        int64_t v94 = v81 + 2;
        ++v81;
        if (v92 + 1 < v86)
        {
          unint64_t v93 = *(void *)(v130 + 8 * v94);
          if (v93) {
            goto LABEL_71;
          }
          int64_t v81 = v92 + 1;
          if (v92 + 2 < v86)
          {
            unint64_t v93 = *(void *)(v130 + 8 * (v92 + 2));
            if (v93)
            {
              v92 += 2;
              goto LABEL_68;
            }
            int64_t v94 = v92 + 3;
            int64_t v81 = v92 + 2;
            if (v92 + 3 < v86)
            {
              unint64_t v93 = *(void *)(v130 + 8 * v94);
              if (v93)
              {
LABEL_71:
                int64_t v92 = v94;
LABEL_68:
                unint64_t v85 = (v93 - 1) & v93;
                unint64_t v88 = __clz(__rbit64(v93)) + (v92 << 6);
                int64_t v81 = v92;
                goto LABEL_64;
              }
              while (1)
              {
                int64_t v92 = v94 + 1;
                if (__OFADD__(v94, 1)) {
                  break;
                }
                if (v92 >= v86)
                {
                  int64_t v81 = v123;
                  goto LABEL_82;
                }
                unint64_t v93 = *(void *)(v130 + 8 * v92);
                ++v94;
                if (v93) {
                  goto LABEL_68;
                }
              }
LABEL_104:
              __break(1u);
              goto LABEL_105;
            }
          }
        }
      }
LABEL_82:
      unint64_t v85 = 0;
      long long v136 = 0u;
      long long v137 = 0u;
      long long v135 = 0u;
LABEL_83:
      sub_1C4D35DEC((uint64_t)&v135, (uint64_t)&aBlock, &qword_1EA3CC000);
      uint64_t v95 = v139;
      if (!v139) {
        break;
      }
      uint64_t v96 = aBlock;
      sub_1C4D1690C(&v140, v134);
      *(void *)&v133[0] = v96;
      *((void *)&v133[0] + 1) = v95;
      AnyHashable.init<A>(_:)();
      sub_1C4D167F0((uint64_t)v134, (uint64_t)v133);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v132 = v80;
      unint64_t v98 = sub_1C4D21FF8((uint64_t)&v135);
      uint64_t v100 = v80[2];
      BOOL v101 = (v99 & 1) == 0;
      Swift::Int v102 = v100 + v101;
      if (__OFADD__(v100, v101))
      {
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
        goto LABEL_104;
      }
      unint64_t v103 = v98;
      char v104 = v99;
      sub_1C4D10728(&qword_1EA3CC008);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v102))
      {
        unint64_t v105 = sub_1C4D21FF8((uint64_t)&v135);
        if ((v104 & 1) != (v106 & 1)) {
          goto LABEL_109;
        }
        unint64_t v103 = v105;
      }
      uint64_t v80 = v132;
      if (v104)
      {
        BOOL v107 = (_OWORD *)(v132[7] + 32 * v103);
        sub_1C4D1691C((uint64_t)v107);
        sub_1C4D1690C(v133, v107);
      }
      else
      {
        v132[(v103 >> 6) + 8] |= 1 << v103;
        sub_1C4D16854((uint64_t)&v135, v80[6] + 40 * v103);
        sub_1C4D1690C(v133, (_OWORD *)(v80[7] + 32 * v103));
        uint64_t v108 = v80[2];
        BOOL v109 = __OFADD__(v108, 1);
        uint64_t v110 = v108 + 1;
        if (v109) {
          goto LABEL_100;
        }
        v80[2] = v110;
      }
      swift_bridgeObjectRelease();
      sub_1C4D251B4((uint64_t)&v135);
      sub_1C4D1691C((uint64_t)v134);
      if (v85) {
        goto LABEL_63;
      }
    }
    swift_release();
    id v66 = v129;
    id v111 = objc_msgSend(v129, sel_appleAccount);
    uint64_t v112 = (uint64_t)v80;
    uint64_t v113 = v126;
    sub_1C4D3545C(v112, (uint64_t)v126, v111);

    char v65 = v125;
    uint64_t v59 = v124;
    uint64_t v60 = v128;
    unint64_t v64 = v127;
    if (v127) {
      continue;
    }
    break;
  }
LABEL_42:
  int64_t v68 = v60 + 1;
  if (__OFADD__(v60, 1)) {
    goto LABEL_103;
  }
  if (v68 < v122)
  {
    unint64_t v69 = *(void *)(v121 + 8 * v68);
    uint64_t v70 = v60 + 1;
    if (v69) {
      goto LABEL_55;
    }
    uint64_t v70 = v60 + 2;
    if (v60 + 2 < v122)
    {
      unint64_t v69 = *(void *)(v121 + 8 * v70);
      if (v69) {
        goto LABEL_55;
      }
      uint64_t v70 = v60 + 3;
      if (v60 + 3 < v122)
      {
        unint64_t v69 = *(void *)(v121 + 8 * v70);
        if (v69) {
          goto LABEL_55;
        }
        uint64_t v71 = v60 + 4;
        if (v60 + 4 < v122)
        {
          unint64_t v69 = *(void *)(v121 + 8 * v71);
          if (v69)
          {
            uint64_t v70 = v60 + 4;
LABEL_55:
            uint64_t v127 = (v69 - 1) & v69;
            uint64_t v128 = v70;
            unint64_t v67 = __clz(__rbit64(v69)) + (v70 << 6);
            goto LABEL_56;
          }
          while (1)
          {
            uint64_t v70 = v71 + 1;
            if (__OFADD__(v71, 1)) {
              break;
            }
            if (v70 >= v122) {
              goto LABEL_97;
            }
            unint64_t v69 = *(void *)(v121 + 8 * v70);
            ++v71;
            if (v69) {
              goto LABEL_55;
            }
          }
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
          goto LABEL_108;
        }
      }
    }
  }
LABEL_97:

  swift_release();
LABEL_98:

  return (uint64_t)v66;
}

uint64_t sub_1C4D30838()
{
  _s29ExplicitCredentialAccountListCMa();
  swift_allocObject();
  uint64_t result = sub_1C4D30D88();
  qword_1EA3CBE90 = result;
  return result;
}

uint64_t sub_1C4D30878()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C4D30904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = a1 == a5 && a2 == a6;
  if (v12 || (v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v13 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

Swift::Int sub_1C4D309A4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1C4D30A34()
{
  return sub_1C4D309A4();
}

uint64_t sub_1C4D30A40()
{
  return sub_1C4D30878();
}

Swift::Int sub_1C4D30A4C()
{
  return Hasher._finalize()();
}

uint64_t sub_1C4D30AD0(uint64_t *a1, uint64_t *a2)
{
  return sub_1C4D30904(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1C4D30AEC()
{
  id v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v3);
  sub_1C4D35DCC(v2, &v6);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1C4D30B88@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v7 = *(void *)result;
  if (*(void *)(*(void *)result + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_1C4D2203C(a2, a3, a4, a5);
    if (v13)
    {
      id v14 = *(void **)(*(void *)(v7 + 56) + 8 * v12);
      id v15 = v14;
    }
    else
    {
      id v14 = 0;
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    id v14 = 0;
  }
  *a6 = v14;
  return result;
}

uint64_t sub_1C4D30C34()
{
  id v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v3);
  sub_1C4D35DA8(v2);
  os_unfair_lock_unlock(v3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C4D30CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C4D30D50()
{
  swift_release();
  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t sub_1C4D30D88()
{
  sub_1C4D10728(&qword_1EA3CBFF8);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 24) = 0;
  *(void *)(v1 + 16) = MEMORY[0x1E4FBC868];
  *(void *)(v0 + 16) = v1;
  return v0;
}

uint64_t static CKDBackingExplicitCredentialsAccount.explicitCredentialsAccount(withEmail:password:recoveryKey:propertyOverrides:overridesByDataclass:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  type metadata accessor for Logger();
  sub_1C4D18454();
  MEMORY[0x1F4188790](v11);
  sub_1C4D184E4();
  id v12 = CKCurrentPersonaID();
  if (v12)
  {
    char v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    if (a7)
    {
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1C4D2ED0C(v17, v18, a7, &v46);
      swift_bridgeObjectRelease();
      if (*((void *)&v47 + 1))
      {
        if (swift_dynamicCast())
        {
          uint64_t v19 = v45;
          if (v14 == v44 && v16 == v45)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_21;
          }
          uint64_t v40 = v44;
          if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_21;
          }
LABEL_16:
          CKLog.getter();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          id v22 = Logger.logObject.getter();
          os_log_type_t v23 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v22, v23))
          {
            uint64_t v24 = swift_slowAlloc();
            uint64_t v44 = swift_slowAlloc();
            *(_DWORD *)uint64_t v24 = 136315650;
            swift_bridgeObjectRetain();
            *(void *)&long long v46 = sub_1C4D14B9C(v14, v16, &v44);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v24 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(void *)&long long v46 = sub_1C4D14B9C(a1, a2, &v44);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v24 + 22) = 2080;
            *(void *)&long long v46 = v40;
            *((void *)&v46 + 1) = v19;
            swift_bridgeObjectRetain();
            sub_1C4D10728(&qword_1EA3CBEB0);
            uint64_t v25 = String.init<A>(describing:)();
            *(void *)&long long v46 = sub_1C4D14B9C(v25, v26, &v44);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1C4CFF000, v22, v23, "Current persona identifier %s does not match persona override on requested fake account %s: %s. Not returning an account", (uint8_t *)v24, 0x20u);
            swift_arrayDestroy();
            sub_1C4D16C3C();
            sub_1C4D16C3C();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          sub_1C4D35EA0();
          v27();
          return 0;
        }
LABEL_15:
        uint64_t v40 = 0;
        uint64_t v19 = 0;
        goto LABEL_16;
      }
    }
    else
    {
      long long v46 = 0u;
      long long v47 = 0u;
    }
    sub_1C4D35B6C((uint64_t)&v46, &qword_1EA3CBE98);
    goto LABEL_15;
  }
  if (!a7)
  {
    uint64_t v21 = Dictionary.init(dictionaryLiteral:)();
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v21 = a7;
LABEL_22:
  swift_bridgeObjectRetain();
  if (a8) {
    uint64_t v29 = a8;
  }
  else {
    uint64_t v29 = Dictionary.init(dictionaryLiteral:)();
  }
  if (*(void *)(v21 + 16) || *(void *)(v29 + 16))
  {
    sub_1C4D353B0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1C4D35F24();
    return sub_1C4D2FA00(v30, v31, v32, v33, v34, a6);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1EA3CB750 != -1) {
      swift_once();
    }
    sub_1C4D35F24();
    uint64_t v28 = sub_1C4D30AEC();
    if (!v28)
    {
      sub_1C4D353B0();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Dictionary.init(dictionaryLiteral:)();
      Dictionary.init(dictionaryLiteral:)();
      sub_1C4D35F24();
      uint64_t v28 = sub_1C4D2FA00(v36, v37, v38, v39, a5, a6);
      sub_1C4D30C34();
    }
  }
  return v28;
}

Swift::Bool __swiftcall CKDBackingExplicitCredentialsAccount.isDataclassEnabled(_:)(Swift::String a1)
{
  return 1;
}

void sub_1C4D314F8(uint64_t a1, void *a2, char *a3)
{
  uint64_t v150 = type metadata accessor for DispatchTime();
  uint64_t v134 = *(void *)(v150 - 8);
  MEMORY[0x1F4188790](v150);
  uint64_t v149 = (char *)&v129 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = 0;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(char **)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v131 = (char *)&v129 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v132 = (char *)&v129 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  id v129 = (char *)&v129 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  unint64_t v130 = (char *)&v129 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v138 = (char *)&v129 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v129 - v19;
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  uint64_t v148 = (char *)&v129 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v129 - v23;
  CKLog.getter();
  uint64_t v25 = a2;
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  unint64_t v145 = v20;
  long long v137 = v7;
  if (v28)
  {
    uint64_t v7 = a3;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t aBlock = (_DWORD *)v30;
    LODWORD(v29->isa) = 136315138;
    uint64_t v31 = sub_1C4D35710(objc_msgSend(v25, sel_appleAccount), (SEL *)&selRef_username);
    uint64_t v33 = (uint64_t)v25;
    if (!v32)
    {
LABEL_63:
      _Block_release(v7);

      __break(1u);
LABEL_64:
      _Block_release(v133);

      __break(1u);
LABEL_65:
      _Block_release(v133);

      __break(1u);
      return;
    }
    uint64_t v153 = sub_1C4D14B9C(v31, v32, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C4CFF000, v26, v27, "Fetching account info for fake account with email %s", (uint8_t *)v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C878A850](v30, -1, -1);
    MEMORY[0x1C878A850](v29, -1, -1);

    uint64_t v34 = v137;
    unint64_t v151 = (void (*)(char *, uint64_t))*((void *)v137 + 1);
    v151(v24, v6);
    uint64_t v20 = v145;
    a3 = v7;
    uint64_t v7 = v34;
  }
  else
  {

    unint64_t v151 = (void (*)(char *, uint64_t))*((void *)v7 + 1);
    v151(v24, v6);
  }
  id v35 = objc_msgSend(self, sel_sharedAccountStore);
  id v36 = objc_msgSend(v35, sel_accountStore);

  uint64_t v142 = (void (**)(char *, uint64_t))sub_1C4D35690(v25, (SEL *)&selRef_hsa2RecoveryKey);
  id v146 = v36;
  uint64_t v147 = v6;
  uint64_t v152 = v25;
  uint64_t v38 = &off_1C507E000;
  uint64_t v143 = (uint64_t (**)(uint64_t, uint64_t, void *))v39;
  uint64_t v133 = a3;
  if (!v39) {
    goto LABEL_21;
  }
  long long v136 = &v155;
  *(void *)&long long v141 = v7 + 8;
  long long v140 = &v156;
  uint64_t v139 = (void (**)(char *, uint64_t))(v134 + 8);
  uint64_t v33 = 2;
  *(void *)&long long v37 = 138412290;
  long long v135 = v37;
  while (1)
  {
    CKLog.getter();
    uint64_t v29 = v25;
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = v25;
      uint64_t v44 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = v135;
      uint64_t aBlock = v29;
      uint64_t v45 = v29;
      uint64_t v6 = v147;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v44 = v43;
      uint64_t v7 = v137;

      _os_log_impl(&dword_1C4CFF000, v40, v41, "Calculating HSA2DevicePassword for %@", v42, 0xCu);
      sub_1C4D10728(&qword_1EA3CBEA0);
      swift_arrayDestroy();
      MEMORY[0x1C878A850](v44, -1, -1);
      MEMORY[0x1C878A850](v42, -1, -1);
    }
    else
    {

      uint64_t v40 = v29;
    }

    v151(v148, v6);
    id v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4EF60]), sel_init);
    uint64_t v47 = sub_1C4D35710([v29 appleAccount], (SEL *)&selRef_username);
    if (v48)
    {
      unsigned int v49 = (void *)MEMORY[0x1C87879B0](v47);
      swift_bridgeObjectRelease();
    }
    else
    {
      unsigned int v49 = 0;
    }
    objc_msgSend(v46, sel_setUsername_, v49);

    objc_msgSend(v46, sel_setIsUsernameEditable_, 0);
    objc_msgSend(v46, sel_setServiceType_, 1);
    uint64_t v50 = sub_1C4D35690(v29, (SEL *)&selRef_hsa2AccountPassword);
    if (v51)
    {
      unint64_t v52 = (void *)MEMORY[0x1C87879B0](v50);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v52 = 0;
    }
    objc_msgSend(v46, sel__setPassword_, v52);

    sub_1C4D35638((uint64_t)v142, (uint64_t)v143, v46);
    objc_msgSend(v46, sel_setAuthenticationType_, 0);
    objc_msgSend(v46, sel_setIsEphemeral_, 1);
    id v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4EF68]), sel_init);
    if (!v53)
    {
      _Block_release(v133);
      __break(1u);
LABEL_61:
      _Block_release(v133);

      __break(1u);
LABEL_62:
      _Block_release(v133);

      __break(1u);
      goto LABEL_63;
    }
    uint64_t v54 = v53;
    objc_msgSend(v53, sel_setDelegate_, v29);
    dispatch_semaphore_t v55 = dispatch_semaphore_create(0);
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = v55;
    uint64_t v158 = sub_1C4D35E70;
    uint64_t v159 = v56;
    uint64_t aBlock = (_DWORD *)MEMORY[0x1E4F143A8];
    uint64_t v155 = 1107296256;
    unint64_t v156 = sub_1C4D33EA4;
    uint64_t v157 = &unk_1F2041B80;
    uint64_t v57 = _Block_copy(&aBlock);
    id v58 = v46;
    uint64_t v59 = v55;
    swift_release();
    objc_msgSend(v54, sel_authenticateWithContext_completion_, v58, v57);
    _Block_release(v57);

    uint64_t v60 = v149;
    static DispatchTime.distantFuture.getter();
    MEMORY[0x1C8787CB0](v60);
    (*v139)(v60, v150);
    uint64_t v61 = sub_1C4D35690(v29, (SEL *)&selRef_hsa2DevicePassword);
    if (v62)
    {
      uint64_t v63 = v61;
      uint64_t v64 = v62;
      swift_bridgeObjectRelease();
      id v65 = objc_allocWithZone(MEMORY[0x1E4F179C0]);
      id v66 = sub_1C4D34974(v63, v64);
      id v67 = [v29 appleAccount];
      objc_msgSend(v67, sel_setCredential_, v66);

      id v36 = v146;
      uint64_t v6 = v147;
      uint64_t v25 = v152;
      uint64_t v20 = v145;
      uint64_t v38 = &off_1C507E000;
LABEL_21:
      uint64_t v143 = &v156;
      uint64_t v142 = (void (**)(char *, uint64_t))(v134 + 8);
      uint64_t v148 = v7 + 8;
      uint64_t v68 = 2;
      *(void *)&long long v37 = *((void *)v38 + 138);
      long long v141 = v37;
      long long v140 = (uint64_t (**)(uint64_t, uint64_t, void *))(MEMORY[0x1E4FBC840] + 8);
      if (!v36) {
        goto LABEL_24;
      }
      while (1)
      {
        uint64_t v69 = swift_allocObject();
        *(void *)(v69 + 16) = 0;
        *(unsigned char *)(v69 + 24) = 0;
        uint64_t v7 = (char *)v36;
        dispatch_semaphore_t v70 = dispatch_semaphore_create(0);
        id v71 = objc_msgSend(v25, sel_appleAccount);
        uint64_t v72 = swift_allocObject();
        *(void *)(v72 + 16) = v69;
        *(void *)(v72 + 24) = v70;
        uint64_t v158 = sub_1C4D35E6C;
        uint64_t v159 = v72;
        uint64_t aBlock = (_DWORD *)MEMORY[0x1E4F143A8];
        uint64_t v155 = 1107296256;
        unint64_t v156 = (uint64_t (*)(uint64_t, uint64_t, void *))sub_1C4D30834;
        uint64_t v157 = &unk_1F2041B30;
        uint64_t v73 = _Block_copy(&aBlock);
        swift_retain();
        uint64_t v33 = v70;
        swift_release();
        objc_msgSend(v7, sel_aa_updatePropertiesForAppleAccount_completion_, v71, v73);
        _Block_release(v73);

        uint64_t v74 = v149;
        static DispatchTime.distantFuture.getter();
        MEMORY[0x1C8787CB0](v74);
        (*v142)(v74, v150);
        swift_beginAccess();
        uint64_t v75 = *(void *)(v69 + 16);
        if (*(unsigned char *)(v69 + 24))
        {
          uint64_t aBlock = *(_DWORD **)(v69 + 16);
          id v76 = (id)v75;
          sub_1C4D10728(&qword_1EBBCD850);
          swift_willThrowTypedImpl();
          swift_release();

          uint64_t v25 = v152;
        }
        else
        {
          if (v75)
          {
            unint64_t v105 = v152;
            id v106 = objc_msgSend(v152, sel_ckAccount);

            if (v106)
            {
              BOOL v107 = v130;
              CKLog.getter();
              uint64_t v29 = v105;
              uint64_t v108 = Logger.logObject.getter();
              os_log_type_t v109 = static os_log_type_t.info.getter();
              BOOL v110 = os_log_type_enabled(v108, v109);
              Swift::Int v102 = v133;
              if (v110)
              {
                uint64_t v152 = v7;
                uint64_t v111 = swift_slowAlloc();
                uint64_t v112 = swift_slowAlloc();
                v160[0] = v112;
                *(_DWORD *)uint64_t v111 = 136315394;
                uint64_t v113 = sub_1C4D35710([v29 appleAccount], (SEL *)&selRef_username);
                if (!v114) {
                  goto LABEL_64;
                }
                uint64_t aBlock = (_DWORD *)sub_1C4D14B9C(v113, v114, v160);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v111 + 12) = 2080;
                uint64_t aBlock = (_DWORD *)sub_1C4D35690(v29, (SEL *)&selRef_dsid);
                uint64_t v155 = v115;
                sub_1C4D10728(&qword_1EA3CBEB0);
                uint64_t v116 = String.init<A>(describing:)();
                uint64_t aBlock = (_DWORD *)sub_1C4D14B9C(v116, v117, v160);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl(&dword_1C4CFF000, v108, v109, "Initialized fake account with email %s and dsid %s", (uint8_t *)v111, 0x16u);
                swift_arrayDestroy();
                MEMORY[0x1C878A850](v112, -1, -1);
                MEMORY[0x1C878A850](v111, -1, -1);

                uint64_t v7 = v152;
                id v118 = &v156;
                goto LABEL_55;
              }

LABEL_58:
              v151(v107, v6);
              swift_release();
            }
            else
            {
              BOOL v107 = v129;
              CKLog.getter();
              uint64_t v29 = v105;
              id v119 = Logger.logObject.getter();
              os_log_type_t v120 = static os_log_type_t.error.getter();
              BOOL v121 = os_log_type_enabled(v119, v120);
              Swift::Int v102 = v133;
              if (!v121)
              {

                goto LABEL_58;
              }
              uint64_t v152 = v7;
              uint64_t v122 = swift_slowAlloc();
              uint64_t v123 = swift_slowAlloc();
              v160[0] = v123;
              *(_DWORD *)uint64_t v122 = 136315394;
              uint64_t v124 = sub_1C4D35710([v29 appleAccount], (SEL *)&selRef_username);
              if (!v125) {
                goto LABEL_65;
              }
              uint64_t aBlock = (_DWORD *)sub_1C4D14B9C(v124, v125, v160);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              *(_WORD *)(v122 + 12) = 2080;
              uint64_t aBlock = (_DWORD *)sub_1C4D35690(v29, (SEL *)&selRef_dsid);
              uint64_t v155 = v126;
              sub_1C4D10728(&qword_1EA3CBEB0);
              uint64_t v127 = String.init<A>(describing:)();
              uint64_t aBlock = (_DWORD *)sub_1C4D14B9C(v127, v128, v160);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1C4CFF000, v119, v120, "Initialized fake AppleAccount for email %s / dsid %s lacked a cloudKit auth token", (uint8_t *)v122, 0x16u);
              swift_arrayDestroy();
              MEMORY[0x1C878A850](v123, -1, -1);
              MEMORY[0x1C878A850](v122, -1, -1);

              uint64_t v7 = v152;
              id v118 = (uint64_t (**)(uint64_t, uint64_t, void *))&v155;
LABEL_55:
              v151((char *)*(v118 - 32), v147);
              swift_release();
              Swift::Int v102 = v133;
            }
            (*((void (**)(char *, uint64_t, void))v102 + 2))(v102, 1, 0);

            goto LABEL_47;
          }
          uint64_t v82 = v138;
          CKLog.getter();
          uint64_t v25 = v152;
          uint64_t v29 = v152;
          uint64_t v83 = Logger.logObject.getter();
          os_log_type_t v84 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v83, v84))
          {
            uint64_t v85 = swift_slowAlloc();
            uint64_t v86 = swift_slowAlloc();
            uint64_t aBlock = (_DWORD *)v86;
            *(_DWORD *)uint64_t v85 = v141;
            uint64_t v87 = sub_1C4D35710([v29 appleAccount], (SEL *)&selRef_username);
            if (!v88) {
              goto LABEL_62;
            }
            *(void *)(v85 + 4) = sub_1C4D14B9C(v87, v88, (uint64_t *)&aBlock);

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1C4CFF000, v83, v84, "Error initializing fake account with email %s,  no error available", (uint8_t *)v85, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C878A850](v86, -1, -1);
            MEMORY[0x1C878A850](v85, -1, -1);

            uint64_t v6 = v147;
            v151(v138, v147);
            uint64_t v25 = v152;
          }
          else
          {

            v151(v82, v6);
          }
          type metadata accessor for CKError(0);
          v160[0] = 9;
          sub_1C4D34E88(MEMORY[0x1E4FBC860]);
          sub_1C4D35568();
          _BridgedStoredNSError.init(_:userInfo:)();
          uint64_t v75 = (uint64_t)aBlock;
          swift_willThrow();
          swift_release();

          uint64_t v144 = 0;
        }
        uint64_t v20 = v145;
        id v36 = v146;
        if (!v68)
        {
LABEL_39:
          CKLog.getter();
          id v89 = (id)v75;
          id v90 = (id)v75;
          uint64_t v91 = Logger.logObject.getter();
          os_log_type_t v92 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v91, v92))
          {
            unint64_t v93 = (uint8_t *)swift_slowAlloc();
            int64_t v94 = (void *)swift_slowAlloc();
            *(_DWORD *)unint64_t v93 = 138412290;
            id v95 = (id)v75;
            uint64_t v96 = _swift_stdlib_bridgeErrorToNSError();
            uint64_t aBlock = (_DWORD *)v96;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v94 = v96;

            _os_log_impl(&dword_1C4CFF000, v91, v92, "Giving up on auth token renewal due to too many errors: %@", v93, 0xCu);
            sub_1C4D10728(&qword_1EA3CBEA0);
            swift_arrayDestroy();
            uint64_t v97 = v94;
            id v36 = v146;
            MEMORY[0x1C878A850](v97, -1, -1);
            MEMORY[0x1C878A850](v93, -1, -1);
          }
          else
          {
          }
          Swift::Int v102 = v133;

          v151(v132, v6);
          swift_willThrow();

          goto LABEL_46;
        }
        while (1)
        {

          --v68;
          if (v36) {
            break;
          }
LABEL_24:
          CKLog.getter();
          uint64_t v29 = v25;
          uint64_t v77 = Logger.logObject.getter();
          os_log_type_t v78 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v77, v78))
          {
            uint64_t v79 = swift_slowAlloc();
            uint64_t v33 = swift_slowAlloc();
            uint64_t aBlock = (_DWORD *)v33;
            *(_DWORD *)uint64_t v79 = v141;
            uint64_t v80 = sub_1C4D35710([v29 appleAccount], (SEL *)&selRef_username);
            if (!v81) {
              goto LABEL_61;
            }
            *(void *)(v79 + 4) = sub_1C4D14B9C(v80, v81, (uint64_t *)&aBlock);

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1C4CFF000, v77, v78, "Error initializing fake account with email %s, no account store available", (uint8_t *)v79, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C878A850](v33, -1, -1);
            MEMORY[0x1C878A850](v79, -1, -1);

            uint64_t v20 = v145;
            v151(v145, v6);
            id v36 = v146;
          }
          else
          {

            v151(v20, v6);
          }
          type metadata accessor for CKError(0);
          v160[0] = 9;
          sub_1C4D34E88(MEMORY[0x1E4FBC860]);
          sub_1C4D35568();
          _BridgedStoredNSError.init(_:userInfo:)();
          uint64_t v75 = (uint64_t)aBlock;
          swift_willThrow();
          uint64_t v144 = 0;
          if (!v68) {
            goto LABEL_39;
          }
        }
      }
    }
    uint64_t v6 = v147;
    if (!v33) {
      break;
    }

    --v33;
    uint64_t v25 = v152;
  }
  swift_bridgeObjectRelease();
  unint64_t v98 = v131;
  CKLog.getter();
  char v99 = Logger.logObject.getter();
  os_log_type_t v100 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v99, v100))
  {
    BOOL v101 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v101 = 0;
    _os_log_impl(&dword_1C4CFF000, v99, v100, "Giving up on auth token renewal due to too many HSA2 errors", v101, 2u);
    MEMORY[0x1C878A850](v101, -1, -1);
  }

  v151(v98, v6);
  type metadata accessor for CKError(0);
  uint64_t v153 = 9;
  sub_1C4D34E88(MEMORY[0x1E4FBC860]);
  sub_1C4D35568();
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v75 = (uint64_t)aBlock;
  swift_willThrow();

  Swift::Int v102 = v133;
LABEL_46:
  id v103 = (id)v75;
  char v104 = (void *)_convertErrorToNSError(_:)();
  (*((void (**)(char *, uint64_t, void *))v102 + 2))(v102, 0, v104);

LABEL_47:
  _Block_release(v102);
}

void CKDBackingExplicitCredentialsAccount.renewAuthToken(options:completionHandler:)(uint64_t a1, void (*a2)(void, uint64_t), uint64_t a3)
{
  uint64_t v144 = a3;
  unint64_t v145 = a2;
  uint64_t v159 = type metadata accessor for DispatchTime();
  sub_1C4D18454();
  uint64_t v146 = v4;
  MEMORY[0x1F4188790](v5);
  sub_1C4D184E4();
  uint64_t v158 = v7 - v6;
  uint64_t v153 = 0;
  uint64_t v8 = type metadata accessor for Logger();
  sub_1C4D18454();
  id v10 = v9;
  MEMORY[0x1F4188790](v11);
  sub_1C4D35E90();
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v142 - v14;
  MEMORY[0x1F4188790](v13);
  sub_1C4D35FA0();
  sub_1C4D35E90();
  MEMORY[0x1F4188790](v16);
  sub_1C4D35FA0();
  sub_1C4D35E90();
  MEMORY[0x1F4188790](v17);
  sub_1C4D35FA0();
  sub_1C4D35E90();
  MEMORY[0x1F4188790](v18);
  sub_1C4D35FA0();
  sub_1C4D35E90();
  MEMORY[0x1F4188790](v19);
  sub_1C4D35FA0();
  uint64_t v157 = v20;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = ((char *)v142 - v22);
  CKLog.getter();
  id v24 = v3;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  BOOL v27 = sub_1C4D35F0C(v26);
  BOOL v28 = &selRef_accountsWillDeleteAccount_completionHandler_;
  uint64_t v143 = (uint64_t)v10;
  if (v27)
  {
    sub_1C4D16DB8();
    uint64_t aBlock = (_DWORD *)sub_1C4D35FAC();
    LODWORD(v23->isa) = 136315138;
    uint64_t v29 = sub_1C4D35710(objc_msgSend(v24, (SEL)&selRef_addSupplementalZoneInfos_), (SEL *)&selRef_username);
    id v10 = v24;
    if (!v30)
    {
LABEL_62:

      __break(1u);
LABEL_63:

      __break(1u);
LABEL_64:

      __break(1u);
      return;
    }
    uint64_t v163 = sub_1C4D14B9C(v29, v30, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C4CFF000, v25, v26, "Fetching account info for fake account with email %s", (uint8_t *)v23, 0xCu);
    swift_arrayDestroy();
    sub_1C4D16C3C();
    sub_1C4D16C3C();

    uint64_t v31 = v143;
    uint64_t v32 = sub_1C4D35EAC(v143);
    v33(v32);
    BOOL v28 = &selRef_accountsWillDeleteAccount_completionHandler_;
  }
  else
  {

    uint64_t v34 = sub_1C4D35EAC((uint64_t)v10);
    v35(v34);
    uint64_t v31 = (uint64_t)v10;
  }
  id v36 = objc_msgSend(self, sel_sharedAccountStore);
  id v162 = objc_msgSend(v36, sel_accountStore);

  *(void *)&long long v151 = sub_1C4D35690(v24, (SEL *)&selRef_hsa2RecoveryKey);
  uint64_t v155 = v8;
  uint64_t v154 = v15;
  id v161 = v24;
  uint64_t v38 = &off_1C507E000;
  uint64_t v152 = v39;
  if (!v39) {
    goto LABEL_21;
  }
  uint64_t v148 = &v165;
  id v10 = (id)(v31 + 8);
  uint64_t v150 = &v166;
  uint64_t v149 = v146 + 8;
  uint64_t v40 = 2;
  *(void *)&long long v37 = 138412290;
  long long v147 = v37;
  while (1)
  {
    CKLog.getter();
    uint64_t v23 = v24;
    os_log_type_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.info.getter();
    BOOL v43 = os_log_type_enabled(v41, v42);
    unint64_t v156 = (uint64_t (**)(uint64_t, uint64_t, void *))v40;
    if (v43)
    {
      id v44 = v10;
      id v45 = v24;
      id v46 = (uint8_t *)sub_1C4D16DB8();
      uint64_t v47 = (void *)sub_1C4D36048();
      *(_DWORD *)id v46 = v147;
      uint64_t aBlock = v23;
      uint64_t v48 = v23;
      uint64_t v8 = v155;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v47 = v45;
      id v10 = v44;

      _os_log_impl(&dword_1C4CFF000, v41, v42, "Calculating HSA2DevicePassword for %@", v46, 0xCu);
      sub_1C4D10728(&qword_1EA3CBEA0);
      swift_arrayDestroy();
      sub_1C4D16C3C();
      sub_1C4D16C3C();
    }
    else
    {

      os_log_type_t v41 = v23;
    }

    v160(v157, v8);
    id v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4EF60]), sel_init);
    uint64_t v50 = sub_1C4D35710([v23 appleAccount], (SEL *)&selRef_username);
    if (v51)
    {
      unint64_t v52 = (void *)MEMORY[0x1C87879B0](v50);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v52 = 0;
    }
    objc_msgSend(v49, sel_setUsername_, v52);

    objc_msgSend(v49, sel_setIsUsernameEditable_, 0);
    objc_msgSend(v49, sel_setServiceType_, 1);
    uint64_t v53 = sub_1C4D35690(v23, (SEL *)&selRef_hsa2AccountPassword);
    if (v54)
    {
      dispatch_semaphore_t v55 = (void *)MEMORY[0x1C87879B0](v53);
      swift_bridgeObjectRelease();
    }
    else
    {
      dispatch_semaphore_t v55 = 0;
    }
    objc_msgSend(v49, sel__setPassword_, v55);

    sub_1C4D35638(v151, v152, v49);
    objc_msgSend(v49, sel_setAuthenticationType_, 0);
    objc_msgSend(v49, sel_setIsEphemeral_, 1);
    id v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4EF68]), sel_init);
    if (!v56)
    {
      __break(1u);
LABEL_60:

      __break(1u);
LABEL_61:

      __break(1u);
      goto LABEL_62;
    }
    uint64_t v57 = v56;
    objc_msgSend(v56, sel_setDelegate_, v23);
    dispatch_semaphore_t v58 = dispatch_semaphore_create(0);
    uint64_t v59 = swift_allocObject();
    *(void *)(v59 + 16) = v58;
    uint64_t v168 = sub_1C4D356EC;
    uint64_t v169 = v59;
    uint64_t aBlock = (_DWORD *)MEMORY[0x1E4F143A8];
    uint64_t v165 = 1107296256;
    uint64_t v166 = sub_1C4D33EA4;
    uint64_t v167 = &unk_1F20419C0;
    uint64_t v60 = _Block_copy(&aBlock);
    id v61 = v49;
    uint64_t v62 = v58;
    swift_release();
    objc_msgSend(v57, sel_authenticateWithContext_completion_, v61, v60);
    _Block_release(v60);

    uint64_t v63 = v158;
    static DispatchTime.distantFuture.getter();
    MEMORY[0x1C8787CB0](v63);
    sub_1C4D35EA0();
    v64();
    uint64_t v65 = sub_1C4D35690(v23, (SEL *)&selRef_hsa2DevicePassword);
    if (v66) {
      break;
    }
    id v67 = v156;
    if (!v156)
    {
      swift_bridgeObjectRelease();
      uint64_t v108 = v142[2];
      CKLog.getter();
      os_log_type_t v109 = Logger.logObject.getter();
      os_log_type_t v110 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v109, v110))
      {
        uint64_t v111 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v111 = 0;
        _os_log_impl(&dword_1C4CFF000, v109, v110, "Giving up on auth token renewal due to too many HSA2 errors", v111, 2u);
        sub_1C4D16C3C();
      }

      v160(v108, v155);
      type metadata accessor for CKError(0);
      uint64_t v163 = 9;
      sub_1C4D34E88(MEMORY[0x1E4FBC860]);
      sub_1C4D35568();
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v82 = (uint64_t)aBlock;
      swift_willThrow();

      uint64_t v112 = v145;
      goto LABEL_46;
    }

    uint64_t v40 = (uint64_t)v67 - 1;
    uint64_t v8 = v155;
    id v24 = v161;
  }
  uint64_t v68 = v65;
  uint64_t v69 = v66;
  swift_bridgeObjectRelease();
  id v70 = objc_allocWithZone(MEMORY[0x1E4F179C0]);
  id v71 = sub_1C4D34974(v68, v69);
  id v72 = [v23 appleAccount];
  objc_msgSend(v72, sel_setCredential_, v71);

  BOOL v28 = &selRef_accountsWillDeleteAccount_completionHandler_;
  uint64_t v15 = v154;
  id v24 = v161;
  uint64_t v31 = v143;
  uint64_t v38 = &off_1C507E000;
LABEL_21:
  unint64_t v156 = &v166;
  uint64_t v152 = v146 + 8;
  uint64_t v157 = v31 + 8;
  uint64_t v73 = 2;
  *(void *)&long long v37 = *((void *)v38 + 138);
  long long v151 = v37;
  uint64_t v150 = (uint64_t (**)(uint64_t, uint64_t, void *))(MEMORY[0x1E4FBC840] + 8);
  while (2)
  {
    if (!v162)
    {
      CKLog.getter();
      uint64_t v23 = v24;
      os_log_type_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.error.getter();
      if (sub_1C4D35F0C(v85))
      {
        sub_1C4D16DB8();
        uint64_t v86 = sub_1C4D35FAC();
        id v87 = objc_msgSend(v23, v28[259], sub_1C4D35FC8(v86).n128_f64[0]);
        uint64_t v88 = sub_1C4D35710(v87, (SEL *)&selRef_username);
        if (!v89) {
          goto LABEL_60;
        }
        *(void *)(v15 + 4) = sub_1C4D14B9C(v88, v89, (uint64_t *)&aBlock);

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C4CFF000, v84, v85, "Error initializing fake account with email %s, no account store available", (uint8_t *)v15, 0xCu);
        swift_arrayDestroy();
        sub_1C4D16C3C();
        sub_1C4D16C3C();

        uint64_t v15 = v154;
        sub_1C4D35E78();
        v90();
        id v24 = v161;
      }
      else
      {

        sub_1C4D35FDC();
        v98();
      }
      type metadata accessor for CKError(0);
      uint64_t v170 = 9;
      sub_1C4D34E88(MEMORY[0x1E4FBC860]);
      sub_1C4D35568();
      sub_1C4D35F7C();
      uint64_t v82 = (uint64_t)aBlock;
      swift_willThrow();
      uint64_t v153 = 0;
      if (!v73) {
        break;
      }
      goto LABEL_38;
    }
    uint64_t v74 = swift_allocObject();
    *(void *)(v74 + 16) = 0;
    *(unsigned char *)(v74 + 24) = 0;
    id v10 = v162;
    dispatch_semaphore_t v75 = dispatch_semaphore_create(0);
    id v76 = [v24 v28[259]];
    uint64_t v77 = swift_allocObject();
    *(void *)(v77 + 16) = v74;
    *(void *)(v77 + 24) = v75;
    uint64_t v168 = sub_1C4D35618;
    uint64_t v169 = v77;
    uint64_t aBlock = (_DWORD *)MEMORY[0x1E4F143A8];
    uint64_t v165 = 1107296256;
    uint64_t v166 = (uint64_t (*)(uint64_t, uint64_t, void *))sub_1C4D30834;
    uint64_t v167 = &unk_1F2041970;
    os_log_type_t v78 = _Block_copy(&aBlock);
    swift_retain();
    dispatch_semaphore_t v79 = v75;
    swift_release();
    objc_msgSend(v10, sel_aa_updatePropertiesForAppleAccount_completion_, v76, v78);
    _Block_release(v78);

    uint64_t v80 = v158;
    static DispatchTime.distantFuture.getter();
    MEMORY[0x1C8787CB0](v80);
    sub_1C4D35EA0();
    v81();
    swift_beginAccess();
    uint64_t v82 = *(void *)(v74 + 16);
    if (*(unsigned char *)(v74 + 24))
    {
      uint64_t aBlock = *(_DWORD **)(v74 + 16);
      id v83 = (id)v82;
      sub_1C4D10728(&qword_1EBBCD850);
      swift_willThrowTypedImpl();
      swift_release();

      BOOL v28 = &selRef_accountsWillDeleteAccount_completionHandler_;
      uint64_t v15 = v154;
      id v24 = v161;
      if (!v73) {
        break;
      }
      goto LABEL_38;
    }
    if (v82)
    {
      id v115 = v161;
      id v116 = objc_msgSend(v161, sel_ckAccount);

      if (v116)
      {
        sub_1C4D35FF0();
        uint64_t v23 = v115;
        unint64_t v117 = Logger.logObject.getter();
        os_log_type_t v118 = static os_log_type_t.info.getter();
        BOOL v119 = sub_1C4D35F0C(v118);
        os_log_type_t v120 = v145;
        if (v119)
        {
          uint64_t v121 = swift_slowAlloc();
          id v162 = (id)swift_slowAlloc();
          uint64_t v170 = (uint64_t)v162;
          *(_DWORD *)uint64_t v121 = 136315394;
          uint64_t v122 = sub_1C4D35710([v23 appleAccount], (SEL *)&selRef_username);
          if (!v123) {
            goto LABEL_63;
          }
          uint64_t v124 = sub_1C4D14B9C(v122, v123, &v170);
          sub_1C4D35EC8(v124);

          swift_bridgeObjectRelease();
          *(_WORD *)(v121 + 12) = 2080;
          uint64_t aBlock = (_DWORD *)sub_1C4D35690(v23, (SEL *)&selRef_dsid);
          uint64_t v165 = v125;
          sub_1C4D10728(&qword_1EA3CBEB0);
          uint64_t v126 = String.init<A>(describing:)();
          uint64_t v128 = sub_1C4D14B9C(v126, v127, &v170);
          sub_1C4D35F34(v128);

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C4CFF000, v117, v118, "Initialized fake account with email %s and dsid %s", (uint8_t *)v121, 0x16u);
          sub_1C4D36008();
          sub_1C4D16C3C();
          sub_1C4D16C3C();

LABEL_54:
          sub_1C4D35EA0();
          v140();
          swift_release();
          v145(1, 0);
LABEL_58:

          return;
        }
      }
      else
      {
        sub_1C4D35FF0();
        uint64_t v23 = v115;
        id v129 = Logger.logObject.getter();
        os_log_type_t v130 = static os_log_type_t.error.getter();
        BOOL v131 = sub_1C4D35F0C(v130);
        os_log_type_t v120 = v145;
        if (v131)
        {
          uint64_t v132 = swift_slowAlloc();
          id v162 = (id)swift_slowAlloc();
          uint64_t v170 = (uint64_t)v162;
          *(_DWORD *)uint64_t v132 = 136315394;
          uint64_t v133 = sub_1C4D35710([v23 appleAccount], (SEL *)&selRef_username);
          if (!v134) {
            goto LABEL_64;
          }
          uint64_t v135 = sub_1C4D14B9C(v133, v134, &v170);
          sub_1C4D35EC8(v135);

          swift_bridgeObjectRelease();
          *(_WORD *)(v132 + 12) = 2080;
          uint64_t aBlock = (_DWORD *)sub_1C4D35690(v23, (SEL *)&selRef_dsid);
          uint64_t v165 = v136;
          sub_1C4D10728(&qword_1EA3CBEB0);
          uint64_t v137 = String.init<A>(describing:)();
          uint64_t v139 = sub_1C4D14B9C(v137, v138, &v170);
          sub_1C4D35F34(v139);

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C4CFF000, v129, v130, "Initialized fake AppleAccount for email %s / dsid %s lacked a cloudKit auth token", (uint8_t *)v132, 0x16u);
          sub_1C4D36008();
          sub_1C4D16C3C();
          sub_1C4D16C3C();

          goto LABEL_54;
        }
      }
      sub_1C4D35E78();
      v141();
      swift_release();
      v120(1, 0);
      goto LABEL_58;
    }
    sub_1C4D35FF0();
    id v24 = v161;
    uint64_t v23 = v161;
    uint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.error.getter();
    if (sub_1C4D35F0C(v92))
    {
      sub_1C4D16DB8();
      uint64_t v93 = sub_1C4D35FAC();
      id v94 = [v23 appleAccount];
      uint64_t v95 = sub_1C4D35710(v94, (SEL *)&selRef_username);
      if (!v96) {
        goto LABEL_61;
      }
      *(Class *)((char *)&v79->isa + 4) = (Class)sub_1C4D14B9C(v95, v96, (uint64_t *)&aBlock);

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C4CFF000, v91, v92, "Error initializing fake account with email %s,  no error available", (uint8_t *)v79, 0xCu);
      swift_arrayDestroy();
      sub_1C4D16C3C();
      sub_1C4D16C3C();

      sub_1C4D35E78();
      v97();
      id v24 = v161;
    }
    else
    {

      sub_1C4D35FDC();
      v99();
    }
    type metadata accessor for CKError(0);
    uint64_t v170 = 9;
    sub_1C4D34E88(MEMORY[0x1E4FBC860]);
    sub_1C4D35568();
    sub_1C4D35F7C();
    uint64_t v82 = (uint64_t)aBlock;
    swift_willThrow();
    swift_release();

    uint64_t v153 = 0;
    BOOL v28 = &selRef_accountsWillDeleteAccount_completionHandler_;
    uint64_t v15 = v154;
    if (v73)
    {
LABEL_38:

      --v73;
      continue;
    }
    break;
  }
  sub_1C4D35FF0();
  id v100 = (id)v82;
  id v101 = (id)v82;
  Swift::Int v102 = Logger.logObject.getter();
  os_log_type_t v103 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v102, v103))
  {
    char v104 = (uint8_t *)sub_1C4D16DB8();
    unint64_t v105 = (void *)sub_1C4D36048();
    *(_DWORD *)char v104 = 138412290;
    id v106 = (id)v82;
    uint64_t v107 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t aBlock = (_DWORD *)v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v105 = v107;

    _os_log_impl(&dword_1C4CFF000, v102, v103, "Giving up on auth token renewal due to too many errors: %@", v104, 0xCu);
    sub_1C4D10728(&qword_1EA3CBEA0);
    swift_arrayDestroy();
    sub_1C4D16C3C();
    sub_1C4D16C3C();
  }
  else
  {
  }
  uint64_t v112 = v145;

  sub_1C4D35E78();
  v113();
  swift_willThrow();

LABEL_46:
  id v114 = (id)v82;
  v112(0, v82);
}

uint64_t sub_1C4D33EA4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1C4D10728((uint64_t *)&unk_1EA3CBFE0);
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1C4D33F4C(char a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    swift_beginAccess();
    uint64_t v5 = *(void **)(a3 + 16);
    char v6 = *(unsigned char *)(a3 + 24);
    *(void *)(a3 + 16) = a2;
    *(unsigned char *)(a3 + 24) = 1;
    id v7 = a2;
    uint64_t v8 = v5;
    char v9 = v6;
  }
  else
  {
    uint64_t v10 = a1 & 1;
    swift_beginAccess();
    uint64_t v8 = *(void **)(a3 + 16);
    char v9 = *(unsigned char *)(a3 + 24);
    *(void *)(a3 + 16) = v10;
    *(unsigned char *)(a3 + 24) = 0;
  }
  sub_1C4D355F4(v8, v9);
  return OS_dispatch_semaphore.signal()();
}

void sub_1C4D33FFC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t CKDBackingExplicitCredentialsAccount.updateAccountPropertiesAndSave()()
{
  *(void *)(v1 + 32) = v0;
  return MEMORY[0x1F4188298](sub_1C4D34134, 0, 0);
}

uint64_t sub_1C4D34134()
{
  sub_1C4D16C30();
  sub_1C4D2F13C();
  type metadata accessor for CKError(0);
  *(void *)(v0 + 24) = 9;
  sub_1C4D34E88(MEMORY[0x1E4FBC860]);
  sub_1C4D35568();
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1C4D34274(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1C4D3431C;
  return CKDBackingExplicitCredentialsAccount.updateAccountPropertiesAndSave()();
}

uint64_t sub_1C4D3431C()
{
  sub_1C4D16C30();
  uint64_t v2 = v0;
  char v4 = v3;
  uint64_t v5 = *v1;
  uint64_t v6 = *v1;
  sub_1C4D16B58();
  *id v7 = v6;
  uint64_t v8 = *(void **)(v5 + 16);
  uint64_t v9 = *v1;
  *id v7 = *v1;
  swift_task_dealloc();

  uint64_t v10 = *(void *)(v5 + 24);
  if (v2)
  {
    uint64_t v11 = (void *)_convertErrorToNSError(_:)();

    (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0, v11);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v10 + 16))(v10, v4 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v12 = *(uint64_t (**)(void))(v9 + 8);
  return v12();
}

void CKDBackingExplicitCredentialsAccount.setOverrides(on:)(void *a1)
{
  uint64_t v3 = sub_1C4D35710(objc_msgSend(v1, sel_appleAccount), (SEL *)&selRef_aa_password);
  if (v4)
  {
    id v5 = (id)MEMORY[0x1C87879B0](v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v5 = 0;
  }
  objc_msgSend(a1, sel__setPassword_, v5);
}

id CKDBackingExplicitCredentialsAccount.ckAccount.getter()
{
  id v1 = objc_msgSend(v0, sel_fakeCKAccount);
  return v1;
}

void CKDBackingExplicitCredentialsAccount.password.getter()
{
  id v1 = objc_msgSend(v0, sel_appleAccount);
  id v2 = objc_msgSend(v1, sel_credential);

  if (!v2)
  {
    __break(1u);
    goto LABEL_5;
  }
  sub_1C4D35710(v2, (SEL *)&selRef_password);
  if (!v3) {
LABEL_5:
  }
    __break(1u);
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CKDBackingExplicitCredentialsAccount.cloudKitAuthToken()()
{
  id v1 = objc_msgSend(v0, sel_ckAccount);
  if (!v1) {
    goto LABEL_4;
  }
  id v2 = v1;
  id v3 = objc_msgSend(v1, sel_credential);

  if (v3)
  {
    uint64_t v4 = sub_1C4D35710(v3, (SEL *)&selRef_token);
    if (!v5)
    {
LABEL_4:
      type metadata accessor for CKError(0);
      sub_1C4D34E88(MEMORY[0x1E4FBC860]);
      sub_1C4D35568();
      sub_1C4D35F58();
      uint64_t v4 = swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
  result._object = v5;
  result._uint64_t countAndFlagsBits = v4;
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CKDBackingExplicitCredentialsAccount.iCloudAuthToken()()
{
  id v1 = objc_msgSend(v0, sel_appleAccount);
  id v2 = objc_msgSend(v1, sel_credential);

  if (v2)
  {
    uint64_t v3 = sub_1C4D35710(v2, (SEL *)&selRef_token);
    if (!v4)
    {
      type metadata accessor for CKError(0);
      sub_1C4D34E88(MEMORY[0x1E4FBC860]);
      sub_1C4D35568();
      sub_1C4D35F58();
      uint64_t v3 = swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
  result._object = v4;
  result._uint64_t countAndFlagsBits = v3;
  return result;
}

id sub_1C4D348A8(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5 = a1;
  uint64_t v6 = a4();
  uint64_t v8 = v7;

  uint64_t v9 = (void *)MEMORY[0x1C87879B0](v6, v8);
  swift_bridgeObjectRelease();
  return v9;
}

id sub_1C4D34974(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)MEMORY[0x1C87879B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = 0;
  }
  id v4 = objc_msgSend(v2, sel_initWithPassword_, v3);

  return v4;
}

uint64_t sub_1C4D349D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *id v4 = v3;
  v4[1] = sub_1C4D35E74;
  return v6();
}

uint64_t sub_1C4D34AA4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *id v5 = v4;
  v5[1] = sub_1C4D35E74;
  return v7();
}

uint64_t sub_1C4D34B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(a1, 1, v6) == 1)
  {
    sub_1C4D35B6C(a1, &qword_1EBBCDBB8);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1C4D34CE0(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1C4D34DBC;
  return v6(a1);
}

uint64_t sub_1C4D34DBC()
{
  sub_1C4D16B40();
  uint64_t v1 = *v0;
  sub_1C4D16B58();
  void *v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

unint64_t sub_1C4D34E88(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1C4D10728((uint64_t *)&unk_1EA3CB9D8);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1C4D35D40(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1C4D34FB4(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1C4D1690C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C4D34FB4(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return sub_1C4D3502C(a1, a2, v4);
}

unint64_t sub_1C4D3502C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_1C4D35174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4D35220(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1C4D24778);
}

uint64_t sub_1C4D3518C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_1C4D35EF0();
  sub_1C4D247A0(a1, a2, a3, v7);
  void *v3 = v9;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C4D35208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4D35220(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1C4D248E4);
}

uint64_t sub_1C4D35220(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_1C4D35EF0();
  a4(a1, a2, a3);
  *uint64_t v4 = v10;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C4D352A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v5;
  *uint64_t v5 = 0x8000000000000000;
  sub_1C4D24A14(a1, a2, a3, a4, a5, isUniquelyReferenced_nonNull_native);
  *uint64_t v5 = v13;
  return swift_bridgeObjectRelease();
}

id sub_1C4D3534C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)MEMORY[0x1C87879B0]();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(a3, sel_accountTypeWithAccountTypeIdentifier_, v4);

  return v5;
}

unint64_t sub_1C4D353B0()
{
  unint64_t result = qword_1EA3CBEA8;
  if (!qword_1EA3CBEA8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA3CBEA8);
  }
  return result;
}

void sub_1C4D353F0(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v6 = (id)MEMORY[0x1C87879B0]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, *a4, v6);
}

void sub_1C4D3545C(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setProperties_forDataclass_, isa, a2);
}

void sub_1C4D354EC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = (id)MEMORY[0x1C87879B0](a2, a3);
  swift_bridgeObjectRelease();
  objc_msgSend(a4, sel_setAccountProperty_forKey_, a1, v6);
}

unint64_t sub_1C4D35568()
{
  unint64_t result = qword_1EA3CB8E8;
  if (!qword_1EA3CB8E8)
  {
    type metadata accessor for CKError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CB8E8);
  }
  return result;
}

uint64_t sub_1C4D355B8()
{
  sub_1C4D355F4(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24));
  return MEMORY[0x1F4186498](v0);
}

void sub_1C4D355F4(id a1, char a2)
{
  if (a2) {
}
  }

uint64_t sub_1C4D35600()
{
  return sub_1C4D35CC0(MEMORY[0x1E4FBC8D0]);
}

Swift::Int sub_1C4D35618(char a1, void *a2)
{
  return sub_1C4D33F4C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1C4D35620(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1C4D35630()
{
  return swift_release();
}

void sub_1C4D35638(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x1C87879B0]();
  objc_msgSend(a3, sel__setMasterKey_, v4);
}

uint64_t sub_1C4D35690(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return sub_1C4D1B014();
}

Swift::Int sub_1C4D356EC()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_1C4D35710(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t type metadata accessor for CKCredentialInterceptingAccount()
{
  return self;
}

uint64_t _s29ExplicitCredentialAccountListCMa()
{
  return self;
}

ValueMetadata *_s29ExplicitCredentialAccountListC33TuplesOfHashablesShouldBeHashableVMa()
{
  return &_s29ExplicitCredentialAccountListC33TuplesOfHashablesShouldBeHashableVN;
}

unint64_t sub_1C4D357D8()
{
  unint64_t result = qword_1EA3CBF30;
  if (!qword_1EA3CBF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CBF30);
  }
  return result;
}

uint64_t sub_1C4D35824()
{
  return sub_1C4D35CC0(MEMORY[0x1E4F14388]);
}

uint64_t sub_1C4D3583C()
{
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1C4D16BD0(v0);
  void *v1 = v2;
  v1[1] = sub_1C4D35E74;
  uint64_t v3 = sub_1C4D1B014();
  return v4(v3);
}

uint64_t sub_1C4D358E4()
{
  sub_1C4D16C30();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = (int *)v0[4];
  uint64_t v4 = swift_task_alloc();
  id v5 = (void *)sub_1C4D16BD0(v4);
  *id v5 = v6;
  v5[1] = sub_1C4D35E74;
  char v7 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1EA3CBF50 + dword_1EA3CBF50);
  return v7(v1, v2, v3);
}

uint64_t sub_1C4D359A0()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0);
}

uint64_t sub_1C4D359E0()
{
  sub_1C4D16C30();
  uint64_t v2 = v1;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  id v5 = (int *)v0[4];
  uint64_t v6 = swift_task_alloc();
  char v7 = (void *)sub_1C4D16BD0(v6);
  *char v7 = v8;
  v7[1] = sub_1C4D35AA4;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EA3CBF60 + dword_1EA3CBF60);
  return v9(v2, v3, v4, v5);
}

uint64_t sub_1C4D35AA4()
{
  sub_1C4D16B40();
  uint64_t v1 = *v0;
  sub_1C4D16B58();
  void *v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_1C4D35B6C(uint64_t a1, uint64_t *a2)
{
  sub_1C4D10728(a2);
  sub_1C4D1B074();
  sub_1C4D35EA0();
  v3();
  return a1;
}

uint64_t sub_1C4D35BBC()
{
  swift_release();
  return MEMORY[0x1F4186498](v0);
}

uint64_t sub_1C4D35BF4(uint64_t a1)
{
  uint64_t v3 = *(int **)(v1 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1C4D16BD0(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1C4D35AA4;
  char v7 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA3CBF70 + dword_1EA3CBF70);
  return v7(a1, v3);
}

uint64_t sub_1C4D35CA8()
{
  return sub_1C4D35CC0(MEMORY[0x1E4FBC8D0]);
}

uint64_t sub_1C4D35CC0(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));

  return MEMORY[0x1F4186498](v1);
}

uint64_t sub_1C4D35D08()
{
  return MEMORY[0x1F4186498](v0);
}

uint64_t sub_1C4D35D40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4D10728(&qword_1EA3CBFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C4D35DA8(uint64_t a1)
{
  return sub_1C4D30CC8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48));
}

uint64_t sub_1C4D35DCC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1C4D30B88(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_1C4D35DEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1C4D10728(a3);
  sub_1C4D1B074();
  uint64_t v4 = sub_1C4D1B014();
  v5(v4);
  return a2;
}

void sub_1C4D35E90()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_1C4D35EAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = v1;
  *(void *)(v2 - 216) = *(void *)(a1 + 8);
  return result;
}

uint64_t sub_1C4D35EC8(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_1C4D35EF0()
{
  void *v0 = 0x8000000000000000;
}

BOOL sub_1C4D35F0C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1C4D35F34(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1C4D35F58()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t sub_1C4D35F7C()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t sub_1C4D35FAC()
{
  return swift_slowAlloc();
}

__n128 sub_1C4D35FC8(uint64_t a1)
{
  *(void *)(v2 - 168) = a1;
  __n128 result = *(__n128 *)(v2 - 304);
  _DWORD *v1 = result.n128_u32[0];
  return result;
}

uint64_t sub_1C4D35FF0()
{
  return CKLog.getter();
}

uint64_t sub_1C4D36008()
{
  return swift_arrayDestroy();
}

uint64_t sub_1C4D36028()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C4D36048()
{
  return swift_slowAlloc();
}

uint64_t sub_1C4D36060()
{
  type metadata accessor for PartialTrafficLog(0);
  sub_1C4D1B074();
  MEMORY[0x1F4188790]();
  sub_1C4D4048C();
  uint64_t v1 = sub_1C4D405CC();
  sub_1C4D3985C(v1, v2, v3);
  uint64_t v4 = 1234;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = *(void *)(v0 + 16);
      unint64_t v0 = *(void *)(v0 + 24);
      uint64_t v7 = String.count.getter();
      uint64_t v8 = Data.count.getter();
      swift_bridgeObjectRelease();
      sub_1C4D16298(v6, v0);
      uint64_t v4 = v7 + v8;
      if (__OFADD__(v7, v8))
      {
        __break(1u);
        goto LABEL_9;
      }
      return v4;
    case 2u:
    case 6u:
      uint64_t v4 = 22;
      goto LABEL_4;
    case 3u:
    case 4u:
      uint64_t v4 = 333;
      goto LABEL_4;
    case 5u:
LABEL_9:
      uint64_t v10 = *(void *)(v0 + 16);
      unint64_t v9 = *(void *)(v0 + 24);
      uint64_t v11 = String.count.getter();
      uint64_t v12 = Data.count.getter();
      swift_bridgeObjectRelease();
      sub_1C4D16298(v10, v9);
      uint64_t v4 = v11 + v12;
      if (__OFADD__(v11, v12))
      {
        __break(1u);
        JUMPOUT(0x1C4D361C8);
      }
      return v4;
    default:
LABEL_4:
      sub_1C4D396B0(v0, (void (*)(void))type metadata accessor for PartialTrafficLog);
      return v4;
  }
}

uint64_t PartialTrafficLog.RequestMetadata.init(requestUUID:date:url:method:headers:requestClass:parsingStandaloneMessage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, char a11)
{
  *a9 = a1;
  a9[1] = a2;
  long long v17 = (int *)type metadata accessor for PartialTrafficLog.RequestMetadata(0);
  uint64_t v18 = (char *)a9 + v17[5];
  type metadata accessor for Date();
  sub_1C4D1B074();
  (*(void (**)(char *, uint64_t))(v19 + 32))(v18, a3);
  uint64_t v20 = (char *)a9 + v17[6];
  type metadata accessor for URL();
  sub_1C4D1B074();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v21 + 32))(v20, a4);
  uint64_t v23 = (void *)((char *)a9 + v17[7]);
  void *v23 = a5;
  v23[1] = a6;
  *(void *)((char *)a9 + v17[8]) = a7;
  id v24 = (void *)((char *)a9 + v17[9]);
  void *v24 = a8;
  v24[1] = a10;
  *((unsigned char *)a9 + v17[10]) = a11;
  return result;
}

uint64_t static PartialTrafficLog.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v77 = a2;
  uint64_t v74 = type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
  sub_1C4D1B074();
  MEMORY[0x1F4188790](v3);
  sub_1C4D40338(v4, v72);
  uint64_t v5 = type metadata accessor for PartialTrafficLog.RequestMetadata(0);
  MEMORY[0x1F4188790](v5 - 8);
  sub_1C4D40300(v6, v72);
  type metadata accessor for PartialTrafficLog(0);
  sub_1C4D1B074();
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (uint64_t *)((char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (uint64_t *)((char *)&v72 - v12);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v72 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  id v76 = (uint64_t *)((char *)&v72 - v18);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (uint64_t *)((char *)&v72 - v20);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  id v24 = (uint64_t *)((char *)&v72 - v23);
  MEMORY[0x1F4188790](v22);
  os_log_type_t v26 = (char *)&v72 - v25;
  uint64_t v27 = sub_1C4D10728(&qword_1EA3CC010);
  uint64_t v28 = MEMORY[0x1F4188790](v27 - 8);
  unint64_t v30 = (uint64_t *)((char *)&v72 + *(int *)(v28 + 56) - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = a1;
  uint64_t v32 = (char *)&v72 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4D3985C(v31, (uint64_t)v32, (void (*)(void))type metadata accessor for PartialTrafficLog);
  sub_1C4D3985C(v77, (uint64_t)v30, (void (*)(void))type metadata accessor for PartialTrafficLog);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1C4D3985C((uint64_t)v32, (uint64_t)v24, (void (*)(void))type metadata accessor for PartialTrafficLog);
      uint64_t v36 = *v24;
      uint64_t v35 = v24[1];
      uint64_t v38 = v24[2];
      unint64_t v37 = v24[3];
      if (sub_1C4D4029C() != 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v68 = v38;
        goto LABEL_47;
      }
      uint64_t v39 = *v30;
      uint64_t v40 = v30[1];
      uint64_t v41 = v30[2];
      unint64_t v42 = v30[3];
      BOOL v43 = v36 == v39 && v35 == v40;
      if (!v43 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        sub_1C4D16298(v41, v42);
        swift_bridgeObjectRelease();
        uint64_t v70 = v38;
        goto LABEL_56;
      }
      uint64_t v44 = sub_1C4D405CC();
      char v45 = MEMORY[0x1C8787730](v44);
      swift_bridgeObjectRelease();
      sub_1C4D16298(v41, v42);
      swift_bridgeObjectRelease();
      uint64_t v46 = sub_1C4D405CC();
      sub_1C4D16298(v46, v47);
      if (v45) {
        goto LABEL_50;
      }
      goto LABEL_57;
    case 2u:
      sub_1C4D3985C((uint64_t)v32, (uint64_t)v21, (void (*)(void))type metadata accessor for PartialTrafficLog);
      uint64_t v49 = *v21;
      uint64_t v48 = v21[1];
      if (sub_1C4D4029C() != 2) {
        goto LABEL_45;
      }
      goto LABEL_35;
    case 3u:
      uint64_t v50 = v76;
      sub_1C4D3985C((uint64_t)v32, (uint64_t)v76, (void (*)(void))type metadata accessor for PartialTrafficLog);
      if (sub_1C4D4029C() != 3)
      {
        uint64_t v33 = type metadata accessor for PartialTrafficLog.ResponseMetadata;
        uint64_t v34 = (uint64_t)v50;
        goto LABEL_43;
      }
      uint64_t v51 = v75;
      sub_1C4D39704((uint64_t)v30, (uint64_t)v75, (void (*)(void))type metadata accessor for PartialTrafficLog.ResponseMetadata);
      BOOL v52 = *v50 == *v51 && v50[1] == v51[1];
      uint64_t v53 = v74;
      if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)())
        && (static Date.== infix(_:_:)() & 1) != 0
        && *(void *)((char *)v50 + *(int *)(v53 + 24)) == *(void *)((char *)v51 + *(int *)(v53 + 24))
        && (sub_1C4D36D38(*(void *)((char *)v50 + *(int *)(v53 + 28)), *(void *)((char *)v51 + *(int *)(v53 + 28))) & 1) != 0)
      {
        sub_1C4D396B0((uint64_t)v51, (void (*)(void))type metadata accessor for PartialTrafficLog.ResponseMetadata);
        sub_1C4D396B0((uint64_t)v50, (void (*)(void))type metadata accessor for PartialTrafficLog.ResponseMetadata);
        goto LABEL_50;
      }
      sub_1C4D396B0((uint64_t)v51, (void (*)(void))type metadata accessor for PartialTrafficLog.ResponseMetadata);
      sub_1C4D396B0((uint64_t)v50, (void (*)(void))type metadata accessor for PartialTrafficLog.ResponseMetadata);
      goto LABEL_57;
    case 4u:
      sub_1C4D3985C((uint64_t)v32, (uint64_t)v16, (void (*)(void))type metadata accessor for PartialTrafficLog);
      uint64_t v54 = *((void *)v16 + 1);
      uint64_t v55 = *((void *)v16 + 4);
      if (sub_1C4D4029C() == 4)
      {
        uint64_t v56 = *v30;
        uint64_t v57 = v30[1];
        uint64_t v58 = v30[4];
        v81[0] = *(void *)v16;
        v81[1] = v54;
        long long v82 = *((_OWORD *)v16 + 1);
        uint64_t v83 = v55;
        v78[0] = v56;
        v78[1] = v57;
        long long v79 = *((_OWORD *)v30 + 1);
        uint64_t v80 = v58;
        char v59 = static PartialTrafficLog.ResponseConfiguration.== infix(_:_:)(v81, v78);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_53;
      }
      swift_bridgeObjectRelease();
LABEL_45:
      swift_bridgeObjectRelease();
      goto LABEL_48;
    case 5u:
      sub_1C4D3985C((uint64_t)v32, (uint64_t)v13, (void (*)(void))type metadata accessor for PartialTrafficLog);
      uint64_t v61 = *v13;
      uint64_t v60 = v13[1];
      uint64_t v62 = v13[2];
      unint64_t v37 = v13[3];
      if (sub_1C4D4029C() != 5)
      {
        swift_bridgeObjectRelease();
        uint64_t v68 = v62;
LABEL_47:
        sub_1C4D16298(v68, v37);
        goto LABEL_48;
      }
      uint64_t v63 = v30[2];
      unint64_t v64 = v30[3];
      BOOL v65 = v61 == *v30 && v60 == v30[1];
      if (v65 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        char v66 = MEMORY[0x1C8787730](v62, v37, v63, v64);
        swift_bridgeObjectRelease();
        sub_1C4D16298(v63, v64);
        swift_bridgeObjectRelease();
        sub_1C4D16298(v62, v37);
        if (v66) {
          goto LABEL_50;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1C4D16298(v63, v64);
        swift_bridgeObjectRelease();
        uint64_t v70 = v62;
LABEL_56:
        sub_1C4D16298(v70, v37);
      }
      goto LABEL_57;
    case 6u:
      sub_1C4D3985C((uint64_t)v32, (uint64_t)v10, (void (*)(void))type metadata accessor for PartialTrafficLog);
      uint64_t v49 = *v10;
      uint64_t v48 = v10[1];
      if (sub_1C4D4029C() != 6) {
        goto LABEL_45;
      }
LABEL_35:
      if (v49 == *v30 && v48 == v30[1])
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_50;
      }
      sub_1C4D405CC();
      _stringCompareWithSmolCheck(_:_:expecting:)();
      sub_1C4D40518();
      swift_bridgeObjectRelease();
      if (v49)
      {
LABEL_50:
        sub_1C4D396B0((uint64_t)v32, (void (*)(void))type metadata accessor for PartialTrafficLog);
        char v59 = 1;
        return v59 & 1;
      }
LABEL_57:
      sub_1C4D396B0((uint64_t)v32, (void (*)(void))type metadata accessor for PartialTrafficLog);
LABEL_58:
      char v59 = 0;
      return v59 & 1;
    default:
      sub_1C4D3985C((uint64_t)v32, (uint64_t)v26, (void (*)(void))type metadata accessor for PartialTrafficLog);
      if (!sub_1C4D4029C())
      {
        uint64_t v69 = v73;
        sub_1C4D39704((uint64_t)v30, v73, (void (*)(void))type metadata accessor for PartialTrafficLog.RequestMetadata);
        char v59 = static PartialTrafficLog.RequestMetadata.== infix(_:_:)((uint64_t)v26);
        sub_1C4D396B0(v69, (void (*)(void))type metadata accessor for PartialTrafficLog.RequestMetadata);
        sub_1C4D396B0((uint64_t)v26, (void (*)(void))type metadata accessor for PartialTrafficLog.RequestMetadata);
LABEL_53:
        sub_1C4D396B0((uint64_t)v32, (void (*)(void))type metadata accessor for PartialTrafficLog);
        return v59 & 1;
      }
      uint64_t v33 = type metadata accessor for PartialTrafficLog.RequestMetadata;
      uint64_t v34 = (uint64_t)v26;
LABEL_43:
      sub_1C4D396B0(v34, (void (*)(void))v33);
LABEL_48:
      sub_1C4D39650((uint64_t)v32);
      goto LABEL_58;
  }
}

uint64_t PartialTrafficLog.RequestMetadata.requestUUID.getter()
{
  return sub_1C4D1B014();
}

uint64_t PartialTrafficLog.RequestMetadata.date.getter()
{
  return sub_1C4D37FA0((void (*)(void))type metadata accessor for PartialTrafficLog.RequestMetadata);
}

uint64_t PartialTrafficLog.RequestMetadata.url.getter()
{
  type metadata accessor for PartialTrafficLog.RequestMetadata(0);
  type metadata accessor for URL();
  sub_1C4D1B074();
  uint64_t v0 = sub_1C4D1B014();
  return v1(v0);
}

uint64_t PartialTrafficLog.RequestMetadata.method.getter()
{
  return sub_1C4D1B014();
}

uint64_t PartialTrafficLog.RequestMetadata.headers.getter()
{
  type metadata accessor for PartialTrafficLog.RequestMetadata(0);
  return swift_bridgeObjectRetain();
}

uint64_t PartialTrafficLog.RequestMetadata.requestClass.getter()
{
  return sub_1C4D1B014();
}

uint64_t PartialTrafficLog.RequestMetadata.parsingStandaloneMessage.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PartialTrafficLog.RequestMetadata(0) + 40));
}

uint64_t static PartialTrafficLog.RequestMetadata.== infix(_:_:)(uint64_t a1)
{
  sub_1C4D402E4(a1);
  BOOL v6 = v6 && v4 == v5;
  if (!v6)
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v8 = 0;
    if ((v7 & 1) == 0) {
      return v8 & 1;
    }
  }
  type metadata accessor for PartialTrafficLog.RequestMetadata(0);
  if ((sub_1C4D405EC() & 1) == 0 || (MEMORY[0x1C87876E0](v2 + v3[6], v1 + v3[6]) & 1) == 0) {
    goto LABEL_20;
  }
  sub_1C4D40438(v3[7]);
  BOOL v11 = v6 && v9 == v10;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v8 = 0, (v12 & 1) != 0))
  {
    if (sub_1C4D36D38(*(void *)(v2 + v3[8]), *(void *)(v1 + v3[8])))
    {
      sub_1C4D40438(v3[9]);
      BOOL v15 = v6 && v13 == v14;
      if (v15 || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v8 = 0, (v16 & 1) != 0)) {
        char v8 = *(unsigned char *)(v2 + v3[10]) ^ *(unsigned char *)(v1 + v3[10]) ^ 1;
      }
      return v8 & 1;
    }
LABEL_20:
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_1C4D36D38(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v26 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v26) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v26) {
        return 1;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v26) {
          return 1;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_22:
    uint64_t v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v10);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v20 = sub_1C4D21F44(v15, v16);
    char v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v23 = (void *)(*(void *)(a2 + 56) + 16 * v20);
    if (*v23 == v19 && v23[1] == v18)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v25 & 1) == 0) {
        return 0;
      }
    }
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v26) {
    return 1;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v26) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1C4D36F3C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x5574736575716572 && a2 == 0xEB00000000444955;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1702125924 && a2 == 0xE400000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 7107189 && a2 == 0xE300000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x646F6874656DLL && a2 == 0xE600000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x73726564616568 && a2 == 0xE700000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x4374736575716572 && a2 == 0xEC0000007373616CLL;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else if (a1 == 0xD000000000000018 && a2 == 0x80000001C5082A20)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v11) {
                return 6;
              }
              else {
                return 7;
              }
            }
          }
        }
      }
    }
  }
}

unint64_t sub_1C4D371D4(char a1)
{
  unint64_t result = 0xD000000000000018;
  switch(a1)
  {
    case 1:
      unint64_t result = 1702125924;
      break;
    case 2:
      unint64_t result = 7107189;
      break;
    case 3:
      unint64_t result = 0x646F6874656DLL;
      break;
    case 4:
      unint64_t result = 0x73726564616568;
      break;
    case 5:
      unint64_t result = 0x4374736575716572;
      break;
    case 6:
      return result;
    default:
      unint64_t result = 0x5574736575716572;
      break;
  }
  return result;
}

unint64_t sub_1C4D372C0()
{
  return sub_1C4D371D4(*v0);
}

uint64_t sub_1C4D372C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C4D36F3C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C4D372F0(uint64_t a1)
{
  unint64_t v2 = sub_1C4D39764();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C4D3732C(uint64_t a1)
{
  unint64_t v2 = sub_1C4D39764();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PartialTrafficLog.RequestMetadata.encode(to:)(void *a1)
{
  sub_1C4D10728(&qword_1EBBCD810);
  sub_1C4D18454();
  MEMORY[0x1F4188790](v3);
  sub_1C4D25A9C(a1, a1[3]);
  sub_1C4D39764();
  sub_1C4D40548();
  sub_1C4D40280();
  if (!v1)
  {
    type metadata accessor for PartialTrafficLog.RequestMetadata(0);
    sub_1C4D402B4();
    sub_1C4D397B0((unint64_t *)&unk_1EBBCD720, MEMORY[0x1E4F27928]);
    sub_1C4D401DC();
    sub_1C4D404EC();
    type metadata accessor for URL();
    sub_1C4D397B0(&qword_1EBBCD710, MEMORY[0x1E4F276F0]);
    sub_1C4D401DC();
    sub_1C4D40280();
    sub_1C4D10728(&qword_1EBBCD7C0);
    sub_1C4D397F8(&qword_1EBBCDBB0);
    sub_1C4D40254();
    sub_1C4D40280();
    sub_1C4D403D4();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  sub_1C4D40450();
  return v4();
}

void PartialTrafficLog.RequestMetadata.init(from:)()
{
  sub_1C4D40150();
  uint64_t v4 = v3;
  uint64_t v23 = v5;
  type metadata accessor for URL();
  sub_1C4D18454();
  uint64_t v24 = v7;
  uint64_t v25 = v6;
  MEMORY[0x1F4188790](v6);
  sub_1C4D40180();
  type metadata accessor for Date();
  sub_1C4D18454();
  uint64_t v26 = v9;
  uint64_t v27 = v8;
  MEMORY[0x1F4188790](v8);
  sub_1C4D40218();
  sub_1C4D10728(&qword_1EA3CC018);
  sub_1C4D18454();
  MEMORY[0x1F4188790](v10);
  sub_1C4D40200();
  uint64_t v28 = (int *)type metadata accessor for PartialTrafficLog.RequestMetadata(0);
  sub_1C4D1B074();
  MEMORY[0x1F4188790](v11);
  sub_1C4D2E72C();
  int64_t v13 = v12;
  uint64_t v29 = v4;
  sub_1C4D405AC();
  sub_1C4D39764();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_1C4D1691C(v4);
  }
  else
  {
    *int64_t v13 = sub_1C4D403E4();
    v13[1] = v14;
    sub_1C4D4050C();
    sub_1C4D397B0(&qword_1EA3CC020, MEMORY[0x1E4F27928]);
    sub_1C4D4058C();
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))((char *)v13 + v28[5], v1, v27);
    sub_1C4D404EC();
    sub_1C4D397B0(&qword_1EA3CC028, MEMORY[0x1E4F276F0]);
    sub_1C4D4058C();
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))((char *)v13 + v28[6], v2, v25);
    uint64_t v15 = sub_1C4D403E4();
    uint64_t v16 = (uint64_t *)((char *)v13 + v28[7]);
    *uint64_t v16 = v15;
    v16[1] = v17;
    sub_1C4D10728(&qword_1EBBCD7C0);
    sub_1C4D397F8(&qword_1EA3CC030);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(uint64_t *)((char *)v13 + v28[8]) = v30;
    uint64_t v18 = sub_1C4D403E4();
    uint64_t v19 = (uint64_t *)((char *)v13 + v28[9]);
    uint64_t *v19 = v18;
    v19[1] = v20;
    char v21 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_1C4D40120();
    v22();
    *((unsigned char *)v13 + v28[10]) = v21 & 1;
    sub_1C4D3985C((uint64_t)v13, v23, (void (*)(void))type metadata accessor for PartialTrafficLog.RequestMetadata);
    sub_1C4D1691C(v29);
    sub_1C4D396B0((uint64_t)v13, (void (*)(void))type metadata accessor for PartialTrafficLog.RequestMetadata);
  }
  sub_1C4D40168();
}

void sub_1C4D37B60()
{
}

uint64_t sub_1C4D37B78(void *a1)
{
  return PartialTrafficLog.RequestMetadata.encode(to:)(a1);
}

uint64_t PartialTrafficLog.RequestObject.requestUUID.getter()
{
  return sub_1C4D1B014();
}

uint64_t PartialTrafficLog.RequestObject.objectData.getter()
{
  uint64_t v0 = sub_1C4D1B014();
  sub_1C4D159E8(v0, v1);
  return sub_1C4D1B014();
}

BOOL sub_1C4D37BE8(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_1C4D37BF8(uint64_t a1, char a2)
{
}

uint64_t sub_1C4D37C20()
{
  return 2;
}

uint64_t sub_1C4D37C28(char a1)
{
  if (a1) {
    return 0x61447463656A626FLL;
  }
  else {
    return 0x5574736575716572;
  }
}

BOOL sub_1C4D37C6C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1C4D37BE8(*a1, *a2);
}

Swift::Int sub_1C4D37C78()
{
  return sub_1C4D39100(*v0);
}

void sub_1C4D37C94(uint64_t a1)
{
  sub_1C4D37BF8(a1, *v1);
}

uint64_t sub_1C4D37C9C()
{
  return sub_1C4D37C28(*v0);
}

uint64_t sub_1C4D37CA4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1C4D39050();
  *a1 = result;
  return result;
}

uint64_t sub_1C4D37CCC()
{
  return sub_1C4D39BE8();
}

uint64_t sub_1C4D37CEC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1C4D37C20();
  *a1 = result;
  return result;
}

uint64_t sub_1C4D37D14(uint64_t a1)
{
  unint64_t v2 = sub_1C4D398BC();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C4D37D50(uint64_t a1)
{
  unint64_t v2 = sub_1C4D398BC();
  return MEMORY[0x1F41862B0](a1, v2);
}

void PartialTrafficLog.RequestObject.encode(to:)()
{
}

void PartialTrafficLog.RequestObject.init(from:)()
{
}

void sub_1C4D37E04()
{
}

void sub_1C4D37E1C()
{
}

Swift::Int sub_1C4D37E40()
{
  return sub_1C4D3A4EC();
}

uint64_t sub_1C4D37E64(uint64_t a1)
{
  unint64_t v2 = sub_1C4D399A0();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C4D37EA0(uint64_t a1)
{
  unint64_t v2 = sub_1C4D399A0();
  return MEMORY[0x1F41862B0](a1, v2);
}

void PartialTrafficLog.RequestBodyStreamReset.encode(to:)()
{
}

void PartialTrafficLog.RequestBodyStreamReset.init(from:)()
{
}

void sub_1C4D37F54()
{
}

void sub_1C4D37F6C()
{
}

uint64_t PartialTrafficLog.ResponseMetadata.date.getter()
{
  return sub_1C4D37FA0((void (*)(void))type metadata accessor for PartialTrafficLog.ResponseMetadata);
}

uint64_t sub_1C4D37FA0(void (*a1)(void))
{
  a1(0);
  type metadata accessor for Date();
  sub_1C4D1B074();
  uint64_t v1 = sub_1C4D1B014();
  return v2(v1);
}

uint64_t PartialTrafficLog.ResponseMetadata.status.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for PartialTrafficLog.ResponseMetadata(0) + 24));
}

uint64_t PartialTrafficLog.ResponseMetadata.headers.getter()
{
  type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
  return swift_bridgeObjectRetain();
}

uint64_t static PartialTrafficLog.ResponseMetadata.== infix(_:_:)(uint64_t a1)
{
  sub_1C4D402E4(a1);
  BOOL v6 = v6 && v4 == v5;
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
  if ((sub_1C4D405EC() & 1) == 0 || *(void *)(v2 + *(int *)(v3 + 24)) != *(void *)(v1 + *(int *)(v3 + 24))) {
    return 0;
  }
  uint64_t v7 = *(int *)(v3 + 28);
  uint64_t v8 = *(void *)(v2 + v7);
  uint64_t v9 = *(void *)(v1 + v7);
  return sub_1C4D36D38(v8, v9);
}

uint64_t sub_1C4D380FC(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x5574736575716572 && a2 == 0xEB00000000444955;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1702125924 && a2 == 0xE400000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x737574617473 && a2 == 0xE600000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x73726564616568 && a2 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_1C4D3828C()
{
  return 4;
}

uint64_t sub_1C4D38294(char a1)
{
  return *(void *)&aRequestudate[8 * a1];
}

uint64_t sub_1C4D382B4()
{
  return sub_1C4D38294(*v0);
}

uint64_t sub_1C4D382BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C4D380FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C4D382E4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1C4D3828C();
  *a1 = result;
  return result;
}

uint64_t sub_1C4D3830C(uint64_t a1)
{
  unint64_t v2 = sub_1C4D399EC();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C4D38348(uint64_t a1)
{
  unint64_t v2 = sub_1C4D399EC();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PartialTrafficLog.ResponseMetadata.encode(to:)(void *a1)
{
  sub_1C4D10728(&qword_1EBBCD818);
  sub_1C4D18454();
  MEMORY[0x1F4188790](v3);
  sub_1C4D25A9C(a1, a1[3]);
  sub_1C4D399EC();
  sub_1C4D40548();
  sub_1C4D40280();
  if (!v1)
  {
    type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
    sub_1C4D402B4();
    sub_1C4D397B0((unint64_t *)&unk_1EBBCD720, MEMORY[0x1E4F27928]);
    sub_1C4D401DC();
    sub_1C4D404EC();
    sub_1C4D403D4();
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_1C4D10728(&qword_1EBBCD7C0);
    sub_1C4D397F8(&qword_1EBBCDBB0);
    sub_1C4D40254();
  }
  sub_1C4D40450();
  return v4();
}

void PartialTrafficLog.ResponseMetadata.init(from:)()
{
  sub_1C4D40150();
  uint64_t v4 = v3;
  uint64_t v16 = v5;
  uint64_t v6 = type metadata accessor for Date();
  sub_1C4D18454();
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v8);
  sub_1C4D4048C();
  sub_1C4D10728(&qword_1EA3CC050);
  sub_1C4D18454();
  MEMORY[0x1F4188790](v9);
  uint64_t v10 = sub_1C4D40180();
  uint64_t v11 = (int *)type metadata accessor for PartialTrafficLog.ResponseMetadata(v10);
  sub_1C4D1B074();
  MEMORY[0x1F4188790](v12);
  sub_1C4D40474();
  sub_1C4D405AC();
  sub_1C4D399EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_1C4D1691C(v4);
  }
  else
  {
    uint64_t *v2 = KeyedDecodingContainer.decode(_:forKey:)();
    v2[1] = v13;
    sub_1C4D4050C();
    sub_1C4D397B0(&qword_1EA3CC020, MEMORY[0x1E4F27928]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))((char *)v2 + v11[5], v0, v6);
    *(uint64_t *)((char *)v2 + v11[6]) = KeyedDecodingContainer.decode(_:forKey:)();
    sub_1C4D10728(&qword_1EBBCD7C0);
    sub_1C4D397F8(&qword_1EA3CC030);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v14 = sub_1C4D4019C();
    v15(v14);
    *(uint64_t *)((char *)v2 + v11[7]) = v18;
    sub_1C4D3985C((uint64_t)v2, v16, (void (*)(void))type metadata accessor for PartialTrafficLog.ResponseMetadata);
    sub_1C4D1691C(v4);
    sub_1C4D396B0((uint64_t)v2, (void (*)(void))type metadata accessor for PartialTrafficLog.ResponseMetadata);
  }
  sub_1C4D40168();
}

void sub_1C4D388A8()
{
}

uint64_t sub_1C4D388C0(void *a1)
{
  return PartialTrafficLog.ResponseMetadata.encode(to:)(a1);
}

uint64_t PartialTrafficLog.ResponseConfiguration.requestUUID.getter()
{
  return sub_1C4D1B014();
}

uint64_t PartialTrafficLog.ResponseConfiguration.format.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PartialTrafficLog.ResponseConfiguration.messageClass.getter()
{
  return sub_1C4D1B014();
}

uint64_t static PartialTrafficLog.ResponseConfiguration.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v7 = a2[4];
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    if (v2 != v6) {
      return 0;
    }
    goto LABEL_9;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if ((v9 & 1) != 0 && v2 == v6)
  {
LABEL_9:
    if (v4)
    {
      if (v7)
      {
        if (v3 == v5 && v4 == v7) {
          return 1;
        }
        sub_1C4D1B014();
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          return 1;
        }
      }
    }
    else if (!v7)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C4D389F0(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x5574736575716572 && a2 == 0xEB00000000444955;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x74616D726F66 && a2 == 0xE600000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x436567617373656DLL && a2 == 0xEC0000007373616CLL)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_1C4D38B48()
{
  return 3;
}

uint64_t sub_1C4D38B50(char a1)
{
  return *(void *)&aRequestuformat[8 * a1];
}

uint64_t sub_1C4D38B70()
{
  return sub_1C4D38B50(*v0);
}

uint64_t sub_1C4D38B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C4D389F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C4D38BA0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1C4D38B48();
  *a1 = result;
  return result;
}

uint64_t sub_1C4D38BC8(uint64_t a1)
{
  unint64_t v2 = sub_1C4D39A38();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C4D38C04(uint64_t a1)
{
  unint64_t v2 = sub_1C4D39A38();
  return MEMORY[0x1F41862B0](a1, v2);
}

void PartialTrafficLog.ResponseConfiguration.encode(to:)()
{
  sub_1C4D40150();
  BOOL v3 = v2;
  uint64_t v4 = sub_1C4D10728(&qword_1EBBCDBE0);
  sub_1C4D18454();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  sub_1C4D40230();
  sub_1C4D25A9C(v3, v3[3]);
  sub_1C4D39A38();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    sub_1C4D4050C();
    sub_1C4D39A84();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_1C4D404EC();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  sub_1C4D40168();
}

void PartialTrafficLog.ResponseConfiguration.init(from:)()
{
  sub_1C4D40150();
  BOOL v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_1C4D10728(&qword_1EA3CC058);
  sub_1C4D18454();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  sub_1C4D40200();
  sub_1C4D25A9C(v3, v3[3]);
  sub_1C4D39A38();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_1C4D1691C((uint64_t)v3);
  }
  else
  {
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v12 = v11;
    sub_1C4D4050C();
    unint64_t v13 = sub_1C4D39AD0();
    swift_bridgeObjectRetain();
    sub_1C4D404CC();
    if (v13)
    {
      uint64_t v15 = sub_1C4D404F8();
      v16(v15);
      swift_bridgeObjectRelease();
      sub_1C4D1691C((uint64_t)v3);
    }
    else
    {
      uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v18 = v17;
      uint64_t v19 = v14;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v6);
      *uint64_t v5 = v10;
      v5[1] = v12;
      v5[2] = v20;
      v5[3] = v19;
      void v5[4] = v18;
      swift_bridgeObjectRetain();
      sub_1C4D1691C((uint64_t)v3);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  sub_1C4D40168();
}

void sub_1C4D38F90()
{
}

void sub_1C4D38FA8()
{
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO13RequestObjectV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    sub_1C4D1B014();
    JUMPOUT(0x1C8787730);
  }
  return 0;
}

uint64_t sub_1C4D39050()
{
  sub_1C4D401B4();
  BOOL v4 = v4 && v2 == v3;
  if (v4 || (uint64_t v5 = v1, sub_1C4D39BF4(), (sub_1C4D40530() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (v5 == 0x61447463656A626FLL && v0 == 0xEA00000000006174)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    sub_1C4D40530();
    sub_1C4D40518();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

Swift::Int sub_1C4D39100(char a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1C4D39148()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1C4D3918C(uint64_t a1)
{
  unint64_t v2 = sub_1C4D39B1C();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C4D391C8(uint64_t a1)
{
  unint64_t v2 = sub_1C4D39B1C();
  return MEMORY[0x1F41862B0](a1, v2);
}

void PartialTrafficLog.ResponseObject.encode(to:)()
{
}

void sub_1C4D39240()
{
  sub_1C4D40150();
  uint64_t v7 = v1;
  uint64_t v3 = v2;
  sub_1C4D10728(v4);
  sub_1C4D18454();
  MEMORY[0x1F4188790](v5);
  sub_1C4D40230();
  sub_1C4D25A9C(v3, v3[3]);
  v7();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    sub_1C4D39908();
    sub_1C4D403D4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  sub_1C4D35EA0();
  v6();
  sub_1C4D40168();
}

void PartialTrafficLog.ResponseObject.init(from:)()
{
}

void sub_1C4D393B8()
{
  sub_1C4D40150();
  unint64_t v2 = v1;
  BOOL v4 = v3;
  unint64_t v13 = v5;
  sub_1C4D10728(v6);
  sub_1C4D18454();
  MEMORY[0x1F4188790](v7);
  sub_1C4D40200();
  sub_1C4D25A9C(v4, v4[3]);
  v2();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_1C4D1691C((uint64_t)v4);
  }
  else
  {
    LOBYTE(v14) = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v10 = v9;
    unint64_t v11 = sub_1C4D39954();
    swift_bridgeObjectRetain();
    sub_1C4D404CC();
    sub_1C4D40400();
    v12();
    if (v11)
    {
      swift_bridgeObjectRelease();
      sub_1C4D1691C((uint64_t)v4);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1C4D159E8(v14, v15);
      swift_bridgeObjectRelease();
      *unint64_t v13 = v8;
      v13[1] = v10;
      v13[2] = v14;
      v13[3] = v15;
      sub_1C4D1691C((uint64_t)v4);
      swift_bridgeObjectRelease();
      sub_1C4D16298(v14, v15);
    }
  }
  sub_1C4D40168();
}

void sub_1C4D39594()
{
}

void sub_1C4D395AC()
{
}

uint64_t PartialTrafficLog.RequestComplete.requestUUID.getter()
{
  return sub_1C4D1B014();
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO22RequestBodyStreamResetV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_1C4D3961C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C4D39650(uint64_t a1)
{
  uint64_t v2 = sub_1C4D10728(&qword_1EA3CC010);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C4D396B0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1C4D1B074();
  sub_1C4D35EA0();
  v3();
  return a1;
}

uint64_t sub_1C4D39704(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1C4D1B074();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

unint64_t sub_1C4D39764()
{
  unint64_t result = qword_1EBBCD8D8;
  if (!qword_1EBBCD8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD8D8);
  }
  return result;
}

uint64_t sub_1C4D397B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C4D397F8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C4D17780(&qword_1EBBCD7C0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C4D3985C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1C4D1B074();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

unint64_t sub_1C4D398BC()
{
  unint64_t result = qword_1EBBCD898;
  if (!qword_1EBBCD898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD898);
  }
  return result;
}

unint64_t sub_1C4D39908()
{
  unint64_t result = qword_1EBBCD718;
  if (!qword_1EBBCD718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD718);
  }
  return result;
}

unint64_t sub_1C4D39954()
{
  unint64_t result = qword_1EA3CC040;
  if (!qword_1EA3CC040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC040);
  }
  return result;
}

unint64_t sub_1C4D399A0()
{
  unint64_t result = qword_1EBBCDA78;
  if (!qword_1EBBCDA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDA78);
  }
  return result;
}

unint64_t sub_1C4D399EC()
{
  unint64_t result = qword_1EBBCD780;
  if (!qword_1EBBCD780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD780);
  }
  return result;
}

unint64_t sub_1C4D39A38()
{
  unint64_t result = qword_1EBBCDA58;
  if (!qword_1EBBCDA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDA58);
  }
  return result;
}

unint64_t sub_1C4D39A84()
{
  unint64_t result = qword_1EBBCD748;
  if (!qword_1EBBCD748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD748);
  }
  return result;
}

unint64_t sub_1C4D39AD0()
{
  unint64_t result = qword_1EA3CC060;
  if (!qword_1EA3CC060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC060);
  }
  return result;
}

unint64_t sub_1C4D39B1C()
{
  unint64_t result = qword_1EBBCD8A8;
  if (!qword_1EBBCD8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD8A8);
  }
  return result;
}

uint64_t sub_1C4D39B68()
{
  return 1;
}

void sub_1C4D39B70()
{
}

uint64_t sub_1C4D39B98()
{
  sub_1C4D401B4();
  BOOL v3 = v3 && v1 == v2;
  if (v3)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    sub_1C4D39BF4();
    sub_1C4D40530();
    sub_1C4D40518();
    char v4 = v0 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1C4D39BE8()
{
  return 0;
}

uint64_t sub_1C4D39BF4()
{
  return 0x5574736575716572;
}

uint64_t sub_1C4D39C14@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1C4D39B98();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C4D39C40()
{
  return sub_1C4D39BE8();
}

uint64_t sub_1C4D39C5C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1C4D39B68();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C4D39C88(uint64_t a1)
{
  unint64_t v2 = sub_1C4D39E38();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C4D39CC4(uint64_t a1)
{
  unint64_t v2 = sub_1C4D39E38();
  return MEMORY[0x1F41862B0](a1, v2);
}

void PartialTrafficLog.RequestComplete.encode(to:)()
{
}

void sub_1C4D39D3C()
{
  sub_1C4D40150();
  uint64_t v6 = v0;
  unint64_t v2 = v1;
  sub_1C4D10728(v3);
  sub_1C4D18454();
  MEMORY[0x1F4188790](v4);
  sub_1C4D40218();
  sub_1C4D25A9C(v2, v2[3]);
  v6();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  sub_1C4D40450();
  v5();
  sub_1C4D40168();
}

unint64_t sub_1C4D39E38()
{
  unint64_t result = qword_1EBBCD8C0;
  if (!qword_1EBBCD8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD8C0);
  }
  return result;
}

void PartialTrafficLog.RequestComplete.init(from:)()
{
}

void sub_1C4D39EC0()
{
  sub_1C4D40150();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v12 = v5;
  sub_1C4D10728(v6);
  sub_1C4D18454();
  MEMORY[0x1F4188790](v7);
  sub_1C4D4045C();
  sub_1C4D25A9C(v4, v4[3]);
  v2();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v0)
  {
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v10 = v9;
    sub_1C4D40450();
    v11();
    *uint64_t v12 = v8;
    v12[1] = v10;
  }
  sub_1C4D1691C((uint64_t)v4);
  sub_1C4D40168();
}

BOOL sub_1C4D39FF0(char a1, char a2)
{
  return a1 == a2;
}

void sub_1C4D3A000(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_1C4D3A028(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x4D74736575716572 && a2 == 0xEF61746164617465;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4F74736575716572 && a2 == 0xED00007463656A62;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000016 && a2 == 0x80000001C5082A40 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x80000001C5082A60 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else if (a1 == 0xD000000000000015 && a2 == 0x80000001C5082A80 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 4;
    }
    else
    {
      BOOL v7 = a1 == 0x65736E6F70736572 && a2 == 0xEE007463656A624FLL;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 5;
      }
      else if (a1 == 0x6574656C706D6F63 && a2 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        return 6;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 6;
        }
        else {
          return 7;
        }
      }
    }
  }
}

uint64_t sub_1C4D3A318()
{
  return 7;
}

Swift::Int sub_1C4D3A320(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

unint64_t sub_1C4D3A368(char a1)
{
  unint64_t result = 0xD000000000000016;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4F74736575716572;
      break;
    case 2:
      return result;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0xD000000000000015;
      break;
    case 5:
      unint64_t result = 0x65736E6F70736572;
      break;
    case 6:
      unint64_t result = 0x6574656C706D6F63;
      break;
    default:
      unint64_t result = 0x4D74736575716572;
      break;
  }
  return result;
}

uint64_t sub_1C4D3A480()
{
  return 12383;
}

uint64_t sub_1C4D3A48C(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    sub_1C4D40530();
    sub_1C4D40518();
    char v4 = v2 ^ 1;
  }
  return v4 & 1;
}

Swift::Int sub_1C4D3A4EC()
{
  return Hasher._finalize()();
}

void sub_1C4D3A530()
{
}

void sub_1C4D3A548()
{
}

BOOL sub_1C4D3A560(char *a1, char *a2)
{
  return sub_1C4D39FF0(*a1, *a2);
}

Swift::Int sub_1C4D3A56C()
{
  return sub_1C4D3A320(*v0);
}

void sub_1C4D3A588(uint64_t a1)
{
  sub_1C4D3A000(a1, *v1);
}

unint64_t sub_1C4D3A590()
{
  return sub_1C4D3A368(*v0);
}

uint64_t sub_1C4D3A598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C4D3A028(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C4D3A5C0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1C4D3A318();
  *a1 = result;
  return result;
}

uint64_t sub_1C4D3A5E8(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B2F4();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C4D3A624(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B2F4();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1C4D3A664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C4D3A48C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1C4D3A690(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B340();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C4D3A6CC(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B340();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1C4D3A708(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B554();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C4D3A744(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B554();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1C4D3A780(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B684();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C4D3A7BC(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B684();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1C4D3A7F8(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B5EC();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C4D3A834(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B5EC();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1C4D3A870(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B470();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C4D3A8AC(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B470();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1C4D3A8E8(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B508();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C4D3A924(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B508();
  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int sub_1C4D3A960()
{
  return Hasher._finalize()();
}

uint64_t sub_1C4D3A9A0(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B3D8();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C4D3A9DC(uint64_t a1)
{
  unint64_t v2 = sub_1C4D3B3D8();
  return MEMORY[0x1F41862B0](a1, v2);
}

void PartialTrafficLog.encode(to:)()
{
  sub_1C4D40150();
  uint64_t v87 = v1;
  uint64_t v93 = v0;
  uint64_t v5 = v4;
  sub_1C4D10728(&qword_1EBBCD820);
  sub_1C4D18454();
  uint64_t v82 = v7;
  uint64_t v83 = v6;
  MEMORY[0x1F4188790](v6);
  sub_1C4D40338(v8, v73[0]);
  sub_1C4D10728(&qword_1EBBCD830);
  sub_1C4D18454();
  uint64_t v80 = v10;
  uint64_t v81 = v9;
  MEMORY[0x1F4188790](v9);
  sub_1C4D40354(v11, v73[0]);
  sub_1C4D10728(&qword_1EBBCDBF8);
  sub_1C4D18454();
  uint64_t v78 = v13;
  uint64_t v79 = v12;
  MEMORY[0x1F4188790](v12);
  sub_1C4D4031C(v14, v73[0]);
  sub_1C4D10728(&qword_1EBBCDBF0);
  sub_1C4D18454();
  uint64_t v76 = v16;
  uint64_t v77 = v15;
  MEMORY[0x1F4188790](v15);
  sub_1C4D2E72C();
  uint64_t v75 = v17;
  v73[8] = type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
  sub_1C4D1B074();
  MEMORY[0x1F4188790](v18);
  sub_1C4D2E72C();
  uint64_t v74 = v19;
  v73[7] = sub_1C4D10728(&qword_1EBBCD840);
  sub_1C4D18454();
  v73[6] = v20;
  MEMORY[0x1F4188790](v21);
  sub_1C4D2E72C();
  v73[5] = v22;
  v73[4] = sub_1C4D10728(&qword_1EBBCD828);
  sub_1C4D18454();
  v73[3] = v23;
  MEMORY[0x1F4188790](v24);
  sub_1C4D2E72C();
  v73[2] = v25;
  v73[1] = sub_1C4D10728(&qword_1EBBCD838);
  sub_1C4D18454();
  v73[0] = v26;
  MEMORY[0x1F4188790](v27);
  uint64_t v28 = sub_1C4D40180();
  type metadata accessor for PartialTrafficLog.RequestMetadata(v28);
  sub_1C4D1B074();
  MEMORY[0x1F4188790](v29);
  sub_1C4D40474();
  type metadata accessor for PartialTrafficLog(0);
  sub_1C4D1B074();
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (uint64_t *)((char *)v73 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1C4D10728(&qword_1EBBCDBC8);
  sub_1C4D18454();
  uint64_t v85 = v33;
  uint64_t v86 = v34;
  MEMORY[0x1F4188790](v33);
  sub_1C4D4045C();
  sub_1C4D25A9C(v5, v5[3]);
  sub_1C4D3B2F4();
  uint64_t v84 = v3;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1C4D3985C(v93, (uint64_t)v32, (void (*)(void))type metadata accessor for PartialTrafficLog);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v37 = *v32;
      uint64_t v38 = v32[1];
      uint64_t v40 = v32[2];
      unint64_t v39 = v32[3];
      LOBYTE(v88) = 1;
      sub_1C4D3B5EC();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v88 = v37;
      uint64_t v89 = v38;
      uint64_t v90 = v40;
      unint64_t v91 = v39;
      sub_1C4D3B638();
      sub_1C4D40574();
      sub_1C4D35EA0();
      v42(v41);
      sub_1C4D40428();
      sub_1C4D35EA0();
      v44(v43);
      goto LABEL_9;
    case 2u:
      uint64_t v45 = *v32;
      uint64_t v46 = v32[1];
      LOBYTE(v88) = 2;
      sub_1C4D3B554();
      sub_1C4D4037C();
      uint64_t v88 = v45;
      uint64_t v89 = v46;
      sub_1C4D3B5A0();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      goto LABEL_11;
    case 3u:
      uint64_t v47 = v74;
      sub_1C4D39704((uint64_t)v32, v74, (void (*)(void))type metadata accessor for PartialTrafficLog.ResponseMetadata);
      LOBYTE(v88) = 3;
      sub_1C4D3B508();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1C4D397B0(&qword_1EBBCD9A8, (void (*)(uint64_t))type metadata accessor for PartialTrafficLog.ResponseMetadata);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      sub_1C4D35EA0();
      v49(v48);
      sub_1C4D396B0(v47, (void (*)(void))type metadata accessor for PartialTrafficLog.ResponseMetadata);
      goto LABEL_6;
    case 4u:
      uint64_t v52 = *v32;
      uint64_t v53 = v32[1];
      uint64_t v54 = v32[2];
      unint64_t v55 = v32[3];
      uint64_t v56 = v32[4];
      LOBYTE(v88) = 4;
      sub_1C4D3B470();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v88 = v52;
      uint64_t v89 = v53;
      uint64_t v90 = v54;
      unint64_t v91 = v55;
      uint64_t v92 = v56;
      sub_1C4D3B4BC();
      sub_1C4D40574();
      sub_1C4D35EA0();
      v58(v57);
      sub_1C4D35EA0();
      v60(v59);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    case 5u:
      uint64_t v61 = *v32;
      uint64_t v62 = v32[1];
      uint64_t v40 = v32[2];
      unint64_t v39 = v32[3];
      LOBYTE(v88) = 5;
      sub_1C4D3B3D8();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v88 = v61;
      uint64_t v89 = v62;
      uint64_t v90 = v40;
      unint64_t v91 = v39;
      sub_1C4D3B424();
      sub_1C4D40574();
      sub_1C4D35EA0();
      v64(v63);
      sub_1C4D35EA0();
      v66(v65);
LABEL_9:
      swift_bridgeObjectRelease();
      sub_1C4D16298(v40, v39);
      break;
    case 6u:
      uint64_t v67 = *v32;
      uint64_t v68 = v32[1];
      LOBYTE(v88) = 6;
      sub_1C4D3B340();
      sub_1C4D4037C();
      uint64_t v88 = v67;
      uint64_t v89 = v68;
      sub_1C4D3B38C();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
LABEL_11:
      sub_1C4D35EA0();
      v70(v69);
      uint64_t v71 = sub_1C4D40428();
      v72(v71, v2);
LABEL_12:
      swift_bridgeObjectRelease();
      break;
    default:
      sub_1C4D39704((uint64_t)v32, v2, (void (*)(void))type metadata accessor for PartialTrafficLog.RequestMetadata);
      LOBYTE(v88) = 0;
      sub_1C4D3B684();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1C4D397B0(&qword_1EBBCD778, (void (*)(uint64_t))type metadata accessor for PartialTrafficLog.RequestMetadata);
      sub_1C4D40574();
      sub_1C4D35EA0();
      v36(v35);
      sub_1C4D396B0(v2, (void (*)(void))type metadata accessor for PartialTrafficLog.RequestMetadata);
      sub_1C4D40428();
LABEL_6:
      sub_1C4D35EA0();
      v51(v50);
      break;
  }
  sub_1C4D40168();
}

unint64_t sub_1C4D3B2F4()
{
  unint64_t result = qword_1EBBCD888;
  if (!qword_1EBBCD888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD888);
  }
  return result;
}

unint64_t sub_1C4D3B340()
{
  unint64_t result = qword_1EBBCD788;
  if (!qword_1EBBCD788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD788);
  }
  return result;
}

unint64_t sub_1C4D3B38C()
{
  unint64_t result = qword_1EBBCD770;
  if (!qword_1EBBCD770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD770);
  }
  return result;
}

unint64_t sub_1C4D3B3D8()
{
  unint64_t result = qword_1EBBCDAA8;
  if (!qword_1EBBCDAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDAA8);
  }
  return result;
}

unint64_t sub_1C4D3B424()
{
  unint64_t result = qword_1EBBCD8B8;
  if (!qword_1EBBCD8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD8B8);
  }
  return result;
}

unint64_t sub_1C4D3B470()
{
  unint64_t result = qword_1EBBCD7A8;
  if (!qword_1EBBCD7A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD7A8);
  }
  return result;
}

unint64_t sub_1C4D3B4BC()
{
  unint64_t result = qword_1EBBCDA70;
  if (!qword_1EBBCDA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDA70);
  }
  return result;
}

unint64_t sub_1C4D3B508()
{
  unint64_t result = qword_1EBBCD7A0;
  if (!qword_1EBBCD7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD7A0);
  }
  return result;
}

unint64_t sub_1C4D3B554()
{
  unint64_t result = qword_1EBBCD7B0;
  if (!qword_1EBBCD7B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD7B0);
  }
  return result;
}

unint64_t sub_1C4D3B5A0()
{
  unint64_t result = qword_1EBBCDA90;
  if (!qword_1EBBCDA90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDA90);
  }
  return result;
}

unint64_t sub_1C4D3B5EC()
{
  unint64_t result = qword_1EBBCD790;
  if (!qword_1EBBCD790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD790);
  }
  return result;
}

unint64_t sub_1C4D3B638()
{
  unint64_t result = qword_1EBBCD760;
  if (!qword_1EBBCD760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD760);
  }
  return result;
}

unint64_t sub_1C4D3B684()
{
  unint64_t result = qword_1EBBCD798;
  if (!qword_1EBBCD798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD798);
  }
  return result;
}

void PartialTrafficLog.init(from:)()
{
  sub_1C4D40150();
  uint64_t v3 = v2;
  uint64_t v122 = v4;
  uint64_t v123 = sub_1C4D10728(&qword_1EA3CC078);
  sub_1C4D18454();
  uint64_t v119 = v5;
  MEMORY[0x1F4188790](v6);
  sub_1C4D40300(v7, v98);
  sub_1C4D10728(&qword_1EA3CC080);
  sub_1C4D18454();
  uint64_t v117 = v9;
  uint64_t v118 = v8;
  MEMORY[0x1F4188790](v8);
  sub_1C4D2E72C();
  uint64_t v121 = v10;
  uint64_t v116 = sub_1C4D10728(&qword_1EA3CC088);
  sub_1C4D18454();
  uint64_t v115 = v11;
  MEMORY[0x1F4188790](v12);
  sub_1C4D40354(v13, v98);
  uint64_t v114 = sub_1C4D10728(&qword_1EA3CC090);
  sub_1C4D18454();
  uint64_t v113 = v14;
  MEMORY[0x1F4188790](v15);
  sub_1C4D2E72C();
  uint64_t v127 = v16;
  uint64_t v112 = sub_1C4D10728(&qword_1EA3CC098);
  sub_1C4D18454();
  uint64_t v111 = v17;
  MEMORY[0x1F4188790](v18);
  sub_1C4D2E72C();
  uint64_t v126 = v19;
  uint64_t v110 = sub_1C4D10728(&qword_1EA3CC0A0);
  sub_1C4D18454();
  uint64_t v109 = v20;
  MEMORY[0x1F4188790](v21);
  sub_1C4D2E72C();
  uint64_t v120 = v22;
  uint64_t v108 = sub_1C4D10728(&qword_1EA3CC0A8);
  sub_1C4D18454();
  uint64_t v107 = v23;
  MEMORY[0x1F4188790](v24);
  sub_1C4D4031C(v25, v98);
  sub_1C4D10728(&qword_1EA3CC0B0);
  sub_1C4D18454();
  uint64_t v124 = v27;
  uint64_t v125 = v26;
  MEMORY[0x1F4188790](v26);
  sub_1C4D40218();
  uint64_t v128 = type metadata accessor for PartialTrafficLog(0);
  sub_1C4D1B074();
  MEMORY[0x1F4188790](v28);
  sub_1C4D35E90();
  MEMORY[0x1F4188790](v29);
  sub_1C4D35E90();
  MEMORY[0x1F4188790](v30);
  sub_1C4D35E90();
  uint64_t v32 = MEMORY[0x1F4188790](v31);
  uint64_t v34 = (char *)&v98 - v33;
  uint64_t v35 = MEMORY[0x1F4188790](v32);
  uint64_t v37 = (char *)&v98 - v36;
  uint64_t v38 = MEMORY[0x1F4188790](v35);
  uint64_t v40 = (char *)&v98 - v39;
  uint64_t v41 = MEMORY[0x1F4188790](v38);
  uint64_t v43 = (char *)&v98 - v42;
  MEMORY[0x1F4188790](v41);
  uint64_t v45 = (char *)&v98 - v44;
  uint64_t v129 = v3;
  sub_1C4D405AC();
  sub_1C4D3B2F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0) {
    goto LABEL_8;
  }
  os_log_type_t v103 = v43;
  id v101 = v40;
  Swift::Int v102 = v37;
  char v104 = v34;
  uint64_t v46 = v128;
  uint64_t v47 = v125;
  uint64_t v48 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v49 = *(void *)(v48 + 16);
  if (!v49
    || (uint64_t v100 = 0,
        uint64_t v99 = *(unsigned __int8 *)(v48 + 32),
        sub_1C4D3C3C4(1, v49, v48, v48 + 32, 0, (2 * v49) | 1),
        uint64_t v51 = v50,
        unint64_t v53 = v52,
        swift_bridgeObjectRelease(),
        v51 != v53 >> 1))
  {
    uint64_t v59 = v1;
    uint64_t v60 = v124;
    uint64_t v61 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v63 = v62;
    sub_1C4D10728(&qword_1EA3CC0B8);
    *uint64_t v63 = v46;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v61 - 8) + 104))(v63, *MEMORY[0x1E4FBBA70], v61);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v47);
LABEL_8:
    uint64_t v54 = v129;
    goto LABEL_9;
  }
  uint64_t v54 = v100;
  switch(v99)
  {
    case 1:
      LOBYTE(v130) = 1;
      sub_1C4D3B5EC();
      sub_1C4D40130((uint64_t)&type metadata for PartialTrafficLog.RequestObjectCodingKeys, (uint64_t)&v130);
      sub_1C4D3C570();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v66 = v124;
      sub_1C4D35EA0();
      v85();
      swift_unknownObjectRelease();
      uint64_t v86 = sub_1C4D40108();
      v87(v86);
      sub_1C4D403BC(v130);
      swift_storeEnumTagMultiPayload();
      uint64_t v88 = v66;
      uint64_t v89 = (uint64_t)v45;
      sub_1C4D39704(v88, (uint64_t)v45, (void (*)(void))type metadata accessor for PartialTrafficLog);
      uint64_t v54 = v129;
      goto LABEL_24;
    case 2:
      LOBYTE(v130) = 2;
      sub_1C4D3B554();
      sub_1C4D40130((uint64_t)&type metadata for PartialTrafficLog.RequestBodyStreamResetCodingKeys, (uint64_t)&v130);
      sub_1C4D40370();
      sub_1C4D3C524();
      sub_1C4D403A0();
      sub_1C4D404BC();
      sub_1C4D35EA0();
      v74();
      swift_unknownObjectRelease();
      uint64_t v75 = sub_1C4D40108();
      v76(v75);
      uint64_t v77 = v131;
      unint64_t v55 = v102;
      *Swift::Int v102 = v130;
      v55[1] = v77;
      goto LABEL_22;
    case 3:
      LOBYTE(v130) = 3;
      sub_1C4D3B508();
      sub_1C4D40130((uint64_t)&type metadata for PartialTrafficLog.ResponseMetadataCodingKeys, (uint64_t)&v130);
      sub_1C4D40370();
      type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
      sub_1C4D397B0(&qword_1EA3CC0D8, (void (*)(uint64_t))type metadata accessor for PartialTrafficLog.ResponseMetadata);
      uint64_t v67 = (uint64_t)v104;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      if (v51)
      {
        sub_1C4D35EA0();
        v68();
        swift_unknownObjectRelease();
        uint64_t v69 = sub_1C4D40108();
        v70(v69);
        break;
      }
      sub_1C4D35EA0();
      v90();
      swift_unknownObjectRelease();
      uint64_t v91 = sub_1C4D40108();
      v92(v91);
      swift_storeEnumTagMultiPayload();
      uint64_t v93 = v67;
      goto LABEL_23;
    case 4:
      LOBYTE(v130) = 4;
      sub_1C4D3B470();
      sub_1C4D40130((uint64_t)&type metadata for PartialTrafficLog.ResponseConfigurationCodingKeys, (uint64_t)&v130);
      sub_1C4D40370();
      sub_1C4D3C4D8();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      if (v51)
      {
        sub_1C4D35EA0();
        v64();
        swift_unknownObjectRelease();
        sub_1C4D35EA0();
        v65();
        break;
      }
      sub_1C4D35EA0();
      v78();
      swift_unknownObjectRelease();
      sub_1C4D35EA0();
      v79();
      uint64_t v80 = v131;
      uint64_t v81 = v133;
      unint64_t v55 = v105;
      void *v105 = v130;
      v55[1] = v80;
      *((_OWORD *)v55 + 1) = v132;
      v55[4] = v81;
      goto LABEL_22;
    case 5:
      LOBYTE(v130) = 5;
      sub_1C4D3B3D8();
      unint64_t v55 = v121;
      sub_1C4D40130((uint64_t)&type metadata for PartialTrafficLog.ResponseObjectCodingKeys, (uint64_t)&v130);
      sub_1C4D40370();
      sub_1C4D3C48C();
      sub_1C4D403A0();
      sub_1C4D404BC();
      sub_1C4D35EA0();
      v82();
      swift_unknownObjectRelease();
      uint64_t v83 = sub_1C4D40108();
      v84(v83);
      sub_1C4D403BC(v130);
      goto LABEL_22;
    case 6:
      LOBYTE(v130) = 6;
      sub_1C4D3B340();
      sub_1C4D40130((uint64_t)&type metadata for PartialTrafficLog.CompleteCodingKeys, (uint64_t)&v130);
      sub_1C4D40370();
      sub_1C4D3C440();
      sub_1C4D403A0();
      sub_1C4D404BC();
      sub_1C4D35EA0();
      v94();
      swift_unknownObjectRelease();
      uint64_t v95 = sub_1C4D40108();
      v96(v95);
      uint64_t v97 = v131;
      unint64_t v55 = v106;
      *id v106 = v130;
      v55[1] = v97;
      goto LABEL_22;
    default:
      LOBYTE(v130) = 0;
      sub_1C4D3B684();
      sub_1C4D40130((uint64_t)&type metadata for PartialTrafficLog.RequestMetadataCodingKeys, (uint64_t)&v130);
      sub_1C4D40370();
      type metadata accessor for PartialTrafficLog.RequestMetadata(0);
      sub_1C4D397B0(&qword_1EA3CC0F0, (void (*)(uint64_t))type metadata accessor for PartialTrafficLog.RequestMetadata);
      unint64_t v55 = v103;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      if (v51)
      {
        sub_1C4D35EA0();
        v56();
        swift_unknownObjectRelease();
        uint64_t v57 = sub_1C4D40410();
        v58(v57);
      }
      else
      {
        sub_1C4D35EA0();
        v71();
        swift_unknownObjectRelease();
        uint64_t v72 = sub_1C4D40410();
        v73(v72);
LABEL_22:
        swift_storeEnumTagMultiPayload();
        uint64_t v93 = (uint64_t)v55;
LABEL_23:
        uint64_t v89 = (uint64_t)v45;
        sub_1C4D39704(v93, (uint64_t)v45, (void (*)(void))type metadata accessor for PartialTrafficLog);
LABEL_24:
        sub_1C4D39704(v89, v122, (void (*)(void))type metadata accessor for PartialTrafficLog);
      }
      break;
  }
LABEL_9:
  sub_1C4D1691C(v54);
  sub_1C4D40168();
}

void sub_1C4D3C394()
{
}

void sub_1C4D3C3AC()
{
}

uint64_t sub_1C4D3C3C4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2) {
    goto LABEL_10;
  }
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1C4D3C440()
{
  unint64_t result = qword_1EA3CC0C0;
  if (!qword_1EA3CC0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC0C0);
  }
  return result;
}

unint64_t sub_1C4D3C48C()
{
  unint64_t result = qword_1EA3CC0C8;
  if (!qword_1EA3CC0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC0C8);
  }
  return result;
}

unint64_t sub_1C4D3C4D8()
{
  unint64_t result = qword_1EA3CC0D0;
  if (!qword_1EA3CC0D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC0D0);
  }
  return result;
}

unint64_t sub_1C4D3C524()
{
  unint64_t result = qword_1EA3CC0E0;
  if (!qword_1EA3CC0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC0E0);
  }
  return result;
}

unint64_t sub_1C4D3C570()
{
  unint64_t result = qword_1EA3CC0E8;
  if (!qword_1EA3CC0E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC0E8);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PartialTrafficLog(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 5u:
        uint64_t v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        uint64_t v28 = a2[2];
        unint64_t v27 = a2[3];
        swift_bridgeObjectRetain();
        sub_1C4D159E8(v28, v27);
        a1[2] = v28;
        a1[3] = v27;
        break;
      case 2u:
      case 6u:
        uint64_t v37 = a2[1];
        *a1 = *a2;
        a1[1] = v37;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v29 = a2[1];
        *a1 = *a2;
        a1[1] = v29;
        uint64_t v30 = (int *)type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
        uint64_t v31 = v30[5];
        uint64_t v32 = (char *)a1 + v31;
        uint64_t v33 = (char *)a2 + v31;
        uint64_t v34 = type metadata accessor for Date();
        uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16);
        swift_bridgeObjectRetain();
        v35(v32, v33, v34);
        *(void *)((char *)a1 + v30[6]) = *(void *)((char *)a2 + v30[6]);
        *(void *)((char *)a1 + v30[7]) = *(void *)((char *)a2 + v30[7]);
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v36 = a2[1];
        *a1 = *a2;
        a1[1] = v36;
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        a1[4] = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = a2[1];
        *a1 = *a2;
        a1[1] = v6;
        uint64_t v7 = (int *)type metadata accessor for PartialTrafficLog.RequestMetadata(0);
        uint64_t v8 = v7[5];
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = type metadata accessor for Date();
        uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
        swift_bridgeObjectRetain();
        v12(v9, v10, v11);
        uint64_t v13 = v7[6];
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
        uint64_t v17 = v7[7];
        uint64_t v18 = (void *)((char *)a1 + v17);
        uint64_t v19 = (void *)((char *)a2 + v17);
        uint64_t v20 = v19[1];
        void *v18 = *v19;
        v18[1] = v20;
        *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
        uint64_t v21 = v7[9];
        uint64_t v22 = (void *)((char *)a1 + v21);
        uint64_t v23 = (void *)((char *)a2 + v21);
        uint64_t v24 = v23[1];
        *uint64_t v22 = *v23;
        v22[1] = v24;
        *((unsigned char *)a1 + v7[10]) = *((unsigned char *)a2 + v7[10]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PartialTrafficLog(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      uint64_t v5 = type metadata accessor for PartialTrafficLog.RequestMetadata(0);
      uint64_t v6 = a1 + *(int *)(v5 + 20);
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
      uint64_t v8 = a1 + *(int *)(v5 + 24);
      uint64_t v9 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 1:
    case 5:
      swift_bridgeObjectRelease();
      uint64_t v3 = *(void *)(a1 + 16);
      unint64_t v4 = *(void *)(a1 + 24);
      return sub_1C4D16298(v3, v4);
    case 2:
    case 6:
      goto LABEL_8;
    case 3:
      swift_bridgeObjectRelease();
      uint64_t v10 = a1 + *(int *)(type metadata accessor for PartialTrafficLog.ResponseMetadata(0) + 20);
      uint64_t v11 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
      goto LABEL_8;
    case 4:
      swift_bridgeObjectRelease();
LABEL_8:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for PartialTrafficLog(void *a1, void *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 5u:
      uint64_t v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      uint64_t v6 = a2[2];
      unint64_t v5 = a2[3];
      swift_bridgeObjectRetain();
      sub_1C4D159E8(v6, v5);
      a1[2] = v6;
      a1[3] = v5;
      goto LABEL_8;
    case 2u:
    case 6u:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      goto LABEL_7;
    case 3u:
      uint64_t v26 = a2[1];
      *a1 = *a2;
      a1[1] = v26;
      unint64_t v27 = (int *)type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
      uint64_t v28 = v27[5];
      uint64_t v35 = (char *)a1 + v28;
      uint64_t v29 = (char *)a2 + v28;
      uint64_t v30 = type metadata accessor for Date();
      uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16);
      swift_bridgeObjectRetain();
      v31(v35, v29, v30);
      *(void *)((char *)a1 + v27[6]) = *(void *)((char *)a2 + v27[6]);
      *(void *)((char *)a1 + v27[7]) = *(void *)((char *)a2 + v27[7]);
      goto LABEL_7;
    case 4u:
      uint64_t v32 = a2[1];
      *a1 = *a2;
      a1[1] = v32;
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      goto LABEL_7;
    default:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = (int *)type metadata accessor for PartialTrafficLog.RequestMetadata(0);
      uint64_t v10 = v9[5];
      uint64_t v34 = (char *)a1 + v10;
      uint64_t v11 = (char *)a2 + v10;
      uint64_t v12 = type metadata accessor for Date();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      v13(v34, v11, v12);
      uint64_t v14 = v9[6];
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      uint64_t v18 = v9[7];
      uint64_t v19 = (void *)((char *)a1 + v18);
      uint64_t v20 = (void *)((char *)a2 + v18);
      uint64_t v21 = v20[1];
      void *v19 = *v20;
      v19[1] = v21;
      *(void *)((char *)a1 + v9[8]) = *(void *)((char *)a2 + v9[8]);
      uint64_t v22 = v9[9];
      uint64_t v23 = (void *)((char *)a1 + v22);
      uint64_t v24 = (void *)((char *)a2 + v22);
      uint64_t v25 = v24[1];
      void *v23 = *v24;
      v23[1] = v25;
      *((unsigned char *)a1 + v9[10]) = *((unsigned char *)a2 + v9[10]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_7:
      swift_bridgeObjectRetain();
LABEL_8:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
}

void *assignWithCopy for PartialTrafficLog(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_1C4D396B0((uint64_t)a1, (void (*)(void))type metadata accessor for PartialTrafficLog);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v5 = a2[2];
        unint64_t v4 = a2[3];
        swift_bridgeObjectRetain();
        sub_1C4D159E8(v5, v4);
        a1[2] = v5;
        a1[3] = v4;
        goto LABEL_9;
      case 2u:
      case 6u:
        *a1 = *a2;
        a1[1] = a2[1];
        goto LABEL_8;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v21 = (int *)type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
        uint64_t v22 = v21[5];
        uint64_t v28 = (char *)a1 + v22;
        uint64_t v23 = (char *)a2 + v22;
        uint64_t v24 = type metadata accessor for Date();
        uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
        swift_bridgeObjectRetain();
        v25(v28, v23, v24);
        *(void *)((char *)a1 + v21[6]) = *(void *)((char *)a2 + v21[6]);
        *(void *)((char *)a1 + v21[7]) = *(void *)((char *)a2 + v21[7]);
        goto LABEL_8;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v6 = (int *)type metadata accessor for PartialTrafficLog.RequestMetadata(0);
        uint64_t v7 = v6[5];
        unint64_t v27 = (char *)a1 + v7;
        uint64_t v8 = (char *)a2 + v7;
        uint64_t v9 = type metadata accessor for Date();
        uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
        swift_bridgeObjectRetain();
        v10(v27, v8, v9);
        uint64_t v11 = v6[6];
        uint64_t v12 = (char *)a1 + v11;
        uint64_t v13 = (char *)a2 + v11;
        uint64_t v14 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
        uint64_t v15 = v6[7];
        uint64_t v16 = (void *)((char *)a1 + v15);
        uint64_t v17 = (void *)((char *)a2 + v15);
        *uint64_t v16 = *v17;
        v16[1] = v17[1];
        *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
        uint64_t v18 = v6[9];
        uint64_t v19 = (void *)((char *)a1 + v18);
        uint64_t v20 = (void *)((char *)a2 + v18);
        void *v19 = *v20;
        v19[1] = v20[1];
        *((unsigned char *)a1 + v6[10]) = *((unsigned char *)a2 + v6[10]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_8:
        swift_bridgeObjectRetain();
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for PartialTrafficLog(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    *a1 = *a2;
    uint64_t v16 = (int *)type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
    uint64_t v17 = v16[5];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
    *(void *)((char *)a1 + v16[6]) = *(void *)((char *)a2 + v16[6]);
    *(void *)((char *)a1 + v16[7]) = *(void *)((char *)a2 + v16[7]);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    *a1 = *a2;
    uint64_t v7 = (int *)type metadata accessor for PartialTrafficLog.RequestMetadata(0);
    uint64_t v8 = v7[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    uint64_t v12 = v7[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
    *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
    *(_OWORD *)((char *)a1 + v7[9]) = *(_OWORD *)((char *)a2 + v7[9]);
    *((unsigned char *)a1 + v7[10]) = *((unsigned char *)a2 + v7[10]);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for PartialTrafficLog(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1C4D396B0((uint64_t)a1, (void (*)(void))type metadata accessor for PartialTrafficLog);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      *a1 = *a2;
      uint64_t v16 = (int *)type metadata accessor for PartialTrafficLog.ResponseMetadata(0);
      uint64_t v17 = v16[5];
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
      *(void *)((char *)a1 + v16[6]) = *(void *)((char *)a2 + v16[6]);
      *(void *)((char *)a1 + v16[7]) = *(void *)((char *)a2 + v16[7]);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      *a1 = *a2;
      uint64_t v7 = (int *)type metadata accessor for PartialTrafficLog.RequestMetadata(0);
      uint64_t v8 = v7[5];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      uint64_t v12 = v7[6];
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
      *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
      *(_OWORD *)((char *)a1 + v7[9]) = *(_OWORD *)((char *)a2 + v7[9]);
      *((unsigned char *)a1 + v7[10]) = *((unsigned char *)a2 + v7[10]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1C4D3D490()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1C4D3D4A0()
{
  uint64_t result = type metadata accessor for PartialTrafficLog.RequestMetadata(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PartialTrafficLog.ResponseMetadata(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PartialTrafficLog.RequestMetadata(void *a1, void *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[7];
    uint64_t v18 = a3[8];
    uint64_t v19 = (void *)((char *)v4 + v17);
    uint64_t v20 = (void *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    *(void *)((char *)v4 + v18) = *(void *)((char *)a2 + v18);
    uint64_t v22 = a3[9];
    uint64_t v23 = a3[10];
    uint64_t v24 = (void *)((char *)v4 + v22);
    uint64_t v25 = (void *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    void *v24 = *v25;
    v24[1] = v26;
    *((unsigned char *)v4 + v23) = *((unsigned char *)a2 + v23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PartialTrafficLog.RequestMetadata(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PartialTrafficLog.RequestMetadata(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)((char *)a1 + v16);
  uint64_t v19 = (void *)((char *)a2 + v16);
  uint64_t v20 = v19[1];
  void *v18 = *v19;
  v18[1] = v20;
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  uint64_t v21 = a3[9];
  uint64_t v22 = a3[10];
  uint64_t v23 = (void *)((char *)a1 + v21);
  uint64_t v24 = (void *)((char *)a2 + v21);
  uint64_t v25 = v24[1];
  void *v23 = *v24;
  v23[1] = v25;
  *((unsigned char *)a1 + v22) = *((unsigned char *)a2 + v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PartialTrafficLog.RequestMetadata(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  void *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[9];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  void *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

_OWORD *initializeWithTake for PartialTrafficLog.RequestMetadata(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v15 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  return a1;
}

void *assignWithTake for PartialTrafficLog.RequestMetadata(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[9];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  void *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for PartialTrafficLog.RequestMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C4D3DCF0);
}

uint64_t sub_1C4D3DCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return sub_1C4D404A4();
  }
  type metadata accessor for Date();
  sub_1C4D1AFFC();
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(int *)(a3 + 20);
  }
  else
  {
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(int *)(a3 + 24);
  }
  return _s14CloudKitDaemon17PartialTrafficLogOwet_0(a1 + v10, a2, v9);
}

uint64_t storeEnumTagSinglePayload for PartialTrafficLog.RequestMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C4D3DDA0);
}

void sub_1C4D3DDA0()
{
  sub_1C4D405D8();
  if (v4)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    uint64_t v5 = v3;
    int v6 = v2;
    type metadata accessor for Date();
    sub_1C4D1AFFC();
    if (*(_DWORD *)(v8 + 84) == v6)
    {
      uint64_t v9 = v7;
      uint64_t v10 = *(int *)(v5 + 20);
    }
    else
    {
      uint64_t v9 = type metadata accessor for URL();
      uint64_t v10 = *(int *)(v5 + 24);
    }
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(v1 + v10, v0, v0, v9);
  }
}

uint64_t sub_1C4D3DE3C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void type metadata accessor for PartialTrafficLog.RequestObject()
{
}

void type metadata accessor for PartialTrafficLog.RequestBodyStreamReset()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for PartialTrafficLog.ResponseMetadata(uint64_t *a1, uint64_t *a2, int *a3)
{
  char v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *char v4 = *a2;
    char v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v4 + v13) = *(uint64_t *)((char *)a2 + v13);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PartialTrafficLog.ResponseMetadata(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PartialTrafficLog.ResponseMetadata(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PartialTrafficLog.ResponseMetadata(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for PartialTrafficLog.ResponseMetadata(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  return a1;
}

void *assignWithTake for PartialTrafficLog.ResponseMetadata(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PartialTrafficLog.ResponseMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C4D3E3F4);
}

uint64_t sub_1C4D3E3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return sub_1C4D404A4();
  }
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = a1 + *(int *)(a3 + 20);
  return _s14CloudKitDaemon17PartialTrafficLogOwet_0(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for PartialTrafficLog.ResponseMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C4D3E480);
}

void sub_1C4D3E480()
{
  sub_1C4D405D8();
  if (v3)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = v1 + *(int *)(v4 + 20);
    _s14CloudKitDaemon17PartialTrafficLogOwst_0(v6, v0, v0, v5);
  }
}

uint64_t sub_1C4D3E4F4()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for PartialTrafficLog.ResponseConfiguration()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PartialTrafficLog.ResponseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PartialTrafficLog.ResponseConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PartialTrafficLog.ResponseConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PartialTrafficLog.ResponseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PartialTrafficLog.ResponseConfiguration(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PartialTrafficLog.ResponseConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for PartialTrafficLog.ResponseConfiguration()
{
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO13RequestObjectVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  return sub_1C4D16298(v2, v3);
}

void *_s14CloudKitDaemon17PartialTrafficLogO13RequestObjectVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  unint64_t v5 = a2[3];
  swift_bridgeObjectRetain();
  sub_1C4D159E8(v4, v5);
  a1[2] = v4;
  a1[3] = v5;
  return a1;
}

void *_s14CloudKitDaemon17PartialTrafficLogO13RequestObjectVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[2];
  unint64_t v4 = a2[3];
  sub_1C4D159E8(v5, v4);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  a1[2] = v5;
  a1[3] = v4;
  sub_1C4D16298(v6, v7);
  return a1;
}

void *_s14CloudKitDaemon17PartialTrafficLogO13RequestObjectVwta_0(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a1[2];
  unint64_t v6 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_1C4D16298(v5, v6);
  return a1;
}

uint64_t sub_1C4D3E8D8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_1C4D40568(result, a2);
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      return sub_1C4D40568(result, a2);
    }
  }
  return result;
}

void type metadata accessor for PartialTrafficLog.ResponseObject()
{
}

void *initializeBufferWithCopyOfBuffer for PartialTrafficLog.RequestComplete(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for PartialTrafficLog.RequestComplete()
{
  return swift_bridgeObjectRelease();
}

void *_s14CloudKitDaemon17PartialTrafficLogO22RequestBodyStreamResetVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for PartialTrafficLog.RequestComplete(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO22RequestBodyStreamResetVwet_0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C4D3EA0C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_1C4D40568(result, a2);
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      return sub_1C4D40568(result, a2);
    }
  }
  return result;
}

void type metadata accessor for PartialTrafficLog.RequestComplete()
{
}

unsigned char *initializeBufferWithCopyOfBuffer for PartialTrafficLog.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t sub_1C4D3EA64(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1C4D3EA6C(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.CodingKeys()
{
  return &type metadata for PartialTrafficLog.CodingKeys;
}

uint64_t sub_1C4D3EA90()
{
  return 0;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.RequestMetadataCodingKeys()
{
  return &type metadata for PartialTrafficLog.RequestMetadataCodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.RequestObjectCodingKeys()
{
  return &type metadata for PartialTrafficLog.RequestObjectCodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.RequestBodyStreamResetCodingKeys()
{
  return &type metadata for PartialTrafficLog.RequestBodyStreamResetCodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.ResponseMetadataCodingKeys()
{
  return &type metadata for PartialTrafficLog.ResponseMetadataCodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.ResponseConfigurationCodingKeys()
{
  return &type metadata for PartialTrafficLog.ResponseConfigurationCodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.ResponseObjectCodingKeys()
{
  return &type metadata for PartialTrafficLog.ResponseObjectCodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.CompleteCodingKeys()
{
  return &type metadata for PartialTrafficLog.CompleteCodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.RequestComplete.CodingKeys()
{
  return &type metadata for PartialTrafficLog.RequestComplete.CodingKeys;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.ResponseObject.CodingKeys()
{
  return &type metadata for PartialTrafficLog.ResponseObject.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PartialTrafficLog.ResponseConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PartialTrafficLog.ResponseConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C4D3EC84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.ResponseConfiguration.CodingKeys()
{
  return &type metadata for PartialTrafficLog.ResponseConfiguration.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PartialTrafficLog.ResponseMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PartialTrafficLog.ResponseMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C4D3EE10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.ResponseMetadata.CodingKeys()
{
  return &type metadata for PartialTrafficLog.ResponseMetadata.CodingKeys;
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO25RequestMetadataCodingKeysOwet_0(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s14CloudKitDaemon17PartialTrafficLogO25RequestMetadataCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C4D3EF34);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.RequestBodyStreamReset.CodingKeys()
{
  return &type metadata for PartialTrafficLog.RequestBodyStreamReset.CodingKeys;
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO14ResponseObjectV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s14CloudKitDaemon17PartialTrafficLogO14ResponseObjectV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C4D3F0C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1C4D3F0E8(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.RequestObject.CodingKeys()
{
  return &type metadata for PartialTrafficLog.RequestObject.CodingKeys;
}

uint64_t _s14CloudKitDaemon17PartialTrafficLogO10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s14CloudKitDaemon17PartialTrafficLogO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C4D3F258);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PartialTrafficLog.RequestMetadata.CodingKeys()
{
  return &type metadata for PartialTrafficLog.RequestMetadata.CodingKeys;
}

unint64_t sub_1C4D3F294()
{
  unint64_t result = qword_1EA3CC0F8;
  if (!qword_1EA3CC0F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC0F8);
  }
  return result;
}

unint64_t sub_1C4D3F2E4()
{
  unint64_t result = qword_1EA3CC100;
  if (!qword_1EA3CC100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC100);
  }
  return result;
}

unint64_t sub_1C4D3F334()
{
  unint64_t result = qword_1EA3CC108;
  if (!qword_1EA3CC108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC108);
  }
  return result;
}

unint64_t sub_1C4D3F384()
{
  unint64_t result = qword_1EA3CC110;
  if (!qword_1EA3CC110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC110);
  }
  return result;
}

unint64_t sub_1C4D3F3D4()
{
  unint64_t result = qword_1EA3CC118;
  if (!qword_1EA3CC118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC118);
  }
  return result;
}

unint64_t sub_1C4D3F424()
{
  unint64_t result = qword_1EA3CC120;
  if (!qword_1EA3CC120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC120);
  }
  return result;
}

unint64_t sub_1C4D3F474()
{
  unint64_t result = qword_1EA3CC128;
  if (!qword_1EA3CC128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC128);
  }
  return result;
}

unint64_t sub_1C4D3F4C4()
{
  unint64_t result = qword_1EA3CC130;
  if (!qword_1EA3CC130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC130);
  }
  return result;
}

unint64_t sub_1C4D3F514()
{
  unint64_t result = qword_1EA3CC138;
  if (!qword_1EA3CC138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC138);
  }
  return result;
}

unint64_t sub_1C4D3F564()
{
  unint64_t result = qword_1EA3CC140;
  if (!qword_1EA3CC140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC140);
  }
  return result;
}

unint64_t sub_1C4D3F5B4()
{
  unint64_t result = qword_1EA3CC148;
  if (!qword_1EA3CC148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC148);
  }
  return result;
}

unint64_t sub_1C4D3F604()
{
  unint64_t result = qword_1EA3CC150;
  if (!qword_1EA3CC150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC150);
  }
  return result;
}

unint64_t sub_1C4D3F654()
{
  unint64_t result = qword_1EA3CC158;
  if (!qword_1EA3CC158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC158);
  }
  return result;
}

unint64_t sub_1C4D3F6A4()
{
  unint64_t result = qword_1EA3CC160;
  if (!qword_1EA3CC160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC160);
  }
  return result;
}

unint64_t sub_1C4D3F6F4()
{
  unint64_t result = qword_1EA3CC168;
  if (!qword_1EA3CC168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA3CC168);
  }
  return result;
}

unint64_t sub_1C4D3F744()
{
  unint64_t result = qword_1EBBCDAC8;
  if (!qword_1EBBCDAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDAC8);
  }
  return result;
}

unint64_t sub_1C4D3F794()
{
  unint64_t result = qword_1EBBCDAC0;
  if (!qword_1EBBCDAC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDAC0);
  }
  return result;
}

unint64_t sub_1C4D3F7E4()
{
  unint64_t result = qword_1EBBCDAA0;
  if (!qword_1EBBCDAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDAA0);
  }
  return result;
}

unint64_t sub_1C4D3F834()
{
  unint64_t result = qword_1EBBCDA98;
  if (!qword_1EBBCDA98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDA98);
  }
  return result;
}

unint64_t sub_1C4D3F884()
{
  unint64_t result = qword_1EBBCDAF8;
  if (!qword_1EBBCDAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDAF8);
  }
  return result;
}

unint64_t sub_1C4D3F8D4()
{
  unint64_t result = qword_1EBBCDAF0;
  if (!qword_1EBBCDAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDAF0);
  }
  return result;
}

unint64_t sub_1C4D3F924()
{
  unint64_t result = qword_1EBBCDAD8;
  if (!qword_1EBBCDAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDAD8);
  }
  return result;
}

unint64_t sub_1C4D3F974()
{
  unint64_t result = qword_1EBBCDAD0;
  if (!qword_1EBBCDAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDAD0);
  }
  return result;
}

unint64_t sub_1C4D3F9C4()
{
  unint64_t result = qword_1EBBCDAE8;
  if (!qword_1EBBCDAE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDAE8);
  }
  return result;
}

unint64_t sub_1C4D3FA14()
{
  unint64_t result = qword_1EBBCDAE0;
  if (!qword_1EBBCDAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDAE0);
  }
  return result;
}

unint64_t sub_1C4D3FA64()
{
  unint64_t result = qword_1EBBCDAB8;
  if (!qword_1EBBCDAB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDAB8);
  }
  return result;
}

unint64_t sub_1C4D3FAB4()
{
  unint64_t result = qword_1EBBCDAB0;
  if (!qword_1EBBCDAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDAB0);
  }
  return result;
}

unint64_t sub_1C4D3FB04()
{
  unint64_t result = qword_1EBBCDA50;
  if (!qword_1EBBCDA50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDA50);
  }
  return result;
}

unint64_t sub_1C4D3FB54()
{
  unint64_t result = qword_1EBBCDA48;
  if (!qword_1EBBCDA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDA48);
  }
  return result;
}

unint64_t sub_1C4D3FBA4()
{
  unint64_t result = qword_1EBBCD750;
  if (!qword_1EBBCD750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD750);
  }
  return result;
}

unint64_t sub_1C4D3FBF4()
{
  unint64_t result = qword_1EBBCD890;
  if (!qword_1EBBCD890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD890);
  }
  return result;
}

unint64_t sub_1C4D3FC44()
{
  unint64_t result = qword_1EBBCD8D0;
  if (!qword_1EBBCD8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD8D0);
  }
  return result;
}

unint64_t sub_1C4D3FC94()
{
  unint64_t result = qword_1EBBCD8C8;
  if (!qword_1EBBCD8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD8C8);
  }
  return result;
}

unint64_t sub_1C4D3FCE4()
{
  unint64_t result = qword_1EBBCD768;
  if (!qword_1EBBCD768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD768);
  }
  return result;
}

unint64_t sub_1C4D3FD34()
{
  unint64_t result = qword_1EBBCD8B0;
  if (!qword_1EBBCD8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD8B0);
  }
  return result;
}

unint64_t sub_1C4D3FD84()
{
  unint64_t result = qword_1EBBCDA68;
  if (!qword_1EBBCDA68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDA68);
  }
  return result;
}

unint64_t sub_1C4D3FDD4()
{
  unint64_t result = qword_1EBBCDA60;
  if (!qword_1EBBCDA60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDA60);
  }
  return result;
}

unint64_t sub_1C4D3FE24()
{
  unint64_t result = qword_1EBBCD9A0;
  if (!qword_1EBBCD9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD9A0);
  }
  return result;
}

unint64_t sub_1C4D3FE74()
{
  unint64_t result = qword_1EBBCD998;
  if (!qword_1EBBCD998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD998);
  }
  return result;
}

unint64_t sub_1C4D3FEC4()
{
  unint64_t result = qword_1EBBCDA88;
  if (!qword_1EBBCDA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDA88);
  }
  return result;
}

unint64_t sub_1C4D3FF14()
{
  unint64_t result = qword_1EBBCDA80;
  if (!qword_1EBBCDA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCDA80);
  }
  return result;
}

unint64_t sub_1C4D3FF64()
{
  unint64_t result = qword_1EBBCD758;
  if (!qword_1EBBCD758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD758);
  }
  return result;
}

unint64_t sub_1C4D3FFB4()
{
  unint64_t result = qword_1EBBCD8A0;
  if (!qword_1EBBCD8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD8A0);
  }
  return result;
}

unint64_t sub_1C4D40004()
{
  unint64_t result = qword_1EBBCD8E8;
  if (!qword_1EBBCD8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD8E8);
  }
  return result;
}

unint64_t sub_1C4D40054()
{
  unint64_t result = qword_1EBBCD8E0;
  if (!qword_1EBBCD8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBCD8E0);
  }
  return result;
}

uint64_t sub_1C4D40108()
{
  return v0;
}

uint64_t sub_1C4D40130(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F41854D8](a1, a2, v2, a1);
}

uint64_t sub_1C4D40180()
{
  return 0;
}

uint64_t sub_1C4D4019C()
{
  return v0;
}

uint64_t sub_1C4D401DC()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_1C4D40254()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_1C4D40280()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_1C4D4029C()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_1C4D402B4()
{
  *(unsigned char *)(v0 - 66) = 1;
  return type metadata accessor for Date();
}

uint64_t sub_1C4D402E4(uint64_t a1)
{
  return *(void *)a1;
}

void sub_1C4D40300(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_1C4D4031C(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 232) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_1C4D40338(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_1C4D40354(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1C4D4037C()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_1C4D403A0()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_1C4D403BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(v2 - 256);
  *(void *)uint64_t v4 = a1;
  *(void *)(v4 + 8) = v1;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v3 - 112);
  return v4;
}

uint64_t sub_1C4D403E4()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_1C4D40410()
{
  return v0;
}

uint64_t sub_1C4D40428()
{
  return v0;
}

uint64_t sub_1C4D40438@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

uint64_t sub_1C4D404A4()
{
  unint64_t v1 = *(void *)(v0 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_1C4D404BC()
{
  return v0;
}

uint64_t sub_1C4D404CC()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

void sub_1C4D404EC()
{
  *(unsigned char *)(v0 - 67) = 2;
}

uint64_t sub_1C4D404F8()
{
  return v0;
}

void sub_1C4D4050C()
{
  *(unsigned char *)(v0 - 66) = 1;
}

uint64_t sub_1C4D40518()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C4D40530()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1C4D40548()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t sub_1C4D40568(uint64_t result, int a2)
{
  *(void *)(result + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1C4D40574()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_1C4D4058C()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

void *sub_1C4D405AC()
{
  return sub_1C4D25A9C(v0, v1);
}

uint64_t sub_1C4D405CC()
{
  return v0;
}

uint64_t sub_1C4D405EC()
{
  return static Date.== infix(_:_:)();
}

uint64_t sub_1C4D4060C()
{
  return swift_bridgeObjectRetain();
}

id TrafficMetadata.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t sub_1C4D406A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1C4D408AC(&OBJC_IVAR___CKDTrafficMetadata_timestamp, (uint64_t *)&unk_1EA3CC170, a1);
}

uint64_t sub_1C4D406FC(uint64_t a1)
{
  return sub_1C4D40A94(a1, &OBJC_IVAR___CKDTrafficMetadata_timestamp, (uint64_t *)&unk_1EA3CC170);
}

uint64_t (*sub_1C4D40710())()
{
  return j_j__swift_endAccess;
}

id sub_1C4D407A0(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v10 = sub_1C4D10728(a3);
  uint64_t v11 = sub_1C4D16C18(v10);
  MEMORY[0x1F4188790](v11);
  sub_1C4D42EE0();
  a4();
  uint64_t v12 = a5(0);
  uint64_t v13 = 0;
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v6, 1, v12) != 1)
  {
    uint64_t v13 = (void *)a6();
    sub_1C4D42F10();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v6, v12);
  }
  return v13;
}

uint64_t sub_1C4D40898@<X0>(uint64_t a1@<X8>)
{
  return sub_1C4D408AC(&OBJC_IVAR___CKDTrafficMetadata_url, &qword_1EA3CBE40, a1);
}

uint64_t sub_1C4D408AC@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *a1;
  sub_1C4D42EC4();
  return sub_1C4D40900(v6, a3, a2);
}

uint64_t sub_1C4D40900(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1C4D10728(a3);
  sub_1C4D42F10();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

void sub_1C4D409A8(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(uint64_t), uint64_t (*a6)(void), void (*a7)(uint64_t))
{
  uint64_t v13 = sub_1C4D10728(a4);
  uint64_t v14 = sub_1C4D16C18(v13);
  MEMORY[0x1F4188790](v14);
  sub_1C4D42EE0();
  if (a3)
  {
    a5(a3);
    uint64_t v15 = a6(0);
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v15 = a6(0);
    uint64_t v16 = 1;
  }
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v7, v16, 1, v15);
  id v17 = a1;
  a7(v7);
}

uint64_t sub_1C4D40A80(uint64_t a1)
{
  return sub_1C4D40A94(a1, &OBJC_IVAR___CKDTrafficMetadata_url, &qword_1EA3CBE40);
}

uint64_t sub_1C4D40A94(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = v3 + *a2;
  swift_beginAccess();
  sub_1C4D40AFC(a1, v6, a3);
  return swift_endAccess();
}

uint64_t sub_1C4D40AFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1C4D10728(a3);
  sub_1C4D42F10();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
  return a2;
}

uint64_t sub_1C4D40B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v9 = sub_1C4D10728(a5);
  uint64_t v10 = sub_1C4D16C18(v9);
  MEMORY[0x1F4188790](v10);
  sub_1C4D184E4();
  uint64_t v13 = v12 - v11;
  sub_1C4D40900(a1, v12 - v11, a5);
  return a6(v13);
}

uint64_t (*sub_1C4D40BF4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1C4D40C54()
{
  return sub_1C4D41024();
}

uint64_t sub_1C4D40C78(uint64_t a1, uint64_t a2)
{
  return sub_1C4D41110(a1, a2);
}

uint64_t (*sub_1C4D40C84())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1C4D40CF0()
{
  sub_1C4D42EA0();
  return *(void *)v0;
}

uint64_t sub_1C4D40D4C(uint64_t a1)
{
  uint64_t result = sub_1C4D42E7C();
  void *v1 = a1;
  return result;
}

uint64_t (*sub_1C4D40D84())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1C4D40E38()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C4D40EF0(uint64_t a1)
{
  sub_1C4D42E7C();
  void *v1 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C4D40F30()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return sub_1C4D40EF0(v0);
}

uint64_t (*sub_1C4D40F5C())()
{
  return j_j__swift_endAccess;
}

id sub_1C4D40FBC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3();
  if (v4)
  {
    uint64_t v5 = (void *)MEMORY[0x1C87879B0](v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = 0;
  }
  return v5;
}

uint64_t sub_1C4D41018()
{
  return sub_1C4D41024();
}

uint64_t sub_1C4D41024()
{
  sub_1C4D42EA0();
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1C4D4107C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  if (a3)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  id v9 = a1;
  a4(v6, v8);
}

uint64_t sub_1C4D41104(uint64_t a1, uint64_t a2)
{
  return sub_1C4D41110(a1, a2);
}

uint64_t sub_1C4D41110(uint64_t a1, uint64_t a2)
{
  sub_1C4D42E7C();
  void *v2 = a1;
  v2[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C4D41158(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v7, v6);
}

uint64_t (*sub_1C4D411A0())()
{
  return j__swift_endAccess;
}

uint64_t sub_1C4D41210()
{
  sub_1C4D42EA0();
  return *v0;
}

uint64_t sub_1C4D4126C(char a1)
{
  uint64_t result = sub_1C4D42E7C();
  unsigned char *v1 = a1;
  return result;
}

uint64_t (*sub_1C4D412A4())()
{
  return j_j__swift_endAccess;
}

id TrafficMetadata.init()()
{
  uint64_t v1 = type metadata accessor for Date();
  sub_1C4D42F28(v1);
  uint64_t v2 = type metadata accessor for URL();
  sub_1C4D42F28(v2);
  uint64_t v3 = &v0[OBJC_IVAR___CKDTrafficMetadata_method];
  void *v3 = 0;
  v3[1] = 0;
  *(void *)&v0[OBJC_IVAR___CKDTrafficMetadata_status] = 0;
  *(void *)&v0[OBJC_IVAR___CKDTrafficMetadata_headers] = 0;
  uint64_t v4 = &v0[OBJC_IVAR___CKDTrafficMetadata_requestClassName];
  *uint64_t v4 = 0;
  v4[1] = 0;
  v0[OBJC_IVAR___CKDTrafficMetadata_parsingStandaloneMessage] = 0;
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for TrafficMetadata();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for TrafficMetadata()
{
  uint64_t result = qword_1EA3CC1A0;
  if (!qword_1EA3CC1A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1C4D4140C()
{
  qword_1EA3D1080 = 116;
  *(void *)algn_1EA3D1088 = 0xE100000000000000;
}

void sub_1C4D41424()
{
  qword_1EA3D1090 = 117;
  *(void *)algn_1EA3D1098 = 0xE100000000000000;
}

void sub_1C4D4143C()
{
  qword_1EA3D10A0 = 109;
  *(void *)algn_1EA3D10A8 = 0xE100000000000000;
}

void sub_1C4D41454()
{
  qword_1EA3D10B0 = 115;
  *(void *)algn_1EA3D10B8 = 0xE100000000000000;
}

void sub_1C4D4146C()
{
  qword_1EA3D10C0 = 104;
  *(void *)algn_1EA3D10C8 = 0xE100000000000000;
}

void sub_1C4D41484()
{
  qword_1EA3D10D0 = 114;
  *(void *)algn_1EA3D10D8 = 0xE100000000000000;
}

void sub_1C4D4149C()
{
  qword_1EA3D10E0 = 112;
  *(void *)algn_1EA3D10E8 = 0xE100000000000000;
}

uint64_t static TrafficMetadata.supportsSecureCoding.getter()
{
  return 1;
}

void sub_1C4D414C4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1C4D10728(&qword_1EA3CBE40);
  uint64_t v5 = sub_1C4D16C18(v4);
  MEMORY[0x1F4188790](v5);
  sub_1C4D184E4();
  uint64_t v8 = (void *)(v7 - v6);
  uint64_t v9 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  uint64_t v10 = sub_1C4D16C18(v9);
  MEMORY[0x1F4188790](v10);
  sub_1C4D184E4();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = v2 + OBJC_IVAR___CKDTrafficMetadata_timestamp;
  swift_beginAccess();
  sub_1C4D40900(v14, v13, (uint64_t *)&unk_1EA3CC170);
  uint64_t v15 = type metadata accessor for Date();
  Class isa = 0;
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0(v13, 1, v15) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    sub_1C4D42F10();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v13, v15);
  }
  if (qword_1EA3CB758 != -1) {
    swift_once();
  }
  uint64_t v18 = (void *)MEMORY[0x1C87879B0](qword_1EA3D1080, *(void *)algn_1EA3D1088);
  objc_msgSend(a1, sel_encodeObject_forKey_, isa, v18);
  swift_unknownObjectRelease();

  uint64_t v19 = v2 + OBJC_IVAR___CKDTrafficMetadata_url;
  sub_1C4D42EC4();
  sub_1C4D40900(v19, (uint64_t)v8, &qword_1EA3CBE40);
  uint64_t v20 = type metadata accessor for URL();
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v8, 1, v20) != 1)
  {
    URL._bridgeToObjectiveC()(v21);
    sub_1C4D42F10();
    (*(void (**)(void *, uint64_t))(v22 + 8))(v8, v20);
  }
  if (qword_1EA3CB760 != -1) {
    swift_once();
  }
  uint64_t v23 = MEMORY[0x1C87879B0](qword_1EA3D1090, *(void *)algn_1EA3D1098);
  sub_1C4D42E58(v23);
  swift_unknownObjectRelease();

  uint64_t v24 = (uint64_t *)(v2 + OBJC_IVAR___CKDTrafficMetadata_method);
  sub_1C4D42EC4();
  uint64_t v25 = (void *)v24[1];
  if (v25)
  {
    uint64_t v26 = *v24;
    swift_bridgeObjectRetain();
    MEMORY[0x1C87879B0](v26, v25);
    swift_bridgeObjectRelease();
  }
  if (qword_1EA3CB768 != -1) {
    swift_once();
  }
  uint64_t v27 = MEMORY[0x1C87879B0](qword_1EA3D10A0, *(void *)algn_1EA3D10A8);
  sub_1C4D42E58(v27);
  swift_unknownObjectRelease();

  uint64_t v28 = (uint64_t *)(v2 + OBJC_IVAR___CKDTrafficMetadata_status);
  sub_1C4D42EC4();
  uint64_t v29 = *v28;
  if (qword_1EA3CB770 != -1) {
    swift_once();
  }
  uint64_t v30 = (void *)MEMORY[0x1C87879B0](qword_1EA3D10B0, *(void *)algn_1EA3D10B8);
  objc_msgSend(a1, sel_encodeInteger_forKey_, v29, v30);

  uint64_t v31 = (void **)(v2 + OBJC_IVAR___CKDTrafficMetadata_headers);
  sub_1C4D42EC4();
  uint64_t v32 = *v31;
  if (*v31)
  {
    swift_bridgeObjectRetain();
    Dictionary._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  if (qword_1EA3CB778 != -1) {
    swift_once();
  }
  uint64_t v33 = MEMORY[0x1C87879B0](qword_1EA3D10C0, *(void *)algn_1EA3D10C8);
  sub_1C4D42E58(v33);
  swift_unknownObjectRelease();

  uint64_t v34 = (uint64_t *)(v2 + OBJC_IVAR___CKDTrafficMetadata_requestClassName);
  sub_1C4D42EC4();
  uint64_t v35 = (void *)v34[1];
  if (v35)
  {
    uint64_t v36 = *v34;
    swift_bridgeObjectRetain();
    MEMORY[0x1C87879B0](v36, v35);
    swift_bridgeObjectRelease();
  }
  if (qword_1EA3CB780 != -1) {
    swift_once();
  }
  uint64_t v37 = MEMORY[0x1C87879B0](qword_1EA3D10D0, *(void *)algn_1EA3D10D8);
  sub_1C4D42E58(v37);
  swift_unknownObjectRelease();

  uint64_t v38 = (unsigned __int8 *)(v2 + OBJC_IVAR___CKDTrafficMetadata_parsingStandaloneMessage);
  sub_1C4D42EC4();
  uint64_t v39 = *v38;
  if (qword_1EA3CB788 != -1) {
    swift_once();
  }
  uint64_t v40 = (void *)MEMORY[0x1C87879B0](qword_1EA3D10E0, *(void *)algn_1EA3D10E8);
  objc_msgSend(a1, sel_encodeBool_forKey_, v39, v40);
}

id TrafficMetadata.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return TrafficMetadata.init(coder:)(a1);
}

id TrafficMetadata.init(coder:)(void *a1)
{
  uint64_t v4 = sub_1C4D10728(&qword_1EA3CBE40);
  uint64_t v5 = sub_1C4D16C18(v4);
  MEMORY[0x1F4188790](v5);
  sub_1C4D184E4();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  uint64_t v10 = sub_1C4D16C18(v9);
  MEMORY[0x1F4188790](v10);
  sub_1C4D42EE0();
  uint64_t v11 = (uint64_t)&v1[OBJC_IVAR___CKDTrafficMetadata_timestamp];
  uint64_t v12 = type metadata accessor for Date();
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v11, 1, 1, v12);
  uint64_t v13 = (uint64_t)&v1[OBJC_IVAR___CKDTrafficMetadata_url];
  uint64_t v42 = type metadata accessor for URL();
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v13, 1, 1, v42);
  uint64_t v14 = (uint64_t *)&v1[OBJC_IVAR___CKDTrafficMetadata_method];
  uint64_t *v14 = 0;
  v14[1] = 0;
  uint64_t v43 = &v1[OBJC_IVAR___CKDTrafficMetadata_status];
  *(void *)&v1[OBJC_IVAR___CKDTrafficMetadata_status] = 0;
  uint64_t v44 = (uint64_t *)&v1[OBJC_IVAR___CKDTrafficMetadata_headers];
  *(void *)&v1[OBJC_IVAR___CKDTrafficMetadata_headers] = 0;
  uint64_t v15 = (uint64_t *)&v1[OBJC_IVAR___CKDTrafficMetadata_requestClassName];
  uint64_t *v15 = 0;
  v15[1] = 0;
  uint64_t v45 = v15;
  uint64_t v47 = &v1[OBJC_IVAR___CKDTrafficMetadata_parsingStandaloneMessage];
  v1[OBJC_IVAR___CKDTrafficMetadata_parsingStandaloneMessage] = 0;
  sub_1C4D24BD0(0, &qword_1EA3CC180);
  uint64_t v16 = qword_1EA3CB758;
  uint64_t v46 = v1;
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = a1;
  uint64_t v18 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v18)
  {
    uint64_t v19 = (void *)v18;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = 1;
  }
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v2, v20, 1, v12);
  swift_beginAccess();
  sub_1C4D40AFC(v2, v11, (uint64_t *)&unk_1EA3CC170);
  swift_endAccess();
  sub_1C4D24BD0(0, &qword_1EA3CC188);
  if (qword_1EA3CB760 != -1) {
    swift_once();
  }
  uint64_t v21 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v21)
  {
    uint64_t v22 = (void *)v21;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = 1;
  }
  _s14CloudKitDaemon17PartialTrafficLogOwst_0(v8, v23, 1, v42);
  swift_beginAccess();
  sub_1C4D40AFC(v8, v13, &qword_1EA3CBE40);
  swift_endAccess();
  sub_1C4D24BD0(0, (unint64_t *)&unk_1EA3CC190);
  if (qword_1EA3CB768 != -1) {
    swift_once();
  }
  uint64_t v24 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v24)
  {
    uint64_t v25 = (void *)v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v28 = 0;
  }
  sub_1C4D42EF8();
  uint64_t *v14 = v26;
  v14[1] = v28;
  swift_bridgeObjectRelease();
  if (qword_1EA3CB770 != -1) {
    swift_once();
  }
  uint64_t v29 = (void *)MEMORY[0x1C87879B0](qword_1EA3D10B0, *(void *)algn_1EA3D10B8);
  id v30 = objc_msgSend(v17, sel_decodeIntegerForKey_, v29);

  sub_1C4D42EF8();
  *uint64_t v43 = v30;
  if (qword_1EA3CB778 != -1) {
    swift_once();
  }
  uint64_t v31 = NSCoder.decodeDictionary<A, B>(withKeyClass:objectClass:forKey:)();
  if (v31)
  {
    uint64_t v32 = sub_1C4D42084(v31);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v32 = 0;
  }
  sub_1C4D42EF8();
  *uint64_t v44 = v32;
  swift_bridgeObjectRelease();
  if (qword_1EA3CB780 != -1) {
    swift_once();
  }
  uint64_t v33 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v33)
  {
    uint64_t v34 = (void *)v33;
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = v36;
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v37 = 0;
  }
  sub_1C4D42EF8();
  uint64_t *v45 = v35;
  v45[1] = v37;
  swift_bridgeObjectRelease();
  if (qword_1EA3CB788 != -1) {
    swift_once();
  }
  uint64_t v38 = (void *)MEMORY[0x1C87879B0](qword_1EA3D10E0, *(void *)algn_1EA3D10E8);
  unsigned __int8 v39 = objc_msgSend(v17, sel_decodeBoolForKey_, v38);

  sub_1C4D42EF8();
  unsigned __int8 *v47 = v39;

  v48.receiver = v46;
  v48.super_class = (Class)type metadata accessor for TrafficMetadata();
  id v40 = objc_msgSendSuper2(&v48, sel_init);

  return v40;
}

uint64_t sub_1C4D42084(uint64_t a1)
{
  unint64_t v1 = a1;
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v3 = MEMORY[0x1E4FBC868];
    if (v2) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  if (!MEMORY[0x1C8787F10](a1)) {
    goto LABEL_8;
  }
LABEL_5:
  sub_1C4D10728(&qword_1EBBCD800);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)();
  if (v2)
  {
LABEL_6:
    uint64_t v4 = __CocoaDictionary.makeIterator()();
    uint64_t v21 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = v4 | 0x8000000000000000;
    goto LABEL_13;
  }
LABEL_9:
  uint64_t v8 = -1 << *(unsigned char *)(v1 + 32);
  uint64_t v5 = ~v8;
  uint64_t v21 = (void *)(v1 + 64);
  uint64_t v9 = -v8;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v6 = v10 & *(void *)(v1 + 64);
  unint64_t v7 = v1;
LABEL_13:
  int64_t v20 = (unint64_t)(v5 + 64) >> 6;
  swift_bridgeObjectRetain();
  if ((v7 & 0x8000000000000000) != 0)
  {
    if (__CocoaDictionary.Iterator.next()())
    {
      sub_1C4D24BD0(0, (unint64_t *)&unk_1EA3CC190);
      swift_dynamicCast();
      swift_dynamicCast();
      uint64_t v12 = v22;
LABEL_34:
      v12;
      uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
      __break(1u);
      __break(1u);
      return result;
    }
  }
  else
  {
    if (v6)
    {
      unint64_t v11 = __clz(__rbit64(v6));
LABEL_33:
      uint64_t v12 = *(void **)(*(void *)(v7 + 48) + 8 * v11);
      uint64_t v16 = *(void **)(*(void *)(v7 + 56) + 8 * v11);
      id v17 = v12;
      id v18 = v16;
      goto LABEL_34;
    }
    if (v20 > 1)
    {
      unint64_t v13 = v21[1];
      uint64_t v14 = 1;
      if (v13) {
        goto LABEL_32;
      }
      uint64_t v14 = 2;
      if (v20 > 2)
      {
        unint64_t v13 = v21[2];
        if (v13) {
          goto LABEL_32;
        }
        uint64_t v14 = 3;
        if (v20 > 3)
        {
          unint64_t v13 = v21[3];
          if (v13) {
            goto LABEL_32;
          }
          uint64_t v14 = 4;
          if (v20 > 4)
          {
            unint64_t v13 = v21[4];
            if (v13) {
              goto LABEL_32;
            }
            uint64_t v14 = 5;
            if (v20 > 5)
            {
              unint64_t v13 = v21[5];
              if (!v13)
              {
                uint64_t v15 = 6;
                while (v15 < v20)
                {
                  unint64_t v13 = v21[v15++];
                  if (v13)
                  {
                    uint64_t v14 = v15 - 1;
                    goto LABEL_32;
                  }
                }
                goto LABEL_35;
              }
LABEL_32:
              unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
              goto LABEL_33;
            }
          }
        }
      }
    }
  }
LABEL_35:
  sub_1C4D1684C();
  return v3;
}

id TrafficMetadata.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TrafficMetadata();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C4D424B8@<X0>(uint64_t a1@<X8>)
{
  return sub_1C4D406A0(a1);
}

uint64_t sub_1C4D424DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4D40B5C(a1, a2, a3, a4, (uint64_t *)&unk_1EA3CC170, sub_1C4D406FC);
}

uint64_t sub_1C4D42510@<X0>(uint64_t a1@<X8>)
{
  return sub_1C4D40898(a1);
}

uint64_t sub_1C4D42534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4D40B5C(a1, a2, a3, a4, &qword_1EA3CBE40, sub_1C4D40A80);
}

uint64_t sub_1C4D42568()
{
  sub_1C4D42F1C();
  uint64_t result = sub_1C4D40C54();
  uint64_t *v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_1C4D42590(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4D41158(a1, a2, a3, a4, sub_1C4D40C78);
}

uint64_t sub_1C4D425BC()
{
  sub_1C4D42F1C();
  uint64_t result = sub_1C4D40CF0();
  uint64_t *v0 = result;
  return result;
}

uint64_t sub_1C4D425E4(uint64_t *a1)
{
  return sub_1C4D40D4C(*a1);
}

uint64_t sub_1C4D4260C()
{
  sub_1C4D42F1C();
  uint64_t result = sub_1C4D40E38();
  uint64_t *v0 = result;
  return result;
}

uint64_t sub_1C4D42638()
{
  sub_1C4D42F1C();
  uint64_t result = sub_1C4D41018();
  uint64_t *v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_1C4D42660(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4D41158(a1, a2, a3, a4, sub_1C4D41104);
}

uint64_t sub_1C4D4268C()
{
  sub_1C4D42F1C();
  uint64_t result = sub_1C4D41210();
  unsigned char *v0 = result & 1;
  return result;
}

uint64_t sub_1C4D426B8(char *a1)
{
  return sub_1C4D4126C(*a1);
}

uint64_t sub_1C4D42774()
{
  return type metadata accessor for TrafficMetadata();
}

void sub_1C4D4277C()
{
  sub_1C4D42D84(319, (unint64_t *)&qword_1EA3CC1B0, MEMORY[0x1E4F27928]);
  if (v0 <= 0x3F)
  {
    sub_1C4D42D84(319, &qword_1EA3CC1B8, MEMORY[0x1E4F276F0]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for TrafficMetadata(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TrafficMetadata);
}

uint64_t dispatch thunk of TrafficMetadata.timestamp.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of TrafficMetadata.timestamp.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of TrafficMetadata.timestamp.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of TrafficMetadata.url.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of TrafficMetadata.url.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of TrafficMetadata.url.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of TrafficMetadata.method.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of TrafficMetadata.method.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of TrafficMetadata.method.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of TrafficMetadata.status.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of TrafficMetadata.status.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of TrafficMetadata.status.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of TrafficMetadata.headers.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of TrafficMetadata.headers.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of TrafficMetadata.headers.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of TrafficMetadata.requestClassName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of TrafficMetadata.requestClassName.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of TrafficMetadata.requestClassName.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of TrafficMetadata.parsingStandaloneMessage.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of TrafficMetadata.parsingStandaloneMessage.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of TrafficMetadata.parsingStandaloneMessage.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of TrafficMetadata.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of TrafficMetadata.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 312))();
}

void sub_1C4D42D84(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1C4D42DD8(uint64_t a1, uint64_t *a2)
{
  sub_1C4D10728(a2);
  sub_1C4D42F10();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_1C4D42E34()
{
  return swift_beginAccess();
}

id sub_1C4D42E58(uint64_t a1)
{
  return objc_msgSend(v1, (SEL)(v3 + 2501), v2, a1);
}

uint64_t sub_1C4D42E7C()
{
  return swift_beginAccess();
}

uint64_t sub_1C4D42EA0()
{
  return swift_beginAccess();
}

uint64_t sub_1C4D42EC4()
{
  return swift_beginAccess();
}

uint64_t sub_1C4D42EF8()
{
  return swift_beginAccess();
}

uint64_t sub_1C4D42F28(uint64_t a1)
{
  return _s14CloudKitDaemon17PartialTrafficLogOwst_0(v1, 1, 1, a1);
}

id TrafficLogMessage.__allocating_init(uuid:requestMetadata:requestObjects:bodyStreamResetCount:responseMetadata:responseObjects:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  id v15 = objc_allocWithZone(v7);
  return TrafficLogMessage.init(uuid:requestMetadata:requestObjects:bodyStreamResetCount:responseMetadata:responseObjects:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t TrafficLogMessage.uuid.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CKLTrafficLogMessage_uuid);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TrafficLogMessage.requestTime.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C4D259D8(v1 + OBJC_IVAR___CKLTrafficLogMessage_requestTime, a1, (uint64_t *)&unk_1EA3CC170);
}

uint64_t TrafficLogMessage.requestMethod.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CKLTrafficLogMessage_requestMethod);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TrafficLogMessage.requestURL.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C4D259D8(v1 + OBJC_IVAR___CKLTrafficLogMessage_requestURL, a1, &qword_1EA3CBE40);
}

uint64_t TrafficLogMessage.requestHeaders.getter()
{
  return sub_1C4D44044();
}

uint64_t TrafficLogMessage.bodyStreamResetCount.getter()
{
  return *(void *)(v0 + OBJC_IVAR___CKLTrafficLogMessage_bodyStreamResetCount);
}

uint64_t TrafficLogMessage.requestObjects.getter()
{
  return sub_1C4D44044();
}

uint64_t TrafficLogMessage.responseStatus.getter()
{
  return *(void *)(v0 + OBJC_IVAR___CKLTrafficLogMessage_responseStatus);
}

id sub_1C4D432C8(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v9 = sub_1C4D10728(a3);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4(v10);
  uint64_t v13 = a5(0);
  uint64_t v14 = 0;
  if (_s14CloudKitDaemon17PartialTrafficLogOwet_0((uint64_t)v12, 1, v13) != 1)
  {
    uint64_t v14 = (void *)a6();
    (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  }
  return v14;
}

uint64_t TrafficLogMessage.responseTime.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C4D259D8(v1 + OBJC_IVAR___CKLTrafficLogMessage_responseTime, a1, (uint64_t *)&unk_1EA3CC170);
}

Class sub_1C4D43420(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a3())
  {
    v3.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v3.super.Class isa = 0;
  }
  return v3.super.isa;
}

uint64_t TrafficLogMessage.responseHeaders.getter()
{
  return sub_1C4D44044();
}

Class sub_1C4D434B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a3())
  {
    sub_1C4D10728(&qword_1EA3CBE50);
    v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v3.super.Class isa = 0;
  }
  return v3.super.isa;
}

uint64_t TrafficLogMessage.responseObjects.getter()
{
  return sub_1C4D44044();
}

id TrafficLogMessage.init(uuid:requestMetadata:requestObjects:bodyStreamResetCount:responseMetadata:responseObjects:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v41 = a7;
  uint64_t v14 = sub_1C4D10728(&qword_1EA3CBE40);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1C4D10728((uint64_t *)&unk_1EA3CC170);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  int64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v40 - v21;
  uint64_t v23 = &v7[OBJC_IVAR___CKLTrafficLogMessage_uuid];
  *(void *)uint64_t v23 = a1;
  *((void *)v23 + 1) = a2;
  if (a3)
  {
    uint64_t v24 = (uint64_t)&a3[OBJC_IVAR___CKDTrafficMetadata_timestamp];
    sub_1C4D4404C();
    sub_1C4D259D8(v24, (uint64_t)v22, (uint64_t *)&unk_1EA3CC170);
  }
  else
  {
    uint64_t v25 = type metadata accessor for Date();
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v22, 1, 1, v25);
  }
  sub_1C4D438C4((uint64_t)v22, (uint64_t)&v7[OBJC_IVAR___CKLTrafficLogMessage_requestTime], (uint64_t *)&unk_1EA3CC170);
  if (a3)
  {
    uint64_t v26 = &a3[OBJC_IVAR___CKDTrafficMetadata_method];
    sub_1C4D4404C();
    uint64_t v27 = *((void *)v26 + 1);
    uint64_t v28 = &v7[OBJC_IVAR___CKLTrafficLogMessage_requestMethod];
    *(void *)uint64_t v28 = *(void *)v26;
    *((void *)v28 + 1) = v27;
    uint64_t v29 = (uint64_t)&a3[OBJC_IVAR___CKDTrafficMetadata_url];
    swift_bridgeObjectRetain();
    sub_1C4D4404C();
    sub_1C4D259D8(v29, (uint64_t)v16, &qword_1EA3CBE40);
  }
  else
  {
    id v30 = &v7[OBJC_IVAR___CKLTrafficLogMessage_requestMethod];
    uint64_t v31 = type metadata accessor for URL();
    *(void *)id v30 = 0;
    *((void *)v30 + 1) = 0;
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v16, 1, 1, v31);
  }
  sub_1C4D438C4((uint64_t)v16, (uint64_t)&v7[OBJC_IVAR___CKLTrafficLogMessage_requestURL], &qword_1EA3CBE40);
  if (a3)
  {
    sub_1C4D4404C();
    uint64_t v32 = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v32 = 0;
  }
  *(void *)&v7[OBJC_IVAR___CKLTrafficLogMessage_requestHeaders] = v32;
  *(void *)&v7[OBJC_IVAR___CKLTrafficLogMessage_requestObjects] = a4;
  *(void *)&v7[OBJC_IVAR___CKLTrafficLogMessage_bodyStreamResetCount] = a5;
  if (a6)
  {
    uint64_t v33 = (uint64_t)&a6[OBJC_IVAR___CKDTrafficMetadata_timestamp];
    sub_1C4D4404C();
    sub_1C4D259D8(v33, (uint64_t)v20, (uint64_t *)&unk_1EA3CC170);
  }
  else
  {
    uint64_t v34 = type metadata accessor for Date();
    _s14CloudKitDaemon17PartialTrafficLogOwst_0((uint64_t)v20, 1, 1, v34);
  }
  sub_1C4D438C4((uint64_t)v20, (uint64_t)&v7[OBJC_IVAR___CKLTrafficLogMessage_responseTime], (uint64_t *)&unk_1EA3CC170);
  if (a6)
  {
    uint64_t v35 = &a6[OBJC_IVAR___CKDTrafficMetadata_status];
    sub_1C4D4404C();
    *(void *)&v7[OBJC_IVAR___CKLTrafficLogMessage_responseStatus] = *(void *)v35;
    sub_1C4D4404C();
    uint64_t v36 = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v36 = 0;
    *(void *)&v7[OBJC_IVAR___CKLTrafficLogMessage_responseStatus] = 0;
  }
  *(void *)&v7[OBJC_IVAR___CKLTrafficLogMessage_responseHeaders] = v36;
  *(void *)&v7[OBJC_IVAR___CKLTrafficLogMessage_responseObjects] = v41;
  uint64_t v37 = (objc_class *)type metadata accessor for TrafficLogMessage();
  v42.receiver = v7;
  v42.super_class = v37;
  id v38 = objc_msgSendSuper2(&v42, sel_init);

  return v38;
}

uint64_t sub_1C4D438C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1C4D10728(a3);
  sub_1C4D1B074();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for TrafficLogMessage()
{
  uint64_t result = qword_1EA3CC1C8;
  if (!qword_1EA3CC1C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C4D43A48()
{
  return sub_1C4D43AF8();
}

id sub_1C4D43A6C(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  if (v7)
  {
    uint64_t v8 = (void *)MEMORY[0x1C87879B0](v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }
  return v8;
}

uint64_t sub_1C4D43AEC()
{
  return sub_1C4D43AF8();
}

uint64_t sub_1C4D43AF8()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CKLTrafficLogMessage_requestHeaders);
  if (v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v1 = sub_1C4D2ED70(v2, v3, v1);
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_1C4D43BC8()
{
  _StringGuts.grow(_:)(55);
  v1._uint64_t countAndFlagsBits = 60;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  swift_getObjectType();
  v2._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._object = (void *)0x80000001C5082BD0;
  v3._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v3);
  uint64_t v4 = sub_1C4D43A48();
  if (v5)
  {
    unint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0x6E776F6E6B6E75;
    unint64_t v6 = 0xE700000000000000;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0xD000000000000015;
  v8._object = (void *)0x80000001C5082BF0;
  String.append(_:)(v8);
  uint64_t v9 = sub_1C4D43AEC();
  if (v10)
  {
    unint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0x6E776F6E6B6E75;
    unint64_t v11 = 0xE700000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0x3D6469757520;
  v13._object = (void *)0xE600000000000000;
  String.append(_:)(v13);
  uint64_t v14 = *(void *)(v0 + OBJC_IVAR___CKLTrafficLogMessage_uuid);
  uint64_t v15 = *(void **)(v0 + OBJC_IVAR___CKLTrafficLogMessage_uuid + 8);
  swift_bridgeObjectRetain();
  v16._uint64_t countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 62;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  return 0;
}

id TrafficLogMessage.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void TrafficLogMessage.init()()
{
}

id TrafficLogMessage.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TrafficLogMessage();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C4D43EDC()
{
  return type metadata accessor for TrafficLogMessage();
}

void sub_1C4D43EE4()
{
  sub_1C4D42D84(319, (unint64_t *)&qword_1EA3CC1B0, MEMORY[0x1E4F27928]);
  if (v0 <= 0x3F)
  {
    sub_1C4D42D84(319, &qword_1EA3CC1B8, MEMORY[0x1E4F276F0]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for TrafficLogMessage(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TrafficLogMessage);
}

uint64_t dispatch thunk of TrafficLogMessage.__allocating_init(uuid:requestMetadata:requestObjects:bodyStreamResetCount:responseMetadata:responseObjects:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t sub_1C4D44044()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C4D4404C()
{
  return swift_beginAccess();
}

void sub_1C4D4441C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_shareAccessRequestCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_shareAccessRequestCompletionBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1C4D45088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,id location)
{
  objc_destroyWeak(v51);
  objc_destroyWeak(v50);
  objc_destroyWeak(v49);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a43);
  _Unwind_Resume(a1);
}

void sub_1C4D450E0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend__handleShareAccessRequestedForURL_responseCode_(WeakRetained, v7, (uint64_t)v6, v5);
}

void sub_1C4D45158(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = objc_msgSend_error(v3, v4, v5);

  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v9 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      unint64_t v12 = v9;
      uint64_t v15 = objc_msgSend_error(v3, v13, v14);
      int v19 = 138412290;
      int64_t v20 = v15;
      _os_log_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_INFO, "Error requesting access to share: %@", (uint8_t *)&v19, 0xCu);
    }
    Swift::String v16 = objc_msgSend_error(v3, v10, v11);
    objc_msgSend_setError_(WeakRetained, v17, (uint64_t)v16);
  }
  uint64_t v18 = objc_msgSend_stateTransitionGroup(WeakRetained, v7, v8);
  dispatch_group_leave(v18);
}

void sub_1C4D457B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D457CC(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_bundleIDsFetchedBlock(*(void **)(a1 + 32), a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, void, void, void, void))v4 + 2))(v4, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64));
}

void sub_1C4D45AB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, v3);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = sub_1C4D45C14;
  void v15[3] = &unk_1E64F01C0;
  void v15[4] = *(void *)(a1 + 32);
  objc_msgSend_setShareMetadataFetchedBlock_(v3, v4, (uint64_t)v15);
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 3221225472;
  uint64_t v11 = sub_1C4D45D90;
  unint64_t v12 = &unk_1E64F01E8;
  objc_copyWeak(&v14, &location);
  uint64_t v13 = *(void *)(a1 + 32);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)&v9);
  uint64_t v8 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v6, v7, v9, v10, v11, v12);
  dispatch_group_enter(v8);

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

void sub_1C4D45BEC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4D45C14(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v11 = v9;
  if (!v8 || v9)
  {
    if (!v9)
    {
      uint64_t v11 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v10, *MEMORY[0x1E4F19DD8], 2003, @"Couldn't get metadata for the share with url %@", v7);
    }
    objc_msgSend__performCallbackForURL_withAppBundleIDs_daemonBundleIDs_error_(*(void **)(a1 + 32), v10, (uint64_t)v7, 0, 0, v11);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unint64_t v12 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v17 = v7;
      _os_log_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_INFO, "Fetched share metadata for URL: %@", buf, 0xCu);
    }
    uint64_t v11 = objc_msgSend_shareMetadatasByURL(*(void **)(a1 + 32), v13, v14);
    objc_msgSend_setObject_forKeyedSubscript_(v11, v15, (uint64_t)v8, v7);
  }
}

void sub_1C4D45D90(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_error(WeakRetained, v3, v4);
  uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v6 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    id v9 = @" with error ";
    uint64_t v10 = &stru_1F2044F30;
    if (v5) {
      uint64_t v10 = v5;
    }
    else {
      id v9 = &stru_1F2044F30;
    }
    int v13 = 138543618;
    uint64_t v14 = v9;
    __int16 v15 = 2112;
    Swift::String v16 = v10;
    _os_log_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_INFO, "Done fetching all share metadata%{public}@%@", (uint8_t *)&v13, 0x16u);
  }
  if (v5)
  {
    uint64_t v11 = objc_msgSend_error(*(void **)(a1 + 32), v7, v8);

    if (!v11) {
      objc_msgSend_setError_(*(void **)(a1 + 32), v7, (uint64_t)v5);
    }
  }
  unint64_t v12 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v7, v8);
  dispatch_group_leave(v12);
}

void sub_1C4D46270(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, v3);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1C4D46354;
  v5[3] = &unk_1E64F0238;
  objc_copyWeak(&v7, &location);
  long long v6 = *(_OWORD *)(a1 + 32);
  objc_msgSend_setCompletionBlock_(v3, v4, (uint64_t)v5);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

void sub_1C4D46338(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4D46354(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = objc_opt_new();
  uint64_t v4 = objc_opt_new();
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id v7 = objc_msgSend_bundleIDs(WeakRetained, v5, v6, 0);
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v40, v50, 16);
  if (v9)
  {
    uint64_t v11 = v9;
    uint64_t v12 = *(void *)v41;
    int v13 = (void *)*MEMORY[0x1E4F1A658];
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v41 != v12) {
          objc_enumerationMutation(v7);
        }
        __int16 v15 = *(void **)(*((void *)&v40 + 1) + 8 * i);
        if (objc_msgSend_hasPrefix_(v15, v10, (uint64_t)v13))
        {
          uint64_t v18 = objc_msgSend_length(v13, v16, v17);
          int64_t v20 = objc_msgSend_substringFromIndex_(v15, v19, v18);
          if (objc_msgSend_length(v20, v21, v22)) {
            objc_msgSend_addObject_(v4, v23, (uint64_t)v20);
          }
        }
        else
        {
          objc_msgSend_addObject_(v3, v16, (uint64_t)v15);
        }
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v40, v50, 16);
    }
    while (v11);
  }

  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v24 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v26 = v24;
    uint64_t v31 = objc_msgSend_error(WeakRetained, v27, v28);
    if (v31) {
      uint64_t v32 = @" with error ";
    }
    else {
      uint64_t v32 = &stru_1F2044F30;
    }
    uint64_t v33 = objc_msgSend_error(WeakRetained, v29, v30);
    uint64_t v34 = (void *)v33;
    uint64_t v35 = *(void *)(a1 + 32);
    if (v33) {
      uint64_t v36 = (__CFString *)v33;
    }
    else {
      uint64_t v36 = &stru_1F2044F30;
    }
    *(_DWORD *)buf = 138543874;
    uint64_t v45 = v32;
    __int16 v46 = 2112;
    uint64_t v47 = v36;
    __int16 v48 = 2112;
    uint64_t v49 = v35;
    _os_log_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_INFO, "Fetched registered bundleIDs%{public}@%@ for URL %@", buf, 0x20u);
  }
  objc_msgSend__performCallbackForURL_withAppBundleIDs_daemonBundleIDs_error_(*(void **)(a1 + 40), v25, *(void *)(a1 + 32), v3, v4, 0);
  unsigned __int8 v39 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v37, v38);
  dispatch_group_leave(v39);
}

void sub_1C4D46D74()
{
  uint64_t v0 = (void *)qword_1EBBCFB28;
  qword_1EBBCFB28 = (uint64_t)&unk_1F20AB970;
}

void sub_1C4D47118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,id a23)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a23);
  _Unwind_Resume(a1);
}

void sub_1C4D47168(uint64_t a1, void *a2, void *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = objc_loadWeakRetained((id *)(a1 + 48));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v9 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    unsigned __int8 v39 = v9;
    *(_DWORD *)buf = 138412546;
    id v44 = v5;
    __int16 v45 = 2048;
    uint64_t v46 = (int)objc_msgSend_code(v6, v40, v41);
    _os_log_debug_impl(&dword_1C4CFF000, v39, OS_LOG_TYPE_DEBUG, "Fetched registered bundleIDs %@ with response code %ld", buf, 0x16u);
  }
  if (objc_msgSend_code(v6, v10, v11) != 1)
  {
    int v13 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v14 = *MEMORY[0x1E4F19DD8];
    uint64_t v15 = sub_1C4E94D98(v6);
    sub_1C4E940D0(v8, v6);
    id v42 = v5;
    v17 = id v16 = v8;
    int64_t v20 = objc_msgSend_error(v6, v18, v19);
    uint64_t v23 = objc_msgSend_errorDescription(v20, v21, v22);
    uint64_t v25 = objc_msgSend_errorWithDomain_code_userInfo_format_(v13, v24, v14, v15, v17, @"Error fetching registered bundle IDs from server: %@", v23);
    objc_msgSend_setError_(WeakRetained, v26, (uint64_t)v25);

    id v8 = v16;
    id v5 = v42;
  }
  objc_msgSend_setBundleIDs_(WeakRetained, v12, (uint64_t)v5);
  if (*MEMORY[0x1E4F1A4E0])
  {
    uint64_t v29 = *(void **)(a1 + 32);
    uint64_t v30 = objc_msgSend_containerID(v29, v27, v28);
    uint64_t v33 = objc_msgSend_containerIdentifier(v30, v31, v32);
    uint64_t v35 = objc_msgSend__unitTestBundleIDsByContainerID_(v29, v34, (uint64_t)v33);

    if (objc_msgSend_count(v35, v36, v37)) {
      objc_msgSend_setBundleIDs_(WeakRetained, v38, (uint64_t)v35);
    }
  }
}

void sub_1C4D473E8(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = v4;
    uint64_t v10 = (objc_class *)objc_opt_class();
    uint64_t v11 = NSStringFromClass(v10);
    uint64_t v14 = objc_msgSend_ckShortDescription(WeakRetained, v12, v13);
    uint64_t v17 = objc_msgSend_error(v3, v15, v16);
    int v18 = 138544130;
    uint64_t v19 = v11;
    __int16 v20 = 2048;
    id v21 = WeakRetained;
    __int16 v22 = 2114;
    uint64_t v23 = v14;
    __int16 v24 = 2112;
    uint64_t v25 = v17;
    _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "Fetch registered bundleIDs operation <%{public}@: %p; %{public}@> finished with error %@",
      (uint8_t *)&v18,
      0x2Au);
  }
  id v7 = objc_msgSend_error(v3, v5, v6);
  objc_msgSend_finishWithError_(WeakRetained, v8, (uint64_t)v7);
}

uint64_t sub_1C4D47B98(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        int v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;

        goto LABEL_44;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 56) |= 1u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_43:
        *(_DWORD *)(a1 + 16) = v21;
        goto LABEL_44;
      case 3u:
        uint64_t v25 = objc_alloc_init(CKDPRecord);
        objc_msgSend_addRecord_((void *)a1, v26, (uint64_t)v25);
        goto LABEL_29;
      case 4u:
        uint64_t v25 = objc_alloc_init(CKDPRecord);
        objc_storeStrong((id *)(a1 + 48), v25);
LABEL_29:
        if (!PBReaderPlaceMark() || (CKDPRecordReadFrom((uint64_t)v25, a2) & 1) == 0) {
          goto LABEL_46;
        }
        goto LABEL_39;
      case 5u:
        uint64_t v25 = objc_alloc_init(CKDPShareMetadata);
        objc_storeStrong((id *)(a1 + 40), v25);
        if (!PBReaderPlaceMark() || (CKDPShareMetadataReadFrom((uint64_t)v25, a2) & 1) == 0) {
          goto LABEL_46;
        }
        goto LABEL_39;
      case 8u:
        uint64_t v25 = objc_alloc_init(CKDPZone);
        objc_storeStrong((id *)(a1 + 24), v25);
        if (PBReaderPlaceMark() && sub_1C4E22544((uint64_t)v25, a2))
        {
LABEL_39:
          PBReaderRecallMark();

LABEL_44:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_46:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_44;
    }
  }
}

void sub_1C4D490EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t sub_1C4D49128(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4D49138(uint64_t a1)
{
}

void sub_1C4D49140(void *a1, void *a2, void *a3, unsigned char *a4)
{
  id v15 = a2;
  id v8 = a3;
  unsigned int v9 = (void *)a1[4];
  if (!v9 || objc_msgSend_containsObject_(v9, v7, (uint64_t)v15))
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v11 = *(void **)(*(void *)(a1[5] + 8) + 40);
      if (!v11)
      {
        uint64_t v12 = objc_opt_new();
        uint64_t v13 = *(void *)(a1[5] + 8);
        BOOL v14 = *(void **)(v13 + 40);
        *(void *)(v13 + 40) = v12;

        uint64_t v11 = *(void **)(*(void *)(a1[5] + 8) + 40);
      }
      objc_msgSend_addObject_(v11, v10, (uint64_t)v8);
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 0;
      *a4 = 1;
    }
  }
}

void sub_1C4D495CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1C4D495F0(uint64_t a1, const char *a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  id v3 = objc_msgSend_entriesWithValues_label_error_setupBlock_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), off_1E64F0308, 0, &unk_1F2042710);
  id v8 = objc_msgSend_nextObject(v3, v4, v5);
  if (!v8)
  {
    BOOL v14 = 0;
LABEL_11:
    id v32 = 0;
    goto LABEL_12;
  }
  while (1)
  {
    unsigned int v9 = *(void **)(a1 + 32);
    unint64_t v10 = objc_msgSend_knownUserKeys(v8, v6, v7);
    LOBYTE(v9) = objc_msgSend__cachedRecordKnownUserKeyData_satisfiesRequiredKeys_(v9, v11, (uint64_t)v10, *(void *)(a1 + 48));

    if (v9) {
      break;
    }
    BOOL v14 = objc_msgSend_nextObject(v3, v12, v13);

    id v8 = v14;
    if (!v14) {
      goto LABEL_11;
    }
  }
  id v15 = (id)objc_msgSend_fetchCacheEntryRecordData_(*(void **)(a1 + 32), v12, (uint64_t)v8);
  uint64_t v16 = [CKDPRecord alloc];
  char v19 = objc_msgSend_recordData(v8, v17, v18);
  BOOL v14 = objc_msgSend_initWithData_(v16, v20, (uint64_t)v19);

  if (!v14) {
    goto LABEL_11;
  }
  uint64_t v21 = [CKDProtocolTranslator alloc];
  unint64_t v23 = objc_msgSend_initWithContainer_databaseScope_requireContainerScopedUserID_(v21, v22, *(void *)(a1 + 56), *(void *)(a1 + 80), 0);
  uint64_t v26 = objc_msgSend_zoneID(*(void **)(a1 + 64), v24, v25);
  uint64_t v29 = objc_msgSend_anonymousCKUserID(v26, v27, v28);
  id v59 = 0;
  uint64_t v31 = objc_msgSend_recordFromPRecord_asAnonymousCKUserID_error_(v23, v30, (uint64_t)v14, v29, &v59);
  id v32 = v59;
  uint64_t v33 = *(void *)(*(void *)(a1 + 72) + 8);
  uint64_t v34 = *(void **)(v33 + 40);
  *(void *)(v33 + 40) = v31;

  uint64_t v36 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  if (v36)
  {
    objc_msgSend_setWasCached_(v36, v35, 1);
    unsigned __int8 v39 = objc_msgSend_entitlements(*(void **)(a1 + 56), v37, v38);
    uint64_t hasProtectionDataEntitlement = objc_msgSend_hasProtectionDataEntitlement(v39, v40, v41);
    objc_msgSend_setSerializeProtectionData_(*(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40), v43, hasProtectionDataEntitlement);

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v46 = objc_msgSend_entitlements(*(void **)(a1 + 56), v44, v45);
      char hasOutOfProcessUIEntitlement = objc_msgSend_hasOutOfProcessUIEntitlement(v46, v47, v48);
      if (hasOutOfProcessUIEntitlement)
      {
        objc_msgSend_setSerializePersonalInfo_(*(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40), v49, 1);
      }
      else
      {
        uint64_t v31 = objc_msgSend_entitlements(*(void **)(a1 + 56), v49, v50);
        uint64_t hasParticipantPIIEntitlement = objc_msgSend_hasParticipantPIIEntitlement(v31, v54, v55);
        objc_msgSend_setSerializePersonalInfo_(*(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40), v57, hasParticipantPIIEntitlement);
      }
      if ((hasOutOfProcessUIEntitlement & 1) == 0) {
    }
      }
    id v58 = (id)objc_msgSend_extendExpiration_(*(void **)(a1 + 32), v44, (uint64_t)v8);

    unint64_t v23 = v32;
    id v32 = 0;
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unint64_t v53 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      id v61 = v32;
      __int16 v62 = 2112;
      uint64_t v63 = v14;
      _os_log_error_impl(&dword_1C4CFF000, v53, OS_LOG_TYPE_ERROR, "Failed to convert pRecord %@ : %@", buf, 0x16u);
    }
  }

LABEL_12:
  return v32;
}

void sub_1C4D49964(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_msgSend_setFetchedProperties_(v2, v3, (uint64_t)&unk_1F20AB5E0);
  objc_msgSend_orderDescendingByProperty_(v2, v4, @"modificationTime");
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], v5, @"recordID = $RECORDID AND environment = $ENVIRONMENT AND databaseScope = $SCOPE AND dsid = $DSID");
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v2, v6, (uint64_t)v7);
}

uint64_t sub_1C4D4A144(uint64_t a1)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v98[0] = MEMORY[0x1E4F143A8];
  v98[1] = 3221225472;
  v98[2] = sub_1C4D4A664;
  v98[3] = &unk_1E64F0370;
  id v99 = *(id *)(a1 + 48);
  uint64_t v5 = objc_msgSend_entriesWithValues_label_error_setupBlock_(v2, v4, v3, 0, 0, v98);
  uint64_t v8 = objc_msgSend_nextObject(v5, v6, v7);
  if (v8)
  {
    uint64_t v12 = (void *)v8;
    *(void *)&long long v11 = 138412546;
    long long v88 = v11;
    uint64_t v90 = v5;
    while (1)
    {
      uint64_t v13 = *(void **)(a1 + 32);
      BOOL v14 = objc_msgSend_knownUserKeys(v12, v9, v10, v88);
      LODWORD(v13) = objc_msgSend__cachedRecordKnownUserKeyData_satisfiesRequiredKeys_(v13, v15, (uint64_t)v14, *(void *)(a1 + 56));

      if (v13)
      {
        id v18 = (id)objc_msgSend_fetchCacheEntryRecordData_(*(void **)(a1 + 32), v16, (uint64_t)v12);
        char v19 = [CKDPRecord alloc];
        uint64_t v22 = objc_msgSend_recordData(v12, v20, v21);
        char v24 = objc_msgSend_initWithData_(v19, v23, (uint64_t)v22);

        if (v24) {
          break;
        }
      }
      unint64_t v52 = 0;
      unint64_t v53 = 0;
LABEL_18:
      uint64_t v54 = objc_msgSend_nextObject(v5, v16, v17);

      uint64_t v12 = (void *)v54;
      if (!v54) {
        goto LABEL_39;
      }
    }
    uint64_t v25 = [CKDProtocolTranslator alloc];
    uint64_t v27 = objc_msgSend_initWithContainer_databaseScope_requireContainerScopedUserID_(v25, v26, *(void *)(a1 + 64), *(void *)(a1 + 88), 0);
    uint64_t v30 = objc_msgSend_recordIdentifier(v24, v28, v29);

    uint64_t v91 = v24;
    if (v30)
    {
      uint64_t v33 = objc_msgSend_recordIdentifier(v24, v31, v32);
      id v97 = 0;
      uint64_t v35 = objc_msgSend_recordIDFromPRecordIdentifier_error_(v27, v34, (uint64_t)v33, &v97);
      id v36 = v97;

      unsigned __int8 v39 = objc_msgSend_options(*(void **)(a1 + 64), v37, v38);
      int v42 = objc_msgSend_useAnonymousToServerShareParticipants(v39, v40, v41);

      id v45 = 0;
      if (v42 && v35)
      {
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        id v46 = *(id *)(a1 + 72);
        id v45 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v47, (uint64_t)&v93, v104, 16);
        if (v45)
        {
          id v89 = v36;
          uint64_t v49 = *(void *)v94;
          while (2)
          {
            for (uint64_t i = 0; i != v45; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v94 != v49) {
                objc_enumerationMutation(v46);
              }
              uint64_t v51 = *(void **)(*((void *)&v93 + 1) + 8 * i);
              if (objc_msgSend_isEqualIgnoringAnonymousUserIDsToRecordID_(v51, v48, (uint64_t)v35))
              {
                id v45 = v51;
                goto LABEL_22;
              }
            }
            id v45 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v48, (uint64_t)&v93, v104, 16);
            if (v45) {
              continue;
            }
            break;
          }
LABEL_22:
          id v36 = v89;
        }
      }
      uint64_t v56 = objc_msgSend_zoneID(v45, v43, v44);
      id v59 = objc_msgSend_anonymousCKUserID(v56, v57, v58);
      id v92 = v36;
      objc_msgSend_recordFromPRecord_asAnonymousCKUserID_error_(v27, v60, (uint64_t)v24, v59, &v92);
      id v61 = v27;
      unint64_t v52 = v62 = v36;
      id v55 = v92;

      uint64_t v27 = v61;
      uint64_t v5 = v90;
      if (v52) {
        goto LABEL_30;
      }
    }
    else
    {
      id v55 = 0;
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v64 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = v88;
      id v101 = v55;
      __int16 v102 = 2112;
      os_log_type_t v103 = v91;
      _os_log_error_impl(&dword_1C4CFF000, v64, OS_LOG_TYPE_ERROR, "Failed to convert pRecord %@ : %@", buf, 0x16u);
    }
    unint64_t v52 = 0;
LABEL_30:
    objc_msgSend_setWasCached_(v52, v63, 1);

    if (v52)
    {
      unint64_t v53 = v91;
      if (objc_msgSend__cachedRecordHasValidAssets_forRequiredKeys_(*(void **)(a1 + 32), v16, (uint64_t)v52, *(void *)(a1 + 56)))
      {
        id v65 = (id)objc_msgSend__trimRecord_toRequiredKeys_(*(void **)(a1 + 32), v16, (uint64_t)v52, *(void *)(a1 + 56));
        uint64_t v68 = objc_msgSend_entitlements(*(void **)(a1 + 64), v66, v67);
        uint64_t hasProtectionDataEntitlement = objc_msgSend_hasProtectionDataEntitlement(v68, v69, v70);
        objc_msgSend_setSerializeProtectionData_(v52, v72, hasProtectionDataEntitlement);

        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v75 = objc_msgSend_entitlements(*(void **)(a1 + 64), v73, v74);
          if (objc_msgSend_hasOutOfProcessUIEntitlement(v75, v76, v77))
          {
            objc_msgSend_setSerializePersonalInfo_(v52, v78, 1);
          }
          else
          {
            uint64_t v80 = objc_msgSend_entitlements(*(void **)(a1 + 64), v78, v79);
            uint64_t hasParticipantPIIEntitlement = objc_msgSend_hasParticipantPIIEntitlement(v80, v81, v82);
            objc_msgSend_setSerializePersonalInfo_(v52, v84, hasParticipantPIIEntitlement);
          }
        }
        objc_msgSend_addObject_(*(void **)(a1 + 80), v73, (uint64_t)v52);
        id v86 = (id)objc_msgSend_extendExpiration_(*(void **)(a1 + 32), v85, (uint64_t)v12);
      }
    }
    else
    {
      unint64_t v53 = v91;
    }
    goto LABEL_18;
  }
LABEL_39:

  return 0;
}

void sub_1C4D4A664(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_setFetchedProperties_(v3, v4, (uint64_t)&unk_1F20AB5F8);
  objc_msgSend_orderDescendingByProperty_(v3, v5, @"modificationTime");
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], v6, @"environment = $ENVIRONMENT AND databaseScope = $SCOPE AND dsid = $DSID AND recordID IN %@", *(void *)(a1 + 32));
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v3, v7, (uint64_t)v8);
}

uint64_t sub_1C4D4A8CC(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"recordID = $RECORDID AND environment = $ENVIRONMENT AND dsid = $DSID");
}

void sub_1C4D4B098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D4B0DC()
{
  return 1;
}

uint64_t sub_1C4D4B0E4(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t result = CKIsIndexedArrayKey();
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

id sub_1C4D4B128(uint64_t a1, const char *a2)
{
  id v3 = objc_msgSend_fetchProperties_inObject_matchingDBProperties_label_(*(void **)(a1 + 32), a2, (uint64_t)&unk_1F20AB610, *(void *)(a1 + 40), &unk_1F20AB628, off_1E64F0438);
  if (objc_msgSend_CKIsNoMatchingRowError_(MEMORY[0x1E4F28C58], v4, (uint64_t)v3))
  {
    objc_msgSend_setModificationTime_(*(void **)(a1 + 40), v5, *(void *)(a1 + 48));
    uint64_t v8 = objc_msgSend_insertObject_(*(void **)(a1 + 32), v7, *(void *)(a1 + 40));

    id v3 = (void *)v8;
  }
  else if (!v3)
  {
    unsigned int v9 = objc_msgSend_modificationTime(*(void **)(a1 + 40), v5, v6);
    objc_msgSend_timeIntervalSinceDate_(v9, v10, *(void *)(a1 + 48));
    double v12 = v11;

    if (v12 >= 0.0)
    {
      id v3 = 0;
    }
    else
    {
      objc_msgSend_setModificationTime_(*(void **)(a1 + 40), v13, *(void *)(a1 + 48));
      id v3 = objc_msgSend_updateUsingObject_(*(void **)(a1 + 32), v14, *(void *)(a1 + 40));
    }
  }
  return v3;
}

void sub_1C4D4B5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D4B5E4(uint64_t a1, const char *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  objc_msgSend_entriesWithValues_label_error_setupBlock_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), off_1E64F0478, 0, &unk_1F2042770);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v19, v23, 16);
  if (v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = *(void *)v20;
    while (2)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(v3);
        }
        double v11 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        double v12 = *(void **)(a1 + 32);
        uint64_t v13 = objc_msgSend_knownUserKeys(v11, v6, v7, (void)v19);
        LODWORD(v12) = objc_msgSend__cachedRecordKnownUserKeyData_satisfiesRequiredKeys_(v12, v14, (uint64_t)v13, *(void *)(a1 + 48));

        if (v12)
        {
          uint64_t v15 = objc_msgSend_etag(v11, v6, v7);
          uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8);
          uint64_t v17 = *(void **)(v16 + 40);
          *(void *)(v16 + 40) = v15;

          goto LABEL_11;
        }
      }
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v6, (uint64_t)&v19, v23, 16);
      if (v8) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return 0;
}

void sub_1C4D4B75C(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_msgSend_setFetchedProperties_(v2, v3, (uint64_t)&unk_1F20AB640);
  objc_msgSend_orderDescendingByProperty_(v2, v4, @"modificationTime");
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], v5, @"recordID = $RECORDID AND environment = $ENVIRONMENT AND databaseScope = $SCOPE AND dsid = $DSID");
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v2, v6, (uint64_t)v7);
}

uint64_t sub_1C4D4B9F8(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"recordID = $RECORDID AND databaseScope = $SCOPE");
}

uint64_t sub_1C4D4BBD8(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"databaseScope = $SCOPE");
}

uint64_t sub_1C4D4BCE4(uint64_t a1, const char *a2)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"zoneIdentifier = $ZONEID");
}

void sub_1C4D4CAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D4CAD8(uint64_t a1, const char *a2, void *a3)
{
  uint64_t result = objc_msgSend_count(a3, a2, (uint64_t)a3);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += 69930 * result;
  return result;
}

uint64_t sub_1C4D4CB1C(uint64_t a1, const char *a2, void *a3)
{
  uint64_t result = objc_msgSend_count(a3, a2, (uint64_t)a3);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += 69930 * result;
  return result;
}

void sub_1C4D4CC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D4CC4C(uint64_t a1, const char *a2, void *a3)
{
  uint64_t result = objc_msgSend_count(a3, a2, (uint64_t)a3);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += 69930 * result;
  return result;
}

uint64_t sub_1C4D4CD5C(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3);
}

uint64_t sub_1C4D4CD64(uint64_t a1, const char *a2)
{
  return objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 24), a2, (uint64_t)a2);
}

uint64_t sub_1C4D4CE40(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3);
}

uint64_t sub_1C4D4CE48(uint64_t a1, const char *a2)
{
  return objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 40), a2, (uint64_t)a2);
}

uint64_t sub_1C4D4CF24(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3);
}

uint64_t sub_1C4D4CF2C(uint64_t a1, const char *a2)
{
  return objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 32), a2, (uint64_t)a2);
}

uint64_t sub_1C4D4D02C(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3);
}

id sub_1C4D4D0D8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 24);
  id v4 = a2;
  uint64_t v6 = objc_msgSend_objectForKeyedSubscript_(v3, v5, (uint64_t)v4);
  uint64_t v8 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 32), v7, (uint64_t)v4);

  if (v6) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (v6) {
      double v11 = v6;
    }
    else {
      double v11 = v8;
    }
    id v12 = v11;
  }
  else
  {
    objc_msgSend_arrayByAddingObjectsFromArray_(v6, v9, (uint64_t)v8);
    id v12 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v13 = v12;

  return v13;
}

id sub_1C4D4D308(uint64_t a1, void *a2)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 24);
  id v4 = a2;
  uint64_t v6 = objc_msgSend_objectForKeyedSubscript_(v3, v5, (uint64_t)v4);
  id v7 = (void *)v6;
  uint64_t v8 = (void *)MEMORY[0x1E4F1CBF0];
  if (v6) {
    uint64_t v9 = (void *)v6;
  }
  else {
    uint64_t v9 = (void *)MEMORY[0x1E4F1CBF0];
  }
  id v10 = v9;

  uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 32), v11, (uint64_t)v4);
  uint64_t v13 = (void *)v12;
  if (v12) {
    BOOL v14 = (void *)v12;
  }
  else {
    BOOL v14 = v8;
  }
  id v15 = v14;

  uint64_t v17 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 40), v16, (uint64_t)v4);

  if (v17) {
    id v18 = v17;
  }
  else {
    id v18 = v8;
  }
  id v19 = v18;

  long long v21 = objc_msgSend_arrayByAddingObjectsFromArray_(v10, v20, (uint64_t)v15);
  unint64_t v23 = objc_msgSend_arrayByAddingObjectsFromArray_(v21, v22, (uint64_t)v19);

  return v23;
}

void sub_1C4D4D508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D4D520(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4D4D530(uint64_t a1)
{
}

uint64_t sub_1C4D4D538(uint64_t a1, const char *a2, void *a3, BOOL *a4)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1C4D4D5D8;
  v7[3] = &unk_1E64F0578;
  v7[4] = *(void *)(a1 + 32);
  uint64_t result = objc_msgSend_enumerateObjectsUsingBlock_(a3, a2, (uint64_t)v7);
  *a4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) != 0;
  return result;
}

void sub_1C4D4D5D8(uint64_t a1, void *a2, uint64_t a3, BOOL *a4)
{
  uint64_t v6 = objc_msgSend_error(a2, (const char *)a2, a3);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) != 0;
}

void sub_1C4D4D720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D4D738(uint64_t a1, const char *a2, void *a3, BOOL *a4)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1C4D4D7D8;
  v7[3] = &unk_1E64F0578;
  v7[4] = *(void *)(a1 + 32);
  uint64_t result = objc_msgSend_enumerateObjectsUsingBlock_(a3, a2, (uint64_t)v7);
  *a4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) != 0;
  return result;
}

void sub_1C4D4D7D8(uint64_t a1, void *a2, uint64_t a3, BOOL *a4)
{
  uint64_t v6 = objc_msgSend_error(a2, (const char *)a2, a3);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) != 0;
}

uint64_t sub_1C4D4DB64(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_31:
        *(void *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4D4E08C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = WeakRetained;
    id v4 = objc_msgSend_itemGroupSetCompletionGroup(WeakRetained, v2, v3);
    dispatch_group_leave(v4);

    id WeakRetained = v5;
  }
}

void sub_1C4D4E3DC(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_itemGroupSetCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_itemGroupSetCompletionBlock(*(void **)(a1 + 32), v5, v6);
    uint64_t v7 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
    unint64_t v10 = objc_msgSend_itemGroupSet(*(void **)(a1 + 32), v8, v9);
    ((void (**)(void, void *))v7)[2](v7, v10);

    uint64_t v11 = *(void *)(a1 + 32);
    MEMORY[0x1F4181798](v11, sel_setItemGroupSetCompletionBlock_, 0);
  }
}

BOOL sub_1C4D4E644(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

uint64_t sub_1C4D4EA60(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_valueID(a2, (const char *)a2, a3);
}

id sub_1C4D4EB20(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = objc_msgSend_valueID(a2, (const char *)a2, a3);
  uint64_t v6 = objc_msgSend_zoneID(v3, v4, v5);

  return v6;
}

void sub_1C4D4F08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D4F0B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4D4F0C8(uint64_t a1)
{
}

id sub_1C4D4F0D0(uint64_t a1, void *a2)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v7 = objc_msgSend_operationType(v4, v5, v6);
  unsigned int v9 = objc_msgSend_operationRequestWithType_(v4, v8, v7);
  unint64_t v12 = objc_msgSend_deltasByRequestID(*(void **)(a1 + 32), v10, v11);
  BOOL v15 = objc_msgSend_request(v9, v13, v14);
  unsigned int v18 = objc_msgSend_operationUUID(v15, v16, v17);
  objc_msgSend_setObject_forKeyedSubscript_(v12, v19, (uint64_t)v3, v18);

  if (!objc_msgSend_requiresCKAnonymousUserIDs(*(void **)(a1 + 32), v20, v21)) {
    goto LABEL_4;
  }
  uint64_t v24 = objc_msgSend_valueID(v3, v22, v23);
  uint64_t v27 = objc_msgSend_zoneID(v24, v25, v26);

  uint64_t v30 = objc_msgSend_anonymousCKUserID(v27, v28, v29);

  if (v30)
  {
    uint64_t v33 = objc_msgSend_anonymousCKUserID(v27, v31, v32);
    id v36 = objc_msgSend_CKDPIdentifier_User(v33, v34, v35);
    unsigned __int8 v39 = objc_msgSend_request(v9, v37, v38);
    objc_msgSend_setAnonymousCKUserID_(v39, v40, (uint64_t)v36);

LABEL_4:
    uint64_t v41 = objc_msgSend_translator(*(void **)(a1 + 32), v22, v23);
    uint64_t v44 = objc_msgSend_valueID(v3, v42, v43);
    id v46 = objc_msgSend_pMergeableValueIdentifierFromMergeableValueID_(v41, v45, (uint64_t)v44);

    uint64_t v49 = objc_msgSend_translator(*(void **)(a1 + 32), v47, v48);
    uint64_t v50 = *(void *)(*(void *)(a1 + 40) + 8);
    id obj = *(id *)(v50 + 40);
    unint64_t v52 = objc_msgSend_pMergeableDeltaFromDelta_error_(v49, v51, (uint64_t)v3, &obj);
    objc_storeStrong((id *)(v50 + 40), obj);

    if (v52)
    {
      unint64_t v53 = objc_alloc_init(CKDPMergeableDeltaSaveRequest);
      objc_msgSend_setIdentifier_(v53, v54, (uint64_t)v46);
      objc_msgSend_setDelta_(v53, v55, (uint64_t)v52);
      objc_msgSend_setMergeableDeltaSaveRequest_(v9, v56, (uint64_t)v53);
      id v57 = v9;
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v58 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v77 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v80 = v77;
        _os_log_error_impl(&dword_1C4CFF000, v58, OS_LOG_TYPE_ERROR, "Failed to generate delta proto with error: %@", buf, 0xCu);
      }
      id v57 = 0;
    }

    goto LABEL_12;
  }
  uint64_t v60 = objc_opt_new();
  __int16 v62 = objc_msgSend_stringWithFormat_(NSString, v61, @"An anonymousCKUserID is required to upload mergeable deltas when using anonymous to server share participants");
  objc_msgSend_setObject_forKeyedSubscript_(v60, v63, (uint64_t)v62, *MEMORY[0x1E4F28568]);
  uint64_t v66 = objc_msgSend_operation(*(void **)(a1 + 32), v64, v65);
  uint64_t v69 = objc_msgSend_topmostParentOperation(v66, v67, v68);

  uint64_t v73 = objc_msgSend_operationID(v69, v70, v71);
  if (v73) {
    objc_msgSend_setObject_forKeyedSubscript_(v60, v72, (uint64_t)v73, *MEMORY[0x1E4F19C50]);
  }
  uint64_t v74 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v72, *MEMORY[0x1E4F19DD8], 5015, v60);
  uint64_t v75 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v76 = *(void **)(v75 + 40);
  *(void *)(v75 + 40) = v74;

  id v57 = 0;
LABEL_12:

  return v57;
}

BOOL CKDPDateStatisticsReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2)
      {
        id v17 = objc_alloc_init(MEMORY[0x1E4F19EF8]);
        uint64_t v18 = 16;
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
          continue;
        }
        id v17 = objc_alloc_init(MEMORY[0x1E4F19EF8]);
        uint64_t v18 = 8;
      }
      objc_storeStrong((id *)(a1 + v18), v17);
      if (!PBReaderPlaceMark() || (CKDPDateReadFrom() & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4D50184(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = objc_msgSend_participants(a1, a2, a3, 0);
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v11, v15, 16);
  if (v7)
  {
    uint64_t v8 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v3);
        }
        if (objc_msgSend_hasEncryptedPersonalInfo(*(void **)(*((void *)&v11 + 1) + 8 * i), v5, v6))
        {
          uint64_t v7 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v5, (uint64_t)&v11, v15, 16);
      if (v7) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v7;
}

void sub_1C4D50280(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  unsigned int v9 = objc_msgSend_participants(a1, v7, v8, 0);
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v20, v24, 16);
  if (v11)
  {
    uint64_t v14 = v11;
    uint64_t v15 = *(void *)v21;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v21 != v15) {
          objc_enumerationMutation(v9);
        }
        id v17 = *(void **)(*((void *)&v20 + 1) + 8 * v16);
        uint64_t v18 = objc_msgSend_recordID(a1, v12, v13);
        objc_msgSend__encryptPersonalInfoWithPCSBlob_inShareWithID_pcsManager_(v17, v19, a3, v18, v6);

        ++v16;
      }
      while (v14 != v16);
      uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v20, v24, 16);
    }
    while (v14);
  }
}

void sub_1C4D503B8(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  unsigned int v9 = objc_msgSend_participants(a1, v7, v8, 0);
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v20, v24, 16);
  if (v11)
  {
    uint64_t v14 = v11;
    uint64_t v15 = *(void *)v21;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v21 != v15) {
          objc_enumerationMutation(v9);
        }
        id v17 = *(void **)(*((void *)&v20 + 1) + 8 * v16);
        uint64_t v18 = objc_msgSend_recordID(a1, v12, v13);
        objc_msgSend__decryptPersonalInfoWithPCSBlob_inShareWithID_pcsManager_(v17, v19, a3, v18, v6);

        ++v16;
      }
      while (v14 != v16);
      uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v20, v24, 16);
    }
    while (v14);
  }
}

void sub_1C4D504F0(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v17 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v18 = v17;
    long long v21 = objc_msgSend_recordID(a1, v19, v20);
    *(_DWORD *)buf = 138412290;
    uint64_t v34 = v21;
    _os_log_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_INFO, "Ingesting manatee sharing invitation data for share %@", buf, 0xCu);
  }
  objc_initWeak((id *)buf, a1);
  uint64_t v24 = objc_msgSend_pcsManager(v14, v22, v23);
  uint64_t v27 = objc_msgSend_sharingInvitationData(v12, v25, v26);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = sub_1C4D50738;
  v30[3] = &unk_1E64F0658;
  objc_copyWeak(&v32, (id *)buf);
  id v28 = v16;
  id v31 = v28;
  objc_msgSend_createIngestedPPPCSDataFromInvitationData_shareModificationDate_requestorOperationID_completionHandler_(v24, v29, (uint64_t)v27, v13, v15, v30);

  objc_destroyWeak(&v32);
  objc_destroyWeak((id *)buf);
}

void sub_1C4D5070C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D50738(uint64_t a1, void *a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  unint64_t v10 = objc_msgSend_currentUserParticipant(WeakRetained, v8, v9);
  if (v5 && !v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v11 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      int v14 = 138412290;
      id v15 = v10;
      _os_log_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_INFO, "Setting per-participant PCS on self participant: %@", (uint8_t *)&v14, 0xCu);
    }
    objc_msgSend_setProtectionInfo_(v10, v12, (uint64_t)v5);
  }
  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    (*(void (**)(uint64_t, id, id))(v13 + 16))(v13, v5, v6);
  }
}

uint64_t sub_1C4D50888(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return objc_msgSend__prepPCSDataWithContainer_databaseScope_publicSharingKey_oonPrivateKey_removeServerSpecifiedKeys_sharedRecordZone_requestorOperationID_completionHandler_(a1, a2, a3, a4, 0, 0, a5, 0, a6, a7);
}

uint64_t sub_1C4D508C0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return objc_msgSend__prepPCSDataWithContainer_databaseScope_publicSharingKey_oonPrivateKey_removeServerSpecifiedKeys_sharedRecordZone_requestorOperationID_completionHandler_(a1, a2, a3, a4, a5, a6, a7, 0, a8, a9);
}

void sub_1C4D508EC(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v9 = objc_msgSend_pcsManager(v6, v7, v8);
  uint64_t v12 = objc_msgSend_serviceTypeForSharing(v9, v10, v11);

  int v14 = objc_msgSend_dataWithShare_serviceType_(CKDSharePCSData, v13, (uint64_t)a1, v12);
  if (objc_msgSend_invitedPCS(v14, v15, v16))
  {
    objc_msgSend_setSharePCSData_(a1, v17, (uint64_t)v14);
    uint64_t v20 = objc_msgSend_invitedPCS(v14, v18, v19);
    uint64_t v23 = objc_msgSend_pcsManager(v6, v21, v22);
    objc_msgSend__encryptPersonalInfoWithPCSBlob_pcsManager_(a1, v24, v20, v23);

    uint64_t v25 = dispatch_group_create();
    dispatch_group_enter(v25);
    id v28 = objc_msgSend_pcsCache(v6, v26, v27);
    id v31 = objc_msgSend_recordID(a1, v29, v30);
    v39[0] = MEMORY[0x1E4F143A8];
    v39[1] = 3221225472;
    _OWORD v39[2] = sub_1C4D50B40;
    v39[3] = &unk_1E64F0680;
    v39[4] = a1;
    long long v40 = v25;
    id v32 = v25;
    objc_msgSend__setPCSData_forFetchedShareID_withScope_withCompletionHandler_(v28, v33, (uint64_t)v14, v31, a4, v39);

    dispatch_group_wait(v32, 0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v34 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = v34;
      uint64_t v38 = objc_msgSend_recordID(a1, v36, v37);
      *(_DWORD *)buf = 138412290;
      int v42 = v38;
      _os_log_error_impl(&dword_1C4CFF000, v35, OS_LOG_TYPE_ERROR, "Didn't get any pre-decrypted share PCS for share %@", buf, 0xCu);
    }
  }
}

void sub_1C4D50B40(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v4 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = v4;
    uint64_t v9 = objc_msgSend_recordID(v5, v7, v8);
    int v10 = 138412546;
    uint64_t v11 = v9;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_debug_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_DEBUG, "Error setting PCS data for share %@ in the cache: %@", (uint8_t *)&v10, 0x16u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1C4D50C64(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, char a7, void *a8, void *a9, void *a10)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v15 = a3;
  id v48 = a5;
  id v49 = a6;
  id v16 = a8;
  id v17 = a9;
  id v46 = a10;
  v57[0] = 0;
  v57[1] = v57;
  v57[2] = 0x3032000000;
  v57[3] = sub_1C4D5100C;
  v57[4] = sub_1C4D5101C;
  id v58 = 0;
  if (v16)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v20 = (id)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      int v42 = objc_msgSend_zoneID(v16, v21, v22);
      id v45 = objc_msgSend_recordID(a1, v43, v44);
      *(_DWORD *)id location = 138412546;
      *(void *)&location[4] = v42;
      __int16 v60 = 2112;
      id v61 = v45;
      _os_log_debug_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEBUG, "Got a shared zone %@ to prep PCS for share %@", location, 0x16u);
    }
    uint64_t v24 = objc_msgSend_dataWithZone_(CKDZonePCSData, v23, (uint64_t)v16);
  }
  else
  {
    uint64_t v24 = 0;
  }
  uint64_t v25 = objc_msgSend_containerID(v15, v18, v19);
  if (objc_msgSend_specialContainerType(v25, v26, v27) == 4)
  {
    uint64_t v30 = 1;
  }
  else
  {
    id v31 = objc_msgSend_pcsManager(v15, v28, v29);
    int IsManatee = objc_msgSend_currentServiceIsManatee(v31, v32, v33);

    if (IsManatee) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = 2;
    }
  }
  objc_initWeak((id *)location, a1);
  uint64_t v37 = objc_msgSend_pcsManager(v15, v35, v36);
  v50[0] = MEMORY[0x1E4F143A8];
  v50[1] = 3221225472;
  v50[2] = sub_1C4D51024;
  v50[3] = &unk_1E64F06D0;
  objc_copyWeak(v55, (id *)location);
  uint64_t v54 = v57;
  char v56 = a7;
  id v38 = v15;
  id v51 = v38;
  v55[1] = a4;
  id v39 = v24;
  id v52 = v39;
  id v40 = v46;
  id v53 = v40;
  objc_msgSend_pcsDataFromFetchedShare_withPublicSharingKey_oonPrivateKey_withServiceType_requestorOperationID_completionHandler_(v37, v41, (uint64_t)a1, v48, v49, v30, v17, v50);

  objc_destroyWeak(v55);
  objc_destroyWeak((id *)location);

  _Block_object_dispose(v57, 8);
}

void sub_1C4D50FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D5100C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4D5101C(uint64_t a1)
{
}

void sub_1C4D51024(uint64_t a1, void *a2, void *a3)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v9 = WeakRetained;
  if (v5 && (objc_msgSend_setSharePCSData_(WeakRetained, v8, (uint64_t)v5), !v6))
  {
    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v22 = objc_msgSend_invitedKeysToRemove(v9, v10, v11);
      if (objc_msgSend_count(v22, v23, v24))
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v25 = (void *)*MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
        {
          id v28 = v25;
          *(_DWORD *)buf = 134218242;
          uint64_t v79 = objc_msgSend_count(v22, v29, v30);
          __int16 v80 = 2112;
          uint64_t v81 = v22;
          _os_log_impl(&dword_1C4CFF000, v28, OS_LOG_TYPE_INFO, "Need to remove %lu public key(s) from the private share PCS: %@", buf, 0x16u);
        }
        id v31 = objc_msgSend_pcsManager(*(void **)(a1 + 32), v26, v27);
        uint64_t v34 = objc_msgSend_invitedPCS(v5, v32, v33);
        objc_msgSend_removePublicKeys_fromPCS_(v31, v35, (uint64_t)v22, v34);
      }
    }
    if (objc_msgSend_invitedPCS(v5, v10, v11))
    {
      id v17 = objc_msgSend_recordID(v9, v36, v37);
      uint64_t v40 = objc_msgSend_invitedPCS(v5, v38, v39);
      uint64_t v43 = objc_msgSend_pcsManager(*(void **)(a1 + 32), v41, v42);
      objc_msgSend__encryptPersonalInfoWithPCSBlob_pcsManager_(v9, v44, v40, v43);

      id v45 = dispatch_group_create();
      dispatch_group_enter(v45);
      id v48 = objc_msgSend_pcsCache(*(void **)(a1 + 32), v46, v47);
      uint64_t v49 = *(void *)(a1 + 72);
      v75[0] = MEMORY[0x1E4F143A8];
      v75[1] = 3221225472;
      v75[2] = sub_1C4D5155C;
      v75[3] = &unk_1E64F06A8;
      uint64_t v77 = *(void *)(a1 + 56);
      long long v21 = v45;
      uint64_t v76 = v21;
      objc_msgSend__setPCSData_forFetchedShareID_withScope_withCompletionHandler_(v48, v50, (uint64_t)v5, v17, v49, v75);

      if (*(void *)(a1 + 40))
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        id v51 = *MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v79 = (uint64_t)v17;
          _os_log_impl(&dword_1C4CFF000, v51, OS_LOG_TYPE_INFO, "Decrypting shared zone PCS data for share %@", buf, 0xCu);
        }
        uint64_t v54 = objc_msgSend_pcsManager(*(void **)(a1 + 32), v52, v53);
        uint64_t v55 = *(void *)(a1 + 40);
        uint64_t v58 = objc_msgSend_invitedPCS(v5, v56, v57);
        uint64_t v59 = *(void *)(*(void *)(a1 + 56) + 8);
        id obj = *(id *)(v59 + 40);
        objc_msgSend_decryptSharedZonePCSData_withInvitedPCS_error_(v54, v60, v55, v58, &obj);
        objc_storeStrong((id *)(v59 + 40), obj);

        dispatch_group_enter(v21);
        uint64_t v63 = objc_msgSend_pcsCache(*(void **)(a1 + 32), v61, v62);
        uint64_t v64 = *(void *)(a1 + 40);
        uint64_t v67 = objc_msgSend_zoneID(v17, v65, v66);
        uint64_t v68 = *(void *)(a1 + 72);
        v71[0] = MEMORY[0x1E4F143A8];
        v71[1] = 3221225472;
        v71[2] = sub_1C4D515C8;
        v71[3] = &unk_1E64F06A8;
        uint64_t v73 = *(void *)(a1 + 56);
        uint64_t v72 = v21;
        objc_msgSend__setPCSData_forFetchedZoneID_withScope_withCompletionHandler_(v63, v69, v64, v67, v68, v71);
      }
      dispatch_group_wait(v21, 0xFFFFFFFFFFFFFFFFLL);

      goto LABEL_25;
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    __int16 v12 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v79 = (uint64_t)v6;
      _os_log_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_INFO, "Warn: Couldn't create share PCS data: %@", buf, 0xCu);
    }
    if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
    {
      id v15 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v16 = *MEMORY[0x1E4F19DD8];
      id v17 = objc_msgSend_recordID(v9, v13, v14);
      uint64_t v19 = objc_msgSend_errorWithDomain_code_error_format_(v15, v18, v16, 5004, v6, @"Couldn't create share PCS data for share %@", v17);
      uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8);
      long long v21 = *(NSObject **)(v20 + 40);
      *(void *)(v20 + 40) = v19;
LABEL_25:
    }
  }
  uint64_t v70 = *(void *)(a1 + 48);
  if (v70) {
    (*(void (**)(uint64_t, BOOL))(v70 + 16))(v70, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) == 0);
  }
}

void sub_1C4D5155C(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (v7)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v6 = *(void *)(v4 + 40);
    id v5 = (id *)(v4 + 40);
    if (!v6) {
      objc_storeStrong(v5, a2);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4D515C8(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (v7)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v6 = *(void *)(v4 + 40);
    id v5 = (id *)(v4 + 40);
    if (!v6) {
      objc_storeStrong(v5, a2);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1C4D51634(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v6 = objc_msgSend_encryptedPersonalInfo(a1, a2, a3);
  if (v6)
  {
    uint64_t hasEncryptedPersonalInfo = 1;
  }
  else
  {
    uint64_t v8 = objc_msgSend_userIdentity(a1, v4, v5);
    uint64_t hasEncryptedPersonalInfo = objc_msgSend_hasEncryptedPersonalInfo(v8, v9, v10);
  }
  return hasEncryptedPersonalInfo;
}

void sub_1C4D51698(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  v33[0] = @"CreatedInProcess";
  uint64_t v8 = (void *)MEMORY[0x1E4F28ED0];
  id v9 = a5;
  id v10 = a4;
  uint64_t v13 = objc_msgSend_createdInProcess(a1, v11, v12);
  id v15 = objc_msgSend_numberWithBool_(v8, v14, v13);
  v33[1] = @"ParticipantAcceptedInProcess";
  v34[0] = v15;
  uint64_t v16 = (void *)MEMORY[0x1E4F28ED0];
  uint64_t v19 = objc_msgSend_acceptedInProcess(a1, v17, v18);
  long long v21 = objc_msgSend_numberWithBool_(v16, v20, v19);
  v34[1] = v21;
  uint64_t v23 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v22, (uint64_t)v34, v33, 2);

  uint64_t v26 = objc_msgSend_participantID(a1, v24, v25);
  uint64_t v27 = sub_1C4D5181C((uint64_t)v23, a3, v9, v10, v26);
  objc_msgSend_setEncryptedPersonalInfo_(a1, v28, (uint64_t)v27);

  id v31 = objc_msgSend_userIdentity(a1, v29, v30);
  objc_msgSend__encryptPersonalInfoWithPCSBlob_participantID_inShareWithID_pcsManager_(v31, v32, a3, v26, v10, v9);
}

id sub_1C4D5181C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v9 = (void *)MEMORY[0x1E4F28DB0];
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  uint64_t v14 = objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(v9, v13, a1, 1, 0);
  id v15 = objc_alloc(MEMORY[0x1E4F19FA0]);
  id v17 = objc_msgSend_initWithData_(v15, v16, (uint64_t)v14);
  uint64_t v18 = [CKDWrappingContext alloc];
  uint64_t v20 = objc_msgSend_initWithRecordID_fieldName_mergeableDeltaID_fileSignature_referenceSignature_(v18, v19, (uint64_t)v11, v10, 0, 0, 0);

  uint64_t v22 = objc_msgSend_wrapEncryptedData_withPCS_inContext_(v12, v21, (uint64_t)v17, a2, v20);

  if (v22)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v25 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      int v28 = 138412290;
      uint64_t v29 = v22;
      _os_log_error_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_ERROR, "Couldn't encrypt participant properties %@", (uint8_t *)&v28, 0xCu);
    }
  }
  uint64_t v26 = objc_msgSend_encryptedData(v17, v23, v24);

  return v26;
}

void sub_1C4D519F4(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v32 = a4;
  id v8 = a5;
  id v11 = objc_msgSend_participantID(a1, v9, v10);
  uint64_t v14 = objc_msgSend_encryptedPersonalInfo(a1, v12, v13);
  id v15 = sub_1C4D51B40(v14, a3, v8, v32, v11);

  if (v15)
  {
    uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(v15, v16, @"CreatedInProcess");
    long long v21 = v18;
    if (v18)
    {
      uint64_t v22 = objc_msgSend_BOOLValue(v18, v19, v20);
      objc_msgSend_setCreatedInProcess_(a1, v23, v22);
    }
    uint64_t v24 = objc_msgSend_objectForKeyedSubscript_(v15, v19, @"ParticipantAcceptedInProcess");
    uint64_t v27 = v24;
    if (v24)
    {
      uint64_t v28 = objc_msgSend_BOOLValue(v24, v25, v26);
      objc_msgSend_setAcceptedInProcess_(a1, v29, v28);
    }
  }
  uint64_t v30 = objc_msgSend_userIdentity(a1, v16, v17);
  objc_msgSend__decryptPersonalInfoWithPCSBlob_participantID_inShareWithID_pcsManager_(v30, v31, a3, v11, v32, v8);
}

id sub_1C4D51B40(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (v9)
  {
    id v13 = objc_alloc(MEMORY[0x1E4F19FA0]);
    id v15 = objc_msgSend_initWithEncryptedData_(v13, v14, (uint64_t)v9);
    uint64_t v16 = [CKDWrappingContext alloc];
    uint64_t v18 = objc_msgSend_initWithRecordID_fieldName_mergeableDeltaID_fileSignature_referenceSignature_(v16, v17, (uint64_t)v11, v12, 0, 0, 0);
    objc_msgSend_unwrapEncryptedData_withPCS_inContext_(v10, v19, (uint64_t)v15, a2, v18);
    uint64_t v22 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (v22)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v23 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v44 = v22;
        _os_log_error_impl(&dword_1C4CFF000, v23, OS_LOG_TYPE_ERROR, "Couldn't decrypt participant properties %@", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v24 = objc_msgSend_data(v15, v20, v21);
      if (v24)
      {
        id v41 = objc_alloc(MEMORY[0x1E4F1CAD0]);
        uint64_t v39 = objc_opt_class();
        uint64_t v25 = v24;
        uint64_t v26 = objc_opt_class();
        uint64_t v27 = objc_opt_class();
        uint64_t v28 = objc_opt_class();
        uint64_t v38 = v26;
        uint64_t v24 = v25;
        uint64_t v30 = objc_msgSend_initWithObjects_(v41, v29, v39, v38, v27, v28, 0);
        id v32 = objc_msgSend_unarchivedObjectOfClasses_fromData_error_(MEMORY[0x1E4F28DC0], v31, (uint64_t)v30, v24, 0);
        if (v32)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {

            goto LABEL_22;
          }
        }
        uint64_t v42 = v30;
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v33 = (id)*MEMORY[0x1E4F1A500];
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          if (v32)
          {
            uint64_t v37 = (objc_class *)objc_opt_class();
            NSStringFromClass(v37);
            uint64_t v36 = (__CFString *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            uint64_t v36 = @"nil";
          }
          *(_DWORD *)buf = 138543362;
          uint64_t v40 = v36;
          uint64_t v44 = v36;
          _os_log_error_impl(&dword_1C4CFF000, v33, OS_LOG_TYPE_ERROR, "Decrypted PII was of unexpected class %{public}@", buf, 0xCu);
          if (v32) {
        }
          }
      }
      else
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v34 = *MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C4CFF000, v34, OS_LOG_TYPE_ERROR, "Decrypted PII was empty", buf, 2u);
        }
      }
    }
  }
  id v32 = 0;
LABEL_22:

  return v32;
}

uint64_t sub_1C4D51F18(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v6 = objc_msgSend_encryptedPersonalInfo(a1, a2, a3);
  if (v6)
  {
    uint64_t hasEncryptedPersonalInfo = 1;
  }
  else
  {
    id v8 = objc_msgSend_lookupInfo(a1, v4, v5);
    uint64_t hasEncryptedPersonalInfo = objc_msgSend_hasEncryptedPersonalInfo(v8, v9, v10);
  }
  return hasEncryptedPersonalInfo;
}

void sub_1C4D51F7C(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v10 = a6;
  id v11 = a5;
  id v12 = a4;
  id v23 = (id)objc_opt_new();
  uint64_t v16 = objc_msgSend_nameComponents(a1, v13, v14);
  if (v16) {
    objc_msgSend_setObject_forKeyedSubscript_(v23, v15, (uint64_t)v16, @"NameComponents");
  }
  uint64_t v17 = sub_1C4D5181C((uint64_t)v23, a3, v10, v11, v12);
  objc_msgSend_setEncryptedPersonalInfo_(a1, v18, (uint64_t)v17);

  uint64_t v21 = objc_msgSend_lookupInfo(a1, v19, v20);
  objc_msgSend__encryptPersonalInfoWithPCSBlob_participantID_inShareWithID_pcsManager_(v21, v22, a3, v12, v11, v10);
}

void sub_1C4D52098(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v22 = a4;
  id v10 = a5;
  id v11 = a6;
  uint64_t v14 = objc_msgSend_encryptedPersonalInfo(a1, v12, v13);
  id v15 = sub_1C4D51B40(v14, a3, v11, v10, v22);

  if (v15)
  {
    uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(v15, v16, @"NameComponents");
    objc_msgSend_setNameComponents_(a1, v19, (uint64_t)v18);
  }
  uint64_t v20 = objc_msgSend_lookupInfo(a1, v16, v17);
  objc_msgSend__decryptPersonalInfoWithPCSBlob_participantID_inShareWithID_pcsManager_(v20, v21, a3, v22, v10, v11);
}

BOOL sub_1C4D52198(void *a1, const char *a2, uint64_t a3)
{
  id v3 = objc_msgSend_encryptedPersonalInfo(a1, a2, a3);
  BOOL v4 = v3 != 0;

  return v4;
}

void sub_1C4D521CC(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v22 = a4;
  id v10 = a5;
  id v11 = a6;
  id v12 = objc_opt_new();
  uint64_t v17 = objc_msgSend_emailAddress(a1, v13, v14);
  if (v17) {
    objc_msgSend_setObject_forKeyedSubscript_(v12, v15, (uint64_t)v17, @"Email");
  }
  uint64_t v19 = objc_msgSend_phoneNumber(a1, v15, v16);
  if (v19) {
    objc_msgSend_setObject_forKeyedSubscript_(v12, v18, (uint64_t)v19, @"Phone");
  }
  uint64_t v20 = sub_1C4D5181C((uint64_t)v12, a3, v11, v10, v22);
  objc_msgSend_setEncryptedPersonalInfo_(a1, v21, (uint64_t)v20);
}

void sub_1C4D522E8(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v10 = a6;
  id v11 = a5;
  id v12 = a4;
  id v15 = objc_msgSend_encryptedPersonalInfo(a1, v13, v14);
  sub_1C4D51B40(v15, a3, v10, v11, v12);
  id v25 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v17 = objc_msgSend_objectForKeyedSubscript_(v25, v16, @"Email");

  if (v17)
  {
    uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(v25, v18, @"Email");
    objc_msgSend_setEmailAddress_(a1, v20, (uint64_t)v19);
  }
  uint64_t v21 = objc_msgSend_objectForKeyedSubscript_(v25, v18, @"Phone");

  if (v21)
  {
    id v23 = objc_msgSend_objectForKeyedSubscript_(v25, v22, @"Phone");
    objc_msgSend_setPhoneNumber_(a1, v24, (uint64_t)v23);
  }
}

BOOL sub_1C4D52424(void *a1, const char *a2, uint64_t a3)
{
  id v3 = objc_msgSend_encryptedData(a1, a2, a3);
  BOOL v4 = v3 != 0;

  return v4;
}

void sub_1C4D52458(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  id v9 = objc_msgSend_share(a1, v7, v8);
  id v12 = objc_msgSend_recordID(v9, v10, v11);

  uint64_t v26 = @"AcceptedInProcess";
  uint64_t v13 = (void *)MEMORY[0x1E4F28ED0];
  uint64_t v16 = objc_msgSend_acceptedInProcess(a1, v14, v15);
  uint64_t v18 = objc_msgSend_numberWithBool_(v13, v17, v16);
  v27[0] = v18;
  uint64_t v20 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v19, (uint64_t)v27, &v26, 1);

  id v23 = objc_msgSend_recordName(v12, v21, v22);
  uint64_t v24 = sub_1C4D5181C((uint64_t)v20, a3, v6, v12, v23);

  objc_msgSend_setEncryptedData_(a1, v25, (uint64_t)v24);
}

void sub_1C4D52590(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v9 = objc_msgSend_share(a1, v7, v8);
  objc_msgSend_recordID(v9, v10, v11);
  id v26 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v14 = objc_msgSend_encryptedData(a1, v12, v13);
  uint64_t v17 = objc_msgSend_recordName(v26, v15, v16);
  uint64_t v18 = sub_1C4D51B40(v14, a3, v6, v26, v17);

  uint64_t v20 = objc_msgSend_objectForKeyedSubscript_(v18, v19, @"AcceptedInProcess");
  id v23 = v20;
  if (v20)
  {
    uint64_t v24 = objc_msgSend_BOOLValue(v20, v21, v22);
    objc_msgSend_setAcceptedInProcess_(a1, v25, v24);
  }
}

uint64_t CKDPNotificationSyncResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  BOOL v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0) {
            goto LABEL_35;
          }
          v20 += 7;
          BOOL v14 = v21++ >= 9;
          if (v14)
          {
            uint64_t v22 = 0;
            goto LABEL_37;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_35:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_37:
        *(unsigned char *)(a1 + 24) = v22 != 0;
      }
      else if (v17 == 2)
      {
        id v26 = objc_alloc_init(CKDPNotificationSyncResponsePushMessage);
        objc_msgSend_addPushMessage_((void *)a1, v27, (uint64_t)v26);
        if (!PBReaderPlaceMark() || (CKDPNotificationSyncResponsePushMessageReadFrom(v26, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v18;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4D537BC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v6 = objc_msgSend_objectAtIndex_(a2, v5, 0);
  char v8 = objc_msgSend_objectAtIndex_(v4, v7, 0);

  uint64_t v10 = 0;
  if (v6 && v8) {
    uint64_t v10 = objc_msgSend_compare_(v6, v9, (uint64_t)v8);
  }

  return v10;
}

id sub_1C4D53E0C(char a1, const char *a2)
{
  id v3 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], a2, 3);
  id v6 = v3;
  if ((a1 & 2) != 0)
  {
    objc_msgSend_addObject_(v3, v4, @"local-fetch-only");
    if ((a1 & 4) == 0)
    {
LABEL_3:
      if ((a1 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend_addObject_(v6, v4, @"wants-parent");
  if ((a1 & 8) == 0)
  {
LABEL_4:
    if ((a1 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_10:
  objc_msgSend_addObject_(v6, v4, @"wants-zoneish");
  if ((a1 & 0x10) != 0) {
LABEL_5:
  }
    objc_msgSend_addObject_(v6, v4, @"wants-per-participant");
LABEL_6:
  id v7 = NSString;
  if (objc_msgSend_count(v6, v4, v5))
  {
    unsigned int v9 = objc_msgSend_componentsJoinedByString_(v6, v8, @"|");
    uint64_t v11 = objc_msgSend_stringWithFormat_(v7, v10, @"(%@)", v9);
  }
  else
  {
    uint64_t v11 = objc_msgSend_stringWithFormat_(v7, v8, @"(%@)", @"none");
  }

  return v11;
}

uint64_t sub_1C4D53F40(uint64_t a1, const char *a2)
{
  return objc_msgSend_stringWithFormat_(NSString, a2, @"%lu-%@", a2, a1);
}

void sub_1C4D544F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = 0;
}

void sub_1C4D5465C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4D54670(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1C4D54710;
  v4[3] = &unk_1E64F0740;
  v4[4] = WeakRetained;
  id v5 = *(id *)(a1 + 32);
  objc_msgSend__lockedGetSQLCacheWithCompletionHandler_(WeakRetained, v3, (uint64_t)v4);
}

void sub_1C4D54710(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v9 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), v7, v8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4D547F8;
  block[3] = &unk_1E64F0718;
  id v10 = *(id *)(a1 + 40);
  id v15 = v6;
  id v16 = v10;
  id v14 = v5;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, block);
}

uint64_t sub_1C4D547F8(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

void sub_1C4D54818(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v9 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), v7, v8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4D54900;
  block[3] = &unk_1E64F0718;
  id v10 = *(id *)(a1 + 40);
  id v15 = v6;
  id v16 = v10;
  id v14 = v5;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, block);
}

uint64_t sub_1C4D54900(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

void sub_1C4D54A7C(uint64_t a1, const char *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 32)) {
    goto LABEL_45;
  }
  if ((*(unsigned char *)(a1 + 80) & 4) == 0) {
    goto LABEL_14;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v11 = *MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v36 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      uint64_t v45 = v36;
      _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "Client requested fetch of parent PCS data for item %{public}@, but the returned item type doesn't support chain PCS data.", buf, 0xCu);
    }
    goto LABEL_14;
  }
  id v5 = objc_msgSend_chainPCSData(*(void **)(a1 + 32), v3, v4);
  uint64_t v8 = objc_msgSend_pcs(v5, v6, v7);

  if (v8)
  {
LABEL_14:
    int v10 = 1;
    goto LABEL_15;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  unsigned int v9 = *MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v38 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543362;
    uint64_t v45 = v38;
    _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "PCS data for %{public}@ was found in the cache, but it doesn't have chain PCS data and the client requested that. Fetching from the server.", buf, 0xCu);
  }
  int v10 = 0;
LABEL_15:
  if ((*(unsigned char *)(a1 + 80) & 8) != 0)
  {
    if (objc_opt_respondsToSelector())
    {
      if (!objc_msgSend_zoneishPCS(*(void **)(a1 + 32), v12, v13))
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        id v14 = *MEMORY[0x1E4F1A528];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
        {
          uint64_t v39 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138543362;
          uint64_t v45 = v39;
          _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "PCS data for %{public}@ was found in the cache, but it doesn't have zoneish PCS data and the client requested that. Fetching from the server.", buf, 0xCu);
        }
        int v10 = 0;
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v15 = *MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v37 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138543362;
        uint64_t v45 = v37;
        _os_log_debug_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_DEBUG, "Client requested fetch of zoneish PCS data for item %{public}@, but the returned item type doesn't support zoneish PCS data. Returning item data anyway since it isn't a zone PCS.", buf, 0xCu);
      }
    }
  }
  if ((*(unsigned char *)(a1 + 80) & 0x10) != 0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (!objc_msgSend_signingPCS(*(void **)(a1 + 32), v16, v17))
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v18 = *MEMORY[0x1E4F1A528];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG)) {
          goto LABEL_45;
        }
        uint64_t v19 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138543362;
        uint64_t v45 = v19;
        char v20 = "Record PCS data for %{public}@ was found in the cache, but it doesn't have per-participant PCS data and th"
              "e client requested that. Fetching from the server.";
        goto LABEL_47;
      }
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v22 = objc_msgSend_sharePCSData(*(void **)(a1 + 32), a2, v21);

        if (!v22)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          uint64_t v18 = *MEMORY[0x1E4F1A528];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG)) {
            goto LABEL_45;
          }
          uint64_t v40 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138543362;
          uint64_t v45 = v40;
          char v20 = "Zone PCS data for %{public}@ was found in the cache, but it doesn't have share PCS data and the client r"
                "equested that. Fetching from the server.";
LABEL_47:
          _os_log_debug_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_DEBUG, v20, buf, 0xCu);
          goto LABEL_45;
        }
      }
    }
  }
  if (!v10)
  {
LABEL_45:
    objc_msgSend__lockedCreatePCSCacheFetchOfItem_forOperation_options_fetchCreator_withCompletionHandler_(*(void **)(a1 + 48), a2, *(void *)(a1 + 40), *(void *)(a1 + 56), *(void *)(a1 + 80), *(void *)(a1 + 72), *(void *)(a1 + 64));
    return;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v23 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v27 = *(void **)(a1 + 32);
    uint64_t v28 = *(void *)(a1 + 40);
    uint64_t v29 = v23;
    id v32 = objc_msgSend_etag(v27, v30, v31);
    uint64_t v35 = objc_msgSend_pcsKeyID(*(void **)(a1 + 32), v33, v34);
    *(_DWORD *)buf = 138543874;
    uint64_t v45 = v28;
    __int16 v46 = 2114;
    uint64_t v47 = v32;
    __int16 v48 = 2112;
    uint64_t v49 = v35;
    _os_log_debug_impl(&dword_1C4CFF000, v29, OS_LOG_TYPE_DEBUG, "Returning in-memory cached PCS data. item=%{public}@, protectionInfoTag=%{public}@, pcsKeyID=%@", buf, 0x20u);
  }
  id v26 = objc_msgSend_callbackQueue(*(void **)(a1 + 48), v24, v25);
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 3221225472;
  void v41[2] = sub_1C4D5505C;
  v41[3] = &unk_1E64F0790;
  id v43 = *(id *)(a1 + 64);
  id v42 = *(id *)(a1 + 32);
  dispatch_async(v26, v41);
}

uint64_t sub_1C4D5505C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1C4D55B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_1C4D55B98(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4D55BA8(uint64_t a1)
{
}

void sub_1C4D55BB0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  objc_msgSend_pcsData(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2, a3);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = objc_msgSend_copy(v11, v5, v6);
  int v10 = objc_msgSend_error(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v8, v9);
  (*(void (**)(uint64_t, void *, void *))(v4 + 16))(v4, v7, v10);
}

void sub_1C4D55C4C(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, *(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
  uint64_t v7 = objc_msgSend_fetchGroup(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v5, v6);
  int v10 = objc_msgSend_fetchQueue(*(void **)(a1 + 32), v8, v9);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4D55E04;
  block[3] = &unk_1E64F0808;
  objc_copyWeak(&v15, &from);
  id v13 = *(id *)(a1 + 40);
  objc_copyWeak(v16, &location);
  v16[1] = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 48);
  dispatch_group_notify(v7, v10, block);

  objc_msgSend__lockedAddOutstandingFetch_forItemIDString_databaseScope_(*(void **)(a1 + 32), v11, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(void *)(a1 + 40), *(void *)(a1 + 64));
  objc_destroyWeak(v16);

  objc_destroyWeak(&v15);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4D55DD0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 64));
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4D55E04(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = objc_msgSend_fetchError(WeakRetained, v3, v4);

  uint64_t v6 = (void *)*MEMORY[0x1E4F1A548];
  if (v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v6);
    }
    uint64_t v7 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = v7;
      id v11 = objc_msgSend_operationID(WeakRetained, v9, v10);
      uint64_t v12 = *(void *)(a1 + 32);
      id v15 = objc_msgSend_fetchError(WeakRetained, v13, v14);
      *(_DWORD *)buf = 138543874;
      uint64_t v35 = v11;
      __int16 v36 = 2114;
      uint64_t v37 = v12;
      __int16 v38 = 2112;
      uint64_t v39 = v15;
      _os_log_debug_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_DEBUG, "Fetch operation %{public}@ for item %{public}@ finished with error: %@", buf, 0x20u);
LABEL_13:
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v6);
    }
    id v16 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = v16;
      id v11 = objc_msgSend_operationID(WeakRetained, v23, v24);
      uint64_t v25 = *(void *)(a1 + 32);
      id v15 = objc_msgSend_pcsData(WeakRetained, v26, v27);
      uint64_t v30 = objc_msgSend_pcsKeyID(v15, v28, v29);
      *(_DWORD *)buf = 138543874;
      uint64_t v35 = v11;
      __int16 v36 = 2114;
      uint64_t v37 = v25;
      __int16 v38 = 2112;
      uint64_t v39 = v30;
      _os_log_debug_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_DEBUG, "Fetch operation %{public}@ for item %{public}@ finished with PCS data %@", buf, 0x20u);

      goto LABEL_13;
    }
  }
  id v17 = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v19 = v17;
  if (v17)
  {
    objc_msgSend__lockedRemoveOutstandingFetch_forItemIDString_databaseScope_(v17, v18, (uint64_t)WeakRetained, *(void *)(a1 + 32), *(void *)(a1 + 64));
    uint64_t v22 = objc_msgSend_callbackQueue(v19, v20, v21);
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 3221225472;
    v31[2] = sub_1C4D560D4;
    v31[3] = &unk_1E64F0790;
    id v33 = *(id *)(a1 + 40);
    id v32 = WeakRetained;
    dispatch_async(v22, v31);
  }
}

void sub_1C4D560D4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  objc_msgSend_pcsData(*(void **)(a1 + 32), a2, a3);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = objc_msgSend_error(*(void **)(a1 + 32), v5, v6);
  (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v8, v7);
}

void sub_1C4D562E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D562FC(uint64_t *a1, void *a2)
{
  uint64_t v3 = (id *)(a1 + 8);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend__lockedHandleMemoryFetchOfItem_pcsData_forOperation_options_fetchCreator_withCompletionHandler_(WeakRetained, v5, a1[4], v4, a1[5], a1[9], a1[6], a1[7]);
}

void sub_1C4D564E4(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v2 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void *)(a1 + 32);
    id v15 = *(void **)(a1 + 40);
    id v17 = v2;
    char v20 = objc_msgSend_operationID(v15, v18, v19);
    uint64_t v22 = sub_1C4D53E0C(*(void *)(a1 + 64), v21);
    *(_DWORD *)buf = 138412802;
    uint64_t v29 = v16;
    __int16 v30 = 2114;
    uint64_t v31 = v20;
    __int16 v32 = 2114;
    id v33 = v22;
    _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "Fetching PCS for record %@ for operation %{public}@ with options %{public}@", buf, 0x20u);
  }
  id v5 = objc_msgSend_sqliteRepresentation(*(void **)(a1 + 32), v3, v4);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1C4D566F4;
  aBlock[3] = &unk_1E64F0880;
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 64);
  id v25 = v6;
  uint64_t v27 = v7;
  int8x16_t v23 = *(int8x16_t *)(a1 + 40);
  id v8 = (id)v23.i64[0];
  int8x16_t v26 = vextq_s8(v23, v23, 8uLL);
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = *(void **)(a1 + 48);
  id v13 = objc_msgSend_recordMemoryCache(v10, v11, v12);
  objc_msgSend__lockedFetchPCSForItem_memoryCache_forOperation_options_fetchCreator_withCompletionHandler_(v10, v14, (uint64_t)v5, v13, *(void *)(a1 + 40), *(void *)(a1 + 64), v9, *(void *)(a1 + 56));
}

void sub_1C4D566F4(uint64_t *a1, void *a2)
{
  id v3 = a2;
  id v10 = (id)objc_opt_new();
  objc_msgSend_setItemID_(v10, v4, a1[4]);
  objc_msgSend_setCache_(v10, v5, a1[5]);
  objc_msgSend_setOptions_(v10, v6, a1[7]);
  uint64_t v7 = (void *)a1[6];
  uint64_t v8 = objc_opt_class();
  objc_msgSend_spawnAndRunOperationOfClass_operationInfo_operationConfigurationBlock_(v7, v9, v8, v10, v3);
}

void sub_1C4D56910(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v2 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void *)(a1 + 32);
    id v15 = *(void **)(a1 + 40);
    id v17 = v2;
    char v20 = objc_msgSend_operationID(v15, v18, v19);
    uint64_t v22 = sub_1C4D53E0C(*(void *)(a1 + 64), v21);
    *(_DWORD *)buf = 138412802;
    uint64_t v29 = v16;
    __int16 v30 = 2114;
    uint64_t v31 = v20;
    __int16 v32 = 2114;
    id v33 = v22;
    _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "Fetching PCS for zone %@ for operation %{public}@ with options %{public}@", buf, 0x20u);
  }
  id v5 = objc_msgSend_sqliteRepresentation(*(void **)(a1 + 32), v3, v4);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1C4D56B20;
  aBlock[3] = &unk_1E64F0880;
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 64);
  id v25 = v6;
  uint64_t v27 = v7;
  int8x16_t v23 = *(int8x16_t *)(a1 + 40);
  id v8 = (id)v23.i64[0];
  int8x16_t v26 = vextq_s8(v23, v23, 8uLL);
  uint64_t v9 = _Block_copy(aBlock);
  id v10 = *(void **)(a1 + 48);
  id v13 = objc_msgSend_zoneMemoryCache(v10, v11, v12);
  objc_msgSend__lockedFetchPCSForItem_memoryCache_forOperation_options_fetchCreator_withCompletionHandler_(v10, v14, (uint64_t)v5, v13, *(void *)(a1 + 40), *(void *)(a1 + 64), v9, *(void *)(a1 + 56));
}

void sub_1C4D56B20(uint64_t *a1, void *a2)
{
  id v3 = a2;
  id v10 = (id)objc_opt_new();
  objc_msgSend_setItemID_(v10, v4, a1[4]);
  objc_msgSend_setCache_(v10, v5, a1[5]);
  objc_msgSend_setOptions_(v10, v6, a1[7]);
  uint64_t v7 = (void *)a1[6];
  uint64_t v8 = objc_opt_class();
  objc_msgSend_spawnAndRunOperationOfClass_operationInfo_operationConfigurationBlock_(v7, v9, v8, v10, v3);
}

void sub_1C4D56D3C(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v2 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void *)(a1 + 32);
    id v15 = *(void **)(a1 + 40);
    id v17 = v2;
    char v20 = objc_msgSend_operationID(v15, v18, v19);
    uint64_t v22 = sub_1C4D53E0C(*(void *)(a1 + 64), v21);
    *(_DWORD *)buf = 138412802;
    uint64_t v29 = v16;
    __int16 v30 = 2114;
    uint64_t v31 = v20;
    __int16 v32 = 2114;
    id v33 = v22;
    _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "Fetching PCS for share %@ for operation %{public}@ with options %{public}@", buf, 0x20u);
  }
  id v5 = objc_msgSend_sqliteRepresentation(*(void **)(a1 + 32), v3, v4);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1C4D56F4C;
  aBlock[3] = &unk_1E64F0880;
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 64);
  id v25 = v6;
  uint64_t v27 = v7;
  int8x16_t v23 = *(int8x16_t *)(a1 + 40);
  id v8 = (id)v23.i64[0];
  int8x16_t v26 = vextq_s8(v23, v23, 8uLL);
  uint64_t v9 = _Block_copy(aBlock);
  id v10 = *(void **)(a1 + 48);
  id v13 = objc_msgSend_shareMemoryCache(v10, v11, v12);
  objc_msgSend__lockedFetchPCSForItem_memoryCache_forOperation_options_fetchCreator_withCompletionHandler_(v10, v14, (uint64_t)v5, v13, *(void *)(a1 + 40), *(void *)(a1 + 64), v9, *(void *)(a1 + 56));
}

void sub_1C4D56F4C(uint64_t *a1, void *a2)
{
  id v3 = a2;
  id v10 = (id)objc_opt_new();
  objc_msgSend_setItemID_(v10, v4, a1[4]);
  objc_msgSend_setCache_(v10, v5, a1[5]);
  objc_msgSend_setOptions_(v10, v6, a1[7]);
  uint64_t v7 = (void *)a1[6];
  uint64_t v8 = objc_opt_class();
  objc_msgSend_spawnAndRunOperationOfClass_operationInfo_operationConfigurationBlock_(v7, v9, v8, v10, v3);
}

void sub_1C4D57184(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v2 = dispatch_group_create();
  id v6 = objc_msgSend_sqliteRepresentation(*(void **)(a1 + 32), v3, v4);
  if (!*(void *)(a1 + 40)) {
    objc_msgSend__lockedInvalidateAllOutstandingPCSFetchesForItemIDString_databaseScope_(*(void **)(a1 + 48), v5, (uint64_t)v6, *(void *)(a1 + 64));
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = *MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v23 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v23;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v6;
    _os_log_debug_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_DEBUG, "Setting record PCS data %@ for %@ on our in-memory cache", buf, 0x16u);
  }
  dispatch_group_enter(v2);
  id v10 = objc_msgSend_recordMemoryCache(*(void **)(a1 + 48), v8, v9);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 64);
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  void v33[2] = sub_1C4D57500;
  v33[3] = &unk_1E64F08D0;
  id v13 = v2;
  uint64_t v34 = v13;
  objc_msgSend_setPCSData_forItemID_databaseScope_withCompletionHandler_(v10, v14, v11, v6, v12, v33);

  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  __int16 v36 = sub_1C4D55B98;
  uint64_t v37 = sub_1C4D55BA8;
  id v38 = 0;
  dispatch_group_enter(v13);
  id v15 = *(void **)(a1 + 48);
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  void v27[2] = sub_1C4D57508;
  v27[3] = &unk_1E64F08F8;
  uint64_t v31 = buf;
  uint64_t v16 = v13;
  uint64_t v28 = v16;
  id v29 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 64);
  id v30 = v17;
  uint64_t v32 = v18;
  objc_msgSend_getSQLCache_(v15, v19, (uint64_t)v27);
  if (*(void *)(a1 + 56))
  {
    uint64_t v22 = objc_msgSend_callbackQueue(*(void **)(a1 + 48), v20, v21);
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = sub_1C4D57654;
    v24[3] = &unk_1E64F07E0;
    id v25 = *(id *)(a1 + 56);
    int8x16_t v26 = buf;
    dispatch_group_notify(v16, v22, v24);
  }
  _Block_object_dispose(buf, 8);
}

void sub_1C4D574E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1C4D57500(uint64_t a1)
{
}

void sub_1C4D57508(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = sub_1C4D575F4;
    v11[3] = &unk_1E64F06A8;
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 56);
    id v12 = *(id *)(a1 + 32);
    objc_msgSend_setRecordPCSData_forRecordWithID_databaseScope_withCompletionHandler_(a2, v10, v7, v8, v9, v11);
  }
}

void sub_1C4D575F4(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1C4D57654(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_1C4D57800(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v2 = dispatch_group_create();
  id v6 = objc_msgSend_sqliteRepresentation(*(void **)(a1 + 32), v3, v4);
  if (!*(void *)(a1 + 40)) {
    objc_msgSend__lockedInvalidateAllOutstandingPCSFetchesForItemIDString_databaseScope_(*(void **)(a1 + 48), v5, (uint64_t)v6, *(void *)(a1 + 64));
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v23 = *(void *)(a1 + 40);
    uint64_t v24 = v7;
    CKDatabaseScopeString();
    id v25 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v23;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2112;
    id v38 = v25;
    _os_log_debug_impl(&dword_1C4CFF000, v24, OS_LOG_TYPE_DEBUG, "Setting zone PCS data %@ for %{public}@ on our in-memory cache in scope %@", buf, 0x20u);
  }
  dispatch_group_enter(v2);
  id v10 = objc_msgSend_zoneMemoryCache(*(void **)(a1 + 48), v8, v9);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 64);
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  v35[2] = sub_1C4D57BAC;
  v35[3] = &unk_1E64F08D0;
  uint64_t v13 = v2;
  __int16 v36 = v13;
  objc_msgSend_setPCSData_forItemID_databaseScope_withCompletionHandler_(v10, v14, v11, v6, v12, v35);

  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  id v38 = sub_1C4D55B98;
  uint64_t v39 = sub_1C4D55BA8;
  id v40 = 0;
  dispatch_group_enter(v13);
  id v15 = *(void **)(a1 + 48);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = sub_1C4D57BB4;
  v29[3] = &unk_1E64F08F8;
  id v33 = buf;
  uint64_t v16 = v13;
  id v30 = v16;
  id v31 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 64);
  id v32 = v17;
  uint64_t v34 = v18;
  objc_msgSend_getSQLCache_(v15, v19, (uint64_t)v29);
  if (*(void *)(a1 + 56))
  {
    uint64_t v22 = objc_msgSend_callbackQueue(*(void **)(a1 + 48), v20, v21);
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = sub_1C4D57D00;
    v26[3] = &unk_1E64F07E0;
    id v27 = *(id *)(a1 + 56);
    uint64_t v28 = buf;
    dispatch_group_notify(v16, v22, v26);
  }
  _Block_object_dispose(buf, 8);
}

void sub_1C4D57B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1C4D57BAC(uint64_t a1)
{
}

void sub_1C4D57BB4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = sub_1C4D57CA0;
    v11[3] = &unk_1E64F06A8;
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 56);
    id v12 = *(id *)(a1 + 32);
    objc_msgSend_setZonePCSData_forZoneWithID_databaseScope_withCompletionHandler_(a2, v10, v7, v8, v9, v11);
  }
}

void sub_1C4D57CA0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1C4D57D00(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_1C4D57EAC(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v2 = dispatch_group_create();
  id v6 = objc_msgSend_sqliteRepresentation(*(void **)(a1 + 32), v3, v4);
  if (!*(void *)(a1 + 40)) {
    objc_msgSend__lockedInvalidateAllOutstandingPCSFetchesForItemIDString_databaseScope_(*(void **)(a1 + 48), v5, (uint64_t)v6, *(void *)(a1 + 64));
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = *MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v23 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v23;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v6;
    _os_log_debug_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_DEBUG, "Setting share PCS data %@ for %{public}@ on our in-memory cache", buf, 0x16u);
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  uint64_t v37 = sub_1C4D55B98;
  id v38 = sub_1C4D55BA8;
  id v39 = 0;
  dispatch_group_enter(v2);
  id v10 = objc_msgSend_shareMemoryCache(*(void **)(a1 + 48), v8, v9);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 64);
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  void v33[2] = sub_1C4D5821C;
  v33[3] = &unk_1E64F06A8;
  uint64_t v35 = buf;
  uint64_t v13 = v2;
  uint64_t v34 = v13;
  objc_msgSend_setPCSData_forItemID_databaseScope_withCompletionHandler_(v10, v14, v11, v6, v12, v33);

  dispatch_group_enter(v13);
  id v15 = *(void **)(a1 + 48);
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  void v27[2] = sub_1C4D5827C;
  v27[3] = &unk_1E64F08F8;
  id v31 = buf;
  uint64_t v16 = v13;
  uint64_t v28 = v16;
  id v29 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 64);
  id v30 = v17;
  uint64_t v32 = v18;
  objc_msgSend_getSQLCache_(v15, v19, (uint64_t)v27);
  if (*(void *)(a1 + 56))
  {
    uint64_t v22 = objc_msgSend_callbackQueue(*(void **)(a1 + 48), v20, v21);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4D583C8;
    block[3] = &unk_1E64F07E0;
    id v25 = *(id *)(a1 + 56);
    int8x16_t v26 = buf;
    dispatch_group_notify(v16, v22, block);
  }
  _Block_object_dispose(buf, 8);
}

void sub_1C4D581FC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1C4D5821C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4D5827C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = sub_1C4D58368;
    v11[3] = &unk_1E64F06A8;
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 56);
    id v12 = *(id *)(a1 + 32);
    objc_msgSend_setSharePCSData_forShareWithID_databaseScope_withCompletionHandler_(a2, v10, v7, v8, v9, v11);
  }
}

void sub_1C4D58368(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1C4D583C8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_1C4D588D8(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_zoneMemoryCache(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_clearCache(v4, v5, v6);

  uint64_t v9 = objc_msgSend_recordMemoryCache(*(void **)(a1 + 32), v7, v8);
  objc_msgSend_clearCache(v9, v10, v11);

  uint64_t v14 = objc_msgSend_shareMemoryCache(*(void **)(a1 + 32), v12, v13);
  objc_msgSend_clearCache(v14, v15, v16);

  dispatch_semaphore_t v17 = dispatch_semaphore_create(0);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = sub_1C4D589E0;
  v21[3] = &unk_1E64F0920;
  uint64_t v18 = *(void **)(a1 + 32);
  id v22 = *(id *)(a1 + 40);
  dispatch_semaphore_t v23 = v17;
  uint64_t v19 = v17;
  objc_msgSend_getSQLCache_(v18, v20, (uint64_t)v21);
  dispatch_semaphore_wait(v19, 0xFFFFFFFFFFFFFFFFLL);
}

intptr_t sub_1C4D589E0(uint64_t a1, void *a2)
{
  objc_msgSend_removePCSDataForItemsInZoneWithID_withCompletionHandler_(a2, (const char *)a2, *(void *)(a1 + 32), 0);
  id v3 = *(NSObject **)(a1 + 40);
  return dispatch_semaphore_signal(v3);
}

void sub_1C4D58AD8(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_zoneMemoryCache(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_clearCache(v4, v5, v6);

  uint64_t v9 = objc_msgSend_recordMemoryCache(*(void **)(a1 + 32), v7, v8);
  objc_msgSend_clearCache(v9, v10, v11);

  uint64_t v14 = objc_msgSend_shareMemoryCache(*(void **)(a1 + 32), v12, v13);
  objc_msgSend_clearCache(v14, v15, v16);

  dispatch_semaphore_t v17 = dispatch_semaphore_create(0);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = sub_1C4D58BE0;
  v21[3] = &unk_1E64F0920;
  uint64_t v18 = *(void **)(a1 + 32);
  id v22 = *(id *)(a1 + 40);
  dispatch_semaphore_t v23 = v17;
  uint64_t v19 = v17;
  objc_msgSend_getSQLCache_(v18, v20, (uint64_t)v21);
  dispatch_semaphore_wait(v19, 0xFFFFFFFFFFFFFFFFLL);
}

intptr_t sub_1C4D58BE0(uint64_t a1, void *a2)
{
  objc_msgSend_removePCSDataForItemsInShareWithID_withCompletionHandler_(a2, (const char *)a2, *(void *)(a1 + 32), 0);
  id v3 = *(NSObject **)(a1 + 40);
  return dispatch_semaphore_signal(v3);
}

void sub_1C4D58DB4(void **a1, const char *a2, uint64_t a3)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  id v4 = objc_msgSend_zoneMemoryCache(a1[4], a2, a3);
  int hasStatusToReport = objc_msgSend_hasStatusToReport(v4, v5, v6);

  if (hasStatusToReport)
  {
    objc_msgSend_addObject_(a1[5], v8, @"\tIn-memory zone cache:");
    id v10 = a1[5];
    uint64_t v13 = objc_msgSend_zoneMemoryCache(a1[4], v11, v12);
    uint64_t v16 = objc_msgSend_CKStatusReportArray(v13, v14, v15);
    objc_msgSend_addObject_(v10, v17, (uint64_t)v16);
  }
  uint64_t v18 = objc_msgSend_recordMemoryCache(a1[4], v8, v9);
  int v21 = objc_msgSend_hasStatusToReport(v18, v19, v20);

  if (v21)
  {
    objc_msgSend_addObject_(a1[5], v22, @"\tIn-memory record cache:");
    uint64_t v24 = a1[5];
    id v27 = objc_msgSend_recordMemoryCache(a1[4], v25, v26);
    id v30 = objc_msgSend_CKStatusReportArray(v27, v28, v29);
    objc_msgSend_addObject_(v24, v31, (uint64_t)v30);
  }
  uint64_t v32 = objc_msgSend_shareMemoryCache(a1[4], v22, v23);
  int v35 = objc_msgSend_hasStatusToReport(v32, v33, v34);

  if (v35)
  {
    objc_msgSend_addObject_(a1[5], v36, @"\tIn-memory share cache:");
    id v38 = a1[5];
    uint64_t v41 = objc_msgSend_shareMemoryCache(a1[4], v39, v40);
    uint64_t v44 = objc_msgSend_CKStatusReportArray(v41, v42, v43);
    objc_msgSend_addObject_(v38, v45, (uint64_t)v44);
  }
  if (objc_msgSend_hasStatusToReport(a1[6], v36, v37))
  {
    objc_msgSend_addObject_(a1[5], v46, @"\tSQL cache:");
    __int16 v48 = a1[5];
    id v51 = objc_msgSend_CKStatusReportArray(a1[6], v49, v50);
    objc_msgSend_addObject_(v48, v52, (uint64_t)v51);
  }
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  uint64_t v53 = objc_msgSend_outstandingFetches(a1[4], v46, v47);
  char v56 = objc_msgSend_allValues(v53, v54, v55);

  uint64_t v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(v56, v57, (uint64_t)&v83, v87, 16);
  if (!v58) {
    goto LABEL_18;
  }
  uint64_t v61 = v58;
  uint64_t v62 = 0;
  uint64_t v63 = *(void *)v84;
  do
  {
    for (uint64_t i = 0; i != v61; ++i)
    {
      if (*(void *)v84 != v63) {
        objc_enumerationMutation(v56);
      }
      v62 += objc_msgSend_count(*(void **)(*((void *)&v83 + 1) + 8 * i), v59, v60);
    }
    uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v56, v59, (uint64_t)&v83, v87, 16);
  }
  while (v61);

  if (v62)
  {
    uint64_t v67 = NSString;
    uint64_t v68 = a1[5];
    uint64_t v69 = objc_msgSend_outstandingFetches(a1[4], v65, v66);
    uint64_t v72 = objc_msgSend_count(v69, v70, v71);
    uint64_t v74 = objc_msgSend_stringWithFormat_(v67, v73, @"\t%lu outstanding fetch requests for %lu records", v62, v72);
    objc_msgSend_addObject_(v68, v75, (uint64_t)v74);

    uint64_t v76 = NSString;
    uint64_t v77 = a1[5];
    char v56 = objc_msgSend_outstandingFetches(a1[4], v78, v79);
    uint64_t v81 = objc_msgSend_stringWithFormat_(v76, v80, @"\t\t%@", v56);
    objc_msgSend_addObject_(v77, v82, (uint64_t)v81);

LABEL_18:
  }
}

void sub_1C4D5910C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D59180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4D59204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4D5942C(uint64_t a1)
{
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v2 = *MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_DEBUG, "Clearing all PCS caches", buf, 2u);
  }
  id v5 = objc_msgSend_zoneMemoryCache(*(void **)(a1 + 32), v3, v4);
  objc_msgSend_clearCache(v5, v6, v7);

  id v10 = objc_msgSend_recordMemoryCache(*(void **)(a1 + 32), v8, v9);
  objc_msgSend_clearCache(v10, v11, v12);

  uint64_t v15 = objc_msgSend_shareMemoryCache(*(void **)(a1 + 32), v13, v14);
  objc_msgSend_clearCache(v15, v16, v17);

  dispatch_semaphore_t v18 = dispatch_semaphore_create(0);
  uint64_t v19 = *(void **)(a1 + 32);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = sub_1C4D59594;
  v22[3] = &unk_1E64F0970;
  dispatch_semaphore_t v23 = v18;
  uint64_t v20 = v18;
  objc_msgSend_getSQLCache_(v19, v21, (uint64_t)v22);
  dispatch_semaphore_wait(v20, 0xFFFFFFFFFFFFFFFFLL);
}

intptr_t sub_1C4D59594(uint64_t a1, void *a2, uint64_t a3)
{
  objc_msgSend_clearCache(a2, (const char *)a2, a3);
  uint64_t v4 = *(NSObject **)(a1 + 32);
  return dispatch_semaphore_signal(v4);
}

uint64_t sub_1C4D59828(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_clearInvalidatedCacheEntriesWithSkipZonePCS_completionHandler_, *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1C4D598C8()
{
  uint64_t v0 = [CKDXPCConnectionManager alloc];
  qword_1EBBCFB30 = objc_msgSend_initInternal(v0, v1, v2);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4D59C6C(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_sharedConnectionManager(CKDXPCConnectionManager, a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__dumpStatusReportToFileHandle_(v4, v3, 0);
}

void sub_1C4D59CB8(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_sharedConnectionManager(CKDXPCConnectionManager, a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_statusReportWithCompletionHandler_(v4, v3, 0);
}

_DWORD *sub_1C4D59D04(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16) == 1) {
    return 0;
  }
  id v3 = (void *)MEMORY[0x1C8789E70]();
  uint64_t v6 = objc_msgSend_sharedConnectionManager(CKDXPCConnectionManager, v4, v5);
  uint64_t v9 = objc_msgSend_CKStatusReportArray(v6, v7, v8);
  uint64_t v11 = sub_1C4FC2358((uint64_t)v9, v10);

  return v11;
}

void sub_1C4D5A50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *a15, id *location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,id a52,os_activity_scope_state_s state)
{
}

void sub_1C4D5A588(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    int v3 = 138412290;
    id v4 = WeakRetained;
    _os_log_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_INFO, "Connection to client %@ was interrupted", (uint8_t *)&v3, 0xCu);
  }
}

void sub_1C4D5A668(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v4 = objc_msgSend_sharedConnectionManager(CKDXPCConnectionManager, a2, a3);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v6 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v42 = WeakRetained;
    _os_log_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_INFO, "Connection to client %@ was invalidated", buf, 0xCu);
  }
  uint64_t v7 = (void *)MEMORY[0x1E4F28B48];
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 3221225472;
  v38[2] = sub_1C4D5A950;
  v38[3] = &unk_1E64F0948;
  id v8 = WeakRetained;
  id v39 = v8;
  id v9 = v4;
  id v40 = v9;
  uint64_t v11 = objc_msgSend_blockOperationWithBlock_(v7, v10, (uint64_t)v38);
  uint64_t v14 = objc_msgSend_processScopedClientProxy(v8, v12, v13);
  uint64_t v17 = objc_msgSend_processBinaryName(v14, v15, v16);
  objc_msgSend_setName_(v11, v18, (uint64_t)v17);

  int v21 = objc_msgSend_tearDownOperations(v9, v19, v20);
  objc_sync_enter(v21);
  uint64_t v24 = objc_msgSend_tearDownOperations(v9, v22, v23);
  objc_msgSend_addObject_(v24, v25, (uint64_t)v11);

  objc_sync_exit(v21);
  objc_initWeak((id *)buf, v11);
  uint64_t v32 = MEMORY[0x1E4F143A8];
  uint64_t v33 = 3221225472;
  uint64_t v34 = sub_1C4D5AAA4;
  int v35 = &unk_1E64F0A08;
  id v26 = v9;
  id v36 = v26;
  objc_copyWeak(&v37, (id *)buf);
  objc_msgSend_setCompletionBlock_(v11, v27, (uint64_t)&v32);
  id v30 = objc_msgSend_clientConnectionQueue(v26, v28, v29, v32, v33, v34, v35);
  objc_msgSend_addOperation_(v30, v31, (uint64_t)v11);

  objc_destroyWeak(&v37);
  objc_destroyWeak((id *)buf);
}

void sub_1C4D5A918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D5A950(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1C8789E70]();
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  int v3 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v14 = 138412290;
    uint64_t v15 = v6;
    _os_log_impl(&dword_1C4CFF000, v3, OS_LOG_TYPE_INFO, "Client %@ has gone away", (uint8_t *)&v14, 0xCu);
  }
  objc_msgSend_invalidate(*(void **)(a1 + 32), v4, v5);
  id v9 = objc_msgSend_clientConnections(*(void **)(a1 + 40), v7, v8);
  objc_sync_enter(v9);
  uint64_t v12 = objc_msgSend_clientConnections(*(void **)(a1 + 40), v10, v11);
  objc_msgSend_removeObject_(v12, v13, *(void *)(a1 + 32));

  objc_sync_exit(v9);
}

void sub_1C4D5AA88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D5AAA4(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_tearDownOperations(*(void **)(a1 + 32), a2, a3);
  id obj = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(obj);
  uint64_t v6 = objc_msgSend_tearDownOperations(*(void **)(a1 + 32), v4, v5);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_removeObject_(v6, v8, (uint64_t)WeakRetained);

  objc_sync_exit(obj);
}

void sub_1C4D5AB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4D5AB40(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v16 = 138412290;
    uint64_t v17 = v5;
    _os_log_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_INFO, "Resuming new connection from client %@", (uint8_t *)&v16, 0xCu);
  }
  uint64_t v6 = objc_msgSend_sharedConnectionManager(CKDXPCConnectionManager, v3, v4);
  id v9 = objc_msgSend_clientConnections(v6, v7, v8);
  objc_sync_enter(v9);
  uint64_t v12 = objc_msgSend_clientConnections(v6, v10, v11);
  objc_msgSend_addObject_(v12, v13, *(void *)(a1 + 32));

  objc_sync_exit(v9);
  objc_msgSend_resume(*(void **)(a1 + 40), v14, v15);
}

void sub_1C4D5AC78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D5AD74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D5AD88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4D5B30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t sub_1C4D5B360(uint64_t a1, void *a2, BOOL *a3)
{
  uint64_t result = objc_msgSend_cachedEnvironment(a2, (const char *)a2, (uint64_t)a3);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  *a3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) != -1;
  return result;
}

void sub_1C4D5B7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

uint64_t sub_1C4D5B8D4(uint64_t a1, const char *a2)
{
  return objc_msgSend__dumpStatusReportToFileHandle_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
}

void sub_1C4D5B99C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D5BB0C(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1C8789E70]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

BOOL sub_1C4D5BCB4(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 8;
LABEL_22:
        uint64_t v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4D5C234()
{
  uint64_t v0 = (void *)qword_1EBBCDCD8;
  qword_1EBBCDCD8 = (uint64_t)&unk_1F20AB9C0;
}

uint64_t sub_1C4D5C620(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = (CKDPRequestedFields *)objc_alloc_init(MEMORY[0x1E4F19F20]);
        objc_storeStrong((id *)(a1 + 32), v17);
        if PBReaderPlaceMark() && (CKDPRecordIdentifierReadFrom()) {
          goto LABEL_35;
        }
        goto LABEL_61;
      case 2u:
        uint64_t v17 = objc_alloc_init(CKDPRequestedFields);
        objc_storeStrong((id *)(a1 + 40), v17);
        if (!PBReaderPlaceMark() || !CKDPRequestedFieldsReadFrom(v17, a2)) {
          goto LABEL_61;
        }
        goto LABEL_35;
      case 3u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 48;
        goto LABEL_29;
      case 4u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 16;
LABEL_29:
        int v21 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;

        goto LABEL_59;
      case 5u:
        uint64_t v17 = objc_alloc_init(CKDPRecordRetrieveRequestRetrieveAssetURL);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (!PBReaderPlaceMark() || (sub_1C4E6C5DC((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_61;
        }
        goto LABEL_35;
      case 6u:
        uint64_t v17 = objc_alloc_init(CKDPAssetsToDownload);
        objc_storeStrong((id *)(a1 + 8), v17);
        if PBReaderPlaceMark() && (sub_1C4FD2BD0((uint64_t)v17, a2))
        {
LABEL_35:
          PBReaderRecallMark();

LABEL_59:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_61:

        return 0;
      case 7u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 60) |= 2u;
        while (2)
        {
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 == -1 || v26 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              BOOL v14 = v23++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
LABEL_53:
        BOOL v34 = v24 != 0;
        uint64_t v35 = 57;
        goto LABEL_58;
      case 8u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        *(unsigned char *)(a1 + 60) |= 1u;
        while (2)
        {
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 1;
            v30 |= (unint64_t)(v33 & 0x7F) << v28;
            if (v33 < 0)
            {
              v28 += 7;
              BOOL v14 = v29++ >= 9;
              if (v14)
              {
                uint64_t v30 = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v30 = 0;
        }
LABEL_57:
        BOOL v34 = v30 != 0;
        uint64_t v35 = 56;
LABEL_58:
        *(unsigned char *)(a1 + v35) = v34;
        goto LABEL_59;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_59;
    }
  }
}

BOOL CKDPRequestOperationHeaderZoneAndShareUsageInfoReadFrom(void *a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v17 = objc_alloc_init(CKDPSignedVersionedBlob);
        objc_msgSend_addShareUsage_(a1, v19, (uint64_t)v17);
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
          continue;
        }
        uint64_t v17 = objc_alloc_init(CKDPSignedVersionedBlob);
        objc_msgSend_addZoneUsage_(a1, v18, (uint64_t)v17);
      }
      if (!PBReaderPlaceMark() || (sub_1C4E9180C((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4D5E810(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v6 = a3;
  if (v10)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    if (*(unsigned char *)(a1 + 48)) {
      objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v10, v5, v7);
    }
    else {
    unsigned int v9 = objc_msgSend_remoteObjectProxyWithErrorHandler_(v10, v5, v7);
    }
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1C4D5E9CC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  id v8 = *(id *)(a1 + 32);
  objc_sync_enter(v8);
  if (v7)
  {
    id v9 = *(id *)(a1 + 32);
    objc_sync_enter(v9);
    unint64_t v12 = objc_msgSend_processScopedClientProxyCreator(*(void **)(a1 + 32), v10, v11);

    if (v12)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      BOOL v14 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        int v25 = 138412546;
        uint64_t v26 = v17;
        __int16 v27 = 2112;
        id v28 = v7;
        _os_log_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_INFO, "Ignoring superfluous process scoped client proxy for %@: %@", (uint8_t *)&v25, 0x16u);
      }
      uint64_t v18 = objc_msgSend_processScopedClientProxyCreator(*(void **)(a1 + 32), v15, v16);
    }
    else
    {
      objc_msgSend_setProcessScopedClientProxyCreator_(*(void **)(a1 + 32), v13, (uint64_t)v7);
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      unsigned int v23 = *MEMORY[0x1E4F1A500];
      uint64_t v18 = v7;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        uint64_t v24 = *(void *)(a1 + 32);
        int v25 = 138412546;
        uint64_t v26 = v24;
        __int16 v27 = 2112;
        id v28 = v7;
        _os_log_impl(&dword_1C4CFF000, v23, OS_LOG_TYPE_INFO, "Got a process scoped client proxy for %@: %@", (uint8_t *)&v25, 0x16u);
        uint64_t v18 = v7;
      }
    }
    objc_sync_exit(v9);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v19 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v22 = *(void *)(a1 + 32);
      int v25 = 138412546;
      uint64_t v26 = v22;
      __int16 v27 = 2112;
      id v28 = v6;
      _os_log_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_INFO, "Ignoring failed attempt to get process scoped client proxy for %@: %@", (uint8_t *)&v25, 0x16u);
    }
    uint64_t v18 = objc_msgSend_processScopedClientProxyCreator(*(void **)(a1 + 32), v20, v21);
  }
  objc_sync_exit(v8);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1C4D5ECBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D5F024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D5F04C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4D5F05C(uint64_t a1)
{
}

void sub_1C4D5F064(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4D5F0C4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1C4D5F178;
  v8[3] = &unk_1E64F0B10;
  uint64_t v10 = *(void *)(a1 + 64);
  long long v7 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v7;
  long long v9 = v7;
  objc_msgSend_getFileMetadataWithFileHandle_openInfo_reply_(a2, v6, v3, v4, v8);
}

void sub_1C4D5F178(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1C4D5F2BC(uint64_t a1, void *a2)
{
  return objc_msgSend_handleSignificantIssueBehavior_reason_(a2, (const char *)a2, *(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1C4D5F2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](a2, sel_noteSystemIsAvailable, a3);
}

BOOL sub_1C4D5FAD4(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(CKDPMergeableValueIdentifier);
        objc_storeStrong(a1 + 3, v17);
        if (PBReaderPlaceMark() && sub_1C4E62940((uint64_t)v17, a2)) {
          goto LABEL_35;
        }
        goto LABEL_39;
      case 2u:
        uint64_t v17 = (CKDPMergeableValueIdentifier *)objc_alloc_init(MEMORY[0x1E4F19F20]);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0) {
          goto LABEL_39;
        }
        goto LABEL_35;
      case 3u:
        uint64_t v17 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_39;
        }
        goto LABEL_35;
      case 5u:
        uint64_t v17 = objc_alloc_init(CKDPMergeableDelta);
        objc_msgSend_addDeltas_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (CKDPMergeableDeltaReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_39;
        }
        goto LABEL_35;
      case 6u:
        uint64_t v17 = objc_alloc_init(CKDPRecordType);
        objc_storeStrong(a1 + 5, v17);
        if PBReaderPlaceMark() && (CKDPRecordTypeReadFrom((uint64_t)v17, a2))
        {
LABEL_35:
          PBReaderRecallMark();

LABEL_36:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_39:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_36;
    }
  }
}

uint64_t sub_1C4D606D0(uint64_t a1, const char *a2, uint64_t a3)
{
  qword_1EBBCFB40 = objc_msgSend_weakObjectsHashTable(MEMORY[0x1E4F28D30], a2, a3);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4D60764(uint64_t a1, const char *a2, uint64_t a3)
{
  qword_1EBBCFB50 = objc_msgSend_weakObjectsHashTable(MEMORY[0x1E4F28D30], a2, a3);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4D60994()
{
  qword_1EBBCFB60 = (uint64_t)dispatch_workloop_create("com.apple.cloudkit.accountStatus");
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4D609D0(uint64_t a1, const char *a2, uint64_t a3)
{
  qword_1EBBCFB78 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], a2, a3);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4D60A10(uint64_t a1, void *a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v9 = WeakRetained;
  if (WeakRetained)
  {
    if (a3)
    {
      unint64_t v10 = objc_msgSend_accountOrNil(WeakRetained, v7, v8);
      char v13 = v10;
      if (v10)
      {
        BOOL v14 = objc_msgSend_accountID(v10, v11, v12);
        int isEqualToString = objc_msgSend_isEqualToString_(v5, v15, (uint64_t)v14);

        if (isEqualToString)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          uint64_t v17 = *MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
          {
            int v20 = 134218242;
            uint64_t v21 = v9;
            __int16 v22 = 2112;
            id v23 = v5;
            _os_log_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_INFO, "Container %p clearing caches for deletion of account %@", (uint8_t *)&v20, 0x16u);
          }
          objc_msgSend__clearCaches(v9, v18, v19);
        }
      }
    }
    objc_msgSend__reloadAccount_(v9, v7, 1);
  }
}

uint64_t sub_1C4D61614(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_clearPCSCaches(*(void **)(a1 + 32), a2, a3);
}

void sub_1C4D61D80(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A548];
  if (v3)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v4);
    }
    id v5 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v9 = 138412546;
      uint64_t v10 = v6;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_error_impl(&dword_1C4CFF000, v5, OS_LOG_TYPE_ERROR, "Failed to set file attribution for %@: %@", (uint8_t *)&v9, 0x16u);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v4);
    }
    uint64_t v7 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_debug_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_DEBUG, "Set file attribution for %@", (uint8_t *)&v9, 0xCu);
    }
  }
}

void sub_1C4D62008(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_fakeErrorsByClassName(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_count(v4, v5, v6);

  if (!v7)
  {
LABEL_14:
    id v40 = objc_msgSend_fakeResponseOperationResultByClassNameByItemID(*(void **)(a1 + 32), v8, v9);
    uint64_t v43 = objc_msgSend_count(v40, v41, v42);

    if (!v43)
    {
LABEL_37:
      objc_msgSend_performRequest(*(void **)(a1 + 40), v44, v45);
      return;
    }
    __int16 v46 = (objc_class *)objc_opt_class();
    uint64_t v47 = NSStringFromClass(v46);
    uint64_t v50 = objc_msgSend_fakeResponseOperationResultByClassNameByItemID(*(void **)(a1 + 32), v48, v49);
    id v52 = objc_msgSend_objectForKeyedSubscript_(v50, v51, (uint64_t)v47);

    if (!v52)
    {
LABEL_36:

      goto LABEL_37;
    }
    uint64_t v55 = objc_msgSend_fakeResponseOperationLifetimeByClassName(*(void **)(a1 + 32), v53, v54);
    uint64_t v57 = objc_msgSend_objectForKeyedSubscript_(v55, v56, (uint64_t)v47);

    if (objc_msgSend_integerValue(v57, v58, v59) < 2)
    {
      if (objc_msgSend_integerValue(v57, v60, v61) == 1)
      {
        uint64_t v72 = objc_msgSend_fakeResponseOperationResultByClassNameByItemID(*(void **)(a1 + 32), v70, v71);
        objc_msgSend_removeObjectForKey_(v72, v73, (uint64_t)v47);

        uint64_t v76 = objc_msgSend_fakeResponseOperationLifetimeByClassName(*(void **)(a1 + 32), v74, v75);
        objc_msgSend_removeObjectForKey_(v76, v77, (uint64_t)v47);

        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        uint64_t v65 = objc_msgSend_allValues(v52, v78, v79);
        uint64_t v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v65, v80, (uint64_t)&v124, v128, 16);
        if (v81)
        {
          uint64_t v84 = v81;
          uint64_t v85 = *(void *)v125;
          do
          {
            for (uint64_t i = 0; i != v84; ++i)
            {
              if (*(void *)v125 != v85) {
                objc_enumerationMutation(v65);
              }
              uint64_t v87 = objc_msgSend_v2(*(void **)(*((void *)&v124 + 1) + 8 * i), v82, v83);
              uint64_t v88 = (void *)v87;
              if (v87) {
                (*(void (**)(uint64_t, void))(v87 + 16))(v87, 0);
              }
            }
            uint64_t v84 = objc_msgSend_countByEnumeratingWithState_objects_count_(v65, v82, (uint64_t)&v124, v128, 16);
          }
          while (v84);
        }
      }
      else
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        id v89 = (void *)*MEMORY[0x1E4F1A500];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_33;
        }
        uint64_t v65 = v89;
        *(_DWORD *)buf = 134217984;
        uint64_t v130 = objc_msgSend_integerValue(v57, v119, v120);
        _os_log_error_impl(&dword_1C4CFF000, v65, OS_LOG_TYPE_ERROR, "A fake response is being tracked that has an invalid lifetime of %li", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v62 = (void *)MEMORY[0x1E4F28ED0];
      uint64_t v63 = objc_msgSend_integerValue(v57, v60, v61);
      uint64_t v65 = objc_msgSend_numberWithInteger_(v62, v64, v63 - 1);
      uint64_t v68 = objc_msgSend_fakeResponseOperationLifetimeByClassName(*(void **)(a1 + 32), v66, v67);
      objc_msgSend_setObject_forKeyedSubscript_(v68, v69, (uint64_t)v65, v47);
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
LABEL_33:
    uint64_t v90 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      loga = v90;
      long long v94 = (objc_class *)objc_opt_class();
      long long v95 = NSStringFromClass(v94);
      long long v96 = *(void **)(a1 + 40);
      uint64_t v121 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v96, v97, 1, 0, 0);
      uint64_t v100 = objc_msgSend_CKPropertiesStyleString(v121, v98, v99);
      __int16 v102 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(*(void **)(a1 + 40), v101, 0, 1, 0);
      uint64_t v105 = objc_msgSend_CKPropertiesStyleString(v102, v103, v104);
      *(_DWORD *)buf = 138544386;
      uint64_t v130 = (uint64_t)v95;
      __int16 v131 = 2048;
      long long v132 = v96;
      __int16 v133 = 2114;
      unint64_t v134 = v100;
      __int16 v135 = 2112;
      uint64_t v136 = v105;
      __int16 v137 = 2112;
      unint64_t v138 = v52;
      _os_log_error_impl(&dword_1C4CFF000, loga, OS_LOG_TYPE_ERROR, "Asking URL Request <%{public}@: %p; %{public}@, %@> to return fake operation result %@",
        buf,
        0x34u);
    }
    id v92 = objc_msgSend_CKMapValues_(v52, v91, (uint64_t)&unk_1F2042A50);
    objc_msgSend_setFakeResponseOperationResultByItemID_(*(void **)(a1 + 40), v93, (uint64_t)v92);

    goto LABEL_36;
  }
  uint64_t v10 = objc_msgSend_fakeErrorsByClassName(*(void **)(a1 + 32), v8, v9);
  __int16 v11 = (objc_class *)objc_opt_class();
  id v12 = NSStringFromClass(v11);
  BOOL v14 = objc_msgSend_objectForKeyedSubscript_(v10, v13, (uint64_t)v12);

  if (!v14 || (objc_msgSend_firstObject(v14, v15, v16), (uint64_t v17 = objc_claimAutoreleasedReturnValue()) == 0))
  {

    goto LABEL_14;
  }
  uint64_t v19 = (void *)v17;
  objc_msgSend_removeObjectAtIndex_(v14, v18, 0);
  if (!objc_msgSend_count(v14, v20, v21))
  {
    uint64_t v24 = objc_msgSend_fakeErrorsByClassName(*(void **)(a1 + 32), v22, v23);
    int v25 = (objc_class *)objc_opt_class();
    uint64_t v26 = NSStringFromClass(v25);
    objc_msgSend_removeObjectForKey_(v24, v27, (uint64_t)v26);
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v28 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
  {
    log = v28;
    id v106 = (objc_class *)objc_opt_class();
    uint64_t v107 = NSStringFromClass(v106);
    uint64_t v108 = *(void **)(a1 + 40);
    uint64_t v110 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v108, v109, 1, 0, 0);
    uint64_t v113 = objc_msgSend_CKPropertiesStyleString(v110, v111, v112);
    uint64_t v115 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(*(void **)(a1 + 40), v114, 0, 1, 0);
    uint64_t v118 = objc_msgSend_CKPropertiesStyleString(v115, v116, v117);
    *(_DWORD *)buf = 138544386;
    uint64_t v130 = (uint64_t)v107;
    __int16 v131 = 2048;
    long long v132 = v108;
    __int16 v133 = 2114;
    unint64_t v134 = v113;
    __int16 v135 = 2112;
    uint64_t v136 = v118;
    __int16 v137 = 2112;
    unint64_t v138 = v19;
    _os_log_error_impl(&dword_1C4CFF000, log, OS_LOG_TYPE_ERROR, "Prematurely failing request <%{public}@: %p; %{public}@, %@> with error %@ because that's what you asked for",
      buf,
      0x34u);
  }
  uint64_t v31 = *(void **)(a1 + 40);
  unint64_t v32 = objc_msgSend_v1(v19, v29, v30);
  objc_msgSend_finishWithError_(v31, v33, (uint64_t)v32);

  id v36 = objc_msgSend_v2(v19, v34, v35);

  if (v36)
  {
    objc_msgSend_v2(v19, v37, v38);
    id v39 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
    v39[2](v39, 0);
  }
}

uint64_t sub_1C4D626E0(uint64_t a1, const char *a2, void *a3)
{
  return objc_msgSend_v1(a3, a2, (uint64_t)a3);
}

void sub_1C4D63078(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4D6309C(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_setServerConfig_(WeakRetained, v7, (uint64_t)v9);

  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v5);
  }
}

void sub_1C4D6320C(uint64_t a1, void *a2, void *a3)
{
  id v48 = a2;
  id v7 = a3;
  if (!v7)
  {
    uint64_t v8 = objc_msgSend_publicCloudDBURL(v48, v5, v6);

    if (v8)
    {
      __int16 v11 = objc_msgSend_publicCloudDBURL(v48, v9, v10);
      objc_msgSend_setPublicCloudDBURL_(*(void **)(a1 + 32), v12, (uint64_t)v11);
    }
    uint64_t v13 = objc_msgSend_publicShareServiceURL(v48, v9, v10);

    if (v13)
    {
      uint64_t v16 = objc_msgSend_publicShareServiceURL(v48, v14, v15);
      objc_msgSend_setPublicShareServiceURL_(*(void **)(a1 + 32), v17, (uint64_t)v16);
    }
    uint64_t v18 = objc_msgSend_publicDeviceServiceURL(v48, v14, v15);

    if (v18)
    {
      uint64_t v21 = objc_msgSend_publicDeviceServiceURL(v48, v19, v20);
      objc_msgSend_setPublicDeviceServiceURL_(*(void **)(a1 + 32), v22, (uint64_t)v21);
    }
    uint64_t v23 = objc_msgSend_publicCodeServiceURL(v48, v19, v20);

    if (v23)
    {
      uint64_t v26 = objc_msgSend_publicCodeServiceURL(v48, v24, v25);
      objc_msgSend_setPublicCodeServiceURL_(*(void **)(a1 + 32), v27, (uint64_t)v26);
    }
    id v28 = objc_msgSend_publicMetricsServiceURL(v48, v24, v25);

    if (v28)
    {
      uint64_t v31 = objc_msgSend_publicMetricsServiceURL(v48, v29, v30);
      objc_msgSend_setPublicMetricsServiceURL_(*(void **)(a1 + 32), v32, (uint64_t)v31);
    }
    char v33 = objc_msgSend_containerScopedUserID(v48, v29, v30);

    if (v33)
    {
      id v36 = objc_msgSend_containerScopedUserID(v48, v34, v35);
      objc_msgSend_setContainerScopedUserID_(*(void **)(a1 + 32), v37, (uint64_t)v36);
    }
    uint64_t v38 = objc_msgSend_orgAdminUserID(v48, v34, v35);

    if (v38)
    {
      uint64_t v41 = objc_msgSend_orgAdminUserID(v48, v39, v40);
      objc_msgSend_setOrgAdminUserID_(*(void **)(a1 + 32), v42, (uint64_t)v41);
    }
    if (objc_msgSend_environment(v48, v39, v40) != -1)
    {
      uint64_t v45 = objc_msgSend_environment(v48, v43, v44);
      objc_msgSend_setCachedEnvironment_(*(void **)(a1 + 32), v46, v45);
    }
  }
  uint64_t v47 = *(void *)(a1 + 40);
  if (v47) {
    (*(void (**)(uint64_t, id, id))(v47 + 16))(v47, v48, v7);
  }
}

void sub_1C4D634E0(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v7 = a3;
  if (v7)
  {
    uint64_t v8 = 0;
  }
  else
  {
    switch(*(void *)(a1 + 40))
    {
      case 1:
        uint64_t v9 = objc_msgSend_publicShareServiceURL(v11, v5, v6);
        break;
      case 2:
        uint64_t v9 = objc_msgSend_publicDeviceServiceURL(v11, v5, v6);
        break;
      case 3:
        uint64_t v9 = objc_msgSend_publicCodeServiceURL(v11, v5, v6);
        break;
      case 4:
        uint64_t v9 = objc_msgSend_publicMetricsServiceURL(v11, v5, v6);
        break;
      default:
        uint64_t v9 = objc_msgSend_publicCloudDBURL(v11, v5, v6);
        break;
    }
    uint64_t v8 = (void *)v9;
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v8, v7);
  }
}

void sub_1C4D636A0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = v7;
    uint64_t v18 = objc_msgSend_containerScopedUserID(v5, v16, v17);
    uint64_t v21 = objc_msgSend_account(*(void **)(a1 + 32), v19, v20);
    uint64_t v24 = objc_msgSend_dsid(v21, v22, v23);
    int v25 = 138543618;
    uint64_t v26 = v18;
    __int16 v27 = 2112;
    id v28 = v24;
    _os_log_debug_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_DEBUG, "Fetched container scoped user ID of %{public}@ for dsid %@", (uint8_t *)&v25, 0x16u);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10)
  {
    id v11 = objc_msgSend_containerScopedUserID(v5, v8, v9);
    BOOL v14 = objc_msgSend_orgAdminUserID(v5, v12, v13);
    (*(void (**)(uint64_t, void *, void *, id))(v10 + 16))(v10, v11, v14, v6);
  }
}

void sub_1C4D638F0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v8 = a3;
    uint64_t v7 = objc_msgSend_environment(a2, v5, v6);
    (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, v7, v8);
  }
}

void sub_1C4D63C98(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4D63CBC(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v6 = WeakRetained;
  if (*(void *)(a1 + 32))
  {
    uint64_t v7 = objc_msgSend_baseURLForServerType_partitionType_(WeakRetained, v5, *(void *)(a1 + 48), 1);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1C4D640E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D64D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D64D4C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4D64D5C(uint64_t a1)
{
}

uint64_t sub_1C4D64D64(uint64_t a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = NSString;
  uint64_t v5 = *MEMORY[0x1E4F19BF0];
  id v8 = objc_msgSend_applicationBundleID(*(void **)(a1 + 32), v6, v7);
  uint64_t v10 = objc_msgSend_stringWithValidatedFormat_validFormatSpecifiers_error_(v4, v9, v5, @"%@", 0, v8);

  if (objc_msgSend_isEqualToString_(v10, v11, (uint64_t)v3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    BOOL v14 = *MEMORY[0x1E4F1A500];
    uint64_t v15 = 1;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v28 = v16;
      __int16 v29 = 2114;
      id v30 = v3;
      uint64_t v17 = "Allowing data repair container %{public}@ to set bundle identifier override on operation to '%{public}@'";
LABEL_12:
      _os_log_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_INFO, v17, buf, 0x16u);
    }
  }
  else if (objc_msgSend_length(*(void **)(a1 + 40), v12, v13) {
         && objc_msgSend_hasPrefix_(v3, v18, *(void *)(a1 + 40)))
  }
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    BOOL v14 = *MEMORY[0x1E4F1A500];
    uint64_t v15 = 1;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v28 = v19;
      __int16 v29 = 2114;
      id v30 = v3;
      uint64_t v17 = "Allowing %{public}@ to set bundle identifier override on operation to prefixed value '%{public}@'";
      goto LABEL_12;
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v20 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_FAULT))
    {
      uint64_t v26 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v28 = v26;
      __int16 v29 = 2114;
      id v30 = v3;
      _os_log_fault_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_FAULT, "Container %@ is not allowed to set bundle identifier override '%{public}@'", buf, 0x16u);
    }
    uint64_t v22 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v21, *MEMORY[0x1E4F19C40], 8, @"Container %@ is not allowed to set application bundle identifier override %@ without an entitlement", *(void *)(a1 + 32), v3);
    uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v24 = *(void **)(v23 + 40);
    *(void *)(v23 + 40) = v22;

    uint64_t v15 = 0;
  }

  return v15;
}

void sub_1C4D654DC()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = (void *)qword_1EBBCFB88;
  qword_1EBBCFB88 = v0;

  objc_msgSend_setName_((void *)qword_1EBBCFB88, v2, @"com.apple.cloudkit.sharedThrottlingQueue");
  objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], v3, v4);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  int v7 = objc_msgSend_clientThrottleQueueWidth(v9, v5, v6);
  objc_msgSend_setMaxConcurrentOperationCount_((void *)qword_1EBBCFB88, v8, v7);
}

void sub_1C4D65564(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v7 = objc_msgSend_userInfo(v3, v5, v6);
  id v9 = objc_msgSend_objectForKeyedSubscript_(v7, v8, @"CKDAuthorizationBundleIdentifierKey");

  id v12 = objc_msgSend_applicationBundleIdentifierForTCC(WeakRetained, v10, v11);
  int isEqualToString = objc_msgSend_isEqualToString_(v12, v13, (uint64_t)v9);

  if (isEqualToString)
  {
    uint64_t v17 = objc_msgSend_tccAuthQueue(WeakRetained, v15, v16);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = sub_1C4D65680;
    v18[3] = &unk_1E64F0948;
    id v19 = v3;
    id v20 = WeakRetained;
    dispatch_async(v17, v18);
  }
}

void sub_1C4D65680(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_userInfo(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_objectForKeyedSubscript_(v4, v5, @"CKDAuthorizationKey");
  id v10 = (id)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    uint64_t v8 = objc_msgSend_unsignedIntegerValue(v10, v6, v7);
    objc_msgSend__lockedHandleTCCAuthorizationChangedEvent_(*(void **)(a1 + 40), v9, v8);
  }
  else
  {
    objc_msgSend__lockedHandleTCCAuthorizationChangedEvent_(*(void **)(a1 + 40), v6, -1);
  }
}

void sub_1C4D66064(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v6 = objc_msgSend_completionBlock(*(void **)(a1 + 32), v4, v5);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = sub_1C4D6626C;
  v23[3] = &unk_1E64F0D50;
  id v7 = v6;
  id v24 = v7;
  objc_copyWeak(&v27, &location);
  id v25 = *(id *)(a1 + 64);
  id v26 = *(id *)(a1 + 72);
  objc_msgSend_setCompletionBlock_(*(void **)(a1 + 32), v8, (uint64_t)v23);
  char isLongLived = objc_msgSend_isLongLived(*(void **)(a1 + 32), v9, v10);
  BOOL v14 = *(void **)(a1 + 40);
  if (isLongLived)
  {
    uint64_t v15 = objc_msgSend_uncancellableOperationQueue(v14, v11, v12);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = sub_1C4D6630C;
    v18[3] = &unk_1E64F0D78;
    uint64_t v16 = *(void **)(a1 + 48);
    void v18[4] = *(void *)(a1 + 40);
    id v19 = v16;
    id v20 = *(id *)(a1 + 32);
    id v21 = *(id *)(a1 + 56);
    id v22 = *(id *)(a1 + 72);
    objc_msgSend_addOperationWithBlock_(v15, v17, (uint64_t)v18);
  }
  else
  {
    objc_msgSend_addOperation_(v14, v11, *(void *)(a1 + 32));
  }

  objc_destroyWeak(&v27);
  objc_destroyWeak(&location);
}

void sub_1C4D66244(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4D6626C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v4 = *(void *)(a1 + 40);
  id v11 = WeakRetained;
  id v7 = objc_msgSend_container(WeakRetained, v5, v6);
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 48);
  if (v4) {
    objc_msgSend__handleCompletionForOperation_initialMessageReplyBlock_customCompletionBlock_(v7, v8, (uint64_t)v11, v10, *(void *)(a1 + 40));
  }
  else {
    objc_msgSend__handleCompletionForOperation_initialMessageReplyBlock_(v7, v8, (uint64_t)v11, v10);
  }
}

void sub_1C4D6630C(uint64_t a1, const char *a2, uint64_t a3)
{
  location[3] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_deviceContext(*(void **)(a1 + 32), a2, a3);
  id v7 = objc_msgSend_operationInfoCache(v4, v5, v6);
  uint64_t v10 = objc_msgSend_operationID(*(void **)(a1 + 40), v8, v9);
  uint64_t v12 = objc_msgSend_operationInfoMetadataForOperationWithID_(v7, v11, (uint64_t)v10);

  uint64_t v15 = objc_msgSend_retryNumber(v12, v13, v14);
  uint64_t v18 = objc_msgSend_integerValue(v15, v16, v17);

  if (objc_msgSend_isOutstandingOperation(*(void **)(a1 + 40), v19, v20)
    && (!objc_msgSend_isOutstandingOperation(*(void **)(a1 + 40), v21, v22)
     || (objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], v21, v22),
         uint64_t v23 = objc_claimAutoreleasedReturnValue(),
         int v26 = objc_msgSend_longlivedOperationMaxRetryCount(v23, v24, v25),
         v23,
         v18 <= v26)))
  {
    if (!v12)
    {
      __int16 v29 = objc_msgSend_operationID(*(void **)(a1 + 48), v21, v22);
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v30 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(location[0]) = 138543362;
        *(id *)((char *)location + 4) = v29;
        _os_log_error_impl(&dword_1C4CFF000, v30, OS_LOG_TYPE_ERROR, "No cached metadata found for outstanding operation %{public}@. Finishing it with an error", (uint8_t *)location, 0xCu);
      }
      char v33 = objc_msgSend_deviceContext(*(void **)(a1 + 32), v31, v32);
      id v36 = objc_msgSend_operationInfoCache(v33, v34, v35);
      uint64_t v37 = *(void *)(a1 + 40);
      uint64_t v40 = objc_msgSend_appContainerAccountTuple(*(void **)(a1 + 32), v38, v39);
      objc_msgSend_setOperationInfo_forOperationID_appContainerAccountTuple_(v36, v41, v37, v29, v40);

      uint64_t v43 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v42, *MEMORY[0x1E4F19DD8], 1000, @"No cached metadata found for outstanding operation %@", v29);
      uint64_t v45 = objc_msgSend_invocationToFinishOperationWithInfo_withError_(MEMORY[0x1E4F1CA18], v44, *(void *)(a1 + 40), v43);
      __int16 v46 = [CKDLongLivedOperationPersistedCallback alloc];
      isCompletionCallback = objc_msgSend_initWithProtocol_invocation_isCompletionCallback_(v46, v47, *(void *)(a1 + 56), v45, 1);
      id v51 = objc_msgSend_deviceContext(*(void **)(a1 + 32), v49, v50);
      uint64_t v54 = objc_msgSend_operationInfoCache(v51, v52, v53);
      objc_msgSend_archiveCallback_forOperationID_(v54, v55, (uint64_t)isCompletionCallback, v29);
    }
  }
  else
  {
    id v27 = objc_msgSend_container(*(void **)(a1 + 48), v21, v22);
    objc_msgSend_addOperation_(v27, v28, *(void *)(a1 + 48));
  }
  char v56 = [CKDLongLivedCallbackRelayOperation alloc];
  uint64_t v58 = objc_msgSend_initWithOperationInfo_container_(v56, v57, *(void *)(a1 + 40), *(void *)(a1 + 32));
  uint64_t v61 = objc_msgSend_clientOperationCallbackProxy(v58, v59, v60);
  objc_msgSend_activate(v61, v62, v63);

  objc_initWeak(location, v58);
  v66[0] = MEMORY[0x1E4F143A8];
  v66[1] = 3221225472;
  v66[2] = sub_1C4D666E4;
  v66[3] = &unk_1E64F0768;
  objc_copyWeak(&v68, location);
  id v67 = *(id *)(a1 + 64);
  objc_msgSend_setCompletionBlock_(v58, v64, (uint64_t)v66);
  objc_msgSend_addOperation_(*(void **)(a1 + 32), v65, (uint64_t)v58);

  objc_destroyWeak(&v68);
  objc_destroyWeak(location);
}

void sub_1C4D666BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D666E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = objc_msgSend_container(WeakRetained, v2, v3);
  objc_msgSend__handleCompletionForOperation_initialMessageReplyBlock_customCompletionBlock_(v4, v5, (uint64_t)WeakRetained, *(void *)(a1 + 32), &unk_1F2042A90);
}

void sub_1C4D66894(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D668A8(uint64_t a1)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  objc_initWeak(&location, *(id *)(a1 + 32));
  if (objc_msgSend_wantsRequestStatistics(*(void **)(a1 + 40), v2, v3))
  {
    v79[0] = MEMORY[0x1E4F143A8];
    v79[1] = 3221225472;
    v79[2] = sub_1C4D66D10;
    v79[3] = &unk_1E64F0DC8;
    objc_copyWeak(&v80, &location);
    objc_msgSend_setRequestCompletedBlock_(*(void **)(a1 + 32), v6, (uint64_t)v79);
    objc_destroyWeak(&v80);
  }
  id v7 = objc_msgSend_pendingOperationIDs(*(void **)(a1 + 48), v4, v5);
  objc_sync_enter(v7);
  uint64_t v10 = objc_msgSend_pendingOperationIDs(*(void **)(a1 + 48), v8, v9);
  char v12 = objc_msgSend_containsObject_(v10, v11, *(void *)(a1 + 56));

  uint64_t v15 = objc_msgSend_pendingOperationIDs(*(void **)(a1 + 48), v13, v14);
  objc_msgSend_removeObject_(v15, v16, *(void *)(a1 + 56));

  objc_sync_exit(v7);
  if ((v12 & 1) != 0
    || (objc_msgSend_cancel(*(void **)(a1 + 32), v17, v18),
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v19, *MEMORY[0x1E4F19DD8], 1, @"Operation %@ was cancelled", *(void *)(a1 + 56)), (id v21 = (id)objc_claimAutoreleasedReturnValue()) == 0))
  {
    uint64_t v22 = *(void **)(a1 + 48);
    uint64_t v23 = *(void *)(a1 + 32);
    id v78 = 0;
    objc_msgSend__isContainerAuthorizedForOperation_error_(v22, v17, v23, &v78);
    id v21 = v78;
    if (!v21)
    {
      if (objc_msgSend_isLongLivedCallbackRelayOperation(*(void **)(a1 + 32), v17, v20))
      {
        __int16 v29 = objc_msgSend_processScopedClientProxy(*(void **)(a1 + 48), v27, v28);
        if (!objc_msgSend_processIsAttached(v29, v30, v31))
        {
LABEL_15:

          goto LABEL_16;
        }
        char isOutstandingOperation = objc_msgSend_isOutstandingOperation(*(void **)(a1 + 40), v32, v33);

        if ((isOutstandingOperation & 1) == 0)
        {
          uint64_t v35 = objc_msgSend_deviceContext(*(void **)(a1 + 48), v27, v28);
          uint64_t v38 = objc_msgSend_operationInfoCache(v35, v36, v37);
          uint64_t v39 = *(void *)(a1 + 56);
          uint64_t v40 = *(void *)(a1 + 40);
          uint64_t v43 = objc_msgSend_appContainerAccountTuple(*(void **)(a1 + 48), v41, v42);
          objc_msgSend_setOperationInfo_forOperationID_appContainerAccountTuple_(v38, v44, v40, v39, v43);

          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          uint64_t v45 = *MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
          {
            uint64_t v77 = *(void *)(a1 + 48);
            uint64_t v76 = *(void *)(a1 + 56);
            *(_DWORD *)buf = 138543618;
            uint64_t v83 = v76;
            __int16 v84 = 2112;
            uint64_t v85 = v77;
            _os_log_debug_impl(&dword_1C4CFF000, v45, OS_LOG_TYPE_DEBUG, "Writing down long-lived operation %{public}@ for container: %@", buf, 0x16u);
          }
          __int16 v29 = objc_msgSend_clientOperationCallbackProxy(*(void **)(a1 + 32), v46, v47);
          objc_msgSend_handleLongLivedOperationDidPersist(v29, v48, v49);
          goto LABEL_15;
        }
      }
LABEL_16:
      if (objc_msgSend_isLongLived(*(void **)(a1 + 32), v27, v28))
      {
        if ((objc_msgSend_isLongLivedCallbackRelayOperation(*(void **)(a1 + 32), v50, v51) & 1) == 0)
        {
          id v52 = objc_msgSend_ckOperationClassName(*(void **)(a1 + 40), v50, v51);
          uint64_t v55 = objc_msgSend_containerID(*(void **)(a1 + 48), v53, v54);
          int isOperationAllowedIndependentlyInSyncBubble = _isOperationAllowedIndependentlyInSyncBubble(v52, v55);

          if (isOperationAllowedIndependentlyInSyncBubble) {
            objc_msgSend_beginUserSyncTask(*(void **)(a1 + 32), v50, v51);
          }
        }
      }
      objc_msgSend_sharedClientThrottlingOperationQueue(CKDContainer, v50, v51);
      id v21 = (id)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_usesBackgroundSession(*(void **)(a1 + 32), v57, v58))
      {
        uint64_t v61 = objc_msgSend_backgroundOperationThrottleQueue(*(void **)(a1 + 48), v59, v60);

        id v21 = (id)v61;
      }
      uint64_t v62 = objc_msgSend_entitlements(*(void **)(a1 + 48), v59, v60);
      if (objc_msgSend_hasCloudKitSupportServiceEntitlement(v62, v63, v64))
      {
        int isCloudKitSupportOperation = objc_msgSend_isCloudKitSupportOperation(*(void **)(a1 + 32), v65, v66);

        if (!isCloudKitSupportOperation)
        {
LABEL_26:
          uint64_t v70 = [CKDPlaceholderOperation alloc];
          uint64_t v25 = objc_msgSend_initWithOperation_targetOperationQueue_(v70, v71, *(void *)(a1 + 32), v21);
          uint64_t v74 = objc_msgSend_operationQueue(*(void **)(a1 + 48), v72, v73);
          objc_msgSend_addOperation_(v74, v75, (uint64_t)v25);

          goto LABEL_27;
        }
        objc_msgSend_cloudKitSupportOperationThrottleQueue(*(void **)(a1 + 48), v68, v69);
        uint64_t v62 = v21;
        id v21 = (id)objc_claimAutoreleasedReturnValue();
      }

      goto LABEL_26;
    }
  }
  id v24 = *(void **)(a1 + 32);
  uint64_t v25 = objc_msgSend_CKClientSuitableError(v21, v17, v20);
  objc_msgSend_finishWithError_(v24, v26, (uint64_t)v25);
LABEL_27:

  objc_destroyWeak(&location);
}

void sub_1C4D66CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D66D10(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = (id *)(a1 + 32);
    id v3 = a2;
    id WeakRetained = objc_loadWeakRetained(v2);
    uint64_t v6 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v4, v5);
    objc_msgSend_handleRequestDidComplete_(v6, v7, (uint64_t)v3);
  }
}

void sub_1C4D66F04(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_accountStatusWorkloop(*(void **)(a1 + 32), a2, a3);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  uint64_t v6[2] = sub_1C4D66FA8;
  v6[3] = &unk_1E64F0E18;
  uint64_t v5 = *(void **)(a1 + 40);
  v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  dispatch_async(v4, v6);
}

uint64_t sub_1C4D66FA8(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v11 = 138412290;
    uint64_t v12 = v5;
    _os_log_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_INFO, "Reloading account for %@", (uint8_t *)&v11, 0xCu);
  }
  uint64_t v6 = objc_msgSend_sharedAccountStore(CKDAccountStore, v3, v4);
  objc_msgSend_invalidateCache(v6, v7, v8);

  objc_msgSend__reloadAccount_(*(void **)(a1 + 32), v9, 1);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1C4D67228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D67248(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = objc_msgSend_error(WeakRetained, v2, v3);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = objc_msgSend_error(WeakRetained, v5, v6);
    (*(void (**)(uint64_t, uint64_t, void *))(v7 + 16))(v7, 1, v8);
  }
  else
  {
    if (*(void *)(a1 + 56) == 1)
    {
      uint64_t v9 = objc_msgSend_discoverable(WeakRetained, v5, v6);
      objc_msgSend__applicationPermissionStatusFromUserPrivacySetting_(*(void **)(a1 + 32), v10, v9);
    }
    else
    {
      objc_msgSend__applicationPermissionStatusFromUserPrivacySetting_(*(void **)(a1 + 32), v5, 0);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1C4D674B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v21 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4D674E0(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v5 = objc_msgSend_error(WeakRetained, v3, v4);

  if (v5)
  {
    uint64_t v8 = *(void *)(v1 + 40);
    uint64_t v9 = objc_msgSend_error(WeakRetained, v6, v7);
    (*(void (**)(uint64_t, uint64_t, void, void *))(v8 + 16))(v8, 1, 0, v9);
LABEL_16:
  }
  else
  {
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v35 = WeakRetained;
    uint64_t v9 = objc_msgSend_containerPrivacySettings(WeakRetained, v6, v7);
    uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v36, v40, 16);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v37;
      uint64_t v14 = (id *)(v1 + 56);
      uint64_t v34 = v1;
      while (2)
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v37 != v13) {
            objc_enumerationMutation(v9);
          }
          uint64_t v16 = *(void **)(*((void *)&v36 + 1) + 8 * i);
          id v17 = objc_loadWeakRetained(v14);
          uint64_t v20 = objc_msgSend_containerID(v17, v18, v19);
          uint64_t v23 = objc_msgSend_containerID(v16, v21, v22);
          int isEqual = objc_msgSend_isEqual_(v20, v24, (uint64_t)v23);

          if (isEqual)
          {
            uint64_t v28 = v34;
            if (*(unsigned char *)(v34 + 64))
            {
              BOOL v30 = objc_msgSend_discoverable(v16, v26, v27) != 0;
              uint64_t v29 = objc_msgSend_discoverable(v16, v31, v32);
            }
            else
            {
              uint64_t v29 = 0;
              BOOL v30 = 0;
            }
            id WeakRetained = v35;
            uint64_t v33 = objc_msgSend__applicationPermissionStatusFromUserPrivacySetting_(*(void **)(v34 + 32), v26, v29, v34);
            (*(void (**)(void, uint64_t, BOOL, void))(*(void *)(v28 + 40) + 16))(*(void *)(v28 + 40), v33, v30, 0);
            goto LABEL_16;
          }
        }
        uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v26, (uint64_t)&v36, v40, 16);
        uint64_t v1 = v34;
        if (v12) {
          continue;
        }
        break;
      }
    }

    (*(void (**)(void))(*(void *)(v1 + 40) + 16))();
    id WeakRetained = v35;
  }
}

void sub_1C4D67894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D678B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = objc_msgSend_error(WeakRetained, v2, v3);

  if (v4)
  {
    uint64_t v7 = objc_msgSend_error(WeakRetained, v5, v6);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    if (*(unsigned char *)(a1 + 48)) {
      uint64_t v8 = 3;
    }
    else {
      uint64_t v8 = 2;
    }
    (*(void (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v8, 0);
  }
}

void sub_1C4D67A0C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x2020000000;
  char v33 = 1;
  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x2020000000;
  char v31 = 1;
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x2020000000;
  v29[3] = a2;
  uint64_t v6 = dispatch_group_create();
  uint64_t v7 = v6;
  if (!a2)
  {
    dispatch_group_enter(v6);
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 48);
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = sub_1C4D67C34;
    v25[3] = &unk_1E64F0ED8;
    v25[4] = v8;
    uint64_t v27 = v30;
    uint64_t v28 = v29;
    int v26 = v7;
    objc_msgSend__globalStatusForApplicationPermission_completionHandler_(v8, v10, v9, v25);
  }
  uint64_t v11 = CKGetGlobalQueue();
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  id v16[2] = sub_1C4D67E44;
  v16[3] = &unk_1E64F0F28;
  uint64_t v23 = a2;
  uint64_t v20 = v29;
  id v12 = *(id *)(a1 + 40);
  uint64_t v21 = v32;
  uint64_t v13 = *(void *)(a1 + 32);
  id v17 = v5;
  uint64_t v18 = v13;
  id v19 = v12;
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v22 = v30;
  uint64_t v24 = v14;
  id v15 = v5;
  dispatch_group_notify(v7, v11, v16);

  _Block_object_dispose(v29, 8);
  _Block_object_dispose(v30, 8);
  _Block_object_dispose(v32, 8);
}

void sub_1C4D67C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C4D67C34(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  void v30[3] = *MEMORY[0x1E4F143B8];
  id v9 = a4;
  if (a2 == 3)
  {
    if ((a3 & 1) == 0)
    {
      uint64_t v28 = objc_msgSend_applicationDisplayName(*(void **)(a1 + 32), v7, v8);
      uint64_t v10 = CKLocalizedString();

      uint64_t v11 = CKLocalizedString();
      uint64_t v12 = *MEMORY[0x1E4F1D9A8];
      v29[0] = *MEMORY[0x1E4F1D990];
      v29[1] = v12;
      v30[0] = v10;
      v30[1] = v11;
      v29[2] = *MEMORY[0x1E4F1D9E0];
      uint64_t v13 = CKLocalizedString();
      v30[2] = v13;
      id v15 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v14, (uint64_t)v30, v29, 3, v28);
      uint64_t v18 = objc_msgSend_mutableCopy(v15, v16, v17);

      uint64_t v21 = objc_msgSend_applicationIcon(*(void **)(a1 + 32), v19, v20);

      if (v21)
      {
        uint64_t v24 = objc_msgSend_applicationIcon(*(void **)(a1 + 32), v22, v23);
        objc_msgSend_setObject_forKeyedSubscript_(v18, v25, (uint64_t)v24, *MEMORY[0x1E4F1D9E8]);
      }
      CFUserNotificationRef v26 = CFUserNotificationCreate(0, 0.0, 3uLL, 0, (CFDictionaryRef)v18);
      objc_msgSend_showUserNotification_withCompletionBlock_(MEMORY[0x1E4F1A490], v27, (uint64_t)v26, &unk_1F2042AB0);
      if (v26) {
        CFRelease(v26);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1C4D67E44(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    *(_DWORD *)buf = 67109376;
    int v49 = v4;
    __int16 v50 = 1024;
    int v51 = v5;
    _os_log_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_INFO, "Permission status: %d (global: %d)", buf, 0xEu);
  }
  uint64_t v6 = *(const char **)(a1 + 80);
  if ((unint64_t)(v6 - 2) >= 2)
  {
    if (v6 != (const char *)1)
    {
      uint64_t v7 = *(const char **)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
      goto LABEL_11;
    }
LABEL_9:
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    return;
  }
  uint64_t v7 = *(const char **)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  if (v6 == v7) {
    goto LABEL_9;
  }
LABEL_11:
  if (v7 == (const char *)2) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
  }
  uint64_t v8 = objc_msgSend_deviceContext(*(void **)(a1 + 40), v6, v3);
  uint64_t v11 = objc_msgSend_testDeviceReference(v8, v9, v10);

  if (v11) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 0;
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    BOOL v16 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) != 0;
LABEL_21:
    objc_msgSend__setApplicationPermission_enabled_completionHandler_(*(void **)(a1 + 40), v12, *(void *)(a1 + 88), v16, *(void *)(a1 + 48));
    return;
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    BOOL v16 = 0;
    goto LABEL_21;
  }
  *(_DWORD *)buf = 0;
  if ((*(unsigned char *)(a1 + 88) & 1) == 0)
  {
    uint64_t v14 = 0;
    id v15 = 0;
LABEL_27:
    uint64_t v39 = *(void *)(a1 + 48);
    uint64_t v40 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v12, *MEMORY[0x1E4F19C40], 1, @"Could not create a user notification %d", v14);
    (*(void (**)(uint64_t, uint64_t, void *))(v39 + 16))(v39, 1, v40);

    goto LABEL_28;
  }
  uint64_t v41 = objc_msgSend_applicationDisplayName(*(void **)(a1 + 40), v12, v13);
  uint64_t v17 = CKLocalizedString();

  uint64_t v18 = *MEMORY[0x1E4F1D990];
  v47[0] = v17;
  uint64_t v19 = *MEMORY[0x1E4F1D9A8];
  v46[0] = v18;
  v46[1] = v19;
  uint64_t v20 = CKLocalizedString();
  v47[1] = v20;
  v46[2] = *MEMORY[0x1E4F1D9E0];
  uint64_t v21 = CKLocalizedString();
  v47[2] = v21;
  v46[3] = *MEMORY[0x1E4F1D9D0];
  uint64_t v22 = CKLocalizedString();
  v47[3] = v22;
  uint64_t v24 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v23, (uint64_t)v47, v46, 4, v41);
  id v15 = objc_msgSend_mutableCopy(v24, v25, v26);

  uint64_t v29 = objc_msgSend_applicationIcon(*(void **)(a1 + 40), v27, v28);

  if (v29)
  {
    uint64_t v32 = objc_msgSend_applicationIcon(*(void **)(a1 + 40), v30, v31);
    objc_msgSend_setObject_forKeyedSubscript_(v15, v33, (uint64_t)v32, *MEMORY[0x1E4F1D9E8]);
  }
  CFUserNotificationRef v34 = CFUserNotificationCreate(0, 0.0, 3uLL, (SInt32 *)buf, (CFDictionaryRef)v15);

  if (!v34)
  {
    uint64_t v14 = *(unsigned int *)buf;
    goto LABEL_27;
  }
  id v35 = (void *)MEMORY[0x1E4F1A490];
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 3221225472;
  v42[2] = sub_1C4D68288;
  v42[3] = &unk_1E64F0F00;
  uint64_t v36 = *(void *)(a1 + 88);
  long long v37 = *(void **)(a1 + 48);
  v42[4] = *(void *)(a1 + 40);
  uint64_t v44 = v36;
  id v43 = v37;
  CFUserNotificationRef v45 = v34;
  objc_msgSend_showUserNotification_withCompletionBlock_(v35, v38, (uint64_t)v34, v42);

LABEL_28:
}

void sub_1C4D68288(uint64_t a1, const char *a2, char a3)
{
  if ((a3 & 3) == 1)
  {
    objc_msgSend__setApplicationPermission_enabled_completionHandler_(*(void **)(a1 + 32), a2, *(void *)(a1 + 48), 0, *(void *)(a1 + 40));
  }
  else if ((a3 & 3) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], a2, *MEMORY[0x1E4F19C40], 1, @"Could not create a user notification");
    (*(void (**)(uint64_t, uint64_t, void *))(v4 + 16))(v4, 1, v5);
  }
  else
  {
    objc_msgSend__setApplicationPermission_enabled_completionHandler_(*(void **)(a1 + 32), a2, *(void *)(a1 + 48), 1, *(void *)(a1 + 40));
  }
  uint64_t v6 = *(const void **)(a1 + 56);
  CFRelease(v6);
}

void sub_1C4D683EC(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_clientOperationCallbackProxy(*(void **)(a1 + 32), a2, a3);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = objc_msgSend_operationMetrics(*(void **)(a1 + 32), v4, v5);
  id v9 = objc_msgSend_error(*(void **)(a1 + 32), v7, v8);
  objc_msgSend_handleOperationDidCompleteWithMetrics_error_(v11, v10, (uint64_t)v6, v9);
}

void sub_1C4D687F8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4) {
    (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0);
  }
  objc_msgSend_invalidate(*(void **)(a1 + 32), a2, a3);
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend_operationStatisticsByClassName(*(void **)(a1 + 40), v5, v6);
    id obj = (id)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(obj);
    uint64_t v7 = (objc_class *)objc_opt_class();
    uint64_t v8 = NSStringFromClass(v7);
    id v11 = objc_msgSend_operationStatisticsByClassName(*(void **)(a1 + 40), v9, v10);
    uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(v11, v12, (uint64_t)v8);

    if (!v13)
    {
      id v15 = [CKDOperationStatistics alloc];
      uint64_t v13 = objc_msgSend_initWithOperationClassName_(v15, v16, (uint64_t)v8);
      uint64_t v19 = objc_msgSend_operationStatisticsByClassName(*(void **)(a1 + 40), v17, v18);
      objc_msgSend_setObject_forKeyedSubscript_(v19, v20, (uint64_t)v13, v8);
    }
    objc_msgSend_pushStatisticsTo_(*(void **)(a1 + 48), v14, (uint64_t)v13);

    objc_sync_exit(obj);
  }
}

void sub_1C4D6892C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4D68CA8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_deviceContext(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_operationInfoCache(v4, v5, v6);
  objc_msgSend_outstandingOperationInfosForIDs_(v7, v8, *(void *)(a1 + 40));
  id v10 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    (*(void (**)(uint64_t, id, void))(v9 + 16))(v9, v10, 0);
  }
}

void sub_1C4D68DF0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_deviceContext(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_operationInfoCache(v4, v5, v6);
  id v10 = objc_msgSend_appContainerAccountTuple(*(void **)(a1 + 32), v8, v9);
  objc_msgSend_allOutstandingOperationIDsForAppContainerAccountTuple_(v7, v11, (uint64_t)v10);
  id v13 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    (*(void (**)(uint64_t, id, void))(v12 + 16))(v12, v13, 0);
  }
}

void sub_1C4D68FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D68FF0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v13 = *(void **)(a1 + 32);
    uint64_t v14 = v7;
    uint64_t v17 = objc_msgSend_operationID(v13, v15, v16);
    int v18 = 138543618;
    uint64_t v19 = v17;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Sending user identity to client for operation %{public}@ lookupInfo: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleUserIdentityDiscoveryForLookupInfo_userIdentity_(v11, v12, (uint64_t)v5, v6);
}

void sub_1C4D69284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D692A4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v13 = *(void **)(a1 + 32);
    uint64_t v14 = v7;
    uint64_t v17 = objc_msgSend_operationID(v13, v15, v16);
    int v18 = 138543618;
    uint64_t v19 = v17;
    __int16 v20 = 2112;
    id v21 = v6;
    _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Sending user identity to client for operation %{public}@ userIdentity: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleUserIdentityDiscovery_(v11, v12, (uint64_t)v6);
}

void sub_1C4D69534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D69554(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v10 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void **)(a1 + 32);
    uint64_t v17 = v10;
    __int16 v20 = objc_msgSend_operationID(v16, v18, v19);
    int v21 = 138543618;
    uint64_t v22 = v20;
    __int16 v23 = 2112;
    id v24 = v7;
    _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "Sending user identity to client for operation %{public}@ lookupInfo: %@", (uint8_t *)&v21, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v14 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
  objc_msgSend_handleShareParticipantFetchForLookupInfo_shareParticipant_error_(v14, v15, (uint64_t)v7, v8, v9);
}

void sub_1C4D69878(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4D698A8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v11 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = *(void **)(a1 + 32);
    uint64_t v26 = v11;
    uint64_t v29 = objc_msgSend_operationID(v25, v27, v28);
    int v30 = 138543618;
    uint64_t v31 = v29;
    __int16 v32 = 2112;
    id v33 = v7;
    _os_log_debug_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_DEBUG, "Sending save completion to client for operation %{public}@ zoneID: %@", (uint8_t *)&v30, 0x16u);
  }
  uint64_t v14 = objc_msgSend_container(WeakRetained, v12, v13);
  uint64_t v17 = objc_msgSend_options(v14, v15, v16);
  if (objc_msgSend_returnPCSMetadata(v17, v18, v19))
  {
    char v20 = CKIsPCSError();

    if ((v20 & 1) == 0) {
      objc_msgSend_fillOutPCSMetadataInfo(v8, v21, v22);
    }
  }
  else
  {
  }
  __int16 v23 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v21, v22);
  objc_msgSend_handleSaveForRecordZoneID_recordZone_error_(v23, v24, (uint64_t)v7, v8, v9);
}

void sub_1C4D69A78(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void **)(a1 + 32);
    uint64_t v14 = v7;
    uint64_t v17 = objc_msgSend_operationID(v13, v15, v16);
    int v18 = 138543618;
    uint64_t v19 = v17;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Sending delete completion to client for operation %{public}@ zoneID: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleDeleteForRecordZoneID_error_(v11, v12, (uint64_t)v5, v6);
}

void sub_1C4D69D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D69D2C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v11 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = *(void **)(a1 + 32);
    uint64_t v26 = v11;
    uint64_t v29 = objc_msgSend_operationID(v25, v27, v28);
    int v30 = 138543618;
    uint64_t v31 = v29;
    __int16 v32 = 2112;
    id v33 = v8;
    _os_log_debug_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_DEBUG, "Sending fetch record zones progress to client for operation %{public}@ zoneID: %@", (uint8_t *)&v30, 0x16u);
  }
  uint64_t v14 = objc_msgSend_container(WeakRetained, v12, v13);
  uint64_t v17 = objc_msgSend_options(v14, v15, v16);
  if (objc_msgSend_returnPCSMetadata(v17, v18, v19))
  {
    char v20 = CKIsPCSError();

    if ((v20 & 1) == 0) {
      objc_msgSend_fillOutPCSMetadataInfo(v7, v21, v22);
    }
  }
  else
  {
  }
  __int16 v23 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v21, v22);
  objc_msgSend_handleFetchForRecordZoneID_recordZone_error_(v23, v24, (uint64_t)v8, v7, v9);
}

void sub_1C4D6A200(_Unwind_Exception *a1)
{
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 104));
  _Unwind_Resume(a1);
}

void sub_1C4D6A258()
{
}

void sub_1C4D6A260(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v11 = v4;
    uint64_t v14 = objc_msgSend_operationID(v10, v12, v13);
    int v15 = 138543618;
    uint64_t v16 = v14;
    __int16 v17 = 2112;
    id v18 = v3;
    _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "Sending zone-was-updated progress to client for operation %{public}@ zoneID: %@", (uint8_t *)&v15, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  objc_msgSend_handleChangeForRecordZoneID_(v8, v9, (uint64_t)v3);
}

void sub_1C4D6A3A4(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v11 = v4;
    uint64_t v14 = objc_msgSend_operationID(v10, v12, v13);
    int v15 = 138543618;
    uint64_t v16 = v14;
    __int16 v17 = 2112;
    id v18 = v3;
    _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "Sending zone-was-deleted progress to client for operation %{public}@ zoneID: %@", (uint8_t *)&v15, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  objc_msgSend_handleDeleteForRecordZoneID_(v8, v9, (uint64_t)v3);
}

void sub_1C4D6A4E8(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v11 = v4;
    uint64_t v14 = objc_msgSend_operationID(v10, v12, v13);
    int v15 = 138543618;
    uint64_t v16 = v14;
    __int16 v17 = 2112;
    id v18 = v3;
    _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "Sending zone-was-purged progress to client for operation %{public}@ zoneID: %@", (uint8_t *)&v15, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  objc_msgSend_handlePurgeForRecordZoneID_(v8, v9, (uint64_t)v3);
}

void sub_1C4D6A62C(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v11 = v4;
    uint64_t v14 = objc_msgSend_operationID(v10, v12, v13);
    int v15 = 138543618;
    uint64_t v16 = v14;
    __int16 v17 = 2112;
    id v18 = v3;
    _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "Sending zone-was-delete-due-to-encrypted-data-reset progress to client for operation %{public}@ zoneID: %@", (uint8_t *)&v15, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  objc_msgSend_handleEncryptedDataResetForRecordZoneID_(v8, v9, (uint64_t)v3);
}

void sub_1C4D6A770(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v12 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v18 = *(void **)(a1 + 32);
    uint64_t v19 = v12;
    uint64_t v22 = objc_msgSend_operationID(v18, v20, v21);
    int v23 = 138543618;
    id v24 = v22;
    __int16 v25 = 2112;
    id v26 = v10;
    _os_log_debug_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_DEBUG, "Sending change token update progress to client for operation %{public}@ error: %@", (uint8_t *)&v23, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v16 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v14, v15);
  objc_msgSend_handleChangeSetCompletionWithServerChangeToken_databaseChangesStatus_error_reply_(v16, v17, (uint64_t)v9, a3, v10, v11);
}

void sub_1C4D6AA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D6AA48(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id v12 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v16 = objc_msgSend_makeClientResult(v12, v14, v15);

  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  __int16 v17 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = *(void **)(a1 + 32);
    int v23 = v17;
    id v26 = objc_msgSend_operationID(v22, v24, v25);
    int v27 = 138544386;
    uint64_t v28 = v26;
    __int16 v29 = 2112;
    int v30 = v16;
    __int16 v31 = 2114;
    id v32 = v9;
    __int16 v33 = 2114;
    id v34 = v10;
    __int16 v35 = 2112;
    id v36 = v11;
    _os_log_debug_impl(&dword_1C4CFF000, v23, OS_LOG_TYPE_DEBUG, "Sending supported device capability check progress to client for operation %{public}@. result: %@, zoneID: %{public}@, capabilitySet: %{public}@, error: %@", (uint8_t *)&v27, 0x34u);
  }
  char v20 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v18, v19);
  objc_msgSend_handleSupportedDeviceCapabilityCheckResultForRecordZoneID_capabilitySet_result_error_(v20, v21, (uint64_t)v9, v10, v16, v11);
}

void sub_1C4D6AD58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D6B0BC(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1C4D6B14C;
  v5[3] = &unk_1E64F1108;
  id v3 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v3;
  objc_msgSend_enumerateContainersUsingBlock_(a2, v4, (uint64_t)v5);
}

void sub_1C4D6B14C(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (objc_msgSend_isEligibleForBroadcastingToContainer_(*(void **)(a1 + 32), v4, (uint64_t)v3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v5 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      int v6 = 138412290;
      id v7 = v3;
      _os_log_debug_impl(&dword_1C4CFF000, v5, OS_LOG_TYPE_DEBUG, "Found eligible container %@", (uint8_t *)&v6, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1C4D6B494(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  uint64_t v6[2] = sub_1C4D6B56C;
  v6[3] = &unk_1E64F1158;
  id v7 = v3;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  char v11 = *(unsigned char *)(a1 + 56);
  id v10 = *(id *)(a1 + 48);
  id v4 = v3;
  objc_msgSend_enumerateClientContainers_(v4, v5, (uint64_t)v6);
}

void sub_1C4D6B56C(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v4 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    id v15 = v3;
    __int16 v16 = 2112;
    uint64_t v17 = v11;
    _os_log_debug_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_DEBUG, "Broadcasting share update to client container %@ for container: %@", buf, 0x16u);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 56);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = sub_1C4D6B6EC;
  v12[3] = &unk_1E64F08D0;
  id v13 = v3;
  id v9 = v3;
  objc_msgSend_handleSharingUIUpdatedShare_recordID_isDeleted_error_reply_(v9, v10, v5, v6, v7, v8, v12);
}

void sub_1C4D6B6EC(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v4 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_error_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_ERROR, "Error broadcasting share update to client container %@: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_1C4D6BB0C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 104));
  _Unwind_Resume(a1);
}

void sub_1C4D6BB64()
{
}

void sub_1C4D6BB6C(uint64_t a1, void *a2, double a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v6 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v12 = *(void **)(a1 + 32);
    id v13 = v6;
    __int16 v16 = objc_msgSend_operationID(v12, v14, v15);
    int v17 = 134218242;
    double v18 = a3;
    __int16 v19 = 2114;
    char v20 = v16;
    _os_log_debug_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_DEBUG, "Sending record save progress %lf to client for operation %{public}@", (uint8_t *)&v17, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v10 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v8, v9);
  objc_msgSend_handleRecordModificationForRecordID_didProgress_(v10, v11, (uint64_t)v5, a3);
}

void sub_1C4D6BCC0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v13 = *(void **)(a1 + 32);
    uint64_t v14 = v7;
    int v17 = objc_msgSend_operationID(v13, v15, v16);
    int v18 = 138543618;
    __int16 v19 = v17;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Sending records in flight progress to client for operation %{public}@ with recordIDs: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleRecordIDsInFlight_reply_(v11, v12, (uint64_t)v5, v6);
}

void sub_1C4D6BE20(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id v12 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v14 = objc_opt_new();
  int v17 = objc_msgSend_etag(v10, v15, v16);
  objc_msgSend_setEtag_(v14, v18, (uint64_t)v17);

  id v21 = objc_msgSend_creationDate(v10, v19, v20);
  objc_msgSend_setCreationDate_(v14, v22, (uint64_t)v21);

  uint64_t v25 = objc_msgSend_modificationDate(v10, v23, v24);
  objc_msgSend_setModificationDate_(v14, v26, (uint64_t)v25);

  __int16 v29 = objc_msgSend_expirationDate(v10, v27, v28);
  objc_msgSend_setExpirationDate_(v14, v30, (uint64_t)v29);

  objc_msgSend_setServerRecord_(v14, v31, (uint64_t)v12);
  id v34 = objc_msgSend_container(WeakRetained, v32, v33);
  uint64_t v37 = objc_msgSend_entitlements(v34, v35, v36);
  if (objc_msgSend_hasProtectionDataEntitlement(v37, v38, v39))
  {
  }
  else
  {
    uint64_t v44 = objc_msgSend_operationInfo(WeakRetained, v40, v41);
    int shouldOnlySaveAssetContent = objc_msgSend_shouldOnlySaveAssetContent(v44, v45, v46);

    if (!shouldOnlySaveAssetContent) {
      goto LABEL_6;
    }
  }
  id v48 = objc_msgSend_protectionData(v10, v42, v43);
  objc_msgSend_setProtectionData_(v14, v49, (uint64_t)v48);

  if (objc_msgSend_signingPCSIdentity(v10, v50, v51))
  {
    objc_msgSend_signingPCSIdentity(v10, v42, v43);
    ExportedRawCompact = (void *)PCSIdentityCreateExportedRawCompact();
    objc_msgSend_setSigningPCSIdentityData_(v14, v53, (uint64_t)ExportedRawCompact);
  }
LABEL_6:
  uint64_t v54 = objc_msgSend_container(WeakRetained, v42, v43);
  uint64_t v57 = objc_msgSend_options(v54, v55, v56);
  if (objc_msgSend_returnPCSMetadata(v57, v58, v59))
  {
    char v60 = CKIsPCSError();

    if (v60) {
      goto LABEL_11;
    }
    objc_msgSend_fillOutPCSMetadataInfo(v10, v61, v62);
    uint64_t v65 = objc_msgSend_pcsKeyID(v10, v63, v64);
    objc_msgSend_setPcsKeyID_(v14, v66, (uint64_t)v65);

    uint64_t v69 = objc_msgSend_allPCSKeyIDs(v10, v67, v68);
    objc_msgSend_setAllPCSKeyIDs_(v14, v70, (uint64_t)v69);

    uint64_t v54 = objc_msgSend_zoneishKeyID(v10, v71, v72);
    objc_msgSend_setZoneishKeyID_(v14, v73, (uint64_t)v54);
  }
  else
  {
  }
LABEL_11:
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v74 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v80 = *(void **)(a1 + 32);
    uint64_t v81 = v74;
    __int16 v84 = objc_msgSend_operationID(v80, v82, v83);
    int v85 = 138543618;
    uint64_t v86 = v84;
    __int16 v87 = 2112;
    id v88 = v9;
    _os_log_debug_impl(&dword_1C4CFF000, v81, OS_LOG_TYPE_DEBUG, "Sending record save completion to client for operation %{public}@ for recordID: %@", (uint8_t *)&v85, 0x16u);
  }
  uint64_t v77 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v75, v76);
  objc_msgSend_handleSaveForRecordID_recordMetadata_error_(v77, v78, (uint64_t)v9, v14, v11);

  objc_msgSend__broadcastUpdateIfNeededForRecord_recordXPCMetadata_recordID_isDeleted_error_(*(void **)(a1 + 40), v79, (uint64_t)v10, v14, v9, 0, v11);
}

void sub_1C4D6C1CC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = *(void **)(a1 + 32);
    uint64_t v15 = v7;
    int v18 = objc_msgSend_operationID(v14, v16, v17);
    int v19 = 138543618;
    uint64_t v20 = v18;
    __int16 v21 = 2112;
    id v22 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_DEBUG, "Sending delete completion to client for operation %{public}@ for recordID: %@", (uint8_t *)&v19, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleDeleteForRecordID_error_(v11, v12, (uint64_t)v5, v6);

  objc_msgSend__broadcastUpdateIfNeededForRecord_recordXPCMetadata_recordID_isDeleted_error_(*(void **)(a1 + 40), v13, 0, 0, v5, 1, v6);
}

void sub_1C4D6C348(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, char a8, double a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v18 = a2;
  id v19 = a3;
  id v20 = a5;
  id v21 = a10;
  id v22 = a11;
  id v23 = a12;
  id v24 = a13;
  id v25 = a14;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v26 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    __int16 v35 = *(void **)(a1 + 32);
    id v32 = v26;
    uint64_t v36 = objc_msgSend_operationID(v35, v33, v34);
    *(_DWORD *)buf = 138543618;
    uint64_t v42 = v36;
    __int16 v43 = 2112;
    id v44 = v18;
    _os_log_debug_impl(&dword_1C4CFF000, v32, OS_LOG_TYPE_DEBUG, "Sending upload completion to client for operation %{public}@ for recordID: %@", buf, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  int v30 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v28, v29);
  objc_msgSend_handleRecordUploadForRecordID_recordKey_arrayIndex_signature_size_paddedFileSize_uploaded_uploadReceipt_uploadReceiptExpiration_wrappedAssetKey_clearAssetKey_referenceSignature_(v30, v31, (uint64_t)v18, v19, a4, v20, a6, a7, a9, a8, v21, v22, v23, v24);
}

void sub_1C4D6C684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D6C6A4(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = objc_msgSend_userRecord(WeakRetained, v3, v4);
  __int16 v8 = objc_msgSend_recordID(v5, v6, v7);
  id v11 = objc_msgSend_error(WeakRetained, v9, v10);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v12 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v26 = *(void **)(a1 + 32);
    int v27 = v12;
    int v30 = objc_msgSend_operationID(v26, v28, v29);
    int v31 = 138543874;
    id v32 = v30;
    __int16 v33 = 2112;
    uint64_t v34 = v8;
    __int16 v35 = 2112;
    uint64_t v36 = v11;
    _os_log_debug_impl(&dword_1C4CFF000, v27, OS_LOG_TYPE_DEBUG, "Sending fetch completion to client for operation %{public}@ for recordID: %@ error: %@", (uint8_t *)&v31, 0x20u);
  }
  uint64_t v15 = objc_msgSend_container(WeakRetained, v13, v14);
  id v18 = objc_msgSend_options(v15, v16, v17);
  if (objc_msgSend_returnPCSMetadata(v18, v19, v20))
  {
    char v21 = CKIsPCSError();

    if ((v21 & 1) == 0) {
      objc_msgSend_fillOutPCSMetadataInfo(v5, v22, v23);
    }
  }
  else
  {
  }
  id v24 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v22, v23);
  objc_msgSend_handleFetchForRecordID_record_error_(v24, v25, (uint64_t)v8, v5, v11);
}

void sub_1C4D6CA9C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_1C4D6CADC(uint64_t a1, void *a2, double a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  __int16 v8 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  objc_msgSend_handleFetchForRecordID_didProgress_(v8, v9, (uint64_t)v5, a3);
}

void sub_1C4D6CB58(uint64_t a1, void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    int v27 = *(void **)(a1 + 32);
    uint64_t v28 = v7;
    int v31 = objc_msgSend_operationID(v27, v29, v30);
    int v32 = 138543618;
    __int16 v33 = v31;
    __int16 v34 = 2112;
    id v35 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v28, OS_LOG_TYPE_DEBUG, "Sending record fetch command to client for operation %{public}@ for recordID: %@", (uint8_t *)&v32, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  id v13 = objc_msgSend_objectForKeyedSubscript_(v6, v12, @"RecordKey");
  uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(v6, v14, @"ArrayIndex");
  uint64_t v18 = objc_msgSend_integerValue(v15, v16, v17);
  uint64_t v20 = objc_msgSend_objectForKeyedSubscript_(v6, v19, @"Data");
  id v22 = objc_msgSend_objectForKeyedSubscript_(v6, v21, @"Offset");
  uint64_t v25 = objc_msgSend_unsignedLongLongValue(v22, v23, v24);
  objc_msgSend_handleAssetDataForRecordID_recordKey_arrayIndex_data_offset_(v11, v26, (uint64_t)v5, v13, v18, v20, v25);
}

void sub_1C4D6CD64(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v11 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = *(void **)(a1 + 32);
    id v26 = v11;
    uint64_t v29 = objc_msgSend_operationID(v25, v27, v28);
    int v30 = 138543874;
    int v31 = v29;
    __int16 v32 = 2112;
    id v33 = v8;
    __int16 v34 = 2112;
    id v35 = v9;
    _os_log_debug_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_DEBUG, "Sending record fetch completion to client for operation %{public}@ for recordID: %@ error: %@", (uint8_t *)&v30, 0x20u);
  }
  uint64_t v14 = objc_msgSend_container(WeakRetained, v12, v13);
  uint64_t v17 = objc_msgSend_options(v14, v15, v16);
  if (objc_msgSend_returnPCSMetadata(v17, v18, v19))
  {
    char v20 = CKIsPCSError();

    if ((v20 & 1) == 0) {
      objc_msgSend_fillOutPCSMetadataInfo(v7, v21, v22);
    }
  }
  else
  {
  }
  uint64_t v23 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v21, v22);
  objc_msgSend_handleFetchForRecordID_record_error_(v23, v24, (uint64_t)v8, v7, v9);
}

void sub_1C4D6D2CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 104));
  _Unwind_Resume(a1);
}

void sub_1C4D6D324()
{
}

void sub_1C4D6D32C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v11 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = *(void **)(a1 + 32);
    id v26 = v11;
    uint64_t v29 = objc_msgSend_operationID(v25, v27, v28);
    __int16 v32 = objc_msgSend_ckShortDescription(v7, v30, v31);
    int v33 = 138543618;
    __int16 v34 = v29;
    __int16 v35 = 2112;
    uint64_t v36 = v32;
    _os_log_debug_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_DEBUG, "Sending record changed progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v33, 0x16u);
  }
  uint64_t v14 = objc_msgSend_container(WeakRetained, v12, v13);
  uint64_t v17 = objc_msgSend_options(v14, v15, v16);
  if (objc_msgSend_returnPCSMetadata(v17, v18, v19))
  {
    char v20 = CKIsPCSError();

    if ((v20 & 1) == 0) {
      objc_msgSend_fillOutPCSMetadataInfo(v8, v21, v22);
    }
  }
  else
  {
  }
  uint64_t v23 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v21, v22);
  objc_msgSend_handleChangeForRecordID_record_error_(v23, v24, (uint64_t)v7, v8, v9);
}

void sub_1C4D6D510(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void **)(a1 + 32);
    uint64_t v14 = v7;
    uint64_t v17 = objc_msgSend_operationID(v13, v15, v16);
    int v18 = 138543618;
    uint64_t v19 = v17;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Sending record deleted progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleDeleteForRecordID_recordType_(v11, v12, (uint64_t)v5, v6);
}

void sub_1C4D6D670(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v11 = v4;
    uint64_t v14 = objc_msgSend_operationID(v10, v12, v13);
    uint64_t v17 = objc_msgSend_zoneID(v3, v15, v16);
    int v18 = 138543618;
    uint64_t v19 = v14;
    __int16 v20 = 2112;
    id v21 = v17;
    _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "Sending zone attributes changed progress to client for operation %{public}@ for zoneID: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  objc_msgSend_handleAttributesChangedForZone_(v8, v9, (uint64_t)v3);
}

void sub_1C4D6D7D0(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v16 = a2;
  id v17 = a3;
  id v18 = a4;
  id v19 = a7;
  id v20 = a8;
  id v21 = a9;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v22 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v31 = *(void **)(a1 + 32);
    uint64_t v28 = v22;
    __int16 v32 = objc_msgSend_operationID(v31, v29, v30);
    *(_DWORD *)buf = 138543618;
    __int16 v34 = v32;
    __int16 v35 = 2112;
    id v36 = v16;
    _os_log_debug_impl(&dword_1C4CFF000, v28, OS_LOG_TYPE_DEBUG, "Sending change token update progress to client for operation %{public}@ for zoneID: %@", buf, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v26 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v24, v25);
  objc_msgSend_handleChangeSetCompletionForRecordZoneID_serverChangeToken_clientChangeTokenData_recordChangesStatus_hasPendingArchivedRecords_syncObligationZoneIDs_error_reply_(v26, v27, (uint64_t)v16, v17, v18, a5, a6, v19, v20, v21);
}

void sub_1C4D6D9A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_hash(WeakRetained, v1, v2);
  kdebug_trace();
}

void sub_1C4D6DCE4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 104));
  _Unwind_Resume(a1);
}

void sub_1C4D6DD40(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v11 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = *(void **)(a1 + 32);
    id v26 = v11;
    uint64_t v29 = objc_msgSend_operationID(v25, v27, v28);
    __int16 v32 = objc_msgSend_ckShortDescription(v7, v30, v31);
    int v33 = 138543618;
    __int16 v34 = v29;
    __int16 v35 = 2112;
    id v36 = v32;
    _os_log_debug_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_DEBUG, "Sending record changed progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v33, 0x16u);
  }
  uint64_t v14 = objc_msgSend_container(WeakRetained, v12, v13);
  id v17 = objc_msgSend_options(v14, v15, v16);
  if (objc_msgSend_returnPCSMetadata(v17, v18, v19))
  {
    char v20 = CKIsPCSError();

    if ((v20 & 1) == 0) {
      objc_msgSend_fillOutPCSMetadataInfo(v8, v21, v22);
    }
  }
  else
  {
  }
  uint64_t v23 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v21, v22);
  objc_msgSend_handleChangeForRecordID_record_error_(v23, v24, (uint64_t)v7, v8, v9);
}

void sub_1C4D6DF24(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void **)(a1 + 32);
    uint64_t v14 = v7;
    id v17 = objc_msgSend_operationID(v13, v15, v16);
    int v18 = 138543618;
    uint64_t v19 = v17;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Sending record deleted progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleDeleteForRecordID_(v11, v12, (uint64_t)v5);
}

void sub_1C4D6E080(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v15 = a2;
  id v16 = a3;
  id v17 = a4;
  id v18 = a7;
  id v19 = a8;
  id v20 = a9;
  id v21 = v20;
  if (v19)
  {
    (*((void (**)(id, void))v20 + 2))(v20, 0);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v22 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = *(void **)(a1 + 32);
      uint64_t v29 = v22;
      __int16 v32 = objc_msgSend_operationID(v28, v30, v31);
      int v33 = 138543618;
      __int16 v34 = v32;
      __int16 v35 = 2112;
      id v36 = v15;
      _os_log_debug_impl(&dword_1C4CFF000, v29, OS_LOG_TYPE_DEBUG, "Sending change token update progress to client for operation %{public}@ for zoneID: %@", (uint8_t *)&v33, 0x16u);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    id v26 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v24, v25);
    objc_msgSend_handleChangeSetCompletionWithServerChangeToken_clientChangeTokenData_recordChangesStatus_reply_(v26, v27, (uint64_t)v16, v17, a5, v21);
  }
}

void sub_1C4D6E258(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_hash(WeakRetained, v1, v2);
  kdebug_trace();
}

void sub_1C4D6E2B4(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = v2;
    uint64_t v25 = objc_msgSend_operationID(WeakRetained, v23, v24);
    uint64_t v28 = objc_msgSend_resultServerChangeToken(WeakRetained, v26, v27);
    uint64_t v31 = objc_msgSend_resultClientChangeTokenData(WeakRetained, v29, v30);
    int v34 = 138544130;
    __int16 v35 = v25;
    __int16 v36 = 2112;
    uint64_t v37 = v28;
    __int16 v38 = 2112;
    uint64_t v39 = v31;
    __int16 v40 = 2048;
    uint64_t v41 = objc_msgSend_resultStatus(WeakRetained, v32, v33);
    _os_log_debug_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_DEBUG, "Sending completion for operation %{public}@ with server change token %@, client change token date %@, record changes status %ld", (uint8_t *)&v34, 0x2Au);
  }
  id v5 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v3, v4);
  id v8 = objc_msgSend_resultServerChangeToken(WeakRetained, v6, v7);
  id v11 = objc_msgSend_resultClientChangeTokenData(WeakRetained, v9, v10);
  uint64_t v14 = objc_msgSend_resultStatus(WeakRetained, v12, v13);
  id v17 = objc_msgSend_operationMetrics(WeakRetained, v15, v16);
  id v20 = objc_msgSend_error(WeakRetained, v18, v19);
  objc_msgSend_handleOperationDidCompleteWithServerChangeToken_clientChangeTokenData_recordChangesStatus_metrics_error_(v5, v21, (uint64_t)v8, v11, v14, v17, v20);
}

void sub_1C4D6E6D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_1C4D6E718(uint64_t a1, void *a2, double a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v6 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v12 = *(void **)(a1 + 32);
    uint64_t v13 = v6;
    uint64_t v16 = objc_msgSend_operationID(v12, v14, v15);
    int v17 = 138543362;
    id v18 = v16;
    _os_log_debug_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_DEBUG, "Sending record move progress to client for operation %{public}@", (uint8_t *)&v17, 0xCu);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v10 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v8, v9);
  objc_msgSend_handleRecordModificationForRecordID_didProgress_(v10, v11, (uint64_t)v5, a3);
}

void sub_1C4D6E860(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  id v12 = a3;
  id v13 = a5;
  id v14 = a6;
  uint64_t v106 = a1;
  id v15 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  int v17 = objc_opt_new();
  id v18 = objc_opt_new();
  id v21 = objc_msgSend_etag(v12, v19, v20);
  objc_msgSend_setEtag_(v17, v22, (uint64_t)v21);

  uint64_t v25 = objc_msgSend_creationDate(v12, v23, v24);
  objc_msgSend_setCreationDate_(v17, v26, (uint64_t)v25);

  uint64_t v29 = objc_msgSend_modificationDate(v12, v27, v28);
  objc_msgSend_setModificationDate_(v17, v30, (uint64_t)v29);

  objc_msgSend_setServerRecord_(v17, v31, (uint64_t)v15);
  int v34 = objc_msgSend_etag(v13, v32, v33);
  objc_msgSend_setEtag_(v18, v35, (uint64_t)v34);

  __int16 v38 = objc_msgSend_creationDate(v13, v36, v37);
  objc_msgSend_setCreationDate_(v18, v39, (uint64_t)v38);

  uint64_t v42 = objc_msgSend_modificationDate(v13, v40, v41);
  objc_msgSend_setModificationDate_(v18, v43, (uint64_t)v42);

  objc_msgSend_setServerRecord_(v18, v44, (uint64_t)v13);
  uint64_t v47 = objc_msgSend_container(WeakRetained, v45, v46);
  __int16 v50 = objc_msgSend_entitlements(v47, v48, v49);
  int hasProtectionDataEntitlement = objc_msgSend_hasProtectionDataEntitlement(v50, v51, v52);

  if (hasProtectionDataEntitlement)
  {
    uint64_t v56 = objc_msgSend_protectionData(v12, v54, v55);
    objc_msgSend_setProtectionData_(v17, v57, (uint64_t)v56);

    char v60 = objc_msgSend_protectionData(v13, v58, v59);
    objc_msgSend_setProtectionData_(v18, v61, (uint64_t)v60);
  }
  uint64_t v62 = objc_msgSend_container(WeakRetained, v54, v55);
  uint64_t v65 = objc_msgSend_options(v62, v63, v64);
  if (objc_msgSend_returnPCSMetadata(v65, v66, v67))
  {
    char v68 = CKIsPCSError();

    if (v68) {
      goto LABEL_8;
    }
    objc_msgSend_fillOutPCSMetadataInfo(v12, v69, v70);
    uint64_t v73 = objc_msgSend_pcsKeyID(v12, v71, v72);
    objc_msgSend_setPcsKeyID_(v17, v74, (uint64_t)v73);

    uint64_t v77 = objc_msgSend_allPCSKeyIDs(v12, v75, v76);
    objc_msgSend_setAllPCSKeyIDs_(v17, v78, (uint64_t)v77);

    uint64_t v81 = objc_msgSend_zoneishKeyID(v12, v79, v80);
    objc_msgSend_setZoneishKeyID_(v17, v82, (uint64_t)v81);

    objc_msgSend_fillOutPCSMetadataInfo(v13, v83, v84);
    __int16 v87 = objc_msgSend_pcsKeyID(v13, v85, v86);
    objc_msgSend_setPcsKeyID_(v18, v88, (uint64_t)v87);

    uint64_t v91 = objc_msgSend_allPCSKeyIDs(v13, v89, v90);
    objc_msgSend_setAllPCSKeyIDs_(v18, v92, (uint64_t)v91);

    uint64_t v62 = objc_msgSend_zoneishKeyID(v13, v93, v94);
    objc_msgSend_setZoneishKeyID_(v18, v95, (uint64_t)v62);
  }
  else
  {
  }
LABEL_8:
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  long long v96 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v101 = *(void **)(v106 + 32);
    __int16 v102 = v96;
    uint64_t v105 = objc_msgSend_operationID(v101, v103, v104);
    *(_DWORD *)buf = 138543618;
    uint64_t v108 = v105;
    __int16 v109 = 2112;
    id v110 = v11;
    _os_log_debug_impl(&dword_1C4CFF000, v102, OS_LOG_TYPE_DEBUG, "Sending record move completion to client for operation %{public}@ for recordID: %@", buf, 0x16u);
  }
  uint64_t v99 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v97, v98);
  objc_msgSend_handleMoveForSourceRecordID_destinationMetadata_moveMarkerMetadata_error_(v99, v100, (uint64_t)v11, v17, v18, v14);
}

void sub_1C4D6EC98(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, char a8, double a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v18 = a2;
  id v19 = a3;
  id v20 = a5;
  id v21 = a10;
  id v22 = a11;
  id v23 = a12;
  id v24 = a13;
  id v25 = a14;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v26 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    __int16 v35 = *(void **)(a1 + 32);
    __int16 v32 = v26;
    __int16 v36 = objc_msgSend_operationID(v35, v33, v34);
    *(_DWORD *)buf = 138543618;
    uint64_t v42 = v36;
    __int16 v43 = 2112;
    id v44 = v18;
    _os_log_debug_impl(&dword_1C4CFF000, v32, OS_LOG_TYPE_DEBUG, "Sending upload completion to client for operation %{public}@ for recordID: %@", buf, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v30 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v28, v29);
  objc_msgSend_handleRecordUploadForRecordID_recordKey_arrayIndex_signature_size_paddedFileSize_uploaded_uploadReceipt_uploadReceiptExpiration_wrappedAssetKey_clearAssetKey_referenceSignature_(v30, v31, (uint64_t)v18, v19, a4, v20, a6, a7, a9, a8, v21, v22, v23, v24);
}

void sub_1C4D6F0B0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_1C4D6F0EC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v10 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void **)(a1 + 32);
    int v17 = v10;
    id v20 = objc_msgSend_operationID(v16, v18, v19);
    id v23 = objc_msgSend_recordID(v8, v21, v22);
    int v24 = 138543618;
    id v25 = v20;
    __int16 v26 = 2112;
    uint64_t v27 = v23;
    _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "Sending record fetch completion for operation %{public}@ with record: %@", (uint8_t *)&v24, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v14 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
  objc_msgSend_handleQueryDidFetchForRecordID_record_error_(v14, v15, (uint64_t)v7, v8, v9);
}

void sub_1C4D6F27C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void **)(a1 + 32);
    id v14 = v7;
    int v17 = objc_msgSend_operationID(v13, v15, v16);
    int v18 = 138543618;
    uint64_t v19 = v17;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Sending query cursor update progress to client for operation %{public}@ with cursor: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleQueryDidFetchCursor_reply_(v11, v12, (uint64_t)v5, v6);
}

void sub_1C4D6F3DC(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = v2;
    uint64_t v19 = objc_msgSend_operationID(WeakRetained, v17, v18);
    uint64_t v22 = objc_msgSend_resultsCursor(WeakRetained, v20, v21);
    int v23 = 138543618;
    int v24 = v19;
    __int16 v25 = 2112;
    __int16 v26 = v22;
    _os_log_debug_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEBUG, "Sending completion for operation %{public}@ with cursor %@", (uint8_t *)&v23, 0x16u);
  }
  id v5 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v3, v4);
  id v8 = objc_msgSend_resultsCursor(WeakRetained, v6, v7);
  id v11 = objc_msgSend_operationMetrics(WeakRetained, v9, v10);
  id v14 = objc_msgSend_error(WeakRetained, v12, v13);
  objc_msgSend_handleOperationDidCompleteWithCursor_metrics_error_(v5, v15, (uint64_t)v8, v11, v14);
}

void sub_1C4D6F724(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_1C4D6F754(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void **)(a1 + 32);
    id v14 = v7;
    int v17 = objc_msgSend_operationID(v13, v15, v16);
    int v18 = 138543618;
    uint64_t v19 = v17;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Sending save completion to client for operation %{public}@ for subscription ID: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleSubscriptionSaveForSubscriptionID_error_(v11, v12, (uint64_t)v5, v6);
}

void sub_1C4D6F8B4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void **)(a1 + 32);
    id v14 = v7;
    int v17 = objc_msgSend_operationID(v13, v15, v16);
    int v18 = 138543618;
    uint64_t v19 = v17;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Sending delete completion to client for operation %{public}@ for subscription ID: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleSubscriptionDeleteForSubscriptionID_error_(v11, v12, (uint64_t)v5, v6);
}

void sub_1C4D6FB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D6FB68(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v10 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void **)(a1 + 32);
    int v17 = v10;
    __int16 v20 = objc_msgSend_operationID(v16, v18, v19);
    int v21 = 138543618;
    uint64_t v22 = v20;
    __int16 v23 = 2112;
    id v24 = v8;
    _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "Sending fetch subscription progress to client for operation %{public}@ for subscription ID: %@", (uint8_t *)&v21, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v14 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
  objc_msgSend_handleSubscriptionFetchForSubscriptionID_subscription_error_(v14, v15, (uint64_t)v8, v7, v9);
}

void sub_1C4D6FE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D6FE30(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v10 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void **)(a1 + 32);
    int v17 = v10;
    __int16 v20 = objc_msgSend_operationID(v16, v18, v19);
    int v21 = 138543618;
    uint64_t v22 = v20;
    __int16 v23 = 2112;
    id v24 = v7;
    _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "Sending accept share progress to client for operation %{public}@ for url: %@", (uint8_t *)&v21, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v14 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
  objc_msgSend_handleShareAcceptanceForURL_share_error_(v14, v15, (uint64_t)v7, v8, v9);
}

void sub_1C4D700D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D700F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void **)(a1 + 32);
    id v14 = v7;
    int v17 = objc_msgSend_operationID(v13, v15, v16);
    int v18 = 138543618;
    uint64_t v19 = v17;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Sending decline share progress to client for operation %{public}@ for url: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleShareDeclineForURL_error_(v11, v12, (uint64_t)v5, v6);
}

void sub_1C4D7038C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D703AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void **)(a1 + 32);
    id v14 = v7;
    int v17 = objc_msgSend_operationID(v13, v15, v16);
    int v18 = 138543618;
    uint64_t v19 = v17;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Sending share access request progress to client for operation %{public}@ for url: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleShareAccessRequestForURL_error_(v11, v12, (uint64_t)v5, v6);
}

void sub_1C4D7064C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D7066C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v10 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void **)(a1 + 32);
    int v17 = v10;
    __int16 v20 = objc_msgSend_operationID(v16, v18, v19);
    int v21 = 138543618;
    uint64_t v22 = v20;
    __int16 v23 = 2112;
    id v24 = v7;
    _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "Sending share metadata progress to client for operation %{public}@ for url: %@", (uint8_t *)&v21, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v14 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
  objc_msgSend_handleShareMetadataFetchForURL_shareMetadata_error_(v14, v15, (uint64_t)v7, v8, v9);
}

void sub_1C4D70914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D70934(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v13 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *(void **)(a1 + 32);
    __int16 v20 = v13;
    __int16 v23 = objc_msgSend_operationID(v19, v21, v22);
    int v24 = 138543618;
    uint64_t v25 = v23;
    __int16 v26 = 2112;
    id v27 = v9;
    _os_log_debug_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEBUG, "Sending bundleIDs mapping progress to client for operation %{public}@ for url: %@", (uint8_t *)&v24, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  int v17 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v15, v16);
  objc_msgSend_handleBundleIDsFetchedForURL_appBundleIDs_daemonBundleIDs_error_(v17, v18, (uint64_t)v9, v10, v11, v12);
}

void sub_1C4D70BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D70BF8(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = v2;
    uint64_t v19 = objc_msgSend_operationID(WeakRetained, v17, v18);
    uint64_t v22 = objc_msgSend_webAuthToken(WeakRetained, v20, v21);
    int v23 = 138543618;
    int v24 = v19;
    __int16 v25 = 2112;
    __int16 v26 = v22;
    _os_log_debug_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEBUG, "Sending completion for operation %{public}@ with web auth token %@", (uint8_t *)&v23, 0x16u);
  }
  id v5 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v3, v4);
  id v8 = objc_msgSend_webAuthToken(WeakRetained, v6, v7);
  id v11 = objc_msgSend_operationMetrics(WeakRetained, v9, v10);
  id v14 = objc_msgSend_error(WeakRetained, v12, v13);
  objc_msgSend_handleOperationDidCompleteWithWebAuthToken_metrics_error_(v5, v15, (uint64_t)v8, v11, v14);
}

void sub_1C4D70E44(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_account(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = v4;
  if (!v4 || objc_msgSend_accountType(v4, v5, v6) == 1)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v5, *MEMORY[0x1E4F19DD8], 1002, @"This requires an authenticated account");
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      (*(void (**)(uint64_t, void, void, void, id))(v10 + 16))(v10, 0, 0, 0, v9);
    }
    goto LABEL_16;
  }
  if (*(void *)(a1 + 40))
  {
    objc_msgSend_primaryEmail(v7, v5, v8);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = objc_msgSend_formattedUsername(v7, v11, v12);
    uint64_t v16 = objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], v14, v15);
    if (objc_msgSend_isAppleInternalInstall(v16, v17, v18))
    {
      uint64_t v21 = objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], v19, v20);
      int v24 = objc_msgSend_containerIdentifierToEmailOverrides(v21, v22, v23);
      uint64_t v27 = objc_msgSend_count(v24, v25, v26);

      if (!v27)
      {
LABEL_15:
        uint64_t v45 = *(void *)(a1 + 40);
        uint64_t v46 = objc_msgSend_fullName(v7, v28, v29);
        (*(void (**)(uint64_t, void *, id, void *, void))(v45 + 16))(v45, v46, v9, v13, 0);

LABEL_16:
        goto LABEL_17;
      }
      uint64_t v30 = objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], v28, v29);
      uint64_t v33 = objc_msgSend_containerIdentifierToEmailOverrides(v30, v31, v32);
      __int16 v36 = objc_msgSend_containerID(*(void **)(a1 + 32), v34, v35);
      uint64_t v39 = objc_msgSend_containerIdentifier(v36, v37, v38);
      uint64_t v16 = objc_msgSend_objectForKey_(v33, v40, (uint64_t)v39);

      if (objc_msgSend_length(v16, v41, v42))
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        __int16 v43 = (void *)*MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
        {
          uint64_t v47 = *(void **)(a1 + 32);
          id v48 = v43;
          uint64_t v51 = objc_msgSend_containerID(v47, v49, v50);
          uint64_t v54 = objc_msgSend_containerIdentifier(v51, v52, v53);
          int v55 = 138412546;
          uint64_t v56 = v16;
          __int16 v57 = 2112;
          uint64_t v58 = v54;
          _os_log_debug_impl(&dword_1C4CFF000, v48, OS_LOG_TYPE_DEBUG, "Returning override user email %@ for container %@", (uint8_t *)&v55, 0x16u);
        }
        id v44 = v16;

        id v9 = v44;
        uint64_t v13 = v9;
      }
    }

    goto LABEL_15;
  }
LABEL_17:
}

void sub_1C4D71274(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_pendingOperationIDs(*(void **)(a1 + 32), a2, a3);
  objc_sync_enter(v4);
  uint64_t v7 = objc_msgSend_pendingOperationIDs(*(void **)(a1 + 32), v5, v6);
  objc_msgSend_removeAllObjects(v7, v8, v9);

  objc_sync_exit(v4);
  uint64_t v12 = objc_msgSend_cancellationQueue(*(void **)(a1 + 32), v10, v11);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4D71358;
  block[3] = &unk_1E64F05C8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v12, block);
}

void sub_1C4D71344(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D71358(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v37 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v44 = v37;
    _os_log_debug_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_DEBUG, "Cancelling all operations for %@", buf, 0xCu);
  }
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v5 = objc_msgSend_sharedClientThrottlingOperationQueue(CKDContainer, v3, v4, 0);
  uint64_t v8 = objc_msgSend_operations(v5, v6, v7);

  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v38, v42, 16);
  if (v10)
  {
    uint64_t v13 = v10;
    uint64_t v14 = *(void *)v39;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v39 != v14) {
          objc_enumerationMutation(v8);
        }
        uint64_t v16 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        int v17 = objc_msgSend_container(v16, v11, v12);
        uint64_t v18 = *(void **)(a1 + 32);

        if (v17 == v18) {
          objc_msgSend_cancel(v16, v11, v12);
        }
      }
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v38, v42, 16);
    }
    while (v13);
  }

  uint64_t v21 = objc_msgSend_cloudKitSupportOperationThrottleQueue(*(void **)(a1 + 32), v19, v20);
  objc_msgSend_cancelAllOperations(v21, v22, v23);

  uint64_t v26 = objc_msgSend_backgroundOperationThrottleQueue(*(void **)(a1 + 32), v24, v25);
  objc_msgSend_cancelAllOperations(v26, v27, v28);

  uint64_t v31 = objc_msgSend_operationQueue(*(void **)(a1 + 32), v29, v30);
  objc_msgSend_cancelAllOperations(v31, v32, v33);

  return objc_msgSend_cancelAllOperations(*(void **)(*(void *)(a1 + 32) + 392), v34, v35);
}

void sub_1C4D7164C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_pendingOperationIDs(*(void **)(a1 + 32), a2, a3);
  objc_sync_enter(v4);
  uint64_t v7 = objc_msgSend_pendingOperationIDs(*(void **)(a1 + 32), v5, v6);
  objc_msgSend_removeObject_(v7, v8, *(void *)(a1 + 40));

  objc_sync_exit(v4);
  uint64_t v11 = objc_msgSend_cancellationQueue(*(void **)(a1 + 32), v9, v10);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4D7175C;
  block[3] = &unk_1E64F0FA0;
  id v12 = *(id *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 32);
  id v15 = v12;
  uint64_t v16 = v13;
  id v17 = *(id *)(a1 + 48);
  dispatch_async(v11, block);
}

void sub_1C4D71748(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D7175C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  uint64_t v4 = objc_msgSend_sharedClientThrottlingOperationQueue(CKDContainer, a2, a3);
  uint64_t v7 = objc_msgSend_operations(v4, v5, v6);

  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v95, v102, 16);
  if (v9)
  {
    uint64_t v12 = v9;
    uint64_t v13 = *(void *)v96;
LABEL_3:
    uint64_t v14 = 0;
    while (1)
    {
      if (*(void *)v96 != v13) {
        objc_enumerationMutation(v7);
      }
      id v15 = *(void **)(*((void *)&v95 + 1) + 8 * v14);
      uint64_t v16 = objc_msgSend_operationID(v15, v10, v11);
      char isEqualToString = objc_msgSend_isEqualToString_(v16, v17, *(void *)(a1 + 32));

      if (isEqualToString) {
        break;
      }
      if (v12 == ++v14)
      {
        uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v95, v102, 16);
        if (v12) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    id v21 = v15;

    if (v21) {
      goto LABEL_42;
    }
  }
  else
  {
LABEL_9:
  }
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  uint64_t v22 = objc_msgSend_cloudKitSupportOperationThrottleQueue(*(void **)(a1 + 40), v19, v20);
  uint64_t v25 = objc_msgSend_operations(v22, v23, v24);

  uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v91, v101, 16);
  if (v27)
  {
    uint64_t v30 = v27;
    uint64_t v31 = *(void *)v92;
LABEL_13:
    uint64_t v32 = 0;
    while (1)
    {
      if (*(void *)v92 != v31) {
        objc_enumerationMutation(v25);
      }
      uint64_t v33 = *(void **)(*((void *)&v91 + 1) + 8 * v32);
      uint64_t v34 = objc_msgSend_operationID(v33, v28, v29);
      char v36 = objc_msgSend_isEqualToString_(v34, v35, *(void *)(a1 + 32));

      if (v36) {
        break;
      }
      if (v30 == ++v32)
      {
        uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v28, (uint64_t)&v91, v101, 16);
        if (v30) {
          goto LABEL_13;
        }
        goto LABEL_19;
      }
    }
    id v21 = v33;

    if (v21) {
      goto LABEL_42;
    }
  }
  else
  {
LABEL_19:
  }
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  uint64_t v37 = objc_msgSend_backgroundOperationThrottleQueue(*(void **)(a1 + 40), v19, v20);
  long long v40 = objc_msgSend_operations(v37, v38, v39);

  uint64_t v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v40, v41, (uint64_t)&v87, v100, 16);
  if (v42)
  {
    uint64_t v45 = v42;
    uint64_t v46 = *(void *)v88;
LABEL_23:
    uint64_t v47 = 0;
    while (1)
    {
      if (*(void *)v88 != v46) {
        objc_enumerationMutation(v40);
      }
      id v48 = *(void **)(*((void *)&v87 + 1) + 8 * v47);
      uint64_t v49 = objc_msgSend_operationID(v48, v43, v44);
      char v51 = objc_msgSend_isEqualToString_(v49, v50, *(void *)(a1 + 32));

      if (v51) {
        break;
      }
      if (v45 == ++v47)
      {
        uint64_t v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(v40, v43, (uint64_t)&v87, v100, 16);
        if (v45) {
          goto LABEL_23;
        }
        goto LABEL_29;
      }
    }
    id v21 = v48;

    if (v21) {
      goto LABEL_42;
    }
  }
  else
  {
LABEL_29:
  }
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  uint64_t v52 = objc_msgSend_operationQueue(*(void **)(a1 + 40), v19, v20);
  int v55 = objc_msgSend_operations(v52, v53, v54);

  uint64_t v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v56, (uint64_t)&v83, v99, 16);
  if (v57)
  {
    uint64_t v58 = v57;
    uint64_t v59 = *(void *)v84;
LABEL_33:
    uint64_t v60 = 0;
    while (1)
    {
      if (*(void *)v84 != v59) {
        objc_enumerationMutation(v55);
      }
      uint64_t v61 = *(void **)(*((void *)&v83 + 1) + 8 * v60);
      if (objc_opt_respondsToSelector())
      {
        uint64_t v64 = objc_msgSend_operationID(v61, v62, v63);
        char v66 = objc_msgSend_isEqualToString_(v64, v65, *(void *)(a1 + 32));

        if (v66) {
          break;
        }
      }
      if (v58 == ++v60)
      {
        uint64_t v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v62, (uint64_t)&v83, v99, 16);
        if (v58) {
          goto LABEL_33;
        }
        goto LABEL_40;
      }
    }
    id v21 = v61;

    if (!v21) {
      goto LABEL_43;
    }
LABEL_42:
    objc_msgSend_cancel(v21, v19, v20);
  }
  else
  {
LABEL_40:

    id v21 = 0;
  }
LABEL_43:
  uint64_t v67 = dispatch_group_create();
  dispatch_group_enter(v67);
  char v68 = CKGetGlobalQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4D71C90;
  block[3] = &unk_1E64F0A80;
  id v82 = *(id *)(a1 + 48);
  dispatch_group_notify(v67, v68, block);

  uint64_t v71 = objc_msgSend_processScopedClientProxy(*(void **)(a1 + 40), v69, v70);
  uint64_t v74 = objc_msgSend_clientConnection(v71, v72, v73);

  v78[0] = MEMORY[0x1E4F143A8];
  v78[1] = 3221225472;
  void v78[2] = sub_1C4D71CA8;
  v78[3] = &unk_1E64F14C8;
  uint64_t v75 = *(void **)(a1 + 32);
  v78[4] = *(void *)(a1 + 40);
  uint64_t v79 = v67;
  id v80 = v75;
  uint64_t v76 = v67;
  objc_msgSend_enumerateContainersWithOptions_usingBlock_(v74, v77, 4, v78);
  dispatch_group_leave(v76);
}

uint64_t sub_1C4D71C90(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1C4D71CA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = v3;
  if (*(id *)(a1 + 32) != v3)
  {
    uint64_t v7 = objc_msgSend_processScopedClientProxy(v3, v4, v5);

    if (!v7)
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      id v10[2] = sub_1C4D71D78;
      v10[3] = &unk_1E64F05C8;
      uint64_t v8 = *(void *)(a1 + 48);
      id v11 = *(id *)(a1 + 40);
      objc_msgSend_cancelOperationWithIdentifier_completionHandler_(v6, v9, v8, v10);
    }
  }
}

void sub_1C4D71D78(uint64_t a1)
{
}

void sub_1C4D71D80(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v3 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_debug_impl(&dword_1C4CFF000, v3, OS_LOG_TYPE_DEBUG, "Error sending sandbox extensions to client: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1C4D72A60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D72A7C(uint64_t a1, const char *a2)
{
  return objc_msgSend_operationStatusReport_(CKDContainer, a2, (uint64_t)a2);
}

uint64_t sub_1C4D72A8C(uint64_t a1, const char *a2)
{
  return objc_msgSend_operationStatusReport_(CKDContainer, a2, (uint64_t)a2);
}

uint64_t sub_1C4D72A9C(uint64_t a1, const char *a2)
{
  return objc_msgSend_operationStatusReport_(CKDContainer, a2, (uint64_t)a2);
}

uint64_t sub_1C4D72AAC(uint64_t a1, const char *a2)
{
  return objc_msgSend_operationStatusReport_(CKDContainer, a2, (uint64_t)a2);
}

uint64_t sub_1C4D72ABC(uint64_t a1, const char *a2)
{
  return objc_msgSend_operationStatusReport_(CKDContainer, a2, (uint64_t)a2);
}

void sub_1C4D72EC8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_1C4D72F28()
{
}

void sub_1C4D72F30()
{
}

void sub_1C4D72F38(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a5;
  uint64_t v10 = (id *)(a1 + 32);
  id v11 = a4;
  id v12 = a3;
  id v13 = a2;
  id WeakRetained = objc_loadWeakRetained(v10);
  id v17 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v15, v16);
  if (v13) {
    uint64_t v18 = (uint64_t)v13;
  }
  else {
    uint64_t v18 = MEMORY[0x1E4F1CBF0];
  }
  if (v12) {
    id v19 = v12;
  }
  else {
    id v19 = (id)MEMORY[0x1E4F1CBF0];
  }
  if (v11) {
    id v20 = v11;
  }
  else {
    id v20 = (id)MEMORY[0x1E4F1CBF0];
  }
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = sub_1C4D73070;
  v23[3] = &unk_1E64F1510;
  id v24 = v9;
  id v21 = v9;
  objc_msgSend_handleReplaceLocalWithWireSerializations_encryptedMasterKeys_wireEnvelopes_reply_(v17, v22, v18, v19, v20, v23);
}

void sub_1C4D73070(uint64_t a1, void *a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    int v8 = 138412290;
    id v9 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_DEBUG, "After replacing record archives, client returned serialized request: %@", (uint8_t *)&v8, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4D73184(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    id v17 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_DEBUG, "Asking client to deserialize initial response: %@", buf, 0xCu);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_1C4D73308;
  void v14[3] = &unk_1E64F1560;
  id v15 = v6;
  id v12 = v6;
  objc_msgSend_handleInitialResponseReceived_reply_(v11, v13, (uint64_t)v5, v14);
}

void sub_1C4D73308(uint64_t a1, void *a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    int v8 = 138412290;
    id v9 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_DEBUG, "After deserializing initial response, client returned wire serializations: %@", (uint8_t *)&v8, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4D7341C(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  int v4 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    int v11 = 138412290;
    id v12 = v3;
    _os_log_debug_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_DEBUG, "Asking client to replace wire transport blobs: %@", (uint8_t *)&v11, 0xCu);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v8 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  uint64_t v10 = v8;
  if (v3) {
    objc_msgSend_handleReplaceWireSerializationsWithRecords_(v8, v9, (uint64_t)v3);
  }
  else {
    objc_msgSend_handleReplaceWireSerializationsWithRecords_(v8, v9, MEMORY[0x1E4F1CBF0]);
  }
}

void sub_1C4D7353C(uint64_t a1, void *a2, double a3)
{
  int v4 = (id *)(a1 + 32);
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  int v8 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  objc_msgSend_handleFetchForRecordID_didProgress_(v8, v9, (uint64_t)v5, a3);
}

void sub_1C4D735B8(uint64_t a1, void *a2, void *a3)
{
  int v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  id v9 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v7, v8);
  int v11 = objc_msgSend_objectForKeyedSubscript_(v5, v10, @"RecordKey");
  uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(v5, v12, @"ArrayIndex");
  uint64_t v16 = objc_msgSend_integerValue(v13, v14, v15);
  uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(v5, v17, @"Data");
  id v20 = objc_msgSend_objectForKeyedSubscript_(v5, v19, @"Offset");

  uint64_t v23 = objc_msgSend_unsignedLongLongValue(v20, v21, v22);
  objc_msgSend_handleAssetDataForRecordID_recordKey_arrayIndex_data_offset_(v9, v24, (uint64_t)v6, v11, v16, v18, v23);
}

void sub_1C4D736F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  int v11 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = *(void **)(a1 + 32);
    uint64_t v26 = v11;
    uint64_t v29 = objc_msgSend_operationID(v25, v27, v28);
    int v30 = 138543874;
    uint64_t v31 = v29;
    __int16 v32 = 2112;
    id v33 = v8;
    __int16 v34 = 2112;
    id v35 = v9;
    _os_log_debug_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_DEBUG, "Sending record fetch completion to client for operation %{public}@ for recordID: %@ error: %@", (uint8_t *)&v30, 0x20u);
  }
  uint64_t v14 = objc_msgSend_container(WeakRetained, v12, v13);
  id v17 = objc_msgSend_options(v14, v15, v16);
  if (objc_msgSend_returnPCSMetadata(v17, v18, v19))
  {
    char v20 = CKIsPCSError();

    if ((v20 & 1) == 0) {
      objc_msgSend_fillOutPCSMetadataInfo(v7, v21, v22);
    }
  }
  else
  {
  }
  uint64_t v23 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v21, v22);
  objc_msgSend_handleFetchForRecordID_record_error_(v23, v24, (uint64_t)v8, v7, v9);
}

void sub_1C4D73B54(uint64_t a1, const char *a2)
{
  objc_msgSend_CKStatusReportArrayIncludingSharedOperations_(*(void **)(a1 + 40), a2, *(void *)(a1 + 32) == 0);
  id v15 = (id)objc_claimAutoreleasedReturnValue();
  if (v15)
  {
    if (*(void *)(a1 + 32))
    {
      int v4 = (void *)MEMORY[0x1C8789E70]();
      id v5 = NSString;
      id v7 = objc_msgSend_CKComponentsAndSubcomponentsJoinedByString_(v15, v6, @"\n");
      id v9 = objc_msgSend_stringWithFormat_(v5, v8, @"%@", v7);

      uint64_t v10 = *(void **)(a1 + 32);
      id v12 = objc_msgSend_dataUsingEncoding_(v9, v11, 4);
      objc_msgSend_writeData_(v10, v13, (uint64_t)v12);
    }
    else
    {
      objc_msgSend__dumpStatusReportArrayToOsTrace_(*(void **)(a1 + 40), v3, (uint64_t)v15);
    }
  }
  uint64_t v14 = *(void *)(a1 + 48);
  if (v14) {
    (*(void (**)(uint64_t, void))(v14 + 16))(v14, 0);
  }
}

void sub_1C4D73EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D73F00(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = a1[4];
    int v7 = 138412290;
    uint64_t v8 = v3;
    _os_log_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_INFO, "Daemon submitted CKEventMetric %@.", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v4 = *(void *)(a1[6] + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0;

  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1C4D74A38(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v37, v43, 16);
  if (v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = *(void *)v38;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v38 != v8) {
          objc_enumerationMutation(v2);
        }
        uint64_t v10 = *(void **)(*((void *)&v37 + 1) + 8 * i);
        int v11 = objc_msgSend_appContainerTuple(v10, v5, v6);
        uint64_t v14 = objc_msgSend_personaID(v11, v12, v13);
        BOOL v15 = CKAdoptPersonaID(v14);

        if (v15)
        {
          uint64_t v16 = (void *)MEMORY[0x1C8789E70]();
          uint64_t v19 = objc_msgSend_defaultContext(CKDLogicalDeviceContext, v17, v18);
          id v21 = objc_msgSend_containerWithAppContainerAccountTuple_deviceContext_sharedContainerTable_(CKDContainer, v20, (uint64_t)v10, v19, 0);

          id v36 = 0;
          LOBYTE(v19) = objc_msgSend_setupAssetTransfers_(v21, v22, (uint64_t)&v36);
          id v25 = v36;
          if ((v19 & 1) == 0)
          {
            if (*MEMORY[0x1E4F1A550] != -1) {
              dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            id v35 = *MEMORY[0x1E4F1A500];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              id v42 = v25;
              _os_log_debug_impl(&dword_1C4CFF000, v35, OS_LOG_TYPE_DEBUG, "MMCS setup failed:%@", buf, 0xCu);
            }
            __assert_rtn("-[CKDContainer showAssetCache]_block_invoke", "CKDContainer.m", 3751, "0 && \"no container.MMCS\"");
          }
          uint64_t v26 = objc_msgSend_MMCS(v21, v23, v24);

          if (!v26)
          {
            uint64_t v29 = objc_msgSend_MMCS(v21, v27, v28);
            if (!v29) {
              __assert_rtn("-[CKDContainer showAssetCache]_block_invoke", "CKDContainer.m", 3753, "container.MMCS && \"no container.MMCS\"");
            }
          }
          int v30 = objc_msgSend_MMCS(v21, v27, v28);
          id v33 = objc_msgSend_assetCache(v30, v31, v32);

          objc_msgSend_showAssetCacheInContainer_(v33, v34, *(void *)(a1 + 40));
        }
      }
      uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v37, v43, 16);
    }
    while (v7);
  }
}

void sub_1C4D74E54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D74FB8(_Unwind_Exception *exception_object)
{
}

void sub_1C4D75708(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  objc_msgSend_directoryContext(*(void **)(a1 + 32), a2, a3);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = objc_msgSend_frameworkCachesDirectory(v10, v4, v5);
  uint64_t v9 = objc_msgSend_path(v6, v7, v8);
  (*(void (**)(uint64_t, void *, void))(v3 + 16))(v3, v9, 0);
}

void sub_1C4D758C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D758E4(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v13 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    __int16 v34 = *(void **)(a1 + 32);
    id v35 = v13;
    long long v38 = objc_msgSend_operationID(v34, v36, v37);
    *(_DWORD *)buf = 138543618;
    uint64_t v45 = v38;
    __int16 v46 = 2112;
    id v47 = v9;
    _os_log_debug_impl(&dword_1C4CFF000, v35, OS_LOG_TYPE_DEBUG, "Sending archived record progress to client for operation %{public}@ for recordID: %@", buf, 0x16u);
  }
  objc_msgSend_container(WeakRetained, v14, v15);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v19 = objc_msgSend_options(v16, v17, v18);
  if (!objc_msgSend_returnPCSMetadata(v19, v20, v21))
  {

LABEL_16:
    goto LABEL_17;
  }
  char v22 = CKIsPCSError();

  if ((v22 & 1) == 0)
  {
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v16 = v10;
    uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v25, (uint64_t)&v39, v43, 16);
    if (v26)
    {
      uint64_t v29 = v26;
      uint64_t v30 = *(void *)v40;
      do
      {
        for (uint64_t i = 0; i != v29; ++i)
        {
          if (*(void *)v40 != v30) {
            objc_enumerationMutation(v16);
          }
          objc_msgSend_fillOutPCSMetadataInfo(*(void **)(*((void *)&v39 + 1) + 8 * i), v27, v28, (void)v39);
        }
        uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v27, (uint64_t)&v39, v43, 16);
      }
      while (v29);
    }
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v32 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v23, v24, (void)v39);
  objc_msgSend_handleFetchForRecordID_isDeleted_versions_error_(v32, v33, (uint64_t)v9, a3, v10, v11);
}

void sub_1C4D75D5C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_1C4D75D9C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v11 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v25 = *(void **)(a1 + 32);
    uint64_t v26 = v11;
    uint64_t v29 = objc_msgSend_operationID(v25, v27, v28);
    int v30 = 138543618;
    uint64_t v31 = v29;
    __int16 v32 = 2112;
    id v33 = v7;
    _os_log_debug_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_DEBUG, "Sending archived record progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v30, 0x16u);
  }
  uint64_t v14 = objc_msgSend_container(WeakRetained, v12, v13);
  id v17 = objc_msgSend_options(v14, v15, v16);
  if (objc_msgSend_returnPCSMetadata(v17, v18, v19))
  {
    char v20 = CKIsPCSError();

    if ((v20 & 1) == 0) {
      objc_msgSend_fillOutPCSMetadataInfo(v8, v21, v22);
    }
  }
  else
  {
  }
  uint64_t v23 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v21, v22);
  objc_msgSend_handleFetchForRecordID_record_error_(v23, v24, (uint64_t)v7, v8, v9);
}

void sub_1C4D75F6C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  id v12 = a3;
  id v13 = a5;
  id v14 = a6;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v15 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v21 = *(void **)(a1 + 32);
    uint64_t v22 = v15;
    id v25 = objc_msgSend_operationID(v21, v23, v24);
    int v26 = 138543618;
    uint64_t v27 = v25;
    __int16 v28 = 2112;
    id v29 = v11;
    _os_log_debug_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_DEBUG, "Sending change token update progress to client for operation %{public}@ for zoneID: %@", (uint8_t *)&v26, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v19 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v17, v18);
  objc_msgSend_handleChangeSetCompletionForRecordZoneID_serverChangeToken_archivedRecordStatus_error_reply_(v19, v20, (uint64_t)v11, v12, a4, v13, v14);
}

void sub_1C4D76104(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_hash(WeakRetained, v1, v2);
  kdebug_trace();
}

void sub_1C4D76294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D762B4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v13 = *(void **)(a1 + 32);
    id v14 = v7;
    id v17 = objc_msgSend_operationID(v13, v15, v16);
    int v18 = 138543618;
    uint64_t v19 = v17;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Sending archive record progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleRecordArchivalForRecordID_error_(v11, v12, (uint64_t)v5, v6);
}

void sub_1C4D76548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D76568(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v13 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *(void **)(a1 + 32);
    __int16 v20 = v13;
    uint64_t v23 = objc_msgSend_operationID(v19, v21, v22);
    int v24 = 138543618;
    id v25 = v23;
    __int16 v26 = 2112;
    id v27 = v9;
    _os_log_debug_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEBUG, "Sending asset published progress to client for operation %{public}@ with recordID: %@", (uint8_t *)&v24, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v17 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v15, v16);
  objc_msgSend_handleAssetPublishCompletionForRecordID_publishedAsset_recordKey_error_(v17, v18, (uint64_t)v9, v11, v10, v12);
}

void sub_1C4D7682C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D7684C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v8 = objc_msgSend_repairZoneRecordID(a2, v6, v7);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v9 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = *(void **)(a1 + 32);
    uint64_t v16 = v9;
    uint64_t v19 = objc_msgSend_operationID(v15, v17, v18);
    int v20 = 138543618;
    id v21 = v19;
    __int16 v22 = 2112;
    uint64_t v23 = v8;
    _os_log_debug_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEBUG, "Sending asset repair progress to client for operation %{public}@ with recordID: %@", (uint8_t *)&v20, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v13 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v11, v12);
  objc_msgSend_handleAssetRepairCompletionForRecordID_error_(v13, v14, (uint64_t)v8, v5);
}

void sub_1C4D76AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D76B08(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v13 = *(void **)(a1 + 32);
    id v14 = v7;
    id v17 = objc_msgSend_operationID(v13, v15, v16);
    int v18 = 138543618;
    uint64_t v19 = v17;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Sending mark asset broken progress to client for operation %{public}@ with recordID: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleMarkAssetBrokenCompletionWithRepairRecordID_error_(v11, v12, (uint64_t)v5, v6);
}

void sub_1C4D76E18(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4D76E48(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v13 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *(void **)(a1 + 32);
    __int16 v20 = v13;
    uint64_t v23 = objc_msgSend_operationID(v19, v21, v22);
    int v24 = 138543618;
    id v25 = v23;
    __int16 v26 = 2112;
    id v27 = v9;
    _os_log_debug_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEBUG, "Sending record web sharing progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v24, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v17 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v15, v16);
  objc_msgSend_handleWebSharingInitiationForRecordID_sharingKey_baseSharingToken_error_(v17, v18, (uint64_t)v9, v10, v11, v12);
}

void sub_1C4D76FD8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v13 = *(void **)(a1 + 32);
    id v14 = v7;
    id v17 = objc_msgSend_operationID(v13, v15, v16);
    int v18 = 138543618;
    uint64_t v19 = v17;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Sending record web unsharing progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleWebSharingRevocationForRecordID_error_(v11, v12, (uint64_t)v5, v6);
}

void sub_1C4D771EC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_pcsManager(*(void **)(a1 + 32), a2, a3);
  id v27 = 0;
  RandomSharingIdentityWithError = (const void *)objc_msgSend_createRandomSharingIdentityWithError_(v4, v5, (uint64_t)&v27);
  id v7 = v27;

  if (v7) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = RandomSharingIdentityWithError == 0;
  }
  if (v10)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v11 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v29 = v12;
      __int16 v30 = 2112;
      id v31 = v7;
      _os_log_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_INFO, "Warn: Couldn't create a web sharing identity for client %@: %@", buf, 0x16u);
    }
    if (RandomSharingIdentityWithError) {
      CFRelease(RandomSharingIdentityWithError);
    }
    id v13 = 0;
  }
  else
  {
    id v14 = objc_msgSend_pcsManager(*(void **)(a1 + 32), v8, v9);
    id v26 = 0;
    uint64_t v16 = objc_msgSend_dataFromSharingIdentity_error_(v14, v15, (uint64_t)RandomSharingIdentityWithError, &v26);
    id v7 = v26;

    id v17 = (void *)*MEMORY[0x1E4F1A548];
    uint64_t v18 = *MEMORY[0x1E4F1A550];
    if (v7 || !v16)
    {
      if (v18 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v17);
      }
      uint64_t v23 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        uint64_t v24 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412802;
        uint64_t v29 = v24;
        __int16 v30 = 2112;
        id v31 = v7;
        __int16 v32 = 2112;
        id v33 = RandomSharingIdentityWithError;
        _os_log_impl(&dword_1C4CFF000, v23, OS_LOG_TYPE_INFO, "Warn: Couldn't convert web sharing identity to data for client %@: %@ (identity was %@)", buf, 0x20u);
      }
      id v13 = 0;
    }
    else
    {
      if (v18 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v17);
      }
      uint64_t v19 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        uint64_t v29 = v20;
        __int16 v30 = 2112;
        id v31 = (id)RandomSharingIdentityWithError;
        _os_log_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_INFO, "Successfully created a web sharing identity for %@: %@", buf, 0x16u);
      }
      id v21 = objc_alloc(MEMORY[0x1E4F19FA0]);
      id v13 = objc_msgSend_initWithData_(v21, v22, (uint64_t)v16);
    }
    CFRelease(RandomSharingIdentityWithError);
  }
  uint64_t v25 = *(void *)(a1 + 40);
  if (v25) {
    (*(void (**)(uint64_t, void *, id))(v25 + 16))(v25, v13, v7);
  }
}

void sub_1C4D77564(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a3;
    objc_msgSend_data(a2, v6, v7);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v8, v5);
  }
}

void sub_1C4D77718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D77738(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  uint64_t v9 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v7, v8);
  objc_msgSend_handleSerialization_error_(v9, v10, (uint64_t)v6, v5);
}

void sub_1C4D778E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D77900(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  uint64_t v12 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v10, v11);
  objc_msgSend_handleDeserializationOfSaves_deletes_error_(v12, v13, (uint64_t)v9, v8, v7);
}

void sub_1C4D77B4C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4D77B7C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v13 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *(void **)(a1 + 32);
    uint64_t v20 = v13;
    uint64_t v23 = objc_msgSend_operationID(v19, v21, v22);
    int v24 = 138543618;
    uint64_t v25 = v23;
    __int16 v26 = 2112;
    id v27 = v9;
    _os_log_debug_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEBUG, "Sending record access grant progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v24, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v17 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v15, v16);
  objc_msgSend_handleRecordAccessInitiationForRecordID_accessToken_referenceIdentifier_error_(v17, v18, (uint64_t)v9, v10, v11, v12);
}

void sub_1C4D77D0C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v13 = *(void **)(a1 + 32);
    id v14 = v7;
    id v17 = objc_msgSend_operationID(v13, v15, v16);
    int v18 = 138543618;
    uint64_t v19 = v17;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "Sending record access revoke progress to client for operation %{public}@ for recordID: %@", (uint8_t *)&v18, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
  objc_msgSend_handleRecordAccessRevocationForRecordID_error_(v11, v12, (uint64_t)v5, v6);
}

void sub_1C4D7801C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4D7804C(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v11 = v4;
    id v14 = objc_msgSend_operationID(v10, v12, v13);
    int v15 = 138543618;
    uint64_t v16 = v14;
    __int16 v17 = 2112;
    id v18 = v3;
    _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "Sending vetting completion progress to client for operation %{public}@ for url: %@", (uint8_t *)&v15, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  objc_msgSend_handleReconstructedShareURL_(v8, v9, (uint64_t)v3);
}

void sub_1C4D78190(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v11 = v4;
    id v14 = objc_msgSend_operationID(v10, v12, v13);
    int v15 = 138543618;
    uint64_t v16 = v14;
    __int16 v17 = 2112;
    id v18 = v3;
    _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "Sending vetting completion progress to client for operation %{public}@ for share metadata: %@", (uint8_t *)&v15, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  objc_msgSend_handleFetchedShareMetadata_(v8, v9, (uint64_t)v3);
}

void sub_1C4D78408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D78428(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v10 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void **)(a1 + 32);
    __int16 v17 = v10;
    __int16 v20 = objc_msgSend_operationID(v16, v18, v19);
    int v21 = 138543618;
    uint64_t v22 = v20;
    __int16 v23 = 2112;
    id v24 = v7;
    _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "Sending share participant key fetch progress to client for operation %{public}@ recordID: %@", (uint8_t *)&v21, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v14 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
  objc_msgSend_handleParticipantKeyFetchForRecordID_participantKey_error_(v14, v15, (uint64_t)v7, v8, v9);
}

void sub_1C4D78674(void **a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_entitlements(a1[4], a2, a3);
  if (objc_msgSend_hasParticipantPIIEntitlement(v4, v5, v6))
  {

    goto LABEL_4;
  }
  id v11 = objc_msgSend_entitlements(a1[4], v7, v8);
  char hasOutOfProcessUIEntitlement = objc_msgSend_hasOutOfProcessUIEntitlement(v11, v12, v13);

  if (hasOutOfProcessUIEntitlement)
  {
LABEL_4:
    if (objc_msgSend_hasEncryptedPersonalInfo(a1[5], v9, v10))
    {
      __int16 v17 = objc_msgSend_defaultConvenienceOperationConfiguration(MEMORY[0x1E4F1A208], v15, v16);
      id v18 = objc_opt_new();
      objc_msgSend_setResolvedConfiguration_(v18, v19, (uint64_t)v17);
      uint64_t v22 = objc_msgSend_recordID(a1[5], v20, v21);
      uint64_t v25 = objc_msgSend_zoneID(v22, v23, v24);
      uint64_t v28 = objc_msgSend_ownerName(v25, v26, v27);
      int isEqualToString = objc_msgSend_isEqualToString_(v28, v29, *MEMORY[0x1E4F19C08]);

      if (isEqualToString) {
        objc_msgSend_setDatabaseScope_(v18, v31, 2);
      }
      else {
        objc_msgSend_setDatabaseScope_(v18, v31, 3);
      }
      __int16 v32 = [CKDDatabaseOperation alloc];
      uint64_t v34 = objc_msgSend_containerForOperationInfo_(a1[4], v33, (uint64_t)v18);
      id v36 = objc_msgSend_initWithOperationInfo_container_(v32, v35, (uint64_t)v18, v34);

      long long v39 = objc_msgSend_pcsCache(a1[4], v37, v38);
      long long v42 = objc_msgSend_recordID(a1[5], v40, v41);
      v49[0] = MEMORY[0x1E4F143A8];
      v49[1] = 3221225472;
      v49[2] = sub_1C4D78940;
      v49[3] = &unk_1E64F1808;
      id v52 = a1[6];
      id v43 = a1[5];
      uint64_t v44 = a1[4];
      id v50 = v43;
      char v51 = v44;
      objc_msgSend_fetchPCSForShareWithID_forOperation_options_withCompletionHandler_(v39, v45, (uint64_t)v42, v36, 0, v49);
    }
    else
    {
      __int16 v46 = (void (*)(void))*((void *)a1[6] + 2);
      v46();
    }
    return;
  }
  id v47 = (void (**)(void *, void, id))a1[6];
  objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v9, *MEMORY[0x1E4F19C40], 8, @"Container %@ is not allowed to decrypt share personal info", a1[4]);
  id v48 = (id)objc_claimAutoreleasedReturnValue();
  v47[2](v47, 0, v48);
}

uint64_t sub_1C4D78940(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
LABEL_5:
    return v4();
  }
  uint64_t v5 = objc_msgSend_invitedPCS(a2, (const char *)a2, 0);
  if (v5)
  {
    uint64_t v8 = v5;
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = objc_msgSend_pcsManager(*(void **)(a1 + 40), v6, v7);
    objc_msgSend__decryptPersonalInfoWithPCSBlob_pcsManager_(v9, v11, v8, v10);

    objc_msgSend_setSerializePersonalInfo_(*(void **)(a1 + 32), v12, 1);
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_5;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v14 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v15 = 0;
    _os_log_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_INFO, "Fetched PCS for share, but result had no invitedPCS?", v15, 2u);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1C4D78BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D78BE0(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v11 = v4;
    id v14 = objc_msgSend_operationID(v10, v12, v13);
    int v15 = 138543618;
    uint64_t v16 = v14;
    __int16 v17 = 2112;
    id v18 = v3;
    _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, "Sending initiate participant vetting operation progress to client for operation %{public}@ error: %@", (uint8_t *)&v15, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v8 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v6, v7);
  objc_msgSend_handleParticipantVettingProgressWithError_(v8, v9, (uint64_t)v3);
}

void sub_1C4D78E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D78E58(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = v2;
    uint64_t v19 = objc_msgSend_operationID(WeakRetained, v17, v18);
    int v22 = 138543618;
    __int16 v23 = v19;
    __int16 v24 = 2048;
    uint64_t v25 = objc_msgSend_quotaAvailable(WeakRetained, v20, v21);
    _os_log_debug_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEBUG, "Sending completion for operation %{public}@ with quota available %lld", (uint8_t *)&v22, 0x16u);
  }
  uint64_t v5 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v3, v4);
  uint64_t v8 = objc_msgSend_quotaAvailable(WeakRetained, v6, v7);
  id v11 = objc_msgSend_operationMetrics(WeakRetained, v9, v10);
  id v14 = objc_msgSend_error(WeakRetained, v12, v13);
  objc_msgSend_handleOperationDidCompleteWithQuotaAvailable_metrics_error_(v5, v15, v8, v11, v14);
}

void sub_1C4D790FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D7911C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v11 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = v11;
      uint64_t v19 = objc_msgSend_operationID(WeakRetained, v17, v18);
      int v20 = 138543618;
      uint64_t v21 = v19;
      __int16 v22 = 2112;
      id v23 = v7;
      _os_log_debug_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEBUG, "Sending mergeable delta fetched progress to client for operation %{public}@ for %@", (uint8_t *)&v20, 0x16u);
    }
    id v14 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
    objc_msgSend_handleFetchForMergeableValueID_fetchedDeltas_error_(v14, v15, (uint64_t)v7, v8, v9);
  }
}

void sub_1C4D793B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D793D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v11 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = v11;
      uint64_t v19 = objc_msgSend_operationID(WeakRetained, v17, v18);
      int v20 = 138543618;
      uint64_t v21 = v19;
      __int16 v22 = 2112;
      id v23 = v7;
      _os_log_debug_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEBUG, "Sending fetched metadata to client for operation %{public}@ for value %@", (uint8_t *)&v20, 0x16u);
    }
    id v14 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v12, v13);
    objc_msgSend_handleFetchForMergeableValueID_metadatas_error_(v14, v15, (uint64_t)v7, v8, v9);
  }
}

void sub_1C4D7966C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D7968C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v8 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = v8;
      uint64_t v16 = objc_msgSend_operationID(WeakRetained, v14, v15);
      int v17 = 138543618;
      uint64_t v18 = v16;
      __int16 v19 = 2112;
      id v20 = v5;
      _os_log_debug_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_DEBUG, "Sending per-value replacement request completion to client for operation %{public}@ for request %@", (uint8_t *)&v17, 0x16u);
    }
    id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
    objc_msgSend_handleCompletedReplaceDeltasRequest_error_(v11, v12, (uint64_t)v5, v6);
  }
}

void sub_1C4D79978(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4D799A8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v8 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      __int16 v19 = v8;
      __int16 v22 = objc_msgSend_operationID(WeakRetained, v20, v21);
      uint64_t v25 = objc_msgSend_metadata(v5, v23, v24);
      uint64_t v28 = objc_msgSend_identifier(v25, v26, v27);
      int v29 = 138543618;
      __int16 v30 = v22;
      __int16 v31 = 2112;
      __int16 v32 = v28;
      _os_log_debug_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_DEBUG, "Sending delta upload progress to client for operation %{public}@ for %@", (uint8_t *)&v29, 0x16u);
    }
    id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
    id v14 = objc_msgSend_metadata(v5, v12, v13);
    int v17 = objc_msgSend_identifier(v14, v15, v16);
    objc_msgSend_handleUploadForDeltaIdentifier_error_(v11, v18, (uint64_t)v17, v6);
  }
}

void sub_1C4D79B60(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v8 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = v8;
      uint64_t v16 = objc_msgSend_operationID(WeakRetained, v14, v15);
      int v17 = 138543618;
      uint64_t v18 = v16;
      __int16 v19 = 2112;
      id v20 = v5;
      _os_log_debug_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_DEBUG, "Sending replacement progress to client for operation %{public}@ for %@", (uint8_t *)&v17, 0x16u);
    }
    id v11 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v9, v10);
    objc_msgSend_handleReplacementRequest_error_(v11, v12, (uint64_t)v5, v6);
  }
}

void sub_1C4D79DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D79DFC(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = v2;
    __int16 v19 = objc_msgSend_operationID(WeakRetained, v17, v18);
    __int16 v22 = objc_msgSend_bundleIDs(WeakRetained, v20, v21);
    int v23 = 138543618;
    uint64_t v24 = v19;
    __int16 v25 = 2112;
    uint64_t v26 = v22;
    _os_log_debug_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEBUG, "Sending completion for operation %{public}@ with bundle IDs %@", (uint8_t *)&v23, 0x16u);
  }
  id v5 = objc_msgSend_clientOperationCallbackProxy(WeakRetained, v3, v4);
  id v8 = objc_msgSend_bundleIDs(WeakRetained, v6, v7);
  id v11 = objc_msgSend_operationMetrics(WeakRetained, v9, v10);
  id v14 = objc_msgSend_error(WeakRetained, v12, v13);
  objc_msgSend_handleOperationDidCompleteWithBundleIDs_metrics_error_(v5, v15, (uint64_t)v8, v11, v14);
}

void sub_1C4D7A048(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_account(*(void **)(a1 + 32), a2, a3);
  if (!v4) {
    goto LABEL_17;
  }
  uint64_t v7 = (void *)v4;
  id v8 = objc_msgSend_account(*(void **)(a1 + 32), v5, v6);
  uint64_t v11 = objc_msgSend_accountType(v8, v9, v10);

  if (v11 == 1) {
    goto LABEL_17;
  }
  if ((objc_msgSend_canAuthWithCloudKit(*(void **)(a1 + 32), v12, v13) & 1) == 0)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v20 = *MEMORY[0x1E4F1A500];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_WORD *)buf = 0;
    uint64_t v21 = "When determining serverPreferredPushEnvironment, the account could not auth with CloudKit.  Falling back to de"
          "fault iCloud Environment value";
LABEL_19:
    _os_log_error_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_ERROR, v21, buf, 2u);
LABEL_17:
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = sub_1C4D7A26C;
    v25[3] = &unk_1E64F18F8;
    __int16 v22 = *(void **)(a1 + 32);
    id v26 = *(id *)(a1 + 40);
    objc_msgSend_serverEnvironmentWithCompletionHandler_(v22, v23, (uint64_t)v25);

    return;
  }
  uint64_t v16 = objc_msgSend_account(*(void **)(a1 + 32), v14, v15);
  uint64_t v24 = objc_msgSend_serverPreferredPushEnvironment(v16, v17, v18);

  if (!v24)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v20 = *MEMORY[0x1E4F1A500];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_WORD *)buf = 0;
    uint64_t v21 = "When determining serverPreferredPushEnvironment, the account had no apsEnv in its dataclass bag.  Falling back"
          " to default iCloud Environment value";
    goto LABEL_19;
  }
  uint64_t v19 = *(void *)(a1 + 40);
  if (v19) {
    (*(void (**)(uint64_t, uint64_t, void))(v19 + 16))(v19, v24, 0);
  }
  MEMORY[0x1F41817F8]();
}

void sub_1C4D7A26C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (v5)
  {
    uint64_t v7 = v5;
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v8 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 138412290;
      uint64_t v13 = v7;
      _os_log_error_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_ERROR, "When determining serverPreferredPushEnvironment, failed our fallback to default iCloud Environment value: %@", (uint8_t *)&v12, 0xCu);
    }
    goto LABEL_6;
  }
  if ((unint64_t)(a2 - 1) < 3)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    if (v10)
    {
      uint64_t v11 = (void *)MEMORY[0x1E4F4E1C8];
LABEL_14:
      (*(void (**)(uint64_t, void, void))(v10 + 16))(v10, *v11, 0);
      goto LABEL_15;
    }
    goto LABEL_15;
  }
  if (!a2)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    if (v10)
    {
      uint64_t v11 = (void *)MEMORY[0x1E4F4E1D0];
      goto LABEL_14;
    }
LABEL_15:
    uint64_t v7 = 0;
    goto LABEL_16;
  }
  uint64_t v7 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v6, *MEMORY[0x1E4F19DD8], 1000, @"Could not determine serverPreferredPushEnvironment from account or iCloud Environment");
LABEL_6:
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v7);
  }
LABEL_16:
}

void sub_1C4D7A58C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    objc_msgSend_hardwareID(*(void **)(a1 + 32), a2, a3);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, void))(v3 + 16))(v3, v4, 0);
  }
}

void sub_1C4D7A6B8(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_account(*(void **)(a1 + 32), a2, a3);

  if (!v4)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v5, *MEMORY[0x1E4F19DD8], 1002, @"This requires an authenticated account, we have no account");
    goto LABEL_5;
  }
  uint64_t v7 = objc_msgSend_account(*(void **)(a1 + 32), v5, v6);
  uint64_t v10 = objc_msgSend_accountType(v7, v8, v9);

  if (v10 == 1)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v11, *MEMORY[0x1E4F19DD8], 1002, @"This requires an authenticated account, we have only have an anonymous account");
LABEL_5:
    objc_claimAutoreleasedReturnValue();
    uint64_t v13 = *(void *)(a1 + 40);
    if (v13) {
      (*(void (**)(uint64_t, void))(v13 + 16))(v13, 0);
    }
    MEMORY[0x1F4181820]();
    return;
  }
  if (objc_msgSend_canAuthWithCloudKit(*(void **)(a1 + 32), v11, v12))
  {
    v36[0] = 0;
    v36[1] = v36;
    _OWORD v36[2] = 0x3032000000;
    v36[3] = sub_1C4D64D4C;
    v36[4] = sub_1C4D64D5C;
    id v37 = 0;
    v34[0] = 0;
    v34[1] = v34;
    v34[2] = 0x3032000000;
    void v34[3] = sub_1C4D64D4C;
    v34[4] = sub_1C4D64D5C;
    id v35 = 0;
    uint64_t v15 = dispatch_group_create();
    dispatch_group_enter(v15);
    uint64_t v18 = objc_msgSend_pcsManager(*(void **)(a1 + 32), v16, v17);
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    v30[2] = sub_1C4D7AA30;
    void v30[3] = &unk_1E64F1920;
    __int16 v32 = v36;
    uint64_t v33 = v34;
    uint64_t v19 = v15;
    __int16 v31 = v19;
    objc_msgSend_globalPerUserBoundaryKeyDataWithCompletionHandler_(v18, v20, (uint64_t)v30);

    uint64_t v21 = CKGetGlobalQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4D7AACC;
    block[3] = &unk_1E64F1948;
    uint64_t v28 = v36;
    int v29 = v34;
    id v27 = *(id *)(a1 + 40);
    dispatch_group_notify(v19, v21, block);

    _Block_object_dispose(v34, 8);
    _Block_object_dispose(v36, 8);
  }
  else
  {
    __int16 v22 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v14, *MEMORY[0x1E4F19DD8], 1002, @"This requires an authenticated account, the current account cannot auth with CloudKit");
    objc_msgSend_possiblyWrappedAuthTokenErrorGivenError_(*(void **)(a1 + 32), v23, (uint64_t)v22);
    id v25 = (id)objc_claimAutoreleasedReturnValue();

    uint64_t v24 = *(void *)(a1 + 40);
    if (v24) {
      (*(void (**)(uint64_t, void, id))(v24 + 16))(v24, 0, v25);
    }
  }
}

void sub_1C4D7AA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C4D7AA30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1C4D7AACC(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v4 = NSString;
    id v5 = *(void **)(*(void *)(a1[5] + 8) + 40);
    id v6 = v2;
    uint64_t v9 = objc_msgSend_length(v5, v7, v8);
    uint64_t v11 = objc_msgSend_stringWithFormat_(v4, v10, @"<%lu bytes>", v9);
    id v12 = (void *)v11;
    uint64_t v13 = *(__CFString **)(*(void *)(a1[6] + 8) + 40);
    uint64_t v14 = @". Error was ";
    if (!v13)
    {
      uint64_t v14 = &stru_1F2044F30;
      uint64_t v13 = &stru_1F2044F30;
    }
    *(_DWORD *)buf = 138412802;
    uint64_t v16 = v11;
    __int16 v17 = 2112;
    uint64_t v18 = v14;
    __int16 v19 = 2112;
    id v20 = v13;
    _os_log_debug_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_DEBUG, "Returning boundary key to client: %@%@%@", buf, 0x20u);
  }
  uint64_t result = a1[4];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(*(void *)(a1[5] + 8) + 40), *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  return result;
}

uint64_t sub_1C4D7ADCC(uint64_t a1, const char *a2)
{
  objc_msgSend_countAssetCacheItemsWithDatabaseScope_(*(void **)(a1 + 32), a2, *(void *)(a1 + 48));
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

uint64_t sub_1C4D7AEE0(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_clearAssetCache(*(void **)(a1 + 32), a2, a3);
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v5 = *(uint64_t (**)(void))(result + 16);
    return v5();
  }
  return result;
}

uint64_t sub_1C4D7AFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_showAssetCache, a3);
}

void sub_1C4D7B05C(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = v2;
    uint64_t v9 = objc_msgSend_applicationBundleID(v5, v7, v8);
    uint64_t v10 = CKDatabaseScopeString();
    int v18 = 138412546;
    __int16 v19 = v9;
    __int16 v20 = 2112;
    uint64_t v21 = v10;
    _os_log_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_INFO, "Clearing record cache for %@ with scope %@", (uint8_t *)&v18, 0x16u);
  }
  uint64_t v11 = objc_msgSend_recordCache(*(void **)(a1 + 32), v3, v4);
  objc_msgSend_clearAllRecordsInScope_(v11, v12, *(void *)(a1 + 40));

  uint64_t v15 = objc_msgSend_pcsCache(*(void **)(a1 + 32), v13, v14);
  objc_msgSend_clearPCSCaches(v15, v16, v17);
}

void sub_1C4D7B26C(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v5;
    _os_log_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_INFO, "Clearing auth tokens for record %@", (uint8_t *)&v8, 0xCu);
  }
  id v6 = objc_msgSend_recordCache(*(void **)(a1 + 40), v3, v4);
  objc_msgSend_clearAssetAuthTokensForRecordWithID_container_scope_(v6, v7, *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48));
}

uint64_t sub_1C4D7B42C(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = (void *)MEMORY[0x1E4F1A550];
  uint64_t v4 = (os_log_t *)MEMORY[0x1E4F1A500];
  if (v2)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v5 = *v4;
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v33 = *(void *)(a1 + 32);
      int v37 = 134217984;
      uint64_t v38 = v33;
      _os_log_debug_impl(&dword_1C4CFF000, v5, OS_LOG_TYPE_DEBUG, "Clearing the asset cache for container %p", (uint8_t *)&v37, 0xCu);
    }
    objc_msgSend_clearAssetCache(*(void **)(a1 + 32), v6, v7);
    uint64_t v2 = *(void *)(a1 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*v3 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  int v8 = *v4;
  if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v34 = *(void *)(a1 + 32);
    int v37 = 134217984;
    uint64_t v38 = v34;
    _os_log_debug_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_DEBUG, "Clearing the record cache for container %p", (uint8_t *)&v37, 0xCu);
  }
  objc_msgSend_clearRecordCacheWithDatabaseScope_(*(void **)(a1 + 32), v9, *(void *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_17:
  if (*v3 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v10 = *v4;
  if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v35 = *(void *)(a1 + 32);
    int v37 = 134217984;
    uint64_t v38 = v35;
    _os_log_debug_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_DEBUG, "Clearing the persisted PCS cache for container %p", (uint8_t *)&v37, 0xCu);
  }
  uint64_t v13 = objc_msgSend_pcsCache(*(void **)(a1 + 32), v11, v12);
  objc_msgSend_clearPCSCaches(v13, v14, v15);

  uint64_t v2 = *(void *)(a1 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0) {
      goto LABEL_32;
    }
    goto LABEL_27;
  }
LABEL_22:
  if (*v3 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v16 = *v4;
  if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v36 = *(void *)(a1 + 32);
    int v37 = 134217984;
    uint64_t v38 = v36;
    _os_log_debug_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEBUG, "Clearing the in-memory PCS cache for container %p", (uint8_t *)&v37, 0xCu);
  }
  __int16 v19 = objc_msgSend_pcsCache(*(void **)(a1 + 32), v17, v18);
  objc_msgSend_clearPCSMemoryCaches(v19, v20, v21);

  if ((*(void *)(a1 + 48) & 0x10) != 0)
  {
LABEL_27:
    if (*v3 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v22 = *v4;
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v37) = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_DEBUG, "Clearing the container info cache", (uint8_t *)&v37, 2u);
    }
    id v25 = objc_msgSend_sharedManager(CKDServerConfigurationManager, v23, v24);
    objc_msgSend_expireGlobalConfiguration(v25, v26, v27);

    __int16 v30 = objc_msgSend_sharedManager(CKDServerConfigurationManager, v28, v29);
    objc_msgSend_expireConfigurationForContainer_(v30, v31, *(void *)(a1 + 32));
  }
LABEL_32:
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_1C4D7B894(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_recordCache(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_deleteRecordWithID_scope_(v4, v5, *(void *)(a1 + 40), *(void *)(a1 + 56));

  objc_msgSend_pcsCache(*(void **)(a1 + 32), v6, v7);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__setPCSData_forFetchedRecordID_withScope_withCompletionHandler_(v9, v8, 0, *(void *)(a1 + 40), *(void *)(a1 + 56), *(void *)(a1 + 48));
}

void sub_1C4D7B9F4(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_pcsCache(*(void **)(a1 + 32), a2, a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__setPCSData_forFetchedZoneID_withScope_withCompletionHandler_(v5, v4, 0, *(void *)(a1 + 40), *(void *)(a1 + 56), *(void *)(a1 + 48));
}

void sub_1C4D7BB3C(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_defaultConvenienceOperationConfiguration(MEMORY[0x1E4F1A208], a2, a3);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = objc_opt_new();
  objc_msgSend_setResolvedConfiguration_(v4, v5, (uint64_t)v16);
  id v6 = [CKDDatabaseOperation alloc];
  int v8 = objc_msgSend_containerForOperationInfo_(*(void **)(a1 + 32), v7, (uint64_t)v4);
  uint64_t v10 = objc_msgSend_initWithOperationInfo_container_(v6, v9, (uint64_t)v4, v8);

  objc_msgSend_setDatabaseScope_(v10, v11, *(void *)(a1 + 56));
  uint64_t v14 = objc_msgSend_pcsCache(*(void **)(a1 + 32), v12, v13);
  objc_msgSend_fetchPCSForZoneWithID_forOperation_options_withCompletionHandler_(v14, v15, *(void *)(a1 + 40), v10, 2 * *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 48));
}

void sub_1C4D7BD08(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_defaultConvenienceOperationConfiguration(MEMORY[0x1E4F1A208], a2, a3);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = objc_opt_new();
  objc_msgSend_setResolvedConfiguration_(v4, v5, (uint64_t)v16);
  id v6 = [CKDDatabaseOperation alloc];
  int v8 = objc_msgSend_containerForOperationInfo_(*(void **)(a1 + 32), v7, (uint64_t)v4);
  uint64_t v10 = objc_msgSend_initWithOperationInfo_container_(v6, v9, (uint64_t)v4, v8);

  objc_msgSend_setDatabaseScope_(v10, v11, *(void *)(a1 + 56));
  uint64_t v14 = objc_msgSend_pcsCache(*(void **)(a1 + 32), v12, v13);
  objc_msgSend_fetchPCSForShareWithID_forOperation_options_withCompletionHandler_(v14, v15, *(void *)(a1 + 40), v10, 2, *(void *)(a1 + 48));
}

void sub_1C4D7BED0(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_defaultConvenienceOperationConfiguration(MEMORY[0x1E4F1A208], a2, a3);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = objc_opt_new();
  objc_msgSend_setResolvedConfiguration_(v4, v5, (uint64_t)v16);
  id v6 = [CKDDatabaseOperation alloc];
  int v8 = objc_msgSend_containerForOperationInfo_(*(void **)(a1 + 32), v7, (uint64_t)v4);
  uint64_t v10 = objc_msgSend_initWithOperationInfo_container_(v6, v9, (uint64_t)v4, v8);

  objc_msgSend_setDatabaseScope_(v10, v11, *(void *)(a1 + 56));
  uint64_t v14 = objc_msgSend_pcsCache(*(void **)(a1 + 32), v12, v13);
  objc_msgSend_fetchPCSForRecordWithID_forOperation_options_withCompletionHandler_(v14, v15, *(void *)(a1 + 40), v10, 2, *(void *)(a1 + 48));
}

void sub_1C4D7C118(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_containerID(*(void **)(a1 + 32), a2, a3);
  BOOL v7 = objc_msgSend_specialContainerType(v4, v5, v6) == 5;

  objc_msgSend_pcsCache(*(void **)(a1 + 32), v8, v9);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_clearInvalidatedPCSSQLCacheEntriesWithSkipZonePCS_completionHandler_(v11, v10, v7, 0);
}

void sub_1C4D7C24C(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_opt_new();
  id v5 = objc_msgSend_operationQueue(*(void **)(a1 + 32), v3, v4);
  int v8 = objc_msgSend_operations(v5, v6, v7);
  objc_msgSend_addObjectsFromArray_(v2, v9, (uint64_t)v8);

  uint64_t v12 = objc_msgSend_cloudKitSupportOperationThrottleQueue(*(void **)(a1 + 32), v10, v11);
  uint64_t v15 = objc_msgSend_operations(v12, v13, v14);
  objc_msgSend_addObjectsFromArray_(v2, v16, (uint64_t)v15);

  __int16 v19 = objc_msgSend_backgroundOperationThrottleQueue(*(void **)(a1 + 32), v17, v18);
  uint64_t v22 = objc_msgSend_operations(v19, v20, v21);
  objc_msgSend_addObjectsFromArray_(v2, v23, (uint64_t)v22);

  id v26 = objc_msgSend_sharedClientThrottlingOperationQueue(CKDContainer, v24, v25);
  uint64_t v29 = objc_msgSend_operations(v26, v27, v28);
  v46[0] = MEMORY[0x1E4F143A8];
  v46[1] = 3221225472;
  v46[2] = sub_1C4D7C504;
  v46[3] = &unk_1E64F1A60;
  void v46[4] = *(void *)(a1 + 32);
  __int16 v31 = objc_msgSend_CKFilter_(v29, v30, (uint64_t)v46);

  objc_msgSend_addObjectsFromArray_(v2, v32, (uint64_t)v31);
  if (objc_msgSend_count(v2, v33, v34))
  {
    uint64_t v37 = objc_msgSend_count(v2, v35, v36);
    if (v37 - 1 >= 0)
    {
      uint64_t v38 = v37;
      do
      {
        uint64_t v39 = objc_msgSend_objectAtIndex_(v2, v35, --v38);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          objc_msgSend_removeObjectAtIndex_(v2, v40, v38);
        }
      }
      while (v38 > 0);
    }
  }
  if (objc_msgSend_count(v2, v35, v36))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v43 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v48 = v2;
      _os_log_impl(&dword_1C4CFF000, v43, OS_LOG_TYPE_INFO, "Unexpectedly found some outstanding operations: %@", buf, 0xCu);
    }
  }
  uint64_t v44 = *(void *)(a1 + 40);
  uint64_t v45 = objc_msgSend_count(v2, v41, v42);
  (*(void (**)(uint64_t, uint64_t, void))(v44 + 16))(v44, v45, 0);
}

BOOL sub_1C4D7C504(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_container(a2, (const char *)a2, a3);
  BOOL v5 = v4 == *(void **)(a1 + 32);

  return v5;
}

void sub_1C4D7C5F8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  uint64_t v4 = objc_msgSend_MMCS(*(void **)(a1 + 32), a2, a3);
  id v9 = 0;
  char v6 = objc_msgSend_registeredItemCount_error_(v4, v5, (uint64_t)&v10, &v9);
  id v7 = v9;

  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    int v8 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      id v12 = v7;
      _os_log_debug_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_DEBUG, "Error counting registered items %@", buf, 0xCu);
    }
  }
}

uint64_t sub_1C4D7C9EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4D7CB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D7CB7C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = objc_msgSend_error(WeakRetained, v2, v3);

  if (!v4)
  {
    id v7 = objc_msgSend_sharedAccountStore(CKDAccountStore, v5, v6);
    uint64_t v10 = objc_msgSend_accountStore(v7, v8, v9);

    id v12 = objc_msgSend_accountTypeWithAccountTypeIdentifier_(v10, v11, *MEMORY[0x1E4F17788]);
    objc_msgSend_clearAllPermissionsGrantedForAccountType_(v10, v13, (uint64_t)v12);
  }
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = WeakRetained;
  if (v14)
  {
    id v16 = objc_msgSend_error(WeakRetained, v5, v6);
    (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v16);

    uint64_t v15 = WeakRetained;
  }
}

void sub_1C4D7CDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D7CDE0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = objc_msgSend_error(WeakRetained, v2, v3);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = objc_msgSend_error(WeakRetained, v5, v6);
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v8);
  }
  else
  {
    uint64_t v9 = objc_msgSend_containerPrivacySettings(WeakRetained, v5, v6);
    int v8 = objc_msgSend_appPermissionGroupsFromContainerPrivacySettings_(CKDBatchFetchUserPrivacySettingsOperation, v10, (uint64_t)v9);

    (*(void (**)(void, void *, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v8, 0);
  }
}

void sub_1C4D7D06C(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_account(*(void **)(a1 + 32), a2, a3);
  id v19 = (id)objc_claimAutoreleasedReturnValue();
  if (v19)
  {
    BOOL v6 = objc_msgSend_accountType(v19, v4, v5) == 1;
    int v8 = v19;
    if (!v6)
    {
      if (!*(void *)(a1 + 40)) {
        goto LABEL_12;
      }
      id v12 = objc_msgSend_containerID(*(void **)(a1 + 32), v4, v7);
      uint64_t v9 = objc_msgSend_representativeDataclass(v12, v13, v14);

      if (v9)
      {
        uint64_t v17 = objc_msgSend_account(*(void **)(a1 + 32), v15, v16);
        objc_msgSend_isDataclassEnabled_(v17, v18, (uint64_t)v9);
      }
      uint64_t v11 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
      goto LABEL_10;
    }
  }
  uint64_t v9 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v4, *MEMORY[0x1E4F19DD8], 1002, @"This requires an authenticated account");
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10)
  {
    uint64_t v11 = *(void (**)(void))(v10 + 16);
LABEL_10:
    v11();
  }

  int v8 = v19;
LABEL_12:
}

void sub_1C4D7D344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D7D364(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = objc_msgSend_corruptRecords(WeakRetained, v2, v3);
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v4);
}

uint64_t sub_1C4D7D4F8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_sharedManager(CKDServerConfigurationManager, a2, a3);
  objc_msgSend_expireGlobalConfiguration(v4, v5, v6);

  uint64_t v9 = objc_msgSend_sharedManager(CKDServerConfigurationManager, v7, v8);
  objc_msgSend_expireConfigurationForContainer_(v9, v10, *(void *)(a1 + 32));

  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v12 = *(uint64_t (**)(void))(result + 16);
    return v12();
  }
  return result;
}

BOOL sub_1C4D7DB08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
LABEL_22:
        id v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4D7E630(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unint64_t v10 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      int v29 = 138412290;
      id v30 = v9;
      _os_log_error_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_ERROR, "Error while trying to determine userID: %@", (uint8_t *)&v29, 0xCu);
    }
    objc_msgSend_setError_(*(void **)(a1 + 32), v11, (uint64_t)v9);
  }
  else
  {
    uint64_t v14 = [CKDProtocolTranslator alloc];
    uint64_t v17 = objc_msgSend_initWithContainer_databaseScope_(v14, v15, *(void *)(a1 + 40), *(void *)(a1 + 48));
    if (v17)
    {
      objc_msgSend_setTranslator_(*(void **)(a1 + 32), v16, (uint64_t)v17);
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v18 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        LOWORD(v29) = 0;
        _os_log_error_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_ERROR, "CKDSerializeRecordModificationsOperation is unable to instantiate a CKDProtocolTranslator", (uint8_t *)&v29, 2u);
      }
      __int16 v20 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v19, *MEMORY[0x1E4F19C40], 1000, @"CKDSerializeRecordModificationsOperation is unable to instantiate a CKDProtocolTranslator");
      objc_msgSend_setError_(*(void **)(a1 + 32), v21, (uint64_t)v20);
    }
  }
  uint64_t v24 = objc_msgSend_error(*(void **)(a1 + 32), v12, v13);
  if (!v24)
  {
    uint64_t v25 = objc_msgSend_translator(*(void **)(a1 + 32), v22, v23);
    if (!v25) {
      __assert_rtn("-[CKDDeserializeRecordModificationsOperation _setupTranslator]_block_invoke", "CKDDeserializeRecordModificationsOperation.m", 157, "self.error != nil || self.translator != nil");
    }
  }
  uint64_t v28 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v26, v27);
  dispatch_group_leave(v28);
}

void sub_1C4D7F780(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = objc_msgSend_recordsToSave(*(void **)(a1 + 32), v4, v5);
  objc_msgSend_setFullRecordsToFetch_(v3, v7, (uint64_t)v6);

  objc_msgSend_setUseRecordCache_(v3, v8, 0);
  objc_msgSend_setShouldUpdateTimestampsForFetchedMergeableValues_(v3, v9, 0);
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = sub_1C4D7F948;
  void v15[3] = &unk_1E64F1AD8;
  objc_copyWeak(&v16, &location);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v10, (uint64_t)v15);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = sub_1C4D7FA1C;
  v12[3] = &unk_1E64F0170;
  objc_copyWeak(&v13, &location);
  objc_copyWeak(&v14, &from);
  objc_msgSend_setCompletionBlock_(v3, v11, (uint64_t)v12);
  objc_destroyWeak(&v14);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4D7F90C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 64));
  objc_destroyWeak((id *)(v4 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4D7F948(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v20 = a2;
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unint64_t v10 = WeakRetained;
  if (v6) {
    objc_msgSend_setError_(WeakRetained, v8, (uint64_t)v6);
  }
  uint64_t v11 = objc_msgSend_container(v10, v8, v9);
  id v14 = objc_msgSend_options(v11, v12, v13);
  if (objc_msgSend_returnPCSMetadata(v14, v15, v16))
  {
    char v17 = CKIsPCSError();

    if ((v17 & 1) == 0) {
      objc_msgSend_fillOutPCSMetadataInfo(v20, v18, v19);
    }
  }
  else
  {
  }
}

void sub_1C4D7FA1C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = objc_msgSend_error(v2, v3, v4);

  if (v5)
  {
    id v8 = objc_msgSend_error(v2, v6, v7);
    objc_msgSend_setError_(WeakRetained, v9, (uint64_t)v8);
  }
  unint64_t v10 = objc_msgSend_stateTransitionGroup(WeakRetained, v6, v7);
  dispatch_group_leave(v10);
}

uintptr_t sub_1C4D7FE58()
{
  uintptr_t result = dispatch_source_get_data((dispatch_source_t)qword_1EBBCFBA0);
  qword_1EBBCFB98 = result;
  return result;
}

uint64_t sub_1C4D7FF48(uint64_t a1, void *a2)
{
  return objc_msgSend_enumerateContainersWithOptions_usingBlock_(a2, (const char *)a2, 4, &unk_1F2042BD0);
}

void sub_1C4D7FF5C(uint64_t a1, void *a2, uint64_t a3)
{
  objc_msgSend_pcsCache(a2, (const char *)a2, a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_runMemoryCacheEviction(v5, v3, v4);
}

void sub_1C4D801F0(uint64_t a1)
{
  id v2 = CKGetGlobalQueue();
  dispatch_source_t v3 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v2);
  uint64_t v4 = (void *)qword_1EBBCFBA8;
  qword_1EBBCFBA8 = (uint64_t)v3;

  id v5 = qword_1EBBCFBA8;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = sub_1C4D80348;
  v9[3] = &unk_1E64F1B50;
  uint64_t v9[4] = *(void *)(a1 + 32);
  id v6 = v9;
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = sub_1C4D8174C;
  handler[3] = &unk_1E64F0A80;
  id v11 = v6;
  dispatch_source_set_event_handler(v5, handler);

  uint64_t v7 = qword_1EBBCFBA8;
  dispatch_time_t v8 = dispatch_time(0, 1800000000000);
  dispatch_source_set_timer(v7, v8, 0x1A3185C5000uLL, 0x1A3185C5000uLL);
}

void sub_1C4D80348(uint64_t a1)
{
  id v2 = _os_activity_create(&dword_1C4CFF000, "pcsMemoryCacheEvict", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v7.opaque[0] = 0;
  v7.opaque[1] = 0;
  os_activity_scope_enter(v2, &v7);
  objc_msgSend_stopEvictionTimer(*(void **)(a1 + 32), v3, v4);
  objc_msgSend_runMemoryCacheEvictionInAllCaches(*(void **)(a1 + 32), v5, v6);
  os_activity_scope_leave(&v7);
}

void sub_1C4D803BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_1C4D80914(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  objc_msgSend_lastAccess(a2, v5, v6);
  double v8 = v7;
  objc_msgSend_lastAccess(v4, v9, v10);
  double v12 = v11;

  if (v8 > v12) {
    return 1;
  }
  else {
    return -1;
  }
}

void sub_1C4D80A94(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v4 = objc_msgSend_cacheEntries(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = objc_msgSend_objectForKey_(v4, v5, *(void *)(a1 + 40));

  if (v6)
  {
    uint64_t v9 = objc_msgSend_pcsData(v6, v7, v8);
    uint64_t v12 = objc_msgSend_pcs(v9, v10, v11);

    uint64_t v13 = (void *)*MEMORY[0x1E4F1A548];
    if (v12)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v13);
      }
      id v14 = (void *)*MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v35 = *(void *)(a1 + 32);
        uint64_t v36 = *(void *)(a1 + 40);
        uint64_t v37 = v14;
        long long v40 = objc_msgSend_pcsData(v6, v38, v39);
        id v43 = objc_msgSend_etag(v40, v41, v42);
        int v46 = 138543874;
        uint64_t v47 = v35;
        __int16 v48 = 2114;
        uint64_t v49 = v36;
        __int16 v50 = 2114;
        char v51 = v43;
        _os_log_debug_impl(&dword_1C4CFF000, v37, OS_LOG_TYPE_DEBUG, "Returning PCS data from in-memory cache (%{public}@). scopedItemID=%{public}@, protectionInfoTag=%{public}@", (uint8_t *)&v46, 0x20u);
      }
      char v17 = *(void **)(a1 + 32);
      uint64_t v18 = objc_msgSend_memoryCacheHitCount(v17, v15, v16);
      objc_msgSend_setMemoryCacheHitCount_(v17, v19, v18 + 1);
      objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v20, v21);
      objc_msgSend_setLastAccess_(v6, v22, v23);
      id v26 = objc_msgSend_pcsData(v6, v24, v25);
      int v29 = objc_msgSend_copy(v26, v27, v28);
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v13);
      }
      id v30 = *MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v44 = *(void *)(a1 + 32);
        uint64_t v45 = *(void *)(a1 + 40);
        int v46 = 138543618;
        uint64_t v47 = v44;
        __int16 v48 = 2114;
        uint64_t v49 = v45;
        _os_log_debug_impl(&dword_1C4CFF000, v30, OS_LOG_TYPE_DEBUG, "Found a memory cache entry in (%{public}@) but it has no decrypted data, removing it. scopedItemID=%{public}@", (uint8_t *)&v46, 0x16u);
      }
      id v26 = objc_msgSend_cacheEntries(*(void **)(a1 + 32), v31, v32);
      objc_msgSend_removeObjectForKey_(v26, v33, *(void *)(a1 + 40));
      int v29 = 0;
    }
  }
  else
  {
    int v29 = 0;
  }
  uint64_t v34 = *(void *)(a1 + 48);
  if (v34) {
    (*(void (**)(uint64_t, void *))(v34 + 16))(v34, v29);
  }
}

uint64_t sub_1C4D80E50(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_pcs(*(void **)(a1 + 32), a2, a3);
  double v7 = *(void **)(a1 + 40);
  if (v4)
  {
    uint64_t updated = objc_msgSend_memoryCacheUpdateCount(*(void **)(a1 + 40), v5, v6);
    objc_msgSend_setMemoryCacheUpdateCount_(v7, v9, updated + 1);
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v10 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v37 = *(void *)(a1 + 40);
      uint64_t v36 = *(void *)(a1 + 48);
      uint64_t v38 = *(void **)(a1 + 32);
      uint64_t v39 = v10;
      uint64_t v42 = objc_msgSend_etag(v38, v40, v41);
      int v45 = 138543874;
      uint64_t v46 = v37;
      __int16 v47 = 2114;
      uint64_t v48 = v36;
      __int16 v49 = 2114;
      __int16 v50 = v42;
      _os_log_debug_impl(&dword_1C4CFF000, v39, OS_LOG_TYPE_DEBUG, "Setting PCS data in the in-memory cache (%{public}@). scopedItemID=%{public}@, protectionInfoTag=%{public}@", (uint8_t *)&v45, 0x20u);
    }
    uint64_t v11 = objc_opt_new();
    objc_msgSend_setPcsData_(v11, v12, *(void *)(a1 + 32));
    int v15 = objc_msgSend_cacheEntries(*(void **)(a1 + 40), v13, v14);
    objc_msgSend_setObject_forKey_(v15, v16, (uint64_t)v11, *(void *)(a1 + 48));

    uint64_t v19 = objc_msgSend_cacheEntries(*(void **)(a1 + 40), v17, v18);
    unint64_t v22 = objc_msgSend_count(v19, v20, v21);

    unint64_t v25 = objc_msgSend_memoryCacheHighwaterCount(*(void **)(a1 + 40), v23, v24);
    if (v22 <= v25) {
      objc_msgSend_setMemoryCacheHighwaterCount_(*(void **)(a1 + 40), v26, v25);
    }
    else {
      objc_msgSend_setMemoryCacheHighwaterCount_(*(void **)(a1 + 40), v26, v22);
    }
  }
  else
  {
    uint64_t v27 = objc_msgSend_memoryCacheDeleteCount(*(void **)(a1 + 40), v5, v6);
    objc_msgSend_setMemoryCacheDeleteCount_(v7, v28, v27 + 1);
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    int v29 = *MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v43 = *(void *)(a1 + 40);
      uint64_t v44 = *(void *)(a1 + 48);
      int v45 = 138543618;
      uint64_t v46 = v43;
      __int16 v47 = 2114;
      uint64_t v48 = v44;
      _os_log_debug_impl(&dword_1C4CFF000, v29, OS_LOG_TYPE_DEBUG, "Removing PCS data in the in-memory cache (%{public}@). scopedItemID=%{public}@", (uint8_t *)&v45, 0x16u);
    }
    uint64_t v11 = objc_msgSend_cacheEntries(*(void **)(a1 + 40), v30, v31);
    objc_msgSend_removeObjectForKey_(v11, v32, *(void *)(a1 + 48));
  }

  objc_msgSend__lockedEvictEntriesFromCache(*(void **)(a1 + 40), v33, v34);
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

uint64_t sub_1C4D8118C(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__lockedEvictEntriesFromCache(*(void **)(a1 + 32), a2, a3);
}

void sub_1C4D81234(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v2 = *MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 134217984;
    uint64_t v10 = v8;
    _os_log_debug_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_DEBUG, "Clearing all entries in PCS cache %p", (uint8_t *)&v9, 0xCu);
  }
  id v5 = objc_msgSend_cacheEntries(*(void **)(a1 + 32), v3, v4);
  objc_msgSend_removeAllObjects(v5, v6, v7);
}

void sub_1C4D813FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4D81414(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_cacheEntries(*(void **)(a1 + 32), a2, a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend_count(v6, v4, v5);
}

void sub_1C4D8174C(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x1C8789E70]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4D817EC()
{
  uint64_t v0 = (void *)qword_1EBBCFBB0;
  qword_1EBBCFBB0 = (uint64_t)&unk_1F20AB9E8;
}

uint64_t sub_1C4D81AF0(void *a1, uint64_t a2)
{
  dispatch_source_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(MEMORY[0x1E4F19F20]);
        objc_msgSend_addIdsToArchive_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4D82628(void *a1, uint64_t a2)
{
  dispatch_source_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(CKDPResponseOperationHeaderAssetAuthorizationResponse);
        objc_msgSend_addAssetAuthorizationResponses_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1C4E9580C((char *)v17, a2)) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    id v17 = objc_alloc_init(CKDPThrottlingConfig);
    objc_msgSend_addThrottleConfig_(a1, v19, (uint64_t)v17);
    if (!PBReaderPlaceMark() || (sub_1C4E45444((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4D834D0(uint64_t a1, uint64_t a2)
{
  dispatch_source_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v18 = (CKDPRecordFieldIdentifier *)objc_alloc_init(MEMORY[0x1E4F19F10]);
        objc_storeStrong((id *)(a1 + 8), v18);
        if (!PBReaderPlaceMark() || (CKDPLocationCoordinateReadFrom() & 1) == 0)
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if (v17 == 2)
        {
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_37;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_39;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v21) = 0;
          }
LABEL_39:
          *(_DWORD *)(a1 + 24) = v21;
          continue;
        }
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        uint64_t v18 = objc_alloc_init(CKDPRecordFieldIdentifier);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (CKDPRecordFieldIdentifierReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_42;
        }
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4D840F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D84108(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  *a4 = 1;
  return result;
}

void sub_1C4D845C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4D845E0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = objc_msgSend_firstMMCSItemError(a2, (const char *)a2, a3);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= v6 == 0;

  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

BOOL sub_1C4D84650(uint64_t a1, void *a2, uint64_t a3)
{
  dispatch_source_t v3 = objc_msgSend_firstMMCSItemError(a2, (const char *)a2, a3);
  BOOL v4 = v3 == 0;

  return v4;
}

uint64_t sub_1C4D84CB0(uint64_t a1, uint64_t a2)
{
  dispatch_source_t v3 = (int *)MEMORY[0x1E4F940E8];
  BOOL v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v17;

        goto LABEL_39;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (2)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_38:
        *(_DWORD *)(a1 + 24) = v22;
        goto LABEL_39;
      case 3u:
        PBReaderReadString();
        uint64_t v27 = (CKDPUserPrivacySettings *)objc_claimAutoreleasedReturnValue();
        if (v27) {
          objc_msgSend_addApplicationBundle_((void *)a1, v26, (uint64_t)v27);
        }
        goto LABEL_34;
      case 4u:
        uint64_t v27 = objc_alloc_init(CKDPUserPrivacySettings);
        objc_storeStrong((id *)(a1 + 32), v27);
        if PBReaderPlaceMark() && (sub_1C5015AC0((uint64_t)v27, a2))
        {
          PBReaderRecallMark();
LABEL_34:

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_39;
    }
  }
}

uint64_t sub_1C4D85B98(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_predicateForMatchingLookupInfoInContainer(*(void **)(a1 + 32), a2, a3);
}

void sub_1C4D85DD0(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v8 = a2;
  uint64_t v5 = objc_msgSend_predicateForMatchingLookupInfoInContainer(v2, v3, v4);
  objc_msgSend_setSearchPredicate_(v8, v6, (uint64_t)v5);

  objc_msgSend_setFetchedProperties_(v8, v7, (uint64_t)&unk_1F20AB658);
}

void sub_1C4D86440(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D86CF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D88960(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1C4D8897C(uint64_t a1, void *a2)
{
  id v2 = NSString;
  id v3 = a2;
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  id v8 = objc_msgSend_operationID(v3, v6, v7);

  unint64_t v10 = objc_msgSend_stringWithFormat_(v2, v9, @"<%@ %@>", v5, v8);

  return v10;
}

void sub_1C4D88EF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D89384(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D893A0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_childOperations(*(void **)(a1 + 32), a2, a3);
  objc_sync_enter(v4);
  uint64_t v7 = objc_msgSend_childOperations(*(void **)(a1 + 32), v5, v6);
  objc_msgSend_removeObject_(v7, v8, *(void *)(a1 + 40));

  objc_sync_exit(v4);
  uint64_t v11 = objc_msgSend_finishedChildOperationIDs(*(void **)(a1 + 32), v9, v10);
  objc_sync_enter(v11);
  BOOL v14 = objc_msgSend_finishedChildOperationIDs(*(void **)(a1 + 32), v12, v13);
  uint64_t v17 = objc_msgSend_operationID(*(void **)(a1 + 40), v15, v16);
  objc_msgSend_addObject_(v14, v18, (uint64_t)v17);

  objc_sync_exit(v11);
  objc_msgSend_combineMetricsWithOperation_(*(void **)(a1 + 32), v19, *(void *)(a1 + 40));
  uint64_t v22 = objc_msgSend_childOperationsGroup(*(void **)(a1 + 32), v20, v21);
  dispatch_group_leave(v22);
}

void sub_1C4D89490(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D8967C()
{
  uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v1 = dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_USER_INTERACTIVE, 0);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.cloudkit.operationcallback.userinteractive", v1);
  id v3 = (void *)qword_1EBBCDF40;
  qword_1EBBCDF40 = (uint64_t)v2;

  uint64_t v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v5 = dispatch_queue_attr_make_with_qos_class(v4, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v6 = dispatch_queue_create("com.apple.cloudkit.operationcallback.userinitiated", v5);
  uint64_t v7 = (void *)qword_1EBBCDF48;
  qword_1EBBCDF48 = (uint64_t)v6;

  id v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v9 = dispatch_queue_create("com.apple.cloudkit.operationcallback.default", v8);
  uint64_t v10 = (void *)qword_1EBBCDF50;
  qword_1EBBCDF50 = (uint64_t)v9;

  uint64_t v11 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  unint64_t v12 = dispatch_queue_attr_make_with_qos_class(v11, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v13 = dispatch_queue_create("com.apple.cloudkit.operationcallback.utility", v12);
  BOOL v14 = (void *)qword_1EBBCDF58;
  qword_1EBBCDF58 = (uint64_t)v13;

  uint64_t v18 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  int v15 = dispatch_queue_attr_make_with_qos_class(v18, QOS_CLASS_BACKGROUND, 0);
  dispatch_queue_t v16 = dispatch_queue_create("com.apple.cloudkit.operationcallback.background", v15);
  uint64_t v17 = (void *)qword_1EBBCDF60;
  qword_1EBBCDF60 = (uint64_t)v16;
}

void sub_1C4D89C78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  dispatch_queue_t v9 = v6;
  if (!v5 || v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v30 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v36 = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v30, OS_LOG_TYPE_DEBUG, "Couldn't get server configuration", v36, 2u);
      if (v9) {
        goto LABEL_10;
      }
    }
    else if (v9)
    {
LABEL_10:
      objc_msgSend_finishWithError_(*(void **)(a1 + 32), v31, (uint64_t)v9);
LABEL_16:

      goto LABEL_17;
    }
    dispatch_queue_t v9 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v31, *MEMORY[0x1E4F19C40], 4, @"Didn't get any configuration from the server");
    goto LABEL_10;
  }
  uint64_t v10 = objc_msgSend_container(*(void **)(a1 + 32), v7, v8);
  dispatch_queue_t v13 = objc_msgSend_applicationBundleIdentifierForContainerAccess(v10, v11, v12);
  dispatch_queue_t v16 = objc_msgSend_container(*(void **)(a1 + 32), v14, v15);
  char v19 = objc_msgSend_applicationVersion(v16, v17, v18);
  uint64_t v22 = objc_msgSend_container(*(void **)(a1 + 32), v20, v21);
  char v25 = objc_msgSend_containerID(v22, v23, v24);
  int canSyncUsingVersion_forContainerID = objc_msgSend_applicationWithBundleID_canSyncUsingVersion_forContainerID_(v5, v26, (uint64_t)v13, v19, v25);

  if (!canSyncUsingVersion_forContainerID)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v32 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v32, OS_LOG_TYPE_DEBUG, "Application version is not allowed by the server", buf, 2u);
    }
    uint64_t v34 = *(void **)(a1 + 32);
    dispatch_queue_t v9 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v33, *MEMORY[0x1E4F19C40], 18, @"Application version is not allowed by the server");
    objc_msgSend_finishWithError_(v34, v35, (uint64_t)v9);
    goto LABEL_16;
  }
  objc_msgSend__determineNetworkServiceType(*(void **)(a1 + 32), v28, v29);
LABEL_17:
}

void sub_1C4D8A4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4D8A500(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (objc_msgSend_qualityOfService(*(void **)(a1 + 32), v6, v7) <= 32)
  {
    objc_msgSend_allowsCellularAccess(v5, v8, v9, a3, 0);
    objc_msgSend_isUplink(v5, v10, v11);
    int v12 = net_qos_guideline();
    int v13 = v12;
    if (!v12)
    {
      uint64_t v14 = 0;
      goto LABEL_11;
    }
    if (v12 == 1)
    {
      uint64_t v14 = 5;
      goto LABEL_11;
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v15 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v24 = v13;
      _os_log_error_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_ERROR, "Got unexpected result %d back from net_qos_guideline, going with default NST", buf, 8u);
    }
  }
  uint64_t v14 = 0;
LABEL_11:
  dispatch_queue_t v16 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v8, (uint64_t)v5);
  uint64_t v19 = objc_msgSend_unsignedIntegerValue(v16, v17, v18);

  if (v14 != v19) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
  uint64_t v21 = objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E4F28ED0], v20, v14);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 48), v22, (uint64_t)v21, v5);
}

void sub_1C4D8B05C(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 192));
  _Unwind_Resume(a1);
}

void sub_1C4D8B0B8(uint64_t a1, void *a2)
{
  id v44 = a2;
  id v5 = objc_msgSend_metricExecuteStartDate(*(void **)(a1 + 32), v3, v4);
  uint64_t v8 = objc_msgSend_startDate(v44, v6, v7);
  objc_msgSend_timeIntervalSinceDate_(v5, v9, (uint64_t)v8);
  double v11 = v10;

  uint64_t v14 = objc_msgSend_startDate(v44, v12, v13);
  started = objc_msgSend_newRangeWithOperationState_startDate_duration_(v44, v15, 0, v14, v11);

  objc_msgSend_addRange_(v44, v17, (uint64_t)started);
  if (objc_msgSend_isTopLevelDaemonOperation(*(void **)(a1 + 32), v18, v19))
  {
    uint64_t v22 = objc_msgSend_container(*(void **)(a1 + 32), v20, v21);
    uint64_t v25 = objc_msgSend_options(v22, v23, v24);
    char v28 = objc_msgSend_bypassPCSEncryption(v25, v26, v27);

    if ((v28 & 1) == 0)
    {
      uint64_t v31 = objc_msgSend_deviceContext(*(void **)(a1 + 32), v29, v30);
      uint64_t v34 = objc_msgSend_accountDataSecurityObserver(v31, v32, v33);
      uint64_t v37 = objc_msgSend_container(*(void **)(a1 + 32), v35, v36);
      long long v40 = objc_msgSend_account(v37, v38, v39);
      uint64_t v42 = objc_msgSend_isWalrusEnabledForAccount_allowBlockingFetch_(v34, v41, (uint64_t)v40, 0);

      objc_msgSend_setWalrusEnabled_(v44, v43, v42);
    }
  }
}

uint64_t sub_1C4D8B22C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t isCancelled = objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3);
  if (isCancelled)
  {
    int isFinished = objc_msgSend_isFinished(*(void **)(a1 + 32), v4, v5);
    uint64_t v8 = (void *)*MEMORY[0x1E4F1A548];
    if (!isFinished)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v8);
      }
      uint64_t v17 = (void *)*MEMORY[0x1E4F1A520];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A520], OS_LOG_TYPE_DEFAULT))
      {
        char v20 = v17;
        uint64_t v21 = (objc_class *)objc_opt_class();
        uint64_t v22 = NSStringFromClass(v21);
        uint64_t v23 = *(void **)(a1 + 32);
        id v26 = objc_msgSend_ckShortDescription(v23, v24, v25);
        *(_DWORD *)buf = 138543874;
        uint64_t v36 = v22;
        __int16 v37 = 2048;
        uint64_t v38 = v23;
        __int16 v39 = 2114;
        long long v40 = v26;
        _os_log_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEFAULT, "<%{public}@: %p; %{public}@> was cancelled before it started",
          buf,
          0x20u);
      }
      objc_msgSend_transitionToExecuting(*(void **)(a1 + 32), v18, v19);
      uint64_t v27 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v28 = *MEMORY[0x1E4F19DD8];
      uint64_t v31 = objc_msgSend_operationID(*(void **)(a1 + 32), v29, v30);
      double v10 = objc_msgSend_errorWithDomain_code_format_(v27, v32, v28, 1, @"Operation %@ was cancelled before it started", v31);

      objc_msgSend_finishWithError_(*(void **)(a1 + 32), v33, (uint64_t)v10);
      goto LABEL_12;
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v8);
    }
    uint64_t v9 = (void *)*MEMORY[0x1E4F1A520];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A520], OS_LOG_TYPE_DEFAULT))
    {
      double v10 = v9;
      double v11 = (objc_class *)objc_opt_class();
      int v12 = NSStringFromClass(v11);
      uint64_t v13 = *(void **)(a1 + 32);
      dispatch_queue_t v16 = objc_msgSend_ckShortDescription(v13, v14, v15);
      *(_DWORD *)buf = 138543874;
      uint64_t v36 = v12;
      __int16 v37 = 2048;
      uint64_t v38 = v13;
      __int16 v39 = 2114;
      long long v40 = v16;
      _os_log_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_DEFAULT, "<%{public}@: %p; %{public}@> is already cancelled and finished but it tried to start again",
        buf,
        0x20u);

LABEL_12:
    }
  }
  return isCancelled;
}

void sub_1C4D8B4A8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_shouldCheckAppVersion(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v6 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      id v26 = *(void **)(a1 + 32);
      uint64_t v27 = v6;
      uint64_t v30 = objc_msgSend_operationID(v26, v28, v29);
      int v31 = 138543362;
      uint64_t v32 = v30;
      _os_log_debug_impl(&dword_1C4CFF000, v27, OS_LOG_TYPE_DEBUG, "Operation %{public}@ requires checking app version.  Doing so", (uint8_t *)&v31, 0xCu);
    }
    objc_msgSend__checkAppVersion(*(void **)(a1 + 32), v7, v8);
  }
  else
  {
    objc_msgSend__determineNetworkServiceType(*(void **)(a1 + 32), v4, v5);
  }
  objc_msgSend_hash(*(void **)(a1 + 32), v9, v10);
  kdebug_trace();
  uint64_t v13 = objc_msgSend_signpost(*(void **)(a1 + 32), v11, v12);

  if (v13)
  {
    dispatch_queue_t v16 = objc_msgSend_signpost(*(void **)(a1 + 32), v14, v15);
    uint64_t v19 = objc_msgSend_log(v16, v17, v18);

    uint64_t v22 = objc_msgSend_signpost(*(void **)(a1 + 32), v20, v21);
    os_signpost_id_t v25 = objc_msgSend_identifier(v22, v23, v24);

    if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
    {
      LOWORD(v31) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v19, OS_SIGNPOST_EVENT, v25, "CKDOperation", "Start ended", (uint8_t *)&v31, 2u);
    }
  }
}

void sub_1C4D8B694(uint64_t a1)
{
}

void sub_1C4D8B69C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A548];
  if (!v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    uint64_t v9 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void **)(a1 + 32);
      uint64_t v13 = v9;
      dispatch_queue_t v16 = objc_msgSend_operationID(v12, v14, v15);
      *(_DWORD *)buf = 138543618;
      id v20 = v16;
      __int16 v21 = 2112;
      id v22 = v5;
      _os_log_debug_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_DEBUG, "Operation %{public}@ was told to take action \"%@\"", buf, 0x16u);

      if (v5) {
        goto LABEL_11;
      }
      goto LABEL_13;
    }
LABEL_10:
    if (v5) {
      goto LABEL_11;
    }
LABEL_13:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    goto LABEL_14;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v7);
  }
  uint64_t v8 = *MEMORY[0x1E4F1A500];
  if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR)) {
    goto LABEL_10;
  }
  *(_DWORD *)buf = 138412290;
  id v20 = v6;
  _os_log_error_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_ERROR, "Asked client what to do for a daemon operation, it responded with an error %@", buf, 0xCu);
  if (!v5) {
    goto LABEL_13;
  }
LABEL_11:
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = sub_1C4D8B8B8;
  v17[3] = &unk_1E64F05C8;
  uint64_t v10 = *(void *)(a1 + 32);
  id v18 = *(id *)(a1 + 40);
  objc_msgSend_takeActionOnOperation_proceedBlock_(v5, v11, v10, v17);

LABEL_14:
}

void sub_1C4D8B8B8(uint64_t a1)
{
}

void sub_1C4D8C2DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D8C2F8(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 48))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    dispatch_queue_t v2 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *(void *)(a1 + 48);
      uint64_t v4 = *(void **)(a1 + 32);
      id v5 = v2;
      uint64_t v8 = objc_msgSend_operationID(v4, v6, v7);
      int v9 = 134218242;
      uint64_t v10 = v3;
      __int16 v11 = 2114;
      uint64_t v12 = v8;
      _os_log_debug_impl(&dword_1C4CFF000, v5, OS_LOG_TYPE_DEBUG, "Finished waiting for all (%lu) child operations to finish for operation %{public}@", (uint8_t *)&v9, 0x16u);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1C4D8C41C(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    dispatch_queue_t v2 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *(void **)(a1 + 32);
      uint64_t v4 = v2;
      uint64_t v7 = objc_msgSend_operationID(v3, v5, v6);
      int v8 = 138543362;
      int v9 = v7;
      _os_log_debug_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_DEBUG, "All state transition locks have been released. Finishing operation %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1C4D8C530(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  dispatch_queue_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138543362;
    uint64_t v5 = v3;
    _os_log_debug_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_DEBUG, "All client callbacks finished for operation %{public}@", (uint8_t *)&v4, 0xCu);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1C4D8C614(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__finishInternalOnCallbackQueueWithError_, *(void *)(a1 + 40));
}

void sub_1C4D8CC14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D8CC3C(uint64_t a1, void *a2)
{
  id v28 = a2;
  uint64_t v5 = objc_msgSend_metricExecuteStartDate(*(void **)(a1 + 32), v3, v4);

  if (v5)
  {
    int v8 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v6, v7);
    __int16 v11 = objc_msgSend_metricExecuteStartDate(*(void **)(a1 + 32), v9, v10);
    objc_msgSend_timeIntervalSinceDate_(v8, v12, (uint64_t)v11);
    double v14 = v13;

    uint64_t v17 = objc_msgSend_startDate(v28, v15, v16);
    started = objc_msgSend_newRangeWithOperationState_startDate_duration_(v28, v18, 1, v17, v14);

    objc_msgSend_addRange_(v28, v20, (uint64_t)started);
  }
  __int16 v21 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v6, v7);
  uint64_t v24 = objc_msgSend_startDate(v28, v22, v23);
  objc_msgSend_timeIntervalSinceDate_(v21, v25, (uint64_t)v24);
  objc_msgSend_setDuration_(v28, v26, v27);
}

void sub_1C4D8CFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
}

uint64_t sub_1C4D8D6D8(uint64_t a1, const char *a2)
{
  return objc_msgSend_makeStateTransition_(*(void **)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 40));
}

void sub_1C4D8DA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1C4D8DACC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  int v9 = (void *)*MEMORY[0x1E4F1A548];
  if (v7)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v9);
    }
    uint64_t v10 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      __int16 v11 = v10;
      double v14 = objc_msgSend_operationID(WeakRetained, v12, v13);
      int v20 = 138543618;
      __int16 v21 = v14;
      __int16 v22 = 2112;
      id v23 = v7;
      uint64_t v15 = "Error fetching container scoped user identifier for operation %{public}@: %@";
LABEL_13:
      _os_log_debug_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_DEBUG, v15, (uint8_t *)&v20, 0x16u);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v9);
    }
    uint64_t v16 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      __int16 v11 = v16;
      double v14 = objc_msgSend_operationID(WeakRetained, v18, v19);
      int v20 = 138543618;
      __int16 v21 = v14;
      __int16 v22 = 2112;
      id v23 = v6;
      uint64_t v15 = "Fetched container scoped user identifier for operation %{public}@: %@";
      goto LABEL_13;
    }
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if (v17) {
    (*(void (**)(uint64_t, id))(v17 + 16))(v17, v7);
  }
}

void sub_1C4D8E1C0(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4D8E1E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = objc_msgSend_callbackQueue(WeakRetained, v3, v4);
  id v6 = *(id *)(a1 + 32);
  ck_call_or_dispatch_async_if_not_key();
}

id sub_1C4D8E2A8(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)MEMORY[0x1C8789E70]();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  return self;
}

void sub_1C4D8E5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D8E61C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4D8E62C(uint64_t a1)
{
}

void sub_1C4D8E634(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  int v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4D8EA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4D8EA80(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v7;
  id v18 = v7;

  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v8;
  id v14 = v8;

  uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v9;
  id v17 = v9;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4D8EF38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D8F008(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D8F01C(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v4 = objc_msgSend_requestCount(v6, v2, v3);
  objc_msgSend_setRequestCount_(v6, v5, v4 + 1);
}

void sub_1C4D8F5E4(uint64_t a1, void *a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  v10[0] = *(void *)(a1 + 32);
  id v5 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v4, (uint64_t)v10, 1);
  MMCSOperationMetricCombineMetrics();

  if (*(void *)(a1 + 40))
  {
    id v8 = objc_msgSend_requestOperationCountsByOperationType(*(void **)(a1 + 48), v6, v7);
    objc_msgSend_addRequestOperationCountsByOperationType_(v3, v9, (uint64_t)v8);
  }
}

uint64_t sub_1C4D8F9AC()
{
  qword_1EBBCDF68 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1C998]);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4D90380(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D91E00(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        id v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4D922AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_1C4D922C0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_personaID(*(void **)(a1 + 32), a2, a3);
  BOOL v5 = CKAdoptPersonaID(v4);

  if (v5)
  {
    objc_msgSend_waitCompletedHandler(*(void **)(a1 + 32), v6, v7);
    uint64_t v17 = (void (**)(id, void))objc_claimAutoreleasedReturnValue();
    v17[2](v17, *(unsigned __int8 *)(a1 + 40));
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    char v8 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      unint64_t v12 = *(void **)(a1 + 32);
      char v13 = v8;
      uint64_t v16 = objc_msgSend_personaID(v12, v14, v15);
      *(_DWORD *)buf = 138412290;
      uint64_t v19 = v16;
      _os_log_debug_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_DEBUG, "Failed to adopt personaID: %@ when acquiring gate. Calling back with NO", buf, 0xCu);
    }
    objc_msgSend_waitCompletedHandler(*(void **)(a1 + 32), v9, v10);
    uint64_t v11 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
    v11[2](v11, 0);
  }
}

void sub_1C4D92B78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D92BB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4D935FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D93674(uint64_t a1, const char *a2)
{
  return objc_msgSend_relinquishLocksForWaiter_deferRelinquish_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), 0);
}

uint64_t sub_1C4D93684(uint64_t a1, const char *a2)
{
  return objc_msgSend_invokeWaitCompletedHandler_(*(void **)(a1 + 32), a2, 1);
}

void sub_1C4D93714(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4D93B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id obj)
{
}

uint64_t sub_1C4D93C14(uint64_t a1, const char *a2, uint64_t a3)
{
  qword_1EBBCFBC8 = objc_msgSend_strongToWeakObjectsMapTable(MEMORY[0x1E4F28E10], a2, a3);
  return MEMORY[0x1F41817F8]();
}

id sub_1C4D93FDC(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_count(v1, v2, v3))
  {
    uint64_t v4 = objc_opt_new();
    if (objc_msgSend_count(v1, v5, v6))
    {
      unint64_t v8 = 0;
      do
      {
        unsigned int v9 = objc_msgSend_objectAtIndexedSubscript_(v1, v7, v8);
        if (v8 == objc_msgSend_count(v1, v10, v11) - 1) {
          objc_msgSend_appendFormat_(v4, v12, @"%@ = $%@", v9, v9);
        }
        else {
          objc_msgSend_appendFormat_(v4, v12, @"%@ = $%@ AND ", v9, v9);
        }

        ++v8;
      }
      while (v8 < objc_msgSend_count(v1, v13, v14));
    }
    uint64_t v15 = objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], v7, (uint64_t)v4);
  }
  else
  {
    uint64_t v15 = 0;
  }

  return v15;
}

void sub_1C4D94480(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = @"zoneIDString";
  dispatch_queue_t v2 = (void *)MEMORY[0x1E4F1C978];
  id v3 = a2;
  BOOL v5 = objc_msgSend_arrayWithObjects_count_(v2, v4, (uint64_t)&v8, 1);
  uint64_t v6 = sub_1C4D93FDC(v5);
  objc_msgSend_setSearchPredicate_(v3, v7, (uint64_t)v6, v8, v9);
}

void sub_1C4D94BEC(uint64_t a1, void *a2)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  v8[0] = @"recordName";
  v8[1] = @"zoneRowID";
  dispatch_queue_t v2 = (void *)MEMORY[0x1E4F1C978];
  id v3 = a2;
  BOOL v5 = objc_msgSend_arrayWithObjects_count_(v2, v4, (uint64_t)v8, 2);
  uint64_t v6 = sub_1C4D93FDC(v5);

  objc_msgSend_setSearchPredicate_(v3, v7, (uint64_t)v6);
}

void sub_1C4D94FF0(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = @"zoneRowID";
  dispatch_queue_t v2 = (void *)MEMORY[0x1E4F1C978];
  id v3 = a2;
  BOOL v5 = objc_msgSend_arrayWithObjects_count_(v2, v4, (uint64_t)&v8, 1);
  uint64_t v6 = sub_1C4D93FDC(v5);
  objc_msgSend_setSearchPredicate_(v3, v7, (uint64_t)v6, v8, v9);
}

id sub_1C4D95200(uint64_t a1, const char *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  v5[0] = @"zoneRowID";
  dispatch_queue_t v2 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], a2, (uint64_t)v5, 1);
  id v3 = sub_1C4D93FDC(v2);

  return v3;
}

id sub_1C4D953A8(uint64_t a1, const char *a2)
{
  dispatch_queue_t v2 = objc_msgSend_stringWithFormat_(NSString, a2, @"%@ = $%@ AND NOT %@ = $%@", @"zoneRowID", @"zoneRowID", @"rowID", @"rowID");
  uint64_t v4 = objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], v3, (uint64_t)v2);

  return v4;
}

void sub_1C4D96298(uint64_t a1, void *a2)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  v8[0] = @"zoneRowID";
  v8[1] = @"recordName";
  dispatch_queue_t v2 = (void *)MEMORY[0x1E4F1C978];
  id v3 = a2;
  BOOL v5 = objc_msgSend_arrayWithObjects_count_(v2, v4, (uint64_t)v8, 2);
  uint64_t v6 = sub_1C4D93FDC(v5);

  objc_msgSend_setSearchPredicate_(v3, v7, (uint64_t)v6);
}

void sub_1C4D96A00(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = @"parentRowID";
  dispatch_queue_t v2 = (void *)MEMORY[0x1E4F1C978];
  id v3 = a2;
  BOOL v5 = objc_msgSend_arrayWithObjects_count_(v2, v4, (uint64_t)&v8, 1);
  uint64_t v6 = sub_1C4D93FDC(v5);
  objc_msgSend_setSearchPredicate_(v3, v7, (uint64_t)v6, v8, v9);
}

id sub_1C4D96C34(uint64_t a1, const char *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  v5[0] = @"shareRowID";
  dispatch_queue_t v2 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], a2, (uint64_t)v5, 1);
  id v3 = sub_1C4D93FDC(v2);

  return v3;
}

id sub_1C4D96F40(uint64_t a1, const char *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  v5[0] = @"zoneRowID";
  dispatch_queue_t v2 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], a2, (uint64_t)v5, 1);
  id v3 = sub_1C4D93FDC(v2);

  return v3;
}

void sub_1C4D97AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D97AE4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4D97AF4(uint64_t a1)
{
}

id sub_1C4D97AFC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_zoneShareTable(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_zoneID(*(void **)(a1 + 40), v5, v6);
  id v20 = 0;
  objc_msgSend_shareIDForZoneID_error_(v4, v8, (uint64_t)v7, &v20);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  id v10 = v20;

  if (!v10)
  {
    if (v9) {
      goto LABEL_5;
    }
    char v13 = objc_msgSend_recordTable(*(void **)(a1 + 32), v11, v12);
    uint64_t v14 = *(void *)(a1 + 40);
    id v19 = 0;
    objc_msgSend_shareIDForRecordID_error_(v13, v15, v14, &v19);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    id v10 = v19;

    if (!v10)
    {
      if (v9)
      {
LABEL_5:
        uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
        id v9 = v9;
        uint64_t v17 = *(void **)(v16 + 40);
        *(void *)(v16 + 40) = v9;

        id v10 = 0;
      }
    }
  }

  return v10;
}

void sub_1C4D97DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1C4D97E1C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_zoneShareTable(*(void **)(a1 + 32), a2, a3);
  uint64_t v5 = *(void *)(a1 + 40);
  id v11 = 0;
  uint64_t v7 = objc_msgSend_shareIDForZoneID_error_(v4, v6, v5, &v11);
  id v8 = v11;

  if (v8) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v7 == 0;
  }
  if (!v9) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v7);
  }

  return v8;
}

void sub_1C4D980BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1C4D980DC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_zoneShareTable(*(void **)(a1 + 32), a2, a3);
  uint64_t v5 = *(void *)(a1 + 40);
  id v18 = 0;
  uint64_t v7 = objc_msgSend_shareIDForZoneID_error_(v4, v6, v5, &v18);
  id v8 = v18;

  if (!v8)
  {
    if (v7) {
      objc_msgSend_addObject_(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v9, (uint64_t)v7);
    }
    id v11 = objc_msgSend_recordTable(*(void **)(a1 + 32), v9, v10);
    uint64_t v12 = *(void *)(a1 + 40);
    id v17 = 0;
    uint64_t v14 = objc_msgSend_shareIDsForZoneID_error_(v11, v13, v12, &v17);
    id v8 = v17;

    if (!v8 && v14) {
      objc_msgSend_unionSet_(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v15, (uint64_t)v14);
    }
  }
  return v8;
}

id sub_1C4D98388(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_zoneShareTable(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_zoneID(*(void **)(a1 + 40), v5, v6);
  id v19 = 0;
  char hasZoneID_error = objc_msgSend_hasZoneID_error_(v4, v8, (uint64_t)v7, &v19);
  id v10 = v19;

  if (!v10 && (hasZoneID_error & 1) == 0)
  {
    char v13 = objc_msgSend_recordTable(*(void **)(a1 + 32), v11, v12);
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 48);
    id v18 = 0;
    objc_msgSend_addOrUpdateRecordID_withParentID_error_(v13, v16, v14, v15, &v18);
    id v10 = v18;
  }
  return v10;
}

id sub_1C4D985DC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_shareIDTable(*(void **)(a1 + 32), a2, a3);
  uint64_t v5 = *(void *)(a1 + 40);
  id v18 = 0;
  uint64_t v7 = objc_msgSend_entryForShareID_addIfNotFound_error_(v4, v6, v5, 0, &v18);
  id v8 = v18;

  if (!v8)
  {
    id v11 = *(void **)(a1 + 32);
    if (v7)
    {
      id v17 = 0;
      objc_msgSend_removeShareWithShareEntry_error_(v11, v9, (uint64_t)v7, &v17);
      id v8 = v17;
    }
    else
    {
      uint64_t v12 = objc_msgSend_recordTable(v11, v9, v10);
      uint64_t v13 = *(void *)(a1 + 40);
      id v16 = 0;
      objc_msgSend_removeRecordID_error_(v12, v14, v13, &v16);
      id v8 = v16;
    }
  }

  return v8;
}

id sub_1C4D9883C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_zoneShareTable(*(void **)(a1 + 32), a2, a3);
  uint64_t v5 = *(void *)(a1 + 40);
  id v39 = 0;
  int v7 = objc_msgSend_addZoneShareID_error_(v4, v6, v5, &v39);
  id v8 = v39;

  if (v8) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v7 == 0;
  }
  if (!v11)
  {
    uint64_t v12 = objc_msgSend_recordTable(*(void **)(a1 + 32), v9, v10);
    uint64_t v15 = objc_msgSend_zoneID(*(void **)(a1 + 40), v13, v14);
    id v38 = 0;
    objc_msgSend_removeZoneID_error_(v12, v16, (uint64_t)v15, &v38);
    id v8 = v38;

    if (!v8)
    {
      id v19 = objc_msgSend_zoneShareTable(*(void **)(a1 + 32), v17, v18);
      __int16 v22 = objc_msgSend_zoneID(*(void **)(a1 + 40), v20, v21);
      id v37 = 0;
      uint64_t v24 = objc_msgSend_entryForZoneID_error_(v19, v23, (uint64_t)v22, &v37);
      id v8 = v37;

      if (!v8 && v24)
      {
        uint64_t v27 = objc_msgSend_shareIDTable(*(void **)(a1 + 32), v25, v26);
        uint64_t v30 = objc_msgSend_zoneRowID(v24, v28, v29);
        uint64_t v33 = objc_msgSend_shareRowID(v24, v31, v32);
        id v36 = 0;
        objc_msgSend_removeSharesWithZoneRowID_exceptRowID_error_(v27, v34, (uint64_t)v30, v33, &v36);
        id v8 = v36;
      }
    }
  }
  return v8;
}

id sub_1C4D98B7C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_zoneID(*(void **)(a1 + 32), a2, a3);
  int v7 = objc_msgSend_zoneShareTable(*(void **)(a1 + 40), v5, v6);
  id v38 = 0;
  BOOL v9 = objc_msgSend_entryForZoneID_error_(v7, v8, (uint64_t)v4, &v38);
  id v10 = v38;

  if (!v10)
  {
    if (!v9) {
      goto LABEL_9;
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v13 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v40 = v16;
      __int16 v41 = 2112;
      uint64_t v42 = v4;
      _os_log_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_INFO, "Warn: A hierarchical share %@ is added to a zone with a zone share in the shareID cache, zoneID: %@", buf, 0x16u);
    }
    id v17 = objc_msgSend_zoneShareTable(*(void **)(a1 + 40), v14, v15);
    id v20 = objc_msgSend_zoneRowID(v9, v18, v19);
    id v37 = 0;
    objc_msgSend_removeRowID_error_(v17, v21, (uint64_t)v20, &v37);
    id v10 = v37;

    if (!v10)
    {
      uint64_t v24 = objc_msgSend_shareIDTable(*(void **)(a1 + 40), v22, v23);
      uint64_t v27 = objc_msgSend_shareRowID(v9, v25, v26);
      id v36 = 0;
      objc_msgSend_removeRowID_error_(v24, v28, (uint64_t)v27, &v36);
      id v10 = v36;

      if (!v10)
      {
LABEL_9:
        uint64_t v29 = objc_msgSend_recordTable(*(void **)(a1 + 40), v11, v12);
        uint64_t v30 = *(void *)(a1 + 32);
        uint64_t v31 = *(void *)(a1 + 48);
        id v35 = 0;
        objc_msgSend_addShareID_forRootRecordID_error_(v29, v32, v30, v31, &v35);
        id v10 = v35;
      }
    }
  }
  id v33 = v10;

  return v33;
}

id sub_1C4D98F2C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_shareIDTable(*(void **)(a1 + 32), a2, a3);
  uint64_t v5 = *(void *)(a1 + 40);
  id v14 = 0;
  int v7 = objc_msgSend_entryForShareID_addIfNotFound_error_(v4, v6, v5, 0, &v14);
  id v8 = v14;

  if (v8) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v7 == 0;
  }
  if (!v10)
  {
    BOOL v11 = *(void **)(a1 + 32);
    id v13 = 0;
    objc_msgSend_removeShareWithShareEntry_error_(v11, v9, (uint64_t)v7, &v13);
    id v8 = v13;
  }

  return v8;
}

id sub_1C4D99160(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_zoneShareTable(*(void **)(a1 + 32), a2, a3);
  uint64_t v5 = *(void *)(a1 + 40);
  id v27 = 0;
  int v7 = objc_msgSend_entryForZoneID_error_(v4, v6, v5, &v27);
  id v8 = v27;

  if (v8) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v7 == 0;
  }
  if (!v11)
  {
    uint64_t v12 = objc_msgSend_zoneShareTable(*(void **)(a1 + 32), v9, v10);
    uint64_t v15 = objc_msgSend_zoneRowID(v7, v13, v14);
    id v26 = 0;
    objc_msgSend_removeRowID_error_(v12, v16, (uint64_t)v15, &v26);
    id v8 = v26;

    if (!v8)
    {
      uint64_t v19 = objc_msgSend_shareIDTable(*(void **)(a1 + 32), v17, v18);
      __int16 v22 = objc_msgSend_shareRowID(v7, v20, v21);
      id v25 = 0;
      objc_msgSend_removeRowID_error_(v19, v23, (uint64_t)v22, &v25);
      id v8 = v25;
    }
  }

  return v8;
}

id sub_1C4D9940C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_zoneIDTable(*(void **)(a1 + 32), a2, a3);
  uint64_t v5 = *(void *)(a1 + 40);
  id v31 = 0;
  int v7 = objc_msgSend_rowIDForZoneID_addIfNotFound_error_(v4, v6, v5, 0, &v31);
  id v8 = v31;

  if (v8) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v7 == 0;
  }
  if (!v11)
  {
    uint64_t v12 = objc_msgSend_zoneShareTable(*(void **)(a1 + 32), v9, v10);
    id v30 = 0;
    objc_msgSend_removeRowID_error_(v12, v13, (uint64_t)v7, &v30);
    id v8 = v30;

    if (!v8)
    {
      uint64_t v16 = objc_msgSend_recordTable(*(void **)(a1 + 32), v14, v15);
      id v29 = 0;
      objc_msgSend_removeRecordsWithZoneRowID_error_(v16, v17, (uint64_t)v7, &v29);
      id v8 = v29;

      if (!v8)
      {
        id v20 = objc_msgSend_shareIDTable(*(void **)(a1 + 32), v18, v19);
        id v28 = 0;
        objc_msgSend_removeSharesWithZoneRowID_error_(v20, v21, (uint64_t)v7, &v28);
        id v8 = v28;

        if (!v8)
        {
          uint64_t v24 = objc_msgSend_zoneIDTable(*(void **)(a1 + 32), v22, v23);
          id v27 = 0;
          objc_msgSend_removeRowID_error_(v24, v25, (uint64_t)v7, &v27);
          id v8 = v27;
        }
      }
    }
  }

  return v8;
}

void sub_1C4D9990C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4D99930(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v5 = (void *)*MEMORY[0x1E4F1A548];
    if (v3)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v5);
      }
      uint64_t v6 = (void *)*MEMORY[0x1E4F1A510];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_ERROR))
      {
        id v13 = v6;
        uint64_t v16 = objc_msgSend_operationID(WeakRetained, v14, v15);
        int v21 = 138412546;
        __int16 v22 = v16;
        __int16 v23 = 2112;
        id v24 = v3;
        _os_log_error_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_ERROR, "Error fetching delta metadata in operation %@: %@", (uint8_t *)&v21, 0x16u);
      }
      objc_msgSend_setError_(WeakRetained, v7, (uint64_t)v3);
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v5);
      }
      BOOL v11 = (void *)*MEMORY[0x1E4F1A510];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_DEBUG))
      {
        id v17 = v11;
        id v20 = objc_msgSend_operationID(WeakRetained, v18, v19);
        int v21 = 138412290;
        __int16 v22 = v20;
        _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "Fetched delta metadata for operation %@", (uint8_t *)&v21, 0xCu);
      }
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v10 = *MEMORY[0x1E4F1A510];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_INFO))
    {
      LOWORD(v21) = 0;
      _os_log_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_INFO, "Deallocated while fetching delta metadata", (uint8_t *)&v21, 2u);
    }
  }
  uint64_t v12 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v8, v9);
  dispatch_group_leave(v12);
}

void sub_1C4D99E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,id a25)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a25);
  _Unwind_Resume(a1);
}

void sub_1C4D99EB8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v11)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v15 = *MEMORY[0x1E4F1A510];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_DEBUG))
      {
        int v18 = 138412290;
        id v19 = v9;
        _os_log_debug_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_DEBUG, "Got a continuation token for value %@", (uint8_t *)&v18, 0xCu);
      }
      objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v16, (uint64_t)v11, v9);
    }
    objc_msgSend_handleFetchedMetadatasForMergeableValueID_metadatas_result_(WeakRetained, v13, (uint64_t)v9, v10, v12);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v17 = *MEMORY[0x1E4F1A510];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_INFO))
    {
      LOWORD(v18) = 0;
      _os_log_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_INFO, "Fetch metadata operation deallocated before request per value ID block", (uint8_t *)&v18, 2u);
    }
  }
}

void sub_1C4D9A098(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v5 = objc_msgSend_count(*(void **)(a1 + 32), v2, v3);
    uint64_t v6 = (void *)*MEMORY[0x1E4F1A548];
    if (v5)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v6);
      }
      int v7 = *MEMORY[0x1E4F1A510];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_DEBUG))
      {
        id v19 = *(void **)(a1 + 32);
        int v26 = 138412290;
        id v27 = v19;
        _os_log_debug_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_DEBUG, "Continuing fetch delta metadata with new continuation tokens: %@", (uint8_t *)&v26, 0xCu);
      }
      id v10 = objc_msgSend_allKeys(*(void **)(a1 + 32), v8, v9);
      objc_msgSend_fetchMetadataRecursivelyForMergeableValueIDs_continuationTokens_completionHandler_(WeakRetained, v11, (uint64_t)v10, *(void *)(a1 + 32), *(void *)(a1 + 40));
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v6);
      }
      id v13 = (void *)*MEMORY[0x1E4F1A510];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = v13;
        int v21 = (objc_class *)objc_opt_class();
        __int16 v22 = NSStringFromClass(v21);
        uint64_t v25 = objc_msgSend_ckShortDescription(WeakRetained, v23, v24);
        int v26 = 138543874;
        id v27 = v22;
        __int16 v28 = 2048;
        id v29 = WeakRetained;
        __int16 v30 = 2114;
        id v31 = v25;
        _os_log_debug_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEBUG, "Fetch delta metadatas URL request completed for operation <%{public}@: %p; %{public}@>",
          (uint8_t *)&v26,
          0x20u);
      }
      uint64_t v14 = *(void *)(a1 + 40);
      id v15 = objc_loadWeakRetained((id *)(a1 + 56));
      int v18 = objc_msgSend_error(v15, v16, v17);
      (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v18);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v12 = *MEMORY[0x1E4F1A510];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_INFO))
    {
      LOWORD(v26) = 0;
      _os_log_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_INFO, "Fetch metadata operation deallocated before request completion block", (uint8_t *)&v26, 2u);
    }
  }
}

void sub_1C4D9AB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,id location)
{
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v46 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4D9AB78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4D9AB88(uint64_t a1)
{
}

void sub_1C4D9AB90(uint64_t a1, void *a2, void *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v25 = *MEMORY[0x1E4F1A510];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v44 = v6;
        _os_log_error_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_ERROR, "Error fetching PCS to decrypt fetched delta metadata: %@", buf, 0xCu);
      }
      uint64_t v27 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v26, *MEMORY[0x1E4F19DD8], 5001, v6, @"Failed to fetch PCS to decrypt mergeable delta timestamps");
      uint64_t v28 = *(void *)(*(void *)(a1 + 56) + 8);
      id v17 = *(id *)(v28 + 40);
      *(void *)(v28 + 40) = v27;
    }
    else
    {
      id v8 = objc_alloc_init(CKDKeyEnvelopeContext);
      uint64_t v11 = objc_msgSend_pcs(v5, v9, v10);
      objc_msgSend_setShareProtection_(v8, v12, v11);
      objc_msgSend_setMergeableValueID_(v8, v13, *(void *)(a1 + 32));
      uint64_t v14 = *(void **)(a1 + 40);
      id v42 = 0;
      char v16 = objc_msgSend_decryptWithContext_error_(v14, v15, (uint64_t)v8, &v42);
      id v17 = v42;
      int v18 = (void *)*MEMORY[0x1E4F1A548];
      if (v16)
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], v18);
        }
        id v19 = (void *)*MEMORY[0x1E4F1A510];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_DEBUG))
        {
          uint64_t v20 = *(void **)(a1 + 40);
          int v21 = v19;
          uint64_t v24 = objc_msgSend_identifier(v20, v22, v23);
          *(_DWORD *)buf = 138412290;
          id v44 = v24;
          _os_log_debug_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_DEBUG, "Successfully decrypted delta metadata %@", buf, 0xCu);
        }
      }
      else
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], v18);
        }
        id v29 = (void *)*MEMORY[0x1E4F1A510];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_ERROR))
        {
          id v37 = *(void **)(a1 + 40);
          id v38 = v29;
          __int16 v41 = objc_msgSend_identifier(v37, v39, v40);
          *(_DWORD *)buf = 138412546;
          id v44 = v41;
          __int16 v45 = 2112;
          id v46 = v17;
          _os_log_error_impl(&dword_1C4CFF000, v38, OS_LOG_TYPE_ERROR, "Failed to decrypt delta metadata %@: %@", buf, 0x16u);
        }
        uint64_t v31 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v30, *MEMORY[0x1E4F19DD8], 5004, v17, @"Failed to decrypt mergeable delta timestamps");
        uint64_t v32 = *(void *)(*(void *)(a1 + 56) + 8);
        id v33 = *(void **)(v32 + 40);
        *(void *)(v32 + 40) = v31;
      }
    }

    id v36 = objc_msgSend_stateTransitionGroup(WeakRetained, v34, v35);
    dispatch_group_leave(v36);

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
}

void sub_1C4D9AEF8(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_metadataFetchedBlock(*(void **)(a1 + 32), a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, void, void, void))v4 + 2))(v4, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
}

BOOL CKDPUserInformationRequestAccessReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        int v18 = *(CKDPContactInformation **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    int v18 = objc_alloc_init(CKDPContactInformation);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark() || !CKDPContactInformationReadFrom((uint64_t)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4D9E6D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1C4D9E848;
  v11[3] = &unk_1E64F2180;
  objc_copyWeak(&v12, &location);
  objc_msgSend_setRecordChangedBlock_(v3, v4, (uint64_t)v11);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = sub_1C4D9E8EC;
  v9[3] = &unk_1E64F09E0;
  objc_copyWeak(&v10, &location);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)v9);
  char v8 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v6, v7);
  dispatch_group_enter(v8);

  objc_destroyWeak(&v10);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);
}

void sub_1C4D9E818(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4D9E848(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v14 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v8 && CKIsPCSError())
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    id v12 = objc_msgSend_mutableCorruptRecords(WeakRetained, v10, v11);
    objc_msgSend_addObject_(v12, v13, (uint64_t)v7);
  }
}

void sub_1C4D9E8EC(uint64_t a1)
{
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_INFO, "Done checking PCS for records in all zones", v7, 2u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = objc_msgSend_stateTransitionGroup(WeakRetained, v4, v5);
  dispatch_group_leave(v6);
}

void sub_1C4D9EAAC(uint64_t a1, void *a2)
{
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = sub_1C4D9EBA4;
  v10[3] = &unk_1E64F21A8;
  void v10[4] = *(void *)(a1 + 32);
  id v3 = a2;
  objc_msgSend_setRecordZoneFetchedProgressBlock_(v3, v4, (uint64_t)v10);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = sub_1C4D9ED5C;
  v9[3] = &unk_1E64F05C8;
  void v9[4] = *(void *)(a1 + 32);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)v9);

  id v8 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v6, v7);
  dispatch_group_enter(v8);
}

void sub_1C4D9EBA4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  uint64_t v11 = (void *)*MEMORY[0x1E4F1A548];
  uint64_t v12 = *MEMORY[0x1E4F1A550];
  if (!v7 || v9)
  {
    if (v12 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v11);
    }
    int v18 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      int v19 = 138412546;
      id v20 = v8;
      __int16 v21 = 2112;
      id v22 = v10;
      _os_log_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_INFO, "Error fetching zone %@: %@", (uint8_t *)&v19, 0x16u);
    }
  }
  else
  {
    if (v12 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v11);
    }
    char v13 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      int v19 = 138412546;
      id v20 = v8;
      __int16 v21 = 2112;
      id v22 = v7;
      _os_log_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_INFO, "Zone with ID %@ was fetched: %@", (uint8_t *)&v19, 0x16u);
    }
    char v16 = objc_msgSend_fetchedZones(*(void **)(a1 + 32), v14, v15);
    objc_msgSend_addObject_(v16, v17, (uint64_t)v7);
  }
}

void sub_1C4D9ED5C(uint64_t a1)
{
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_INFO, "Done fetching zones", v6, 2u);
  }
  uint64_t v5 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v3, v4);
  dispatch_group_leave(v5);
}

uint64_t sub_1C4D9F0F8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setZoneIDs_, *(void *)(a1 + 32));
}

void sub_1C4D9F620(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_error(*(void **)(a1 + 32), a2, a3);

  if (!v4) {
    objc_msgSend_setResultsCursor_(*(void **)(a1 + 32), v5, *(void *)(a1 + 40));
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v6 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = *(void **)(a1 + 32);
    int v26 = v6;
    if (objc_msgSend_fetchAllResults(v25, v27, v28)) {
      uint64_t v31 = @"true";
    }
    else {
      uint64_t v31 = @"false";
    }
    uint64_t v32 = objc_msgSend_error(*(void **)(a1 + 32), v29, v30);
    uint64_t v35 = objc_msgSend_resultsCursor(*(void **)(a1 + 32), v33, v34);
    *(_DWORD *)buf = 138543874;
    uint64_t v43 = v31;
    __int16 v44 = 2112;
    __int16 v45 = v32;
    __int16 v46 = 2112;
    uint64_t v47 = v35;
    _os_log_debug_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_DEBUG, "fetchAllResults:%{public}@ error:%@ resultsCursor:%@", buf, 0x20u);
  }
  if (objc_msgSend_fetchAllResults(*(void **)(a1 + 32), v7, v8))
  {
    uint64_t v11 = objc_msgSend_error(*(void **)(a1 + 32), v9, v10);
    if (v11)
    {
    }
    else
    {
      uint64_t v18 = objc_msgSend_resultsCursor(*(void **)(a1 + 32), v12, v13);
      if (v18)
      {
        int v19 = (void *)v18;
        id v20 = objc_msgSend_queryCursorUpdatedBlock(*(void **)(a1 + 32), v9, v10);

        if (v20)
        {
          objc_msgSend_queryCursorUpdatedBlock(*(void **)(a1 + 32), v9, v10);
          __int16 v21 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
          uint64_t v24 = objc_msgSend_resultsCursor(*(void **)(a1 + 32), v22, v23);
          uint64_t v36 = MEMORY[0x1E4F143A8];
          uint64_t v37 = 3221225472;
          id v38 = sub_1C4D9F8B8;
          id v39 = &unk_1E64F0680;
          uint64_t v40 = *(void *)(a1 + 32);
          id v41 = *(id *)(a1 + 48);
          ((void (**)(void, void *, uint64_t *))v21)[2](v21, v24, &v36);

          goto LABEL_10;
        }
      }
    }
  }
  id v14 = objc_msgSend_perRequestGroup(*(void **)(a1 + 48), v9, v10);
  dispatch_group_leave(v14);

LABEL_10:
  uint64_t v17 = objc_msgSend_fetchRecordsGroup(*(void **)(a1 + 32), v15, v16, v36, v37, v38, v39, v40);
  dispatch_group_leave(v17);
}

void sub_1C4D9F8B8(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  if (v4)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v5 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      id v7 = *(void **)(a1 + 32);
      uint64_t v8 = v5;
      uint64_t v11 = objc_msgSend_operationID(v7, v9, v10);
      int v15 = 138543618;
      uint64_t v16 = v11;
      __int16 v17 = 2112;
      id v18 = v4;
      _os_log_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_INFO, "Finishing daemon operation %{public}@ due to client-returned error %@", (uint8_t *)&v15, 0x16u);
    }
    objc_msgSend_finishWithError_(*(void **)(a1 + 32), v6, (uint64_t)v4);
  }
  objc_msgSend_setHasCalledQueryCursorUpdatedBlock_(*(void **)(a1 + 32), v3, 1);
  id v14 = objc_msgSend_perRequestGroup(*(void **)(a1 + 40), v12, v13);
  dispatch_group_leave(v14);
}

void sub_1C4D9FDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4D9FE00(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_initWeak(&location, *(id *)(a1 + 32));
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4DA0020;
  block[3] = &unk_1E64F21D0;
  objc_copyWeak(&v35, &location);
  id v11 = v9;
  id v30 = v11;
  id v31 = WeakRetained;
  id v12 = v7;
  uint64_t v13 = *(void *)(a1 + 40);
  id v32 = v12;
  uint64_t v33 = v13;
  id v14 = v8;
  id v34 = v14;
  dispatch_block_t v15 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  objc_msgSend_addPerRequestCallbackBlock_(*(void **)(a1 + 32), v16, (uint64_t)v15);
  uint64_t v19 = objc_msgSend_perRequestCallbackGroup(*(void **)(a1 + 32), v17, v18);
  id v22 = objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v20, v21);
  dispatch_group_async(v19, v22, v15);

  uint64_t v25 = objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v23, v24);
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = sub_1C4DA04C4;
  v26[3] = &unk_1E64F0948;
  id v27 = *(id *)(a1 + 32);
  id v28 = WeakRetained;
  dispatch_async(v25, v26);

  objc_destroyWeak(&v35);
  objc_destroyWeak(&location);
}

void sub_1C4DA0004(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_1C4DA0020(uint64_t a1)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  char isCancelled = objc_msgSend_isCancelled(WeakRetained, v3, v4);

  if (isCancelled) {
    return;
  }
  id v8 = *(id *)(a1 + 32);
  id v9 = (unsigned char *)MEMORY[0x1E4F1A4E0];
  if (*MEMORY[0x1E4F1A4E0]
    && objc_msgSend_hasCalledQueryCursorUpdatedBlock(*(void **)(a1 + 40), v6, v7)
    && objc_msgSend_checkAndClearUnitTestOverrides_(*(void **)(a1 + 40), v6, @"FakePCSDecryptionFailure"))
  {
    uint64_t v10 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v6, *MEMORY[0x1E4F19DD8], 5004, 0, @"TEST PCS decrypt failure");

    id v8 = (id)v10;
  }
  if (objc_msgSend_CKIsNotFoundError(v8, v6, v7))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v13 = (void *)*MEMORY[0x1E4F1A500];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO)) {
      goto LABEL_28;
    }
    uint64_t v16 = v13;
    __int16 v17 = (objc_class *)objc_opt_class();
    NSStringFromClass(v17);
    uint64_t v18 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
    uint64_t v19 = *(void **)(a1 + 40);
    id v22 = objc_msgSend_ckShortDescription(v19, v20, v21);
    uint64_t v23 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138544386;
    uint64_t v51 = v18;
    __int16 v52 = 2048;
    uint64_t v53 = v19;
    __int16 v54 = 2114;
    int v55 = v22;
    __int16 v56 = 2112;
    uint64_t v57 = v23;
    __int16 v58 = 2112;
    id v59 = v8;
    _os_log_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_INFO, "Warn: Query <%{public}@: %p; %{public}@> could not find record %@: %@",
      buf,
      0x34u);

    goto LABEL_27;
  }
  if (v8)
  {
    uint64_t v24 = objc_msgSend_container(*(void **)(a1 + 56), v11, v12);
    objc_msgSend_clientSDKVersion(v24, v25, v26);
    int v27 = CKLinkCheck32f5805a68adfc1b65f94a0de69aa32177c7cd24();

    if (*v9)
    {
      id v30 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 56), v28, v29);
      id v32 = objc_msgSend_objectForKeyedSubscript_(v30, v31, @"LegacyErrorHandling");
      char v35 = objc_msgSend_BOOLValue(v32, v33, v34);

      if ((v35 & 1) == 0 && v27 == 1) {
        goto LABEL_23;
      }
    }
    else if (v27)
    {
      goto LABEL_23;
    }
    id v38 = objc_msgSend_error(*(void **)(a1 + 40), v28, v29);

    if (!v38)
    {
      id v39 = objc_msgSend__wrapError_format_(*(void **)(a1 + 40), v28, (uint64_t)v8, @"Encountered an error fetching records");
      objc_msgSend_setError_(*(void **)(a1 + 40), v40, (uint64_t)v39);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v36 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v37 = *(void (***)(void, void, void, void))(a1 + 48);
      *(_DWORD *)buf = 138412290;
      uint64_t v51 = v37;
      _os_log_debug_impl(&dword_1C4CFF000, v36, OS_LOG_TYPE_DEBUG, "The full record for %@ was fetched", buf, 0xCu);
    }
  }
LABEL_23:
  id v41 = objc_msgSend_recordFetchCompletionBlock(*(void **)(a1 + 40), v28, v29);

  if (v41)
  {
    id v42 = *(id *)(a1 + 64);
    uint64_t v16 = v42;
    if (v8)
    {

      uint64_t v16 = 0;
    }
    objc_msgSend_recordFetchCompletionBlock(*(void **)(a1 + 40), v43, v44);
    uint64_t v18 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
    ((void (**)(void, void, NSObject *, id))v18)[2](v18, *(void *)(a1 + 48), v16, v8);
LABEL_27:
  }
LABEL_28:
  if (!v8)
  {
    __int16 v45 = objc_msgSend_error(*(void **)(a1 + 40), v14, v15);

    if (!v45)
    {
      v48[0] = MEMORY[0x1E4F143A8];
      v48[1] = 3221225472;
      void v48[2] = sub_1C4DA0430;
      v48[3] = &unk_1E64F1D18;
      __int16 v46 = *(void **)(a1 + 56);
      id v49 = *(id *)(a1 + 64);
      objc_msgSend_updateCloudKitMetrics_(v46, v47, (uint64_t)v48);
    }
  }
}

void sub_1C4DA0430(uint64_t a1, void *a2)
{
  id v21 = a2;
  uint64_t v5 = objc_msgSend_recordsDownloaded(v21, v3, v4);
  objc_msgSend_setRecordsDownloaded_(v21, v6, v5 + 1);
  uint64_t v9 = objc_msgSend_assetCount(*(void **)(a1 + 32), v7, v8);
  uint64_t v12 = objc_msgSend_assetsDownloaded(v21, v10, v11);
  objc_msgSend_setAssetsDownloaded_(v21, v13, v12 + v9);
  uint64_t v16 = objc_msgSend_assetDiskSize(*(void **)(a1 + 32), v14, v15);
  uint64_t v19 = objc_msgSend_assetsDownloadedFileSize(v21, v17, v18);
  objc_msgSend_setAssetsDownloadedFileSize_(v21, v20, v19 + v16);
}

void sub_1C4DA04C4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_perRequestCallbackGroup(*(void **)(a1 + 32), a2, a3);
  dispatch_group_leave(v4);

  uint64_t v7 = *(void **)(a1 + 40);
  if (v7)
  {
    uint64_t v8 = objc_msgSend_fetchRecordsGroup(v7, v5, v6);
    dispatch_group_leave(v8);
  }
}

void sub_1C4DA0A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location,id a29)
{
  objc_destroyWeak(&location);
  objc_destroyWeak(&a29);
  objc_destroyWeak((id *)(v29 - 128));
  _Unwind_Resume(a1);
}

void sub_1C4DA0AF0(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  uint64_t v8 = objc_msgSend_shouldFetchAssetContent(v5, v6, v7);
  if (v8)
  {
    uint64_t v11 = (void *)v8;
    uint64_t v12 = objc_msgSend_shouldFetchAssetContent(v5, v9, v10);
    int v15 = objc_msgSend_BOOLValue(v12, v13, v14);

    if (v15) {
      objc_msgSend_addObject_(*(void **)(a1 + 32), v16, (uint64_t)v17);
    }
  }
}

void sub_1C4DA0B94(uint64_t a1)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = objc_loadWeakRetained((id *)(a1 + 48));
  id v4 = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = (dispatch_block_t *)MEMORY[0x1E4F1A548];
  uint64_t v6 = (void *)*MEMORY[0x1E4F1A548];
  uint64_t v7 = (void *)MEMORY[0x1E4F1A550];
  if (WeakRetained)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v6);
    }
    uint64_t v8 = (os_log_t *)MEMORY[0x1E4F1A500];
    uint64_t v9 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      log = v9;
      uint64_t v43 = (objc_class *)objc_opt_class();
      uint64_t v61 = NSStringFromClass(v43);
      uint64_t v60 = objc_msgSend_ckShortDescription(v3, v44, v45);
      uint64_t v48 = objc_msgSend_operationID(WeakRetained, v46, v47);
      objc_msgSend_error(v3, v49, v50);
      *(_DWORD *)buf = 138544386;
      uint64_t v72 = v61;
      __int16 v73 = 2048;
      id v74 = v3;
      __int16 v75 = 2114;
      uint64_t v76 = v60;
      __int16 v77 = 2114;
      id v78 = v48;
      v80 = __int16 v79 = 2112;
      uint64_t v51 = (void *)v80;
      _os_log_debug_impl(&dword_1C4CFF000, log, OS_LOG_TYPE_DEBUG, "Query request <%{public}@: %p; %{public}@> for operation %{public}@ finished with error %@",
        buf,
        0x34u);
    }
    uint64_t v12 = objc_msgSend_numRequestsSent(WeakRetained, v10, v11);
    objc_msgSend_setNumRequestsSent_(WeakRetained, v13, v12 + 1);
    uint64_t v18 = objc_msgSend_error(v3, v14, v15);
    if (v18
      || !objc_msgSend_isExecuting(WeakRetained, v16, v17)
      || (objc_msgSend_isCancelled(WeakRetained, v19, v20) & 1) != 0
      || !objc_msgSend_fetchAllResults(WeakRetained, v21, v22))
    {
    }
    else
    {
      uint64_t v25 = objc_msgSend_resultsCursor(v3, v23, v24);
      if (v25)
      {
        id v28 = (void *)v25;
        char v29 = objc_msgSend_numRequestsSent(WeakRetained, v26, v27);

        if (v29)
        {
          if (*v7 != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], *v5);
          }
          os_log_t v30 = *v8;
          if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
          {
            __int16 v56 = v30;
            id v59 = objc_msgSend_resultsCursor(v3, v57, v58);
            *(_DWORD *)buf = 138412290;
            uint64_t v72 = v59;
            _os_log_debug_impl(&dword_1C4CFF000, v56, OS_LOG_TYPE_DEBUG, "We're not done here. Sending another query with cursor %@", buf, 0xCu);
          }
          uint64_t v33 = objc_msgSend_resultsCursor(v3, v31, v32);
          objc_msgSend__sendQueryRequestWithCursor_previousRequestSchedulerInfo_(WeakRetained, v34, (uint64_t)v33, v4);

          char v35 = *(NSObject **)(a1 + 32);
          id v38 = objc_msgSend_callbackQueue(WeakRetained, v36, v37);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = sub_1C4DA1038;
          block[3] = &unk_1E64F1D90;
          void block[4] = WeakRetained;
          id v69 = v4;
          char v70 = *(unsigned char *)(a1 + 64);
          dispatch_group_notify(v35, v38, block);

          id v39 = v69;
          goto LABEL_19;
        }
      }
    }
    uint64_t v40 = *(NSObject **)(a1 + 32);
    id v41 = objc_msgSend_callbackQueue(WeakRetained, v26, v27);
    v63[0] = MEMORY[0x1E4F143A8];
    v63[1] = 3221225472;
    v63[2] = sub_1C4DA10E0;
    v63[3] = &unk_1E64F2248;
    id v64 = v4;
    id v65 = v3;
    id v66 = WeakRetained;
    char v67 = *(unsigned char *)(a1 + 64);
    dispatch_group_notify(v40, v41, v63);

    id v39 = v64;
LABEL_19:

    goto LABEL_24;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v6);
  }
  id v42 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    __int16 v52 = v42;
    int v55 = objc_msgSend_requestUUID(v3, v53, v54);
    *(_DWORD *)buf = 138543362;
    uint64_t v72 = v55;
    _os_log_debug_impl(&dword_1C4CFF000, v52, OS_LOG_TYPE_DEBUG, "Owning operation for request %{public}@ no longer around. Bailing.", buf, 0xCu);
  }
LABEL_24:
}

void sub_1C4DA1038(uint64_t a1, const char *a2)
{
  objc_msgSend__handleQueryRequestFinishedWithSchedulerInfo_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
  if (*(unsigned char *)(a1 + 48))
  {
    id v5 = objc_msgSend_error(*(void **)(a1 + 32), v3, v4);

    if (v5) {
      objc_msgSend_cancelAndDisablePerRequestCallbackBlocks(*(void **)(a1 + 40), v6, v7);
    }
    objc_msgSend_resumeCallbackQueue(*(void **)(a1 + 40), v6, v7);
  }
  objc_msgSend_disablePerRequestCallbackBlocks(*(void **)(a1 + 40), v3, v4);
  uint64_t v10 = *(void **)(a1 + 32);
  if (v10)
  {
    uint64_t v11 = objc_msgSend_fetchRecordsGroup(v10, v8, v9);
    dispatch_group_leave(v11);
  }
}

void sub_1C4DA10E0(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4DA125C;
  block[3] = &unk_1E64F0120;
  id v19 = *(id *)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  id v20 = v2;
  uint64_t v21 = v3;
  dispatch_block_t v4 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  objc_msgSend_addPerRequestCallbackBlock_(*(void **)(a1 + 32), v5, (uint64_t)v4);
  uint64_t v8 = objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v6, v7);
  dispatch_async(v8, v4);

  uint64_t v11 = objc_msgSend_perRequestCallbackQueue(*(void **)(a1 + 32), v9, v10);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = sub_1C4DA1450;
  v17[3] = &unk_1E64F05C8;
  void v17[4] = *(void *)(a1 + 48);
  dispatch_async(v11, v17);

  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v14 = objc_msgSend_error(*(void **)(a1 + 48), v12, v13);

    if (v14) {
      objc_msgSend_cancelAndDisablePerRequestCallbackBlocks(*(void **)(a1 + 32), v15, v16);
    }
    objc_msgSend_resumeCallbackQueue(*(void **)(a1 + 32), v15, v16);
  }
  objc_msgSend_disablePerRequestCallbackBlocks(*(void **)(a1 + 32), v12, v13);
}

void sub_1C4DA125C(void **a1, const char *a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if ((objc_msgSend_isCancelled(a1[4], a2, a3) & 1) == 0)
  {
    uint64_t v6 = objc_msgSend_error(a1[5], v4, v5);

    if (v6)
    {
      uint64_t v9 = objc_msgSend_error(a1[5], v7, v8);
      objc_msgSend_setError_(a1[6], v10, (uint64_t)v9);

      char v29 = objc_msgSend_perRequestGroup(a1[4], v11, v12);
      dispatch_group_leave(v29);
    }
    else
    {
      objc_msgSend__handleQueryRequestFinishedWithSchedulerInfo_(a1[6], v7, (uint64_t)a1[4]);
      if (objc_msgSend_fetchAllResults(a1[6], v13, v14))
      {
        uint64_t v17 = objc_msgSend_resultsCursor(a1[5], v15, v16);

        if (v17)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          uint64_t v18 = (void *)*MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
          {
            uint64_t v24 = a1[5];
            uint64_t v25 = v18;
            id v28 = objc_msgSend_resultsCursor(v24, v26, v27);
            *(_DWORD *)buf = 138412290;
            id v31 = v28;
            _os_log_debug_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_DEBUG, "We're not done here. Sending another query with cursor %@", buf, 0xCu);
          }
          uint64_t v21 = a1[6];
          uint64_t v22 = objc_msgSend_resultsCursor(a1[5], v19, v20);
          objc_msgSend__sendQueryRequestWithCursor_previousRequestSchedulerInfo_(v21, v23, (uint64_t)v22, a1[4]);
        }
      }
    }
  }
}

void sub_1C4DA1450(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    dispatch_block_t v4 = objc_msgSend_fetchRecordsGroup(v3, a2, a3);
    dispatch_group_leave(v4);
  }
}

void sub_1C4DA14A4(uint64_t a1, void *a2)
{
  uint64_t v3 = (id *)(a1 + 32);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v5 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend__handleRecordResponses_perRequestSchedulerInfo_(WeakRetained, v6, (uint64_t)v4, v5);
}

void sub_1C4DA1A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4DA1A3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_setRecordFetcher_(*(void **)(a1 + 32), v4, (uint64_t)v3);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = sub_1C4DA1B10;
  v9[3] = &unk_1E64F22C0;
  objc_copyWeak(&v10, (id *)(a1 + 40));
  uint64_t v7 = objc_msgSend_recordFetcher(*(void **)(a1 + 32), v5, v6);
  objc_msgSend_setFetchAggregatorCompletionBlock_(v7, v8, (uint64_t)v9);

  objc_destroyWeak(&v10);
}

void sub_1C4DA1AFC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DA1B10(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v5 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    int v11 = 134217984;
    id v12 = WeakRetained;
    _os_log_debug_impl(&dword_1C4CFF000, v5, OS_LOG_TYPE_DEBUG, "Record fetcher finished for query %p", (uint8_t *)&v11, 0xCu);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else if (!v3)
  {
    goto LABEL_7;
  }
  uint64_t v8 = objc_msgSend_error(WeakRetained, v6, v7);

  if (!v8) {
    objc_msgSend_setError_(WeakRetained, v6, (uint64_t)v3);
  }
LABEL_7:
  uint64_t v9 = objc_msgSend_error(WeakRetained, v6, v7);
  objc_msgSend_finishWithError_(WeakRetained, v10, (uint64_t)v9);
}

void sub_1C4DA1C58(uint64_t a1)
{
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_debug_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_DEBUG, "Waiting for all record fetches to finish...", v13, 2u);
  }
  id v5 = objc_msgSend_requestInfos(*(void **)(a1 + 32), v3, v4);
  objc_msgSend_removeAllObjects(v5, v6, v7);

  id v10 = objc_msgSend_recordFetcher(*(void **)(a1 + 32), v8, v9);
  objc_msgSend_finishIfAppropriate(v10, v11, v12);
}

void sub_1C4DA2A4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_setUseCachedEtags_(v3, v4, 0);
  objc_msgSend_setSkipDecryption_(v3, v5, 1);
  objc_initWeak(&location, *(id *)(a1 + 32));
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = sub_1C4DA2B54;
  v9[3] = &unk_1E64F1AD8;
  objc_copyWeak(&v10, &location);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v6, (uint64_t)v9);
  (*(void (**)(void, id, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v3, v7, v8);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void sub_1C4DA2B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4DA2B54(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend_performCallbacksForItemWithID_withItem_error_(WeakRetained, v10, (uint64_t)v8, v9, v7);
}

uint64_t sub_1C4DA31C8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  unint64_t v8 = objc_msgSend_size(v4, v6, v7);
  if (v8 <= objc_msgSend_size(v5, v9, v10))
  {
    unint64_t v14 = objc_msgSend_size(v4, v11, v12);
    uint64_t v13 = v14 < objc_msgSend_size(v5, v15, v16);
  }
  else
  {
    uint64_t v13 = -1;
  }

  return v13;
}

uint64_t sub_1C4DA324C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  unint64_t v8 = objc_msgSend_count(v4, v6, v7);
  if (v8 <= objc_msgSend_count(v5, v9, v10))
  {
    unint64_t v14 = objc_msgSend_count(v4, v11, v12);
    uint64_t v13 = v14 < objc_msgSend_count(v5, v15, v16);
  }
  else
  {
    uint64_t v13 = -1;
  }

  return v13;
}

void sub_1C4DA33B0()
{
  uint64_t v0 = (void *)qword_1EBBCDCE8;
  qword_1EBBCDCE8 = (uint64_t)&unk_1F20ABA38;
}

uint64_t sub_1C4DA3680(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          id v17 = objc_alloc_init(MEMORY[0x1E4F19F30]);
          objc_storeStrong((id *)(a1 + 16), v17);
          if PBReaderPlaceMark() && (CKDPRecordZoneIdentifierReadFrom())
          {
            PBReaderRecallMark();

            continue;
          }

          return 0;
        case 2u:
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_40;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              uint64_t v21 = 0;
              goto LABEL_42;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_40:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v21 = 0;
          }
LABEL_42:
          BOOL v33 = v21 != 0;
          uint64_t v34 = 24;
          goto LABEL_47;
        case 3u:
          uint64_t v25 = PBReaderReadData();
          uint64_t v26 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v25;

          continue;
        case 4u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v30 = *v3;
        unint64_t v31 = *(void *)(a2 + v30);
        if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
        *(void *)(a2 + v30) = v31 + 1;
        v29 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0) {
          goto LABEL_44;
        }
        v27 += 7;
        BOOL v14 = v28++ >= 9;
        if (v14)
        {
          uint64_t v29 = 0;
          goto LABEL_46;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v29 = 0;
      }
LABEL_46:
      BOOL v33 = v29 != 0;
      uint64_t v34 = 25;
LABEL_47:
      *(unsigned char *)(a1 + v34) = v33;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4DA4408(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DA45CC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v8 = a3;
  if (v8)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    unsigned int v9 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void **)(a1 + 32);
      char v19 = v9;
      uint64_t v22 = objc_msgSend_zoneID(v18, v20, v21);
      *(_DWORD *)buf = 138412546;
      uint64_t v25 = v22;
      __int16 v26 = 2112;
      id v27 = v8;
      _os_log_debug_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_DEBUG, "Error fetching PCS data from the database for %@: %@", buf, 0x16u);
    }
    unint64_t v12 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v10, v11);
    dispatch_group_leave(v12);
  }
  else
  {
    char v13 = objc_msgSend_zoneID(*(void **)(a1 + 32), v6, v7);
    uint64_t v16 = objc_msgSend_databaseScope(*(void **)(a1 + 32), v14, v15);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = sub_1C4DA479C;
    v23[3] = &unk_1E64F2338;
    void v23[4] = *(void *)(a1 + 32);
    objc_msgSend_fetchPCSDataForZoneWithID_databaseScope_withCompletionHandler_(v5, v17, (uint64_t)v13, v16, v23);
  }
}

void sub_1C4DA479C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  unsigned int v9 = v6;
  if (v5)
  {
    if ((objc_msgSend_fetchOptions(*(void **)(a1 + 32), v7, v8) & 8) == 0
      || (objc_msgSend_zoneishPCSData(v5, v10, v11),
          unint64_t v12 = objc_claimAutoreleasedReturnValue(),
          v12,
          v12))
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      char v13 = (void *)*MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
      {
        id v41 = *(void **)(a1 + 32);
        id v42 = v13;
        uint64_t v45 = objc_msgSend_zoneID(v41, v43, v44);
        *(_DWORD *)__int16 v46 = 138412290;
        *(void *)&void v46[4] = v45;
        _os_log_debug_impl(&dword_1C4CFF000, v42, OS_LOG_TYPE_DEBUG, "PCS data was fetched from the database for zone %@", v46, 0xCu);
      }
      objc_msgSend_setWasFetchedFromCache_(*(void **)(a1 + 32), v14, 1);
      objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), v15, (uint64_t)v5, 0);
      goto LABEL_24;
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v36 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v37 = *(void **)(a1 + 32);
      uint64_t v21 = v36;
      char v24 = objc_msgSend_zoneID(v37, v38, v39);
      *(_DWORD *)__int16 v46 = 138412290;
      *(void *)&void v46[4] = v24;
      uint64_t v25 = "Zone PCS data was fetched from the database but it didn't have the requested zoneish PCS. Fetching PCS data "
            "from the server for zone %@";
      __int16 v26 = v21;
      uint32_t v27 = 12;
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v18 = (void *)*MEMORY[0x1E4F1A548];
    if (v6)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v18);
      }
      char v19 = (void *)*MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
      {
        unsigned int v20 = *(void **)(a1 + 32);
        uint64_t v21 = v19;
        char v24 = objc_msgSend_zoneID(v20, v22, v23);
        *(_DWORD *)__int16 v46 = 138412546;
        *(void *)&void v46[4] = v24;
        *(_WORD *)&v46[12] = 2112;
        *(void *)&v46[14] = v9;
        uint64_t v25 = "Error fetching PCS data from the database for %@: %@";
        __int16 v26 = v21;
        uint32_t v27 = 22;
LABEL_22:
        _os_log_debug_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_DEBUG, v25, v46, v27);

        goto LABEL_23;
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v18);
      }
      uint64_t v28 = (void *)*MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = *(void **)(a1 + 32);
        uint64_t v21 = v28;
        char v32 = objc_msgSend_zoneID(v29, v30, v31);
        objc_msgSend_databaseScope(*(void **)(a1 + 32), v33, v34);
        char v35 = CKDatabaseScopeString();
        *(_DWORD *)__int16 v46 = 138412546;
        *(void *)&void v46[4] = v32;
        *(_WORD *)&v46[12] = 2112;
        *(void *)&v46[14] = v35;
        _os_log_debug_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_DEBUG, "No PCS data was found in the database for zone %@ with scope %@", v46, 0x16u);

LABEL_23:
      }
    }
  }
LABEL_24:
  uint64_t v40 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v16, v17, *(_OWORD *)v46, *(void *)&v46[16], v47);
  dispatch_group_leave(v40);
}

void sub_1C4DA4E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4DA4EB4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v8 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = v8;
    uint64_t v20 = objc_msgSend_zoneID(WeakRetained, v18, v19);
    uint64_t v21 = (void *)v20;
    uint64_t v22 = @" with error: ";
    *(_DWORD *)char v24 = 138413058;
    uint64_t v23 = &stru_1F2044F30;
    *(void *)&void v24[4] = v16;
    *(_WORD *)&v24[12] = 2112;
    if (!v6) {
      uint64_t v22 = &stru_1F2044F30;
    }
    *(void *)&v24[14] = v20;
    if (v6) {
      uint64_t v23 = v6;
    }
    *(_WORD *)&v24[22] = 2114;
    uint64_t v25 = v22;
    __int16 v26 = 2112;
    uint32_t v27 = v23;
    _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "Fetched PCS for share %@ in order to decrypt zone %@%{public}@%@", v24, 0x2Au);
  }
  if (objc_msgSend_pcs(v5, v9, v10, *(_OWORD *)v24, *(void *)&v24[16]))
  {
    char v13 = objc_msgSend_zonePCSData(WeakRetained, v11, v12);
    objc_msgSend_setSharePCSData_(v13, v14, (uint64_t)v5);
  }
  else if (v6)
  {
    objc_msgSend_setDependentPCSFetchError_(WeakRetained, v11, (uint64_t)v6);
  }
  uint64_t v15 = objc_msgSend_stateTransitionGroup(WeakRetained, v11, v12);
  dispatch_group_leave(v15);
}

void sub_1C4DA524C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t sub_1C4DA526C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4DA527C(uint64_t a1)
{
}

void sub_1C4DA5284(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  objc_initWeak(&location, v3);
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2020000000;
  char v21 = 0;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  id v16[2] = sub_1C4DA5528;
  v16[3] = &unk_1E64F2388;
  uint64_t v18 = *(void *)(a1 + 48);
  id v17 = *(id *)(a1 + 32);
  uint64_t v19 = v20;
  objc_msgSend_setSaveCompletionBlock_(v3, v4, (uint64_t)v16);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = sub_1C4DA5740;
  v10[3] = &unk_1E64F23B0;
  uint64_t v13 = *(void *)(a1 + 48);
  objc_copyWeak(&v15, &location);
  BOOL v14 = v20;
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 40);
  objc_msgSend_setCompletionBlock_(v3, v5, (uint64_t)v10);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v6 = (id)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    unsigned int v9 = objc_msgSend_zoneID(*(void **)(a1 + 32), v7, v8);
    *(_DWORD *)buf = 138412290;
    char v24 = v9;
    _os_log_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_INFO, "Updating zone %@ with new PCS object", buf, 0xCu);
  }
  objc_destroyWeak(&v15);

  _Block_object_dispose(v20, 8);
  objc_destroyWeak(&location);
}

void sub_1C4DA54E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  objc_destroyWeak(v26);
  _Block_object_dispose(&a26, 8);
  objc_destroyWeak((id *)(v27 - 104));
  _Unwind_Resume(a1);
}

void sub_1C4DA5528(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v9 = a4;
  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a4);
  }
  else
  {
    uint64_t v10 = objc_msgSend_zoneID(*(void **)(a1 + 32), v7, v8);
    int isEqual = objc_msgSend_isEqual_(v6, v11, (uint64_t)v10);

    uint64_t v13 = (void *)*MEMORY[0x1E4F1A548];
    if (isEqual)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v13);
      }
      BOOL v14 = (void *)*MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v16 = *(void **)(a1 + 32);
        id v17 = v14;
        uint64_t v20 = objc_msgSend_zoneID(v16, v18, v19);
        int v26 = 138412290;
        id v27 = v20;
        _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "Successfully saved PCS on zone: %@", (uint8_t *)&v26, 0xCu);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v13);
      }
      id v15 = (void *)*MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_ERROR))
      {
        char v21 = *(void **)(a1 + 32);
        uint64_t v22 = v15;
        uint64_t v25 = objc_msgSend_zoneID(v21, v23, v24);
        int v26 = 138412546;
        id v27 = v6;
        __int16 v28 = 2112;
        uint64_t v29 = v25;
        _os_log_error_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_ERROR, "Saved zone ID isn't what we expected: %@ (expected %@)", (uint8_t *)&v26, 0x16u);
      }
    }
  }
}

uint64_t sub_1C4DA5740(uint64_t a1, const char *a2, uint64_t a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    uint64_t v7 = objc_msgSend_error(WeakRetained, v5, v6);
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)
    && !*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    uint64_t v10 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v11 = *MEMORY[0x1E4F19DD8];
    id v12 = objc_msgSend_zoneID(*(void **)(a1 + 32), a2, a3);
    uint64_t v14 = objc_msgSend_errorWithDomain_code_format_(v10, v13, v11, 5004, @"Couldn't save zone with updated PCS data to the server for zone %@", v12);
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v18 = *(uint64_t (**)(void))(result + 16);
    return v18();
  }
  return result;
}

void sub_1C4DA60AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4DA60D4(void **a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v4 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
    {
      id v5 = a1[4];
      uint64_t v6 = v4;
      id v9 = objc_msgSend_zoneID(v5, v7, v8);
      *(_DWORD *)buf = 138543618;
      int v26 = v9;
      __int16 v27 = 2114;
      id v28 = v3;
      _os_log_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_INFO, "Failed to save new PCS object to zone %{public}@. Error: %{public}@", buf, 0x16u);
    }
    (*((void (**)(void))a1[5] + 2))();
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained(a1 + 6);
    uint64_t v13 = objc_msgSend_container(WeakRetained, v11, v12);
    uint64_t v16 = objc_msgSend_pcsManager(v13, v14, v15);
    uint64_t v19 = objc_msgSend_protectionData(a1[4], v17, v18);
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = sub_1C4DA6328;
    v21[3] = &unk_1E64F2400;
    id v22 = a1[4];
    objc_copyWeak(&v24, a1 + 6);
    id v23 = a1[5];
    objc_msgSend_createSharePCSFromData_ofType_withService_completionHandler_(v16, v20, (uint64_t)v19, 3, 0, v21);

    objc_destroyWeak(&v24);
  }
}

void sub_1C4DA630C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DA6328(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v7 = v5;
  uint64_t v8 = (void *)MEMORY[0x1E4F1A550];
  id v9 = (os_log_t *)MEMORY[0x1E4F1A528];
  if (!a2 || v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v41 = *v9;
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      __int16 v52 = *(void **)(a1 + 32);
      uint64_t v53 = v41;
      objc_msgSend_zoneID(v52, v54, v55);
      __int16 v56 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      id v59 = v56;
      __int16 v60 = 2112;
      uint64_t v61 = v7;
      _os_log_error_impl(&dword_1C4CFF000, v53, OS_LOG_TYPE_ERROR, "Couldn't decode PCS data for zone %{public}@. Error: %@", buf, 0x16u);
    }
    uint64_t v14 = v7;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = objc_msgSend_dataWithZone_(CKDZonePCSData, v6, *(void *)(a1 + 32));
    objc_msgSend_setPcs_(v10, v11, a2);
    objc_msgSend_zoneishProtectionData(*(void **)(a1 + 32), v12, v13);
    uint64_t v14 = (__CFString *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
      uint64_t v18 = objc_msgSend_container(WeakRetained, v16, v17);
      char v21 = objc_msgSend_pcsManager(v18, v19, v20);
      objc_msgSend_zoneishProtectionData(*(void **)(a1 + 32), v22, v23);
      uint64_t v25 = v24 = v9;
      uint64_t v28 = objc_msgSend_pcs(v10, v26, v27);
      id v57 = 0;
      uint64_t v30 = (__CFString *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v21, v29, (uint64_t)v25, 1, v28, &v57);
      uint64_t v14 = (__CFString *)v57;

      id v9 = v24;
      uint64_t v8 = (void *)MEMORY[0x1E4F1A550];

      if (v14)
      {
        if (*v8 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        char v32 = *v9;
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v59 = v14;
          _os_log_error_impl(&dword_1C4CFF000, v32, OS_LOG_TYPE_ERROR, "Couldn't decode zoneishPCS data: %@", buf, 0xCu);
        }
      }
      objc_msgSend_setZoneishPCS_(v10, v31, (uint64_t)v30);
      if (*v8 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      os_log_t v33 = *v9;
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v34 = v33;
        uint64_t v37 = objc_msgSend_zoneishPublicKeyID(v10, v35, v36);
        objc_msgSend_CKLowercaseHexStringWithoutSpaces(v37, v38, v39);
        uint64_t v40 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        id v59 = v30;
        __int16 v60 = 2114;
        uint64_t v61 = v40;
        _os_log_impl(&dword_1C4CFF000, v34, OS_LOG_TYPE_INFO, "Saved zoneishPCS is %@. Key ID is %{public}@", buf, 0x16u);
      }
      if (v30) {
        CFRelease(v30);
      }
    }
  }
  if (*v8 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  os_log_t v42 = *v9;
  if (os_log_type_enabled(*v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v43 = *(void **)(a1 + 32);
    uint64_t v44 = v42;
    uint64_t v47 = objc_msgSend_zoneID(v43, v45, v46);
    uint64_t v48 = (void *)v47;
    id v49 = @"NOT";
    if (!v14) {
      id v49 = @" ";
    }
    uint64_t v50 = @": ";
    *(_DWORD *)buf = 138413058;
    id v59 = (__CFString *)v47;
    __int16 v60 = 2114;
    uint64_t v61 = v49;
    uint64_t v51 = &stru_1F2044F30;
    if (v14) {
      uint64_t v51 = v14;
    }
    else {
      uint64_t v50 = &stru_1F2044F30;
    }
    __int16 v62 = 2114;
    uint64_t v63 = v50;
    __int16 v64 = 2112;
    id v65 = v51;
    _os_log_impl(&dword_1C4CFF000, v44, OS_LOG_TYPE_INFO, "Save of new PCS object to zone %@ was %{public}@successful%{public}@%@", buf, 0x2Au);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1C4DA6870(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v12 = objc_msgSend_container(*(void **)(a1 + 32), v10, v11);
  uint64_t v15 = objc_msgSend_deviceContext(v12, v13, v14);
  uint64_t v18 = objc_msgSend_testDeviceReference(v15, v16, v17);
  if (v18)
  {
    char v21 = (void *)v18;
    id v22 = objc_msgSend_zoneID(*(void **)(a1 + 32), v19, v20);
    uint64_t v25 = objc_msgSend_zoneName(v22, v23, v24);
    int isEqualToString = objc_msgSend_isEqualToString_(v25, v26, @"NoZonePCSOnServer");

    if (isEqualToString) {
      objc_msgSend_setProtectionData_(v7, v28, 0);
    }
  }
  else
  {
  }
  uint64_t v30 = objc_msgSend_protectionData(v7, v28, v29);

  if (v30)
  {
    if (CKIsPCSError()) {
      id v34 = v9;
    }
    else {
      id v34 = 0;
    }
    uint64_t v48 = objc_msgSend_dataWithZone_(CKDZonePCSData, v33, (uint64_t)v7);
    objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), v49, (uint64_t)v48, v34);
  }
  else
  {
    char v35 = objc_msgSend_zoneID(v7, v31, v32);
    int isDefaultRecordZoneID = objc_msgSend_isDefaultRecordZoneID(v35, v36, v37);

    if (isDefaultRecordZoneID)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v40 = *MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1C4CFF000, v40, OS_LOG_TYPE_DEBUG, "Found a default zone with NULL PCS data. Creating new PCS data and saving it", buf, 2u);
      }
      uint64_t v43 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v41, v42);
      dispatch_group_enter(v43);

      uint64_t v44 = *(void **)(a1 + 32);
      v74[0] = MEMORY[0x1E4F143A8];
      v74[1] = 3221225472;
      v74[2] = sub_1C4DA6D40;
      v74[3] = &unk_1E64F2338;
      unsigned char v74[4] = v44;
      objc_msgSend__saveNewPCSOnZone_completion_(v44, v45, (uint64_t)v7, v74);
      id v34 = 0;
    }
    else
    {
      if (v9)
      {
        id v50 = v9;
      }
      else
      {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v39, *MEMORY[0x1E4F19DD8], 5001, @"Couldn't fetch zone PCS for %@ from the server", v8);
        id v50 = (id)objc_claimAutoreleasedReturnValue();
      }
      id v34 = v50;
      uint64_t v51 = (void *)MEMORY[0x1E4F1A550];
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      __int16 v52 = (os_log_t *)MEMORY[0x1E4F1A528];
      uint64_t v53 = (void *)*MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
      {
        char v68 = *(void **)(a1 + 32);
        id v69 = v53;
        uint64_t v72 = objc_msgSend_zoneID(v68, v70, v71);
        *(_DWORD *)buf = 138412546;
        uint64_t v76 = v72;
        __int16 v77 = 2112;
        id v78 = v34;
        _os_log_debug_impl(&dword_1C4CFF000, v69, OS_LOG_TYPE_DEBUG, "Error fetching PCS data for zone %@ from the server: %@", buf, 0x16u);
      }
      if (objc_msgSend_isSystemRecordZoneID(v8, v54, v55)
        && objc_msgSend_CKIsNotFoundError(v34, v56, v57))
      {
        if (*v51 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v58 = *v52;
        if (os_log_type_enabled(*v52, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_1C4CFF000, v58, OS_LOG_TYPE_DEBUG, "systemZone was not found. Creating systemZone and saving it", buf, 2u);
        }
        uint64_t v61 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v59, v60);
        dispatch_group_enter(v61);

        __int16 v62 = *(void **)(a1 + 32);
        id v65 = objc_msgSend_systemRecordZone(MEMORY[0x1E4F1A310], v63, v64);
        v73[0] = MEMORY[0x1E4F143A8];
        v73[1] = 3221225472;
        v73[2] = sub_1C4DA6DA0;
        v73[3] = &unk_1E64F2338;
        v73[4] = *(void *)(a1 + 32);
        objc_msgSend__saveNewPCSOnZone_completion_(v62, v66, (uint64_t)v65, v73);
      }
      else
      {
        objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), v56, 0, v34);
      }
    }
    uint64_t v48 = 0;
  }
  char v67 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v46, v47);
  dispatch_group_leave(v67);
}

void sub_1C4DA6D40(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3);
  uint64_t v6 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v4, v5);
  dispatch_group_leave(v6);
}

void sub_1C4DA6DA0(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend__handlePCSDataFetched_withError_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3);
  uint64_t v6 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v4, v5);
  dispatch_group_leave(v6);
}

void sub_1C4DA73D8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  objc_msgSend_noteOperationDidFinishWaitingOnPCS(v5, v8, v9);
  objc_msgSend__handleDecryptedZonePCSData_withError_(*(void **)(a1 + 32), v10, (uint64_t)v7, v6);

  if (!v6 && objc_msgSend_wasFetchedFromCache(*(void **)(a1 + 32), v11, v12))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v13 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void **)(a1 + 32);
      uint64_t v17 = v13;
      uint64_t v20 = objc_msgSend_zoneID(v16, v18, v19);
      int v22 = 138543362;
      uint64_t v23 = v20;
      _os_log_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_INFO, "Zone PCS was fetched from cache for %{public}@, checking key rolling requirements", (uint8_t *)&v22, 0xCu);
    }
    objc_msgSend__checkAndUpdateZonePCSIfNeeded(*(void **)(a1 + 32), v14, v15);
  }
  char v21 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v11, v12);
  dispatch_group_leave(v21);
}

void sub_1C4DA8B70(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v4 = objc_msgSend_keyRollsSkippedBySizeCheck(v6, v2, v3);
  objc_msgSend_setKeyRollsSkippedBySizeCheck_(v6, v5, v4 + 1);
}

void sub_1C4DA8E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4DA8E94(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3)
  {
    id v7 = objc_msgSend_domain(v3, v4, v5);
    if (objc_msgSend_isEqualToString_(v7, v8, *MEMORY[0x1E4F19C40]))
    {
      uint64_t v11 = objc_msgSend_code(v3, v9, v10);

      if (v11 == 14) {
        goto LABEL_11;
      }
    }
    else
    {
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v12 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_ERROR))
    {
      int v22 = v12;
      uint64_t v25 = objc_msgSend_zoneID(WeakRetained, v23, v24);
      *(_DWORD *)buf = 138412546;
      uint64_t v27 = v25;
      __int16 v28 = 2112;
      id v29 = v3;
      _os_log_error_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_ERROR, "Error saving zoneish PCS to server for zone %@: %@", buf, 0x16u);
    }
    uint64_t v15 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v16 = *MEMORY[0x1E4F19DD8];
    uint64_t v17 = objc_msgSend_zoneID(WeakRetained, v13, v14);
    uint64_t v19 = objc_msgSend_errorWithDomain_code_format_(v15, v18, v16, 5001, @"Couldn't fetch PCS for zone %@: %@", v17, v3);
    objc_msgSend_setFetchError_(WeakRetained, v20, (uint64_t)v19);
  }
LABEL_11:
  char v21 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v4, v5);
  dispatch_group_leave(v21);
}

void sub_1C4DA9274(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4DA929C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  dispatch_group_leave(v3);
}

void sub_1C4DA92F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_msgSend_stateTransitionGroup(WeakRetained, v1, v2);
  dispatch_group_leave(v3);
}

uint64_t sub_1C4DA97F4(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_33;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_35:
        *(_DWORD *)(a1 + 16) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPAncestryEtagAncestorInformation);
        objc_msgSend_addAncestorInformation_((void *)a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || !sub_1C4DAA1FC((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4DAA1FC(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(MEMORY[0x1E4F19F30]);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordZoneIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadString();
    id v17 = *(id *)(a1 + 8);
    *(void *)(a1 + 8) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4DAAC18()
{
  uint64_t v0 = (void *)qword_1EBBCDCF8;
  qword_1EBBCDCF8 = (uint64_t)&unk_1F20ABA60;
}

BOOL sub_1C4DAAD8C(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
LABEL_22:
        char v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadData();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4DAB330()
{
  uint64_t v0 = [CKDPrivacyManager alloc];
  qword_1EBBCFBD0 = objc_msgSend_initInternal(v0, v1, v2);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4DAB514(uint64_t a1)
{
  dispatch_group_t v2 = dispatch_group_create();
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v4 = dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v5 = dispatch_queue_create("com.apple.cloudkit.privacyManager.resetQueue", v4);

  v41[0] = 0;
  v41[1] = v41;
  void v41[2] = 0x3032000000;
  v41[3] = sub_1C4DAB7EC;
  void v41[4] = sub_1C4DAB7FC;
  id v42 = 0;
  char v8 = objc_msgSend_currentProcess(CKDDaemonProcess, v6, v7);
  if ((objc_msgSend_isSystemInstalledBinary(v8, v9, v10) & 1) == 0)
  {

    goto LABEL_3;
  }
  char v13 = objc_msgSend_currentProcess(CKDDaemonProcess, v11, v12);
  uint64_t v16 = objc_msgSend_processType(v13, v14, v15);

  if (v16 == 2)
  {
LABEL_3:
    char v19 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v17, v18);
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 32);
    char v24 = objc_msgSend_currentProcess(CKDDaemonProcess, v22, v23);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v19, v25, v20, v21, @"CKDPrivacyManager.m", 65, @"Can't reset privacy settings with daemon type %@", v24);
  }
  int v26 = objc_msgSend_defaultContext(CKDLogicalDeviceContext, v17, v18);
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  v35[2] = sub_1C4DAB804;
  v35[3] = &unk_1E64F2478;
  id v27 = v26;
  id v36 = v27;
  __int16 v28 = v2;
  uint64_t v37 = v28;
  id v29 = v5;
  uint64_t v40 = v41;
  uint64_t v30 = *(void *)(a1 + 32);
  id v38 = v29;
  uint64_t v39 = v30;
  CKMuckingWithPersonas(v35);
  uint64_t v31 = CKGetGlobalQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4DABC14;
  block[3] = &unk_1E64F07E0;
  id v33 = *(id *)(a1 + 40);
  id v34 = v41;
  dispatch_group_notify(v28, v31, block);

  _Block_object_dispose(v41, 8);
}

void sub_1C4DAB7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DAB7EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4DAB7FC(uint64_t a1)
{
}

void sub_1C4DAB804(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_metadataCache(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_knownAppContainerAccountTuples(v4, v5, v6);

  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v8 = v7;
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v23, v27, 16);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v24;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v24 != v12) {
          objc_enumerationMutation(v8);
        }
        uint64_t v14 = *(void *)(*((void *)&v23 + 1) + 8 * v13);
        dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_1C4DAB9B8;
        block[3] = &unk_1E64F2478;
        uint64_t v22 = *(void *)(a1 + 64);
        uint64_t v15 = *(NSObject **)(a1 + 48);
        id v18 = *(id *)(a1 + 40);
        id v19 = *(id *)(a1 + 48);
        uint64_t v20 = v14;
        uint64_t v21 = *(void *)(a1 + 56);
        dispatch_async(v15, block);

        ++v13;
      }
      while (v11 != v13);
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v16, (uint64_t)&v23, v27, 16);
    }
    while (v11);
  }
}

void sub_1C4DAB9B8(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
  {
    dispatch_group_t v2 = *(NSObject **)(a1 + 32);
    dispatch_group_leave(v2);
  }
  else
  {
    dispatch_suspend(*(dispatch_object_t *)(a1 + 40));
    dispatch_queue_t v5 = objc_msgSend_appContainerTuple(*(void **)(a1 + 48), v3, v4);
    id v8 = objc_msgSend_personaID(v5, v6, v7);
    BOOL v9 = CKAdoptPersonaID(v8);

    if (v9)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v10 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        uint64_t v20 = v14;
        _os_log_debug_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_DEBUG, "Resetting user privacy settings for %@", buf, 0xCu);
      }
      uint64_t v12 = *(void *)(a1 + 48);
      uint64_t v11 = *(void **)(a1 + 56);
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      void v15[2] = sub_1C4DABBAC;
      void v15[3] = &unk_1E64F2450;
      uint64_t v18 = *(void *)(a1 + 64);
      id v16 = *(id *)(a1 + 40);
      id v17 = *(id *)(a1 + 32);
      objc_msgSend__resetPrivacySettingsForAppContainerAccountTuple_completionHandler_(v11, v13, v12, v15);
    }
  }
}

void sub_1C4DABBAC(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  id v4 = a2;
  dispatch_resume(*(dispatch_object_t *)(a1 + 32));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1C4DABC14(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
  return result;
}

void sub_1C4DABD14(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  dispatch_queue_t v5 = objc_msgSend_defaultContext(CKDLogicalDeviceContext, a2, a3);
  id v8 = objc_msgSend_sharedInternalUseContainers(CKDContainer, v6, v7);
  uint64_t v10 = objc_msgSend_containerWithAppContainerAccountTuple_deviceContext_sharedContainerTable_(CKDContainer, v9, v4, v5, v8);

  uint64_t v13 = objc_msgSend_defaultConvenienceOperationConfiguration(MEMORY[0x1E4F1A208], v11, v12);
  objc_msgSend_setQualityOfService_(v13, v14, 17);
  uint64_t v15 = objc_opt_new();
  objc_msgSend_setResolvedConfiguration_(v15, v16, (uint64_t)v13);
  id v17 = [CKDOperationInfoHolderOperation alloc];
  id v19 = objc_msgSend_initWithOperationInfo_container_(v17, v18, (uint64_t)v15, v10);
  uint64_t v20 = [CKDResetUserPrivacySettingsURLRequest alloc];
  uint64_t v22 = objc_msgSend_initWithOperation_(v20, v21, (uint64_t)v19);
  objc_msgSend_setRequest_(v19, v23, (uint64_t)v22);
  objc_initWeak(&location, v22);
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  v35[2] = sub_1C4DABF5C;
  v35[3] = &unk_1E64F24A0;
  objc_copyWeak(&v38, &location);
  int8x16_t v34 = *(int8x16_t *)(a1 + 32);
  id v24 = (id)v34.i64[0];
  int8x16_t v36 = vextq_s8(v34, v34, 8uLL);
  id v37 = *(id *)(a1 + 48);
  objc_msgSend_setCompletionBlock_(v22, v25, (uint64_t)v35);
  uint64_t v28 = objc_msgSend_operations(*(void **)(a1 + 40), v26, v27);
  objc_sync_enter(v28);
  uint64_t v31 = objc_msgSend_operations(*(void **)(a1 + 40), v29, v30);
  objc_msgSend_addObject_(v31, v32, (uint64_t)v19);

  objc_sync_exit(v28);
  objc_msgSend_performRequest_(v10, v33, (uint64_t)v22);

  objc_destroyWeak(&v38);
  objc_destroyWeak(&location);
}

void sub_1C4DABF2C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4DABF5C(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    dispatch_queue_t v5 = objc_msgSend_operations(*(void **)(a1 + 32), v2, v3);
    objc_sync_enter(v5);
    id v8 = objc_msgSend_operations(*(void **)(a1 + 32), v6, v7);
    uint64_t v11 = objc_msgSend_operation(WeakRetained, v9, v10);
    objc_msgSend_removeObject_(v8, v12, (uint64_t)v11);

    objc_sync_exit(v5);
  }
  uint64_t v15 = objc_msgSend_error(WeakRetained, v2, v3);
  if (v15)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v16 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      uint64_t v25 = v20;
      __int16 v26 = 2112;
      uint64_t v27 = v15;
      _os_log_error_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_ERROR, "Failed to reset user privacy settings for %@: %@", buf, 0x16u);
    }
  }
  id v17 = objc_msgSend_privacyManagerQueue(*(void **)(a1 + 32), v13, v14);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = sub_1C4DAC184;
  v21[3] = &unk_1E64F0790;
  id v18 = *(id *)(a1 + 48);
  id v22 = v15;
  id v23 = v18;
  id v19 = v15;
  dispatch_async(v17, v21);
}

void sub_1C4DAC168(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DAC184(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1C4DAC510(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DAC5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DAC600(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8);
  return result;
}

uint64_t sub_1C4DAC6B0(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 8) = *(unsigned char *)(result + 40);
  return result;
}

void sub_1C4DAC784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DAC79C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 9);
  return result;
}

uint64_t sub_1C4DAC84C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 9) = *(unsigned char *)(result + 40);
  return result;
}

void sub_1C4DAC99C(_Unwind_Exception *exception_object)
{
}

void sub_1C4DACC2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DACE14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DACEEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DACF84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DAD1CC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void **)(a1 + 32);
  dispatch_queue_t v5 = objc_msgSend_completionHandlersByItemID(*(void **)(a1 + 32), a2, a3);
  objc_sync_enter(v5);
  objc_msgSend_callbacksForItemWithID_(*v4, v6, *(void *)(a1 + 40));
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v14, v18, 16);
  if (v9)
  {
    uint64_t v10 = *(void *)v15;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v7);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v14 + 1) + 8 * v11) + 16))(*(void *)(*((void *)&v14 + 1) + 8 * v11));
        ++v11;
      }
      while (v9 != v11);
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v12, (uint64_t)&v14, v18, 16);
    }
    while (v9);
  }

  objc_msgSend_removeCallbacksForItemWithID_(*(void **)(a1 + 32), v13, *(void *)(a1 + 40), (void)v14);
  objc_sync_exit(v5);
}

void sub_1C4DAD310(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DAD3EC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void **)(a1 + 32);
  objc_msgSend_completionHandlersByItemID(*(void **)(a1 + 32), a2, a3);
  id obj = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(obj);
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id v7 = objc_msgSend_allItemIDs(*v4, v5, v6);
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v43, v48, 16);
  if (v10)
  {
    uint64_t v11 = *(void *)v44;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v44 != v11) {
          objc_enumerationMutation(v7);
        }
        uint64_t v13 = *(void *)(*((void *)&v43 + 1) + 8 * i);
        long long v14 = objc_msgSend_callbacksForItemWithID_(*(void **)(a1 + 32), v9, v13);
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        id v15 = v14;
        uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v39, v47, 16);
        if (v17)
        {
          uint64_t v18 = *(void *)v40;
          do
          {
            for (uint64_t j = 0; j != v17; ++j)
            {
              if (*(void *)v40 != v18) {
                objc_enumerationMutation(v15);
              }
              (*(void (**)(void))(*(void *)(*((void *)&v39 + 1) + 8 * j) + 16))();
            }
            uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v20, (uint64_t)&v39, v47, 16);
          }
          while (v17);
        }

        objc_msgSend_removeCallbacksForItemWithID_(*(void **)(a1 + 32), v21, v13);
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v9, (uint64_t)&v43, v48, 16);
    }
    while (v10);
  }

  objc_sync_exit(obj);
  id v24 = objc_msgSend_completionHandler(*(void **)(a1 + 32), v22, v23);

  if (v24)
  {
    objc_msgSend_highestQOS(*(void **)(a1 + 32), v25, v26);
    uint64_t v27 = CKGetGlobalQueue();
    uint64_t v30 = objc_msgSend_completionHandler(*(void **)(a1 + 32), v28, v29);
    dispatch_async(v27, v30);
  }
  objc_msgSend_setIsFinished_(*(void **)(a1 + 32), v25, 1);
  id v33 = objc_msgSend_domain(*(void **)(a1 + 40), v31, v32);
  if (objc_msgSend_isEqualToString_(v33, v34, *MEMORY[0x1E4F19C40])) {
    BOOL v37 = objc_msgSend_code(*(void **)(a1 + 40), v35, v36) == 20;
  }
  else {
    BOOL v37 = 0;
  }
  objc_msgSend_setIsCancelled_(*(void **)(a1 + 32), v35, v37);
}

void sub_1C4DAD67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4DADA74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DADB00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DADC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_1C4DADC58(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v6 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_INFO, "Not starting fetch because this operation has already been cancelled", buf, 2u);
    }
  }
  else
  {
    if (objc_msgSend_isFinished(*(void **)(a1 + 32), v4, v5)
      && objc_msgSend_isFinished(*(void **)(a1 + 32), v7, v8))
    {
      uint64_t v57 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v9, v10);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v57, v58, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDQueuedFetch.m", 292, @"You can't restart a fetch that has already finished");
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v11 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v49 = *(void **)(a1 + 32);
      id v50 = v11;
      int v53 = objc_msgSend_numberOfCallbacks(v49, v51, v52);
      objc_msgSend_highestQOS(*(void **)(a1 + 32), v54, v55);
      __int16 v56 = CKStringForQOS();
      *(_DWORD *)buf = 138412802;
      uint64_t v72 = (uint64_t)v49;
      __int16 v73 = 1024;
      *(_DWORD *)id v74 = v53;
      *(_WORD *)&unsigned char v74[4] = 2114;
      *(void *)&v74[6] = v56;
      _os_log_debug_impl(&dword_1C4CFF000, v50, OS_LOG_TYPE_DEBUG, "Starting aggregate fetch %@ with %d callbacks at QoS %{public}@", buf, 0x1Cu);
    }
    uint64_t v61 = objc_opt_new();
    group = dispatch_group_create();
    uint64_t v60 = objc_msgSend_container(*(void **)(a1 + 32), v12, v13);
    long long v16 = objc_msgSend_serverConfig(v60, v14, v15);
    uint64_t v19 = objc_msgSend_containerID(v60, v17, v18);
    uint64_t v21 = objc_msgSend_maxBatchSize_(v16, v20, (uint64_t)v19);

    if (v21 <= 0)
    {
      id v24 = objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], v22, v23);
      uint64_t v21 = objc_msgSend_maxBatchSize(v24, v25, v26);
    }
    uint64_t v27 = objc_msgSend_allItemIDs(*(void **)(a1 + 32), v22, v23);
    uint64_t v30 = objc_msgSend_count(v27, v28, v29);

    objc_initWeak(&location, *(id *)(a1 + 32));
    if (v30 >= 1)
    {
      uint64_t v34 = 0;
      *(void *)&long long v33 = 134218240;
      long long v59 = v33;
      do
      {
        if (v21 >= v30 - v34) {
          uint64_t v35 = v30 - v34;
        }
        else {
          uint64_t v35 = v21;
        }
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v36 = *MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v59;
          uint64_t v72 = v35;
          __int16 v73 = 2048;
          *(void *)id v74 = v34;
          _os_log_debug_impl(&dword_1C4CFF000, v36, OS_LOG_TYPE_DEBUG, "Generating a batch of %ld records from index %ld", buf, 0x16u);
        }
        long long v39 = objc_msgSend_allItemIDs(*(void **)(a1 + 32), v37, v38, v59);
        long long v41 = objc_msgSend_subarrayWithRange_(v39, v40, v34, v35);

        long long v42 = *(void **)(a1 + 32);
        long long v45 = objc_msgSend_operationQueue(v42, v43, v44);
        v66[0] = MEMORY[0x1E4F143A8];
        v66[1] = 3221225472;
        v66[2] = sub_1C4DAE1C8;
        v66[3] = &unk_1E64F24F0;
        void v66[4] = *(void *)(a1 + 32);
        objc_copyWeak(&v69, &location);
        id v67 = v61;
        char v68 = group;
        objc_msgSend_createFetchOperationForItemIDs_operationQueue_operationConfigurationBlock_(v42, v46, (uint64_t)v41, v45, v66);

        objc_destroyWeak(&v69);
        v34 += v35;
      }
      while (v34 < v30);
    }
    objc_msgSend_highestQOS(*(void **)(a1 + 32), v31, v32);
    uint64_t v47 = CKGetGlobalQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4DAE564;
    block[3] = &unk_1E64F01E8;
    objc_copyWeak(&v65, &location);
    id v64 = v61;
    id v48 = v61;
    dispatch_group_notify(group, v47, block);

    objc_destroyWeak(&v65);
    objc_destroyWeak(&location);
  }
}

void sub_1C4DAE198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location)
{
}

void sub_1C4DAE1C8(void **a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = objc_msgSend_highestQOS(a1[4], v4, v5);
  objc_msgSend_setQualityOfService_(v3, v7, v6);
  uint64_t v10 = objc_msgSend_operationID(v3, v8, v9);
  objc_msgSend_setRunningOperationID_(a1[4], v11, (uint64_t)v10);

  objc_initWeak(&location, v3);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C4DAE328;
  v13[3] = &unk_1E64F24C8;
  objc_copyWeak(&v16, a1 + 7);
  objc_copyWeak(&v17, &location);
  id v14 = a1[5];
  id v15 = a1[6];
  objc_msgSend_setCompletionBlock_(v3, v12, (uint64_t)v13);
  dispatch_group_enter((dispatch_group_t)a1[6]);

  objc_destroyWeak(&v17);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&location);
}

void sub_1C4DAE304(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4DAE328(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = objc_loadWeakRetained((id *)(a1 + 56));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v18 = v4;
    uint64_t v19 = (objc_class *)objc_opt_class();
    uint64_t v20 = NSStringFromClass(v19);
    uint64_t v25 = objc_msgSend_error(v3, v21, v22);
    if (v25) {
      uint64_t v26 = @" with error ";
    }
    else {
      uint64_t v26 = &stru_1F2044F30;
    }
    uint64_t v27 = objc_msgSend_error(v3, v23, v24);
    uint64_t v28 = (void *)v27;
    if (v27) {
      uint64_t v29 = (__CFString *)v27;
    }
    else {
      uint64_t v29 = &stru_1F2044F30;
    }
    int v30 = 138544130;
    uint64_t v31 = v20;
    __int16 v32 = 2112;
    id v33 = WeakRetained;
    __int16 v34 = 2114;
    uint64_t v35 = v26;
    __int16 v36 = 2112;
    BOOL v37 = v29;
    _os_log_debug_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_DEBUG, "%{public}@ operation %@ finished%{public}@%@.", (uint8_t *)&v30, 0x2Au);
  }
  id v7 = objc_msgSend_error(v3, v5, v6);

  if (v7)
  {
    id v10 = *(id *)(a1 + 32);
    objc_sync_enter(v10);
    uint64_t v11 = *(void **)(a1 + 32);
    id v14 = objc_msgSend_error(v3, v12, v13);
    objc_msgSend_addObject_(v11, v15, (uint64_t)v14);

    objc_sync_exit(v10);
  }
  id v16 = objc_msgSend_initialOperation(WeakRetained, v8, v9);
  objc_msgSend_combineMetricsWithOperation_(v16, v17, (uint64_t)v3);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1C4DAE548(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DAE564(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v3 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = v3;
    uint64_t v12 = objc_msgSend_count(v8, v10, v11);
    uint64_t v13 = @" with errors ";
    id v14 = *(__CFString **)(a1 + 32);
    if (!v12) {
      uint64_t v13 = &stru_1F2044F30;
    }
    *(_DWORD *)id v15 = 138412802;
    *(void *)&void v15[4] = WeakRetained;
    if (!v14) {
      id v14 = &stru_1F2044F30;
    }
    *(_WORD *)&v15[12] = 2112;
    *(void *)&v15[14] = v13;
    __int16 v16 = 2112;
    id v17 = v14;
    _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "Bulk record fetch operation %@ finished%@%@.", v15, 0x20u);
  }
  uint64_t v6 = objc_msgSend_firstObject(*(void **)(a1 + 32), v4, v5, *(_OWORD *)v15);
  objc_msgSend_finishFetchOperationWithError_(WeakRetained, v7, (uint64_t)v6);
}

void sub_1C4DAF188(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_1C4DAF5AC(void *result, const char *a2, uint64_t a3)
{
  if (result)
  {
    id v3 = objc_msgSend_url(result, a2, a3);
    uint64_t v6 = objc_msgSend_path(v3, v4, v5);
    uint64_t hasPrefix = objc_msgSend_hasPrefix_(v6, v7, @"/setup");

    return (void *)hasPrefix;
  }
  return result;
}

void sub_1C4DAF60C(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a1 && *MEMORY[0x1E4F1A4E0] && (sub_1C4DAF5AC(a1, a2, a3) & 1) == 0)
  {
    uint64_t v6 = objc_msgSend_unitTestOverrides(a1, v4, v5);
    uint64_t v8 = objc_msgSend_objectForKeyedSubscript_(v6, v7, @"TestInjectedThrottles");
    if (objc_msgSend_count(v8, v9, v10))
    {
      uint64_t v13 = objc_msgSend_operation(a1, v11, v12);
      __int16 v16 = objc_msgSend_deviceContext(v13, v14, v15);
      uint64_t v19 = objc_msgSend_throttleManager(v16, v17, v18);

      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      id v20 = v8;
      uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v27, v31, 16);
      if (v22)
      {
        uint64_t v24 = v22;
        uint64_t v25 = *(void *)v28;
        do
        {
          uint64_t v26 = 0;
          do
          {
            if (*(void *)v28 != v25) {
              objc_enumerationMutation(v20);
            }
            objc_msgSend_addThrottle_(v19, v23, *(void *)(*((void *)&v27 + 1) + 8 * v26++), (void)v27);
          }
          while (v24 != v26);
          uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v23, (uint64_t)&v27, v31, 16);
        }
        while (v24);
      }
    }
  }
}

void sub_1C4DB0430(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_createAssetAuthorizeGetRequestOptionsHeaderInfoWithKey_value_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    uint64_t v6 = objc_msgSend_assetAuthorizeGetRequestOptions(*(void **)(a1 + 40), v4, v5);
    uint64_t v9 = objc_msgSend_contentRequestHeaders(v6, v7, v8);
    objc_msgSend_addObject_(v9, v10, (uint64_t)v11);
  }
}

void sub_1C4DB1468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4DB148C(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_setIsWaitingOnAuthRenew_(WeakRetained, v6, 0);
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, id))(v7 + 16))(v7, a2, v8);
  }
}

void sub_1C4DB1894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4DB18B8(uint64_t a1, char a2, void *a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v9 = WeakRetained;
  if (*MEMORY[0x1E4F1A4E0]
    && (objc_msgSend_unitTestOverrides(WeakRetained, v7, v8),
        uint64_t v10 = objc_claimAutoreleasedReturnValue(),
        objc_msgSend_objectForKeyedSubscript_(v10, v11, @"TestAuthTokenRenewalFailsBecauseRenewedTokenIsStale"), uint64_t v12 = objc_claimAutoreleasedReturnValue(), v12, v10, v12))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v13 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      long long v40 = v13;
      long long v43 = objc_msgSend_requestUUID(v9, v41, v42);
      *(_DWORD *)buf = 138543362;
      id v48 = v43;
      _os_log_debug_impl(&dword_1C4CFF000, v40, OS_LOG_TYPE_DEBUG, "Failing credential renewal with a stale token error for tests for request %{public}@", buf, 0xCu);
    }
    uint64_t v15 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v14, *MEMORY[0x1E4F19DD8], 2011, @"Got a CloudKit auth token that has already failed a previous auth attempt");

    uint64_t v18 = objc_msgSend_container(v9, v16, v17);
    uint64_t v21 = objc_msgSend_account(v18, v19, v20);
    uint64_t v24 = objc_msgSend_accountType(v21, v22, v23);

    if (v24 == 3)
    {
      long long v27 = objc_msgSend_container(v9, v25, v26);
      long long v30 = objc_msgSend_account(v27, v28, v29);
      id v33 = objc_msgSend_backingAccount(v30, v31, v32);
      __int16 v36 = objc_msgSend_testDevice(v33, v34, v35);
      objc_msgSend_daemonSetHasValidCredentials_(v36, v37, 0);
    }
    a2 = 0;
  }
  else
  {
    uint64_t v15 = v5;
  }
  v44[0] = MEMORY[0x1E4F143A8];
  v44[1] = 3221225472;
  size_t v44[2] = sub_1C4DB1B44;
  v44[3] = &unk_1E64F1D90;
  char v46 = a2;
  v44[4] = v9;
  id v45 = v15;
  id v38 = v15;
  objc_msgSend_performOnLifecycleQueueIfNotFinished_(v9, v39, (uint64_t)v44);
}

void sub_1C4DB1B44(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    objc_msgSend_invalidateCachedAccountInfo(MEMORY[0x1E4F19E20], a2, a3);
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v4 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void **)(a1 + 32);
      uint64_t v8 = v4;
      id v11 = objc_msgSend_requestUUID(v7, v9, v10);
      int v26 = 138543362;
      long long v27 = v11;
      _os_log_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Auth token acquired. Retrying.\"", (uint8_t *)&v26, 0xCu);
    }
    objc_msgSend_retryRequest(*(void **)(a1 + 32), v5, v6);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v12 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
    {
      id v14 = *(void **)(a1 + 32);
      uint64_t v15 = v12;
      uint64_t v18 = objc_msgSend_requestUUID(v14, v16, v17);
      int v26 = 138543362;
      long long v27 = v18;
      _os_log_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Warn: Couldn't renew an auth token- cancelling this request\"", (uint8_t *)&v26, 0xCu);
    }
    objc_msgSend_setLastRetryAuthError_(*(void **)(a1 + 32), v13, *(void *)(a1 + 40));
    uint64_t v19 = *(void **)(a1 + 32);
    uint64_t v22 = objc_msgSend_container(v19, v20, v21);
    uint64_t v24 = objc_msgSend_possiblyWrappedAuthTokenErrorGivenError_(v22, v23, *(void *)(a1 + 40));
    objc_msgSend_finishWithError_(v19, v25, (uint64_t)v24);
  }
}

void sub_1C4DB2D4C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v15 = objc_msgSend_operation(WeakRetained, v11, v12);
  __int16 v16 = (unsigned char *)MEMORY[0x1E4F1A4E0];
  if (*MEMORY[0x1E4F1A4E0])
  {
    uint64_t v17 = objc_msgSend_unitTestOverrides(WeakRetained, v13, v14);
    uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(v17, v18, @"DropOperationUUIDsInResponse");
    if (v19)
    {
      uint64_t v20 = (void *)v19;
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if (isKindOfClass) {
        objc_msgSend_setResponse_(v7, v13, 0);
      }
    }
    else
    {
    }
  }
  unint64_t v22 = objc_msgSend__handleServerProtobufResult_rawData_(WeakRetained, v13, (uint64_t)v7, v8);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && v22 <= 1)
  {
    id v25 = v7;
    uint64_t v28 = objc_msgSend_response(v25, v26, v27);
    uint64_t v31 = objc_msgSend_operationUUID(v28, v29, v30);

    if (v31)
    {
      long long v83 = v9;
      id v34 = v8;
      uint64_t v35 = v15;
      __int16 v36 = objc_msgSend_responseObjectUUIDs(WeakRetained, v32, v33);
      int v38 = objc_msgSend_containsObject_(v36, v37, (uint64_t)v31);

      if (v38)
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v15 = v35;
        long long v41 = (void *)*MEMORY[0x1E4F1A530];
        id v8 = v34;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEBUG))
        {
          uint64_t v75 = v41;
          id v78 = objc_msgSend_requestUUID(WeakRetained, v76, v77);
          *(_DWORD *)buf = 138543362;
          long long v87 = v78;
          _os_log_debug_impl(&dword_1C4CFF000, v75, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"Warn: Dropping protobuf result since we've alredy returned it to the client. This likely happened because of a request timeout.\"", buf, 0xCu);
        }
        v83[2](v83);

        goto LABEL_38;
      }
      uint64_t v42 = objc_msgSend_responseObjectUUIDs(WeakRetained, v39, v40);
      objc_msgSend_addObject_(v42, v43, (uint64_t)v31);

      uint64_t v15 = v35;
      id v8 = v34;
      uint64_t v9 = v83;
    }
    char v46 = objc_msgSend_header(v25, v32, v33);
    if (v46)
    {
      objc_msgSend_translator(WeakRetained, v44, v45);
      uint64_t v47 = v9;
      id v48 = v8;
      v50 = uint64_t v49 = v15;
      objc_msgSend_consumeResponseHeader_(v50, v51, (uint64_t)v46);

      uint64_t v15 = v49;
      id v8 = v48;
      uint64_t v9 = v47;
      __int16 v16 = (unsigned char *)MEMORY[0x1E4F1A4E0];
    }
  }
  if (*v16)
  {
    uint64_t v52 = objc_msgSend_unitTestOverrides(WeakRetained, v23, v24);
    uint64_t v54 = objc_msgSend_objectForKeyedSubscript_(v52, v53, @"FakeZoneBusyResponseFromServer");

    if (v54)
    {
      uint64_t v55 = objc_opt_new();
      objc_msgSend_setRetryAfterSeconds_(v55, v56, 20);
      uint64_t v57 = objc_opt_new();
      objc_msgSend_setType_(v57, v58, 7);
      objc_msgSend_setServerError_(v55, v59, (uint64_t)v57);
      __int16 v62 = objc_msgSend_result(v7, v60, v61);
      objc_msgSend_setError_(v62, v63, (uint64_t)v55);

      uint64_t v66 = objc_msgSend_result(v7, v64, v65);
      objc_msgSend_setCode_(v66, v67, 3);

      goto LABEL_27;
    }
  }
  if (v22 == 2)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    char v70 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_ERROR))
    {
      uint64_t v79 = v70;
      id v82 = objc_msgSend_requestUUID(WeakRetained, v80, v81);
      *(_DWORD *)buf = 138543362;
      long long v87 = v82;
      _os_log_error_impl(&dword_1C4CFF000, v79, OS_LOG_TYPE_ERROR, "req: %{public}@, \"Task level failure encountered while parsing\"", buf, 0xCu);

      if (!v9) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v22 != 1)
  {
    if (!v22 && WeakRetained)
    {
      v84[0] = MEMORY[0x1E4F143A8];
      v84[1] = 3221225472;
      v84[2] = sub_1C4DB3308;
      v84[3] = &unk_1E64F2590;
      v84[4] = WeakRetained;
      id v85 = v9;
      objc_msgSend_requestDidParseProtobufObject_completionHandler_(WeakRetained, v23, (uint64_t)v7, v84);

      goto LABEL_38;
    }
LABEL_36:
    if (!v9) {
      goto LABEL_38;
    }
LABEL_37:
    v9[2](v9);

    goto LABEL_38;
  }
LABEL_27:
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  char v68 = (void *)*MEMORY[0x1E4F1A530];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_ERROR))
  {
    uint64_t v71 = v68;
    id v74 = objc_msgSend_requestUUID(WeakRetained, v72, v73);
    *(_DWORD *)buf = 138543362;
    long long v87 = v74;
    _os_log_error_impl(&dword_1C4CFF000, v71, OS_LOG_TYPE_ERROR, "req: %{public}@, \"Node level failure encountered while parsing\"", buf, 0xCu);
  }
  objc_msgSend_requestDidParseNodeFailure_(WeakRetained, v69, (uint64_t)v7);
  if (v9) {
    goto LABEL_37;
  }
LABEL_38:
}

void sub_1C4DB3308(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v4 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_ERROR))
    {
      id v5 = *(void **)(a1 + 32);
      uint64_t v6 = v4;
      uint64_t v9 = objc_msgSend_requestUUID(v5, v7, v8);
      int v10 = 138543618;
      id v11 = v9;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_error_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_ERROR, "req: %{public}@, \"Error parsing protobuf object: %@\"", (uint8_t *)&v10, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1C4DB4FA4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  int v10 = *(void **)(a1 + 32);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = sub_1C4DB50A8;
  void v15[3] = &unk_1E64F1B98;
  void v15[4] = v10;
  id v16 = v7;
  id v17 = v8;
  id v11 = (void (**)(void))v9;
  id v18 = v11;
  id v12 = v8;
  id v13 = v7;
  if ((objc_msgSend_performOnLifecycleQueueIfNotFinished_(v10, v14, (uint64_t)v15) & 1) == 0) {
    v11[2](v11);
  }
}

void sub_1C4DB50A8(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend__protobufObjectParsedBlock(*(void **)(a1 + 32), a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, void, void, void))v4 + 2))(v4, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
}

void sub_1C4DB510C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = *(void **)(a1 + 32);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1C4DB51CC;
  v11[3] = &unk_1E64F0948;
  void v11[4] = v7;
  id v12 = v6;
  id v8 = v6;
  id v9 = a4;
  objc_msgSend_performOnLifecycleQueueIfNotFinished_(v7, v10, (uint64_t)v11);
  v9[2](v9);
}

uint64_t sub_1C4DB51CC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleServerJSONResult_, *(void *)(a1 + 40));
}

void sub_1C4DB51DC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = *(void **)(a1 + 32);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1C4DB529C;
  v11[3] = &unk_1E64F0948;
  void v11[4] = v7;
  id v12 = v6;
  id v8 = v6;
  id v9 = a4;
  objc_msgSend_performOnLifecycleQueueIfNotFinished_(v7, v10, (uint64_t)v11);
  v9[2](v9);
}

uint64_t sub_1C4DB529C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handlePlistResult_, *(void *)(a1 + 40));
}

void sub_1C4DB52AC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = *(void **)(a1 + 32);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1C4DB536C;
  v11[3] = &unk_1E64F0948;
  void v11[4] = v7;
  id v12 = v6;
  id v8 = v6;
  id v9 = a4;
  objc_msgSend_performOnLifecycleQueueIfNotFinished_(v7, v10, (uint64_t)v11);
  v9[2](v9);
}

uint64_t sub_1C4DB536C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_requestDidParsePlaintextObject_, *(void *)(a1 + 40));
}

void sub_1C4DB537C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = *(void **)(a1 + 32);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1C4DB543C;
  v11[3] = &unk_1E64F0948;
  void v11[4] = v7;
  id v12 = v6;
  id v8 = v6;
  id v9 = a4;
  objc_msgSend_performOnLifecycleQueueIfNotFinished_(v7, v10, (uint64_t)v11);
  v9[2](v9);
}

uint64_t sub_1C4DB543C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_requestDidParse509CertObject_, *(void *)(a1 + 40));
}

void sub_1C4DB74AC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C4DB74C8(uint64_t a1, void *a2)
{
  id v11 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v6 = objc_msgSend_shared(CKDTrafficLogger, v3, v4);
    id v9 = objc_msgSend_requestUUID(WeakRetained, v7, v8);
    objc_msgSend_logPartialRequestObjectDataWithRequestUUID_objectData_completionHandler_(v6, v10, (uint64_t)v9, v11, &unk_1F2042F70);
  }
}

uint64_t sub_1C4DB77E0(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1C4DB7850;
  v4[3] = &unk_1E64F05C8;
  v4[4] = v2;
  return objc_msgSend_performASyncOnLifecycleQueueIfNotFinished_(v2, a2, (uint64_t)v4);
}

uint64_t sub_1C4DB7850(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = voucher_copy();
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 328);
  *(void *)(v3 + 328) = v2;

  objc_msgSend_setIsHandlingAuthRetry_(*(void **)(a1 + 32), v5, 0);
  objc_msgSend_setDidReceiveResponseBodyData_(*(void **)(a1 + 32), v6, 0);
  id v9 = objc_msgSend_signpost(*(void **)(a1 + 32), v7, v8);

  if (v9)
  {
    id v12 = objc_msgSend_signpost(*(void **)(a1 + 32), v10, v11);
    uint64_t v15 = objc_msgSend_log(v12, v13, v14);

    id v18 = objc_msgSend_signpost(*(void **)(a1 + 32), v16, v17);
    os_signpost_id_t v21 = objc_msgSend_identifier(v18, v19, v20);

    if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
    {
      uint64_t v24 = objc_msgSend_requestUUID(*(void **)(a1 + 32), v22, v23);
      uint64_t v27 = objc_msgSend_operationID(*(void **)(a1 + 32), v25, v26);
      int v45 = 138412546;
      char v46 = v24;
      __int16 v47 = 2112;
      id v48 = v27;
      _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v21, "CKDURLRequest", "Identifier=%{signpost.description:attribute}@ Operation=%{signpost.description:attribute}@ ", (uint8_t *)&v45, 0x16u);
    }
  }
  objc_msgSend_hash(*(void **)(a1 + 32), v10, v11);
  kdebug_trace();
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v28 = (void *)*MEMORY[0x1E4F1A530];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v31 = *(void **)(a1 + 32);
    uint64_t v32 = v28;
    uint64_t v35 = objc_msgSend_requestUUID(v31, v33, v34);
    int v38 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v36, v37);
    int v45 = 138543618;
    char v46 = v35;
    __int16 v47 = 2114;
    id v48 = v38;
    _os_log_impl(&dword_1C4CFF000, v32, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%{public}@ Performing\"", (uint8_t *)&v45, 0x16u);
  }
  objc_msgSend_validateAnonymousUserIDPropagation(*(void **)(a1 + 32), v29, v30);
  if ((objc_msgSend_isCancelled(*(void **)(a1 + 32), v39, v40) & 1) != 0
    || objc_msgSend_isFinished(*(void **)(a1 + 32), v41, v42))
  {
    return objc_msgSend_finishWithError_(*(void **)(a1 + 32), v41, 0);
  }
  else
  {
    return objc_msgSend__validateAccountAccess(*(void **)(a1 + 32), v41, v43);
  }
}

void sub_1C4DB7B50(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if ((objc_msgSend_allowsAnonymousAccount(*(void **)(a1 + 32), a2, a3) & 1) == 0)
  {
    id v7 = objc_msgSend_container(*(void **)(a1 + 32), v4, v5);
    int v10 = objc_msgSend_entitlements(v7, v8, v9);
    id v13 = objc_msgSend_cloudServices(v10, v11, v12);
    char v15 = objc_msgSend_containsObject_(v13, v14, *MEMORY[0x1E4F1A590]);

    if (v15)
    {
      id v18 = objc_msgSend_entitlements(v7, v16, v17);
      int isBackgroundAssetsExtension = objc_msgSend_isBackgroundAssetsExtension(v18, v19, v20);

      if (isBackgroundAssetsExtension)
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v24 = (void *)*MEMORY[0x1E4F1A530];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v26 = *(void **)(a1 + 32);
          uint64_t v27 = v24;
          uint64_t v30 = objc_msgSend_requestUUID(v26, v28, v29);
          int v76 = 138543362;
          uint64_t v77 = v30;
          _os_log_impl(&dword_1C4CFF000, v27, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"This request requires an authenticated account, which is unavailable for Background Assets Extension processes\"", (uint8_t *)&v76, 0xCu);
        }
        uint64_t v31 = *(void **)(a1 + 32);
        objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E4F1A280], v25, *MEMORY[0x1E4F19DD8], 1002, 0, @"This request requires an authenticated account, which is unavailable for Background Assets Extension processes");
      }
      else
      {
        long long v41 = objc_msgSend_account(v7, v22, v23);
        uint64_t v44 = objc_msgSend_accountType(v41, v42, v43);

        if (v44 == 1)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          __int16 v47 = (void *)*MEMORY[0x1E4F1A530];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v49 = *(void **)(a1 + 32);
            id v50 = v47;
            int v53 = objc_msgSend_requestUUID(v49, v51, v52);
            int v76 = 138543362;
            uint64_t v77 = v53;
            _os_log_impl(&dword_1C4CFF000, v50, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"This request requires an authenticated account\"", (uint8_t *)&v76, 0xCu);
          }
          uint64_t v31 = *(void **)(a1 + 32);
          objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E4F1A280], v48, *MEMORY[0x1E4F19DD8], 1002, 0, @"This request requires an authenticated account");
        }
        else
        {
          if ((objc_msgSend_canAuthWithCloudKit(v7, v45, v46) & 1) == 0)
          {
            if (*MEMORY[0x1E4F1A550] != -1) {
              dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            __int16 v56 = (void *)*MEMORY[0x1E4F1A530];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v58 = *(void **)(a1 + 32);
              long long v59 = v56;
              __int16 v62 = objc_msgSend_requestUUID(v58, v60, v61);
              int v76 = 138543362;
              uint64_t v77 = v62;
              _os_log_impl(&dword_1C4CFF000, v59, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"This request requires an authenticated account, the current account cannot auth with CloudKit\"", (uint8_t *)&v76, 0xCu);
            }
            uint64_t v63 = objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E4F1A280], v57, *MEMORY[0x1E4F19DD8], 1002, 0, @"This request requires an authenticated account, the current account cannot auth with CloudKit");
            uint64_t v66 = objc_msgSend_container(*(void **)(a1 + 32), v64, v65);
            long long v39 = objc_msgSend_possiblyWrappedAuthTokenErrorGivenError_(v66, v67, (uint64_t)v63);

            objc_msgSend_finishWithError_(*(void **)(a1 + 32), v68, (uint64_t)v39);
            goto LABEL_18;
          }
          if (objc_msgSend_canAccessAccount(v7, v54, v55))
          {

            goto LABEL_2;
          }
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          id v69 = (void *)*MEMORY[0x1E4F1A530];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v71 = *(void **)(a1 + 32);
            uint64_t v72 = v69;
            uint64_t v75 = objc_msgSend_requestUUID(v71, v73, v74);
            int v76 = 138543362;
            uint64_t v77 = v75;
            _os_log_impl(&dword_1C4CFF000, v72, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"CloudKit access was denied by user settings\"", (uint8_t *)&v76, 0xCu);
          }
          uint64_t v31 = *(void **)(a1 + 32);
          objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E4F1A280], v70, *MEMORY[0x1E4F19DD8], 1002, 0, @"CloudKit access was denied by user settings");
        }
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v32 = (void *)*MEMORY[0x1E4F1A530];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v34 = *(void **)(a1 + 32);
        uint64_t v35 = v32;
        int v38 = objc_msgSend_requestUUID(v34, v36, v37);
        int v76 = 138543362;
        uint64_t v77 = v38;
        _os_log_impl(&dword_1C4CFF000, v35, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"This request requires an authenticated account, which is unavailable for CloudKit-Anonymous / App Clips processes\"", (uint8_t *)&v76, 0xCu);
      }
      uint64_t v31 = *(void **)(a1 + 32);
      objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E4F1A280], v33, *MEMORY[0x1E4F19DD8], 1002, 0, @"This request requires an authenticated account, which is unavailable for CloudKit-Anonymous / App Clips processes");
    long long v39 = };
    objc_msgSend_finishWithError_(v31, v40, (uint64_t)v39);
LABEL_18:

    return;
  }
LABEL_2:
  uint64_t v6 = *(void *)(a1 + 32);
  MEMORY[0x1F4181798](v6, sel__setupPublicDatabaseURL, v5);
}

void sub_1C4DB8164(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int v6 = objc_msgSend_requiresAppPartitionURL(*(void **)(a1 + 32), a2, a3);
  id v7 = *(void **)(a1 + 32);
  if (v6)
  {
    uint64_t v8 = objc_msgSend_container(v7, v4, v5);

    if (!v8)
    {
      uint64_t v30 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v9, v10);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v30, v31, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDURLRequest.m", 1673, @"You must set the container");
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v11 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void **)(a1 + 32);
      char v15 = v11;
      id v18 = objc_msgSend_requestUUID(v14, v16, v17);
      os_signpost_id_t v21 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v19, v20);
      *(_DWORD *)buf = 138543618;
      uint64_t v34 = v18;
      __int16 v35 = 2114;
      __int16 v36 = v21;
      _os_log_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%{public}@ Requires a url for the app partition, getting it\"", buf, 0x16u);
    }
    unint64_t v22 = objc_msgSend_container(*(void **)(a1 + 32), v12, v13);
    uint64_t v25 = objc_msgSend_serverType(*(void **)(a1 + 32), v23, v24);
    uint64_t v28 = objc_msgSend_operation(*(void **)(a1 + 32), v26, v27);
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = sub_1C4DB83B4;
    void v32[3] = &unk_1E64F2658;
    v32[4] = *(void *)(a1 + 32);
    objc_msgSend_fetchPublicURLForServerType_operation_completionHandler_(v22, v29, v25, v28, v32);
  }
  else
  {
    MEMORY[0x1F4181798](v7, sel__setupPrivateDatabaseURL, v5);
  }
}

uint64_t sub_1C4DB83B4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (a3) {
    return objc_msgSend_finishWithError_(v3, a2, a3);
  }
  else {
    return MEMORY[0x1F4181798](v3, sel__setupPrivateDatabaseURL, 0);
  }
}

void sub_1C4DB8430(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int v6 = objc_msgSend_requiresUserPartitionURL(*(void **)(a1 + 32), a2, a3);
  id v7 = *(void **)(a1 + 32);
  if (v6)
  {
    uint64_t v8 = objc_msgSend_container(v7, v4, v5);

    if (!v8)
    {
      uint64_t v30 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v9, v10);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v30, v31, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDURLRequest.m", 1692, @"You must set the container");
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v11 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void **)(a1 + 32);
      char v15 = v11;
      id v18 = objc_msgSend_requestUUID(v14, v16, v17);
      os_signpost_id_t v21 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v19, v20);
      *(_DWORD *)buf = 138543618;
      uint64_t v34 = v18;
      __int16 v35 = 2114;
      __int16 v36 = v21;
      _os_log_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%{public}@ Requires a url for the user partition, getting it\"", buf, 0x16u);
    }
    unint64_t v22 = objc_msgSend_container(*(void **)(a1 + 32), v12, v13);
    uint64_t v25 = objc_msgSend_serverType(*(void **)(a1 + 32), v23, v24);
    uint64_t v28 = objc_msgSend_operation(*(void **)(a1 + 32), v26, v27);
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = sub_1C4DB8680;
    void v32[3] = &unk_1E64F2658;
    v32[4] = *(void *)(a1 + 32);
    objc_msgSend_fetchPrivateURLForServerType_operation_completionHandler_(v22, v29, v25, v28, v32);
  }
  else
  {
    objc_msgSend__setupConfiguration(v7, v4, v5);
  }
}

void sub_1C4DB8680(uint64_t a1, uint64_t a2, void *a3)
{
  id v14 = a3;
  if (a2)
  {
    objc_msgSend__setupConfiguration(*(void **)(a1 + 32), v5, v6);
  }
  else
  {
    id v7 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v8 = *MEMORY[0x1E4F19DD8];
    uint64_t v9 = (objc_class *)objc_opt_class();
    uint64_t v10 = NSStringFromClass(v9);
    uint64_t v12 = objc_msgSend_errorWithDomain_code_error_format_(v7, v11, v8, 2005, v14, @"Request (%@) does not have a URL", v10);

    objc_msgSend_finishWithError_(*(void **)(a1 + 32), v13, (uint64_t)v12);
  }
}

void sub_1C4DB87B0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v6 = objc_msgSend_requiresConfiguration(*(void **)(a1 + 32), a2, a3);
  id v7 = *(void **)(a1 + 32);
  if (v6)
  {
    uint64_t v8 = objc_msgSend_container(v7, v4, v5);

    if (!v8)
    {
      uint64_t v27 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v9, v10);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v27, v28, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDURLRequest.m", 1712, @"You must set the container");
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v11 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
    {
      id v14 = *(void **)(a1 + 32);
      char v15 = v11;
      id v18 = objc_msgSend_requestUUID(v14, v16, v17);
      os_signpost_id_t v21 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v19, v20);
      *(_DWORD *)buf = 138543618;
      uint64_t v31 = v18;
      __int16 v32 = 2114;
      uint64_t v33 = v21;
      _os_log_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%{public}@ Requires configuration, getting it\"", buf, 0x16u);
    }
    unint64_t v22 = objc_msgSend_container(*(void **)(a1 + 32), v12, v13);
    uint64_t v25 = objc_msgSend_operation(*(void **)(a1 + 32), v23, v24);
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = sub_1C4DB89F0;
    void v29[3] = &unk_1E64F1CC8;
    void v29[4] = *(void *)(a1 + 32);
    objc_msgSend_fetchConfigurationForOperation_withCompletionHandler_(v22, v26, (uint64_t)v25, v29);
  }
  else
  {
    objc_msgSend__fetchContainerScopedUserID(v7, v4, v5);
  }
}

uint64_t sub_1C4DB89F0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (a3) {
    return objc_msgSend_finishWithError_(v3, a2, a3);
  }
  else {
    return objc_msgSend__fetchContainerScopedUserID(v3, a2, 0);
  }
}

void sub_1C4DB8A6C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v6 = objc_msgSend_container(*(void **)(a1 + 32), a2, a3);
  if (!v6)
  {
    uint64_t v31 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v4, v5);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v31, v32, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDURLRequest.m", 1731, @"You must set the container");
  }
  if (objc_msgSend_allowsAuthedAccount(*(void **)(a1 + 32), v4, v5)
    && (objc_msgSend_sendRequestAnonymously(*(void **)(a1 + 32), v7, v8) & 1) == 0)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v18 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void **)(a1 + 32);
      uint64_t v20 = v18;
      uint64_t v23 = objc_msgSend_requestUUID(v19, v21, v22);
      uint64_t v26 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v24, v25);
      *(_DWORD *)buf = 138543618;
      uint64_t v37 = v23;
      __int16 v38 = 2114;
      long long v39 = v26;
      _os_log_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%{public}@ allows a container scoped user id, seeing if we have one\"", buf, 0x16u);
    }
    objc_initWeak((id *)buf, *(id *)(a1 + 32));
    uint64_t v29 = objc_msgSend_operation(*(void **)(a1 + 32), v27, v28);
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    void v33[2] = sub_1C4DB8D24;
    v33[3] = &unk_1E64F2680;
    objc_copyWeak(&v35, (id *)buf);
    id v34 = v6;
    objc_msgSend_fetchImportantUserIDsForOperation_withCompletionHandler_(v34, v30, (uint64_t)v29, v33);

    objc_destroyWeak(&v35);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    if (objc_msgSend_wantsProtocolTranslator(*(void **)(a1 + 32), v7, v8))
    {
      uint64_t v11 = [CKDProtocolTranslator alloc];
      uint64_t v14 = objc_msgSend_databaseScope(*(void **)(a1 + 32), v12, v13);
      id v16 = objc_msgSend_initWithContainer_databaseScope_requireContainerScopedUserID_(v11, v15, (uint64_t)v6, v14, 0);
      objc_msgSend_setTranslator_(*(void **)(a1 + 32), v17, (uint64_t)v16);
    }
    objc_msgSend__fetchServerCertificatesIfNeeded(*(void **)(a1 + 32), v9, v10);
  }
}

void sub_1C4DB8CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4DB8D24(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = sub_1C4DB8E0C;
  v12[3] = &unk_1E64F0DF0;
  id v13 = v7;
  id v14 = v6;
  id v15 = WeakRetained;
  id v16 = *(id *)(a1 + 32);
  id v9 = v6;
  id v10 = v7;
  objc_msgSend_performOnLifecycleQueueIfNotFinished_(WeakRetained, v11, (uint64_t)v12);
}

void sub_1C4DB8E0C(uint64_t a1)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)*(id *)(a1 + 32);
  if (*(void *)(a1 + 40)) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v19 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_INFO))
    {
      uint64_t v22 = *(void **)(a1 + 48);
      uint64_t v23 = v19;
      uint64_t v26 = objc_msgSend_requestUUID(v22, v24, v25);
      uint64_t v27 = *(void *)(a1 + 40);
      uint64_t v30 = objc_msgSend_account(*(void **)(a1 + 56), v28, v29);
      uint64_t v33 = objc_msgSend_dsid(v30, v31, v32);
      *(_DWORD *)buf = 138543874;
      uint64_t v63 = v26;
      __int16 v64 = 2114;
      uint64_t v65 = v27;
      __int16 v66 = 2112;
      id v67 = v33;
      _os_log_impl(&dword_1C4CFF000, v23, OS_LOG_TYPE_INFO, "req: %{public}@, \"Fetched container scoped user ID of %{public}@ for dsid %@\"", buf, 0x20u);
    }
    if (objc_msgSend_wantsProtocolTranslator(*(void **)(a1 + 48), v20, v21))
    {
      __int16 v36 = [CKDProtocolTranslator alloc];
      uint64_t v37 = *(void *)(a1 + 56);
      uint64_t v40 = objc_msgSend_databaseScope(*(void **)(a1 + 48), v38, v39);
      uint64_t v42 = objc_msgSend_initWithContainer_databaseScope_(v36, v41, v37, v40);
      objc_msgSend_setTranslator_(*(void **)(a1 + 48), v43, (uint64_t)v42);

      uint64_t v46 = objc_msgSend_pcsManager(*(void **)(a1 + 56), v44, v45);
      uint64_t v49 = objc_msgSend_translator(*(void **)(a1 + 48), v47, v48);
      objc_msgSend_setIdentityDelegate_(v49, v50, (uint64_t)v46);

      int v53 = objc_msgSend_containerID(*(void **)(a1 + 56), v51, v52);
      uint64_t v56 = objc_msgSend_specialContainerType(v53, v54, v55);

      if (v56 == 4)
      {
        uint64_t v57 = objc_msgSend_translator(*(void **)(a1 + 48), v34, v35);
        objc_msgSend_setDontCreateValidatingParentReferences_(v57, v58, 1);
      }
    }
    objc_msgSend__fetchServerCertificatesIfNeeded(*(void **)(a1 + 48), v34, v35);
  }
  else
  {
    uint64_t v60 = v2;
    if (objc_msgSend_allowsAnonymousAccount(*(void **)(a1 + 48), v3, v4))
    {
      if (objc_msgSend_wantsProtocolTranslator(*(void **)(a1 + 48), v6, v7))
      {
        id v10 = [CKDProtocolTranslator alloc];
        uint64_t v11 = *(void *)(a1 + 56);
        uint64_t v14 = objc_msgSend_databaseScope(*(void **)(a1 + 48), v12, v13);
        id v16 = objc_msgSend_initWithContainer_databaseScope_requireContainerScopedUserID_(v10, v15, v11, v14, 0);
        objc_msgSend_setTranslator_(*(void **)(a1 + 48), v17, (uint64_t)v16);
      }
      objc_msgSend__fetchServerCertificatesIfNeeded(*(void **)(a1 + 48), v8, v9);
      id v18 = v60;
    }
    else
    {
      long long v59 = v60;
      if (!v60)
      {
        objc_msgSend_errorWithDomain_code_userInfo_format_(MEMORY[0x1E4F1A280], 0, *MEMORY[0x1E4F19DD8], 1004, 0, @"Account couldn't get container scoped user id, no underlying error received");
        long long v59 = (const char *)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v61 = v59;
      objc_msgSend_finishWithError_(*(void **)(a1 + 48), v59, (uint64_t)v59);
      id v18 = (char *)v61;
    }
  }
}

uint64_t sub_1C4DB91A8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_container(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_options(v4, v5, v6);
  if (objc_msgSend_acceptServerSignedRecords(v7, v8, v9))
  {
    int shouldRefetchTrusts = objc_msgSend_shouldRefetchTrusts(CKDServerTrustCache, v10, v11);

    if (shouldRefetchTrusts)
    {
      objc_msgSend_setFetchAttempt(CKDServerTrustCache, v13, v14);
      id v15 = objc_opt_new();
      id v18 = objc_msgSend_operation(*(void **)(a1 + 32), v16, v17);
      uint64_t v19 = objc_opt_class();
      uint64_t v22 = objc_msgSend_container(*(void **)(a1 + 32), v20, v21);
      objc_msgSend_spawnAndRunOperationOfClass_operationInfo_spawnQueue_container_operationConfigurationBlock_(v18, v23, v19, v15, 0, v22, &unk_1F2042F90);

      return objc_msgSend__fetchDeviceID(*(void **)(a1 + 32), v24, v25, v39);
    }
  }
  else
  {
  }
  if (objc_msgSend_shouldRefetchTrusts(CKDServerTrustCache, v13, v14))
  {
    uint64_t v28 = objc_msgSend_container(*(void **)(a1 + 32), v26, v27);
    uint64_t v31 = objc_msgSend_options(v28, v29, v30);
    char v34 = objc_msgSend_acceptServerSignedRecords(v31, v32, v33);

    if ((v34 & 1) == 0)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v35 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v39) = 0;
        __int16 v36 = "Skipping server certificate fetch because the container options do not specify accepting server signed records";
        uint64_t v37 = (uint8_t *)&v39;
LABEL_16:
        _os_log_debug_impl(&dword_1C4CFF000, v35, OS_LOG_TYPE_DEBUG, v36, v37, 2u);
      }
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v35 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      __int16 v36 = "Skipping server certificate fetch because conditions are not appropriate for refetching";
      uint64_t v37 = buf;
      goto LABEL_16;
    }
  }
  return objc_msgSend__fetchDeviceID(*(void **)(a1 + 32), v24, v25, v39);
}

void sub_1C4DB93C4(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_initWeak(&location, v2);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1C4DB9494;
  v4[3] = &unk_1E64F09E0;
  objc_copyWeak(&v5, &location);
  objc_msgSend_setCompletionBlock_(v2, v3, (uint64_t)v4);
  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

void sub_1C4DB9478(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C4DB9494(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = objc_msgSend_validatedTrusts(WeakRetained, v2, v3);
  uint64_t v7 = objc_msgSend_count(v4, v5, v6);

  if (v7)
  {
    id v10 = objc_msgSend_validatedTrusts(WeakRetained, v8, v9);
    objc_msgSend_setValidatedTrusts_(CKDServerTrustCache, v11, (uint64_t)v10);

    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v12 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = v12;
      id v16 = objc_msgSend_validatedTrusts(WeakRetained, v14, v15);
      int v18 = 138412290;
      uint64_t v19 = v16;
      _os_log_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_INFO, "Successfully fetched validated server signing trusts: %@", (uint8_t *)&v18, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v17 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v18) = 0;
      _os_log_error_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_ERROR, "Certificate fetch did not result in any valid trusts.", (uint8_t *)&v18, 2u);
    }
  }
}

uint64_t sub_1C4DB96C8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  int v6 = objc_msgSend_requiresDeviceID(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = *(void **)(a1 + 32);
  if (v6)
  {
    uint64_t v8 = objc_msgSend_container(v7, v4, v5);

    if (!v8)
    {
      uint64_t v30 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v9, v10);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v30, v31, *(void *)(a1 + 40), *(void *)(a1 + 32), @"CKDURLRequest.m", 1814, @"You must set the container");
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v11 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void **)(a1 + 32);
      uint64_t v15 = v11;
      int v18 = objc_msgSend_requestUUID(v14, v16, v17);
      uint64_t v21 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v19, v20);
      int v32 = 138543618;
      uint64_t v33 = v18;
      __int16 v34 = 2114;
      uint64_t v35 = v21;
      _os_log_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%{public}@ Requires device id, getting it\"", (uint8_t *)&v32, 0x16u);
    }
    uint64_t v22 = objc_msgSend_container(*(void **)(a1 + 32), v12, v13);
    uint64_t v25 = objc_msgSend_deviceID(v22, v23, v24);
    objc_msgSend_setDeviceID_(*(void **)(a1 + 32), v26, (uint64_t)v25);

    return objc_msgSend__acquireZoneGates(*(void **)(a1 + 32), v27, v28);
  }
  else
  {
    return objc_msgSend__acquireZoneGates(v7, v4, v5);
  }
}

void sub_1C4DB9928(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void **)(a1 + 32);
  uint64_t v5 = objc_msgSend_container(*(void **)(a1 + 32), a2, a3);
  int v8 = objc_msgSend_requiresTokenRegistration(*v4, v6, v7);
  uint64_t v11 = objc_msgSend_deviceContext(v5, v9, v10);
  uint64_t v14 = objc_msgSend_pushBehavior(v11, v12, v13);

  if (v14) {
    int v17 = v8;
  }
  else {
    int v17 = 0;
  }
  if (v17 != 1)
  {
LABEL_20:
    int v43 = 0;
    goto LABEL_21;
  }
  int v18 = objc_msgSend_account(v5, v15, v16);
  uint64_t v21 = objc_msgSend_accountType(v18, v19, v20);

  if (v21 == 1)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v24 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v25 = *(void **)(a1 + 32);
      uint64_t v26 = v24;
      uint64_t v29 = objc_msgSend_ckShortDescription(v25, v27, v28);
      *(_DWORD *)buf = 138543362;
      id v101 = v29;
      _os_log_debug_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_DEBUG, "Not registering push token for anonymous account: %{public}@", buf, 0xCu);
    }
    goto LABEL_20;
  }
  if ((objc_msgSend_canAuthWithCloudKit(v5, v22, v23) & 1) == 0)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v42 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      long long v90 = *(void **)(a1 + 32);
      long long v91 = v42;
      long long v94 = objc_msgSend_ckShortDescription(v90, v92, v93);
      *(_DWORD *)buf = 138543362;
      id v101 = v94;
      _os_log_debug_impl(&dword_1C4CFF000, v91, OS_LOG_TYPE_DEBUG, "Not registering push token for account that can't auth: %{public}@", buf, 0xCu);
    }
    goto LABEL_20;
  }
  int v32 = objc_msgSend_entitlements(v5, v30, v31);
  int hasOutOfProcessUIEntitlement = objc_msgSend_hasOutOfProcessUIEntitlement(v32, v33, v34);

  if (hasOutOfProcessUIEntitlement)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v36 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v37 = *(void **)(a1 + 32);
      __int16 v38 = v36;
      long long v41 = objc_msgSend_ckShortDescription(v37, v39, v40);
      *(_DWORD *)buf = 138543362;
      id v101 = v41;
      _os_log_debug_impl(&dword_1C4CFF000, v38, OS_LOG_TYPE_DEBUG, "Not registering push token for OOP UI container operation: %{public}@", buf, 0xCu);
    }
    goto LABEL_20;
  }
  if (CKIsRunningInSyncBubble())
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    long long v84 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      id v85 = *(void **)(a1 + 32);
      long long v86 = v84;
      long long v89 = objc_msgSend_ckShortDescription(v85, v87, v88);
      *(_DWORD *)buf = 138543362;
      id v101 = v89;
      _os_log_debug_impl(&dword_1C4CFF000, v86, OS_LOG_TYPE_DEBUG, "Not registering push token, we're in a sync bubble: %{public}@", buf, 0xCu);
    }
    goto LABEL_20;
  }
  int v43 = 1;
LABEL_21:
  uint64_t v46 = objc_msgSend_operation(*(void **)(a1 + 32), v15, v16);
  __int16 v47 = (unsigned char *)MEMORY[0x1E4F1A4E0];
  if (v43)
  {
    if (!v5)
    {
      long long v95 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v44, v45);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v95, v96, *(void *)(a1 + 40), *(void *)(a1 + 32));
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v48 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v51 = *(void **)(a1 + 32);
      uint64_t v52 = v48;
      uint64_t v55 = objc_msgSend_requestUUID(v51, v53, v54);
      uint64_t v58 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v56, v57);
      uint64_t v61 = objc_msgSend_entitlements(v5, v59, v60);
      int hasCloudKitSystemServiceEntitlement = objc_msgSend_hasCloudKitSystemServiceEntitlement(v61, v62, v63);
      *(_DWORD *)buf = 138543874;
      id v101 = v55;
      __int16 v102 = 2114;
      uint64_t v103 = v58;
      __int16 v104 = 1024;
      int v105 = hasCloudKitSystemServiceEntitlement;
      _os_log_impl(&dword_1C4CFF000, v52, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%{public}@ Requires push token registration, doing so. isCKSystemService=%d\"", buf, 0x1Cu);
    }
    if (*v47
      && (objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v49, v50),
          uint64_t v65 = objc_claimAutoreleasedReturnValue(),
          objc_msgSend_objectForKeyedSubscript_(v65, v66, @"WaitForTokenRegistration"),
          id v67 = objc_claimAutoreleasedReturnValue(),
          int v70 = objc_msgSend_BOOLValue(v67, v68, v69),
          v67,
          v65,
          v70))
    {
      dispatch_semaphore_t v71 = dispatch_semaphore_create(0);
    }
    else
    {
      dispatch_semaphore_t v71 = 0;
    }
    objc_initWeak((id *)buf, *(id *)(a1 + 32));
    uint64_t v74 = objc_msgSend_deviceContext(v46, v72, v73);
    uint64_t v77 = objc_msgSend_tokenRegistrationScheduler(v74, v75, v76);

    v97[0] = MEMORY[0x1E4F143A8];
    v97[1] = 3221225472;
    v97[2] = sub_1C4DB9FD0;
    v97[3] = &unk_1E64F20B8;
    objc_copyWeak(&v99, (id *)buf);
    uint64_t v78 = v71;
    long long v98 = v78;
    objc_msgSend_registerTokenForAdopterContainer_completionBlock_(v77, v79, (uint64_t)v5, v97);
    if (*v47 && v78) {
      dispatch_semaphore_wait(v78, 0xFFFFFFFFFFFFFFFFLL);
    }

    objc_destroyWeak(&v99);
    objc_destroyWeak((id *)buf);
  }
  if (*v47
    && (objc_msgSend_isErrorInducerRequest(*(void **)(a1 + 32), v44, v45) & 1) == 0
    && (objc_msgSend_operationInfo(v46, v44, v45),
        uint64_t v80 = objc_claimAutoreleasedReturnValue(),
        int v83 = objc_msgSend_wantsDaemonRequestCallbacks(v80, v81, v82),
        v80,
        v83))
  {
    objc_msgSend__performWillSendTestCallback(*(void **)(a1 + 32), v44, v45);
  }
  else
  {
    objc_msgSend__performRequest(*(void **)(a1 + 32), v44, v45);
  }
}

void sub_1C4DB9FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4DB9FD0(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v5 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = v5;
      uint64_t v10 = objc_msgSend_requestUUID(WeakRetained, v8, v9);
      uint64_t v13 = objc_msgSend_ckShortDescription(WeakRetained, v11, v12);
      int v14 = 138543874;
      uint64_t v15 = v10;
      __int16 v16 = 2114;
      int v17 = v13;
      __int16 v18 = 2112;
      id v19 = v3;
      _os_log_error_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_ERROR, "req: %{public}@, \"%{public}@ Failed to register push tokens: %@\"", (uint8_t *)&v14, 0x20u);
    }
  }
  if (*MEMORY[0x1E4F1A4E0])
  {
    int v6 = *(NSObject **)(a1 + 32);
    if (v6) {
      dispatch_semaphore_signal(v6);
    }
  }
}

void sub_1C4DBA1AC(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1C4DBA414;
  aBlock[3] = &unk_1E64F05C8;
  void aBlock[4] = *(void *)(a1 + 32);
  uint64_t v2 = (void (**)(void))_Block_copy(aBlock);
  uint64_t v5 = objc_msgSend_operation(*(void **)(a1 + 32), v3, v4);
  int v8 = objc_msgSend_clientOperationCallbackProxy(v5, v6, v7);
  if (v8)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v9 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEBUG))
    {
      __int16 v16 = *(void **)(a1 + 32);
      int v17 = v9;
      uint64_t v20 = objc_msgSend_requestUUID(v16, v18, v19);
      uint64_t v23 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v21, v22);
      *(_DWORD *)buf = 138543618;
      uint64_t v28 = v20;
      __int16 v29 = 2114;
      uint64_t v30 = v23;
      _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"Request %{public}@ calling out to client about lifecycle transition\"", buf, 0x16u);
    }
    uint64_t v10 = (objc_class *)objc_opt_class();
    uint64_t v11 = NSStringFromClass(v10);
    int v14 = objc_msgSend_testRequestProperties(*(void **)(a1 + 32), v12, v13);
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = sub_1C4DBA484;
    v24[3] = &unk_1E64F26C8;
    void v24[4] = *(void *)(a1 + 32);
    uint64_t v25 = v2;
    objc_msgSend_handleDaemonRequestWillSendWithClassName_testRequestProperties_replyBlock_(v8, v15, (uint64_t)v11, v14, v24);
  }
  else
  {
    v2[2](v2);
  }
}

uint64_t sub_1C4DBA414(uint64_t a1, const char *a2, uint64_t a3)
{
  if ((objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3) & 1) != 0
    || objc_msgSend_isFinished(*(void **)(a1 + 32), v4, v5))
  {
    uint64_t v7 = *(void **)(a1 + 32);
    return objc_msgSend_finishWithError_(v7, v4, 0);
  }
  else
  {
    uint64_t v9 = *(void **)(a1 + 32);
    return objc_msgSend__performRequest(v9, v4, v6);
  }
}

void sub_1C4DBA484(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A548];
  if (v6)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    int v8 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      int v16 = 138412290;
      id v17 = v6;
      _os_log_error_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_ERROR, "Asked client what to do for a daemon request, it responded with an error %@", (uint8_t *)&v16, 0xCu);
      if (!v5) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v7);
    }
    uint64_t v10 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void **)(a1 + 32);
      uint64_t v12 = v10;
      uint64_t v15 = objc_msgSend_ckShortDescription(v11, v13, v14);
      int v16 = 138543618;
      id v17 = v15;
      __int16 v18 = 2112;
      id v19 = v5;
      _os_log_debug_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_DEBUG, "Request %{public}@ was told to take action \"%@\"", (uint8_t *)&v16, 0x16u);

      if (!v5) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  if (v5) {
LABEL_11:
  }
    objc_msgSend_takeActionOnURLRequest_(v5, v9, *(void *)(a1 + 32));
LABEL_12:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1C4DBA6B8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_isErrorInducerRequest(*(void **)(a1 + 32), a2, a3))
  {
    id v6 = 0;
    uint64_t v7 = objc_msgSend_count(0, v4, v5);
  }
  else
  {
    id v6 = objc_msgSend_zoneIDsToLock(*(void **)(a1 + 32), v4, v5);
    uint64_t v7 = objc_msgSend_count(v6, v10, v11);
  }
  if (v7)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v12 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void **)(a1 + 32);
      int v16 = v12;
      id v19 = objc_msgSend_requestUUID(v15, v17, v18);
      uint64_t v22 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v20, v21);
      int v25 = objc_msgSend_expectDelayBeforeRequestBegins(*(void **)(a1 + 32), v23, v24);
      uint64_t v26 = @"false";
      *(_DWORD *)buf = 138543874;
      __int16 v38 = v19;
      if (v25) {
        uint64_t v26 = @"true";
      }
      __int16 v39 = 2112;
      uint64_t v40 = v22;
      __int16 v41 = 2114;
      uint64_t v42 = v26;
      _os_log_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"%@ Requires zone id gates, grabbing them from gatekeeper, expectDelay %{public}@\"", buf, 0x20u);
    }
    uint64_t v27 = objc_msgSend_container(*(void **)(a1 + 32), v13, v14);
    uint64_t v30 = objc_msgSend_gatekeeper(v27, v28, v29);
    uint64_t v31 = *(void **)(a1 + 32);
    uint64_t v34 = objc_msgSend_expectDelayBeforeRequestBegins(v31, v32, v33);
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    _OWORD v36[2] = sub_1C4DBA8E0;
    v36[3] = &unk_1E64F26F0;
    v36[4] = *(void *)(a1 + 32);
    objc_msgSend_registerWaiter_forZoneIDs_expectDelayBeforeRequestBegins_completionHandler_(v30, v35, (uint64_t)v31, v6, v34, v36);
  }
  else
  {
    objc_msgSend__prepareAuthTokens(*(void **)(a1 + 32), v8, v9);
  }
}

void sub_1C4DBA8E0(uint64_t a1, const char *a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  if (a2)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    objc_msgSend__prepareAuthTokens(v4, a2, a3);
  }
  else
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], a2, *MEMORY[0x1E4F19DD8], 1000, @"Can't acquire zone lock, failing the request");
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_finishWithError_(v3, v5, (uint64_t)v6);
  }
}

void sub_1C4DBA9E8(uint64_t a1)
{
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v2 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1C4DBAAB0;
  v4[3] = &unk_1E64F1858;
  void v4[4] = v2;
  objc_copyWeak(&v5, &location);
  objc_msgSend_prepareRequestWithCompletion_(v2, v3, (uint64_t)v4);
  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

void sub_1C4DBAA94(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C4DBAAB0(uint64_t a1, const char *a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    objc_msgSend_finishWithError_(v2, a2, (uint64_t)a2);
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend__prepareCloudKitAuthToken(WeakRetained, v3, v4);
  }
}

void sub_1C4DBAD2C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Block_object_dispose((const void *)(v2 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DBAD5C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4DBAD6C(uint64_t a1)
{
}

void sub_1C4DBAD74(uint64_t a1, const char *a2, uint64_t a3)
{
  if (objc_msgSend_usesCloudKitAuthToken(*(void **)(a1 + 32), a2, a3))
  {
    id v6 = *(void **)(a1 + 32);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = sub_1C4DBAEEC;
    v17[3] = &unk_1E64F2718;
    objc_copyWeak(&v19, (id *)(a1 + 56));
    long long v12 = *(_OWORD *)(a1 + 40);
    id v7 = (id)v12;
    long long v18 = v12;
    objc_msgSend__authTokenWithCompletionHandler_(v6, v8, (uint64_t)v17);

    objc_destroyWeak(&v19);
  }
  if (objc_msgSend_usesiCloudAuthToken(*(void **)(a1 + 32), v4, v5, v12))
  {
    uint64_t v9 = *(void **)(a1 + 32);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = sub_1C4DBB3AC;
    void v14[3] = &unk_1E64F2718;
    objc_copyWeak(&v16, (id *)(a1 + 56));
    long long v13 = *(_OWORD *)(a1 + 40);
    id v10 = (id)v13;
    long long v15 = v13;
    objc_msgSend__authTokenWithCompletionHandler_(v9, v11, (uint64_t)v14);

    objc_destroyWeak(&v16);
  }
}

void sub_1C4DBAED4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DBAEEC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend_setCloudKitAuthToken_(WeakRetained, v8, v5);
  if (*MEMORY[0x1E4F1A4E0])
  {
    uint64_t v11 = objc_msgSend_unitTestOverrides(WeakRetained, v9, v10);
    long long v13 = objc_msgSend_objectForKeyedSubscript_(v11, v12, @"TestContainerSpecificOpWithNoCloudKitTokenNoRetry");

    if (v13)
    {
      objc_msgSend_setCloudKitAuthToken_(WeakRetained, v14, 0);
      objc_msgSend_setDidRetryAuth_(WeakRetained, v16, 1);
LABEL_6:

      uint64_t v5 = 0;
LABEL_7:
      id v6 = 0;
      goto LABEL_26;
    }
    id v17 = objc_msgSend_unitTestOverrides(WeakRetained, v14, v15);
    id v19 = objc_msgSend_objectForKeyedSubscript_(v17, v18, @"TestAuthTokenRenewalFailsBecauseRenewedTokenIsStale");

    if (v19)
    {
      objc_msgSend_setCloudKitAuthToken_(WeakRetained, v20, 0);
      objc_msgSend_setDidRetryAuth_(WeakRetained, v22, 0);
      goto LABEL_6;
    }
    uint64_t v23 = objc_msgSend_unitTestOverrides(WeakRetained, v20, v21);
    int v25 = objc_msgSend_objectForKeyedSubscript_(v23, v24, @"TestNoCloudKitTokenInURLRequestNoRetry");

    if (v25)
    {
      objc_msgSend_setCloudKitAuthToken_(WeakRetained, v26, 0);
      objc_msgSend_setDidRetryAuth_(WeakRetained, v28, 1);

      goto LABEL_7;
    }
    if ((objc_msgSend_didRetryAuth(WeakRetained, v26, v27) & 1) != 0
      || (objc_msgSend_unitTestOverrides(WeakRetained, v29, v30),
          uint64_t v31 = objc_claimAutoreleasedReturnValue(),
          objc_msgSend_objectForKeyedSubscript_(v31, v32, @"TestContainerSpecificOpWithBadCloudKitToken"),
          uint64_t v33 = objc_claimAutoreleasedReturnValue(),
          v33,
          v31,
          !v33))
    {
      if ((objc_msgSend_didFetchNilAuthToken(WeakRetained, v29, v30) & 1) == 0)
      {
        uint64_t v36 = objc_msgSend_unitTestOverrides(WeakRetained, v9, v10);
        __int16 v38 = objc_msgSend_objectForKeyedSubscript_(v36, v37, @"TestContainerSpecificOpWithNoCloudKitToken");

        if (v38)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          __int16 v39 = (void *)*MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
          {
            uint64_t v68 = v39;
            dispatch_semaphore_t v71 = objc_msgSend_requestUUID(WeakRetained, v69, v70);
            *(_DWORD *)buf = 138543362;
            uint64_t v73 = v71;
            _os_log_debug_impl(&dword_1C4CFF000, v68, OS_LOG_TYPE_DEBUG, "Using nil CloudKit token for request %{public}@", buf, 0xCu);
          }
          objc_msgSend_setDidFetchNilAuthToken_(WeakRetained, v40, 1);
          objc_msgSend_setCloudKitAuthToken_(WeakRetained, v41, 0);

          uint64_t v42 = (void *)MEMORY[0x1E4F1A280];
          uint64_t v43 = *MEMORY[0x1E4F19DD8];
          uint64_t v46 = objc_msgSend_container(WeakRetained, v44, v45);
          uint64_t v49 = objc_msgSend_account(v46, v47, v48);
          uint64_t v52 = objc_msgSend_accountID(v49, v50, v51);
          uint64_t v54 = objc_msgSend_errorWithDomain_code_format_(v42, v53, v43, 1002, @"Didn't get CloudKit credentials for account %@ with no error", v52);

          uint64_t v5 = 0;
          id v6 = (id)v54;
        }
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v34 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        __int16 v64 = v34;
        id v67 = objc_msgSend_requestUUID(WeakRetained, v65, v66);
        *(_DWORD *)buf = 138543362;
        uint64_t v73 = v67;
        _os_log_debug_impl(&dword_1C4CFF000, v64, OS_LOG_TYPE_DEBUG, "Using a fake CloudKit token for request %{public}@", buf, 0xCu);
      }
      objc_msgSend_setCloudKitAuthToken_(WeakRetained, v35, @"tacos");
    }
  }
  if (v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v6);
  }
LABEL_26:
  if (!(v5 | *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)))
  {
    uint64_t v55 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v9, *MEMORY[0x1E4F19DD8], 2011, @"Didn't get a CloudKit auth token");
    uint64_t v56 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v57 = *(void **)(v56 + 40);
    *(void *)(v56 + 40) = v55;
  }
  uint64_t v58 = objc_msgSend_container(WeakRetained, v9, v10);
  uint64_t v60 = objc_msgSend_possiblyWrappedAuthTokenErrorGivenError_(v58, v59, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  uint64_t v61 = *(void *)(*(void *)(a1 + 40) + 8);
  __int16 v62 = *(void **)(v61 + 40);
  *(void *)(v61 + 40) = v60;

  objc_msgSend_setLastRetryAuthError_(WeakRetained, v63, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4DBB3AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend_setICloudAuthToken_(WeakRetained, v8, v5);
  if (*MEMORY[0x1E4F1A4E0])
  {
    if ((objc_msgSend_didRetryAuth(WeakRetained, v9, v10) & 1) != 0
      || (objc_msgSend_unitTestOverrides(WeakRetained, v11, v12),
          long long v13 = objc_claimAutoreleasedReturnValue(),
          objc_msgSend_objectForKeyedSubscript_(v13, v14, @"TestContainerSpecificOpWithBadiCloudToken"),
          uint64_t v15 = objc_claimAutoreleasedReturnValue(),
          v15,
          v13,
          !v15))
    {
      if ((objc_msgSend_didFetchNilAuthToken(WeakRetained, v11, v12) & 1) == 0)
      {
        long long v18 = objc_msgSend_unitTestOverrides(WeakRetained, v9, v10);
        uint64_t v20 = objc_msgSend_objectForKeyedSubscript_(v18, v19, @"TestContainerSpecificOpWithNoiCloudToken");

        if (v20)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          uint64_t v21 = (void *)*MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
          {
            uint64_t v50 = v21;
            int v53 = objc_msgSend_requestUUID(WeakRetained, v51, v52);
            *(_DWORD *)buf = 138543362;
            uint64_t v55 = v53;
            _os_log_debug_impl(&dword_1C4CFF000, v50, OS_LOG_TYPE_DEBUG, "Using nil iCloud token for request %{public}@", buf, 0xCu);
          }
          objc_msgSend_setDidFetchNilAuthToken_(WeakRetained, v22, 1);
          objc_msgSend_setICloudAuthToken_(WeakRetained, v23, 0);

          uint64_t v24 = (void *)MEMORY[0x1E4F1A280];
          uint64_t v25 = *MEMORY[0x1E4F19DD8];
          uint64_t v28 = objc_msgSend_container(WeakRetained, v26, v27);
          uint64_t v31 = objc_msgSend_account(v28, v29, v30);
          uint64_t v34 = objc_msgSend_accountID(v31, v32, v33);
          uint64_t v36 = objc_msgSend_errorWithDomain_code_format_(v24, v35, v25, 1002, @"Didn't get mmeAuthToken credentials for account %@ with no error", v34);

          uint64_t v5 = 0;
          id v6 = (id)v36;
        }
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v16 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v46 = v16;
        uint64_t v49 = objc_msgSend_requestUUID(WeakRetained, v47, v48);
        *(_DWORD *)buf = 138543362;
        uint64_t v55 = v49;
        _os_log_debug_impl(&dword_1C4CFF000, v46, OS_LOG_TYPE_DEBUG, "Using a fake iCloud token for request %{public}@", buf, 0xCu);
      }
      objc_msgSend_setICloudAuthToken_(WeakRetained, v17, @"tacos");
    }
  }
  if (v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v6);
  }
  if (!(v5 | *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)))
  {
    uint64_t v37 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v9, *MEMORY[0x1E4F19DD8], 2011, @"Didn't get an iCloud auth token");
    uint64_t v38 = *(void *)(*(void *)(a1 + 40) + 8);
    __int16 v39 = *(void **)(v38 + 40);
    *(void *)(v38 + 40) = v37;
  }
  uint64_t v40 = objc_msgSend_container(WeakRetained, v9, v10);
  uint64_t v42 = objc_msgSend_possiblyWrappedAuthTokenErrorGivenError_(v40, v41, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  uint64_t v43 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v44 = *(void **)(v43 + 40);
  *(void *)(v43 + 40) = v42;

  objc_msgSend_setLastRetryAuthError_(WeakRetained, v45, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4DBB784(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (objc_msgSend_isFinished(WeakRetained, v3, v4))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v7 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_INFO))
    {
      int v8 = v7;
      uint64_t v11 = objc_msgSend_requestUUID(WeakRetained, v9, v10);
      *(_DWORD *)uint64_t v33 = 138543362;
      *(void *)&void v33[4] = v11;
      _os_log_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_INFO, "req: %{public}@, \"Request was finished while waiting for auth tokens\"", v33, 0xCu);
    }
    goto LABEL_19;
  }
  if (objc_msgSend_sendRequestAnonymously(WeakRetained, v5, v6))
  {
LABEL_18:
    objc_msgSend__registerPushTokens(WeakRetained, v12, v13, *(_OWORD *)v33);
    goto LABEL_19;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v22 = (void *)*MEMORY[0x1E4F1A530];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_INFO)) {
      goto LABEL_18;
    }
    id v17 = v22;
    uint64_t v20 = objc_msgSend_requestUUID(WeakRetained, v23, v24);
    *(_DWORD *)uint64_t v33 = 138543362;
    *(void *)&void v33[4] = v20;
    uint64_t v21 = "req: %{public}@, \"Fetched auth tokens\"";
LABEL_17:
    _os_log_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_INFO, v21, v33, 0xCu);

    goto LABEL_18;
  }
  int v14 = objc_msgSend_allowsAnonymousAccount(WeakRetained, v12, v13);
  uint64_t v15 = (void *)*MEMORY[0x1E4F1A548];
  if (v14)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v15);
    }
    id v16 = (void *)*MEMORY[0x1E4F1A530];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_INFO)) {
      goto LABEL_18;
    }
    id v17 = v16;
    uint64_t v20 = objc_msgSend_requestUUID(WeakRetained, v18, v19);
    *(_DWORD *)uint64_t v33 = 138543362;
    *(void *)&void v33[4] = v20;
    uint64_t v21 = "req: %{public}@, \"Failed to fetch auth tokens, continuing with anonymous access\"";
    goto LABEL_17;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v15);
  }
  uint64_t v25 = (void *)*MEMORY[0x1E4F1A530];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_INFO))
  {
    uint64_t v28 = v25;
    uint64_t v31 = objc_msgSend_requestUUID(WeakRetained, v29, v30);
    uint64_t v32 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    *(_DWORD *)uint64_t v33 = 138543618;
    *(void *)&void v33[4] = v31;
    *(_WORD *)&v33[12] = 2112;
    *(void *)&v33[14] = v32;
    _os_log_impl(&dword_1C4CFF000, v28, OS_LOG_TYPE_INFO, "req: %{public}@, \"Encountered an error while fetching auth tokens: %@\"", v33, 0x16u);
  }
  objc_msgSend__handleAuthFailure(WeakRetained, v26, v27);
LABEL_19:
}

void sub_1C4DBBB18(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v349 = *MEMORY[0x1E4F143B8];
  objc_msgSend_tearDownResources(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = objc_msgSend_container(*(void **)(a1 + 32), v4, v5);
  uint64_t v9 = objc_msgSend_signpost(*(void **)(a1 + 32), v7, v8);

  if (v9)
  {
    uint64_t v12 = objc_msgSend_signpost(*(void **)(a1 + 32), v10, v11);
    uint64_t v15 = objc_msgSend_log(v12, v13, v14);

    long long v18 = objc_msgSend_signpost(*(void **)(a1 + 32), v16, v17);
    os_signpost_id_t v21 = objc_msgSend_identifier(v18, v19, v20);

    if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v15, OS_SIGNPOST_EVENT, v21, "CKDURLRequest", "Performing", buf, 2u);
    }
  }
  objc_msgSend_hash(*(void **)(a1 + 32), v10, v11);
  kdebug_trace();
  uint64_t v22 = *(void **)(a1 + 32);
  id v336 = 0;
  char v24 = objc_msgSend_validate_(v22, v23, (uint64_t)&v336);
  id v27 = v336;
  uint64_t v28 = (void *)MEMORY[0x1E4F1A550];
  if (v24)
  {
    uint64_t v29 = objc_msgSend_url(*(void **)(a1 + 32), v25, v26);
    uint64_t v30 = (void *)*MEMORY[0x1E4F1A548];
    if (!v29)
    {
      if (*v28 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v30);
      }
      uint64_t v180 = (void *)*MEMORY[0x1E4F1A530];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_ERROR))
      {
        v313 = *(void **)(a1 + 32);
        v314 = v180;
        v317 = objc_msgSend_requestUUID(v313, v315, v316);
        v320 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v318, v319);
        *(_DWORD *)buf = 138543618;
        v338 = v317;
        __int16 v339 = 2114;
        v340 = v320;
        _os_log_error_impl(&dword_1C4CFF000, v314, OS_LOG_TYPE_ERROR, "req: %{public}@, \"%{public}@ Request does not have a URL. Failing.\"", buf, 0x16u);
      }
      uint64_t v181 = *(void **)(a1 + 32);
      uint64_t v182 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v183 = *MEMORY[0x1E4F19DD8];
      uint64_t v184 = (objc_class *)objc_opt_class();
      NSStringFromClass(v184);
      id v185 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v187 = objc_msgSend_errorWithDomain_code_format_(v182, v186, v183, 2005, @"Request (%@) does not have a URL", v185);
      objc_msgSend_finishWithError_(v181, v188, (uint64_t)v187);
      goto LABEL_92;
    }
    if (*v28 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v30);
    }
    uint64_t v31 = (os_log_t *)MEMORY[0x1E4F1A530];
    uint64_t v32 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = *(void **)(a1 + 32);
      uint64_t v34 = v32;
      uint64_t v37 = objc_msgSend_requestUUID(v33, v35, v36);
      int v40 = objc_msgSend_usesBackgroundSession(*(void **)(a1 + 32), v38, v39);
      int v43 = objc_msgSend_allowsCellularAccess(*(void **)(a1 + 32), v41, v42);
      uint64_t v46 = v6;
      id v47 = v27;
      uint64_t v48 = v29;
      uint64_t v49 = v31;
      int v50 = objc_msgSend_allowsExpensiveNetworkAccess(*(void **)(a1 + 32), v44, v45);
      objc_msgSend_timeoutIntervalForRequest(*(void **)(a1 + 32), v51, v52);
      uint64_t v54 = v53;
      objc_msgSend_timeoutIntervalForResource(*(void **)(a1 + 32), v55, v56);
      *(_DWORD *)buf = 138544898;
      v338 = v37;
      __int16 v339 = 2112;
      v340 = v48;
      __int16 v341 = 1024;
      *(_DWORD *)v342 = v40;
      *(_WORD *)&v342[4] = 1024;
      *(_DWORD *)&v342[6] = v43;
      __int16 v343 = 1024;
      int v344 = v50;
      uint64_t v31 = v49;
      uint64_t v29 = v48;
      id v27 = v47;
      uint64_t v6 = v46;
      uint64_t v28 = (void *)MEMORY[0x1E4F1A550];
      __int16 v345 = 2048;
      uint64_t v346 = v54;
      __int16 v347 = 2048;
      uint64_t v348 = v57;
      _os_log_impl(&dword_1C4CFF000, v34, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Performing request with URL=%@ background=%d allowCellular=%d allowExpensive=%d (timeouts %.1lfs, %.1lfs)\"", buf, 0x3Cu);
    }
    id v58 = objc_alloc(MEMORY[0x1E4F18D50]);
    uint64_t v60 = objc_msgSend_initWithURL_(v58, v59, (uint64_t)v29);
    uint64_t v63 = objc_msgSend_httpMethod(*(void **)(a1 + 32), v61, v62);
    objc_msgSend_setHTTPMethod_(v60, v64, (uint64_t)v63);

    if (objc_msgSend_hasRequestBody(*(void **)(a1 + 32), v65, v66))
    {
      uint64_t v69 = objc_msgSend_requestContentType(*(void **)(a1 + 32), v67, v68);
      objc_msgSend_setValue_forHTTPHeaderField_(v60, v70, (uint64_t)v69, 0x1F204D130);

      objc_msgSend_prepareRequestOperationsForRequest_(*(void **)(a1 + 32), v71, (uint64_t)v60);
    }
    uint64_t v72 = objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], v67, v68);
    int v75 = objc_msgSend_sendDebugHeader(v72, v73, v74);

    if (v75) {
      objc_msgSend_setValue_forHTTPHeaderField_(v60, v76, @"DEBUG", 0x1F204D1F0);
    }
    uint64_t v78 = objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], v76, v77);
    uint64_t v81 = objc_msgSend_testRunIDHeader(v78, v79, v80);

    if (objc_msgSend_length(v81, v82, v83)) {
      objc_msgSend_setValue_forHTTPHeaderField_(v60, v84, (uint64_t)v81, 0x1F204D210);
    }
    v333 = v81;
    long long v86 = objc_msgSend_acceptContentType(*(void **)(a1 + 32), v84, v85);
    objc_msgSend_setValue_forHTTPHeaderField_(v60, v87, (uint64_t)v86, 0x1F204D0B0);

    objc_msgSend_setValue_forHTTPHeaderField_(v60, v88, @"gzip", 0x1F204D0D0);
    long long v91 = objc_msgSend_URL(v60, v89, v90);
    long long v94 = objc_msgSend_scheme(v91, v92, v93);
    int isEqualToString = objc_msgSend_isEqualToString_(v94, v95, @"https");

    if (isEqualToString)
    {
      id v99 = sub_1C4DFB1A0();
      if (*MEMORY[0x1E4F1A4E0])
      {
        uint64_t v100 = v6;
        id v101 = v27;
        __int16 v102 = v29;
        uint64_t v103 = v31;
        __int16 v104 = objc_msgSend_operation(*(void **)(a1 + 32), v97, v98);
        uint64_t v107 = objc_msgSend_unitTestOverrides(v104, v105, v106);
        __int16 v109 = objc_msgSend_objectForKeyedSubscript_(v107, v108, @"X-MMe-Client-Info");

        if (v109)
        {
          id v110 = v109;

          id v99 = v110;
        }

        uint64_t v31 = v103;
        uint64_t v29 = v102;
        id v27 = v101;
        uint64_t v6 = v100;
        uint64_t v28 = (void *)MEMORY[0x1E4F1A550];
      }
      objc_msgSend_setValue_forHTTPHeaderField_(v60, v97, (uint64_t)v99, 0x1F2049970);
    }
    uint64_t v111 = sub_1C4DFB038();
    objc_msgSend_setValue_forHTTPHeaderField_(v60, v112, (uint64_t)v111, 0x1F204D110);

    uint64_t v115 = objc_msgSend_requestUUID(*(void **)(a1 + 32), v113, v114);
    objc_msgSend_setValue_forHTTPHeaderField_(v60, v116, (uint64_t)v115, *MEMORY[0x1E4F19C88]);

    uint64_t v119 = objc_msgSend_operationIDForProtobuf(*(void **)(a1 + 32), v117, v118);
    objc_msgSend_setValue_forHTTPHeaderField_(v60, v120, (uint64_t)v119, 0x1F204D170);

    uint64_t v123 = objc_msgSend_operationGroupID(*(void **)(a1 + 32), v121, v122);

    if (v123)
    {
      long long v126 = objc_msgSend_operationGroupID(*(void **)(a1 + 32), v124, v125);
      objc_msgSend_setValue_forHTTPHeaderField_(v60, v127, (uint64_t)v126, 0x1F204D190);
    }
    uint64_t v128 = objc_msgSend_operationGroupName(*(void **)(a1 + 32), v124, v125);
    uint64_t v131 = objc_msgSend_length(v128, v129, v130);

    if (v131)
    {
      unint64_t v134 = objc_msgSend_container(*(void **)(a1 + 32), v132, v133);
      __int16 v137 = objc_msgSend_containerID(v134, v135, v136);
      uint64_t v140 = objc_msgSend_specialContainerType(v137, v138, v139);

      if (v140 == 5)
      {
        uint64_t v143 = objc_msgSend_operationGroupName(*(void **)(a1 + 32), v141, v142);
        uint64_t v146 = objc_msgSend_CKProbablySafeHeaderValue(v143, v144, v145);
        objc_msgSend_setValue_forHTTPHeaderField_(v60, v147, (uint64_t)v146, 0x1F204D1B0);
      }
      uint64_t v148 = objc_msgSend_operationGroupName(*(void **)(a1 + 32), v141, v142);
      long long v151 = objc_msgSend_CKBase64EncodedStructuredHeaderValueByteSequence(v148, v149, v150);
      objc_msgSend_setValue_forHTTPHeaderField_(v60, v152, (uint64_t)v151, 0x1F204D1D0);
    }
    objc_msgSend_duetPreClearedMode(*(void **)(a1 + 32), v132, v133);
    uint64_t v153 = CKStringForDuetPreClearedMode();
    objc_msgSend_setValue_forHTTPHeaderField_(v60, v154, (uint64_t)v153, 0x1F204D350);

    uint64_t v159 = objc_msgSend_applicationBundleIdentifierForContainerAccess(*(void **)(a1 + 32), v155, v156);
    if (v159) {
      objc_msgSend_setValue_forHTTPHeaderField_(v60, v157, v159, 0x1F204D2B0);
    }
    v332 = (void *)v159;
    uint64_t v160 = objc_msgSend_applicationVersion(v6, v157, v158);
    objc_msgSend_setValue_forHTTPHeaderField_(v60, v161, (uint64_t)v160, 0x1F204D2D0);

    if (objc_msgSend_includeContainerServerInfo(*(void **)(a1 + 32), v162, v163))
    {
      uint64_t v166 = objc_msgSend_containerID(v6, v164, v165);
      uint64_t v169 = objc_msgSend_containerIdentifier(v166, v167, v168);

      if (*MEMORY[0x1E4F1A4E0])
      {
        uint64_t v172 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v170, v171);
        uint64_t v174 = objc_msgSend_objectForKeyedSubscript_(v172, v173, @"FakeContainerIdentifier");

        if (v174)
        {
          id v175 = v174;

          uint64_t v169 = v175;
        }
      }
      if (v169) {
        objc_msgSend_setValue_forHTTPHeaderField_(v60, v170, (uint64_t)v169, 0x1F204D2F0);
      }
    }
    else
    {
      objc_msgSend_setValue_forHTTPHeaderField_(v60, v164, @"com.apple.cloudkit.ckctl.container", 0x1F204D2F0);
    }
    uint64_t v189 = objc_msgSend_containerID(v6, v176, v177);
    objc_msgSend_environment(v189, v190, v191);
    uint64_t v192 = CKContainerEnvironmentString();
    objc_msgSend_setValue_forHTTPHeaderField_(v60, v193, (uint64_t)v192, 0x1F204D310);

    if (objc_msgSend_allowsAuthedAccount(*(void **)(a1 + 32), v194, v195)
      && (objc_msgSend_sendRequestAnonymously(*(void **)(a1 + 32), v196, v197) & 1) == 0)
    {
      uint64_t v199 = objc_msgSend_containerScopedUserID(v6, v196, v197);
      if (v199) {
        objc_msgSend_setValue_forHTTPHeaderField_(v60, v198, (uint64_t)v199, 0x1F204D370);
      }
    }
    if (objc_msgSend_usesCloudKitAuthToken(*(void **)(a1 + 32), v196, v197)
      && (objc_msgSend_sendRequestAnonymously(*(void **)(a1 + 32), v200, v201) & 1) == 0)
    {
      uint64_t v203 = objc_msgSend_cloudKitAuthToken(*(void **)(a1 + 32), v200, v201);
      if (v203) {
        objc_msgSend_setValue_forHTTPHeaderField_(v60, v202, (uint64_t)v203, 0x1F204D390);
      }
    }
    if (objc_msgSend_usesiCloudAuthToken(*(void **)(a1 + 32), v200, v201)
      && (objc_msgSend_sendRequestAnonymously(*(void **)(a1 + 32), v204, v205) & 1) == 0)
    {
      uint64_t v206 = objc_msgSend_account(v6, v204, v205);
      uint64_t v209 = objc_msgSend_dsid(v206, v207, v208);

      v212 = objc_msgSend_iCloudAuthToken(*(void **)(a1 + 32), v210, v211);
      if (objc_msgSend_length(v209, v213, v214) && objc_msgSend_length(v212, v215, v216))
      {
        v331 = objc_msgSend_stringWithFormat_(NSString, v217, @"%@:%@", v209, v212);
        v219 = objc_msgSend_dataUsingEncoding_(v331, v218, 5);
        v221 = objc_msgSend_base64EncodedStringWithOptions_(v219, v220, 0);
        v223 = objc_msgSend_stringWithFormat_(NSString, v222, @"Basic %@", v221);
        if (objc_msgSend_length(v223, v224, v225)) {
          objc_msgSend_setValue_forHTTPHeaderField_(v60, v226, (uint64_t)v223, 0x1F204D0F0);
        }

        uint64_t v28 = (void *)MEMORY[0x1E4F1A550];
      }
      else
      {
        if (*v28 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        v227 = (void *)*MEMORY[0x1E4F1A530];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_ERROR))
        {
          v326 = *(void **)(a1 + 32);
          v327 = v227;
          v330 = objc_msgSend_requestUUID(v326, v328, v329);
          *(_DWORD *)buf = 138543874;
          v338 = v330;
          __int16 v339 = 2112;
          v340 = v209;
          __int16 v341 = 2112;
          *(void *)v342 = v212;
          _os_log_error_impl(&dword_1C4CFF000, v327, OS_LOG_TYPE_ERROR, "req: %{public}@, \"Skipping authorization header field for dsid: %@, iCloudAuthToken: %@\"", buf, 0x20u);
        }
      }

      uint64_t v31 = (os_log_t *)MEMORY[0x1E4F1A530];
    }
    objc_msgSend_databaseScope(*(void **)(a1 + 32), v204, v205);
    v228 = CKDatabaseScopeString();
    objc_msgSend_setValue_forHTTPHeaderField_(v60, v229, (uint64_t)v228, 0x1F204D330);

    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_1C4DBCBCC;
    aBlock[3] = &unk_1E64F2790;
    id v185 = v60;
    id v335 = v185;
    v230 = _Block_copy(aBlock);
    v233 = objc_msgSend_additionalHeaderValues(*(void **)(a1 + 32), v231, v232);
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v233, v234, (uint64_t)v230);

    v237 = objc_msgSend_traceHeaderValues(*(void **)(a1 + 32), v235, v236);
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v237, v238, (uint64_t)v230);

    v241 = objc_msgSend_clientProvidedAdditionalHeaderValues(*(void **)(a1 + 32), v239, v240);
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v241, v242, (uint64_t)v230);

    if (*MEMORY[0x1E4F1A4E0])
    {
      v245 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v243, v244);
      v247 = objc_msgSend_objectForKeyedSubscript_(v245, v246, @"AllowJsonPayloadToBeReturned");

      if (v247) {
        objc_msgSend_setValue_forHTTPHeaderField_(v185, v243, @"1", @"X-CloudKit-Test-Json-Payload");
      }
    }
    if (objc_msgSend_shouldCompressBody(*(void **)(a1 + 32), v243, v244))
    {
      objc_msgSend_setValue_forHTTPHeaderField_(v185, v248, @"gzip", @"Content-Encoding");
      objc_msgSend_addValue_forHTTPHeaderField_(v185, v250, @"no-transform", @"Cache-Control");
    }
    int hasRequestBody = objc_msgSend_hasRequestBody(*(void **)(a1 + 32), v248, v249);
    v252 = (dispatch_block_t *)MEMORY[0x1E4F1A548];
    v253 = (void *)*MEMORY[0x1E4F1A548];
    if (hasRequestBody)
    {
      if (*v28 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v253);
      }
      os_log_t v254 = *v31;
      if (!os_log_type_enabled(*v31, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_86;
      }
      v257 = *(void **)(a1 + 32);
      v258 = v254;
      v261 = objc_msgSend_requestUUID(v257, v259, v260);
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v262, v263);
      v264 = v6;
      id v265 = v27;
      v266 = v29;
      v268 = v267 = v31;
      *(_DWORD *)buf = 138543618;
      v338 = v261;
      __int16 v339 = 2114;
      v340 = v268;
      v269 = "req: %{public}@, \"%{public}@ Outgoing request body is streamed\"";
    }
    else
    {
      if (*v28 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v253);
      }
      os_log_t v270 = *v31;
      if (!os_log_type_enabled(*v31, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_86;
      }
      v321 = *(void **)(a1 + 32);
      v258 = v270;
      v261 = objc_msgSend_requestUUID(v321, v322, v323);
      objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v324, v325);
      v264 = v6;
      id v265 = v27;
      v266 = v29;
      v268 = v267 = v31;
      *(_DWORD *)buf = 138543618;
      v338 = v261;
      __int16 v339 = 2114;
      v340 = v268;
      v269 = "req: %{public}@, \"%{public}@ Outgoing request body is empty\"";
    }
    _os_log_debug_impl(&dword_1C4CFF000, v258, OS_LOG_TYPE_DEBUG, v269, buf, 0x16u);

    v252 = (dispatch_block_t *)MEMORY[0x1E4F1A548];
    uint64_t v31 = v267;
    uint64_t v29 = v266;
    id v27 = v265;
    uint64_t v6 = v264;
    uint64_t v28 = (void *)MEMORY[0x1E4F1A550];

LABEL_86:
    if (objc_msgSend_networkServiceType(*(void **)(a1 + 32), v255, v256))
    {
      if (*v28 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], *v252);
      }
      os_log_t v273 = *v31;
      if (os_log_type_enabled(*v31, OS_LOG_TYPE_DEBUG))
      {
        v302 = *(void **)(a1 + 32);
        v303 = v273;
        v306 = objc_msgSend_requestUUID(v302, v304, v305);
        v309 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v307, v308);
        objc_msgSend_networkServiceType(*(void **)(a1 + 32), v310, v311);
        v312 = CKStringForNetworkServiceType();
        *(_DWORD *)buf = 138543874;
        v338 = v306;
        __int16 v339 = 2114;
        v340 = v309;
        __int16 v341 = 2114;
        *(void *)v342 = v312;
        _os_log_debug_impl(&dword_1C4CFF000, v303, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"%{public}@ using custom network service type %{public}@\"", buf, 0x20u);
      }
    }
    uint64_t v274 = objc_msgSend_networkServiceType(*(void **)(a1 + 32), v271, v272);
    objc_msgSend_setNetworkServiceType_(v185, v275, v274);
    v278 = objc_msgSend_shared(CKDTrafficLogger, v276, v277);
    v281 = objc_msgSend_requestUUID(*(void **)(a1 + 32), v279, v280);
    v284 = objc_msgSend_httpMethod(*(void **)(a1 + 32), v282, v283);
    v287 = (objc_class *)objc_msgSend_requestMessageClass(*(void **)(a1 + 32), v285, v286);
    v288 = NSStringFromClass(v287);
    uint64_t v291 = objc_msgSend_parsingStandaloneMessage(*(void **)(a1 + 32), v289, v290);
    objc_msgSend_logRequestWithRequestUUID_request_url_method_messageClass_parsingStandaloneMessage_completionHandler_(v278, v292, (uint64_t)v281, v185, v29, v284, v288, v291, &unk_1F2042FB0);

    objc_msgSend__loadRequest_(*(void **)(a1 + 32), v293, (uint64_t)v185);
    uint64_t v187 = v333;
LABEL_92:

    goto LABEL_93;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v178 = (void *)*MEMORY[0x1E4F1A530];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_ERROR))
  {
    v294 = *(void **)(a1 + 32);
    v295 = v178;
    v298 = objc_msgSend_requestUUID(v294, v296, v297);
    v301 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v299, v300);
    *(_DWORD *)buf = 138543874;
    v338 = v298;
    __int16 v339 = 2114;
    v340 = v301;
    __int16 v341 = 2112;
    *(void *)v342 = v27;
    _os_log_error_impl(&dword_1C4CFF000, v295, OS_LOG_TYPE_ERROR, "req: %{public}@, \"%{public}@ Validation error: [%@]\"", buf, 0x20u);
  }
  objc_msgSend_finishWithError_(*(void **)(a1 + 32), v179, (uint64_t)v27);
LABEL_93:
}

uint64_t sub_1C4DBCBCC(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_setValue_forHTTPHeaderField_(*(void **)(a1 + 32), a2, a3, a2);
}

void sub_1C4DBCF74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DBD094(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_urlSessionTask(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    uint64_t v112 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v5, v6);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v112, v113, *(void *)(a1 + 48), *(void *)(a1 + 32), @"CKDURLRequest.m", 2317, @"The URL session data task should be nil");
  }
  id v7 = objc_msgSend_response(*(void **)(a1 + 32), v5, v6);

  if (v7)
  {
    uint64_t v114 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v8, v9);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v114, v115, *(void *)(a1 + 48), *(void *)(a1 + 32), @"CKDURLRequest.m", 2318, @"Response should be nil");
  }
  objc_msgSend_setRequest_(*(void **)(a1 + 32), v8, *(void *)(a1 + 40));
  objc_msgSend_setResponseBodyParser_(*(void **)(a1 + 32), v10, 0);
  objc_msgSend_setUrlSession_(*(void **)(a1 + 32), v11, 0);
  uint64_t v14 = objc_msgSend_requestOptions(*(void **)(a1 + 32), v12, v13);
  uint64_t v17 = objc_msgSend_networkingDelegate(v14, v15, v16);
  uint64_t v20 = objc_msgSend_sharedManager(MEMORY[0x1E4F50D70], v18, v19);
  uint64_t v23 = objc_msgSend_request(*(void **)(a1 + 32), v21, v22);
  uint64_t v24 = *(void *)(a1 + 32);
  id v123 = 0;
  uint64_t v26 = objc_msgSend_createDataTaskWithRequest_options_delegate_sessionHandle_(v20, v25, (uint64_t)v23, v14, v24, &v123);
  id v27 = v123;

  uint64_t v28 = (void *)MEMORY[0x1E4F1A550];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v29 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412802;
    id v125 = v27;
    __int16 v126 = 2112;
    long long v127 = v26;
    __int16 v128 = 2112;
    uint64_t v129 = v17;
    _os_log_debug_impl(&dword_1C4CFF000, v29, OS_LOG_TYPE_DEBUG, "For session %@, task %@, set up networking delegate %@", buf, 0x20u);
  }
  uint64_t v31 = *(void **)(a1 + 32);
  if (v26)
  {
    objc_msgSend_setUrlSession_(*(void **)(a1 + 32), v30, (uint64_t)v27);
    objc_msgSend_setUrlSessionTask_(*(void **)(a1 + 32), v32, (uint64_t)v26);
    if (*v28 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v117 = v17;
    uint64_t v118 = v14;
    uint64_t v33 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_INFO))
    {
      uint64_t v36 = *(void **)(a1 + 32);
      uint64_t v37 = v33;
      int v40 = objc_msgSend_requestUUID(v36, v38, v39);
      int v43 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v41, v42);
      uint64_t v46 = objc_msgSend__CFNetworkTaskIdentifierString(*(void **)(a1 + 32), v44, v45);
      *(_DWORD *)buf = 138543874;
      id v125 = v40;
      __int16 v126 = 2114;
      long long v127 = v43;
      __int16 v128 = 2112;
      uint64_t v129 = v46;
      _os_log_impl(&dword_1C4CFF000, v37, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@: Starting request with URL session data task %@\"", buf, 0x20u);
    }
    id v47 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v34, v35, v27);
    objc_msgSend_setDateRequestWentOut_(*(void **)(a1 + 32), v48, (uint64_t)v47);

    uint64_t v51 = objc_msgSend_metrics(*(void **)(a1 + 32), v49, v50);
    uint64_t v54 = objc_msgSend_metrics(*(void **)(a1 + 32), v52, v53);
    uint64_t v57 = objc_msgSend_metrics(*(void **)(a1 + 32), v55, v56);
    uint64_t v60 = objc_msgSend_startDate(v57, v58, v59);
    uint64_t v63 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v61, v62);
    uint64_t v66 = objc_msgSend_metrics(*(void **)(a1 + 32), v64, v65);
    uint64_t v69 = objc_msgSend_startDate(v66, v67, v68);
    objc_msgSend_timeIntervalSinceDate_(v63, v70, (uint64_t)v69);
    started = objc_msgSend_newRangeWithOperationState_startDate_duration_(v54, v71, 0, v60);
    objc_msgSend_addRange_(v51, v73, (uint64_t)started);

    uint64_t v76 = objc_msgSend_signpost(*(void **)(a1 + 32), v74, v75);

    id v27 = v116;
    if (v76)
    {
      uint64_t v79 = objc_msgSend_signpost(*(void **)(a1 + 32), v77, v78);
      uint64_t v82 = objc_msgSend_log(v79, v80, v81);

      uint64_t v85 = objc_msgSend_signpost(*(void **)(a1 + 32), v83, v84);
      os_signpost_id_t v88 = objc_msgSend_identifier(v85, v86, v87);

      if (v88 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v82))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v82, OS_SIGNPOST_EVENT, v88, "CKDURLRequest", "Resuming", buf, 2u);
      }
    }
    objc_msgSend_hash(*(void **)(a1 + 32), v77, v78);
    kdebug_trace();
    long long v91 = (void *)MEMORY[0x1E4F1A550];
    if (*MEMORY[0x1E4F1A4E0])
    {
      long long v92 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v89, v90);
      long long v94 = objc_msgSend_objectForKeyedSubscript_(v92, v93, @"FakeRequestCFNetworkError");

      if (v94)
      {
        long long v97 = dispatch_get_global_queue(0, 0);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_1C4DBD7C0;
        block[3] = &unk_1E64F0DF0;
        void block[4] = *(void *)(a1 + 32);
        id v120 = v116;
        id v121 = v26;
        id v122 = v94;
        dispatch_async(v97, block);

LABEL_22:
LABEL_30:
        uint64_t v17 = v117;
        uint64_t v14 = v118;
        goto LABEL_31;
      }
      uint64_t v100 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 32), v95, v96);
      __int16 v102 = objc_msgSend_objectForKeyedSubscript_(v100, v101, @"SilentlyDropNetworkRequest");

      if (v102)
      {
        if (*v91 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v103 = (void *)*MEMORY[0x1E4F1A530];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_INFO))
        {
          __int16 v104 = *(void **)(a1 + 32);
          int v105 = v103;
          uint64_t v108 = objc_msgSend_requestUUID(v104, v106, v107);
          uint64_t v111 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v109, v110);
          *(_DWORD *)buf = 138543618;
          id v125 = v108;
          __int16 v126 = 2114;
          long long v127 = v111;
          _os_log_impl(&dword_1C4CFF000, v105, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@: Dropping network request; you asked for it\"",
            buf,
            0x16u);
        }
        goto LABEL_22;
      }
    }
    objc_msgSend_resume(v26, v89, v90);
    goto LABEL_30;
  }
  uint64_t v98 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v30, *MEMORY[0x1E4F19DD8], 1000, @"Can't create a NSURLSessionDataTask, failing the request");
  objc_msgSend_finishWithError_(v31, v99, (uint64_t)v98);

LABEL_31:
}

uint64_t sub_1C4DBD7C0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_URLSession_task_didCompleteWithError_, *(void *)(a1 + 40));
}

void sub_1C4DBD858(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1E4F1A550];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v3 = (void *)*MEMORY[0x1E4F1A530];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = v3;
    uint64_t v9 = objc_msgSend_requestUUID(v5, v7, v8);
    int v22 = 138543362;
    uint64_t v23 = v9;
    _os_log_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"cancel\"", (uint8_t *)&v22, 0xCu);
  }
  objc_msgSend_setCancelled_(*(void **)(a1 + 32), v4, 1);
  uint64_t v13 = objc_msgSend_urlSessionTask(*(void **)(a1 + 32), v10, v11);
  if (v13)
  {
    if (*v2 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v14 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *(void **)(a1 + 32);
      long long v18 = v14;
      os_signpost_id_t v21 = objc_msgSend_ckShortDescription(v17, v19, v20);
      int v22 = 138412546;
      uint64_t v23 = v13;
      __int16 v24 = 2114;
      uint64_t v25 = v21;
      _os_log_debug_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_DEBUG, "Cancelling the URL session data task %@ for request %{public}@", (uint8_t *)&v22, 0x16u);
    }
    objc_msgSend_cancel(v13, v15, v16);
  }
  objc_msgSend_finishWithError_(*(void **)(a1 + 32), v12, 0);
}

uint64_t sub_1C4DBDB0C(uint64_t a1, const char *a2)
{
  return objc_msgSend__finishOnLifecycleQueueWithError_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
}

void sub_1C4DBE9F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DBEA18(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v3 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    int v4 = 138543362;
    id v5 = v2;
    _os_log_debug_impl(&dword_1C4CFF000, v3, OS_LOG_TYPE_DEBUG, "Received response from Diagnostic Reporter - %{public}@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1C4DBF0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
}

void sub_1C4DBF0D8(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    if (objc_msgSend_isFinished(WeakRetained, v3, v4))
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v6 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        id v7 = v6;
        uint64_t v10 = objc_msgSend_ckShortDescription(v5, v8, v9);
        int v12 = 138543362;
        uint64_t v13 = v10;
        _os_log_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_INFO, "%{public}@ would've performed a block on the lifecycle queue but it was marked finished before it could.", (uint8_t *)&v12, 0xCu);
      }
    }
    else
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v11 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_INFO, "Would've performed a block on the lifecycle queue but it was deallocated before it could.", (uint8_t *)&v12, 2u);
    }
  }
}

void sub_1C4DBF390(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1C4DBF3A4(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    if (!objc_msgSend_isFinished(WeakRetained, v3, v4))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      goto LABEL_13;
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v6 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      id v7 = v6;
      uint64_t v10 = objc_msgSend_ckShortDescription(v5, v8, v9);
      int v13 = 138543362;
      uint64_t v14 = v10;
      _os_log_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_INFO, "%{public}@ would've performed a block on the lifecycle queue but it was marked finished before it could.", (uint8_t *)&v13, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v11 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_INFO, "Would've performed a block on the lifecycle queue but it was deallocated before it could.", (uint8_t *)&v13, 2u);
    }
  }
  uint64_t v12 = *(void *)(a1 + 32);
LABEL_13:
  (*(void (**)(void))(v12 + 16))();
}

void sub_1C4DBF738(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_taskDescription(*(void **)(a1 + 32), a2, a3);
  id v7 = objc_msgSend_urlSessionTask(*(void **)(a1 + 40), v5, v6);
  uint64_t v10 = objc_msgSend_taskDescription(v7, v8, v9);
  char isEqualToString = objc_msgSend_isEqualToString_(v4, v11, (uint64_t)v10);

  int v13 = (dispatch_block_t *)MEMORY[0x1E4F1A548];
  uint64_t v14 = (void *)*MEMORY[0x1E4F1A548];
  uint64_t v15 = (void *)MEMORY[0x1E4F1A550];
  if ((isEqualToString & 1) == 0)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v14);
    }
    uint64_t v49 = (void *)*MEMORY[0x1E4F1A530];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_INFO)) {
      goto LABEL_32;
    }
    uint64_t v50 = *(void **)(a1 + 40);
    uint64_t v45 = v49;
    uint64_t v53 = objc_msgSend_requestUUID(v50, v51, v52);
    uint64_t v56 = objc_msgSend_ckShortDescription(*(void **)(a1 + 40), v54, v55);
    uint64_t v57 = *(void **)(a1 + 32);
    uint64_t v60 = objc_msgSend_urlSessionTask(*(void **)(a1 + 40), v58, v59);
    int v108 = 138544130;
    __int16 v109 = v53;
    __int16 v110 = 2114;
    uint64_t v111 = v56;
    __int16 v112 = 2112;
    uint64_t v113 = v57;
    __int16 v114 = 2112;
    uint64_t v115 = v60;
    _os_log_impl(&dword_1C4CFF000, v45, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@ ignoring spurious callback from task %@, which is not my task %@\"", (uint8_t *)&v108, 0x2Au);

    goto LABEL_31;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v14);
  }
  uint64_t v16 = (os_log_t *)MEMORY[0x1E4F1A530];
  uint64_t v17 = (void *)*MEMORY[0x1E4F1A530];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *(void **)(a1 + 40);
    os_signpost_id_t v21 = v17;
    __int16 v24 = objc_msgSend_requestUUID(v20, v22, v23);
    int v108 = 138543362;
    __int16 v109 = v24;
    _os_log_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:\"", (uint8_t *)&v108, 0xCu);
  }
  *(unsigned char *)(*(void *)(a1 + 40) + 32) = 1;
  if (*(void *)(a1 + 48) && (objc_msgSend_allowAutomaticRedirects(*(void **)(a1 + 40), v18, v19) & 1) == 0)
  {
    if (*v15 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], *v13);
    }
    os_log_t v98 = *v16;
    if (!os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_32;
    }
    id v99 = *(void **)(a1 + 40);
    uint64_t v45 = v98;
    uint64_t v48 = objc_msgSend_requestUUID(v99, v100, v101);
    __int16 v102 = *(void **)(a1 + 32);
    int v105 = objc_msgSend_request(*(void **)(a1 + 40), v103, v104);
    uint64_t v107 = *(void **)(a1 + 48);
    uint64_t v106 = *(void **)(a1 + 56);
    int v108 = 138544386;
    __int16 v109 = v48;
    __int16 v110 = 2112;
    uint64_t v111 = v102;
    __int16 v112 = 2112;
    uint64_t v113 = v105;
    __int16 v114 = 2112;
    uint64_t v115 = v106;
    __int16 v116 = 2112;
    uint64_t v117 = v107;
    _os_log_impl(&dword_1C4CFF000, v45, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Task is getting redirected but automatic redirections are disabled.  Task: [%@]\\nInitial request: [%@]\\nProposed request: [%@]\\nRedirect response: [%@]\"", (uint8_t *)&v108, 0x34u);

LABEL_30:
LABEL_31:

LABEL_32:
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    return;
  }
  uint64_t v25 = objc_msgSend_request(*(void **)(a1 + 40), v18, v19);
  uint64_t v28 = objc_msgSend_URL(v25, v26, v27);
  uint64_t v31 = objc_msgSend_scheme(v28, v29, v30);
  if (objc_msgSend_hasPrefix_(v31, v32, @"https"))
  {
    uint64_t v35 = objc_msgSend_URL(*(void **)(a1 + 56), v33, v34);
    uint64_t v38 = objc_msgSend_scheme(v35, v36, v37);
    char hasPrefix = objc_msgSend_hasPrefix_(v38, v39, @"https");

    if ((hasPrefix & 1) == 0)
    {
      if (*v15 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], *v13);
      }
      os_log_t v43 = *v16;
      if (!os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      uint64_t v44 = *(void **)(a1 + 40);
      uint64_t v45 = v43;
      uint64_t v48 = objc_msgSend_requestUUID(v44, v46, v47);
      int v108 = 138543362;
      __int16 v109 = v48;
      _os_log_impl(&dword_1C4CFF000, v45, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Request is being redirected between https and http. We're not falling for that one\"", (uint8_t *)&v108, 0xCu);
      goto LABEL_30;
    }
  }
  else
  {
  }
  uint64_t v61 = objc_msgSend_mutableCopy(*(void **)(a1 + 56), v41, v42);
  __int16 v64 = objc_msgSend_URL(*(void **)(a1 + 56), v62, v63);
  objc_msgSend_setURL_(v61, v65, (uint64_t)v64);

  objc_msgSend_setHTTPShouldHandleCookies_(v61, v66, 1);
  if (objc_msgSend_hasRequestBody(*(void **)(a1 + 40), v67, v68))
  {
    dispatch_semaphore_t v71 = objc_msgSend_requestBodyStream(*(void **)(a1 + 40), v69, v70);
    objc_msgSend_setHTTPBodyStream_(v61, v72, (uint64_t)v71);
  }
  uint64_t v73 = objc_msgSend_request(*(void **)(a1 + 40), v69, v70);
  uint64_t v76 = objc_msgSend_HTTPMethod(v73, v74, v75);
  objc_msgSend_setHTTPMethod_(v61, v77, (uint64_t)v76);

  uint64_t v80 = objc_msgSend_request(*(void **)(a1 + 40), v78, v79);
  uint64_t v83 = objc_msgSend_allHTTPHeaderFields(v80, v81, v82);
  objc_msgSend_setAllHTTPHeaderFields_(v61, v84, (uint64_t)v83);

  if (*v15 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], *v13);
  }
  os_log_t v85 = *v16;
  if (os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v87 = *(void **)(a1 + 40);
    os_signpost_id_t v88 = v85;
    long long v91 = objc_msgSend_requestUUID(v87, v89, v90);
    long long v92 = *(void **)(a1 + 32);
    long long v95 = objc_msgSend_request(*(void **)(a1 + 40), v93, v94);
    uint64_t v97 = *(void *)(a1 + 48);
    uint64_t v96 = *(void **)(a1 + 56);
    int v108 = 138544642;
    __int16 v109 = v91;
    __int16 v110 = 2112;
    uint64_t v111 = v92;
    __int16 v112 = 2112;
    uint64_t v113 = v95;
    __int16 v114 = 2112;
    uint64_t v115 = v96;
    __int16 v116 = 2112;
    uint64_t v117 = v61;
    __int16 v118 = 2112;
    uint64_t v119 = v97;
    _os_log_impl(&dword_1C4CFF000, v88, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Task is getting redirected: [%@]\\nInitial request: [%@]\\nProposed request: [%@]\\nReconstructed request: [%@]\\nRedirect response: [%@]\"", (uint8_t *)&v108, 0x3Eu);
  }
  objc_msgSend_setRequest_(*(void **)(a1 + 40), v86, (uint64_t)v61);
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1C4DBFE88(uint64_t a1, const char *a2)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  id v3 = (void **)(a1 + 32);
  uint64_t v4 = objc_msgSend_valueForHTTPHeaderField_(*(void **)(a1 + 32), a2, *MEMORY[0x1E4F19C88]);
  uint64_t v7 = objc_msgSend_statusCode(*v3, v5, v6);
  uint64_t v10 = objc_msgSend_signpost(*(void **)(a1 + 40), v8, v9);

  if (v10)
  {
    int v13 = objc_msgSend_signpost(*(void **)(a1 + 40), v11, v12);
    uint64_t v16 = objc_msgSend_log(v13, v14, v15);

    uint64_t v19 = objc_msgSend_signpost(*(void **)(a1 + 40), v17, v18);
    os_signpost_id_t v22 = objc_msgSend_identifier(v19, v20, v21);

    if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
    {
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v7;
      _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v16, OS_SIGNPOST_EVENT, v22, "CKDURLRequest", "Received response %{public}@ with status code %zd", buf, 0x16u);
    }
  }
  uint64_t v23 = objc_msgSend_taskDescription(*(void **)(a1 + 48), v11, v12);
  uint64_t v26 = objc_msgSend_urlSessionTask(*(void **)(a1 + 40), v24, v25);
  uint64_t v29 = objc_msgSend_taskDescription(v26, v27, v28);
  char isEqualToString = objc_msgSend_isEqualToString_(v23, v30, (uint64_t)v29);

  if (isEqualToString)
  {
    if (v4)
    {
      uint64_t v34 = objc_msgSend_requestUUID(*(void **)(a1 + 40), v32, v33);
      char v36 = objc_msgSend_isEqualToString_(v34, v35, (uint64_t)v4);

      if ((v36 & 1) == 0)
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v37 = (void *)*MEMORY[0x1E4F1A530];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_INFO))
        {
          uint64_t v38 = *(void **)(a1 + 40);
          uint64_t v39 = v37;
          uint64_t v42 = objc_msgSend_requestUUID(v38, v40, v41);
          uint64_t v45 = objc_msgSend_ckShortDescription(*(void **)(a1 + 40), v43, v44);
          objc_msgSend_requestUUID(*(void **)(a1 + 40), v46, v47);
          uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          *(void *)&uint8_t buf[4] = v42;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v45;
          *(_WORD *)&buf[22] = 2114;
          long long v132 = v48;
          LOWORD(v133) = 2114;
          *(void *)((char *)&v133 + 2) = v4;
          _os_log_impl(&dword_1C4CFF000, v39, OS_LOG_TYPE_INFO, "req: %{public}@, \"Warn: %{public}@ sent request UUID %{public}@, received %{public}@\"", buf, 0x2Au);
        }
      }
    }
    uint64_t v49 = objc_msgSend_isCancelled(*(void **)(a1 + 40), v32, v33) ^ 1;
    uint64_t v50 = (void *)MEMORY[0x1E4F1A550];
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v51 = (os_log_t *)MEMORY[0x1E4F1A530];
    uint64_t v52 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v55 = *(void **)(a1 + 40);
      uint64_t v56 = v52;
      uint64_t v59 = objc_msgSend_requestUUID(v55, v57, v58);
      *(_DWORD *)buf = 138544130;
      *(void *)&uint8_t buf[4] = v59;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v4;
      *(_WORD *)&buf[22] = 2048;
      long long v132 = (uint64_t (*)(uint64_t, uint64_t))v7;
      LOWORD(v133) = 2048;
      *(void *)((char *)&v133 + 2) = v49;
      _os_log_impl(&dword_1C4CFF000, v56, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Received response UUID:%{public}@, status:%ld, responseDisposition:%ld\"", buf, 0x2Au);
    }
    uint64_t v60 = (unsigned char *)MEMORY[0x1E4F1A4E0];
    if (*MEMORY[0x1E4F1A4E0] && (sub_1C4DAF5AC(*(void **)(a1 + 40), v53, v54) & 1) == 0)
    {
      uint64_t v76 = [CKDURLResponseOverrideProxy alloc];
      uint64_t v77 = *(void *)(a1 + 32);
      uint64_t v80 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 40), v78, v79);
      uint64_t v82 = objc_msgSend_initWithResponse_overrides_(v76, v81, v77, v80);
      objc_msgSend_setResponse_(*(void **)(a1 + 40), v83, (uint64_t)v82);
    }
    else
    {
      objc_msgSend_setResponse_(*(void **)(a1 + 40), v53, *(void *)(a1 + 32));
    }
    uint64_t v84 = objc_msgSend_shared(CKDTrafficLogger, v61, v62);
    uint64_t v87 = objc_msgSend_requestUUID(*(void **)(a1 + 40), v85, v86);
    uint64_t v90 = objc_msgSend_response(*(void **)(a1 + 40), v88, v89);
    objc_msgSend_logResponseWithRequestUUID_response_completionHandler_(v84, v91, (uint64_t)v87, v90, &unk_1F2043030);

    if (*v60)
    {
      if ((objc_msgSend_isErrorInducerRequest(*(void **)(a1 + 40), v92, v93) & 1) == 0)
      {
        uint64_t v96 = objc_msgSend_operation(*(void **)(a1 + 40), v94, v95);
        id v99 = objc_msgSend_operationInfo(v96, v97, v98);
        int v102 = objc_msgSend_wantsDaemonRequestCallbacks(v99, v100, v101);

        if (v102)
        {
          int v105 = objc_msgSend_operation(*(void **)(a1 + 40), v103, v104);
          int v108 = objc_msgSend_clientOperationCallbackProxy(v105, v106, v107);
          if (v108)
          {
            if (*v50 != -1) {
              dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            os_log_t v109 = *v51;
            if (os_log_type_enabled(*v51, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v120 = *(void **)(a1 + 40);
              id v121 = v109;
              long long v124 = objc_msgSend_requestUUID(v120, v122, v123);
              long long v127 = objc_msgSend_ckShortDescription(*(void **)(a1 + 40), v125, v126);
              *(_DWORD *)buf = 138543618;
              *(void *)&uint8_t buf[4] = v124;
              *(_WORD *)&buf[12] = 2114;
              *(void *)&buf[14] = v127;
              _os_log_debug_impl(&dword_1C4CFF000, v121, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"Request %{public}@ calling out to client about lifecycle transition\"", buf, 0x16u);
            }
            dispatch_semaphore_t v110 = dispatch_semaphore_create(0);
            *(void *)buf = 0;
            *(void *)&buf[8] = buf;
            *(void *)&uint8_t buf[16] = 0x3032000000;
            long long v132 = sub_1C4DBAD5C;
            *(void *)&long long v133 = sub_1C4DBAD6C;
            *((void *)&v133 + 1) = 0;
            uint64_t v111 = (objc_class *)objc_opt_class();
            __int16 v112 = NSStringFromClass(v111);
            uint64_t v115 = objc_msgSend_testRequestProperties(*(void **)(a1 + 40), v113, v114);
            v128[0] = MEMORY[0x1E4F143A8];
            v128[1] = 3221225472;
            v128[2] = sub_1C4DC0684;
            v128[3] = &unk_1E64F2850;
            v128[4] = *(void *)(a1 + 40);
            uint64_t v130 = buf;
            __int16 v116 = v110;
            uint64_t v129 = v116;
            objc_msgSend_handleDaemonRequestWillReceiveWithClassName_testRequestProperties_replyBlock_(v108, v117, (uint64_t)v112, v115, v128);

            dispatch_semaphore_wait(v116, 0xFFFFFFFFFFFFFFFFLL);
            uint64_t v119 = *(void **)(*(void *)&buf[8] + 40);
            if (v119) {
              objc_msgSend_takeActionOnURLRequest_(v119, v118, *(void *)(a1 + 40));
            }

            _Block_object_dispose(buf, 8);
          }
        }
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v63 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_INFO))
    {
      __int16 v64 = *(void **)(a1 + 40);
      uint64_t v65 = v63;
      uint64_t v68 = objc_msgSend_requestUUID(v64, v66, v67);
      dispatch_semaphore_t v71 = objc_msgSend_ckShortDescription(*(void **)(a1 + 40), v69, v70);
      uint64_t v72 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 48);
      uint64_t v75 = objc_msgSend_urlSessionTask(*(void **)(a1 + 40), v73, v74);
      *(_DWORD *)buf = 138544130;
      *(void *)&uint8_t buf[4] = v68;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v71;
      *(_WORD *)&buf[22] = 2112;
      long long v132 = v72;
      LOWORD(v133) = 2112;
      *(void *)((char *)&v133 + 2) = v75;
      _os_log_impl(&dword_1C4CFF000, v65, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@ ignoring spurious callback from task %@, which is not my session %@\"", buf, 0x2Au);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1C4DC0660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DC0684(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = (void *)*MEMORY[0x1E4F1A548];
  if (v7)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v8);
    }
    uint64_t v9 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      int v16 = 138412290;
      id v17 = v7;
      _os_log_error_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_ERROR, "Asked client what to do for a daemon request, it responded with an error %@", (uint8_t *)&v16, 0xCu);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v8);
    }
    uint64_t v10 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void **)(a1 + 32);
      uint64_t v12 = v10;
      uint64_t v15 = objc_msgSend_ckShortDescription(v11, v13, v14);
      int v16 = 138543618;
      id v17 = v15;
      __int16 v18 = 2112;
      id v19 = v6;
      _os_log_debug_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_DEBUG, "Request %{public}@ was told to take action \"%@\"", (uint8_t *)&v16, 0x16u);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1C4DC0844(uint64_t a1, const char *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = objc_msgSend_valueForHTTPHeaderField_(*(void **)(a1 + 32), a2, *MEMORY[0x1E4F19C88]);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A530];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
  {
    id v5 = *(void **)(a1 + 40);
    id v6 = v4;
    uint64_t v9 = objc_msgSend_requestUUID(v5, v7, v8);
    int v10 = 138543618;
    uint64_t v11 = v9;
    __int16 v12 = 2114;
    int v13 = v3;
    _os_log_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Received response UUID:%{public}@, but was already cancelled.  Cancelling NSURLSessionDataTask\"", (uint8_t *)&v10, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1C4DC0B84(uint64_t a1)
{
}

void sub_1C4DC0C70(void **a1, const char *a2, uint64_t a3)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_signpost(a1[4], a2, a3);

  if (v4)
  {
    id v7 = objc_msgSend_signpost(a1[4], v5, v6);
    int v10 = objc_msgSend_log(v7, v8, v9);

    int v13 = objc_msgSend_signpost(a1[4], v11, v12);
    os_signpost_id_t v16 = objc_msgSend_identifier(v13, v14, v15);

    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      uint64_t v19 = objc_msgSend_length(a1[5], v17, v18);
      *(_DWORD *)buf = 134349056;
      uint64_t v108 = v19;
      _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v10, OS_SIGNPOST_EVENT, v16, "CKDURLRequest", "Received data of length %{public}tu", buf, 0xCu);
    }
  }
  id v20 = a1[5];
  uint64_t v23 = objc_msgSend_taskDescription(a1[6], v21, v22);
  uint64_t v26 = objc_msgSend_urlSessionTask(a1[4], v24, v25);
  uint64_t v29 = objc_msgSend_taskDescription(v26, v27, v28);
  char isEqualToString = objc_msgSend_isEqualToString_(v23, v30, (uint64_t)v29);

  uint64_t v32 = (void *)*MEMORY[0x1E4F1A548];
  if (isEqualToString)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v32);
    }
    uint64_t v33 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
    {
      char v36 = a1[4];
      uint64_t v37 = v33;
      int v40 = objc_msgSend_requestUUID(v36, v38, v39);
      uint64_t v43 = objc_msgSend_length(v20, v41, v42);
      *(_DWORD *)buf = 138543618;
      uint64_t v108 = (uint64_t)v40;
      __int16 v109 = 2048;
      uint64_t v110 = v43;
      _os_log_impl(&dword_1C4CFF000, v37, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"URLSession:dataTask:_didReceiveData:completionHandler: %ld bytes\"", buf, 0x16u);
    }
    uint64_t v44 = (id *)a1[4];
    if (!*MEMORY[0x1E4F1A4E0])
    {
      objc_msgSend_setDidReceiveResponseBodyData_(v44, v34, 1);
      goto LABEL_23;
    }
    if (!v44[10] || (v45 = sub_1C4DAF5AC(v44, v34, v35), uint64_t v44 = (id *)a1[4], (v45 & 1) != 0))
    {
LABEL_16:
      objc_msgSend_setDidReceiveResponseBodyData_(v44, v34, 1);
      uint64_t v49 = objc_msgSend_clientProvidedAdditionalHeaderValues(a1[4], v47, v48);
      uint64_t v51 = objc_msgSend_objectForKeyedSubscript_(v49, v50, @"TestName");
      int v53 = objc_msgSend_isEqualToString_(v51, v52, @"TestEmptyResponseBody");

      if (v53) {
        objc_msgSend_setDidReceiveResponseBodyData_(a1[4], v54, 0);
      }
LABEL_23:
      uint64_t v58 = objc_msgSend_response(a1[4], v54, v55);
      uint64_t v71 = objc_msgSend_expectedContentLength(v58, v69, v70);
      uint64_t v74 = objc_msgSend_responseProgressBlock(a1[4], v72, v73);
      if (!v74) {
        goto LABEL_29;
      }
      if (v71 == -1)
      {

        uint64_t v77 = 0;
      }
      else
      {

        uint64_t v77 = v71;
        if (v71 < 0)
        {
LABEL_29:
          uint64_t v82 = objc_msgSend_responseBodyParser(a1[4], v75, v76);
          if (v82)
          {
            uint64_t v84 = (void *)v82;
            os_log_t v85 = dispatch_group_create();
          }
          else
          {
            uint64_t v86 = objc_msgSend_valueForHTTPHeaderField_(v58, v83, 0x1F204D130);
            uint64_t v84 = objc_msgSend_defaultParserForContentType_(a1[4], v87, (uint64_t)v86);
            objc_msgSend_setResponseBodyParser_(a1[4], v88, (uint64_t)v84);

            os_log_t v85 = dispatch_group_create();
            if (!v84)
            {
LABEL_33:
              dispatch_group_enter(v85);
              long long v92 = objc_msgSend_shared(CKDTrafficLogger, v90, v91);
              uint64_t v95 = objc_msgSend_requestUUID(a1[4], v93, v94);
              v103[0] = MEMORY[0x1E4F143A8];
              v103[1] = 3221225472;
              v103[2] = sub_1C4DC12C8;
              v103[3] = &unk_1E64F05C8;
              uint64_t v96 = v85;
              uint64_t v104 = v96;
              objc_msgSend_logPartialResponseObjectDataWithRequestUUID_objectData_completionHandler_(v92, v97, (uint64_t)v95, v20, v103);

              if (a1[7])
              {
                uint64_t v100 = objc_msgSend_lifecycleQueue(a1[4], v98, v99);
                block[0] = MEMORY[0x1E4F143A8];
                block[1] = 3221225472;
                block[2] = sub_1C4DC12D0;
                block[3] = &unk_1E64F0A80;
                id v102 = a1[7];
                dispatch_group_notify(v96, v100, block);
              }
              goto LABEL_36;
            }
          }
          dispatch_group_enter(v85);
          v105[0] = MEMORY[0x1E4F143A8];
          v105[1] = 3221225472;
          v105[2] = sub_1C4DC12C0;
          v105[3] = &unk_1E64F08D0;
          os_log_t v85 = v85;
          uint64_t v106 = v85;
          objc_msgSend_processData_completionHandler_(v84, v89, (uint64_t)v20, v105);

          goto LABEL_33;
        }
      }
      objc_msgSend_responseProgressBlock(a1[4], v75, v76);
      uint64_t v78 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
      uint64_t v81 = objc_msgSend_countOfBytesReceived(a1[6], v79, v80);
      ((void (**)(void, uint64_t, uint64_t, BOOL))v78)[2](v78, v81, v77, v71 != -1);

      goto LABEL_29;
    }
    if (!*((unsigned char *)v44 + 88))
    {
      id v46 = v44[10];

      *((unsigned char *)a1[4] + 88) = 1;
      uint64_t v44 = (id *)a1[4];
      id v20 = v46;
      goto LABEL_16;
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v32);
    }
    uint64_t v56 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_INFO))
    {
      uint64_t v57 = a1[4];
      uint64_t v58 = v56;
      uint64_t v61 = objc_msgSend_requestUUID(v57, v59, v60);
      __int16 v64 = objc_msgSend_ckShortDescription(a1[4], v62, v63);
      uint64_t v65 = a1[6];
      uint64_t v68 = objc_msgSend_urlSessionTask(a1[4], v66, v67);
      *(_DWORD *)buf = 138544130;
      uint64_t v108 = (uint64_t)v61;
      __int16 v109 = 2114;
      uint64_t v110 = (uint64_t)v64;
      __int16 v111 = 2112;
      __int16 v112 = v65;
      __int16 v113 = 2112;
      uint64_t v114 = v68;
      _os_log_impl(&dword_1C4CFF000, v58, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@ ignoring spurious callback from task %@, which is not my task %@\"", buf, 0x2Au);

LABEL_36:
    }
  }
}

void sub_1C4DC12C0(uint64_t a1)
{
}

void sub_1C4DC12C8(uint64_t a1)
{
}

uint64_t sub_1C4DC12D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1C4DC148C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_signpost(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    id v7 = objc_msgSend_signpost(*(void **)(a1 + 32), v5, v6);
    int v10 = objc_msgSend_log(v7, v8, v9);

    int v13 = objc_msgSend_signpost(*(void **)(a1 + 32), v11, v12);
    os_signpost_id_t v16 = objc_msgSend_identifier(v13, v14, v15);

    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      LOWORD(v57) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v10, OS_SIGNPOST_EVENT, v16, "CKDURLRequest", "New body stream", (uint8_t *)&v57, 2u);
    }
  }
  id v17 = objc_msgSend_taskDescription(*(void **)(a1 + 40), v5, v6);
  id v20 = objc_msgSend_urlSessionTask(*(void **)(a1 + 32), v18, v19);
  uint64_t v23 = objc_msgSend_taskDescription(v20, v21, v22);
  char isEqualToString = objc_msgSend_isEqualToString_(v17, v24, (uint64_t)v23);

  uint64_t v26 = (void *)*MEMORY[0x1E4F1A548];
  if (isEqualToString)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v26);
    }
    uint64_t v27 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = *(void **)(a1 + 32);
      uint64_t v31 = v27;
      uint64_t v34 = objc_msgSend_requestUUID(v30, v32, v33);
      int v57 = 138543362;
      uint64_t v58 = v34;
      _os_log_impl(&dword_1C4CFF000, v31, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"URLSession:task:needNewBodyStream:\"", (uint8_t *)&v57, 0xCu);
    }
    uint64_t v35 = objc_msgSend_shared(CKDTrafficLogger, v28, v29);
    uint64_t v38 = objc_msgSend_requestUUID(*(void **)(a1 + 32), v36, v37);
    objc_msgSend_logRequestBodyStreamResetWithRequestUUID_completionHandler_(v35, v39, (uint64_t)v38, &unk_1F2043050);

    uint64_t v40 = *(void *)(a1 + 48);
    uint64_t v43 = objc_msgSend_requestBodyStream(*(void **)(a1 + 32), v41, v42);
    (*(void (**)(uint64_t, void *))(v40 + 16))(v40, v43);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v26);
    }
    uint64_t v44 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_INFO))
    {
      unsigned __int8 v45 = *(void **)(a1 + 32);
      id v46 = v44;
      uint64_t v49 = objc_msgSend_requestUUID(v45, v47, v48);
      uint64_t v52 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v50, v51);
      uint64_t v53 = *(void *)(a1 + 40);
      uint64_t v56 = objc_msgSend_urlSessionTask(*(void **)(a1 + 32), v54, v55);
      int v57 = 138544130;
      uint64_t v58 = v49;
      __int16 v59 = 2114;
      uint64_t v60 = v52;
      __int16 v61 = 2112;
      uint64_t v62 = v53;
      __int16 v63 = 2112;
      __int16 v64 = v56;
      _os_log_impl(&dword_1C4CFF000, v46, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@ ignoring spurious callback from task %@, which is not my task %@\"", (uint8_t *)&v57, 0x2Au);
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1C4DC188C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_signpost(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    id v7 = objc_msgSend_signpost(*(void **)(a1 + 32), v5, v6);
    int v10 = objc_msgSend_log(v7, v8, v9);

    int v13 = objc_msgSend_signpost(*(void **)(a1 + 32), v11, v12);
    os_signpost_id_t v16 = objc_msgSend_identifier(v13, v14, v15);

    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      id v17 = *(void **)(a1 + 48);
      uint64_t v18 = *(void **)(a1 + 56);
      uint64_t v19 = *(void *)(a1 + 64);
      int v58 = 134218496;
      __int16 v59 = v17;
      __int16 v60 = 2048;
      __int16 v61 = v18;
      __int16 v62 = 2048;
      uint64_t v63 = v19;
      _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v10, OS_SIGNPOST_EVENT, v16, "CKDURLRequest", "Sent body data of length %lld (%lld/%lld)", (uint8_t *)&v58, 0x20u);
    }
  }
  id v20 = objc_msgSend_taskDescription(*(void **)(a1 + 40), v5, v6);
  uint64_t v23 = objc_msgSend_urlSessionTask(*(void **)(a1 + 32), v21, v22);
  uint64_t v26 = objc_msgSend_taskDescription(v23, v24, v25);
  char isEqualToString = objc_msgSend_isEqualToString_(v20, v27, (uint64_t)v26);

  uint64_t v29 = (void *)*MEMORY[0x1E4F1A548];
  if (isEqualToString)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v29);
    }
    uint64_t v30 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v50 = *(void **)(a1 + 32);
      uint64_t v51 = v30;
      uint64_t v54 = objc_msgSend_requestUUID(v50, v52, v53);
      uint64_t v55 = *(void **)(a1 + 48);
      uint64_t v56 = *(void *)(a1 + 56);
      int v57 = *(void **)(a1 + 64);
      int v58 = 138544130;
      __int16 v59 = v54;
      __int16 v60 = 2048;
      __int16 v61 = v55;
      __int16 v62 = 2048;
      uint64_t v63 = v56;
      __int16 v64 = 2048;
      uint64_t v65 = v57;
      _os_log_debug_impl(&dword_1C4CFF000, v51, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"URLSession:task:didSendBodyData: %lld totalBytesSent: %lld totalBytesExpectedToSend: %lld\"", (uint8_t *)&v58, 0x2Au);
    }
    uint64_t v33 = objc_msgSend_requestProgressBlock(*(void **)(a1 + 32), v31, v32);
    if (v33 && (*(void *)(a1 + 56) & 0x8000000000000000) == 0)
    {
      uint64_t v34 = *(void *)(a1 + 64);

      if (v34 < 0) {
        return;
      }
      objc_msgSend_requestProgressBlock(*(void **)(a1 + 32), v35, v36);
      id v37 = (id)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void, void, uint64_t))v37 + 2))(v37, *(void *)(a1 + 56), *(void *)(a1 + 64), 1);
      goto LABEL_19;
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v29);
    }
    uint64_t v38 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_INFO))
    {
      uint64_t v39 = *(void **)(a1 + 32);
      id v37 = v38;
      uint64_t v42 = objc_msgSend_requestUUID(v39, v40, v41);
      unsigned __int8 v45 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v43, v44);
      uint64_t v46 = *(void *)(a1 + 40);
      uint64_t v49 = objc_msgSend_urlSessionTask(*(void **)(a1 + 32), v47, v48);
      int v58 = 138544130;
      __int16 v59 = v42;
      __int16 v60 = 2114;
      __int16 v61 = v45;
      __int16 v62 = 2112;
      uint64_t v63 = v46;
      __int16 v64 = 2112;
      uint64_t v65 = v49;
      _os_log_impl(&dword_1C4CFF000, (os_log_t)v37, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@ ignoring spurious callback from task %@, which is not my task %@\"", (uint8_t *)&v58, 0x2Au);

LABEL_19:
    }
  }
}

void sub_1C4DC1CBC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_signpost(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    id v7 = objc_msgSend_signpost(*(void **)(a1 + 32), v5, v6);
    int v10 = objc_msgSend_log(v7, v8, v9);

    int v13 = objc_msgSend_signpost(*(void **)(a1 + 32), v11, v12);
    os_signpost_id_t v16 = objc_msgSend_identifier(v13, v14, v15);

    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      id v17 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      long long v151 = v17;
      _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v10, OS_SIGNPOST_EVENT, v16, "CKDURLRequest", "Task completed with error: %@", buf, 0xCu);
    }
  }
  objc_msgSend_hash(*(void **)(a1 + 32), v5, v6);
  kdebug_trace();
  id v20 = objc_msgSend_taskDescription(*(void **)(a1 + 48), v18, v19);
  uint64_t v23 = objc_msgSend_urlSessionTask(*(void **)(a1 + 32), v21, v22);
  uint64_t v26 = objc_msgSend_taskDescription(v23, v24, v25);
  char isEqualToString = objc_msgSend_isEqualToString_(v20, v27, (uint64_t)v26);

  uint64_t v29 = (void *)*MEMORY[0x1E4F1A548];
  if (isEqualToString)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v29);
    }
    uint64_t v30 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = *(void **)(a1 + 32);
      uint64_t v34 = v30;
      id v37 = objc_msgSend_requestUUID(v33, v35, v36);
      uint64_t v38 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      long long v151 = v37;
      __int16 v152 = 2112;
      uint64_t v153 = v38;
      _os_log_impl(&dword_1C4CFF000, v34, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"URLSession:task:didCompleteWithError: %@\"", buf, 0x16u);
    }
    uint64_t v39 = objc_msgSend__timingData(*(void **)(a1 + 48), v31, v32);
    uint64_t v41 = objc_msgSend_objectForKeyedSubscript_(v39, v40, @"_kCFNTimingDataConnectionReused");
    char v44 = objc_msgSend_BOOLValue(v41, v42, v43);

    if ((v44 & 1) == 0)
    {
      uint64_t v47 = objc_msgSend_signpost(*(void **)(a1 + 32), v45, v46);

      if (v47)
      {
        uint64_t v50 = objc_msgSend_signpost(*(void **)(a1 + 32), v48, v49);
        uint64_t v53 = objc_msgSend_log(v50, v51, v52);

        uint64_t v56 = objc_msgSend_signpost(*(void **)(a1 + 32), v54, v55);
        os_signpost_id_t v59 = objc_msgSend_identifier(v56, v57, v58);

        if (v59 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v53))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v53, OS_SIGNPOST_EVENT, v59, "CKDURLRequest", "Connection created", buf, 2u);
        }
      }
      objc_msgSend_hash(*(void **)(a1 + 32), v48, v49);
      kdebug_trace();
      __int16 v62 = objc_msgSend_metrics(*(void **)(a1 + 32), v60, v61);
      uint64_t v65 = objc_msgSend_connectionsCreated(v62, v63, v64);
      objc_msgSend_setConnectionsCreated_(v62, v66, v65 + 1);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 33) = 1;
    uint64_t v67 = objc_msgSend_metrics(*(void **)(a1 + 32), v45, v46);
    uint64_t v70 = objc_msgSend_countOfBytesSent(*(void **)(a1 + 48), v68, v69);
    uint64_t v73 = objc_msgSend_bytesUploaded(v67, v71, v72);
    objc_msgSend_setBytesUploaded_(v67, v74, v73 + v70);

    uint64_t v77 = objc_msgSend_metrics(*(void **)(a1 + 32), v75, v76);
    uint64_t v80 = objc_msgSend_countOfBytesReceived(*(void **)(a1 + 48), v78, v79);
    uint64_t v83 = objc_msgSend_bytesDownloaded(v77, v81, v82);
    objc_msgSend_setBytesDownloaded_(v77, v84, v83 + v80);

    uint64_t v87 = objc_msgSend__timingData(*(void **)(a1 + 48), v85, v86);
    objc_msgSend_setTimingData_(*(void **)(a1 + 32), v88, (uint64_t)v87);

    uint64_t v91 = objc_msgSend_dateRequestWentOut(*(void **)(a1 + 32), v89, v90);

    if (v91)
    {
      uint64_t v94 = objc_msgSend_metrics(*(void **)(a1 + 32), v92, v93);
      uint64_t v97 = objc_msgSend_metrics(*(void **)(a1 + 32), v95, v96);
      uint64_t v100 = objc_msgSend_dateRequestWentOut(*(void **)(a1 + 32), v98, v99);
      uint64_t v103 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v101, v102);
      uint64_t v106 = objc_msgSend_dateRequestWentOut(*(void **)(a1 + 32), v104, v105);
      objc_msgSend_timeIntervalSinceDate_(v103, v107, (uint64_t)v106);
      started = objc_msgSend_newRangeWithOperationState_startDate_duration_(v97, v108, 1, v100);
      objc_msgSend_addRange_(v94, v110, (uint64_t)started);

      objc_msgSend_setDateRequestWentOut_(*(void **)(a1 + 32), v111, 0);
    }
    objc_msgSend__tearDownStreamWriter(*(void **)(a1 + 32), v92, v93);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_1C4DC23C4;
    aBlock[3] = &unk_1E64F28A0;
    __int16 v112 = *(void **)(a1 + 40);
    void aBlock[4] = *(void *)(a1 + 32);
    id v148 = v112;
    id v149 = *(id *)(a1 + 48);
    __int16 v113 = (void (**)(void *, void))_Block_copy(aBlock);
    __int16 v116 = objc_msgSend_responseBodyParser(*(void **)(a1 + 32), v114, v115);

    if (v116)
    {
      uint64_t v119 = objc_msgSend_signpost(*(void **)(a1 + 32), v117, v118);

      if (v119)
      {
        id v122 = objc_msgSend_signpost(*(void **)(a1 + 32), v120, v121);
        id v125 = objc_msgSend_log(v122, v123, v124);

        __int16 v128 = objc_msgSend_signpost(*(void **)(a1 + 32), v126, v127);
        os_signpost_id_t v131 = objc_msgSend_identifier(v128, v129, v130);

        if (v131 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v125))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v125, OS_SIGNPOST_EVENT, v131, "CKDURLRequest", "Parsing response", buf, 2u);
        }
      }
      long long v132 = objc_msgSend_responseBodyParser(*(void **)(a1 + 32), v120, v121);
      objc_msgSend_finishWithCompletion_(v132, v133, (uint64_t)v113);
    }
    else
    {
      v113[2](v113, 0);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v29);
    }
    uint64_t v134 = (void *)*MEMORY[0x1E4F1A530];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_INFO))
    {
      __int16 v135 = *(void **)(a1 + 32);
      uint64_t v136 = v134;
      uint64_t v139 = objc_msgSend_requestUUID(v135, v137, v138);
      uint64_t v142 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v140, v141);
      uint64_t v143 = *(void *)(a1 + 48);
      uint64_t v146 = objc_msgSend_urlSessionTask(*(void **)(a1 + 32), v144, v145);
      *(_DWORD *)buf = 138544130;
      long long v151 = v139;
      __int16 v152 = 2114;
      uint64_t v153 = v142;
      __int16 v154 = 2112;
      uint64_t v155 = v143;
      __int16 v156 = 2112;
      uint64_t v157 = v146;
      _os_log_impl(&dword_1C4CFF000, v136, OS_LOG_TYPE_INFO, "req: %{public}@, \"%{public}@ ignoring spurious callback from task %@, which is not my task %@\"", buf, 0x2Au);
    }
  }
}

void sub_1C4DC23C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1C4DC2490;
  v7[3] = &unk_1E64F0DF0;
  v7[4] = v4;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v5 = v3;
  objc_msgSend_performASyncOnLifecycleQueueIfNotFinished_(v4, v6, (uint64_t)v7);
}

void sub_1C4DC2490(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v188 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_signpost(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    id v7 = objc_msgSend_signpost(*(void **)(a1 + 32), v5, v6);
    id v10 = objc_msgSend_log(v7, v8, v9);

    int v13 = objc_msgSend_signpost(*(void **)(a1 + 32), v11, v12);
    os_signpost_id_t v16 = objc_msgSend_identifier(v13, v14, v15);

    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v10, OS_SIGNPOST_EVENT, v16, "CKDURLRequest", "Finishing", buf, 2u);
    }
  }
  objc_msgSend_requestDidComplete(*(void **)(a1 + 32), v5, v6);
  uint64_t v19 = objc_msgSend_response(*(void **)(a1 + 32), v17, v18);
  uint64_t v21 = objc_msgSend_valueForHTTPHeaderField_(v19, v20, 0x1F204D230);

  __int16 v24 = (void *)MEMORY[0x1E4F1A550];
  uint64_t v25 = (os_log_t *)MEMORY[0x1E4F1A530];
  if (v21)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v26 = *v25;
    if (os_log_type_enabled(*v25, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = *(void **)(a1 + 32);
      uint64_t v29 = v26;
      uint64_t v32 = objc_msgSend_requestUUID(v28, v30, v31);
      *(_DWORD *)buf = 138543618;
      uint64_t v183 = v32;
      __int16 v184 = 2114;
      uint64_t v185 = (uint64_t)v21;
      _os_log_impl(&dword_1C4CFF000, v29, OS_LOG_TYPE_INFO, "req: %{public}@, \"Server requested an AutoBugCapture snapshot to be triggered with reason: %{public}@\"", buf, 0x16u);
    }
    objc_msgSend_setServerProvidedAutoBugCaptureReason_(*(void **)(a1 + 32), v27, (uint64_t)v21);
  }
  uint64_t v33 = objc_msgSend_response(*(void **)(a1 + 32), v22, v23);
  uint64_t v35 = objc_msgSend_valueForHTTPHeaderField_(v33, v34, 0x1F204D250);

  if (v35)
  {
    if (*v24 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v37 = *v25;
    if (os_log_type_enabled(*v25, OS_LOG_TYPE_INFO))
    {
      uint64_t v38 = *(void **)(a1 + 32);
      uint64_t v39 = v37;
      uint64_t v42 = objc_msgSend_requestUUID(v38, v40, v41);
      *(_DWORD *)buf = 138543618;
      uint64_t v183 = v42;
      __int16 v184 = 2114;
      uint64_t v185 = (uint64_t)v35;
      _os_log_impl(&dword_1C4CFF000, v39, OS_LOG_TYPE_INFO, "req: %{public}@, \"Server requested a Tap-To-Radar prompt with reason: %{public}@\"", buf, 0x16u);
    }
    uint64_t v43 = objc_opt_new();
    objc_msgSend_setTitle_(v43, v44, (uint64_t)v35);
    id v45 = objc_alloc_init(MEMORY[0x1E4F28E78]);
    objc_msgSend_appendFormat_(v45, v46, @"Reason: %@\n", v35);
    uint64_t v49 = objc_msgSend_container(*(void **)(a1 + 32), v47, v48);
    uint64_t v52 = objc_msgSend_containerID(v49, v50, v51);
    uint64_t v55 = objc_msgSend_containerIdentifier(v52, v53, v54);
    objc_msgSend_appendFormat_(v45, v56, @"Container: %@\n", v55);

    os_signpost_id_t v59 = objc_msgSend_container(*(void **)(a1 + 32), v57, v58);
    __int16 v62 = objc_msgSend_account(v59, v60, v61);
    uint64_t v65 = objc_msgSend_dsid(v62, v63, v64);
    objc_msgSend_appendFormat_(v45, v66, @"DSID: %@\n", v65);

    uint64_t v69 = objc_msgSend_operation(*(void **)(a1 + 32), v67, v68);
    uint64_t v72 = objc_msgSend_topmostParentOperation(v69, v70, v71);
    uint64_t v75 = objc_msgSend_operationID(v72, v73, v74);
    objc_msgSend_appendFormat_(v45, v76, @"Operation ID: %@\n", v75);

    uint64_t v79 = objc_msgSend_requestUUID(*(void **)(a1 + 32), v77, v78);
    objc_msgSend_appendFormat_(v45, v80, @"Request UUID: %@", v79);

    objc_msgSend_setRadarDescription_(v43, v81, (uint64_t)v45);
    uint64_t v84 = objc_msgSend_response(*(void **)(a1 + 32), v82, v83);
    uint64_t v86 = objc_msgSend_valueForHTTPHeaderField_(v84, v85, 0x1F204D270);

    if (v86)
    {
      uint64_t v89 = objc_msgSend_componentsSeparatedByString_(v86, v87, @"|");
      if (objc_msgSend_count(v89, v90, v91))
      {
        uint64_t v94 = objc_msgSend_objectAtIndexedSubscript_(v89, v92, 0);
        objc_msgSend_setComponentName_(v43, v95, (uint64_t)v94);
      }
      if ((unint64_t)objc_msgSend_count(v89, v92, v93) >= 2)
      {
        uint64_t v98 = objc_msgSend_objectAtIndexedSubscript_(v89, v96, 1);
        objc_msgSend_setComponentVersion_(v43, v99, (uint64_t)v98);
      }
      if ((unint64_t)objc_msgSend_count(v89, v96, v97) >= 3)
      {
        uint64_t v101 = objc_msgSend_objectAtIndexedSubscript_(v89, v100, 2);
        objc_msgSend_setComponentID_(v43, v102, (uint64_t)v101);
      }
    }
    uint64_t v103 = objc_msgSend_response(*(void **)(a1 + 32), v87, v88);
    uint64_t v105 = objc_msgSend_valueForHTTPHeaderField_(v103, v104, 0x1F204D290);

    if (v105) {
      objc_msgSend_setRelatedRadar_(v43, v106, (uint64_t)v105);
    }
    objc_msgSend_setServerProvidedTapToRadarRequest_(*(void **)(a1 + 32), v106, (uint64_t)v43);
  }
  uint64_t v107 = *(void **)(a1 + 32);
  uint64_t v108 = *(void *)(a1 + 40);
  if (v108)
  {
    objc_msgSend_finishWithError_(v107, v36, v108);
    goto LABEL_45;
  }
  if (objc_msgSend_isHandlingAuthRetry(v107, v36, 0)) {
    goto LABEL_45;
  }
  __int16 v111 = objc_msgSend_response(*(void **)(a1 + 32), v109, v110);

  if (!v111)
  {
    if (*v24 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v121 = *v25;
    if (os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v123 = *(void **)(a1 + 32);
      uint64_t v124 = v121;
      uint64_t v127 = objc_msgSend_requestUUID(v123, v125, v126);
      uint64_t v128 = *(void *)(a1 + 32);
      uint64_t v129 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      uint64_t v183 = v127;
      __int16 v184 = 2112;
      uint64_t v185 = v128;
      __int16 v186 = 2112;
      uint64_t v187 = v129;
      _os_log_impl(&dword_1C4CFF000, v124, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Received a didCompleteWithError without an error but no response from the server. Treating the following task as an unknown error: %@ %@\"", buf, 0x20u);
    }
    uint64_t v130 = *(void **)(a1 + 32);
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v122, *MEMORY[0x1E4F19DD8], 1000, @"Received a didCompleteWithError without receiving a response from the server");
    os_signpost_id_t v131 = LABEL_44:;
    objc_msgSend_finishWithError_(v130, v132, (uint64_t)v131);

    goto LABEL_45;
  }
  if (objc_msgSend_needsAuthRetry(*(void **)(a1 + 32), v112, v113))
  {
    if (*v24 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v116 = *v25;
    if (os_log_type_enabled(*v25, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v168 = *(void **)(a1 + 32);
      uint64_t v169 = v116;
      uint64_t v172 = objc_msgSend_requestUUID(v168, v170, v171);
      id v175 = objc_msgSend_ckShortDescription(*(void **)(a1 + 32), v173, v174);
      *(_DWORD *)buf = 138543618;
      uint64_t v183 = v172;
      __int16 v184 = 2114;
      uint64_t v185 = (uint64_t)v175;
      _os_log_debug_impl(&dword_1C4CFF000, v169, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"%{public}@ request is marked as needing auth retry\"", buf, 0x16u);
    }
    objc_msgSend_setNeedsAuthRetry_(*(void **)(a1 + 32), v117, 0);
    uint64_t v120 = *(void **)(a1 + 32);
LABEL_38:
    objc_msgSend__handleAuthFailure(v120, v118, v119);
    goto LABEL_45;
  }
  long long v133 = objc_msgSend_response(*(void **)(a1 + 32), v114, v115);
  *(void *)(*(void *)(a1 + 32) + 16) = objc_msgSend_statusCode(v133, v134, v135);

  if ((unint64_t)(objc_msgSend_responseStatusCode(*(void **)(a1 + 32), v136, v137) - 200) >= 0x64)
  {
    if (*v24 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v142 = *v25;
    if (os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v145 = *(void **)(a1 + 32);
      uint64_t v146 = v142;
      id v149 = objc_msgSend_requestUUID(v145, v147, v148);
      uint64_t v152 = objc_msgSend_responseStatusCode(*(void **)(a1 + 32), v150, v151);
      *(_DWORD *)buf = 138543618;
      uint64_t v183 = v149;
      __int16 v184 = 2048;
      uint64_t v185 = v152;
      _os_log_impl(&dword_1C4CFF000, v146, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Warn: request failed with http status %ld\"", buf, 0x16u);
    }
    uint64_t v153 = objc_msgSend_responseStatusCode(*(void **)(a1 + 32), v143, v144);
    uint64_t v120 = *(void **)(a1 + 32);
    if (v153 != 401)
    {
      __int16 v154 = objc_msgSend_response(v120, v118, v119);
      uint64_t v155 = CKErrorFromHTTPResponse();

      objc_msgSend_finishWithError_(*(void **)(a1 + 32), v156, (uint64_t)v155);
      goto LABEL_45;
    }
    goto LABEL_38;
  }
  if (!*(void *)(a1 + 56))
  {
    if ((objc_msgSend_didReceiveResponseBodyData(*(void **)(a1 + 32), v138, v139) & 1) != 0
      || !objc_msgSend_expectsResponseBody(*(void **)(a1 + 32), v157, v158))
    {
      objc_msgSend_finishWithError_(*(void **)(a1 + 32), v157, 0);
      goto LABEL_45;
    }
    if (*v24 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v159 = *v25;
    if (os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
    {
      id v161 = *(void **)(a1 + 32);
      id v162 = v159;
      uint64_t v165 = objc_msgSend_requestUUID(v161, v163, v164);
      uint64_t v166 = *(void *)(a1 + 32);
      uint64_t v167 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      uint64_t v183 = v165;
      __int16 v184 = 2112;
      uint64_t v185 = v166;
      __int16 v186 = 2112;
      uint64_t v187 = v167;
      _os_log_impl(&dword_1C4CFF000, v162, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"Received a didCompleteWithError without an error but no response body where one was expected. Treating the following task as an unknown error: %@ %@\"", buf, 0x20u);
    }
    uint64_t v130 = *(void **)(a1 + 32);
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v160, *MEMORY[0x1E4F19DD8], 1000, @"Received a didCompleteWithError without an error but no response body where one was expected");
    goto LABEL_44;
  }
  if (*v24 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  os_log_t v140 = *v25;
  if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
  {
    uint64_t v176 = *(void **)(a1 + 32);
    uint64_t v177 = v140;
    uint64_t v180 = objc_msgSend_requestUUID(v176, v178, v179);
    uint64_t v181 = *(void *)(a1 + 56);
    *(_DWORD *)buf = 138543618;
    uint64_t v183 = v180;
    __int16 v184 = 2112;
    uint64_t v185 = v181;
    _os_log_error_impl(&dword_1C4CFF000, v177, OS_LOG_TYPE_ERROR, "req: %{public}@, \"Parser failed to parse with error %@\"", buf, 0x16u);
  }
  objc_msgSend_finishWithError_(*(void **)(a1 + 32), v141, *(void *)(a1 + 56));
LABEL_45:
}

void sub_1C4DC3060(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  os_signpost_id_t v16 = &v15;
  uint64_t v17 = 0x3032000000;
  uint64_t v18 = sub_1C4DBAD5C;
  uint64_t v19 = sub_1C4DBAD6C;
  id v20 = 0;
  id v2 = _os_activity_create(&dword_1C4CFF000, "url-request-transmission", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4DC32D4;
  block[3] = &unk_1E64F28C8;
  void block[4] = *(void *)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  uint64_t v14 = &v15;
  os_activity_apply(v2, block);
  id v3 = v13;
  uint64_t v4 = v2;

  id v5 = *(void **)(*(void *)(a1 + 32) + 112);
  *(void *)(*(void *)(a1 + 32) + 112) = v4;

  id v7 = objc_msgSend_valueForHTTPHeaderField_((void *)v16[5], v6, *MEMORY[0x1E4F19C88]);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v8 = (id)*MEMORY[0x1E4F1A530];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = objc_msgSend_requestUUID(*(void **)(a1 + 32), v9, v10);
    *(_DWORD *)buf = 138543618;
    uint64_t v22 = v11;
    __int16 v23 = 2112;
    __int16 v24 = v7;
    _os_log_debug_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"[originalRequest mutableCopy] header UUID=%@\"", buf, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();

  _Block_object_dispose(&v15, 8);
}

void sub_1C4DC32B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DC32D4(uint64_t a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = voucher_copy();
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 328);
  *(void *)(v3 + 328) = v2;

  id v7 = objc_msgSend_signpost(*(void **)(a1 + 32), v5, v6);

  if (v7)
  {
    uint64_t v10 = objc_msgSend_signpost(*(void **)(a1 + 32), v8, v9);
    id v13 = objc_msgSend_log(v10, v11, v12);

    os_signpost_id_t v16 = objc_msgSend_signpost(*(void **)(a1 + 32), v14, v15);
    os_signpost_id_t v19 = objc_msgSend_identifier(v16, v17, v18);

    if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
    {
      LOWORD(v55) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v13, OS_SIGNPOST_EVENT, v19, "CKDURLRequest", "Establishing connection", (uint8_t *)&v55, 2u);
    }
  }
  objc_msgSend_hash(*(void **)(a1 + 32), v8, v9);
  kdebug_trace();
  uint64_t v22 = objc_msgSend_metrics(*(void **)(a1 + 32), v20, v21);
  uint64_t v25 = objc_msgSend_connections(v22, v23, v24);
  objc_msgSend_setConnections_(v22, v26, v25 + 1);

  uint64_t v27 = (void *)MEMORY[0x1E4F1A550];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v28 = (os_log_t *)MEMORY[0x1E4F1A530];
  uint64_t v29 = (void *)*MEMORY[0x1E4F1A530];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v31 = *(void **)(a1 + 32);
    uint64_t v32 = v29;
    uint64_t v35 = objc_msgSend_requestUUID(v31, v33, v34);
    int v55 = 138543362;
    uint64_t v56 = v35;
    _os_log_impl(&dword_1C4CFF000, v32, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"requestForEstablishedConnection\"", (uint8_t *)&v55, 0xCu);
  }
  uint64_t v36 = objc_msgSend_valueForHTTPHeaderField_(*(void **)(a1 + 40), v30, *MEMORY[0x1E4F19C88]);
  if (*v27 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  os_log_t v37 = *v28;
  if (os_log_type_enabled(*v28, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v50 = *(void **)(a1 + 32);
    uint64_t v51 = v37;
    uint64_t v54 = objc_msgSend_requestUUID(v50, v52, v53);
    int v55 = 138543618;
    uint64_t v56 = v54;
    __int16 v57 = 2112;
    uint64_t v58 = v36;
    _os_log_debug_impl(&dword_1C4CFF000, v51, OS_LOG_TYPE_DEBUG, "req: %{public}@, \"originalRequest header UUID=%@\"", (uint8_t *)&v55, 0x16u);
  }
  uint64_t v40 = objc_msgSend_mutableCopy(*(void **)(a1 + 40), v38, v39);
  uint64_t v41 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v42 = *(void **)(v41 + 40);
  *(void *)(v41 + 40) = v40;

  if (objc_msgSend_hasRequestBody(*(void **)(a1 + 32), v43, v44))
  {
    uint64_t v47 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    uint64_t v48 = objc_msgSend_requestBodyStream(*(void **)(a1 + 32), v45, v46);
    objc_msgSend_setHTTPBodyStream_(v47, v49, (uint64_t)v48);
  }
}

void sub_1C4DC3660(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_signpost(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    id v7 = objc_msgSend_signpost(*(void **)(a1 + 32), v5, v6);
    uint64_t v10 = objc_msgSend_log(v7, v8, v9);

    id v13 = objc_msgSend_signpost(*(void **)(a1 + 32), v11, v12);
    os_signpost_id_t v16 = objc_msgSend_identifier(v13, v14, v15);

    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      LOWORD(v23) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v10, OS_SIGNPOST_EVENT, v16, "CKDURLRequest", "Waiting for connection", (uint8_t *)&v23, 2u);
    }
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v17 = (void *)*MEMORY[0x1E4F1A530];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *(void **)(a1 + 32);
    os_signpost_id_t v19 = v17;
    uint64_t v22 = objc_msgSend_requestUUID(v18, v20, v21);
    int v23 = 138543362;
    uint64_t v24 = v22;
    _os_log_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"URLSessionTaskIsWaitingForConnection\"", (uint8_t *)&v23, 0xCu);
  }
}

void sub_1C4DC3874(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int v4 = *(unsigned __int8 *)(a1 + 40);
  id v5 = objc_msgSend_signpost(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    if (!v5) {
      goto LABEL_12;
    }
    id v8 = objc_msgSend_signpost(*(void **)(a1 + 32), v6, v7);
    uint64_t v11 = objc_msgSend_log(v8, v9, v10);

    uint64_t v14 = objc_msgSend_signpost(*(void **)(a1 + 32), v12, v13);
    os_signpost_id_t v17 = objc_msgSend_identifier(v14, v15, v16);

    if (v17 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v11)) {
      goto LABEL_11;
    }
    LOWORD(v35) = 0;
    uint64_t v18 = "Conditional requirements satisfied";
    goto LABEL_10;
  }
  if (!v5) {
    goto LABEL_12;
  }
  os_signpost_id_t v19 = objc_msgSend_signpost(*(void **)(a1 + 32), v6, v7);
  uint64_t v11 = objc_msgSend_log(v19, v20, v21);

  uint64_t v24 = objc_msgSend_signpost(*(void **)(a1 + 32), v22, v23);
  os_signpost_id_t v17 = objc_msgSend_identifier(v24, v25, v26);

  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LOWORD(v35) = 0;
    uint64_t v18 = "Conditional requirements not satisfied";
LABEL_10:
    _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v11, OS_SIGNPOST_EVENT, v17, "CKDURLRequest", v18, (uint8_t *)&v35, 2u);
  }
LABEL_11:

LABEL_12:
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v27 = (void *)*MEMORY[0x1E4F1A530];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = *(void **)(a1 + 32);
    uint64_t v29 = v27;
    uint64_t v32 = objc_msgSend_requestUUID(v28, v30, v31);
    uint64_t v33 = (void *)v32;
    uint64_t v34 = "satisfied";
    if (!*(unsigned char *)(a1 + 40)) {
      uint64_t v34 = "NOT satisfied";
    }
    int v35 = 138543618;
    uint64_t v36 = v32;
    __int16 v37 = 2080;
    uint64_t v38 = v34;
    _os_log_impl(&dword_1C4CFF000, v29, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"conditionalRequirementsChanged to: %s\"", (uint8_t *)&v35, 0x16u);
  }
}

uint64_t sub_1C4DC3B54(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v4 = objc_msgSend_signpost(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    uint64_t v7 = objc_msgSend_signpost(*(void **)(a1 + 32), v5, v6);
    uint64_t v10 = objc_msgSend_log(v7, v8, v9);

    uint64_t v13 = objc_msgSend_signpost(*(void **)(a1 + 32), v11, v12);
    os_signpost_id_t v16 = objc_msgSend_identifier(v13, v14, v15);

    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      os_signpost_id_t v17 = *(void **)(a1 + 40);
      int v27 = 138412290;
      uint64_t v28 = v17;
      _os_signpost_emit_with_name_impl(&dword_1C4CFF000, v10, OS_SIGNPOST_EVENT, v16, "CKDURLRequest", "Retrying background data task with error: %@", (uint8_t *)&v27, 0xCu);
    }
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v18 = (void *)*MEMORY[0x1E4F1A530];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A530], OS_LOG_TYPE_DEFAULT))
  {
    id v20 = *(void **)(a1 + 32);
    uint64_t v21 = v18;
    uint64_t v24 = objc_msgSend_requestUUID(v20, v22, v23);
    uint64_t v25 = *(void *)(a1 + 40);
    int v27 = 138543618;
    uint64_t v28 = v24;
    __int16 v29 = 2112;
    uint64_t v30 = v25;
    _os_log_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_DEFAULT, "req: %{public}@, \"URLSessionWillRetryBackgroundDataTask after event %@\"", (uint8_t *)&v27, 0x16u);
  }
  return objc_msgSend_setResponseBodyParser_(*(void **)(a1 + 32), v19, 0);
}

void sub_1C4DC4554()
{
  uint64_t v0 = (void *)qword_1EBBCDD08;
  qword_1EBBCDD08 = (uint64_t)&unk_1F20ABA88;
}

uint64_t sub_1C4DC47A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (1)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0) {
            goto LABEL_41;
          }
          v23 += 7;
          BOOL v14 = v24++ >= 9;
          if (v14)
          {
            uint64_t v25 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
LABEL_43:
        *(unsigned char *)(a1 + 12) = v25 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_37;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_39:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4DC5AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 8;
        goto LABEL_24;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
LABEL_24:
        uint64_t v20 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadData();
    uint64_t v19 = 24;
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *sub_1C4DC6110(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return @"Current Service";
  }
  else {
    return off_1E64F31F8[a1 - 1];
  }
}

__CFString *CKStringFromSharePermission(char a1)
{
  uint64_t v2 = objc_opt_new();
  int v4 = v2;
  if (a1) {
    objc_msgSend_addObject_(v2, v3, @"ReadOnly");
  }
  else {
    objc_msgSend_addObject_(v2, v3, @"ReadWrite");
  }
  if ((a1 & 2) != 0) {
    objc_msgSend_addObject_(v4, v5, @"OON");
  }
  if ((a1 & 4) != 0) {
    objc_msgSend_addObject_(v4, v5, @"Anonymous");
  }
  if (objc_msgSend_count(v4, v5, v6))
  {
    objc_msgSend_componentsJoinedByString_(v4, v7, @"|");
    char v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    char v8 = @"none";
  }

  return v8;
}

void sub_1C4DC6BB4(uint64_t a1, const char *a2, uint64_t a3)
{
  int v4 = objc_msgSend_account(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_setAccount_(*(void **)(a1 + 32), v5, *(void *)(a1 + 40));
  char v8 = objc_msgSend_identityManager(*(void **)(a1 + 32), v6, v7);
  objc_msgSend_updateAccount_(v8, v9, *(void *)(a1 + 40));

  unint64_t v12 = objc_msgSend_accountID(*(void **)(a1 + 40), v10, v11);
  int v15 = objc_msgSend_accountID(v4, v13, v14);
  char isEqualToString = objc_msgSend_isEqualToString_(v12, v16, (uint64_t)v15);

  if ((isEqualToString & 1) == 0)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v18 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v34 = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_DEBUG, "Account information changed. Clearing PCS caches", v34, 2u);
    }
    objc_msgSend_setBoundaryKeyData_(*(void **)(a1 + 32), v19, 0);
    if (!objc_msgSend_accountType(*(void **)(a1 + 40), v20, v21))
    {
      unsigned int v24 = objc_msgSend_undecryptablePCSDataHashes(*(void **)(a1 + 32), v22, v23);
      objc_msgSend_removeAllObjects(v24, v25, v26);

      __int16 v29 = objc_msgSend_sharedNotifier(CKDPCSNotifier, v27, v28);
      uint64_t v32 = objc_msgSend_uuid(*(void **)(a1 + 32), v30, v31);
      objc_msgSend_clearServicesAndPublicKeysForManagerUUID_(v29, v33, (uint64_t)v32);
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1C4DC7424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DC743C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4DC744C(uint64_t a1)
{
}

uint64_t sub_1C4DC7454(uint64_t a1, const char *a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend_copy(*(void **)(*(void *)(a1 + 32) + 64), a2, a3);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4DC8544(void *a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v7 = v5;
  if (!a2 || v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_signpost_id_t v16 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v20 = v7;
      _os_log_debug_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEBUG, "Error decrypting the per-participant PCS: %@", buf, 0xCu);
    }
  }
  else
  {
    char v8 = (void *)a1[4];
    uint64_t v9 = a1[5];
    id v18 = 0;
    unint64_t v10 = objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v8, v6, v9, 5, a2, &v18);
    id v11 = v18;
    uint64_t v7 = v11;
    if (v10) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 0;
    }
    char v13 = (void *)*MEMORY[0x1E4F1A548];
    uint64_t v14 = *MEMORY[0x1E4F1A550];
    if (v12)
    {
      if (v14 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v13);
      }
      int v15 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v20 = v10;
        _os_log_debug_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_DEBUG, "Successfully invited PCS: %@", buf, 0xCu);
      }
    }
    else
    {
      if (v14 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v13);
      }
      unint64_t v17 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v20 = v7;
        _os_log_debug_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_DEBUG, "Error decrypting the invited PCS: %@", buf, 0xCu);
        if (!v10) {
          goto LABEL_22;
        }
      }
      else if (!v10)
      {
        goto LABEL_22;
      }
    }
    CFRelease(v10);
  }
LABEL_22:
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1C4DC8CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t sub_1C4DC8CC8(uint64_t a1)
{
  uint64_t result = PCSFPAddPublicIdentity();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1C4DCA7B8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DCA7E8(uint64_t a1)
{
  uint64_t result = PCSFPAddPublicIdentity();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1C4DCA820(void **a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v11 = objc_msgSend_synchronizeQueue(a1[4], v9, v10);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4DCA948;
  block[3] = &unk_1E64F2940;
  char v21 = a2;
  id v15 = v7;
  id v16 = a1[5];
  id v17 = a1[6];
  id v18 = v8;
  uint64_t v19 = a1[4];
  id v20 = a1[7];
  id v12 = v8;
  id v13 = v7;
  dispatch_async(v11, block);
}

void sub_1C4DCA948(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 80) && !*(void *)(a1 + 32))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v8 = *MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      uint64_t v19 = v13;
      __int16 v20 = 2114;
      uint64_t v21 = v14;
      _os_log_debug_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_DEBUG, "User key sync succeeded for service %{public}@ and operation %{public}@. Retrying zone PCS creation.", buf, 0x16u);
    }
    objc_msgSend__locked_createZonePCSWithSyncKeyRegistryRetry_requestorOperationID_keySyncAnalytics_completionHandler_(*(void **)(a1 + 64), v9, 0, *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 72));
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v2 = *MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      uint64_t v19 = v11;
      __int16 v20 = 2114;
      uint64_t v21 = v10;
      __int16 v22 = 2112;
      uint64_t v23 = v12;
      _os_log_debug_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_DEBUG, "User key sync failed for service %{public}@ and operation %{public}@. Won't retry zone PCS creation due to error: %@.", buf, 0x20u);
    }
    objc_msgSend_setOverallResult_(*(void **)(a1 + 56), v3, @"failure");
    objc_msgSend_sendCoreAnalyticsEventForKeySync_(*(void **)(a1 + 64), v4, *(void *)(a1 + 56));
    id v7 = objc_msgSend_callbackQueue(*(void **)(a1 + 64), v5, v6);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    void v15[2] = sub_1C4DCAB9C;
    void v15[3] = &unk_1E64F0790;
    id v17 = *(id *)(a1 + 72);
    id v16 = *(id *)(a1 + 32);
    dispatch_async(v7, v15);
  }
}

uint64_t sub_1C4DCAB9C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1C4DCABC0(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

uint64_t sub_1C4DCACC8(uint64_t a1, const char *a2)
{
  return objc_msgSend__locked_createZonePCSWithSyncKeyRegistryRetry_requestorOperationID_keySyncAnalytics_completionHandler_(*(void **)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 40), 0, *(void *)(a1 + 48));
}

void sub_1C4DCB368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DCB38C(uint64_t a1)
{
  uint64_t result = PCSFPAddPublicIdentity();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1C4DCB6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DCB6F4(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = PCSFPCopyExported();
  return MEMORY[0x1F41817F8]();
}

void sub_1C4DCB950(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = (id)PCSPublicIdentityCopyPublicKey();
  objc_msgSend_addObject_(v1, v2, (uint64_t)v3);
}

void sub_1C4DCC3AC(_Unwind_Exception *a1)
{
}

void sub_1C4DCC3D4(uint64_t a1, const char *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
    objc_msgSend_setIsCurrentUser_(*(void **)(a1 + 32), a2, 1);
    objc_msgSend_setCallingParticipant_(*(void **)(a1 + 40), v3, *(void *)(a1 + 32));
    uint64_t v6 = objc_msgSend_acceptanceStatus(*(void **)(a1 + 32), v4, v5);
    uint64_t v9 = (void *)MEMORY[0x1E4F1A550];
    uint64_t v10 = (os_log_t *)MEMORY[0x1E4F1A528];
    if (v6 == 2)
    {
      uint64_t v11 = objc_msgSend_userIdentity(*(void **)(a1 + 32), v7, v8);
      uint64_t v14 = objc_msgSend_userRecordID(v11, v12, v13);
      id v17 = objc_msgSend_recordName(v14, v15, v16);

      if (*v9 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      os_log_t v18 = *v10;
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
      {
        __int16 v29 = *(void **)(a1 + 32);
        uint64_t v30 = v18;
        uint64_t v33 = objc_msgSend_participantID(v29, v31, v32);
        int v34 = 138412546;
        int v35 = v33;
        __int16 v36 = 2112;
        __int16 v37 = v17;
        _os_log_debug_impl(&dword_1C4CFF000, v30, OS_LOG_TYPE_DEBUG, "Stingray share is already accepted by participant %@, filling anonymousID %@ for share metadata.", (uint8_t *)&v34, 0x16u);
      }
      objc_msgSend_fillAnonymousCKUserID_(*(void **)(a1 + 40), v19, (uint64_t)v17);
    }
    if (*v9 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v20 = *v10;
    if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = *(void **)(a1 + 40);
      __int16 v22 = v20;
      uint64_t v25 = objc_msgSend_callingParticipant(v21, v23, v24);
      uint64_t v28 = objc_msgSend_recordID(*(void **)(a1 + 48), v26, v27);
      int v34 = 138412546;
      int v35 = v25;
      __int16 v36 = 2112;
      __int16 v37 = v28;
      _os_log_debug_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_DEBUG, "Found current participant %@ on anonymous to server share %@", (uint8_t *)&v34, 0x16u);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_1C4DCC624(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_1C4DCEE40(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose(&STACK[0x280], 8);
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DCEEA4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, 0);
  }
  return result;
}

uint64_t sub_1C4DCEEC4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
  return result;
}

uint64_t sub_1C4DCEEF0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
  return result;
}

void sub_1C4DCEF1C(uint64_t a1, uint64_t a2, __CFString *cf)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v6 = (void *)MEMORY[0x1E4F1A550];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v7 = *MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = &stru_1F2044F30;
    uint64_t v10 = @"un";
    uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
    if (a2) {
      uint64_t v10 = &stru_1F2044F30;
    }
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 48);
    id v15 = @". Error: ";
    if (cf) {
      uint64_t v9 = cf;
    }
    else {
      id v15 = &stru_1F2044F30;
    }
    *(_DWORD *)buf = 138544898;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v10;
    *(_WORD *)&buf[22] = 2112;
    uint64_t v54 = v11;
    __int16 v55 = 2114;
    uint64_t v56 = v13;
    __int16 v57 = 2114;
    uint64_t v58 = v14;
    __int16 v59 = 2114;
    __int16 v60 = v15;
    __int16 v61 = 2112;
    __int16 v62 = v9;
    _os_log_debug_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_DEBUG, "Finished unwrapping PCS with data %{public}@ %{public}@successfully with identities %@ for service %{public}@ operation %{public}@.%{public}@%@", buf, 0x48u);
    if (!a2) {
      goto LABEL_16;
    }
  }
  else if (!a2)
  {
    goto LABEL_16;
  }
  if (!cf)
  {
    *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = a2;
    uint64_t v8 = *(const void **)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
    if (v8) {
      CFRetain(v8);
    }
    goto LABEL_26;
  }
LABEL_16:
  uint64_t v16 = objc_opt_class();
  uint64_t v18 = objc_msgSend_noMatchingIdentityErrorForPCSError_withErrorCode_description_(v16, v17, (uint64_t)cf, 5004, @"Failed to decrypt PCS data with user identities");
  uint64_t v19 = *(void *)(*(void *)(a1 + 96) + 8);
  os_log_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = v18;

  uint64_t v23 = objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], v21, v22);
  if (objc_msgSend_isAppleInternalInstall(v23, v24, v25))
  {
    BOOL v26 = *(unsigned char *)(a1 + 104) == 0;

    if (!v26)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x2020000000;
      uint64_t v54 = 0;
      __int16 v29 = objc_msgSend_identityManager(*(void **)(a1 + 56), v27, v28);
      uint64_t FullKeychainIdentitySetWithError = objc_msgSend_createFullKeychainIdentitySetWithError_(v29, v30, 0);

      uint64_t v54 = FullKeychainIdentitySetWithError;
      if (*(void *)(*(void *)&buf[8] + 24))
      {
        if (*v6 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v32 = *MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
        {
          uint64_t v39 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
          uint64_t v40 = *(void *)(*(void *)&buf[8] + 24);
          *(_DWORD *)uint64_t v49 = 138412546;
          uint64_t v50 = v39;
          __int16 v51 = 2112;
          uint64_t v52 = v40;
          _os_log_debug_impl(&dword_1C4CFF000, v32, OS_LOG_TYPE_DEBUG, "Decryption with identity set %@ failed. Attempting to decrypt using all identities in the keychain %@", v49, 0x16u);
        }
        dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
        int v35 = objc_msgSend_synchronizeQueue(*(void **)(a1 + 56), v33, v34);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_1C4DCF334;
        block[3] = &unk_1E64F2A30;
        uint64_t v47 = buf;
        id v42 = *(id *)(a1 + 72);
        id v43 = *(id *)(a1 + 32);
        id v36 = *(id *)(a1 + 40);
        uint64_t v37 = *(void *)(a1 + 56);
        uint64_t v38 = *(void **)(a1 + 64);
        id v44 = v36;
        uint64_t v45 = v37;
        uint64_t v48 = *(void *)(a1 + 96);
        id v46 = v38;
        dispatch_async(v35, block);
      }
      _Block_object_dispose(buf, 8);
    }
  }
  else
  {
  }
LABEL_26:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_1C4DCF314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DCF334(uint64_t a1, const char *a2)
{
  void v9[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *MEMORY[0x1E4F93EB8];
  v8[0] = *MEMORY[0x1E4F93EC8];
  v8[1] = v4;
  v9[0] = v3;
  v9[1] = MEMORY[0x1E4F1CC28];
  uint64_t v5 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v9, v8, 2);
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 64);
  PCSObjectCreateFromExportedWithIdentitiesAndOptionsAsync();
}

void sub_1C4DCF478(uint64_t a1, uint64_t a2, void *cf)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (cf)
  {
    CFRetain(cf);
  }
  else if (a2)
  {
    PCSFPGetUnwrapPublicIdentity();
    uint64_t v5 = PCSPublicIdentityGetServiceName();
    if ((objc_msgSend_isEqualToString_(*(void **)(a1 + 32), v6, (uint64_t)v5) & 1) == 0)
    {
      uint64_t v9 = *(void **)(a1 + 32);
      uint64_t v10 = objc_msgSend_containerID(*(void **)(a1 + 40), v7, v8);
      uint64_t v13 = objc_msgSend_responsibleBundleID(*(void **)(a1 + 40), v11, v12);
      CKWarnForIncorrectServiceIdentity(v9, v10, v13);

      uint64_t v14 = objc_opt_class();
      uint64_t v16 = objc_msgSend_noMatchingIdentityErrorForPCSError_withErrorCode_description_(v14, v15, 0, 5004, @"Could not decrypt PCS data with the selected identity. A key to decrypt this data does exist, but it will not be used.");
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v18 = *(void **)(v17 + 40);
      *(void *)(v17 + 40) = v16;

      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v19 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = *(void *)(a1 + 32);
        int v22 = 138543618;
        uint64_t v23 = v5;
        __int16 v24 = 2114;
        uint64_t v25 = v21;
        _os_log_error_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_ERROR, "Was able to decrypt pcs with %{public}@ key in the keychain, but not the %{public}@ key. Possibly a misconfigured client set up.", (uint8_t *)&v22, 0x16u);
      }
    }
  }
  os_log_t v20 = *(const void **)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1C4DCF648(uint64_t a1)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40)) {
    goto LABEL_2;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) && !*(void *)(a1 + 32))
  {
    __int16 v57 = objc_opt_class();
    uint64_t v59 = objc_msgSend_noMatchingIdentityErrorForPCSError_withErrorCode_description_(v57, v58, *(void *)(*(void *)(*(void *)(a1 + 144) + 8) + 24), 5004, @"Failed to decrypt PCS data with user identities");
    uint64_t v60 = *(void *)(*(void *)(a1 + 120) + 8);
    __int16 v61 = *(void **)(v60 + 40);
    *(void *)(v60 + 40) = v59;

LABEL_2:
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v2 = *MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(__CFString **)(*(void *)(*(void *)(a1 + 120) + 8) + 40);
      uint64_t v5 = *(__CFString **)(a1 + 64);
      id v6 = *(__CFString **)(a1 + 40);
      uint64_t v7 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138413058;
      uint64_t v99 = v4;
      __int16 v100 = 2112;
      uint64_t v101 = v6;
      __int16 v102 = 2112;
      uint64_t v103 = v5;
      __int16 v104 = 2112;
      uint64_t v105 = v7;
      _os_log_error_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_ERROR, "Error creating PCS: %@.\nIdentity %@\nPEM data was %@\nPCS data %@.", buf, 0x2Au);
    }
    goto LABEL_12;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v8 = *MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24)) {
      uint64_t v66 = @"PCS";
    }
    else {
      uint64_t v66 = @"PPPCS data";
    }
    uint64_t v67 = *(__CFString **)(a1 + 40);
    uint64_t v68 = *(__CFString **)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    uint64_t v99 = v66;
    __int16 v100 = 2112;
    uint64_t v101 = v67;
    __int16 v102 = 2114;
    uint64_t v103 = v68;
    _os_log_debug_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_DEBUG, "Created %{public}@ using identity %@ \nFrom data %{public}@", buf, 0x20u);
  }
  uint64_t v9 = objc_alloc_init(CKDPCSData);
  uint64_t v10 = *(void *)(*(void *)(a1 + 136) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  objc_msgSend_setPcs_(*(void **)(*(void *)(*(void *)(a1 + 136) + 8) + 40), v12, *(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24));
  objc_msgSend_setPcsData_(*(void **)(*(void *)(*(void *)(a1 + 136) + 8) + 40), v13, *(void *)(a1 + 32));
LABEL_12:
  uint64_t v14 = *(const void **)(*(void *)(*(void *)(a1 + 152) + 8) + 24);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(*(void *)(*(void *)(a1 + 152) + 8) + 24) = 0;
  }
  id v15 = *(const void **)(*(void *)(*(void *)(a1 + 128) + 8) + 24);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) = 0;
  }
  if (*MEMORY[0x1E4F1A4E0])
  {
    uint64_t v16 = *(void **)(a1 + 56);
    BOOL v17 = *(unsigned char *)(a1 + 184) == 0;
    uint64_t v18 = *(void *)(*(void *)(a1 + 120) + 8);
    id v97 = *(id *)(v18 + 40);
    objc_msgSend__checkUnitTestOverridesForDecryptionFailuresWithState_error_(v16, v3, v17, &v97);
    objc_storeStrong((id *)(v18 + 40), v97);
    if (*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40))
    {
      uint64_t v19 = *(void *)(*(void *)(a1 + 136) + 8);
      os_log_t v20 = *(void **)(v19 + 40);
      *(void *)(v19 + 40) = 0;
    }
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1C4DCFEAC;
  aBlock[3] = &unk_1E64F2AD0;
  id v85 = *(id *)(a1 + 72);
  id v86 = *(id *)(a1 + 80);
  id v21 = *(id *)(a1 + 88);
  uint64_t v22 = *(void *)(a1 + 56);
  id v87 = v21;
  uint64_t v88 = v22;
  uint64_t v23 = *(void *)(a1 + 168);
  uint64_t v93 = *(void *)(a1 + 160);
  uint64_t v94 = v23;
  uint64_t v92 = *(void *)(a1 + 144);
  id v91 = *(id *)(a1 + 112);
  id v24 = *(id *)(a1 + 48);
  uint64_t v25 = *(void *)(a1 + 176);
  id v89 = v24;
  uint64_t v95 = v25;
  char v96 = *(unsigned char *)(a1 + 185);
  id v90 = *(id *)(a1 + 96);
  uint64_t v26 = _Block_copy(aBlock);
  v74[0] = MEMORY[0x1E4F143A8];
  v74[1] = 3221225472;
  v74[2] = sub_1C4DD0588;
  v74[3] = &unk_1E64F2B20;
  uint64_t v27 = *(void *)(a1 + 120);
  uint64_t v83 = *(void *)(a1 + 168);
  uint64_t v28 = *(void *)(a1 + 56);
  uint64_t v81 = v27;
  unsigned char v74[4] = v28;
  long long v82 = *(_OWORD *)(a1 + 136);
  id v75 = *(id *)(a1 + 80);
  id v76 = *(id *)(a1 + 72);
  id v77 = *(id *)(a1 + 88);
  id v78 = *(id *)(a1 + 48);
  id v79 = *(id *)(a1 + 104);
  id v80 = *(id *)(a1 + 112);
  __int16 v29 = (void (**)(void))_Block_copy(v74);
  uint64_t v32 = objc_msgSend_domain(*(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40), v30, v31);
  if (objc_msgSend_isEqualToString_(v32, v33, *MEMORY[0x1E4F19DD8])) {
    BOOL v38 = objc_msgSend_code(*(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40), v34, v35) != 5000
  }
       && objc_msgSend_code(*(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40), v36, v37) != 5004;
  else {
    BOOL v38 = 1;
  }

  if (*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) && !v38 && *(unsigned char *)(a1 + 184))
  {
    if (*(void *)(a1 + 96) && (unint64_t)(*(void *)(a1 + 176) - 3) <= 1)
    {
      uint64_t v41 = objc_msgSend_identityManager(*(void **)(a1 + 56), v39, v40);
      id v43 = objc_msgSend_PCSServiceStringFromCKServiceType_(v41, v42, *(void *)(a1 + 168));

      uint64_t IsManatee = objc_msgSend_serviceTypeIsManatee_(*(void **)(a1 + 56), v44, *(void *)(a1 + 168));
      uint64_t v48 = objc_msgSend_sharedManager(CKDPCSKeySyncManager, v46, v47);
      __int16 v51 = objc_msgSend_account(*(void **)(a1 + 56), v49, v50);
      uint64_t v52 = *(void *)(a1 + 96);
      uint64_t v53 = *(void *)(a1 + 56);
      v71[0] = MEMORY[0x1E4F143A8];
      v71[1] = 3221225472;
      v71[2] = sub_1C4DD0AB4;
      v71[3] = &unk_1E64F2B70;
      void v71[4] = v53;
      id v72 = v26;
      uint64_t v73 = v29;
      objc_msgSend_getKeySyncEligibilityForService_isManatee_account_lastModifiedDate_testOverrideProvider_completionHandler_(v48, v54, (uint64_t)v43, IsManatee, v51, v52, v53, v71);
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v56 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v69 = *(__CFString **)(a1 + 72);
        uint64_t v70 = *(__CFString **)(a1 + 96);
        *(_DWORD *)buf = 138543618;
        uint64_t v99 = v69;
        __int16 v100 = 2114;
        uint64_t v101 = v70;
        _os_log_debug_impl(&dword_1C4CFF000, v56, OS_LOG_TYPE_DEBUG, "Either the PCS object is not zonePCS or PPPCS, or the PCS blob lacks the lastModifiedDate. PCS object type %{public}@. lastModifiedDate:%{public}@", buf, 0x16u);
      }
      (*((void (**)(void *, uint64_t))v26 + 2))(v26, 1);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    __int16 v55 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      if (*(unsigned char *)(a1 + 184)) {
        __int16 v62 = @"YES";
      }
      else {
        __int16 v62 = @"NO";
      }
      uint64_t v63 = @" Error:";
      uint64_t v64 = *(__CFString **)(*(void *)(*(void *)(a1 + 120) + 8) + 40);
      *(_DWORD *)buf = 138543874;
      if (!v64) {
        uint64_t v63 = &stru_1F2044F30;
      }
      uint64_t v99 = v62;
      if (v64) {
        uint64_t v65 = v64;
      }
      else {
        uint64_t v65 = &stru_1F2044F30;
      }
      __int16 v100 = 2114;
      uint64_t v101 = v63;
      __int16 v102 = 2112;
      uint64_t v103 = v65;
      _os_log_debug_impl(&dword_1C4CFF000, v55, OS_LOG_TYPE_DEBUG, "Either successfully decrypted the PCS or we are not allowed to sync key registry. canSyncKeyRegistry:%{public}@.%{public}@%@", buf, 0x20u);
    }
    v29[2](v29);
  }
}

void sub_1C4DCFEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = *MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    id v15 = @"dis";
    uint64_t v16 = *(void *)(a1 + 48);
    if (a2) {
      id v15 = @"en";
    }
    *(_DWORD *)buf = 138544130;
    uint64_t v30 = v13;
    __int16 v31 = 2114;
    uint64_t v32 = v14;
    __int16 v33 = 2114;
    uint64_t v34 = v16;
    __int16 v35 = 2114;
    id v36 = v15;
    _os_log_debug_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_DEBUG, "Attempting user key sync before retrying %{public}@ PCS decryption for service %{public}@ and operation %{public}@, with throttling %{public}@abled.", buf, 0x2Au);
  }
  if (*MEMORY[0x1E4F1A4E0]
    && objc_msgSend__checkPCSTestOverrideForKey_(*(void **)(a1 + 56), v5, @"DisallowKRSToBePerformed"))
  {
    BOOL v17 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v6, v7);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v17, v18, *(void *)(a1 + 96), *(void *)(a1 + 56), @"CKDPCSManager.m", 1732, @"KRS is not allowed from unit test override");
  }
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void **)(a1 + 56);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_1C4DD0148;
  v19[3] = &unk_1E64F2AA8;
  uint64_t v11 = *(void *)(a1 + 88);
  v19[4] = v10;
  uint64_t v26 = v11;
  id v20 = *(id *)(a1 + 40);
  id v21 = *(id *)(a1 + 48);
  id v22 = *(id *)(a1 + 32);
  id v25 = *(id *)(a1 + 80);
  id v23 = *(id *)(a1 + 64);
  int8x16_t v27 = vextq_s8(*(int8x16_t *)(a1 + 104), *(int8x16_t *)(a1 + 104), 8uLL);
  char v28 = *(unsigned char *)(a1 + 120);
  id v24 = *(id *)(a1 + 72);
  objc_msgSend_synchronizeUserKeyRegistryForServiceType_shouldThrottle_context_requestorOperationID_completionHandler_(v10, v12, v8, a2, 0x1F2058790, v9, v19);
}

void sub_1C4DD0148(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v11 = objc_msgSend_synchronizeQueue(*(void **)(a1 + 32), v9, v10);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4DD02BC;
  block[3] = &unk_1E64F2A80;
  char v28 = a2;
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void **)(a1 + 40);
  id v17 = v7;
  uint64_t v18 = v12;
  uint64_t v26 = *(void *)(a1 + 88);
  id v19 = v13;
  id v20 = *(id *)(a1 + 48);
  id v21 = *(id *)(a1 + 56);
  id v22 = v8;
  id v25 = *(id *)(a1 + 80);
  id v23 = *(id *)(a1 + 64);
  long long v27 = *(_OWORD *)(a1 + 96);
  char v29 = *(unsigned char *)(a1 + 112);
  id v24 = *(id *)(a1 + 72);
  id v14 = v8;
  id v15 = v7;
  dispatch_async(v11, block);
}

void sub_1C4DD02BC(uint64_t a1, const char *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 128) && !*(void *)(a1 + 32))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v10 = *MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 138543874;
      uint64_t v23 = v16;
      __int16 v24 = 2114;
      uint64_t v25 = v17;
      __int16 v26 = 2114;
      uint64_t v27 = v18;
      _os_log_debug_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_DEBUG, "User key sync succeeded for service %{public}@ and operation %{public}@. Retrying %{public}@ PCS decryption.", buf, 0x20u);
    }
    objc_msgSend__locked_createPCSFromData_ofType_usingPCSServiceType_tryDecryptingWithOtherServices_withSyncKeyRegistryRetry_lastModifiedDate_keySyncAnalytics_requestorOperationID_completionHandler_(*(void **)(a1 + 40), v11, *(void *)(a1 + 80), *(void *)(a1 + 112), *(void *)(a1 + 120), *(unsigned __int8 *)(a1 + 129), 0, *(void *)(a1 + 88), *(void *)(a1 + 72), *(void *)(a1 + 56), *(void *)(a1 + 96));
  }
  else
  {
    objc_msgSend__locked_markMissingIdentitiesFromFailedDecryptError_serviceName_(*(void **)(a1 + 40), a2, *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24), *(void *)(a1 + 48));
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v3 = *MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 48);
      uint64_t v13 = *(void *)(a1 + 56);
      uint64_t v14 = *(void *)(a1 + 64);
      uint64_t v15 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138544130;
      uint64_t v23 = v12;
      __int16 v24 = 2114;
      uint64_t v25 = v13;
      __int16 v26 = 2114;
      uint64_t v27 = v14;
      __int16 v28 = 2112;
      uint64_t v29 = v15;
      _os_log_debug_impl(&dword_1C4CFF000, v3, OS_LOG_TYPE_DEBUG, "User key sync failed for service %{public}@ and operation %{public}@. Won't retry %{public}@ PCS decryption due to error: %@.", buf, 0x2Au);
    }
    objc_msgSend_setOverallResult_(*(void **)(a1 + 72), v4, @"failure");
    objc_msgSend_setError_(*(void **)(a1 + 72), v5, *(void *)(a1 + 32));
    objc_msgSend_sendCoreAnalyticsEventForKeySync_(*(void **)(a1 + 40), v6, *(void *)(a1 + 72));
    uint64_t v9 = objc_msgSend_callbackQueue(*(void **)(a1 + 40), v7, v8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4DD0564;
    block[3] = &unk_1E64F0790;
    id v21 = *(id *)(a1 + 96);
    id v20 = *(id *)(a1 + 32);
    dispatch_async(v9, block);
  }
}

uint64_t sub_1C4DD0564(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1C4DD0588(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)
    && !*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)
    && !*(void *)(a1 + 112)
    && objc_msgSend_currentServiceIsManatee(*(void **)(a1 + 32), a2, a3))
  {
    objc_msgSend__locked_markMissingIdentitiesFromFailedDecryptError_serviceName_(*(void **)(a1 + 32), a2, *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24), *(void *)(a1 + 40));
    if (objc_msgSend_code(*(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v4, v5) == 5000)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v8 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_ERROR, "Failed to decrypt PCS data even after user key sync because we have no identities. Returning retryable failure.", buf, 2u);
      }
      uint64_t v9 = objc_opt_class();
      uint64_t v11 = objc_msgSend_noMatchingIdentityErrorForPCSError_withErrorCode_description_(v9, v10, *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24), 5008, @"Failed to decrypt. Keys unavailable even after synchronization");
      uint64_t v12 = *(void *)(*(void *)(a1 + 88) + 8);
      uint64_t v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;

      if (!*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40))
      {
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], a2, *MEMORY[0x1E4F19DD8], 5008, *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24), @"Failed to decrypt. Keys unavailable even after synchronization");
        uint64_t v21 = LABEL_19:;
        uint64_t v22 = *(void *)(*(void *)(a1 + 88) + 8);
        uint64_t v23 = *(void **)(v22 + 40);
        *(void *)(v22 + 40) = v21;
      }
    }
    else if (objc_msgSend_code(*(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v6, v7) == 5004)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v14 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = *(void *)(a1 + 40);
        uint64_t v32 = *(void *)(a1 + 48);
        uint64_t v34 = *(void *)(a1 + 56);
        *(_DWORD *)buf = 138543874;
        uint64_t v40 = v32;
        __int16 v41 = 2114;
        uint64_t v42 = v33;
        __int16 v43 = 2114;
        uint64_t v44 = v34;
        _os_log_error_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_ERROR, "Failed to decrypt %{public}@ PCS data even after user key sync for service %{public}@ operation %{public}@. Returning permanent failure.", buf, 0x20u);
      }
      objc_msgSend_markUndecryptablePCS_(*(void **)(a1 + 32), v15, *(void *)(a1 + 64));
      uint64_t v16 = objc_opt_class();
      uint64_t v18 = objc_msgSend_noMatchingIdentityErrorForPCSError_withErrorCode_description_(v16, v17, *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24), 5011, @"Failed to decrypt. Keys unavailable even after synchronization");
      uint64_t v19 = *(void *)(*(void *)(a1 + 88) + 8);
      id v20 = *(void **)(v19 + 40);
      *(void *)(v19 + 40) = v18;

      if (!*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40))
      {
        objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], a2, *MEMORY[0x1E4F19DD8], 5011, *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24), @"Failed to decrypt. Keys unavailable even after synchronization");
        goto LABEL_19;
      }
    }
  }
  __int16 v24 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
  if (v24
    && !*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)
    && objc_msgSend_code(v24, a2, a3) == 5011
    && !*(void *)(a1 + 112))
  {
    uint64_t v25 = *(void **)(a1 + 32);
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    v38[2] = sub_1C4DD0A28;
    v38[3] = &unk_1E64F05C8;
    void v38[4] = v25;
    objc_msgSend__onSynchronizeQueue_(v25, a2, (uint64_t)v38);
  }
  __int16 v26 = *(void **)(a1 + 72);
  if (v26)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)
      && !*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40))
    {
      uint64_t v27 = off_1E64F5A18;
    }
    else
    {
      uint64_t v27 = off_1E64F5A20;
    }
    objc_msgSend_setOverallResult_(v26, a2, (uint64_t)*v27);
    objc_msgSend_setError_(*(void **)(a1 + 72), v28, *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40));
    objc_msgSend_sendCoreAnalyticsEventForKeySync_(*(void **)(a1 + 32), v29, *(void *)(a1 + 72));
  }
  uint64_t v30 = *(const void **)(*(void *)(*(void *)(a1 + 104) + 8) + 24);
  if (v30)
  {
    CFRelease(v30);
    *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = 0;
  }
  __int16 v31 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), a2, a3);
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  v35[2] = sub_1C4DD0A84;
  v35[3] = &unk_1E64F2AF8;
  id v36 = *(id *)(a1 + 80);
  int8x16_t v37 = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
  dispatch_async(v31, v35);
}

void sub_1C4DD0A28(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_date(MEMORY[0x1E4F1C9C8], a2, a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLastMissingManateeIdentityErrorDateForCurrentService_(*(void **)(a1 + 32), v4, (uint64_t)v5);
}

uint64_t sub_1C4DD0A84(void *a1)
{
  uint64_t result = a1[4];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(*(void *)(a1[5] + 8) + 40), *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  return result;
}

void sub_1C4DD0AB4(void **a1, const char *a2, uint64_t a3)
{
  char v3 = (char)a2;
  id v5 = objc_msgSend_synchronizeQueue(a1[4], a2, a3);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4DD0B78;
  block[3] = &unk_1E64F2B48;
  char v9 = v3;
  id v7 = a1[5];
  id v8 = a1[6];
  dispatch_async(v5, block);
}

uint64_t sub_1C4DD0B78(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_1C4DD0F8C(uint64_t a1, const char *a2)
{
  return objc_msgSend__locked_createPCSFromData_ofType_usingPCSServiceType_tryDecryptingWithOtherServices_withSyncKeyRegistryRetry_lastModifiedDate_keySyncAnalytics_requestorOperationID_completionHandler_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(void *)(a1 + 48), 0, *(void *)(a1 + 56), *(void *)(a1 + 64));
}

void sub_1C4DD10EC(uint64_t a1, void *a2, void *a3)
{
  id v12 = a3;
  id v5 = a2;
  id v6 = objc_alloc_init(CKDZonePCSData);
  uint64_t v9 = objc_msgSend_pcs(v5, v7, v8);

  objc_msgSend_setPcs_(v6, v10, v9);
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    (*(void (**)(uint64_t, CKDZonePCSData *, id))(v11 + 16))(v11, v6, v12);
  }
}

void sub_1C4DD125C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a3;
    objc_msgSend_pcsData(a2, v6, v7);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v8, v5);
  }
}

void sub_1C4DD140C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DD1424(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_identityManager(*(void **)(a1 + 32), a2, a3);
  id v6 = objc_msgSend_PCSServiceStringFromCKServiceType_(v4, v5, *(void *)(a1 + 48));

  uint64_t v9 = objc_msgSend_identityManager(*(void **)(a1 + 32), v7, v8);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v11 + 40);
  uint64_t v13 = objc_msgSend_copyIdentitySetWithType_options_error_(v9, v12, v10, 0, &obj);
  objc_storeStrong((id *)(v11 + 40), obj);

  if (!v13 || *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v14 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      *(_DWORD *)buf = 138543618;
      __int16 v24 = v6;
      __int16 v25 = 2112;
      uint64_t v26 = v16;
      _os_log_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_INFO, "Warn: No identity set for service %{public}@: %@", buf, 0x16u);
    }
    if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
    {
      uint64_t v17 = *MEMORY[0x1E4F19DD8];
      unint64_t v18 = *(void *)(a1 + 48) - 1;
      if (v18 > 5) {
        objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v15, v17, 5000, @"Failed to preflight a %@ identity", @"Current Service");
      }
      else {
      uint64_t v19 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v15, v17, 5000, @"Failed to preflight a %@ identity", off_1E64F31F8[v18]);
      }
      uint64_t v20 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v21 = *(void **)(v20 + 40);
      *(void *)(v20 + 40) = v19;
    }
  }
}

void sub_1C4DD1890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4DD18C8(uint64_t a1, const char *a2)
{
  void v10[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *MEMORY[0x1E4F93EB8];
  v9[0] = *MEMORY[0x1E4F93EC8];
  v9[1] = v4;
  v10[0] = v3;
  v10[1] = MEMORY[0x1E4F1CC38];
  id v5 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v10, v9, 2);
  id v6 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 64);
  PCSObjectCreateFromExportedWithIdentitiesAndOptionsAsync();
}

void sub_1C4DD1A2C(void *a1, const void *a2, void *cf)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (cf) {
    CFRetain(cf);
  }
  id v6 = *(const void **)(*(void *)(a1[8] + 8) + 24);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(*(void *)(a1[8] + 8) + 24) = 0;
  }
  unint64_t v7 = a1[10] - 1;
  if (v7 > 5)
  {
    id v8 = @"Unknown";
    if (!a2)
    {
LABEL_15:
      uint64_t v10 = objc_opt_class();
      id v12 = objc_msgSend_stringWithFormat_(NSString, v11, @"Failed to unwrap %@ data", v8);
      uint64_t v14 = objc_msgSend_noMatchingIdentityErrorForPCSError_withErrorCode_description_(v10, v13, (uint64_t)cf, 5004, v12);
      uint64_t v15 = *(void *)(a1[9] + 8);
      uint64_t v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = v14;

      if (!*(void *)(*(void *)(a1[9] + 8) + 40))
      {
        unint64_t v18 = (void *)MEMORY[0x1E4F1A280];
        uint64_t v19 = *MEMORY[0x1E4F19DD8];
        uint64_t v20 = objc_msgSend_stringWithFormat_(NSString, v17, @"Couldn't unwrap %@ object from data", v8);
        uint64_t v22 = objc_msgSend_errorWithDomain_code_userInfo_error_path_URL_description_(v18, v21, v19, 5004, 0, cf, 0, 0, v20);
        uint64_t v23 = *(void *)(a1[9] + 8);
        __int16 v24 = *(void **)(v23 + 40);
        *(void *)(v23 + 40) = v22;
      }
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      __int16 v25 = *MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = *(void *)(*(void *)(a1[9] + 8) + 40);
        uint64_t v29 = *(void *)(*(void *)(a1[8] + 8) + 24);
        uint64_t v30 = (const void *)a1[5];
        uint64_t v31 = a1[6];
        *(_DWORD *)buf = 138413314;
        uint64_t v33 = v8;
        __int16 v34 = 2112;
        uint64_t v35 = v28;
        __int16 v36 = 2112;
        uint64_t v37 = v29;
        __int16 v38 = 2112;
        uint64_t v39 = v30;
        __int16 v40 = 2112;
        uint64_t v41 = v31;
        _os_log_error_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_ERROR, "Error unwrapping %@: %@.\nIdentity %@\nPEM data was %@\nZone PCS data %@.", buf, 0x34u);
      }
      (*(void (**)(void))(a1[7] + 16))();
      goto LABEL_22;
    }
  }
  else
  {
    id v8 = off_1E64F31C8[v7];
    if (!a2) {
      goto LABEL_15;
    }
  }
  if (cf) {
    goto LABEL_15;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v9 = *MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v26 = *(void *)(*(void *)(a1[8] + 8) + 24);
    uint64_t v27 = a1[6];
    *(_DWORD *)buf = 138413058;
    uint64_t v33 = v8;
    __int16 v34 = 2112;
    uint64_t v35 = v26;
    __int16 v36 = 2114;
    uint64_t v37 = v27;
    __int16 v38 = 2112;
    uint64_t v39 = a2;
    _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "Unwrapped %@ using identity %@ from data %{public}@: %@.", buf, 0x2Au);
  }
  CFRetain(a2);
  (*(void (**)(void))(a1[7] + 16))();
  CFRelease(a2);
LABEL_22:
}

void sub_1C4DD316C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1C4DD319C(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v4 = objc_msgSend_keyRollsSkippedBySizeCheck(v6, v2, v3);
  objc_msgSend_setKeyRollsSkippedBySizeCheck_(v6, v5, v4 + 1);
}

uint64_t sub_1C4DD31E4(uint64_t a1)
{
  uint64_t result = PCSFPRollMasterKey();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1C4DD3228(uint64_t a1, void *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  id v9 = a2;
  if (v2)
  {
    uint64_t v5 = objc_msgSend_zoneishKeysRolled(v9, v3, v4);
    objc_msgSend_setZoneishKeysRolled_(v9, v6, v5 + 1);
  }
  else
  {
    uint64_t v7 = objc_msgSend_perRecordKeysRolled(v9, v3, v4);
    objc_msgSend_setPerRecordKeysRolled_(v9, v8, v7 + 1);
  }
}

void sub_1C4DD35FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DD361C(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  id v6 = (uint64_t (*)(uint64_t, uint64_t))off_1EA3D1030;
  unint64_t v18 = off_1EA3D1030;
  if (!off_1EA3D1030)
  {
    uint64_t v7 = sub_1C4DE7A08((uint64_t)a1, a2, a3);
    v16[3] = (uint64_t)dlsym(v7, "MarkForCounterSigning");
    off_1EA3D1030 = (_UNKNOWN *)v16[3];
    id v6 = (uint64_t (*)(uint64_t, uint64_t))v16[3];
  }
  _Block_object_dispose(&v15, 8);
  if (v6)
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v6(v4, v5);
  }
  else
  {
    uint64_t v10 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v8, v9);
    id v12 = objc_msgSend_stringWithUTF8String_(NSString, v11, (uint64_t)"_Bool CKMarkForCounterSigning(PCSShareProtectionRef, PCSShareProtectionRef)");
    uint64_t v13 = dlerror();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v10, v14, (uint64_t)v12, @"CKDPCSManager.m", 65, @"%s", v13);

    __break(1u);
  }
}

void sub_1C4DD3788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DD3DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DD3DF4(uint64_t a1)
{
  uint64_t result = PCSFPUpdateZoneKey();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1C4DD4334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DD4360(uint64_t a1)
{
  uint64_t result = PCSFPRemovePrivateKey();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1C4DD4758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_1C4DD4784(uint64_t a1)
{
  uint64_t result = PCSFPRemovePrivateKey();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1C4DD49E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DD4A10(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = PCSFPCopyExported();
  return MEMORY[0x1F41817F8]();
}

void sub_1C4DD52FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1C4DD5328(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v4 = objc_msgSend_keyRollsSkippedBySizeCheck(v6, v2, v3);
  objc_msgSend_setKeyRollsSkippedBySizeCheck_(v6, v5, v4 + 1);
}

uint64_t sub_1C4DD5370(uint64_t a1)
{
  uint64_t result = PCSFPUpdateIdentityAndRollZoneKey();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1C4DD53B0(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v4 = objc_msgSend_zoneKeysRolled(v6, v2, v3);
  objc_msgSend_setZoneKeysRolled_(v6, v5, v4 + 1);
}

void sub_1C4DD66BC(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v4 = objc_msgSend_keyRollsSkippedBySizeCheck(v6, v2, v3);
  objc_msgSend_setKeyRollsSkippedBySizeCheck_(v6, v5, v4 + 1);
}

void sub_1C4DD6704(uint64_t a1, void *a2)
{
  id v10 = a2;
  uint64_t v4 = objc_msgSend_shareKeysRolled(v10, v2, v3);
  objc_msgSend_setShareKeysRolled_(v10, v5, v4 + 1);
  uint64_t v8 = objc_msgSend_zoneKeysRolled(v10, v6, v7);
  objc_msgSend_setZoneKeysRolled_(v10, v9, v8 + 1);
}

void sub_1C4DD68B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1C4DD68DC(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = (void *)PCSFPCopyAvailableMasterKeyIDs();
  if (objc_msgSend_count(v2, v3, v4) == 1)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = PCSFPRollMasterKey();
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v5 = *MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
    {
      int v6 = 138412290;
      uint64_t v7 = v2;
      _os_log_impl(&dword_1C4CFF000, v5, OS_LOG_TYPE_INFO, "Warn: PCS does not have a single primary key, skipping primary key replacement. keys: %@", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_1C4DD7EA0(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v4 = objc_msgSend_keyRollsSkippedBySizeCheck(v6, v2, v3);
  objc_msgSend_setKeyRollsSkippedBySizeCheck_(v6, v5, v4 + 1);
}

void sub_1C4DD851C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 240), 8);
  _Block_object_dispose((const void *)(v39 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DD8568(uint64_t a1, const char *a2, uint64_t a3)
{
  v17[3] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 72))
  {
    v16[0] = *MEMORY[0x1E4F93EE8];
    uint64_t v4 = objc_msgSend_identityManager(*(void **)(a1 + 56), a2, a3);
    uint64_t v7 = objc_msgSend_serviceName(v4, v5, v6);
    uint64_t v8 = *MEMORY[0x1E4F93F08];
    uint64_t v9 = *(void *)(a1 + 64);
    v17[0] = v7;
    v17[1] = v9;
    uint64_t v10 = *MEMORY[0x1E4F93EC8];
    v16[1] = v8;
    id v16[2] = v10;
    v17[2] = *MEMORY[0x1E4F93ED0];
    uint64_t v12 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v11, (uint64_t)v17, v16, 3);
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
  uint64_t result = PCSFPCreate();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1C4DD86B4(uint64_t a1)
{
  uint64_t result = PCSFPAddSharePCS();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1C4DD86F0(uint64_t a1)
{
  uint64_t result = PCSFPAddSharePCS();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1C4DD8D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1C4DD8D74(uint64_t a1)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  id v3 = (id)*MEMORY[0x1E4F93EF0];
  if (*(unsigned char *)(a1 + 48))
  {
    id v4 = (id)*MEMORY[0x1E4F93EF8];

    id v3 = v4;
  }
  uint64_t v6 = *MEMORY[0x1E4F93EC8];
  v7[0] = *MEMORY[0x1E4F93ED0];
  uint64_t v5 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v2, (uint64_t)v7, &v6, 1);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = PCSFPCreate();
}

uint64_t sub_1C4DD8E74(uint64_t a1)
{
  uint64_t result = PCSFPAddEncryptedSharePCS();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1C4DD8EC0(uint64_t a1)
{
  uint64_t result = PCSFPAddSharePCS();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1C4DD9200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DD922C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = PCSFPCopyExported();
  return MEMORY[0x1F41817F8]();
}

void sub_1C4DD9794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DD99D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DD9F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DD9F30(uint64_t a1)
{
  uint64_t result = PCSFPAddPublicIdentityWithShareFlags();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1C4DDA018(uint64_t a1)
{
  return MEMORY[0x1F4146F50](*(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1C4DDA488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DDA4B4(uint64_t a1)
{
  uint64_t result = PCSFPRemoveSharePCS();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1C4DDAD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DDAD98(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_count(*(void **)(*(void *)(a1[4] + 8) + 40), a2, a3))
  {
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    id v6 = *(id *)(*(void *)(a1[4] + 8) + 40);
    uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v85, v97, 16);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v86;
      uint64_t v74 = *MEMORY[0x1E4F19DD8];
      uint64_t v11 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
      uint64_t v12 = (os_log_t *)MEMORY[0x1E4F1A528];
      do
      {
        uint64_t v13 = 0;
        do
        {
          if (*(void *)v86 != v10) {
            objc_enumerationMutation(v6);
          }
          uint64_t v14 = *(void *)(*((void *)&v85 + 1) + 8 * v13);
          uint64_t v84 = 0;
          if (PCSFPRemoveMasterKey()) {
            BOOL v16 = v84 == 0;
          }
          else {
            BOOL v16 = 0;
          }
          if (v16)
          {
            if (*v11 != -1) {
              dispatch_once(v11, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            uint64_t v21 = *v12;
            if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v22 = a1[10];
              *(_DWORD *)buf = 138543618;
              uint64_t v92 = v14;
              __int16 v93 = 2112;
              uint64_t v94 = v22;
              _os_log_debug_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_DEBUG, "Removed primary key with ID %{public}@ from PCS %@", buf, 0x16u);
            }
            ++*(void *)(*(void *)(a1[5] + 8) + 24);
          }
          else
          {
            uint64_t v17 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v15, v74, 5005, @"Unspecified failure.");
            if (*v11 != -1) {
              dispatch_once(v11, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            uint64_t v18 = *v12;
            if (os_log_type_enabled(*v12, OS_LOG_TYPE_INFO))
            {
              uint64_t v19 = a1[10];
              *(_DWORD *)buf = 138543874;
              uint64_t v92 = v14;
              __int16 v93 = 2112;
              uint64_t v94 = v19;
              __int16 v95 = 2112;
              char v96 = v17;
              _os_log_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_INFO, "Warn: Failed to remove primary key with ID %{public}@ from PCS %@: %@", buf, 0x20u);
            }
          }
          ++v13;
        }
        while (v9 != v13);
        uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v20, (uint64_t)&v85, v97, 16);
      }
      while (v9);
    }
  }
  if (objc_msgSend_count(*(void **)(*(void *)(a1[6] + 8) + 40), v4, v5))
  {
    __int16 v25 = (void *)PCSFPCopyKeyIDs();
    uint64_t v26 = objc_opt_new();
    long long v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    id v27 = v25;
    uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v80, v90, 16);
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = *(void *)v81;
      do
      {
        for (uint64_t i = 0; i != v30; ++i)
        {
          if (*(void *)v81 != v31) {
            objc_enumerationMutation(v27);
          }
          uint64_t v33 = *(void *)(*((void *)&v80 + 1) + 8 * i);
          __int16 v34 = (const void *)PCSFPCopyPrivateKey();
          __int16 v36 = (void *)PCSIdentityCopyCurrentKeyFingerprint();
          if (v34) {
            CFRelease(v34);
          }
          objc_msgSend_setObject_forKey_(v26, v35, v33, v36);
        }
        uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v37, (uint64_t)&v80, v90, 16);
      }
      while (v30);
    }
    uint64_t v73 = v27;

    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    id obj = *(id *)(*(void *)(a1[6] + 8) + 40);
    uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v38, (uint64_t)&v76, v89, 16);
    if (v39)
    {
      uint64_t v41 = v39;
      uint64_t v42 = *(void *)v77;
      __int16 v43 = (dispatch_once_t *)MEMORY[0x1E4F1A550];
      uint64_t v44 = (os_log_t *)MEMORY[0x1E4F1A528];
      do
      {
        uint64_t v45 = 0;
        do
        {
          if (*(void *)v77 != v42) {
            objc_enumerationMutation(obj);
          }
          uint64_t v46 = *(void *)(*((void *)&v76 + 1) + 8 * v45);
          uint64_t v47 = objc_msgSend_objectForKey_(v26, v40, v46);
          if (!v47)
          {
            if (*v43 != -1) {
              dispatch_once(v43, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            __int16 v51 = *v44;
            if (os_log_type_enabled(*v44, OS_LOG_TYPE_INFO))
            {
              uint64_t v52 = a1[10];
              *(_DWORD *)buf = 138543618;
              uint64_t v92 = v46;
              __int16 v93 = 2114;
              uint64_t v94 = v52;
              _os_log_impl(&dword_1C4CFF000, v51, OS_LOG_TYPE_INFO, "Warn: Failed to remove private key with public key ID %{public}@. No matching public key found in the PCS %{public}@", buf, 0x16u);
            }
            uint64_t v53 = (void *)PCSFPCopyDiagnostic();
            if (*v43 != -1) {
              dispatch_once(v43, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            uint64_t v54 = *v44;
            if (os_log_type_enabled(*v44, OS_LOG_TYPE_DEBUG))
            {
LABEL_64:
              *(_DWORD *)buf = 138543362;
              uint64_t v92 = (uint64_t)v53;
              _os_log_debug_impl(&dword_1C4CFF000, v54, OS_LOG_TYPE_DEBUG, "PCS diagnostics: %{public}@", buf, 0xCu);
            }
LABEL_61:

            goto LABEL_62;
          }
          int v48 = PCSFPRemovePrivateKey();
          uint64_t v49 = (void *)*MEMORY[0x1E4F1A548];
          if (!v48)
          {
            if (*v43 != -1) {
              dispatch_once(v43, v49);
            }
            __int16 v55 = *v44;
            if (os_log_type_enabled(*v44, OS_LOG_TYPE_INFO))
            {
              uint64_t v56 = (void *)a1[10];
              *(_DWORD *)buf = 138543874;
              uint64_t v92 = (uint64_t)v47;
              __int16 v93 = 2114;
              uint64_t v94 = v46;
              __int16 v95 = 2114;
              char v96 = v56;
              _os_log_impl(&dword_1C4CFF000, v55, OS_LOG_TYPE_INFO, "Warn: Failed to remove private key with public key %{public}@ (keyID: %{public}@) from PCS %{public}@", buf, 0x20u);
            }
            uint64_t v53 = (void *)PCSFPCopyDiagnostic();
            if (*v43 != -1) {
              dispatch_once(v43, (dispatch_block_t)*MEMORY[0x1E4F1A548]);
            }
            uint64_t v54 = *v44;
            if (os_log_type_enabled(*v44, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_64;
            }
            goto LABEL_61;
          }
          if (*v43 != -1) {
            dispatch_once(v43, v49);
          }
          uint64_t v50 = *v44;
          if (os_log_type_enabled(*v44, OS_LOG_TYPE_DEBUG))
          {
            __int16 v57 = (void *)a1[10];
            *(_DWORD *)buf = 138543874;
            uint64_t v92 = (uint64_t)v47;
            __int16 v93 = 2114;
            uint64_t v94 = v46;
            __int16 v95 = 2112;
            char v96 = v57;
            _os_log_debug_impl(&dword_1C4CFF000, v50, OS_LOG_TYPE_DEBUG, "Removed private key with public key %{public}@ (keyID: %{public}@) from PCS %@", buf, 0x20u);
          }
          ++*(void *)(*(void *)(a1[7] + 8) + 24);
LABEL_62:

          ++v45;
        }
        while (v41 != v45);
        uint64_t v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v40, (uint64_t)&v76, v89, 16);
        uint64_t v41 = v58;
      }
      while (v58);
    }
  }
  if (objc_msgSend_count(*(void **)(*(void *)(a1[8] + 8) + 40), v23, v24))
  {
    uint64_t v59 = (void *)PCSFPCopyPublicIdentities();
    if (v59)
    {
      CKCFArrayForEach();
      if (!objc_msgSend_count(*(void **)(*(void *)(a1[8] + 8) + 40), v60, v61))
      {
LABEL_86:

        return;
      }
      __int16 v62 = (void *)MEMORY[0x1E4F1A550];
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v63 = (os_log_t *)MEMORY[0x1E4F1A528];
      uint64_t v64 = *MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
      {
        uint64_t v65 = *(void *)(*(void *)(a1[8] + 8) + 40);
        uint64_t v66 = a1[10];
        *(_DWORD *)buf = 138543618;
        uint64_t v92 = v65;
        __int16 v93 = 2114;
        uint64_t v94 = v66;
        _os_log_impl(&dword_1C4CFF000, v64, OS_LOG_TYPE_INFO, "Failed to remove sharees with keyIDs: %{public}@ from PCS because no matching public identities were found in the PCS %{public}@", buf, 0x16u);
      }
      uint64_t v67 = (void *)PCSFPCopyDiagnostic();
      if (*v62 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v68 = *v63;
      if (!os_log_type_enabled(*v63, OS_LOG_TYPE_DEBUG))
      {
LABEL_85:

        goto LABEL_86;
      }
      *(_DWORD *)buf = 138543362;
      uint64_t v92 = (uint64_t)v67;
    }
    else
    {
      uint64_t v69 = (void *)MEMORY[0x1E4F1A550];
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v70 = (os_log_t *)MEMORY[0x1E4F1A528];
      uint64_t v71 = *MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
      {
        uint64_t v72 = a1[10];
        *(_DWORD *)buf = 138543362;
        uint64_t v92 = v72;
        _os_log_impl(&dword_1C4CFF000, v71, OS_LOG_TYPE_INFO, "Warn: Failed to remove sharees from PCS, the PCS has no public identities: %{public}@", buf, 0xCu);
      }
      uint64_t v67 = (void *)PCSFPCopyDiagnostic();
      if (*v69 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v68 = *v70;
      if (!os_log_type_enabled(*v70, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_85;
      }
      *(_DWORD *)buf = 138543362;
      uint64_t v92 = (uint64_t)v67;
    }
    _os_log_debug_impl(&dword_1C4CFF000, v68, OS_LOG_TYPE_DEBUG, "PCS diagnostics: %{public}@", buf, 0xCu);
    goto LABEL_85;
  }
}

void sub_1C4DDB798(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v2 = (void *)PCSPublicIdentityCopyCurrentKeyFingerprint();
  if (objc_msgSend_containsObject_(*(void **)(*(void *)(a1[4] + 8) + 40), v3, (uint64_t)v2))
  {
    if (PCSFPRemovePublicIdentity())
    {
      ++*(void *)(*(void *)(a1[5] + 8) + 24);
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v4 = *MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = a1[6];
        int v13 = 138543618;
        uint64_t v14 = v2;
        __int16 v15 = 2112;
        uint64_t v16 = v6;
        _os_log_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_INFO, "Removed sharee public identity for keyID %{public}@ from PCS %@", (uint8_t *)&v13, 0x16u);
      }
    }
    else
    {
      uint64_t v7 = (void *)MEMORY[0x1E4F1A550];
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v8 = (os_log_t *)MEMORY[0x1E4F1A528];
      uint64_t v9 = *MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = a1[6];
        int v13 = 138543618;
        uint64_t v14 = v2;
        __int16 v15 = 2112;
        uint64_t v16 = v10;
        _os_log_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_INFO, "Warn: Failed to remove the sharee public identity matching keyID %{public}@ from PCS %@", (uint8_t *)&v13, 0x16u);
      }
      uint64_t v11 = (void *)PCSFPCopyDiagnostic();
      if (*v7 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v12 = *v8;
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
      {
        int v13 = 138543362;
        uint64_t v14 = v11;
        _os_log_debug_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_DEBUG, "PCS diagnostics: %{public}@", (uint8_t *)&v13, 0xCu);
      }
    }
    objc_msgSend_removeObject_(*(void **)(*(void *)(a1[4] + 8) + 40), v5, (uint64_t)v2);
  }
}

void sub_1C4DDBA08(uint64_t a1, void *a2)
{
  id v7 = a2;
  uint64_t v5 = objc_msgSend_keysNotRemoved(v7, v3, v4);
  objc_msgSend_setKeysNotRemoved_(v7, v6, *(void *)(a1 + 32) + v5);
}

uint64_t sub_1C4DDC364(uint64_t a1)
{
  return MEMORY[0x1F4146F60](*(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1C4DDC6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_1C4DDC6D4(uint64_t a1)
{
  uint64_t result = PCSFPAddPublicIdentity();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1C4DDCDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

uint64_t sub_1C4DDCE20(uint64_t a1)
{
  uint64_t result = PCSFPAddPrivateKey();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1C4DDCE60(uint64_t a1)
{
  uint64_t result = PCSFPAddPublicIdentity();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1C4DDD548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DDD574(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = PCSFPCopyExported();
  return MEMORY[0x1F41817F8]();
}

void sub_1C4DDDA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DDDA64(uint64_t a1)
{
  uint64_t result = PCSFPCreateWithExported();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1C4DDDE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DDDEBC(uint64_t a1, const char *a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v5 = *MEMORY[0x1E4F93EC8];
  v6[0] = v3;
  uint64_t v4 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v6, &v5, 1);
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = PCSObjectCreateFromExportedWithIdentitiesAndOptions();
}

uint64_t sub_1C4DDE638(uint64_t a1, const char *a2)
{
  return objc_msgSend__locked_decryptPCSDataOnSharePCS_shareModificationDate_withPublicSharingKey_oonPrivateKey_requestorOperationID_completionHandler_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(void *)(a1 + 48), 0, 0, *(void *)(a1 + 56), *(void *)(a1 + 64));
}

void sub_1C4DDEF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id location)
{
  _Block_object_dispose((const void *)(v41 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DDEF7C(void *a1)
{
  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  return result;
}

void sub_1C4DDEFA8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = *(NSObject **)(a1 + 32);
  id v8 = a2;
  dispatch_assert_queue_V2(v7);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a3);
  uint64_t v11 = objc_msgSend_pcs(v8, v9, v10);

  if (v11)
  {
    objc_msgSend_setMyParticipantPCS_(*(void **)(a1 + 40), v12, v11);
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    int v13 = *MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      uint64_t v23 = v17;
      __int16 v24 = 2112;
      uint64_t v25 = v11;
      _os_log_debug_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_DEBUG, "Successfully decrypted a per-participant PCS using our %{public}@ identity: %@", buf, 0x16u);
    }
  }
  uint64_t v14 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4DDF180;
  block[3] = &unk_1E64F2E78;
  id v20 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 64);
  id v19 = v15;
  uint64_t v21 = v16;
  dispatch_async(v14, block);
}

uint64_t sub_1C4DDF180(void *a1)
{
  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  return result;
}

void sub_1C4DDF1AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 96));
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), a3);
  uint64_t v11 = objc_msgSend_pcs(v7, v9, v10);

  if (v11)
  {
    objc_msgSend_setMyParticipantPCS_(*(void **)(a1 + 40), v12, v11);
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    int v13 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v31 = *(void **)(a1 + 48);
      uint64_t v32 = v13;
      uint64_t v35 = objc_msgSend_identityManager(v31, v33, v34);
      uint64_t v37 = objc_msgSend_PCSServiceStringFromCKServiceType_(v35, v36, *(void *)(a1 + 104));
      *(_DWORD *)buf = 138543618;
      __int16 v57 = v37;
      __int16 v58 = 2112;
      uint64_t v59 = v11;
      _os_log_debug_impl(&dword_1C4CFF000, v32, OS_LOG_TYPE_DEBUG, "Successfully decrypted a per-participant PCS using our %{public}@ identity: %@", buf, 0x16u);
    }
    goto LABEL_6;
  }
  if (!*(unsigned char *)(a1 + 120))
  {
LABEL_6:
    uint64_t v14 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4DDF7C0;
    block[3] = &unk_1E64F2E78;
    id v15 = (id *)v48;
    v48[0] = *(id *)(a1 + 80);
    uint64_t v16 = &v47;
    id v17 = *(id *)(a1 + 40);
    uint64_t v18 = *(void *)(a1 + 88);
    id v47 = v17;
    v48[1] = v18;
    dispatch_async(v14, block);
    goto LABEL_13;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v19 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
  {
    __int16 v38 = *(void **)(a1 + 48);
    uint64_t v39 = *(void **)(a1 + 56);
    __int16 v40 = v19;
    __int16 v43 = objc_msgSend_identityManager(v38, v41, v42);
    uint64_t v45 = objc_msgSend_PCSServiceStringFromCKServiceType_(v43, v44, *(void *)(a1 + 112));
    *(_DWORD *)buf = 138412546;
    __int16 v57 = v39;
    __int16 v58 = 2114;
    uint64_t v59 = (uint64_t)v45;
    _os_log_debug_impl(&dword_1C4CFF000, v40, OS_LOG_TYPE_DEBUG, "Attempting decryption of per-participant PCS for share %@ using our %{public}@ identity", buf, 0x16u);
  }
  uint64_t v22 = objc_msgSend_myParticipantPCSData(*(void **)(a1 + 40), v20, v21);
  uint64_t v23 = *(void *)(a1 + 112);
  uint64_t v24 = *(void *)(a1 + 64);
  uint64_t v25 = *(void *)(a1 + 72);
  v49[0] = MEMORY[0x1E4F143A8];
  v49[1] = 3221225472;
  v49[2] = sub_1C4DDF584;
  v49[3] = &unk_1E64F2EC8;
  id v15 = &v50;
  id v26 = *(id *)(a1 + 32);
  uint64_t v27 = *(void *)(a1 + 88);
  id v50 = v26;
  uint64_t v53 = v27;
  uint64_t v16 = (id *)v51;
  id v28 = *(id *)(a1 + 40);
  uint64_t v29 = *(void *)(a1 + 48);
  v51[0] = v28;
  v51[1] = v29;
  uint64_t v54 = *(void *)(a1 + 112);
  uint64_t v55 = 0;
  id v52 = *(id *)(a1 + 80);
  objc_msgSend__createPCSFromData_ofType_usingPCSServiceType_tryDecryptingWithOtherServices_withSyncKeyRegistryRetry_lastModifiedDate_requestorOperationID_completionHandler_(WeakRetained, v30, (uint64_t)v22, 4, v23, 0, 1, v24, v25, v49);

LABEL_13:
}

void sub_1C4DDF584(uint64_t a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = *(NSObject **)(a1 + 32);
  id v8 = a2;
  dispatch_assert_queue_V2(v7);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a3);
  uint64_t v11 = objc_msgSend_pcs(v8, v9, v10);

  if (v11)
  {
    objc_msgSend_setMyParticipantPCS_(*(void **)(a1 + 40), v12, v11);
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    int v13 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_DEBUG))
    {
      id v17 = *(void **)(a1 + 48);
      uint64_t v18 = v13;
      uint64_t v21 = objc_msgSend_identityManager(v17, v19, v20);
      uint64_t v23 = objc_msgSend_PCSServiceStringFromCKServiceType_(v21, v22, *(void *)(a1 + 72));
      uint64_t v24 = *(void *)(a1 + 80);
      *(_DWORD *)buf = 138543618;
      uint64_t v30 = v23;
      __int16 v31 = 2112;
      uint64_t v32 = v24;
      _os_log_debug_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_DEBUG, "Successfully decrypted a per-participant PCS using our %{public}@ identity: %@", buf, 0x16u);
    }
  }
  uint64_t v14 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4DDF794;
  block[3] = &unk_1E64F2E78;
  id v27 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 64);
  id v26 = v15;
  uint64_t v28 = v16;
  dispatch_async(v14, block);
}

uint64_t sub_1C4DDF794(void *a1)
{
  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  return result;
}

uint64_t sub_1C4DDF7C0(void *a1)
{
  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  return result;
}

uint64_t sub_1C4DDF7EC(void *a1)
{
  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  return result;
}

void sub_1C4DDF988(uint64_t a1, void *a2, void *a3)
{
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v125 = a3;
  id v8 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), v6, v7);
  dispatch_assert_queue_V2(v8);

  uint64_t v11 = objc_msgSend_myParticipantPCS(v5, v9, v10);
  uint64_t v12 = (id *)MEMORY[0x1E4F1A548];
  int v13 = (uint64_t *)MEMORY[0x1E4F1A550];
  uint64_t v14 = (id *)MEMORY[0x1E4F1A528];
  if (!v11)
  {
    uint64_t v37 = 0;
    goto LABEL_22;
  }
  id v15 = (id)*MEMORY[0x1E4F1A548];
  if (*v13 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v15);
  }

  uint64_t v16 = *v14;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1C4CFF000, v16, OS_LOG_TYPE_DEBUG, "Trying to unlock PCS blobs for the share using our PPPCS", buf, 2u);
  }

  id v17 = *(void **)(a1 + 32);
  uint64_t v20 = objc_msgSend_pcsData(v5, v18, v19);
  uint64_t v23 = objc_msgSend_myParticipantPCS(v5, v21, v22);
  id v132 = 0;
  uint64_t v25 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_logFailure_error_(v17, v24, (uint64_t)v20, 5, v23, 1, &v132);
  id v26 = v132;

  if (v25)
  {
    id v27 = *v12;
    if (*v13 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v27);
    }

    uint64_t v28 = *v14;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v28, OS_LOG_TYPE_DEBUG, "Successfully decrypted the invited share PCS using our per-participant PCS", buf, 2u);
    }
  }
  uint64_t v29 = *(void **)(a1 + 32);
  uint64_t v32 = objc_msgSend_publicPCSData(v5, v30, v31);
  uint64_t v35 = objc_msgSend_myParticipantPCS(v5, v33, v34);
  id v131 = 0;
  uint64_t v37 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_logFailure_error_(v29, v36, (uint64_t)v32, 0, v35, 0, &v131);
  id v38 = v131;

  if (v37)
  {
    id v39 = *v12;
    if (*v13 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v39);
    }

    __int16 v40 = *v14;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v40, OS_LOG_TYPE_DEBUG, "Successfully decrypted the public share PCS using our per-participant PCS", buf, 2u);
    }
  }
  if (!v25)
  {
LABEL_22:
    id v41 = *v12;
    if (*v13 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v41);
    }

    uint64_t v42 = *v14;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v119 = *(void *)(a1 + 64) - 1;
      if (v119 > 5) {
        uint64_t v120 = @"Current Service";
      }
      else {
        uint64_t v120 = off_1E64F31F8[v119];
      }
      *(_DWORD *)buf = 138543362;
      uint64_t v134 = v120;
      _os_log_debug_impl(&dword_1C4CFF000, v42, OS_LOG_TYPE_DEBUG, "Trying to unlock the invited PCS using our %{public}@ service identity", buf, 0xCu);
    }

    __int16 v43 = *(void **)(a1 + 32);
    uint64_t v46 = objc_msgSend_pcsData(v5, v44, v45);
    uint64_t v47 = *(void *)(a1 + 64);
    id v130 = 0;
    uint64_t v25 = (const void *)objc_msgSend_createSharePCSFromData_ofType_withService_logFailure_error_(v43, v48, (uint64_t)v46, 5, v47, 0, &v130);
    id v49 = v130;

    if (v25)
    {
      id v50 = *v12;
      if (*v13 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v50);
      }

      __int16 v51 = *v14;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1C4CFF000, v51, OS_LOG_TYPE_DEBUG, "Successfully decrypted the invited share PCS using our identity", buf, 2u);
      }
    }
    if (v37) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  if (v37)
  {
LABEL_36:
    BOOL v61 = v25 == 0;
    goto LABEL_37;
  }
LABEL_32:
  id v52 = *v12;
  if (*v13 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v52);
  }

  uint64_t v53 = *v14;
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v123 = *(void *)(a1 + 64) - 1;
    if (v123 > 5) {
      uint64_t v124 = @"Current Service";
    }
    else {
      uint64_t v124 = off_1E64F31F8[v123];
    }
    *(_DWORD *)buf = 138543362;
    uint64_t v134 = v124;
    _os_log_debug_impl(&dword_1C4CFF000, v53, OS_LOG_TYPE_DEBUG, "Trying to unlock the public PCS using our %{public}@ service identity", buf, 0xCu);
  }

  uint64_t v54 = *(void **)(a1 + 32);
  __int16 v57 = objc_msgSend_publicPCSData(v5, v55, v56);
  uint64_t v58 = *(void *)(a1 + 64);
  id v129 = 0;
  uint64_t v37 = (const void *)objc_msgSend_createSharePCSFromData_ofType_withService_logFailure_error_(v54, v59, (uint64_t)v57, 0, v58, 0, &v129);
  id v60 = v129;

  if (v37) {
    goto LABEL_36;
  }
  if (*(void *)(a1 + 40))
  {
    id v86 = *v12;
    if (*v13 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v86);
    }

    long long v87 = *v14;
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v87, OS_LOG_TYPE_DEBUG, "Trying to unlock the public PCS using the public sharing key", buf, 2u);
    }

    long long v88 = *(void **)(a1 + 32);
    id v91 = objc_msgSend_publicPCSData(v5, v89, v90);
    uint64_t v92 = *(void *)(a1 + 40);
    id v128 = 0;
    uint64_t v37 = (const void *)objc_msgSend_createSharePCSFromData_sharePrivateKey_error_(v88, v93, (uint64_t)v91, v92, &v128);
    id v94 = v128;
  }
  else
  {
    uint64_t v37 = 0;
  }
  BOOL v61 = v25 == 0;
  if (v25 && !v37)
  {
    id v106 = *v12;
    if (*v13 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v106);
    }

    uint64_t v107 = *v14;
    if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v107, OS_LOG_TYPE_DEBUG, "Trying to unlock the public PCS using the decrypted invited PCS", buf, 2u);
    }

    uint64_t v108 = *(void **)(a1 + 32);
    __int16 v111 = objc_msgSend_publicPCSData(v5, v109, v110);
    id v127 = 0;
    uint64_t v37 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v108, v112, (uint64_t)v111, 0, v25, &v127);
    id v113 = v127;

    id v114 = *v12;
    uint64_t v115 = *v13;
    if (!v37 || v113)
    {
      if (v115 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v114);
      }

      os_log_t v116 = *v14;
      if (!os_log_type_enabled(v116, OS_LOG_TYPE_INFO)) {
        goto LABEL_102;
      }
      os_log_t v121 = *(__CFString **)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      uint64_t v134 = v121;
      uint64_t v118 = "Couldn't decrypt public PCS for share %@ using the private PCS. Oh well, moving on.";
    }
    else
    {
      if (v115 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v114);
      }

      os_log_t v116 = *v14;
      if (!os_log_type_enabled(v116, OS_LOG_TYPE_INFO)) {
        goto LABEL_102;
      }
      uint64_t v117 = *(__CFString **)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      uint64_t v134 = v117;
      uint64_t v118 = "Successfully decrypted the public PCS for share %@ using the private PCS";
    }
    _os_log_impl(&dword_1C4CFF000, v116, OS_LOG_TYPE_INFO, v118, buf, 0xCu);
LABEL_102:
  }
  if (!v37)
  {
    if (*v13 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], *v12);
    }
    id v122 = *v14;
    if (os_log_type_enabled((os_log_t)*v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C4CFF000, v122, OS_LOG_TYPE_INFO, "Failed to decrypt the public share PCS using our identity", buf, 2u);
    }
    int v84 = 0;
    uint64_t v37 = 0;
    goto LABEL_55;
  }
LABEL_37:
  id v62 = *v12;
  if (*v13 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v62);
  }

  uint64_t v63 = *v14;
  if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
  {
    uint64_t v64 = *(__CFString **)(a1 + 48);
    *(_DWORD *)buf = 138412290;
    uint64_t v134 = v64;
    _os_log_impl(&dword_1C4CFF000, v63, OS_LOG_TYPE_INFO, "We were able to decrypt the share public PCS using our identity for share %@", buf, 0xCu);
  }

  if (v61)
  {
    if (objc_msgSend_publicPermission(v5, v65, v66) != 1 && objc_msgSend_publicPermission(v5, v67, v68))
    {
      uint64_t v71 = *(void **)(a1 + 32);
      uint64_t v72 = objc_msgSend_pcsData(v5, v69, v70);
      id v126 = 0;
      uint64_t v25 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_logFailure_error_(v71, v73, (uint64_t)v72, 5, v37, 0, &v126);
      id v74 = v126;

      id v75 = *v12;
      if (v25 && !v74)
      {
        if (*v13 != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], v75);
        }
        long long v76 = *v14;
        if (os_log_type_enabled((os_log_t)*v14, OS_LOG_TYPE_INFO))
        {
          long long v77 = *(__CFString **)(a1 + 48);
          *(_DWORD *)buf = 138412290;
          uint64_t v134 = v77;
          _os_log_impl(&dword_1C4CFF000, v76, OS_LOG_TYPE_INFO, "Unlocked private share PCS for share %@ using the public PCS", buf, 0xCu);
        }
        goto LABEL_68;
      }
      id v95 = v75;
      if (*v13 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v95);
      }

      char v96 = *v14;
      if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
      {
        id v97 = *(__CFString **)(a1 + 48);
        *(_DWORD *)buf = 138412546;
        uint64_t v134 = v97;
        __int16 v135 = 2112;
        uint64_t v136 = (uint64_t)v74;
        _os_log_impl(&dword_1C4CFF000, v96, OS_LOG_TYPE_INFO, "Couldn't decrypt share private PCS with public PCS for share %@: %@", buf, 0x16u);
      }

      goto LABEL_67;
    }
    id v78 = *v12;
    if (*v13 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v78);
    }

    long long v79 = *v14;
    if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
    {
      long long v82 = *(__CFString **)(a1 + 48);
      uint64_t v83 = objc_msgSend_publicPermission(v5, v80, v81);
      *(_DWORD *)buf = 138412546;
      uint64_t v134 = v82;
      __int16 v135 = 2048;
      uint64_t v136 = v83;
      _os_log_impl(&dword_1C4CFF000, v79, OS_LOG_TYPE_INFO, "We were able to decrypt the public share PCS for %@ with our identity, but since the share permission is %ld we can't decrypt the private PCS. This might not go well...", buf, 0x16u);
    }

    uint64_t v25 = 0;
    int v84 = 1;
LABEL_55:
    BOOL v85 = v25 != 0;
    goto LABEL_70;
  }
LABEL_67:
  if (v25)
  {
LABEL_68:
    objc_msgSend_setPublicPCS_(v5, v65, (uint64_t)v37);
    objc_msgSend_setInvitedPCS_(v5, v98, (uint64_t)v25);
    CFRelease(v25);
    uint64_t v99 = 0;
    __int16 v100 = v125;
    goto LABEL_78;
  }
  BOOL v85 = 0;
  int v84 = 1;
LABEL_70:
  id v101 = *v12;
  if (*v13 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v101);
  }
  __int16 v100 = v125;

  __int16 v102 = *v14;
  if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
  {
    uint64_t v103 = *(__CFString **)(a1 + 48);
    *(_DWORD *)buf = 138412290;
    uint64_t v134 = v103;
    _os_log_impl(&dword_1C4CFF000, v102, OS_LOG_TYPE_INFO, "Warn: Couldn't unlock the private share PCS for share %@", buf, 0xCu);
  }

  uint64_t v99 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v104, *MEMORY[0x1E4F19DD8], 5004, v125, @"Couldn't unlock the private share PCS for share %@", *(void *)(a1 + 48));
  if (!v85)
  {
    if (!v84) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  CFRelease(v25);
  if (v84) {
LABEL_78:
  }
    CFRelease(v37);
LABEL_79:
  uint64_t v105 = *(void *)(a1 + 56);
  if (v105) {
    (*(void (**)(uint64_t, id, void *))(v105 + 16))(v105, v5, v99);
  }
}

uint64_t sub_1C4DE07BC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__locked_pcsDataFromFetchedShare_withPublicSharingKey_oonPrivateKey_withServiceType_requestorOperationID_completionHandler_, *(void *)(a1 + 40));
}

uint64_t sub_1C4DE0C50(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, 0);
  }
  return result;
}

uint64_t sub_1C4DE0C70(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 32), 0);
  }
  return result;
}

void sub_1C4DE0C94(uint64_t a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v9 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), v7, v8);
  dispatch_assert_queue_V2(v9);

  if (objc_msgSend_pcs(v5, v10, v11) && objc_msgSend_publicPCS(v5, v12, v13))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v14 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
    {
      id v15 = *(void **)(a1 + 40);
      uint64_t v16 = v14;
      uint64_t v19 = objc_msgSend_recordID(v15, v17, v18);
      int v28 = 138412290;
      uint64_t v29 = v19;
      uint64_t v20 = "Decrypted share PCS for share %@";
      uint64_t v21 = v16;
      uint32_t v22 = 12;
LABEL_11:
      _os_log_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_INFO, v20, (uint8_t *)&v28, v22);
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v23 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = *(void **)(a1 + 40);
      uint64_t v16 = v23;
      uint64_t v19 = objc_msgSend_recordID(v24, v25, v26);
      int v28 = 138412546;
      uint64_t v29 = v19;
      __int16 v30 = 2112;
      id v31 = v6;
      uint64_t v20 = "Couldn't unlock the private share PCS for share %@: %@";
      uint64_t v21 = v16;
      uint32_t v22 = 22;
      goto LABEL_11;
    }
  }
  uint64_t v27 = *(void *)(a1 + 48);
  if (v27) {
    (*(void (**)(uint64_t, id, id))(v27 + 16))(v27, v5, v6);
  }
}

void sub_1C4DE20C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DE20E4(uint64_t a1)
{
  uint64_t result = PCSFPAddPublicIdentityWithShareFlags();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1C4DE25F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DE2610(uint64_t a1)
{
  uint64_t result = PCSFPRemovePublicIdentity();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

id sub_1C4DE2A4C(uint64_t a1, const char *a2)
{
  return (id)objc_msgSend_removePublicIdentity_fromSharePCS_(*(void **)(a1 + 32), a2, (uint64_t)a2, *(void *)(a1 + 40));
}

void sub_1C4DE2D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_1C4DE2D58(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)PCSPublicIdentityCopyPublicKey();
  if (objc_msgSend_isEqualToData_(*(void **)(a1 + 32), v5, (uint64_t)v4))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    id v6 = (void *)MEMORY[0x1E4F1A550];
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v7 = (os_log_t *)MEMORY[0x1E4F1A500];
    uint64_t v8 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_INFO, "Removing public identity for key %{public}@", (uint8_t *)&buf, 0xCu);
    }
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v22 = 0x2020000000;
    char v23 = 0;
    uint64_t v11 = *(void **)(a1 + 40);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    id v16[2] = sub_1C4DE2FB0;
    void v16[3] = &unk_1E64F2918;
    uint64_t v12 = *(void *)(a1 + 64);
    void v16[4] = &buf;
    v16[5] = v12;
    v16[6] = a2;
    objc_msgSend__onSynchronizeQueue_(v11, v9, (uint64_t)v16);
    if (!*(unsigned char *)(*((void *)&buf + 1) + 24))
    {
      if (*v6 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v13 = *v7;
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        uint64_t v15 = *(void *)(a1 + 64);
        *(_DWORD *)id v17 = 138543618;
        uint64_t v18 = v14;
        __int16 v19 = 2112;
        uint64_t v20 = v15;
        _os_log_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_INFO, "Failed to remove public identity matching key %{public}@ from record PCS %@", v17, 0x16u);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
    }
    _Block_object_dispose(&buf, 8);
  }
}

void sub_1C4DE2F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DE2FB0(uint64_t a1)
{
  uint64_t result = PCSFPRemovePublicIdentity();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1C4DE322C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DE3258(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)PCSPublicIdentityCopyCurrentKeyFingerprint();
  if (objc_msgSend_isEqualToData_(*(void **)(a1 + 32), v5, (uint64_t)v4))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    id v6 = (void *)MEMORY[0x1E4F1A550];
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v7 = (os_log_t *)MEMORY[0x1E4F1A500];
    uint64_t v8 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_impl(&dword_1C4CFF000, v8, OS_LOG_TYPE_INFO, "Removing public identity for keyID %{public}@", (uint8_t *)&buf, 0xCu);
    }
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v26 = 0x2020000000;
    char v27 = 0;
    uint64_t v11 = *(void **)(a1 + 40);
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = sub_1C4DE34FC;
    void v20[3] = &unk_1E64F2918;
    uint64_t v12 = *(void *)(a1 + 64);
    id v20[4] = &buf;
    v20[5] = v12;
    v20[6] = a2;
    objc_msgSend__onSynchronizeQueue_(v11, v9, (uint64_t)v20);
    if (!*(unsigned char *)(*((void *)&buf + 1) + 24))
    {
      if (*v6 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v13 = *v7;
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v16 = *(void *)(a1 + 64);
        *(_DWORD *)uint64_t v21 = 138543618;
        uint64_t v22 = v15;
        __int16 v23 = 2112;
        uint64_t v24 = v16;
        _os_log_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_INFO, "Failed to remove public identity matching keyID %{public}@ from PCS %@", v21, 0x16u);
      }
      if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
      {
        uint64_t v17 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v14, *MEMORY[0x1E4F19DD8], 5005, @"Couldn't remove public identity with keyID %@ from PCS %@", *(void *)(a1 + 32), *(void *)(a1 + 64));
        uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
        __int16 v19 = *(void **)(v18 + 40);
        *(void *)(v18 + 40) = v17;
      }
    }
    _Block_object_dispose(&buf, 8);
  }
}

void sub_1C4DE34DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DE34FC(uint64_t a1)
{
  uint64_t result = PCSFPRemovePublicIdentity();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1C4DE557C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

uint64_t sub_1C4DE5594(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_1C4DE55AC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_1C4DE55C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v9 = objc_msgSend_synchronizeQueue(*(void **)(a1 + 32), v7, v8);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1C4DE56B0;
  v13[3] = &unk_1E64F1B98;
  id v14 = v5;
  id v15 = v6;
  uint64_t v10 = *(void **)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 32);
  id v17 = v10;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, v13);
}

void sub_1C4DE56B0(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    BOOL v4 = *(void *)(a1 + 40) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    objc_msgSend_setBoundaryKeyData_(*(void **)(a1 + 48), a2, v3);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], a2, *MEMORY[0x1E4F19DD8], 5005);
  }
  uint64_t v8 = objc_msgSend_callbackQueue(*(void **)(a1 + 48), v5, v6);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4DE57CC;
  block[3] = &unk_1E64F0718;
  id v13 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 32);
  id v12 = v7;
  id v9 = v7;
  dispatch_async(v8, block);
}

uint64_t sub_1C4DE57CC(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1C4DE5898(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__lockedGlobalPerUserBoundaryKeyDataWithCompletionHandler_, *(void *)(a1 + 40));
}

void sub_1C4DE5DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 240), 8);
  _Block_object_dispose((const void *)(v37 - 208), 8);
  _Block_object_dispose((const void *)(v37 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DE5E18(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1, 0);
  }
  return result;
}

void sub_1C4DE5E38(uint64_t a1, char a2, void *a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
  if (v8)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v10 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138543618;
      uint64_t v13 = v11;
      __int16 v14 = 2112;
      id v15 = v8;
      _os_log_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_INFO, "Warn: Keychain sync for signing identity %{public}@ failed: %@", (uint8_t *)&v12, 0x16u);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1C4DE5F7C(uint64_t a1, char a2, void *a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
  if (v8)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v10 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138543618;
      uint64_t v13 = v11;
      __int16 v14 = 2112;
      id v15 = v8;
      _os_log_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_INFO, "Warn: Keychain sync for signing identity %{public}@ failed: %@", (uint8_t *)&v12, 0x16u);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1C4DE60C0(void *a1)
{
  uint64_t result = a1[4];
  if (result)
  {
    if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
      BOOL v3 = *(unsigned char *)(*(void *)(a1[6] + 8) + 24) != 0;
    }
    else {
      BOOL v3 = 0;
    }
    uint64_t v4 = *(void *)(*(void *)(a1[7] + 8) + 40);
    if (!v4) {
      uint64_t v4 = *(void *)(*(void *)(a1[8] + 8) + 40);
    }
    return (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(result + 16))(result, v3, v4);
  }
  return result;
}

uint64_t sub_1C4DE6310(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(result + 16))(result, 1, 0, 0);
  }
  return result;
}

void sub_1C4DE6334(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v11 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), v9, v10);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = sub_1C4DE642C;
  void v15[3] = &unk_1E64F3080;
  id v12 = *(id *)(a1 + 40);
  id v17 = v8;
  id v18 = v12;
  char v19 = a2;
  id v16 = v7;
  id v13 = v8;
  id v14 = v7;
  dispatch_async(v11, v15);
}

uint64_t sub_1C4DE642C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  return result;
}

uint64_t sub_1C4DE6A50(uint64_t a1, void *a2)
{
  return objc_msgSend_subdataWithRange_(a2, (const char *)a2, 0, 4);
}

uint64_t sub_1C4DE6C08(uint64_t a1, const char *a2)
{
  qword_1EBBCFBE0 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], a2, @"com.apple.cloudkit.unittest.nopcs.CKManateeContainerTests.", @"com.apple.cloudkit.zoneshare.test_non_manatee", @"com.apple.cloudkit.unittest.zonesharing.", @"com.apple.cloudkit.unittest.fdb.zonesharing.", @"com.apple.test.p", @"com.apple.test.fdb.p", @"com.apple.cloudkit.unittest.CKAnonymousToServerShareParticipantTests.", 0);
  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1C4DE6D50()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  qword_1EBBCFBF0 = objc_msgSend_initWithObjects_(v0, v1, @"ForceUserKeyRegistrySyncRetryOnZonePCSCreation", @"ForceUserKeyRegistrySyncRetryOnDecryption", @"ForceMissingIdentitiesErrorOnDecryptionRetry", @"ForceDecryptFailedErrorOnDecryptionRetry", @"ResetKeySyncState", @"AllowThrottlingWithUnitTestAccount", @"ForceKeySyncFailure", @"ForceKeySyncFailureForReminders", @"FakeOutCurrentIdentityIsMissing", @"ForceImmediateUserKeyRegistrySyncFailure", @"FakeSignatureGenerationErrorDeviceCapabilities", @"FakeSignatureGenerationErrorZoneUsage", @"FakeSignatureGenerationErrorShareUsage", @"FakeSignatureGenerationErrorRequiredFeatures", @"FakeSignatureGenerationErrorAnonymousToServerShareAccept", @"FakeSignatureGenerationErrorAnonymousToServerAuthentication", @"FakeInvalidSignature",
                      @"ForceKRSReturnExistingIdentityValue",
                      @"DisallowKRSToBePerformed",
                      @"ExpectedPersonaIdentifier",
                      @"ForceKeyRegistrySyncOnRemindersZoneCreation",
                      @"ForceSingleIdentityForRemindersZone",
                      @"GenerateOneInvalidSignature",
                      @"OverrideShareModificationDate",
                      @"FakeSignatureValidationError",
                      @"ExpectValidationSuccessWithManateeIdentity",
                      @"ExpectValidationSuccessWithStingrayIdentity",
                      @"ClearContainersOnPCSNotifier",
                      @"SimulateMissingSigningIdentityForDeviceCapabilities",
                      @"SimulateMissingSigningIdentityForZoneUsage",
                      @"SimulateMissingSigningIdentityForShareUsage",
                      @"SimulateMissingSigningIdentityForRequiredFeatures",
                      @"FakeDBRAccountNeedsReauthenticationPCSError",
                      0);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4DE6FDC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_pcsTestOverrides(*(void **)(a1 + 32), a2, a3);
  if (!v4 || (id v7 = (void *)v4, v8 = objc_msgSend_count(*(void **)(a1 + 40), v5, v6), v7, !v8))
  {
    uint64_t v11 = objc_opt_new();
    objc_msgSend_setPcsTestOverrides_(*(void **)(a1 + 32), v12, (uint64_t)v11);
  }
  if (!objc_msgSend_count(*(void **)(a1 + 40), v9, v10))
  {
    id v15 = objc_msgSend_identityManager(*(void **)(a1 + 32), v13, v14);
    objc_msgSend_clearOverrides(v15, v16, v17);
  }
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id v18 = *(id *)(a1 + 40);
  uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v45, v49, 16);
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)v46;
    do
    {
      uint64_t v23 = 0;
      do
      {
        if (*(void *)v46 != v22) {
          objc_enumerationMutation(v18);
        }
        uint64_t v24 = *(void *)(*((void *)&v45 + 1) + 8 * v23);
        uint64_t v25 = objc_opt_class();
        uint64_t v28 = objc_msgSend_pcsOverrideKeys(v25, v26, v27, (void)v45);
        int v30 = objc_msgSend_containsObject_(v28, v29, v24);

        if (v30)
        {
          uint64_t v33 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v31, v24);
          __int16 v36 = objc_msgSend_pcsTestOverrides(*(void **)(a1 + 32), v34, v35);
          objc_msgSend_setObject_forKeyedSubscript_(v36, v37, (uint64_t)v33, v24);
        }
        else
        {
          id v38 = objc_msgSend_overrideKeys(CKDPCSIdentityManager, v31, v32);
          int v40 = objc_msgSend_containsObject_(v38, v39, v24);

          if (!v40) {
            goto LABEL_16;
          }
          uint64_t v33 = objc_msgSend_identityManager(*(void **)(a1 + 32), v41, v42);
          __int16 v36 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v43, v24);
          objc_msgSend_setOverride_value_(v33, v44, v24, v36);
        }

LABEL_16:
        ++v23;
      }
      while (v21 != v23);
      uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v41, (uint64_t)&v45, v49, 16);
    }
    while (v21);
  }
}

void sub_1C4DE732C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DE7344(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_pcsTestOverrides(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = objc_msgSend_objectForKeyedSubscript_(v4, v5, *(void *)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = objc_msgSend_BOOLValue(v6, v7, v8);

  objc_msgSend_pcsTestOverrides(*(void **)(a1 + 32), v9, v10);
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v12, v11, 0, *(void *)(a1 + 40));
}

void sub_1C4DE7504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DE751C(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_pcsTestOverrides(*(void **)(a1 + 32), a2, a3);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = objc_msgSend_objectForKeyedSubscript_(v8, v4, *(void *)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = objc_msgSend_BOOLValue(v5, v6, v7);
}

void sub_1C4DE76F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DE7710(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_pcsTestOverrides(*(void **)(a1 + 32), a2, a3);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v5 = objc_msgSend_objectForKeyedSubscript_(v8, v4, *(void *)(a1 + 40));
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void *sub_1C4DE79B8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = sub_1C4DE7A08(a1, a2, a3);
  uint64_t result = dlsym(v4, "MarkForCounterSigning");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EA3D1030 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4DE7A08(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v9[0] = 0;
  if (!qword_1EA3D1038)
  {
    v9[1] = (void *)MEMORY[0x1E4F143A8];
    void v9[2] = (void *)3221225472;
    void v9[3] = sub_1C4DE7B5C;
    void v9[4] = &unk_1E64F1B50;
    void v9[5] = v9;
    long long v10 = xmmword_1E64F3138;
    uint64_t v11 = 0;
    qword_1EA3D1038 = _sl_dlopen();
  }
  BOOL v3 = (void *)qword_1EA3D1038;
  if (!qword_1EA3D1038)
  {
    BOOL v3 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3);
    uint64_t v7 = objc_msgSend_stringWithUTF8String_(NSString, v6, (uint64_t)"void *ProtectedCloudStorageLibrary(void)");
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v3, v8, (uint64_t)v7, @"CKDPCSManager.m", 64, @"%s", v9[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v4 = v9[0];
  if (v9[0]) {
LABEL_7:
  }
    free(v4);
  return v3;
}

uint64_t sub_1C4DE7B5C()
{
  uint64_t result = _sl_dlopen();
  qword_1EA3D1038 = result;
  return result;
}

void *sub_1C4DE7BD0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = sub_1C4DE7A08(a1, a2, a3);
  uint64_t result = dlsym(v4, "PCSObjectCreateFromExportedWithKeyedPCSAndOptionsWithTrusts");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EA3D1040 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1C4DE7C20(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = sub_1C4DE7A08(a1, a2, a3);
  uint64_t result = dlsym(v4, "PCSNeedsRollAndCounterSign");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EA3D1048 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1C4DE83AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DE83CC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_shareMetadataFetchedBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_shareMetadataFetchedBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
  }
}

void sub_1C4DE8FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location,id a28)
{
  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a28);
  _Unwind_Resume(a1);
}

void sub_1C4DE9008(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = (id *)(a1 + 48);
  id v8 = a4;
  id v9 = a3;
  id v10 = a2;
  id WeakRetained = objc_loadWeakRetained(v7);
  objc_msgSend__handleTokenResolveWithLookupInfo_shareMetadata_responseCode_urlByShortTokenLookupInfos_tokensToFetchByURL_(WeakRetained, v11, (uint64_t)v10, v9, v8, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1C4DE90A4(void **a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v3 = objc_loadWeakRetained(a1 + 7);
  objc_msgSend_error(v3, v4, v5);
  uint64_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v7 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    id v10 = @" with error ";
    uint64_t v11 = &stru_1F2044F30;
    if (v6) {
      uint64_t v11 = v6;
    }
    else {
      id v10 = &stru_1F2044F30;
    }
    *(_DWORD *)long long buf = 138543618;
    id v39 = v10;
    __int16 v40 = 2112;
    id v41 = v11;
    _os_log_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_INFO, "Short token metadata request finished%{public}@%@", buf, 0x16u);
  }
  uint64_t v12 = objc_msgSend_container(a1[4], v8, v9);
  objc_msgSend_clientSDKVersion(v12, v13, v14);
  int v15 = CKLinkCheck32f5805a68adfc1b65f94a0de69aa32177c7cd24();

  if (*MEMORY[0x1E4F1A4E0])
  {
    id v18 = objc_msgSend_unitTestOverrides(a1[4], v16, v17);
    uint64_t v20 = objc_msgSend_objectForKeyedSubscript_(v18, v19, @"LegacyErrorHandling");
    char v23 = objc_msgSend_BOOLValue(v20, v21, v22);

    if (v23)
    {
      if (!v6) {
        goto LABEL_24;
      }
LABEL_16:
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      uint64_t v25 = objc_msgSend_allKeys(a1[5], v16, v17, 0);
      uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v33, v37, 16);
      if (v27)
      {
        uint64_t v29 = v27;
        uint64_t v30 = *(void *)v34;
        do
        {
          for (uint64_t i = 0; i != v29; ++i)
          {
            if (*(void *)v34 != v30) {
              objc_enumerationMutation(v25);
            }
            objc_msgSend__performCallbackForURL_withMetadata_error_(WeakRetained, v28, *(void *)(*((void *)&v33 + 1) + 8 * i), 0, v6);
          }
          uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v28, (uint64_t)&v33, v37, 16);
        }
        while (v29);
      }

      goto LABEL_24;
    }
  }
  if (!v6) {
    goto LABEL_24;
  }
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t v24 = objc_msgSend_error(WeakRetained, v16, v17);

  if (!v24) {
    objc_msgSend_setError_(WeakRetained, v16, (uint64_t)v6);
  }
LABEL_24:
  uint64_t v32 = objc_msgSend_stateTransitionGroup(WeakRetained, v16, v17);
  dispatch_group_leave(v32);
}

void sub_1C4DE9AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location)
{
  objc_destroyWeak(v13);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v14 - 144));
  _Unwind_Resume(a1);
}

void sub_1C4DE9AE0(uint64_t a1)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (*MEMORY[0x1E4F1A4E0])
  {
    if (objc_msgSend_participantStatus(*(void **)(a1 + 32), v2, v3) == 2)
    {
      uint64_t v5 = objc_msgSend_parentOperation(WeakRetained, v2, v3);
      int v7 = objc_msgSend_checkAndClearUnitTestOverrides_(v5, v6, @"ForceShareAcceptTwice");

      if (v7) {
        objc_msgSend_setParticipantStatus_(*(void **)(a1 + 32), v2, 1);
      }
    }
  }
  id v8 = objc_msgSend_privateTokenData(*(void **)(a1 + 40), v2, v3);
  objc_msgSend_setPrivateToken_(*(void **)(a1 + 32), v9, (uint64_t)v8);

  uint64_t v12 = objc_msgSend_publicTokenData(*(void **)(a1 + 40), v10, v11);
  objc_msgSend_setPublicToken_(*(void **)(a1 + 32), v13, (uint64_t)v12);

  id v16 = objc_msgSend_container(WeakRetained, v14, v15);
  char v19 = objc_msgSend_entitlements(v16, v17, v18);
  int hasDisplaysSystemAcceptPromptEntitlement = objc_msgSend_hasDisplaysSystemAcceptPromptEntitlement(v19, v20, v21);
  objc_msgSend_setAcceptedInProcess_(*(void **)(a1 + 32), v23, hasDisplaysSystemAcceptPromptEntitlement ^ 1u);

  if (objc_msgSend_overwriteContainerPCSServiceIfManatee(WeakRetained, v24, v25))
  {
    uint64_t v28 = objc_msgSend_callingParticipant(*(void **)(a1 + 32), v26, v27);
    id v31 = objc_msgSend_userIdentity(v28, v29, v30);
    uint64_t v34 = objc_msgSend_publicKeyVersion(v31, v32, v33);

    long long v35 = PCSServiceItemGetNameByIndex();
    if (objc_msgSend_length(v35, v36, v37) && PCSServiceItemTypeIsManatee())
    {
      id v38 = objc_msgSend_container(WeakRetained, v26, v27);
      id v41 = objc_msgSend_pcsManager(v38, v39, v40);
      objc_msgSend_setPCSServiceNameOverwrite_(v41, v42, (uint64_t)v35);

      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      __int16 v43 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412546;
        long long v80 = v35;
        __int16 v81 = 2048;
        uint64_t v82 = v34;
        _os_log_impl(&dword_1C4CFF000, v43, OS_LOG_TYPE_INFO, "Using the service name %@ from public key version %lu of share metadata because it is manatee and this operation is initiated by another process", buf, 0x16u);
      }
    }
  }
  else
  {
    long long v35 = 0;
  }
  uint64_t v44 = objc_msgSend_container(WeakRetained, v26, v27);
  long long v47 = objc_msgSend_pcsManager(v44, v45, v46);
  if ((objc_msgSend_currentServiceIsManatee(v47, v48, v49) & 1) == 0)
  {

    goto LABEL_23;
  }
  id v52 = objc_msgSend_callingParticipant(*(void **)(a1 + 32), v50, v51);
  uint64_t v55 = objc_msgSend_acceptanceStatus(v52, v53, v54);

  if (v55 != 1)
  {
LABEL_23:
    objc_msgSend__continueSharePCSPrepForShareMetadata_shareURL_(WeakRetained, v56, *(void *)(a1 + 32), *(void *)(a1 + 56));
    goto LABEL_29;
  }
  if (*(void *)(a1 + 48) && (objc_msgSend_overwriteContainerPCSServiceIfManatee(WeakRetained, v56, v57) & 1) == 0)
  {
    uint64_t v58 = objc_msgSend_shareURL(*(void **)(a1 + 48), v56, v57);
    char isEqual = objc_msgSend_isEqual_(v58, v59, *(void *)(a1 + 56));

    BOOL v61 = (void *)*MEMORY[0x1E4F1A548];
    if (isEqual)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v61);
      }
      id v62 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        uint64_t v63 = *(void **)(a1 + 56);
        *(_DWORD *)long long buf = 138412290;
        long long v80 = v63;
        _os_log_debug_impl(&dword_1C4CFF000, v62, OS_LOG_TYPE_DEBUG, "Share invitation token and client-provided share URL are a match: %@", buf, 0xCu);
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v61);
      }
      uint64_t v64 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v69 = *(void **)(a1 + 48);
        uint64_t v70 = v64;
        uint64_t v73 = objc_msgSend_shareURL(v69, v71, v72);
        uint64_t v74 = *(void *)(a1 + 56);
        *(_DWORD *)long long buf = 138412546;
        long long v80 = v73;
        __int16 v81 = 2112;
        uint64_t v82 = v74;
        _os_log_error_impl(&dword_1C4CFF000, v70, OS_LOG_TYPE_ERROR, "Share invitation token URL %@ doesn't match client-provided share URL %@. This will go badly.", buf, 0x16u);
      }
    }
  }
  uint64_t v65 = objc_msgSend_stateTransitionGroup(WeakRetained, v56, v57);
  dispatch_group_enter(v65);

  uint64_t v66 = *(void *)(a1 + 32);
  v75[0] = MEMORY[0x1E4F143A8];
  v75[1] = 3221225472;
  v75[2] = sub_1C4DE9FA8;
  v75[3] = &unk_1E64F3258;
  uint64_t v67 = *(void *)(a1 + 48);
  id v76 = *(id *)(a1 + 56);
  id v77 = WeakRetained;
  id v78 = *(id *)(a1 + 32);
  objc_msgSend__prepPPPCSDataForDugongShareMetadata_withInvitationToken_completionHandler_(WeakRetained, v68, v66, v67, v75);

LABEL_29:
}

void sub_1C4DE9FA8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  int v7 = v6;
  id v8 = (void *)*MEMORY[0x1E4F1A548];
  uint64_t v9 = *MEMORY[0x1E4F1A550];
  if (!v5 || v6)
  {
    if (v9 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v8);
    }
    char v19 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v24 = v22;
      __int16 v25 = 2112;
      uint64_t v26 = v7;
      _os_log_error_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_ERROR, "Warn: Couldn't ingest manatee sharing invitation data for share %@: %@", buf, 0x16u);
      if (v7) {
        goto LABEL_13;
      }
    }
    else if (v7)
    {
LABEL_13:
      objc_msgSend__performCallbackForURL_withMetadata_error_(*(void **)(a1 + 40), v20, *(void *)(a1 + 32), 0, v7);
      goto LABEL_14;
    }
    int v7 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v20, *MEMORY[0x1E4F19DD8], 1000, @"No participant protection data for share %@", *(void *)(a1 + 32));
    goto LABEL_13;
  }
  if (v9 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], v8);
  }
  id v10 = *MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v24 = v13;
    _os_log_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_INFO, "Successfully ingested manatee sharing invitation data for share %@", buf, 0xCu);
  }
  uint64_t v14 = objc_msgSend_callingParticipant(*(void **)(a1 + 48), v11, v12);
  objc_msgSend_setProtectionInfo_(v14, v15, (uint64_t)v5);

  objc_msgSend__continueSharePCSPrepForShareMetadata_shareURL_(*(void **)(a1 + 40), v16, *(void *)(a1 + 48), *(void *)(a1 + 32));
  int v7 = 0;
LABEL_14:
  uint64_t v21 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 40), v17, v18);
  dispatch_group_leave(v21);
}

void sub_1C4DEA1BC(uint64_t a1, char a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (a2)
  {
    int v7 = objc_msgSend_callingParticipant(*(void **)(a1 + 40), v4, v5);
    uint64_t v10 = objc_msgSend_permission(v7, v8, v9);
    objc_msgSend_setParticipantPermission_(*(void **)(a1 + 40), v11, v10);

    uint64_t v14 = objc_msgSend_callingParticipant(*(void **)(a1 + 40), v12, v13);
    uint64_t v17 = objc_msgSend_acceptanceStatus(v14, v15, v16);
    objc_msgSend_setParticipantStatus_(*(void **)(a1 + 40), v18, v17);

    uint64_t v21 = objc_msgSend_callingParticipant(*(void **)(a1 + 40), v19, v20);
    uint64_t v24 = objc_msgSend_role(v21, v22, v23);
    objc_msgSend_setParticipantRole_(*(void **)(a1 + 40), v25, v24);

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v28 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C4CFF000, v28, OS_LOG_TYPE_DEBUG, "Couldn't find current user on share with anonymous to server participants. Swizzling into share not found.", buf, 2u);
    }
    uint64_t v30 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v29, *MEMORY[0x1E4F19DD8], 2003, @"Couldn't find this participant on the share for %@", *(void *)(a1 + 32));
    objc_msgSend__performCallbackForURL_withMetadata_error_(WeakRetained, v31, *(void *)(a1 + 32), 0, v30);
  }
  uint64_t v32 = objc_msgSend_stateTransitionGroup(WeakRetained, v26, v27);
  dispatch_group_leave(v32);
}

void sub_1C4DEA654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4DEA688(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v8 = WeakRetained;
  if (*MEMORY[0x1E4F1A4E0])
  {
    uint64_t v9 = objc_msgSend_unitTestOverrides(WeakRetained, v6, v7);
    uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(v9, v10, @"ForceSharePCSPrepFailure");
    int v14 = objc_msgSend_BOOLValue(v11, v12, v13);

    if (v14)
    {
      uint64_t v16 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v15, *MEMORY[0x1E4F19DD8], 5004, @"Failing share PCS prep for unit tests");

      uint64_t v4 = (__CFString *)v16;
    }
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v17 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
  {
    char v19 = *(void **)(a1 + 32);
    uint64_t v20 = v17;
    uint64_t v23 = objc_msgSend_share(v19, v21, v22);
    uint64_t v26 = objc_msgSend_recordID(v23, v24, v25);
    uint64_t v29 = objc_msgSend_container(v8, v27, v28);
    uint64_t v30 = (void *)v29;
    id v31 = @" and error: ";
    *(_DWORD *)long long v36 = 138413058;
    uint64_t v32 = &stru_1F2044F30;
    *(void *)&v36[4] = v26;
    *(_WORD *)&v36[12] = 2112;
    if (!v4) {
      id v31 = &stru_1F2044F30;
    }
    *(void *)&v36[14] = v29;
    if (v4) {
      uint64_t v32 = v4;
    }
    *(_WORD *)&v36[22] = 2114;
    uint64_t v37 = v31;
    __int16 v38 = 2112;
    id v39 = v32;
    _os_log_impl(&dword_1C4CFF000, v20, OS_LOG_TYPE_INFO, "Prepped PCS data for share %@ with container %@%{public}@%@", v36, 0x2Au);
  }
  objc_msgSend__continueHandlingFetchedShareMetadata_shareURL_(v8, v18, *(void *)(a1 + 32), *(void *)(a1 + 40), *(_OWORD *)v36, *(void *)&v36[16]);
  long long v35 = objc_msgSend_stateTransitionGroup(v8, v33, v34);
  dispatch_group_leave(v35);
}

void sub_1C4DEAF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_1C4DEAFB0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4DEAFC0(uint64_t a1)
{
}

void sub_1C4DEAFC8(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (v7)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v6 = *(void *)(v4 + 40);
    uint64_t v5 = (id *)(v4 + 40);
    if (!v6) {
      objc_storeStrong(v5, a2);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1C4DEB034(uint64_t a1, const char *a2)
{
  return objc_msgSend__performCallbackForURL_withMetadata_error_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
}

void sub_1C4DEB58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v13 - 136));
  _Unwind_Resume(a1);
}

void sub_1C4DEB5BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  id v8 = WeakRetained;
  if (*MEMORY[0x1E4F1A4E0])
  {
    uint64_t v9 = objc_msgSend_unitTestOverrides(WeakRetained, v6, v7);
    uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(v9, v10, @"ForceSharePCSPrepFailure");
    int v14 = objc_msgSend_BOOLValue(v11, v12, v13);

    if (v14)
    {
      uint64_t v16 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v15, *MEMORY[0x1E4F19DD8], 5004, @"Failing share PCS prep for unit tests");

      uint64_t v4 = (__CFString *)v16;
    }
  }
  uint64_t v17 = (void *)MEMORY[0x1E4F1A550];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v18 = (os_log_t *)MEMORY[0x1E4F1A528];
  char v19 = (void *)*MEMORY[0x1E4F1A528];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
  {
    uint64_t v20 = *(void **)(a1 + 32);
    uint64_t v21 = v19;
    uint64_t v24 = objc_msgSend_share(v20, v22, v23);
    objc_msgSend_recordID(v24, v25, v26);
    uint64_t v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
    uint64_t v28 = *(void *)(a1 + 40);
    uint64_t v29 = @" and error: ";
    uint64_t v30 = &stru_1F2044F30;
    *(_DWORD *)long long buf = 138413058;
    long long v48 = v27;
    if (!v4) {
      uint64_t v29 = &stru_1F2044F30;
    }
    __int16 v49 = 2112;
    if (v4) {
      uint64_t v30 = v4;
    }
    uint64_t v50 = v28;
    __int16 v51 = 2112;
    id v52 = v29;
    __int16 v53 = 2112;
    uint64_t v54 = v30;
    _os_log_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_INFO, "Prepped PCS data for share %@ with container %@%@%@", buf, 0x2Au);
  }
  if (!v4) {
    goto LABEL_20;
  }
  if (CKIsPCSError()
    && (objc_msgSend__currentUserIsOONForShareMetadata_(v8, v31, *(void *)(a1 + 32)) & 1) != 0)
  {
    if (*v17 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v33 = *v18;
    if (os_log_type_enabled(*v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      long long v48 = v4;
      _os_log_impl(&dword_1C4CFF000, v33, OS_LOG_TYPE_INFO, "Suppressing error for OON user share metadata fetch. Error was: %@", buf, 0xCu);
    }

LABEL_20:
    uint64_t v34 = objc_opt_class();
    uint64_t v36 = *(void *)(a1 + 40);
    uint64_t v35 = *(void *)(a1 + 48);
    v41[0] = MEMORY[0x1E4F143A8];
    v41[1] = 3221225472;
    void v41[2] = sub_1C4DEB928;
    v41[3] = &unk_1E64F3348;
    uint64_t v42 = (__CFString *)*(id *)(a1 + 56);
    __int16 v43 = v8;
    id v44 = *(id *)(a1 + 32);
    id v37 = *(id *)(a1 + 72);
    uint64_t v45 = *(void *)(a1 + 64);
    id v46 = v37;
    objc_msgSend_spawnAndRunOperationOfClass_operationInfo_spawnQueue_container_operationConfigurationBlock_(v8, v38, v34, v35, 0, v36, v41);

    uint64_t v4 = v42;
    goto LABEL_24;
  }
  uint64_t v39 = *(void *)(a1 + 72);
  if (v39) {
    (*(void (**)(uint64_t, __CFString *))(v39 + 16))(v39, v4);
  }
  uint64_t v40 = objc_msgSend_stateTransitionGroup(v8, v31, v32);
  dispatch_group_leave(v40);

LABEL_24:
}

void sub_1C4DEB928(uint64_t a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  objc_msgSend_setFullRecordsToFetch_(v3, v4, *(void *)(a1 + 32));
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x3032000000;
  v26[3] = sub_1C4DEAFB0;
  void v26[4] = sub_1C4DEAFC0;
  id v27 = 0;
  objc_initWeak(&location, v3);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = sub_1C4DEBC48;
  v24[3] = &unk_1E64F32F8;
  void v24[4] = v26;
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v5, (uint64_t)v24);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_1C4DEBCD0;
  v19[3] = &unk_1E64F3320;
  objc_copyWeak(&v23, &location);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void **)(a1 + 48);
  uint64_t v22 = v26;
  v19[4] = v6;
  id v20 = v7;
  id v21 = *(id *)(a1 + 64);
  objc_msgSend_setCompletionBlock_(v3, v8, (uint64_t)v19);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v9 = (id)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = objc_msgSend_operationID(v3, v10, v11);
    uint64_t v13 = (objc_class *)objc_opt_class();
    NSStringFromClass(v13);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v15 = *(void **)(a1 + 56);
    uint64_t v18 = objc_msgSend_ckShortDescription(v15, v16, v17);
    *(_DWORD *)long long buf = 138544130;
    uint64_t v29 = v12;
    __int16 v30 = 2114;
    id v31 = v14;
    __int16 v32 = 2048;
    uint64_t v33 = v15;
    __int16 v34 = 2114;
    uint64_t v35 = v18;
    _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "Starting fetch records operation %{public}@ for <%{public}@: %p; %{public}@>",
      buf,
      0x2Au);
  }
  objc_destroyWeak(&v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(v26, 8);
}

void sub_1C4DEBC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DEBC48(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v8)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v11 = *(void *)(v9 + 40);
    uint64_t v10 = (id *)(v9 + 40);
    if (!v11) {
      objc_storeStrong(v10, a4);
    }
  }
}

void sub_1C4DEBCD0(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v5 = objc_msgSend_error(WeakRetained, v3, v4);

  uint64_t v6 = (void *)MEMORY[0x1E4F1A550];
  id v7 = (os_log_t *)MEMORY[0x1E4F1A500];
  if (v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v8 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = v8;
      id v14 = objc_msgSend_error(WeakRetained, v12, v13);
      int v42 = 138412290;
      __int16 v43 = v14;
      _os_log_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_INFO, "Error fetching records: %@", (uint8_t *)&v42, 0xCu);
    }
    if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
    {
      uint64_t v15 = objc_msgSend_error(WeakRetained, v9, v10);
      uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;
    }
  }
  if (*v6 != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  os_log_t v18 = *v7;
  if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v26 = v18;
    uint64_t v29 = objc_msgSend_operationID(WeakRetained, v27, v28);
    uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    id v31 = (objc_class *)objc_opt_class();
    __int16 v32 = NSStringFromClass(v31);
    uint64_t v33 = *(void **)(a1 + 32);
    uint64_t v36 = objc_msgSend_ckShortDescription(v33, v34, v35);
    int v42 = 138544386;
    __int16 v43 = v29;
    __int16 v44 = 2112;
    uint64_t v45 = v30;
    __int16 v46 = 2114;
    long long v47 = v32;
    __int16 v48 = 2048;
    __int16 v49 = v33;
    __int16 v50 = 2114;
    __int16 v51 = v36;
    _os_log_debug_impl(&dword_1C4CFF000, v26, OS_LOG_TYPE_DEBUG, "Fetch records operation %{public}@ completed with error: %@ for <%{public}@: %p; %{public}@>",
      (uint8_t *)&v42,
      0x34u);
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)
    && CKIsPCSError()
    && objc_msgSend__currentUserIsOONForShareMetadata_(*(void **)(a1 + 32), v19, *(void *)(a1 + 40)))
  {
    if (*v6 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    os_log_t v21 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEBUG))
    {
      id v37 = v21;
      uint64_t v40 = objc_msgSend_operationID(WeakRetained, v38, v39);
      uint64_t v41 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      int v42 = 138543618;
      __int16 v43 = v40;
      __int16 v44 = 2112;
      uint64_t v45 = v41;
      _os_log_debug_impl(&dword_1C4CFF000, v37, OS_LOG_TYPE_DEBUG, "Suppressing error for OON user fetch with operationID %{public}@. Error was: %@", (uint8_t *)&v42, 0x16u);
    }
    uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8);
    id v23 = *(void **)(v22 + 40);
    *(void *)(v22 + 40) = 0;
  }
  uint64_t v24 = *(void *)(a1 + 48);
  if (v24) {
    (*(void (**)(uint64_t, void))(v24 + 16))(v24, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
  }
  uint64_t v25 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v19, v20);
  dispatch_group_leave(v25);
}

uint64_t sub_1C4DED21C(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v24 = PBReaderReadData();
        uint64_t v25 = 8;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 28) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_34;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_36;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v20) = 0;
            }
LABEL_36:
            *(_DWORD *)(a1 + 24) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v24 = PBReaderReadData();
        uint64_t v25 = 16;
      }
      uint64_t v26 = *(void **)(a1 + v25);
      *(void *)(a1 + v25) = v24;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4DEE37C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_recordWebSharedBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_recordWebSharedBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64));
  }
}

void sub_1C4DEE404(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_recordWebUnsharedBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_recordWebUnsharedBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1C4DEE710(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_setRetryPCSFailures_(v3, v4, 0);
  objc_msgSend_setCanSetPreviousProtectionEtag_(v3, v5, 1);
  objc_msgSend_setTrustProtectionData_(v3, v6, 1);
  id v7 = objc_opt_new();
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_1C4DEE920;
  v19[3] = &unk_1E64F3398;
  objc_copyWeak(&v21, &location);
  id v8 = v7;
  id v20 = v8;
  objc_msgSend_setSaveCompletionBlock_(v3, v9, (uint64_t)v19);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = sub_1C4DEE9A8;
  void v15[3] = &unk_1E64F33C0;
  objc_copyWeak(&v17, &location);
  objc_copyWeak(&v18, &from);
  id v10 = v8;
  id v16 = v10;
  objc_msgSend_setCompletionBlock_(v3, v11, (uint64_t)v15);
  BOOL v14 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v12, v13);
  dispatch_group_enter(v14);

  objc_destroyWeak(&v18);
  objc_destroyWeak(&v17);

  objc_destroyWeak(&v21);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4DEE8E0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 80));
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4DEE920(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = (id *)(a1 + 40);
  id v8 = a5;
  id v12 = a2;
  id WeakRetained = objc_loadWeakRetained(v7);
  objc_msgSend__handleRecordSaved_error_(WeakRetained, v10, (uint64_t)v12, v8);

  objc_msgSend_addObject_(*(void **)(a1 + 32), v11, (uint64_t)v12);
}

void sub_1C4DEE9A8(void **a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  id v3 = objc_loadWeakRetained(a1 + 6);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (os_log_t *)MEMORY[0x1E4F1A500];
  uint64_t v5 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v31 = v5;
    uint64_t v36 = objc_msgSend_error(v3, v32, v33);
    if (v36) {
      id v37 = @" Error was ";
    }
    else {
      id v37 = &stru_1F2044F30;
    }
    uint64_t v38 = objc_msgSend_error(v3, v34, v35);
    uint64_t v39 = (void *)v38;
    if (v38) {
      uint64_t v40 = (__CFString *)v38;
    }
    else {
      uint64_t v40 = &stru_1F2044F30;
    }
    *(_DWORD *)long long buf = 138543618;
    uint64_t v49 = (uint64_t)v37;
    __int16 v50 = 2112;
    __int16 v51 = v40;
    _os_log_debug_impl(&dword_1C4CFF000, v31, OS_LOG_TYPE_DEBUG, "Done saving all records for (un)share operation.%{public}@%@", buf, 0x16u);
  }
  objc_msgSend_error(v3, v6, v7);
  int v42 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v42)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v8, *MEMORY[0x1E4F19DD8], 1000, @"Unknown error when saving record for web sharing");
    int v42 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v10 = objc_msgSend_recordsToSaveByID(WeakRetained, v8, v9);
  uint64_t v13 = objc_msgSend_allKeys(v10, v11, v12);

  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v43, v47, 16);
  if (v15)
  {
    uint64_t v18 = v15;
    uint64_t v19 = *(void *)v44;
    *(void *)&long long v17 = 138412546;
    long long v41 = v17;
    do
    {
      uint64_t v20 = 0;
      do
      {
        if (*(void *)v44 != v19) {
          objc_enumerationMutation(v13);
        }
        uint64_t v21 = *(void *)(*((void *)&v43 + 1) + 8 * v20);
        if ((objc_msgSend_containsObject_(a1[4], v16, v21, v41) & 1) == 0)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          unint64_t v22 = *v4;
          if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = v41;
            uint64_t v49 = v21;
            __int16 v50 = 2112;
            __int16 v51 = v42;
            _os_log_debug_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_DEBUG, "Record %@ never received a callback when modifying records. Sending that callback now with error %@", buf, 0x16u);
          }
          uint64_t v25 = objc_msgSend_error(v3, v23, v24);
          objc_msgSend__handleRecordSaved_error_(WeakRetained, v26, v21, v25);

          objc_msgSend_addObject_(a1[4], v27, v21);
        }
        ++v20;
      }
      while (v18 != v20);
      uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v43, v47, 16);
    }
    while (v18);
  }

  uint64_t v30 = objc_msgSend_stateTransitionGroup(WeakRetained, v28, v29);
  dispatch_group_leave(v30);
}

void sub_1C4DEFBC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DEFBDC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v9 = objc_msgSend_recordWebSharedBlock(*(void **)(a1 + 32), v7, v8);

  if (v9)
  {
    uint64_t v12 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), v10, v11);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4DEFCCC;
    block[3] = &unk_1E64F0120;
    void block[4] = *(void *)(a1 + 32);
    id v14 = v5;
    id v15 = v6;
    dispatch_async(v12, block);
  }
}

void sub_1C4DEFCCC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_recordWebSharedBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_recordWebSharedBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void, void, void))v7 + 2))(v7, *(void *)(a1 + 40), 0, 0, *(void *)(a1 + 48));
  }
}

void sub_1C4DEFD58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v9 = objc_msgSend_recordWebUnsharedBlock(*(void **)(a1 + 32), v7, v8);

  if (v9)
  {
    uint64_t v12 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), v10, v11);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4DEFE48;
    block[3] = &unk_1E64F0120;
    void block[4] = *(void *)(a1 + 32);
    id v14 = v5;
    id v15 = v6;
    dispatch_async(v12, block);
  }
}

void sub_1C4DEFE48(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_recordWebUnsharedBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_recordWebUnsharedBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1C4DEFECC(uint64_t a1, void *a2)
{
  id v7 = a2;
  uint64_t v5 = objc_msgSend_recordKeysRemoved(v7, v3, v4);
  objc_msgSend_setRecordKeysRemoved_(v7, v6, *(void *)(a1 + 32) + v5);
}

void sub_1C4DF00B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_setUseCachedEtags_(v3, v4, 0);
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_1C4DF0264;
  v19[3] = &unk_1E64F1AD8;
  objc_copyWeak(&v20, &location);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v5, (uint64_t)v19);
  uint64_t v12 = MEMORY[0x1E4F143A8];
  uint64_t v13 = 3221225472;
  id v14 = sub_1C4DF030C;
  id v15 = &unk_1E64F0238;
  objc_copyWeak(&v18, &from);
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 32);
  id v16 = v6;
  uint64_t v17 = v7;
  objc_msgSend_setCompletionBlock_(v3, v8, (uint64_t)&v12);
  uint64_t v11 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v9, v10, v12, v13, v14, v15);
  dispatch_group_enter(v11);

  objc_destroyWeak(&v18);
  objc_destroyWeak(&v20);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4DF022C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 64));
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4DF0264(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend__handleRecordFetched_recordID_error_(WeakRetained, v10, (uint64_t)v9, v8, v7);

  uint64_t v13 = objc_msgSend_fetchedRecordIDs(WeakRetained, v11, v12);
  objc_msgSend_addObject_(v13, v14, (uint64_t)v8);
}

void sub_1C4DF030C(id *a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  int v2 = (os_log_t *)MEMORY[0x1E4F1A500];
  uint64_t v3 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1C4CFF000, v3, OS_LOG_TYPE_DEBUG, "Done fetching all records for web sharing", buf, 2u);
  }
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v7 = objc_msgSend_error(WeakRetained, v5, v6);

  if (!v7)
  {
    id v7 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v8, *MEMORY[0x1E4F19DD8], 1000, @"Couldn't fetch record for web share/unshare.");
  }
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v9 = a1[4];
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v32, v40, 16);
  if (v11)
  {
    uint64_t v15 = v11;
    uint64_t v16 = *(void *)v33;
    *(void *)&long long v14 = 138412546;
    long long v31 = v14;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v33 != v16) {
          objc_enumerationMutation(v9);
        }
        uint64_t v18 = *(void *)(*((void *)&v32 + 1) + 8 * v17);
        uint64_t v19 = objc_msgSend_fetchedRecordIDs(a1[5], v12, v13, v31, (void)v32);
        char v21 = objc_msgSend_containsObject_(v19, v20, v18);

        if ((v21 & 1) == 0)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          unint64_t v22 = *v2;
          if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = v31;
            uint64_t v37 = v18;
            __int16 v38 = 2112;
            uint64_t v39 = v7;
            _os_log_debug_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_DEBUG, "Record %@ was never fetched from the server. Returning error %@", buf, 0x16u);
          }
          objc_msgSend__handleRecordFetched_recordID_error_(a1[5], v23, 0, v18, v7);
          uint64_t v26 = objc_msgSend_fetchedRecordIDs(a1[5], v24, v25);
          objc_msgSend_addObject_(v26, v27, v18);
        }
        ++v17;
      }
      while (v15 != v17);
      uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v32, v40, 16);
    }
    while (v15);
  }

  uint64_t v30 = objc_msgSend_stateTransitionGroup(a1[5], v28, v29);
  dispatch_group_leave(v30);
}

uint64_t sub_1C4DF0AF8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setZoneIDs_, *(void *)(a1 + 32));
}

uint64_t sub_1C4DF1124(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(MEMORY[0x1E4F19F20]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4DF1E4C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_accessWasGrantedBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_accessWasGrantedBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64));
  }
}

void sub_1C4DF1ED4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_accessWasRevokedBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_accessWasRevokedBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1C4DF21E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_setRetryPCSFailures_(v3, v4, 0);
  objc_msgSend_setCanSetPreviousProtectionEtag_(v3, v5, 1);
  objc_msgSend_setTrustProtectionData_(v3, v6, 1);
  id v7 = objc_opt_new();
  objc_initWeak(&location, v3);
  objc_initWeak(&from, *(id *)(a1 + 32));
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_1C4DF23F0;
  v19[3] = &unk_1E64F3398;
  objc_copyWeak(&v21, &from);
  id v8 = v7;
  id v20 = v8;
  objc_msgSend_setSaveCompletionBlock_(v3, v9, (uint64_t)v19);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = sub_1C4DF2478;
  void v15[3] = &unk_1E64F33C0;
  objc_copyWeak(&v17, &from);
  objc_copyWeak(&v18, &location);
  id v10 = v8;
  id v16 = v10;
  objc_msgSend_setCompletionBlock_(v3, v11, (uint64_t)v15);
  long long v14 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v12, v13);
  dispatch_group_enter(v14);

  objc_destroyWeak(&v18);
  objc_destroyWeak(&v17);

  objc_destroyWeak(&v21);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4DF23B0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 80));
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4DF23F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = (id *)(a1 + 40);
  id v8 = a5;
  id v12 = a2;
  id WeakRetained = objc_loadWeakRetained(v7);
  objc_msgSend__handleRecordSaved_error_(WeakRetained, v10, (uint64_t)v12, v8);

  objc_msgSend_addObject_(*(void **)(a1 + 32), v11, (uint64_t)v12);
}

void sub_1C4DF2478(void **a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  id v3 = objc_loadWeakRetained(a1 + 6);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (os_log_t *)MEMORY[0x1E4F1A500];
  uint64_t v5 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    long long v31 = v5;
    uint64_t v36 = objc_msgSend_error(v3, v32, v33);
    if (v36) {
      uint64_t v37 = @" Error was ";
    }
    else {
      uint64_t v37 = &stru_1F2044F30;
    }
    uint64_t v38 = objc_msgSend_error(v3, v34, v35);
    uint64_t v39 = (void *)v38;
    if (v38) {
      uint64_t v40 = (__CFString *)v38;
    }
    else {
      uint64_t v40 = &stru_1F2044F30;
    }
    *(_DWORD *)long long buf = 138543618;
    uint64_t v49 = (uint64_t)v37;
    __int16 v50 = 2112;
    __int16 v51 = v40;
    _os_log_debug_impl(&dword_1C4CFF000, v31, OS_LOG_TYPE_DEBUG, "Done saving all records for record access operation.%{public}@%@", buf, 0x16u);
  }
  objc_msgSend_error(v3, v6, v7);
  int v42 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v42)
  {
    objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v8, *MEMORY[0x1E4F19DD8], 1000, @"Unknown error when saving record for record access");
    int v42 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v10 = objc_msgSend_recordsToSaveByID(WeakRetained, v8, v9);
  uint64_t v13 = objc_msgSend_allKeys(v10, v11, v12);

  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v43, v47, 16);
  if (v15)
  {
    uint64_t v18 = v15;
    uint64_t v19 = *(void *)v44;
    *(void *)&long long v17 = 138412546;
    long long v41 = v17;
    do
    {
      uint64_t v20 = 0;
      do
      {
        if (*(void *)v44 != v19) {
          objc_enumerationMutation(v13);
        }
        uint64_t v21 = *(void *)(*((void *)&v43 + 1) + 8 * v20);
        if ((objc_msgSend_containsObject_(a1[4], v16, v21, v41) & 1) == 0)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          unint64_t v22 = *v4;
          if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = v41;
            uint64_t v49 = v21;
            __int16 v50 = 2112;
            __int16 v51 = v42;
            _os_log_debug_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_DEBUG, "Record %@ never received a callback when modifying records. Sending that callback now with error %@", buf, 0x16u);
          }
          uint64_t v25 = objc_msgSend_error(v3, v23, v24);
          objc_msgSend__handleRecordSaved_error_(WeakRetained, v26, v21, v25);

          objc_msgSend_addObject_(a1[4], v27, v21);
        }
        ++v20;
      }
      while (v18 != v20);
      uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v43, v47, 16);
    }
    while (v18);
  }

  uint64_t v30 = objc_msgSend_stateTransitionGroup(WeakRetained, v28, v29);
  dispatch_group_leave(v30);
}

void sub_1C4DF3834(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4DF3850(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v9 = objc_msgSend_accessWasGrantedBlock(*(void **)(a1 + 32), v7, v8);

  if (v9)
  {
    uint64_t v12 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), v10, v11);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4DF3940;
    block[3] = &unk_1E64F0120;
    void block[4] = *(void *)(a1 + 32);
    id v14 = v5;
    id v15 = v6;
    dispatch_async(v12, block);
  }
}

void sub_1C4DF3940(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_accessWasGrantedBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_accessWasGrantedBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void, void, void))v7 + 2))(v7, *(void *)(a1 + 40), 0, 0, *(void *)(a1 + 48));
  }
}

void sub_1C4DF39CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v9 = objc_msgSend_accessWasRevokedBlock(*(void **)(a1 + 32), v7, v8);

  if (v9)
  {
    uint64_t v12 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), v10, v11);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4DF3ABC;
    block[3] = &unk_1E64F0120;
    void block[4] = *(void *)(a1 + 32);
    id v14 = v5;
    id v15 = v6;
    dispatch_async(v12, block);
  }
}

void sub_1C4DF3ABC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_accessWasRevokedBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_accessWasRevokedBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1C4DF3B40(uint64_t a1, void *a2)
{
  id v7 = a2;
  uint64_t v5 = objc_msgSend_recordKeysRemoved(v7, v3, v4);
  objc_msgSend_setRecordKeysRemoved_(v7, v6, *(void *)(a1 + 32) + v5);
}

void sub_1C4DF3D2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_setForcePCSDecrypt_(v3, v4, 1);
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_1C4DF3ED8;
  v19[3] = &unk_1E64F1AD8;
  objc_copyWeak(&v20, &location);
  objc_msgSend_setRecordFetchCompletionBlock_(v3, v5, (uint64_t)v19);
  uint64_t v12 = MEMORY[0x1E4F143A8];
  uint64_t v13 = 3221225472;
  id v14 = sub_1C4DF3F80;
  id v15 = &unk_1E64F0238;
  objc_copyWeak(&v18, &from);
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 32);
  id v16 = v6;
  uint64_t v17 = v7;
  objc_msgSend_setCompletionBlock_(v3, v8, (uint64_t)&v12);
  uint64_t v11 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v9, v10, v12, v13, v14, v15);
  dispatch_group_enter(v11);

  objc_destroyWeak(&v18);
  objc_destroyWeak(&v20);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4DF3EA0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 64));
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1C4DF3ED8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend__handleRecordFetched_recordID_error_(WeakRetained, v10, (uint64_t)v9, v8, v7);

  uint64_t v13 = objc_msgSend_fetchedRecordIDs(WeakRetained, v11, v12);
  objc_msgSend_addObject_(v13, v14, (uint64_t)v8);
}

void sub_1C4DF3F80(id *a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  int v2 = (os_log_t *)MEMORY[0x1E4F1A500];
  uint64_t v3 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1C4CFF000, v3, OS_LOG_TYPE_DEBUG, "Done fetching all records for web access", buf, 2u);
  }
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v7 = objc_msgSend_error(WeakRetained, v5, v6);

  if (!v7)
  {
    id v7 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v8, *MEMORY[0x1E4F19DD8], 1000, @"Couldn't fetch record for web access grant/revoke.");
  }
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v9 = a1[4];
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v32, v40, 16);
  if (v11)
  {
    uint64_t v15 = v11;
    uint64_t v16 = *(void *)v33;
    *(void *)&long long v14 = 138412546;
    long long v31 = v14;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v33 != v16) {
          objc_enumerationMutation(v9);
        }
        uint64_t v18 = *(void *)(*((void *)&v32 + 1) + 8 * v17);
        uint64_t v19 = objc_msgSend_fetchedRecordIDs(a1[5], v12, v13, v31, (void)v32);
        char v21 = objc_msgSend_containsObject_(v19, v20, v18);

        if ((v21 & 1) == 0)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          unint64_t v22 = *v2;
          if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = v31;
            uint64_t v37 = v18;
            __int16 v38 = 2112;
            uint64_t v39 = v7;
            _os_log_debug_impl(&dword_1C4CFF000, v22, OS_LOG_TYPE_DEBUG, "Record %@ was never fetched from the server. Returning error %@", buf, 0x16u);
          }
          objc_msgSend__handleRecordFetched_recordID_error_(a1[5], v23, 0, v18, v7);
          uint64_t v26 = objc_msgSend_fetchedRecordIDs(a1[5], v24, v25);
          objc_msgSend_addObject_(v26, v27, v18);
        }
        ++v17;
      }
      while (v15 != v17);
      uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v32, v40, 16);
    }
    while (v15);
  }

  uint64_t v30 = objc_msgSend_stateTransitionGroup(a1[5], v28, v29);
  dispatch_group_leave(v30);
}

uint64_t sub_1C4DF46C4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setZoneIDs_, *(void *)(a1 + 32));
}

uint64_t sub_1C4DF4AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = v24;
      }
      else
      {
        if (v17 == 2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          while (1)
          {
            uint64_t v28 = *v3;
            unint64_t v29 = *(void *)(a2 + v28);
            if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v2_Block_object_dispose(&STACK[0x220], 8) = v29 + 1;
            v20 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0) {
              goto LABEL_43;
            }
            v26 += 7;
            BOOL v14 = v27++ >= 9;
            if (v14)
            {
              uint64_t v20 = 0;
              goto LABEL_45;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v20 = 0;
          }
LABEL_45:
          uint64_t v32 = 16;
        }
        else
        {
          if (v17 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (1)
          {
            uint64_t v21 = *v3;
            unint64_t v22 = *(void *)(a2 + v21);
            if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0) {
              goto LABEL_39;
            }
            v18 += 7;
            BOOL v14 = v19++ >= 9;
            if (v14)
            {
              uint64_t v20 = 0;
              goto LABEL_41;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v20 = 0;
          }
LABEL_41:
          uint64_t v32 = 8;
        }
        *(void *)(a1 + v32) = v20;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4DF5268()
{
  id v0 = (void *)qword_1EBBCDD18;
  qword_1EBBCDD18 = (uint64_t)&unk_1F20ABB50;
}

BOOL sub_1C4DF5490(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(CKDPZone);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark() && sub_1C4E22544((uint64_t)v17, a2)) {
          goto LABEL_29;
        }
        goto LABEL_34;
      case 3u:
        uint64_t v18 = PBReaderReadString();
        unint64_t v17 = *(CKDPZone **)(a1 + 32);
        *(void *)(a1 + 32) = v18;
        goto LABEL_30;
      case 4u:
        unint64_t v17 = objc_alloc_init(CKDPAncestryEtag);
        uint64_t v19 = 8;
        goto LABEL_27;
      case 5u:
        unint64_t v17 = objc_alloc_init(CKDPAncestryEtag);
        uint64_t v19 = 16;
LABEL_27:
        objc_storeStrong((id *)(a1 + v19), v17);
        if PBReaderPlaceMark() && (sub_1C4DA97F4((uint64_t)v17, a2))
        {
LABEL_29:
          PBReaderRecallMark();
LABEL_30:

LABEL_31:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_34:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_31;
    }
  }
}

uint64_t sub_1C4DF5DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(MEMORY[0x1E4F19F30]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPRecordZoneIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4DF6328(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(CKDPConfigurationFieldValue **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = objc_alloc_init(CKDPConfigurationFieldValue);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || (sub_1C4F70C24((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4DF6B68(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_setOnlyFetchPCSInfo_(v3, v4, 1);
  objc_initWeak(&location, *(id *)(a1 + 32));
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = sub_1C4DF6C64;
  void v8[3] = &unk_1E64F3410;
  objc_copyWeak(&v9, &location);
  objc_msgSend_setRecordZoneFetchedProgressBlock_(v3, v5, (uint64_t)v8);
  (*(void (**)(void, id, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v3, v6, v7);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

void sub_1C4DF6C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4DF6C64(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend_performCallbacksForItemWithID_withItem_error_(WeakRetained, v10, (uint64_t)v8, v9, v7);
}

void sub_1C4DF7038(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_discoverUserIdentitiesProgressBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_discoverUserIdentitiesProgressBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1C4DF72BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v24 - 88));
  _Unwind_Resume(a1);
}

void sub_1C4DF72FC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v14 = a2;
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unint64_t v12 = objc_msgSend_error(WeakRetained, v10, v11);

  if (!v12) {
    objc_msgSend__handleDiscoveredIdentity_lookupInfo_responseCode_(WeakRetained, v13, (uint64_t)v7, v14, v8);
  }
}

void sub_1C4DF73A0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = objc_msgSend_error(WeakRetained, v2, v3);

  uint64_t v7 = *(void *)(a1 + 32);
  if (v4)
  {
    id v8 = objc_msgSend_error(WeakRetained, v5, v6);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    id v8 = objc_loadWeakRetained((id *)(a1 + 48));
    uint64_t v11 = objc_msgSend_error(v8, v9, v10);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v11);
  }
}

uint64_t sub_1C4DF74F0(uint64_t a1, const char *a2)
{
  return objc_msgSend_finishWithError_(*(void **)(a1 + 32), a2, (uint64_t)a2);
}

uint64_t sub_1C4DF7738(uint64_t a1, const char *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = (uint64_t)a2;
LABEL_3:
    return objc_msgSend_finishWithError_(v4, a2, v5);
  }
  uint64_t v7 = objc_msgSend_count(*(void **)(a1 + 40), 0, a3);
  uint64_t v4 = *(void **)(a1 + 32);
  if (!v7)
  {
    uint64_t v5 = 0;
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  return objc_msgSend__discoverIdentitiesBatched_(v4, a2, v8);
}

void sub_1C4DF7BA8(uint64_t a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v6 = objc_msgSend_emailAddresses(v3, v4, v5);
  uint64_t v8 = objc_msgSend_CKMap_(v6, v7, (uint64_t)&unk_1F20431D0);

  uint64_t v11 = objc_msgSend_phoneNumbers(v3, v9, v10);
  uint64_t v13 = objc_msgSend_CKMap_(v11, v12, (uint64_t)&unk_1F20431F0);

  uint64_t v36 = (void *)v13;
  int v15 = objc_msgSend_arrayByAddingObjectsFromArray_(v8, v14, v13);
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v37, v41, 16);
  if (v17)
  {
    uint64_t v19 = v17;
    uint64_t v20 = *(void *)v38;
    do
    {
      for (uint64_t i = 0; i != v19; ++i)
      {
        if (*(void *)v38 != v20) {
          objc_enumerationMutation(v15);
        }
        uint64_t v22 = *(void *)(*((void *)&v37 + 1) + 8 * i);
        objc_msgSend_addObject_(*(void **)(a1 + 32), v18, v22);
        uint64_t v25 = objc_msgSend_contactIdentifiersByLookupInfo(*(void **)(a1 + 40), v23, v24);
        unsigned int v27 = objc_msgSend_objectForKeyedSubscript_(v25, v26, v22);

        if (!v27)
        {
          unsigned int v27 = objc_opt_new();
          uint64_t v32 = objc_msgSend_contactIdentifiersByLookupInfo(*(void **)(a1 + 40), v30, v31);
          objc_msgSend_setObject_forKeyedSubscript_(v32, v33, (uint64_t)v27, v22);
        }
        long long v34 = objc_msgSend_identifier(v3, v28, v29);
        objc_msgSend_addObject_(v27, v35, (uint64_t)v34);
      }
      uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v18, (uint64_t)&v37, v41, 16);
    }
    while (v19);
  }
}

id sub_1C4DF7DA0(uint64_t a1, void *a2)
{
  int v2 = (objc_class *)MEMORY[0x1E4F1A488];
  id v3 = a2;
  id v4 = [v2 alloc];
  uint64_t v7 = objc_msgSend_value(v3, v5, v6);

  id v9 = objc_msgSend_initWithEmailAddress_(v4, v8, (uint64_t)v7);
  objc_msgSend_setShouldReportMissingIdentity_(v9, v10, 0);
  return v9;
}

id sub_1C4DF7E28(uint64_t a1, void *a2, uint64_t a3)
{
  id v3 = objc_msgSend_value(a2, (const char *)a2, a3);
  uint64_t v6 = objc_msgSend_stringValue(v3, v4, v5);
  uint64_t v7 = sub_1C4FC459C(v6);

  id v8 = objc_alloc(MEMORY[0x1E4F1A488]);
  uint64_t v10 = objc_msgSend_initWithPhoneNumber_(v8, v9, (uint64_t)v7);
  objc_msgSend_setShouldReportMissingIdentity_(v10, v11, 0);

  return v10;
}

void sub_1C4DF8238(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_discoverUserIdentitiesProgressBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_discoverUserIdentitiesProgressBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v7 + 2))(v7, 0, *(void *)(a1 + 40));
  }
}

void sub_1C4DF8598(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v18 = v4;
    id v7 = objc_msgSend_c2MetricsEndpoint(a1, v5, v6);

    if (!v7)
    {
      uint64_t v10 = objc_msgSend_baseURLForServerType_partitionType_(v18, v8, 4, 1);
      objc_msgSend_setC2MetricsEndpoint_(a1, v11, (uint64_t)v10);

      objc_msgSend_setAnonymous_(a1, v12, 0);
    }
    uint64_t v13 = objc_msgSend_c2MetricsEndpoint(a1, v8, v9);

    id v4 = v18;
    if (!v13)
    {
      int v15 = objc_msgSend_baseURLForServerType_partitionType_(v18, v14, 4, 2);
      objc_msgSend_setC2MetricsEndpoint_(a1, v16, (uint64_t)v15);

      objc_msgSend_setAnonymous_(a1, v17, 1);
      id v4 = v18;
    }
  }
}

void sub_1C4DF867C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  objc_msgSend_containerID(v7, v8, v9);
  id v45 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__setupC2MetricsEndpointWithContainer_(a1, v10, (uint64_t)v7);
  uint64_t v13 = objc_msgSend_applicationVersion(v7, v11, v12);
  objc_msgSend_setClientProcessVersion_(a1, v14, (uint64_t)v13);

  uint64_t v17 = objc_msgSend_applicationBundleIdentifierForContainerAccess(v7, v15, v16);
  objc_msgSend_setClientProcessBundleId_(a1, v18, (uint64_t)v17);

  uint64_t v21 = objc_msgSend_containerID(v7, v19, v20);
  uint64_t v24 = objc_msgSend_containerIdentifier(v21, v22, v23);
  objc_msgSend_setContainer_(a1, v25, (uint64_t)v24);

  uint64_t v28 = objc_msgSend_containerID(v7, v26, v27);

  objc_msgSend_environment(v28, v29, v30);
  uint64_t v31 = CKContainerEnvironmentString();
  objc_msgSend_setEnvironment_(a1, v32, (uint64_t)v31);

  uint64_t v34 = objc_msgSend_c2AllOperationMetricsReportFrequency_(v6, v33, (uint64_t)v45);
  objc_msgSend_setReportClientOperationFrequency_(a1, v35, v34);
  uint64_t v37 = objc_msgSend_c2AllOperationMetricsReportFrequencyBase_(v6, v36, (uint64_t)v45);
  objc_msgSend_setReportClientOperationFrequencyBase_(a1, v38, v37);
  uint64_t v40 = objc_msgSend_c2AllOperationGroupMetricsReportFrequency_(v6, v39, (uint64_t)v45);
  objc_msgSend_setReportOperationGroupFrequency_(a1, v41, v40);
  uint64_t v43 = objc_msgSend_c2AllOperationGroupMetricsReportFrequencyBase_(v6, v42, (uint64_t)v45);

  objc_msgSend_setReportOperationGroupFrequencyBase_(a1, v44, v43);
}

id sub_1C4DF8808(uint64_t a1, uint64_t a2, void *a3)
{
  v88[1] = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v6 = objc_msgSend_container(v3, v4, v5);
  uint64_t v9 = objc_msgSend_serverConfig(v6, v7, v8);
  uint64_t v12 = objc_msgSend_containerID(v6, v10, v11);
  id v13 = objc_alloc_init(MEMORY[0x1E4F50D50]);
  objc_msgSend__attributeCurrentContainer_config_(v13, v14, (uint64_t)v6, v9);
  int v17 = objc_msgSend_preferAnonymousRequests(v3, v15, v16);
  unsigned int v20 = objc_msgSend_anonymous(v13, v18, v19);
  objc_msgSend_setAnonymous_(v13, v21, v17 | v20);
  if ((objc_msgSend_anonymous(v13, v22, v23) & 1) == 0)
  {
    char v26 = objc_msgSend_container(v3, v24, v25);
    uint64_t v29 = objc_msgSend_containerScopedUserID(v26, v27, v28);
    objc_msgSend_setContainerScopedUserIdentifier_(v13, v30, (uint64_t)v29);

    uint64_t v33 = objc_msgSend_containerScopedUserIdentifier(v13, v31, v32);
    if (v33)
    {
      uint64_t v34 = (void *)v33;
      long long v35 = objc_msgSend_containerScopedUserIdentifier(v13, v24, v25);
      uint64_t v38 = objc_msgSend_length(v35, v36, v37);

      if (v38)
      {
        long long v39 = objc_msgSend_container(v3, v24, v25);
        uint64_t v42 = objc_msgSend_deviceID(v39, v40, v41);
        objc_msgSend_setContainerScopedDeviceIdentifier_(v13, v43, (uint64_t)v42);
      }
    }
  }
  long long v44 = objc_msgSend_applicationBundleIdentifierForContainerAccess(v3, v24, v25);
  objc_msgSend_setApplicationBundleIdentifierOverrideForContainerAccess_(v13, v45, (uint64_t)v44);

  __int16 v48 = objc_msgSend_applicationBundleIdentifierForNetworkAttribution(v3, v46, v47);
  objc_msgSend_setApplicationBundleIdentifierOverrideForNetworkAttribution_(v13, v49, (uint64_t)v48);

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_msgSend_databaseScope(v3, v50, v51);
    uint64_t v52 = CKDatabaseScopeString();
    objc_msgSend_setDatabaseScope_(v13, v53, (uint64_t)v52);
  }
  uint64_t v54 = objc_msgSend_c2NetworkMetricsReportFrequency_(v9, v50, (uint64_t)v12);
  objc_msgSend_setReportFrequency_(v13, v55, v54);
  uint64_t v57 = objc_msgSend_c2NetworkMetricsReportFrequencyBase_(v9, v56, (uint64_t)v12);
  objc_msgSend_setReportFrequencyBase_(v13, v58, v57);
  BOOL v61 = objc_msgSend_topmostParentOperation(v3, v59, v60);
  if (v61)
  {
    id v62 = objc_alloc_init(MEMORY[0x1E4F50D40]);
    uint64_t v65 = objc_msgSend_operationGroupID(v61, v63, v64);
    objc_msgSend_setOperationGroupId_(v62, v66, (uint64_t)v65);

    uint64_t v69 = objc_msgSend_operationGroupName(v61, v67, v68);
    objc_msgSend_setOperationGroupName_(v62, v70, (uint64_t)v69);

    if (v62)
    {
      v88[0] = v62;
      uint64_t v72 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v71, (uint64_t)v88, 1);
      objc_msgSend_setOperationGroups_(v13, v73, (uint64_t)v72);
    }
    id v74 = objc_alloc_init(MEMORY[0x1E4F50D48]);
    id v77 = objc_msgSend_operationID(v61, v75, v76);
    objc_msgSend_setOperationId_(v74, v78, (uint64_t)v77);

    long long v79 = (objc_class *)objc_opt_class();
    long long v80 = NSStringFromClass(v79);
    objc_msgSend_setOperationType_(v74, v81, (uint64_t)v80);

    if (v74)
    {
      objc_msgSend_setOperationGroup_(v74, v82, (uint64_t)v62);
      id v87 = v74;
      int v84 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v83, (uint64_t)&v87, 1);
      objc_msgSend_setClientOperations_(v13, v85, (uint64_t)v84);
    }
  }

  return v13;
}

id sub_1C4DF8B90(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v7 = objc_msgSend_operation(v4, v5, v6);
  uint64_t v9 = objc_msgSend_metricOptionsForNetworkOperation_(a1, v8, (uint64_t)v7);
  int v12 = objc_msgSend_sendRequestAnonymously(v4, v10, v11);

  unsigned int v15 = objc_msgSend_anonymous(v9, v13, v14);
  objc_msgSend_setAnonymous_(v9, v16, v12 | v15);
  if (objc_msgSend_anonymous(v9, v17, v18))
  {
    objc_msgSend_setContainerScopedUserIdentifier_(v9, v19, 0);
    objc_msgSend_setContainerScopedDeviceIdentifier_(v9, v20, 0);
  }

  return v9;
}

id sub_1C4DF8C40(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  id v11 = a3;
  id v12 = a5;
  id v13 = a6;
  id v14 = a7;
  int v17 = objc_msgSend_containerID(v12, v15, v16);
  id v18 = objc_alloc_init(MEMORY[0x1E4F50D50]);
  uint64_t isPushTriggerFired = objc_msgSend_isPushTriggerFired(v11, v19, v20);
  objc_msgSend_setPushTrigger_(v18, v22, isPushTriggerFired);
  objc_msgSend__attributeCurrentContainer_config_(v18, v23, (uint64_t)v12, v13);
  if (objc_msgSend_preferAnonymousRequests(v11, v24, v25)) {
    int v28 = 1;
  }
  else {
    int v28 = objc_msgSend_preferAnonymousRequests(v12, v26, v27);
  }
  unsigned int v29 = objc_msgSend_anonymous(v18, v26, v27);
  objc_msgSend_setAnonymous_(v18, v30, v28 | v29);
  if ((objc_msgSend_anonymous(v18, v31, v32) & 1) == 0)
  {
    long long v35 = objc_msgSend_containerScopedUserID(v12, v33, v34);
    objc_msgSend_setContainerScopedUserIdentifier_(v18, v36, (uint64_t)v35);

    uint64_t v39 = objc_msgSend_containerScopedUserIdentifier(v18, v37, v38);
    if (v39)
    {
      uint64_t v40 = (void *)v39;
      uint64_t v41 = objc_msgSend_containerScopedUserIdentifier(v18, v33, v34);
      uint64_t v44 = objc_msgSend_length(v41, v42, v43);

      if (v44)
      {
        id v45 = objc_msgSend_deviceIdentifier(v11, v33, v34);
        objc_msgSend_setContainerScopedDeviceIdentifier_(v18, v46, (uint64_t)v45);

        uint64_t v49 = objc_msgSend_containerScopedDeviceIdentifier(v18, v47, v48);
        if (!v49
          || (__int16 v50 = (void *)v49,
              objc_msgSend_containerScopedDeviceIdentifier(v18, v33, v34),
              uint64_t v51 = objc_claimAutoreleasedReturnValue(),
              uint64_t v54 = objc_msgSend_length(v51, v52, v53),
              v51,
              v50,
              !v54))
        {
          uint64_t v55 = objc_msgSend_sharedManager(CKDDeviceIDManager, v33, v34);
          uint64_t v57 = objc_msgSend_deviceIdentifierForContainer_(v55, v56, (uint64_t)v12);
          objc_msgSend_setContainerScopedDeviceIdentifier_(v18, v58, (uint64_t)v57);
        }
      }
    }
  }
  uint64_t v59 = objc_msgSend_applicationBundleIdentifierOverrideForContainerAccess(v11, v33, v34);
  objc_msgSend_setApplicationBundleIdentifierOverrideForContainerAccess_(v18, v60, (uint64_t)v59);

  uint64_t v63 = objc_msgSend_applicationBundleIdentifierOverrideForNetworkAttribution(v11, v61, v62);
  objc_msgSend_setApplicationBundleIdentifierOverrideForNetworkAttribution_(v18, v64, (uint64_t)v63);

  objc_msgSend_databaseScope(v11, v65, v66);
  uint64_t v67 = CKDatabaseScopeString();
  objc_msgSend_setDatabaseScope_(v18, v68, (uint64_t)v67);

  if (a4 == 2)
  {
    uint64_t v75 = objc_msgSend_c2ClientApplicationMetricsReportFrequency_(v13, v69, (uint64_t)v17);
    objc_msgSend_setReportFrequency_(v18, v76, v75);
    uint64_t v73 = objc_msgSend_c2ClientApplicationMetricsReportFrequencyBase_(v13, v77, (uint64_t)v17);
    goto LABEL_14;
  }
  if (a4 == 1)
  {
    uint64_t v70 = objc_msgSend_c2ClientOperationMetricsReportFrequency_(v13, v69, (uint64_t)v17);
    objc_msgSend_setReportFrequency_(v18, v71, v70);
    uint64_t v73 = objc_msgSend_c2ClientOperationMetricsReportFrequencyBase_(v13, v72, (uint64_t)v17);
LABEL_14:
    objc_msgSend_setReportFrequencyBase_(v18, v74, v73);
    goto LABEL_19;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v78 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C4CFF000, v78, OS_LOG_TYPE_ERROR, "Unsupported Event Metric Type. Unable to assign report frequency.", buf, 2u);
  }
LABEL_19:
  id v79 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v82 = objc_msgSend_associatedOperationGroups(v11, v80, v81);
  v117[0] = MEMORY[0x1E4F143A8];
  v117[1] = 3221225472;
  v117[2] = sub_1C4DF9234;
  v117[3] = &unk_1E64F34D0;
  id v83 = v79;
  id v118 = v83;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v82, v84, (uint64_t)v117);

  id v87 = objc_msgSend_allValues(v83, v85, v86);
  objc_msgSend_setOperationGroups_(v18, v88, (uint64_t)v87);

  id v91 = objc_msgSend_associatedOperations(v11, v89, v90);
  v115[0] = MEMORY[0x1E4F143A8];
  v115[1] = 3221225472;
  v115[2] = sub_1C4DF9300;
  v115[3] = &unk_1E64F34F8;
  id v92 = v83;
  id v116 = v92;
  id v94 = objc_msgSend_CKMap_(v91, v93, (uint64_t)v115);
  objc_msgSend_setClientOperations_(v18, v95, (uint64_t)v94);

  uint64_t v109 = MEMORY[0x1E4F143A8];
  uint64_t v110 = 3221225472;
  __int16 v111 = sub_1C4DF9504;
  __int16 v112 = &unk_1E64F2590;
  id v96 = v11;
  id v113 = v96;
  id v97 = v14;
  id v114 = v97;
  objc_msgSend_setDidCompleteWithError_(v18, v98, (uint64_t)&v109);
  id v101 = objc_msgSend_didCompleteWithError(v18, v99, v100, v109, v110, v111, v112);

  if (v101)
  {
    id v102 = v18;
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v103 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      __int16 v104 = v103;
      uint64_t v107 = objc_msgSend_metricUUID(v96, v105, v106);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v120 = v107;
      _os_log_impl(&dword_1C4CFF000, v104, OS_LOG_TYPE_INFO, "Failed to create CKEventMetric %@ didCompleteWithError callback.", buf, 0xCu);
    }
    id v102 = 0;
  }

  return v102;
}

void sub_1C4DF9234(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (objc_class *)MEMORY[0x1E4F50D40];
  id v5 = a3;
  id v19 = objc_alloc_init(v4);
  uint64_t v8 = objc_msgSend_operationGroupID(v5, v6, v7);
  objc_msgSend_setOperationGroupId_(v19, v9, (uint64_t)v8);

  id v12 = objc_msgSend_operationGroupName(v5, v10, v11);
  objc_msgSend_setOperationGroupName_(v19, v13, (uint64_t)v12);

  id v14 = *(void **)(a1 + 32);
  int v17 = objc_msgSend_operationGroupID(v5, v15, v16);

  objc_msgSend_setObject_forKeyedSubscript_(v14, v18, (uint64_t)v19, v17);
}

id sub_1C4DF9300(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = objc_alloc_init(MEMORY[0x1E4F50D48]);
  uint64_t v8 = objc_msgSend_operationID(v4, v6, v7);
  objc_msgSend_setOperationId_(v5, v9, (uint64_t)v8);

  id v12 = objc_msgSend_operationType(v4, v10, v11);
  objc_msgSend_setOperationType_(v5, v13, (uint64_t)v12);

  id v14 = *(void **)(a1 + 32);
  int v17 = objc_msgSend_operationGroupID(v4, v15, v16);
  id v19 = objc_msgSend_objectForKeyedSubscript_(v14, v18, (uint64_t)v17);
  objc_msgSend_setOperationGroup_(v5, v20, (uint64_t)v19);

  uint64_t v23 = objc_msgSend_operationGroupID(v4, v21, v22);
  if (v23)
  {
    char v26 = (void *)v23;
    uint64_t v27 = objc_msgSend_operationGroup(v5, v24, v25);

    if (!v27)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      int v28 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = v28;
        uint64_t v33 = objc_msgSend_operationID(v4, v31, v32);
        uint64_t v36 = objc_msgSend_operationGroupID(v4, v34, v35);
        int v37 = 138412546;
        uint64_t v38 = v33;
        __int16 v39 = 2112;
        uint64_t v40 = v36;
        _os_log_error_impl(&dword_1C4CFF000, v30, OS_LOG_TYPE_ERROR, "Operation Group Not Found, Unable to associate operation %@ with operation group %@.", (uint8_t *)&v37, 0x16u);
      }
    }
  }

  return v5;
}

void sub_1C4DF9504(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = v4;
    uint64_t v9 = objc_msgSend_metricUUID(v5, v7, v8);
    int v11 = 138412546;
    id v12 = v9;
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_impl(&dword_1C4CFF000, v6, OS_LOG_TYPE_INFO, "CKEventMetric %@ didCompleteWithError %@", (uint8_t *)&v11, 0x16u);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1C4DF9B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4DF9B4C(uint64_t a1, void *a2)
{
  id v7 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v7) {
      objc_msgSend_setError_(WeakRetained, v3, (uint64_t)v7);
    }
    uint64_t v6 = objc_msgSend_stateTransitionGroup(WeakRetained, v3, v4);
    dispatch_group_leave(v6);
  }
}

void sub_1C4DF9C88(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C4DF9CA4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v15 = WeakRetained;
    uint64_t v4 = objc_msgSend_pendingDeltaUploads(WeakRetained, v2, v3);
    objc_msgSend_removeAllObjects(v4, v5, v6);

    uint64_t v9 = objc_msgSend_pendingReplacementRequests(v15, v7, v8);
    objc_msgSend_removeAllObjects(v9, v10, v11);

    id v14 = objc_msgSend_stateTransitionGroup(v15, v12, v13);
    dispatch_group_leave(v14);

    id WeakRetained = v15;
  }
}

void sub_1C4DFA5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,id location,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  objc_destroyWeak(v68);
  objc_destroyWeak(v67);
  objc_destroyWeak(&location);
  objc_destroyWeak(v66);
  objc_destroyWeak(v65);
  objc_destroyWeak(&a65);
  _Unwind_Resume(a1);
}

void sub_1C4DFA620(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend_handleDeltaUploaded_result_(WeakRetained, v7, (uint64_t)v6, v5);
}

void sub_1C4DFA698(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend_handleReplaceDeltasRequest_result_(WeakRetained, v7, (uint64_t)v6, v5);
}

void sub_1C4DFA710(id *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  id v3 = objc_loadWeakRetained(a1 + 6);
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v4 = (void *)*MEMORY[0x1E4F1A510];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A510], OS_LOG_TYPE_INFO))
  {
    id v7 = v4;
    uint64_t v8 = (objc_class *)objc_opt_class();
    uint64_t v9 = NSStringFromClass(v8);
    id v12 = objc_msgSend_ckShortDescription(WeakRetained, v10, v11);
    *(_DWORD *)long long buf = 138544130;
    id v19 = v9;
    __int16 v20 = 2048;
    id v21 = WeakRetained;
    __int16 v22 = 2114;
    uint64_t v23 = v12;
    __int16 v24 = 2112;
    id v25 = v3;
    _os_log_impl(&dword_1C4CFF000, v7, OS_LOG_TYPE_INFO, "Delta upload request completed for operation <%{public}@: %p; %{public}@> request: %@",
      buf,
      0x2Au);
  }
  if (WeakRetained)
  {
    uint64_t v13 = objc_msgSend_callbackQueue(WeakRetained, v5, v6);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4DFA8FC;
    block[3] = &unk_1E64F0FA0;
    id v15 = v3;
    id v16 = WeakRetained;
    id v17 = a1[4];
    dispatch_async(v13, block);
  }
}

uint64_t sub_1C4DFA8FC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_error(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    id v7 = objc_msgSend_error(*(void **)(a1 + 32), v5, v6);
    objc_msgSend_setError_(*(void **)(a1 + 40), v8, (uint64_t)v7);

    uint64_t v9 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return v9();
  }
  else
  {
    uint64_t v11 = *(void **)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 48);
    return objc_msgSend__uploadAndReplaceDeltas_(v11, v5, v12);
  }
}

id sub_1C4DFB038()
{
  if (qword_1EBBCFC08 != -1) {
    dispatch_once(&qword_1EBBCFC08, &unk_1F2043210);
  }
  id v0 = (void *)qword_1EBBCFC00;
  return v0;
}

void sub_1C4DFB08C()
{
  id v0 = (void *)MEMORY[0x1E4F28B50];
  uint64_t v1 = objc_opt_class();
  objc_msgSend_bundleForClass_(v0, v2, v1);
  id v17 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = objc_msgSend_infoDictionary(v17, v3, v4);
  objc_msgSend_objectForKeyedSubscript_(v5, v6, @"CFBundleVersion");
  id v7 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend_length(v7, v8, v9))
  {

    id v7 = @"1.0";
  }
  uint64_t v11 = (void *)_CFCopyServerVersionDictionary();
  if (!v11) {
    uint64_t v11 = (void *)_CFCopySystemVersionDictionary();
  }
  uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v11, v10, *MEMORY[0x1E4F1CD10]);
  id v13 = [NSString alloc];
  uint64_t v15 = objc_msgSend_initWithFormat_(v13, v14, @"CloudKit/%@ (%@)", v7, v12);
  id v16 = (void *)qword_1EBBCFC00;
  qword_1EBBCFC00 = v15;

  if (v11) {
    CFRelease(v11);
  }
}

id sub_1C4DFB1A0()
{
  if (qword_1EBBCFC18 != -1) {
    dispatch_once(&qword_1EBBCFC18, &unk_1F2043230);
  }
  id v0 = (void *)qword_1EBBCFC10;
  return v0;
}

void sub_1C4DFB1F4()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  CKProductType();
  uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v1) {
    uint64_t v1 = @"UNKNOWN";
  }
  uint64_t v65 = v1;
  BOOL v61 = v0;
  objc_msgSend_appendFormat_(v0, v2, @"<%@>", v1);
  id v5 = objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], v3, v4);
  uint64_t v8 = objc_msgSend_productName(v5, v6, v7);

  uint64_t v11 = objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], v9, v10);
  objc_msgSend_productVersion(v11, v12, v13);
  id v14 = (__CFString *)objc_claimAutoreleasedReturnValue();

  id v17 = objc_msgSend_sharedOptions(MEMORY[0x1E4F19E98], v15, v16);
  uint64_t v20 = objc_msgSend_buildVersion(v17, v18, v19);

  uint64_t v64 = (void *)v8;
  if (v8) {
    __int16 v22 = (__CFString *)v8;
  }
  else {
    __int16 v22 = @"UNKNOWN";
  }
  if (v14) {
    uint64_t v23 = v14;
  }
  else {
    uint64_t v23 = @"UNKNOWN";
  }
  uint64_t v63 = (void *)v20;
  if (v20) {
    __int16 v24 = (__CFString *)v20;
  }
  else {
    __int16 v24 = @"UNKNOWN";
  }
  objc_msgSend_appendFormat_(v0, v21, @" <%@;%@;%@>", v22, v23, v24);
  id v25 = (void *)MEMORY[0x1E4F28B50];
  uint64_t v26 = objc_opt_class();
  uint64_t v62 = objc_msgSend_bundleForClass_(v25, v27, v26);
  uint64_t v30 = objc_msgSend_infoDictionary(v62, v28, v29);
  uint64_t v31 = *MEMORY[0x1E4F1CFF8];
  objc_msgSend_objectForKeyedSubscript_(v30, v32, *MEMORY[0x1E4F1CFF8]);
  uint64_t v33 = (__CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v34 = *MEMORY[0x1E4F1CC70];
  objc_msgSend_objectForKeyedSubscript_(v30, v35, *MEMORY[0x1E4F1CC70]);
  uint64_t v36 = (__CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v60 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v37, v38);
  uint64_t v41 = objc_msgSend_infoDictionary(v60, v39, v40);
  objc_msgSend_objectForKeyedSubscript_(v41, v42, v31);
  uint64_t v43 = (__CFString *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v41, v44, v34);
  id v45 = (__CFString *)objc_claimAutoreleasedReturnValue();
  __int16 v50 = @"UNKNOWN";
  if (objc_msgSend_length(v33, v46, v47)) {
    uint64_t v51 = v33;
  }
  else {
    uint64_t v51 = @"UNKNOWN";
  }
  if (objc_msgSend_length(v36, v48, v49)) {
    uint64_t v54 = v36;
  }
  else {
    uint64_t v54 = @"1.0";
  }
  if (objc_msgSend_length(v43, v52, v53)) {
    __int16 v50 = v43;
  }
  if (objc_msgSend_length(v45, v55, v56)) {
    uint64_t v58 = v45;
  }
  else {
    uint64_t v58 = @"1.0";
  }
  objc_msgSend_appendFormat_(v61, v57, @" <%@/%@ (%@/%@)>", v51, v54, v50, v58);
  uint64_t v59 = (void *)qword_1EBBCFC10;
  qword_1EBBCFC10 = (uint64_t)v61;
}

void sub_1C4DFC6C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v10 = (id)objc_opt_new();
  objc_msgSend_setHeaderKey_(v10, v7, (uint64_t)v6);

  objc_msgSend_setHeaderValue_(v10, v8, (uint64_t)v5);
  objc_msgSend_addContentRequestHeaders_(*(void **)(a1 + 32), v9, (uint64_t)v10);
}

void sub_1C4DFE970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4DFE9A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4DFE9B8(uint64_t a1)
{
}

void sub_1C4DFE9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (a2)
  {
    id v5 = (const void *)PCSFPCopyCurrentPrivateKey();
    uint64_t v8 = objc_msgSend_container(*(void **)(a1 + 32), v6, v7);
    uint64_t v11 = objc_msgSend_pcsManager(v8, v9, v10);
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
    id obj = *(id *)(v12 + 40);
    id v14 = objc_msgSend_dataFromSharingIdentity_error_(v11, v13, (uint64_t)v5, &obj);
    objc_storeStrong((id *)(v12 + 40), obj);

    if (v5) {
      CFRelease(v5);
    }
    if (v14 && !*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
    {
      __int16 v22 = objc_msgSend_CKBase64URLSafeString(v14, v15, v16);
      id v25 = objc_msgSend_baseToken(WeakRetained, v23, v24);
      if (!objc_msgSend_length(v25, v26, v27))
      {

        id v25 = 0;
      }
      uint64_t v29 = objc_msgSend_fullTokenFromBaseToken_privateToken_(MEMORY[0x1E4F1A2D8], v28, (uint64_t)v25, v22);
      uint64_t v31 = objc_msgSend_shortSharingTokenFromFullToken_(WeakRetained, v30, (uint64_t)v29);
      objc_msgSend_setShortToken_(WeakRetained, v32, (uint64_t)v31);
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      uint64_t v33 = (void *)*MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        __int16 v39 = v33;
        uint64_t v42 = objc_msgSend_shortToken(WeakRetained, v40, v41);
        *(_DWORD *)long long buf = 138543362;
        id v45 = v42;
        _os_log_debug_impl(&dword_1C4CFF000, v39, OS_LOG_TYPE_DEBUG, "OON short token reconstructed: %{public}@", buf, 0xCu);
      }
      uint64_t v36 = objc_msgSend_stateTransitionGroup(WeakRetained, v34, v35);
      dispatch_group_leave(v36);
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v17 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        int v37 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        *(_DWORD *)long long buf = 138412290;
        id v45 = v37;
        _os_log_error_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_ERROR, "OON share reconstruct: pcs to data conversion failed: %@", buf, 0xCu);
      }
      objc_msgSend_setError_(WeakRetained, v18, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
    }
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v19 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      *(_DWORD *)long long buf = 138412290;
      id v45 = v38;
      _os_log_error_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_ERROR, "OON share reconstruct: selfAdded failed to decrypt: %@", buf, 0xCu);
    }
    id v14 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v20, *MEMORY[0x1E4F19DD8], 8003, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), @"encryptedKey failed to decrypt");
    objc_msgSend_setError_(WeakRetained, v21, (uint64_t)v14);
  }
}

void sub_1C4DFF01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C4DFF03C(uint64_t a1, int a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v8 = v5;
  if (a2)
  {
    if (v5)
    {
      id v25 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v6, v7);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v25, v26, *(void *)(a1 + 48), *(void *)(a1 + 32), @"CKDCompleteParticipantVettingOperation.m", 190, @"Vetting token got validated fine, but we got an error: %@", v8);
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v9 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      uint64_t v13 = v9;
      uint64_t v16 = objc_msgSend_vettingToken(v12, v14, v15);
      *(_DWORD *)long long buf = 138543362;
      int v28 = v16;
      _os_log_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_INFO, "Vetting token: %{public}@ validated.", buf, 0xCu);
    }
  }
  else
  {
    id v17 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v18 = *MEMORY[0x1E4F19DD8];
    uint64_t v19 = objc_msgSend_vettingToken(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v6, v7);
    id v21 = (void *)v19;
    if (v8)
    {
      uint64_t v22 = objc_msgSend_errorWithDomain_code_error_format_(v17, v20, v18, 8011, v8, @"Vetting token %@ validation failed due to auth error", v19);

      uint64_t v8 = (void *)v22;
    }
    else
    {
      uint64_t v8 = objc_msgSend_errorWithDomain_code_format_(v17, v20, v18, 8002, @"Vetting token %@ invalid. Likely expired.", v19);
    }

    objc_msgSend_setError_(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v23, (uint64_t)v8);
  }
  uint64_t v24 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v10, v11);
  dispatch_group_leave(v24);
}

void sub_1C4DFF404(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v3);
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x3032000000;
  v19[3] = sub_1C4DFE9A8;
  void v19[4] = sub_1C4DFE9B8;
  id v20 = 0;
  objc_msgSend_setForceDSRefetch_(v3, v4, 1);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = sub_1C4DFF638;
  v17[3] = &unk_1E64F36D0;
  objc_copyWeak(&v18, &location);
  uint8_t v17[4] = *(void *)(a1 + 32);
  void v17[5] = v19;
  objc_msgSend_setShareMetadataFetchedBlock_(v3, v5, (uint64_t)v17);
  uint64_t v10 = MEMORY[0x1E4F143A8];
  uint64_t v11 = 3221225472;
  uint64_t v12 = sub_1C4DFF7A0;
  uint64_t v13 = &unk_1E64F36F8;
  objc_copyWeak(&v15, &location);
  objc_copyWeak(&v16, &from);
  id v14 = v19;
  objc_msgSend_setCompletionBlock_(v3, v6, (uint64_t)&v10);
  uint64_t v9 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v7, v8, v10, v11, v12, v13);
  dispatch_group_enter(v9);

  objc_destroyWeak(&v16);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&v18);
  _Block_object_dispose(v19, 8);

  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void sub_1C4DFF5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  _Block_object_dispose(&a23, 8);
  objc_destroyWeak((id *)(v26 - 80));
  objc_destroyWeak((id *)(v26 - 72));
  _Unwind_Resume(a1);
}

void sub_1C4DFF638(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v10 = WeakRetained;
  if (v7)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a4);
  }
  else
  {
    objc_msgSend_setShareMetadata_(WeakRetained, v9, (uint64_t)v6);
    uint64_t v13 = objc_msgSend_callbackQueue(v10, v11, v12);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = sub_1C4DFF740;
    void v14[3] = &unk_1E64F0948;
    void v14[4] = *(void *)(a1 + 32);
    id v15 = v6;
    dispatch_async(v13, v14);
  }
}

void sub_1C4DFF740(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_verifyProgressShareMetadataFetchedBlock(*(void **)(a1 + 32), a2, a3);
  uint64_t v4 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    id v5 = v4;
    v4[2](v4, *(void *)(a1 + 40));
    uint64_t v4 = (void (**)(void, void))v5;
  }
}

void sub_1C4DFF7A0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v2 = objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = objc_msgSend_error(v2, v3, v4);

  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v11 = *(void *)(v8 + 40);
  uint64_t v9 = (id *)(v8 + 40);
  uint64_t v10 = v11;
  if (v11 || (objc_storeStrong(v9, v5), (uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) != 0))
  {
    uint64_t v12 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v13 = *MEMORY[0x1E4F19DD8];
    id v14 = objc_msgSend_shortToken(WeakRetained, v6, v7);
    uint64_t v16 = objc_msgSend_errorWithDomain_code_error_format_(v12, v15, v13, 8012, v10, @"Couldn't force fetch share metadata for share: %@", v14);
    uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
    id v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    objc_msgSend_setError_(WeakRetained, v19, (uint64_t)v5);
  }
  id v20 = objc_msgSend_stateTransitionGroup(WeakRetained, v6, v7);
  dispatch_group_leave(v20);
}

void sub_1C4DFFF88(uint64_t a1, char a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v8 = v5;
  if ((a2 & 1) == 0)
  {
    if (!v5)
    {
      uint64_t v38 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v6, v7);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v38, v39, *(void *)(a1 + 56), *(void *)(a1 + 32), @"CKDCompleteParticipantVettingOperation.m", 300, @"OON key-swap validation failed, but without error");
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v23 = (void *)*MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void **)(a1 + 40);
      int v28 = v23;
      uint64_t v31 = objc_msgSend_participantID(v27, v29, v30);
      uint64_t v34 = objc_msgSend_share(*(void **)(a1 + 48), v32, v33);
      int v37 = objc_msgSend_recordID(v34, v35, v36);
      int v40 = 138412802;
      uint64_t v41 = v31;
      __int16 v42 = 2112;
      uint64_t v43 = v37;
      __int16 v44 = 2112;
      id v45 = v8;
      _os_log_error_impl(&dword_1C4CFF000, v28, OS_LOG_TYPE_ERROR, "Failed to create protection info in OON key-swap for participantID: %@, recordID: %@, error: %@", (uint8_t *)&v40, 0x20u);
    }
    uint64_t v13 = objc_msgSend_errorWithDomain_code_error_format_(MEMORY[0x1E4F1A280], v24, *MEMORY[0x1E4F19DD8], 8009, v8, @"Dryrun OON keyswap failed");
    objc_msgSend_setError_(*(void **)(a1 + 32), v25, (uint64_t)v13);
    goto LABEL_13;
  }
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v9 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = *(void **)(a1 + 40);
    uint64_t v13 = v9;
    uint64_t v16 = objc_msgSend_participantID(v12, v14, v15);
    uint64_t v19 = objc_msgSend_share(*(void **)(a1 + 48), v17, v18);
    uint64_t v22 = objc_msgSend_recordID(v19, v20, v21);
    int v40 = 138412546;
    uint64_t v41 = v16;
    __int16 v42 = 2112;
    uint64_t v43 = v22;
    _os_log_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_INFO, "Created protection info in OON key-swap for participantID: %@, recordID: %@", (uint8_t *)&v40, 0x16u);

LABEL_13:
  }
  uint64_t v26 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v10, v11);
  dispatch_group_leave(v26);
}

void sub_1C4E00F2C()
{
  id v0 = (void *)qword_1EBBCDD28;
  qword_1EBBCDD28 = (uint64_t)&unk_1F20ABB78;
}

BOOL sub_1C4E010EC(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 16;
LABEL_26:
        id v20 = *(CKDPUserInformationRequestAccess **)(a1 + v19);
        *(void *)(a1 + v19) = v18;
LABEL_27:

        goto LABEL_29;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 8;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    id v20 = objc_alloc_init(CKDPUserInformationRequestAccess);
    objc_storeStrong((id *)(a1 + 24), v20);
    if (!PBReaderPlaceMark() || !CKDPUserInformationRequestAccessReadFrom((uint64_t)v20, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E021DC()
{
  id v0 = (void *)qword_1EBBCDD38;
  qword_1EBBCDD38 = (uint64_t)&unk_1F20ABBA0;
}

BOOL sub_1C4E02474(id *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 5;
        goto LABEL_24;
      case 2u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 2;
        goto LABEL_24;
      case 3u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 4;
LABEL_24:
        uint64_t v19 = (CKDPCodeFunctionInvokeRequestProtectedCloudComputeMetadata *)a1[v18];
        a1[v18] = (id)v17;
        goto LABEL_34;
      case 4u:
        uint64_t v19 = objc_alloc_init(CKDPCodeFunctionInvokeRequestProtectedCloudComputeMetadata);
        objc_storeStrong(a1 + 3, v19);
        if (!PBReaderPlaceMark() || (sub_1C4E848F8(v19, a2) & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_33;
      case 5u:
        uint64_t v19 = objc_alloc_init(CKDPCodeFunctionInvokeRequestAttestationRequest);
        objc_storeStrong(a1 + 1, v19);
        if (!PBReaderPlaceMark() || (sub_1C4D91E00((uint64_t)v19, a2) & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_33;
      case 6u:
        uint64_t v19 = objc_alloc_init(CKCDPTrustedTargetCryptoMetadata);
        objc_storeStrong(a1 + 6, v19);
        if PBReaderPlaceMark() && (sub_1C4FFF4E0((uint64_t)v19, a2))
        {
LABEL_33:
          PBReaderRecallMark();
LABEL_34:

LABEL_35:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_38:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_35;
    }
  }
}

void sub_1C4E02F0C()
{
  id v0 = (void *)qword_1EBBCDD48;
  qword_1EBBCDD48 = (uint64_t)&unk_1F20ABBC8;
}

uint64_t sub_1C4E03198(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = (CKDPAncestryEtag *)objc_alloc_init(MEMORY[0x1E4F19F30]);
        objc_storeStrong((id *)(a1 + 24), v17);
        if PBReaderPlaceMark() && (CKDPRecordZoneIdentifierReadFrom()) {
          goto LABEL_36;
        }
        goto LABEL_43;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_40:
        *(unsigned char *)(a1 + 32) = v21 != 0;
        goto LABEL_41;
      case 3u:
        uint64_t v17 = (CKDPAncestryEtag *)objc_alloc_init(MEMORY[0x1E4F19EF8]);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (CKDPDateReadFrom() & 1) == 0) {
          goto LABEL_43;
        }
        goto LABEL_36;
      case 4u:
        uint64_t v17 = objc_alloc_init(CKDPAncestryEtag);
        objc_storeStrong((id *)(a1 + 8), v17);
        if PBReaderPlaceMark() && (sub_1C4DA97F4((uint64_t)v17, a2))
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_41:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_43:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_41;
    }
  }
}

uint64_t CKDPRecordFieldIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E05624(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x220], 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E05930(uint64_t a1, const char *a2, void *a3)
{
  return objc_msgSend__prepareAssetForDownload_(a3, a2, a1);
}

uint64_t sub_1C4E05940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](a3, sel__preparePackageForDownload_, a1);
}

id sub_1C4E06014(uint64_t a1, void *a2)
{
  id v2 = NSString;
  id v3 = a2;
  uint64_t v6 = objc_msgSend_itemID(v3, v4, v5);
  objc_msgSend_progress(v3, v7, v8);
  uint64_t v10 = v9;
  char v13 = objc_msgSend_signature(v3, v11, v12);
  if (objc_msgSend_finished(v3, v14, v15)) {
    objc_msgSend_stringWithFormat_(v2, v16, @"<CKDMMCSItem %p itemID: %lu, progress %0.2f, signature: %@ %@>", v3, v6, v10, v13, @"finished");
  }
  else {
  uint64_t v17 = objc_msgSend_stringWithFormat_(v2, v16, @"<CKDMMCSItem %p itemID: %lu, progress %0.2f, signature: %@ %@>", v3, v6, v10, v13, &stru_1F2044F30);
  }

  return v17;
}

id sub_1C4E060DC(uint64_t a1, void *a2)
{
  id v2 = NSString;
  id v3 = a2;
  uint64_t v6 = objc_msgSend_itemID(v3, v4, v5);
  objc_msgSend_progress(v3, v7, v8);
  uint64_t v10 = v9;
  char v13 = objc_msgSend_signature(v3, v11, v12);
  if (objc_msgSend_finished(v3, v14, v15)) {
    objc_msgSend_stringWithFormat_(v2, v16, @"<CKDMMCSItem %p itemID: %lu, progress %0.2f, signature: %@ %@>", v3, v6, v10, v13, @"finished");
  }
  else {
  uint64_t v17 = objc_msgSend_stringWithFormat_(v2, v16, @"<CKDMMCSItem %p itemID: %lu, progress %0.2f, signature: %@ %@>", v3, v6, v10, v13, &stru_1F2044F30);
  }

  return v17;
}

void sub_1C4E06634(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_downloadPreparationBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_downloadPreparationBlock(*(void **)(a1 + 32), v5, v6);
    uint64_t v7 = (void (**)(id, void))objc_claimAutoreleasedReturnValue();
    v7[2](v7, *(void *)(a1 + 40));
  }
}

void sub_1C4E067C4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_downloadProgressBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_downloadProgressBlock(*(void **)(a1 + 32), v5, v6);
    uint64_t v7 = (void (**)(id, void, double))objc_claimAutoreleasedReturnValue();
    v7[2](v7, *(void *)(a1 + 40), *(double *)(a1 + 48));
  }
}

void sub_1C4E069FC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_downloadCommandBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_downloadCommandBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1C4E06BA8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_downloadCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_downloadCompletionBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void *sub_1C4E07E88(void *result, const char *a2, uint64_t a3)
{
  if (result)
  {
    id v3 = objc_msgSend_operationInfo(result, a2, a3);
    uint64_t v6 = objc_msgSend_fetchingAssetsForRereference(v3, v4, v5);

    return (void *)v6;
  }
  return result;
}

void sub_1C4E08970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_unfair_lock_t lock)
{
}

void sub_1C4E08F78(uint64_t a1, void *a2)
{
  id v2 = a2;
  MMCSOperationMetricCombineMetrics();
  objc_msgSend_date(MEMORY[0x1E4F1C9C8], v3, v4);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  id v7 = objc_msgSend_startDate(v2, v5, v6);
  objc_msgSend_timeIntervalSinceDate_(v11, v8, (uint64_t)v7);
  objc_msgSend_setDuration_(v2, v9, v10);
}

uint64_t sub_1C4E09118(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend_metrics(a2, (const char *)a2, a3);
}

void sub_1C4E0A8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose((const void *)(v51 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4E0A948(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4E0A958(uint64_t a1)
{
}

void sub_1C4E0A960(uint64_t a1, const char *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_itemAtIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2);
  int v7 = objc_msgSend_sectionIndex(v4, v5, v6);
  if (objc_msgSend_index(*(void **)(a1 + 40), v8, v9) == v7)
  {
    uint64_t v10 = [CKDMMCSItem alloc];
    uint64_t v12 = objc_msgSend_initWithPackage_(v10, v11, *(void *)(a1 + 32));
    uint64_t v15 = objc_msgSend_signature(v4, v13, v14);
    objc_msgSend_setSignature_(v12, v16, (uint64_t)v15);

    uint64_t v19 = objc_msgSend_size(v4, v17, v18);
    objc_msgSend_setFileSize_(v12, v20, v19);
    uint64_t v23 = objc_msgSend_paddedSize(v4, v21, v22);
    objc_msgSend_setPaddedFileSize_(v12, v24, v23);
    uint64_t v27 = objc_msgSend_zeroSizeFileSignature(CKDMMCS, v25, v26);
    uint64_t v30 = objc_msgSend_signature(v12, v28, v29);
    int isEqualToData = objc_msgSend_isEqualToData_(v27, v31, (uint64_t)v30);

    if (isEqualToData)
    {
      if (objc_msgSend_fileSize(v12, v33, v34))
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v36 = (void *)*MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_FAULT))
        {
          __int16 v44 = v36;
          int v47 = 138412546;
          uint64_t v48 = v4;
          __int16 v49 = 2048;
          uint64_t v50 = objc_msgSend_fileSize(v12, v45, v46);
          _os_log_fault_impl(&dword_1C4CFF000, v44, OS_LOG_TYPE_FAULT, "Package section item %@ has zero file signature and non-zero size %llu", (uint8_t *)&v47, 0x16u);
        }
      }
      objc_msgSend_setFileSize_(v12, v35, 0);
    }
    uint64_t v37 = objc_msgSend_offset(v4, v33, v34);
    objc_msgSend_setOffset_(v12, v38, v37);
    objc_msgSend_setPackageIndex_(v12, v39, (uint64_t)a2);
    if (objc_msgSend_fileSize(v12, v40, v41)) {
      uint64_t v43 = *(void *)(a1 + 48);
    }
    else {
      uint64_t v43 = *(void *)(a1 + 56);
    }
    objc_msgSend_addObject_(*(void **)(*(void *)(v43 + 8) + 40), v42, (uint64_t)v12);
  }
}

void sub_1C4E0ABA8(uint64_t a1, void *a2)
{
  id v19 = a2;
  uint64_t v5 = objc_msgSend_error(v19, v3, v4);

  if (!v5)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    objc_msgSend_progress(v19, v6, v7);
    objc_msgSend_updateProgressWithItem_progress_(v8, v9, (uint64_t)v19);
    double v11 = v10;
    objc_msgSend_progress(*(void **)(a1 + 40), v12, v13);
    if (v16 < v11) {
      double v16 = v11;
    }
    objc_msgSend_setProgress_(*(void **)(a1 + 40), v14, v15, v16);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend__didMakeProgressForMMCSSectionItem_task_(WeakRetained, v18, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1C4E0AC54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = objc_msgSend_error(v3, v4, v5);
  uint64_t v9 = objc_msgSend_queue(*(void **)(a1 + 32), v7, v8);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_1C4E0AD84;
  void v14[3] = &unk_1E64F37D8;
  uint64_t v22 = *(void *)(a1 + 72);
  id v15 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 32);
  id v16 = v10;
  uint64_t v17 = v11;
  id v18 = v3;
  id v19 = *(id *)(a1 + 56);
  id v20 = v6;
  id v21 = *(id *)(a1 + 64);
  id v12 = v6;
  id v13 = v3;
  dispatch_async(v9, v14);
}

void sub_1C4E0AD84(uint64_t a1, const char *a2, uint64_t a3)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40), a2, a3))
  {
    uint64_t v6 = objc_msgSend_assetCache(*(void **)(a1 + 32), v4, v5);
    id v8 = (id)objc_msgSend_trackCachedButNotRegisteredMMCSItems_error_(v6, v7, *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), 0);
  }
  uint64_t v9 = objc_msgSend_sectionItems(*(void **)(a1 + 40), v4, v5);
  objc_msgSend_addObjectsFromArray_(v9, v10, *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40));

  objc_msgSend__collectMetricsFromCompletedItemGroup_(*(void **)(a1 + 48), v11, *(void *)(a1 + 56));
  id v12 = *(void **)(a1 + 48);
  v16[0] = *(void *)(a1 + 40);
  uint64_t v14 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v13, (uint64_t)v16, 1);
  objc_msgSend__didDownloadMMCSSectionItems_task_error_(v12, v15, (uint64_t)v14, *(void *)(a1 + 64), *(void *)(a1 + 72));

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
}

uint64_t sub_1C4E0AE90(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_removeCancelToken_(v4, v5, *(void *)(a1 + 40));

  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(result + 16);
    return v7();
  }
  return result;
}

uint64_t sub_1C4E0B044(uint64_t a1, const char *a2)
{
  return objc_msgSend__downloadPackageSectionsWithSectionEnumerator_task_completionBlock_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
}

void sub_1C4E0B858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_1C4E0B8A8(uint64_t a1, const char *a2, unsigned char *a3)
{
  objc_msgSend_itemAtIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2);
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  unsigned int v7 = objc_msgSend_sectionIndex(v12, v5, v6);
  if ((v7 & 0x80000000) != 0)
  {
    uint64_t v9 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v8, *MEMORY[0x1E4F19DD8], 1000, @"Invalid section index %ld for package %@", (int)v7, *(void *)(a1 + 32));
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    *a3 = 1;
  }
  else
  {
    objc_msgSend_addIndex_(*(void **)(a1 + 40), v8, v7);
  }
}

uint64_t sub_1C4E0B96C(uint64_t a1, const char *a2)
{
  return objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E4F28ED0], a2, (uint64_t)a2);
}

uint64_t sub_1C4E0B97C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_error(*(void **)(a1 + 32), a2, a3);

  if (!v4)
  {
    unsigned int v7 = objc_msgSend_manifestAsset(*(void **)(a1 + 32), v5, v6);
    uint64_t v10 = objc_msgSend_downloaded(v7, v8, v9);

    if (*(void *)(a1 + 72))
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = objc_msgSend_assets(*(void **)(a1 + 40), v11, v12);
        unint64_t v17 = objc_msgSend_count(v14, v15, v16);
        unint64_t v18 = v13 + 1;

        if (v17 > v13 + 1)
        {
          id v19 = objc_msgSend_assets(*(void **)(a1 + 40), v11, v12);
          id v21 = objc_msgSend_objectAtIndex_(v19, v20, v13 + 1);

          if (objc_msgSend_containsIndex_(*(void **)(a1 + 48), v22, v13))
          {
            if (v10) {
              LOBYTE(v10) = objc_msgSend_downloaded(v21, v23, v24);
            }
            else {
              LOBYTE(v10) = 0;
            }
          }
          else
          {
            id v25 = objc_msgSend_progressTracker(*(void **)(a1 + 32), v23, v24);
            objc_msgSend_updateProgressWithItem_progress_(v25, v26, (uint64_t)v21, 1.0);
            double v28 = v27;

            objc_msgSend__didMakeProgressForAsset_progress_(*(void **)(a1 + 56), v29, *(void *)(a1 + 40), v28);
          }
        }
        uint64_t v13 = v18;
      }
      while (v18 < *(void *)(a1 + 72));
    }
    objc_msgSend_setDownloaded_(*(void **)(a1 + 40), v11, v10 & 1);
  }
  uint64_t v30 = *(void **)(a1 + 56);
  uint64_t v31 = *(void *)(a1 + 40);
  uint64_t v32 = objc_msgSend_error(*(void **)(a1 + 32), v5, v6);
  objc_msgSend__didDownloadAsset_error_(v30, v33, v31, v32);

  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    uint64_t v35 = *(uint64_t (**)(void))(result + 16);
    return v35();
  }
  return result;
}

void sub_1C4E0BD1C(uint64_t a1, const char *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  objc_msgSend_removeObjectsInArray_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
  unint64_t v5 = objc_msgSend_maxPackageDownloadsPerBatch(*(void **)(a1 + 48), v3, v4);
  id v6 = objc_alloc(MEMORY[0x1E4F1CA48]);
  uint64_t v9 = objc_msgSend_count(*(void **)(a1 + 32), v7, v8);
  if (v5 >= v5 - v9) {
    uint64_t v11 = objc_msgSend_initWithCapacity_(v6, v10, v5 - v9);
  }
  else {
    uint64_t v11 = objc_msgSend_initWithCapacity_(v6, v10, v5);
  }
  uint64_t v14 = (void *)v11;
  id v15 = objc_msgSend_objectEnumerator(*(void **)(a1 + 56), v12, v13);
  unint64_t v18 = objc_msgSend_count(*(void **)(a1 + 32), v16, v17);
  unint64_t v21 = v5 - v18;
  if (v5 > v18)
  {
    do
    {
      uint64_t v22 = objc_msgSend_nextObject(v15, v19, v20);
      if (!v22) {
        break;
      }
      uint64_t v23 = (void *)v22;
      objc_msgSend_addObject_(v14, v19, v22);

      --v21;
    }
    while (v21);
  }
  uint64_t v36 = v15;
  objc_msgSend_removeObjectsInArray_(*(void **)(a1 + 56), v19, (uint64_t)v14);
  objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 32), v24, (uint64_t)v14);
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v25 = v14;
  uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v40, v44, 16);
  if (v27)
  {
    uint64_t v30 = v27;
    uint64_t v31 = *(void *)v41;
    do
    {
      uint64_t v32 = 0;
      do
      {
        if (*(void *)v41 != v31) {
          objc_enumerationMutation(v25);
        }
        uint64_t v33 = *(void *)(*((void *)&v40 + 1) + 8 * v32);
        objc_msgSend_qualityOfService(*(void **)(a1 + 48), v28, v29);
        uint64_t v34 = CKGetGlobalQueue();
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_1C4E0BF6C;
        block[3] = &unk_1E64F0DF0;
        uint64_t v35 = *(void **)(a1 + 56);
        void block[4] = *(void *)(a1 + 48);
        void block[5] = v33;
        id v38 = v35;
        id v39 = *(id *)(a1 + 32);
        dispatch_async(v34, block);

        ++v32;
      }
      while (v30 != v32);
      uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v28, (uint64_t)&v40, v44, 16);
    }
    while (v30);
  }
}

void sub_1C4E0BF6C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_addCancelToken_withOperation_(v4, v5, *(void *)(a1 + 40), *(void *)(a1 + 32));

  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = sub_1C4E0C03C;
  void v9[3] = &unk_1E64F0DF0;
  void v9[4] = v6;
  void v9[5] = v7;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  objc_msgSend__downloadPackageSectionsWithTask_completionBlock_(v6, v8, v7, v9);
}

void sub_1C4E0C03C(uint64_t a1, const char *a2, uint64_t a3)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_removeCancelToken_(v4, v5, *(void *)(a1 + 40));

  uint64_t v8 = objc_msgSend_cancelTokens(*(void **)(a1 + 40), v6, v7);
  objc_msgSend_removeAllCancelTokens(v8, v9, v10);

  uint64_t v13 = objc_msgSend_group(*(void **)(a1 + 40), v11, v12);
  dispatch_group_leave(v13);

  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void **)(a1 + 32);
  v20[0] = *(void *)(a1 + 40);
  unint64_t v18 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v17, (uint64_t)v20, 1);
  objc_msgSend__downloadPackageSectionsWithPendingTasks_downloadingTasks_completedTasks_(v16, v19, v14, v15, v18);
}

void sub_1C4E0CD40(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_1C4E0CD70(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v2 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = *(void **)(a1 + 32);
    uint64_t v15 = v2;
    unint64_t v18 = objc_msgSend_package(v14, v16, v17);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v26 = v18;
    _os_log_debug_impl(&dword_1C4CFF000, v15, OS_LOG_TYPE_DEBUG, "Finished downloading package manifest for package %@", buf, 0xCu);
  }
  unint64_t v5 = objc_msgSend_group(*(void **)(a1 + 32), v3, v4);
  dispatch_group_enter(v5);

  uint64_t v8 = objc_msgSend_group(*(void **)(a1 + 32), v6, v7);
  id v11 = objc_msgSend_queue(*(void **)(a1 + 40), v9, v10);
  uint64_t v19 = MEMORY[0x1E4F143A8];
  uint64_t v20 = 3221225472;
  unint64_t v21 = sub_1C4E0CF4C;
  uint64_t v22 = &unk_1E64F0948;
  id v23 = *(id *)(a1 + 32);
  id v24 = *(id *)(a1 + 48);
  dispatch_group_notify(v8, v11, &v19);

  objc_msgSend_addObject_(*(void **)(a1 + 56), v12, *(void *)(a1 + 32), v19, v20, v21, v22);
  objc_msgSend__downloadPackageSectionsWithPendingTasks_downloadingTasks_completedTasks_(*(void **)(a1 + 40), v13, *(void *)(a1 + 56), *(void *)(a1 + 64), 0);
}

void sub_1C4E0CF4C(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v2 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = v2;
    uint64_t v7 = objc_msgSend_package(v3, v5, v6);
    int v8 = 138412290;
    uint64_t v9 = v7;
    _os_log_debug_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_DEBUG, "Finished downloading package sections for package %@", (uint8_t *)&v8, 0xCu);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1C4E0D058(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 32);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend__didMakeProgressForMMCSItem_inMemory_(WeakRetained, v5, (uint64_t)v4, *(unsigned __int8 *)(a1 + 40));
}

void sub_1C4E0D0C4(uint64_t a1, void *a2, void *a3)
{
  id v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  uint64_t v9 = objc_msgSend_asset(v6, v7, v8);

  objc_msgSend__didCommandForAsset_command_(WeakRetained, v10, (uint64_t)v9, v5);
}

void sub_1C4E0D154(uint64_t a1, void *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  objc_msgSend__collectMetricsFromCompletedItemGroupSet_(*(void **)(a1 + 32), v4, (uint64_t)v3);
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v10 = objc_msgSend_error(v3, v8, v9);
  objc_msgSend__didDownloadMMCSItems_inMemory_error_(v5, v11, v6, v7, v10);

  uint64_t v14 = objc_msgSend_operationInfo(*(void **)(a1 + 32), v12, v13);
  objc_msgSend_cloneContextReturnBlock(v14, v15, v16);
  uint64_t v17 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    uint64_t v39 = a1;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    objc_msgSend_allItemGroups(v3, v18, v19);
    id obj = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v20, (uint64_t)&v46, v51, 16);
    if (v21)
    {
      uint64_t v24 = v21;
      uint64_t v41 = *(void *)v47;
      do
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          if (*(void *)v47 != v41) {
            objc_enumerationMutation(obj);
          }
          uint64_t v26 = *(void **)(*((void *)&v46 + 1) + 8 * i);
          uint64_t v27 = objc_msgSend_cloneContext(v26, v22, v23);
          long long v42 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          uint64_t v30 = objc_msgSend_items(v26, v28, v29);
          uint64_t v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v42, v50, 16);
          if (v32)
          {
            uint64_t v35 = v32;
            uint64_t v36 = *(void *)v43;
            do
            {
              for (uint64_t j = 0; j != v35; ++j)
              {
                if (*(void *)v43 != v36) {
                  objc_enumerationMutation(v30);
                }
                id v38 = objc_msgSend_signature(*(void **)(*((void *)&v42 + 1) + 8 * j), v33, v34);
                ((void (**)(void, void *, void *))v17)[2](v17, v38, v27);
              }
              uint64_t v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v33, (uint64_t)&v42, v50, 16);
            }
            while (v35);
          }
        }
        uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v22, (uint64_t)&v46, v51, 16);
      }
      while (v24);
    }

    a1 = v39;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1C4E0D3A8(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_cancelTokens(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_removeCancelToken_(v4, v5, *(void *)(a1 + 40));

  uint64_t v8 = objc_msgSend_stateTransitionGroup(*(void **)(a1 + 32), v6, v7);
  dispatch_group_leave(v8);
}

void sub_1C4E0DE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4E0DEB8(uint64_t a1, const char *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v4[0] = xmmword_1C5080578;
  v4[1] = unk_1C5080588;
  uint64_t v2 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], a2, (uint64_t)v4, 32);
  id v3 = (void *)qword_1EBBCDD58;
  qword_1EBBCDD58 = v2;
}

void sub_1C4E0DF38(id *a1, void *a2)
{
  location[3] = *(id *)MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v5 = v3;
  if (*MEMORY[0x1E4F1A4E0]) {
    objc_msgSend_checkAndClearUnitTestOverrides_(v3, v4, @"DownloadAssetsFromTranscodingService");
  }
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    id v7 = v5;
    objc_initWeak(location, v7);
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = sub_1C4E0E2D8;
    v25[3] = &unk_1E64F3910;
    id v26 = a1[5];
    objc_msgSend_setReplaceLocalSerializationsBlobs_(v7, v8, (uint64_t)v25);
    objc_msgSend_setInitialResponseReceivedCallback_(v7, v9, (uint64_t)&unk_1F2043370);
    objc_msgSend_setReplaceWireSerializations_(v7, v10, (uint64_t)&unk_1F2043390);
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = sub_1C4E0E648;
    v22[3] = &unk_1E64F3978;
    objc_copyWeak(&v24, a1 + 6);
    id v23 = a1[4];
    objc_msgSend_setRecordFetchCommandBlock_(v7, v11, (uint64_t)v22);
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    void v20[2] = sub_1C4E0E6E0;
    void v20[3] = &unk_1E64F39A0;
    id v21 = a1[4];
    objc_msgSend_setRecordFetchCompletionBlock_(v7, v12, (uint64_t)v20);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    void v16[2] = sub_1C4E0E9BC;
    void v16[3] = &unk_1E64F33C0;
    objc_copyWeak(&v18, a1 + 6);
    objc_copyWeak(&v19, location);
    id v17 = a1[4];
    objc_msgSend_setCompletionBlock_(v7, v13, (uint64_t)v16);

    objc_destroyWeak(&v19);
    objc_destroyWeak(&v18);

    objc_destroyWeak(&v24);
    objc_destroyWeak(location);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v14 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      id v15 = a1[4];
      LODWORD(location[0]) = 138412290;
      *(id *)((char *)location + 4) = v15;
      _os_log_debug_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_DEBUG, "The self is not strong with the transcoding operation for %@", (uint8_t *)location, 0xCu);
    }
  }
}

void sub_1C4E0E284(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v3);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 128));
  _Unwind_Resume(a1);
}

void sub_1C4E0E2D8(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v8 = a5;
  id v9 = a3;
  uint64_t v12 = objc_msgSend_firstObject(a2, v10, v11);
  id v15 = objc_msgSend_firstObject(v9, v13, v14);

  if (v12)
  {
    uint64_t v16 = objc_opt_new();
    objc_msgSend_setWireSerialization_(v16, v17, (uint64_t)v12);
    if (v15 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    {
      objc_msgSend_setEncryptedMasterKey_(v16, v18, (uint64_t)v15);
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
      }
      id v19 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v25 = 0;
        _os_log_error_impl(&dword_1C4CFF000, v19, OS_LOG_TYPE_ERROR, "Couldn't get encrypted master key for transcoding record", v25, 2u);
      }
    }
    objc_msgSend_setRecord_(*(void **)(a1 + 32), v20, (uint64_t)v16);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v21 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C4CFF000, v21, OS_LOG_TYPE_ERROR, "No wire serialization for transcoding record", buf, 2u);
    }
  }
  id v24 = objc_msgSend_data(*(void **)(a1 + 32), v22, v23);
  v8[2](v8, v24, 0);
}

void sub_1C4E0E4CC(uint64_t a1, void *a2, void *a3)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3;
  id v5 = a2;
  uint64_t v6 = [CKDPTranscodeResponse alloc];
  uint64_t v8 = objc_msgSend_initWithData_(v6, v7, (uint64_t)v5);

  uint64_t v11 = objc_msgSend_record(v8, v9, v10);
  uint64_t v14 = objc_msgSend_wireSerialization(v11, v12, v13);

  if (v14)
  {
    v19[0] = v14;
    uint64_t v16 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v15, (uint64_t)v19, 1);
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v17 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v18 = 0;
      _os_log_error_impl(&dword_1C4CFF000, v17, OS_LOG_TYPE_ERROR, "No wire serialization when handling intial transcoding response", v18, 2u);
    }
    uint64_t v16 = 0;
  }
  v4[2](v4, v16, 0);
}

void sub_1C4E0E648(uint64_t a1, uint64_t a2, void *a3)
{
  id v11 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v7 = objc_msgSend_downloadCommandBlock(WeakRetained, v5, v6);

  if (v7)
  {
    objc_msgSend_downloadCommandBlock(WeakRetained, v8, v9);
    uint64_t v10 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
    ((void (**)(void, void, id))v10)[2](v10, *(void *)(a1 + 32), v11);
  }
}

void sub_1C4E0E6E0(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v11 = a4;
  if (v11)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v12 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void **)(a1 + 32);
      int v45 = 138412546;
      long long v46 = v13;
      __int16 v47 = 2112;
      id v48 = v11;
      _os_log_error_impl(&dword_1C4CFF000, v12, OS_LOG_TYPE_ERROR, "Error fetching transcoded asset %@: %@", (uint8_t *)&v45, 0x16u);
    }
  }
  else
  {
    uint64_t v14 = objc_msgSend_recordKey(*(void **)(a1 + 32), v9, v10);
    uint64_t v16 = objc_msgSend_objectForKeyedSubscript_(v7, v15, (uint64_t)v14);

    id v17 = (void *)*MEMORY[0x1E4F1A548];
    if (v16)
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v17);
      }
      id v18 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
      {
        long long v44 = *(void **)(a1 + 32);
        int v45 = 138412546;
        long long v46 = v16;
        __int16 v47 = 2112;
        id v48 = v44;
        _os_log_debug_impl(&dword_1C4CFF000, v18, OS_LOG_TYPE_DEBUG, "Transferring data from transcoded asset %@ to the response record's asset %@", (uint8_t *)&v45, 0x16u);
      }
      id v21 = objc_msgSend_fileURL(v16, v19, v20);
      objc_msgSend_setFileURL_(*(void **)(a1 + 32), v22, (uint64_t)v21);

      uint64_t v25 = objc_msgSend_size(v16, v23, v24);
      objc_msgSend_setSize_(*(void **)(a1 + 32), v26, v25);
      uint64_t v29 = objc_msgSend_paddedFileSize(v16, v27, v28);
      objc_msgSend_setPaddedFileSize_(*(void **)(a1 + 32), v30, v29);
      uint64_t v33 = objc_msgSend_UUID(v16, v31, v32);
      objc_msgSend_setUUID_(*(void **)(a1 + 32), v34, (uint64_t)v33);

      uint64_t v37 = objc_msgSend_downloaded(v16, v35, v36);
      objc_msgSend_setDownloaded_(*(void **)(a1 + 32), v38, v37);
      uint64_t v41 = objc_msgSend_wasCached(v16, v39, v40);
      objc_msgSend_setWasCached_(*(void **)(a1 + 32), v42, v41);
    }
    else
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v17);
      }
      long long v43 = *MEMORY[0x1E4F1A500];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
      {
        LOWORD(v45) = 0;
        _os_log_error_impl(&dword_1C4CFF000, v43, OS_LOG_TYPE_ERROR, "No transcoded asset after fetching from transcoder", (uint8_t *)&v45, 2u);
      }
    }
  }
}

void sub_1C4E0E9BC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v2 = objc_loadWeakRetained((id *)(a1 + 48));
    id v5 = objc_msgSend_error(v2, v3, v4);

    objc_msgSend__didDownloadAsset_error_(WeakRetained, v6, *(void *)(a1 + 32), v5);
    uint64_t v9 = objc_msgSend_stateTransitionGroup(WeakRetained, v7, v8);
    dispatch_group_leave(v9);
  }
}

uint64_t sub_1C4E0FC9C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v8 = objc_msgSend_operationCount(v5, v6, v7);
  if (v8 == objc_msgSend_operationCount(v4, v9, v10))
  {
    uint64_t v13 = 0;
  }
  else
  {
    unint64_t v14 = objc_msgSend_operationCount(v5, v11, v12);
    if (v14 < objc_msgSend_operationCount(v4, v15, v16)) {
      uint64_t v13 = -1;
    }
    else {
      uint64_t v13 = 1;
    }
  }

  return v13;
}

BOOL sub_1C4E100DC(id *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(CKDPListRange);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || !sub_1C4F65720((uint64_t)v17, a2)) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    id v17 = objc_alloc_init(CKDPRecordFieldValue);
    objc_msgSend_addValue_(a1, v18, (uint64_t)v17);
    if (!PBReaderPlaceMark() || (CKDPRecordFieldValueReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E10C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,id a23)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a23);
  _Unwind_Resume(a1);
}

void sub_1C4E10CE0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v7 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = v7;
    *(_DWORD *)long long buf = 134218240;
    uint64_t v29 = a2;
    __int16 v30 = 2048;
    uint64_t v31 = (int)objc_msgSend_code(v5, v26, v27);
    _os_log_debug_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_DEBUG, "Fetched quota (%llu) with response code %ld", buf, 0x16u);
  }
  if (objc_msgSend_code(v5, v8, v9) != 1)
  {
    uint64_t v11 = (void *)MEMORY[0x1E4F1A280];
    uint64_t v12 = *MEMORY[0x1E4F19DD8];
    uint64_t v13 = sub_1C4E94D98(v5);
    id v14 = objc_loadWeakRetained((id *)(a1 + 40));
    int v15 = sub_1C4E940D0(v14, v5);
    id v18 = objc_msgSend_error(v5, v16, v17);
    id v21 = objc_msgSend_errorDescription(v18, v19, v20);
    uint64_t v23 = objc_msgSend_errorWithDomain_code_userInfo_format_(v11, v22, v12, v13, v15, @"Error fetching user quota from server: %@", v21);
    objc_msgSend_setError_(WeakRetained, v24, (uint64_t)v23);
  }
  objc_msgSend_setQuotaAvailable_(WeakRetained, v10, a2);
}

void sub_1C4E10ED8(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  id v4 = (void *)*MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = v4;
    unint64_t v10 = (objc_class *)objc_opt_class();
    uint64_t v11 = NSStringFromClass(v10);
    id v14 = objc_msgSend_ckShortDescription(WeakRetained, v12, v13);
    uint64_t v17 = objc_msgSend_error(v3, v15, v16);
    int v18 = 138544130;
    id v19 = v11;
    __int16 v20 = 2048;
    id v21 = WeakRetained;
    __int16 v22 = 2114;
    uint64_t v23 = v14;
    __int16 v24 = 2112;
    uint64_t v25 = v17;
    _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "Fetch quota operation <%{public}@: %p; %{public}@> finished with error %@",
      (uint8_t *)&v18,
      0x2Au);
  }
  uint64_t v7 = objc_msgSend_error(v3, v5, v6);
  objc_msgSend_finishWithError_(WeakRetained, v8, (uint64_t)v7);
}

void sub_1C4E110E4()
{
  id v0 = (void *)qword_1EBBCDD68;
  qword_1EBBCDD68 = (uint64_t)&unk_1F20ABBF0;
}

uint64_t sub_1C4E114E4(unsigned char *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
          goto LABEL_41;
        case 2u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 32;
          goto LABEL_41;
        case 3u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          a1[44] |= 1u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  uint64_t v22 = 0;
                  goto LABEL_45;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v22 = 0;
          }
LABEL_45:
          BOOL v35 = v22 != 0;
          uint64_t v36 = 40;
          goto LABEL_50;
        case 4u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          a1[44] |= 2u;
          break;
        case 5u:
          uint64_t v33 = PBReaderReadString();
          if (v33) {
            objc_msgSend_addRootRecordDesiredKeys_(a1, v32, (uint64_t)v33);
          }

          continue;
        case 6u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
LABEL_41:
          uint64_t v34 = *(void **)&a1[v18];
          *(void *)&a1[v18] = v17;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v29 = *v3;
        unint64_t v30 = *(void *)(a2 + v29);
        if (v30 == -1 || v30 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
        *(void *)(a2 + v29) = v30 + 1;
        v28 |= (unint64_t)(v31 & 0x7F) << v26;
        if ((v31 & 0x80) == 0) {
          goto LABEL_47;
        }
        v26 += 7;
        BOOL v14 = v27++ >= 9;
        if (v14)
        {
          uint64_t v28 = 0;
          goto LABEL_49;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_47:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v28 = 0;
      }
LABEL_49:
      BOOL v35 = v28 != 0;
      uint64_t v36 = 41;
LABEL_50:
      a1[v36] = v35;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_1C4E12A38(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
LABEL_22:
        id v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&STACK[0x220], 8) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E15548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1C4E155DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = objc_msgSend_objectRepresentationFromFieldValue_(*(void **)(a1 + 32), v4, (uint64_t)v3);
  if (v7)
  {
    if (objc_msgSend_type(v3, v5, v6) == 6)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v10 = *(void *)(v9 + 24);
        *(void *)(v9 + 24) = v10 + 1;
        objc_msgSend_setArrayIndex_(v7, v8, v10);
      }
    }
  }

  return v7;
}

void sub_1C4E16168(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_sharedNotifier(CKDAccountNotifier, a2, a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_postAccountChangedNotificationWithAccountID_changeType_(v4, v3, 0, 0);
}

void sub_1C4E161B8(uint64_t a1, void *a2)
{
  id v3 = _os_activity_create(&dword_1C4CFF000, "CKDSystemAvailabilityMonitory/_systemReadyCheckFired", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v3, &state);
  id v4 = a2;
  objc_msgSend__systemMayNowBeReady(v4, v5, v6);
  id v7 = v4;
  objc_sync_enter(v7);
  if ((objc_msgSend_availabilityState(v7, v8, v9) & 1) == 0)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v10 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_FAULT, "Received buddy notice but still reports buddy incomplete.", buf, 2u);
    }
    dispatch_time_t v11 = dispatch_time(0, 5000000000);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4E16DC0;
    block[3] = &unk_1E64F05C8;
    id v13 = v7;
    dispatch_after(v11, MEMORY[0x1E4F14428], block);
  }
  objc_sync_exit(v7);

  os_activity_scope_leave(&state);
}

void sub_1C4E16350(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  os_activity_scope_leave((os_activity_scope_state_t)(v2 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_1C4E16374(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__systemMayNowBeReady(*(void **)(a1 + 32), a2, a3);
}

void sub_1C4E16864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1C4E169AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C4E169C4(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1A550] != -1) {
    dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
  }
  uint64_t v2 = *MEMORY[0x1E4F1A500];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1[4] + 8);
    int v8 = 138412290;
    uint64_t v9 = v7;
    _os_log_debug_impl(&dword_1C4CFF000, v2, OS_LOG_TYPE_DEBUG, "Notifying watchers of availability change. Watchers are %@", (uint8_t *)&v8, 0xCu);
  }
  if (a1[5])
  {
    unint64_t v4 = 0;
    do
    {
      id v5 = objc_msgSend_objectAtIndex_(*(void **)(a1[4] + 8), v3, v4);
      objc_msgSend_postSystemAvailabilityChanged_(v5, v6, a1[6]);

      ++v4;
    }
    while (v4 < a1[5]);
  }
}

void sub_1C4E16CAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4E16DC0(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__systemMayNowBeReady(*(void **)(a1 + 32), a2, a3);
}

uint64_t CKDPEncryptedMergeableValueReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(MEMORY[0x1E4F19F08]);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom() & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E17B98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4E17BAC(uint64_t a1, const char *a2)
{
  qword_1EBBCFC20 = objc_msgSend_dictionaryWithCapacity_(MEMORY[0x1E4F1CA60], a2, 4);
  return MEMORY[0x1F41817F8]();
}

void sub_1C4E17DEC(uint64_t a1)
{
  id WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    objc_msgSend_setDelegate_(WeakRetained[2], v2, 0);
    id WeakRetained = v3;
  }
}

void sub_1C4E17EEC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = objc_msgSend_apsConnection(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_publicToken(v4, v5, v6);

  char v8 = (void *)*MEMORY[0x1E4F1A548];
  if (v7)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v8);
    }
    unsigned int v9 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      int v16 = 138543362;
      id v17 = v7;
      _os_log_debug_impl(&dword_1C4CFF000, v9, OS_LOG_TYPE_DEBUG, "Returning public token %{public}@", (uint8_t *)&v16, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v8);
    }
    unint64_t v10 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      LOWORD(v16) = 0;
      _os_log_impl(&dword_1C4CFF000, v10, OS_LOG_TYPE_INFO, "No public token yet", (uint8_t *)&v16, 2u);
    }
    char v13 = objc_msgSend_completionBlocks(*(void **)(a1 + 32), v11, v12);
    BOOL v14 = _Block_copy(*(const void **)(a1 + 40));
    objc_msgSend_addObject_(v13, v15, (uint64_t)v14);
  }
}

void sub_1C4E182C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
}

void sub_1C4E182DC(uint64_t a1, const char *a2)
{
  objc_msgSend_notificationWithName_object_userInfo_(MEMORY[0x1E4F28EA0], a2, @"CKDPushConnectionDidReceivePublicTokenNotification", *(void *)(a1 + 32), 0);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  unint64_t v4 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v2, v3);
  objc_msgSend_postNotification_(v4, v5, (uint64_t)v6);
}

void sub_1C4E1835C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = objc_msgSend_completionBlocks(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_completionBlocks(*(void **)(a1 + 32), v5, v6);
  objc_msgSend_removeAllObjects(v7, v8, v9);

  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v10 = v4;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v17, v21, 16);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v18;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v18 != v14) {
          objc_enumerationMutation(v10);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v17 + 1) + 8 * v15) + 16))(*(void *)(*((void *)&v17 + 1) + 8 * v15));
        ++v15;
      }
      while (v13 != v15);
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v16, (uint64_t)&v17, v21, 16);
    }
    while (v13);
  }
}

id sub_1C4E18704(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  id v10 = (objc_class *)NSString;
  id v11 = a4;
  id v12 = [v10 alloc];
  uint64_t v14 = objc_msgSend_initWithFormat_arguments_(v12, v13, (uint64_t)v11, &a9);

  if (v14)
  {
    uint64_t v21 = *MEMORY[0x1E4F28568];
    v22[0] = v14;
    int v16 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v15, (uint64_t)v22, &v21, 1);
  }
  else
  {
    int v16 = 0;
  }
  long long v17 = objc_opt_class();
  long long v19 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v18, @"CKLogDomain", a3, v16);

  return v19;
}

id sub_1C4E18814(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  unint64_t v4 = objc_opt_new();
  objc_msgSend_setDateFormat_(v4, v5, (uint64_t)v3);

  objc_msgSend_setLenient_(v4, v6, 1);
  uint64_t v9 = objc_msgSend_systemTimeZone(MEMORY[0x1E4F1CAF0], v7, v8);
  objc_msgSend_setTimeZone_(v4, v10, (uint64_t)v9);

  uint64_t v13 = objc_msgSend_currentLocale(MEMORY[0x1E4F1CA20], v11, v12);
  objc_msgSend_setLocale_(v4, v14, (uint64_t)v13);

  return v4;
}

id sub_1C4E188C0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1C4E18A60;
  block[3] = &unk_1E64F1B50;
  void block[4] = a1;
  if (qword_1EBBCFC38 != -1) {
    dispatch_once(&qword_1EBBCFC38, block);
  }
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = (id)qword_1EBBCFC30;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v15, v20, 16);
  if (v7)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void *)v16;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v16 != v10) {
          objc_enumerationMutation(v5);
        }
        uint64_t v12 = objc_msgSend_dateFromString_(*(void **)(*((void *)&v15 + 1) + 8 * i), v8, (uint64_t)v4, (void)v15);
        if (v12)
        {
          uint64_t v13 = (void *)v12;
          goto LABEL_13;
        }
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v15, v20, 16);
      if (v9) {
        continue;
      }
      break;
    }
  }
  uint64_t v13 = 0;
LABEL_13:

  return v13;
}

void sub_1C4E18A60(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  id v3 = (void *)qword_1EBBCFC30;
  qword_1EBBCFC30 = v2;

  for (uint64_t i = 0; i != 5; ++i)
  {
    for (uint64_t j = 0; j != 5; ++j)
    {
      uint64_t v6 = objc_opt_new();
      objc_msgSend_setDateStyle_(v6, v7, i);
      objc_msgSend_setTimeStyle_(v6, v8, j);
      objc_msgSend_setLenient_(v6, v9, 1);
      uint64_t v12 = objc_msgSend_systemTimeZone(MEMORY[0x1E4F1CAF0], v10, v11);
      objc_msgSend_setTimeZone_(v6, v13, (uint64_t)v12);

      long long v16 = objc_msgSend_currentLocale(MEMORY[0x1E4F1CA20], v14, v15);
      objc_msgSend_setLocale_(v6, v17, (uint64_t)v16);

      objc_msgSend_addObject_((void *)qword_1EBBCFC30, v18, (uint64_t)v6);
    }
  }
  long long v20 = (void *)qword_1EBBCFC30;
  uint64_t v21 = objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v19, @"yyyy-MM-dd HH:mm");
  objc_msgSend_addObject_(v20, v22, (uint64_t)v21);

  uint64_t v23 = (void *)qword_1EBBCFC30;
  char v25 = objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v24, @"yyyy-MM-dd HH:mm:ss");
  objc_msgSend_addObject_(v23, v26, (uint64_t)v25);

  unsigned int v27 = (void *)qword_1EBBCFC30;
  uint64_t v29 = objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v28, @"HH:mm");
  objc_msgSend_addObject_(v27, v30, (uint64_t)v29);

  char v31 = (void *)qword_1EBBCFC30;
  uint64_t v33 = objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v32, @"HH:mm:ss");
  objc_msgSend_addObject_(v31, v34, (uint64_t)v33);

  BOOL v35 = (void *)qword_1EBBCFC30;
  uint64_t v37 = objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v36, @"yyyy-MM-dd HH:mm ZZZ");
  objc_msgSend_addObject_(v35, v38, (uint64_t)v37);

  uint64_t v39 = (void *)qword_1EBBCFC30;
  uint64_t v41 = objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v40, @"yyyy-MM-dd HH:mm:ss ZZZ");
  objc_msgSend_addObject_(v39, v42, (uint64_t)v41);

  long long v43 = (void *)qword_1EBBCFC30;
  int v45 = objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v44, @"yyyy-MM-dd HH:mm:ss.SSSSSSZZZ");
  objc_msgSend_addObject_(v43, v46, (uint64_t)v45);

  __int16 v47 = (void *)qword_1EBBCFC30;
  uint64_t v49 = objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v48, @"HH:mm ZZZ");
  objc_msgSend_addObject_(v47, v50, (uint64_t)v49);

  uint64_t v51 = (void *)qword_1EBBCFC30;
  objc_msgSend_ck_dateFormatterWithString_(*(void **)(a1 + 32), v52, @"HH:mm:ss ZZZ");
  id v54 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v51, v53, (uint64_t)v54);
}

uint64_t sub_1C4E18FF4(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        long long v17 = objc_alloc_init(CKCDPCodeServiceRequestProtectedCloudComputeMetadataCryptoSession);
        objc_msgSend_addCryptoSessions_(a1, v18, (uint64_t)v17);
        if (!PBReaderPlaceMark() || (sub_1C4FC0398((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1C4E1A7C8(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 != 2)
      {
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_47;
        }
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_39;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_41;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_41:
        uint64_t v32 = 8;
        goto LABEL_46;
      }
      uint64_t v29 = PBReaderReadString();
      unint64_t v30 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v29;

LABEL_47:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v24 = 0;
    unsigned int v25 = 0;
    uint64_t v20 = 0;
    *(unsigned char *)(a1 + 32) |= 2u;
    while (1)
    {
      uint64_t v26 = *v3;
      unint64_t v27 = *(void *)(a2 + v26);
      if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
      *(void *)(a2 + v26) = v27 + 1;
      v20 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0) {
        goto LABEL_43;
      }
      v24 += 7;
      BOOL v14 = v25++ >= 9;
      if (v14)
      {
        uint64_t v20 = 0;
        goto LABEL_45;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
    if (*(unsigned char *)(a2 + *v5)) {
      uint64_t v20 = 0;
    }
LABEL_45:
    uint64_t v32 = 16;
LABEL_46:
    *(void *)(a1 + v32) = v20;
    goto LABEL_47;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C4E1B7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4E1B7F8(uint64_t a1, char a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_noteOperationDidFinishWaitingOnPCS(WeakRetained, v7, v8);
  unsigned int v9 = (void *)*MEMORY[0x1E4F1A548];
  uint64_t v10 = *MEMORY[0x1E4F1A550];
  if (v5 || (a2 & 1) == 0)
  {
    if (v10 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v9);
    }
    BOOL v14 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      int v20 = 138543618;
      uint64_t v21 = v19;
      __int16 v22 = 2112;
      id v23 = v5;
      _os_log_error_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_ERROR, "User key sync to update signing identities failed for operation %{public}@: %@", (uint8_t *)&v20, 0x16u);
    }
    objc_msgSend_setError_(WeakRetained, v15, (uint64_t)v5);
  }
  else
  {
    if (v10 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v9);
    }
    uint64_t v11 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      int v20 = 138543362;
      uint64_t v21 = v13;
      _os_log_impl(&dword_1C4CFF000, v11, OS_LOG_TYPE_INFO, "User key sync to update signing identities succeeded for operation %{public}@", (uint8_t *)&v20, 0xCu);
    }
  }
  objc_msgSend_setDidSynchronizeSigningIdentities_(WeakRetained, v12, 1);
  char v18 = objc_msgSend_stateTransitionGroup(WeakRetained, v16, v17);
  dispatch_group_leave(v18);
}

void sub_1C4E1BBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C4E1BBF0(uint64_t a1, char a2, void *a3, void *a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_noteOperationDidFinishWaitingOnPCS(WeakRetained, v10, v11);
  unint64_t v12 = (void *)*MEMORY[0x1E4F1A548];
  uint64_t v13 = *MEMORY[0x1E4F1A550];
  if (v7 || (a2 & 1) == 0)
  {
    if (v13 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v12);
    }
    id v23 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v58 = v25;
      __int16 v59 = 2112;
      id v60 = v7;
      _os_log_impl(&dword_1C4CFF000, v23, OS_LOG_TYPE_INFO, "User key sync failed for operation %{public}@ with error %@", buf, 0x16u);
    }
    objc_msgSend_setDidSynchronizeUserKeyRegistry_(WeakRetained, v24, 0);
    char v28 = objc_msgSend_container(WeakRetained, v26, v27);
    char v31 = objc_msgSend_pcsManager(v28, v29, v30);
    int IsManatee = objc_msgSend_currentServiceIsManatee(v31, v32, v33);

    if (IsManatee)
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      uint64_t v37 = objc_msgSend_zonesWaitingOnKeyRegistrySync(WeakRetained, v35, v36, 0);
      uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v38, (uint64_t)&v52, v56, 16);
      if (v39)
      {
        uint64_t v42 = v39;
        uint64_t v43 = *(void *)v53;
        do
        {
          uint64_t v44 = 0;
          do
          {
            if (*(void *)v53 != v43) {
              objc_enumerationMutation(v37);
            }
            uint64_t v45 = *(void *)(*((void *)&v52 + 1) + 8 * v44);
            long long v46 = objc_msgSend_retryableErrorsByZoneID(WeakRetained, v40, v41);
            objc_msgSend_setObject_forKeyedSubscript_(v46, v47, (uint64_t)v7, v45);

            ++v44;
          }
          while (v42 != v44);
          uint64_t v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v40, (uint64_t)&v52, v56, 16);
        }
        while (v42);
      }
    }
    objc_msgSend_setError_(v8, v35, (uint64_t)v7);
    objc_msgSend_setOverallResult_(v8, v48, @"failure");
  }
  else
  {
    if (v13 != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v12);
    }
    BOOL v14 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v58 = v16;
      _os_log_impl(&dword_1C4CFF000, v14, OS_LOG_TYPE_INFO, "User key sync succeeded for operation %{public}@", buf, 0xCu);
    }
    objc_msgSend_setDidSynchronizeUserKeyRegistry_(WeakRetained, v15, 1);
    uint64_t v19 = objc_msgSend_zonesWaitingOnKeyRegistrySync(WeakRetained, v17, v18);
    objc_msgSend_removeAllObjects(v19, v20, v21);
  }
  objc_msgSend_setKeySyncAnalytics_(WeakRetained, v22, (uint64_t)v8);
  uint64_t v51 = objc_msgSend_stateTransitionGroup(WeakRetained, v49, v50);
  dispatch_group_leave(v51);
}

void sub_1C4E1C4E0(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), v5, v6);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    unsigned int v9 = objc_msgSend_zoneID(*(void **)(a1 + 40), v7, v8);
    (*((void (**)(id, void *, void, void))v10 + 2))(v10, v9, 0, *(void *)(a1 + 48));
  }
}

void sub_1C4E1D268(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1C4E1D2D0(id *a1, uint64_t a2, void *a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  if (!a2 || v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v25 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      id v28 = a1[4];
      *(_DWORD *)long long buf = 138412546;
      long long v53 = v28;
      __int16 v54 = 2112;
      id v55 = v5;
      _os_log_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_INFO, "Warn: Couldn't create a PCS object from zone data for zone %@: %@", buf, 0x16u);
    }
  }
  else
  {
    unsigned int v9 = objc_msgSend_protectionData(a1[5], v6, v7);
    uint64_t v11 = objc_msgSend_etagFromPCSData_(CKDPCSManager, v10, (uint64_t)v9);

    objc_msgSend_zoneishProtectionData(a1[5], v12, v13);
    id v5 = (id)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      uint64_t v16 = objc_msgSend_container(WeakRetained, v14, v15);
      uint64_t v19 = objc_msgSend_pcsManager(v16, v17, v18);
      __int16 v22 = objc_msgSend_zoneishProtectionData(a1[5], v20, v21);
      id v51 = 0;
      uint64_t v24 = (const void *)objc_msgSend_createPCSObjectFromData_ofType_sharedToPCS_error_(v19, v23, (uint64_t)v22, 1, a2, &v51);
      id v5 = v51;

      if (v5 || !v24)
      {
        if (*MEMORY[0x1E4F1A550] != -1) {
          dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
        }
        uint64_t v29 = (void *)*MEMORY[0x1E4F1A500];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_ERROR))
        {
          id v42 = a1[5];
          uint64_t v43 = v29;
          long long v46 = objc_msgSend_zoneID(v42, v44, v45);
          *(_DWORD *)long long buf = 138412546;
          long long v53 = v46;
          __int16 v54 = 2112;
          id v55 = v5;
          _os_log_error_impl(&dword_1C4CFF000, v43, OS_LOG_TYPE_ERROR, "Couldn't decrypt zoneish PCS for zone %@: %@", buf, 0x16u);
        }
      }
      else
      {
        id v5 = 0;
      }
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v30 = objc_msgSend_dataWithZone_(CKDZonePCSData, v14, (uint64_t)a1[5]);
    objc_msgSend_setPcs_(v30, v31, a2);
    objc_msgSend_setZoneishPCS_(v30, v32, (uint64_t)v24);
    objc_msgSend_setEtag_(v30, v33, (uint64_t)v11);
    objc_msgSend_setPCSData_forFetchedZoneID_(WeakRetained, v34, (uint64_t)v30, a1[4]);
    objc_msgSend_setZonePCS_(a1[5], v35, a2);
    objc_msgSend_setZoneishPCS_(a1[5], v36, (uint64_t)v24);
    if (v24) {
      CFRelease(v24);
    }
  }
  uint64_t v37 = objc_msgSend_saveCompletionBlock(WeakRetained, v26, v27);

  if (v37)
  {
    uint64_t v40 = objc_msgSend_callbackQueue(WeakRetained, v38, v39);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1C4E1D6BC;
    block[3] = &unk_1E64F0DF0;
    void block[4] = WeakRetained;
    id v48 = a1[4];
    id v49 = a1[5];
    id v50 = v5;
    dispatch_async(v40, block);
  }
  uint64_t v41 = objc_msgSend_stateTransitionGroup(a1[6], v38, v39);
  dispatch_group_leave(v41);
}

void sub_1C4E1D6BC(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
  }
}

void sub_1C4E1D744(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48), 0);
  }
}

void sub_1C4E1D7CC(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    id v4 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_DEBUG))
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_debug_impl(&dword_1C4CFF000, v4, OS_LOG_TYPE_DEBUG, "Failed to remove anonymous share. error: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = objc_msgSend_stateTransitionGroup(WeakRetained, v6, v7);
  dispatch_group_leave(v8);
}

void sub_1C4E1D8E0(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_saveCompletionBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
  }
}

void sub_1C4E1DC98(uint64_t a1, const char *a2, uint64_t a3)
{
  id v4 = objc_msgSend_deleteCompletionBlock(*(void **)(a1 + 32), a2, a3);

  if (v4)
  {
    objc_msgSend_deleteCompletionBlock(*(void **)(a1 + 32), v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void))v7 + 2))(v7, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1C4E1E4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v26 - 144));
  _Unwind_Resume(a1);
}

void sub_1C4E1E52C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  id v21 = a2;
  id v11 = a3;
  id v12 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v16 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v17 = objc_msgSend_recordZonesByZoneID(WeakRetained, v14, v15);
    uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(v17, v18, (uint64_t)v21);

    if (v19) {
      objc_msgSend__handleRecordZoneSaved_responseCode_serverCapabilities_expirationDate_expired_(v16, v20, (uint64_t)v21, v11, a4, v12, a6);
    }
    else {
      objc_msgSend__handleRecordZoneDeleted_responseCode_(v16, v20, (uint64_t)v21, v11);
    }
  }
}

void sub_1C4E1E61C(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v6 = objc_msgSend_error(v3, v4, v5);

    if (!v6)
    {
LABEL_19:
      uint64_t v29 = objc_msgSend_stateTransitionGroup(WeakRetained, v7, v8);
      dispatch_group_leave(v29);

      goto LABEL_20;
    }
    int v9 = objc_msgSend_error(v3, v7, v8);
    if ((objc_msgSend_needsSynchronizeSigningIdentities(WeakRetained, v10, v11) & 1) == 0)
    {
      uint64_t v16 = objc_msgSend_domain(v9, v12, v13);
      if (v16 == (void *)*MEMORY[0x1E4F19DD8] && objc_msgSend_code(v9, v14, v15) == 5000)
      {
        uint64_t v19 = objc_msgSend_description(v9, v17, v18);
        __int16 v22 = objc_msgSend_lowercaseString(v19, v20, v21);
        int v24 = objc_msgSend_containsString_(v22, v23, @"failed to create cryptographic signature");

        if (v24)
        {
          if (*MEMORY[0x1E4F1A550] != -1) {
            dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
          }
          uint64_t v25 = *MEMORY[0x1E4F1A500];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
          {
            int v30 = 138412290;
            char v31 = v9;
            _os_log_impl(&dword_1C4CFF000, v25, OS_LOG_TYPE_INFO, "Signing identity missing when modifying record zones: %@", (uint8_t *)&v30, 0xCu);
          }
          objc_msgSend_setNeedsSynchronizeSigningIdentities_(WeakRetained, v26, 1);
LABEL_18:

          goto LABEL_19;
        }
      }
      else
      {
      }
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v27 = *MEMORY[0x1E4F1A500];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A500], OS_LOG_TYPE_INFO))
    {
      int v30 = 138412290;
      char v31 = v9;
      _os_log_impl(&dword_1C4CFF000, v27, OS_LOG_TYPE_INFO, "Error modifying record zones: %@", (uint8_t *)&v30, 0xCu);
    }
    objc_msgSend_setError_(WeakRetained, v28, (uint64_t)v9);
    goto LABEL_18;
  }
LABEL_20:
}

void sub_1C4E1EC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1C4E1ECEC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1C4E1ECFC(uint64_t a1)
{
}

void sub_1C4E1ED04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend_noteOperationDidFinishWaitingOnPCS(WeakRetained, v8, v9);

  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v6;
  id v15 = v6;

  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v5;
  id v14 = v5;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1C4E1EDB4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend_pcs(*(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a2, a3);
  id v7 = (uint64_t *)MEMORY[0x1E4F19DD8];
  if (!*MEMORY[0x1E4F1A4E0]) {
    goto LABEL_8;
  }
  uint64_t v8 = objc_msgSend_deviceContext(*(void **)(a1 + 32), v4, v5);
  uint64_t v11 = objc_msgSend_testDeviceReference(v8, v9, v10);
  if (v11)
  {
    id v14 = (void *)v11;
    id v15 = objc_msgSend_zoneID(*(void **)(a1 + 40), v12, v13);
    uint64_t v18 = objc_msgSend_zoneName(v15, v16, v17);
    int isEqualToString = objc_msgSend_isEqualToString_(v18, v19, @"NO_ZONE_PCS_FOR_YOU");

    if (!isEqualToString) {
      goto LABEL_6;
    }
    uint64_t v23 = objc_msgSend_errorWithDomain_code_format_(MEMORY[0x1E4F1A280], v21, *v7, 5005, @"Couldn't create a new PCSShareProtectionRef because unit testing");
    uint64_t v24 = *(void *)(*(void *)(a1 + 72) + 8);
    uint64_t v8 = *(void **)(v24 + 40);
    *(void *)(v24 + 40) = v23;
  }

LABEL_6:
  uint64_t v25 = objc_msgSend_unitTestOverrides(*(void **)(a1 + 48), v21, v22);
  uint64_t v27 = objc_msgSend_objectForKeyedSubscript_(v25, v26, @"ForceAddCKIdentityToZonePCS");

  if (v27)
  {
    id v28 = objc_msgSend_pcsManager(*(void **)(a1 + 32), v4, v5);
    uint64_t v30 = objc_msgSend_addIdentityForService_toPCS_(v28, v29, 3, v6);
    uint64_t v31 = *(void *)(*(void *)(a1 + 72) + 8);
    uint64_t v32 = *(void **)(v31 + 40);
    *(void *)(v31 + 40) = v30;
  }
LABEL_8:
  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v33 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_ERROR))
    {
      id v83 = *(void **)(a1 + 40);
      int v84 = v33;
      id v87 = objc_msgSend_zoneID(v83, v85, v86);
      long long v88 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      *(_DWORD *)long long buf = 138412546;
      id v149 = v87;
      __int16 v150 = 2112;
      uint64_t v151 = v88;
      _os_log_error_impl(&dword_1C4CFF000, v84, OS_LOG_TYPE_ERROR, "Couldn't create a PCS object for the zone %@: %@", buf, 0x16u);
    }
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_20;
  }
  id v38 = objc_msgSend_pcsManager(*(void **)(a1 + 32), v4, v5);
  uint64_t v39 = *(void *)(*(void *)(a1 + 72) + 8);
  id obj = *(id *)(v39 + 40);
  uint64_t v37 = objc_msgSend_dataFromZonePCS_error_(v38, v40, v6, &obj);
  objc_storeStrong((id *)(v39 + 40), obj);

  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v43 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_ERROR))
    {
      id v126 = *(void **)(a1 + 40);
      id v127 = v43;
      id v130 = objc_msgSend_zoneID(v126, v128, v129);
      id v131 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      *(_DWORD *)long long buf = 138412546;
      id v149 = v130;
      __int16 v150 = 2112;
      uint64_t v151 = v131;
      _os_log_error_impl(&dword_1C4CFF000, v127, OS_LOG_TYPE_ERROR, "Error creating PCS data for zone %@: %@", buf, 0x16u);
    }
    uint64_t v36 = 0;
    goto LABEL_20;
  }
  id v51 = objc_msgSend_options(*(void **)(a1 + 32), v41, v42);
  int v54 = objc_msgSend_useZoneWidePCS(v51, v52, v53);

  if (v54)
  {
    uint64_t v57 = objc_msgSend_pcsManager(*(void **)(a1 + 32), v55, v56);
    uint64_t v58 = *(void *)(*(void *)(a1 + 72) + 8);
    id v146 = *(id *)(v58 + 40);
    id v60 = (const void *)objc_msgSend_createRecordPCSWithZonePCS_sharePCS_createLite_error_(v57, v59, v6, 0, 0, &v146);
    objc_storeStrong((id *)(v58 + 40), v146);

    uint64_t v61 = (dispatch_block_t *)MEMORY[0x1E4F1A548];
    uint64_t v62 = (void *)*MEMORY[0x1E4F1A548];
    uint64_t v63 = (void *)MEMORY[0x1E4F1A550];
    if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40))
    {
      if (*MEMORY[0x1E4F1A550] != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], v62);
      }
      id v7 = (uint64_t *)MEMORY[0x1E4F19DD8];
      uint64_t v64 = (void *)*MEMORY[0x1E4F1A528];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_ERROR))
      {
        id v132 = *(void **)(a1 + 40);
        long long v133 = v64;
        uint64_t v136 = objc_msgSend_zoneID(v132, v134, v135);
        uint64_t v137 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
        *(_DWORD *)long long buf = 138412546;
        id v149 = v136;
        __int16 v150 = 2112;
        uint64_t v151 = v137;
        _os_log_error_impl(&dword_1C4CFF000, v133, OS_LOG_TYPE_ERROR, "Couldn't create a zoneish PCS for zone %@: %@", buf, 0x16u);
      }
      char v65 = 0;
      uint64_t v36 = 0;
      if (!v60) {
        goto LABEL_57;
      }
LABEL_44:
      CFRelease(v60);
      if (v65) {
        goto LABEL_58;
      }
LABEL_20:
      uint64_t v44 = (void *)MEMORY[0x1E4F1A280];
      uint64_t v45 = *v7;
      uint64_t v46 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      __int16 v47 = objc_msgSend_zoneID(*(void **)(a1 + 40), v34, v35);
      id v49 = objc_msgSend_errorWithDomain_code_error_format_(v44, v48, v45, 5005, v46, @"Couldn't create new PCS blob for zone %@", v47);

      goto LABEL_21;
    }
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], v62);
    }
    uint64_t v108 = (os_log_t *)MEMORY[0x1E4F1A528];
    uint64_t v109 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
    {
      __int16 v112 = *(void **)(a1 + 40);
      id v113 = v109;
      id v116 = objc_msgSend_zoneID(v112, v114, v115);
      id v118 = objc_msgSend_protectionIdentifierFromShareProtection_(CKDPCSManager, v117, (uint64_t)v60);
      uint64_t v121 = objc_msgSend_CKUppercaseHexStringWithoutSpaces(v118, v119, v120);
      *(_DWORD *)long long buf = 138412546;
      id v149 = v116;
      __int16 v150 = 2112;
      uint64_t v151 = v121;
      _os_log_impl(&dword_1C4CFF000, v113, OS_LOG_TYPE_INFO, "Created zoneish PCS for zone %@ with key %@", buf, 0x16u);

      uint64_t v108 = (os_log_t *)MEMORY[0x1E4F1A528];
    }
    id v122 = objc_msgSend_pcsManager(*(void **)(a1 + 32), v110, v111);
    uint64_t v123 = *(void *)(*(void *)(a1 + 72) + 8);
    id v145 = *(id *)(v123 + 40);
    uint64_t v36 = objc_msgSend_dataFromRecordPCS_error_(v122, v124, (uint64_t)v60, &v145);
    objc_storeStrong((id *)(v123 + 40), v145);

    if (!v36 || *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40))
    {
      if (*v63 != -1) {
        dispatch_once(MEMORY[0x1E4F1A550], *v61);
      }
      id v7 = (uint64_t *)MEMORY[0x1E4F19DD8];
      os_log_t v125 = *v108;
      if (os_log_type_enabled(*v108, OS_LOG_TYPE_ERROR))
      {
        uint64_t v138 = *(void **)(a1 + 40);
        uint64_t v139 = v125;
        os_log_t v142 = objc_msgSend_zoneID(v138, v140, v141);
        uint64_t v143 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
        *(_DWORD *)long long buf = 138412546;
        id v149 = v142;
        __int16 v150 = 2112;
        uint64_t v151 = v143;
        _os_log_error_impl(&dword_1C4CFF000, v139, OS_LOG_TYPE_ERROR, "Couldn't create data from zoneish PCS for zone %@: %@", buf, 0x16u);
      }
      char v65 = 0;
      if (v60) {
        goto LABEL_44;
      }
      goto LABEL_57;
    }
    id v7 = (uint64_t *)MEMORY[0x1E4F19DD8];
  }
  else
  {
    uint64_t v36 = 0;
    id v60 = 0;
  }
  objc_msgSend_setProtectionData_(*(void **)(a1 + 40), v55, (uint64_t)v37);
  uint64_t v68 = objc_msgSend_protectionData(*(void **)(a1 + 40), v66, v67);
  uint64_t v70 = objc_msgSend_etagFromPCSData_(CKDPCSManager, v69, (uint64_t)v68);
  objc_msgSend_setProtectionEtag_(*(void **)(a1 + 40), v71, (uint64_t)v70);

  id v74 = objc_msgSend_deviceContext(*(void **)(a1 + 32), v72, v73);
  uint64_t v77 = objc_msgSend_testDeviceReference(v74, v75, v76);
  uint64_t v144 = v60;
  if (v77)
  {
    long long v80 = (void *)v77;
    uint64_t v81 = objc_msgSend_previousProtectionEtag(*(void **)(a1 + 40), v78, v79);

    if (v81) {
      goto LABEL_38;
    }
  }
  else
  {
  }
  objc_msgSend_setPreviousProtectionEtag_(*(void **)(a1 + 40), v82, 0);
LABEL_38:
  objc_msgSend_setZoneishProtectionData_(*(void **)(a1 + 40), v82, (uint64_t)v36);
  id v91 = objc_msgSend_deviceContext(*(void **)(a1 + 32), v89, v90);
  uint64_t v94 = objc_msgSend_testDeviceReference(v91, v92, v93);
  if (v94)
  {
    id v97 = (void *)v94;
    uint64_t v98 = v7;
    uint64_t v99 = objc_msgSend_zoneID(*(void **)(a1 + 40), v95, v96);
    id v102 = objc_msgSend_zoneName(v99, v100, v101);
    int v104 = objc_msgSend_isEqualToString_(v102, v103, @"NO_ZONE_PCS_FOR_SERVER");

    if (v104)
    {
      objc_msgSend_setProtectionData_(*(void **)(a1 + 40), v34, 0);
      objc_msgSend_setProtectionEtag_(*(void **)(a1 + 40), v105, 0);
      objc_msgSend_setPreviousProtectionEtag_(*(void **)(a1 + 40), v106, 0);
      objc_msgSend_setZoneishProtectionData_(*(void **)(a1 + 40), v107, 0);
    }
    char v65 = 1;
    id v7 = v98;
  }
  else
  {

    char v65 = 1;
  }
  id v60 = v144;
  if (v144) {
    goto LABEL_44;
  }
LABEL_57:
  if ((v65 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_58:
  id v49 = 0;
LABEL_21:
  uint64_t v50 = *(void *)(a1 + 56);
  if (v50) {
    (*(void (**)(uint64_t, void *))(v50 + 16))(v50, v49);
  }
}

void sub_1C4E1F8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C4E1F8F4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
  if (v5)
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    uint64_t v9 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void **)(a1 + 32);
      uint64_t v13 = v9;
      uint64_t v16 = objc_msgSend_zoneID(v12, v14, v15);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v101 = v16;
      _os_log_impl(&dword_1C4CFF000, v13, OS_LOG_TYPE_INFO, "Fetched pcs info for zone %@. Continuing with save for that zone.", buf, 0xCu);
    }
    uint64_t v17 = objc_msgSend_pcsData(v5, v10, v11);
    uint64_t v22 = objc_msgSend_etag(v5, v18, v19);
    if (!v17)
    {
      uint64_t v23 = objc_msgSend_container(*(void **)(a1 + 40), v20, v21);
      uint64_t v26 = objc_msgSend_pcsManager(v23, v24, v25);
      uint64_t v29 = objc_msgSend_pcs(v5, v27, v28);
      uint64_t v30 = *(void *)(*(void *)(a1 + 64) + 8);
      id obj = *(id *)(v30 + 40);
      uint64_t v17 = objc_msgSend_dataFromZonePCS_error_(v26, v31, v29, &obj);
      objc_storeStrong((id *)(v30 + 40), obj);

      uint64_t v33 = objc_msgSend_etagFromPCSData_(CKDPCSManager, v32, (uint64_t)v17);

      uint64_t v22 = (void *)v33;
    }
    objc_msgSend_setProtectionData_(*(void **)(a1 + 32), v20, (uint64_t)v17);
    objc_msgSend_setProtectionEtag_(*(void **)(a1 + 32), v34, (uint64_t)v22);
    uint64_t v37 = objc_msgSend_etag(v5, v35, v36);
    uint64_t v40 = objc_msgSend_container(*(void **)(a1 + 40), v38, v39);
    uint64_t v43 = objc_msgSend_deviceContext(v40, v41, v42);
    uint64_t v46 = objc_msgSend_testDeviceReference(v43, v44, v45);
    if (v46)
    {
      id v49 = (void *)v46;
      uint64_t v50 = objc_msgSend_previousProtectionEtag(*(void **)(a1 + 32), v47, v48);

      if (!v50) {
        goto LABEL_19;
      }
      uint64_t v40 = objc_msgSend_previousProtectionEtag(*(void **)(a1 + 32), v51, v52);

      if (!objc_msgSend_isEqualToString_(v40, v53, @"NO_ETAG_FOR_YOU"))
      {
        uint64_t v37 = v40;
LABEL_19:
        objc_msgSend_setPreviousProtectionEtag_(*(void **)(a1 + 32), v51, (uint64_t)v37);
        uint64_t v62 = objc_msgSend_zoneishPCSData(v5, v60, v61);
        if (objc_msgSend_zoneishPCS(v5, v63, v64) && !v62)
        {
          uint64_t v67 = objc_msgSend_container(*(void **)(a1 + 40), v65, v66);
          uint64_t v70 = objc_msgSend_pcsManager(v67, v68, v69);
          uint64_t v73 = objc_msgSend_zoneishPCS(v5, v71, v72);
          uint64_t v74 = *(void *)(*(void *)(a1 + 64) + 8);
          id v98 = *(id *)(v74 + 40);
          uint64_t v62 = objc_msgSend_dataFromRecordPCS_error_(v70, v75, v73, &v98);
          objc_storeStrong((id *)(v74 + 40), v98);
        }
        objc_msgSend_setZoneishProtectionData_(*(void **)(a1 + 32), v65, (uint64_t)v62);
        uint64_t v78 = objc_msgSend_pcs(v5, v76, v77);
        objc_msgSend_setZonePCS_(*(void **)(a1 + 32), v79, v78);
        uint64_t v82 = objc_msgSend_zoneishPCS(v5, v80, v81);
        objc_msgSend_setZoneishPCS_(*(void **)(a1 + 32), v83, v82);
        uint64_t v86 = objc_msgSend_zonePCSModificationDate(v5, v84, v85);
        objc_msgSend_setZonePCSModificationDate_(*(void **)(a1 + 32), v87, (uint64_t)v86);

        goto LABEL_23;
      }
      uint64_t v37 = 0;
    }
    else
    {
    }
    goto LABEL_19;
  }
  int v54 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v54 && !objc_msgSend_CKIsNotFoundError(v54, v7, v8))
  {
    if (*MEMORY[0x1E4F1A550] != -1) {
      dispatch_once(MEMORY[0x1E4F1A550], (dispatch_block_t)*MEMORY[0x1E4F1A548]);
    }
    long long v88 = (void *)*MEMORY[0x1E4F1A528];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F1A528], OS_LOG_TYPE_INFO))
    {
      id v89 = *(void **)(a1 + 32);
      uint64_t v90 = v88;
      uint64_t v93 = objc_msgSend_zoneID(v89, v91, v92);
      uint64_t v94 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v101 = v93;
      __int16 v102 = 2112;
      uint64_t v103 = v94;
      _os_log_impl(&dword_1C4CFF000, v90, OS_LOG_TYPE_INFO, "Warn: Couldn't fetch PCS data for zone %@: %@. Refusing to save zone.", buf, 0x16u);
    }
  }
  else if (objc_msgSend_databaseScope(*(void **)(a1 + 40), v7, v8) == 2)
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
    uint64_t v56 = *(void *)(a1 + 32);
    id v55 = *(void **)(a1 + 40);
    v95[0] = MEMORY[0x1E4F143A8];
    v95[1] = 3221225472;
    v95[2] = sub_1C4E1FE10;
    v95[3] = &unk_1E64F06A8;
    uint64_t v97 = *(void *)(a1 + 64);
    id v96 = *(id *)(a1 + 48);
    objc_msgSend__createNewPCSForZone_completionHandler_(v55, v57, v56, v95);
    uint64_t v58 = *(void *)(*(void *)(a1 + 56) + 8);
    __int16 v59 = *(void **)(v58 + 40);
    *(void *)(v58 + 40) = 0;
  }
LABEL_23:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}