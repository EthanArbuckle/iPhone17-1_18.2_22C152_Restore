id sub_25B3F51EC(uint64_t a1, void *a2, int a3, int a4, int a5)
{
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x2_t *v16;
  float32x2_t v17;
  float32x2_t v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void *v24;
  float32x2_t v25;
  uint64_t v26;
  float32x2_t *v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  uint64_t v32;
  float32x2_t v33;
  uint64_t v34;
  int64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64x2_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t i;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (***v69)(void, const void *);
  void (***v70)(void, const void *);
  void (**v71)(void, const void *);
  uint64_t v72;
  uint64_t j;
  long long v74;
  long long v75;
  long long v76;
  float32x2_t *v77;
  float32x2_t *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  float32x2_t v82;
  int v83;
  int v84;
  uint64_t v85;
  char *v86;
  void *v87;
  uint64_t v88;
  float32x2_t *v89;
  float32x2_t *v90;
  void (**v91)(float32x2_t *);
  void *v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  void *v110;
  uint64_t k;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  void *v115;
  uint64_t v116;
  uint64_t m;
  uint64_t v118;
  const char *v119;
  void *v120;
  uint64_t n;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  void *v125;
  uint64_t v126;
  uint64_t ii;
  uint64_t v128;
  const char *v129;
  void *v130;
  uint64_t jj;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  void *v135;
  void *v136;
  int v138;
  id v139;
  id v140;
  uint64_t v141;
  void *__p;
  unint64_t v143;
  char v144;
  void *v145;
  long long src;
  long long v147;
  long long v148;
  void *v149[2];
  void *v150;
  void *v151;
  void *v152;
  int8x8_t v153[3];
  int64x2_t v154;
  long long v155;
  long long v156;
  long long v157;
  long long v158;
  long long v159;
  long long v160;
  uint64_t v161;
  void *v162;
  long long v163;
  long long v164;
  long long v165;
  long long v166;
  long long v167;
  long long v168;
  int64x2_t v169;
  long long v170;
  long long v171;
  long long v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned char v178[216];
  uint64_t v179;
  uint64_t vars8;

  v179 = *MEMORY[0x263EF8340];
  v9 = a2;
  if (a1)
  {
    v139 = v9;
    v12 = objc_msgSend_copy(v9, v10, v11);
    v138 = a5;
    v163 = 0u;
    v164 = 0u;
    v165 = 0u;
    v166 = 0u;
    v167 = 0u;
    v168 = 0u;
    v169 = 0u;
    v170 = 0u;
    v171 = 0u;
    v172 = 0u;
    v162 = &unk_2708F1E98;
    v173 = 0;
    v174 = &unk_2708F1F38;
    v175 = 0;
    v177 = 0;
    v176 = 0;
    sub_25B3F6148((uint64_t)v178);
    memset(&v178[176], 0, 24);
    v140 = v12;
    sub_25B47BC48((uint64_t *)&v162, v140);
    sub_25B58B480(a1 + 8, *((uint64_t *)&v164 + 1), v165, (uint64_t)&v162);
    sub_25B58B480(a1 + 8, v166, *((uint64_t *)&v166 + 1), (uint64_t)&v162);
    sub_25B58B480(a1 + 8, *((uint64_t *)&v167 + 1), v168, (uint64_t)&v162);
    v14 = v169.i64[1];
    v15 = v169.i64[0];
    if (v169.i64[0] != v169.i64[1])
    {
      while (1)
      {
        sub_25B4D6A60((uint64_t)&v154, (float32x2_t *)v15, (float32x2_t **)&v164 + 1, (float *)(a1 + 16));
        if (!v154.i8[0]) {
          break;
        }
        v16 = (float32x2_t *)sub_25B491A40((uint64_t)&v162, (unsigned __int8 **)&v154.i64[1]);
        *(float32x2_t *)&v19 = sub_25B40DF5C(*(float32x2_t *)(v15 + 16), *(double *)(v15 + 24), v16[2], v16[3]);
        v20 = v19;
        DWORD2(v20) = *(_DWORD *)(v15 + 64);
        v22 = v21;
        DWORD2(v22) = *(_DWORD *)(v15 + 68);
        *(void *)(v15 + 16) = v19;
        *(void *)(v15 + 24) = v21;
        DWORD2(v19) = DWORD2(v22);
        DWORD2(v21) = DWORD2(v20);
        *(_OWORD *)(v15 + 32) = v20;
        *(_OWORD *)(v15 + 48) = v22;
        v23 = *(void *)(v15 + 8);
        src = v19;
        v147 = v22;
        v148 = v21;
        *(_OWORD *)v149 = v20;
        if (v23) {
          objc_copyStruct((void *)(v23 + 272), &src, 64, 1, 0);
        }
        v24 = objc_msgSend_parentIdentifier(*(void **)&v16[1], *(const char **)&v17, *(void *)&v18);
        sub_25B491958(v15, v24);

        v25 = v16[1];
        if (v25) {
          v25.i32[0] = *(_DWORD *)(*(void *)&v25 + 120);
        }
        v26 = *(void *)(v15 + 8);
        if (v26) {
          *(_DWORD *)(v26 + 120) = v25.i32[0];
        }
LABEL_22:

        if (SHIBYTE(v155) < 0) {
          operator delete((void *)v154.i64[1]);
        }
        v15 += 176;
        if (v15 == v14) {
          goto LABEL_25;
        }
      }
      sub_25B4D6A60((uint64_t)&v141, (float32x2_t *)v15, (float32x2_t **)&v163, (float *)(a1 + 16));
      if ((_BYTE)v141)
      {
        v27 = (float32x2_t *)sub_25B490C80((uint64_t)&v162, (unsigned __int8 **)&__p);
        *(float32x2_t *)&v28 = sub_25B40DF5C(*(float32x2_t *)(v15 + 16), *(double *)(v15 + 24), v27[2], v27[3]);
        v29 = v28;
        DWORD2(v29) = *(_DWORD *)(v15 + 64);
        v31 = v30;
        DWORD2(v31) = *(_DWORD *)(v15 + 68);
        *(void *)(v15 + 16) = v28;
        *(void *)(v15 + 24) = v30;
        DWORD2(v28) = DWORD2(v31);
        DWORD2(v30) = DWORD2(v29);
        *(_OWORD *)(v15 + 32) = v29;
        *(_OWORD *)(v15 + 48) = v31;
        v32 = *(void *)(v15 + 8);
        src = v28;
        v147 = v31;
        v148 = v30;
        *(_OWORD *)v149 = v29;
        if (v32) {
          objc_copyStruct((void *)(v32 + 272), &src, 64, 1, 0);
        }
        sub_25B491958(v15, v145);
        v33 = v27[1];
        if (v33) {
          v33.i32[0] = *(_DWORD *)(*(void *)&v33 + 116);
        }
        v34 = *(void *)(v15 + 8);
        if (!v34) {
          goto LABEL_20;
        }
      }
      else
      {
        sub_25B491958(v15, 0);
        v34 = *(void *)(v15 + 8);
        if (!v34) {
          goto LABEL_20;
        }
        v33.i32[0] = -1;
      }
      *(_DWORD *)(v34 + 120) = v33.i32[0];
LABEL_20:

      if (v144 < 0) {
        operator delete(__p);
      }
      goto LABEL_22;
    }
LABEL_25:
    if (a3)
    {
      *(void *)&v155 = 0;
      v35 = 0uLL;
      v154 = 0u;
      v37 = v169.i64[1];
      v36 = v169.i64[0];
      if (v169.i64[0] == v169.i64[1])
      {
        v52 = 0;
        v51 = vdupq_n_s64(v169.u64[0]);
      }
      else
      {
        do
        {
          v38 = *(unsigned __int8 *)(v36 + 175);
          v39 = *(void *)(v36 + 160);
          if ((v38 & 0x80u) == 0) {
            v40 = *(unsigned __int8 *)(v36 + 175);
          }
          else {
            v40 = *(void *)(v36 + 160);
          }
          if (v40)
          {
            v41 = *((void *)&v164 + 1);
            v42 = v165;
            while (v41 != v42)
            {
              v43 = *(unsigned __int8 *)(v41 + 175);
              v44 = (char)v43;
              if ((v43 & 0x80u) != 0) {
                v43 = *(void *)(v41 + 160);
              }
              if (v43) {
                v45 = v40 == v43;
              }
              else {
                v45 = 0;
              }
              if (v45)
              {
                if (v44 >= 0) {
                  v46 = (unsigned __int8 *)(v41 + 152);
                }
                else {
                  v46 = *(unsigned __int8 **)(v41 + 152);
                }
                if ((v38 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)(v36 + 152), v46, v39)) {
                    goto LABEL_55;
                  }
                }
                else
                {
                  if (!v38) {
                    goto LABEL_55;
                  }
                  v47 = 0;
                  while (*(unsigned __int8 *)(v36 + v47 + 152) == v46[v47])
                  {
                    if (v38 == ++v47) {
                      goto LABEL_55;
                    }
                  }
                }
              }
              v41 += 176;
            }
            sub_25B47C6E4((uint64_t)&src, v36, v13);
            v49 = v154.i64[1];
            if (v154.i64[1] >= (unint64_t)v155)
            {
              v50 = sub_25B47C818(v154.i64, (uint64_t)&src, v48);
            }
            else
            {
              sub_25B47C6E4(v154.i64[1], (uint64_t)&src, v48);
              v50 = v49 + 176;
            }
            v154.i64[1] = v50;
            sub_25B3F5FE8((uint64_t)&src);
          }
LABEL_55:
          v36 += 176;
        }
        while (v36 != v37);
        v51 = v169;
        v35 = v154;
        v52 = v155;
      }
      v169 = v35;
      v154 = v51;
      v53 = v170;
      *(void *)&v170 = v52;
      *(void *)&v155 = v53;
      *(void *)&src = &v154;
      sub_25B3F5F28((void ***)&src);
    }
    if (a4)
    {
      v154 = 0uLL;
      *(void *)&v155 = 0;
      v54 = *((void *)&v164 + 1);
      v55 = v165;
      if (*((void *)&v164 + 1) != (void)v165)
      {
        do
        {
          v57 = v169.i64[1];
          for (i = v169.i64[0]; i != v57; i += 176)
          {
            v58 = *(unsigned __int8 *)(i + 175);
            v13 = *(void *)(i + 160);
            if ((v58 & 0x80u) == 0) {
              v59 = *(unsigned __int8 *)(i + 175);
            }
            else {
              v59 = *(void *)(i + 160);
            }
            if (v59)
            {
              v60 = *(unsigned __int8 *)(v54 + 175);
              v61 = (char)v60;
              if ((v60 & 0x80u) != 0) {
                v60 = *(void *)(v54 + 160);
              }
              if (v60 && v59 == v60)
              {
                if (v61 >= 0) {
                  v63 = (unsigned __int8 *)(v54 + 152);
                }
                else {
                  v63 = *(unsigned __int8 **)(v54 + 152);
                }
                if ((v58 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)(i + 152), v63, v13)) {
                    goto LABEL_88;
                  }
                }
                else
                {
                  if (!*(unsigned char *)(i + 175)) {
                    goto LABEL_88;
                  }
                  v64 = 0;
                  while (*(unsigned __int8 *)(i + v64 + 152) == v63[v64])
                  {
                    if (v58 == ++v64) {
                      goto LABEL_88;
                    }
                  }
                }
              }
            }
          }
          sub_25B47C6E4((uint64_t)&src, v54, v13);
          v66 = v154.i64[1];
          if (v154.i64[1] >= (unint64_t)v155)
          {
            v67 = sub_25B47C818(v154.i64, (uint64_t)&src, v65);
          }
          else
          {
            sub_25B47C6E4(v154.i64[1], (uint64_t)&src, v65);
            v67 = v66 + 176;
          }
          v154.i64[1] = v67;
          sub_25B3F5FE8((uint64_t)&src);
LABEL_88:
          v54 += 176;
        }
        while (v54 != v55);
        v54 = *((void *)&v164 + 1);
        if ((void)v165 == *((void *)&v164 + 1))
        {
          v54 = v165;
        }
        else
        {
          v68 = v165 - 176;
          v69 = (void (***)(void, const void *))(v165 - 176);
          v70 = (void (***)(void, const void *))(v165 - 176);
          do
          {
            v71 = *v70;
            v70 -= 22;
            (*v71)(v69, v63);
            v68 -= 176;
            v45 = v69 == (void (***)(void, const void *))v54;
            v69 = v70;
          }
          while (!v45);
        }
      }
      *(void *)&v165 = v54;
      v72 = v154.i64[1];
      for (j = v154.i64[0]; j != v72; j += 176)
      {
        if (v54 >= *((void *)&v165 + 1))
        {
          v54 = sub_25B47C818((uint64_t *)&v164 + 1, j, v13);
        }
        else
        {
          sub_25B47C6E4(v54, j, v13);
          v54 += 176;
        }
        *(void *)&v165 = v54;
      }
      *(void *)&src = &v154;
      sub_25B3F5F28((void ***)&src);
    }
    if (v138)
    {
      v74 = *(_OWORD *)(a1 + 96);
      v158 = *(_OWORD *)(a1 + 80);
      v159 = v74;
      v160 = *(_OWORD *)(a1 + 112);
      v161 = *(void *)(a1 + 128);
      v75 = *(_OWORD *)(a1 + 32);
      v154 = *(int64x2_t *)(a1 + 16);
      v155 = v75;
      v76 = *(_OWORD *)(a1 + 64);
      v156 = *(_OWORD *)(a1 + 48);
      v157 = v76;
      v154.i32[3] = 1056964608;
      v141 = 0;
      __p = 0;
      v143 = 0;
      v77 = (float32x2_t *)*((void *)&v164 + 1);
      v78 = (float32x2_t *)v165;
      if (*((void *)&v164 + 1) != (void)v165)
      {
        do
        {
          v79 = v168;
          if (*((void *)&v167 + 1) == (void)v168) {
            goto LABEL_120;
          }
          v80 = 0;
          v81 = *((void *)&v167 + 1) + 176;
          do
          {
            sub_25B4D4E4C((uint64_t)&src, v77 + 2, (float32x2_t *)(v81 - 160), (float *)v154.i32);
            if (!LOBYTE(v149[0])
              || (sub_25B4D5ABC(v153, v77 + 2, *(float32x2_t *)(v81 - 160), *(float32x2_t *)(v81 - 152)), v153[0].i8[0])
              && (v82 = vsub_f32((float32x2_t)v153[1], (float32x2_t)v153[2]), sqrtf(vaddv_f32(vmul_f32(v82, v82))) >= 0.5))
            {
              v83 = 0;
            }
            else
            {
              v80 = 1;
              v83 = 1;
            }
            if (v151)
            {
              v152 = v151;
              operator delete(v151);
            }
            if (v149[1])
            {
              v150 = v149[1];
              operator delete(v149[1]);
            }
            if (v81 == v79) {
              v84 = 1;
            }
            else {
              v84 = v83;
            }
            v81 += 176;
          }
          while (v84 != 1);
          if ((v80 & 1) == 0)
          {
LABEL_120:
            sub_25B47C6E4((uint64_t)&src, (uint64_t)v77, v13);
            v86 = (char *)__p;
            if ((unint64_t)__p >= v143)
            {
              v87 = (void *)sub_25B47C818(&v141, (uint64_t)&src, v85);
            }
            else
            {
              sub_25B47C6E4((uint64_t)__p, (uint64_t)&src, v85);
              v87 = v86 + 176;
            }
            __p = v87;
            sub_25B3F5FE8((uint64_t)&src);
          }
          v77 += 22;
        }
        while (v77 != v78);
        v77 = (float32x2_t *)*((void *)&v164 + 1);
        if ((void)v165 == *((void *)&v164 + 1))
        {
          v77 = (float32x2_t *)v165;
        }
        else
        {
          v88 = v165 - 176;
          v89 = (float32x2_t *)(v165 - 176);
          v90 = (float32x2_t *)(v165 - 176);
          do
          {
            v91 = (void (**)(float32x2_t *))*v90;
            v90 -= 22;
            (*v91)(v89);
            v88 -= 176;
            v45 = v89 == v77;
            v89 = v90;
          }
          while (!v45);
        }
      }
      *(void *)&v165 = v77;
      v93 = v141;
      v92 = __p;
      while ((void *)v93 != v92)
      {
        if ((unint64_t)v77 >= *((void *)&v165 + 1))
        {
          v77 = (float32x2_t *)sub_25B47C818((uint64_t *)&v164 + 1, v93, v13);
        }
        else
        {
          sub_25B47C6E4((uint64_t)v77, v93, v13);
          v77 += 22;
        }
        *(void *)&v165 = v77;
        v93 += 176;
      }
      *(void *)&src = &v141;
      sub_25B3F5F28((void ***)&src);
    }

    v96 = objc_msgSend_array(MEMORY[0x263EFF980], v94, v95);
    v99 = objc_msgSend_array(MEMORY[0x263EFF980], v97, v98);
    v102 = objc_msgSend_array(MEMORY[0x263EFF980], v100, v101);
    v105 = objc_msgSend_array(MEMORY[0x263EFF980], v103, v104);
    v110 = objc_msgSend_array(MEMORY[0x263EFF980], v106, v107);
    v112 = *((void *)&v163 + 1);
    for (k = v163; k != v112; k += 176)
    {
      v113 = objc_msgSend_copy(*(void **)(k + 8), v108, v109);
      v115 = (void *)v113;
      if (v113) {
        *(unsigned char *)(v113 + 104) = 0;
      }
      objc_msgSend_addObject_(v96, v114, v113);
    }
    v116 = *((void *)&v164 + 1);
    for (m = v165; v116 != m; v116 += 176)
    {
      v118 = objc_msgSend_copy(*(void **)(v116 + 8), v108, v109);
      v120 = (void *)v118;
      if (v118) {
        *(unsigned char *)(v118 + 104) = 3;
      }
      objc_msgSend_addObject_(v99, v119, v118);
    }
    v122 = *((void *)&v166 + 1);
    for (n = v166; n != v122; n += 176)
    {
      v123 = objc_msgSend_copy(*(void **)(n + 8), v108, v109);
      v125 = (void *)v123;
      if (v123) {
        *(unsigned char *)(v123 + 104) = 1;
      }
      objc_msgSend_addObject_(v102, v124, v123);
    }
    v126 = *((void *)&v167 + 1);
    for (ii = v168; v126 != ii; v126 += 176)
    {
      v128 = objc_msgSend_copy(*(void **)(v126 + 8), v108, v109);
      v130 = (void *)v128;
      if (v128) {
        *(unsigned char *)(v128 + 104) = 2;
      }
      objc_msgSend_addObject_(v105, v129, v128);
    }
    v132 = v169.i64[1];
    for (jj = v169.i64[0]; jj != v132; jj += 176)
    {
      v133 = objc_msgSend_copy(*(void **)(jj + 8), v108, v109);
      v135 = (void *)v133;
      if (v133) {
        *(unsigned char *)(v133 + 104) = 4;
      }
      objc_msgSend_addObject_(v110, v134, v133);
    }
    sub_25B4E664C((uint64_t)v139, v96);
    sub_25B4E666C((uint64_t)v139, v99);
    sub_25B4E665C((uint64_t)v139, v102);
    sub_25B477C30((uint64_t)v139, v105);
    sub_25B477C10((uint64_t)v139, v110);

    sub_25B3F5E50((uint64_t)&v162);
    v136 = 0;
  }
  else
  {
    v136 = v9;
    v139 = 0;
  }

  return v139;
}

void sub_25B3F5CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_25B3F5E50((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_25B3F5E50(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1E98;
  v2 = (void **)(a1 + 8);
  v4 = (void **)(a1 + 384);
  sub_25B3F5F28(&v4);
  sub_25B3F5FE8(a1 + 208);
  sub_25B59355C((void *)(a1 + 176));
  v4 = (void **)(a1 + 152);
  sub_25B3F6050(&v4);
  v4 = (void **)(a1 + 128);
  sub_25B3F5F28(&v4);
  v4 = (void **)(a1 + 104);
  sub_25B3F5F28(&v4);
  v4 = (void **)(a1 + 80);
  sub_25B3F5F28(&v4);
  v4 = (void **)(a1 + 56);
  sub_25B3F5F28(&v4);
  v4 = (void **)(a1 + 32);
  sub_25B3F5F28(&v4);
  v4 = v2;
  sub_25B3F5F28(&v4);
  return a1;
}

void sub_25B3F5F28(void ***a1)
{
  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 176;
      v7 = v4 - 176;
      v8 = v4 - 176;
      do
      {
        v9 = *(void (***)(char *))v8;
        v8 -= 176;
        (*v9)(v7);
        v6 -= 176;
        BOOL v10 = v7 == v2;
        v7 = v8;
      }
      while (!v10);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_25B3F5FE8(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1F58;
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }

  return a1;
}

void sub_25B3F6050(void ***a1)
{
  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B3F60D0(uint64_t a1)
{
  sub_25B3F5FE8(a1);

  JUMPOUT(0x261163EE0);
}

void sub_25B3F610C(uint64_t a1)
{
  sub_25B3F5E50(a1);

  JUMPOUT(0x261163EE0);
}

double sub_25B3F6148(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1F58;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 70) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a1 + 80) = _D0;
  *(_OWORD *)(a1 + 88) = xmmword_25B5F10D0;
  double result = NAN;
  *(void *)(a1 + 104) = 0xFFFFFFFF00000000;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 175) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  return result;
}

void sub_25B3F61B8(void *a1)
{
}

void sub_25B3F61CC(double a1, __n128 a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v364 = *MEMORY[0x263EF8340];
  if (a5[1])
  {
    __p = 0;
    v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    __int32 v9 = 0;
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * v8 <= 0x5555555555555555)
      {
        uint64_t v10 = *a5 + (v8 << 6);
        __int32 v351 = v9;
        __int32 v353 = a2.n128_i32[3];
        simd_float4x4 v365 = __invert_f4(*(simd_float4x4 *)v10);
        int32x4_t v11 = vzip1q_s32((int32x4_t)v365.columns[0], (int32x4_t)v365.columns[2]);
        v365.columns[0] = (simd_float4)vzip2q_s32((int32x4_t)v365.columns[0], (int32x4_t)v365.columns[2]);
        v365.columns[2] = (simd_float4)vzip1q_s32((int32x4_t)v365.columns[1], (int32x4_t)v365.columns[3]);
        v365.columns[1] = (simd_float4)vzip2q_s32((int32x4_t)v365.columns[1], (int32x4_t)v365.columns[3]);
        v365.columns[0] = (simd_float4)vaddq_f32((float32x4_t)vzip2q_s32((int32x4_t)v365.columns[0], (int32x4_t)v365.columns[1]), vaddq_f32((float32x4_t)vzip1q_s32((int32x4_t)v365.columns[0], (int32x4_t)v365.columns[1]), vmlaq_f32(vmulq_f32((float32x4_t)vzip1q_s32(v11, (int32x4_t)v365.columns[2]), (float32x4_t)0), (float32x4_t)0, (float32x4_t)vzip2q_s32(v11, (int32x4_t)v365.columns[2]))));
        v365.columns[1] = (simd_float4)vmulq_f32((float32x4_t)v365.columns[0], (float32x4_t)v365.columns[0]);
        v365.columns[0] = (simd_float4)vmulq_n_f32((float32x4_t)v365.columns[0], 1.0/ sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v365.columns[1], 2), vaddq_f32((float32x4_t)v365.columns[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v365.columns[1].f32, 1))).f32[0]));
        v365.columns[1].i64[0] = 0x3F0000003F000000;
        v365.columns[1].i64[1] = 0x3F0000003F000000;
        float32x4_t v342 = vmlaq_f32(*(float32x4_t *)(v10 + 48), (float32x4_t)v365.columns[1], (float32x4_t)v365.columns[0]);
        simd_float4 v345 = *(simd_float4 *)(v10 + 48);
        v365.columns[0] = v345;
        v365.columns[0].i32[3] = v351;
        v365.columns[1] = (simd_float4)v342;
        v365.columns[1].i32[3] = v353;
        unsigned __int32 v352 = v353;
        __int32 v354 = v365.columns[0].i32[3];
        v365.columns[0] = (simd_float4)vsubq_f32((float32x4_t)v365.columns[1], (float32x4_t)v365.columns[0]);
        v365.columns[1] = (simd_float4)vmulq_f32((float32x4_t)v365.columns[0], (float32x4_t)v365.columns[0]);
        v365.columns[0] = (simd_float4)vmulq_f32((float32x4_t)v365.columns[0], (float32x4_t)xmmword_25B5F10E0);
        float v12 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v365.columns[1], 2), vaddq_f32((float32x4_t)v365.columns[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v365.columns[1].f32, 1))).f32[0]);
        LODWORD(v13) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v365.columns[0], 2), vaddq_f32((float32x4_t)v365.columns[0], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v365.columns[0].f32, 1))).u32[0];
        if (v12 < 0.000001) {
          float v12 = 0.000001;
        }
        float v14 = v13 / v12;
        if (v14 <= 1.0) {
          float v15 = v14;
        }
        else {
          float v15 = 1.0;
        }
        if (v14 >= -1.0) {
          float v16 = v15;
        }
        else {
          float v16 = -1.0;
        }
        float v17 = fabsf(acosf(v16));
        if (v17 <= 2.5307 && v17 >= 0.61087)
        {
          *(void *)&long long v18 = v345.i64[0];
          *((void *)&v18 + 1) = v342.i64[0];
          if ((unint64_t)v6 >= v7)
          {
            long long v346 = v18;
            uint64_t v19 = (v6 - __p) >> 4;
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 60) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v7 - (void)__p) >> 3 > v20) {
              unint64_t v20 = (uint64_t)(v7 - (void)__p) >> 3;
            }
            if (v7 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v20;
            }
            if (v21) {
              unint64_t v21 = (unint64_t)sub_25B3FFAEC(v21);
            }
            else {
              uint64_t v22 = 0;
            }
            v23 = (char *)(v21 + 16 * v19);
            *(_OWORD *)v23 = v346;
            v24 = v23 + 16;
            if (v6 == __p)
            {
              v25 = __p;
            }
            else
            {
              v25 = __p;
              do
              {
                long long v26 = *((_OWORD *)v6 - 1);
                v6 -= 16;
                *((_OWORD *)v23 - 1) = v26;
                v23 -= 16;
              }
              while (v6 != __p);
            }
            unint64_t v7 = v21 + 16 * v22;
            if (v25) {
              operator delete(v25);
            }
            __p = v23;
            v6 = v24;
          }
          else
          {
            *(_OWORD *)v6 = v18;
            v6 += 16;
          }
        }
        a2.n128_u32[3] = v352;
        __int32 v9 = v354;
      }
      ++v8;
      int v27 = (int)v6;
    }
    while (v8 < a5[1]);
  }
  else
  {
    int v27 = 0;
  }
  int v328 = v27;
  uint64_t v28 = a4;
  v331 = (uint64_t *)(a4 + 320);
  while (1)
  {
    v29 = *(int **)(v28 + 440);
    v30 = *(int **)(v28 + 448);
    if (v29 != v30)
    {
      v31 = 0;
      v32 = 0;
      v335 = 0;
      unint64_t v340 = 0;
      v349 = 0;
      unint64_t v343 = 0;
      v33 = 0;
      v34 = 0;
      size_t __len = 0;
      while (1)
      {
        v347 = v32;
        while (1)
        {
          int v35 = *v29;
          int v36 = v29[1];
          v37 = sub_25B3F9CFC((void *)(a4 + 464), *v29, v36);
          uint64_t v38 = *v331;
          if (*v331)
          {
            v39 = (float32x2_t *)v37;
            v40 = (float32x2_t *)(v37 + 3);
            uint64_t v41 = a4 + 320;
            uint64_t v42 = *v331;
            do
            {
              int v43 = *(_DWORD *)(v42 + 32);
              BOOL v44 = v43 < v35;
              if (v43 >= v35) {
                v45 = (uint64_t *)v42;
              }
              else {
                v45 = (uint64_t *)(v42 + 8);
              }
              if (!v44) {
                uint64_t v41 = v42;
              }
              uint64_t v42 = *v45;
            }
            while (*v45);
            if ((uint64_t *)v41 != v331 && *(_DWORD *)(v41 + 32) <= v35)
            {
              uint64_t v46 = a4 + 320;
              do
              {
                int v47 = *(_DWORD *)(v38 + 32);
                BOOL v48 = v47 < v36;
                if (v47 >= v36) {
                  v49 = (uint64_t *)v38;
                }
                else {
                  v49 = (uint64_t *)(v38 + 8);
                }
                if (!v48) {
                  uint64_t v46 = v38;
                }
                uint64_t v38 = *v49;
              }
              while (*v49);
              if ((uint64_t *)v46 != v331 && *(_DWORD *)(v46 + 32) <= v36 && v39[15].i8[0] && !v39[11].i8[0])
              {
                float v50 = fabsf(sub_25B3FCCE0(v40, v39 + 7, 0));
                if (v50 <= 110.0 && v50 >= 70.0) {
                  break;
                }
              }
            }
          }
          v29 += 2;
          if (v29 == v30)
          {
            v32 = v347;
            goto LABEL_276;
          }
        }
        v52 = (void *)v39[16];
        float32x2_t v53 = v39[4];
        v362[0] = (void *)v39[3];
        v362[1] = v52;
        long long v363 = xmmword_25B5F10F0;
        *(void *)&long long v356 = v52;
        *((float32x2_t *)&v356 + 1) = v53;
        *(_OWORD *)v357 = xmmword_25B5F10F0;
        uint64_t v54 = ((char *)v347 - (char *)v31) >> 5;
        v320 &= 0xFFFFFFFFFFFFFF00;
        BOOL v55 = sub_25B3FD284(v320, 0, (float32x2_t *)v362, v31, v54);
        unint64_t v56 = (unint64_t)__b;
        BOOL v322 = v55;
        if (!v55)
        {
          if ((unint64_t)v347 >= v340)
          {
            unint64_t v58 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 59) {
              goto LABEL_560;
            }
            if ((uint64_t)(v340 - (void)v31) >> 4 > v58) {
              unint64_t v58 = (uint64_t)(v340 - (void)v31) >> 4;
            }
            if (v340 - (unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v59 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59) {
              unint64_t v59 = (unint64_t)sub_25B3FBC9C(v59);
            }
            else {
              uint64_t v60 = 0;
            }
            v61 = (float32x2_t *)(v59 + 32 * v54);
            *(_OWORD *)v61->f32 = *(_OWORD *)v362;
            *(_OWORD *)v61[2].f32 = v363;
            if (v347 == v31)
            {
              v65 = (float32x2_t *)(v59 + 32 * v54);
            }
            else
            {
              unint64_t v62 = v59 + 32 * v54;
              v63 = v347;
              do
              {
                long long v64 = *(_OWORD *)v63[-2].f32;
                v65 = (float32x2_t *)(v62 - 32);
                *(_OWORD *)(v62 - 32) = *(_OWORD *)v63[-4].f32;
                *(_OWORD *)(v62 - 16) = v64;
                v63 -= 4;
                v62 -= 32;
              }
              while (v63 != v31);
            }
            unint64_t v340 = v59 + 32 * v60;
            v347 = v61 + 4;
            if (v31) {
              operator delete(v31);
            }
            v31 = v65;
            unint64_t v56 = (unint64_t)__b;
          }
          else
          {
            long long v57 = v363;
            *(_OWORD *)v347->f32 = *(_OWORD *)v362;
            *(_OWORD *)v347[2].f32 = v57;
            v347 += 4;
          }
          if ((unint64_t)v335 >= v343)
          {
            uint64_t v67 = (v335 - v349) >> 2;
            unint64_t v68 = v67 + 1;
            if ((unint64_t)(v67 + 1) >> 62) {
              goto LABEL_561;
            }
            if ((uint64_t)(v343 - (void)v349) >> 1 > v68) {
              unint64_t v68 = (uint64_t)(v343 - (void)v349) >> 1;
            }
            if (v343 - (unint64_t)v349 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v69 = v68;
            }
            if (v69) {
              unint64_t v69 = (unint64_t)sub_25B3FBC64(v69);
            }
            else {
              uint64_t v70 = 0;
            }
            v71 = (_DWORD *)(v69 + 4 * v67);
            _DWORD *v71 = v39[5].i32[1];
            v66 = v71 + 1;
            if (v335 == v349)
            {
              v73 = v349;
            }
            else
            {
              v72 = v335;
              v73 = v349;
              do
              {
                *--v71 = *((_DWORD *)v72 - 1);
                v72 -= 4;
              }
              while (v72 != v349);
            }
            unint64_t v343 = v69 + 4 * v70;
            if (v73)
            {
              v336 = v66;
              operator delete(v73);
              v66 = v336;
            }
            v349 = (char *)v71;
            unint64_t v56 = (unint64_t)__b;
          }
          else
          {
            *(_DWORD *)v335 = v39[5].i32[1];
            v66 = v335 + 4;
          }
          uint64_t v54 = ((char *)v347 - (char *)v31) >> 5;
          v335 = (char *)v66;
        }
        __b = (void *)(v56 & 0xFFFFFFFFFFFFFF00);
        BOOL v74 = sub_25B3FD284(v56 & 0xFFFFFFFFFFFFFF00, 0, (float32x2_t *)&v356, v31, v54);
        if (v74) {
          break;
        }
        BOOL v317 = v74;
        if ((unint64_t)v347 >= v340)
        {
          unint64_t v76 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 59) {
LABEL_560:
          }
            sub_25B3FBC4C();
          if ((uint64_t)(v340 - (void)v31) >> 4 > v76) {
            unint64_t v76 = (uint64_t)(v340 - (void)v31) >> 4;
          }
          if (v340 - (unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v77 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v77 = v76;
          }
          if (v77) {
            unint64_t v77 = (unint64_t)sub_25B3FBC9C(v77);
          }
          else {
            uint64_t v78 = 0;
          }
          v79 = (float32x2_t *)(v77 + 32 * v54);
          *(_OWORD *)v79->f32 = v356;
          *(_OWORD *)v79[2].f32 = *(_OWORD *)v357;
          if (v347 == v31)
          {
            v83 = (float32x2_t *)(v77 + 32 * v54);
          }
          else
          {
            unint64_t v80 = v77 + 32 * v54;
            v81 = v347;
            do
            {
              long long v82 = *(_OWORD *)v81[-2].f32;
              v83 = (float32x2_t *)(v80 - 32);
              *(_OWORD *)(v80 - 32) = *(_OWORD *)v81[-4].f32;
              *(_OWORD *)(v80 - 16) = v82;
              v81 -= 4;
              v80 -= 32;
            }
            while (v81 != v31);
          }
          unint64_t v340 = v77 + 32 * v78;
          v347 = v79 + 4;
          if (v31) {
            operator delete(v31);
          }
          v31 = v83;
          BOOL v74 = v317;
        }
        else
        {
          long long v75 = *(_OWORD *)v357;
          *(_OWORD *)v347->f32 = v356;
          *(_OWORD *)v347[2].f32 = v75;
          v347 += 4;
        }
        if ((unint64_t)v335 < v343)
        {
          *(_DWORD *)v335 = v39[5].i32[1];
          v329 = v335 + 4;
          goto LABEL_132;
        }
        uint64_t v85 = (v335 - v349) >> 2;
        unint64_t v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 62) {
LABEL_561:
        }
          sub_25B3FBC4C();
        if ((uint64_t)(v343 - (void)v349) >> 1 > v86) {
          unint64_t v86 = (uint64_t)(v343 - (void)v349) >> 1;
        }
        if (v343 - (unint64_t)v349 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v87 = v86;
        }
        if (v87) {
          unint64_t v87 = (unint64_t)sub_25B3FBC64(v87);
        }
        else {
          uint64_t v88 = 0;
        }
        v89 = (char *)(v87 + 4 * v85);
        *(_DWORD *)v89 = v39[5].i32[1];
        v329 = v89 + 4;
        if (v335 == v349)
        {
          v91 = v349;
        }
        else
        {
          v90 = v335;
          v91 = v349;
          do
          {
            *((_DWORD *)v89 - 1) = *((_DWORD *)v90 - 1);
            v89 -= 4;
            v90 -= 4;
          }
          while (v90 != v349);
        }
        unint64_t v343 = v87 + 4 * v88;
        if (v91) {
          operator delete(v91);
        }
        v349 = v89;
        BOOL v84 = v322;
        BOOL v74 = v317;
LABEL_150:
        int v318 = v84 && v74;
        if (v84 && v74) {
          goto LABEL_153;
        }
        if ((unint64_t)v34 < __len)
        {
          *v34++ = v35;
LABEL_153:
          v323 = v34;
          goto LABEL_169;
        }
        uint64_t v92 = v34 - v33;
        unint64_t v93 = v92 + 1;
        if ((unint64_t)(v92 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(__len - (void)v33) >> 1 > v93) {
          unint64_t v93 = (uint64_t)(__len - (void)v33) >> 1;
        }
        if (__len - (unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v94 = v93;
        }
        if (v94) {
          unint64_t v94 = (unint64_t)sub_25B3FBC64(v94);
        }
        else {
          uint64_t v95 = 0;
        }
        v96 = (int *)(v94 + 4 * v92);
        int *v96 = v35;
        v323 = v96 + 1;
        while (v34 != v33)
        {
          int v97 = *--v34;
          *--v96 = v97;
        }
        size_t __len = v94 + 4 * v95;
        if (v33) {
          operator delete(v33);
        }
        v33 = v96;
LABEL_169:
        float32x2_t v98 = v39[16];
        float32x2_t v99 = v39[8];
        *(float32x2_t *)&long long v360 = v39[7];
        *((float32x2_t *)&v360 + 1) = v98;
        long long v361 = xmmword_25B5F10F0;
        *(float32x2_t *)&long long v358 = v98;
        *((float32x2_t *)&v358 + 1) = v99;
        long long v359 = xmmword_25B5F10F0;
        uint64_t v100 = ((char *)v347 - (char *)v31) >> 5;
        v319 &= 0xFFFFFFFFFFFFFF00;
        BOOL v101 = sub_25B3FD284(v319, 0, (float32x2_t *)&v360, v31, v100);
        unint64_t v102 = (unint64_t)v325;
        BOOL v337 = v101;
        if (!v101)
        {
          if ((unint64_t)v347 >= v340)
          {
            unint64_t v104 = v100 + 1;
            if ((unint64_t)(v100 + 1) >> 59) {
              goto LABEL_562;
            }
            if ((uint64_t)(v340 - (void)v31) >> 4 > v104) {
              unint64_t v104 = (uint64_t)(v340 - (void)v31) >> 4;
            }
            if (v340 - (unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v105 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v105 = v104;
            }
            if (v105) {
              unint64_t v105 = (unint64_t)sub_25B3FBC9C(v105);
            }
            else {
              uint64_t v106 = 0;
            }
            v107 = (float32x2_t *)(v105 + 32 * v100);
            *(_OWORD *)v107->f32 = v360;
            *(_OWORD *)v107[2].f32 = v361;
            if (v347 == v31)
            {
              v111 = (float32x2_t *)(v105 + 32 * v100);
            }
            else
            {
              unint64_t v108 = v105 + 32 * v100;
              v109 = v347;
              do
              {
                long long v110 = *(_OWORD *)v109[-2].f32;
                v111 = (float32x2_t *)(v108 - 32);
                *(_OWORD *)(v108 - 32) = *(_OWORD *)v109[-4].f32;
                *(_OWORD *)(v108 - 16) = v110;
                v109 -= 4;
                v108 -= 32;
              }
              while (v109 != v31);
            }
            unint64_t v340 = v105 + 32 * v106;
            v347 = v107 + 4;
            if (v31) {
              operator delete(v31);
            }
            v31 = v111;
            unint64_t v102 = (unint64_t)v325;
          }
          else
          {
            long long v103 = v361;
            *(_OWORD *)v347->f32 = v360;
            *(_OWORD *)v347[2].f32 = v103;
            v347 += 4;
          }
          if ((unint64_t)v329 >= v343)
          {
            uint64_t v113 = (v329 - v349) >> 2;
            unint64_t v114 = v113 + 1;
            if ((unint64_t)(v113 + 1) >> 62) {
              goto LABEL_563;
            }
            if ((uint64_t)(v343 - (void)v349) >> 1 > v114) {
              unint64_t v114 = (uint64_t)(v343 - (void)v349) >> 1;
            }
            if (v343 - (unint64_t)v349 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v115 = v114;
            }
            if (v115) {
              unint64_t v115 = (unint64_t)sub_25B3FBC64(v115);
            }
            else {
              uint64_t v116 = 0;
            }
            v117 = (char *)(v115 + 4 * v113);
            *(_DWORD *)v117 = v39[9].i32[1];
            v112 = v117 + 4;
            if (v329 == v349)
            {
              v119 = v349;
            }
            else
            {
              v118 = v329;
              v119 = v349;
              do
              {
                *((_DWORD *)v117 - 1) = *((_DWORD *)v118 - 1);
                v117 -= 4;
                v118 -= 4;
              }
              while (v118 != v349);
            }
            unint64_t v343 = v115 + 4 * v116;
            if (v119) {
              operator delete(v119);
            }
            v349 = v117;
            unint64_t v102 = (unint64_t)v325;
          }
          else
          {
            *(_DWORD *)v329 = v39[9].i32[1];
            v112 = v329 + 4;
          }
          uint64_t v100 = ((char *)v347 - (char *)v31) >> 5;
          v329 = v112;
        }
        v325 = (void *)(v102 & 0xFFFFFFFFFFFFFF00);
        BOOL v120 = sub_25B3FD284(v102 & 0xFFFFFFFFFFFFFF00, 0, (float32x2_t *)&v358, v31, v100);
        if (v120)
        {
          v121 = v329;
        }
        else
        {
          if ((unint64_t)v347 >= v340)
          {
            unint64_t v123 = v100 + 1;
            if ((unint64_t)(v100 + 1) >> 59) {
LABEL_562:
            }
              sub_25B3FBC4C();
            if ((uint64_t)(v340 - (void)v31) >> 4 > v123) {
              unint64_t v123 = (uint64_t)(v340 - (void)v31) >> 4;
            }
            if (v340 - (unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v124 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v124 = v123;
            }
            if (v124) {
              unint64_t v124 = (unint64_t)sub_25B3FBC9C(v124);
            }
            else {
              uint64_t v125 = 0;
            }
            v126 = (float32x2_t *)(v124 + 32 * v100);
            *(_OWORD *)v126->f32 = v358;
            *(_OWORD *)v126[2].f32 = v359;
            if (v347 == v31)
            {
              v130 = (float32x2_t *)(v124 + 32 * v100);
            }
            else
            {
              unint64_t v127 = v124 + 32 * v100;
              v128 = v347;
              do
              {
                long long v129 = *(_OWORD *)v128[-2].f32;
                v130 = (float32x2_t *)(v127 - 32);
                *(_OWORD *)(v127 - 32) = *(_OWORD *)v128[-4].f32;
                *(_OWORD *)(v127 - 16) = v129;
                v128 -= 4;
                v127 -= 32;
              }
              while (v128 != v31);
            }
            unint64_t v340 = v124 + 32 * v125;
            v347 = v126 + 4;
            if (v31) {
              operator delete(v31);
            }
            v31 = v130;
          }
          else
          {
            long long v122 = v359;
            *(_OWORD *)v347->f32 = v358;
            *(_OWORD *)v347[2].f32 = v122;
            v347 += 4;
          }
          if ((unint64_t)v329 >= v343)
          {
            uint64_t v131 = (v329 - v349) >> 2;
            unint64_t v132 = v131 + 1;
            if ((unint64_t)(v131 + 1) >> 62) {
LABEL_563:
            }
              sub_25B3FBC4C();
            if ((uint64_t)(v343 - (void)v349) >> 1 > v132) {
              unint64_t v132 = (uint64_t)(v343 - (void)v349) >> 1;
            }
            if (v343 - (unint64_t)v349 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v133 = v132;
            }
            if (v133) {
              unint64_t v133 = (unint64_t)sub_25B3FBC64(v133);
            }
            else {
              uint64_t v134 = 0;
            }
            v135 = (char *)(v133 + 4 * v131);
            *(_DWORD *)v135 = v39[9].i32[1];
            v121 = v135 + 4;
            if (v329 == v349)
            {
              v137 = v349;
            }
            else
            {
              v136 = v329;
              v137 = v349;
              do
              {
                *((_DWORD *)v135 - 1) = *((_DWORD *)v136 - 1);
                v135 -= 4;
                v136 -= 4;
              }
              while (v136 != v349);
            }
            unint64_t v343 = v133 + 4 * v134;
            if (v137) {
              operator delete(v137);
            }
            v349 = v135;
          }
          else
          {
            *(_DWORD *)v329 = v39[9].i32[1];
            v121 = v329 + 4;
          }
        }
        BOOL v138 = v337;
        v335 = v121;
        int v139 = !v138;
        int v140 = !v120;
        if (!v138 || v140)
        {
          if ((unint64_t)v323 >= __len)
          {
            uint64_t v141 = v323 - v33;
            unint64_t v142 = v141 + 1;
            if ((unint64_t)(v141 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(__len - (void)v33) >> 1 > v142) {
              unint64_t v142 = (uint64_t)(__len - (void)v33) >> 1;
            }
            if (__len - (unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v143 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v143 = v142;
            }
            if (v143) {
              unint64_t v143 = (unint64_t)sub_25B3FBC64(v143);
            }
            else {
              uint64_t v144 = 0;
            }
            v145 = (int *)(v143 + 4 * v141);
            int *v145 = v36;
            v34 = v145 + 1;
            v146 = v323;
            if (v323 == v33)
            {
              v32 = v347;
            }
            else
            {
              v32 = v347;
              do
              {
                int v147 = *--v146;
                *--v145 = v147;
              }
              while (v146 != v33);
            }
            size_t __len = v143 + 4 * v144;
            if (v33) {
              operator delete(v33);
            }
            v33 = v145;
            goto LABEL_272;
          }
          int *v323 = v36;
          v34 = v323 + 1;
        }
        else
        {
          v34 = v323;
        }
        v32 = v347;
LABEL_272:
        if (((v318 ^ 1 | v139 | v140) & 1) == 0)
        {
          v29 += 2;
          if (v29 != v30) {
            continue;
          }
        }
        goto LABEL_276;
      }
      v329 = v335;
LABEL_132:
      BOOL v84 = v322;
      goto LABEL_150;
    }
    v31 = 0;
    v32 = 0;
    v349 = 0;
    v33 = 0;
    v34 = 0;
LABEL_276:
    v362[1] = 0;
    v362[0] = 0;
    *(void *)&long long v363 = 0;
    sub_25B3FC724(v362, v33, (uint64_t)v34, v34 - v33);
    sub_25B3FBD64((uint64_t)&v356, (uint64_t)v362);
    if (v362[0]) {
      operator delete(v362[0]);
    }
    long long v149 = v356;
    v150 = (int *)v356;
    if ((void)v356 == *((void *)&v356 + 1))
    {
      char v151 = 0;
      if (!(void)v356) {
        goto LABEL_282;
      }
    }
    else
    {
      do
        sub_25B3F9000(a4, *v150++);
      while (v150 != *((int **)&v149 + 1));
      char v151 = 1;
      if (!(void)v149) {
        goto LABEL_282;
      }
    }
    operator delete((void *)v149);
LABEL_282:
    if (v32 != v31)
    {
      if ((unint64_t)(((char *)v32 - (char *)v31) >> 5) <= 1) {
        uint64_t v152 = 1;
      }
      else {
        uint64_t v152 = ((char *)v32 - (char *)v31) >> 5;
      }
      v153 = v31 + 1;
      v32 = (float32x2_t *)v349;
      do
      {
        *(float32x2_t *)&long long v148 = *v153;
        float32x2_t v154 = vsub_f32(v153[-1], *v153);
        if (sqrtf(vaddv_f32(vmul_f32(v154, v154))) >= 0.03)
        {
          int v155 = sub_25B3FD470((float32x2_t **)a4, v153 - 1, 0.1);
          int v156 = sub_25B3FD470((float32x2_t **)a4, v153, 0.1);
          if (v155 != v156)
          {
            sub_25B3FD8A4((uint64_t)v362, a4, v155, v156, v32->i32[0], v153[-1], *v153);
            char v151 = 1;
          }
        }
        v32 = (float32x2_t *)((char *)v32 + 4);
        v153 += 4;
        --v152;
      }
      while (v152);
    }
    if (v33) {
      operator delete(v33);
    }
    if (v349) {
      operator delete(v349);
    }
    if (v31) {
      operator delete(v31);
    }
    uint64_t v28 = a4;
    if ((v151 & 1) == 0)
    {
      v157 = *(void **)(a4 + 160);
      v158 = (void *)(a4 + 168);
      if (v157 == (void *)(a4 + 168))
      {
        v171 = *(uint64_t ***)(a4 + 200);
        int v161 = v328;
        if (v171) {
          goto LABEL_342;
        }
      }
      else
      {
        uint64_t v159 = *(void *)(a4 + 144);
        v160 = *(void **)(a4 + 160);
        int v161 = v328;
        do
        {
          uint64_t v162 = *((int *)v160 + 8);
          if (!v159) {
            goto LABEL_313;
          }
          uint64_t v163 = a4 + 144;
          uint64_t v164 = v159;
          do
          {
            int v165 = *(_DWORD *)(v164 + 32);
            BOOL v166 = v165 < (int)v162;
            if (v165 >= (int)v162) {
              v167 = (uint64_t *)v164;
            }
            else {
              v167 = (uint64_t *)(v164 + 8);
            }
            if (!v166) {
              uint64_t v163 = v164;
            }
            uint64_t v164 = *v167;
          }
          while (*v167);
          if (v163 != a4 + 144 && *(_DWORD *)(v163 + 32) <= (int)v162) {
            unint64_t v168 = *(void *)(v163 + 56);
          }
          else {
LABEL_313:
          }
            unint64_t v168 = 0;
          if (*((unsigned char *)v160 + 96)) {
            BOOL v169 = 1;
          }
          else {
            BOOL v169 = v168 > 1;
          }
          char v170 = v169;
          *((unsigned char *)v160 + 96) = v170;
          v171 = *(uint64_t ***)(a4 + 200);
          if (!v169 && v171)
          {
            v172 = *(float32x2_t **)(a4 + 200);
            while (1)
            {
              BOOL v173 = v172[2].i32[0] == v162 || v172[2].i32[1] == v162;
              if (!v173)
              {
                float32x2_t v174 = *(float32x2_t *)(*(void *)a4 + 8 * v162);
                float32x2_t v175 = v172[3];
                float32x2_t v176 = v172[4];
                float32x2_t v177 = vsub_f32(v176, v175);
                float v178 = vaddv_f32(vmul_f32(vsub_f32(v174, v175), v177));
                float v179 = vaddv_f32(vmul_f32(v177, v177));
                if (v179 < 0.000001) {
                  float v179 = 0.000001;
                }
                float32x2_t v180 = vmla_n_f32(v175, v177, v178 / v179);
                if (vaddv_f32(vmul_f32(vsub_f32(v180, v175), vsub_f32(v180, v176))) <= 0.0)
                {
                  float32x2_t v181 = vsub_f32(v174, v180);
                  if (sqrtf(vaddv_f32(vmul_f32(v181, v181))) < 0.15) {
                    break;
                  }
                }
              }
              v172 = (float32x2_t *)*v172;
              if (!v172) {
                goto LABEL_335;
              }
            }
            *((unsigned char *)v160 + 96) = 1;
          }
LABEL_335:
          v182 = (void *)v160[1];
          if (v182)
          {
            do
            {
              v183 = v182;
              v182 = (void *)*v182;
            }
            while (v182);
          }
          else
          {
            do
            {
              v183 = (void *)v160[2];
              BOOL v173 = *v183 == (void)v160;
              v160 = v183;
            }
            while (!v173);
          }
          v160 = v183;
        }
        while (v183 != v158);
        if (v171)
        {
LABEL_342:
          v184 = 0;
          v185 = 0;
          v186 = 0;
          do
          {
            v187 = *(float32x2_t **)a4;
            uint64_t v188 = *((int *)v171 + 4);
            v32 = (float32x2_t *)*((int *)v171 + 5);
            if (v185 >= v184)
            {
              v189 = v186;
              uint64_t v190 = ((char *)v185 - (char *)v186) >> 5;
              unint64_t v191 = v190 + 1;
              if ((unint64_t)(v190 + 1) >> 59) {
                sub_25B3FBC4C();
              }
              if (((char *)v184 - (char *)v189) >> 4 > v191) {
                unint64_t v191 = ((char *)v184 - (char *)v189) >> 4;
              }
              if ((unint64_t)((char *)v184 - (char *)v189) >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v192 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v192 = v191;
              }
              v193 = (char *)sub_25B3FBC9C(v192);
              v195 = (float32x2_t *)&v193[32 * v190];
              float32x2_t *v195 = v187[v188];
              v195[1] = v187[(void)v32];
              *(_OWORD *)v195[2].f32 = xmmword_25B5F10F0;
              if (v185 == v189)
              {
                v189 = v185;
                v186 = (float32x2_t *)&v193[32 * v190];
                int v161 = v328;
              }
              else
              {
                v196 = (float32x2_t *)&v193[32 * v190];
                int v161 = v328;
                do
                {
                  long long v148 = *(_OWORD *)v185[-2].f32;
                  *(_OWORD *)v196[-4].f32 = *(_OWORD *)v185[-4].f32;
                  *(_OWORD *)v196[-2].f32 = v148;
                  v196 -= 4;
                  v185 -= 4;
                }
                while (v185 != v189);
                v186 = v196;
              }
              v184 = (float32x2_t *)&v193[32 * v194];
              v185 = v195 + 4;
              if (v189) {
                operator delete(v189);
              }
            }
            else
            {
              float32x2_t *v185 = v187[v188];
              v185[1] = v187[(void)v32];
              *(_OWORD *)v185[2].f32 = xmmword_25B5F10F0;
              v185 += 4;
              int v161 = v328;
            }
            v171 = (uint64_t **)*v171;
          }
          while (v171);
          v157 = *(void **)(a4 + 160);
LABEL_362:
          if (v157 == v158)
          {
            v211 = (uint64_t *)a4;
          }
          else
          {
            v197 = 0;
            __lena = 0;
            v326 = 0;
            v348 = v186;
            do
            {
              if (!*((unsigned char *)v157 + 96))
              {
                v198 = v157 + 4;
                if (__lena >= v197)
                {
                  uint64_t v199 = (__lena - v326) >> 3;
                  unint64_t v200 = v199 + 1;
                  if ((unint64_t)(v199 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  if ((v197 - v326) >> 2 > v200) {
                    unint64_t v200 = (v197 - v326) >> 2;
                  }
                  if ((unint64_t)(v197 - v326) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v201 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v201 = v200;
                  }
                  if (v201)
                  {
                    if (v201 >> 61) {
                      sub_25B3FA70C();
                    }
                    v202 = (char *)operator new(8 * v201);
                  }
                  else
                  {
                    v202 = 0;
                  }
                  v32 = (float32x2_t *)&v202[8 * v199];
                  float32x2_t *v32 = (float32x2_t)v198;
                  v203 = (unsigned int *)&v32[1];
                  if (__lena == v326)
                  {
                    int v161 = v328;
                    v204 = v326;
                  }
                  else
                  {
                    int v161 = v328;
                    v204 = v326;
                    v205 = __lena;
                    do
                    {
                      float32x2_t v206 = *(float32x2_t *)(v205 - 8);
                      v205 -= 8;
                      v32[-1] = v206;
                      --v32;
                    }
                    while (v205 != v326);
                  }
                  v197 = &v202[8 * v201];
                  if (v204) {
                    operator delete(v204);
                  }
                  __lena = (char *)v203;
                  v326 = (char *)v32;
                }
                else
                {
                  *(void *)__lena = v198;
                  __lena += 8;
                  int v161 = v328;
                }
              }
              v207 = (void *)v157[1];
              if (v207)
              {
                do
                {
                  v208 = v207;
                  v207 = (void *)*v207;
                }
                while (v207);
              }
              else
              {
                do
                {
                  v208 = (void *)v157[2];
                  BOOL v173 = *v208 == (void)v157;
                  v157 = v208;
                }
                while (!v173);
              }
              v157 = v208;
            }
            while (v208 != v158);
            v209 = __lena;
            if (v326 == __lena)
            {
              v211 = (uint64_t *)a4;
            }
            else
            {
              v350 = 0;
              v210 = 0;
              unint64_t v341 = 0;
              uint64_t v344 = ((char *)v185 - (char *)v186) >> 5;
              v338 = (int **)v326;
              v211 = (uint64_t *)a4;
              do
              {
                uint64_t v212 = v211[25];
                if (v212)
                {
                  do
                  {
                    uint64_t v213 = **v338;
                    int v214 = *(_DWORD *)(v212 + 16);
                    v330 = (uint64_t *)v212;
                    if (v213 == v214)
                    {
                      uint64_t v215 = v212;
                      uint64_t v216 = *v211;
                      v217 = (void **)(*v211 + 8 * v213);
                      int v214 = *(_DWORD *)(v215 + 20);
                    }
                    else
                    {
                      if (v213 != *(_DWORD *)(v212 + 20)) {
                        goto LABEL_442;
                      }
                      uint64_t v216 = *v211;
                      v217 = (void **)(*v211 + 8 * v213);
                    }
                    v218 = v326;
                    if (v326 != v209)
                    {
                      v219 = *v217;
                      v220 = *(void **)(v216 + 8 * v214);
                      while (1)
                      {
                        v221 = *(uint64_t **)(a4 + 200);
                        if (**(_DWORD **)v218 > **v338 && v221 != 0) {
                          break;
                        }
LABEL_441:
                        v218 += 8;
                        v209 = __lena;
                        if (v218 == __lena) {
                          goto LABEL_442;
                        }
                      }
                      while (2)
                      {
                        uint64_t v223 = **(int **)v218;
                        int v224 = *((_DWORD *)v221 + 4);
                        if (v223 == v224)
                        {
                          v225 = *(float32x2_t **)a4;
                          v226 = (float32x2_t *)(*(void *)a4 + 8 * v223);
                          int v224 = *((_DWORD *)v221 + 5);
                          goto LABEL_408;
                        }
                        if (v223 == *((_DWORD *)v221 + 5))
                        {
                          v225 = *(float32x2_t **)a4;
                          v226 = (float32x2_t *)(*(void *)a4 + 8 * v223);
LABEL_408:
                          float32x2_t v227 = *v226;
                          float32x2_t v228 = v225[v224];
                          v362[0] = v219;
                          v362[1] = v220;
                          DWORD1(v148) = 2;
                          long long v363 = xmmword_25B5F10F0;
                          *(void *)&long long v356 = v219;
                          *((float32x2_t *)&v356 + 1) = v227;
                          *(_OWORD *)v357 = xmmword_25B5F10F0;
                          *(float32x2_t *)&long long v360 = v227;
                          *((float32x2_t *)&v360 + 1) = v228;
                          long long v361 = xmmword_25B5F10F0;
                          float32x2_t v229 = vsub_f32((float32x2_t)v219, v227);
                          float v230 = sqrtf(vaddv_f32(vmul_f32(v229, v229)));
                          if (v230 >= 0.4 && v230 <= 1.2)
                          {
                            float v231 = sub_25B3FCCE0((float32x2_t *)v362, (float32x2_t *)&v356, 0);
                            float v232 = sub_25B3FCCE0((float32x2_t *)&v360, (float32x2_t *)&v356, 0);
                            *(float *)&long long v148 = fabsf(v231);
                            BOOL v233 = fabsf(v231 + -180.0) <= 25.0;
                            if (fabsf(v231 + -90.0) <= 25.0) {
                              BOOL v233 = 1;
                            }
                            if (*(float *)&v148 <= 25.0) {
                              BOOL v233 = 1;
                            }
                            BOOL v234 = fabsf(v232) <= 25.0 || fabsf(v232 + -90.0) <= 25.0 || fabsf(v232 + -180.0) <= 25.0;
                            if (v233 && v234)
                            {
                              int v235 = sub_25B3FCE90((float32x2_t *)&v356, v186, v344);
                              uint64_t v236 = ((char *)v210 - (char *)v350) >> 5;
                              int v237 = sub_25B3FCE90((float32x2_t *)&v356, v350, v236);
                              LODWORD(v32) = v32 & 0xFFFFFF00;
                              v161 &= 0xFFFFFF00;
                              v238.i64[0] = (uint64_t)v219;
                              *(float32x2_t *)v239.f32 = v227;
                              if ((v235 | v237 | sub_25B3FCB0C(v348, v344, (int)v32, 0, v161, 0, 0, v238, v239, v240)))goto LABEL_422; {
                              if ((unint64_t)v210 >= v341)
                              }
                              {
                                unint64_t v241 = v236 + 1;
                                v186 = v348;
                                if ((unint64_t)(v236 + 1) >> 59) {
                                  sub_25B3FBC4C();
                                }
                                if ((uint64_t)(v341 - (void)v350) >> 4 > v241) {
                                  unint64_t v241 = (uint64_t)(v341 - (void)v350) >> 4;
                                }
                                if (v341 - (unint64_t)v350 >= 0x7FFFFFFFFFFFFFE0) {
                                  unint64_t v242 = 0x7FFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v242 = v241;
                                }
                                if (v242) {
                                  unint64_t v242 = (unint64_t)sub_25B3FBC9C(v242);
                                }
                                else {
                                  uint64_t v243 = 0;
                                }
                                v244 = (float32x2_t *)(v242 + 32 * v236);
                                *(_OWORD *)v244->f32 = v356;
                                *(_OWORD *)v244[2].f32 = *(_OWORD *)v357;
                                if (v210 == v350)
                                {
                                  v247 = (float32x2_t *)(v242 + 32 * v236);
                                  v246 = v350;
                                }
                                else
                                {
                                  unint64_t v245 = v242 + 32 * v236;
                                  v246 = v350;
                                  do
                                  {
                                    long long v148 = *(_OWORD *)v210[-2].f32;
                                    v247 = (float32x2_t *)(v245 - 32);
                                    *(_OWORD *)(v245 - 32) = *(_OWORD *)v210[-4].f32;
                                    *(_OWORD *)(v245 - 16) = v148;
                                    v210 -= 4;
                                    v245 -= 32;
                                  }
                                  while (v210 != v350);
                                }
                                unint64_t v341 = v242 + 32 * v243;
                                v210 = v244 + 4;
                                if (v246) {
                                  operator delete(v246);
                                }
                                v350 = v247;
                              }
                              else
                              {
                                long long v148 = *(_OWORD *)v357;
                                *(_OWORD *)v210->f32 = v356;
                                *(_OWORD *)v210[2].f32 = v148;
                                v210 += 4;
LABEL_422:
                                v186 = v348;
                              }
                            }
                          }
                        }
                        v221 = (uint64_t *)*v221;
                        if (!v221) {
                          goto LABEL_441;
                        }
                        continue;
                      }
                    }
LABEL_442:
                    uint64_t v212 = *v330;
                    v211 = (uint64_t *)a4;
                  }
                  while (*v330);
                }
                ++v338;
              }
              while (v338 != (int **)v209);
              if (v326 != v209)
              {
                v248 = v326;
                while (1)
                {
                  v249 = (uint64_t *)v211[25];
                  if (v249) {
                    break;
                  }
LABEL_514:
                  v248 += 8;
                  if (v248 == v209) {
                    goto LABEL_519;
                  }
                }
                int v250 = 0;
                v321 = (int **)v248;
                while (2)
                {
                  uint64_t v251 = **(int **)v248;
                  int v252 = *((_DWORD *)v249 + 4);
                  if (v251 == v252)
                  {
                    uint64_t v253 = *v211;
                    v254 = (float32x2_t *)(*v211 + 8 * v251);
                    int v252 = *((_DWORD *)v249 + 5);
                    goto LABEL_452;
                  }
                  if (v251 == *((_DWORD *)v249 + 5))
                  {
                    uint64_t v253 = *v211;
                    v254 = (float32x2_t *)(*v211 + 8 * v251);
LABEL_452:
                    v255 = (uint64_t **)v211[25];
                    if (v255)
                    {
                      v256 = 0;
                      v257 = 0;
                      v258 = 0;
                      uint64_t v259 = 0;
                      v260 = (void *)*v254;
                      float32x2_t v324 = *(float32x2_t *)(v253 + 8 * v252);
                      int32x2_t v261 = (int32x2_t)vsub_f32(v324, *v254);
                      *(float *)&long long v148 = -*(float *)&v261.i32[1];
                      float32x2_t v262 = (float32x2_t)vzip1_s32(*(int32x2_t *)&v148, v261);
                      do
                      {
                        if (v259 != v250)
                        {
                          float32x2_t v263 = *(float32x2_t *)(*(void *)a4 + 8 * *((int *)v255 + 4));
                          float32x2_t v264 = *(float32x2_t *)(*(void *)a4 + 8 * *((int *)v255 + 5));
                          float32x2_t v265 = vsub_f32(v264, v263);
                          *(float32x2_t *)&long long v148 = vmul_f32(v265, v262);
                          if (vaddv_f32(*(float32x2_t *)&v148) != 0.0)
                          {
                            int32x2_t v266 = (int32x2_t)vmul_f32(vsub_f32((float32x2_t)v260, v263), v262);
                            float32x2_t v267 = vmla_n_f32(v263, v265, vdiv_f32(vadd_f32((float32x2_t)v266, (float32x2_t)vdup_lane_s32(v266, 1)), vadd_f32(*(float32x2_t *)&v148, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v148, 1))).f32[0]);
                            float v268 = vaddv_f32(vmul_f32(vsub_f32(v267, v263), v265));
                            float v269 = vaddv_f32(vmul_f32(v265, v265));
                            if (v269 < 0.000001) {
                              float v269 = 0.000001;
                            }
                            *(float32x2_t *)&long long v148 = vmla_n_f32(v263, v265, v268 / v269);
                            if (vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)&v148, v263), vsub_f32(*(float32x2_t *)&v148, v264))) <= 0.02)
                            {
                              float32x2_t v270 = vsub_f32(v267, *(float32x2_t *)&v148);
                              if (sqrtf(vaddv_f32(vmul_f32(v270, v270))) < 0.15)
                              {
                                if (v257 >= v256)
                                {
                                  unint64_t v271 = 0xAAAAAAAAAAAAAAABLL * (((char *)v257 - (char *)v258) >> 4) + 1;
                                  if (v271 > 0x555555555555555) {
                                    sub_25B3FBC4C();
                                  }
                                  if (0x5555555555555556 * (((char *)v256 - (char *)v258) >> 4) > v271) {
                                    unint64_t v271 = 0x5555555555555556 * (((char *)v256 - (char *)v258) >> 4);
                                  }
                                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v256 - (char *)v258) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
                                    unint64_t v272 = 0x555555555555555;
                                  }
                                  else {
                                    unint64_t v272 = v271;
                                  }
                                  if (v272)
                                  {
                                    if (v272 > 0x555555555555555) {
                                      sub_25B3FA70C();
                                    }
                                    v273 = (char *)operator new(48 * v272);
                                  }
                                  else
                                  {
                                    v273 = 0;
                                  }
                                  v274 = &v273[16 * (((char *)v257 - (char *)v258) >> 4)];
                                  *(float32x2_t *)v274 = v267;
                                  *((float32x2_t *)v274 + 1) = v263;
                                  *((float32x2_t *)v274 + 2) = v264;
                                  *(_OWORD *)(v274 + 24) = xmmword_25B5F10F0;
                                  *((_DWORD *)v274 + 10) = v259;
                                  if (v257 == v258)
                                  {
                                    v278 = v257;
                                    v258 = (float32x2_t *)&v273[16 * (((char *)v257 - (char *)v258) >> 4)];
                                  }
                                  else
                                  {
                                    v275 = &v273[16 * (((char *)v257 - (char *)v258) >> 4)];
                                    do
                                    {
                                      long long v276 = *(_OWORD *)v257[-6].f32;
                                      long long v148 = *(_OWORD *)v257[-4].f32;
                                      long long v277 = *(_OWORD *)v257[-2].f32;
                                      *((_OWORD *)v275 - 2) = v148;
                                      *((_OWORD *)v275 - 1) = v277;
                                      *((_OWORD *)v275 - 3) = v276;
                                      v275 -= 48;
                                      v257 -= 6;
                                    }
                                    while (v257 != v258);
                                    v278 = v258;
                                    v258 = (float32x2_t *)v275;
                                  }
                                  v256 = (float32x2_t *)&v273[48 * v272];
                                  v257 = (float32x2_t *)(v274 + 48);
                                  if (v278) {
                                    operator delete(v278);
                                  }
                                }
                                else
                                {
                                  float32x2_t *v257 = v267;
                                  v257[1] = v263;
                                  v257[2] = v264;
                                  *(_OWORD *)v257[3].f32 = xmmword_25B5F10F0;
                                  v257[5].i32[0] = v259;
                                  v257 += 6;
                                }
                              }
                            }
                          }
                        }
                        ++v259;
                        v255 = (uint64_t **)*v255;
                      }
                      while (v255);
                      if (v258 != v257)
                      {
                        float32x2_t v279 = vsub_f32((float32x2_t)v260, v324);
                        v280 = v258;
                        v209 = __lena;
                        while (1)
                        {
                          v281 = (void *)*v280;
                          v362[0] = v281;
                          v362[1] = v260;
                          long long v363 = xmmword_25B5F10F0;
                          float32x2_t v282 = vsub_f32((float32x2_t)v281, (float32x2_t)v260);
                          *(float32x2_t *)&long long v148 = vmul_f32(v282, v279);
                          if (vaddv_f32(*(float32x2_t *)&v148) > 0.0)
                          {
                            float v283 = sqrtf(vaddv_f32(vmul_f32(v282, v282)));
                            if (v283 >= 0.4
                              && v283 <= 1.2
                              && fabsf(sub_25B3FCCE0(v280 + 1, (float32x2_t *)v362, 0) + -90.0) <= 25.0)
                            {
                              int v284 = sub_25B3FCE90((float32x2_t *)v362, v186, v344);
                              uint64_t v285 = ((char *)v210 - (char *)v350) >> 5;
                              int v286 = sub_25B3FCE90((float32x2_t *)v362, v350, v285);
                              v287.i64[0] = (uint64_t)v281;
                              v288.i64[0] = (uint64_t)v260;
                              if (((v284 | v286 | sub_25B3FCB0C(v348, v344, v250, 1u, v280[5].i32[0], 1, 0, v287, v288, v289)) & 1) == 0)
                              {
                                if ((unint64_t)v210 >= v341)
                                {
                                  unint64_t v290 = v285 + 1;
                                  v186 = v348;
                                  if ((unint64_t)(v285 + 1) >> 59) {
                                    sub_25B3FBC4C();
                                  }
                                  if ((uint64_t)(v341 - (void)v350) >> 4 > v290) {
                                    unint64_t v290 = (uint64_t)(v341 - (void)v350) >> 4;
                                  }
                                  if (v341 - (unint64_t)v350 >= 0x7FFFFFFFFFFFFFE0) {
                                    unint64_t v291 = 0x7FFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v291 = v290;
                                  }
                                  if (v291) {
                                    unint64_t v291 = (unint64_t)sub_25B3FBC9C(v291);
                                  }
                                  else {
                                    uint64_t v292 = 0;
                                  }
                                  v293 = (float32x2_t *)(v291 + 32 * v285);
                                  *(_OWORD *)v293->f32 = *(_OWORD *)v362;
                                  *(_OWORD *)v293[2].f32 = v363;
                                  if (v210 == v350)
                                  {
                                    v296 = (float32x2_t *)(v291 + 32 * v285);
                                    v295 = v350;
                                  }
                                  else
                                  {
                                    unint64_t v294 = v291 + 32 * v285;
                                    v295 = v350;
                                    do
                                    {
                                      long long v148 = *(_OWORD *)v210[-2].f32;
                                      v296 = (float32x2_t *)(v294 - 32);
                                      *(_OWORD *)(v294 - 32) = *(_OWORD *)v210[-4].f32;
                                      *(_OWORD *)(v294 - 16) = v148;
                                      v210 -= 4;
                                      v294 -= 32;
                                    }
                                    while (v210 != v350);
                                  }
                                  unint64_t v341 = v291 + 32 * v292;
                                  v210 = v293 + 4;
                                  if (v295) {
                                    operator delete(v295);
                                  }
                                  v350 = v296;
                                  goto LABEL_507;
                                }
                                long long v148 = v363;
                                *(_OWORD *)v210->f32 = *(_OWORD *)v362;
                                *(_OWORD *)v210[2].f32 = v148;
                                v210 += 4;
                              }
                              v186 = v348;
                            }
                          }
LABEL_507:
                          v280 += 6;
                          if (v280 == v257)
                          {
                            v257 = v258;
                            goto LABEL_510;
                          }
                        }
                      }
                      v209 = __lena;
LABEL_510:
                      v211 = (uint64_t *)a4;
                      if (v257) {
                        operator delete(v257);
                      }
                      v248 = (char *)v321;
                    }
                  }
                  ++v250;
                  v249 = (uint64_t *)*v249;
                  if (!v249) {
                    goto LABEL_514;
                  }
                  continue;
                }
              }
              v326 = v209;
            }
LABEL_519:
            if (v326) {
              operator delete(v326);
            }
          }
          if (v186) {
            operator delete(v186);
          }
          v297 = (uint64_t *)v211[39];
          if (v297 != v331)
          {
            unint64_t v298 = 0;
            v299 = 0;
            v300 = 0;
            do
            {
              v301 = v297 + 5;
              if ((unint64_t)v299 >= v298)
              {
                uint64_t v303 = (v299 - v300) >> 5;
                unint64_t v304 = v303 + 1;
                v339 = v300;
                if ((unint64_t)(v303 + 1) >> 59) {
                  sub_25B3FBC4C();
                }
                unint64_t v305 = v298 - (void)v300;
                unint64_t v306 = (uint64_t)(v298 - (void)v300) >> 4;
                if (v306 > v304) {
                  unint64_t v304 = v306;
                }
                if (v305 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v307 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v307 = v304;
                }
                if (v307) {
                  unint64_t v307 = (unint64_t)sub_25B3FBC9C(v307);
                }
                else {
                  uint64_t v308 = 0;
                }
                long long v309 = *(_OWORD *)(v297 + 7);
                v310 = (_OWORD *)(v307 + 32 * v303);
                _OWORD *v310 = *v301;
                v310[1] = v309;
                if (v299 == v339)
                {
                  unint64_t v314 = v307 + 32 * v303;
                  v312 = v339;
                }
                else
                {
                  unint64_t v311 = v307 + 32 * v303;
                  v312 = v339;
                  do
                  {
                    long long v313 = *((_OWORD *)v299 - 1);
                    unint64_t v314 = v311 - 32;
                    *(_OWORD *)(v311 - 32) = *((_OWORD *)v299 - 2);
                    *(_OWORD *)(v311 - 16) = v313;
                    v299 -= 32;
                    v311 -= 32;
                  }
                  while (v299 != v339);
                }
                unint64_t v298 = v307 + 32 * v308;
                v299 = (char *)(v310 + 2);
                if (v312) {
                  operator delete(v312);
                }
                v300 = (char *)v314;
              }
              else
              {
                long long v302 = *(_OWORD *)(v297 + 7);
                *(_OWORD *)v299 = *v301;
                *((_OWORD *)v299 + 1) = v302;
                v299 += 32;
              }
              v315 = (uint64_t *)v297[1];
              if (v315)
              {
                do
                {
                  v316 = v315;
                  v315 = (uint64_t *)*v315;
                }
                while (v315);
              }
              else
              {
                do
                {
                  v316 = (uint64_t *)v297[2];
                  BOOL v173 = *v316 == (void)v297;
                  v297 = v316;
                }
                while (!v173);
              }
              v297 = v316;
            }
            while (v316 != v331);
          }
          operator new[]();
        }
      }
      v185 = 0;
      v186 = 0;
      goto LABEL_362;
    }
  }
}

void sub_25B3F8D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p)
{
  if (v30) {
    operator delete(v30);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v29) {
    operator delete(v29);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void sub_25B3F9000(uint64_t a1, int a2)
{
  int v53 = a2;
  v2 = *(uint64_t **)(a1 + 320);
  if (!v2) {
    return;
  }
  v5 = (uint64_t **)(a1 + 312);
  while (1)
  {
    int v6 = *((_DWORD *)v2 + 8);
    if (v6 <= a2) {
      break;
    }
LABEL_7:
    v2 = (uint64_t *)*v2;
    if (!v2) {
      return;
    }
  }
  if (v6 < a2)
  {
    ++v2;
    goto LABEL_7;
  }
  int v7 = *((_DWORD *)sub_25B3F9544((uint64_t **)(a1 + 312), a2, &v53) + 16);
  int v8 = *((_DWORD *)sub_25B3F9544(v5, a2, &v53) + 17);
  sub_25B3F9608(a1 + 288, a2);
  int v54 = v8;
  int v55 = v7;
  if (v8 >= v7) {
    int v9 = v7;
  }
  else {
    int v9 = v8;
  }
  if (v8 <= v7) {
    int v10 = v7;
  }
  else {
    int v10 = v8;
  }
  int8x8_t v11 = *(int8x8_t *)(a1 + 192);
  if (v11)
  {
    unint64_t v12 = (((v9 + 2654435769) << 6) + v10 + ((unint64_t)(v9 + 2654435769) >> 2) + 2654435769u) ^ (v9 + 2654435769);
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v14 = v12;
      if (v12 >= *(void *)&v11) {
        unint64_t v14 = v12 % *(void *)&v11;
      }
    }
    else
    {
      unint64_t v14 = v12 & (*(void *)&v11 - 1);
    }
    uint64_t v15 = *(void *)(a1 + 184);
    float v16 = *(_DWORD ***)(v15 + 8 * v14);
    if (v16)
    {
      float v17 = *v16;
      if (*v16)
      {
        uint64_t v18 = *(void *)&v11 - 1;
        do
        {
          unint64_t v19 = *((void *)v17 + 1);
          if (v19 == v12)
          {
            int v20 = v17[4];
            if (v20 == v7 && v17[5] == v8 || v20 == v8 && v17[5] == v7)
            {
              if (v13.u32[0] > 1uLL)
              {
                if (v12 >= *(void *)&v11) {
                  v12 %= *(void *)&v11;
                }
              }
              else
              {
                v12 &= v18;
              }
              unint64_t v21 = *(void **)(v15 + 8 * v12);
              do
              {
                uint64_t v22 = v21;
                unint64_t v21 = (void *)*v21;
              }
              while (v21 != (void *)v17);
              if (v22 == (void *)(a1 + 200)) {
                goto LABEL_53;
              }
              unint64_t v23 = v22[1];
              if (v13.u32[0] > 1uLL)
              {
                if (v23 >= *(void *)&v11) {
                  v23 %= *(void *)&v11;
                }
              }
              else
              {
                v23 &= v18;
              }
              if (v23 != v12)
              {
LABEL_53:
                if (!*(void *)v17) {
                  goto LABEL_54;
                }
                unint64_t v24 = *(void *)(*(void *)v17 + 8);
                if (v13.u32[0] > 1uLL)
                {
                  if (v24 >= *(void *)&v11) {
                    v24 %= *(void *)&v11;
                  }
                }
                else
                {
                  v24 &= v18;
                }
                if (v24 != v12) {
LABEL_54:
                }
                  *(void *)(v15 + 8 * v12) = 0;
              }
              uint64_t v25 = *(void *)v17;
              if (*(void *)v17)
              {
                unint64_t v26 = *(void *)(v25 + 8);
                if (v13.u32[0] > 1uLL)
                {
                  if (v26 >= *(void *)&v11) {
                    v26 %= *(void *)&v11;
                  }
                }
                else
                {
                  v26 &= v18;
                }
                if (v26 != v12)
                {
                  *(void *)(*(void *)(a1 + 184) + 8 * v26) = v22;
                  uint64_t v25 = *(void *)v17;
                }
              }
              *uint64_t v22 = v25;
              *(void *)float v17 = 0;
              --*(void *)(a1 + 208);
              operator delete(v17);
              break;
            }
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v19 >= *(void *)&v11) {
                v19 %= *(void *)&v11;
              }
            }
            else
            {
              v19 &= v18;
            }
            if (v19 != v14) {
              break;
            }
          }
          float v17 = *(_DWORD **)v17;
        }
        while (v17);
      }
    }
  }
  int v27 = sub_25B3FA1DC((uint64_t **)(a1 + 136), v7, &v55);
  sub_25B3F9AB4(v27 + 5, v8);
  uint64_t v28 = sub_25B3FA1DC((uint64_t **)(a1 + 136), v8, &v54);
  sub_25B3F9AB4(v28 + 5, v7);
  v29 = (__int32 *)sub_25B3FA294(a1 + 248, v7, &v55)[3];
  v30 = (__int32 *)sub_25B3FA294(a1 + 248, v7, &v55)[4];
  v31 = wmemchr(v29, v8, v30 - v29);
  if (v31) {
    v32 = v31;
  }
  else {
    v32 = v30;
  }
  if (v32 != (__int32 *)sub_25B3FA294(a1 + 248, v7, &v55)[4])
  {
    v33 = sub_25B3FA294(a1 + 248, v7, &v55);
    v34 = (__int32 *)v33[4];
    int64_t v35 = (char *)v34 - (char *)(v32 + 1);
    if (v34 != v32 + 1) {
      memmove(v32, v32 + 1, (char *)v34 - (char *)(v32 + 1));
    }
    v33[4] = (char *)v32 + v35;
  }
  int v36 = (__int32 *)sub_25B3FA294(a1 + 248, v8, &v54)[3];
  v37 = (__int32 *)sub_25B3FA294(a1 + 248, v8, &v54)[4];
  uint64_t v38 = wmemchr(v36, v7, v37 - v36);
  if (v38) {
    v39 = v38;
  }
  else {
    v39 = v37;
  }
  if (v39 != (__int32 *)sub_25B3FA294(a1 + 248, v8, &v54)[4])
  {
    v40 = sub_25B3FA294(a1 + 248, v8, &v54);
    uint64_t v41 = (__int32 *)v40[4];
    int64_t v42 = (char *)v41 - (char *)(v39 + 1);
    if (v41 != v39 + 1) {
      memmove(v39, v39 + 1, (char *)v41 - (char *)(v39 + 1));
    }
    v40[4] = (char *)v39 + v42;
  }
  int v43 = *(uint64_t ***)(a1 + 160);
  if (v43 != (uint64_t **)(a1 + 168))
  {
    do
    {
      sub_25B3F9AB4(v43 + 6, v53);
      sub_25B3F9AB4(v43 + 9, v53);
      BOOL v44 = v43[1];
      if (v44)
      {
        do
        {
          v45 = (uint64_t **)v44;
          BOOL v44 = (uint64_t *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          v45 = (uint64_t **)v43[2];
          BOOL v46 = *v45 == (uint64_t *)v43;
          int v43 = v45;
        }
        while (!v46);
      }
      int v43 = v45;
    }
    while (v45 != (uint64_t **)(a1 + 168));
  }
  BOOL v48 = *(int **)(a1 + 440);
  uint64_t v47 = *(void *)(a1 + 448);
  if (v48 != (int *)v47)
  {
    int v49 = v53;
    while (*v48 != v49)
    {
      int v50 = v49;
      if (v48[1] == v49) {
        goto LABEL_89;
      }
      v48 += 2;
LABEL_93:
      if (v48 == (int *)v47) {
        return;
      }
    }
    int v50 = v48[1];
LABEL_89:
    sub_25B3F9B8C((void *)(a1 + 464), *v48, v50);
    v51 = *(int **)(a1 + 448);
    uint64_t v47 = (uint64_t)v48;
    if (v48 + 2 != v51)
    {
      unint64_t v52 = ((char *)v51 - (char *)v48) & 0xFFFFFFFFFFFFFFF8;
      memmove(v48, v48 + 2, v52 - 8);
      uint64_t v47 = (uint64_t)v48 + v52 - 8;
    }
    *(void *)(a1 + 448) = v47;
    goto LABEL_93;
  }
}

uint64_t sub_25B3F9500(uint64_t a1)
{
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t **sub_25B3F9544(uint64_t **a1, int a2, _DWORD *a3)
{
  int v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    int v9 = (char *)operator new(0x48uLL);
    *((_DWORD *)v9 + 8) = *a3;
    *((void *)v9 + 5) = 0;
    *((void *)v9 + 6) = 0;
    *(_OWORD *)(v9 + 56) = xmmword_25B5F10F0;
    sub_25B3FA740(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void sub_25B3F9608(uint64_t a1, int a2)
{
  int v60 = a2;
  v4 = sub_25B3FA1DC((uint64_t **)a1, a2, &v60);
  v5 = v4[5];
  int v6 = v4 + 6;
  if (v5 != (uint64_t *)(v4 + 6))
  {
    do
    {
      int v7 = sub_25B3FA1DC((uint64_t **)a1, *((_DWORD *)v5 + 7), (_DWORD *)v5 + 7);
      sub_25B3F9AB4(v7 + 5, a2);
      sub_25B3F9B8C((void *)(a1 + 48), a2, *((_DWORD *)v5 + 7));
      int v8 = (uint64_t *)v5[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          int v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (uint64_t *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != (uint64_t *)v6);
  }
  int8x8_t v11 = *(uint64_t **)(a1 + 8);
  if (v11)
  {
    uint64_t v12 = a1 + 8;
    uint64_t v13 = *(void *)(a1 + 8);
    do
    {
      int v14 = *(_DWORD *)(v13 + 32);
      BOOL v15 = v14 < a2;
      if (v14 >= a2) {
        float v16 = (uint64_t *)v13;
      }
      else {
        float v16 = (uint64_t *)(v13 + 8);
      }
      if (!v15) {
        uint64_t v12 = v13;
      }
      uint64_t v13 = *v16;
    }
    while (*v16);
    if (v12 != a1 + 8 && *(_DWORD *)(v12 + 32) <= a2)
    {
      float v17 = *(void **)(v12 + 8);
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          float v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        unint64_t v19 = (void *)v12;
        do
        {
          uint64_t v18 = (void *)v19[2];
          BOOL v10 = *v18 == (void)v19;
          unint64_t v19 = v18;
        }
        while (!v10);
      }
      if (*(void *)a1 == v12) {
        *(void *)a1 = v18;
      }
      --*(void *)(a1 + 16);
      sub_25B3F9E58(v11, (uint64_t *)v12);
      sub_25B3FA930(*(void **)(v12 + 48));
      operator delete((void *)v12);
    }
  }
  int v20 = *(uint64_t **)(a1 + 32);
  if (v20)
  {
    uint64_t v21 = a1 + 32;
    uint64_t v22 = *(void *)(a1 + 32);
    do
    {
      int v23 = *(_DWORD *)(v22 + 32);
      BOOL v24 = v23 < a2;
      if (v23 >= a2) {
        uint64_t v25 = (uint64_t *)v22;
      }
      else {
        uint64_t v25 = (uint64_t *)(v22 + 8);
      }
      if (!v24) {
        uint64_t v21 = v22;
      }
      uint64_t v22 = *v25;
    }
    while (*v25);
    if (v21 != a1 + 32 && *(_DWORD *)(v21 + 32) <= a2)
    {
      unint64_t v26 = *(void **)(v21 + 8);
      if (v26)
      {
        do
        {
          int v27 = v26;
          unint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        uint64_t v28 = (void *)v21;
        do
        {
          int v27 = (void *)v28[2];
          BOOL v10 = *v27 == (void)v28;
          uint64_t v28 = v27;
        }
        while (!v10);
      }
      if (*(void *)(a1 + 24) == v21) {
        *(void *)(a1 + 24) = v27;
      }
      --*(void *)(a1 + 40);
      sub_25B3F9E58(v20, (uint64_t *)v21);
      operator delete((void *)v21);
    }
  }
  v29 = *(__int32 **)(a1 + 96);
  v30 = wmemchr(*(__int32 **)(a1 + 88), a2, ((uint64_t)v29 - *(void *)(a1 + 88)) >> 2);
  if (v30) {
    v29 = v30;
  }
  v31 = *(__int32 **)(a1 + 96);
  int64_t v32 = (char *)v31 - (char *)(v29 + 1);
  if (v31 != v29 + 1) {
    memmove(v29, v29 + 1, (char *)v31 - (char *)(v29 + 1));
  }
  *(void *)(a1 + 96) = (char *)v29 + v32;
  v33 = (uint64_t *)(a1 + 112);
  v34 = sub_25B3FA294(a1 + 112, a2, &v60);
  int64_t v35 = (int *)v34[3];
  int v36 = (int *)v34[4];
  while (v35 != v36)
  {
    int v59 = *v35;
    int v37 = v59;
    uint64_t v38 = sub_25B3FA294(a1 + 112, v59, &v59);
    v39 = (__int32 *)sub_25B3FA294(a1 + 112, v37, &v59)[3];
    v40 = (__int32 *)sub_25B3FA294(a1 + 112, v37, &v59)[4];
    uint64_t v41 = wmemchr(v39, a2, v40 - v39);
    if (v41) {
      v40 = v41;
    }
    int64_t v42 = (__int32 *)v38[4];
    int64_t v43 = (char *)v42 - (char *)(v40 + 1);
    if (v42 != v40 + 1) {
      memmove(v40, v40 + 1, (char *)v42 - (char *)(v40 + 1));
    }
    v38[4] = (char *)v40 + v43;
    ++v35;
  }
  unint64_t v44 = *(void *)(a1 + 120);
  if (v44)
  {
    unint64_t v45 = a2;
    uint8x8_t v46 = (uint8x8_t)vcnt_s8((int8x8_t)v44);
    v46.i16[0] = vaddlv_u8(v46);
    if (v46.u32[0] > 1uLL)
    {
      unint64_t v47 = a2;
      if (v44 <= a2) {
        unint64_t v47 = a2 % v44;
      }
    }
    else
    {
      unint64_t v47 = (v44 - 1) & a2;
    }
    uint64_t v48 = *v33;
    int v49 = *(void ***)(*v33 + 8 * v47);
    if (v49)
    {
      int v50 = *v49;
      if (*v49)
      {
        unint64_t v51 = v44 - 1;
        do
        {
          unint64_t v52 = v50[1];
          if (v52 == a2)
          {
            if (*((_DWORD *)v50 + 4) == a2)
            {
              if (v46.u32[0] > 1uLL)
              {
                if (v44 <= a2) {
                  unint64_t v45 = a2 % v44;
                }
              }
              else
              {
                unint64_t v45 = v51 & a2;
              }
              int v53 = *(void **)(v48 + 8 * v45);
              do
              {
                int v54 = v53;
                int v53 = (void *)*v53;
              }
              while (v53 != v50);
              if (v54 == (void *)(a1 + 128)) {
                goto LABEL_92;
              }
              unint64_t v55 = v54[1];
              if (v46.u32[0] > 1uLL)
              {
                if (v55 >= v44) {
                  v55 %= v44;
                }
              }
              else
              {
                v55 &= v51;
              }
              if (v55 != v45)
              {
LABEL_92:
                if (!*v50) {
                  goto LABEL_93;
                }
                unint64_t v56 = *(void *)(*v50 + 8);
                if (v46.u32[0] > 1uLL)
                {
                  if (v56 >= v44) {
                    v56 %= v44;
                  }
                }
                else
                {
                  v56 &= v51;
                }
                if (v56 != v45) {
LABEL_93:
                }
                  *(void *)(v48 + 8 * v45) = 0;
              }
              uint64_t v57 = *v50;
              if (*v50)
              {
                unint64_t v58 = *(void *)(v57 + 8);
                if (v46.u32[0] > 1uLL)
                {
                  if (v58 >= v44) {
                    v58 %= v44;
                  }
                }
                else
                {
                  v58 &= v51;
                }
                if (v58 != v45)
                {
                  *(void *)(*v33 + 8 * v58) = v54;
                  uint64_t v57 = *v50;
                }
              }
              *int v54 = v57;
              *int v50 = 0;
              --*(void *)(a1 + 136);
              sub_25B3FA6AC(1, v50);
              return;
            }
          }
          else
          {
            if (v46.u32[0] > 1uLL)
            {
              if (v52 >= v44) {
                v52 %= v44;
              }
            }
            else
            {
              v52 &= v51;
            }
            if (v52 != v47) {
              return;
            }
          }
          int v50 = (void *)*v50;
        }
        while (v50);
      }
    }
  }
}

void sub_25B3F9AB4(uint64_t **a1, int a2)
{
  v4 = (uint64_t *)(a1 + 1);
  v3 = a1[1];
  if (v3)
  {
    v5 = v4;
    int v6 = v3;
    do
    {
      int v7 = *((_DWORD *)v6 + 7);
      BOOL v8 = v7 < a2;
      if (v7 >= a2) {
        int v9 = (uint64_t **)v6;
      }
      else {
        int v9 = (uint64_t **)(v6 + 1);
      }
      if (!v8) {
        v5 = v6;
      }
      int v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && *((_DWORD *)v5 + 7) <= a2)
    {
      BOOL v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          int8x8_t v11 = v10;
          BOOL v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v12 = v5;
        do
        {
          int8x8_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          uint64_t v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_25B3F9E58(v3, v5);
      operator delete(v5);
    }
  }
}

void sub_25B3F9B8C(void *a1, int a2, int a3)
{
  v4 = sub_25B3F9CFC(a1, a2, a3);
  if (v4)
  {
    int8x8_t v5 = (int8x8_t)a1[1];
    unint64_t v6 = v4[1];
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v5) {
        v6 %= *(void *)&v5;
      }
    }
    else
    {
      v6 &= *(void *)&v5 - 1;
    }
    BOOL v8 = *(uint64_t **)(*a1 + 8 * v6);
    do
    {
      int v9 = v8;
      BOOL v8 = (uint64_t *)*v8;
    }
    while (v8 != v4);
    if (v9 == a1 + 2) {
      goto LABEL_20;
    }
    unint64_t v10 = v9[1];
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v5) {
        v10 %= *(void *)&v5;
      }
    }
    else
    {
      v10 &= *(void *)&v5 - 1;
    }
    if (v10 != v6)
    {
LABEL_20:
      if (!*v4) {
        goto LABEL_21;
      }
      unint64_t v11 = *(void *)(*v4 + 8);
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(void *)&v5) {
          v11 %= *(void *)&v5;
        }
      }
      else
      {
        v11 &= *(void *)&v5 - 1;
      }
      if (v11 != v6) {
LABEL_21:
      }
        *(void *)(*a1 + 8 * v6) = 0;
    }
    uint64_t v12 = *v4;
    if (*v4)
    {
      unint64_t v13 = *(void *)(v12 + 8);
      if (v7.u32[0] > 1uLL)
      {
        if (v13 >= *(void *)&v5) {
          v13 %= *(void *)&v5;
        }
      }
      else
      {
        v13 &= *(void *)&v5 - 1;
      }
      if (v13 != v6)
      {
        *(void *)(*a1 + 8 * v13) = v9;
        uint64_t v12 = *v4;
      }
    }
    *int v9 = v12;
    uint64_t *v4 = 0;
    --a1[3];
    sub_25B3F9DF8(1, v4);
  }
}

uint64_t *sub_25B3F9CFC(void *a1, int a2, int a3)
{
  if (a3 >= a2) {
    int v3 = a2;
  }
  else {
    int v3 = a3;
  }
  if (a3 <= a2) {
    int v4 = a2;
  }
  else {
    int v4 = a3;
  }
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = (((v3 + 2654435769) << 6) + v4 + ((unint64_t)(v3 + 2654435769) >> 2) + 2654435769u) ^ (v3 + 2654435769);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v6;
    if (v6 >= *(void *)&v5) {
      unint64_t v8 = v6 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = v6 & (*(void *)&v5 - 1);
  }
  int v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (double result = *v9; result; double result = (uint64_t *)*result)
  {
    unint64_t v11 = result[1];
    if (v11 == v6)
    {
      int v12 = *((_DWORD *)result + 4);
      if (v12 == a2 && *((_DWORD *)result + 5) == a3 || v12 == a3 && *((_DWORD *)result + 5) == a2) {
        return result;
      }
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(void *)&v5) {
          v11 %= *(void *)&v5;
        }
      }
      else
      {
        v11 &= *(void *)&v5 - 1;
      }
      if (v11 != v8) {
        return 0;
      }
    }
  }
  return result;
}

void sub_25B3F9DF8(char a1, void *__p)
{
  if (a1)
  {
    int v3 = (void *)__p[12];
    if (v3)
    {
      __p[13] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t *sub_25B3F9E58(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = a2;
  if (*a2)
  {
    int v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      int v3 = v4;
      int v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  unint64_t v6 = (uint64_t **)v3[2];
  uint8x8_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint8x8_t v7 = 0;
      double result = (uint64_t *)v2;
    }
    else
    {
      uint8x8_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      double result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        double result = v7;
      }
      uint8x8_t v7 = *(uint64_t **)v12;
    }
    unint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    int v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        int v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        *int v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        unint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      BOOL v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    float v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    uint8x8_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    unint64_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    *unint64_t v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      double result = v7;
    }
    uint8x8_t v7 = *(uint64_t **)(*v7 + 8);
  }
  BOOL v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    float v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    float v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      float v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  float v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    BOOL v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    uint64_t *v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    float v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  BOOL v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  uint64_t *v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t **sub_25B3FA1DC(uint64_t **a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint8x8_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint8x8_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = operator new(0x40uLL);
    v9[8] = *a3;
    *((void *)v9 + 7) = 0;
    *((void *)v9 + 6) = 0;
    *((void *)v9 + 5) = v9 + 12;
    sub_25B3FA740(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void *sub_25B3FA294(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x30uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_25B3FA4B0(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    *unint64_t v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_25B3FA498(_Unwind_Exception *a1)
{
  sub_25B3FA6AC(1, v1);
  _Unwind_Resume(a1);
}

void sub_25B3FA4B0(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    sub_25B3FA70C();
  }
  int v5 = operator new(8 * prime);
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint8x8_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    BOOL v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          *BOOL v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          BOOL v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint8x8_t v8 = v14;
        BOOL v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void sub_25B3FA6AC(char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_25B3FA70C()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, (struct type_info *)&unk_2708F27C0, MEMORY[0x263F8C090]);
}

uint64_t *sub_25B3FA740(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  double result = sub_25B3FA798(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_25B3FA798(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      int8x8_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            size_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            size_t v9 = (uint64_t **)v2[1];
            uint8x8_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *size_t v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_25B3FA930(void *a1)
{
  if (a1)
  {
    sub_25B3FA930(*a1);
    sub_25B3FA930(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_25B3FA97C(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  int8x8_t v4 = a2 + 1;
  int v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      int v6 = (int *)(v5 + 4);
      uint64_t v7 = *(uint64_t **)(a1 + 8);
      int v8 = v3;
      if (*(uint64_t ***)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v9 = *(void *)(a1 + 8);
      uint8x8_t v10 = v3;
      if (v7)
      {
        do
        {
          int v8 = (uint64_t **)v9;
          uint64_t v9 = *(void *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        do
        {
          int v8 = (uint64_t **)v10[2];
          BOOL v11 = *v8 == (uint64_t *)v10;
          uint8x8_t v10 = v8;
        }
        while (v11);
      }
      int v12 = *v6;
      if (*((_DWORD *)v8 + 8) < *v6)
      {
LABEL_8:
        if (v7) {
          uint64_t v13 = v8;
        }
        else {
          uint64_t v13 = v3;
        }
        if (v7) {
          BOOL v14 = v8 + 1;
        }
        else {
          BOOL v14 = v3;
        }
      }
      else
      {
        uint64_t v13 = v3;
        BOOL v14 = v3;
        if (v7)
        {
          BOOL v14 = v3;
          while (1)
          {
            while (1)
            {
              uint64_t v13 = (uint64_t **)v7;
              int v20 = *((_DWORD *)v7 + 8);
              if (v12 >= v20) {
                break;
              }
              uint64_t v7 = *v13;
              BOOL v14 = v13;
              if (!*v13) {
                goto LABEL_15;
              }
            }
            if (v20 >= v12) {
              break;
            }
            BOOL v14 = v13 + 1;
            uint64_t v7 = v13[1];
            if (!v7) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v14)
      {
LABEL_15:
        size_t v15 = operator new(0x48uLL);
        long long v16 = *(_OWORD *)v6;
        long long v17 = *((_OWORD *)v5 + 3);
        v15[8] = v5[8];
        *((_OWORD *)v15 + 2) = v16;
        *((_OWORD *)v15 + 3) = v17;
        sub_25B3FA740((uint64_t **)a1, (uint64_t)v13, v14, v15);
      }
      uint64_t v18 = (void *)v5[1];
      if (v18)
      {
        do
        {
          unint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unint64_t v19 = (void *)v5[2];
          BOOL v11 = *v19 == (void)v5;
          int v5 = v19;
        }
        while (!v11);
      }
      int v5 = v19;
    }
    while (v19 != v4);
  }
  return a1;
}

void sub_25B3FAAF4(_Unwind_Exception *a1)
{
  sub_25B3FA930(*v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_25B3FAB08(uint64_t *a1, int a2)
{
  if (!a1) {
LABEL_8:
  }
    sub_25B3FC090("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      int v2 = *((_DWORD *)a1 + 8);
      if (v2 <= a2) {
        break;
      }
      a1 = (uint64_t *)*a1;
      if (!a1) {
        goto LABEL_8;
      }
    }
    if (v2 >= a2) {
      return a1 + 5;
    }
    a1 = (uint64_t *)a1[1];
    if (!a1) {
      goto LABEL_8;
    }
  }
}

uint64_t *sub_25B3FAB54(uint64_t a1, unint64_t a2, int a3, int a4)
{
  if (a4 >= a3) {
    int v4 = a3;
  }
  else {
    int v4 = a4;
  }
  if (a4 <= a3) {
    int v5 = a3;
  }
  else {
    int v5 = a4;
  }
  if (!a2) {
    return 0;
  }
  unint64_t v6 = (((v4 + 2654435769) << 6) + v5 + ((unint64_t)(v4 + 2654435769) >> 2) + 2654435769u) ^ (v4 + 2654435769);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v6;
    if (v6 >= a2) {
      unint64_t v8 = v6 % a2;
    }
  }
  else
  {
    unint64_t v8 = v6 & (a2 - 1);
  }
  uint64_t v9 = *(uint64_t ***)(a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (double result = *v9; result; double result = (uint64_t *)*result)
  {
    unint64_t v11 = result[1];
    if (v6 == v11)
    {
      int v12 = *((_DWORD *)result + 4);
      if (v12 == a3 && *((_DWORD *)result + 5) == a4 || v12 == a4 && *((_DWORD *)result + 5) == a3) {
        return result;
      }
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= a2) {
          v11 %= a2;
        }
      }
      else
      {
        v11 &= a2 - 1;
      }
      if (v11 != v8) {
        return 0;
      }
    }
  }
  return result;
}

void *sub_25B3FAC48(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_25B3FACCC(uint64_t a1)
{
  sub_25B3FAE18(*(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_25B3FAD08(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      int v4 = (void *)v2[12];
      if (v4)
      {
        v2[13] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  int v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void sub_25B3FAD70(void *a1)
{
  if (a1)
  {
    sub_25B3FAD70(*a1);
    sub_25B3FAD70(a1[1]);
    sub_25B3FA930((void *)a1[6]);
    operator delete(a1);
  }
}

uint64_t sub_25B3FADC4(uint64_t a1)
{
  sub_25B3FACCC(a1 + 112);
  int v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  sub_25B3FAD08(a1 + 48);
  sub_25B3FA930(*(void **)(a1 + 32));
  sub_25B3FAD70(*(void **)(a1 + 8));
  return a1;
}

void sub_25B3FAE18(void *__p)
{
  if (__p)
  {
    v1 = __p;
    do
    {
      int v2 = (void *)*v1;
      unint64_t v3 = (void *)v1[3];
      if (v3)
      {
        v1[4] = v3;
        operator delete(v3);
      }
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t *sub_25B3FAE64(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  int v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (double result = *v5; result; double result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void sub_25B3FAF18()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_2708F20B0;
  __cxa_throw(exception, (struct type_info *)&unk_2708F2088, (void (*)(void *))std::exception::~exception);
}

uint64_t sub_25B3FAF64(uint64_t a1, int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return 0;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  int v12 = operator new(0x18uLL);
  *int v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_25B3FA4B0(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  int v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *int v12 = *v20;
LABEL_38:
    *int v20 = v12;
    goto LABEL_39;
  }
  *int v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return 1;
}

void sub_25B3FB164(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25B3FB178(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_25B3FB1C8(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x261163EE0);
}

uint64_t sub_25B3FB200(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      sub_25B3FAF64(a1, *a2, *a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_25B3FB264(_Unwind_Exception *a1)
{
  sub_25B3FB178(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25B3FB278(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_25B3FA4B0(a1, *(void *)(a2 + 8));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    sub_25B3FAF64(a1, *((_DWORD *)i + 4), *((_DWORD *)i + 4));
  return a1;
}

void sub_25B3FB2D8(_Unwind_Exception *a1)
{
  sub_25B3FB178(v1);
  _Unwind_Resume(a1);
}

void sub_25B3FB2F0(void *a1, int *a2, int *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint8x8_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint8x8_t v10 = v8;
    }
    else
    {
      do
      {
        int v11 = *v4;
        *((_DWORD *)v8 + 4) = *v4;
        uint8x8_t v10 = (void *)*v8;
        v8[1] = v11;
        if (!sub_25B3FB40C((uint64_t)a1, v11, v11)) {
          sub_25B3FB520(a1, v8);
        }
        ++v4;
        if (v10) {
          BOOL v12 = v4 == a3;
        }
        else {
          BOOL v12 = 1;
        }
        uint8x8_t v8 = v10;
      }
      while (!v12);
    }
    if (v10)
    {
      do
      {
        float v13 = (void *)*v10;
        operator delete(v10);
        uint8x8_t v10 = v13;
      }
      while (v13);
    }
  }
  while (v4 != a3)
  {
    int v14 = *v4++;
    sub_25B3FAF64((uint64_t)a1, v14, v14);
  }
}

void sub_25B3FB3D8(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    unint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_25B3FB3F8(_Unwind_Exception *a1)
{
}

uint64_t *sub_25B3FB40C(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL) {
      uint64_t v5 = v3 <= a2 ? a2 % v3 : a2;
    }
    else {
      uint64_t v5 = (v3 - 1) & a2;
    }
    uint64_t v6 = *(uint64_t ***)(*(void *)a1 + 8 * v5);
    if (v6)
    {
      for (uint64_t i = *v6; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v8 = i[1];
        if (v8 == a2)
        {
          if (*((_DWORD *)i + 4) == a3) {
            return i;
          }
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v3) {
              v8 %= v3;
            }
          }
          else
          {
            v8 &= v3 - 1;
          }
          if (v8 != v5) {
            break;
          }
        }
      }
    }
  }
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v10 = *(float *)(a1 + 32);
  if (!v3 || (float)(v10 * (float)v3) < v9)
  {
    uint64_t v11 = 2 * v3;
    BOOL v12 = v3 < 3 || (v3 & (v3 - 1)) != 0;
    size_t v13 = v12 | v11;
    unint64_t v14 = vcvtps_u32_f32(v9 / v10);
    if (v13 <= v14) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = v13;
    }
    sub_25B3FA4B0(a1, v15);
  }
  return 0;
}

void *sub_25B3FB520(void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  uint64_t v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    void *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    uint64_t v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

uint64_t sub_25B3FB5D8(void *a1, void *a2)
{
  int8x8_t v2 = a2;
  uint64_t v3 = a1[2];
  unint64_t v104 = 0;
  unint64_t v105 = 0;
  unint64_t v106 = 0;
  uint8x8_t v4 = (uint64_t *)a2[2];
  if (v4)
  {
    uint64_t v95 = (void *)(v3 + 296);
    uint64_t v5 = (void *)(v3 + 320);
    unint64_t v93 = (void *)(v3 + 320);
    do
    {
      uint64_t v6 = *v95;
      if (*v95)
      {
        int v7 = *((_DWORD *)v4 + 4);
        unint64_t v8 = v95;
        do
        {
          int v9 = *(_DWORD *)(v6 + 32);
          BOOL v10 = v9 < v7;
          if (v9 >= v7) {
            uint64_t v11 = (uint64_t *)v6;
          }
          else {
            uint64_t v11 = (uint64_t *)(v6 + 8);
          }
          if (!v10) {
            unint64_t v8 = (void *)v6;
          }
          uint64_t v6 = *v11;
        }
        while (*v11);
        if (v8 != v95 && v7 >= *((_DWORD *)v8 + 8))
        {
          BOOL v12 = (void *)v8[5];
          size_t v13 = v8 + 6;
          if (v12 != v8 + 6)
          {
            unint64_t v94 = v106;
            unint64_t v14 = v104;
            do
            {
              if (!sub_25B3FAE64(v2, *((_DWORD *)v12 + 7)))
              {
                v103[0] = 0;
                v103[1] = 0;
                unint64_t v102 = v103;
                uint64_t v15 = *v5;
                if (*v5)
                {
                  int v16 = *((_DWORD *)v4 + 4);
                  unint64_t v17 = v5;
                  uint64_t v18 = *v5;
                  do
                  {
                    int v19 = *(_DWORD *)(v18 + 32);
                    BOOL v20 = v19 < v16;
                    if (v19 >= v16) {
                      unint64_t v21 = (uint64_t *)v18;
                    }
                    else {
                      unint64_t v21 = (uint64_t *)(v18 + 8);
                    }
                    if (!v20) {
                      unint64_t v17 = (_DWORD *)v18;
                    }
                    uint64_t v18 = *v21;
                  }
                  while (*v21);
                  if (v17 != (_DWORD *)v5 && v16 >= v17[8])
                  {
                    sub_25B3FBE5C((uint64_t *)&v102, v17[16], v17[16]);
                    sub_25B3FBE5C((uint64_t *)&v102, v17[17], v17[17]);
                    uint64_t v15 = *v5;
                  }
                  uint64_t v100 = 0;
                  uint64_t v101 = 0;
                  uint64_t v22 = &v100;
                  float32x2_t v99 = &v100;
                  if (v15)
                  {
                    int v23 = *((_DWORD *)v12 + 7);
                    BOOL v24 = v5;
                    do
                    {
                      int v25 = *(_DWORD *)(v15 + 32);
                      BOOL v26 = v25 < v23;
                      if (v25 >= v23) {
                        uint64_t v27 = (uint64_t *)v15;
                      }
                      else {
                        uint64_t v27 = (uint64_t *)(v15 + 8);
                      }
                      if (!v26) {
                        BOOL v24 = (_DWORD *)v15;
                      }
                      uint64_t v15 = *v27;
                    }
                    while (*v27);
                    uint64_t v22 = &v100;
                    if (v24 != (_DWORD *)v5)
                    {
                      uint64_t v22 = &v100;
                      if (v23 >= v24[8])
                      {
                        sub_25B3FBE5C((uint64_t *)&v99, v24[16], v24[16]);
                        sub_25B3FBE5C((uint64_t *)&v99, v24[17], v24[17]);
                        uint64_t v22 = v99;
                      }
                    }
                  }
                }
                else
                {
                  uint64_t v100 = 0;
                  uint64_t v101 = 0;
                  uint64_t v22 = &v100;
                  float32x2_t v99 = &v100;
                }
                uint64_t v28 = v2;
                v29 = 0;
                v30 = 0;
                __p = 0;
                int v97 = 0;
                uint64_t v98 = 0;
                v31 = v102;
                p_p = &__p;
                BOOL v32 = v102 == v103 || v22 == &v100;
                if (!v32)
                {
                  do
                  {
                    int v33 = v31[7];
                    int v34 = *((_DWORD *)v22 + 7);
                    if (v33 >= v34)
                    {
                      if (v34 >= v33)
                      {
                        sub_25B3FBF08((uint64_t *)&p_p, v31 + 7);
                        uint64_t v38 = (void *)*((void *)v31 + 1);
                        if (v38)
                        {
                          do
                          {
                            int v37 = v38;
                            uint64_t v38 = (void *)*v38;
                          }
                          while (v38);
                        }
                        else
                        {
                          do
                          {
                            int v37 = (void *)*((void *)v31 + 2);
                            BOOL v32 = *v37 == (void)v31;
                            v31 = v37;
                          }
                          while (!v32);
                        }
                      }
                      else
                      {
                        int v37 = v31;
                      }
                      v39 = v22[1];
                      if (v39)
                      {
                        do
                        {
                          uint64_t v22 = (void **)v39;
                          v39 = (void *)*v39;
                        }
                        while (v39);
                      }
                      else
                      {
                        do
                        {
                          v40 = v22;
                          uint64_t v22 = (void **)v22[2];
                        }
                        while (*v22 != v40);
                      }
                      v31 = v37;
                    }
                    else
                    {
                      int64_t v35 = (void *)*((void *)v31 + 1);
                      if (v35)
                      {
                        do
                        {
                          v31 = v35;
                          int64_t v35 = (void *)*v35;
                        }
                        while (v35);
                      }
                      else
                      {
                        do
                        {
                          int v36 = v31;
                          v31 = (_DWORD *)*((void *)v31 + 2);
                        }
                        while (*(_DWORD **)v31 != v36);
                      }
                    }
                  }
                  while (v31 != (_DWORD *)v103 && v22 != &v100);
                  v29 = (char *)__p;
                  v30 = v97;
                }
                if (v30 - v29 == 4)
                {
                  uint64_t v41 = v105;
                  if ((unint64_t)v105 >= v94)
                  {
                    uint64_t v43 = (v105 - v14) >> 2;
                    unint64_t v44 = v43 + 1;
                    if ((unint64_t)(v43 + 1) >> 62) {
                      sub_25B3FBC4C();
                    }
                    if ((uint64_t)(v94 - (void)v14) >> 1 > v44) {
                      unint64_t v44 = (uint64_t)(v94 - (void)v14) >> 1;
                    }
                    if (v94 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v45 = v44;
                    }
                    if (v45) {
                      unint64_t v45 = (unint64_t)sub_25B3FBC64(v45);
                    }
                    else {
                      uint64_t v46 = 0;
                    }
                    unint64_t v47 = (char *)(v45 + 4 * v43);
                    *(_DWORD *)unint64_t v47 = *((_DWORD *)v30 - 1);
                    int64_t v42 = v47 + 4;
                    while (v41 != v14)
                    {
                      int v48 = *((_DWORD *)v41 - 1);
                      v41 -= 4;
                      *((_DWORD *)v47 - 1) = v48;
                      v47 -= 4;
                    }
                    unint64_t v104 = v47;
                    unint64_t v105 = v42;
                    unint64_t v94 = v45 + 4 * v46;
                    unint64_t v106 = v94;
                    if (v14) {
                      operator delete(v14);
                    }
                    unint64_t v14 = v47;
                  }
                  else
                  {
                    *(_DWORD *)unint64_t v105 = *((_DWORD *)v30 - 1);
                    int64_t v42 = v41 + 4;
                  }
                  unint64_t v105 = v42;
                  v29 = (char *)__p;
                }
                int8x8_t v2 = v28;
                if (v29)
                {
                  int v97 = v29;
                  operator delete(v29);
                }
                sub_25B3FA930(v100);
                sub_25B3FA930(v103[0]);
                uint64_t v5 = v93;
              }
              int v49 = (void *)v12[1];
              if (v49)
              {
                do
                {
                  int v50 = v49;
                  int v49 = (void *)*v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  int v50 = (void *)v12[2];
                  BOOL v32 = *v50 == (void)v12;
                  BOOL v12 = v50;
                }
                while (!v32);
              }
              BOOL v12 = v50;
            }
            while (v50 != v13);
          }
        }
      }
      uint8x8_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  sub_25B3FBD64((uint64_t)&v102, (uint64_t)&v104);
  unint64_t v52 = v102;
  unint64_t v51 = (char *)v103[0];
  if (v102) {
    operator delete(v102);
  }
  if (v104) {
    operator delete(v104);
  }
  if ((unint64_t)(v51 - v52) <= 7)
  {
    for (uint64_t i = (uint64_t *)v2[2]; i; uint64_t i = (uint64_t *)*i)
    {
      uint64_t v54 = a1[3];
      unint64_t v56 = *(_DWORD **)(v54 + 8);
      unint64_t v55 = *(void *)(v54 + 16);
      if ((unint64_t)v56 >= v55)
      {
        unint64_t v58 = *(_DWORD **)v54;
        uint64_t v59 = ((uint64_t)v56 - *(void *)v54) >> 2;
        unint64_t v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        uint64_t v61 = v55 - (void)v58;
        if (v61 >> 1 > v60) {
          unint64_t v60 = v61 >> 1;
        }
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v60;
        }
        if (v62)
        {
          unint64_t v62 = (unint64_t)sub_25B3FBC64(v62);
          unint64_t v58 = *(_DWORD **)v54;
          unint64_t v56 = *(_DWORD **)(v54 + 8);
        }
        else
        {
          uint64_t v63 = 0;
        }
        long long v64 = (_DWORD *)(v62 + 4 * v59);
        _DWORD *v64 = *((_DWORD *)i + 4);
        uint64_t v57 = v64 + 1;
        while (v56 != v58)
        {
          int v65 = *--v56;
          *--long long v64 = v65;
        }
        *(void *)uint64_t v54 = v64;
        *(void *)(v54 + 8) = v57;
        *(void *)(v54 + 16) = v62 + 4 * v63;
        if (v58) {
          operator delete(v58);
        }
      }
      else
      {
        *unint64_t v56 = *((_DWORD *)i + 4);
        uint64_t v57 = v56 + 1;
      }
      *(void *)(v54 + 8) = v57;
      uint64_t v66 = a1[2];
      uint64_t v67 = *(void *)(v66 + 320);
      if (v67)
      {
        uint64_t v68 = v66 + 320;
        int v69 = *((_DWORD *)i + 4);
        uint64_t v70 = v66 + 320;
        do
        {
          int v71 = *(_DWORD *)(v67 + 32);
          BOOL v72 = v71 < v69;
          if (v71 >= v69) {
            v73 = (uint64_t *)v67;
          }
          else {
            v73 = (uint64_t *)(v67 + 8);
          }
          if (!v72) {
            uint64_t v70 = v67;
          }
          uint64_t v67 = *v73;
        }
        while (*v73);
        if (v70 != v68 && v69 >= *(_DWORD *)(v70 + 32))
        {
          BOOL v74 = (void **)a1[4];
          long long v75 = (_OWORD *)(v70 + 40);
          unint64_t v76 = v74[1];
          unint64_t v77 = (unint64_t)v74[2];
          if ((unint64_t)v76 >= v77)
          {
            uint64_t v80 = ((char *)v76 - (unsigned char *)*v74) >> 5;
            unint64_t v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 59) {
              sub_25B3FBC4C();
            }
            uint64_t v82 = v77 - (void)*v74;
            if (v82 >> 4 > v81) {
              unint64_t v81 = v82 >> 4;
            }
            if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v83 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v83 = v81;
            }
            if (v83) {
              unint64_t v83 = (unint64_t)sub_25B3FBC9C(v83);
            }
            else {
              uint64_t v84 = 0;
            }
            uint64_t v85 = (_OWORD *)(v83 + 32 * v80);
            long long v86 = v75[1];
            *uint64_t v85 = *v75;
            v85[1] = v86;
            uint64_t v88 = (char *)*v74;
            unint64_t v87 = (char *)v74[1];
            v89 = v85;
            if (v87 != *v74)
            {
              do
              {
                long long v90 = *((_OWORD *)v87 - 1);
                *(v89 - 2) = *((_OWORD *)v87 - 2);
                *(v89 - 1) = v90;
                v89 -= 2;
                v87 -= 32;
              }
              while (v87 != v88);
              unint64_t v87 = (char *)*v74;
            }
            v79 = v85 + 2;
            *BOOL v74 = v89;
            v74[1] = v85 + 2;
            v74[2] = (void *)(v83 + 32 * v84);
            if (v87) {
              operator delete(v87);
            }
          }
          else
          {
            long long v78 = v75[1];
            *unint64_t v76 = *v75;
            v76[1] = v78;
            v79 = v76 + 2;
          }
          v74[1] = v79;
        }
      }
    }
  }
  return 1;
}

void sub_25B3FBBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B3FBC4C()
{
}

void *sub_25B3FBC64(unint64_t a1)
{
  if (a1 >> 62) {
    sub_25B3FA70C();
  }
  return operator new(4 * a1);
}

void *sub_25B3FBC9C(unint64_t a1)
{
  if (a1 >> 59) {
    sub_25B3FA70C();
  }
  return operator new(32 * a1);
}

void sub_25B3FBCD4(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_25B3FBD30(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_2708F2790, MEMORY[0x263F8C060]);
}

void sub_25B3FBD1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_25B3FBD30(std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

uint64_t sub_25B3FBD64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int **)a2;
  *(void *)a1 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  memset(v9, 0, sizeof(v9));
  int v10 = 1065353216;
  uint64_t v5 = (int *)v4;
  if (v3 != (int *)v4)
  {
    uint64_t v6 = v3;
    int v7 = v3;
    do
    {
      if (sub_25B3FAF64((uint64_t)v9, *v7, *v7)) {
        *v6++ = *v7;
      }
      ++v7;
    }
    while (v7 != v5);
    uint64_t v3 = v6;
  }
  if (v3 != v5) {
    *(void *)(a1 + 8) = v3;
  }
  return sub_25B3FB178((uint64_t)v9);
}

void sub_25B3FBE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_25B3FB178((uint64_t)&a9);
  if (v10)
  {
    *(void *)(v9 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_25B3FBE5C(uint64_t *result, int a2, int a3)
{
  long long v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return sub_25B3FA740(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t *sub_25B3FBF08(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *(_DWORD **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    int v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v6 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_25B3FBC4C();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    BOOL v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v13 = (unint64_t)sub_25B3FBC64(v13);
      int v8 = *(_DWORD **)v4;
      uint64_t v6 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = (_DWORD *)(v13 + 4 * v9);
    unint64_t v16 = v13 + 4 * v14;
    *uint64_t v15 = *a2;
    int v7 = v15 + 1;
    while (v6 != v8)
    {
      int v17 = *--v6;
      *--uint64_t v15 = v17;
    }
    *(void *)uint64_t v4 = v15;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v6 = *a2;
    int v7 = v6 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

__n128 sub_25B3FBFF4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2708F11A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_25B3FC024(uint64_t a1)
{
  int8x8_t v2 = (char *)operator new(0x28uLL);
  *(void *)int8x8_t v2 = &unk_2708F11A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_25B3FC078()
{
}

void sub_25B3FC090(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_25B3FC0EC(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_2708F21D0, MEMORY[0x263F8C068]);
}

void sub_25B3FC0D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_25B3FC0EC(std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

uint64_t ***sub_25B3FC120(void *a1, void *a2)
{
  int8x8_t v2 = (uint64_t ***)a1;
  a1[1] = 0;
  uint64_t v3 = (uint64_t **)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  uint64_t v6 = (void *)*a2;
  uint64_t v4 = a2 + 1;
  unint64_t v5 = v6;
  if (v6 != v4)
  {
    uint64_t v38 = (uint64_t **)(a1 + 1);
    int v36 = v4;
    do
    {
      int v7 = (uint64_t *)v2[1];
      int v8 = v3;
      if (*v2 == v3) {
        goto LABEL_9;
      }
      uint64_t v9 = v2[1];
      unint64_t v10 = v3;
      if (v7)
      {
        do
        {
          int v8 = v9;
          uint64_t v9 = (uint64_t **)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          int v8 = (uint64_t **)v10[2];
          BOOL v11 = *v8 == (uint64_t *)v10;
          unint64_t v10 = v8;
        }
        while (v11);
      }
      int v12 = *((_DWORD *)v5 + 8);
      if (*((_DWORD *)v8 + 8) < v12)
      {
LABEL_9:
        if (v7) {
          unint64_t v13 = v8;
        }
        else {
          unint64_t v13 = v3;
        }
        if (v7) {
          uint64_t v14 = v8 + 1;
        }
        else {
          uint64_t v14 = v3;
        }
      }
      else
      {
        unint64_t v13 = v3;
        uint64_t v14 = v3;
        if (v7)
        {
          uint64_t v14 = v3;
          while (1)
          {
            while (1)
            {
              unint64_t v13 = (uint64_t **)v7;
              int v34 = *((_DWORD *)v7 + 8);
              if (v12 >= v34) {
                break;
              }
              int v7 = *v13;
              uint64_t v14 = v13;
              if (!*v13) {
                goto LABEL_16;
              }
            }
            if (v34 >= v12) {
              break;
            }
            uint64_t v14 = v13 + 1;
            int v7 = v13[1];
            if (!v7) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v14)
      {
LABEL_16:
        uint64_t v15 = (uint64_t *)operator new(0x40uLL);
        int v16 = *((_DWORD *)v5 + 8);
        v39 = v15;
        v15[6] = 0;
        int v17 = v15 + 6;
        *((_DWORD *)v15 + 8) = v16;
        v15[7] = 0;
        v15[5] = (uint64_t)(v15 + 6);
        uint64_t v18 = (void *)v5[5];
        if (v18 != v5 + 6)
        {
          int v19 = v15 + 5;
          do
          {
            uint64_t v20 = *v17;
            unint64_t v21 = v17;
            if ((void *)*v19 == v17) {
              goto LABEL_24;
            }
            uint64_t v22 = (void *)*v17;
            int v23 = v17;
            if (v20)
            {
              do
              {
                unint64_t v21 = v22;
                uint64_t v22 = (void *)v22[1];
              }
              while (v22);
            }
            else
            {
              do
              {
                unint64_t v21 = (void *)v23[2];
                BOOL v11 = *v21 == (void)v23;
                int v23 = v21;
              }
              while (v11);
            }
            int v24 = *((_DWORD *)v18 + 7);
            if (*((_DWORD *)v21 + 7) < v24)
            {
LABEL_24:
              if (v20) {
                int v25 = (uint64_t **)v21;
              }
              else {
                int v25 = (uint64_t **)v17;
              }
              if (v20) {
                BOOL v26 = (uint64_t **)(v21 + 1);
              }
              else {
                BOOL v26 = (uint64_t **)v17;
              }
            }
            else
            {
              int v25 = (uint64_t **)v17;
              BOOL v26 = (uint64_t **)v17;
              if (v20)
              {
                v30 = (uint64_t *)*v17;
                BOOL v26 = (uint64_t **)v17;
                while (1)
                {
                  while (1)
                  {
                    int v25 = (uint64_t **)v30;
                    int v31 = *((_DWORD *)v30 + 7);
                    if (v24 >= v31) {
                      break;
                    }
                    v30 = *v25;
                    BOOL v26 = v25;
                    if (!*v25) {
                      goto LABEL_31;
                    }
                  }
                  if (v31 >= v24) {
                    break;
                  }
                  BOOL v26 = v25 + 1;
                  v30 = v25[1];
                  if (!v30) {
                    goto LABEL_31;
                  }
                }
              }
            }
            if (!*v26)
            {
LABEL_31:
              uint64_t v27 = (uint64_t *)operator new(0x28uLL);
              *(uint64_t *)((char *)v27 + 28) = *(void *)((char *)v18 + 28);
              sub_25B3FA740((uint64_t **)v17 - 1, (uint64_t)v25, v26, v27);
            }
            uint64_t v28 = (void *)v18[1];
            if (v28)
            {
              do
              {
                v29 = v28;
                uint64_t v28 = (void *)*v28;
              }
              while (v28);
            }
            else
            {
              do
              {
                v29 = (void *)v18[2];
                BOOL v11 = *v29 == (void)v18;
                uint64_t v18 = v29;
              }
              while (!v11);
            }
            uint64_t v18 = v29;
          }
          while (v29 != v5 + 6);
        }
        int8x8_t v2 = (uint64_t ***)a1;
        sub_25B3FA740((uint64_t **)a1, (uint64_t)v13, v14, v39);
        uint64_t v3 = v38;
        uint64_t v4 = v36;
      }
      BOOL v32 = (void *)v5[1];
      if (v32)
      {
        do
        {
          int v33 = v32;
          BOOL v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          int v33 = (void *)v5[2];
          BOOL v11 = *v33 == (void)v5;
          unint64_t v5 = v33;
        }
        while (!v11);
      }
      unint64_t v5 = v33;
    }
    while (v33 != v4);
  }
  return v2;
}

void sub_25B3FC3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void *__p)
{
}

uint64_t sub_25B3FC41C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_25B3FA4B0(a1, *(void *)(a2 + 8));
  unint64_t v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 16);
    do
    {
      int v8 = *((_DWORD *)v5 + 4);
      int v7 = *((_DWORD *)v5 + 5);
      if (v7 >= v8) {
        int v9 = *((_DWORD *)v5 + 4);
      }
      else {
        int v9 = *((_DWORD *)v5 + 5);
      }
      unint64_t v10 = v9 + 2654435769;
      if (v7 <= v8) {
        int v11 = *((_DWORD *)v5 + 4);
      }
      else {
        int v11 = *((_DWORD *)v5 + 5);
      }
      unint64_t v12 = (v11 + 2654435769 + (v10 << 6) + (v10 >> 2)) ^ v10;
      unint64_t v13 = *(void *)(a1 + 8);
      if (v13)
      {
        uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          uint64_t v2 = (v11 + 2654435769 + (v10 << 6) + (v10 >> 2)) ^ v10;
          if (v12 >= v13) {
            uint64_t v2 = v12 % v13;
          }
        }
        else
        {
          uint64_t v2 = v12 & (v13 - 1);
        }
        uint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
        if (v15)
        {
          for (uint64_t i = *v15; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v17 = i[1];
            if (v17 == v12)
            {
              int v18 = *((_DWORD *)i + 4);
              if (v18 == v8 && *((_DWORD *)i + 5) == v7 || v18 == v7 && *((_DWORD *)i + 5) == v8) {
                goto LABEL_50;
              }
            }
            else
            {
              if (v14.u32[0] > 1uLL)
              {
                if (v17 >= v13) {
                  v17 %= v13;
                }
              }
              else
              {
                v17 &= v13 - 1;
              }
              if (v17 != v2) {
                break;
              }
            }
          }
        }
      }
      int v19 = (char *)operator new(0xA8uLL);
      *(void *)int v19 = 0;
      *((void *)v19 + 1) = v12;
      *((void *)v19 + 2) = v5[2];
      long long v20 = *(_OWORD *)(v5 + 5);
      long long v21 = *(_OWORD *)(v5 + 7);
      long long v22 = *(_OWORD *)(v5 + 9);
      uint64_t v23 = v5[11];
      long long v24 = *(_OWORD *)(v5 + 3);
      *((void *)v19 + 12) = 0;
      *(_OWORD *)(v19 + 24) = v24;
      *((void *)v19 + 11) = v23;
      *(_OWORD *)(v19 + 72) = v22;
      *(_OWORD *)(v19 + 56) = v21;
      *(_OWORD *)(v19 + 40) = v20;
      *((void *)v19 + 13) = 0;
      *((void *)v19 + 14) = 0;
      sub_25B3FCA58((void *)v19 + 12, (const void *)v5[12], v5[13], (v5[13] - v5[12]) >> 2);
      long long v25 = *(_OWORD *)(v5 + 15);
      long long v26 = *(_OWORD *)(v5 + 17);
      *(_OWORD *)(v19 + 148) = *(_OWORD *)((char *)v5 + 148);
      *(_OWORD *)(v19 + 136) = v26;
      *(_OWORD *)(v19 + 120) = v25;
      float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v28 = *(float *)(a1 + 32);
      if (!v13 || (float)(v28 * (float)v13) < v27)
      {
        BOOL v29 = (v13 & (v13 - 1)) != 0;
        if (v13 < 3) {
          BOOL v29 = 1;
        }
        unint64_t v30 = v29 | (2 * v13);
        unint64_t v31 = vcvtps_u32_f32(v27 / v28);
        if (v30 <= v31) {
          size_t v32 = v31;
        }
        else {
          size_t v32 = v30;
        }
        sub_25B3FA4B0(a1, v32);
        unint64_t v13 = *(void *)(a1 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v12 >= v13) {
            uint64_t v2 = v12 % v13;
          }
          else {
            uint64_t v2 = v12;
          }
        }
        else
        {
          uint64_t v2 = (v13 - 1) & v12;
        }
      }
      uint64_t v33 = *(void *)a1;
      int v34 = *(void **)(*(void *)a1 + 8 * v2);
      if (v34)
      {
        *(void *)int v19 = *v34;
      }
      else
      {
        *(void *)int v19 = *v6;
        void *v6 = v19;
        *(void *)(v33 + 8 * v2) = v6;
        if (!*(void *)v19) {
          goto LABEL_49;
        }
        unint64_t v35 = *(void *)(*(void *)v19 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v35 >= v13) {
            v35 %= v13;
          }
        }
        else
        {
          v35 &= v13 - 1;
        }
        int v34 = (void *)(*(void *)a1 + 8 * v35);
      }
      void *v34 = v19;
LABEL_49:
      ++*(void *)(a1 + 24);
LABEL_50:
      unint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_25B3FC6EC(_Unwind_Exception *a1)
{
  sub_25B3FAD08(v1);
  _Unwind_Resume(a1);
}

void *sub_25B3FC724(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_25B3FCA18(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25B3FC784(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B3FC7A0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_25B3FA4B0(a1, *(void *)(a2 + 8));
  unint64_t v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = *((int *)v5 + 4);
      unint64_t v8 = *(void *)(a1 + 8);
      if (v8)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = *((int *)v5 + 4);
          if (v8 <= v7) {
            unint64_t v2 = v7 % v8;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v7;
        }
        unint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v12 = i[1];
            if (v12 == v7)
            {
              if (*((_DWORD *)i + 4) == v7) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v8) {
                  v12 %= v8;
                }
              }
              else
              {
                v12 &= v8 - 1;
              }
              if (v12 != v2) {
                break;
              }
            }
          }
        }
      }
      unint64_t v13 = operator new(0x30uLL);
      *unint64_t v13 = 0;
      v13[1] = v7;
      *((_DWORD *)v13 + 4) = *((_DWORD *)v5 + 4);
      v13[4] = 0;
      v13[5] = 0;
      v13[3] = 0;
      sub_25B3FC724(v13 + 3, (const void *)v5[3], v5[4], (v5[4] - v5[3]) >> 2);
      float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v15 = *(float *)(a1 + 32);
      if (!v8 || (float)(v15 * (float)v8) < v14)
      {
        BOOL v16 = (v8 & (v8 - 1)) != 0;
        if (v8 < 3) {
          BOOL v16 = 1;
        }
        unint64_t v17 = v16 | (2 * v8);
        unint64_t v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18) {
          size_t v19 = v18;
        }
        else {
          size_t v19 = v17;
        }
        sub_25B3FA4B0(a1, v19);
        unint64_t v8 = *(void *)(a1 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v8 <= v7) {
            unint64_t v2 = v7 % v8;
          }
          else {
            unint64_t v2 = v7;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v7;
        }
      }
      uint64_t v20 = *(void *)a1;
      long long v21 = *(void **)(*(void *)a1 + 8 * v2);
      if (v21)
      {
        *unint64_t v13 = *v21;
      }
      else
      {
        *unint64_t v13 = *v6;
        void *v6 = v13;
        *(void *)(v20 + 8 * v2) = v6;
        if (!*v13) {
          goto LABEL_40;
        }
        unint64_t v22 = *(void *)(*v13 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v22 >= v8) {
            v22 %= v8;
          }
        }
        else
        {
          v22 &= v8 - 1;
        }
        long long v21 = (void *)(*(void *)a1 + 8 * v22);
      }
      *long long v21 = v13;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      unint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_25B3FC9E0(_Unwind_Exception *a1)
{
  sub_25B3FACCC(v1);
  _Unwind_Resume(a1);
}

char *sub_25B3FCA18(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_25B3FBC4C();
  }
  __n128 result = (char *)sub_25B3FBC64(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *sub_25B3FCA58(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_25B3FCA18(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25B3FCAB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_25B3FCAD4(unint64_t a1)
{
  if (a1 >> 61) {
    sub_25B3FA70C();
  }
  return operator new(8 * a1);
}

uint64_t sub_25B3FCB0C(float32x2_t *a1, uint64_t a2, int a3, unsigned __int8 a4, int a5, char a6, int a7, float32x4_t a8, float32x4_t a9, float32x4_t a10)
{
  if (!a2) {
    return 0;
  }
  uint64_t v12 = a2;
  float32x2_t v13 = *(float32x2_t *)a9.f32;
  float32x2_t v14 = *(float32x2_t *)a8.f32;
  uint64_t v15 = a3;
  uint64_t v16 = a5;
  int32x2_t v17 = (int32x2_t)vsub_f32(*(float32x2_t *)a9.f32, *(float32x2_t *)a8.f32);
  a9.f32[0] = -*(float *)&v17.i32[1];
  float32x2_t v18 = (float32x2_t)vzip1_s32(*(int32x2_t *)a9.f32, v17);
  float32x2_t v19 = vsub_f32(v14, v13);
  int32x2_t v20 = (int32x2_t)vmul_f32(v19, v19);
  long long v21 = a1 + 1;
  int v22 = a4;
  while (1)
  {
    if (a6) {
      BOOL v23 = v16 == 0;
    }
    else {
      BOOL v23 = 0;
    }
    char v24 = v23;
    if (v15) {
      BOOL v25 = 1;
    }
    else {
      BOOL v25 = v22 == 0;
    }
    if (!v25 || (v24 & 1) != 0) {
      goto LABEL_25;
    }
    float32x2_t v27 = v21[-1];
    float32x2_t v26 = *v21;
    *(float32x2_t *)a8.f32 = v14;
    *(float32x2_t *)a9.f32 = v13;
    *(float32x2_t *)a10.f32 = v27;
    uint64_t v28 = sub_25B40E774(a8, a9, a10, *v21);
    *(float32x2_t *)a9.f32 = vsub_f32(v26, v27);
    *(float32x2_t *)a8.f32 = vmul_f32(*(float32x2_t *)a9.f32, v18);
    if (vaddv_f32(*(float32x2_t *)a8.f32) != 0.0) {
      break;
    }
    if (v29) {
      goto LABEL_21;
    }
LABEL_25:
    --v16;
    --v15;
    v21 += 4;
    if (!--v12) {
      return 0;
    }
  }
  if (v29)
  {
LABEL_21:
    float32x2_t v31 = (float32x2_t)v28;
    goto LABEL_22;
  }
  int32x2_t v30 = (int32x2_t)vmul_f32(vsub_f32(v14, v27), v18);
  float32x2_t v31 = vmla_n_f32(v27, *(float32x2_t *)a9.f32, vdiv_f32(vadd_f32((float32x2_t)v30, (float32x2_t)vdup_lane_s32(v30, 1)), vadd_f32(*(float32x2_t *)a8.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)a8.f32, 1))).f32[0]);
  float32x2_t v32 = vsub_f32(v31, v27);
  if (sqrtf(vaddv_f32(vmul_f32(v32, v32))) >= 0.03)
  {
    float32x2_t v33 = vsub_f32(v31, v26);
    if (sqrtf(vaddv_f32(vmul_f32(v33, v33))) >= 0.03) {
      goto LABEL_25;
    }
  }
LABEL_22:
  if (a7)
  {
    float32x2_t v34 = vsub_f32(v31, v13);
    if (vaddv_f32(vmul_f32(v19, v34)) < 0.0) {
      goto LABEL_25;
    }
    int32x2_t v35 = (int32x2_t)vmul_f32(v34, v34);
    int32x2_t v36 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v20, v35), (float32x2_t)vzip2_s32(v20, v35)));
    if (vsub_f32((float32x2_t)v36, (float32x2_t)vdup_lane_s32(v36, 1)).f32[0] <= 0.15) {
      goto LABEL_25;
    }
  }
  return 1;
}

float sub_25B3FCCE0(float32x2_t *a1, float32x2_t *a2, int a3)
{
  sub_25B3FD008(&v35, a1, a2);
  uint64_t v6 = v35;
  uint64_t v7 = v35 + 1;
  BOOL v8 = v35 == v36 || v7 == v36;
  uint8x8_t v9 = v35;
  if (!v8)
  {
    float v10 = *v35;
    uint8x8_t v9 = v35;
    int v11 = v35 + 1;
    do
    {
      float v12 = *v11++;
      float v13 = v12;
      if (v12 < v10)
      {
        float v10 = v13;
        uint8x8_t v9 = v7;
      }
      uint64_t v7 = v11;
    }
    while (v11 != v36);
  }
  float32x2_t v14 = vsub_f32(a1[(unint64_t)(v9 - v35) >> 1], a1[1 - ((unint64_t)(v9 - v35) >> 1)]);
  float32x2_t v15 = vsub_f32(a2[(v9 - v35) & 1], a2[!((v9 - v35) & 1)]);
  if (a3)
  {
    float64x2_t v16 = vcvtq_f64_f32(v14);
    float64x2_t v17 = vcvtq_f64_f32(v15);
    double v18 = vaddvq_f64(vmulq_f64(v16, v17));
    int64x2_t v19 = (int64x2_t)vmulq_f64(v16, v16);
    int64x2_t v20 = (int64x2_t)vmulq_f64(v17, v17);
    float64x2_t v21 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v19, v20), (float64x2_t)vzip2q_s64(v19, v20)));
    double v22 = v18 / fmax(vmulq_laneq_f64(v21, v21, 1).f64[0], 2.22507386e-308);
    double v23 = 1.0;
    if (v22 <= 1.0) {
      double v23 = v22;
    }
    if (v22 >= -1.0) {
      double v24 = v23;
    }
    else {
      double v24 = -1.0;
    }
    double v25 = acos(v24);
    double v26 = 3.14159265;
    if (!v6) {
      return v25 * 180.0 / v26;
    }
LABEL_23:
    operator delete(v6);
    return v25 * 180.0 / v26;
  }
  float v27 = vaddv_f32(vmul_f32(v14, v15));
  int32x2_t v28 = (int32x2_t)vmul_f32(v14, v14);
  int32x2_t v29 = (int32x2_t)vmul_f32(v15, v15);
  float32x2_t v30 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v28, v29), (float32x2_t)vzip2_s32(v28, v29)));
  float v31 = v27 / fmaxf(vmul_lane_f32(v30, v30, 1).f32[0], 1.1755e-38);
  float v32 = 1.0;
  if (v31 <= 1.0) {
    float v32 = v31;
  }
  if (v31 >= -1.0) {
    float v33 = v32;
  }
  else {
    float v33 = -1.0;
  }
  double v25 = acosf(v33);
  double v26 = 3.14159274;
  if (v6) {
    goto LABEL_23;
  }
  return v25 * 180.0 / v26;
}

uint64_t sub_25B3FCE90(float32x2_t *a1, float32x2_t *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v3 = a2;
  unint64_t v5 = &a2[4 * a3];
  while (1)
  {
    float v6 = sub_25B3FCCE0(a1, v3, 0);
    sub_25B3FD008(&v22, a1, v3);
    uint64_t v7 = v22 + 1;
    BOOL v8 = v22 == v23 || v7 == v23;
    uint8x8_t v9 = v22;
    if (!v8)
    {
      float v10 = *v22;
      uint8x8_t v9 = v22;
      int v11 = v22 + 1;
      do
      {
        float v12 = *v11++;
        float v13 = v12;
        if (v12 < v10)
        {
          float v10 = v13;
          uint8x8_t v9 = v7;
        }
        uint64_t v7 = v11;
      }
      while (v11 != v23);
    }
    uint64_t v14 = v9 - v22;
    uint64_t v15 = v14 >= 0 ? v14 : v14 + 1;
    unint64_t v16 = v14 - (v15 & 0xFFFFFFFFFFFFFFFELL);
    float32x2_t v17 = vsub_f32(a1[v15 >> 1], v3[v16]);
    if (sqrtf(vaddv_f32(vmul_f32(v17, v17))) < 0.5)
    {
      float32x2_t v18 = vsub_f32(a1[1 - (v15 >> 1)], v3[1 - v16]);
      float v19 = sqrtf(vaddv_f32(vmul_f32(v18, v18)));
      float v20 = fabsf(v6);
      if ((v20 > 15.0 || v20 > 165.0) && v19 < 0.5) {
        break;
      }
    }
    if (v22) {
      operator delete(v22);
    }
    v3 += 4;
    if (v3 == v5) {
      return 0;
    }
  }
  if (v22) {
    operator delete(v22);
  }
  return 1;
}

void sub_25B3FD008(float **a1, float32x2_t *a2, float32x2_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  float32x2_t v6 = *a2;
  float32x2_t v7 = *a3;
  BOOL v8 = (float *)operator new(4uLL);
  float32x2_t v9 = vsub_f32(v6, v7);
  float *v8 = sqrtf(vaddv_f32(vmul_f32(v9, v9)));
  *a1 = v8;
  a1[1] = v8 + 1;
  a1[2] = v8 + 1;
  float32x2_t v10 = a3[1];
  int v11 = (float *)sub_25B3FBC64(2uLL);
  uint64_t v13 = v12;
  float32x2_t v14 = vsub_f32(v6, v10);
  v11[1] = sqrtf(vaddv_f32(vmul_f32(v14, v14)));
  uint64_t v15 = &v11[v12];
  *int v11 = *v8;
  *a1 = v11;
  a1[1] = v11 + 2;
  a1[2] = v15;
  operator delete(v8);
  a1[1] = v11 + 2;
  float32x2_t v16 = vsub_f32(a2[1], *a3);
  float v17 = sqrtf(vaddv_f32(vmul_f32(v16, v16)));
  if (v13 < 3)
  {
    uint64_t v19 = 3;
    if ((unint64_t)(((char *)v15 - (char *)v11) >> 1) > 3) {
      uint64_t v19 = ((char *)v15 - (char *)v11) >> 1;
    }
    if ((unint64_t)((char *)v15 - (char *)v11) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20) {
      unint64_t v20 = (unint64_t)sub_25B3FBC64(v20);
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = 0;
    *(float *)(v20 + 8) = v17;
    float32x2_t v18 = (float *)(v20 + 12);
    do
    {
      *(float *)(v20 + 8 + v22 * 4 - 4) = v11[v22 + 1];
      --v22;
    }
    while (v22 != -2);
    *a1 = (float *)v20;
    a1[1] = v18;
    a1[2] = (float *)(v20 + 4 * v21);
    operator delete(v11);
    uint64_t v15 = a1[2];
  }
  else
  {
    v11[2] = v17;
    float32x2_t v18 = v11 + 3;
  }
  a1[1] = v18;
  float32x2_t v23 = vsub_f32(a2[1], a3[1]);
  float v24 = sqrtf(vaddv_f32(vmul_f32(v23, v23)));
  if (v18 >= v15)
  {
    double v26 = *a1;
    uint64_t v27 = v18 - *a1;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 62) {
      sub_25B3FBC4C();
    }
    if (((char *)v15 - (char *)v26) >> 1 > v28) {
      unint64_t v28 = ((char *)v15 - (char *)v26) >> 1;
    }
    if ((unint64_t)((char *)v15 - (char *)v26) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v28;
    }
    if (v29) {
      unint64_t v29 = (unint64_t)sub_25B3FBC64(v29);
    }
    else {
      uint64_t v30 = 0;
    }
    float v31 = (float *)(v29 + 4 * v27);
    float *v31 = v24;
    double v25 = v31 + 1;
    while (v18 != v26)
    {
      int v32 = *((_DWORD *)v18-- - 1);
      *((_DWORD *)v31-- - 1) = v32;
    }
    *a1 = v31;
    a1[1] = v25;
    a1[2] = (float *)(v29 + 4 * v30);
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *float32x2_t v18 = v24;
    double v25 = v18 + 1;
  }
  a1[1] = v25;
}

void sub_25B3FD254(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_25B3FD284(uint64_t a1, char a2, float32x2_t *a3, float32x2_t *a4, uint64_t a5)
{
  float v6 = 0.0;
  if (a5)
  {
    if (!a2)
    {
      float32x2_t v7 = a4;
      BOOL v8 = &a4[4 * a5];
      do
      {
        float v9 = sub_25B3FCCE0(a3, v7, 0);
        float32x2_t v10 = *a3;
        float32x2_t v11 = a3[1];
        float32x2_t v12 = *v7;
        float32x2_t v13 = v7[1];
        *(float32x2_t *)v14.f32 = *a3;
        *(float32x2_t *)v15.f32 = v11;
        *(float32x2_t *)v16.f32 = *v7;
        sub_25B40E774(v14, v15, v16, v13);
        float v18 = fabsf(v9);
        BOOL v20 = v18 <= 170.0 && v18 >= 10.0 || v17 == 0;
        if (!v20)
        {
          float v21 = sub_25B40E468(v10, v11, v12, v13);
          float v22 = sub_25B40E468(v12, v13, v10, v11);
          if (v21 >= v22) {
            float v22 = v21;
          }
          if (v6 < v22) {
            float v6 = v22;
          }
        }
        v7 += 4;
      }
      while (v7 != v8);
    }
  }
  else if (a2)
  {
    float32x2_t v23 = *(float32x2_t **)(a1 + 312);
    float v24 = (float32x2_t **)(a1 + 320);
    if (v23 != (float32x2_t *)(a1 + 320))
    {
      do
      {
        float v25 = sub_25B3FCCE0(a3, v23 + 5, 0);
        float32x2_t v26 = *a3;
        float32x2_t v27 = a3[1];
        float32x2_t v28 = v23[5];
        float32x2_t v29 = v23[6];
        *(float32x2_t *)v30.f32 = *a3;
        *(float32x2_t *)v31.f32 = v27;
        *(float32x2_t *)v32.f32 = v28;
        sub_25B40E774(v30, v31, v32, v29);
        float v34 = fabsf(v25);
        if ((v34 > 170.0 || v34 < 10.0) && v33 != 0)
        {
          float v37 = sub_25B40E468(v26, v27, v28, v29);
          float v38 = sub_25B40E468(v28, v29, v26, v27);
          if (v37 >= v38) {
            float v38 = v37;
          }
          if (v6 < v38) {
            float v6 = v38;
          }
        }
        v39 = (float32x2_t *)v23[1];
        if (v39)
        {
          do
          {
            v40 = (float32x2_t **)v39;
            v39 = (float32x2_t *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = (float32x2_t **)v23[2];
            BOOL v20 = *v40 == v23;
            float32x2_t v23 = (float32x2_t *)v40;
          }
          while (!v20);
        }
        float32x2_t v23 = (float32x2_t *)v40;
      }
      while (v40 != v24);
    }
  }
  return v6 > 0.99;
}

uint64_t sub_25B3FD470(float32x2_t **a1, float32x2_t *a2, float a3)
{
  unint64_t v5 = *a1;
  float v6 = a1[1];
  uint64_t v7 = (char *)v6 - (char *)*a1;
  if (v6 == *a1) {
    goto LABEL_8;
  }
  uint64_t v8 = 0;
  uint64_t v9 = v7 >> 3;
  if ((unint64_t)(v7 >> 3) <= 1) {
    uint64_t v9 = 1;
  }
  while (1)
  {
    float32x2_t v10 = vsub_f32(*a2, v5[v8]);
    if (sqrtf(vaddv_f32(vmul_f32(v10, v10))) < a3) {
      break;
    }
    if (v9 == ++v8) {
      goto LABEL_8;
    }
  }
  if (v8 == -1)
  {
LABEL_8:
    unint64_t v11 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v11)
    {
      uint64_t v13 = v7 >> 3;
      unint64_t v14 = (v7 >> 3) + 1;
      if (v14 >> 61) {
        sub_25B3FBC4C();
      }
      uint64_t v15 = v11 - (void)v5;
      if (v15 >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16) {
        unint64_t v16 = (unint64_t)sub_25B3FCAD4(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      float v18 = (float32x2_t *)(v16 + 8 * v13);
      unint64_t v19 = v16 + 8 * v17;
      *float v18 = *a2;
      float32x2_t v12 = v18 + 1;
      float v21 = (char *)*a1;
      BOOL v20 = (char *)a1[1];
      if (v20 != (char *)*a1)
      {
        do
        {
          float32x2_t v22 = *(float32x2_t *)(v20 - 8);
          v20 -= 8;
          v18[-1] = v22;
          --v18;
        }
        while (v20 != v21);
        BOOL v20 = (char *)*a1;
      }
      *a1 = v18;
      a1[1] = v12;
      a1[2] = (float32x2_t *)v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      float32x2_t *v6 = *a2;
      float32x2_t v12 = v6 + 1;
    }
    a1[1] = v12;
    uint64_t v8 = ((unint64_t)((char *)v12 - (char *)*a1) >> 3) - 1;
    float32x2_t v50 = *a2;
    unint64_t v51 = v52;
    v52[0] = 0;
    v54[0] = 0;
    v54[1] = 0;
    v52[1] = 0;
    int v53 = v54;
    char v55 = 0;
    float32x2_t v23 = a1[39];
    if (v23 != (float32x2_t *)(a1 + 40))
    {
      do
      {
        BOOL v24 = v8 == v23[8].i32[0] || v8 == v23[8].i32[1];
        if (v24) {
          sub_25B3FBE5C((uint64_t *)&v51, v23[4].i32[0], v23[4].i32[0]);
        }
        if (sub_25B40DB9C(*a2, v23[5], v23[6], 0.00001) <= 0.1) {
          sub_25B3FBE5C((uint64_t *)&v53, v23[4].i32[0], v23[4].i32[0]);
        }
        float v25 = (float32x2_t *)v23[1];
        if (v25)
        {
          do
          {
            float32x2_t v26 = (float32x2_t **)v25;
            float v25 = (float32x2_t *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            float32x2_t v26 = (float32x2_t **)v23[2];
            BOOL v24 = *v26 == v23;
            float32x2_t v23 = (float32x2_t *)v26;
          }
          while (!v24);
        }
        float32x2_t v23 = (float32x2_t *)v26;
      }
      while (v26 != a1 + 40);
    }
    int v59 = v8;
    uint64_t v57 = 0;
    unint64_t v58 = 0;
    __p = &v57;
    float32x2_t v27 = sub_25B3FA1DC((uint64_t **)a1 + 17, v8, &v59);
    float32x2_t v28 = (uint64_t *)(v27 + 6);
    sub_25B3FA930(v27[6]);
    float32x2_t v29 = v57;
    v27[5] = (uint64_t *)__p;
    v27[6] = v29;
    float32x4_t v30 = v58;
    v27[7] = v58;
    if (v30)
    {
      v29[2] = (uint64_t)v28;
      __p = &v57;
      uint64_t v57 = 0;
      unint64_t v58 = 0;
      float32x2_t v29 = 0;
    }
    else
    {
      v27[5] = v28;
    }
    sub_25B3FA930(v29);
    float32x4_t v31 = sub_25B3FF7C0((uint64_t **)a1 + 20, v8, &v59);
    float32x4_t v32 = v31;
    v31[5] = (uint64_t *)v50;
    if (v31 + 5 != (uint64_t **)&v50)
    {
      sub_25B3FF894((uint64_t)(v31 + 6), v51, v52);
      sub_25B3FF894((uint64_t)(v32 + 9), v53, v54);
    }
    *((unsigned char *)v32 + 96) = v55;
    char v33 = (__int32 *)a1[29];
    float v34 = wmemchr((__int32 *)a1[28], v8, ((char *)v33 - (char *)a1[28]) >> 2);
    if (v34) {
      int32x2_t v35 = v34;
    }
    else {
      int32x2_t v35 = v33;
    }
    int32x2_t v36 = (__int32 *)a1[29];
    if (v35 == v36)
    {
      unint64_t v37 = (unint64_t)a1[30];
      if ((unint64_t)v35 >= v37)
      {
        v39 = (__int32 *)a1[28];
        uint64_t v40 = v36 - v39;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        uint64_t v42 = v37 - (void)v39;
        if (v42 >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        BOOL v43 = (unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v43) {
          unint64_t v44 = v41;
        }
        if (v44)
        {
          unint64_t v44 = (unint64_t)sub_25B3FBC64(v44);
          v39 = (__int32 *)a1[28];
          int32x2_t v35 = (__int32 *)a1[29];
        }
        else
        {
          uint64_t v45 = 0;
        }
        uint64_t v46 = (float32x2_t *)(v44 + 4 * v40);
        unint64_t v47 = v44 + 4 * v45;
        v46->i32[0] = v8;
        float v38 = (char *)v46 + 4;
        while (v35 != v39)
        {
          int v48 = *--v35;
          v46[-1].i32[1] = v48;
          uint64_t v46 = (float32x2_t *)((char *)v46 - 4);
        }
        a1[28] = v46;
        a1[29] = (float32x2_t *)v38;
        a1[30] = (float32x2_t *)v47;
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *int32x2_t v35 = v8;
        float v38 = (char *)(v35 + 1);
      }
      a1[29] = (float32x2_t *)v38;
      __p = 0;
      uint64_t v57 = 0;
      unint64_t v58 = 0;
      sub_25B3FF328((uint64_t)(a1 + 31), v59, v59, (uint64_t)&__p);
      if (__p) {
        operator delete(__p);
      }
    }
    sub_25B3FA930(v54[0]);
    sub_25B3FA930(v52[0]);
  }
  return v8;
}

void sub_25B3FD860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_25B3FA930(a14);
  sub_25B3FA930(a11);
  _Unwind_Resume(a1);
}

void sub_25B3FD8A4(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, float32x2_t a6, float32x2_t a7)
{
  if (sub_25B3FDC44((void *)(a2 + 184), a3, a4) || a5 >= 2)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    v59[0] = *(_DWORD *)(a2 + 64) + *(_DWORD *)(a2 + 40);
    int v14 = v59[0];
    *(float32x2_t *)&long long v57 = a6;
    *((float32x2_t *)&v57 + 1) = a7;
    *(void *)&long long v58 = __PAIR64__(a5, v59[0]);
    *((void *)&v58 + 1) = __PAIR64__(a4, a3);
    if (a5) {
      uint64_t v15 = (uint64_t **)(a2 + 48);
    }
    else {
      uint64_t v15 = (uint64_t **)(a2 + 24);
    }
    unint64_t v16 = sub_25B3F9544(v15, v59[0], v59);
    long long v17 = v57;
    *(_OWORD *)(v16 + 7) = v58;
    *(_OWORD *)(v16 + 5) = v17;
    float v18 = *(void **)(a2 + 160);
    if (v18 != (void *)(a2 + 168))
    {
      do
      {
        int v19 = *((_DWORD *)v18 + 8);
        BOOL v20 = v19 == DWORD2(v58) || v19 == HIDWORD(v58);
        if (v20) {
          sub_25B3FBE5C(v18 + 6, v58, v58);
        }
        if (sub_25B40DB9C((float32x2_t)v18[5], *(float32x2_t *)&v57, *(float32x2_t *)((char *)&v57 + 8), 0.00001) <= 0.1) {
          sub_25B3FBE5C(v18 + 9, v58, v58);
        }
        float v21 = (void *)v18[1];
        if (v21)
        {
          do
          {
            float32x2_t v22 = v21;
            float v21 = (void *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            float32x2_t v22 = (void *)v18[2];
            BOOL v20 = *v22 == (void)v18;
            float v18 = v22;
          }
          while (!v20);
        }
        float v18 = v22;
      }
      while (v22 != (void *)(a2 + 168));
      a7 = *(float32x2_t *)((char *)&v57 + 8);
      a6 = *(float32x2_t *)&v57;
      int v14 = v59[0];
    }
    float32x2_t v23 = vsub_f32(a6, a7);
    sub_25B3FDD40((uint64_t **)(a2 + 136), a3, a4, &v57, sqrtf(vaddv_f32(vmul_f32(v23, v23))));
    sub_25B3FE034(a2 + 288, v14, &v57);
    BOOL v24 = *(void **)(a2 + 312);
    if (v24 != (void *)(a2 + 320))
    {
      do
      {
        if (*((_DWORD *)v24 + 8) < v14)
        {
          sub_25B3FE20C((uint64_t)v51, v24 + 5, &v57);
          LODWORD(v50) = *((_DWORD *)v24 + 8);
          HIDWORD(v50) = v14;
          float v25 = sub_25B3FE508(a2 + 464, v50, v14, &v50);
          float32x2_t v26 = v25;
          uint64_t v27 = v52;
          long long v29 = v51[2];
          long long v28 = v51[3];
          long long v30 = v51[0];
          *(_OWORD *)(v25 + 40) = v51[1];
          *(_OWORD *)(v25 + 56) = v29;
          *(_OWORD *)(v25 + 72) = v28;
          *((void *)v25 + 11) = v27;
          *(_OWORD *)(v25 + 24) = v30;
          if (v25 + 24 != (char *)v51) {
            sub_25B3FE7A8(v25 + 96, (char *)__p, (uint64_t)v54, (v54 - (unsigned char *)__p) >> 2);
          }
          long long v31 = *(_OWORD *)((char *)v56 + 12);
          long long v32 = v56[0];
          *(_OWORD *)(v26 + 120) = v55;
          *(_OWORD *)(v26 + 136) = v32;
          *(_OWORD *)(v26 + 148) = v31;
          float v34 = *(void **)(a2 + 448);
          unint64_t v33 = *(void *)(a2 + 456);
          if ((unint64_t)v34 >= v33)
          {
            uint64_t v36 = *(void *)(a2 + 440);
            uint64_t v37 = ((uint64_t)v34 - v36) >> 3;
            if ((unint64_t)(v37 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            uint64_t v38 = v33 - v36;
            uint64_t v39 = v38 >> 2;
            if (v38 >> 2 <= (unint64_t)(v37 + 1)) {
              uint64_t v39 = v37 + 1;
            }
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v39;
            }
            unint64_t v41 = (char *)sub_25B3FCAD4(v40);
            BOOL v43 = &v41[8 * v37];
            *(void *)BOOL v43 = v50;
            int32x2_t v35 = v43 + 8;
            unint64_t v44 = *(char **)(a2 + 440);
            for (uint64_t i = *(char **)(a2 + 448); i != v44; i -= 8)
            {
              uint64_t v46 = *((void *)i - 1);
              *((void *)v43 - 1) = v46;
              v43 -= 8;
            }
            *(void *)(a2 + 440) = v43;
            *(void *)(a2 + 448) = v35;
            *(void *)(a2 + 456) = &v41[8 * v42];
            if (v44) {
              operator delete(v44);
            }
          }
          else
          {
            void *v34 = v50;
            int32x2_t v35 = v34 + 1;
          }
          *(void *)(a2 + 448) = v35;
          if ((_BYTE)v52) {
            sub_25B3FE8B0((uint64_t **)(a2 + 288), *((_DWORD *)v24 + 8), v14, (uint64_t)v51);
          }
          if (__p)
          {
            uint64_t v54 = __p;
            operator delete(__p);
          }
        }
        unint64_t v47 = (void *)v24[1];
        if (v47)
        {
          do
          {
            int v48 = v47;
            unint64_t v47 = (void *)*v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            int v48 = (void *)v24[2];
            BOOL v20 = *v48 == (void)v24;
            BOOL v24 = v48;
          }
          while (!v20);
        }
        BOOL v24 = v48;
      }
      while (v48 != (void *)(a2 + 320));
    }
    long long v49 = v58;
    *(_OWORD *)a1 = v57;
    *(_OWORD *)(a1 + 16) = v49;
    *(unsigned char *)(a1 + 32) = 1;
  }
}

void sub_25B3FDC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_25B3FDC44(void *a1, int a2, int a3)
{
  if (a3 >= a2) {
    int v3 = a2;
  }
  else {
    int v3 = a3;
  }
  if (a3 <= a2) {
    int v4 = a2;
  }
  else {
    int v4 = a3;
  }
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = (((v3 + 2654435769) << 6) + v4 + ((unint64_t)(v3 + 2654435769) >> 2) + 2654435769u) ^ (v3 + 2654435769);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v6;
    if (v6 >= *(void *)&v5) {
      unint64_t v8 = v6 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = v6 & (*(void *)&v5 - 1);
  }
  uint64_t v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (__n128 result = *v9; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v11 = result[1];
    if (v6 == v11)
    {
      int v12 = *((_DWORD *)result + 4);
      if (v12 == a2 && *((_DWORD *)result + 5) == a3 || v12 == a3 && *((_DWORD *)result + 5) == a2) {
        return result;
      }
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(void *)&v5) {
          v11 %= *(void *)&v5;
        }
      }
      else
      {
        v11 &= *(void *)&v5 - 1;
      }
      if (v11 != v8) {
        return 0;
      }
    }
  }
  return result;
}

void sub_25B3FDD40(uint64_t **a1, int a2, int a3, _OWORD *a4, float a5)
{
  int v7 = a3;
  int v8 = a2;
  int v53 = a3;
  int v54 = a2;
  unint64_t v52 = __PAIR64__(a3, a2);
  float32x2_t v10 = sub_25B3FF558((uint64_t)(a1 + 6), a2, a3, &v52);
  long long v11 = a4[1];
  *(_OWORD *)(v10 + 24) = *a4;
  *(_OWORD *)(v10 + 40) = v11;
  int v12 = sub_25B3FA1DC(a1, v8, &v54);
  *((float *)sub_25B3FEBEC(v12 + 5, v7, (unsigned int *)&v53) + 8) = a5;
  uint64_t v13 = sub_25B3FA1DC(a1, v7, &v53);
  *((float *)sub_25B3FEBEC(v13 + 5, v8, (unsigned int *)&v54) + 8) = a5;
  uint64_t v14 = (uint64_t)(a1 + 14);
  uint64_t v15 = (__int32 *)sub_25B3FA294((uint64_t)(a1 + 14), v8, &v54)[3];
  unint64_t v16 = (__int32 *)sub_25B3FA294(v14, v8, &v54)[4];
  long long v17 = wmemchr(v15, v7, v16 - v15);
  if (v17) {
    float v18 = v17;
  }
  else {
    float v18 = v16;
  }
  if (v18 == (__int32 *)sub_25B3FA294(v14, v8, &v54)[4])
  {
    int v19 = sub_25B3FA294(v14, v8, &v54);
    BOOL v20 = v19;
    float32x2_t v22 = (int *)v19[4];
    unint64_t v21 = v19[5];
    if ((unint64_t)v22 >= v21)
    {
      BOOL v24 = (int *)v19[3];
      uint64_t v25 = v22 - v24;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62) {
        goto LABEL_42;
      }
      uint64_t v27 = v21 - (void)v24;
      if (v27 >> 1 > v26) {
        unint64_t v26 = v27 >> 1;
      }
      BOOL v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v28) {
        unint64_t v29 = v26;
      }
      if (v29)
      {
        unint64_t v29 = (unint64_t)sub_25B3FBC64(v29);
        BOOL v24 = (int *)v20[3];
        float32x2_t v22 = (int *)v20[4];
      }
      else
      {
        uint64_t v30 = 0;
      }
      long long v31 = (int *)(v29 + 4 * v25);
      unint64_t v32 = v29 + 4 * v30;
      int *v31 = v7;
      float32x2_t v23 = v31 + 1;
      while (v22 != v24)
      {
        int v33 = *--v22;
        *--long long v31 = v33;
      }
      v20[3] = v31;
      v20[4] = v23;
      v20[5] = v32;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *float32x2_t v22 = v7;
      float32x2_t v23 = v22 + 1;
    }
    v20[4] = v23;
    int v7 = v53;
    int v8 = v54;
  }
  float v34 = (__int32 *)sub_25B3FA294(v14, v7, &v53)[3];
  int32x2_t v35 = (__int32 *)sub_25B3FA294(v14, v7, &v53)[4];
  uint64_t v36 = wmemchr(v34, v8, v35 - v34);
  if (v36) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = v35;
  }
  if (v37 == (__int32 *)sub_25B3FA294(v14, v7, &v53)[4])
  {
    uint64_t v38 = sub_25B3FA294(v14, v7, &v53);
    uint64_t v39 = v38;
    unint64_t v41 = (int *)v38[4];
    unint64_t v40 = v38[5];
    if ((unint64_t)v41 < v40)
    {
      *unint64_t v41 = v8;
      uint64_t v42 = v41 + 1;
LABEL_40:
      v39[4] = v42;
      return;
    }
    BOOL v43 = (int *)v38[3];
    uint64_t v44 = v41 - v43;
    unint64_t v45 = v44 + 1;
    if (!((unint64_t)(v44 + 1) >> 62))
    {
      uint64_t v46 = v40 - (void)v43;
      if (v46 >> 1 > v45) {
        unint64_t v45 = v46 >> 1;
      }
      BOOL v28 = (unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v28) {
        unint64_t v47 = v45;
      }
      if (v47)
      {
        unint64_t v47 = (unint64_t)sub_25B3FBC64(v47);
        BOOL v43 = (int *)v39[3];
        unint64_t v41 = (int *)v39[4];
      }
      else
      {
        uint64_t v48 = 0;
      }
      long long v49 = (int *)(v47 + 4 * v44);
      unint64_t v50 = v47 + 4 * v48;
      int *v49 = v8;
      uint64_t v42 = v49 + 1;
      while (v41 != v43)
      {
        int v51 = *--v41;
        *--long long v49 = v51;
      }
      v39[3] = v49;
      v39[4] = v42;
      v39[5] = v50;
      if (v43) {
        operator delete(v43);
      }
      goto LABEL_40;
    }
LABEL_42:
    sub_25B3FBC4C();
  }
}

void sub_25B3FE034(uint64_t a1, int a2, long long *a3)
{
  int v31 = a2;
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  __p = &v29;
  unint64_t v6 = sub_25B3FA1DC((uint64_t **)a1, a2, &v31);
  int v7 = (uint64_t *)(v6 + 6);
  sub_25B3FA930(v6[6]);
  int v8 = v29;
  v6[5] = (uint64_t *)&v29;
  v6[6] = v8;
  uint64_t v9 = v30;
  v6[7] = v30;
  if (v9)
  {
    v8[2] = (uint64_t)v7;
    __p = &v29;
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    int v8 = 0;
  }
  else
  {
    v6[5] = v7;
  }
  sub_25B3FA930(v8);
  float32x2_t v10 = sub_25B3F9544((uint64_t **)(a1 + 24), a2, &v31);
  long long v11 = *a3;
  *(_OWORD *)(v10 + 7) = a3[1];
  *(_OWORD *)(v10 + 5) = v11;
  int v12 = *(__int32 **)(a1 + 96);
  uint64_t v13 = wmemchr(*(__int32 **)(a1 + 88), a2, ((uint64_t)v12 - *(void *)(a1 + 88)) >> 2);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = v12;
  }
  uint64_t v15 = *(__int32 **)(a1 + 96);
  if (v14 == v15)
  {
    unint64_t v16 = *(void *)(a1 + 104);
    if ((unint64_t)v14 >= v16)
    {
      float v18 = *(__int32 **)(a1 + 88);
      uint64_t v19 = v15 - v18;
      unint64_t v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      uint64_t v21 = v16 - (void)v18;
      if (v21 >> 1 > v20) {
        unint64_t v20 = v21 >> 1;
      }
      BOOL v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v22) {
        unint64_t v23 = v20;
      }
      if (v23)
      {
        unint64_t v23 = (unint64_t)sub_25B3FBC64(v23);
        float v18 = *(__int32 **)(a1 + 88);
        uint64_t v14 = *(__int32 **)(a1 + 96);
      }
      else
      {
        uint64_t v24 = 0;
      }
      uint64_t v25 = (int *)(v23 + 4 * v19);
      unint64_t v26 = v23 + 4 * v24;
      int *v25 = a2;
      long long v17 = v25 + 1;
      while (v14 != v18)
      {
        int v27 = *--v14;
        *--uint64_t v25 = v27;
      }
      *(void *)(a1 + 88) = v25;
      *(void *)(a1 + 96) = v17;
      *(void *)(a1 + 104) = v26;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *uint64_t v14 = a2;
      long long v17 = v14 + 1;
    }
    *(void *)(a1 + 96) = v17;
    __p = 0;
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    sub_25B3FF328(a1 + 112, v31, v31, (uint64_t)&__p);
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_25B3FE1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B3FE20C(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  long long v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v4;
  int8x8_t v5 = (float32x2_t *)(a1 + 32);
  long long v6 = a3[1];
  *(_OWORD *)(a1 + 32) = *a3;
  *(_OWORD *)(a1 + 48) = v6;
  sub_25B3FEC94((uint64_t)&v56, a1 + 32, *(double *)(a1 + 24));
  int v7 = v56;
  int v8 = v57;
  if (v56)
  {
    long long v57 = v56;
    operator delete(v56);
  }
  *(unsigned char *)(a1 + 64) = v7 != v8;
  *(float *)(a1 + 68) = sub_25B3FCCE0((float32x2_t *)a1, v5, 0);
  sub_25B3FD008((float **)(a1 + 72), (float32x2_t *)a1, v5);
  float32x2_t v9 = *(float32x2_t *)a1;
  float32x2_t v10 = *(float32x2_t *)(a1 + 8);
  float32x2_t v11 = *(float32x2_t *)(a1 + 32);
  float32x2_t v12 = *(float32x2_t *)(a1 + 40);
  v13.i64[0] = *(void *)a1;
  *(float32x2_t *)v14.f32 = v10;
  *(float32x2_t *)v15.f32 = v11;
  *(unsigned char *)(a1 + 96) = sub_25B40E540(v13, v14, v15, v12);
  int32x2_t v16 = (int32x2_t)vsub_f32(v10, v9);
  float32x2_t v17 = vsub_f32(v12, v11);
  *(float *)v18.i32 = -*(float *)&v16.i32[1];
  float32x2_t v19 = (float32x2_t)vzip1_s32(v18, v16);
  int32x2_t v20 = (int32x2_t)vmul_f32(v17, v19);
  long long v21 = 0uLL;
  if (vaddv_f32((float32x2_t)v20) != 0.0)
  {
    int32x2_t v22 = (int32x2_t)vmul_f32(vsub_f32(v9, v11), v19);
    *(float32x2_t *)&long long v21 = vmla_n_f32(v11, v17, vdiv_f32(vadd_f32((float32x2_t)v22, (float32x2_t)vdup_lane_s32(v22, 1)), vadd_f32((float32x2_t)v20, (float32x2_t)vdup_lane_s32(v20, 1))).f32[0]);
    *((void *)&v21 + 1) = 1;
  }
  *(_OWORD *)(a1 + 104) = v21;
  float v23 = vaddv_f32(vmul_f32(vsub_f32(v11, v9), (float32x2_t)v16));
  float v24 = vaddv_f32(vmul_f32((float32x2_t)v16, (float32x2_t)v16));
  if (v24 < 0.000001) {
    float v24 = 0.000001;
  }
  float32x2_t v25 = vsub_f32(vmla_n_f32(v9, (float32x2_t)v16, v23 / v24), v11);
  int32x2_t v26 = (int32x2_t)vmul_f32(v25, v25);
  float32x2_t v27 = vsub_f32(vmla_n_f32(v9, (float32x2_t)v16, vaddv_f32(vmul_f32((float32x2_t)v16, vsub_f32(v12, v9))) / v24), v12);
  int32x2_t v28 = (int32x2_t)vmul_f32(v27, v27);
  float v29 = vaddv_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v26, v28), (float32x2_t)vzip2_s32(v26, v28)))) * 0.5;
  float32x2_t v30 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v28, v26), (float32x2_t)vzip2_s32(v28, v26)));
  if (v30.f32[0] >= v30.f32[1]) {
    v30.f32[0] = v30.f32[1];
  }
  *(float *)(a1 + 120) = v29;
  *(_DWORD *)(a1 + 124) = v30.i32[0];
  float32x2_t v31 = sub_25B40DE58(v11, v9, v10);
  float32x2_t v32 = vsub_f32(v31, sub_25B40DE58(v12, v9, v10));
  int32x2_t v55 = (int32x2_t)vmul_f32(v32, v32);
  float32x2_t v33 = vsub_f32(v11, v12);
  int32x2_t v54 = (int32x2_t)vmul_f32(v33, v33);
  float32x2_t v34 = sub_25B40DE58(v9, v11, v12);
  float32x2_t v35 = vsub_f32(v34, sub_25B40DE58(v10, v11, v12));
  int32x2_t v36 = (int32x2_t)vmul_f32(v35, v35);
  float32x2_t v37 = vsub_f32(v9, v10);
  int32x2_t v38 = (int32x2_t)vmul_f32(v37, v37);
  float32x2_t v39 = vdiv_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v55, v36), (float32x2_t)vzip2_s32(v55, v36))), vmaxnm_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v54, v38), (float32x2_t)vzip2_s32(v54, v38))), (float32x2_t)vdup_n_s32(0x358637BDu)));
  __asm { FMOV            V1.2S, #1.0 }
  int32x2_t v45 = (int32x2_t)vminnm_f32(v39, _D1);
  float32x2_t v46 = (float32x2_t)vdup_lane_s32(v45, 0);
  v46.f32[0] = sqrtf(vaddv_f32((float32x2_t)v55)) / fmaxf(sqrtf(vaddv_f32((float32x2_t)v54)), 0.000001);
  _D1.i32[1] = v45.i32[0];
  v45.i32[0] = v46.i32[0];
  *(int8x8_t *)(a1 + 128) = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v45.u32[1], 1.0), v46), (int8x8_t)v45, (int8x8_t)_D1);
  float32x2_t v47 = *(float32x2_t *)a1;
  float32x2_t v48 = *(float32x2_t *)(a1 + 8);
  float32x2_t v49 = *(float32x2_t *)(a1 + 32);
  float32x2_t v50 = *(float32x2_t *)(a1 + 40);
  float v51 = sub_25B40E468(*(float32x2_t *)a1, v48, v49, v50);
  float v52 = sub_25B40E468(v49, v50, v47, v48);
  if (v51 >= v52) {
    float v52 = v51;
  }
  *(float *)(a1 + 136) = v52;
  return a1;
}

char *sub_25B3FE508(uint64_t a1, int a2, int a3, void *a4)
{
  if (a3 >= a2) {
    int v7 = a2;
  }
  else {
    int v7 = a3;
  }
  unint64_t v8 = v7 + 2654435769;
  if (a3 <= a2) {
    int v9 = a2;
  }
  else {
    int v9 = a3;
  }
  unint64_t v10 = ((v8 << 6) + v9 + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v4 = ((v8 << 6) + v9 + (v8 >> 2) + 2654435769u) ^ v8;
      if (v10 >= v11) {
        uint64_t v4 = v10 % v11;
      }
    }
    else
    {
      uint64_t v4 = v10 & (v11 - 1);
    }
    float32x4_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      float32x4_t v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v10)
          {
            int v16 = *((_DWORD *)v14 + 4);
            if (v16 == a2 && *((_DWORD *)v14 + 5) == a3 || v16 == a3 && *((_DWORD *)v14 + 5) == a2) {
              return v14;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          float32x4_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  float32x4_t v14 = (char *)operator new(0xA8uLL);
  *(void *)float32x4_t v14 = 0;
  *((void *)v14 + 1) = v10;
  *((void *)v14 + 2) = *a4;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 40) = xmmword_25B5F10F0;
  *((void *)v14 + 7) = 0;
  *((void *)v14 + 8) = 0;
  *(_OWORD *)(v14 + 72) = xmmword_25B5F10F0;
  *(void *)(v14 + 92) = 0;
  *(void *)(v14 + 100) = 0;
  *(void *)(v14 + 108) = 0;
  *(void *)(v14 + 113) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_25B3FA4B0(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        uint64_t v4 = v10 % v11;
      }
      else {
        uint64_t v4 = v10;
      }
    }
    else
    {
      uint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  float v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)float32x4_t v14 = *v24;
LABEL_47:
    void *v24 = v14;
    goto LABEL_48;
  }
  *(void *)float32x4_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v25 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    float v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_47;
  }
LABEL_48:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_25B3FE790(_Unwind_Exception *a1)
{
  sub_25B3F9DF8(1, v1);
  _Unwind_Resume(a1);
}

char *sub_25B3FE7A8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      sub_25B3FBC4C();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = sub_25B3FCA18(v7, v11);
    float32x4_t v13 = (char *)v7[1];
    uint8x8_t v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      float v18 = v9;
      BOOL v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint8x8_t v12 = (void **)(result + 8);
  float32x4_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    float v18 = v9;
    BOOL v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint8x8_t v12 = &v9[v17];
  return result;
}

void sub_25B3FE8B0(uint64_t **a1, int a2, int a3, uint64_t a4)
{
  int v5 = a3;
  int v6 = a2;
  int v56 = a3;
  int v57 = a2;
  unint64_t v55 = __PAIR64__(a3, a2);
  uint64_t v8 = sub_25B3FE508((uint64_t)(a1 + 6), a2, a3, &v55);
  int v9 = v8;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)a4;
  long long v11 = *(_OWORD *)(a4 + 32);
  long long v10 = *(_OWORD *)(a4 + 48);
  uint64_t v12 = *(void *)(a4 + 64);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a4 + 16);
  *((void *)v8 + 11) = v12;
  *(_OWORD *)(v8 + 72) = v10;
  *(_OWORD *)(v8 + 56) = v11;
  if (v8 + 24 != (char *)a4) {
    sub_25B3FE7A8(v8 + 96, *(char **)(a4 + 72), *(void *)(a4 + 80), (uint64_t)(*(void *)(a4 + 80) - *(void *)(a4 + 72)) >> 2);
  }
  long long v13 = *(_OWORD *)(a4 + 96);
  long long v14 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v9 + 148) = *(_OWORD *)(a4 + 124);
  *(_OWORD *)(v9 + 136) = v14;
  *(_OWORD *)(v9 + 120) = v13;
  unint64_t v15 = sub_25B3FA1DC(a1, v6, &v57);
  *((_DWORD *)sub_25B3FEBEC(v15 + 5, v5, (unsigned int *)&v56) + 8) = 1065353216;
  int v16 = sub_25B3FA1DC(a1, v5, &v56);
  *((_DWORD *)sub_25B3FEBEC(v16 + 5, v6, (unsigned int *)&v57) + 8) = 1065353216;
  uint64_t v17 = (uint64_t)(a1 + 14);
  float v18 = (__int32 *)sub_25B3FA294(v17, v6, &v57)[3];
  BOOL v19 = (__int32 *)sub_25B3FA294(v17, v6, &v57)[4];
  unint64_t v20 = wmemchr(v18, v5, v19 - v18);
  if (v20) {
    unint64_t v21 = v20;
  }
  else {
    unint64_t v21 = v19;
  }
  if (v21 == (__int32 *)sub_25B3FA294(v17, v6, &v57)[4])
  {
    size_t v22 = sub_25B3FA294(v17, v6, &v57);
    uint64_t v23 = v22;
    unint64_t v25 = (int *)v22[4];
    unint64_t v24 = v22[5];
    if ((unint64_t)v25 >= v24)
    {
      float32x2_t v27 = (int *)v22[3];
      uint64_t v28 = v25 - v27;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 62) {
        goto LABEL_44;
      }
      uint64_t v30 = v24 - (void)v27;
      if (v30 >> 1 > v29) {
        unint64_t v29 = v30 >> 1;
      }
      BOOL v31 = (unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v31) {
        unint64_t v32 = v29;
      }
      if (v32)
      {
        unint64_t v32 = (unint64_t)sub_25B3FBC64(v32);
        float32x2_t v27 = (int *)v23[3];
        unint64_t v25 = (int *)v23[4];
      }
      else
      {
        uint64_t v33 = 0;
      }
      float32x2_t v34 = (int *)(v32 + 4 * v28);
      unint64_t v35 = v32 + 4 * v33;
      int *v34 = v5;
      int32x2_t v26 = v34 + 1;
      while (v25 != v27)
      {
        int v36 = *--v25;
        *--float32x2_t v34 = v36;
      }
      v23[3] = v34;
      v23[4] = v26;
      v23[5] = v35;
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
      int *v25 = v5;
      int32x2_t v26 = v25 + 1;
    }
    v23[4] = v26;
    int v5 = v56;
    int v6 = v57;
  }
  float32x2_t v37 = (__int32 *)sub_25B3FA294(v17, v5, &v56)[3];
  int32x2_t v38 = (__int32 *)sub_25B3FA294(v17, v5, &v56)[4];
  float32x2_t v39 = wmemchr(v37, v6, v38 - v37);
  if (v39) {
    unint64_t v40 = v39;
  }
  else {
    unint64_t v40 = v38;
  }
  if (v40 == (__int32 *)sub_25B3FA294(v17, v5, &v56)[4])
  {
    unint64_t v41 = sub_25B3FA294(v17, v5, &v56);
    uint64_t v42 = v41;
    uint64_t v44 = (int *)v41[4];
    unint64_t v43 = v41[5];
    if ((unint64_t)v44 < v43)
    {
      *uint64_t v44 = v6;
      int32x2_t v45 = v44 + 1;
LABEL_42:
      v42[4] = v45;
      return;
    }
    float32x2_t v46 = (int *)v41[3];
    uint64_t v47 = v44 - v46;
    unint64_t v48 = v47 + 1;
    if (!((unint64_t)(v47 + 1) >> 62))
    {
      uint64_t v49 = v43 - (void)v46;
      if (v49 >> 1 > v48) {
        unint64_t v48 = v49 >> 1;
      }
      BOOL v31 = (unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v31) {
        unint64_t v50 = v48;
      }
      if (v50)
      {
        unint64_t v50 = (unint64_t)sub_25B3FBC64(v50);
        float32x2_t v46 = (int *)v42[3];
        uint64_t v44 = (int *)v42[4];
      }
      else
      {
        uint64_t v51 = 0;
      }
      float v52 = (int *)(v50 + 4 * v47);
      unint64_t v53 = v50 + 4 * v51;
      int *v52 = v6;
      int32x2_t v45 = v52 + 1;
      while (v44 != v46)
      {
        int v54 = *--v44;
        *--float v52 = v54;
      }
      v42[3] = v52;
      v42[4] = v45;
      v42[5] = v53;
      if (v46) {
        operator delete(v46);
      }
      goto LABEL_42;
    }
LABEL_44:
    sub_25B3FBC4C();
  }
}

uint64_t *sub_25B3FEBEC(uint64_t **a1, int a2, unsigned int *a3)
{
  int v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    int v9 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v9 + 28) = *a3;
    sub_25B3FA740(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

void sub_25B3FEC94(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  __p = *(void **)&a3;
  sub_25B3FF018((uint64_t *)&v39, (int *)&__p, 2);
  __p = *(void **)(a2 + 24);
  sub_25B3FF018((uint64_t *)&v37, (int *)&__p, 2);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v5 = v39;
  uint64_t v6 = (uint64_t)v37;
  if (v39 != v40 && v37 != v38)
  {
    int v8 = 0;
    do
    {
      long long v10 = (char *)v5 + 28;
      int v9 = *((_DWORD *)v5 + 7);
      int v11 = *(_DWORD *)(v6 + 28);
      if (v9 >= v11)
      {
        if (v11 >= v9)
        {
          long long v14 = *(char **)(a1 + 8);
          unint64_t v15 = *(void *)(a1 + 16);
          if ((unint64_t)v14 >= v15)
          {
            BOOL v19 = *(char **)a1;
            unint64_t v20 = ((uint64_t)&v14[-*(void *)a1] >> 2) + 1;
            if (v20 >> 62) {
              sub_25B3FBC4C();
            }
            unint64_t v21 = v15 - (void)v19;
            unint64_t v22 = (uint64_t)(v15 - (void)v19) >> 1;
            if (v22 > v20) {
              unint64_t v20 = v22;
            }
            if (v21 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v23 = v20;
            }
            uint64_t v45 = a1 + 16;
            if (v23)
            {
              unint64_t v25 = (char *)sub_25B3FBC64(v23);
            }
            else
            {
              unint64_t v25 = 0;
              uint64_t v24 = 0;
            }
            uint64_t v26 = v8 - v19;
            uint64_t v27 = (v8 - v19) >> 2;
            uint64_t v28 = &v25[4 * v27];
            __p = v25;
            uint64_t v42 = v28;
            uint64_t v44 = &v25[4 * v24];
            if (v27 == v24)
            {
              if (v26 < 1)
              {
                if (v19 == v8) {
                  unint64_t v30 = 1;
                }
                else {
                  unint64_t v30 = v26 >> 1;
                }
                BOOL v31 = (char *)sub_25B3FBC64(v30);
                uint64_t v28 = &v31[v30 & 0xFFFFFFFFFFFFFFFCLL];
                __p = v31;
                uint64_t v42 = v28;
                uint64_t v44 = &v31[4 * v32];
                if (v25) {
                  operator delete(v25);
                }
              }
              else
              {
                if (v27 >= -1) {
                  unint64_t v29 = v27 + 1;
                }
                else {
                  unint64_t v29 = v27 + 2;
                }
                v28 -= 4 * (v29 >> 1);
                uint64_t v42 = v28;
              }
            }
            *(_DWORD *)uint64_t v28 = *(_DWORD *)v10;
            unint64_t v43 = v28 + 4;
            int v8 = sub_25B3FF094((void **)a1, (uint64_t)&__p, v8);
            if (__p) {
              operator delete(__p);
            }
          }
          else if (v8 == v14)
          {
            *(_DWORD *)int v8 = v9;
            *(void *)(a1 + 8) = v8 + 4;
          }
          else
          {
            int v16 = v14 - 4;
            uint64_t v17 = *(_DWORD **)(a1 + 8);
            while (v16 < v14)
            {
              int v18 = *(_DWORD *)v16;
              v16 += 4;
              *v17++ = v18;
            }
            *(void *)(a1 + 8) = v17;
            if (v14 != v8 + 4) {
              memmove(&v14[-4 * ((v14 - (v8 + 4)) >> 2)], v8, v14 - (v8 + 4));
            }
            if (v8 <= v10) {
              v10 += 4 * (*(void *)(a1 + 8) > (unint64_t)v10);
            }
            *(_DWORD *)int v8 = *(_DWORD *)v10;
          }
          v8 += 4;
          uint64_t v33 = v5[1];
          if (v33)
          {
            do
            {
              int v5 = (void **)v33;
              uint64_t v33 = (void *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              float32x2_t v34 = v5;
              int v5 = (void **)v5[2];
            }
            while (*v5 != v34);
          }
        }
        unint64_t v35 = *(void **)(v6 + 8);
        if (v35)
        {
          do
          {
            uint64_t v6 = (uint64_t)v35;
            unint64_t v35 = (void *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            uint64_t v36 = v6;
            uint64_t v6 = *(void *)(v6 + 16);
          }
          while (*(void *)v6 != v36);
        }
      }
      else
      {
        uint64_t v12 = v5[1];
        if (v12)
        {
          do
          {
            int v5 = (void **)v12;
            uint64_t v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            long long v13 = v5;
            int v5 = (void **)v5[2];
          }
          while (*v5 != v13);
        }
      }
    }
    while (v5 != v40 && (void **)v6 != v38);
  }
  sub_25B3FA930(v38[0]);
  sub_25B3FA930(v40[0]);
}

void sub_25B3FEFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (v16) {
    operator delete(v16);
  }
  int v18 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v18;
    operator delete(v18);
  }
  sub_25B3FA930(a12);
  sub_25B3FA930(a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_25B3FF018(uint64_t *a1, int *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      sub_25B3FF15C(a1, v4, *a2, *a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_25B3FF080(_Unwind_Exception *a1)
{
  sub_25B3FA930(*v1);
  _Unwind_Resume(a1);
}

char *sub_25B3FF094(void **a1, uint64_t a2, char *__src)
{
  int v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  int v7 = v5;
  if (*a1 != __src)
  {
    int v8 = __src;
    int v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  long long v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    int v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  long long v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  long long v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t *sub_25B3FF15C(uint64_t *result, uint64_t *a2, int a3, int a4)
{
  int v5 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (int v7 = *((_DWORD *)a2 + 7), v7 > a3))
  {
    int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      long long v10 = a2;
LABEL_16:
      if (v8) {
        long long v13 = (uint64_t **)v10;
      }
      else {
        long long v13 = (uint64_t **)a2;
      }
      if (v8) {
        uint64_t v11 = (uint64_t **)(v10 + 1);
      }
      else {
        uint64_t v11 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }
    if (v8)
    {
      int v9 = (uint64_t *)*a2;
      do
      {
        long long v10 = v9;
        int v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v15 = a2;
      do
      {
        long long v10 = (uint64_t *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        uint64_t v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 7) < a3) {
      goto LABEL_16;
    }
    uint64_t v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          long long v13 = (uint64_t **)v17;
          int v18 = *((_DWORD *)v17 + 7);
          if (v18 <= a3) {
            break;
          }
          uint64_t v17 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v18 >= a3) {
          break;
        }
        uint64_t v6 = v13 + 1;
        uint64_t v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }
LABEL_47:
      uint64_t v11 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    if (v7 >= a3) {
      return result;
    }
    uint64_t v11 = (uint64_t **)(a2 + 1);
    int64_t v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        uint64_t v11 = (uint64_t **)v12;
        int64_t v12 = (uint64_t *)*v12;
        long long v13 = v11;
        long long v14 = v11;
      }
      while (v12);
    }
    else
    {
      long long v14 = (uint64_t **)a2;
      do
      {
        BOOL v19 = (uint64_t *)v14;
        long long v14 = (uint64_t **)v14[2];
      }
      while (*v14 != v19);
      long long v13 = (uint64_t **)a2;
    }
    if (v14 == v6 || *((_DWORD *)v14 + 7) > a3)
    {
LABEL_22:
      uint64_t v6 = v11;
      if (*v11) {
        return result;
      }
      goto LABEL_44;
    }
    unint64_t v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          long long v13 = (uint64_t **)v20;
          int v21 = *((_DWORD *)v20 + 7);
          if (v21 <= a3) {
            break;
          }
          unint64_t v20 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v21 >= a3) {
          goto LABEL_47;
        }
        uint64_t v6 = v13 + 1;
        unint64_t v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }
  }
  long long v13 = (uint64_t **)(result + 1);
LABEL_44:
  unint64_t v22 = (uint64_t *)operator new(0x20uLL);
  *((_DWORD *)v22 + 7) = a4;

  return sub_25B3FA740(v5, (uint64_t)v13, v6, v22);
}

void sub_25B3FF328(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unint64_t v8 = a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    uint64_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v14 = (char *)operator new(0x30uLL);
  *(void *)long long v14 = 0;
  *((void *)v14 + 1) = v8;
  *((_DWORD *)v14 + 4) = a3;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)a4;
  *((void *)v14 + 5) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_25B3FA4B0(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)long long v14 = *v22;
LABEL_38:
    *unint64_t v22 = v14;
    goto LABEL_39;
  }
  *(void *)long long v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v23 = *(void *)(*(void *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_25B3FF540(_Unwind_Exception *a1)
{
  sub_25B3FA6AC(1, v1);
  _Unwind_Resume(a1);
}

char *sub_25B3FF558(uint64_t a1, int a2, int a3, void *a4)
{
  if (a3 >= a2) {
    int v7 = a2;
  }
  else {
    int v7 = a3;
  }
  unint64_t v8 = v7 + 2654435769;
  if (a3 <= a2) {
    int v9 = a2;
  }
  else {
    int v9 = a3;
  }
  unint64_t v10 = ((v8 << 6) + v9 + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v4 = ((v8 << 6) + v9 + (v8 >> 2) + 2654435769u) ^ v8;
      if (v10 >= v11) {
        uint64_t v4 = v10 % v11;
      }
    }
    else
    {
      uint64_t v4 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      long long v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v10)
          {
            int v16 = *((_DWORD *)v14 + 4);
            if (v16 == a2 && *((_DWORD *)v14 + 5) == a3 || v16 == a3 && *((_DWORD *)v14 + 5) == a2) {
              return v14;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          long long v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  long long v14 = (char *)operator new(0x38uLL);
  *(void *)long long v14 = 0;
  *((void *)v14 + 1) = v10;
  *((void *)v14 + 2) = *a4;
  *((void *)v14 + 3) = 0;
  *((void *)v14 + 4) = 0;
  *(_OWORD *)(v14 + 40) = xmmword_25B5F10F0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_25B3FA4B0(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        uint64_t v4 = v10 % v11;
      }
      else {
        uint64_t v4 = v10;
      }
    }
    else
    {
      uint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)long long v14 = *v24;
LABEL_47:
    void *v24 = v14;
    goto LABEL_48;
  }
  *(void *)long long v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v25 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_47;
  }
LABEL_48:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_25B3FF7AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_25B3FF7C0(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    int v9 = (char *)operator new(0x68uLL);
    *((_DWORD *)v9 + 8) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 6) = v9 + 56;
    *((void *)v9 + 11) = 0;
    *((void *)v9 + 10) = 0;
    *((void *)v9 + 9) = v9 + 80;
    sub_25B3FA740(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void sub_25B3FF894(uint64_t a1, void *a2, void *a3)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(uint64_t **)a1;
    int v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    if (v6[1]) {
      int v9 = (uint64_t *)v6[1];
    }
    else {
      int v9 = v6;
    }
    if (!v9)
    {
      unint64_t v20 = 0;
LABEL_29:
      sub_25B3FA930(v20);
      goto LABEL_30;
    }
    unint64_t v10 = sub_25B3FFA98((uint64_t)v9);
    if (a2 != a3)
    {
      unint64_t v11 = v9;
      uint8x8_t v12 = a2;
      do
      {
        int v9 = v10;
        int v13 = *((_DWORD *)v12 + 7);
        *((_DWORD *)v11 + 7) = v13;
        long long v14 = *v8;
        unint64_t v15 = (uint64_t **)(a1 + 8);
        int v16 = (uint64_t **)(a1 + 8);
        if (*v8)
        {
          do
          {
            while (1)
            {
              unint64_t v15 = (uint64_t **)v14;
              if (v13 >= *((_DWORD *)v14 + 7)) {
                break;
              }
              long long v14 = (uint64_t *)*v14;
              int v16 = v15;
              if (!*v15) {
                goto LABEL_14;
              }
            }
            long long v14 = (uint64_t *)v14[1];
          }
          while (v14);
          int v16 = v15 + 1;
        }
LABEL_14:
        sub_25B3FA740((uint64_t **)a1, (uint64_t)v15, v16, v11);
        if (v10) {
          unint64_t v10 = sub_25B3FFA98((uint64_t)v10);
        }
        else {
          unint64_t v10 = 0;
        }
        float v17 = (void *)v12[1];
        if (v17)
        {
          do
          {
            a2 = v17;
            float v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            a2 = (void *)v12[2];
            BOOL v18 = *a2 == (void)v12;
            uint8x8_t v12 = a2;
          }
          while (!v18);
        }
        if (!v9) {
          break;
        }
        unint64_t v11 = v9;
        uint8x8_t v12 = a2;
      }
      while (a2 != a3);
    }
    sub_25B3FA930(v9);
    if (v10)
    {
      for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
        unint64_t v10 = i;
      unint64_t v20 = v10;
      goto LABEL_29;
    }
  }
LABEL_30:
  if (a2 != a3)
  {
    unint64_t v21 = (uint64_t **)(a1 + 8);
    do
    {
      size_t v22 = (uint64_t *)operator new(0x20uLL);
      int v23 = *((_DWORD *)a2 + 7);
      *((_DWORD *)v22 + 7) = v23;
      uint64_t v24 = *v21;
      unint64_t v25 = (uint64_t **)(a1 + 8);
      uint64_t v26 = (uint64_t **)(a1 + 8);
      if (*v21)
      {
        do
        {
          while (1)
          {
            unint64_t v25 = (uint64_t **)v24;
            if (v23 >= *((_DWORD *)v24 + 7)) {
              break;
            }
            uint64_t v24 = (uint64_t *)*v24;
            uint64_t v26 = v25;
            if (!*v25) {
              goto LABEL_38;
            }
          }
          uint64_t v24 = (uint64_t *)v24[1];
        }
        while (v24);
        uint64_t v26 = v25 + 1;
      }
LABEL_38:
      sub_25B3FA740((uint64_t **)a1, (uint64_t)v25, v26, v22);
      uint64_t v27 = (void *)a2[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          uint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (void *)a2[2];
          BOOL v18 = *v28 == (void)a2;
          a2 = v28;
        }
        while (!v18);
      }
      a2 = v28;
    }
    while (v28 != a3);
  }
}

void *sub_25B3FFA98(uint64_t a1)
{
  __n128 result = *(void **)(a1 + 16);
  if (result)
  {
    int v3 = (void *)*result;
    if (*result == a1)
    {
      *__n128 result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          __n128 result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; int v3 = (void *)result[1])
      {
        do
        {
          __n128 result = v3;
          int v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

void *sub_25B3FFAEC(unint64_t a1)
{
  if (a1 >> 60) {
    sub_25B3FA70C();
  }
  return operator new(16 * a1);
}

void sub_25B3FFB24(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = (void *)*v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint8x8_t v12 = operator new(0x18uLL);
  *uint8x8_t v12 = 0;
  v12[1] = a2;
  v12[2] = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_25B3FA4B0(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint8x8_t v12 = *v20;
LABEL_38:
    *unint64_t v20 = v12;
    goto LABEL_39;
  }
  *uint8x8_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_25B3FFD18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25B3FFD2C(uint64_t a1, const std::string *a2, char a3, double a4, double a5)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  std::string::operator=((std::string *)a1, a2);
  *(double *)(a1 + 24) = a4;
  *(double *)(a1 + 32) = a5;
  *(unsigned char *)(a1 + 73) = a3;
  *(_WORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  return a1;
}

void sub_25B3FFD98(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_25B3FFDC4(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_25B4002F4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  long long v5 = *(long long *)((char *)a2 + 24);
  __int16 v6 = *((_WORD *)a2 + 20);
  *((void *)__dst + 6) = 0;
  *((_WORD *)__dst + 20) = v6;
  *(_OWORD *)(__dst + 24) = v5;
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = 0;
  sub_25B400390((void *)__dst + 6, *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3);
  *((_WORD *)__dst + 36) = *((_WORD *)a2 + 36);
  return __dst;
}

void sub_25B3FFE48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B3FFE64(int64x2_t *a1, long long *a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333) {
    sub_25B3FBC4C();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v3;
  }
  int v23 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x333333333333333) {
      sub_25B3FA70C();
    }
    unint64_t v7 = (char *)operator new(80 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v20 = v7;
  v21.i64[0] = (uint64_t)&v7[80 * v2];
  size_t v22 = &v7[80 * v6];
  sub_25B3FFDC4((char *)v21.i64[0], a2);
  uint64_t v8 = v21.i64[0];
  uint64_t v9 = v21.i64[0] + 80;
  v21.i64[1] = v21.i64[0] + 80;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v17 = vdupq_n_s64(v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v8 + v12;
      uint64_t v14 = v10 + v12;
      long long v15 = *(_OWORD *)(v10 + v12 - 80);
      *(void *)(v13 - 64) = *(void *)(v10 + v12 - 64);
      *(_OWORD *)(v13 - 80) = v15;
      *(void *)(v14 - 72) = 0;
      *(void *)(v14 - 64) = 0;
      *(void *)(v14 - 80) = 0;
      long long v16 = *(_OWORD *)(v10 + v12 - 56);
      *(_WORD *)(v13 - 40) = *(_WORD *)(v10 + v12 - 40);
      *(_OWORD *)(v13 - 56) = v16;
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      *(void *)(v13 - 32) = 0;
      *(_OWORD *)(v13 - 32) = *(_OWORD *)(v10 + v12 - 32);
      *(void *)(v13 - 16) = *(void *)(v10 + v12 - 16);
      *(void *)(v14 - 32) = 0;
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(_WORD *)(v13 - 8) = *(_WORD *)(v10 + v12 - 8);
      v12 -= 80;
    }
    while (v10 + v12 != v11);
    v8 += v12;
    int64x2_t v17 = *a1;
    uint64_t v9 = v21.i64[1];
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v21 = v17;
  size_t v18 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v22;
  size_t v22 = v18;
  unint64_t v20 = (char *)v17.i64[0];
  sub_25B4002A4((uint64_t)&v20);
  return v9;
}

void sub_25B400000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B4002A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B400014(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_25B400058(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    long long v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 4);
        if (v6)
        {
          *((void *)v4 - 3) = v6;
          operator delete(v6);
        }
        v4 -= 64;
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B4000E4(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char **)**a1;
  if (v2)
  {
    long long v4 = (char **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 5;
        sub_25B400248(*(v4 - 3));
        long long v4 = v6;
      }
      while (v6 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B40016C(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_25B4001F0(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B4001F0(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_25B400248(char *a1)
{
  if (a1)
  {
    sub_25B400248(*(void *)a1);
    sub_25B400248(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t sub_25B4002A4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    sub_25B4001F0(i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_25B4002F4(unsigned char *__dst, void *__src, unint64_t a3)
{
  long long v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_25B40044C();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    void *v5 = v8;
    long long v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

void *sub_25B400390(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_25B40040C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25B4003F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_25B40040C(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_25B3FBC4C();
  }
  __n128 result = (char *)sub_25B3FCAD4(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_25B40044C()
{
}

void *sub_25B400488(void *a1, int a2, char a3, int a4, float a5)
{
  if (!a1) {
    return 0;
  }
  v14.receiver = a1;
  v14.super_class = (Class)RSOfflineGeometryCalculation;
  uint64_t v9 = objc_msgSendSuper2(&v14, sel_init);
  if (v9)
  {
    unint64_t v10 = objc_alloc_init(RSGeometryMeta);
    uint64_t v11 = (void *)v9[1];
    v9[1] = v10;

    *((_DWORD *)v9 + 4) = 3;
    *((_DWORD *)v9 + 5) = a2;
    *((unsigned char *)v9 + 24) = 1;
    *((_DWORD *)v9 + 7) = 10;
    *((unsigned char *)v9 + 32) = 0;
    *((unsigned char *)v9 + 33) = a3;
    *((float *)v9 + 9) = a5;
    *((unsigned char *)v9 + 40) = 1;
    *((_DWORD *)v9 + 11) = a4;
    *((_DWORD *)v9 + 12) = 1050253722;
    uint64_t v12 = v9[1];
    if (v12) {
      *(_DWORD *)(v12 + 32) = a4;
    }
  }
  return v9;
}

void sub_25B400568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B400578(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  size_t v8 = a3;
  if (a1 && objc_msgSend_count(v5, v6, v7))
  {
    int v11 = *(_DWORD *)(a1 + 20);
    unint64_t v12 = objc_msgSend_count(v5, v9, v10);
    sub_25B400BE4(&v116, v12);
    long long v15 = v116;
    long long v16 = v117;
    if (v116 != v117)
    {
      uint64_t v17 = 0;
      do
        *v15++ = v17++;
      while (v15 != v16);
    }
    uint64_t v18 = objc_msgSend_points(v5, v13, v14);
    sub_25B4FF26C(v18, (uint64_t)&v116);
    if (v8) {
      uint64_t v19 = (void *)v8[14];
    }
    else {
      uint64_t v19 = 0;
    }
    id v20 = v19;
    uint64_t v23 = objc_msgSend_count(v20, v21, v22);

    int v24 = 0;
    float v25 = 0.0;
    if (v23) {
      float v25 = *(float *)(v8[10] + 56);
    }
    id v26 = v5;
    if (v116 == v117)
    {
      float32x4_t v115 = 0u;
      float v48 = 0.0;
      float v49 = 0.0;
    }
    else
    {
      unint64_t v27 = 1431655766 * (int)(((unint64_t)(v117 - (unsigned char *)v116) >> 3) - 1);
      LODWORD(v118) = 0;
      sub_25B400C5C(__p, (int)(HIDWORD(v27) + (v27 >> 63) + 1), &v118);
      v118 = 0;
      v119 = 0;
      unint64_t v120 = 0;
      unint64_t v30 = v116;
      if (v117 == v116)
      {
        uint64_t v32 = 0;
        BOOL v31 = 0;
      }
      else
      {
        int v113 = v11;
        unint64_t v114 = v8;
        BOOL v31 = 0;
        uint64_t v32 = 0;
        unint64_t v33 = 0;
        uint64_t v34 = 0;
        unint64_t v35 = 0;
        do
        {
          uint64_t v36 = v30[v35];
          uint64_t v37 = objc_msgSend_points(v26, v28, v29);
          *((_DWORD *)__p[0] + v34) = *(_DWORD *)(v37 + 16 * v36 + 8);
          v40.i32[0] = *(_DWORD *)(objc_msgSend_semanticLabels(v26, v38, v39) + 4 * v36);
          if (vmovl_u8(v40).u8[0] == 1
            && (unsigned __int16)*(void *)(objc_msgSend_semanticVotes(v26, v28, v29) + 8 * v36)
            && *(float *)(objc_msgSend_points(v26, v28, v29) + 16 * v36 + 8) < v25)
          {
            int v41 = *(_DWORD *)(objc_msgSend_points(v26, v28, v29) + 16 * v36 + 8);
            if ((unint64_t)v31 >= v33)
            {
              uint64_t v43 = (v31 - v32) >> 2;
              unint64_t v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 62)
              {
                unint64_t v120 = v33;
                v118 = v32;
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v33 - (void)v32) >> 1 > v44) {
                unint64_t v44 = (uint64_t)(v33 - (void)v32) >> 1;
              }
              if (v33 - (unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v44;
              }
              if (v45) {
                unint64_t v45 = (unint64_t)sub_25B3FBC64(v45);
              }
              else {
                uint64_t v28 = 0;
              }
              uint64_t v46 = (char *)(v45 + 4 * v43);
              *(_DWORD *)uint64_t v46 = v41;
              uint64_t v42 = v46 + 4;
              while (v31 != v32)
              {
                int v47 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v46 - 1) = v47;
                v46 -= 4;
              }
              unint64_t v33 = v45 + 4 * (void)v28;
              v119 = v42;
              if (v32) {
                operator delete(v32);
              }
              uint64_t v32 = v46;
            }
            else
            {
              *(_DWORD *)BOOL v31 = v41;
              uint64_t v42 = v31 + 4;
            }
            v119 = v42;
            BOOL v31 = v42;
          }
          ++v34;
          v35 += 3;
          unint64_t v30 = v116;
        }
        while (v35 < (v117 - (unsigned char *)v116) >> 3);
        unint64_t v120 = v33;
        v118 = v32;
        size_t v8 = v114;
        int v11 = v113;
      }
      sub_25B400CE0((uint64_t *)__p);
      float v51 = v50;
      sub_25B400CE0((uint64_t *)__p);
      int v24 = v54;
      float v49 = v51;
      if ((unint64_t)(v31 - v32) >= 0x18D)
      {
        sub_25B400CE0((uint64_t *)&v118);
        float v49 = v55;
      }
      uint64_t v56 = objc_msgSend_points(v26, v52, v53);
      float32x4_t v57 = 0uLL;
      if (v116 != v117)
      {
        long long v58 = (uint64_t *)v116;
        do
        {
          uint64_t v59 = *v58++;
          float32x4_t v60 = *(float32x4_t *)(v56 + 16 * v59);
          float32x4_t v57 = vaddq_f32(v57, v60);
        }
        while (v58 != (uint64_t *)v117);
        v60.f32[0] = (float)(unint64_t)((v117 - (unsigned char *)v116) >> 3);
        float32x4_t v57 = vdivq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 0));
      }
      float32x4_t v115 = v57;
      if (v32)
      {
        v119 = v32;
        operator delete(v32);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      float v48 = v51 + -0.1;
    }

    int v64 = *(_DWORD *)(a1 + 44);
    float v65 = *(float *)(a1 + 48);
    uint64_t v66 = *(void *)(a1 + 8);
    if (v66) {
      *(unsigned char *)(v66 + 8) = 1;
    }
    if (*(unsigned char *)(a1 + 33))
    {
      uint64_t v67 = (float32x4_t *)objc_msgSend_points(v26, v61, v62);
      unint64_t v70 = objc_msgSend_count(v26, v68, v69);
      if (v70 > 1)
      {
        int v71 = v67 + 1;
        float32x4_t v72 = *v67;
        uint64_t v73 = 16 * v70 - 16;
        BOOL v74 = v67 + 1;
        do
        {
          float32x4_t v75 = vsubq_f32(v72, v115);
          float32x4_t v76 = vmulq_f32(v75, v75);
          float32x4_t v77 = *v74++;
          int8x16_t v78 = (int8x16_t)v77;
          float32x4_t v79 = vsubq_f32(v77, v115);
          float32x4_t v80 = vmulq_f32(v79, v79);
          unsigned __int8 v81 = vmovn_s32(vcgtq_f32(vaddq_f32(v80, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 1)), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1)))).u8[0];
          if (v81) {
            unsigned int v82 = -1;
          }
          else {
            unsigned int v82 = 0;
          }
          float32x4_t v72 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v82), v78, (int8x16_t)v72);
          if (v81) {
            uint64_t v67 = v71;
          }
          int v71 = v74;
          v73 -= 16;
        }
        while (v73);
      }
      *(void *)&v63.f64[1] = v115.i64[1];
      float32x4_t v83 = vsubq_f32(*v67, v115);
      v83.f32[0] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v83, v83)));
      float v84 = (float)(v83.f32[0] + v83.f32[0]) / (float)v11;
      LODWORD(v63.f64[0]) = *(_DWORD *)(a1 + 36);
      float v85 = *(float *)v63.f64 + *(float *)v63.f64;
      if ((float)(*(float *)v63.f64 + *(float *)v63.f64) >= v84) {
        float v85 = v84;
      }
      if (v84 >= *(float *)v63.f64) {
        float v86 = v85;
      }
      else {
        float v86 = *(float *)(a1 + 36);
      }
      *(float *)v63.f64 = ceilf(v86 * 100.0) / 100.0;
      int v87 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      LODWORD(v63.f64[0]) = *(_DWORD *)(a1 + 36);
      int v87 = v64;
    }
    float v88 = v65 * (float)v64;
    if (v87 >= 1)
    {
      float32x4_t v89 = v115;
      v89.f32[2] = (float)(v88 * 0.5) + v48;
      float32x4_t v115 = v89;
    }
    long long v90 = *(float32x4_t **)(a1 + 8);
    if (v90)
    {
      v90[4] = v115;
      uint64_t v91 = *(void *)(a1 + 8);
      if (v91)
      {
        *(_DWORD *)(v91 + 12) = LODWORD(v63.f64[0]);
        uint64_t v92 = *(float64x2_t **)(a1 + 8);
        if (v92)
        {
          double v93 = *(float *)v63.f64;
          v63.f64[0] = v65;
          v94.f64[0] = v93;
          v94.f64[1] = v93;
          __asm { FMOV            V4.2D, #1.0 }
          float64x2_t v100 = vdivq_f64(_Q4, v94);
          float64x2_t v101 = vdivq_f64(_Q4, v63);
          v92[5] = v100;
          v92[6] = v101;
          unint64_t v102 = *(float64x2_t **)(a1 + 8);
          if (v102)
          {
            v101.f64[0] = (double)v87;
            __asm { FMOV            V3.2D, #0.5 }
            float64x2_t v104 = vmulq_f64(vmulq_f64(v101, v63), _Q3);
            float64x2_t v105 = vmulq_f64(vmulq_n_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v11), 0), v93), _Q3);
            float64x2_t v106 = (float64x2_t)vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL);
            v105.f64[1] = v106.f64[0];
            v106.f64[0] = v115.f32[2];
            v102[7] = vsubq_f64(v105, vcvtq_f64_f32(*(float32x2_t *)v115.f32));
            v102[8] = vsubq_f64(v104, v106);
            uint64_t v107 = *(void *)(a1 + 8);
            if (v107)
            {
              *(float *)(v107 + 16) = v48;
              uint64_t v108 = *(void *)(a1 + 8);
              if (v108)
              {
                *(float *)(v108 + 20) = v48 + v88;
                uint64_t v109 = *(void *)(a1 + 8);
                if (v109)
                {
                  *(float *)(v109 + 24) = v88;
                  uint64_t v110 = *(void *)(a1 + 8);
                  if (v110)
                  {
                    *(_DWORD *)(v110 + 28) = *(_DWORD *)(a1 + 20);
                    uint64_t v111 = *(void *)(a1 + 8);
                    if (v111)
                    {
                      *(float *)(v111 + 36) = v49;
                      uint64_t v112 = *(void *)(a1 + 8);
                      if (v112) {
                        *(_DWORD *)(v112 + 40) = v24;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v116)
    {
      v117 = v116;
      operator delete(v116);
    }
  }
}

void sub_25B400B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (v22) {
    operator delete(v22);
  }
  if (__p) {
    operator delete(__p);
  }

  if (a14) {
    operator delete(a14);
  }

  _Unwind_Resume(a1);
}

void *sub_25B400BE4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_25B40040C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_25B400C40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_25B400C5C(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_25B3FCA18(a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_25B400CC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B400CE0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result != a1[1]) {
    return std::__sort<std::__less<float,float> &,float *>();
  }
  return result;
}

id *sub_25B400D94(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[1];
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t sub_25B400DC4(uint64_t result, double a2, float64x2_t a3)
{
  if (result)
  {
    uint64_t v3 = *(void *)(result + 8);
    if (v3)
    {
      *(unsigned char *)(v3 + 8) = 0;
      uint64_t v4 = *(void *)(result + 8);
      if (v4)
      {
        *(_DWORD *)(v4 + 12) = *(_DWORD *)(result + 36);
        uint64_t v5 = *(void *)(result + 8);
        if (v5)
        {
          a3.f64[0] = *(float *)(result + 48);
          __asm { FMOV            V2.2D, #1.0 }
          *(float64x2_t *)(v5 + 80) = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(v5 + 12)), 0));
          *(float64x2_t *)(v5 + 96) = vdivq_f64(_Q2, a3);
          uint64_t v11 = *(void *)(result + 8);
          if (v11)
          {
            *(_OWORD *)(v11 + 64) = 0u;
            uint64_t v12 = *(void *)(result + 8);
            if (v12)
            {
              *(void *)(v12 + 112) = 0;
              *(void *)(v12 + 120) = 0;
              *(_OWORD *)(v12 + 128) = 0uLL;
              uint64_t v13 = *(void *)(result + 8);
              if (v13)
              {
                *(_DWORD *)(v13 + 16) = 0;
                uint64_t v14 = *(void *)(result + 8);
                if (v14)
                {
                  *(_DWORD *)(v14 + 20) = 0;
                  uint64_t v15 = *(void *)(result + 8);
                  if (v15)
                  {
                    *(_DWORD *)(v15 + 24) = 0;
                    uint64_t v16 = *(void *)(result + 8);
                    if (v16)
                    {
                      *(_DWORD *)(v16 + 28) = *(_DWORD *)(result + 20);
                      uint64_t v17 = *(void *)(result + 8);
                      if (v17) {
                        *(_DWORD *)(v17 + 32) = *(_DWORD *)(result + 44);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_25B400F2C(uint64_t a1)
{
  return a1;
}

void sub_25B400F74(uint64_t a1)
{
  *(void *)a1 = &unk_2708F11E8;
  uint64_t v1 = a1 + 8;
  unint64_t v2 = (void **)(a1 + 88);
  sub_25B400FF8(&v2);
  sub_25B40107C(v1);

  JUMPOUT(0x261163EE0);
}

void sub_25B400FF8(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        sub_25B401104(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_25B40107C(uint64_t a1)
{
  sub_25B4010B8(*(void ***)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_25B4010B8(void **__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      unint64_t v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0) {
        operator delete(v1[2]);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void sub_25B401104(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_25B40115C(uint64_t a1)
{
  *(void *)a1 = &unk_2708F11E8;
  uint64_t v2 = a1 + 8;
  uint64_t v4 = (void **)(a1 + 88);
  sub_25B400FF8(&v4);
  sub_25B40107C(v2);
  return a1;
}

void sub_25B4011C0(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_25B4010B8(*(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t sub_25B401218(float32x2_t *a1, uint64_t a2, uint64_t a3, int a4, int a5, double a6, double a7, double a8, double a9, double a10, __n128 a11)
{
  float v11 = *(float *)&a6;
  double v33 = sub_25B4781B8((float32x4_t *)a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  long long v34 = *(_OWORD *)a1[2].f32;
  long long v35 = *(_OWORD *)(a2 + 48);
  long long v36 = *(_OWORD *)a1->f32;
  float32x2_t v37 = vadd_f32(*(float32x2_t *)&v33, *(float32x2_t *)&v35);
  *(void *)&long long v14 = *(void *)(a2 + 48);
  *((float32x2_t *)&v14 + 1) = v37;
  *(void *)&long long v15 = v14;
  *((float32x2_t *)&v15 + 1) = *a1;
  long long v39 = v15;
  long long v40 = v14;
  *(void *)&long long v14 = v35;
  *((void *)&v14 + 1) = v34;
  long long v38 = v14;
  float v16 = sub_25B3FCCE0((float32x2_t *)&v40, (float32x2_t *)&v39, 0);
  float v17 = sub_25B3FCCE0((float32x2_t *)&v40, (float32x2_t *)&v38, 0);
  uint64_t result = 0;
  int32x2_t v19 = (int32x2_t)vsub_f32(v37, *(float32x2_t *)&v35);
  float32x2_t v20 = vsub_f32(*(float32x2_t *)&v34, *(float32x2_t *)&v36);
  *(float *)v21.i32 = -*(float *)&v19.i32[1];
  float32x2_t v22 = (float32x2_t)vzip1_s32(v21, v19);
  int32x2_t v23 = (int32x2_t)vmul_f32(v20, v22);
  if (vaddv_f32((float32x2_t)v23) != 0.0)
  {
    int32x2_t v24 = (int32x2_t)vmul_f32(vsub_f32(*(float32x2_t *)&v35, *(float32x2_t *)&v36), v22);
    float32x2_t v25 = vmla_n_f32(*(float32x2_t *)&v36, v20, vdiv_f32(vadd_f32((float32x2_t)v24, (float32x2_t)vdup_lane_s32(v24, 1)), vadd_f32((float32x2_t)v23, (float32x2_t)vdup_lane_s32(v23, 1))).f32[0]);
    float32x2_t v26 = vadd_f32(*(float32x2_t *)&v35, vmul_f32(vadd_f32(*a1, a1[2]), (float32x2_t)0xBF000000BF000000));
    float v27 = sqrtf(vaddv_f32(vmul_f32(v26, v26)));
    if (vaddv_f32(vmul_f32(*(float32x2_t *)&v33, vsub_f32(v25, *(float32x2_t *)&v35))) <= 0.0)
    {
      BOOL v32 = v17 < v11 || v16 < v11;
      if (!v32 || v27 >= 4.0) {
        return 0;
      }
    }
    else
    {
      float v28 = vaddv_f32(vmul_f32(vsub_f32(v25, *(float32x2_t *)&v36), vsub_f32(v25, *(float32x2_t *)&v34)));
      if (v17 >= v11 && v16 >= v11 && v28 > 0.00001 || v27 >= 4.0) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

void sub_25B4013A8(uint64_t a1, float32x4_t *a2, float32x2_t **a3)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  float v4 = *(float *)(a1 + 72) / 0.02;
  float v5 = (float)(int)v4;
  float32x4_t v43 = vsubq_f32(a2[1], *a2);
  float32x4_t v44 = *a2;
  float v6 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v43, v43)));
  int __p = (int)(float)((float)(v6 + 0.6) / 0.02) + 1;
  *(void *)&long long v7 = __p;
  *((void *)&v7 + 1) = (unint64_t)(float)(v5 + 1.0);
  LODWORD(v48[0].__locale_) = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v59 = v7;
  sub_25B408640((uint64_t)&v46, &v59);
  sub_25B40B204((uint64_t)&v46, (int *)v48);
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  if (*a3 != v8)
  {
    int v10 = (int)v4;
    v11.i32[1] = 872415232;
    *(float *)v11.i32 = v6 + 0.00000011921;
    float32x2_t v12 = vdiv_f32(*(float32x2_t *)v43.f32, (float32x2_t)vdup_lane_s32(v11, 0));
    float32x2_t v13 = vmla_f32(*(float32x2_t *)v44.f32, (float32x2_t)vdup_n_s32(0xBE99999A), v12);
    long long v14 = (void *)MEMORY[0x263F8C0F8];
    float32x2_t v15 = vsub_f32(vmla_n_f32(*(float32x2_t *)v44.f32, v12, v6 + 0.3), v13);
    float v16 = vaddv_f32(vmul_f32(v15, v15));
    if (v16 >= 0.000001) {
      float v17 = v16;
    }
    else {
      float v17 = 0.000001;
    }
    do
    {
      int v18 = (int)(float)((float)(COERCE_FLOAT(*(void *)&v9[1]) - *(float *)(a1 + 52)) / 0.02);
      int v19 = v18 & ~(v18 >> 31);
      if ((float)v19 < v5)
      {
        float32x2_t v20 = vsub_f32(vmla_n_f32(v13, v15, vaddv_f32(vmul_f32(vsub_f32(*v9, v13), v15)) / v17), v13);
        int v21 = (int)(float)(sqrtf(vaddv_f32(vmul_f32(v20, v20))) / 0.02);
        if (v21 <= 1) {
          int v22 = 1;
        }
        else {
          int v22 = v21;
        }
        signed int v23 = v22 - 1;
        int v24 = v21 + 2;
        if (__p < v24) {
          int v24 = (int)(float)((float)(v6 + 0.6) / 0.02) + 1;
        }
        v48[0].__locale_ = 0;
        v48[1] = (std::locale)v47[0];
        if (v24 >= v23) {
          unsigned int v25 = v23;
        }
        else {
          unsigned int v25 = v24;
        }
        if (v23 <= v24) {
          int v26 = v24;
        }
        else {
          int v26 = v23;
        }
        long long v49 = xmmword_25B5F1140;
        *(void *)&long long v50 = v47[1];
        *((void *)&v50 + 1) = 1;
        sub_25B408C3C((uint64_t)v47, (uint64_t)v48, 0, v25, v26, 1);
        if (v18 <= 1) {
          int v27 = 1;
        }
        else {
          int v27 = v18;
        }
        int v28 = v27 - 1;
        int v29 = v19 + 2;
        if (v19 + 2 >= v10) {
          int v29 = v10;
        }
        if (v28 <= v29) {
          int v30 = v29;
        }
        else {
          int v30 = v28;
        }
        if (v29 >= v28) {
          unsigned int v31 = v28;
        }
        else {
          unsigned int v31 = v29;
        }
        sub_25B408C3C((uint64_t)v47, (uint64_t)v48, 1u, v31, v30, 1);
        sub_25B408ABC((uint64_t)&v59, (uint64_t)&v46, (uint64_t)v48);
        if (v69)
        {
          sub_25B406B20(v14, (uint64_t)"runtime_err in ", 15);
          sub_25B406B20(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
          sub_25B406B20(v14, (uint64_t)" ", 1);
          BOOL v32 = (void *)std::ostream::operator<<();
          sub_25B406B20(v32, (uint64_t)" ", 1);
          sub_25B406B20(v32, (uint64_t)"operator+=", 10);
          std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
          double v33 = std::locale::use_facet(v48, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
          std::locale::~locale(v48);
          std::ostream::put();
          std::ostream::flush();
          sub_25B4074D0("err", "scalar assign should create a storage first");
          std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
          long long v34 = std::locale::use_facet(v48, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
          std::locale::~locale(v48);
          std::ostream::put();
          std::ostream::flush();
        }
        long long v49 = 0u;
        long long v50 = 0u;
        *(_OWORD *)&v48[0].__locale_ = 0u;
        uint64_t v35 = v66;
        long long v36 = v70;
        if (v68)
        {
          if (v66)
          {
            do
            {
              ++*v36++;
              --v35;
            }
            while (v35);
          }
        }
        else if (v66)
        {
          uint64_t v37 = 0;
          uint64_t v38 = *((void *)&v62 + 1);
          uint64_t v39 = v63;
          do
          {
            uint64_t v40 = 0;
            ++v36[v38 * (uint64_t)v48[0].__locale_ + v39 * (uint64_t)v48[1].__locale_];
            do
            {
              int v41 = (std::locale::__imp *)((char *)v48[v40 + 1].__locale_ + 1);
              v48[v40 + 1].__locale_ = v41;
              if (v41 != *(std::locale::__imp **)((char *)&v60 + v40 * 8)) {
                break;
              }
              v48[v40-- + 1].__locale_ = 0;
            }
            while (v40 != -2);
            ++v37;
          }
          while (v37 != v35);
        }
        *(void *)&long long v59 = &unk_2708F1C28;
        if (v67) {
          sub_25B404120(v67);
        }
      }
      v9 += 2;
    }
    while (v9 != v8);
  }
  long long v49 = 0u;
  long long v50 = 0u;
  *(_OWORD *)&v48[0].__locale_ = 0u;
  sub_25B404048((uint64_t)&v51, (uint64_t)&v46);
  LODWORD(v58) = 0;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  *(_OWORD *)&v48[0].__locale_ = v52;
  long long v49 = v53;
  long long v50 = v54;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v63 = v53;
  long long v64 = v54;
  long long v61 = 0u;
  long long v62 = v52;
  sub_25B404048((uint64_t)&v65, (uint64_t)&v51);
  long long v72 = v56;
  long long v73 = v57;
  long long v71 = v55;
  uint64_t v74 = v58;
  long long v59 = v62;
  long long v60 = v63;
  long long v61 = v64;
  sub_25B408738((uint64_t)&v75, v62 * *((void *)&v62 + 1));
}

void sub_25B4031C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57)
{
  STACK[0x450] = (unint64_t)&unk_2708F1C28;
  if (STACK[0x4D0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x4D0]);
  }
  if (a38) {
    sub_25B404120(a38);
  }
  STACK[0x380] = (unint64_t)&unk_2708F1C28;
  if (STACK[0x400]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x400]);
  }
  STACK[0x250] = (unint64_t)&unk_2708F1C28;
  if (STACK[0x2D0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x2D0]);
  }
  if (a57) {
    sub_25B404120(a57);
  }
  _Unwind_Resume(a1);
}

void *sub_25B403500(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_25B40044C();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    float v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    float v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

unsigned __int8 *sub_25B4035B0(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_25B403AF4((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (sub_25B403F44(i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

char *sub_25B4036AC(uint64_t *a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = sub_25B403AF4((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      float32x2_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (sub_25B403F44((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          float32x2_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  float32x2_t v13 = (char *)operator new(0x80uLL);
  *(void *)float32x2_t v13 = 0;
  *((void *)v13 + 1) = v8;
  float32x2_t v15 = v13 + 16;
  float v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_25B4002F4(v15, *(void **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)float32x2_t v15 = v17;
  }
  int v18 = a1 + 2;
  *((_OWORD *)v13 + 6) = 0u;
  *((_OWORD *)v13 + 7) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_OWORD *)v13 + 5) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  float v19 = (float)(unint64_t)(a1[3] + 1);
  float v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          unsigned int v25 = operator new(8 * *(void *)&prime);
          int v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          int v28 = (void *)*v18;
          if (*v18)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v29) = v18;
            long long v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*a1 + 8 * v35))
                  {
                    *(void *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *int v28 = *v34;
                  void *v34 = **(void **)(*a1 + 8 * v35);
                  **(void **)(*a1 + 8 * v35) = v34;
                  long long v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_58:
                int v28 = v34;
                long long v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v40 = (void *)*a1;
        *a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v36 = *a1;
  uint64_t v37 = *(void **)(*a1 + 8 * v3);
  if (v37)
  {
    *(void *)float32x2_t v13 = *v37;
LABEL_75:
    void *v37 = v13;
    goto LABEL_76;
  }
  *(void *)float32x2_t v13 = *v18;
  *int v18 = v13;
  *(void *)(v36 + 8 * v3) = v18;
  if (*(void *)v13)
  {
    unint64_t v38 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    uint64_t v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_25B403AD0(_Unwind_Exception *a1)
{
  sub_25B403FE8(0, v1);
  _Unwind_Resume(a1);
}

unint64_t sub_25B403AF4(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v1 < 0;
  if (v1 >= 0) {
    unint64_t v4 = (uint64_t *)a1;
  }
  else {
    unint64_t v4 = *(uint64_t **)a1;
  }
  if (!v3) {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      unint64_t v34 = 0x9DDFEA08EB382D69;
      uint64_t v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      uint64_t v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      uint64_t v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      uint64_t v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      uint64_t v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      uint64_t v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      unint64_t v50 = v46 + v48;
      unint64_t v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      unint64_t v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      unint64_t v53 = v47 + v2 + v46 + v44;
      uint64_t v54 = v53 + v43;
      unint64_t v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      uint64_t v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v57 = v56 + v45 + v48;
      uint64_t v58 = __ROR8__(v57, 44);
      uint64_t v59 = v57 + v49;
      uint64_t v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      uint64_t v62 = *v4;
      long long v61 = v4 + 4;
      unint64_t v63 = v62 - 0x4B6D499041670D8DLL * v43;
      uint64_t v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v65 = *(v61 - 3);
        uint64_t v66 = v63 + v54 + v50 + v65;
        uint64_t v67 = v61[2];
        uint64_t v68 = v61[3];
        uint64_t v69 = v61[1];
        unint64_t v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        uint64_t v70 = v52 + v59;
        uint64_t v71 = *(v61 - 2);
        uint64_t v72 = *(v61 - 1);
        uint64_t v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        uint64_t v74 = v73 + v59 + v72;
        uint64_t v75 = v73 + v65 + v71;
        uint64_t v54 = v75 + v72;
        uint64_t v76 = __ROR8__(v75, 44) + v73;
        unint64_t v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        unint64_t v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        unint64_t v55 = v76 + __ROR8__(v74 + v77, 21);
        unint64_t v78 = v63 + v60 + *v61;
        uint64_t v59 = v78 + v69 + v67 + v68;
        uint64_t v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        unint64_t v52 = v77;
        v64 += 64;
      }
      while (v64);
      unint64_t v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      unint64_t v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      unint64_t v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      unint64_t v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      unint64_t v9 = (char *)v4 + v2;
      uint64_t v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v12 = v4[1];
      uint64_t v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      float v16 = v4 + 2;
      uint64_t v14 = v4[2];
      uint64_t v15 = v16[1];
      uint64_t v17 = __ROR8__(v13 + v15, 52);
      uint64_t v18 = __ROR8__(v13, 37);
      uint64_t v19 = v13 + v12;
      uint64_t v20 = __ROR8__(v19, 7);
      uint64_t v21 = v19 + v14;
      uint64_t v22 = v20 + v18;
      uint64_t v23 = *((void *)v9 - 4) + v14;
      uint64_t v24 = v11 + v15;
      uint64_t v25 = __ROR8__(v24 + v23, 52);
      uint64_t v26 = v22 + v17;
      uint64_t v27 = __ROR8__(v23, 37);
      uint64_t v28 = *((void *)v9 - 3) + v23;
      uint64_t v29 = __ROR8__(v28, 7);
      uint64_t v30 = v26 + __ROR8__(v21, 31);
      uint64_t v31 = v28 + v10;
      uint64_t v32 = v31 + v24;
      uint64_t v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      unint64_t v34 = 0x9AE16A3B2F90404FLL;
      unint64_t v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      uint64_t v36 = v4[1];
      unint64_t v37 = 0xB492B66FBE98F273 * *v4;
      unint64_t v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      unint64_t v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      unint64_t v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      int v82 = *(_DWORD *)v4;
      uint64_t v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      unint64_t v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      unint64_t v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      unint64_t v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL sub_25B403F44(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void sub_25B403FE8(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_25B404048(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F1C28;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

void sub_25B404120(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_25B404194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[3] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a2 + 8);
  v6[0] = 0;
  v6[1] = v5;
  v6[2] = 1;
  sub_25B406030((void *)(a2 + 8), v6, *(_DWORD *)a3, *(_DWORD *)(a3 + 4), *(_DWORD *)(a3 + 8));
  sub_25B406A00(a1, a2, v6);
}

uint64_t sub_25B404228(uint64_t a1, int *a2)
{
  if (*(unsigned char *)(a1 + 137))
  {
    long long v4 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    long long v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    long long v7 = (void *)std::ostream::operator<<();
    long long v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"operator=", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4074D0("err", "scalar assign should create a storage first");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    uint64_t v11 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
  }
  int v12 = *a2;
  uint64_t v13 = *(void *)(a1 + 104);
  BOOL v14 = *(_DWORD **)(a1 + 144);
  if (*(unsigned char *)(a1 + 136))
  {
    for (; v13; --v13)
      *v14++ = v12;
  }
  else if (v13)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      v14[v16 * v15] = v12;
      if (v15 + 1 == v17) {
        uint64_t v15 = 0;
      }
      else {
        ++v15;
      }
      --v13;
    }
    while (v13);
  }
  return a1;
}

void sub_25B404438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B404450(uint64_t result, unint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  unint64_t v11 = result;
  while (2)
  {
    unint64_t v93 = a2;
    uint64_t v95 = a2 - 12;
    uint64_t v91 = (uint64_t *)(a2 - 36);
    uint64_t v92 = (uint64_t *)(a2 - 24);
    unint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v11 = v12;
          uint64_t v13 = a2 - v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v12) >> 2);
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unint64_t result = (*a3)((uint64_t *)v95, (uint64_t *)v12);
                if (result)
                {
                  uint64_t v39 = *(void *)v12;
                  int v100 = *(_DWORD *)(v12 + 8);
                  uint64_t v99 = v39;
                  uint64_t v40 = *(void *)v95;
                  *(_DWORD *)(v12 + 8) = *(_DWORD *)(v95 + 8);
                  *(void *)unint64_t v12 = v40;
                  uint64_t v41 = v99;
                  *(_DWORD *)(v95 + 8) = v100;
                  *(void *)uint64_t v95 = v41;
                }
                break;
              case 3uLL:
                unint64_t result = sub_25B405AC0((uint64_t *)v12, (uint64_t *)(v12 + 12), (uint64_t *)v95, a3);
                break;
              case 4uLL:
                unint64_t result = sub_25B405BFC(v12, v12 + 12, v12 + 24, v95, a3);
                break;
              case 5uLL:
                unint64_t result = sub_25B405CE8(v12, v12 + 12, v12 + 24, v12 + 36, v95, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 287)
          {
            unint64_t v42 = (uint64_t *)(v12 + 12);
            BOOL v44 = v12 == a2 || v42 == (uint64_t *)a2;
            if (a5)
            {
              if (!v44)
              {
                uint64_t v45 = 0;
                unint64_t v46 = v12;
                do
                {
                  uint64_t v47 = (uint64_t *)v46;
                  unint64_t v46 = (unint64_t)v42;
                  unint64_t result = (*a3)(v42, v47);
                  if (result)
                  {
                    uint64_t v48 = *(void *)v46;
                    int v100 = *(_DWORD *)(v46 + 8);
                    uint64_t v99 = v48;
                    uint64_t v49 = v45;
                    while (1)
                    {
                      uint64_t v50 = v12 + v49;
                      *(void *)(v50 + 12) = *(void *)(v12 + v49);
                      *(_DWORD *)(v50 + 20) = *(_DWORD *)(v12 + v49 + 8);
                      if (!v49) {
                        break;
                      }
                      v49 -= 12;
                      unint64_t result = (*a3)(&v99, (uint64_t *)(v49 + v12));
                      if ((result & 1) == 0)
                      {
                        uint64_t v51 = v12 + v49 + 12;
                        goto LABEL_79;
                      }
                    }
                    uint64_t v51 = v12;
LABEL_79:
                    uint64_t v52 = v99;
                    *(_DWORD *)(v51 + 8) = v100;
                    *(void *)uint64_t v51 = v52;
                    a2 = v93;
                  }
                  unint64_t v42 = (uint64_t *)(v46 + 12);
                  v45 += 12;
                }
                while (v46 + 12 != a2);
              }
            }
            else if (!v44)
            {
              do
              {
                unint64_t v85 = (uint64_t *)v11;
                unint64_t v11 = (unint64_t)v42;
                unint64_t result = (*a3)(v42, v85);
                if (result)
                {
                  uint64_t v86 = *(void *)v11;
                  int v100 = *(_DWORD *)(v11 + 8);
                  uint64_t v99 = v86;
                  unint64_t v87 = v11;
                  do
                  {
                    unint64_t v88 = v87;
                    uint64_t v89 = *(void *)(v87 - 12);
                    v87 -= 12;
                    *(void *)unint64_t v88 = v89;
                    *(_DWORD *)(v88 + 8) = *(_DWORD *)(v88 - 4);
                    unint64_t result = (*a3)(&v99, (uint64_t *)(v88 - 24));
                  }
                  while ((result & 1) != 0);
                  uint64_t v90 = v99;
                  *(_DWORD *)(v87 + 8) = v100;
                  *(void *)unint64_t v87 = v90;
                }
                unint64_t v42 = (uint64_t *)(v11 + 12);
              }
              while (v11 + 12 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v53 = (v14 - 2) >> 1;
              int64_t v96 = v53;
              do
              {
                int64_t v54 = v53;
                if (v96 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  unint64_t v56 = v11 + 12 * v55;
                  if (2 * v53 + 2 < (uint64_t)v14
                    && (*a3)((uint64_t *)(v11 + 12 * v55), (uint64_t *)(v56 + 12)))
                  {
                    v56 += 12;
                    uint64_t v55 = 2 * v54 + 2;
                  }
                  unint64_t v57 = v11 + 12 * v54;
                  unint64_t result = (*a3)((uint64_t *)v56, (uint64_t *)v57);
                  if ((result & 1) == 0)
                  {
                    uint64_t v58 = *(void *)v57;
                    int v100 = *(_DWORD *)(v57 + 8);
                    uint64_t v99 = v58;
                    do
                    {
                      unint64_t v59 = v56;
                      uint64_t v60 = *(void *)v56;
                      *(_DWORD *)(v57 + 8) = *(_DWORD *)(v56 + 8);
                      *(void *)unint64_t v57 = v60;
                      if (v96 < v55) {
                        break;
                      }
                      uint64_t v61 = (2 * v55) | 1;
                      unint64_t v56 = v11 + 12 * v61;
                      uint64_t v62 = 2 * v55 + 2;
                      if (v62 < (uint64_t)v14 && (*a3)((uint64_t *)(v11 + 12 * v61), (uint64_t *)(v56 + 12)))
                      {
                        v56 += 12;
                        uint64_t v61 = v62;
                      }
                      unint64_t result = (*a3)((uint64_t *)v56, &v99);
                      unint64_t v57 = v59;
                      uint64_t v55 = v61;
                    }
                    while (!result);
                    uint64_t v63 = v99;
                    *(_DWORD *)(v59 + 8) = v100;
                    *(void *)unint64_t v59 = v63;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              int64_t v64 = v13 / 0xCuLL;
              unint64_t v65 = v93;
              do
              {
                unint64_t v94 = v65;
                uint64_t v66 = 0;
                uint64_t v67 = *(void *)v11;
                int v98 = *(_DWORD *)(v11 + 8);
                uint64_t v97 = v67;
                unint64_t v68 = v11;
                do
                {
                  uint64_t v69 = v68 + 12 * v66 + 12;
                  uint64_t v70 = (2 * v66) | 1;
                  uint64_t v71 = 2 * v66 + 2;
                  if (v71 < v64)
                  {
                    unint64_t result = (*a3)((uint64_t *)(v68 + 12 * v66 + 12), (uint64_t *)(v68 + 12 * v66 + 24));
                    if (result)
                    {
                      v69 += 12;
                      uint64_t v70 = v71;
                    }
                  }
                  uint64_t v72 = *(void *)v69;
                  *(_DWORD *)(v68 + 8) = *(_DWORD *)(v69 + 8);
                  *(void *)unint64_t v68 = v72;
                  unint64_t v68 = v69;
                  uint64_t v66 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
                uint64_t v73 = (uint64_t *)(v94 - 12);
                if (v69 == v94 - 12)
                {
                  unint64_t v65 = v94 - 12;
                  uint64_t v83 = v97;
                  *(_DWORD *)(v69 + 8) = v98;
                  *(void *)uint64_t v69 = v83;
                }
                else
                {
                  uint64_t v74 = *v73;
                  *(_DWORD *)(v69 + 8) = *(_DWORD *)(v94 - 4);
                  *(void *)uint64_t v69 = v74;
                  uint64_t v75 = v97;
                  *(_DWORD *)(v94 - 4) = v98;
                  unint64_t v65 = v94 - 12;
                  uint64_t *v73 = v75;
                  uint64_t v76 = v69 - v11 + 12;
                  if (v76 >= 13)
                  {
                    unint64_t v77 = (unint64_t)(-2 - 0x5555555555555555 * (v76 >> 2)) >> 1;
                    unint64_t v78 = v11 + 12 * v77;
                    unint64_t result = (*a3)((uint64_t *)v78, (uint64_t *)v69);
                    if (result)
                    {
                      uint64_t v79 = *(void *)v69;
                      int v100 = *(_DWORD *)(v69 + 8);
                      uint64_t v99 = v79;
                      do
                      {
                        uint64_t v80 = v78;
                        uint64_t v81 = *(void *)v78;
                        *(_DWORD *)(v69 + 8) = *(_DWORD *)(v78 + 8);
                        *(void *)uint64_t v69 = v81;
                        if (!v77) {
                          break;
                        }
                        unint64_t v77 = (v77 - 1) >> 1;
                        unint64_t v78 = v11 + 12 * v77;
                        unint64_t result = (*a3)((uint64_t *)v78, &v99);
                        uint64_t v69 = v80;
                      }
                      while ((result & 1) != 0);
                      uint64_t v82 = v99;
                      *(_DWORD *)(v80 + 8) = v100;
                      *(void *)uint64_t v80 = v82;
                    }
                  }
                }
              }
              while (v64-- > 2);
            }
            return result;
          }
          unint64_t v15 = v12 + 12 * (v14 >> 1);
          if ((unint64_t)v13 >= 0x601)
          {
            sub_25B405AC0((uint64_t *)v12, (uint64_t *)(v12 + 12 * (v14 >> 1)), (uint64_t *)v95, a3);
            sub_25B405AC0((uint64_t *)(v12 + 12), (uint64_t *)(v12 + 12 * (v14 >> 1) - 12), v92, a3);
            sub_25B405AC0((uint64_t *)(v12 + 24), (uint64_t *)(v12 + 12 + 12 * (v14 >> 1)), v91, a3);
            sub_25B405AC0((uint64_t *)(v12 + 12 * (v14 >> 1) - 12), (uint64_t *)(v12 + 12 * (v14 >> 1)), (uint64_t *)(v12 + 12 + 12 * (v14 >> 1)), a3);
            uint64_t v16 = *(void *)v12;
            int v100 = *(_DWORD *)(v12 + 8);
            uint64_t v99 = v16;
            LODWORD(v16) = *(_DWORD *)(v15 + 8);
            *(void *)unint64_t v12 = *(void *)v15;
            *(_DWORD *)(v12 + 8) = v16;
            uint64_t v17 = v99;
            *(_DWORD *)(v15 + 8) = v100;
            *(void *)unint64_t v15 = v17;
          }
          else
          {
            sub_25B405AC0((uint64_t *)(v12 + 12 * (v14 >> 1)), (uint64_t *)v12, (uint64_t *)v95, a3);
          }
          --a4;
          a2 = v93;
          if (a5 & 1) != 0 || ((*a3)((uint64_t *)(v12 - 12), (uint64_t *)v12)) {
            break;
          }
          uint64_t v30 = *(void *)v12;
          int v98 = *(_DWORD *)(v12 + 8);
          uint64_t v97 = v30;
          unint64_t result = (*a3)(&v97, (uint64_t *)v95);
          if (result)
          {
            do
            {
              v12 += 12;
              unint64_t result = (*a3)(&v97, (uint64_t *)v12);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v31 = (uint64_t *)(v12 + 12);
            do
            {
              unint64_t v12 = (unint64_t)v31;
              if ((unint64_t)v31 >= v93) {
                break;
              }
              unint64_t result = (*a3)(&v97, v31);
              uint64_t v31 = (uint64_t *)(v12 + 12);
            }
            while (!result);
          }
          unint64_t v32 = v93;
          if (v12 < v93)
          {
            unint64_t v32 = v93;
            do
            {
              v32 -= 12;
              unint64_t result = (*a3)(&v97, (uint64_t *)v32);
            }
            while ((result & 1) != 0);
          }
          while (v12 < v32)
          {
            uint64_t v33 = *(void *)v12;
            int v100 = *(_DWORD *)(v12 + 8);
            uint64_t v99 = v33;
            uint64_t v34 = *(void *)v32;
            *(_DWORD *)(v12 + 8) = *(_DWORD *)(v32 + 8);
            *(void *)unint64_t v12 = v34;
            uint64_t v35 = v99;
            *(_DWORD *)(v32 + 8) = v100;
            *(void *)unint64_t v32 = v35;
            do
              v12 += 12;
            while (!(*a3)(&v97, (uint64_t *)v12));
            do
            {
              v32 -= 12;
              unint64_t result = (*a3)(&v97, (uint64_t *)v32);
            }
            while ((result & 1) != 0);
          }
          uint64_t v36 = (uint64_t *)(v12 - 12);
          BOOL v5 = v12 - 12 >= v11;
          BOOL v6 = v12 - 12 == v11;
          if (v12 - 12 != v11)
          {
            uint64_t v37 = *v36;
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 - 4);
            *(void *)unint64_t v11 = v37;
          }
          a5 = 0;
          uint64_t v38 = v97;
          *(_DWORD *)(v12 - 4) = v98;
          *uint64_t v36 = v38;
        }
        uint64_t v18 = *(void *)v12;
        int v98 = *(_DWORD *)(v12 + 8);
        uint64_t v97 = v18;
        std::locale v19 = (uint64_t *)v12;
        do
        {
          uint64_t v20 = (uint64_t)v19;
          std::locale v19 = (uint64_t *)((char *)v19 + 12);
        }
        while (((*a3)(v19, &v97) & 1) != 0);
        uint64_t v21 = (uint64_t *)v93;
        if (v20 == v12)
        {
          uint64_t v21 = (uint64_t *)v93;
          do
          {
            if (v19 >= v21) {
              break;
            }
            uint64_t v21 = (uint64_t *)((char *)v21 - 12);
          }
          while (((*a3)(v21, &v97) & 1) == 0);
        }
        else
        {
          do
            uint64_t v21 = (uint64_t *)((char *)v21 - 12);
          while (!(*a3)(v21, &v97));
        }
        if (v19 < v21)
        {
          unint64_t v22 = (unint64_t)v19;
          uint64_t v23 = v21;
          do
          {
            uint64_t v99 = *(void *)v22;
            uint64_t v24 = v99;
            int v100 = *(_DWORD *)(v22 + 8);
            int v25 = v100;
            int v26 = *((_DWORD *)v23 + 2);
            *(void *)unint64_t v22 = *v23;
            *(_DWORD *)(v22 + 8) = v26;
            *((_DWORD *)v23 + 2) = v25;
            uint64_t *v23 = v24;
            do
            {
              uint64_t v20 = v22;
              v22 += 12;
            }
            while (((*a3)((uint64_t *)v22, &v97) & 1) != 0);
            do
              uint64_t v23 = (uint64_t *)((char *)v23 - 12);
            while (!(*a3)(v23, &v97));
          }
          while (v22 < (unint64_t)v23);
        }
        if (v20 != v11)
        {
          uint64_t v27 = *(void *)v20;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v20 + 8);
          *(void *)unint64_t v11 = v27;
        }
        uint64_t v28 = v97;
        *(_DWORD *)(v20 + 8) = v98;
        *(void *)uint64_t v20 = v28;
        if (v19 >= v21) {
          break;
        }
LABEL_31:
        unint64_t result = sub_25B404450(v11, v20, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v20 + 12;
      }
      BOOL v29 = sub_25B405E0C(v11, v20, a3);
      unint64_t v12 = v20 + 12;
      unint64_t result = sub_25B405E0C(v20 + 12, v93, a3);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_31;
      }
    }
    a2 = v20;
    if (!v29) {
      continue;
    }
    return result;
  }
}

uint64_t sub_25B404DD4(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v3 = *(unsigned int **)(a1 + 144);
    uint64_t result = *v3;
    if (v2 >= 2)
    {
      unint64_t v5 = v2 - 1;
      BOOL v6 = (int *)(v3 + 1);
      do
      {
        int v7 = *v6++;
        uint64_t result = (v7 + result);
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    long long v8 = *(unsigned int **)(a1 + 144);
    uint64_t result = *v8;
    if (v2 >= 2)
    {
      uint64_t v9 = *(void *)(a1 + 56);
      uint64_t v10 = 1;
      for (uint64_t i = 1; i != v2; ++i)
      {
        uint64_t result = v8[v9 * v10] + result;
        if (v10 + 1 == v2) {
          uint64_t v10 = 0;
        }
        else {
          ++v10;
        }
      }
    }
  }
  return result;
}

uint64_t sub_25B404E54(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  unint64_t v11 = (uint64_t *)result;
  while (2)
  {
    unint64_t v65 = a2;
    uint64_t v66 = a2 - 1;
    uint64_t v63 = a2 - 3;
    int64_t v64 = a2 - 2;
    unint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t result = (*a3)(v66, v12);
                if (result)
                {
                  uint64_t v28 = *v12;
                  *unint64_t v12 = *v66;
                  uint64_t *v66 = v28;
                }
                break;
              case 3uLL:
                uint64_t result = sub_25B40565C(v12, v12 + 1, v66, a3);
                break;
              case 4uLL:
                uint64_t result = sub_25B405740(v12, v12 + 1, v12 + 2, v66, a3);
                break;
              case 5uLL:
                uint64_t result = sub_25B4057F4(v12, v12 + 1, v12 + 2, v12 + 3, v66, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            BOOL v29 = v12 + 1;
            BOOL v31 = v12 == a2 || v29 == a2;
            if (a5)
            {
              if (!v31)
              {
                uint64_t v32 = 0;
                uint64_t v33 = v12;
                do
                {
                  uint64_t v34 = v33;
                  uint64_t v33 = v29;
                  uint64_t result = (*a3)(v29, v34);
                  if (result)
                  {
                    uint64_t v69 = *v33;
                    uint64_t v35 = v32;
                    while (1)
                    {
                      *(uint64_t *)((char *)v12 + v35 + 8) = *(uint64_t *)((char *)v12 + v35);
                      if (!v35) {
                        break;
                      }
                      v35 -= 8;
                      uint64_t result = (*a3)(&v69, (uint64_t *)((char *)v12 + v35));
                      if ((result & 1) == 0)
                      {
                        uint64_t v36 = (uint64_t *)((char *)v12 + v35 + 8);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v36 = v12;
LABEL_79:
                    *uint64_t v36 = v69;
                    a2 = v65;
                  }
                  BOOL v29 = v33 + 1;
                  v32 += 8;
                }
                while (v33 + 1 != a2);
              }
            }
            else if (!v31)
            {
              do
              {
                unint64_t v59 = v11;
                unint64_t v11 = v29;
                uint64_t result = (*a3)(v29, v59);
                if (result)
                {
                  uint64_t v69 = *v11;
                  uint64_t v60 = v11;
                  do
                  {
                    uint64_t v61 = v60;
                    uint64_t v62 = *--v60;
                    uint64_t *v61 = v62;
                    uint64_t result = (*a3)(&v69, v61 - 2);
                  }
                  while ((result & 1) != 0);
                  *uint64_t v60 = v69;
                }
                BOOL v29 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v37 = (v14 - 2) >> 1;
              int64_t v67 = v37;
              do
              {
                int64_t v38 = v37;
                if (v67 >= v37)
                {
                  uint64_t v39 = (2 * v37) | 1;
                  uint64_t v40 = &v11[v39];
                  if (2 * v37 + 2 < (uint64_t)v14 && (*a3)(&v11[v39], v40 + 1))
                  {
                    ++v40;
                    uint64_t v39 = 2 * v38 + 2;
                  }
                  uint64_t v41 = &v11[v38];
                  uint64_t result = (*a3)(v40, v41);
                  if ((result & 1) == 0)
                  {
                    uint64_t v69 = *v41;
                    do
                    {
                      unint64_t v42 = v40;
                      *uint64_t v41 = *v40;
                      if (v67 < v39) {
                        break;
                      }
                      uint64_t v43 = (2 * v39) | 1;
                      uint64_t v40 = &v11[v43];
                      uint64_t v44 = 2 * v39 + 2;
                      if (v44 < (uint64_t)v14 && (*a3)(&v11[v43], v40 + 1))
                      {
                        ++v40;
                        uint64_t v43 = v44;
                      }
                      uint64_t result = (*a3)(v40, &v69);
                      uint64_t v41 = v42;
                      uint64_t v39 = v43;
                    }
                    while (!result);
                    *unint64_t v42 = v69;
                  }
                }
                int64_t v37 = v38 - 1;
              }
              while (v38);
              uint64_t v45 = (unint64_t)v13 >> 3;
              unint64_t v46 = v65;
              do
              {
                uint64_t v47 = 0;
                uint64_t v68 = *v11;
                uint64_t v48 = v11;
                do
                {
                  uint64_t v49 = &v48[v47 + 1];
                  uint64_t v50 = (2 * v47) | 1;
                  uint64_t v51 = 2 * v47 + 2;
                  if (v51 < v45)
                  {
                    uint64_t result = (*a3)(&v48[v47 + 1], &v48[v47 + 2]);
                    if (result)
                    {
                      ++v49;
                      uint64_t v50 = v51;
                    }
                  }
                  *uint64_t v48 = *v49;
                  uint64_t v48 = v49;
                  uint64_t v47 = v50;
                }
                while (v50 <= (uint64_t)((unint64_t)(v45 - 2) >> 1));
                uint64_t v52 = v46 - 1;
                if (v49 == v52)
                {
                  int64_t v53 = v52;
                  uint64_t *v49 = v68;
                }
                else
                {
                  uint64_t *v49 = *v52;
                  int64_t v53 = v52;
                  uint64_t *v52 = v68;
                  uint64_t v54 = (char *)v49 - (char *)v11 + 8;
                  if (v54 >= 9)
                  {
                    unint64_t v55 = (unint64_t)((v54 >> 3) - 2) >> 1;
                    unint64_t v56 = &v11[v55];
                    uint64_t result = (*a3)(v56, v49);
                    if (result)
                    {
                      uint64_t v69 = *v49;
                      do
                      {
                        unint64_t v57 = v56;
                        uint64_t *v49 = *v56;
                        if (!v55) {
                          break;
                        }
                        unint64_t v55 = (v55 - 1) >> 1;
                        unint64_t v56 = &v11[v55];
                        uint64_t result = (*a3)(v56, &v69);
                        uint64_t v49 = v57;
                      }
                      while ((result & 1) != 0);
                      *unint64_t v57 = v69;
                    }
                  }
                }
                BOOL v58 = v45-- <= 2;
                unint64_t v46 = v53;
              }
              while (!v58);
            }
            return result;
          }
          unint64_t v15 = &v12[v14 >> 1];
          if ((unint64_t)v13 >= 0x401)
          {
            sub_25B40565C(v12, &v12[v14 >> 1], v66, a3);
            sub_25B40565C(v12 + 1, v15 - 1, v64, a3);
            sub_25B40565C(v12 + 2, &v12[(v14 >> 1) + 1], v63, a3);
            sub_25B40565C(v15 - 1, &v12[v14 >> 1], &v12[(v14 >> 1) + 1], a3);
            uint64_t v16 = *v12;
            *unint64_t v12 = *v15;
            *unint64_t v15 = v16;
          }
          else
          {
            sub_25B40565C(&v12[v14 >> 1], v12, v66, a3);
          }
          --a4;
          a2 = v65;
          if (a5 & 1) != 0 || ((*a3)(v12 - 1, v12)) {
            break;
          }
          uint64_t v69 = *v12;
          uint64_t result = (*a3)(&v69, v66);
          if (result)
          {
            do
              uint64_t result = (*a3)(&v69, ++v12);
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v24 = v12 + 1;
            do
            {
              unint64_t v12 = v24;
              if (v24 >= v65) {
                break;
              }
              uint64_t result = (*a3)(&v69, v24);
              uint64_t v24 = v12 + 1;
            }
            while (!result);
          }
          int v25 = v65;
          if (v12 < v65)
          {
            int v25 = v65;
            do
              uint64_t result = (*a3)(&v69, --v25);
            while ((result & 1) != 0);
          }
          while (v12 < v25)
          {
            uint64_t v26 = *v12;
            *unint64_t v12 = *v25;
            uint64_t *v25 = v26;
            do
              ++v12;
            while (!(*a3)(&v69, v12));
            do
              uint64_t result = (*a3)(&v69, --v25);
            while ((result & 1) != 0);
          }
          uint64_t v27 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *unint64_t v11 = *v27;
          }
          a5 = 0;
          *uint64_t v27 = v69;
        }
        uint64_t v69 = *v12;
        uint64_t v17 = v12;
        do
          uint64_t v18 = v17++;
        while (((*a3)(v17, &v69) & 1) != 0);
        std::locale v19 = v65;
        if (v18 == v12)
        {
          std::locale v19 = v65;
          do
          {
            if (v17 >= v19) {
              break;
            }
            --v19;
          }
          while (((*a3)(v19, &v69) & 1) == 0);
        }
        else
        {
          do
            --v19;
          while (!(*a3)(v19, &v69));
        }
        if (v17 < v19)
        {
          uint64_t v20 = v17;
          uint64_t v21 = v19;
          do
          {
            uint64_t v22 = *v20;
            *uint64_t v20 = *v21;
            *uint64_t v21 = v22;
            do
              uint64_t v18 = v20++;
            while (((*a3)(v20, &v69) & 1) != 0);
            do
              --v21;
            while (!(*a3)(v21, &v69));
          }
          while (v20 < v21);
        }
        if (v18 != v11) {
          *unint64_t v11 = *v18;
        }
        *uint64_t v18 = v69;
        if (v17 >= v19) {
          break;
        }
LABEL_31:
        uint64_t result = sub_25B404E54(v11, v18, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v18 + 1;
      }
      BOOL v23 = sub_25B4058D0(v11, v18, a3);
      unint64_t v12 = v18 + 1;
      uint64_t result = sub_25B4058D0(v18 + 1, v65, a3);
      if (result) {
        break;
      }
      if (!v23) {
        goto LABEL_31;
      }
    }
    a2 = v18;
    if (!v23) {
      continue;
    }
    return result;
  }
}

uint64_t sub_25B40565C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v10 = *a2;
      *a2 = *a3;
    }
    *a3 = v10;
  }
  else if (result)
  {
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      uint64_t v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

uint64_t sub_25B405740(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  sub_25B40565C(a1, a2, a3, a5);
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = (*a5)(a3, a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = (*a5)(a2, a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_25B4057F4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  sub_25B405740(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(a5, a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = (*a6)(a4, a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = (*a6)(a3, a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = (*a6)(a2, a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

BOOL sub_25B4058D0(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        uint64_t v9 = *a1;
        *a1 = *v8;
        uint64_t *v8 = v9;
      }
      return 1;
    case 3:
      sub_25B40565C(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_25B405740(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_25B4057F4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      sub_25B40565C(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      uint64_t v17 = *v11;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = (uint64_t *)((char *)a1 + v14);
        *(uint64_t *)((char *)a1 + v14 + 24) = *(uint64_t *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if (((*a3)(&v17, v15 + 1) & 1) == 0)
        {
          uint64_t v16 = (uint64_t *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v17;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

BOOL sub_25B405AAC(float *a1, float *a2)
{
  return *a1 < *a2;
}

uint64_t sub_25B405AC0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      int v10 = *((_DWORD *)a1 + 2);
      uint64_t v11 = *a1;
      int v12 = *((_DWORD *)a3 + 2);
      *a1 = *a3;
      *((_DWORD *)a1 + 2) = v12;
    }
    else
    {
      int v19 = *((_DWORD *)a1 + 2);
      uint64_t v20 = *a1;
      int v21 = *((_DWORD *)a2 + 2);
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = v21;
      *a2 = v20;
      *((_DWORD *)a2 + 2) = v19;
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      int v10 = *((_DWORD *)a2 + 2);
      uint64_t v11 = *a2;
      int v22 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v22;
    }
    *a3 = v11;
    *((_DWORD *)a3 + 2) = v10;
  }
  else if (result)
  {
    int v13 = *((_DWORD *)a2 + 2);
    uint64_t v14 = *a2;
    int v15 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v15;
    *a3 = v14;
    *((_DWORD *)a3 + 2) = v13;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      int v16 = *((_DWORD *)a1 + 2);
      uint64_t v17 = *a1;
      int v18 = *((_DWORD *)a2 + 2);
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = v18;
      *a2 = v17;
      *((_DWORD *)a2 + 2) = v16;
    }
  }
  return result;
}

uint64_t sub_25B405BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  sub_25B405AC0((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3, a5);
  uint64_t result = (*a5)((uint64_t *)a4, (uint64_t *)a3);
  if (result)
  {
    int v11 = *(_DWORD *)(a3 + 8);
    uint64_t v12 = *(void *)a3;
    int v13 = *(_DWORD *)(a4 + 8);
    *(void *)a3 = *(void *)a4;
    *(_DWORD *)(a3 + 8) = v13;
    *(void *)a4 = v12;
    *(_DWORD *)(a4 + 8) = v11;
    uint64_t result = (*a5)((uint64_t *)a3, (uint64_t *)a2);
    if (result)
    {
      int v14 = *(_DWORD *)(a2 + 8);
      uint64_t v15 = *(void *)a2;
      int v16 = *(_DWORD *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *(_DWORD *)(a2 + 8) = v16;
      *(void *)a3 = v15;
      *(_DWORD *)(a3 + 8) = v14;
      uint64_t result = (*a5)((uint64_t *)a2, (uint64_t *)a1);
      if (result)
      {
        int v17 = *(_DWORD *)(a1 + 8);
        uint64_t v18 = *(void *)a1;
        int v19 = *(_DWORD *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = v19;
        *(void *)a2 = v18;
        *(_DWORD *)(a2 + 8) = v17;
      }
    }
  }
  return result;
}

uint64_t sub_25B405CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  sub_25B405BFC(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)((uint64_t *)a5, (uint64_t *)a4);
  if (result)
  {
    int v13 = *(_DWORD *)(a4 + 8);
    uint64_t v14 = *(void *)a4;
    int v15 = *(_DWORD *)(a5 + 8);
    *(void *)a4 = *(void *)a5;
    *(_DWORD *)(a4 + 8) = v15;
    *(void *)a5 = v14;
    *(_DWORD *)(a5 + 8) = v13;
    uint64_t result = (*a6)((uint64_t *)a4, (uint64_t *)a3);
    if (result)
    {
      int v16 = *(_DWORD *)(a3 + 8);
      uint64_t v17 = *(void *)a3;
      int v18 = *(_DWORD *)(a4 + 8);
      *(void *)a3 = *(void *)a4;
      *(_DWORD *)(a3 + 8) = v18;
      *(void *)a4 = v17;
      *(_DWORD *)(a4 + 8) = v16;
      uint64_t result = (*a6)((uint64_t *)a3, (uint64_t *)a2);
      if (result)
      {
        int v19 = *(_DWORD *)(a2 + 8);
        uint64_t v20 = *(void *)a2;
        int v21 = *(_DWORD *)(a3 + 8);
        *(void *)a2 = *(void *)a3;
        *(_DWORD *)(a2 + 8) = v21;
        *(void *)a3 = v20;
        *(_DWORD *)(a3 + 8) = v19;
        uint64_t result = (*a6)((uint64_t *)a2, (uint64_t *)a1);
        if (result)
        {
          int v22 = *(_DWORD *)(a1 + 8);
          uint64_t v23 = *(void *)a1;
          int v24 = *(_DWORD *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(_DWORD *)(a1 + 8) = v24;
          *(void *)a2 = v23;
          *(_DWORD *)(a2 + 8) = v22;
        }
      }
    }
  }
  return result;
}

BOOL sub_25B405E0C(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v8 = (uint64_t *)(a2 - 12);
      if ((*a3)((uint64_t *)(a2 - 12), (uint64_t *)a1))
      {
        int v9 = *(_DWORD *)(a1 + 8);
        uint64_t v10 = *(void *)a1;
        int v11 = *(_DWORD *)(a2 - 4);
        *(void *)a1 = *v8;
        *(_DWORD *)(a1 + 8) = v11;
        uint64_t *v8 = v10;
        *(_DWORD *)(a2 - 4) = v9;
      }
      return 1;
    case 3uLL:
      sub_25B405AC0((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12), a3);
      return 1;
    case 4uLL:
      sub_25B405BFC(a1, a1 + 12, a1 + 24, a2 - 12, a3);
      return 1;
    case 5uLL:
      sub_25B405CE8(a1, a1 + 12, a1 + 24, a1 + 36, a2 - 12, a3);
      return 1;
    default:
      uint64_t v12 = (uint64_t *)(a1 + 24);
      sub_25B405AC0((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), a3);
      uint64_t v13 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((uint64_t *)v13, v12))
    {
      uint64_t v19 = *(void *)v13;
      int v20 = *(_DWORD *)(v13 + 8);
      uint64_t v16 = v14;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(void *)(v17 + 36) = *(void *)(a1 + v16 + 24);
        *(_DWORD *)(v17 + 44) = *(_DWORD *)(a1 + v16 + 32);
        if (v16 == -24) {
          break;
        }
        v16 -= 12;
        if (((*a3)(&v19, (uint64_t *)(v17 + 12)) & 1) == 0)
        {
          uint64_t v18 = a1 + v16 + 36;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v19;
      *(_DWORD *)(v18 + 8) = v20;
      if (++v15 == 8) {
        return v13 + 12 == a2;
      }
    }
    uint64_t v12 = (uint64_t *)v13;
    v14 += 12;
    v13 += 12;
    if (v13 == a2) {
      return 1;
    }
  }
}

BOOL sub_25B40601C(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 4) > *(float *)(a2 + 4);
}

void *sub_25B406030(void *result, void *a2, unsigned int a3, int a4, int a5)
{
  unsigned int v7 = a3;
  int v9 = result;
  unint64_t v10 = *result;
  if ((a3 & 0x80000000) != 0 && (unsigned int v7 = v10 + a3, (int)(v10 + a3) < 0) || v10 < v7)
  {
    int v11 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v12 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v13 = sub_25B406B20(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v13, (uint64_t)" ", 1);
    uint64_t v14 = (void *)std::ostream::operator<<();
    int v15 = sub_25B406B20(v14, (uint64_t)" ", 1);
    uint64_t v16 = sub_25B406B20(v15, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    uint64_t v17 = std::locale::use_facet(&v59, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v59);
    std::ostream::put();
    std::ostream::flush();
    sub_25B406E3C("err", "view shape should large equal 0 and less ");
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    uint64_t v18 = std::locale::use_facet(&v59, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v59);
    std::ostream::put();
    BOOL result = (void *)std::ostream::flush();
  }
  if (a4)
  {
    if (a4 < 0) {
      a4 += *v9;
    }
  }
  else
  {
    uint64_t v19 = (void *)MEMORY[0x263F8C0F8];
    int v20 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    int v21 = sub_25B406B20(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v21, (uint64_t)" ", 1);
    int v22 = (void *)std::ostream::operator<<();
    uint64_t v23 = sub_25B406B20(v22, (uint64_t)" ", 1);
    int v24 = sub_25B406B20(v23, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
    int v25 = std::locale::use_facet(&v59, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(&v59);
    std::ostream::put();
    std::ostream::flush();
    sub_25B406ED4("err", "end should not be zero");
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
    uint64_t v26 = std::locale::use_facet(&v59, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
    std::locale::~locale(&v59);
    std::ostream::put();
    BOOL result = (void *)std::ostream::flush();
    a4 = 0;
  }
  if (a5 <= 0)
  {
    uint64_t v27 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v28 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    BOOL v29 = sub_25B406B20(v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v29, (uint64_t)" ", 1);
    uint64_t v30 = (void *)std::ostream::operator<<();
    BOOL v31 = sub_25B406B20(v30, (uint64_t)" ", 1);
    uint64_t v32 = sub_25B406B20(v31, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
    uint64_t v33 = std::locale::use_facet(&v59, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
    std::locale::~locale(&v59);
    std::ostream::put();
    std::ostream::flush();
    sub_25B406FE0("err", "at least step > 0");
    std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
    uint64_t v34 = std::locale::use_facet(&v59, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
    std::locale::~locale(&v59);
    std::ostream::put();
    BOOL result = (void *)std::ostream::flush();
  }
  if (a4 <= (int)v7)
  {
    uint64_t v35 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v36 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    int64_t v37 = sub_25B406B20(v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v37, (uint64_t)" ", 1);
    int64_t v38 = (void *)std::ostream::operator<<();
    uint64_t v39 = sub_25B406B20(v38, (uint64_t)" ", 1);
    uint64_t v40 = sub_25B406B20(v39, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(*v40 - 24)));
    uint64_t v41 = std::locale::use_facet(&v59, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
    std::locale::~locale(&v59);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407078("err", "end >start");
    std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24)));
    unint64_t v42 = std::locale::use_facet(&v59, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
    std::locale::~locale(&v59);
    std::ostream::put();
    BOOL result = (void *)std::ostream::flush();
  }
  if (*(void *)v9 < (unint64_t)a4)
  {
    uint64_t v43 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v44 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v45 = sub_25B406B20(v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v45, (uint64_t)" ", 1);
    unint64_t v46 = (void *)std::ostream::operator<<();
    uint64_t v47 = sub_25B406B20(v46, (uint64_t)" ", 1);
    uint64_t v48 = sub_25B406B20(v47, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(void *)(*v48 - 24)));
    uint64_t v49 = std::locale::use_facet(&v59, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
    std::locale::~locale(&v59);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407184("err", "out ouf range");
    std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
    uint64_t v50 = std::locale::use_facet(&v59, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
    std::locale::~locale(&v59);
    std::ostream::put();
    BOOL result = (void *)std::ostream::flush();
  }
  if ((int)(a4 - v7) / a5 <= 0)
  {
    uint64_t v51 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v52 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    int64_t v53 = sub_25B406B20(v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v53, (uint64_t)" ", 1);
    uint64_t v54 = (void *)std::ostream::operator<<();
    unint64_t v55 = sub_25B406B20(v54, (uint64_t)" ", 1);
    unint64_t v56 = sub_25B406B20(v55, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(void *)(*v56 - 24)));
    unint64_t v57 = std::locale::use_facet(&v59, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
    std::locale::~locale(&v59);
    std::ostream::put();
    std::ostream::flush();
    sub_25B406FE0("err", "length > 0");
    std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(void *)(*v51 - 24)));
    BOOL v58 = std::locale::use_facet(&v59, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
    std::locale::~locale(&v59);
    std::ostream::put();
    BOOL result = (void *)std::ostream::flush();
  }
  *a2 = (int)v7;
  a2[1] = a4;
  a2[2] = a5;
  return result;
}

void sub_25B4069C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_25B406A00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_2708F1A28;
  *(void *)(a1 + 120) = 0;
  long long v4 = (void **)(a1 + 120);
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 257;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v5 = *a3;
  unint64_t v6 = a3[2];
  unint64_t v7 = vcvtps_u32_f32((float)(unint64_t)(a3[1] - *a3) / (float)v6);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 56) *= v6;
  uint64_t v8 = *(void *)(a1 + 112) + *(void *)(a2 + 56) * v5;
  *(void *)(a1 + 104) = v7;
  *(void *)(a1 + 112) = v8;
  int v9 = *(void **)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    int v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11)
    {
      sub_25B404120(v11);
      int v9 = *v4;
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *v9 + 4 * *(void *)(a1 + 112);
  *(unsigned char *)(a1 + 137) = 0;
  BOOL v13 = *(void *)(a1 + 8) == 1 || *(void *)(a1 + 56) == 1;
  *(unsigned char *)(a1 + 136) = v13;
}

void *sub_25B406B20(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x261163CE0](v23, a1);
  if (v23[0])
  {
    unint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&__b, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_29;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    size_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        sub_25B40044C();
      }
      if (v16 >= 0x17)
      {
        uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v18 = v16 | 7;
        }
        uint64_t v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        size_t v25 = v16;
        int64_t v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((unsigned char *)p_b + v16) = 0;
      int v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(void *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0) {
        operator delete(__b.__locale_);
      }
      if (v21 != v16) {
        goto LABEL_29;
      }
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((void *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x261163CF0](v23);
  return a1;
}

void sub_25B406DBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x261163CF0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x25B406D90);
}

void sub_25B406E28(_Unwind_Exception *a1)
{
}

uint64_t sub_25B406E3C(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  uint64_t v5 = (void *)MEMORY[0x263F8C0F8];
  unint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  int v8 = sub_25B406B20(v5, (uint64_t)a2, v7);
  sub_25B406B20(v8, (uint64_t)" ", 1);

  return sub_25B407354();
}

uint64_t sub_25B406ED4(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  uint64_t v5 = (void *)MEMORY[0x263F8C0F8];
  unint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  int v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B406FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B406FE0(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  uint64_t v5 = (void *)MEMORY[0x263F8C0F8];
  unint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  int v8 = sub_25B406B20(v5, (uint64_t)a2, v7);
  sub_25B406B20(v8, (uint64_t)" ", 1);

  return sub_25B407290();
}

uint64_t sub_25B407078(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  uint64_t v5 = (void *)MEMORY[0x263F8C0F8];
  unint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  int v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B407170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B407184(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  uint64_t v5 = (void *)MEMORY[0x263F8C0F8];
  unint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  int v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B40727C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B407290()
{
  v0 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v0 + *(void *)(*v0 - 24)));
  int v1 = std::locale::use_facet(&v3, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v1->__vftable[2].~facet_0)(v1, 10);
  std::locale::~locale(&v3);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B407340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B407354()
{
  v0 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v0 + *(void *)(*v0 - 24)));
  int v1 = std::locale::use_facet(&v3, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v1->__vftable[2].~facet_0)(v1, 10);
  std::locale::~locale(&v3);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B407404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_25B407418(void *a1)
{
  *a1 = &unk_2708F1A28;
  int v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B407484(void *a1)
{
  *a1 = &unk_2708F1A28;
  unint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

uint64_t sub_25B4074D0(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  uint64_t v5 = (void *)MEMORY[0x263F8C0F8];
  unint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  int v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B4075C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_25B4075DC(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_2708F1A28;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  uint64_t v5 = (void **)(a1 + 120);
  *(_WORD *)(a1 + 136) = 257;
  uint64_t v6 = a2 + 8;
  *(void *)(a1 + 128) = 0;
  sub_25B407708((uint64_t)&v13, a2 + 8, a3);
  uint64_t v7 = v13;
  *(void *)(a1 + 8) = *(void *)(v6 + 8 * v13);
  *(void *)(a1 + 56) = *(void *)(a2 + 8 * v7 + 56);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  int v8 = *(void **)(a2 + 120);
  uint64_t v9 = *(void *)(a2 + 128);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  std::locale v10 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = v8;
  *(void *)(a1 + 128) = v9;
  if (v10)
  {
    sub_25B404120(v10);
    int v8 = *v5;
  }
  *(void *)(a1 + 144) = *v8 + 4 * *(void *)(a1 + 112);
  *(unsigned char *)(a1 + 137) = 0;
  BOOL v12 = *(void *)(a1 + 8) == 1 || *(void *)(a1 + 56) == 1;
  *(unsigned char *)(a1 + 136) = v12;
}

void sub_25B4076EC(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  size_t v4 = (std::__shared_weak_count *)v1[16];
  if (v4) {
    sub_25B404120(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B407708(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5 = a3 + 2;
  if (a3 >= 0) {
    unsigned int v5 = a3;
  }
  uint64_t v6 = (int)v5;
  if (v5 >= 2)
  {
    uint64_t v7 = (void *)MEMORY[0x263F8C0F8];
    int v8 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/squeeze_helper.hpp", 117);
    sub_25B406B20(v9, (uint64_t)" ", 1);
    std::locale v10 = (void *)std::ostream::operator<<();
    uint64_t v11 = sub_25B406B20(v10, (uint64_t)" ", 1);
    BOOL v12 = sub_25B406B20(v11, (uint64_t)"init", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
    uint64_t v13 = std::locale::use_facet(&v51, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v51);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407184("err", "which_dim<dim");
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    BOOL v14 = std::locale::use_facet(&v51, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v51);
    std::ostream::put();
    std::ostream::flush();
    if ((v6 & 0x80000000) != 0)
    {
      uint64_t v15 = (void *)MEMORY[0x263F8C0F8];
      size_t v16 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
      uint64_t v17 = sub_25B406B20(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/squeeze_helper.hpp", 117);
      sub_25B406B20(v17, (uint64_t)" ", 1);
      uint64_t v18 = (void *)std::ostream::operator<<();
      uint64_t v19 = sub_25B406B20(v18, (uint64_t)" ", 1);
      int v20 = sub_25B406B20(v19, (uint64_t)"init", 4);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
      uint64_t v21 = std::locale::use_facet(&v51, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v51);
      std::ostream::put();
      std::ostream::flush();
      sub_25B407E3C("err", "which_dim>=0");
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
      int v22 = std::locale::use_facet(&v51, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v51);
      std::ostream::put();
      std::ostream::flush();
    }
  }
  if (*(void *)(a2 + 8 * v6) != 1)
  {
    uint64_t v23 = (void *)MEMORY[0x263F8C0F8];
    int v24 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    size_t v25 = sub_25B406B20(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/squeeze_helper.hpp", 117);
    sub_25B406B20(v25, (uint64_t)" ", 1);
    int64_t v26 = (void *)std::ostream::operator<<();
    uint64_t v27 = sub_25B406B20(v26, (uint64_t)" ", 1);
    uint64_t v28 = sub_25B406B20(v27, (uint64_t)"init", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
    BOOL v29 = std::locale::use_facet(&v51, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
    std::locale::~locale(&v51);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407F48("err", "shape[which_dim]==1");
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
    uint64_t v30 = std::locale::use_facet(&v51, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v51);
    std::ostream::put();
    std::ostream::flush();
  }
  BOOL v31 = sub_25B3FCAD4(1uLL);
  uint64_t v32 = v31;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  char v35 = 0;
  void *v31 = v6;
  uint64_t v36 = v31 + 1;
  do
  {
    uint64_t v37 = v34 + 1;
    if (v34 == -1)
    {
      int64_t v38 = v36;
      uint64_t v39 = v33;
      do
      {
        uint64_t v40 = *v38++;
        v35 |= *(v31 - 1) == v40;
        --v39;
      }
      while (v39);
    }
    --v33;
    ++v36;
    ++v34;
  }
  while (v37 != 1);
  if (v35)
  {
    uint64_t v41 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    unint64_t v42 = sub_25B406B20(v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/squeeze_helper.hpp", 117);
    sub_25B406B20(v42, (uint64_t)" ", 1);
    uint64_t v43 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v44 = (void *)std::ostream::operator<<();
    sub_25B406B20(v44, (uint64_t)" ", 1);
    sub_25B406B20(v44, (uint64_t)"init", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24)));
    uint64_t v45 = std::locale::use_facet(&v51, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
    std::locale::~locale(&v51);
    std::ostream::put();
    std::ostream::flush();
    sub_25B408054("err", "duplicate dim idx");
    std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
    unint64_t v46 = std::locale::use_facet(&v51, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
    std::locale::~locale(&v51);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  char v49 = 1;
  do
  {
    char v50 = v49;
    if (v47 != *v32) {
      *(void *)(a1 + 8 * v48++) = v47;
    }
    char v49 = 0;
    uint64_t v47 = 1;
  }
  while ((v50 & 1) != 0);
  operator delete(v32);
}

void sub_25B407DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B407E3C(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  unsigned int v5 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  int v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B407F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B407F48(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  unsigned int v5 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  int v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B408040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B408054(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  unsigned int v5 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  int v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B40814C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B408160(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  unsigned int v5 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  int v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B408258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

_OWORD *sub_25B40826C(_OWORD *__b, char **a2)
{
  __b[1] = 0u;
  __b[2] = 0u;
  void *__b = 0u;
  size_t v4 = *a2;
  unsigned int v5 = a2[1];
  if (*a2 == v5)
  {
    uint64_t v6 = (void *)MEMORY[0x263F8C0F8];
    size_t v7 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    int v8 = sub_25B406B20(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/../tensor/shape.hpp", 118);
    sub_25B406B20(v8, (uint64_t)" ", 1);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::locale v10 = sub_25B406B20(v9, (uint64_t)" ", 1);
    uint64_t v11 = sub_25B406B20(v10, (uint64_t)"Shape", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    BOOL v12 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4088A4("err", "size of input shape vector is 0");
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
    uint64_t v13 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    size_t v4 = *a2;
    unsigned int v5 = a2[1];
  }
  uint64_t v14 = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x18)
  {
    uint64_t v15 = (void *)MEMORY[0x263F8C0F8];
    size_t v16 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v17 = sub_25B406B20(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/../tensor/shape.hpp", 118);
    sub_25B406B20(v17, (uint64_t)" ", 1);
    uint64_t v18 = (void *)std::ostream::operator<<();
    uint64_t v19 = sub_25B406B20(v18, (uint64_t)" ", 1);
    int v20 = sub_25B406B20(v19, (uint64_t)"Shape", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
    uint64_t v21 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4089B0("err", "size of input shape vector > current dim");
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    int v22 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    size_t v4 = *a2;
    unsigned int v5 = a2[1];
    uint64_t v14 = v5 - *a2;
  }
  unint64_t v23 = v14 >> 3;
  if (v14 == 16)
  {
    uint64_t v24 = 0;
  }
  else
  {
    if (v23 != 1 && v23 != 2) {
      uint64_t v24 = 2 - v23;
    }
    else {
      uint64_t v24 = 1;
    }
    memset_pattern16(__b, &unk_25B5F18C0, 8 * v24);
  }
  if (v5 != v4)
  {
    if (v23 <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = v23;
    }
    int64_t v26 = (void *)__b + v24;
    do
    {
      uint64_t v27 = *(void *)v4;
      v4 += 8;
      *v26++ = v27;
      --v25;
    }
    while (v25);
  }
  return __b;
}

void sub_25B408620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B408640(uint64_t result, _OWORD *a2)
{
  *(void *)BOOL result = &unk_2708F1C28;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 1;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(result + 8) = *a2;
  *(_OWORD *)(result + 40) = v2;
  *(_OWORD *)(result + 24) = v3;
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  *(void *)(result + 56) = v4;
  *(void *)(result + 64) = 1;
  *(void *)(result + 104) = v5 * v4;
  *(void *)(result + 112) = 0;
  if (v5 * v4) {
    sub_25B408738((uint64_t)&v6, v5 * v4);
  }
  *(unsigned char *)(result + 137) = 1;
  return result;
}

void sub_25B408720(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B408738(uint64_t a1, uint64_t a2)
{
  long long v3 = operator new(0x30uLL);
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = &unk_2708F1AE0;
  v3[4] = a2;
  *((unsigned char *)v3 + 40) = 1;
  operator new[]();
}

void sub_25B4087CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4087E8(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    uint64_t v1 = result;
    BOOL result = *(void *)(result + 24);
    if (result)
    {
      BOOL result = MEMORY[0x261163EC0](result, 0x1000C8052888210);
      *(void *)(v1 + 24) = 0;
    }
  }
  return result;
}

void sub_25B408830(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2708F1AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x261163EE0);
}

void sub_25B408884(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2708F1AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_25B4088A4(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  uint64_t v5 = (void *)MEMORY[0x263F8C0F8];
  long long v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  int v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B40899C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B4089B0(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  uint64_t v5 = (void *)MEMORY[0x263F8C0F8];
  long long v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  int v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B408AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_25B408ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  *(void *)a1 = &unk_2708F1C28;
  *(void *)(a1 + 120) = 0;
  uint64_t v5 = (void **)(a1 + 120);
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 257;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  char v6 = 1;
  uint64_t v7 = *(void *)(a1 + 112);
  do
  {
    int v8 = (uint64_t *)(a3 + 24 * v4);
    uint64_t v9 = *v8;
    float v10 = (float)(unint64_t)(v8[1] - *v8);
    unint64_t v11 = v8[2];
    *(void *)(a1 + 8 + 8 * v4) = vcvtps_u32_f32(v10 / (float)v11);
    *(void *)(a1 + 56 + 8 * v4) *= v11;
    LOBYTE(v11) = v6;
    v7 += *(void *)(a2 + 56 + 8 * v4) * v9;
    uint64_t v4 = 1;
    char v6 = 0;
  }
  while ((v11 & 1) != 0);
  *(void *)(a1 + 104) = *(void *)(a1 + 16) * *(void *)(a1 + 8);
  *(void *)(a1 + 112) = v7;
  uint64_t v13 = *(void **)(a2 + 120);
  uint64_t v12 = *(void *)(a2 + 128);
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v13;
    *(void *)(a1 + 128) = v12;
    if (v14)
    {
      sub_25B404120(v14);
      uint64_t v13 = *v5;
    }
  }
  else
  {
    *(void *)(a1 + 120) = v13;
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v15 = 0;
  *(void *)(a1 + 144) = *v13 + 4 * *(void *)(a1 + 112);
  *(unsigned char *)(a1 + 137) = 0;
  uint64_t v16 = 1;
  while (1)
  {
    uint64_t v17 = *(void *)(a1 + v15 + 16);
    if (v17 != 1) {
      break;
    }
LABEL_11:
    v15 -= 8;
    if (v15 == -16)
    {
      char v18 = 1;
      goto LABEL_14;
    }
  }
  if (*(void *)(a1 + v15 + 64) == v16)
  {
    v16 *= v17;
    goto LABEL_11;
  }
  char v18 = 0;
LABEL_14:
  *(unsigned char *)(a1 + 136) = v18;
}

uint64_t sub_25B408C3C(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  unsigned int v8 = a4;
  unint64_t v11 = (unint64_t *)(result + 8 * a3);
  unint64_t v12 = *v11;
  if ((a4 & 0x80000000) != 0 && (unsigned int v8 = v12 + a4, (int)(v12 + a4) < 0) || v12 < v8)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v14 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v15 = sub_25B406B20(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v15, (uint64_t)" ", 1);
    uint64_t v16 = (void *)std::ostream::operator<<();
    uint64_t v17 = sub_25B406B20(v16, (uint64_t)" ", 1);
    char v18 = sub_25B406B20(v17, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    uint64_t v19 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    std::ostream::flush();
    sub_25B406E3C("err", "view shape should large equal 0 and less ");
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    int v20 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    BOOL result = std::ostream::flush();
  }
  if (a5)
  {
    if (a5 < 0) {
      a5 += *(_DWORD *)v11;
    }
  }
  else
  {
    uint64_t v21 = (void *)MEMORY[0x263F8C0F8];
    int v22 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    unint64_t v23 = sub_25B406B20(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v23, (uint64_t)" ", 1);
    uint64_t v24 = (void *)std::ostream::operator<<();
    uint64_t v25 = sub_25B406B20(v24, (uint64_t)" ", 1);
    int64_t v26 = sub_25B406B20(v25, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
    uint64_t v27 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    std::ostream::flush();
    sub_25B406ED4("err", "end should not be zero");
    std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
    uint64_t v28 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    BOOL result = std::ostream::flush();
    a5 = 0;
  }
  if (a6 <= 0)
  {
    std::locale v29 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v30 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    BOOL v31 = sub_25B406B20(v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v31, (uint64_t)" ", 1);
    uint64_t v32 = (void *)std::ostream::operator<<();
    uint64_t v33 = sub_25B406B20(v32, (uint64_t)" ", 1);
    uint64_t v34 = sub_25B406B20(v33, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
    char v35 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    std::ostream::flush();
    sub_25B406FE0("err", "at least step > 0");
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    uint64_t v36 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    BOOL result = std::ostream::flush();
  }
  if (a5 <= (int)v8)
  {
    uint64_t v37 = (void *)MEMORY[0x263F8C0F8];
    int64_t v38 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v39 = sub_25B406B20(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v39, (uint64_t)" ", 1);
    uint64_t v40 = (void *)std::ostream::operator<<();
    uint64_t v41 = sub_25B406B20(v40, (uint64_t)" ", 1);
    unint64_t v42 = sub_25B406B20(v41, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(*v42 - 24)));
    uint64_t v43 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407078("err", "end >start");
    std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24)));
    uint64_t v44 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    BOOL result = std::ostream::flush();
  }
  if (*v11 < a5)
  {
    uint64_t v45 = (void *)MEMORY[0x263F8C0F8];
    unint64_t v46 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v47 = sub_25B406B20(v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v47, (uint64_t)" ", 1);
    uint64_t v48 = (void *)std::ostream::operator<<();
    char v49 = sub_25B406B20(v48, (uint64_t)" ", 1);
    char v50 = sub_25B406B20(v49, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(void *)(*v50 - 24)));
    std::locale v51 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407184("err", "out ouf range");
    std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
    uint64_t v52 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    BOOL result = std::ostream::flush();
  }
  if ((int)(a5 - v8) / a6 <= 0)
  {
    int64_t v53 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v54 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    unint64_t v55 = sub_25B406B20(v54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v55, (uint64_t)" ", 1);
    unint64_t v56 = (void *)std::ostream::operator<<();
    unint64_t v57 = sub_25B406B20(v56, (uint64_t)" ", 1);
    BOOL v58 = sub_25B406B20(v57, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
    std::locale v59 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    std::ostream::flush();
    sub_25B406FE0("err", "length > 0");
    std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
    uint64_t v60 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    BOOL result = std::ostream::flush();
  }
  uint64_t v61 = (void *)(a2 + 24 * a3);
  void *v61 = (int)v8;
  v61[1] = a5;
  v61[2] = a6;
  return result;
}

void sub_25B4095DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B40961C(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  uint64_t v5 = (void *)MEMORY[0x263F8C0F8];
  char v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  unsigned int v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B409714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B409728(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v152 = *MEMORY[0x263EF8340];
  uint64_t v5 = (_OWORD *)(result + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (v7 == v8)
  {
    if (*(unsigned char *)(a2 + 232))
    {
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      uint64_t v9 = *(void *)(result + 104);
      std::locale v10 = *(_DWORD **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v9)
        {
          unint64_t v11 = *(int **)(a2 + 240);
          do
          {
            int v12 = *v11++;
            *v10++ = v12 > *(_DWORD *)(a2 + 296);
            --v9;
          }
          while (v9);
        }
      }
      else if (v9)
      {
        uint64_t v76 = 0;
        uint64_t v77 = *(void *)(result + 56);
        uint64_t v78 = *(void *)(result + 64);
        uint64_t v79 = *(void *)(a2 + 240);
        do
        {
          uint64_t v80 = 0;
          v10[v77 * (void)v137 + v78 * *((void *)&v137 + 1)] = *(_DWORD *)(v79 + 4 * v76) > *(_DWORD *)(a2 + 296);
          do
          {
            uint64_t v81 = *(void *)((char *)&v137 + v80 + 8) + 1;
            *(void *)((char *)&v137 + v80 + 8) = v81;
            BOOL result = *(void *)(v3 + 16 + v80);
            if (v81 != result) {
              break;
            }
            *(void *)((char *)&v137 + v80 + 8) = 0;
            v80 -= 8;
          }
          while (v80 != -16);
          ++v76;
        }
        while (v76 != v9);
      }
    }
    else
    {
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      uint64_t v39 = *(void *)(result + 104);
      uint64_t v40 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v39)
        {
          uint64_t v41 = 0;
          uint64_t v42 = *(void *)(a2 + 152);
          uint64_t v43 = *(void *)(a2 + 160);
          uint64_t v44 = *(void *)(a2 + 240);
          do
          {
            uint64_t v45 = 0;
            *(_DWORD *)(v40 + 4 * v41) = *(_DWORD *)(v44 + 4 * (v42 * v137 + v43 * *((void *)&v137 + 1))) > *(_DWORD *)(a2 + 296);
            do
            {
              uint64_t v46 = *(void *)((char *)&v137 + v45 + 8) + 1;
              *(void *)((char *)&v137 + v45 + 8) = v46;
              BOOL result = *(void *)(v3 + 16 + v45);
              if (v46 != result) {
                break;
              }
              *(void *)((char *)&v137 + v45 + 8) = 0;
              v45 -= 8;
            }
            while (v45 != -16);
            ++v41;
          }
          while (v41 != v39);
        }
      }
      else if (v39)
      {
        uint64_t v100 = 0;
        uint64_t v101 = *(void *)(result + 56);
        uint64_t v102 = *(void *)(result + 64);
        uint64_t v103 = *(void *)(a2 + 152);
        uint64_t v104 = *(void *)(a2 + 160);
        uint64_t v105 = *(void *)(a2 + 240);
        do
        {
          BOOL result = 0;
          *(_DWORD *)(v40 + 4 * (v101 * v137 + v102 * *((void *)&v137 + 1))) = *(_DWORD *)(v105
                                                                                           + 4
                                                                                           * (v103 * v137
                                                                                            + v104
                                                                                            * *((void *)&v137 + 1))) > *(_DWORD *)(a2 + 296);
          do
          {
            uint64_t v106 = *(void *)((char *)&v137 + result + 8) + 1;
            *(void *)((char *)&v137 + result + 8) = v106;
            if (v106 != *(void *)(v3 + 16 + result)) {
              break;
            }
            *(void *)((char *)&v137 + result + 8) = 0;
            result -= 8;
          }
          while (result != -16);
          ++v100;
        }
        while (v100 != v39);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 232))
    {
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v142 = 0uLL;
      long long v143 = 0uLL;
      long long v140 = 0uLL;
      long long v141 = 0uLL;
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      long long v129 = 0uLL;
      long long v130 = 0uLL;
      long long v128 = 0uLL;
      sub_25B40AB84((uint64_t)&v137, v5, (_OWORD *)a2, (uint64_t)&v128);
      uint64_t v13 = 0;
      char v14 = 1;
      do
      {
        uint64_t v15 = *((void *)&v128 + v13);
        uint64_t v16 = *((void *)v5 + v13);
        if ((v14 & 1) == 0) {
          break;
        }
        char v14 = 0;
        uint64_t v13 = 1;
      }
      while (v15 == v16);
      if (v15 != v16)
      {
        uint64_t v17 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        char v18 = sub_25B406B20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v18, (uint64_t)" ", 1);
        uint64_t v19 = (void *)MEMORY[0x263F8C0F8];
        int v20 = (void *)std::ostream::operator<<();
        sub_25B406B20(v20, (uint64_t)" ", 1);
        sub_25B406B20(v20, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
        uint64_t v21 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
        int v22 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v135 = 0u;
      long long v136 = 0u;
      long long v133 = 0u;
      *(_OWORD *)&v134[0].__locale_ = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      uint64_t v23 = *(void *)(v3 + 104);
      uint64_t v24 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v23)
        {
          uint64_t v25 = 0;
          uint64_t v27 = (uint64_t *)*((void *)&v138 + 1);
          int64_t v26 = (uint64_t *)v139;
          unint64_t v28 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
          if (v28 <= 1) {
            unint64_t v28 = 1;
          }
          uint64_t v29 = *(void *)(a2 + 240);
          do
          {
            long long v131 = *(_OWORD *)&v134[0].__locale_;
            if (v26 != v27)
            {
              uint64_t v30 = v27;
              unint64_t v31 = v28;
              do
              {
                uint64_t v32 = *v30++;
                *((void *)&v131 + v32) = 0;
                --v31;
              }
              while (v31);
            }
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            char v35 = 1;
            do
            {
              char v36 = v35;
              v34 += *((void *)&v149 + v33) * *((void *)&v131 + v33);
              uint64_t v33 = 1;
              char v35 = 0;
            }
            while ((v36 & 1) != 0);
            *(_DWORD *)(v24 + 4 * v25) = *(_DWORD *)(v29 + 4 * v34) > *(_DWORD *)(a2 + 296);
            for (uint64_t i = 1; i != -1; --i)
            {
              int64_t v38 = (std::locale::__imp *)((char *)v134[i].__locale_ + 1);
              v134[i].__locale_ = v38;
              if (v38 != *(std::locale::__imp **)((char *)&v128 + i * 8)) {
                break;
              }
              v134[i].__locale_ = 0;
            }
            ++v25;
          }
          while (v25 != v23);
        }
      }
      else if (v23)
      {
        uint64_t v82 = 0;
        unint64_t v84 = (uint64_t *)*((void *)&v138 + 1);
        uint64_t v83 = (uint64_t *)v139;
        unint64_t v85 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
        if (v85 <= 1) {
          unint64_t v85 = 1;
        }
        uint64_t v86 = *(void *)(v3 + 56);
        uint64_t v87 = *(void *)(v3 + 64);
        uint64_t v88 = *(void *)(a2 + 240);
        do
        {
          locale = v134[0].__locale_;
          uint64_t v90 = v134[1].__locale_;
          long long v131 = *(_OWORD *)&v134[0].__locale_;
          if (v83 != v84)
          {
            uint64_t v91 = v84;
            unint64_t v92 = v85;
            do
            {
              uint64_t v93 = *v91++;
              *((void *)&v131 + v93) = 0;
              --v92;
            }
            while (v92);
          }
          uint64_t v94 = 0;
          uint64_t v95 = 0;
          char v96 = 1;
          do
          {
            char v97 = v96;
            v95 += *((void *)&v149 + v94) * *((void *)&v131 + v94);
            uint64_t v94 = 1;
            char v96 = 0;
          }
          while ((v97 & 1) != 0);
          *(_DWORD *)(v24 + 4 * ((void)locale * v86 + (void)v90 * v87)) = *(_DWORD *)(v88 + 4 * v95) > *(_DWORD *)(a2 + 296);
          for (uint64_t j = 1; j != -1; --j)
          {
            uint64_t v99 = (std::locale::__imp *)((char *)v134[j].__locale_ + 1);
            v134[j].__locale_ = v99;
            if (v99 != *(std::locale::__imp **)((char *)&v128 + j * 8)) {
              break;
            }
            v134[j].__locale_ = 0;
          }
          ++v82;
        }
        while (v82 != v23);
      }
    }
    else
    {
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v142 = 0uLL;
      long long v143 = 0uLL;
      long long v140 = 0uLL;
      long long v141 = 0uLL;
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      long long v129 = 0uLL;
      long long v130 = 0uLL;
      long long v128 = 0uLL;
      sub_25B40AB84((uint64_t)&v137, v5, (_OWORD *)a2, (uint64_t)&v128);
      uint64_t v47 = 0;
      char v48 = 1;
      do
      {
        uint64_t v49 = *((void *)&v128 + v47);
        uint64_t v50 = *((void *)v5 + v47);
        if ((v48 & 1) == 0) {
          break;
        }
        char v48 = 0;
        uint64_t v47 = 1;
      }
      while (v49 == v50);
      if (v49 != v50)
      {
        std::locale v51 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v52 = sub_25B406B20(v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v52, (uint64_t)" ", 1);
        int64_t v53 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v54 = (void *)std::ostream::operator<<();
        sub_25B406B20(v54, (uint64_t)" ", 1);
        sub_25B406B20(v54, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
        unint64_t v55 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
        unint64_t v56 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v135 = 0u;
      long long v136 = 0u;
      long long v133 = 0u;
      *(_OWORD *)&v134[0].__locale_ = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      uint64_t v57 = *(void *)(v3 + 104);
      uint64_t v58 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v57)
        {
          uint64_t v59 = 0;
          uint64_t v61 = (uint64_t *)*((void *)&v138 + 1);
          uint64_t v60 = (uint64_t *)v139;
          unint64_t v62 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
          if (v62 <= 1) {
            unint64_t v62 = 1;
          }
          int v63 = *(unsigned __int8 *)(a2 + 232);
          uint64_t v64 = *(void *)(a2 + 152);
          uint64_t v65 = *(void *)(a2 + 160);
          uint64_t v66 = *(void *)(a2 + 240);
          do
          {
            long long v131 = *(_OWORD *)&v134[0].__locale_;
            if (v60 != v61)
            {
              int64_t v67 = v61;
              unint64_t v68 = v62;
              do
              {
                uint64_t v69 = *v67++;
                *((void *)&v131 + v69) = 0;
                --v68;
              }
              while (v68);
            }
            uint64_t v70 = 0;
            uint64_t v71 = 0;
            char v72 = 1;
            do
            {
              char v73 = v72;
              v71 += *((void *)&v149 + v70) * *((void *)&v131 + v70);
              uint64_t v70 = 1;
              char v72 = 0;
            }
            while ((v73 & 1) != 0);
            if (!v63) {
              uint64_t v71 = v131 * v64 + *((void *)&v131 + 1) * v65;
            }
            *(_DWORD *)(v58 + 4 * v59) = *(_DWORD *)(v66 + 4 * v71) > *(_DWORD *)(a2 + 296);
            for (uint64_t k = 1; k != -1; --k)
            {
              uint64_t v75 = (std::locale::__imp *)((char *)v134[k].__locale_ + 1);
              v134[k].__locale_ = v75;
              if (v75 != *(std::locale::__imp **)((char *)&v128 + k * 8)) {
                break;
              }
              v134[k].__locale_ = 0;
            }
            ++v59;
          }
          while (v59 != v57);
        }
      }
      else if (v57)
      {
        uint64_t v107 = 0;
        uint64_t v109 = (uint64_t *)*((void *)&v138 + 1);
        uint64_t v108 = (uint64_t *)v139;
        unint64_t v110 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
        if (v110 <= 1) {
          unint64_t v110 = 1;
        }
        uint64_t v111 = *(void *)(v3 + 56);
        uint64_t v112 = *(void *)(v3 + 64);
        int v113 = *(unsigned __int8 *)(a2 + 232);
        uint64_t v114 = *(void *)(a2 + 152);
        uint64_t v115 = *(void *)(a2 + 160);
        uint64_t v116 = *(void *)(a2 + 240);
        do
        {
          v117 = v134[0].__locale_;
          v118 = v134[1].__locale_;
          long long v131 = *(_OWORD *)&v134[0].__locale_;
          if (v108 != v109)
          {
            v119 = v109;
            unint64_t v120 = v110;
            do
            {
              uint64_t v121 = *v119++;
              *((void *)&v131 + v121) = 0;
              --v120;
            }
            while (v120);
          }
          uint64_t v122 = 0;
          uint64_t v123 = 0;
          char v124 = 1;
          do
          {
            char v125 = v124;
            v123 += *((void *)&v149 + v122) * *((void *)&v131 + v122);
            uint64_t v122 = 1;
            char v124 = 0;
          }
          while ((v125 & 1) != 0);
          if (!v113) {
            uint64_t v123 = v131 * v114 + *((void *)&v131 + 1) * v115;
          }
          *(_DWORD *)(v58 + 4 * ((void)v117 * v111 + (void)v118 * v112)) = *(_DWORD *)(v116 + 4 * v123) > *(_DWORD *)(a2 + 296);
          for (uint64_t m = 1; m != -1; --m)
          {
            unint64_t v127 = (std::locale::__imp *)((char *)v134[m].__locale_ + 1);
            v134[m].__locale_ = v127;
            if (v127 != *(std::locale::__imp **)((char *)&v128 + m * 8)) {
              break;
            }
            v134[m].__locale_ = 0;
          }
          ++v107;
        }
        while (v107 != v57);
      }
    }
    return sub_25B3F9500((uint64_t)&v137);
  }
  return result;
}

void sub_25B40A158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_25B40A18C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v153 = *MEMORY[0x263EF8340];
  uint64_t v5 = (_OWORD *)(result + 8);
  char v6 = (_OWORD *)(a2 + 8);
  char v7 = 1;
  do
  {
    uint64_t v8 = *((void *)v5 + v4);
    uint64_t v9 = *((void *)v6 + v4);
    if ((v7 & 1) == 0) {
      break;
    }
    char v7 = 0;
    uint64_t v4 = 1;
  }
  while (v8 == v9);
  if (v8 == v9)
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      uint64_t v10 = *(void *)(result + 104);
      unint64_t v11 = *(_DWORD **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v10)
        {
          int v12 = *(int **)(a2 + 144);
          do
          {
            int v13 = *v12++;
            *v11++ = v13;
            --v10;
          }
          while (v10);
        }
      }
      else if (v10)
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(result + 56);
        uint64_t v79 = *(void *)(result + 64);
        uint64_t v80 = *(void *)(a2 + 144);
        do
        {
          uint64_t v81 = 0;
          v11[v78 * (void)v138 + v79 * *((void *)&v138 + 1)] = *(_DWORD *)(v80 + 4 * v77);
          do
          {
            uint64_t v82 = *(void *)((char *)&v138 + v81 + 8) + 1;
            *(void *)((char *)&v138 + v81 + 8) = v82;
            BOOL result = *(void *)(v3 + 16 + v81);
            if (v82 != result) {
              break;
            }
            *(void *)((char *)&v138 + v81 + 8) = 0;
            v81 -= 8;
          }
          while (v81 != -16);
          ++v77;
        }
        while (v77 != v10);
      }
    }
    else
    {
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      uint64_t v40 = *(void *)(result + 104);
      uint64_t v41 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v40)
        {
          uint64_t v42 = 0;
          uint64_t v43 = *(void *)(a2 + 56);
          uint64_t v44 = *(void *)(a2 + 64);
          uint64_t v45 = *(void *)(a2 + 144);
          do
          {
            uint64_t v46 = 0;
            *(_DWORD *)(v41 + 4 * v42) = *(_DWORD *)(v45 + 4 * (v43 * v138 + v44 * *((void *)&v138 + 1)));
            do
            {
              uint64_t v47 = *(void *)((char *)&v138 + v46 + 8) + 1;
              *(void *)((char *)&v138 + v46 + 8) = v47;
              BOOL result = *(void *)(v3 + 16 + v46);
              if (v47 != result) {
                break;
              }
              *(void *)((char *)&v138 + v46 + 8) = 0;
              v46 -= 8;
            }
            while (v46 != -16);
            ++v42;
          }
          while (v42 != v40);
        }
      }
      else if (v40)
      {
        uint64_t v101 = 0;
        uint64_t v102 = *(void *)(result + 56);
        uint64_t v103 = *(void *)(result + 64);
        uint64_t v104 = *(void *)(a2 + 56);
        uint64_t v105 = *(void *)(a2 + 64);
        uint64_t v106 = *(void *)(a2 + 144);
        do
        {
          BOOL result = 0;
          *(_DWORD *)(v41 + 4 * (v102 * v138 + v103 * *((void *)&v138 + 1))) = *(_DWORD *)(v106
                                                                                           + 4
                                                                                           * (v104 * v138
                                                                                            + v105
                                                                                            * *((void *)&v138 + 1)));
          do
          {
            uint64_t v107 = *(void *)((char *)&v138 + result + 8) + 1;
            *(void *)((char *)&v138 + result + 8) = v107;
            if (v107 != *(void *)(v3 + 16 + result)) {
              break;
            }
            *(void *)((char *)&v138 + result + 8) = 0;
            result -= 8;
          }
          while (result != -16);
          ++v101;
        }
        while (v101 != v40);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v151 = 0uLL;
      long long v152 = 0uLL;
      long long v149 = 0uLL;
      long long v150 = 0uLL;
      long long v147 = 0uLL;
      long long v148 = 0uLL;
      long long v145 = 0uLL;
      long long v146 = 0uLL;
      long long v143 = 0uLL;
      long long v144 = 0uLL;
      long long v141 = 0uLL;
      long long v142 = 0uLL;
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      long long v130 = 0uLL;
      long long v131 = 0uLL;
      long long v129 = 0uLL;
      sub_25B40AB84((uint64_t)&v138, v5, v6, (uint64_t)&v129);
      uint64_t v14 = 0;
      char v15 = 1;
      do
      {
        uint64_t v16 = *((void *)&v129 + v14);
        uint64_t v17 = *((void *)v5 + v14);
        if ((v15 & 1) == 0) {
          break;
        }
        char v15 = 0;
        uint64_t v14 = 1;
      }
      while (v16 == v17);
      if (v16 != v17)
      {
        char v18 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v19 = sub_25B406B20(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v19, (uint64_t)" ", 1);
        int v20 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v21 = (void *)std::ostream::operator<<();
        sub_25B406B20(v21, (uint64_t)" ", 1);
        sub_25B406B20(v21, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
        int v22 = std::locale::use_facet(v135, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(v135);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
        uint64_t v23 = std::locale::use_facet(v135, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(v135);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v136 = 0u;
      long long v137 = 0u;
      long long v134 = 0u;
      *(_OWORD *)&v135[0].__locale_ = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      uint64_t v24 = *(void *)(v3 + 104);
      uint64_t v25 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v24)
        {
          uint64_t v26 = 0;
          unint64_t v28 = (uint64_t *)*((void *)&v139 + 1);
          uint64_t v27 = (uint64_t *)v140;
          unint64_t v29 = (uint64_t)(v140 - *((void *)&v139 + 1)) >> 3;
          if (v29 <= 1) {
            unint64_t v29 = 1;
          }
          uint64_t v30 = *(void *)(a2 + 144);
          do
          {
            long long v132 = *(_OWORD *)&v135[0].__locale_;
            if (v27 != v28)
            {
              unint64_t v31 = v28;
              unint64_t v32 = v29;
              do
              {
                uint64_t v33 = *v31++;
                *((void *)&v132 + v33) = 0;
                --v32;
              }
              while (v32);
            }
            uint64_t v34 = 0;
            uint64_t v35 = 0;
            char v36 = 1;
            do
            {
              char v37 = v36;
              v35 += *((void *)&v150 + v34) * *((void *)&v132 + v34);
              uint64_t v34 = 1;
              char v36 = 0;
            }
            while ((v37 & 1) != 0);
            *(_DWORD *)(v25 + 4 * v26) = *(_DWORD *)(v30 + 4 * v35);
            for (uint64_t i = 1; i != -1; --i)
            {
              uint64_t v39 = (std::locale::__imp *)((char *)v135[i].__locale_ + 1);
              v135[i].__locale_ = v39;
              if (v39 != *(std::locale::__imp **)((char *)&v129 + i * 8)) {
                break;
              }
              v135[i].__locale_ = 0;
            }
            ++v26;
          }
          while (v26 != v24);
        }
      }
      else if (v24)
      {
        uint64_t v83 = 0;
        unint64_t v85 = (uint64_t *)*((void *)&v139 + 1);
        unint64_t v84 = (uint64_t *)v140;
        unint64_t v86 = (uint64_t)(v140 - *((void *)&v139 + 1)) >> 3;
        if (v86 <= 1) {
          unint64_t v86 = 1;
        }
        uint64_t v87 = *(void *)(v3 + 56);
        uint64_t v88 = *(void *)(v3 + 64);
        uint64_t v89 = *(void *)(a2 + 144);
        do
        {
          locale = v135[0].__locale_;
          uint64_t v91 = v135[1].__locale_;
          long long v132 = *(_OWORD *)&v135[0].__locale_;
          if (v84 != v85)
          {
            unint64_t v92 = v85;
            unint64_t v93 = v86;
            do
            {
              uint64_t v94 = *v92++;
              *((void *)&v132 + v94) = 0;
              --v93;
            }
            while (v93);
          }
          uint64_t v95 = 0;
          uint64_t v96 = 0;
          char v97 = 1;
          do
          {
            char v98 = v97;
            v96 += *((void *)&v150 + v95) * *((void *)&v132 + v95);
            uint64_t v95 = 1;
            char v97 = 0;
          }
          while ((v98 & 1) != 0);
          *(_DWORD *)(v25 + 4 * ((void)locale * v87 + (void)v91 * v88)) = *(_DWORD *)(v89 + 4 * v96);
          for (uint64_t j = 1; j != -1; --j)
          {
            uint64_t v100 = (std::locale::__imp *)((char *)v135[j].__locale_ + 1);
            v135[j].__locale_ = v100;
            if (v100 != *(std::locale::__imp **)((char *)&v129 + j * 8)) {
              break;
            }
            v135[j].__locale_ = 0;
          }
          ++v83;
        }
        while (v83 != v24);
      }
    }
    else
    {
      long long v151 = 0uLL;
      long long v152 = 0uLL;
      long long v149 = 0uLL;
      long long v150 = 0uLL;
      long long v147 = 0uLL;
      long long v148 = 0uLL;
      long long v145 = 0uLL;
      long long v146 = 0uLL;
      long long v143 = 0uLL;
      long long v144 = 0uLL;
      long long v141 = 0uLL;
      long long v142 = 0uLL;
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      long long v130 = 0uLL;
      long long v131 = 0uLL;
      long long v129 = 0uLL;
      sub_25B40AB84((uint64_t)&v138, v5, v6, (uint64_t)&v129);
      uint64_t v48 = 0;
      char v49 = 1;
      do
      {
        uint64_t v50 = *((void *)&v129 + v48);
        uint64_t v51 = *((void *)v5 + v48);
        if ((v49 & 1) == 0) {
          break;
        }
        char v49 = 0;
        uint64_t v48 = 1;
      }
      while (v50 == v51);
      if (v50 != v51)
      {
        uint64_t v52 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        int64_t v53 = sub_25B406B20(v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v53, (uint64_t)" ", 1);
        uint64_t v54 = (void *)MEMORY[0x263F8C0F8];
        unint64_t v55 = (void *)std::ostream::operator<<();
        sub_25B406B20(v55, (uint64_t)" ", 1);
        sub_25B406B20(v55, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(*v55 - 24)));
        unint64_t v56 = std::locale::use_facet(v135, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(v135);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
        uint64_t v57 = std::locale::use_facet(v135, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
        std::locale::~locale(v135);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v136 = 0u;
      long long v137 = 0u;
      long long v134 = 0u;
      *(_OWORD *)&v135[0].__locale_ = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      uint64_t v58 = *(void *)(v3 + 104);
      uint64_t v59 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v58)
        {
          uint64_t v60 = 0;
          unint64_t v62 = (uint64_t *)*((void *)&v139 + 1);
          uint64_t v61 = (uint64_t *)v140;
          unint64_t v63 = (uint64_t)(v140 - *((void *)&v139 + 1)) >> 3;
          if (v63 <= 1) {
            unint64_t v63 = 1;
          }
          int v64 = *(unsigned __int8 *)(a2 + 136);
          uint64_t v65 = *(void *)(a2 + 56);
          uint64_t v66 = *(void *)(a2 + 64);
          uint64_t v67 = *(void *)(a2 + 144);
          do
          {
            long long v132 = *(_OWORD *)&v135[0].__locale_;
            if (v61 != v62)
            {
              unint64_t v68 = v62;
              unint64_t v69 = v63;
              do
              {
                uint64_t v70 = *v68++;
                *((void *)&v132 + v70) = 0;
                --v69;
              }
              while (v69);
            }
            uint64_t v71 = 0;
            uint64_t v72 = 0;
            char v73 = 1;
            do
            {
              char v74 = v73;
              v72 += *((void *)&v150 + v71) * *((void *)&v132 + v71);
              uint64_t v71 = 1;
              char v73 = 0;
            }
            while ((v74 & 1) != 0);
            if (!v64) {
              uint64_t v72 = v132 * v65 + *((void *)&v132 + 1) * v66;
            }
            *(_DWORD *)(v59 + 4 * v60) = *(_DWORD *)(v67 + 4 * v72);
            for (uint64_t k = 1; k != -1; --k)
            {
              uint64_t v76 = (std::locale::__imp *)((char *)v135[k].__locale_ + 1);
              v135[k].__locale_ = v76;
              if (v76 != *(std::locale::__imp **)((char *)&v129 + k * 8)) {
                break;
              }
              v135[k].__locale_ = 0;
            }
            ++v60;
          }
          while (v60 != v58);
        }
      }
      else if (v58)
      {
        uint64_t v108 = 0;
        unint64_t v110 = (uint64_t *)*((void *)&v139 + 1);
        uint64_t v109 = (uint64_t *)v140;
        unint64_t v111 = (uint64_t)(v140 - *((void *)&v139 + 1)) >> 3;
        if (v111 <= 1) {
          unint64_t v111 = 1;
        }
        uint64_t v112 = *(void *)(v3 + 56);
        uint64_t v113 = *(void *)(v3 + 64);
        int v114 = *(unsigned __int8 *)(a2 + 136);
        uint64_t v115 = *(void *)(a2 + 56);
        uint64_t v116 = *(void *)(a2 + 64);
        uint64_t v117 = *(void *)(a2 + 144);
        do
        {
          v118 = v135[0].__locale_;
          v119 = v135[1].__locale_;
          long long v132 = *(_OWORD *)&v135[0].__locale_;
          if (v109 != v110)
          {
            unint64_t v120 = v110;
            unint64_t v121 = v111;
            do
            {
              uint64_t v122 = *v120++;
              *((void *)&v132 + v122) = 0;
              --v121;
            }
            while (v121);
          }
          uint64_t v123 = 0;
          uint64_t v124 = 0;
          char v125 = 1;
          do
          {
            char v126 = v125;
            v124 += *((void *)&v150 + v123) * *((void *)&v132 + v123);
            uint64_t v123 = 1;
            char v125 = 0;
          }
          while ((v126 & 1) != 0);
          if (!v114) {
            uint64_t v124 = v132 * v115 + *((void *)&v132 + 1) * v116;
          }
          *(_DWORD *)(v59 + 4 * ((void)v118 * v112 + (void)v119 * v113)) = *(_DWORD *)(v117 + 4 * v124);
          for (uint64_t m = 1; m != -1; --m)
          {
            long long v128 = (std::locale::__imp *)((char *)v135[m].__locale_ + 1);
            v135[m].__locale_ = v128;
            if (v128 != *(std::locale::__imp **)((char *)&v129 + m * 8)) {
              break;
            }
            v135[m].__locale_ = 0;
          }
          ++v108;
        }
        while (v108 != v58);
      }
    }
    return sub_25B3F9500((uint64_t)&v138);
  }
  return result;
}

void sub_25B40AB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_25B40AB84(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  long long v8 = *a2;
  long long v9 = a2[2];
  *(_OWORD *)(a1 + 64) = a2[1];
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v8;
  long long v10 = *a3;
  long long v11 = a3[2];
  *(_OWORD *)(a1 + 112) = a3[1];
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 96) = v10;
  uint64_t v12 = 1;
  int v13 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v14 = (std::locale::id *)MEMORY[0x263F8C108];
  do
  {
    uint64_t v15 = v12;
    uint64_t v16 = *((void *)a2 + v12);
    uint64_t v17 = *((void *)a3 + v12);
    if (v16 == v17)
    {
      *(void *)(a4 + 8 * v15) = v16;
      goto LABEL_40;
    }
    if (v16 == 1)
    {
      uint64_t v19 = *(uint64_t **)(a1 + 8);
      unint64_t v18 = *(void *)(a1 + 16);
      if ((unint64_t)v19 >= v18)
      {
        uint64_t v24 = *(uint64_t **)a1;
        uint64_t v25 = ((uint64_t)v19 - *(void *)a1) >> 3;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61) {
          goto LABEL_42;
        }
        uint64_t v27 = v18 - (void)v24;
        if (v27 >> 2 > v26) {
          unint64_t v26 = v27 >> 2;
        }
        BOOL v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v28) {
          unint64_t v29 = v26;
        }
        if (v29)
        {
          unint64_t v29 = (unint64_t)sub_25B3FCAD4(v29);
          uint64_t v24 = *(uint64_t **)a1;
          uint64_t v19 = *(uint64_t **)(a1 + 8);
        }
        else
        {
          uint64_t v30 = 0;
        }
        uint64_t v44 = (uint64_t *)(v29 + 8 * v25);
        *uint64_t v44 = v15;
        int v20 = v44 + 1;
        while (v19 != v24)
        {
          uint64_t v45 = *--v19;
          *--uint64_t v44 = v45;
        }
        *(void *)a1 = v44;
        *(void *)(a1 + 8) = v20;
        *(void *)(a1 + 16) = v29 + 8 * v30;
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *uint64_t v19 = v15;
        int v20 = v19 + 1;
      }
      *(void *)(a1 + 8) = v20;
      uint64_t v46 = *((void *)a3 + v15);
    }
    else
    {
      if (v17 != 1)
      {
        unint64_t v31 = sub_25B406B20(v13, (uint64_t)"runtime_err in ", 15);
        unint64_t v32 = sub_25B406B20(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/broadcast_helper.hpp", 119);
        sub_25B406B20(v32, (uint64_t)" ", 1);
        uint64_t v33 = (void *)std::ostream::operator<<();
        uint64_t v34 = sub_25B406B20(v33, (uint64_t)" ", 1);
        uint64_t v35 = sub_25B406B20(v34, (uint64_t)"init_internal", 13);
        std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24)));
        char v36 = std::locale::use_facet(&v49, v14);
        ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
        std::locale::~locale(&v49);
        std::ostream::put();
        std::ostream::flush();
        sub_25B40AF28("err", "cannot broadcast");
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
        char v37 = std::locale::use_facet(&v49, v14);
        ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
        std::locale::~locale(&v49);
        std::ostream::put();
        std::ostream::flush();
        goto LABEL_40;
      }
      int v22 = *(char **)(a1 + 32);
      unint64_t v21 = *(void *)(a1 + 40);
      if ((unint64_t)v22 >= v21)
      {
        int64_t v38 = *(char **)(a1 + 24);
        uint64_t v39 = (v22 - v38) >> 3;
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61) {
LABEL_42:
        }
          sub_25B3FBC4C();
        uint64_t v41 = v21 - (void)v38;
        if (v41 >> 2 > v40) {
          unint64_t v40 = v41 >> 2;
        }
        BOOL v28 = (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v28) {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          unint64_t v42 = (unint64_t)sub_25B3FCAD4(v42);
          int64_t v38 = *(char **)(a1 + 24);
          int v22 = *(char **)(a1 + 32);
        }
        else
        {
          uint64_t v43 = 0;
        }
        uint64_t v47 = (uint64_t *)(v42 + 8 * v39);
        *uint64_t v47 = v15;
        uint64_t v23 = v47 + 1;
        while (v22 != v38)
        {
          uint64_t v48 = *((void *)v22 - 1);
          v22 -= 8;
          *--uint64_t v47 = v48;
        }
        *(void *)(a1 + 24) = v47;
        *(void *)(a1 + 32) = v23;
        *(void *)(a1 + 40) = v42 + 8 * v43;
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        *(void *)int v22 = v15;
        uint64_t v23 = v22 + 8;
      }
      *(void *)(a1 + 32) = v23;
      uint64_t v46 = *((void *)a2 + v15);
    }
    *(void *)(a4 + 8 * v15) = v46;
LABEL_40:
    uint64_t v12 = v15 - 1;
  }
  while (v15);
  *(void *)(a1 + 144) = *(void *)(a1 + 56);
  *(void *)(a1 + 152) = 1;
  *(void *)(a1 + 192) = *(void *)(a1 + 104);
  *(void *)(a1 + 200) = 1;
}

void sub_25B40AF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B40AF28(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  uint64_t v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v5, (uint64_t)" ", 1);

  return sub_25B40AF88(a2);
}

uint64_t sub_25B40AF88(const char *a1)
{
  size_t v2 = strlen(a1);
  uint64_t v3 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v2);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  size_t v4 = std::locale::use_facet(&v6, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v6);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B40B048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

BOOL sub_25B40B05C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    uint64_t v4 = *(void *)(a1 + 8 * v2);
    uint64_t v5 = *(void *)(a2 + 8 * v2);
    if ((v3 & 1) == 0) {
      break;
    }
    char v3 = 0;
    uint64_t v2 = 1;
  }
  while (v4 == v5);
  if (v4 != v5) {
    return 0;
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    uint64_t v8 = *(void *)(a1 + 48 + 8 * v6);
    uint64_t v9 = *(void *)(a2 + 48 + 8 * v6);
    if ((v7 & 1) == 0) {
      break;
    }
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while (v8 == v9);
  return v8 == v9 && *(void *)(a1 + 104) == *(void *)(a2 + 104) && *(void *)(a1 + 96) == *(void *)(a2 + 96);
}

void sub_25B40B0E8(void *a1)
{
  *a1 = &unk_2708F1C28;
  uint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B40B154(void *a1)
{
  *a1 = &unk_2708F1C28;
  uint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

uint64_t sub_25B40B1A0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  sub_25B408C3C(a1, a2, 0, *(_DWORD *)a3, *(_DWORD *)(a3 + 4), *(_DWORD *)(a3 + 8));
  unsigned int v7 = *a4;
  int v8 = a4[1];
  int v9 = a4[2];

  return sub_25B408C3C(a1, a2, 1u, v7, v8, v9);
}

uint64_t sub_25B40B204(uint64_t a1, int *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v4 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    unsigned int v7 = (void *)std::ostream::operator<<();
    int v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    int v9 = sub_25B406B20(v8, (uint64_t)"operator=", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    long long v10 = std::locale::use_facet((const std::locale *)v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)v21);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4074D0("err", "scalar assign should create a storage first");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    long long v11 = std::locale::use_facet((const std::locale *)v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)v21);
    std::ostream::put();
    std::ostream::flush();
  }
  int v12 = *a2;
  memset(v21, 0, sizeof(v21));
  uint64_t v13 = *(void *)(a1 + 104);
  uint64_t v14 = *(_DWORD **)(a1 + 144);
  if (*(unsigned char *)(a1 + 136))
  {
    for (; v13; --v13)
      *v14++ = v12;
  }
  else if (v13)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 64);
    do
    {
      uint64_t v18 = 0;
      v14[v16 * *(void *)&v21[0] + v17 * *((void *)&v21[0] + 1)] = v12;
      do
      {
        uint64_t v19 = *(void *)((char *)v21 + v18 + 8) + 1;
        *(void *)((char *)v21 + v18 + 8) = v19;
        if (v19 != *(void *)(a1 + 16 + v18)) {
          break;
        }
        *(void *)((char *)v21 + v18 + 8) = 0;
        v18 -= 8;
      }
      while (v18 != -16);
      ++v15;
    }
    while (v15 != v13);
  }
  return a1;
}

void sub_25B40B480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

uint64_t sub_25B40B4A0(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  int v7 = objc_msgSend_intValue(a2, v5, v6);
  int v10 = objc_msgSend_intValue(v4, v8, v9);
  if (v7 < v10) {
    uint64_t v11 = -1;
  }
  else {
    uint64_t v11 = v7 > v10;
  }

  return v11;
}

void sub_25B40B4F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *sub_25B40B504(std::string *a1, char *__s)
{
  size_t v4 = strlen(__s);

  return sub_25B40B54C(a1, __s, v4);
}

std::string *sub_25B40B54C(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = __dst->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      std::string::size_type size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    int v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    int v7 = __dst;
    if (__len > 0x16)
    {
      std::string::size_type size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      std::string::size_type v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((unsigned char *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    __dst->__r_.__value_.__l.__size_ = __len;
  }
  else {
    *((unsigned char *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

uint64_t sub_25B40B60C(const char *a1, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const char *a6)
{
  size_t v10 = strlen(a1);
  uint64_t v11 = (void *)MEMORY[0x263F8C0F8];
  int v12 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v10);
  sub_25B406B20(v12, (uint64_t)" ", 1);
  size_t v13 = strlen(a2);
  uint64_t v14 = sub_25B406B20(v11, (uint64_t)a2, v13);
  sub_25B406B20(v14, (uint64_t)" ", 1);
  uint64_t v15 = (void *)std::ostream::operator<<();
  sub_25B406B20(v15, (uint64_t)" ", 1);
  size_t v16 = strlen(a4);
  uint64_t v17 = sub_25B406B20(v11, (uint64_t)a4, v16);
  sub_25B406B20(v17, (uint64_t)" ", 1);
  uint64_t v18 = (void *)std::ostream::operator<<();
  sub_25B406B20(v18, (uint64_t)" ", 1);
  size_t v19 = strlen(a6);
  int v20 = sub_25B406B20(v11, (uint64_t)a6, v19);
  sub_25B406B20(v20, (uint64_t)" ", 1);

  return sub_25B407354();
}

os_log_t sub_25B40B734()
{
  os_log_t result = os_log_create("com.apple.RoomScanCore", "RoomScanCore");
  qword_26A5020A8 = (uint64_t)result;
  return result;
}

os_log_t sub_25B40B764()
{
  os_log_t result = os_log_create("com.apple.RoomScanCore", "LcnnDetector");
  qword_26A5020B8 = (uint64_t)result;
  return result;
}

os_log_t sub_25B40B794()
{
  os_log_t result = os_log_create("com.apple.RoomScanCore", "DoorWindow");
  qword_26A5020C8 = (uint64_t)result;
  return result;
}

os_log_t sub_25B40B7C4()
{
  os_log_t result = os_log_create("com.apple.RoomScanCore", "OnlineFloorPlan");
  qword_26A5020D8 = (uint64_t)result;
  return result;
}

os_log_t sub_25B40B7F4()
{
  os_log_t result = os_log_create("com.apple.RoomScanCore", "OfflineFloorPlan");
  qword_26A5020E8 = (uint64_t)result;
  return result;
}

os_log_t sub_25B40B824()
{
  os_log_t result = os_log_create("com.apple.RoomScanCore", "RSCaptureSession");
  qword_26A5020F8 = (uint64_t)result;
  return result;
}

os_log_t sub_25B40B854()
{
  os_log_t result = os_log_create("com.apple.RoomScanCore", "RSGenerationSession");
  qword_26A502108 = (uint64_t)result;
  return result;
}

os_log_t sub_25B40B884()
{
  os_log_t result = os_log_create("com.apple.RoomScanCore", "BoundaryRefinement");
  qword_26A502118 = (uint64_t)result;
  return result;
}

os_log_t sub_25B40B8B4()
{
  os_log_t result = os_log_create("com.apple.RoomScanCore", "RoomType");
  qword_26A502128 = (uint64_t)result;
  return result;
}

void sub_25B40B8E4(void *a1, int32x2_t *a2, int32x2_t *a3, unsigned char *a4, double a5, double a6, double a7, int32x2_t a8, __n128 a9)
{
  if (a2 != a3)
  {
    uint64_t v11 = a2;
    int v12 = 0;
    size_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      *(int32x2_t *)&long long v15 = *v11;
      int32x2_t v16 = vrev64_s32(*v11);
      if ((unint64_t)v13 >= v14)
      {
        uint64_t v17 = v13 - v12;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v14 - (void)v12) >> 2 > v18) {
          unint64_t v18 = (uint64_t)(v14 - (void)v12) >> 2;
        }
        if (v14 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          unint64_t v19 = (unint64_t)sub_25B3FCAD4(v19);
        }
        else {
          uint64_t v20 = 0;
        }
        unint64_t v21 = (int32x2_t *)(v19 + 8 * v17);
        *unint64_t v21 = v16;
        uint64_t v22 = v21 + 1;
        while (v13 != v12)
        {
          int32x2_t v23 = v13[-1];
          --v13;
          DWORD1(v15) = v23.i32[1];
          v21[-1] = v23;
          --v21;
        }
        unint64_t v14 = v19 + 8 * v20;
        if (v12) {
          operator delete(v12);
        }
        int v12 = v21;
        size_t v13 = v22;
      }
      else
      {
        *v13++ = v16;
      }
      ++v11;
    }
    while (v11 != a3);
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    unint64_t v26 = 0;
    if (v13 == v12)
    {
      unint64_t v29 = a1;
    }
    else
    {
      uint64_t v27 = 0;
      a9.n128_u64[0] = (unint64_t)v13[-1];
      a9.n128_u32[0] <<= 16;
      if ((unint64_t)(v13 - v12) <= 1) {
        uint64_t v28 = 1;
      }
      else {
        uint64_t v28 = v13 - v12;
      }
      unint64_t v29 = a1;
      uint64_t v120 = v28;
      do
      {
        LODWORD(v15) = 0;
        int8x8_t v32 = (int8x8_t)a9.n128_u64[0];
        a9.n128_u64[0] = (unint64_t)v12[v27];
        unsigned __int32 v30 = v32.i32[0];
        int v31 = v32.i32[0] + 0x8000;
        v32.i32[0] = (v32.i32[0] + 0x8000) >> 16;
        v33.i32[1] = a9.n128_i32[1];
        v33.i32[0] = a9.n128_i16[0];
        unsigned __int32 v34 = a9.n128_u32[0] << 16;
        uint64_t v35 = v29[2];
        int v36 = a9.n128_i16[0] - (v31 >> 16);
        signed __int32 v37 = a9.n128_u32[1] - v32.i32[1];
        if (v36 >= 0) {
          unsigned int v38 = v36;
        }
        else {
          unsigned int v38 = -v36;
        }
        a8.i32[0] = v36;
        *(int8x8_t *)&long long v15 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_s32(*(int32x2_t *)&v15, a8), 0), v33, v32);
        if (v36 >= 0) {
          signed __int32 v39 = a9.n128_u32[1] - v32.i32[1];
        }
        else {
          signed __int32 v39 = v32.i32[1] - a9.n128_u32[1];
        }
        int v40 = (v39 >> 31) | 1;
        if (v37 >= 0) {
          unsigned __int32 v41 = a9.n128_u32[1] - v32.i32[1];
        }
        else {
          unsigned __int32 v41 = v32.i32[1] - a9.n128_u32[1];
        }
        BOOL v42 = v41 > v38;
        if (v41 >= v38) {
          unsigned int v43 = v38;
        }
        else {
          unsigned int v43 = v41;
        }
        if (v41 <= v38) {
          unsigned int v44 = v38;
        }
        else {
          unsigned int v44 = v41;
        }
        if (v41 > v38) {
          int v45 = v40;
        }
        else {
          int v45 = 0;
        }
        if (v42) {
          int v46 = 0;
        }
        else {
          int v46 = v40;
        }
        int v47 = 2 * v43;
        int v48 = v46 * v35;
        if (v42) {
          ++v48;
        }
        int v49 = v45 * v35;
        if (!v42) {
          ++v49;
        }
        int v50 = v44 - 2 * v43;
        int v51 = 2 * v44;
        uint64_t v52 = (unsigned char *)(v29[18] + (int)v35 * (uint64_t)SDWORD1(v15) + (int)v15);
        unsigned int v53 = v44 + 1;
        do
        {
          unsigned char *v52 = *a4;
          v52 += v49 + (v48 & (v50 >> 31));
          int v50 = v50 - v47 + (v51 & (v50 >> 31));
          --v53;
        }
        while (v53);
        if (a9.n128_u32[1] != v32.i32[1])
        {
          if (a9.n128_i32[1] <= v32.i32[1]) {
            unsigned __int32 v54 = a9.n128_u32[0] << 16;
          }
          else {
            unsigned __int32 v54 = v30;
          }
          if (v32.i32[1] <= a9.n128_i32[1]) {
            unsigned __int32 v55 = a9.n128_u32[1];
          }
          else {
            unsigned __int32 v55 = v32.u32[1];
          }
          if (v32.i32[1] >= a9.n128_i32[1]) {
            unsigned __int32 v56 = a9.n128_u32[1];
          }
          else {
            unsigned __int32 v56 = v32.u32[1];
          }
          int v57 = (int)(v34 - v30) / v37;
          if (v25 >= (unint64_t)v26)
          {
            unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)v24) >> 3);
            unint64_t v59 = v58 + 1;
            if (v58 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_181;
            }
            if (0x5555555555555556 * ((v26 - v24) >> 3) > v59) {
              unint64_t v59 = 0x5555555555555556 * ((v26 - v24) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v26 - v24) >> 3) >= 0x555555555555555) {
              unint64_t v60 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v60 = v59;
            }
            __n128 v124 = a9;
            if (v60)
            {
              unsigned __int32 v116 = v56;
              v118 = v24;
              if (v60 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_182;
              }
              int v61 = v57;
              unsigned __int32 v62 = v55;
              unint64_t v63 = v60;
              int v64 = (char *)operator new(24 * v60);
              a9 = v124;
              unint64_t v60 = v63;
              unsigned __int32 v55 = v62;
              uint64_t v24 = v118;
              uint64_t v28 = v120;
              int v57 = v61;
              unsigned __int32 v56 = v116;
            }
            else
            {
              int v64 = 0;
            }
            uint64_t v65 = &v64[24 * v58];
            *(_DWORD *)uint64_t v65 = v56;
            *((_DWORD *)v65 + 1) = v55;
            *((_DWORD *)v65 + 2) = v54;
            *((_DWORD *)v65 + 3) = v57;
            *((void *)v65 + 2) = 0;
            if ((char *)v25 == v24)
            {
              uint64_t v67 = &v64[24 * v58];
              unint64_t v29 = a1;
            }
            else
            {
              uint64_t v66 = &v64[24 * v58];
              unint64_t v29 = a1;
              do
              {
                long long v15 = *(_OWORD *)(v25 - 24);
                uint64_t v67 = v66 - 24;
                *((void *)v66 - 1) = *(void *)(v25 - 8);
                *(_OWORD *)(v66 - 24) = v15;
                v25 -= 24;
                v66 -= 24;
              }
              while ((char *)v25 != v24);
            }
            unint64_t v26 = &v64[24 * v60];
            unint64_t v25 = (unint64_t)(v65 + 24);
            if (v24)
            {
              unint64_t v68 = v24;
              unint64_t v69 = v26;
              operator delete(v68);
              uint64_t v28 = v120;
              a9 = v124;
              unint64_t v26 = v69;
            }
            uint64_t v24 = v67;
          }
          else
          {
            *(_DWORD *)unint64_t v25 = v56;
            *(_DWORD *)(v25 + 4) = v55;
            *(_DWORD *)(v25 + 8) = v54;
            *(_DWORD *)(v25 + 12) = v57;
            *(void *)(v25 + 16) = 0;
            v25 += 24;
          }
        }
        a9.n128_u32[0] = v34;
        ++v27;
      }
      while (v27 != v28);
    }
    long long v126 = 0uLL;
    unint64_t v127 = 0;
    uint64_t v70 = (uint64_t)(v25 - (void)v24) >> 3;
    unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * v70;
    if (-1431655765 * (int)v70 >= 2)
    {
      uint64_t v72 = 0;
      uint64_t v117 = v29[18];
      unint64_t v73 = v29[1];
      int v74 = 0x7FFFFFFF;
      int v75 = 0x80000000;
      signed int v76 = 0x80000000;
      int v77 = 0x7FFFFFFF;
      do
      {
        int v79 = *(_DWORD *)&v24[v72];
        int v78 = *(_DWORD *)&v24[v72 + 4];
        signed int v80 = *(_DWORD *)&v24[v72 + 8];
        signed int v81 = v80 + (v78 - v79) * *(_DWORD *)&v24[v72 + 12];
        if (v79 < v77) {
          int v77 = *(_DWORD *)&v24[v72];
        }
        if (v75 <= v78) {
          int v75 = *(_DWORD *)&v24[v72 + 4];
        }
        if (v80 < v74) {
          int v74 = *(_DWORD *)&v24[v72 + 8];
        }
        if (v76 <= v80) {
          signed int v76 = *(_DWORD *)&v24[v72 + 8];
        }
        if (v81 < v74) {
          int v74 = v80 + (v78 - v79) * *(_DWORD *)&v24[v72 + 12];
        }
        if (v76 <= v81) {
          signed int v76 = v80 + (v78 - v79) * *(_DWORD *)&v24[v72 + 12];
        }
        v72 += 24;
      }
      while (24 * v71 != v72);
      if ((v75 & 0x80000000) == 0 && v73 > v77 && (v76 & 0x80000000) == 0 && (unint64_t)v74 < v29[2] << 16)
      {
        unint64_t v123 = v29[2];
        unint64_t v82 = 126 - 2 * __clz(v71);
        if ((char *)v25 == v24) {
          uint64_t v83 = 0;
        }
        else {
          uint64_t v83 = v82;
        }
        unint64_t v84 = v71;
        unint64_t v85 = (unint64_t)v26;
        sub_25B40C130((unint64_t)v24, v25, v83, 1);
        LODWORD(v126) = 0x7FFFFFFF;
        int v121 = v84;
        if (v25 >= v85)
        {
          unint64_t v90 = v84 + 1;
          if (v84 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_181:
          }
            sub_25B3FBC4C();
          if (0x5555555555555556 * ((uint64_t)(v85 - (void)v24) >> 3) > v90) {
            unint64_t v90 = 0x5555555555555556 * ((uint64_t)(v85 - (void)v24) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (void)v24) >> 3) >= 0x555555555555555) {
            unint64_t v90 = 0xAAAAAAAAAAAAAAALL;
          }
          if (v90)
          {
            if (v90 > 0xAAAAAAAAAAAAAAALL) {
LABEL_182:
            }
              sub_25B3FA70C();
            uint64_t v91 = (char *)operator new(24 * v90);
            unint64_t v88 = v84;
          }
          else
          {
            unint64_t v88 = v84;
            uint64_t v91 = 0;
          }
          uint64_t v87 = &v91[24 * v88];
          *(_OWORD *)uint64_t v87 = v126;
          *((void *)v87 + 2) = v127;
          if ((char *)v25 == v24) {
            goto LABEL_123;
          }
          unint64_t v89 = v123;
          do
          {
            long long v92 = *(_OWORD *)(v25 - 24);
            *((void *)v87 - 1) = *(void *)(v25 - 8);
            *(_OWORD *)(v87 - 24) = v92;
            v87 -= 24;
            v25 -= 24;
          }
          while ((char *)v25 != v24);
          if (v24)
          {
LABEL_123:
            operator delete(v24);
            LODWORD(v88) = v84;
            unint64_t v89 = v123;
          }
        }
        else
        {
          long long v86 = v126;
          *(void *)(v25 + 16) = v127;
          *(_OWORD *)unint64_t v25 = v86;
          uint64_t v87 = v24;
          LODWORD(v88) = v84;
          unint64_t v89 = v123;
        }
        unint64_t v127 = 0;
        if (v75 >= (int)v73) {
          int v93 = v73;
        }
        else {
          int v93 = v75;
        }
        unsigned int v94 = *(_DWORD *)v87;
        int v115 = v93;
        if (*(_DWORD *)v87 < v93)
        {
          int v95 = 0;
          int v119 = v89 - 1;
          uint64_t v96 = v87;
LABEL_129:
          int v97 = 0;
          char v98 = (char *)v127;
          uint64_t v125 = v117 + v89 * v94;
          for (uint64_t i = &v126; ; uint64_t i = (long long *)v100)
          {
            uint64_t v100 = v98;
            if (!v98) {
              break;
            }
            while (*((_DWORD *)v100 + 1) == v94)
            {
              *((void *)i + 2) = *((void *)v100 + 2);
              uint64_t v100 = (char *)*((void *)v100 + 2);
              if (!v100) {
                goto LABEL_133;
              }
            }
            if (*(_DWORD *)v96 <= (signed int)v94 && *((_DWORD *)v100 + 2) >= *((_DWORD *)v96 + 2))
            {
              if (v95 >= (int)v88) {
                goto LABEL_158;
              }
LABEL_139:
              *((void *)i + 2) = v96;
              *((void *)v96 + 2) = v100;
              uint64_t v102 = &v87[24 * ++v95];
              char v98 = v100;
              uint64_t v100 = v96;
              if (!v97) {
                goto LABEL_156;
              }
              goto LABEL_144;
            }
            char v98 = (char *)*((void *)v100 + 2);
            uint64_t v102 = v96;
            if (!v97) {
              goto LABEL_156;
            }
LABEL_144:
            if ((v94 & 0x80000000) == 0)
            {
              unsigned int v103 = *((_DWORD *)i + 2);
              int v104 = *((_DWORD *)v100 + 2);
              if ((int)v103 >= v104) {
                int v105 = *((_DWORD *)v100 + 2);
              }
              else {
                int v105 = *((_DWORD *)i + 2);
              }
              if ((int)v103 <= v104) {
                unsigned int v103 = *((_DWORD *)v100 + 2);
              }
              if ((v103 & 0x80000000) == 0)
              {
                int v106 = v105 + 0xFFFF;
                if (v89 > (uint64_t)v106 >> 16)
                {
                  unint64_t v107 = HIWORD(v103);
                  uint64_t v108 = (v106 >> 16) & ~(v106 >> 31);
                  if (v89 <= v107) {
                    LODWORD(v107) = v119;
                  }
                  memset((void *)(v125 + v108), *a4, (int)v107 - (int)v108 + 1);
                  LODWORD(v88) = v121;
                  unint64_t v89 = v123;
                }
              }
            }
            *((_DWORD *)i + 2) += *((_DWORD *)i + 3);
            *((_DWORD *)v100 + 2) += *((_DWORD *)v100 + 3);
LABEL_156:
            v97 ^= 1u;
            uint64_t v96 = v102;
          }
LABEL_133:
          if (*(_DWORD *)v96 == v94 && v95 < (int)v88)
          {
            uint64_t v100 = 0;
            goto LABEL_139;
          }
LABEL_158:
          uint64_t v109 = 0;
          int v110 = 0;
          unint64_t v111 = v127;
          while (1)
          {
            if (v111 == v109)
            {
              uint64_t v113 = &v126;
LABEL_168:
              if (!v110)
              {
LABEL_173:
                if (++v94 == v115) {
                  break;
                }
                goto LABEL_129;
              }
            }
            else
            {
              uint64_t v112 = &v126;
              while (1)
              {
                uint64_t v113 = (long long *)*((void *)v111 + 2);
                if (!v113) {
                  break;
                }
                if (*((_DWORD *)v111 + 2) <= *((_DWORD *)v113 + 2))
                {
                  int v114 = (long long *)*((void *)v111 + 2);
                  uint64_t v113 = v111;
                  unint64_t v111 = v114;
                }
                else
                {
                  *((void *)v112 + 2) = v113;
                  *((void *)v111 + 2) = *((void *)v113 + 2);
                  *((void *)v113 + 2) = v111;
                  int v110 = 1;
                  int v114 = v111;
                }
                uint64_t v112 = v113;
                if (v114 == v109) {
                  goto LABEL_168;
                }
              }
              uint64_t v113 = v112;
              if (!v110) {
                goto LABEL_173;
              }
            }
            if (v113 != &v126)
            {
              unint64_t v111 = v127;
              int v110 = 1;
              uint64_t v109 = v113;
              if (v113 != v127) {
                continue;
              }
            }
            goto LABEL_173;
          }
        }
        uint64_t v24 = v87;
      }
    }
    if (v12) {
      operator delete(v12);
    }
    if (v24) {
      operator delete(v24);
    }
  }
}

void sub_25B40C0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (v12) {
    operator delete(v12);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B40C130(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  size_t v10 = (_DWORD *)(a2 - 24);
  unint64_t v11 = a1;
  while (1)
  {
    a1 = v11;
    uint64_t v12 = a2 - v11;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v11) >> 3);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          BOOL v68 = *v10 < *(_DWORD *)v11;
          if (*v10 == *(_DWORD *)v11)
          {
            int v69 = *(_DWORD *)(a2 - 16);
            int v70 = *(_DWORD *)(v11 + 8);
            BOOL v68 = v69 < v70;
            if (v69 == v70) {
              BOOL v68 = *(_DWORD *)(a2 - 12) < *(_DWORD *)(v11 + 12);
            }
          }
          if (v68)
          {
            uint64_t v169 = *(void *)(v11 + 16);
            long long v164 = *(_OWORD *)v11;
            long long v71 = *(_OWORD *)v10;
            *(void *)(v11 + 16) = *(void *)(a2 - 8);
            *(_OWORD *)unint64_t v11 = v71;
            *(void *)(a2 - 8) = v169;
            *(_OWORD *)size_t v10 = v164;
          }
          break;
        case 3uLL:
          sub_25B40CCF8((long long *)v11, (int *)(v11 + 24), (long long *)(a2 - 24));
          break;
        case 4uLL:
          sub_25B40CE8C(v11, v11 + 24, v11 + 48, a2 - 24);
          break;
        case 5uLL:
          sub_25B40CFBC(v11, v11 + 24, v11 + 48, v11 + 72, a2 - 24);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 575) {
      break;
    }
    if (!a3)
    {
      if (v11 == a2) {
        return;
      }
      int64_t v91 = (v13 - 2) >> 1;
      int64_t v92 = v91;
      while (1)
      {
        int64_t v93 = v92;
        if (v91 >= v92)
        {
          uint64_t v94 = (2 * v92) | 1;
          unint64_t v95 = v11 + 24 * v94;
          if (2 * v93 + 2 < (uint64_t)v13)
          {
            int v96 = *(_DWORD *)(v95 + 24);
            BOOL v97 = *(_DWORD *)v95 < v96;
            if (*(_DWORD *)v95 == v96)
            {
              int v98 = *(_DWORD *)(v11 + 24 * v94 + 8);
              int v99 = *(_DWORD *)(v95 + 32);
              BOOL v97 = v98 < v99;
              if (v98 == v99) {
                BOOL v97 = *(_DWORD *)(v11 + 24 * v94 + 12) < *(_DWORD *)(v95 + 36);
              }
            }
            if (v97)
            {
              v95 += 24;
              uint64_t v94 = 2 * v93 + 2;
            }
          }
          unint64_t v100 = v11 + 24 * v93;
          int v101 = *(_DWORD *)v100;
          if (*(_DWORD *)v95 == *(_DWORD *)v100)
          {
            int v102 = *(_DWORD *)(v95 + 8);
            int v103 = *(_DWORD *)(v11 + 24 * v93 + 8);
            BOOL v104 = v102 < v103;
            if (v102 == v103)
            {
              int v103 = *(_DWORD *)(v95 + 8);
              BOOL v104 = *(_DWORD *)(v95 + 12) < *(_DWORD *)(v11 + 24 * v93 + 12);
            }
            if (!v104) {
              goto LABEL_169;
            }
          }
          else if (*(_DWORD *)v95 >= v101)
          {
            int v103 = *(_DWORD *)(v100 + 8);
LABEL_169:
            int v105 = *(_DWORD *)(v100 + 4);
            int v106 = *(_DWORD *)(v100 + 12);
            uint64_t v107 = *(void *)(v100 + 16);
            uint64_t v108 = *(void *)(v95 + 16);
            *(_OWORD *)unint64_t v100 = *(_OWORD *)v95;
            *(void *)(v100 + 16) = v108;
            while (1)
            {
              if (v91 < v94) {
                goto LABEL_184;
              }
              unint64_t v109 = v95;
              uint64_t v110 = 2 * v94;
              uint64_t v94 = (2 * v94) | 1;
              unint64_t v95 = v11 + 24 * v94;
              uint64_t v111 = v110 + 2;
              if (v111 < (uint64_t)v13)
              {
                int v112 = *(_DWORD *)(v95 + 24);
                BOOL v113 = *(_DWORD *)v95 < v112;
                if (*(_DWORD *)v95 == v112)
                {
                  int v114 = *(_DWORD *)(v11 + 24 * v94 + 8);
                  int v115 = *(_DWORD *)(v95 + 32);
                  BOOL v113 = v114 < v115;
                  if (v114 == v115) {
                    BOOL v113 = *(_DWORD *)(v11 + 24 * v94 + 12) < *(_DWORD *)(v95 + 36);
                  }
                }
                if (v113)
                {
                  v95 += 24;
                  uint64_t v94 = v111;
                }
              }
              BOOL v116 = *(_DWORD *)v95 < v101;
              if (*(_DWORD *)v95 == v101)
              {
                int v117 = *(_DWORD *)(v95 + 8);
                BOOL v116 = v117 < v103;
                if (v117 == v103) {
                  BOOL v116 = *(_DWORD *)(v95 + 12) < v106;
                }
              }
              if (v116) {
                break;
              }
              long long v118 = *(_OWORD *)v95;
              *(void *)(v109 + 16) = *(void *)(v95 + 16);
              *(_OWORD *)unint64_t v109 = v118;
            }
            unint64_t v95 = v109;
LABEL_184:
            *(_DWORD *)unint64_t v95 = v101;
            *(_DWORD *)(v95 + 4) = v105;
            *(_DWORD *)(v95 + 8) = v103;
            *(_DWORD *)(v95 + 12) = v106;
            *(void *)(v95 + 16) = v107;
          }
        }
        int64_t v92 = v93 - 1;
        if (!v93)
        {
          int64_t v119 = v12 / 0x18uLL;
          while (1)
          {
            uint64_t v120 = 0;
            uint64_t v170 = *(void *)(v11 + 16);
            long long v165 = *(_OWORD *)v11;
            unint64_t v121 = v11;
            do
            {
              unint64_t v122 = v121;
              uint64_t v123 = v120 + 1;
              v121 += 24 * (v120 + 1);
              uint64_t v124 = 2 * v120;
              uint64_t v120 = (2 * v120) | 1;
              int64_t v125 = v124 + 2;
              if (v125 < v119)
              {
                int v126 = *(_DWORD *)(v121 + 24);
                BOOL v127 = *(_DWORD *)v121 < v126;
                if (*(_DWORD *)v121 == v126)
                {
                  int v128 = *(_DWORD *)(v122 + 24 * v123 + 8);
                  int v129 = *(_DWORD *)(v121 + 32);
                  BOOL v127 = v128 < v129;
                  if (v128 == v129) {
                    BOOL v127 = *(_DWORD *)(v122 + 24 * v123 + 12) < *(_DWORD *)(v121 + 36);
                  }
                }
                if (v127)
                {
                  v121 += 24;
                  uint64_t v120 = v125;
                }
              }
              long long v130 = *(_OWORD *)v121;
              *(void *)(v122 + 16) = *(void *)(v121 + 16);
              *(_OWORD *)unint64_t v122 = v130;
            }
            while (v120 <= (uint64_t)((unint64_t)(v119 - 2) >> 1));
            a2 -= 24;
            if (v121 == a2)
            {
              *(void *)(v121 + 16) = v170;
              *(_OWORD *)unint64_t v121 = v165;
            }
            else
            {
              long long v131 = *(_OWORD *)a2;
              *(void *)(v121 + 16) = *(void *)(a2 + 16);
              *(_OWORD *)unint64_t v121 = v131;
              *(void *)(a2 + 16) = v170;
              *(_OWORD *)a2 = v165;
              uint64_t v132 = v121 - v11 + 24;
              if (v132 >= 25)
              {
                unint64_t v133 = v132 / 0x18uLL - 2;
                unint64_t v134 = v133 >> 1;
                unint64_t v135 = v11 + 24 * (v133 >> 1);
                int v136 = *(_DWORD *)v121;
                if (*(_DWORD *)v135 == *(_DWORD *)v121)
                {
                  int v137 = *(_DWORD *)(v11 + 24 * v134 + 8);
                  int v138 = *(_DWORD *)(v121 + 8);
                  BOOL v139 = v137 < v138;
                  if (v137 == v138)
                  {
                    int v138 = *(_DWORD *)(v11 + 24 * v134 + 8);
                    BOOL v139 = *(_DWORD *)(v11 + 24 * v134 + 12) < *(_DWORD *)(v121 + 12);
                  }
                  if (v139) {
                    goto LABEL_206;
                  }
                }
                else if (*(_DWORD *)v135 < v136)
                {
                  int v138 = *(_DWORD *)(v121 + 8);
LABEL_206:
                  int v140 = *(_DWORD *)(v121 + 4);
                  int v141 = *(_DWORD *)(v121 + 12);
                  uint64_t v142 = *(void *)(v121 + 16);
                  uint64_t v143 = *(void *)(v135 + 16);
                  *(_OWORD *)unint64_t v121 = *(_OWORD *)v135;
                  *(void *)(v121 + 16) = v143;
                  if (v133 >= 2)
                  {
                    while (1)
                    {
                      unint64_t v145 = v134 - 1;
                      unint64_t v134 = (v134 - 1) >> 1;
                      unint64_t v144 = v11 + 24 * v134;
                      BOOL v146 = *(_DWORD *)v144 < v136;
                      if (*(_DWORD *)v144 == v136)
                      {
                        int v147 = *(_DWORD *)(v11 + 24 * v134 + 8);
                        BOOL v146 = v147 < v138;
                        if (v147 == v138) {
                          BOOL v146 = *(_DWORD *)(v11 + 24 * v134 + 12) < v141;
                        }
                      }
                      if (!v146) {
                        break;
                      }
                      long long v148 = *(_OWORD *)v144;
                      *(void *)(v135 + 16) = *(void *)(v144 + 16);
                      *(_OWORD *)unint64_t v135 = v148;
                      unint64_t v135 = v11 + 24 * v134;
                      if (v145 <= 1) {
                        goto LABEL_214;
                      }
                    }
                  }
                  unint64_t v144 = v135;
LABEL_214:
                  *(_DWORD *)unint64_t v144 = v136;
                  *(_DWORD *)(v144 + 4) = v140;
                  *(_DWORD *)(v144 + 8) = v138;
                  *(_DWORD *)(v144 + 12) = v141;
                  *(void *)(v144 + 16) = v142;
                }
              }
            }
            BOOL v29 = v119-- <= 2;
            if (v29) {
              return;
            }
          }
        }
      }
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = v11 + 24 * (v13 >> 1);
    if ((unint64_t)v12 >= 0xC01)
    {
      sub_25B40CCF8((long long *)a1, (int *)(a1 + 24 * (v13 >> 1)), (long long *)(a2 - 24));
      uint64_t v16 = 3 * v14;
      uint64_t v17 = (int *)(a1 + 24 * v14 - 24);
      sub_25B40CCF8((long long *)(a1 + 24), v17, (long long *)(a2 - 48));
      unint64_t v18 = (int *)(a1 + 24 + 8 * v16);
      sub_25B40CCF8((long long *)(a1 + 48), v18, (long long *)(a2 - 72));
      sub_25B40CCF8((long long *)v17, (int *)v15, (long long *)v18);
      uint64_t v166 = *(void *)(a1 + 16);
      long long v161 = *(_OWORD *)a1;
      uint64_t v19 = *(void *)(v15 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v15;
      *(void *)(a1 + 16) = v19;
      *(void *)(v15 + 16) = v166;
      *(_OWORD *)unint64_t v15 = v161;
    }
    else
    {
      sub_25B40CCF8((long long *)(a1 + 24 * (v13 >> 1)), (int *)a1, (long long *)(a2 - 24));
    }
    --a3;
    int v20 = *(_DWORD *)a1;
    if (a4) {
      goto LABEL_17;
    }
    int v21 = *(_DWORD *)(a1 - 24);
    if (v21 == v20)
    {
      int v22 = *(_DWORD *)(a1 - 16);
      int v23 = *(_DWORD *)(a1 + 8);
      if (v22 != v23)
      {
        if (v22 >= v23) {
          goto LABEL_65;
        }
        goto LABEL_17;
      }
      if (*(_DWORD *)(a1 - 12) < *(_DWORD *)(a1 + 12)) {
        goto LABEL_17;
      }
      int v23 = *(_DWORD *)(a1 - 16);
LABEL_65:
      int v46 = *(_DWORD *)(a1 + 12);
      int v47 = *v10;
      BOOL v48 = v20 < *v10;
      if (v20 == *v10)
      {
        int v49 = *(_DWORD *)(a2 - 16);
        BOOL v48 = v23 < v49;
        if (v23 == v49) {
          BOOL v48 = v46 < *(_DWORD *)(a2 - 12);
        }
      }
      unint64_t v11 = a1 + 24;
      if (v48)
      {
        while (1)
        {
          BOOL v50 = v20 < *(_DWORD *)v11;
          if (v20 == *(_DWORD *)v11)
          {
            int v51 = *(_DWORD *)(v11 + 8);
            BOOL v50 = v23 < v51;
            if (v23 == v51) {
              BOOL v50 = v46 < *(_DWORD *)(v11 + 12);
            }
          }
          if (v50) {
            break;
          }
          v11 += 24;
        }
      }
      else
      {
        while (v11 < a2)
        {
          BOOL v52 = v20 < *(_DWORD *)v11;
          if (v20 == *(_DWORD *)v11)
          {
            int v53 = *(_DWORD *)(v11 + 8);
            BOOL v52 = v23 < v53;
            if (v23 == v53) {
              BOOL v52 = v46 < *(_DWORD *)(v11 + 12);
            }
          }
          if (v52) {
            break;
          }
          v11 += 24;
        }
      }
      int v54 = *(_DWORD *)(a1 + 4);
      uint64_t v55 = *(void *)(a1 + 16);
      unint64_t i = a2;
      if (v11 < a2)
      {
        for (unint64_t i = a2 - 24; ; i -= 24)
        {
          BOOL v57 = v20 < v47;
          if (v20 == v47)
          {
            int v58 = *(_DWORD *)(i + 8);
            BOOL v57 = v23 < v58;
            if (v23 == v58) {
              BOOL v57 = v46 < *(_DWORD *)(i + 12);
            }
          }
          if (!v57) {
            break;
          }
          int v59 = *(_DWORD *)(i - 24);
          int v47 = v59;
        }
      }
      while (v11 < i)
      {
        uint64_t v168 = *(void *)(v11 + 16);
        long long v163 = *(_OWORD *)v11;
        long long v60 = *(_OWORD *)i;
        *(void *)(v11 + 16) = *(void *)(i + 16);
        *(_OWORD *)unint64_t v11 = v60;
        *(void *)(i + 16) = v168;
        *(_OWORD *)unint64_t i = v163;
        do
        {
          int v61 = *(_DWORD *)(v11 + 24);
          v11 += 24;
          BOOL v62 = v20 < v61;
          if (v20 == v61)
          {
            int v63 = *(_DWORD *)(v11 + 8);
            BOOL v62 = v23 < v63;
            if (v23 == v63) {
              BOOL v62 = v46 < *(_DWORD *)(v11 + 12);
            }
          }
        }
        while (!v62);
        do
        {
          int v64 = *(_DWORD *)(i - 24);
          i -= 24;
          BOOL v65 = v20 < v64;
          if (v20 == v64)
          {
            int v66 = *(_DWORD *)(i + 8);
            BOOL v65 = v23 < v66;
            if (v23 == v66) {
              BOOL v65 = v46 < *(_DWORD *)(i + 12);
            }
          }
        }
        while (v65);
      }
      BOOL v4 = v11 - 24 >= a1;
      BOOL v5 = v11 - 24 == a1;
      if (v11 - 24 != a1)
      {
        long long v67 = *(_OWORD *)(v11 - 24);
        *(void *)(a1 + 16) = *(void *)(v11 - 8);
        *(_OWORD *)a1 = v67;
      }
      a4 = 0;
      *(_DWORD *)(v11 - 24) = v20;
      *(_DWORD *)(v11 - 20) = v54;
      *(_DWORD *)(v11 - 16) = v23;
      *(_DWORD *)(v11 - 12) = v46;
      *(void *)(v11 - 8) = v55;
    }
    else
    {
      if (v21 >= v20)
      {
        int v23 = *(_DWORD *)(a1 + 8);
        goto LABEL_65;
      }
LABEL_17:
      int v24 = *(_DWORD *)(a1 + 4);
      int v25 = *(_DWORD *)(a1 + 8);
      int v26 = *(_DWORD *)(a1 + 12);
      uint64_t v27 = (_DWORD *)(a1 + 24);
      uint64_t v28 = *(void *)(a1 + 16);
      while (1)
      {
        BOOL v29 = *v27 < v20;
        if (*v27 == v20)
        {
          int v30 = v27[2];
          BOOL v29 = v30 < v25;
          if (v30 == v25) {
            BOOL v29 = v27[3] < v26;
          }
        }
        if (!v29) {
          break;
        }
        v27 += 6;
      }
      uint64_t j = (_DWORD *)(a2 - 24);
      if (v27 - 6 == (_DWORD *)a1)
      {
        uint64_t j = (_DWORD *)a2;
        if ((unint64_t)v27 < a2)
        {
          for (uint64_t j = (_DWORD *)(a2 - 24); ; j -= 6)
          {
            if (*j == v20)
            {
              int v34 = j[2];
              if (v34 == v25)
              {
                if (v27 >= j || j[3] < v26) {
                  break;
                }
              }
              else if (v27 >= j || v34 < v25)
              {
                break;
              }
            }
            else if (*j < v20 || v27 >= j)
            {
              break;
            }
          }
        }
      }
      else
      {
        while (1)
        {
          BOOL v32 = *j < v20;
          if (*j == v20)
          {
            int v33 = j[2];
            BOOL v32 = v33 < v25;
            if (v33 == v25) {
              BOOL v32 = j[3] < v26;
            }
          }
          if (v32) {
            break;
          }
          j -= 6;
        }
      }
      unint64_t v11 = (unint64_t)v27;
      if (v27 < j)
      {
        unint64_t v11 = (unint64_t)v27;
        int v36 = j;
        do
        {
          uint64_t v167 = *(void *)(v11 + 16);
          long long v162 = *(_OWORD *)v11;
          long long v37 = *(_OWORD *)v36;
          *(void *)(v11 + 16) = *((void *)v36 + 2);
          *(_OWORD *)unint64_t v11 = v37;
          *((void *)v36 + 2) = v167;
          *(_OWORD *)int v36 = v162;
          do
          {
            int v38 = *(_DWORD *)(v11 + 24);
            v11 += 24;
            BOOL v39 = v38 < v20;
            if (v38 == v20)
            {
              int v40 = *(_DWORD *)(v11 + 8);
              BOOL v39 = v40 < v25;
              if (v40 == v25) {
                BOOL v39 = *(_DWORD *)(v11 + 12) < v26;
              }
            }
          }
          while (v39);
          do
          {
            int v41 = *(v36 - 6);
            v36 -= 6;
            BOOL v42 = v41 < v20;
            if (v41 == v20)
            {
              int v43 = v36[2];
              BOOL v42 = v43 < v25;
              if (v43 == v25) {
                BOOL v42 = v36[3] < v26;
              }
            }
          }
          while (!v42);
        }
        while (v11 < (unint64_t)v36);
      }
      if (v11 - 24 != a1)
      {
        long long v44 = *(_OWORD *)(v11 - 24);
        *(void *)(a1 + 16) = *(void *)(v11 - 8);
        *(_OWORD *)a1 = v44;
      }
      *(_DWORD *)(v11 - 24) = v20;
      *(_DWORD *)(v11 - 20) = v24;
      *(_DWORD *)(v11 - 16) = v25;
      *(_DWORD *)(v11 - 12) = v26;
      *(void *)(v11 - 8) = v28;
      if (v27 < j)
      {
LABEL_64:
        sub_25B40C130(a1, v11 - 24, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v45 = sub_25B40D148(a1, v11 - 24);
        if (sub_25B40D148(v11, a2))
        {
          a2 = v11 - 24;
          if (v45) {
            return;
          }
          goto LABEL_1;
        }
        if (!v45) {
          goto LABEL_64;
        }
      }
    }
  }
  unint64_t v72 = v11 + 24;
  BOOL v74 = v11 == a2 || v72 == a2;
  if ((a4 & 1) == 0)
  {
    if (v74) {
      return;
    }
    while (1)
    {
      unint64_t v149 = a1;
      a1 = v72;
      int v150 = *(_DWORD *)(v149 + 24);
      if (v150 == *(_DWORD *)v149) {
        break;
      }
      if (v150 < *(_DWORD *)v149)
      {
        int v151 = *(_DWORD *)(v149 + 32);
LABEL_226:
        int v154 = *(_DWORD *)(v149 + 28);
        int v155 = *(_DWORD *)(v149 + 36);
        uint64_t v156 = *(void *)(v149 + 40);
        do
        {
          unint64_t v157 = v149;
          *(_OWORD *)(v149 + 24) = *(_OWORD *)v149;
          *(void *)(v149 + 40) = *(void *)(v149 + 16);
          int v158 = *(_DWORD *)(v149 - 24);
          v149 -= 24;
          BOOL v159 = v150 < v158;
          if (v150 == v158)
          {
            int v160 = *(_DWORD *)(v157 - 16);
            BOOL v159 = v151 < v160;
            if (v151 == v160) {
              BOOL v159 = v155 < *(_DWORD *)(v157 - 12);
            }
          }
        }
        while (v159);
        *(_DWORD *)unint64_t v157 = v150;
        *(_DWORD *)(v157 + 4) = v154;
        *(_DWORD *)(v157 + 8) = v151;
        *(_DWORD *)(v157 + 12) = v155;
        *(void *)(v157 + 16) = v156;
      }
LABEL_232:
      unint64_t v72 = a1 + 24;
      if (a1 + 24 == a2) {
        return;
      }
    }
    int v151 = *(_DWORD *)(v149 + 32);
    int v152 = *(_DWORD *)(v149 + 8);
    BOOL v153 = v151 < v152;
    if (v151 == v152) {
      BOOL v153 = *(_DWORD *)(v149 + 36) < *(_DWORD *)(v149 + 12);
    }
    if (!v153) {
      goto LABEL_232;
    }
    goto LABEL_226;
  }
  if (v74) {
    return;
  }
  uint64_t v75 = 0;
  unint64_t v76 = v11;
  while (2)
  {
    unint64_t v77 = v76;
    unint64_t v76 = v72;
    int v78 = *(_DWORD *)(v77 + 24);
    if (v78 == *(_DWORD *)v77)
    {
      int v79 = *(_DWORD *)(v77 + 32);
      int v80 = *(_DWORD *)(v77 + 8);
      BOOL v81 = v79 < v80;
      if (v79 == v80) {
        BOOL v81 = *(_DWORD *)(v77 + 36) < *(_DWORD *)(v77 + 12);
      }
      if (!v81) {
        goto LABEL_149;
      }
    }
    else
    {
      if (v78 >= *(_DWORD *)v77) {
        goto LABEL_149;
      }
      int v79 = *(_DWORD *)(v77 + 32);
    }
    int v82 = *(_DWORD *)(v77 + 28);
    int v83 = *(_DWORD *)(v77 + 36);
    uint64_t v84 = *(void *)(v77 + 40);
    *(_OWORD *)unint64_t v76 = *(_OWORD *)v77;
    *(void *)(v76 + 16) = *(void *)(v77 + 16);
    unint64_t v85 = v11;
    if (v77 == v11) {
      goto LABEL_148;
    }
    uint64_t v86 = v75;
    while (2)
    {
      uint64_t v87 = v11 + v86;
      int v88 = *(_DWORD *)(v11 + v86 - 24);
      BOOL v89 = v78 < v88;
      if (v78 == v88)
      {
        int v90 = *(_DWORD *)(v87 - 16);
        if (v79 == v90)
        {
          BOOL v89 = v83 < *(_DWORD *)(v11 + v86 - 12);
          goto LABEL_142;
        }
        if (v79 >= v90)
        {
          unint64_t v85 = v11 + v86;
          goto LABEL_148;
        }
      }
      else
      {
LABEL_142:
        if (!v89)
        {
          unint64_t v85 = v77;
          goto LABEL_148;
        }
      }
      v77 -= 24;
      *(_OWORD *)uint64_t v87 = *(_OWORD *)(v11 + v86 - 24);
      *(void *)(v87 + 16) = *(void *)(v11 + v86 - 8);
      v86 -= 24;
      if (v86) {
        continue;
      }
      break;
    }
    unint64_t v85 = v11;
LABEL_148:
    *(_DWORD *)unint64_t v85 = v78;
    *(_DWORD *)(v85 + 4) = v82;
    *(_DWORD *)(v85 + 8) = v79;
    *(_DWORD *)(v85 + 12) = v83;
    *(void *)(v85 + 16) = v84;
LABEL_149:
    unint64_t v72 = v76 + 24;
    v75 += 24;
    if (v76 + 24 != a2) {
      continue;
    }
    break;
  }
}

  size_t v10 = a2 - 1;
  unint64_t v11 = (float32x4_t *)a1;
  while (1)
  {
    a1 = (float *)v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    unint64_t v13 = a2 - v11;
    if (v5 || !v4) {
      break;
    }
    if (v12 <= 383)
    {
      int v79 = v11 + 1;
      BOOL v81 = v11 == a2 || v79 == a2;
      if (a4)
      {
        if (!v81)
        {
          int v82 = 0;
          int v83 = (float *)v11;
          do
          {
            uint64_t v84 = v83[4];
            unint64_t v85 = *v83;
            int v83 = (float *)v79;
            if (v84 < v85)
            {
              uint64_t v86 = *v79;
              uint64_t v87 = v82;
              while (1)
              {
                *(float32x4_t *)((char *)v11 + v87 + 16) = *(float32x4_t *)((char *)v11 + v87);
                if (!v87) {
                  break;
                }
                int v88 = *(float *)((char *)v11[-1].f32 + v87);
                v87 -= 16;
                if (v86.f32[0] >= v88)
                {
                  BOOL v89 = (float32x4_t *)((char *)v11 + v87 + 16);
                  goto LABEL_125;
                }
              }
              BOOL v89 = v11;
LABEL_125:
              _OWORD *v89 = v86;
            }
            int v79 = (float32x4_t *)(v83 + 4);
            v82 += 16;
          }
          while (v83 + 4 != (float *)a2);
        }
      }
      else if (!v81)
      {
        do
        {
          int v114 = a1[4];
          int v115 = *a1;
          a1 = (float *)v79;
          if (v114 < v115)
          {
            BOOL v116 = *v79;
            int v117 = v79;
            do
            {
              long long v118 = (float *)v117;
              int64_t v119 = v117[-1];
              --v117;
              *(float32x4_t *)long long v118 = v119;
            }
            while (v116.f32[0] < *(v118 - 8));
            std::locale::__imp *v117 = v116;
          }
          int v79 = (float32x4_t *)(a1 + 4);
        }
        while (a1 + 4 != (float *)a2);
      }
      return;
    }
    if (!a3)
    {
      if (v11 == a2) {
        return;
      }
      int v90 = (unint64_t)(v13 - 2) >> 1;
      int64_t v91 = v90;
      do
      {
        int64_t v92 = v91;
        if (v90 >= v91)
        {
          int64_t v93 = (2 * v91) | 1;
          uint64_t v94 = &v11[v93];
          if (2 * v92 + 2 < v13 && v94->f32[0] < COERCE_FLOAT(*(_OWORD *)&v94[1]))
          {
            ++v94;
            int64_t v93 = 2 * v92 + 2;
          }
          unint64_t v95 = &v11[v92];
          if (v94->f32[0] >= v95->f32[0])
          {
            int v96 = *v95;
            do
            {
              BOOL v97 = v95;
              unint64_t v95 = v94;
              *BOOL v97 = *v94;
              if (v90 < v93) {
                break;
              }
              int v98 = 2 * v93;
              int64_t v93 = (2 * v93) | 1;
              uint64_t v94 = &v11[v93];
              int v99 = v98 + 2;
              if (v99 < v13 && v94->f32[0] < COERCE_FLOAT(*(_OWORD *)&v94[1]))
              {
                ++v94;
                int64_t v93 = v99;
              }
            }
            while (v94->f32[0] >= v96.f32[0]);
            *unint64_t v95 = v96;
          }
        }
        int64_t v91 = v92 - 1;
      }
      while (v92);
      unint64_t v100 = (unint64_t)v12 >> 4;
      while (2)
      {
        int v101 = 0;
        int v102 = *v11;
        int v103 = v11;
        do
        {
          BOOL v104 = v103;
          v103 += v101 + 1;
          int v105 = 2 * v101;
          int v101 = (2 * v101) | 1;
          int v106 = v105 + 2;
          if (v106 < v100 && v103->f32[0] < COERCE_FLOAT(*(_OWORD *)&v103[1]))
          {
            ++v103;
            int v101 = v106;
          }
          *BOOL v104 = *v103;
        }
        while (v101 <= (uint64_t)((unint64_t)(v100 - 2) >> 1));
        if (v103 == --a2)
        {
LABEL_155:
          *int v103 = v102;
        }
        else
        {
          *int v103 = *a2;
          *a2 = v102;
          uint64_t v107 = (char *)v103 - (char *)v11 + 16;
          if (v107 >= 17)
          {
            uint64_t v108 = (((unint64_t)v107 >> 4) - 2) >> 1;
            unint64_t v109 = &v11[v108];
            if (v109->f32[0] < v103->f32[0])
            {
              int v102 = *v103;
              do
              {
                uint64_t v110 = v103;
                int v103 = v109;
                *uint64_t v110 = *v109;
                if (!v108) {
                  break;
                }
                uint64_t v108 = (v108 - 1) >> 1;
                unint64_t v109 = &v11[v108];
              }
              while (v109->f32[0] < v102.f32[0]);
              goto LABEL_155;
            }
          }
        }
        if (v100-- <= 2) {
          return;
        }
        continue;
      }
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    unint64_t v15 = &v11[(unint64_t)v13 >> 1];
    uint64_t v16 = *v10;
    if ((unint64_t)v12 >= 0x801)
    {
      uint64_t v17 = vmovn_s32(vcgtq_f32(*v15, v16)).u8[0];
      if (COERCE_FLOAT(*v15) >= v11->f32[0])
      {
        if (v17)
        {
          int v21 = *v15;
          *unint64_t v15 = *v10;
          *size_t v10 = v21;
          if (v15->f32[0] < v11->f32[0])
          {
            int v22 = *v11;
            *unint64_t v11 = *v15;
            *unint64_t v15 = v22;
          }
        }
      }
      else
      {
        unint64_t v18 = *v11;
        if (v17)
        {
          *unint64_t v11 = *v10;
          goto LABEL_21;
        }
        *unint64_t v11 = *v15;
        *unint64_t v15 = v18;
        if (v10->f32[0] < v18.f32[0])
        {
          *unint64_t v15 = *v10;
LABEL_21:
          *size_t v10 = v18;
        }
      }
      int v25 = &v11[v14];
      uint64_t v27 = v25[-1];
      int v26 = v25 - 1;
      uint64_t v28 = v27.f32[0];
      BOOL v29 = a2[-2].f32[0];
      if (v27.f32[0] >= v11[1].f32[0])
      {
        if (v29 < v28)
        {
          int v31 = *v26;
          *int v26 = a2[-2];
          a2[-2] = v31;
          if (v26->f32[0] < v11[1].f32[0])
          {
            BOOL v32 = v11[1];
            v11[1] = *v26;
            *int v26 = v32;
          }
        }
      }
      else
      {
        int v30 = v11[1];
        if (v29 < v28)
        {
          v11[1] = a2[-2];
          goto LABEL_33;
        }
        v11[1] = *v26;
        *int v26 = v30;
        if (a2[-2].f32[0] < v30.f32[0])
        {
          *int v26 = a2[-2];
LABEL_33:
          a2[-2] = v30;
        }
      }
      int v33 = &v11[v14];
      uint64_t v35 = v33[1];
      int v34 = v33 + 1;
      int v36 = v35.f32[0];
      long long v37 = a2[-3].f32[0];
      if (v35.f32[0] >= v11[2].f32[0])
      {
        if (v37 < v36)
        {
          BOOL v39 = *v34;
          void *v34 = a2[-3];
          a2[-3] = v39;
          if (v34->f32[0] < v11[2].f32[0])
          {
            int v40 = v11[2];
            v11[2] = *v34;
            void *v34 = v40;
          }
        }
      }
      else
      {
        int v38 = v11[2];
        if (v37 < v36)
        {
          v11[2] = a2[-3];
          goto LABEL_42;
        }
        v11[2] = *v34;
        void *v34 = v38;
        if (a2[-3].f32[0] < v38.f32[0])
        {
          void *v34 = a2[-3];
LABEL_42:
          a2[-3] = v38;
        }
      }
      int v41 = *v26;
      BOOL v42 = *v34;
      int v43 = vmovn_s32(vcgtq_f32(*v15, *v34)).u8[0];
      if (vmovn_s32(vcgtq_f32(*v26, *v15)).u8[0])
      {
        long long v44 = *v26;
        if (v43)
        {
          *int v26 = *v34;
          void *v34 = v44;
          long long v44 = *v15;
        }
        else
        {
          *int v26 = *v15;
          *unint64_t v15 = v44;
          if (v42.f32[0] < v44.f32[0])
          {
            int v46 = *v34;
            *unint64_t v15 = *v34;
            void *v34 = v44;
            long long v44 = v46;
          }
        }
      }
      else
      {
        long long v44 = *v15;
        if (v43)
        {
          BOOL v45 = *v34;
          *unint64_t v15 = *v34;
          void *v34 = v44;
          if (v45.f32[0] < v41.f32[0])
          {
            long long v44 = *v26;
            *int v26 = v45;
            *unint64_t v15 = v44;
          }
          else
          {
            long long v44 = v45;
          }
        }
      }
      int v47 = *v11;
      *unint64_t v11 = v44;
      *unint64_t v15 = v47;
      goto LABEL_53;
    }
    uint64_t v19 = vmovn_s32(vcgtq_f32(*v11, v16)).u8[0];
    if (COERCE_FLOAT(*v11) >= v15->f32[0])
    {
      if (v19)
      {
        int v23 = *v11;
        *unint64_t v11 = *v10;
        *size_t v10 = v23;
        if (v11->f32[0] < v15->f32[0])
        {
          int v24 = *v15;
          *unint64_t v15 = *v11;
          *unint64_t v11 = v24;
        }
      }
      goto LABEL_53;
    }
    int v20 = *v15;
    if (v19)
    {
      *unint64_t v15 = *v10;
LABEL_30:
      *size_t v10 = v20;
      goto LABEL_53;
    }
    *unint64_t v15 = *v11;
    *unint64_t v11 = v20;
    if (v10->f32[0] < v20.f32[0])
    {
      *unint64_t v11 = *v10;
      goto LABEL_30;
    }
LABEL_53:
    --a3;
    if (a4)
    {
      BOOL v48 = *v11;
LABEL_56:
      int v49 = v11;
      do
      {
        BOOL v50 = v49;
        int v51 = v49[1];
        ++v49;
      }
      while (v51.f32[0] < v48.f32[0]);
      BOOL v52 = a2;
      if (v50 == v11)
      {
        BOOL v52 = a2;
        do
        {
          if (v49 >= v52) {
            break;
          }
          int v54 = v52[-1];
          --v52;
        }
        while (v54.f32[0] >= v48.f32[0]);
      }
      else
      {
        do
        {
          int v53 = v52[-1];
          --v52;
        }
        while (v53.f32[0] >= v48.f32[0]);
      }
      if (v49 < v52)
      {
        uint64_t v55 = v49;
        unsigned __int32 v56 = v52;
        do
        {
          BOOL v57 = *v55;
          *uint64_t v55 = *v56;
          *unsigned __int32 v56 = v57;
          do
          {
            BOOL v50 = v55;
            int v58 = v55[1];
            ++v55;
          }
          while (v58.f32[0] < v48.f32[0]);
          do
          {
            int v59 = v56[-1];
            --v56;
          }
          while (v59.f32[0] >= v48.f32[0]);
        }
        while (v55 < v56);
      }
      if (v50 != v11) {
        *unint64_t v11 = *v50;
      }
      *BOOL v50 = v48;
      if (v49 < v52) {
        goto LABEL_75;
      }
      long long v60 = sub_25B44347C((uint64_t)v11, v50);
      unint64_t v11 = v50 + 1;
      if (sub_25B44347C((uint64_t)&v50[1], a2))
      {
        a2 = v50;
        if (v60) {
          return;
        }
        goto LABEL_1;
      }
      if (!v60)
      {
LABEL_75:
        sub_25B4428B8(a1, v50, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = v50 + 1;
      }
    }
    else
    {
      BOOL v48 = *v11;
      if (v11[-1].f32[0] < COERCE_FLOAT(*v11)) {
        goto LABEL_56;
      }
      if (v48.f32[0] < v10->f32[0])
      {
        do
        {
          int v61 = v11[1];
          ++v11;
        }
        while (v48.f32[0] >= v61.f32[0]);
      }
      else
      {
        BOOL v62 = v11 + 1;
        do
        {
          unint64_t v11 = v62;
          if (v62 >= a2) {
            break;
          }
          ++v62;
        }
        while (v48.f32[0] >= COERCE_FLOAT(*v11));
      }
      int v63 = a2;
      if (v11 < a2)
      {
        int v63 = a2;
        do
        {
          int v64 = v63[-1];
          --v63;
        }
        while (v48.f32[0] < v64.f32[0]);
      }
      while (v11 < v63)
      {
        BOOL v65 = *v11;
        *unint64_t v11 = *v63;
        uint64_t *v63 = v65;
        do
        {
          int v66 = v11[1];
          ++v11;
        }
        while (v48.f32[0] >= v66.f32[0]);
        do
        {
          long long v67 = v63[-1];
          --v63;
        }
        while (v48.f32[0] < v67.f32[0]);
      }
      BOOL v68 = v11 - 1;
      BOOL v4 = &v11[-1] >= (float32x4_t *)a1;
      BOOL v5 = &v11[-1] == (float32x4_t *)a1;
      if (&v11[-1] != (float32x4_t *)a1) {
        *(float32x4_t *)a1 = *v68;
      }
      a4 = 0;
      *BOOL v68 = v48;
    }
  }
  switch(v13)
  {
    case 0:
    case 1:
      return;
    case 2:
      if (v10->f32[0] >= v11->f32[0]) {
        return;
      }
      int v69 = *v11;
      goto LABEL_100;
    case 3:
      int v70 = v11[1].f32[0];
      long long v71 = v10->f32[0];
      if (v70 >= v11->f32[0])
      {
        if (v71 < v70)
        {
          int v112 = v11[1];
          v11[1] = *v10;
          *size_t v10 = v112;
          if (v11[1].f32[0] < v11->f32[0])
          {
            BOOL v113 = *v11;
            *unint64_t v11 = v11[1];
            v11[1] = v113;
          }
        }
      }
      else
      {
        int v69 = *v11;
        if (v71 < v70)
        {
LABEL_100:
          *unint64_t v11 = *v10;
LABEL_101:
          *size_t v10 = v69;
          return;
        }
        *unint64_t v11 = v11[1];
        v11[1] = v69;
        if (v10->f32[0] < v69.f32[0])
        {
          v11[1] = *v10;
          goto LABEL_101;
        }
      }
      break;
    case 4:
      sub_25B443384((__n128 *)v11, v11 + 1, v11 + 2, a2 - 1);
      return;
    case 5:
      unint64_t v72 = v11 + 2;
      unint64_t v73 = v11 + 3;
      sub_25B443384((__n128 *)v11, v11 + 1, v11 + 2, v11 + 3);
      if (v10->f32[0] < v11[3].f32[0])
      {
        BOOL v74 = *v73;
        uint64_t *v73 = *v10;
        *size_t v10 = v74;
        if (v73->f32[0] < v72->f32[0])
        {
          uint64_t v75 = *v72;
          unint64_t v76 = *v73;
          char *v72 = *v73;
          uint64_t *v73 = v75;
          if (v76.f32[0] < v11[1].f32[0])
          {
            unint64_t v77 = v11[1];
            v11[1] = v76;
            v11[2] = v77;
            if (v76.f32[0] < v11->f32[0])
            {
              int v78 = *v11;
              *unint64_t v11 = v76;
              v11[1] = v78;
            }
          }
        }
      }
      return;
    default:
      JUMPOUT(0);
  }
}

  std::string::size_type v9 = a2;
  unint64_t i = a2 - 1;
  uint64_t j = a1;
  while (1)
  {
    uint64_t v12 = j;
    unint64_t v13 = (char *)v9 - (char *)j;
    unint64_t v14 = v9 - j;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0:
        case 1:
          return;
        case 2:
          unint64_t v144 = *a3;
          unint64_t v311 = (unint64_t)*i;
          unint64_t v145 = *(_DWORD *)sub_25B446760(v144, (int *)&v311 + 1, (int *)&v311);
          BOOL v146 = *a3;
          v310 = (unint64_t)*v12;
          if (v145 <= *(_DWORD *)sub_25B446760(v146, (int *)&v310 + 1, (int *)&v310))
          {
            float32x2_t v267 = *a3;
            float v268 = *i;
            HIDWORD(v311) = HIDWORD(*(unint64_t *)i);
            LODWORD(v311) = v268.i32[0];
            float v269 = *(_DWORD *)sub_25B446760(v267, (int *)&v311 + 1, (int *)&v311);
            float32x2_t v270 = *a3;
            unint64_t v271 = *v12;
            HIDWORD(v310) = HIDWORD(*(unint64_t *)v12);
            LODWORD(v310) = v271.i32[0];
            if (v269 != *(_DWORD *)sub_25B446760(v270, (int *)&v310 + 1, (int *)&v310)) {
              return;
            }
            long long v148 = *i;
            unint64_t v272 = HIDWORD(*(unint64_t *)i);
            int v147 = *v12;
            v273 = HIDWORD(*(unint64_t *)v12);
            if (v272 >= v273 && (v272 != v273 || (vcgt_s32(v147, v148).u8[0] & 1) == 0)) {
              return;
            }
          }
          else
          {
            int v147 = *v12;
            long long v148 = *i;
          }
          *uint64_t v12 = v148;
          long long *i = v147;
          return;
        case 3:
          sub_25B44A050(v12, v12 + 1, i, a3);
          return;
        case 4:
          sub_25B44A4CC(v12, v12 + 1, v12 + 2, i, a3);
          return;
        case 5:
          sub_25B44A7AC(v12, v12 + 1, v12 + 2, v12 + 3, i, a3);
          return;
        default:
          JUMPOUT(0);
      }
    }
    uint64_t v303 = v12;
    if (v13 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v12 == v9) {
        return;
      }
      float v179 = (unint64_t)(v14 - 2) >> 1;
      float32x2_t v180 = v179;
      do
      {
        float32x2_t v181 = v180;
        if (v179 >= v180)
        {
          v182 = (2 * v180) | 1;
          v183 = &v12[v182];
          if (2 * v180 + 2 < v14)
          {
            v184 = *a3;
            unint64_t v311 = (unint64_t)*v183;
            v185 = *(_DWORD *)sub_25B446760(v184, (int *)&v311 + 1, (int *)&v311);
            v186 = *a3;
            v310 = (unint64_t)v183[1];
            if (v185 > *(_DWORD *)sub_25B446760(v186, (int *)&v310 + 1, (int *)&v310)
              || (v187 = *a3,
                  unint64_t v311 = (unint64_t)*v183,
                  uint64_t v188 = *(_DWORD *)sub_25B446760(v187, (int *)&v311 + 1, (int *)&v311),
                  v189 = *a3,
                  v310 = (unint64_t)v183[1],
                  v188 == *(_DWORD *)sub_25B446760(v189, (int *)&v310 + 1, (int *)&v310))
              && ((uint64_t v190 = v183[1], v191 = HIDWORD(*(unint64_t *)v183), v191 < v190.i32[1])
               || v191 == v190.i32[1] && (vcgt_s32(v190, *v183).u8[0] & 1) != 0))
            {
              ++v183;
              v182 = 2 * v181 + 2;
            }
          }
          unint64_t v192 = *a3;
          unint64_t v311 = (unint64_t)*v183;
          v193 = *(_DWORD *)sub_25B446760(v192, (int *)&v311 + 1, (int *)&v311);
          uint64_t v194 = *a3;
          uint64_t v12 = v303;
          v310 = (unint64_t)v303[v181];
          if (v193 <= *(_DWORD *)sub_25B446760(v194, (int *)&v310 + 1, (int *)&v310))
          {
            v195 = *a3;
            unint64_t v311 = (unint64_t)*v183;
            v196 = *(_DWORD *)sub_25B446760(v195, (int *)&v311 + 1, (int *)&v311);
            v197 = *a3;
            v310 = (unint64_t)v303[v181];
            v198 = (_DWORD *)sub_25B446760(v197, (int *)&v310 + 1, (int *)&v310);
            uint64_t v199 = v303[v181];
            unint64_t v200 = *v183;
            if (v196 != *v198
              || v200.i32[1] >= v199.i32[1] && (v200.i32[1] != v199.i32[1] || (vcgt_s32(v199, v200).u8[0] & 1) == 0))
            {
              v303[v181] = v200;
              if (v179 < v182) {
                goto LABEL_190;
              }
              unint64_t v201 = v199.i32[1];
              v299 = v199.i32[0];
              v301 = v199;
              while (1)
              {
                unint64_t v307 = v183;
                v202 = 2 * v182;
                v182 = (2 * v182) | 1;
                v183 = &v12[v182];
                v203 = v202 + 2;
                if (v202 + 2 < v14)
                {
                  v204 = *a3;
                  unint64_t v311 = (unint64_t)*v183;
                  v205 = *(_DWORD *)sub_25B446760(v204, (int *)&v311 + 1, (int *)&v311);
                  float32x2_t v206 = *a3;
                  v310 = (unint64_t)v183[1];
                  if (v205 > *(_DWORD *)sub_25B446760(v206, (int *)&v310 + 1, (int *)&v310)
                    || (v207 = *a3,
                        unint64_t v311 = (unint64_t)*v183,
                        v208 = *(_DWORD *)sub_25B446760(v207, (int *)&v311 + 1, (int *)&v311),
                        v209 = *a3,
                        v310 = (unint64_t)v183[1],
                        v208 == *(_DWORD *)sub_25B446760(v209, (int *)&v310 + 1, (int *)&v310)
                     && ((v210 = v183[1], v211 = HIDWORD(*(unint64_t *)v183), v211 < v210.i32[1])
                      || v211 == v210.i32[1] && (vcgt_s32(v210, *v183).u8[0] & 1) != 0)))
                  {
                    ++v183;
                    v182 = v203;
                  }
                }
                uint64_t v212 = *a3;
                unint64_t v311 = (unint64_t)*v183;
                uint64_t v213 = *(_DWORD *)sub_25B446760(v212, (int *)&v311 + 1, (int *)&v311);
                int v214 = *a3;
                v310 = __PAIR64__(v201, v299);
                if (v213 > *(_DWORD *)sub_25B446760(v214, (int *)&v310 + 1, (int *)&v310))
                {
                  uint64_t v12 = v303;
                  v183 = v307;
                  float v179 = (unint64_t)(v14 - 2) >> 1;
                  uint64_t v199 = v301;
                  goto LABEL_190;
                }
                uint64_t v215 = *a3;
                uint64_t v216 = *v183;
                HIDWORD(v311) = HIDWORD(*(unint64_t *)v183);
                LODWORD(v311) = v216.i32[0];
                v217 = *(_DWORD *)sub_25B446760(v215, (int *)&v311 + 1, (int *)&v311);
                v218 = *a3;
                v310 = __PAIR64__(v201, v299);
                v219 = (_DWORD *)sub_25B446760(v218, (int *)&v310 + 1, (int *)&v310);
                v220 = *v183;
                uint64_t v12 = v303;
                float v179 = (unint64_t)(v14 - 2) >> 1;
                uint64_t v199 = v301;
                if (v217 == *v219
                  && (v220.i32[1] < v201 || v220.i32[1] == v201 && (vcgt_s32(v301, v220).u8[0] & 1) != 0))
                {
                  break;
                }
                *unint64_t v307 = v220;
                if ((uint64_t)((unint64_t)(v14 - 2) >> 1) < v182) {
                  goto LABEL_190;
                }
              }
              v183 = v307;
LABEL_190:
              void *v183 = v199;
            }
          }
        }
        float32x2_t v180 = v181 - 1;
      }
      while (v181);
      v221 = (unint64_t)v13 >> 3;
      while (1)
      {
        v222 = 0;
        uint64_t v223 = *v12;
        int v224 = v12;
        do
        {
          v225 = v224;
          v224 += v222 + 1;
          v226 = 2 * v222;
          v222 = (2 * v222) | 1;
          float32x2_t v227 = v226 + 2;
          if (v226 + 2 < v221)
          {
            float32x2_t v228 = *a3;
            float32x2_t v229 = *v224;
            HIDWORD(v311) = HIDWORD(*(unint64_t *)v224);
            LODWORD(v311) = v229.i32[0];
            float v230 = *(_DWORD *)sub_25B446760(v228, (int *)&v311 + 1, (int *)&v311);
            float v231 = *a3;
            v310 = (unint64_t)v224[1];
            if (v230 > *(_DWORD *)sub_25B446760(v231, (int *)&v310 + 1, (int *)&v310)) {
              goto LABEL_200;
            }
            float v232 = *a3;
            BOOL v233 = *v224;
            HIDWORD(v311) = HIDWORD(*(unint64_t *)v224);
            LODWORD(v311) = v233.i32[0];
            BOOL v234 = *(_DWORD *)sub_25B446760(v232, (int *)&v311 + 1, (int *)&v311);
            int v235 = *a3;
            v310 = (unint64_t)v224[1];
            if (v234 == *(_DWORD *)sub_25B446760(v235, (int *)&v310 + 1, (int *)&v310))
            {
              uint64_t v236 = v224[1];
              int v237 = HIDWORD(*(unint64_t *)v224);
              if (v237 < v236.i32[1] || v237 == v236.i32[1] && (vcgt_s32(v236, *v224).u8[0] & 1) != 0)
              {
LABEL_200:
                ++v224;
                v222 = v227;
              }
            }
          }
          float32x2_t *v225 = *v224;
        }
        while (v222 <= (uint64_t)((unint64_t)(v221 - 2) >> 1));
        float32x4_t v238 = a2 - 1;
        unint64_t v6 = v224 == &a2[-1];
        --a2;
        if (v6) {
          break;
        }
        *int v224 = *v238;
        *float32x4_t v238 = v223;
        uint64_t v12 = v303;
        float32x4_t v239 = (char *)v224 - (char *)v303 + 8;
        if (v239 >= 9)
        {
          float32x4_t v240 = ((unint64_t)v239 >> 3) - 2;
          unint64_t v241 = v240 >> 1;
          unint64_t v242 = &v303[v240 >> 1];
          uint64_t v243 = *a3;
          unint64_t v311 = (unint64_t)*v242;
          v244 = *(_DWORD *)sub_25B446760(v243, (int *)&v311 + 1, (int *)&v311);
          unint64_t v245 = *a3;
          v246 = *v224;
          HIDWORD(v310) = HIDWORD(*(unint64_t *)v224);
          LODWORD(v310) = v246.i32[0];
          if (v244 <= *(_DWORD *)sub_25B446760(v245, (int *)&v310 + 1, (int *)&v310))
          {
            v260 = *a3;
            int32x2_t v261 = (unint64_t)*v242;
            HIDWORD(v311) = HIDWORD(*(unint64_t *)v242);
            LODWORD(v311) = v261;
            float32x2_t v262 = *(_DWORD *)sub_25B446760(v260, (int *)&v311 + 1, (int *)&v311);
            float32x2_t v263 = *a3;
            float32x2_t v264 = *v224;
            HIDWORD(v310) = HIDWORD(*(unint64_t *)v224);
            LODWORD(v310) = v264.i32[0];
            unint64_t v6 = v262 == *(_DWORD *)sub_25B446760(v263, (int *)&v310 + 1, (int *)&v310);
            uint64_t v12 = v303;
            if (!v6) {
              goto LABEL_224;
            }
            v247 = *v242;
            float32x2_t v265 = HIDWORD(*(unint64_t *)v242);
            uint64_t v308 = *v224;
            if (v265 >= (int)HIDWORD(*(unint64_t *)v224)
              && (v265 != HIDWORD(*(unint64_t *)v224) || (vcgt_s32(*v224, v247).u8[0] & 1) == 0))
            {
              goto LABEL_224;
            }
          }
          else
          {
            uint64_t v308 = *v224;
            v247 = *v242;
          }
          *int v224 = v247;
          if (v240 >= 2)
          {
            while (1)
            {
              v248 = v242;
              v249 = v241 - 1;
              unint64_t v241 = (v241 - 1) >> 1;
              unint64_t v242 = &v303[v241];
              int v250 = *a3;
              uint64_t v251 = (unint64_t)*v242;
              HIDWORD(v311) = HIDWORD(*(unint64_t *)v242);
              LODWORD(v311) = v251;
              int v252 = *(_DWORD *)sub_25B446760(v250, (int *)&v311 + 1, (int *)&v311);
              uint64_t v253 = *a3;
              v310 = (unint64_t)v308;
              v254 = (_DWORD *)sub_25B446760(v253, (int *)&v310 + 1, (int *)&v310);
              v255 = *v242;
              if (v252 <= *v254)
              {
                v256 = *a3;
                unint64_t v311 = (unint64_t)*v242;
                v257 = *(_DWORD *)sub_25B446760(v256, (int *)&v311 + 1, (int *)&v311);
                v258 = *a3;
                v310 = (unint64_t)v308;
                if (v257 != *(_DWORD *)sub_25B446760(v258, (int *)&v310 + 1, (int *)&v310)) {
                  break;
                }
                v255 = *v242;
                uint64_t v259 = HIDWORD(*(unint64_t *)v242);
                if (v259 >= v308.i32[1] && (v259 != v308.i32[1] || (vcgt_s32(v308, v255).u8[0] & 1) == 0)) {
                  break;
                }
              }
              char *v248 = v255;
              if (v249 <= 1) {
                goto LABEL_222;
              }
            }
            unint64_t v242 = v248;
          }
LABEL_222:
          *unint64_t v242 = v308;
          goto LABEL_223;
        }
LABEL_224:
        if (v221-- <= 2) {
          return;
        }
      }
      *int v224 = v223;
LABEL_223:
      uint64_t v12 = v303;
      goto LABEL_224;
    }
    unint64_t v15 = (unint64_t)v14 >> 1;
    uint64_t v16 = &v12[(unint64_t)v14 >> 1];
    if ((unint64_t)v13 < 0x401)
    {
      sub_25B44A050(v16, v12, i, a3);
    }
    else
    {
      sub_25B44A050(v12, v16, i, a3);
      sub_25B44A050(v12 + 1, v16 - 1, a2 - 2, a3);
      sub_25B44A050(v12 + 2, &v12[v15 + 1], a2 - 3, a3);
      sub_25B44A050(v16 - 1, v16, &v12[v15 + 1], a3);
      uint64_t v17 = *v12;
      *uint64_t v12 = *v16;
      *uint64_t v16 = v17;
    }
    --a4;
    if ((a5 & 1) != 0
      || (unint64_t v18 = *a3,
          unint64_t v311 = (unint64_t)v12[-1],
          uint64_t v19 = *(_DWORD *)sub_25B446760(v18, (int *)&v311 + 1, (int *)&v311),
          int v20 = *a3,
          int v21 = *v12,
          HIDWORD(v310) = HIDWORD(*(unint64_t *)v12),
          LODWORD(v310) = v21.i32[0],
          v19 > *(_DWORD *)sub_25B446760(v20, (int *)&v310 + 1, (int *)&v310)))
    {
LABEL_15:
      int v30 = v12 + 1;
      int v31 = HIDWORD(*(unint64_t *)v12);
      unint64_t v304 = *v12;
      BOOL v32 = *v12;
      while (1)
      {
        int v33 = *a3;
        int v34 = *v30;
        HIDWORD(v311) = HIDWORD(*(unint64_t *)v30);
        LODWORD(v311) = v34.i32[0];
        uint64_t v35 = *(_DWORD *)sub_25B446760(v33, (int *)&v311 + 1, (int *)&v311);
        int v36 = *a3;
        v310 = __PAIR64__(v31, v32);
        if (v35 <= *(_DWORD *)sub_25B446760(v36, (int *)&v310 + 1, (int *)&v310))
        {
          long long v37 = *a3;
          int v38 = *v30;
          HIDWORD(v311) = HIDWORD(*(unint64_t *)v30);
          LODWORD(v311) = v38.i32[0];
          BOOL v39 = *(_DWORD *)sub_25B446760(v37, (int *)&v311 + 1, (int *)&v311);
          int v40 = *a3;
          v310 = __PAIR64__(v31, v32);
          if (v39 != *(_DWORD *)sub_25B446760(v40, (int *)&v310 + 1, (int *)&v310)) {
            break;
          }
          int v41 = HIDWORD(*(unint64_t *)v30);
          if (v41 >= v31 && (v41 != v31 || (vcgt_s32(v304, *v30).u8[0] & 1) == 0)) {
            break;
          }
        }
        ++v30;
      }
      BOOL v42 = v30 - 1;
      if (&v30[-1] == v12)
      {
        unint64_t i = a2;
        if (v30 < a2)
        {
          for (unint64_t i = a2 - 1; ; --i)
          {
            BOOL v52 = *a3;
            int v53 = *i;
            HIDWORD(v311) = HIDWORD(*(unint64_t *)i);
            LODWORD(v311) = v53.i32[0];
            int v54 = *(_DWORD *)sub_25B446760(v52, (int *)&v311 + 1, (int *)&v311);
            uint64_t v55 = *a3;
            v310 = __PAIR64__(v31, v32);
            if (v54 > *(_DWORD *)sub_25B446760(v55, (int *)&v310 + 1, (int *)&v310)) {
              break;
            }
            unsigned __int32 v56 = *a3;
            BOOL v57 = *i;
            HIDWORD(v311) = HIDWORD(*(unint64_t *)i);
            LODWORD(v311) = v57.i32[0];
            int v58 = *(_DWORD *)sub_25B446760(v56, (int *)&v311 + 1, (int *)&v311);
            int v59 = *a3;
            v310 = __PAIR64__(v31, v32);
            if (v58 == *(_DWORD *)sub_25B446760(v59, (int *)&v310 + 1, (int *)&v310))
            {
              long long v60 = HIDWORD(*(unint64_t *)i);
              if (v60 < v31) {
                break;
              }
              int v61 = v60 != v31;
              if (v30 >= i || ((v61 | vcge_s32(*i, v304).u32[0]) & 1) == 0) {
                break;
              }
            }
            else if (v30 >= i)
            {
              break;
            }
          }
        }
      }
      else
      {
        while (1)
        {
          int v43 = *a3;
          long long v44 = *i;
          HIDWORD(v311) = HIDWORD(*(unint64_t *)i);
          LODWORD(v311) = v44.i32[0];
          BOOL v45 = *(_DWORD *)sub_25B446760(v43, (int *)&v311 + 1, (int *)&v311);
          int v46 = *a3;
          v310 = __PAIR64__(v31, v32);
          if (v45 > *(_DWORD *)sub_25B446760(v46, (int *)&v310 + 1, (int *)&v310)) {
            break;
          }
          int v47 = *a3;
          BOOL v48 = *i;
          HIDWORD(v311) = HIDWORD(*(unint64_t *)i);
          LODWORD(v311) = v48.i32[0];
          int v49 = *(_DWORD *)sub_25B446760(v47, (int *)&v311 + 1, (int *)&v311);
          BOOL v50 = *a3;
          v310 = __PAIR64__(v31, v32);
          if (v49 == *(_DWORD *)sub_25B446760(v50, (int *)&v310 + 1, (int *)&v310))
          {
            int v51 = HIDWORD(*(unint64_t *)i);
            if (v51 < v31 || v51 == v31 && (vcgt_s32(v304, *i).u8[0] & 1) != 0) {
              break;
            }
          }
          --i;
        }
      }
      if (v30 < i)
      {
        BOOL v62 = v30;
        int v63 = i;
        do
        {
          int v64 = *v62;
          *v62++ = *v63;
          uint64_t *v63 = v64;
          while (1)
          {
            BOOL v65 = *a3;
            int v66 = *v62;
            HIDWORD(v311) = HIDWORD(*(unint64_t *)v62);
            LODWORD(v311) = v66.i32[0];
            long long v67 = *(_DWORD *)sub_25B446760(v65, (int *)&v311 + 1, (int *)&v311);
            BOOL v68 = *a3;
            v310 = __PAIR64__(v31, v32);
            if (v67 <= *(_DWORD *)sub_25B446760(v68, (int *)&v310 + 1, (int *)&v310))
            {
              int v69 = *a3;
              int v70 = *v62;
              HIDWORD(v311) = HIDWORD(*(unint64_t *)v62);
              LODWORD(v311) = v70.i32[0];
              long long v71 = *(_DWORD *)sub_25B446760(v69, (int *)&v311 + 1, (int *)&v311);
              unint64_t v72 = *a3;
              v310 = __PAIR64__(v31, v32);
              if (v71 != *(_DWORD *)sub_25B446760(v72, (int *)&v310 + 1, (int *)&v310)) {
                break;
              }
              unint64_t v73 = HIDWORD(*(unint64_t *)v62);
              if (v73 >= v31 && (v73 != v31 || (vcgt_s32(v304, *v62).u8[0] & 1) == 0)) {
                break;
              }
            }
            ++v62;
          }
          BOOL v42 = v62 - 1;
          while (1)
          {
            BOOL v74 = *a3;
            uint64_t v75 = (unint64_t)v63[-1];
            --v63;
            unint64_t v311 = v75;
            unint64_t v76 = *(_DWORD *)sub_25B446760(v74, (int *)&v311 + 1, (int *)&v311);
            unint64_t v77 = *a3;
            v310 = __PAIR64__(v31, v32);
            if (v76 > *(_DWORD *)sub_25B446760(v77, (int *)&v310 + 1, (int *)&v310)) {
              break;
            }
            int v78 = *a3;
            int v79 = *v63;
            HIDWORD(v311) = HIDWORD(*(unint64_t *)v63);
            LODWORD(v311) = v79.i32[0];
            int v80 = *(_DWORD *)sub_25B446760(v78, (int *)&v311 + 1, (int *)&v311);
            BOOL v81 = *a3;
            v310 = __PAIR64__(v31, v32);
            if (v80 == *(_DWORD *)sub_25B446760(v81, (int *)&v310 + 1, (int *)&v310))
            {
              int v82 = HIDWORD(*(unint64_t *)v63);
              if (v82 < v31 || v82 == v31 && (vcgt_s32(v304, *v63).u8[0] & 1) != 0) {
                break;
              }
            }
          }
        }
        while (v62 < v63);
      }
      a1 = v303;
      if (v42 != v303) {
        *uint64_t v303 = *v42;
      }
      *BOOL v42 = v304;
      BOOL v5 = v30 >= i;
      std::string::size_type v9 = a2;
      unint64_t i = a2 - 1;
      if (v5)
      {
        int v83 = sub_25B44AB70(v303, v42, a3);
        uint64_t j = v42 + 1;
        if (sub_25B44AB70(v42 + 1, a2, a3))
        {
          a2 = v42;
          if (v83) {
            return;
          }
          goto LABEL_1;
        }
        if (!v83) {
          goto LABEL_61;
        }
      }
      else
      {
LABEL_61:
        sub_25B447000(v303, v42, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t j = v42 + 1;
      }
    }
    else
    {
      int v22 = *a3;
      unint64_t v311 = (unint64_t)v12[-1];
      int v23 = *(_DWORD *)sub_25B446760(v22, (int *)&v311 + 1, (int *)&v311);
      int v24 = *a3;
      int v25 = *v12;
      HIDWORD(v310) = HIDWORD(*(unint64_t *)v12);
      LODWORD(v310) = v25.i32[0];
      int v26 = (_DWORD *)sub_25B446760(v24, (int *)&v310 + 1, (int *)&v310);
      uint64_t v27 = *v12;
      if (v23 == *v26)
      {
        uint64_t v28 = v12[-1];
        BOOL v29 = HIDWORD(*(unint64_t *)v12);
        if (v28.i32[1] < v27.i32[1] || v28.i32[1] == v27.i32[1] && (vcgt_s32(v27, v28).u8[0] & 1) != 0) {
          goto LABEL_15;
        }
      }
      else
      {
        BOOL v29 = HIDWORD(*(unint64_t *)v12);
      }
      uint64_t v84 = *v12;
      unint64_t v85 = *a3;
      unint64_t v305 = *v12;
      unint64_t v311 = __PAIR64__(v29, v27.u32[0]);
      uint64_t v86 = *(_DWORD *)sub_25B446760(v85, (int *)&v311 + 1, (int *)&v311);
      uint64_t v87 = *a3;
      int v88 = *i;
      HIDWORD(v310) = HIDWORD(*(unint64_t *)i);
      LODWORD(v310) = v88.i32[0];
      if (v86 > *(_DWORD *)sub_25B446760(v87, (int *)&v310 + 1, (int *)&v310)) {
        goto LABEL_64;
      }
      int v98 = *a3;
      unint64_t v311 = __PAIR64__(v29, v84);
      int v99 = *(_DWORD *)sub_25B446760(v98, (int *)&v311 + 1, (int *)&v311);
      unint64_t v100 = *a3;
      int v101 = *i;
      HIDWORD(v310) = HIDWORD(*(unint64_t *)i);
      LODWORD(v310) = v101.i32[0];
      if (v99 != *(_DWORD *)sub_25B446760(v100, (int *)&v310 + 1, (int *)&v310)) {
        goto LABEL_75;
      }
      int v102 = HIDWORD(*(unint64_t *)i);
      if (v29 < v102 || v29 == v102 && (vcgt_s32(*i, v305).u8[0] & 1) != 0)
      {
LABEL_64:
        for (uint64_t j = v12 + 1; ; ++j)
        {
          BOOL v89 = *a3;
          unint64_t v311 = __PAIR64__(v29, v84);
          int v90 = *(_DWORD *)sub_25B446760(v89, (int *)&v311 + 1, (int *)&v311);
          int64_t v91 = *a3;
          int64_t v92 = *j;
          HIDWORD(v310) = HIDWORD(*(unint64_t *)j);
          LODWORD(v310) = v92.i32[0];
          if (v90 > *(_DWORD *)sub_25B446760(v91, (int *)&v310 + 1, (int *)&v310)) {
            break;
          }
          int64_t v93 = *a3;
          unint64_t v311 = __PAIR64__(v29, v84);
          uint64_t v94 = *(_DWORD *)sub_25B446760(v93, (int *)&v311 + 1, (int *)&v311);
          unint64_t v95 = *a3;
          int v96 = *j;
          HIDWORD(v310) = HIDWORD(*(unint64_t *)j);
          LODWORD(v310) = v96.i32[0];
          if (v94 == *(_DWORD *)sub_25B446760(v95, (int *)&v310 + 1, (int *)&v310))
          {
            BOOL v97 = HIDWORD(*(unint64_t *)j);
            if (v29 < v97 || v29 == v97 && (vcgt_s32(*j, v305).u8[0] & 1) != 0) {
              break;
            }
          }
        }
LABEL_83:
        int v103 = a2;
      }
      else
      {
LABEL_75:
        uint64_t j = v12 + 1;
        int v103 = a2;
        while (j < v103)
        {
          BOOL v104 = *a3;
          unint64_t v311 = __PAIR64__(v29, v84);
          int v105 = *(_DWORD *)sub_25B446760(v104, (int *)&v311 + 1, (int *)&v311);
          int v106 = *a3;
          uint64_t v107 = *j;
          HIDWORD(v310) = HIDWORD(*(unint64_t *)j);
          LODWORD(v310) = v107.i32[0];
          if (v105 > *(_DWORD *)sub_25B446760(v106, (int *)&v310 + 1, (int *)&v310)) {
            goto LABEL_83;
          }
          uint64_t v108 = *a3;
          unint64_t v311 = __PAIR64__(v29, v84);
          unint64_t v109 = *(_DWORD *)sub_25B446760(v108, (int *)&v311 + 1, (int *)&v311);
          uint64_t v110 = *a3;
          uint64_t v111 = *j;
          HIDWORD(v310) = HIDWORD(*(unint64_t *)j);
          LODWORD(v310) = v111.i32[0];
          int v112 = (_DWORD *)sub_25B446760(v110, (int *)&v310 + 1, (int *)&v310);
          int v103 = a2;
          if (v109 == *v112)
          {
            BOOL v113 = HIDWORD(*(unint64_t *)j);
            if (v29 < v113 || v29 == v113 && (vcgt_s32(*j, v305).u8[0] & 1) != 0) {
              break;
            }
          }
          ++j;
        }
      }
      uint64_t k = v103;
      if (j < v103)
      {
        for (uint64_t k = i; ; --k)
        {
          int v115 = *a3;
          unint64_t v311 = __PAIR64__(v29, v84);
          BOOL v116 = *(_DWORD *)sub_25B446760(v115, (int *)&v311 + 1, (int *)&v311);
          int v117 = *a3;
          long long v118 = *k;
          HIDWORD(v310) = HIDWORD(*(unint64_t *)k);
          LODWORD(v310) = v118.i32[0];
          if (v116 <= *(_DWORD *)sub_25B446760(v117, (int *)&v310 + 1, (int *)&v310))
          {
            int64_t v119 = *a3;
            unint64_t v311 = __PAIR64__(v29, v84);
            uint64_t v120 = *(_DWORD *)sub_25B446760(v119, (int *)&v311 + 1, (int *)&v311);
            unint64_t v121 = *a3;
            unint64_t v122 = *k;
            HIDWORD(v310) = HIDWORD(*(unint64_t *)k);
            LODWORD(v310) = v122.i32[0];
            if (v120 != *(_DWORD *)sub_25B446760(v121, (int *)&v310 + 1, (int *)&v310)) {
              break;
            }
            uint64_t v123 = HIDWORD(*(unint64_t *)k);
            if (v29 >= v123 && (v29 != v123 || (vcgt_s32(*k, v305).u8[0] & 1) == 0)) {
              break;
            }
          }
        }
      }
      while (j < k)
      {
        uint64_t v124 = *j;
        *j++ = *k;
        *uint64_t k = v124;
        while (1)
        {
          int64_t v125 = *a3;
          unint64_t v311 = __PAIR64__(v29, v84);
          int v126 = *(_DWORD *)sub_25B446760(v125, (int *)&v311 + 1, (int *)&v311);
          BOOL v127 = *a3;
          int v128 = *j;
          HIDWORD(v310) = HIDWORD(*(unint64_t *)j);
          LODWORD(v310) = v128.i32[0];
          if (v126 > *(_DWORD *)sub_25B446760(v127, (int *)&v310 + 1, (int *)&v310)) {
            break;
          }
          int v129 = *a3;
          unint64_t v311 = __PAIR64__(v29, v84);
          long long v130 = *(_DWORD *)sub_25B446760(v129, (int *)&v311 + 1, (int *)&v311);
          long long v131 = *a3;
          uint64_t v132 = *j;
          HIDWORD(v310) = HIDWORD(*(unint64_t *)j);
          LODWORD(v310) = v132.i32[0];
          if (v130 == *(_DWORD *)sub_25B446760(v131, (int *)&v310 + 1, (int *)&v310))
          {
            unint64_t v133 = HIDWORD(*(unint64_t *)j);
            if (v29 < v133 || v29 == v133 && (vcgt_s32(*j, v305).u8[0] & 1) != 0) {
              break;
            }
          }
          ++j;
        }
        do
        {
          do
          {
            unint64_t v134 = *a3;
            unint64_t v311 = __PAIR64__(v29, v84);
            unint64_t v135 = *(_DWORD *)sub_25B446760(v134, (int *)&v311 + 1, (int *)&v311);
            int v136 = *a3;
            int v137 = (unint64_t)k[-1];
            --k;
            v310 = v137;
          }
          while (v135 > *(_DWORD *)sub_25B446760(v136, (int *)&v310 + 1, (int *)&v310));
          int v138 = *a3;
          unint64_t v311 = __PAIR64__(v29, v84);
          BOOL v139 = *(_DWORD *)sub_25B446760(v138, (int *)&v311 + 1, (int *)&v311);
          int v140 = *a3;
          int v141 = *k;
          HIDWORD(v310) = HIDWORD(*(unint64_t *)k);
          LODWORD(v310) = v141.i32[0];
          if (v139 != *(_DWORD *)sub_25B446760(v140, (int *)&v310 + 1, (int *)&v310)) {
            break;
          }
          uint64_t v142 = HIDWORD(*(unint64_t *)k);
        }
        while (v29 < v142 || v29 == v142 && (vcgt_s32(*k, v305).u8[0] & 1) != 0);
      }
      uint64_t v143 = j - 1;
      BOOL v5 = &j[-1] >= v12;
      unint64_t v6 = &j[-1] == v12;
      if (&j[-1] != v12) {
        *uint64_t v12 = *v143;
      }
      a5 = 0;
      *uint64_t v143 = v305;
      std::string::size_type v9 = a2;
    }
  }
  unint64_t v149 = v12 + 1;
  int v151 = v12 == v9 || v149 == v9;
  if ((a5 & 1) == 0)
  {
    if (v151) {
      return;
    }
    while (1)
    {
      v274 = v12;
      v275 = v149;
      long long v276 = *a3;
      unint64_t v311 = (unint64_t)v12[1];
      long long v277 = *(_DWORD *)sub_25B446760(v276, (int *)&v311 + 1, (int *)&v311);
      v278 = *a3;
      float32x2_t v279 = *v274;
      HIDWORD(v310) = HIDWORD(*(unint64_t *)v274);
      LODWORD(v310) = v279.i32[0];
      v280 = (_DWORD *)sub_25B446760(v278, (int *)&v310 + 1, (int *)&v310);
      v281 = v274[1];
      if (v277 > *v280) {
        break;
      }
      v293 = *a3;
      unint64_t v311 = (unint64_t)v274[1];
      unint64_t v294 = *(_DWORD *)sub_25B446760(v293, (int *)&v311 + 1, (int *)&v311);
      v295 = *a3;
      v296 = *v274;
      HIDWORD(v310) = HIDWORD(*(unint64_t *)v274);
      LODWORD(v310) = v296.i32[0];
      if (v294 == *(_DWORD *)sub_25B446760(v295, (int *)&v310 + 1, (int *)&v310))
      {
        v281 = *v275;
        float32x2_t v282 = HIDWORD(*(unint64_t *)v275);
        v297 = HIDWORD(*(unint64_t *)v274);
        if (v282 < v297 || v282 == v297 && (vcgt_s32(*v274, v281).u32[0] & 1) != 0) {
          goto LABEL_235;
        }
      }
LABEL_246:
      uint64_t v12 = v275;
      unint64_t v149 = v275 + 1;
      if (&v275[1] == a2) {
        return;
      }
    }
    float32x2_t v282 = HIDWORD(*(void *)&v274[1]);
LABEL_235:
    long long v309 = v281;
    float v283 = v281.i32[0];
    do
    {
      do
      {
        int v284 = v274;
        v274[1] = *v274;
        uint64_t v285 = *a3;
        unint64_t v311 = __PAIR64__(v282, v283);
        int v286 = *(_DWORD *)sub_25B446760(v285, (int *)&v311 + 1, (int *)&v311);
        float32x4_t v287 = *a3;
        float32x4_t v288 = (unint64_t)v274[-1];
        --v274;
        v310 = v288;
      }
      while (v286 > *(_DWORD *)sub_25B446760(v287, (int *)&v310 + 1, (int *)&v310));
      float32x4_t v289 = *a3;
      unint64_t v311 = __PAIR64__(v282, v283);
      unint64_t v290 = *(_DWORD *)sub_25B446760(v289, (int *)&v311 + 1, (int *)&v311);
      unint64_t v291 = *a3;
      v310 = (unint64_t)v284[-1];
      if (v290 != *(_DWORD *)sub_25B446760(v291, (int *)&v310 + 1, (int *)&v310)) {
        break;
      }
      uint64_t v292 = v284[-1];
    }
    while (v282 < v292.i32[1] || v282 == v292.i32[1] && (vcgt_s32(v292, v309).u8[0] & 1) != 0);
    *int v284 = v309;
    goto LABEL_246;
  }
  if (v151) {
    return;
  }
  int v152 = 0;
  BOOL v153 = v12;
  while (2)
  {
    int v154 = v153;
    BOOL v153 = v149;
    int v155 = *a3;
    unint64_t v311 = (unint64_t)v154[1];
    uint64_t v156 = *(_DWORD *)sub_25B446760(v155, (int *)&v311 + 1, (int *)&v311);
    unint64_t v157 = *a3;
    int v158 = *v154;
    HIDWORD(v310) = HIDWORD(*(unint64_t *)v154);
    LODWORD(v310) = v158.i32[0];
    if (v156 > *(_DWORD *)sub_25B446760(v157, (int *)&v310 + 1, (int *)&v310))
    {
      unint64_t v306 = v154[1];
      BOOL v159 = *v154;
      int v160 = a2;
    }
    else
    {
      v172 = *a3;
      unint64_t v311 = (unint64_t)v154[1];
      BOOL v173 = *(_DWORD *)sub_25B446760(v172, (int *)&v311 + 1, (int *)&v311);
      float32x2_t v174 = *a3;
      float32x2_t v175 = *v154;
      HIDWORD(v310) = HIDWORD(*(unint64_t *)v154);
      LODWORD(v310) = v175.i32[0];
      float32x2_t v176 = (_DWORD *)sub_25B446760(v174, (int *)&v310 + 1, (int *)&v310);
      int v160 = a2;
      if (v173 != *v176) {
        goto LABEL_154;
      }
      unint64_t v306 = *v153;
      float32x2_t v177 = HIDWORD(*(unint64_t *)v153);
      BOOL v159 = *v154;
      float v178 = HIDWORD(*(unint64_t *)v154);
      if (v177 >= v178 && (v177 != v178 || (vcgt_s32(v159, v306).u8[0] & 1) == 0)) {
        goto LABEL_154;
      }
    }
    v154[1] = v159;
    long long v161 = v12;
    long long v162 = v306;
    if (v154 == v12) {
      goto LABEL_153;
    }
    long long v163 = v152;
    while (2)
    {
      long long v164 = (int32x2_t *)((char *)v12 + v163);
      long long v165 = *a3;
      unint64_t v311 = (unint64_t)v306;
      uint64_t v166 = *(_DWORD *)sub_25B446760(v165, (int *)&v311 + 1, (int *)&v311);
      uint64_t v167 = *a3;
      v310 = (unint64_t)v164[-1];
      if (v166 > *(_DWORD *)sub_25B446760(v167, (int *)&v310 + 1, (int *)&v310))
      {
        uint64_t v168 = v164[-1];
        uint64_t v12 = v303;
LABEL_143:
        --v154;
        *long long v164 = v168;
        v163 -= 8;
        if (!v163)
        {
          long long v161 = v12;
          goto LABEL_152;
        }
        continue;
      }
      break;
    }
    uint64_t v169 = *a3;
    unint64_t v311 = (unint64_t)v306;
    uint64_t v170 = *(_DWORD *)sub_25B446760(v169, (int *)&v311 + 1, (int *)&v311);
    v171 = *a3;
    v310 = (unint64_t)v164[-1];
    if (v170 != *(_DWORD *)sub_25B446760(v171, (int *)&v310 + 1, (int *)&v310))
    {
      uint64_t v12 = v303;
      long long v161 = (int32x2_t *)((char *)v303 + v163);
      goto LABEL_152;
    }
    uint64_t v168 = v164[-1];
    uint64_t v12 = v303;
    if (v306.i32[1] < v168.i32[1] || v306.i32[1] == v168.i32[1] && (vcgt_s32(v168, v306).u8[0] & 1) != 0) {
      goto LABEL_143;
    }
    long long v161 = v154;
LABEL_152:
    int v160 = a2;
    long long v162 = v306;
LABEL_153:
    *long long v161 = v162;
LABEL_154:
    unint64_t v149 = v153 + 1;
    v152 += 8;
    if (&v153[1] != v160) {
      continue;
    }
    break;
  }
}

  unint64_t v11 = a2 - 2;
  uint64_t j = a1;
  while (1)
  {
    a1 = j;
    unint64_t v13 = (char *)a2 - (char *)j;
    unint64_t v14 = ((char *)a2 - (char *)j) >> 4;
    if (v6 || !v5) {
      break;
    }
    if (v13 <= 383)
    {
      int v96 = j + 2;
      int v98 = j == a2 || v96 == a2;
      if (a4)
      {
        if (v98) {
          return a5.n128_f64[0];
        }
        int v99 = 0;
        unint64_t v100 = j;
        while (2)
        {
          int v101 = v100;
          unint64_t v100 = v96;
          int v102 = v101[3].i32[1];
          int v103 = v101[1].i32[1];
          if (v102 > v103)
          {
            a5.n128_u32[0] = v101[3].u32[0];
            goto LABEL_173;
          }
          if (v102 >= v103)
          {
            a5.n128_u32[0] = v101[3].u32[0];
            uint64_t v111 = v101[1].f32[0];
            if (a5.n128_f32[0] > v111
              || a5.n128_f32[0] >= v111
              && ((int v112 = vcgt_f32(*v101, *v100), (v112.i8[0] & 1) != 0)
               || (vmvn_s8((int8x8_t)vcgt_f32(*v100, *v101)).u8[0] & 1) != 0 && (v112.i8[4] & 1) != 0))
            {
LABEL_173:
              BOOL v104 = v101[2];
              *(_OWORD *)v100->f32 = *(_OWORD *)v101->f32;
              int v105 = j;
              if (v101 != j)
              {
                int v106 = v99;
                while (1)
                {
                  uint64_t v107 = (float32x2_t *)((char *)j + v106 - 16);
                  uint64_t v108 = *(__int32 *)((char *)&j->i32[-1] + v106);
                  if (v102 <= v108)
                  {
                    if (v102 < v108) {
                      goto LABEL_191;
                    }
                    unint64_t v109 = *(float *)((char *)j[-1].f32 + v106);
                    if (a5.n128_f32[0] <= v109)
                    {
                      if (a5.n128_f32[0] < v109)
                      {
LABEL_191:
                        int v105 = v101;
                        goto LABEL_192;
                      }
                      uint64_t v110 = vcgt_f32(*v107, v104);
                      if ((v110.i8[0] & 1) == 0
                        && ((vmvn_s8((int8x8_t)vcgt_f32(v104, *v107)).u8[0] & 1) == 0 || (v110.i8[4] & 1) == 0))
                      {
                        break;
                      }
                    }
                  }
                  v101 -= 2;
                  *(_OWORD *)((char *)j->f32 + v106) = *(_OWORD *)v107->f32;
                  v106 -= 16;
                  if (!v106)
                  {
                    int v105 = j;
                    goto LABEL_192;
                  }
                }
                int v105 = (float32x2_t *)((char *)j + v106);
              }
LABEL_192:
              *int v105 = v104;
              v105[1].i32[0] = a5.n128_u32[0];
              v105[1].i32[1] = v102;
            }
          }
          int v96 = v100 + 2;
          v99 += 16;
          if (&v100[2] == a2) {
            return a5.n128_f64[0];
          }
          continue;
        }
      }
      if (v98) {
        return a5.n128_f64[0];
      }
      while (2)
      {
        float32x2_t v177 = a1;
        a1 = v96;
        float v178 = v177[3].i32[1];
        float v179 = v177[1].i32[1];
        if (v178 <= v179)
        {
          if (v178 >= v179)
          {
            a5.n128_u32[0] = v177[3].u32[0];
            v186 = v177[1].f32[0];
            if (a5.n128_f32[0] > v186) {
              goto LABEL_314;
            }
            if (a5.n128_f32[0] >= v186)
            {
              v187 = vcgt_f32(*v177, *a1);
              if ((v187.i8[0] & 1) != 0
                || (vmvn_s8((int8x8_t)vcgt_f32(*a1, *v177)).u8[0] & 1) != 0 && (v187.i8[4] & 1) != 0)
              {
                goto LABEL_314;
              }
            }
          }
        }
        else
        {
          a5.n128_u32[0] = v177[3].u32[0];
LABEL_314:
          float32x2_t v180 = *a1;
          while (1)
          {
            do
            {
              float32x2_t v181 = v177;
              *(_OWORD *)v177[2].f32 = *(_OWORD *)v177->f32;
              v177 -= 2;
              v182 = v181[-1].i32[1];
            }
            while (v178 > v182);
            if (v178 < v182) {
              break;
            }
            v183 = v181[-1].f32[0];
            if (a5.n128_f32[0] <= v183)
            {
              if (a5.n128_f32[0] < v183) {
                break;
              }
              v184 = v181[-2];
              v185 = vcgt_f32(v184, v180);
              if ((v185.i8[0] & 1) == 0
                && ((vmvn_s8((int8x8_t)vcgt_f32(v180, v184)).u8[0] & 1) == 0 || (v185.i8[4] & 1) == 0))
              {
                break;
              }
            }
          }
          *float32x2_t v181 = v180;
          v181[1].i32[0] = a5.n128_u32[0];
          v181[1].i32[1] = v178;
        }
        int v96 = a1 + 2;
        if (&a1[2] == a2) {
          return a5.n128_f64[0];
        }
        continue;
      }
    }
    if (!a3)
    {
      if (j == a2) {
        return a5.n128_f64[0];
      }
      BOOL v113 = (v14 - 2) >> 1;
      int v114 = v113;
      while (2)
      {
        int v115 = v114;
        if (v113 < v114) {
          goto LABEL_250;
        }
        BOOL v116 = (2 * v114) | 1;
        int v117 = &j[2 * v116];
        if (2 * v115 + 2 >= (uint64_t)v14) {
          goto LABEL_203;
        }
        long long v118 = v117[1].i32[1];
        int64_t v119 = v117[3].i32[1];
        if (v118 > v119) {
          goto LABEL_201;
        }
        if (v118 >= v119)
        {
          uint64_t v143 = j[2 * v116 + 1].f32[0];
          unint64_t v144 = v117[3].f32[0];
          if (v143 > v144)
          {
LABEL_201:
            uint64_t v120 = v117 + 2;
            unint64_t v121 = 2 * v115 + 2;
          }
          else
          {
            if (v143 < v144) {
              goto LABEL_203;
            }
            unint64_t v145 = v117[2];
            BOOL v146 = vcgt_f32(v145, *v117);
            uint64_t v120 = v117 + 2;
            unint64_t v121 = 2 * v115 + 2;
            if ((v146.i8[0] & 1) == 0)
            {
              uint64_t v120 = &j[2 * v116];
              unint64_t v121 = (2 * v115) | 1;
              if ((vcgt_f32(*v117, v145).u8[0] & 1) == 0)
              {
                if (v146.i8[4]) {
                  uint64_t v120 = v117 + 2;
                }
                else {
                  uint64_t v120 = &j[2 * v116];
                }
                if (v146.i8[4]) {
                  unint64_t v121 = 2 * v115 + 2;
                }
                else {
                  unint64_t v121 = (2 * v115) | 1;
                }
              }
            }
          }
        }
        else
        {
LABEL_203:
          uint64_t v120 = &j[2 * v116];
          unint64_t v121 = (2 * v115) | 1;
        }
        unint64_t v122 = v120[1].i32[1];
        uint64_t v123 = j[2 * v115 + 1].i32[1];
        uint64_t v124 = v122 < v123;
        if (v122 > v123) {
          goto LABEL_250;
        }
        int64_t v125 = &j[2 * v115];
        if (v124)
        {
          int v126 = *v125;
          BOOL v127 = v125[1].f32[0];
          goto LABEL_208;
        }
        int v140 = v120[1].f32[0];
        BOOL v127 = j[2 * v115 + 1].f32[0];
        int v141 = v140 < v127;
        if (v140 > v127) {
          goto LABEL_250;
        }
        int v126 = *v125;
        if (!v141)
        {
          uint64_t v142 = vcgt_f32(v126, *v120);
          if ((v142.i8[0] & 1) != 0
            || (vmvn_s8((int8x8_t)vcgt_f32(*v120, v126)).u8[0] & 1) != 0 && (v142.i8[4] & 1) != 0)
          {
            goto LABEL_250;
          }
        }
LABEL_208:
        *(_OWORD *)v125->f32 = *(_OWORD *)v120->f32;
        if (v113 < v121) {
          goto LABEL_249;
        }
        int64_t v125 = v120;
        int v128 = (2 * v121) | 1;
        int v129 = &j[2 * v128];
        long long v130 = 2 * v121 + 2;
        if (v130 >= (uint64_t)v14) {
          goto LABEL_212;
        }
        long long v131 = v129[1].i32[1];
        uint64_t v132 = v129[3].i32[1];
        if (v131 > v132) {
          goto LABEL_214;
        }
        if (v131 < v132) {
          goto LABEL_212;
        }
        unint64_t v133 = j[2 * v128 + 1].f32[0];
        unint64_t v134 = v129[3].f32[0];
        if (v133 > v134)
        {
LABEL_214:
          uint64_t v120 = v129 + 2;
          unint64_t v121 = v130;
          goto LABEL_215;
        }
        if (v133 < v134)
        {
LABEL_212:
          uint64_t v120 = &j[2 * v128];
          unint64_t v121 = v128;
        }
        else
        {
          int v138 = v129[2];
          BOOL v139 = vcgt_f32(v138, *v129);
          uint64_t v120 = v129 + 2;
          unint64_t v121 = v130;
          if ((v139.i8[0] & 1) == 0)
          {
            uint64_t v120 = &j[2 * v128];
            unint64_t v121 = v128;
            if ((vcgt_f32(*v129, v138).u8[0] & 1) == 0)
            {
              if (v139.i8[4]) {
                uint64_t v120 = v129 + 2;
              }
              else {
                uint64_t v120 = &j[2 * v128];
              }
              if (v139.i8[4]) {
                unint64_t v121 = v130;
              }
              else {
                unint64_t v121 = v128;
              }
            }
          }
        }
LABEL_215:
        unint64_t v135 = v120[1].i32[1];
        if (v135 > v123
          || v135 >= v123
          && ((int v136 = v120[1].f32[0], v136 > v127)
           || v136 >= v127
           && ((int v137 = vcgt_f32(v126, *v120), (v137.i8[0] & 1) != 0)
            || (vmvn_s8((int8x8_t)vcgt_f32(*v120, v126)).u8[0] & 1) != 0 && (v137.i8[4] & 1) != 0)))
        {
          uint64_t v120 = v125;
LABEL_249:
          *uint64_t v120 = v126;
          v120[1].f32[0] = v127;
          v120[1].i32[1] = v123;
LABEL_250:
          int v114 = v115 - 1;
          if (v115) {
            continue;
          }
          int v147 = (unint64_t)v13 >> 4;
          while (2)
          {
            long long v148 = 0;
            v196 = *(_OWORD *)j->f32;
            unint64_t v149 = j;
LABEL_253:
            int v150 = v149;
            int v151 = v148 + 1;
            int v152 = &v150[2 * v148 + 2];
            BOOL v153 = (2 * v148) | 1;
            int v154 = 2 * v148 + 2;
            if (v154 >= v147) {
              goto LABEL_259;
            }
            int v155 = v152[1].i32[1];
            uint64_t v156 = v152[3].i32[1];
            if (v155 > v156) {
              goto LABEL_257;
            }
            if (v155 < v156) {
              goto LABEL_259;
            }
            unint64_t v157 = v150[2 * v151 + 1].f32[0];
            int v158 = v152[3].f32[0];
            if (v157 > v158)
            {
LABEL_257:
              unint64_t v149 = v152 + 2;
              long long v148 = v154;
              goto LABEL_260;
            }
            if (v157 >= v158)
            {
              BOOL v159 = v152[2];
              int v160 = vcgt_f32(v159, *v152);
              unint64_t v149 = v152 + 2;
              long long v148 = v154;
              if ((v160.i8[0] & 1) == 0)
              {
                unint64_t v149 = v152;
                long long v148 = v153;
                if ((vcgt_f32(*v152, v159).u8[0] & 1) == 0)
                {
                  if (v160.i8[4]) {
                    unint64_t v149 = v152 + 2;
                  }
                  else {
                    unint64_t v149 = v152;
                  }
                  if (v160.i8[4]) {
                    long long v148 = v154;
                  }
                  else {
                    long long v148 = v153;
                  }
                }
              }
            }
            else
            {
LABEL_259:
              unint64_t v149 = v152;
              long long v148 = v153;
            }
LABEL_260:
            *(_OWORD *)v150->f32 = *(_OWORD *)v149->f32;
            if (v148 > (uint64_t)((unint64_t)(v147 - 2) >> 1))
            {
              a2 -= 2;
              if (v149 == a2)
              {
                a5.n128_u64[0] = v196;
                *(_OWORD *)v149->f32 = v196;
                goto LABEL_294;
              }
              *(_OWORD *)v149->f32 = *(_OWORD *)a2->f32;
              a5.n128_u64[0] = v196;
              *(_OWORD *)a2->f32 = v196;
              long long v161 = (char *)v149 - (char *)j + 16;
              if (v161 >= 17)
              {
                long long v162 = ((unint64_t)v161 >> 4) - 2;
                long long v163 = v162 >> 1;
                long long v164 = &j[2 * (v162 >> 1)];
                long long v165 = v164[1].i32[1];
                uint64_t v166 = v149[1].i32[1];
                if (v165 > v166)
                {
                  a5.n128_u32[0] = v149[1].u32[0];
                  goto LABEL_275;
                }
                if (v165 >= v166)
                {
                  BOOL v173 = j[2 * v163 + 1].f32[0];
                  a5.n128_u32[0] = v149[1].u32[0];
                  if (v173 > a5.n128_f32[0]
                    || v173 >= a5.n128_f32[0]
                    && ((float32x2_t v174 = vcgt_f32(*v149, *v164), (v174.i8[0] & 1) != 0)
                     || (vmvn_s8((int8x8_t)vcgt_f32(*v164, *v149)).u8[0] & 1) != 0 && (v174.i8[4] & 1) != 0))
                  {
LABEL_275:
                    uint64_t v167 = *v149;
                    *(_OWORD *)v149->f32 = *(_OWORD *)v164->f32;
                    if (v162 >= 2)
                    {
                      while (1)
                      {
                        uint64_t v168 = v164;
                        uint64_t v169 = v163 - 1;
                        long long v163 = (v163 - 1) >> 1;
                        long long v164 = &j[2 * v163];
                        uint64_t v170 = v164[1].i32[1];
                        if (v170 <= v166)
                        {
                          if (v170 < v166) {
                            break;
                          }
                          v171 = j[2 * v163 + 1].f32[0];
                          if (v171 <= a5.n128_f32[0])
                          {
                            if (v171 < a5.n128_f32[0]) {
                              break;
                            }
                            v172 = vcgt_f32(v167, *v164);
                            if ((v172.i8[0] & 1) == 0
                              && ((vmvn_s8((int8x8_t)vcgt_f32(*v164, v167)).u8[0] & 1) == 0 || (v172.i8[4] & 1) == 0))
                            {
                              break;
                            }
                          }
                        }
                        *(_OWORD *)v168->f32 = *(_OWORD *)v164->f32;
                        if (v169 <= 1) {
                          goto LABEL_293;
                        }
                      }
                      long long v164 = v168;
                    }
LABEL_293:
                    *long long v164 = v167;
                    v164[1].i32[0] = a5.n128_u32[0];
                    v164[1].i32[1] = v166;
                  }
                }
              }
LABEL_294:
              uint64_t v124 = v147-- <= 2;
              if (v124) {
                return a5.n128_f64[0];
              }
              continue;
            }
            goto LABEL_253;
          }
        }
        goto LABEL_208;
      }
    }
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = &j[2 * (v14 >> 1)];
    if ((unint64_t)v13 >= 0x801)
    {
      v17.n128_f64[0] = sub_25B44986C(a1, &a1[2 * (v14 >> 1)], a2 - 2, a5);
      v18.n128_f64[0] = sub_25B44986C(a1 + 2, v16 - 2, a2 - 4, v17);
      v19.n128_f64[0] = sub_25B44986C(a1 + 4, &a1[2 * v15 + 2], a2 - 6, v18);
      sub_25B44986C(v16 - 2, v16, &a1[2 * v15 + 2], v19);
      unint64_t v191 = *(__n128 *)a1->f32;
      *(_OWORD *)a1->f32 = *(_OWORD *)v16->f32;
      a5 = v191;
      *(__n128 *)v16->f32 = v191;
    }
    else
    {
      a5.n128_f64[0] = sub_25B44986C(&a1[2 * (v14 >> 1)], a1, a2 - 2, a5);
    }
    --a3;
    if (a4)
    {
      int v20 = a1[1].i32[1];
LABEL_18:
      a5.n128_u64[0] = (unint64_t)*a1;
      uint64_t v27 = a1[1].f32[0];
      for (unint64_t i = a1 + 2; ; i += 2)
      {
        BOOL v29 = i[1].i32[1];
        if (v29 <= v20)
        {
          if (v29 < v20) {
            break;
          }
          int v30 = i[1].f32[0];
          if (v30 <= v27)
          {
            if (v30 < v27) {
              break;
            }
            int v31 = vcgt_f32((float32x2_t)a5.n128_u64[0], *i);
            if ((v31.i8[0] & 1) == 0
              && ((vmvn_s8((int8x8_t)vcgt_f32(*i, (float32x2_t)a5.n128_u64[0])).u32[0] & 1) == 0 || (v31.i8[4] & 1) == 0))
            {
              break;
            }
          }
        }
      }
      if (&i[-2] == a1)
      {
        int v34 = a2;
        if (i < a2)
        {
          BOOL v39 = a2[-1].i32[1];
          int v34 = a2 - 2;
          if (v39 <= v20)
          {
            int v33 = (char *)&a2[-3] + 4;
            int v34 = a2 - 2;
            do
            {
              int v53 = (float32x2_t *)(v33 + 4);
              if (v39 < v20) {
                goto LABEL_70;
              }
              int v54 = *((float *)v33 + 3);
              if (v54 > v27) {
                goto LABEL_39;
              }
              if (v54 >= v27)
              {
                uint64_t v55 = (int8x8_t)vcgt_f32((float32x2_t)a5.n128_u64[0], *v53);
                if ((v55.i8[0] & 1) != 0
                  || ((vcgt_f32(*v53, (float32x2_t)a5.n128_u64[0]).u32[0] | vmvn_s8(v55).i32[1]) & 1) == 0
                  || i >= v53)
                {
                  goto LABEL_39;
                }
              }
              else
              {
LABEL_70:
                if (i >= v53) {
                  break;
                }
              }
              v34 -= 2;
              unsigned __int32 v56 = *(_DWORD *)v33;
              v33 -= 16;
              BOOL v39 = v56;
            }
            while (v56 <= v20);
LABEL_36:
            int v34 = (float32x2_t *)(v33 + 4);
          }
        }
      }
      else
      {
        BOOL v32 = a2[-1].i32[1];
        int v33 = (char *)&a2[-3] + 4;
        int v34 = a2 - 2;
        if (v32 <= v20)
        {
          while (1)
          {
            if (v32 >= v20)
            {
              uint64_t v35 = *((float *)v33 + 3);
              if (v35 > v27) {
                goto LABEL_36;
              }
              if (v35 >= v27)
              {
                int v36 = *(float32x2_t *)(v33 + 4);
                long long v37 = vcgt_f32((float32x2_t)a5.n128_u64[0], v36);
                if ((v37.i8[0] & 1) != 0
                  || (vmvn_s8((int8x8_t)vcgt_f32(v36, (float32x2_t)a5.n128_u64[0])).u32[0] & 1) != 0
                  && (v37.i8[4] & 1) != 0)
                {
                  break;
                }
              }
            }
            v34 -= 2;
            int v38 = *(_DWORD *)v33;
            v33 -= 16;
            BOOL v32 = v38;
            if (v38 > v20) {
              goto LABEL_36;
            }
          }
        }
      }
LABEL_39:
      uint64_t j = i;
      if (i < v34)
      {
        uint64_t j = i;
        int v40 = v34;
        do
        {
          unint64_t v192 = *(_OWORD *)j->f32;
          *(_OWORD *)j->f32 = *(_OWORD *)v40->f32;
          *(_OWORD *)v40->f32 = v192;
          while (1)
          {
            do
            {
              j += 2;
              int v41 = j[1].i32[1];
            }
            while (v41 > v20);
            if (v41 < v20) {
              break;
            }
            BOOL v42 = j[1].f32[0];
            if (v42 <= v27)
            {
              if (v42 < v27) {
                break;
              }
              int v43 = vcgt_f32((float32x2_t)a5.n128_u64[0], *j);
              if ((v43.i8[0] & 1) == 0
                && ((vmvn_s8((int8x8_t)vcgt_f32(*j, (float32x2_t)a5.n128_u64[0])).u32[0] & 1) == 0
                 || (v43.i8[4] & 1) == 0))
              {
                break;
              }
            }
          }
          long long v44 = v40 - 2;
          BOOL v45 = v40[-1].i32[1];
          if (v45 <= v20)
          {
            int v46 = (char *)&v40[-3] + 4;
            do
            {
              if (v45 >= v20)
              {
                int v47 = *((float *)v46 + 3);
                if (v47 > v27) {
                  goto LABEL_59;
                }
                if (v47 >= v27)
                {
                  BOOL v48 = *(float32x2_t *)(v46 + 4);
                  int v49 = vcgt_f32((float32x2_t)a5.n128_u64[0], v48);
                  if (v49.i8[0]) {
                    goto LABEL_59;
                  }
                  if ((vmvn_s8((int8x8_t)vcgt_f32(v48, (float32x2_t)a5.n128_u64[0])).u32[0] & 1) != 0
                    && (v49.i8[4] & 1) != 0)
                  {
                    break;
                  }
                }
              }
              v44 -= 2;
              BOOL v50 = *(_DWORD *)v46;
              v46 -= 16;
              BOOL v45 = v50;
            }
            while (v50 <= v20);
            long long v44 = (float32x2_t *)(v46 + 4);
          }
LABEL_59:
          int v40 = v44;
        }
        while (j < v44);
      }
      if (&j[-2] != a1) {
        *(_OWORD *)a1->f32 = *(_OWORD *)j[-2].f32;
      }
      j[-2] = (float32x2_t)a5.n128_u64[0];
      j[-1].f32[0] = v27;
      j[-1].i32[1] = v20;
      if (i < v34) {
        goto LABEL_65;
      }
      int v51 = sub_25B449BF0(a1, j - 2, a5);
      if (sub_25B449BF0(j, a2, v52))
      {
        a2 = j - 2;
        if (v51) {
          return a5.n128_f64[0];
        }
        goto LABEL_1;
      }
      if (!v51)
      {
LABEL_65:
        sub_25B448820(a1, &j[-2], a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      int v21 = a1[-1].i32[1];
      int v20 = a1[1].i32[1];
      if (v21 > v20) {
        goto LABEL_18;
      }
      if (v21 < v20)
      {
        int v24 = *a1;
        a5.n128_u32[0] = a1[1].u32[0];
      }
      else
      {
        int v22 = a1[-1].f32[0];
        a5.n128_u32[0] = a1[1].u32[0];
        int v23 = v22 < a5.n128_f32[0];
        if (v22 > a5.n128_f32[0]) {
          goto LABEL_18;
        }
        int v24 = *a1;
        if (!v23)
        {
          int v25 = a1[-2];
          int v26 = vcgt_f32(v24, v25);
          if (v26.i8[0] & 1) != 0 || (vmvn_s8((int8x8_t)vcgt_f32(v25, v24)).u32[0] & 1) != 0 && (v26.i8[4]) {
            goto LABEL_18;
          }
        }
      }
      BOOL v57 = a2[-1].i32[1];
      if (v20 > v57
        || v20 >= v57
        && ((int v58 = a2[-1].f32[0], a5.n128_f32[0] > v58)
         || a5.n128_f32[0] >= v58
         && ((BOOL v62 = vcgt_f32(*v11, v24), (v62.i8[0] & 1) != 0)
          || (vmvn_s8((int8x8_t)vcgt_f32(v24, *v11)).u8[0] & 1) != 0 && (v62.i8[4] & 1) != 0)))
      {
        uint64_t j = a1 + 2;
        int v63 = a1[3].i32[1];
        if (v20 <= v63)
        {
          int v64 = a1 + 3;
          do
          {
            if (v20 >= v63)
            {
              if (a5.n128_f32[0] > v64->f32[0]) {
                break;
              }
              if (a5.n128_f32[0] >= v64->f32[0])
              {
                BOOL v65 = v64[-1];
                int v66 = vcgt_f32(v65, v24);
                if ((v66.i8[0] & 1) != 0
                  || (vmvn_s8((int8x8_t)vcgt_f32(v24, v65)).u8[0] & 1) != 0 && (v66.i8[4] & 1) != 0)
                {
                  goto LABEL_105;
                }
              }
            }
            j += 2;
            int v63 = v64[2].i32[1];
            v64 += 2;
          }
          while (v20 <= v63);
          uint64_t j = v64 - 1;
        }
      }
      else
      {
        for (uint64_t j = a1 + 2; j < a2; j += 2)
        {
          int v59 = j[1].i32[1];
          if (v20 > v59) {
            break;
          }
          if (v20 >= v59)
          {
            long long v60 = j[1].f32[0];
            if (a5.n128_f32[0] > v60) {
              break;
            }
            if (a5.n128_f32[0] >= v60)
            {
              int v61 = vcgt_f32(*j, v24);
              if (v61.i8[0] & 1) != 0 || (vmvn_s8((int8x8_t)vcgt_f32(v24, *j)).u8[0] & 1) != 0 && (v61.i8[4]) {
                break;
              }
            }
          }
        }
      }
LABEL_105:
      long long v67 = a2;
      if (j < a2)
      {
        for (uint64_t k = (char *)&a2[-3] + 4; ; k -= 16)
        {
          if (v20 <= v57)
          {
            if (v20 < v57) {
              break;
            }
            int v69 = *((float *)k + 3);
            if (a5.n128_f32[0] <= v69)
            {
              if (a5.n128_f32[0] < v69) {
                break;
              }
              int v70 = *(float32x2_t *)(k + 4);
              long long v71 = vcgt_f32(v70, v24);
              if ((v71.i8[0] & 1) == 0
                && ((vmvn_s8((int8x8_t)vcgt_f32(v24, v70)).u8[0] & 1) == 0 || (v71.i8[4] & 1) == 0))
              {
                break;
              }
            }
          }
          unint64_t v72 = *(_DWORD *)k;
          BOOL v57 = v72;
        }
        long long v67 = (float32x2_t *)(k + 4);
      }
      while (j < v67)
      {
        v193 = *(_OWORD *)j->f32;
        *(_OWORD *)j->f32 = *(_OWORD *)v67->f32;
        *(_OWORD *)v67->f32 = v193;
        unint64_t v73 = j + 2;
        BOOL v74 = j[3].i32[1];
        if (v20 <= v74)
        {
          uint64_t v75 = j + 3;
          do
          {
            if (v20 >= v74)
            {
              if (a5.n128_f32[0] > v75->f32[0]) {
                goto LABEL_117;
              }
              if (a5.n128_f32[0] >= v75->f32[0])
              {
                unint64_t v76 = v75[-1];
                unint64_t v77 = vcgt_f32(v76, v24);
                if (v77.i8[0]) {
                  break;
                }
                if (vmvn_s8((int8x8_t)vcgt_f32(v24, v76)).u8[0] & 1) != 0 && (v77.i8[4]) {
                  goto LABEL_117;
                }
              }
            }
            v73 += 2;
            BOOL v74 = v75[2].i32[1];
            v75 += 2;
          }
          while (v20 <= v74);
          uint64_t j = v75 - 1;
        }
        else
        {
LABEL_117:
          uint64_t j = v73;
        }
        while (1)
        {
          do
          {
            v67 -= 2;
            int v78 = v67[1].i32[1];
          }
          while (v20 > v78);
          if (v20 < v78) {
            break;
          }
          int v79 = v67[1].f32[0];
          if (a5.n128_f32[0] <= v79)
          {
            if (a5.n128_f32[0] < v79) {
              break;
            }
            int v80 = vcgt_f32(*v67, v24);
            if ((v80.i8[0] & 1) == 0
              && ((vmvn_s8((int8x8_t)vcgt_f32(v24, *v67)).u8[0] & 1) == 0 || (v80.i8[4] & 1) == 0))
            {
              break;
            }
          }
        }
      }
      BOOL v5 = &j[-2] >= a1;
      unint64_t v6 = &j[-2] == a1;
      if (&j[-2] != a1) {
        *(_OWORD *)a1->f32 = *(_OWORD *)j[-2].f32;
      }
      a4 = 0;
      j[-2] = v24;
      j[-1].i32[0] = a5.n128_u32[0];
      j[-1].i32[1] = v20;
    }
  }
  switch(v14)
  {
    case 0uLL:
    case 1uLL:
      return a5.n128_f64[0];
    case 2uLL:
      BOOL v81 = a2[-1].i32[1];
      int v82 = j[1].i32[1];
      if (v81 > v82
        || v81 >= v82
        && ((a5.n128_u32[0] = a2[-1].u32[0], float32x2_t v175 = j[1].f32[0], a5.n128_f32[0] > v175)
         || a5.n128_f32[0] >= v175
         && ((a5.n128_u64[0] = (unint64_t)vcgt_f32(*j, *v11), (a5.n128_u8[0] & 1) != 0)
          || (vmvn_s8((int8x8_t)vcgt_f32(*v11, *j)).u8[0] & 1) != 0 && (a5.n128_u8[4] & 1) != 0)))
      {
        uint64_t v194 = *(_OWORD *)j->f32;
        *(_OWORD *)j->f32 = *(_OWORD *)v11->f32;
        a5.n128_u64[0] = v194;
        *(_OWORD *)v11->f32 = v194;
      }
      break;
    case 3uLL:
      a5.n128_f64[0] = sub_25B44986C(j, j + 2, a2 - 2, a5);
      break;
    case 4uLL:
      a5.n128_f64[0] = sub_25B449A78(j, j + 2, j + 4, a2 - 2, a5);
      break;
    case 5uLL:
      int v83 = j + 2;
      uint64_t v84 = j + 4;
      unint64_t v85 = j + 6;
      a5.n128_f64[0] = sub_25B449A78(j, j + 2, j + 4, j + 6, a5);
      uint64_t v86 = a2[-1].i32[1];
      uint64_t v87 = j[7].i32[1];
      if (v86 > v87
        || v86 >= v87
        && ((a5.n128_u32[0] = a2[-1].u32[0], float32x2_t v176 = j[7].f32[0], a5.n128_f32[0] > v176)
         || a5.n128_f32[0] >= v176
         && ((a5.n128_u64[0] = (unint64_t)vcgt_f32(*v85, *v11), (a5.n128_u8[0] & 1) != 0)
          || (vmvn_s8((int8x8_t)vcgt_f32(*v11, *v85)).u8[0] & 1) != 0 && (a5.n128_u8[4] & 1) != 0)))
      {
        a5 = *(__n128 *)v85->f32;
        *(_OWORD *)v85->f32 = *(_OWORD *)v11->f32;
        *(__n128 *)v11->f32 = a5;
        int v88 = j[7].i32[1];
        BOOL v89 = j[5].i32[1];
        if (v88 > v89
          || v88 >= v89
          && ((a5.n128_u32[0] = j[7].u32[0], int v90 = j[5].f32[0], a5.n128_f32[0] > v90)
           || a5.n128_f32[0] >= v90
           && ((a5.n128_u64[0] = (unint64_t)vcgt_f32(*v84, *v85), (a5.n128_u8[0] & 1) != 0)
            || (vmvn_s8((int8x8_t)vcgt_f32(*v85, *v84)).u8[0] & 1) != 0 && (a5.n128_u8[4] & 1) != 0)))
        {
          a5 = *(__n128 *)v84->f32;
          *(_OWORD *)v84->f32 = *(_OWORD *)v85->f32;
          *(__n128 *)v85->f32 = a5;
          int64_t v91 = j[5].i32[1];
          int64_t v92 = j[3].i32[1];
          if (v91 > v92
            || v91 >= v92
            && ((a5.n128_u32[0] = j[5].u32[0], int64_t v93 = j[3].f32[0], a5.n128_f32[0] > v93)
             || a5.n128_f32[0] >= v93
             && ((a5.n128_u64[0] = (unint64_t)vcgt_f32(*v83, *v84), (a5.n128_u8[0] & 1) != 0)
              || (vmvn_s8((int8x8_t)vcgt_f32(*v84, *v83)).u8[0] & 1) != 0 && (a5.n128_u8[4] & 1) != 0)))
          {
            a5 = *(__n128 *)v83->f32;
            *(_OWORD *)v83->f32 = *(_OWORD *)v84->f32;
            *(__n128 *)v84->f32 = a5;
            uint64_t v94 = j[3].i32[1];
            unint64_t v95 = j[1].i32[1];
            if (v94 > v95
              || v94 >= v95
              && ((a5.n128_u32[0] = j[3].u32[0], uint64_t v188 = j[1].f32[0], a5.n128_f32[0] > v188)
               || a5.n128_f32[0] >= v188
               && ((v189 = j[2], a5.n128_u64[0] = (unint64_t)vcgt_f32(*j, v189), (a5.n128_u8[0] & 1) != 0)
                || (vmvn_s8((int8x8_t)vcgt_f32(v189, *j)).u8[0] & 1) != 0 && (a5.n128_u8[4] & 1) != 0)))
            {
              v195 = *(_OWORD *)j->f32;
              *(_OWORD *)j->f32 = *(_OWORD *)v83->f32;
              a5.n128_u64[0] = v195;
              *(_OWORD *)v83->f32 = v195;
            }
          }
        }
      }
      break;
    default:
      JUMPOUT(0);
  }
  return a5.n128_f64[0];
}

  size_t v10 = a2 - 1;
  unint64_t i = a1;
  while (1)
  {
    a1 = i;
    uint64_t v12 = (char *)a2 - (char *)i;
    unint64_t v13 = a2 - i;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          int v46 = vmovn_s32(vcgtq_f32(*i, *v10));
          if (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v10, *i))).u8[0])
          {
            if ((v46.i8[0] & 1) == 0) {
              return;
            }
          }
          else if ((v46.i8[2] & 1) == 0)
          {
            return;
          }
          int v101 = *i;
          long long *i = *v10;
          *size_t v10 = v101;
          return;
        case 3uLL:
          sub_25B49D614(i, i + 1, a2 - 1);
          return;
        case 4uLL:
          sub_25B49D748(i, i + 1, i + 2, a2 - 1);
          return;
        case 5uLL:
          f32 = (_OWORD *)i[1].f32;
          BOOL v48 = i + 2;
          int v49 = i + 3;
          sub_25B49D748(i, i + 1, i + 2, i + 3);
          BOOL v50 = i[3];
          int v51 = vmovn_s32(vcgtq_f32(v50, *v10));
          if (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v10, v50))).u8[0])
          {
            if ((v51.i8[0] & 1) == 0) {
              return;
            }
          }
          else if ((v51.i8[2] & 1) == 0)
          {
            return;
          }
          int v102 = *v49;
          void *v49 = *v10;
          *size_t v10 = v102;
          int v103 = vmovn_s32(vcgtq_f32(*v48, *v49));
          if (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v49, *v48))).u8[0])
          {
            if ((v103.i8[0] & 1) == 0) {
              return;
            }
          }
          else if ((v103.i8[2] & 1) == 0)
          {
            return;
          }
          int v114 = *v48;
          int v115 = *v49;
          *BOOL v48 = *v49;
          void *v49 = v114;
          BOOL v116 = v115.f32[0] < COERCE_FLOAT(*f32);
          if (v115.f32[0] == COERCE_FLOAT(*f32)) {
            BOOL v116 = v115.f32[1] < COERCE_FLOAT(HIDWORD(*(void *)f32));
          }
          if (v116)
          {
            int v117 = *i;
            long long v118 = i[1];
            i[1] = v115;
            i[2] = v118;
            int64_t v119 = v115.f32[0] < v117.f32[0];
            if (v115.f32[0] == v117.f32[0]) {
              int64_t v119 = v115.f32[1] < v117.f32[1];
            }
            if (v119)
            {
              uint64_t v120 = *i;
              long long *i = v115;
              i[1] = v120;
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 383) {
      break;
    }
    if (!a3)
    {
      if (i == a2) {
        return;
      }
      BOOL v65 = (v13 - 2) >> 1;
      int v66 = v65;
      while (2)
      {
        long long v67 = v66;
        if (v65 < v66) {
          goto LABEL_155;
        }
        BOOL v68 = (2 * v66) | 1;
        int v69 = &i[v68];
        if (2 * v67 + 2 >= (uint64_t)v13) {
          goto LABEL_138;
        }
        int v70 = v69[1];
        long long v71 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v69, v70))).u8[0];
        unint64_t v72 = vmovn_s32(vcgtq_f32(v70, *v69)).u32[0];
        if (v71)
        {
          if ((v72 & 1) == 0)
          {
LABEL_138:
            unint64_t v73 = &i[v67];
            BOOL v74 = vmovn_s32(vcgtq_f32(*v73, *v69)).u32[0];
            if (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v69, *v73))).u8[0])
            {
              if (v74) {
                goto LABEL_155;
              }
LABEL_142:
              uint64_t v75 = *v73;
              uint64_t *v73 = *v69;
              if (v65 < v68)
              {
LABEL_143:
                unint64_t v76 = v69;
LABEL_154:
                *unint64_t v76 = v75;
                goto LABEL_155;
              }
              while (2)
              {
                unint64_t v77 = 2 * v68;
                BOOL v68 = (2 * v68) | 1;
                unint64_t v76 = &i[v68];
                int v78 = v77 + 2;
                if (v78 < (uint64_t)v13)
                {
                  int v79 = v76[1];
                  int v80 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v76, v79))).u8[0];
                  BOOL v81 = vmovn_s32(vcgtq_f32(v79, *v76)).u32[0];
                  if (v80)
                  {
                    if ((v81 & 1) == 0) {
                      goto LABEL_150;
                    }
LABEL_149:
                    ++v76;
                    BOOL v68 = v78;
                  }
                  else if ((v81 & 0x10000) != 0)
                  {
                    goto LABEL_149;
                  }
                }
LABEL_150:
                int v82 = COERCE_FLOAT(*v76) < v75.f32[0];
                if (COERCE_FLOAT(*v76) == v75.f32[0]) {
                  int v82 = COERCE_FLOAT(HIDWORD(v76->i64[0])) < v75.f32[1];
                }
                if (v82) {
                  goto LABEL_143;
                }
                *int v69 = *v76;
                int v69 = v76;
                if (v65 < v68) {
                  goto LABEL_154;
                }
                continue;
              }
            }
            if ((v74 & 0x10000) == 0) {
              goto LABEL_142;
            }
LABEL_155:
            int v66 = v67 - 1;
            if (v67) {
              continue;
            }
            int v83 = (unint64_t)v12 >> 4;
            while (2)
            {
              uint64_t v84 = 0;
              unint64_t v85 = *i;
              uint64_t v86 = i;
LABEL_158:
              uint64_t v87 = v86;
              v86 += v84 + 1;
              int v88 = 2 * v84;
              uint64_t v84 = (2 * v84) | 1;
              BOOL v89 = v88 + 2;
              if (v89 < v83)
              {
                int v90 = v86[1];
                int64_t v91 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v86, v90))).u8[0];
                int64_t v92 = vmovn_s32(vcgtq_f32(v90, *v86)).u32[0];
                if (v91)
                {
                  if ((v92 & 1) == 0) {
                    goto LABEL_164;
                  }
                }
                else if ((v92 & 0x10000) == 0)
                {
                  goto LABEL_164;
                }
                ++v86;
                uint64_t v84 = v89;
              }
LABEL_164:
              *uint64_t v87 = *v86;
              if (v84 > (uint64_t)((unint64_t)(v83 - 2) >> 1))
              {
                if (v86 == --a2) {
                  goto LABEL_178;
                }
                *uint64_t v86 = *a2;
                *a2 = v85;
                int64_t v93 = (char *)v86 - (char *)i + 16;
                if (v93 < 17) {
                  goto LABEL_179;
                }
                uint64_t v94 = ((unint64_t)v93 >> 4) - 2;
                unint64_t v95 = v94 >> 1;
                int v96 = &i[v94 >> 1];
                BOOL v97 = vmovn_s32(vcgtq_f32(*v86, *v96));
                if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v96, *v86))).u8[0] & 1) == 0)
                {
                  if ((v97.i8[2] & 1) == 0) {
                    goto LABEL_179;
                  }
LABEL_171:
                  unint64_t v85 = *v86;
                  *uint64_t v86 = *v96;
                  if (v94 >= 2)
                  {
                    while (1)
                    {
                      int v98 = v95 - 1;
                      unint64_t v95 = (v95 - 1) >> 1;
                      uint64_t v86 = &i[v95];
                      int v99 = COERCE_FLOAT(*v86) < v85.f32[0];
                      if (COERCE_FLOAT(*v86) == v85.f32[0]) {
                        int v99 = COERCE_FLOAT(HIDWORD(v86->i64[0])) < v85.f32[1];
                      }
                      if (!v99) {
                        break;
                      }
                      char *v96 = *v86;
                      int v96 = &i[v95];
                      if (v98 <= 1) {
                        goto LABEL_178;
                      }
                    }
                  }
                  uint64_t v86 = v96;
LABEL_178:
                  *uint64_t v86 = v85;
                  goto LABEL_179;
                }
                if (v97.i8[0]) {
                  goto LABEL_171;
                }
LABEL_179:
                if (v83-- <= 2) {
                  return;
                }
                continue;
              }
              goto LABEL_158;
            }
          }
        }
        else if ((v72 & 0x10000) == 0)
        {
          goto LABEL_138;
        }
        break;
      }
      ++v69;
      BOOL v68 = 2 * v67 + 2;
      goto LABEL_138;
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = &i[v13 >> 1];
    if ((unint64_t)v12 >= 0x801)
    {
      sub_25B49D614(a1, &a1[v13 >> 1], a2 - 1);
      sub_25B49D614(a1 + 1, v15 - 1, a2 - 2);
      sub_25B49D614(a1 + 2, &a1[v14 + 1], a2 - 3);
      sub_25B49D614(v15 - 1, v15, &a1[v14 + 1]);
      uint64_t v16 = *a1;
      *a1 = *v15;
      *unint64_t v15 = v16;
    }
    else
    {
      sub_25B49D614(&a1[v13 >> 1], a1, a2 - 1);
    }
    --a3;
    if ((a4 & 1) == 0)
    {
      uint64_t v17 = a1[-1];
      unint64_t v18 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v17, *a1))).u8[0];
      uint64_t v19 = vmovn_s32(vcgtq_f32(*a1, v17)).u32[0];
      if (v18)
      {
        if ((v19 & 1) == 0) {
          goto LABEL_12;
        }
      }
      else if ((v19 & 0x10000) == 0)
      {
LABEL_12:
        int v20 = *a1;
        int v21 = *v10;
        LODWORD(v22) = HIDWORD(a1->i64[0]);
        if (COERCE_FLOAT(*a1) == COERCE_FLOAT(*v10))
        {
          if (v22 < v21.f32[1])
          {
LABEL_14:
            for (unint64_t i = a1 + 1; ; ++i)
            {
              if (v20.f32[0] == COERCE_FLOAT(*i))
              {
                if (v22 < COERCE_FLOAT(HIDWORD(i->i64[0]))) {
                  goto LABEL_69;
                }
              }
              else if (v20.f32[0] < COERCE_FLOAT(*i))
              {
                goto LABEL_69;
              }
            }
          }
        }
        else if (COERCE_FLOAT(*a1) < COERCE_FLOAT(*v10))
        {
          goto LABEL_14;
        }
        for (unint64_t i = a1 + 1; i < a2; ++i)
        {
          long long v37 = v20.f32[0] < COERCE_FLOAT(*i);
          if (v20.f32[0] == COERCE_FLOAT(*i)) {
            long long v37 = v22 < COERCE_FLOAT(HIDWORD(i->i64[0]));
          }
          if (v37) {
            break;
          }
        }
LABEL_69:
        uint64_t j = a2;
        if (i < a2)
        {
          for (uint64_t j = a2 - 1; ; --j)
          {
            if (v20.f32[0] == v21.f32[0])
            {
              if (v20.f32[1] >= v21.f32[1]) {
                break;
              }
            }
            else if (v20.f32[0] >= v21.f32[0])
            {
              break;
            }
            BOOL v39 = j[-1];
            v21.i64[0] = v39.i64[0];
          }
        }
        while (i < j)
        {
          int v40 = *i;
          *i++ = *j;
          *uint64_t j = v40;
          while (1)
          {
            int v41 = v20.f32[0] < COERCE_FLOAT(*i);
            if (v20.f32[0] == COERCE_FLOAT(*i)) {
              int v41 = v20.f32[1] < COERCE_FLOAT(HIDWORD(i->i64[0]));
            }
            if (v41) {
              break;
            }
            ++i;
          }
          do
          {
            while (1)
            {
              BOOL v42 = j[-1];
              --j;
              int v43 = v42.f32[1];
              long long v44 = v20.f32[0] < v42.f32[0];
              if (v20.f32[0] != v42.f32[0]) {
                break;
              }
              if (v20.f32[1] >= v43) {
                goto LABEL_85;
              }
            }
          }
          while (v44);
LABEL_85:
          ;
        }
        BOOL v45 = i - 1;
        BOOL v4 = &i[-1] >= a1;
        BOOL v5 = &i[-1] == a1;
        if (&i[-1] != a1) {
          *a1 = *v45;
        }
        a4 = 0;
        void *v45 = v20;
        continue;
      }
    }
    int v23 = a1 + 1;
    int v24 = *a1;
    LODWORD(v25) = HIDWORD(a1->i64[0]);
    while (COERCE_FLOAT(*v23) != v24.f32[0])
    {
      if (COERCE_FLOAT(*v23) >= v24.f32[0]) {
        goto LABEL_27;
      }
LABEL_26:
      ++v23;
    }
    if (COERCE_FLOAT(HIDWORD(v23->i64[0])) < v25) {
      goto LABEL_26;
    }
LABEL_27:
    int v26 = v23 - 1;
    uint64_t k = a2 - 1;
    if (&v23[-1] == a1)
    {
      uint64_t k = a2;
      if (v23 < a2)
      {
        for (uint64_t k = a2 - 1; ; --k)
        {
          BOOL v29 = *k;
          if (COERCE_FLOAT(*k) == v24.f32[0])
          {
            if (v23 >= k || v29.f32[1] < v25) {
              break;
            }
          }
          else if (v23 >= k || v29.f32[0] < v24.f32[0])
          {
            break;
          }
        }
      }
    }
    else
    {
      while (1)
      {
        uint64_t v28 = COERCE_FLOAT(*k) < v24.f32[0];
        if (COERCE_FLOAT(*k) == v24.f32[0]) {
          uint64_t v28 = COERCE_FLOAT(HIDWORD(k->i64[0])) < v25;
        }
        if (v28) {
          break;
        }
        --k;
      }
    }
    if (v23 >= k) {
      goto LABEL_56;
    }
    int v30 = v23;
    int v31 = k;
    while (2)
    {
      BOOL v32 = *v30;
      *v30++ = *v31;
      void *v31 = v32;
      while (2)
      {
        if (COERCE_FLOAT(*v30) != v24.f32[0])
        {
          if (COERCE_FLOAT(*v30) >= v24.f32[0]) {
            break;
          }
          goto LABEL_48;
        }
        if (COERCE_FLOAT(HIDWORD(v30->i64[0])) < v25)
        {
LABEL_48:
          ++v30;
          continue;
        }
        break;
      }
      int v26 = v30 - 1;
      do
      {
        while (1)
        {
          int v33 = v31[-1];
          --v31;
          int v34 = v33.f32[1];
          uint64_t v35 = v33.f32[0] < v24.f32[0];
          if (v33.f32[0] == v24.f32[0]) {
            break;
          }
          if (v35) {
            goto LABEL_55;
          }
        }
      }
      while (v34 >= v25);
LABEL_55:
      if (v30 < v31) {
        continue;
      }
      break;
    }
LABEL_56:
    if (v26 != a1) {
      *a1 = *v26;
    }
    *int v26 = v24;
    if (v23 < k)
    {
LABEL_61:
      sub_25B49C92C(a1, v26, a3, a4 & 1);
      a4 = 0;
      unint64_t i = v26 + 1;
    }
    else
    {
      int v36 = sub_25B49D858(a1, v26);
      unint64_t i = v26 + 1;
      if (sub_25B49D858(v26 + 1, a2))
      {
        a2 = v26;
        if (v36) {
          return;
        }
        goto LABEL_1;
      }
      if (!v36) {
        goto LABEL_61;
      }
    }
  }
  BOOL v52 = i + 1;
  int v54 = i == a2 || v52 == a2;
  if (a4)
  {
    if (v54) {
      return;
    }
    uint64_t v55 = 0;
    unsigned __int32 v56 = i;
    while (2)
    {
      BOOL v57 = v56;
      unsigned __int32 v56 = v52;
      int v58 = v57[1];
      int v59 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v58, *v57))).u8[0];
      long long v60 = vmovn_s32(vcgtq_f32(*v57, v58));
      if (v59)
      {
        if ((v60.i8[0] & 1) == 0) {
          goto LABEL_127;
        }
      }
      else if ((v60.i8[2] & 1) == 0)
      {
        goto LABEL_127;
      }
      int v61 = v57[1];
      v57[1] = *v57;
      BOOL v62 = i;
      if (v57 != i)
      {
        int v63 = v55;
        do
        {
          int v64 = *(long long *)((char *)&i[-1] + v63);
          if (v61.f32[0] == *(float *)&v64)
          {
            if (v61.f32[1] >= *((float *)&v64 + 1))
            {
              BOOL v62 = v57;
              goto LABEL_126;
            }
          }
          else if (v61.f32[0] >= *(float *)&v64)
          {
            BOOL v62 = (float32x4_t *)((char *)i + v63);
            goto LABEL_126;
          }
          --v57;
          *(float32x4_t *)((char *)i + v63) = *(float32x4_t *)((char *)i + v63 - 16);
          v63 -= 16;
        }
        while (v63);
        BOOL v62 = i;
      }
LABEL_126:
      uint64_t *v62 = v61;
LABEL_127:
      BOOL v52 = v56 + 1;
      v55 += 16;
      if (&v56[1] == a2) {
        return;
      }
      continue;
    }
  }
  if (!v54)
  {
    while (2)
    {
      BOOL v104 = a1;
      a1 = v52;
      int v105 = v104[1];
      int v106 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v105, *v104))).u8[0];
      uint64_t v107 = vmovn_s32(vcgtq_f32(*v104, v105));
      if (v106)
      {
        if ((v107.i8[0] & 1) == 0) {
          goto LABEL_199;
        }
      }
      else if ((v107.i8[2] & 1) == 0)
      {
        goto LABEL_199;
      }
      uint64_t v108 = *v52;
      LODWORD(v109) = HIDWORD(v52->i64[0]);
      do
      {
        while (1)
        {
          uint64_t v110 = v104;
          v104[1] = *v104;
          uint64_t v111 = v104[-1];
          --v104;
          int v112 = v111.f32[1];
          BOOL v113 = v108.f32[0] < v111.f32[0];
          if (v108.f32[0] == v111.f32[0]) {
            break;
          }
          if (!v113) {
            goto LABEL_198;
          }
        }
      }
      while (v109 < v112);
LABEL_198:
      *uint64_t v110 = v108;
LABEL_199:
      ++v52;
      if (&a1[1] == a2) {
        return;
      }
      continue;
    }
  }
}

  unint64_t v291 = k;
  unint64_t v294 = (float *)(k - 80);
  float v268 = (float *)(k - 240);
  float v269 = (float *)(k - 160);
  uint64_t j = a1;
  while (1)
  {
    a1 = j;
    size_t v10 = k - j;
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(k - j) >> 4);
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return;
        case 2:
          uint64_t v110 = *(_DWORD *)(k - 80);
          uint64_t v111 = *(_DWORD *)(k - 76);
          int v112 = *(_DWORD *)a1;
          BOOL v113 = *(_DWORD *)(a1 + 4);
          if (v110 == *(_DWORD *)a1 && v111 == v113)
          {
            if (*(float *)(k - 12) >= *(float *)(a1 + 68)) {
              return;
            }
          }
          else
          {
            int v115 = v111 < v113;
            BOOL v5 = v110 == v112;
            BOOL v116 = v110 < v112;
            if (v5) {
              BOOL v116 = v115;
            }
            if (!v116) {
              return;
            }
          }
          sub_25B51B50C((uint64_t *)a1, k - 80);
          return;
        case 3:
          sub_25B51B698(a1, a1 + 80, v294);
          return;
        case 4:
          sub_25B51B864(a1, a1 + 80, a1 + 160, (int *)v294);
          return;
        case 5:
          sub_25B51B9A8(a1, a1 + 80, a1 + 160, a1 + 240, (int *)v294);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v10 <= 1919) {
      break;
    }
    if (!a3)
    {
      if (a1 == k) {
        return;
      }
      int v150 = (unint64_t)(v11 - 2) >> 1;
      v296 = v150;
      while (1)
      {
        int v151 = v150;
        if (v296 < v150) {
          goto LABEL_275;
        }
        int v152 = (2 * v150) | 1;
        BOOL v153 = a1 + 80 * v152;
        if (2 * v151 + 2 < v11)
        {
          int v154 = *(_DWORD *)(v153 + 80);
          int v155 = *(_DWORD *)v153;
          uint64_t v156 = *(_DWORD *)(v153 + 4);
          unint64_t v157 = *(_DWORD *)(v153 + 84);
          if (*(_DWORD *)v153 == v154 && v156 == v157)
          {
            if (*(float *)(a1 + 80 * v152 + 68) < *(float *)(v153 + 148)) {
              goto LABEL_233;
            }
          }
          else
          {
            BOOL v159 = v156 < v157;
            BOOL v5 = v155 == v154;
            int v160 = v155 < v154;
            if (v5) {
              int v160 = v159;
            }
            if (v160)
            {
LABEL_233:
              v153 += 80;
              int v152 = 2 * v151 + 2;
            }
          }
        }
        long long v161 = a1 + 80 * v151;
        long long v162 = *(_DWORD *)v153;
        long long v163 = *(_DWORD *)(v153 + 4);
        long long v164 = *(_DWORD *)v161;
        long long v165 = *(_DWORD *)(v161 + 4);
        if (*(_DWORD *)v153 == *(_DWORD *)v161 && v163 == v165)
        {
          uint64_t v169 = *(float *)(a1 + 80 * v151 + 68);
          if (*(float *)(v153 + 68) < v169) {
            goto LABEL_275;
          }
LABEL_243:
          v171 = *(_DWORD *)v161;
          uint64_t v170 = *(_DWORD *)(v161 + 4);
          float32x4_t v288 = v151;
          v172 = a1 + 80 * v151;
          v274 = *(void *)(v172 + 8);
          *(void *)&v307[7] = *(void *)(v172 + 23);
          *(void *)unint64_t v307 = *(void *)(v172 + 16);
          unint64_t v272 = *(unsigned char *)(v161 + 31);
          *(void *)(v172 + 8) = 0;
          *(void *)(v172 + 16) = 0;
          *(void *)(v172 + 24) = 0;
          float v283 = *(unsigned char *)(v172 + 32);
          *(_OWORD *)unint64_t v314 = *(_OWORD *)(v161 + 33);
          *(void *)&v314[14] = *(void *)(v161 + 47);
          v278 = *(unsigned char *)(v161 + 55);
          *(void *)(v172 + 32) = 0;
          *(void *)(v172 + 40) = 0;
          *(void *)(v172 + 48) = 0;
          v323 = *(void *)(v172 + 56);
          v329 = *(_DWORD *)(v172 + 64);
          BOOL v173 = *(void *)(v172 + 72);
          float32x2_t v174 = *(_DWORD *)v153;
          while (2)
          {
            float32x2_t v175 = v153;
            *(_DWORD *)long long v161 = v174;
            *(_DWORD *)(v161 + 4) = *(_DWORD *)(v153 + 4);
            float32x2_t v176 = (void **)(v161 + 8);
            if (*(char *)(v161 + 31) < 0) {
              operator delete(*v176);
            }
            float32x2_t v177 = *(_OWORD *)(v175 + 8);
            *(void *)(v161 + 24) = *(void *)(v175 + 24);
            *(_OWORD *)float32x2_t v176 = v177;
            *(unsigned char *)(v175 + 31) = 0;
            *(unsigned char *)(v175 + 8) = 0;
            float v178 = (void **)(v161 + 32);
            if (*(char *)(v161 + 55) < 0) {
              operator delete(*v178);
            }
            float v179 = *(_OWORD *)(v175 + 32);
            *(void *)(v161 + 48) = *(void *)(v175 + 48);
            *(_OWORD *)float v178 = v179;
            *(unsigned char *)(v175 + 55) = 0;
            *(unsigned char *)(v175 + 32) = 0;
            float32x2_t v180 = *(_OWORD *)(v175 + 56);
            *(void *)(v161 + 72) = *(void *)(v175 + 72);
            *(_OWORD *)(v161 + 56) = v180;
            if (v296 < v152)
            {
LABEL_270:
              *(_DWORD *)float32x2_t v175 = v171;
              *(_DWORD *)(v175 + 4) = v170;
              if (*(char *)(v175 + 31) < 0) {
                operator delete(*(void **)(v175 + 8));
              }
              *(void *)(v175 + 8) = v274;
              *(void *)(v175 + 16) = *(void *)v307;
              *(void *)(v175 + 23) = *(void *)&v307[7];
              *(unsigned char *)(v175 + 31) = v272;
              uint64_t k = v291;
              if (*(char *)(v175 + 55) < 0) {
                operator delete(*(void **)(v175 + 32));
              }
              *(unsigned char *)(v175 + 32) = v283;
              *(_OWORD *)(v175 + 33) = *(_OWORD *)v314;
              *(void *)(v175 + 47) = *(void *)&v314[14];
              *(unsigned char *)(v175 + 55) = v278;
              *(void *)(v175 + 56) = v323;
              *(_DWORD *)(v175 + 64) = v329;
              *(float *)(v175 + 68) = v169;
              *(void *)(v175 + 72) = v173;
              int v151 = v288;
              goto LABEL_275;
            }
            float32x2_t v181 = (2 * v152) | 1;
            BOOL v153 = a1 + 80 * v181;
            if (2 * v152 + 2 < v11)
            {
              v182 = *(_DWORD *)(v153 + 80);
              v183 = *(_DWORD *)v153;
              v184 = *(_DWORD *)(v153 + 4);
              v185 = *(_DWORD *)(v153 + 84);
              if (*(_DWORD *)v153 == v182 && v184 == v185)
              {
                if (*(float *)(a1 + 80 * v181 + 68) < *(float *)(v153 + 148)) {
                  goto LABEL_257;
                }
              }
              else
              {
                v187 = v184 < v185;
                BOOL v5 = v183 == v182;
                uint64_t v188 = v183 < v182;
                if (v5) {
                  uint64_t v188 = v187;
                }
                if (v188)
                {
LABEL_257:
                  v153 += 80;
                  float32x2_t v181 = 2 * v152 + 2;
                }
              }
            }
            float32x2_t v174 = *(_DWORD *)v153;
            v189 = *(_DWORD *)(v153 + 4);
            if (*(_DWORD *)v153 == v171 && v189 == v170)
            {
              long long v161 = v175;
              int v152 = v181;
              if (*(float *)(v153 + 68) < v169) {
                goto LABEL_270;
              }
            }
            else
            {
              unint64_t v191 = v189 < v170;
              if (v174 != v171) {
                unint64_t v191 = v174 < v171;
              }
              long long v161 = v175;
              int v152 = v181;
              if (v191) {
                goto LABEL_270;
              }
            }
            continue;
          }
        }
        uint64_t v167 = v163 < v165;
        BOOL v5 = v162 == v164;
        uint64_t v168 = v162 < v164;
        if (v5) {
          uint64_t v168 = v167;
        }
        if (!v168)
        {
          uint64_t v169 = *(float *)(a1 + 80 * v151 + 68);
          goto LABEL_243;
        }
LABEL_275:
        int v150 = v151 - 1;
        if (!v151)
        {
          unint64_t v192 = v10 / 0x50uLL;
          while (1)
          {
            v193 = k;
            uint64_t v194 = 0;
            float32x2_t v279 = *(void *)a1;
            int v284 = *(void *)(a1 + 8);
            *(void *)&v302[7] = *(void *)(a1 + 23);
            *(void *)long long v302 = *(void *)(a1 + 16);
            float32x4_t v289 = *(unsigned char *)(a1 + 31);
            *(void *)(a1 + 16) = 0;
            *(void *)(a1 + 24) = 0;
            *(void *)(a1 + 8) = 0;
            uint64_t v292 = *(void *)(a1 + 32);
            *(void *)v301 = *(void *)(a1 + 40);
            *(void *)&v301[7] = *(void *)(a1 + 47);
            v297 = *(unsigned char *)(a1 + 55);
            *(void *)(a1 + 40) = 0;
            *(void *)(a1 + 48) = 0;
            *(void *)(a1 + 32) = 0;
            int v318 = *(void *)(a1 + 72);
            v195 = a1;
            v315 = *(_OWORD *)(a1 + 56);
            do
            {
              v196 = v194 + 1;
              v197 = (_DWORD *)(v195 + 80 * (v194 + 1));
              v198 = 2 * v194;
              uint64_t v194 = (2 * v194) | 1;
              uint64_t v199 = v198 + 2;
              if (v199 >= v192) {
                goto LABEL_289;
              }
              unint64_t v200 = *((float *)v197 + 20);
              unint64_t v201 = *(float *)v197;
              v202 = v197[1];
              v203 = v197[21];
              if (*v197 == LODWORD(v200) && v202 == v203)
              {
                if (*(float *)(v195 + 80 * v196 + 68) < *((float *)v197 + 37)) {
                  goto LABEL_288;
                }
              }
              else
              {
                v205 = v202 < v203;
                BOOL v5 = LODWORD(v201) == LODWORD(v200);
                float32x2_t v206 = SLODWORD(v201) < SLODWORD(v200);
                if (!v5) {
                  v205 = v206;
                }
                if (v205)
                {
LABEL_288:
                  v197 += 20;
                  uint64_t v194 = v199;
                }
              }
LABEL_289:
              *(_DWORD *)v195 = *v197;
              *(_DWORD *)(v195 + 4) = v197[1];
              v207 = (void **)(v195 + 8);
              if (*(char *)(v195 + 31) < 0) {
                operator delete(*v207);
              }
              v208 = (void **)(v197 + 2);
              v209 = *(_OWORD *)(v197 + 2);
              *(void *)(v195 + 24) = *((void *)v197 + 3);
              *(_OWORD *)v207 = v209;
              *((unsigned char *)v197 + 31) = 0;
              *((unsigned char *)v197 + 8) = 0;
              v210 = (void **)(v195 + 32);
              if (*(char *)(v195 + 55) < 0) {
                operator delete(*v210);
              }
              v211 = *((_OWORD *)v197 + 2);
              *(void *)(v195 + 48) = *((void *)v197 + 6);
              *(_OWORD *)v210 = v211;
              *((unsigned char *)v197 + 55) = 0;
              *((unsigned char *)v197 + 32) = 0;
              uint64_t v212 = *(_OWORD *)(v197 + 14);
              *(void *)(v195 + 72) = *((void *)v197 + 9);
              *(_OWORD *)(v195 + 56) = v212;
              v195 = (unint64_t)v197;
            }
            while (v194 <= (uint64_t)((unint64_t)(v192 - 2) >> 1));
            uint64_t v213 = (void **)(v197 + 8);
            int v214 = v197 + 14;
            uint64_t v215 = v193 - 80;
            if (v197 == (_DWORD *)(v193 - 80))
            {
              *(void *)v197 = v279;
              if (*((char *)v197 + 31) < 0) {
                operator delete(*v208);
              }
              *((void *)v197 + 1) = v284;
              *(void *)((char *)v197 + 23) = *(void *)&v302[7];
              *((void *)v197 + 2) = *(void *)v302;
              *((unsigned char *)v197 + 31) = v289;
              if (*((char *)v197 + 55) < 0) {
                operator delete(*v213);
              }
              *((void *)v197 + 4) = v292;
              *(void *)((char *)v197 + 47) = *(void *)&v301[7];
              *((void *)v197 + 5) = *(void *)v301;
              *((unsigned char *)v197 + 55) = v297;
              *((void *)v197 + 9) = v318;
              *int v214 = v315;
            }
            else
            {
              v275 = v193 - 80;
              char *v197 = *(_DWORD *)(v193 - 80);
              v197[1] = *(_DWORD *)(v193 - 76);
              if (*((char *)v197 + 31) < 0) {
                operator delete(*v208);
              }
              uint64_t v216 = *(_OWORD *)(v193 - 72);
              *((void *)v197 + 3) = *(void *)(v193 - 56);
              *(_OWORD *)v208 = v216;
              *(unsigned char *)(v193 - 49) = 0;
              *(unsigned char *)(v193 - 72) = 0;
              if (*((char *)v197 + 55) < 0) {
                operator delete(*v213);
              }
              v217 = *(_OWORD *)(v193 - 48);
              *((void *)v197 + 6) = *(void *)(v193 - 32);
              *(_OWORD *)uint64_t v213 = v217;
              *(unsigned char *)(v193 - 25) = 0;
              *(unsigned char *)(v193 - 48) = 0;
              v218 = *(_OWORD *)(v193 - 24);
              *((void *)v197 + 9) = *(void *)(v193 - 8);
              *int v214 = v218;
              *(void *)(v193 - 80) = v279;
              if (*(char *)(v193 - 49) < 0) {
                operator delete(*(void **)(v193 - 72));
              }
              *(void *)(v193 - 72) = v284;
              *(void *)(v193 - 57) = *(void *)&v302[7];
              *(void *)(v193 - 64) = *(void *)v302;
              *(unsigned char *)(v193 - 49) = v289;
              if (*(char *)(v193 - 25) < 0) {
                operator delete(*(void **)(v193 - 48));
              }
              v219 = v193 - 24;
              *(void *)(v193 - 48) = v292;
              *(void *)(v193 - 33) = *(void *)&v301[7];
              *(void *)(v193 - 40) = *(void *)v301;
              *(unsigned char *)(v193 - 25) = v297;
              *(void *)(v219 + 16) = v318;
              *(_OWORD *)v219 = v315;
              v220 = (uint64_t)v197 - a1 + 80;
              uint64_t v215 = v193 - 80;
              if (v220 >= 81)
              {
                v221 = (v220 / 0x50uLL - 2) >> 1;
                v222 = (_DWORD *)(a1 + 80 * v221);
                uint64_t v223 = *v222;
                int v224 = v222[1];
                v225 = *(float *)v197;
                v226 = v197[1];
                if (*v222 == *v197 && v224 == v226)
                {
                  float32x2_t v227 = *((float *)v197 + 17);
                  if (*(float *)(a1 + 80 * v221 + 68) >= v227) {
                    goto LABEL_340;
                  }
LABEL_320:
                  float v230 = *(float *)v197;
                  float v231 = v197[1];
                  unint64_t v290 = *((void *)v197 + 1);
                  *(void *)&v324[7] = *(void *)((char *)v197 + 23);
                  *(void *)float32x2_t v324 = *((void *)v197 + 2);
                  uint64_t v285 = *((unsigned char *)v197 + 31);
                  void *v208 = 0;
                  *((void *)v197 + 2) = 0;
                  *((void *)v197 + 3) = 0;
                  unint64_t v298 = *((unsigned char *)v197 + 32);
                  *(_OWORD *)uint64_t v308 = *(_OWORD *)((char *)v197 + 33);
                  *(void *)&v308[14] = *(void *)((char *)v197 + 47);
                  v293 = *((unsigned char *)v197 + 55);
                  *uint64_t v213 = 0;
                  *((void *)v197 + 5) = 0;
                  *((void *)v197 + 6) = 0;
                  v299 = *(void *)v214;
                  v300 = v197[16];
                  float v232 = *((void *)v197 + 9);
                  BOOL v233 = *v222;
                  while (1)
                  {
                    BOOL v234 = v222;
                    char *v197 = v233;
                    v197[1] = v222[1];
                    int v235 = (void **)(v197 + 2);
                    if (*((char *)v197 + 31) < 0) {
                      operator delete(*v235);
                    }
                    uint64_t v236 = *(_OWORD *)(v234 + 2);
                    *((void *)v197 + 3) = *((void *)v234 + 3);
                    *(_OWORD *)int v235 = v236;
                    *((unsigned char *)v234 + 31) = 0;
                    *((unsigned char *)v234 + 8) = 0;
                    int v237 = (void **)(v197 + 8);
                    if (*((char *)v197 + 55) < 0) {
                      operator delete(*v237);
                    }
                    float32x4_t v238 = *((_OWORD *)v234 + 2);
                    *((void *)v197 + 6) = *((void *)v234 + 6);
                    *(_OWORD *)int v237 = v238;
                    *((unsigned char *)v234 + 55) = 0;
                    *((unsigned char *)v234 + 32) = 0;
                    float32x4_t v239 = *(_OWORD *)(v234 + 14);
                    *((void *)v197 + 9) = *((void *)v234 + 9);
                    *(_OWORD *)(v197 + 14) = v239;
                    if (!v221) {
                      break;
                    }
                    v221 = (v221 - 1) >> 1;
                    v222 = (_DWORD *)(a1 + 80 * v221);
                    BOOL v233 = *v222;
                    float32x4_t v240 = v222[1];
                    if (*v222 == LODWORD(v230) && v240 == v231)
                    {
                      v197 = v234;
                      if (*(float *)(a1 + 80 * v221 + 68) >= v227) {
                        break;
                      }
                    }
                    else
                    {
                      unint64_t v242 = v240 < v231;
                      if (v233 != LODWORD(v230)) {
                        unint64_t v242 = v233 < SLODWORD(v230);
                      }
                      v197 = v234;
                      if (!v242) {
                        break;
                      }
                    }
                  }
                  *(float *)BOOL v234 = v230;
                  v234[1] = v231;
                  if (*((char *)v234 + 31) < 0) {
                    operator delete(*((void **)v234 + 1));
                  }
                  *((void *)v234 + 1) = v290;
                  *((void *)v234 + 2) = *(void *)v324;
                  *(void *)((char *)v234 + 23) = *(void *)&v324[7];
                  *((unsigned char *)v234 + 31) = v285;
                  uint64_t v215 = v275;
                  if (*((char *)v234 + 55) < 0) {
                    operator delete(*((void **)v234 + 4));
                  }
                  *((unsigned char *)v234 + 32) = v298;
                  *(_OWORD *)((char *)v234 + 33) = *(_OWORD *)v308;
                  *(void *)((char *)v234 + 47) = *(void *)&v308[14];
                  *((unsigned char *)v234 + 55) = v293;
                  *((void *)v234 + 7) = v299;
                  v234[16] = v300;
                  *((float *)v234 + 17) = v227;
                  *((void *)v234 + 9) = v232;
                }
                else
                {
                  float32x2_t v228 = v224 < v226;
                  BOOL v5 = v223 == LODWORD(v225);
                  float32x2_t v229 = v223 < SLODWORD(v225);
                  if (v5) {
                    float32x2_t v229 = v228;
                  }
                  if (v229)
                  {
                    float32x2_t v227 = *((float *)v197 + 17);
                    goto LABEL_320;
                  }
                }
              }
            }
LABEL_340:
            uint64_t k = v215;
            if (v192-- <= 2) {
              return;
            }
          }
        }
      }
    }
    uint64_t v12 = (unint64_t)v11 >> 1;
    unint64_t v13 = a1 + 80 * ((unint64_t)v11 >> 1);
    if ((unint64_t)v10 < 0x2801)
    {
      sub_25B51B698(v13, a1, v294);
    }
    else
    {
      sub_25B51B698(a1, v13, v294);
      unint64_t v14 = 5 * v12;
      unint64_t v15 = a1 + 80 * v12;
      sub_25B51B698(a1 + 80, v15 - 80, v269);
      sub_25B51B698(a1 + 160, a1 + 80 + 16 * v14, v268);
      sub_25B51B698(v15 - 80, v13, (float *)(a1 + 80 + 16 * v14));
      uint64_t v16 = *(void *)a1;
      uint64_t v17 = *(void *)(a1 + 8);
      *(void *)((char *)&v303 + 7) = *(void *)(a1 + 23);
      *(void *)&uint64_t v303 = *(void *)(a1 + 16);
      unint64_t v18 = *(unsigned char *)(a1 + 31);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      uint64_t v19 = *(void *)(a1 + 32);
      *(void *)&uint64_t v319 = *(void *)(a1 + 40);
      *(void *)((char *)&v319 + 7) = *(void *)(a1 + 47);
      int v20 = *(unsigned char *)(a1 + 55);
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      v310 = *(_OWORD *)(a1 + 56);
      BOOL v317 = *(void *)(a1 + 72);
      *(void *)a1 = *(void *)v13;
      int v21 = *(_OWORD *)(v15 + 8);
      *(void *)(a1 + 24) = *(void *)(v15 + 24);
      *(_OWORD *)(a1 + 8) = v21;
      *(unsigned char *)(v13 + 31) = 0;
      *(unsigned char *)(v15 + 8) = 0;
      int v22 = *(_OWORD *)(v15 + 32);
      *(void *)(a1 + 48) = *(void *)(v15 + 48);
      *(_OWORD *)(a1 + 32) = v22;
      *(unsigned char *)(v13 + 55) = 0;
      *(unsigned char *)(v15 + 32) = 0;
      int v23 = *(_OWORD *)(v15 + 56);
      *(void *)(a1 + 72) = *(void *)(v15 + 72);
      *(_OWORD *)(a1 + 56) = v23;
      *(void *)unint64_t v13 = v16;
      *(void *)(v15 + 8) = v17;
      *(void *)(v15 + 23) = *(void *)((char *)&v303 + 7);
      *(void *)(v15 + 16) = v303;
      *(unsigned char *)(v13 + 31) = v18;
      *(void *)(v15 + 32) = v19;
      *(void *)(v15 + 47) = *(void *)((char *)&v319 + 7);
      *(void *)(v15 + 40) = v319;
      *(unsigned char *)(v13 + 55) = v20;
      *(void *)(v15 + 72) = v317;
      *(_OWORD *)(v15 + 56) = v310;
    }
    int v286 = a3 - 1;
    if (a4) {
      goto LABEL_17;
    }
    int v24 = *(_DWORD *)(a1 - 80);
    int v25 = *(_DWORD *)(a1 - 76);
    int v26 = *(_DWORD *)a1;
    uint64_t v27 = *(_DWORD *)(a1 + 4);
    if (v24 == *(_DWORD *)a1 && v25 == v27)
    {
      uint64_t v28 = *(float *)(a1 + 68);
      if (*(float *)(a1 - 12) >= v28) {
        goto LABEL_91;
      }
      goto LABEL_17;
    }
    BOOL v29 = v25 < v27;
    BOOL v5 = v24 == v26;
    int v30 = v24 < v26;
    if (v5) {
      int v30 = v29;
    }
    if (v30)
    {
LABEL_17:
      BOOL v32 = *(_DWORD *)a1;
      int v31 = *(_DWORD *)(a1 + 4);
      int v34 = (void **)(a1 + 8);
      int v33 = *(void *)(a1 + 8);
      *(void *)&v304[7] = *(void *)(a1 + 23);
      *(void *)unint64_t v304 = *(void *)(a1 + 16);
      uint64_t v35 = *(unsigned char *)(a1 + 31);
      *(void *)(a1 + 8) = 0;
      long long v37 = (void **)(a1 + 32);
      int v36 = *(unsigned char *)(a1 + 32);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)&v311[14] = *(void *)(a1 + 47);
      *(_OWORD *)unint64_t v311 = *(_OWORD *)(a1 + 33);
      int v38 = *(unsigned char *)(a1 + 55);
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      v326 = *(_DWORD *)(a1 + 64);
      uint64_t v320 = *(void *)(a1 + 56);
      BOOL v39 = *(float *)(a1 + 68);
      int v40 = a1 + 80;
      int v41 = *(void *)(a1 + 72);
      v280 = v36;
      long long v276 = v38;
      v273 = v33;
      unint64_t v271 = v35;
      while (1)
      {
        BOOL v42 = *(_DWORD *)v40;
        int v43 = *(_DWORD *)(v40 + 4);
        if (*(_DWORD *)v40 != v32 || v43 != v31) {
          break;
        }
        if (*(float *)(v40 + 68) >= v39) {
          goto LABEL_28;
        }
LABEL_27:
        v40 += 80;
      }
      BOOL v45 = v43 < v31;
      BOOL v5 = v42 == v32;
      int v46 = v42 < v32;
      if (v5) {
        int v46 = v45;
      }
      if (v46) {
        goto LABEL_27;
      }
LABEL_28:
      unint64_t i = (unint64_t)v294;
      if (v40 - 80 != a1)
      {
        while (1)
        {
          BOOL v48 = *(_DWORD *)i;
          int v49 = *(_DWORD *)(i + 4);
          if (*(_DWORD *)i == v32 && v49 == v31)
          {
            if (*(float *)(i + 68) < v39) {
              goto LABEL_53;
            }
          }
          else
          {
            int v51 = v49 < v31;
            BOOL v5 = v48 == v32;
            BOOL v52 = v48 < v32;
            if (v5) {
              BOOL v52 = v51;
            }
            if (v52) {
              goto LABEL_53;
            }
          }
          i -= 80;
        }
      }
      unint64_t i = v291;
      if (v40 < v291)
      {
        for (unint64_t i = (unint64_t)v294; ; i -= 80)
        {
          int v53 = *(_DWORD *)i;
          int v54 = *(_DWORD *)(i + 4);
          if (*(_DWORD *)i == v32 && v54 == v31)
          {
            if (v40 >= i || *(float *)(i + 68) < v39) {
              break;
            }
          }
          else
          {
            unsigned __int32 v56 = v54 >= v31;
            BOOL v5 = v53 == v32;
            BOOL v57 = v53 >= v32;
            if (v5) {
              BOOL v57 = v56;
            }
            if (v40 >= i || !v57) {
              break;
            }
          }
        }
      }
LABEL_53:
      uint64_t j = v40;
      if (v40 < i)
      {
        uint64_t j = v40;
        int v58 = i;
        do
        {
          sub_25B51B50C((uint64_t *)j, v58);
          do
          {
            while (1)
            {
              int v59 = *(_DWORD *)(j + 80);
              long long v60 = *(_DWORD *)(j + 84);
              j += 80;
              if (v59 != v32 || v60 != v31) {
                break;
              }
              if (*(float *)(j + 68) >= v39) {
                goto LABEL_67;
              }
            }
            BOOL v62 = v60 < v31;
            BOOL v5 = v59 == v32;
            int v63 = v59 < v32;
            if (v5) {
              int v63 = v62;
            }
          }
          while (v63);
          do
          {
LABEL_67:
            while (1)
            {
              int v64 = *(_DWORD *)(v58 - 80);
              BOOL v65 = *(_DWORD *)(v58 - 76);
              v58 -= 80;
              if (v64 != v32 || v65 != v31) {
                break;
              }
              if (*(float *)(v58 + 68) < v39) {
                goto LABEL_74;
              }
            }
            long long v67 = v65 < v31;
            BOOL v5 = v64 == v32;
            BOOL v68 = v64 < v32;
            if (v5) {
              BOOL v68 = v67;
            }
          }
          while (!v68);
LABEL_74:
          ;
        }
        while (j < v58);
      }
      if (j - 80 != a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)(j - 80);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(j - 76);
        if (*(char *)(a1 + 31) < 0) {
          operator delete(*v34);
        }
        int v69 = *(_OWORD *)(j - 72);
        *(void *)(a1 + 24) = *(void *)(j - 56);
        *(_OWORD *)int v34 = v69;
        *(unsigned char *)(j - 49) = 0;
        *(unsigned char *)(j - 72) = 0;
        if (*(char *)(a1 + 55) < 0) {
          operator delete(*v37);
        }
        int v70 = *(_OWORD *)(j - 48);
        *(void *)(a1 + 48) = *(void *)(j - 32);
        *(_OWORD *)long long v37 = v70;
        *(unsigned char *)(j - 25) = 0;
        *(unsigned char *)(j - 48) = 0;
        long long v71 = *(_OWORD *)(j - 24);
        *(void *)(a1 + 72) = *(void *)(j - 8);
        *(_OWORD *)(a1 + 56) = v71;
      }
      *(_DWORD *)(j - 80) = v32;
      *(_DWORD *)(j - 76) = v31;
      if (*(char *)(j - 49) < 0) {
        operator delete(*(void **)(j - 72));
      }
      *(void *)(j - 72) = v273;
      *(void *)(j - 57) = *(void *)&v304[7];
      *(void *)(j - 64) = *(void *)v304;
      *(unsigned char *)(j - 49) = v271;
      uint64_t k = v291;
      if (*(char *)(j - 25) < 0) {
        operator delete(*(void **)(j - 48));
      }
      *(unsigned char *)(j - 48) = v280;
      *(_OWORD *)(j - 47) = *(_OWORD *)v311;
      *(void *)(j - 33) = *(void *)&v311[14];
      *(unsigned char *)(j - 25) = v276;
      *(_DWORD *)(j - 16) = v326;
      *(void *)(j - 24) = v320;
      *(float *)(j - 12) = v39;
      *(void *)(j - 8) = v41;
      BOOL v4 = v40 >= i;
      a3 = v286;
      if (v4)
      {
        unint64_t v72 = sub_25B51BB50(a1, j - 80);
        if (sub_25B51BB50(j, v291))
        {
          uint64_t k = j - 80;
          if (v72) {
            return;
          }
          goto LABEL_1;
        }
        if (!v72) {
          goto LABEL_89;
        }
      }
      else
      {
LABEL_89:
        sub_25B5104AC(a1, j - 80, v286, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v28 = *(float *)(a1 + 68);
LABEL_91:
      BOOL v74 = *(_DWORD *)a1;
      unint64_t v73 = *(_DWORD *)(a1 + 4);
      unint64_t v76 = (void **)(a1 + 8);
      uint64_t v75 = *(void *)(a1 + 8);
      *(void *)&v305[7] = *(void *)(a1 + 23);
      *(void *)unint64_t v305 = *(void *)(a1 + 16);
      unint64_t v77 = *(unsigned char *)(a1 + 31);
      *(void *)(a1 + 8) = 0;
      int v79 = (void **)(a1 + 32);
      int v78 = *(unsigned char *)(a1 + 32);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)&v312[14] = *(void *)(a1 + 47);
      *(_OWORD *)v312 = *(_OWORD *)(a1 + 33);
      int v80 = *(unsigned char *)(a1 + 55);
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      v327 = *(_DWORD *)(a1 + 64);
      v321 = *(void *)(a1 + 56);
      BOOL v81 = *(_DWORD *)(k - 80);
      int v82 = *(_DWORD *)(k - 76);
      v281 = v78;
      long long v277 = v77;
      if (v81 == v74 && v82 == v73)
      {
        if (v28 < *(float *)(k - 12)) {
          goto LABEL_109;
        }
      }
      else
      {
        int v88 = v82 > v73;
        if (v81 != v74) {
          int v88 = v81 > v74;
        }
        if (v88)
        {
LABEL_109:
          for (uint64_t j = a1 + 80; ; j += 80)
          {
            BOOL v89 = *(_DWORD *)j;
            int v90 = *(_DWORD *)(j + 4);
            if (*(_DWORD *)j == v74 && v90 == v73)
            {
              if (v28 < *(float *)(j + 68)) {
                goto LABEL_120;
              }
            }
            else
            {
              int64_t v92 = v90 > v73;
              BOOL v5 = v89 == v74;
              int64_t v93 = v89 > v74;
              if (v5) {
                int64_t v93 = v92;
              }
              if (v93) {
                goto LABEL_120;
              }
            }
          }
        }
      }
      for (uint64_t j = a1 + 80; j < k; j += 80)
      {
        int v83 = *(_DWORD *)j;
        uint64_t v84 = *(_DWORD *)(j + 4);
        if (*(_DWORD *)j == v74 && v84 == v73)
        {
          if (v28 < *(float *)(j + 68)) {
            break;
          }
        }
        else
        {
          uint64_t v86 = v84 > v73;
          BOOL v5 = v83 == v74;
          uint64_t v87 = v83 > v74;
          if (v5) {
            uint64_t v87 = v86;
          }
          if (v87) {
            break;
          }
        }
      }
LABEL_120:
      uint64_t v94 = *(void *)(a1 + 72);
      if (j < k)
      {
        for (uint64_t k = (unint64_t)v294; ; k -= 80)
        {
          if (v81 == v74 && v82 == v73)
          {
            if (v28 >= *(float *)(k + 68)) {
              break;
            }
          }
          else
          {
            unint64_t v95 = v82 > v73;
            BOOL v5 = v81 == v74;
            int v96 = v81 > v74;
            if (v5) {
              int v96 = v95;
            }
            if (!v96) {
              break;
            }
          }
          BOOL v81 = *(_DWORD *)(k - 80);
          int v82 = *(_DWORD *)(k - 76);
        }
      }
LABEL_149:
      while (j < k)
      {
        sub_25B51B50C((uint64_t *)j, k);
        do
        {
          while (1)
          {
            BOOL v97 = *(_DWORD *)(j + 80);
            int v98 = *(_DWORD *)(j + 84);
            j += 80;
            if (v97 != v74 || v98 != v73) {
              break;
            }
            if (v28 < *(float *)(j + 68)) {
              goto LABEL_142;
            }
          }
          unint64_t v100 = v98 > v73;
          BOOL v5 = v97 == v74;
          int v101 = v97 > v74;
          if (v5) {
            int v101 = v100;
          }
        }
        while (!v101);
        do
        {
LABEL_142:
          while (1)
          {
            int v102 = *(_DWORD *)(k - 80);
            int v103 = *(_DWORD *)(k - 76);
            k -= 80;
            if (v102 != v74 || v103 != v73) {
              break;
            }
            if (v28 >= *(float *)(k + 68)) {
              goto LABEL_149;
            }
          }
          int v105 = v103 > v73;
          BOOL v5 = v102 == v74;
          int v106 = v102 > v74;
          if (v5) {
            int v106 = v105;
          }
        }
        while (v106);
      }
      BOOL v4 = j - 80 >= a1;
      BOOL v5 = j - 80 == a1;
      uint64_t k = v291;
      if (j - 80 != a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)(j - 80);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(j - 76);
        if (*(char *)(a1 + 31) < 0) {
          operator delete(*v76);
        }
        uint64_t v107 = *(_OWORD *)(j - 72);
        *(void *)(a1 + 24) = *(void *)(j - 56);
        *(_OWORD *)unint64_t v76 = v107;
        *(unsigned char *)(j - 49) = 0;
        *(unsigned char *)(j - 72) = 0;
        if (*(char *)(a1 + 55) < 0) {
          operator delete(*v79);
        }
        uint64_t v108 = *(_OWORD *)(j - 48);
        *(void *)(a1 + 48) = *(void *)(j - 32);
        *(_OWORD *)int v79 = v108;
        *(unsigned char *)(j - 25) = 0;
        *(unsigned char *)(j - 48) = 0;
        unint64_t v109 = *(_OWORD *)(j - 24);
        *(void *)(a1 + 72) = *(void *)(j - 8);
        *(_OWORD *)(a1 + 56) = v109;
      }
      *(_DWORD *)(j - 80) = v74;
      *(_DWORD *)(j - 76) = v73;
      if (*(char *)(j - 49) < 0) {
        operator delete(*(void **)(j - 72));
      }
      *(void *)(j - 72) = v75;
      *(void *)(j - 57) = *(void *)&v305[7];
      *(void *)(j - 64) = *(void *)v305;
      *(unsigned char *)(j - 49) = v277;
      a3 = v286;
      if (*(char *)(j - 25) < 0) {
        operator delete(*(void **)(j - 48));
      }
      a4 = 0;
      *(unsigned char *)(j - 48) = v281;
      *(_OWORD *)(j - 47) = *(_OWORD *)v312;
      *(void *)(j - 33) = *(void *)&v312[14];
      *(unsigned char *)(j - 25) = v80;
      *(_DWORD *)(j - 16) = v327;
      *(void *)(j - 24) = v321;
      *(float *)(j - 12) = v28;
      *(void *)(j - 8) = v94;
    }
  }
  int v117 = (_DWORD *)(a1 + 80);
  int64_t v119 = a1 == k || v117 == (_DWORD *)k;
  if ((a4 & 1) == 0)
  {
    if (v119) {
      return;
    }
    for (uint64_t m = a1 + 136; ; m += 80)
    {
      unint64_t v245 = a1;
      a1 = (unint64_t)v117;
      v246 = *(_DWORD *)(v245 + 80);
      v247 = *(_DWORD *)(v245 + 84);
      v248 = *(_DWORD *)v245;
      v249 = *(_DWORD *)(v245 + 4);
      if (v246 != *(_DWORD *)v245 || v247 != v249) {
        break;
      }
      uint64_t v253 = *(float *)(v245 + 148);
      if (v253 < *(float *)(v245 + 68)) {
        goto LABEL_358;
      }
LABEL_376:
      int v117 = (_DWORD *)(a1 + 80);
      if (a1 + 80 == k) {
        return;
      }
    }
    uint64_t v251 = v247 < v249;
    BOOL v5 = v246 == v248;
    int v252 = v246 < v248;
    if (v5) {
      int v252 = v251;
    }
    if (!v252) {
      goto LABEL_376;
    }
    uint64_t v253 = *(float *)(v245 + 148);
LABEL_358:
    v255 = *(_DWORD *)a1;
    v254 = *(_DWORD *)(a1 + 4);
    v256 = *(void *)(v245 + 88);
    *(void *)long long v309 = *(void *)(v245 + 96);
    *(void *)&v309[7] = *(void *)(v245 + 103);
    v257 = *(unsigned char *)(v245 + 111);
    *(void *)(v245 + 88) = 0;
    *(void *)(v245 + 96) = 0;
    v258 = *(unsigned char *)(v245 + 112);
    *(_OWORD *)v316 = *(_OWORD *)(v245 + 113);
    *(void *)&v316[14] = *(void *)(v245 + 127);
    uint64_t v259 = *(unsigned char *)(v245 + 135);
    *(void *)(v245 + 120) = 0;
    *(void *)(v245 + 128) = 0;
    *(void *)(v245 + 104) = 0;
    *(void *)(v245 + 112) = 0;
    v330 = *(_DWORD *)(v245 + 144);
    v325 = *(void *)(v245 + 136);
    v260 = *(void *)(v245 + 152);
    int32x2_t v261 = m;
    float32x2_t v262 = *(_DWORD *)v245;
    while (1)
    {
      float32x2_t v263 = *(_DWORD *)(v261 - 132);
      *(_DWORD *)(v261 - 56) = v262;
      *(_DWORD *)(v261 - 52) = v263;
      float32x2_t v264 = (void **)(v261 - 48);
      if (*(char *)(v261 - 25) < 0) {
        operator delete(*v264);
      }
      *(_OWORD *)float32x2_t v264 = *(_OWORD *)(v261 - 128);
      *(void *)(v261 - 32) = *(void *)(v261 - 112);
      *(unsigned char *)(v261 - 105) = 0;
      *(unsigned char *)(v261 - 128) = 0;
      float32x2_t v265 = (void **)(v261 - 24);
      if (*(char *)(v261 - 1) < 0) {
        operator delete(*v265);
      }
      *(_OWORD *)float32x2_t v265 = *(_OWORD *)(v261 - 104);
      *(void *)(v261 - 8) = *(void *)(v261 - 88);
      *(unsigned char *)(v261 - 81) = 0;
      *(unsigned char *)(v261 - 104) = 0;
      *(_OWORD *)int32x2_t v261 = *(_OWORD *)(v261 - 80);
      *(void *)(v261 + 16) = *(void *)(v261 - 64);
      float32x2_t v262 = *(_DWORD *)(v261 - 216);
      int32x2_t v266 = *(_DWORD *)(v261 - 212);
      if (v262 == v255 && v266 == v254)
      {
        if (v253 >= *(float *)(v261 - 148)) {
          goto LABEL_371;
        }
      }
      else
      {
        float32x2_t v267 = v266 > v254;
        if (v262 != v255) {
          float32x2_t v267 = v262 > v255;
        }
        if (!v267)
        {
LABEL_371:
          *(_DWORD *)(v261 - 136) = v255;
          *(_DWORD *)(v261 - 132) = v254;
          if (*(char *)(v261 - 105) < 0) {
            operator delete(*(void **)(v261 - 128));
          }
          *(void *)(v261 - 128) = v256;
          *(void *)(v261 - 120) = *(void *)v309;
          *(void *)(v261 - 113) = *(void *)&v309[7];
          *(unsigned char *)(v261 - 105) = v257;
          uint64_t k = v291;
          if (*(char *)(v261 - 81) < 0) {
            operator delete(*(void **)(v261 - 104));
          }
          *(unsigned char *)(v261 - 104) = v258;
          *(_OWORD *)(v261 - 103) = *(_OWORD *)v316;
          *(void *)(v261 - 89) = *(void *)&v316[14];
          *(unsigned char *)(v261 - 81) = v259;
          *(_DWORD *)(v261 - 72) = v330;
          *(void *)(v261 - 80) = v325;
          *(float *)(v261 - 68) = v253;
          *(void *)(v261 - 64) = v260;
          goto LABEL_376;
        }
      }
      v261 -= 80;
    }
  }
  if (v119) {
    return;
  }
  uint64_t v120 = 0;
  unint64_t v121 = (_DWORD *)a1;
  while (2)
  {
    unint64_t v122 = v121;
    unint64_t v121 = v117;
    uint64_t v123 = v122[20];
    uint64_t v124 = v122[21];
    int64_t v125 = *(float *)v122;
    int v126 = v122[1];
    if (v123 == *v122 && v124 == v126)
    {
      long long v130 = *((float *)v122 + 37);
      if (v130 >= *((float *)v122 + 17)) {
        goto LABEL_220;
      }
    }
    else
    {
      int v128 = v124 < v126;
      BOOL v5 = v123 == LODWORD(v125);
      int v129 = v123 < SLODWORD(v125);
      if (v5) {
        int v129 = v128;
      }
      if (!v129) {
        goto LABEL_220;
      }
      long long v130 = *((float *)v122 + 37);
    }
    uint64_t v132 = *v121;
    long long v131 = v121[1];
    float32x4_t v287 = (void *)*((void *)v122 + 11);
    *(void *)unint64_t v306 = *((void *)v122 + 12);
    *(void *)&v306[7] = *(void *)((char *)v122 + 103);
    float32x2_t v282 = *((unsigned char *)v122 + 111);
    *((void *)v122 + 11) = 0;
    *((void *)v122 + 12) = 0;
    unint64_t v133 = *((unsigned char *)v122 + 112);
    *(_OWORD *)long long v313 = *(_OWORD *)((char *)v122 + 113);
    *(void *)&v313[14] = *(void *)((char *)v122 + 127);
    unint64_t v134 = *((unsigned char *)v122 + 135);
    *((void *)v122 + 15) = 0;
    *((void *)v122 + 16) = 0;
    *((void *)v122 + 13) = 0;
    *((void *)v122 + 14) = 0;
    int v328 = v122[36];
    BOOL v322 = *((void *)v122 + 17);
    unint64_t v135 = *((void *)v122 + 19);
    int v136 = v120;
    int v137 = *(float *)v122;
    v295 = v134;
    while (2)
    {
      int v138 = a1 + v136;
      BOOL v139 = *(_DWORD *)(a1 + v136 + 4);
      *(float *)(v138 + 80) = v137;
      *(_DWORD *)(v138 + 84) = v139;
      int v140 = (void **)(a1 + v136 + 88);
      if (*(char *)(a1 + v136 + 111) < 0) {
        operator delete(*v140);
      }
      *(_OWORD *)int v140 = *(_OWORD *)(v138 + 8);
      *(void *)(a1 + v136 + 104) = *(void *)(v138 + 24);
      *(unsigned char *)(v138 + 31) = 0;
      *(unsigned char *)(v138 + 8) = 0;
      int v141 = (void **)(v138 + 112);
      if (*(char *)(v138 + 135) < 0) {
        operator delete(*v141);
      }
      uint64_t v142 = a1 + v136;
      *(_OWORD *)int v141 = *(_OWORD *)(a1 + v136 + 32);
      *(void *)(v138 + 128) = *(void *)(a1 + v136 + 48);
      *(unsigned char *)(v142 + 55) = 0;
      *(unsigned char *)(v142 + 32) = 0;
      *(_OWORD *)(v142 + 136) = *(_OWORD *)(a1 + v136 + 56);
      *(void *)(v142 + 152) = *(void *)(a1 + v136 + 72);
      if (!v136)
      {
        unint64_t v145 = v133;
        BOOL v146 = (void **)(v142 + 8);
        int v147 = (void **)(v142 + 32);
        long long v148 = v142 + 56;
        unint64_t v149 = a1;
        goto LABEL_215;
      }
      int v137 = *(float *)(v142 - 80);
      uint64_t v143 = *(_DWORD *)(v142 - 76);
      if (LODWORD(v137) == v132 && v143 == v131)
      {
        if (v130 >= *(float *)(a1 + v136 - 12)) {
          break;
        }
        goto LABEL_212;
      }
      unint64_t v144 = v143 > v131;
      if (LODWORD(v137) != v132) {
        unint64_t v144 = SLODWORD(v137) > v132;
      }
      if (v144)
      {
LABEL_212:
        v136 -= 80;
        continue;
      }
      break;
    }
    unint64_t v145 = v133;
    unint64_t v149 = a1 + v136;
    BOOL v146 = (void **)(v149 + 8);
    int v147 = (void **)(v149 + 32);
    long long v148 = v149 + 56;
LABEL_215:
    *(_DWORD *)unint64_t v149 = v132;
    *(_DWORD *)(v149 + 4) = v131;
    if (*(char *)(v149 + 31) < 0) {
      operator delete(*v146);
    }
    int *v146 = v287;
    *(void *)(v149 + 16) = *(void *)v306;
    *(void *)(v149 + 23) = *(void *)&v306[7];
    *(unsigned char *)(v149 + 31) = v282;
    if (*(char *)(v149 + 55) < 0) {
      operator delete(*v147);
    }
    *(unsigned char *)int v147 = v145;
    *(_OWORD *)(v149 + 33) = *(_OWORD *)v313;
    *(void *)(v149 + 47) = *(void *)&v313[14];
    *(unsigned char *)(v149 + 55) = v295;
    *(_DWORD *)(v148 + 8) = v328;
    *(void *)long long v148 = v322;
    *(float *)(v149 + 68) = v130;
    *(void *)(v149 + 72) = v135;
    uint64_t k = v291;
LABEL_220:
    int v117 = v121 + 20;
    v120 += 80;
    if (v121 + 20 != (_DWORD *)k) {
      continue;
    }
    break;
  }
}

  size_t v10 = a2 - 3;
  uint64_t j = (float **)a1;
  while (1)
  {
    a1 = (unint64_t)j;
    uint64_t v12 = (char *)a2 - (char *)j;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (a2 - j);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          int64_t v92 = *v10;
          int64_t v93 = **v10;
          uint64_t v94 = *j;
          unint64_t v95 = **j;
          int v96 = v93 < v95;
          if (v93 == v95)
          {
            BOOL v97 = v92[1];
            int v98 = v94[1];
            int v96 = v97 < v98;
            if (v97 == v98) {
              int v96 = v92[2] < v94[2];
            }
          }
          if (v96)
          {
            *uint64_t j = v92;
            *(a2 - 3) = v94;
            int v99 = j[1];
            j[1] = *(a2 - 2);
            *(a2 - 2) = v99;
            unint64_t v100 = j[2];
            j[2] = *(a2 - 1);
            *(a2 - 1) = v100;
          }
          break;
        case 3uLL:
          sub_25B5B8CA0(j, (uint64_t)(j + 3), a2 - 3);
          break;
        case 4uLL:
          sub_25B5B8E70(j, (uint64_t)(j + 3), j + 6, (uint64_t)(a2 - 3));
          break;
        case 5uLL:
          sub_25B5B8FC8(j, (uint64_t)(j + 3), j + 6, (uint64_t)(j + 9), (uint64_t)(a2 - 3));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 575) {
      break;
    }
    if (!a3)
    {
      if (j == a2) {
        return;
      }
      unint64_t v122 = (v13 - 2) >> 1;
      uint64_t v123 = v122;
      do
      {
        uint64_t v124 = v123;
        if (v122 >= v123)
        {
          int64_t v125 = (2 * v123) | 1;
          int v126 = &j[3 * v125];
          if (2 * v124 + 2 < (uint64_t)v13)
          {
            BOOL v127 = v126[3];
            int v128 = *v126;
            int v129 = **v126;
            long long v130 = v129 < *v127;
            if (v129 == *v127)
            {
              long long v131 = v128[1];
              uint64_t v132 = v127[1];
              long long v130 = v131 < v132;
              if (v131 == v132) {
                long long v130 = v128[2] < v127[2];
              }
            }
            if (v130)
            {
              v126 += 3;
              int64_t v125 = 2 * v124 + 2;
            }
          }
          unint64_t v133 = &j[3 * v124];
          unint64_t v134 = *v126;
          unint64_t v135 = **v126;
          int v136 = *v133;
          int v137 = **v133;
          int v138 = v135 < v137;
          if (v135 == v137)
          {
            BOOL v139 = v134[1];
            int v140 = v136[1];
            int v138 = v139 < v140;
            if (v139 == v140) {
              int v138 = v134[2] < v136[2];
            }
          }
          if (!v138)
          {
            int v141 = *(_OWORD *)&j[3 * v124 + 1];
            *unint64_t v133 = 0;
            v133[1] = 0;
            v133[2] = 0;
            do
            {
              uint64_t v142 = v126;
              *(_OWORD *)unint64_t v133 = *(_OWORD *)v126;
              v133[2] = v126[2];
              float32x2_t *v126 = 0;
              v126[1] = 0;
              v126[2] = 0;
              if (v122 < v125) {
                break;
              }
              uint64_t v143 = 2 * v125;
              int64_t v125 = (2 * v125) | 1;
              int v126 = &j[3 * v125];
              unint64_t v144 = v143 + 2;
              if (v144 < (uint64_t)v13)
              {
                unint64_t v145 = v126[3];
                BOOL v146 = *v126;
                int v147 = **v126;
                long long v148 = v147 < *v145;
                if (v147 == *v145)
                {
                  unint64_t v149 = v146[1];
                  int v150 = v145[1];
                  long long v148 = v149 < v150;
                  if (v149 == v150) {
                    long long v148 = v146[2] < v145[2];
                  }
                }
                if (v148)
                {
                  v126 += 3;
                  int64_t v125 = v144;
                }
              }
              int v151 = *v126;
              int v152 = **v126;
              BOOL v153 = v152 < *v136;
              if (v152 == *v136)
              {
                int v154 = v151[1];
                int v155 = v136[1];
                BOOL v153 = v154 < v155;
                if (v154 == v155) {
                  BOOL v153 = v151[2] < v136[2];
                }
              }
              unint64_t v133 = v142;
            }
            while (!v153);
            *uint64_t v142 = v136;
            *(_OWORD *)(v142 + 1) = v141;
          }
        }
        uint64_t v123 = v124 - 1;
      }
      while (v124);
      uint64_t v156 = v12 / 0x18uLL;
      while (2)
      {
        unint64_t v157 = 0;
        BOOL v159 = *j;
        int v158 = j[1];
        int v160 = j[2];
        j[1] = 0;
        j[2] = 0;
        long long v161 = j;
        *uint64_t j = 0;
        do
        {
          long long v162 = v161;
          v161 += 3 * v157 + 3;
          long long v163 = 2 * v157;
          unint64_t v157 = (2 * v157) | 1;
          long long v164 = v163 + 2;
          if (v164 < v156)
          {
            long long v165 = v161[3];
            uint64_t v166 = *v161;
            uint64_t v167 = **v161;
            uint64_t v168 = v167 < *v165;
            if (v167 == *v165)
            {
              uint64_t v169 = v166[1];
              uint64_t v170 = v165[1];
              uint64_t v168 = v169 < v170;
              if (v169 == v170) {
                uint64_t v168 = v166[2] < v165[2];
              }
            }
            if (v168)
            {
              v161 += 3;
              unint64_t v157 = v164;
            }
          }
          *(_OWORD *)long long v162 = *(_OWORD *)v161;
          v162[2] = v161[2];
          *long long v161 = 0;
          v161[1] = 0;
          v161[2] = 0;
        }
        while (v157 <= (uint64_t)((unint64_t)(v156 - 2) >> 1));
        if (v161 == a2 - 3)
        {
          *long long v161 = v159;
          float32x2_t v181 = v161;
        }
        else
        {
          *(_OWORD *)long long v161 = *(_OWORD *)(a2 - 3);
          v161[2] = *(a2 - 1);
          *(a2 - 3) = v159;
          *(a2 - 2) = v158;
          *(a2 - 1) = v160;
          v171 = (char *)v161 - (char *)j + 24;
          if (v171 < 25) {
            goto LABEL_210;
          }
          v172 = (v171 / 0x18uLL - 2) >> 1;
          BOOL v173 = &j[3 * v172];
          float32x2_t v174 = *v173;
          float32x2_t v175 = **v173;
          float32x2_t v176 = *v161;
          float32x2_t v177 = **v161;
          float v178 = v175 < v177;
          if (v175 == v177)
          {
            float v179 = v174[1];
            float32x2_t v180 = v176[1];
            float v178 = v179 < v180;
            if (v179 == v180) {
              float v178 = v174[2] < v176[2];
            }
          }
          if (!v178)
          {
LABEL_210:
            a2 -= 3;
            if (v156-- <= 2) {
              return;
            }
            continue;
          }
          int v158 = v161[1];
          int v160 = v161[2];
          v161[1] = 0;
          v161[2] = 0;
          *long long v161 = 0;
          do
          {
            float32x2_t v181 = v173;
            *(_OWORD *)long long v161 = *(_OWORD *)v173;
            v161[2] = v173[2];
            *BOOL v173 = 0;
            v173[1] = 0;
            v173[2] = 0;
            if (!v172) {
              break;
            }
            v172 = (v172 - 1) >> 1;
            BOOL v173 = &j[3 * v172];
            v182 = *v173;
            v183 = **v173;
            v184 = v183 < *v176;
            if (v183 == *v176)
            {
              v185 = v182[1];
              v186 = v176[1];
              v184 = v185 < v186;
              if (v185 == v186) {
                v184 = v182[2] < v176[2];
              }
            }
            long long v161 = v181;
          }
          while (v184);
          *float32x2_t v181 = v176;
        }
        break;
      }
      v181[1] = v158;
      v181[2] = v160;
      goto LABEL_210;
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = &j[3 * (v13 >> 1)];
    if ((unint64_t)v12 >= 0xC01)
    {
      sub_25B5B8CA0((float **)a1, a1 + 24 * (v13 >> 1), a2 - 3);
      uint64_t v16 = 3 * v14;
      uint64_t v17 = a1 + 8 * v16;
      sub_25B5B8CA0((float **)(a1 + 24), v17 - 24, a2 - 6);
      sub_25B5B8CA0((float **)(a1 + 48), a1 + 24 + 8 * v16, a2 - 9);
      sub_25B5B8CA0((float **)(v17 - 24), (uint64_t)v15, (float **)(a1 + 24 + 8 * v16));
      unint64_t v18 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v15;
      *(_OWORD *)unint64_t v15 = v18;
      uint64_t v19 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *(void *)(v17 + 16);
      *(void *)(v17 + 16) = v19;
    }
    else
    {
      sub_25B5B8CA0((float **)(a1 + 24 * (v13 >> 1)), a1, a2 - 3);
    }
    --a3;
    int v20 = *(float **)a1;
    if (a4) {
      goto LABEL_15;
    }
    int v21 = *(float **)(a1 - 24);
    int v22 = *v21 < *v20;
    if (*v21 == *v20)
    {
      int v23 = v21[1];
      int v24 = v20[1];
      int v22 = v23 < v24;
      if (v23 == v24) {
        int v22 = v21[2] < v20[2];
      }
    }
    if (v22)
    {
LABEL_15:
      int v25 = *(_OWORD *)(a1 + 8);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      int v26 = (float **)(a1 + 24);
      uint64_t v27 = *v20;
      while (1)
      {
        uint64_t v28 = *v26;
        BOOL v29 = **v26;
        int v30 = v29 < v27;
        if (v29 == v27)
        {
          int v31 = v28[1];
          BOOL v32 = v20[1];
          int v30 = v31 < v32;
          if (v31 == v32) {
            int v30 = v28[2] < v20[2];
          }
        }
        if (!v30) {
          break;
        }
        v26 += 3;
      }
      unint64_t i = a2 - 3;
      if (v26 - 3 == (float **)a1)
      {
        unint64_t i = a2;
        if (v26 < a2)
        {
          for (unint64_t i = a2 - 3; ; i -= 3)
          {
            BOOL v39 = *i;
            int v40 = **i;
            if (v40 == v27)
            {
              int v41 = v39[1];
              BOOL v42 = v20[1];
              if (v41 == v42)
              {
                if (v26 >= i) {
                  break;
                }
                int v41 = v39[2];
                BOOL v42 = v20[2];
              }
              else if (v26 >= i)
              {
                break;
              }
              if (v41 < v42) {
                break;
              }
            }
            else if (v26 >= i || v40 < v27)
            {
              break;
            }
          }
        }
      }
      else
      {
        while (1)
        {
          int v34 = *i;
          uint64_t v35 = **i;
          int v36 = v35 < v27;
          if (v35 == v27)
          {
            long long v37 = v34[1];
            int v38 = v20[1];
            int v36 = v37 < v38;
            if (v37 == v38) {
              int v36 = v34[2] < v20[2];
            }
          }
          if (v36) {
            break;
          }
          i -= 3;
        }
      }
      uint64_t j = v26;
      if (v26 < i)
      {
        int v43 = *i;
        uint64_t j = v26;
        long long v44 = i;
        do
        {
          *uint64_t j = v43;
          *long long v44 = v28;
          BOOL v45 = j[1];
          j[1] = v44[1];
          v44[1] = v45;
          int v46 = j[2];
          j[2] = v44[2];
          v44[2] = v46;
          do
          {
            int v47 = j[3];
            j += 3;
            uint64_t v28 = v47;
            BOOL v48 = *v47 < v27;
            if (*v47 == v27)
            {
              int v49 = v28[1];
              BOOL v50 = v20[1];
              BOOL v48 = v49 < v50;
              if (v49 == v50) {
                BOOL v48 = v28[2] < v20[2];
              }
            }
          }
          while (v48);
          do
          {
            int v51 = *(v44 - 3);
            v44 -= 3;
            int v43 = v51;
            BOOL v52 = *v51 < v27;
            if (*v51 == v27)
            {
              int v53 = v43[1];
              int v54 = v20[1];
              BOOL v52 = v53 < v54;
              if (v53 == v54) {
                BOOL v52 = v43[2] < v20[2];
              }
            }
          }
          while (!v52);
        }
        while (j < v44);
      }
      uint64_t v55 = *(float **)a1;
      if (j - 3 == (float **)a1)
      {
        if (v55)
        {
          *(j - 2) = v55;
          v203 = v25;
          operator delete(v55);
          int v25 = v203;
        }
      }
      else
      {
        if (v55)
        {
          *(void *)(a1 + 8) = v55;
          v202 = v25;
          operator delete(v55);
          int v25 = v202;
          *(void *)a1 = 0;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
        }
        *(_OWORD *)a1 = *(_OWORD *)(j - 3);
        *(void *)(a1 + 16) = *(j - 1);
        *(j - 3) = 0;
        *(j - 2) = 0;
        *(j - 1) = 0;
      }
      *(j - 3) = v20;
      *((_OWORD *)j - 1) = v25;
      if (v26 < i) {
        goto LABEL_62;
      }
      unsigned __int32 v56 = sub_25B5B918C((float **)a1, j - 3);
      if (sub_25B5B918C(j, a2))
      {
        a2 = j - 3;
        if (v56) {
          return;
        }
        goto LABEL_1;
      }
      if (!v56)
      {
LABEL_62:
        sub_25B5B7E58(a1, j - 3, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      BOOL v57 = *(_OWORD *)(a1 + 8);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      int v58 = *v20;
      int v59 = *v10;
      long long v60 = **v10;
      int v61 = *v20 < v60;
      if (*v20 == v60)
      {
        BOOL v62 = v20[1];
        int v63 = v59[1];
        int v61 = v62 < v63;
        if (v62 == v63) {
          int v61 = v20[2] < v59[2];
        }
      }
      if (v61)
      {
        for (uint64_t j = (float **)(a1 + 24); ; j += 3)
        {
          int v64 = *j;
          BOOL v65 = **j;
          int v66 = v58 < v65;
          if (v58 == v65)
          {
            long long v67 = v20[1];
            BOOL v68 = v64[1];
            int v66 = v67 < v68;
            if (v67 == v68) {
              int v66 = v20[2] < v64[2];
            }
          }
          if (v66) {
            break;
          }
        }
      }
      else
      {
        for (uint64_t j = (float **)(a1 + 24); j < a2; j += 3)
        {
          int v69 = *j;
          int v70 = **j;
          long long v71 = v58 < v70;
          if (v58 == v70)
          {
            unint64_t v72 = v20[1];
            unint64_t v73 = v69[1];
            long long v71 = v72 < v73;
            if (v72 == v73) {
              long long v71 = v20[2] < v69[2];
            }
          }
          if (v71) {
            break;
          }
        }
      }
      uint64_t k = a2;
      if (j < a2)
      {
        for (uint64_t k = a2 - 3; ; k -= 3)
        {
          uint64_t v75 = v58 < v60;
          if (v58 == v60)
          {
            unint64_t v76 = v20[1];
            unint64_t v77 = v59[1];
            uint64_t v75 = v76 < v77;
            if (v76 == v77) {
              uint64_t v75 = v20[2] < v59[2];
            }
          }
          if (!v75) {
            break;
          }
          int v78 = *(k - 3);
          int v59 = v78;
          long long v60 = *v78;
        }
      }
      if (j < k)
      {
        int v79 = *j;
        int v80 = *k;
        do
        {
          *uint64_t j = v80;
          *uint64_t k = v79;
          BOOL v81 = j[1];
          j[1] = k[1];
          k[1] = v81;
          int v82 = j[2];
          j[2] = k[2];
          k[2] = v82;
          do
          {
            int v83 = j[3];
            j += 3;
            int v79 = v83;
            uint64_t v84 = v58 < *v83;
            if (v58 == *v83)
            {
              unint64_t v85 = v20[1];
              uint64_t v86 = v79[1];
              uint64_t v84 = v85 < v86;
              if (v85 == v86) {
                uint64_t v84 = v20[2] < v79[2];
              }
            }
          }
          while (!v84);
          do
          {
            uint64_t v87 = *(k - 3);
            k -= 3;
            int v80 = v87;
            int v88 = v58 < *v87;
            if (v58 == *v87)
            {
              BOOL v89 = v20[1];
              int v90 = v80[1];
              int v88 = v89 < v90;
              if (v89 == v90) {
                int v88 = v20[2] < v80[2];
              }
            }
          }
          while (v88);
        }
        while (j < k);
      }
      int64_t v91 = *(float **)a1;
      BOOL v4 = (unint64_t)(j - 3) >= a1;
      BOOL v5 = j - 3 == (float **)a1;
      if (j - 3 == (float **)a1)
      {
        if (v91)
        {
          *(j - 2) = v91;
          v205 = v57;
          operator delete(v91);
          BOOL v57 = v205;
        }
      }
      else
      {
        if (v91)
        {
          *(void *)(a1 + 8) = v91;
          v204 = v57;
          operator delete(v91);
          BOOL v57 = v204;
          *(void *)a1 = 0;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
        }
        *(_OWORD *)a1 = *(_OWORD *)(j - 3);
        *(void *)(a1 + 16) = *(j - 1);
        *(j - 3) = 0;
        *(j - 2) = 0;
        *(j - 1) = 0;
      }
      a4 = 0;
      *(j - 3) = v20;
      *((_OWORD *)j - 1) = v57;
    }
  }
  int v101 = j + 3;
  int v103 = j == a2 || v101 == a2;
  if (a4)
  {
    if (!v103)
    {
      BOOL v104 = 0;
      int v105 = j;
      do
      {
        int v106 = v105;
        int v105 = v101;
        uint64_t v107 = v106[3];
        uint64_t v108 = *v106;
        unint64_t v109 = **v106;
        uint64_t v110 = *v107 < v109;
        if (*v107 == v109)
        {
          uint64_t v111 = v107[1];
          int v112 = v108[1];
          uint64_t v110 = v111 < v112;
          if (v111 == v112) {
            uint64_t v110 = v107[2] < v108[2];
          }
        }
        if (v110)
        {
          BOOL v113 = *((_OWORD *)v106 + 2);
          *int v105 = 0;
          v105[1] = 0;
          int v114 = v104;
          v105[2] = 0;
          while (1)
          {
            int v115 = (char *)j + v114;
            *(_OWORD *)(v115 + 24) = *(_OWORD *)((char *)j + v114);
            *((void *)v115 + 5) = *(float **)((char *)j + v114 + 16);
            *((void *)v115 + 1) = 0;
            *((void *)v115 + 2) = 0;
            *(void *)int v115 = 0;
            if (!v114) {
              break;
            }
            BOOL v116 = (float *)*((void *)v115 - 3);
            int v117 = *v107 < *v116;
            if (*v107 == *v116)
            {
              long long v118 = v107[1];
              int64_t v119 = v116[1];
              int v117 = v118 < v119;
              if (v118 == v119) {
                int v117 = v107[2] < v116[2];
              }
            }
            if (!v117)
            {
              uint64_t v120 = (float **)((char *)j + v114);
              goto LABEL_149;
            }
            v114 -= 24;
          }
          uint64_t v120 = j;
LABEL_149:
          unint64_t v121 = *v120;
          if (*v120)
          {
            v120[1] = v121;
            float32x2_t v206 = v113;
            operator delete(v121);
            BOOL v113 = v206;
          }
          *uint64_t v120 = v107;
          *(_OWORD *)(v120 + 1) = v113;
        }
        int v101 = v105 + 3;
        v104 += 24;
      }
      while (v105 + 3 != a2);
    }
  }
  else if (!v103)
  {
    do
    {
      uint64_t v188 = a1;
      a1 = (unint64_t)v101;
      v189 = *(float **)(v188 + 24);
      uint64_t v190 = *(float **)v188;
      unint64_t v191 = **(float **)v188;
      unint64_t v192 = *v189 < v191;
      if (*v189 == v191)
      {
        v193 = v189[1];
        uint64_t v194 = v190[1];
        unint64_t v192 = v193 < v194;
        if (v193 == v194) {
          unint64_t v192 = v189[2] < v190[2];
        }
      }
      if (v192)
      {
        v195 = *(_OWORD *)(v188 + 32);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        do
        {
          v196 = v188;
          *(_OWORD *)(v188 + 24) = *(_OWORD *)v188;
          *(void *)(v188 + 40) = *(void *)(v188 + 16);
          *(void *)uint64_t v188 = 0;
          *(void *)(v188 + 8) = 0;
          *(void *)(v188 + 16) = 0;
          v198 = *(float **)(v188 - 24);
          v188 -= 24;
          v197 = v198;
          uint64_t v199 = *v189 < *v198;
          if (*v189 == *v198)
          {
            unint64_t v200 = v189[1];
            unint64_t v201 = v197[1];
            uint64_t v199 = v200 < v201;
            if (v200 == v201) {
              uint64_t v199 = v189[2] < v197[2];
            }
          }
        }
        while (v199);
        *(void *)v196 = v189;
        *(_OWORD *)(v196 + 8) = v195;
      }
      int v101 = (float **)(a1 + 24);
    }
    while ((float **)(a1 + 24) != a2);
  }
}

  unint64_t v11 = (float32x2_t **)(a2 - 24);
  unint64_t i = a1;
  while (1)
  {
    a1 = i;
    unint64_t v13 = a2 - i;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - i) >> 3);
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          int64_t v92 = *v11;
          int64_t v93 = a3[1];
          uint64_t v94 = **a3;
          unint64_t v95 = (int32x2_t)vmul_f32(vsub_f32(**v11, v94), *v93);
          int v96 = *(float32x2_t **)i;
          BOOL v97 = (int32x2_t)vmul_f32(*v93, vsub_f32(**(float32x2_t **)i, v94));
          int v98 = vadd_f32((float32x2_t)vzip1_s32(v95, v97), (float32x2_t)vzip2_s32(v95, v97));
          int v99 = v98.f32[0] < v98.f32[1];
          if (v98.f32[0] == v98.f32[1]) {
            int v99 = v92[1].f32[0] < v96[1].f32[0];
          }
          if (v99)
          {
            *(void *)unint64_t i = v92;
            *(void *)(a2 - 24) = v96;
            unint64_t v100 = *(void *)(i + 8);
            *(void *)(i + 8) = *(void *)(a2 - 16);
            *(void *)(a2 - 16) = v100;
            int v101 = *(void *)(i + 16);
            *(void *)(i + 16) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v101;
          }
          break;
        case 3uLL:
          sub_25B5BC4F0(i, i + 24, a2 - 24, a3);
          break;
        case 4uLL:
          sub_25B5BC738(i, i + 24, i + 48, a2 - 24, a3);
          break;
        case 5uLL:
          sub_25B5BC8F4(i, i + 24, i + 48, i + 72, a2 - 24, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 575) {
      break;
    }
    if (!a4)
    {
      if (i == a2) {
        return;
      }
      BOOL v127 = (v14 - 2) >> 1;
      int v128 = v127;
      do
      {
        int v129 = v128;
        if (v127 >= v128)
        {
          long long v130 = (2 * v128) | 1;
          long long v131 = i + 24 * v130;
          uint64_t v132 = **a3;
          if (2 * v129 + 2 < (uint64_t)v14)
          {
            unint64_t v133 = *(float32x2_t **)(v131 + 24);
            int v138 = *a3[1];
            unint64_t v134 = (int32x2_t)vmul_f32(vsub_f32(**(float32x2_t **)v131, v132), v138);
            unint64_t v135 = (int32x2_t)vmul_f32(v138, vsub_f32(*v133, v132));
            int v136 = vadd_f32((float32x2_t)vzip1_s32(v134, v135), (float32x2_t)vzip2_s32(v134, v135));
            int v137 = v136.f32[0] < v136.f32[1];
            if (v136.f32[0] == v136.f32[1]) {
              int v137 = *(float *)(*(void *)v131 + 8) < v133[1].f32[0];
            }
            if (v137)
            {
              v131 += 24;
              long long v130 = 2 * v129 + 2;
            }
          }
          else
          {
            int v138 = *a3[1];
          }
          BOOL v139 = i + 24 * v129;
          int v140 = (int32x2_t)vmul_f32(v138, vsub_f32(**(float32x2_t **)v131, v132));
          int v141 = *(float32x2_t **)v139;
          uint64_t v142 = (int32x2_t)vmul_f32(v138, vsub_f32(**(float32x2_t **)v139, v132));
          uint64_t v143 = vadd_f32((float32x2_t)vzip1_s32(v140, v142), (float32x2_t)vzip2_s32(v140, v142));
          unint64_t v144 = v143.f32[0] < v143.f32[1];
          if (v143.f32[0] == v143.f32[1]) {
            unint64_t v144 = *(float *)(*(void *)v131 + 8) < v141[1].f32[0];
          }
          if (!v144)
          {
            unint64_t v145 = *(_OWORD *)(i + 24 * v129 + 8);
            *(void *)BOOL v139 = 0;
            *(void *)(v139 + 8) = 0;
            *(void *)(v139 + 16) = 0;
            do
            {
              BOOL v146 = v131;
              *(_OWORD *)BOOL v139 = *(_OWORD *)v131;
              *(void *)(v139 + 16) = *(void *)(v131 + 16);
              *(void *)long long v131 = 0;
              *(void *)(v131 + 8) = 0;
              *(void *)(v131 + 16) = 0;
              if (v127 < v130) {
                break;
              }
              int v147 = 2 * v130;
              long long v130 = (2 * v130) | 1;
              long long v131 = i + 24 * v130;
              long long v148 = v147 + 2;
              unint64_t v149 = **a3;
              int v150 = *a3[1];
              if (v148 < (uint64_t)v14)
              {
                int v151 = *(float32x2_t **)(v131 + 24);
                int v152 = (int32x2_t)vmul_f32(v150, vsub_f32(**(float32x2_t **)v131, v149));
                BOOL v153 = (int32x2_t)vmul_f32(v150, vsub_f32(*v151, v149));
                int v154 = vadd_f32((float32x2_t)vzip1_s32(v152, v153), (float32x2_t)vzip2_s32(v152, v153));
                int v155 = v154.f32[0] < v154.f32[1];
                if (v154.f32[0] == v154.f32[1]) {
                  int v155 = *(float *)(*(void *)v131 + 8) < v151[1].f32[0];
                }
                if (v155)
                {
                  v131 += 24;
                  long long v130 = v148;
                }
              }
              uint64_t v156 = (int32x2_t)vmul_f32(v150, vsub_f32(**(float32x2_t **)v131, v149));
              unint64_t v157 = (int32x2_t)vmul_f32(v150, vsub_f32(*v141, v149));
              int v158 = vadd_f32((float32x2_t)vzip1_s32(v156, v157), (float32x2_t)vzip2_s32(v156, v157));
              BOOL v159 = v158.f32[0] < v158.f32[1];
              if (v158.f32[0] == v158.f32[1]) {
                BOOL v159 = *(float *)(*(void *)v131 + 8) < v141[1].f32[0];
              }
              BOOL v139 = v146;
            }
            while (!v159);
            *(void *)BOOL v146 = v141;
            *(_OWORD *)(v146 + 8) = v145;
          }
        }
        int v128 = v129 - 1;
      }
      while (v129);
      int v160 = v13 / 0x18uLL;
      while (2)
      {
        long long v161 = 0;
        long long v163 = *(float32x2_t **)i;
        long long v162 = *(float32x2_t **)(i + 8);
        long long v164 = *(float32x2_t **)(i + 16);
        *(void *)(i + 8) = 0;
        *(void *)(i + 16) = 0;
        long long v165 = (float32x2_t **)i;
        *(void *)unint64_t i = 0;
        do
        {
          uint64_t v166 = v165;
          v165 += 3 * v161 + 3;
          uint64_t v167 = 2 * v161;
          long long v161 = (2 * v161) | 1;
          uint64_t v168 = v167 + 2;
          if (v168 < v160)
          {
            uint64_t v169 = v165[3];
            uint64_t v170 = a3[1];
            v171 = **a3;
            v172 = (int32x2_t)vmul_f32(vsub_f32(**v165, v171), *v170);
            BOOL v173 = (int32x2_t)vmul_f32(*v170, vsub_f32(*v169, v171));
            float32x2_t v174 = vadd_f32((float32x2_t)vzip1_s32(v172, v173), (float32x2_t)vzip2_s32(v172, v173));
            float32x2_t v175 = v174.f32[0] < v174.f32[1];
            if (v174.f32[0] == v174.f32[1]) {
              float32x2_t v175 = (*v165)[1].f32[0] < v169[1].f32[0];
            }
            if (v175)
            {
              v165 += 3;
              long long v161 = v168;
            }
          }
          *(_OWORD *)uint64_t v166 = *(_OWORD *)v165;
          v166[2] = v165[2];
          *long long v165 = 0;
          v165[1] = 0;
          v165[2] = 0;
        }
        while (v161 <= (uint64_t)((unint64_t)(v160 - 2) >> 1));
        if (v165 == (float32x2_t **)(a2 - 24))
        {
          *long long v165 = v163;
          v186 = v165;
        }
        else
        {
          *(_OWORD *)long long v165 = *(_OWORD *)(a2 - 24);
          v165[2] = *(float32x2_t **)(a2 - 8);
          *(void *)(a2 - 24) = v163;
          *(void *)(a2 - 16) = v162;
          *(void *)(a2 - 8) = v164;
          float32x2_t v176 = (uint64_t)v165 - i + 24;
          if (v176 < 25) {
            goto LABEL_192;
          }
          float32x2_t v177 = (v176 / 0x18uLL - 2) >> 1;
          float v178 = i + 24 * v177;
          float v179 = a3[1];
          float32x2_t v180 = **a3;
          float32x2_t v181 = (int32x2_t)vmul_f32(vsub_f32(**(float32x2_t **)v178, v180), *v179);
          v182 = *v165;
          v183 = (int32x2_t)vmul_f32(*v179, vsub_f32(**v165, v180));
          v184 = vadd_f32((float32x2_t)vzip1_s32(v181, v183), (float32x2_t)vzip2_s32(v181, v183));
          v185 = v184.f32[0] < v184.f32[1];
          if (v184.f32[0] == v184.f32[1]) {
            v185 = *(float *)(*(void *)v178 + 8) < v182[1].f32[0];
          }
          if (!v185)
          {
LABEL_192:
            a2 -= 24;
            if (v160-- <= 2) {
              return;
            }
            continue;
          }
          long long v162 = v165[1];
          long long v164 = v165[2];
          v165[1] = 0;
          v165[2] = 0;
          *long long v165 = 0;
          do
          {
            v186 = (float32x2_t **)v178;
            *(_OWORD *)long long v165 = *(_OWORD *)v178;
            v165[2] = *(float32x2_t **)(v178 + 16);
            *(void *)float v178 = 0;
            *(void *)(v178 + 8) = 0;
            *(void *)(v178 + 16) = 0;
            if (!v177) {
              break;
            }
            float32x2_t v177 = (v177 - 1) >> 1;
            float v178 = i + 24 * v177;
            v187 = a3[1];
            uint64_t v188 = **a3;
            v189 = (int32x2_t)vmul_f32(vsub_f32(**(float32x2_t **)v178, v188), *v187);
            uint64_t v190 = (int32x2_t)vmul_f32(*v187, vsub_f32(*v182, v188));
            unint64_t v191 = vadd_f32((float32x2_t)vzip1_s32(v189, v190), (float32x2_t)vzip2_s32(v189, v190));
            unint64_t v192 = v191.f32[0] < v191.f32[1];
            if (v191.f32[0] == v191.f32[1]) {
              unint64_t v192 = *(float *)(*(void *)v178 + 8) < v182[1].f32[0];
            }
            long long v165 = v186;
          }
          while (v192);
          float32x2_t *v186 = v182;
        }
        break;
      }
      v186[1] = v162;
      v186[2] = v164;
      goto LABEL_192;
    }
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = (_OWORD *)(i + 24 * (v14 >> 1));
    if ((unint64_t)v13 >= 0xC01)
    {
      sub_25B5BC4F0(a1, a1 + 24 * (v14 >> 1), a2 - 24, a3);
      uint64_t v17 = 3 * v15;
      unint64_t v18 = a1 + 8 * v17;
      sub_25B5BC4F0(a1 + 24, v18 - 24, a2 - 48, a3);
      sub_25B5BC4F0(a1 + 48, a1 + 24 + 8 * v17, a2 - 72, a3);
      sub_25B5BC4F0(v18 - 24, (uint64_t)v16, a1 + 24 + 8 * v17, a3);
      uint64_t v19 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *v16;
      *uint64_t v16 = v19;
      int v20 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *(void *)(v18 + 16);
      *(void *)(v18 + 16) = v20;
    }
    else
    {
      sub_25B5BC4F0(a1 + 24 * (v14 >> 1), a1, a2 - 24, a3);
    }
    --a4;
    int v21 = *(float32x2_t **)a1;
    if ((a5 & 1) == 0)
    {
      int v22 = a3[1];
      int v23 = **a3;
      int v24 = *(float32x2_t **)(a1 - 24);
      int v25 = (int32x2_t)vmul_f32(vsub_f32(*v24, v23), *v22);
      int v26 = (int32x2_t)vmul_f32(*v22, vsub_f32(*v21, v23));
      uint64_t v27 = vadd_f32((float32x2_t)vzip1_s32(v25, v26), (float32x2_t)vzip2_s32(v25, v26));
      uint64_t v28 = v27.f32[0] < v27.f32[1];
      if (v27.f32[0] == v27.f32[1]) {
        uint64_t v28 = v24[1].f32[0] < v21[1].f32[0];
      }
      if (!v28)
      {
        long long v60 = *(_OWORD *)(a1 + 8);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        int v61 = **a3;
        BOOL v62 = *v21;
        int v63 = *a3[1];
        int v64 = (int32x2_t)vmul_f32(vsub_f32(*v21, v61), v63);
        BOOL v65 = *v11;
        int v66 = **v11;
        long long v67 = (int32x2_t)vmul_f32(v63, vsub_f32(v66, v61));
        BOOL v68 = vadd_f32((float32x2_t)vzip1_s32(v64, v67), (float32x2_t)vzip2_s32(v64, v67));
        if (v68.f32[0] == v68.f32[1])
        {
          if (v21[1].f32[0] < v65[1].f32[0]) {
            goto LABEL_59;
          }
        }
        else if (v68.f32[0] < v68.f32[1])
        {
LABEL_59:
          for (unint64_t i = a1 + 24; ; i += 24)
          {
            int v69 = (int32x2_t)vmul_f32(v63, vsub_f32(**(float32x2_t **)i, v61));
            int v70 = vadd_f32((float32x2_t)v69, (float32x2_t)vdup_lane_s32(v69, 1));
            if (vceq_f32(v68, v70).u8[0])
            {
              if (v21[1].f32[0] < *(float *)(*(void *)i + 8)) {
                goto LABEL_73;
              }
            }
            else if (vcgt_f32(v70, v68).u8[0])
            {
              goto LABEL_73;
            }
          }
        }
        for (unint64_t i = a1 + 24; i < a2; i += 24)
        {
          long long v71 = (int32x2_t)vmul_f32(v63, vsub_f32(**(float32x2_t **)i, v61));
          unint64_t v72 = vadd_f32((float32x2_t)v71, (float32x2_t)vdup_lane_s32(v71, 1));
          if (vceq_f32(v68, v72).u8[0])
          {
            if (v21[1].f32[0] < *(float *)(*(void *)i + 8)) {
              break;
            }
          }
          else if (vcgt_f32(v72, v68).u8[0])
          {
            break;
          }
        }
LABEL_73:
        uint64_t j = (float32x2_t **)a2;
        if (i < a2)
        {
          for (uint64_t j = (float32x2_t **)(a2 - 24); ; j -= 3)
          {
            BOOL v74 = (int32x2_t)vmul_f32(v63, vsub_f32(v66, v61));
            uint64_t v75 = vadd_f32((float32x2_t)v74, (float32x2_t)vdup_lane_s32(v74, 1));
            if (vceq_f32(v68, v75).u8[0])
            {
              if (v21[1].f32[0] >= v65[1].f32[0]) {
                break;
              }
            }
            else if ((vcgt_f32(v75, v68).u8[0] & 1) == 0)
            {
              break;
            }
            unint64_t v76 = *(j - 3);
            BOOL v65 = v76;
            int v66 = *v76;
          }
        }
        if (i < (unint64_t)j)
        {
          unint64_t v77 = *(float32x2_t **)i;
          int v78 = *j;
          do
          {
            *(void *)unint64_t i = v78;
            *uint64_t j = v77;
            int v79 = *(float32x2_t **)(i + 8);
            *(void *)(i + 8) = j[1];
            j[1] = v79;
            int v80 = *(float32x2_t **)(i + 16);
            *(void *)(i + 16) = j[2];
            j[2] = v80;
            BOOL v81 = **a3;
            int v82 = *a3[1];
            int v83 = (int32x2_t)vmul_f32(vsub_f32(v62, v81), v82);
            uint64_t v84 = vadd_f32((float32x2_t)v83, (float32x2_t)vdup_lane_s32(v83, 1));
            do
            {
              while (1)
              {
                unint64_t v85 = *(float32x2_t **)(i + 24);
                i += 24;
                unint64_t v77 = v85;
                uint64_t v86 = (int32x2_t)vmul_f32(v82, vsub_f32(*v85, v81));
                uint64_t v87 = vadd_f32((float32x2_t)v86, (float32x2_t)vdup_lane_s32(v86, 1));
                if ((vceq_f32(v84, v87).u8[0] & 1) == 0) {
                  break;
                }
                if (v21[1].f32[0] < v77[1].f32[0]) {
                  goto LABEL_89;
                }
              }
            }
            while ((vcgt_f32(v87, v84).u8[0] & 1) == 0);
            do
            {
LABEL_89:
              while (1)
              {
                int v88 = *(j - 3);
                j -= 3;
                int v78 = v88;
                BOOL v89 = (int32x2_t)vmul_f32(v82, vsub_f32(*v88, v81));
                int v90 = vadd_f32((float32x2_t)v89, (float32x2_t)vdup_lane_s32(v89, 1));
                if (vceq_f32(v84, v90).u8[0]) {
                  break;
                }
                if ((vcgt_f32(v90, v84).u8[0] & 1) == 0) {
                  goto LABEL_91;
                }
              }
            }
            while (v21[1].f32[0] < v78[1].f32[0]);
LABEL_91:
            ;
          }
          while (i < (unint64_t)j);
        }
        int64_t v91 = *(float32x2_t **)a1;
        BOOL v5 = i - 24 >= a1;
        unint64_t v6 = i - 24 == a1;
        if (i - 24 == a1)
        {
          if (v91)
          {
            *(void *)(i - 16) = v91;
            uint64_t v216 = v60;
            operator delete(v91);
            long long v60 = v216;
          }
        }
        else
        {
          if (v91)
          {
            *(void *)(a1 + 8) = v91;
            uint64_t v215 = v60;
            operator delete(v91);
            long long v60 = v215;
            *(void *)a1 = 0;
            *(void *)(a1 + 8) = 0;
            *(void *)(a1 + 16) = 0;
          }
          *(_OWORD *)a1 = *(_OWORD *)(i - 24);
          *(void *)(a1 + 16) = *(void *)(i - 8);
          *(void *)(i - 24) = 0;
          *(void *)(i - 16) = 0;
          *(void *)(i - 8) = 0;
        }
        a5 = 0;
        *(void *)(i - 24) = v21;
        *(_OWORD *)(i - 16) = v60;
        continue;
      }
    }
    BOOL v29 = *(_OWORD *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    int v30 = **a3;
    int v31 = *a3[1];
    BOOL v32 = *v21;
    int v33 = (int32x2_t)vmul_f32(v31, vsub_f32(*v21, v30));
    int v34 = vadd_f32((float32x2_t)v33, (float32x2_t)vdup_lane_s32(v33, 1));
    for (uint64_t k = (float32x2_t **)(a1 + 24); ; k += 3)
    {
      int v36 = *k;
      long long v37 = (int32x2_t)vmul_f32(v31, vsub_f32(**k, v30));
      int v38 = vadd_f32((float32x2_t)v37, (float32x2_t)vdup_lane_s32(v37, 1));
      if ((vceq_f32(v38, v34).u32[0] & 1) == 0) {
        break;
      }
      if (v36[1].f32[0] >= v21[1].f32[0]) {
        goto LABEL_20;
      }
LABEL_19:
      ;
    }
    if (vcgt_f32(v34, v38).u32[0]) {
      goto LABEL_19;
    }
LABEL_20:
    uint64_t m = (float32x2_t **)(a2 - 24);
    if (k - 3 != (float32x2_t **)a1)
    {
      while (1)
      {
        int v40 = (int32x2_t)vmul_f32(v31, vsub_f32(**m, v30));
        int v41 = vadd_f32((float32x2_t)v40, (float32x2_t)vdup_lane_s32(v40, 1));
        if (vceq_f32(v41, v34).u32[0])
        {
          if ((*m)[1].f32[0] < v21[1].f32[0]) {
            goto LABEL_35;
          }
        }
        else if (vcgt_f32(v34, v41).u32[0])
        {
          goto LABEL_35;
        }
        m -= 3;
      }
    }
    uint64_t m = (float32x2_t **)a2;
    if ((unint64_t)k < a2)
    {
      for (uint64_t m = (float32x2_t **)(a2 - 24); ; m -= 3)
      {
        BOOL v42 = (int32x2_t)vmul_f32(v31, vsub_f32(**m, v30));
        int v43 = vadd_f32((float32x2_t)v42, (float32x2_t)vdup_lane_s32(v42, 1));
        if (vceq_f32(v43, v34).u32[0])
        {
          if (k >= m || (*m)[1].f32[0] < v21[1].f32[0]) {
            break;
          }
        }
        else if (k >= m || (vmvn_s8((int8x8_t)vcgt_f32(v34, v43)).u32[0] & 1) == 0)
        {
          break;
        }
      }
    }
LABEL_35:
    unint64_t i = (unint64_t)k;
    if (k < m)
    {
      long long v44 = *m;
      unint64_t i = (unint64_t)k;
      BOOL v45 = m;
      do
      {
        *(void *)unint64_t i = v44;
        void *v45 = v36;
        int v46 = *(float32x2_t **)(i + 8);
        *(void *)(i + 8) = v45[1];
        v45[1] = v46;
        int v47 = *(float32x2_t **)(i + 16);
        *(void *)(i + 16) = v45[2];
        v45[2] = v47;
        BOOL v48 = **a3;
        int v49 = *a3[1];
        BOOL v50 = (int32x2_t)vmul_f32(vsub_f32(v32, v48), v49);
        int v51 = vadd_f32((float32x2_t)v50, (float32x2_t)vdup_lane_s32(v50, 1));
        do
        {
          while (1)
          {
            BOOL v52 = *(float32x2_t **)(i + 24);
            i += 24;
            int v36 = v52;
            int v53 = (int32x2_t)vmul_f32(v49, vsub_f32(*v52, v48));
            int v54 = vadd_f32((float32x2_t)v53, (float32x2_t)vdup_lane_s32(v53, 1));
            if ((vceq_f32(v54, v51).u8[0] & 1) == 0) {
              break;
            }
            if (v36[1].f32[0] >= v21[1].f32[0]) {
              goto LABEL_44;
            }
          }
        }
        while ((vcgt_f32(v51, v54).u8[0] & 1) != 0);
        do
        {
LABEL_44:
          while (1)
          {
            uint64_t v55 = *(v45 - 3);
            v45 -= 3;
            long long v44 = v55;
            unsigned __int32 v56 = (int32x2_t)vmul_f32(v49, vsub_f32(*v55, v48));
            BOOL v57 = vadd_f32((float32x2_t)v56, (float32x2_t)vdup_lane_s32(v56, 1));
            if (vceq_f32(v57, v51).u32[0]) {
              break;
            }
            if (vcgt_f32(v51, v57).u32[0]) {
              goto LABEL_46;
            }
          }
        }
        while (v44[1].f32[0] >= v21[1].f32[0]);
LABEL_46:
        ;
      }
      while (i < (unint64_t)v45);
    }
    int v58 = *(float32x2_t **)a1;
    if (i - 24 == a1)
    {
      if (v58)
      {
        *(void *)(i - 16) = v58;
        uint64_t v213 = v29;
        operator delete(v58);
        BOOL v29 = v213;
      }
    }
    else
    {
      if (v58)
      {
        *(void *)(a1 + 8) = v58;
        uint64_t v212 = v29;
        operator delete(v58);
        BOOL v29 = v212;
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)(i - 24);
      *(void *)(a1 + 16) = *(void *)(i - 8);
      *(void *)(i - 24) = 0;
      *(void *)(i - 16) = 0;
      *(void *)(i - 8) = 0;
    }
    *(void *)(i - 24) = v21;
    *(_OWORD *)(i - 16) = v29;
    if (k < m)
    {
LABEL_56:
      sub_25B5BA5F0(a1, i - 24, a3, a4, a5 & 1);
      a5 = 0;
    }
    else
    {
      int v59 = sub_25B5BCB30(a1, i - 24, a3);
      if (sub_25B5BCB30(i, a2, a3))
      {
        a2 = i - 24;
        if (v59) {
          return;
        }
        goto LABEL_1;
      }
      if (!v59) {
        goto LABEL_56;
      }
    }
  }
  int v102 = (void *)(i + 24);
  BOOL v104 = i == a2 || v102 == (void *)a2;
  if (a5)
  {
    if (!v104)
    {
      int v105 = 0;
      int v106 = (void *)i;
      do
      {
        uint64_t v107 = (float32x2_t **)v106;
        int v106 = v102;
        uint64_t v108 = a3[1];
        unint64_t v109 = **a3;
        uint64_t v110 = v107[3];
        uint64_t v111 = (int32x2_t)vmul_f32(vsub_f32(*v110, v109), *v108);
        int v112 = (int32x2_t)vmul_f32(*v108, vsub_f32(**v107, v109));
        BOOL v113 = vadd_f32((float32x2_t)vzip1_s32(v111, v112), (float32x2_t)vzip2_s32(v111, v112));
        int v114 = v113.f32[0] < v113.f32[1];
        if (v113.f32[0] == v113.f32[1]) {
          int v114 = v110[1].f32[0] < (*v107)[1].f32[0];
        }
        if (v114)
        {
          int v115 = *((_OWORD *)v107 + 2);
          *int v102 = 0;
          v102[1] = 0;
          BOOL v116 = v105;
          v102[2] = 0;
          while (1)
          {
            int v117 = i + v116;
            *(_OWORD *)(v117 + 24) = *(_OWORD *)(i + v116);
            *(void *)(v117 + 40) = *(void *)(i + v116 + 16);
            *(void *)(v117 + 8) = 0;
            *(void *)(v117 + 16) = 0;
            *(void *)int v117 = 0;
            if (!v116) {
              break;
            }
            long long v118 = a3[1];
            int64_t v119 = **a3;
            uint64_t v120 = (int32x2_t)vmul_f32(vsub_f32(*v110, v119), *v118);
            unint64_t v121 = *(float32x2_t **)(v117 - 24);
            unint64_t v122 = (int32x2_t)vmul_f32(*v118, vsub_f32(*v121, v119));
            uint64_t v123 = vadd_f32((float32x2_t)vzip1_s32(v120, v122), (float32x2_t)vzip2_s32(v120, v122));
            uint64_t v124 = v123.f32[0] < v123.f32[1];
            if (v123.f32[0] == v123.f32[1]) {
              uint64_t v124 = v110[1].f32[0] < v121[1].f32[0];
            }
            if (!v124)
            {
              int64_t v125 = i + v116;
              goto LABEL_137;
            }
            v116 -= 24;
          }
          int64_t v125 = i;
LABEL_137:
          int v126 = *(void **)v125;
          if (*(void *)v125)
          {
            *(void *)(v125 + 8) = v126;
            v217 = v115;
            operator delete(v126);
            int v115 = v217;
          }
          *(void *)int64_t v125 = v110;
          *(_OWORD *)(v125 + 8) = v115;
        }
        int v102 = v106 + 3;
        v105 += 24;
      }
      while (v106 + 3 != (void *)a2);
    }
  }
  else if (!v104)
  {
    do
    {
      uint64_t v194 = a1;
      a1 = (unint64_t)v102;
      v195 = **a3;
      v196 = *(float32x2_t **)(v194 + 24);
      v197 = *a3[1];
      v198 = (int32x2_t)vmul_f32(vsub_f32(*v196, v195), v197);
      uint64_t v199 = (int32x2_t)vmul_f32(v197, vsub_f32(**(float32x2_t **)v194, v195));
      unint64_t v200 = vadd_f32((float32x2_t)vzip1_s32(v198, v199), (float32x2_t)vzip2_s32(v198, v199));
      unint64_t v201 = v200.f32[0] < v200.f32[1];
      if (v200.f32[0] == v200.f32[1]) {
        unint64_t v201 = v196[1].f32[0] < *(float *)(*(void *)v194 + 8);
      }
      if (v201)
      {
        v202 = *(_OWORD *)(v194 + 32);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        do
        {
          v203 = v194;
          *(_OWORD *)(v194 + 24) = *(_OWORD *)v194;
          *(void *)(v194 + 40) = *(void *)(v194 + 16);
          *(void *)uint64_t v194 = 0;
          *(void *)(v194 + 8) = 0;
          *(void *)(v194 + 16) = 0;
          v204 = a3[1];
          v205 = **a3;
          v207 = *(float32x2_t **)(v194 - 24);
          v194 -= 24;
          float32x2_t v206 = v207;
          v208 = (int32x2_t)vmul_f32(vsub_f32(*v196, v205), *v204);
          v209 = (int32x2_t)vmul_f32(*v204, vsub_f32(*v207, v205));
          v210 = vadd_f32((float32x2_t)vzip1_s32(v208, v209), (float32x2_t)vzip2_s32(v208, v209));
          v211 = v210.f32[0] < v210.f32[1];
          if (v210.f32[0] == v210.f32[1]) {
            v211 = v196[1].f32[0] < v206[1].f32[0];
          }
        }
        while (v211);
        *(void *)v203 = v196;
        *(_OWORD *)(v203 + 8) = v202;
      }
      int v102 = (void *)(a1 + 24);
    }
    while (a1 + 24 != a2);
  }
}

  size_t v10 = a2 - 3;
  uint64_t j = (float **)a1;
  while (1)
  {
    a1 = (unint64_t)j;
    uint64_t v12 = (char *)a2 - (char *)j;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (a2 - j);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          int64_t v92 = *v10;
          int64_t v93 = **v10;
          uint64_t v94 = *j;
          unint64_t v95 = **j;
          int v96 = v93 < v95;
          if (v93 == v95)
          {
            BOOL v97 = v92[1];
            int v98 = v94[1];
            int v96 = v97 < v98;
            if (v97 == v98) {
              int v96 = v92[2] < v94[2];
            }
          }
          if (v96)
          {
            *uint64_t j = v92;
            *(a2 - 3) = v94;
            int v99 = j[1];
            j[1] = *(a2 - 2);
            *(a2 - 2) = v99;
            unint64_t v100 = j[2];
            j[2] = *(a2 - 1);
            *(a2 - 1) = v100;
          }
          break;
        case 3uLL:
          sub_25B5B8CA0(j, (uint64_t)(j + 3), a2 - 3);
          break;
        case 4uLL:
          sub_25B5B8E70(j, (uint64_t)(j + 3), j + 6, (uint64_t)(a2 - 3));
          break;
        case 5uLL:
          sub_25B5B8FC8(j, (uint64_t)(j + 3), j + 6, (uint64_t)(j + 9), (uint64_t)(a2 - 3));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 575) {
      break;
    }
    if (!a3)
    {
      if (j == a2) {
        return;
      }
      unint64_t v122 = (v13 - 2) >> 1;
      uint64_t v123 = v122;
      do
      {
        uint64_t v124 = v123;
        if (v122 >= v123)
        {
          int64_t v125 = (2 * v123) | 1;
          int v126 = &j[3 * v125];
          if (2 * v124 + 2 < (uint64_t)v13)
          {
            BOOL v127 = v126[3];
            int v128 = *v126;
            int v129 = **v126;
            long long v130 = v129 < *v127;
            if (v129 == *v127)
            {
              long long v131 = v128[1];
              uint64_t v132 = v127[1];
              long long v130 = v131 < v132;
              if (v131 == v132) {
                long long v130 = v128[2] < v127[2];
              }
            }
            if (v130)
            {
              v126 += 3;
              int64_t v125 = 2 * v124 + 2;
            }
          }
          unint64_t v133 = &j[3 * v124];
          unint64_t v134 = *v126;
          unint64_t v135 = **v126;
          int v136 = *v133;
          int v137 = **v133;
          int v138 = v135 < v137;
          if (v135 == v137)
          {
            BOOL v139 = v134[1];
            int v140 = v136[1];
            int v138 = v139 < v140;
            if (v139 == v140) {
              int v138 = v134[2] < v136[2];
            }
          }
          if (!v138)
          {
            int v141 = *(_OWORD *)&j[3 * v124 + 1];
            *unint64_t v133 = 0;
            v133[1] = 0;
            v133[2] = 0;
            do
            {
              uint64_t v142 = v126;
              *(_OWORD *)unint64_t v133 = *(_OWORD *)v126;
              v133[2] = v126[2];
              float32x2_t *v126 = 0;
              v126[1] = 0;
              v126[2] = 0;
              if (v122 < v125) {
                break;
              }
              uint64_t v143 = 2 * v125;
              int64_t v125 = (2 * v125) | 1;
              int v126 = &j[3 * v125];
              unint64_t v144 = v143 + 2;
              if (v144 < (uint64_t)v13)
              {
                unint64_t v145 = v126[3];
                BOOL v146 = *v126;
                int v147 = **v126;
                long long v148 = v147 < *v145;
                if (v147 == *v145)
                {
                  unint64_t v149 = v146[1];
                  int v150 = v145[1];
                  long long v148 = v149 < v150;
                  if (v149 == v150) {
                    long long v148 = v146[2] < v145[2];
                  }
                }
                if (v148)
                {
                  v126 += 3;
                  int64_t v125 = v144;
                }
              }
              int v151 = *v126;
              int v152 = **v126;
              BOOL v153 = v152 < *v136;
              if (v152 == *v136)
              {
                int v154 = v151[1];
                int v155 = v136[1];
                BOOL v153 = v154 < v155;
                if (v154 == v155) {
                  BOOL v153 = v151[2] < v136[2];
                }
              }
              unint64_t v133 = v142;
            }
            while (!v153);
            *uint64_t v142 = v136;
            *(_OWORD *)(v142 + 1) = v141;
          }
        }
        uint64_t v123 = v124 - 1;
      }
      while (v124);
      uint64_t v156 = v12 / 0x18uLL;
      while (2)
      {
        unint64_t v157 = 0;
        BOOL v159 = *j;
        int v158 = j[1];
        int v160 = j[2];
        j[1] = 0;
        j[2] = 0;
        long long v161 = j;
        *uint64_t j = 0;
        do
        {
          long long v162 = v161;
          v161 += 3 * v157 + 3;
          long long v163 = 2 * v157;
          unint64_t v157 = (2 * v157) | 1;
          long long v164 = v163 + 2;
          if (v164 < v156)
          {
            long long v165 = v161[3];
            uint64_t v166 = *v161;
            uint64_t v167 = **v161;
            uint64_t v168 = v167 < *v165;
            if (v167 == *v165)
            {
              uint64_t v169 = v166[1];
              uint64_t v170 = v165[1];
              uint64_t v168 = v169 < v170;
              if (v169 == v170) {
                uint64_t v168 = v166[2] < v165[2];
              }
            }
            if (v168)
            {
              v161 += 3;
              unint64_t v157 = v164;
            }
          }
          *(_OWORD *)long long v162 = *(_OWORD *)v161;
          v162[2] = v161[2];
          *long long v161 = 0;
          v161[1] = 0;
          v161[2] = 0;
        }
        while (v157 <= (uint64_t)((unint64_t)(v156 - 2) >> 1));
        if (v161 == a2 - 3)
        {
          *long long v161 = v159;
          float32x2_t v181 = v161;
        }
        else
        {
          *(_OWORD *)long long v161 = *(_OWORD *)(a2 - 3);
          v161[2] = *(a2 - 1);
          *(a2 - 3) = v159;
          *(a2 - 2) = v158;
          *(a2 - 1) = v160;
          v171 = (char *)v161 - (char *)j + 24;
          if (v171 < 25) {
            goto LABEL_210;
          }
          v172 = (v171 / 0x18uLL - 2) >> 1;
          BOOL v173 = &j[3 * v172];
          float32x2_t v174 = *v173;
          float32x2_t v175 = **v173;
          float32x2_t v176 = *v161;
          float32x2_t v177 = **v161;
          float v178 = v175 < v177;
          if (v175 == v177)
          {
            float v179 = v174[1];
            float32x2_t v180 = v176[1];
            float v178 = v179 < v180;
            if (v179 == v180) {
              float v178 = v174[2] < v176[2];
            }
          }
          if (!v178)
          {
LABEL_210:
            a2 -= 3;
            if (v156-- <= 2) {
              return;
            }
            continue;
          }
          int v158 = v161[1];
          int v160 = v161[2];
          v161[1] = 0;
          v161[2] = 0;
          *long long v161 = 0;
          do
          {
            float32x2_t v181 = v173;
            *(_OWORD *)long long v161 = *(_OWORD *)v173;
            v161[2] = v173[2];
            *BOOL v173 = 0;
            v173[1] = 0;
            v173[2] = 0;
            if (!v172) {
              break;
            }
            v172 = (v172 - 1) >> 1;
            BOOL v173 = &j[3 * v172];
            v182 = *v173;
            v183 = **v173;
            v184 = v183 < *v176;
            if (v183 == *v176)
            {
              v185 = v182[1];
              v186 = v176[1];
              v184 = v185 < v186;
              if (v185 == v186) {
                v184 = v182[2] < v176[2];
              }
            }
            long long v161 = v181;
          }
          while (v184);
          *float32x2_t v181 = v176;
        }
        break;
      }
      v181[1] = v158;
      v181[2] = v160;
      goto LABEL_210;
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = &j[3 * (v13 >> 1)];
    if ((unint64_t)v12 >= 0xC01)
    {
      sub_25B5B8CA0((float **)a1, a1 + 24 * (v13 >> 1), a2 - 3);
      uint64_t v16 = 3 * v14;
      uint64_t v17 = a1 + 8 * v16;
      sub_25B5B8CA0((float **)(a1 + 24), v17 - 24, a2 - 6);
      sub_25B5B8CA0((float **)(a1 + 48), a1 + 24 + 8 * v16, a2 - 9);
      sub_25B5B8CA0((float **)(v17 - 24), (uint64_t)v15, (float **)(a1 + 24 + 8 * v16));
      unint64_t v18 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v15;
      *(_OWORD *)unint64_t v15 = v18;
      uint64_t v19 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *(void *)(v17 + 16);
      *(void *)(v17 + 16) = v19;
    }
    else
    {
      sub_25B5B8CA0((float **)(a1 + 24 * (v13 >> 1)), a1, a2 - 3);
    }
    --a3;
    int v20 = *(float **)a1;
    if (a4) {
      goto LABEL_15;
    }
    int v21 = *(float **)(a1 - 24);
    int v22 = *v21 < *v20;
    if (*v21 == *v20)
    {
      int v23 = v21[1];
      int v24 = v20[1];
      int v22 = v23 < v24;
      if (v23 == v24) {
        int v22 = v21[2] < v20[2];
      }
    }
    if (v22)
    {
LABEL_15:
      int v25 = *(_OWORD *)(a1 + 8);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      int v26 = (float **)(a1 + 24);
      uint64_t v27 = *v20;
      while (1)
      {
        uint64_t v28 = *v26;
        BOOL v29 = **v26;
        int v30 = v29 < v27;
        if (v29 == v27)
        {
          int v31 = v28[1];
          BOOL v32 = v20[1];
          int v30 = v31 < v32;
          if (v31 == v32) {
            int v30 = v28[2] < v20[2];
          }
        }
        if (!v30) {
          break;
        }
        v26 += 3;
      }
      unint64_t i = a2 - 3;
      if (v26 - 3 == (float **)a1)
      {
        unint64_t i = a2;
        if (v26 < a2)
        {
          for (unint64_t i = a2 - 3; ; i -= 3)
          {
            BOOL v39 = *i;
            int v40 = **i;
            if (v40 == v27)
            {
              int v41 = v39[1];
              BOOL v42 = v20[1];
              if (v41 == v42)
              {
                if (v26 >= i) {
                  break;
                }
                int v41 = v39[2];
                BOOL v42 = v20[2];
              }
              else if (v26 >= i)
              {
                break;
              }
              if (v41 < v42) {
                break;
              }
            }
            else if (v26 >= i || v40 < v27)
            {
              break;
            }
          }
        }
      }
      else
      {
        while (1)
        {
          int v34 = *i;
          uint64_t v35 = **i;
          int v36 = v35 < v27;
          if (v35 == v27)
          {
            long long v37 = v34[1];
            int v38 = v20[1];
            int v36 = v37 < v38;
            if (v37 == v38) {
              int v36 = v34[2] < v20[2];
            }
          }
          if (v36) {
            break;
          }
          i -= 3;
        }
      }
      uint64_t j = v26;
      if (v26 < i)
      {
        int v43 = *i;
        uint64_t j = v26;
        long long v44 = i;
        do
        {
          *uint64_t j = v43;
          *long long v44 = v28;
          BOOL v45 = j[1];
          j[1] = v44[1];
          v44[1] = v45;
          int v46 = j[2];
          j[2] = v44[2];
          v44[2] = v46;
          do
          {
            int v47 = j[3];
            j += 3;
            uint64_t v28 = v47;
            BOOL v48 = *v47 < v27;
            if (*v47 == v27)
            {
              int v49 = v28[1];
              BOOL v50 = v20[1];
              BOOL v48 = v49 < v50;
              if (v49 == v50) {
                BOOL v48 = v28[2] < v20[2];
              }
            }
          }
          while (v48);
          do
          {
            int v51 = *(v44 - 3);
            v44 -= 3;
            int v43 = v51;
            BOOL v52 = *v51 < v27;
            if (*v51 == v27)
            {
              int v53 = v43[1];
              int v54 = v20[1];
              BOOL v52 = v53 < v54;
              if (v53 == v54) {
                BOOL v52 = v43[2] < v20[2];
              }
            }
          }
          while (!v52);
        }
        while (j < v44);
      }
      uint64_t v55 = *(float **)a1;
      if (j - 3 == (float **)a1)
      {
        if (v55)
        {
          *(j - 2) = v55;
          v203 = v25;
          operator delete(v55);
          int v25 = v203;
        }
      }
      else
      {
        if (v55)
        {
          *(void *)(a1 + 8) = v55;
          v202 = v25;
          operator delete(v55);
          int v25 = v202;
          *(void *)a1 = 0;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
        }
        *(_OWORD *)a1 = *(_OWORD *)(j - 3);
        *(void *)(a1 + 16) = *(j - 1);
        *(j - 3) = 0;
        *(j - 2) = 0;
        *(j - 1) = 0;
      }
      *(j - 3) = v20;
      *((_OWORD *)j - 1) = v25;
      if (v26 < i) {
        goto LABEL_62;
      }
      unsigned __int32 v56 = sub_25B5BC270((float **)a1, j - 3);
      if (sub_25B5BC270(j, a2))
      {
        a2 = j - 3;
        if (v56) {
          return;
        }
        goto LABEL_1;
      }
      if (!v56)
      {
LABEL_62:
        sub_25B5BB530(a1, j - 3, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      BOOL v57 = *(_OWORD *)(a1 + 8);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      int v58 = *v20;
      int v59 = *v10;
      long long v60 = **v10;
      int v61 = *v20 < v60;
      if (*v20 == v60)
      {
        BOOL v62 = v20[1];
        int v63 = v59[1];
        int v61 = v62 < v63;
        if (v62 == v63) {
          int v61 = v20[2] < v59[2];
        }
      }
      if (v61)
      {
        for (uint64_t j = (float **)(a1 + 24); ; j += 3)
        {
          int v64 = *j;
          BOOL v65 = **j;
          int v66 = v58 < v65;
          if (v58 == v65)
          {
            long long v67 = v20[1];
            BOOL v68 = v64[1];
            int v66 = v67 < v68;
            if (v67 == v68) {
              int v66 = v20[2] < v64[2];
            }
          }
          if (v66) {
            break;
          }
        }
      }
      else
      {
        for (uint64_t j = (float **)(a1 + 24); j < a2; j += 3)
        {
          int v69 = *j;
          int v70 = **j;
          long long v71 = v58 < v70;
          if (v58 == v70)
          {
            unint64_t v72 = v20[1];
            unint64_t v73 = v69[1];
            long long v71 = v72 < v73;
            if (v72 == v73) {
              long long v71 = v20[2] < v69[2];
            }
          }
          if (v71) {
            break;
          }
        }
      }
      uint64_t k = a2;
      if (j < a2)
      {
        for (uint64_t k = a2 - 3; ; k -= 3)
        {
          uint64_t v75 = v58 < v60;
          if (v58 == v60)
          {
            unint64_t v76 = v20[1];
            unint64_t v77 = v59[1];
            uint64_t v75 = v76 < v77;
            if (v76 == v77) {
              uint64_t v75 = v20[2] < v59[2];
            }
          }
          if (!v75) {
            break;
          }
          int v78 = *(k - 3);
          int v59 = v78;
          long long v60 = *v78;
        }
      }
      if (j < k)
      {
        int v79 = *j;
        int v80 = *k;
        do
        {
          *uint64_t j = v80;
          *uint64_t k = v79;
          BOOL v81 = j[1];
          j[1] = k[1];
          k[1] = v81;
          int v82 = j[2];
          j[2] = k[2];
          k[2] = v82;
          do
          {
            int v83 = j[3];
            j += 3;
            int v79 = v83;
            uint64_t v84 = v58 < *v83;
            if (v58 == *v83)
            {
              unint64_t v85 = v20[1];
              uint64_t v86 = v79[1];
              uint64_t v84 = v85 < v86;
              if (v85 == v86) {
                uint64_t v84 = v20[2] < v79[2];
              }
            }
          }
          while (!v84);
          do
          {
            uint64_t v87 = *(k - 3);
            k -= 3;
            int v80 = v87;
            int v88 = v58 < *v87;
            if (v58 == *v87)
            {
              BOOL v89 = v20[1];
              int v90 = v80[1];
              int v88 = v89 < v90;
              if (v89 == v90) {
                int v88 = v20[2] < v80[2];
              }
            }
          }
          while (v88);
        }
        while (j < k);
      }
      int64_t v91 = *(float **)a1;
      BOOL v4 = (unint64_t)(j - 3) >= a1;
      BOOL v5 = j - 3 == (float **)a1;
      if (j - 3 == (float **)a1)
      {
        if (v91)
        {
          *(j - 2) = v91;
          v205 = v57;
          operator delete(v91);
          BOOL v57 = v205;
        }
      }
      else
      {
        if (v91)
        {
          *(void *)(a1 + 8) = v91;
          v204 = v57;
          operator delete(v91);
          BOOL v57 = v204;
          *(void *)a1 = 0;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
        }
        *(_OWORD *)a1 = *(_OWORD *)(j - 3);
        *(void *)(a1 + 16) = *(j - 1);
        *(j - 3) = 0;
        *(j - 2) = 0;
        *(j - 1) = 0;
      }
      a4 = 0;
      *(j - 3) = v20;
      *((_OWORD *)j - 1) = v57;
    }
  }
  int v101 = j + 3;
  int v103 = j == a2 || v101 == a2;
  if (a4)
  {
    if (!v103)
    {
      BOOL v104 = 0;
      int v105 = j;
      do
      {
        int v106 = v105;
        int v105 = v101;
        uint64_t v107 = v106[3];
        uint64_t v108 = *v106;
        unint64_t v109 = **v106;
        uint64_t v110 = *v107 < v109;
        if (*v107 == v109)
        {
          uint64_t v111 = v107[1];
          int v112 = v108[1];
          uint64_t v110 = v111 < v112;
          if (v111 == v112) {
            uint64_t v110 = v107[2] < v108[2];
          }
        }
        if (v110)
        {
          BOOL v113 = *((_OWORD *)v106 + 2);
          *int v105 = 0;
          v105[1] = 0;
          int v114 = v104;
          v105[2] = 0;
          while (1)
          {
            int v115 = (char *)j + v114;
            *(_OWORD *)(v115 + 24) = *(_OWORD *)((char *)j + v114);
            *((void *)v115 + 5) = *(float **)((char *)j + v114 + 16);
            *((void *)v115 + 1) = 0;
            *((void *)v115 + 2) = 0;
            *(void *)int v115 = 0;
            if (!v114) {
              break;
            }
            BOOL v116 = (float *)*((void *)v115 - 3);
            int v117 = *v107 < *v116;
            if (*v107 == *v116)
            {
              long long v118 = v107[1];
              int64_t v119 = v116[1];
              int v117 = v118 < v119;
              if (v118 == v119) {
                int v117 = v107[2] < v116[2];
              }
            }
            if (!v117)
            {
              uint64_t v120 = (float **)((char *)j + v114);
              goto LABEL_149;
            }
            v114 -= 24;
          }
          uint64_t v120 = j;
LABEL_149:
          unint64_t v121 = *v120;
          if (*v120)
          {
            v120[1] = v121;
            float32x2_t v206 = v113;
            operator delete(v121);
            BOOL v113 = v206;
          }
          *uint64_t v120 = v107;
          *(_OWORD *)(v120 + 1) = v113;
        }
        int v101 = v105 + 3;
        v104 += 24;
      }
      while (v105 + 3 != a2);
    }
  }
  else if (!v103)
  {
    do
    {
      uint64_t v188 = a1;
      a1 = (unint64_t)v101;
      v189 = *(float **)(v188 + 24);
      uint64_t v190 = *(float **)v188;
      unint64_t v191 = **(float **)v188;
      unint64_t v192 = *v189 < v191;
      if (*v189 == v191)
      {
        v193 = v189[1];
        uint64_t v194 = v190[1];
        unint64_t v192 = v193 < v194;
        if (v193 == v194) {
          unint64_t v192 = v189[2] < v190[2];
        }
      }
      if (v192)
      {
        v195 = *(_OWORD *)(v188 + 32);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        do
        {
          v196 = v188;
          *(_OWORD *)(v188 + 24) = *(_OWORD *)v188;
          *(void *)(v188 + 40) = *(void *)(v188 + 16);
          *(void *)uint64_t v188 = 0;
          *(void *)(v188 + 8) = 0;
          *(void *)(v188 + 16) = 0;
          v198 = *(float **)(v188 - 24);
          v188 -= 24;
          v197 = v198;
          uint64_t v199 = *v189 < *v198;
          if (*v189 == *v198)
          {
            unint64_t v200 = v189[1];
            unint64_t v201 = v197[1];
            uint64_t v199 = v200 < v201;
            if (v200 == v201) {
              uint64_t v199 = v189[2] < v197[2];
            }
          }
        }
        while (v199);
        *(void *)v196 = v189;
        *(_OWORD *)(v196 + 8) = v195;
      }
      int v101 = (float **)(a1 + 24);
    }
    while ((float **)(a1 + 24) != a2);
  }
}

  BOOL v81 = a2 - 24;
  int v82 = a2 - 12;
  int v79 = a2 - 36;
  size_t v10 = a1;
  while (1)
  {
    a1 = v10;
    unint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v10) >> 4);
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*(float *)v82 >= *(float *)a1) {
            return;
          }
          BOOL v32 = a1;
          int v33 = v82;
          break;
        case 3uLL:
          sub_25B5E4FEC(a1, a1 + 12, v82);
          return;
        case 4uLL:
          sub_25B5E50AC(a1, a1 + 12, a1 + 24, v82);
          return;
        case 5uLL:
          int v34 = (float *)(a1 + 24);
          sub_25B5E50AC(a1, a1 + 12, a1 + 24, a1 + 36);
          if (*(float *)v82 >= *((float *)a1 + 36)) {
            return;
          }
          sub_25B5E4F58(a1 + 36, v82);
          if (*((float *)a1 + 36) >= *v34) {
            return;
          }
          sub_25B5E4F58(a1 + 24, a1 + 36);
          if (*v34 >= *((float *)a1 + 12)) {
            return;
          }
          sub_25B5E4F58(a1 + 12, a1 + 24);
          if (*((float *)a1 + 12) >= *(float *)a1) {
            return;
          }
          BOOL v32 = a1;
          int v33 = a1 + 12;
          break;
        default:
          JUMPOUT(0);
      }
      sub_25B5E4F58(v32, v33);
      return;
    }
    if (v11 <= 1151)
    {
      if (a4)
      {
        if (a1 != a2)
        {
          uint64_t v35 = a1 + 12;
          if (a1 + 12 != a2)
          {
            int v36 = 0;
            long long v37 = (float *)a1;
            do
            {
              int v38 = (float *)v35;
              if (v37[12] < *v37)
              {
                BOOL v89 = v37[12];
                sub_25B4C9CE4((uint64_t)&v90, (uint64_t)(v37 + 14));
                BOOL v39 = *v37;
                int v40 = v36;
                while (1)
                {
                  *(float *)((char *)a1 + v40 + 48) = v39;
                  sub_25B576A98((uint64_t)&v83, (uint64_t)a1 + v40 + 56, (uint64_t)a1 + v40 + 8);
                  sub_25B400248(v85);
                  if (!v40) {
                    break;
                  }
                  int v41 = (char *)a1 + v40;
                  BOOL v39 = *(float *)((char *)a1 + v40 - 48);
                  v40 -= 48;
                  if (v89 >= v39)
                  {
                    BOOL v42 = (float *)((char *)a1 + v40 + 48);
                    int v43 = (uint64_t)(v41 + 8);
                    goto LABEL_73;
                  }
                }
                int v43 = (uint64_t)(a1 + 2);
                BOOL v42 = (float *)a1;
LABEL_73:
                *BOOL v42 = v89;
                sub_25B576A98((uint64_t)&v83, v43, (uint64_t)&v90);
                sub_25B400248(v85);
                sub_25B400248(v92);
              }
              uint64_t v35 = (int *)(v38 + 12);
              v36 += 48;
              long long v37 = v38;
            }
            while (v38 + 12 != (float *)a2);
          }
        }
      }
      else if (a1 != a2)
      {
        unint64_t v73 = a1 + 12;
        if (a1 + 12 != a2)
        {
          BOOL v74 = a1 + 14;
          do
          {
            uint64_t v75 = v73;
            if (*((float *)a1 + 12) < *(float *)a1)
            {
              BOOL v89 = *((float *)a1 + 12);
              sub_25B4C9CE4((uint64_t)&v90, (uint64_t)(a1 + 14));
              unint64_t v76 = *(float *)a1;
              unint64_t v77 = (uint64_t)v74;
              do
              {
                *(float *)(v77 - 8) = v76;
                int v78 = v77 - 48;
                sub_25B576A98((uint64_t)&v83, v77, v77 - 48);
                sub_25B400248(v85);
                unint64_t v76 = *(float *)(v77 - 104);
                v77 -= 48;
              }
              while (v89 < v76);
              *(float *)(v78 - 8) = v89;
              sub_25B576A98((uint64_t)&v83, v78, (uint64_t)&v90);
              sub_25B400248(v85);
              sub_25B400248(v92);
            }
            unint64_t v73 = v75 + 12;
            v74 += 12;
            a1 = v75;
          }
          while (v75 + 12 != a2);
        }
      }
      return;
    }
    if (!a3) {
      break;
    }
    unint64_t v13 = &a1[12 * (v12 >> 1)];
    if ((unint64_t)v11 >= 0x1801)
    {
      sub_25B5E4FEC(a1, &a1[12 * (v12 >> 1)], v82);
      sub_25B5E4FEC(a1 + 12, &a1[12 * (v12 >> 1) - 12], v81);
      sub_25B5E4FEC(a1 + 24, &a1[12 * (v12 >> 1) + 12], v79);
      sub_25B5E4FEC(&a1[12 * (v12 >> 1) - 12], v13, &a1[12 * (v12 >> 1) + 12]);
      sub_25B5E4F58(a1, v13);
    }
    else
    {
      sub_25B5E4FEC(&a1[12 * (v12 >> 1)], a1, v82);
    }
    --a3;
    if ((a4 & 1) != 0 || *((float *)a1 - 12) < *(float *)a1)
    {
      BOOL v89 = *(float *)a1;
      sub_25B4C9CE4((uint64_t)&v90, (uint64_t)(a1 + 2));
      unint64_t v14 = v89;
      unint64_t v15 = a1;
      do
      {
        uint64_t v16 = v15;
        uint64_t v17 = *((float *)v15 + 12);
        v15 += 12;
      }
      while (v17 < v89);
      unint64_t v18 = a2;
      if (v16 == a1)
      {
        do
        {
          if (v15 >= a2) {
            break;
          }
          int v20 = *((float *)a2 - 12);
          a2 -= 12;
        }
        while (v20 >= v89);
      }
      else
      {
        do
        {
          uint64_t v19 = *((float *)a2 - 12);
          a2 -= 12;
        }
        while (v19 >= v89);
      }
      size_t v10 = v15;
      if (v15 < a2)
      {
        int v21 = a2;
        do
        {
          sub_25B5E4F58(v10, v21);
          unint64_t v14 = v89;
          do
          {
            int v22 = *((float *)v10 + 12);
            v10 += 12;
          }
          while (v22 < v89);
          do
          {
            int v23 = *((float *)v21 - 12);
            v21 -= 12;
          }
          while (v23 >= v89);
        }
        while (v10 < v21);
      }
      if (v10 - 12 != a1)
      {
        *a1 = *(v10 - 12);
        sub_25B576A98((uint64_t)&v83, (uint64_t)(a1 + 2), (uint64_t)(v10 - 10));
        sub_25B400248(v85);
        unint64_t v14 = v89;
      }
      *((float *)v10 - 12) = v14;
      sub_25B576A98((uint64_t)&v83, (uint64_t)(v10 - 10), (uint64_t)&v90);
      sub_25B400248(v85);
      sub_25B400248(v92);
      BOOL v4 = v15 >= a2;
      a2 = v18;
      if (!v4) {
        goto LABEL_31;
      }
      int v24 = sub_25B5E5154(a1, v10 - 12);
      if (sub_25B5E5154(v10, v18))
      {
        a2 = v10 - 12;
        if (v24) {
          return;
        }
        goto LABEL_1;
      }
      if ((v24 & 1) == 0)
      {
LABEL_31:
        sub_25B5E3FF8(a1, v10 - 12, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      BOOL v89 = *(float *)a1;
      sub_25B4C9CE4((uint64_t)&v90, (uint64_t)(a1 + 2));
      int v25 = v89;
      if (v89 < *(float *)v82)
      {
        size_t v10 = a1;
        do
        {
          int v26 = *((float *)v10 + 12);
          v10 += 12;
        }
        while (v89 >= v26);
      }
      else
      {
        uint64_t v27 = a1 + 12;
        do
        {
          size_t v10 = v27;
          if (v27 >= a2) {
            break;
          }
          v27 += 12;
        }
        while (v89 >= *(float *)v10);
      }
      uint64_t v28 = a2;
      if (v10 < a2)
      {
        uint64_t v28 = a2;
        do
        {
          BOOL v29 = *((float *)v28 - 12);
          v28 -= 12;
        }
        while (v89 < v29);
      }
      while (v10 < v28)
      {
        sub_25B5E4F58(v10, v28);
        int v25 = v89;
        do
        {
          int v30 = *((float *)v10 + 12);
          v10 += 12;
        }
        while (v89 >= v30);
        do
        {
          int v31 = *((float *)v28 - 12);
          v28 -= 12;
        }
        while (v89 < v31);
      }
      if (v10 - 12 != a1)
      {
        *a1 = *(v10 - 12);
        sub_25B576A98((uint64_t)&v83, (uint64_t)(a1 + 2), (uint64_t)(v10 - 10));
        sub_25B400248(v85);
        int v25 = v89;
      }
      *((float *)v10 - 12) = v25;
      sub_25B576A98((uint64_t)&v83, (uint64_t)(v10 - 10), (uint64_t)&v90);
      sub_25B400248(v85);
      sub_25B400248(v92);
      a4 = 0;
    }
  }
  if (a1 != a2)
  {
    int v80 = a2;
    long long v44 = (v12 - 2) >> 1;
    BOOL v45 = v44;
    do
    {
      int v46 = v45;
      if (v44 >= v45)
      {
        int v47 = (2 * v45) | 1;
        BOOL v48 = (float *)&a1[12 * v47];
        if (2 * v45 + 2 < (uint64_t)v12 && *v48 < v48[12])
        {
          v48 += 12;
          int v47 = 2 * v45 + 2;
        }
        int v49 = (float *)&a1[12 * v45];
        if (*v48 >= *v49)
        {
          BOOL v89 = *v49;
          sub_25B4C9CE4((uint64_t)&v90, (uint64_t)&a1[12 * v45 + 2]);
          BOOL v50 = *v48;
          while (1)
          {
            int v51 = v48;
            void *v49 = v50;
            BOOL v52 = (uint64_t)(v48 + 2);
            sub_25B576A98((uint64_t)&v83, (uint64_t)(v49 + 2), (uint64_t)(v48 + 2));
            sub_25B400248(v85);
            if (v44 < v47) {
              break;
            }
            int v53 = 2 * v47;
            int v47 = (2 * v47) | 1;
            BOOL v48 = (float *)&a1[12 * v47];
            int v54 = v53 + 2;
            if (v54 < (uint64_t)v12 && *v48 < v48[12])
            {
              v48 += 12;
              int v47 = v54;
            }
            BOOL v50 = *v48;
            uint64_t v55 = v89;
            int v49 = v51;
            if (*v48 < v89) {
              goto LABEL_90;
            }
          }
          uint64_t v55 = v89;
LABEL_90:
          void *v51 = v55;
          sub_25B576A98((uint64_t)&v83, v52, (uint64_t)&v90);
          sub_25B400248(v85);
          sub_25B400248(v92);
        }
      }
      BOOL v45 = v46 - 1;
    }
    while (v46);
    unsigned __int32 v56 = v11 / 0x30uLL;
    BOOL v57 = v80;
    while (2)
    {
      int v58 = v57;
      int v83 = *a1;
      sub_25B4C9CE4((uint64_t)&v84, (uint64_t)(a1 + 2));
      int v59 = 0;
      long long v60 = a1;
      do
      {
        int v61 = (float *)&v60[12 * v59 + 12];
        BOOL v62 = 2 * v59;
        int v59 = (2 * v59) | 1;
        int v63 = v62 + 2;
        if (v63 < v56 && *v61 < v61[12])
        {
          v61 += 12;
          int v59 = v63;
        }
        *long long v60 = *(_DWORD *)v61;
        sub_25B576A98((uint64_t)&v89, (uint64_t)(v60 + 2), (uint64_t)(v61 + 2));
        sub_25B400248(v91);
        long long v60 = v61;
      }
      while (v59 <= (uint64_t)((unint64_t)(v56 - 2) >> 1));
      v57 -= 12;
      if (v61 != (float *)(v58 - 12))
      {
        *(_DWORD *)int v61 = *(v58 - 12);
        int v64 = (uint64_t)(v58 - 10);
        sub_25B576A98((uint64_t)&v89, (uint64_t)(v61 + 2), v64);
        sub_25B400248(v91);
        *BOOL v57 = v83;
        sub_25B576A98((uint64_t)&v89, v64, (uint64_t)&v84);
        sub_25B400248(v91);
        BOOL v65 = (char *)v61 - (char *)a1 + 48;
        if (v65 >= 49)
        {
          int v66 = (v65 / 0x30uLL - 2) >> 1;
          long long v67 = (float *)&a1[12 * v66];
          if (*v67 < *v61)
          {
            BOOL v89 = *v61;
            sub_25B4C9CE4((uint64_t)&v90, (uint64_t)(v61 + 2));
            BOOL v68 = *v67;
            do
            {
              int v69 = v67;
              uint64_t *v61 = v68;
              int v70 = (uint64_t)(v67 + 2);
              sub_25B576A98((uint64_t)v87, (uint64_t)(v61 + 2), (uint64_t)(v67 + 2));
              sub_25B400248(v88);
              if (!v66) {
                break;
              }
              int v66 = (v66 - 1) >> 1;
              long long v67 = (float *)&a1[12 * v66];
              BOOL v68 = *v67;
              int v61 = v69;
            }
            while (*v67 < v89);
            *int v69 = v89;
            sub_25B576A98((uint64_t)v87, v70, (uint64_t)&v90);
            sub_25B400248(v88);
            long long v71 = v92;
LABEL_106:
            sub_25B400248(v71);
          }
        }
        sub_25B400248(v86);
        if (v56-- <= 2) {
          return;
        }
        continue;
      }
      break;
    }
    *(_DWORD *)int v61 = v83;
    sub_25B576A98((uint64_t)&v89, (uint64_t)(v61 + 2), (uint64_t)&v84);
    long long v71 = v91;
    goto LABEL_106;
  }
}

  uint64_t j = a1;
  unint64_t i = a2 - 6;
  while (1)
  {
    std::string::size_type v9 = j;
    size_t v10 = (char *)a2 - (char *)j;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)j) >> 4);
    __asm { FMOV            V0.2D, #15.0 }
    v749 = _Q0;
    a1 = v9;
    if (_ZF || !_CF)
    {
      switch(v11)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          long long v276 = (float32x2_t)*(a2 - 5);
          long long v277 = *(float32x2_t *)&a3[1]->f64[0];
          v737 = vcvtq_f64_f32(vsub_f32(v276, v277));
          v762 = **a3;
          v701 = (int64x2_t)vmulq_f64(v762, v762);
          v278 = (int64x2_t)vmulq_f64(v737, v737);
          float32x2_t v279 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v701, v278), (float64x2_t)vzip2q_s64(v701, v278)));
          v280 = vaddvq_f64(vmulq_f64(v762, v737)) / fmax(vmulq_laneq_f64(v279, v279, 1).f64[0], 2.22507386e-308);
          if (v280 <= 1.0) {
            v281 = v280;
          }
          else {
            v281 = 1.0;
          }
          if (v280 >= -1.0) {
            float32x2_t v282 = v281;
          }
          else {
            float32x2_t v282 = -1.0;
          }
          v714 = acos(v282);
          float v283 = *((unsigned char *)a3 + 24) == 0;
          int v284 = (float32x2_t)v9[1];
          v688 = vcvtq_f64_f32(vsub_f32(v284, v277));
          uint64_t v285 = (int64x2_t)vmulq_f64(v688, v688);
          int v286 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v701, v285), (float64x2_t)vzip2q_s64(v701, v285)));
          float32x4_t v287 = vaddvq_f64(vmulq_f64(v762, v688)) / fmax(vmulq_laneq_f64(v286, v286, 1).f64[0], 2.22507386e-308);
          if (v287 <= 1.0) {
            float32x4_t v288 = v287;
          }
          else {
            float32x4_t v288 = 1.0;
          }
          if (v287 >= -1.0) {
            float32x4_t v289 = v288;
          }
          else {
            float32x4_t v289 = -1.0;
          }
          unint64_t v290 = acos(v289);
          v291.f64[0] = v714;
          v291.f64[1] = v290;
          uint64_t v292 = vdivq_f64(vmulq_f64(v291, (float64x2_t)vdupq_n_s64(0x4066800000000000uLL)), (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL));
          v293 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
          unint64_t v294 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v737, (int64x2_t)v688), -v762.f64[1]), (float64x2_t)vzip2q_s64((int64x2_t)v737, (int64x2_t)v688), v762.f64[0])), (int8x16_t)v292, (int8x16_t)vsubq_f64(v293, v292));
          v295 = vdup_n_s32(v283);
          v296.i64[0] = v295.u32[0];
          v296.i64[1] = v295.u32[1];
          v297 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v296, 0x3FuLL)), (int8x16_t)vsubq_f64(v293, v294), (int8x16_t)v294);
          unint64_t v298 = vbslq_s8((int8x16_t)vcgtq_f64(v749, v297), (int8x16_t)vaddq_f64(v297, v293), (int8x16_t)v297);
          if (vabdd_f64(*(double *)v298.i64, *(double *)&v298.i64[1]) >= 0.100000001)
          {
            if (*(double *)v298.i64 >= *(double *)&v298.i64[1]) {
              return;
            }
          }
          else
          {
            v299 = *(float32x2_t *)&a3[2]->f64[0];
            v300 = vsub_f32(v299, v276);
            v301 = (int32x2_t)vmul_f32(v300, v300);
            long long v302 = vsub_f32(v299, v284);
            uint64_t v303 = (int32x2_t)vmul_f32(v302, v302);
            unint64_t v304 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v301, v303), (float32x2_t)vzip2_s32(v301, v303)));
            if ((vcgt_f32((float32x2_t)vdup_lane_s32(v304, 1), (float32x2_t)v304).u32[0] & 1) == 0) {
              return;
            }
          }
          sub_25B5EA2CC(v9, i);
          break;
        case 3uLL:
          sub_25B5EA360(v9, v9 + 6, i, (uint64_t)a3);
          return;
        case 4uLL:
          sub_25B5EAB9C(v9, v9 + 6, v9 + 12, i, (uint64_t)a3);
          return;
        case 5uLL:
          sub_25B5EB1AC(v9, v9 + 6, v9 + 12, v9 + 18, i, (uint64_t)a3);
          return;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 1151) {
      break;
    }
    if (!a4)
    {
      if (v9 == a2) {
        return;
      }
      v675 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
      v681 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
      v669 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
      v662 = (v11 - 2) >> 1;
      v371 = v662;
      v372 = v9;
      while (1)
      {
        v373 = v371;
        if (v662 < v371) {
          goto LABEL_407;
        }
        v374 = (2 * v371) | 1;
        v375 = &v372[6 * v374];
        v376 = *(float32x2_t *)&a3[1]->f64[0];
        v377 = **a3;
        v378 = *((unsigned __int8 *)a3 + 24);
        v379 = (*a3)->f64[1];
        v660 = v371;
        if (2 * v371 + 2 >= (uint64_t)v11)
        {
          v406 = (int64x2_t)vmulq_f64(v377, v377);
          v726 = -v379;
          goto LABEL_352;
        }
        v380 = (float32x2_t)v372[6 * v374 + 1];
        v717 = vcvtq_f64_f32(vsub_f32(v380, v376));
        v740 = (int64x2_t)vmulq_f64(v377, v377);
        v381 = (int64x2_t)vmulq_f64(v717, v717);
        v382 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v740, v381), (float64x2_t)vzip2q_s64(v740, v381)));
        v383 = vaddvq_f64(vmulq_f64(v377, v717)) / fmax(vmulq_laneq_f64(v382, v382, 1).f64[0], 2.22507386e-308);
        v384 = v383 <= 1.0 ? v383 : 1.0;
        v385 = v383 >= -1.0 ? v384 : -1.0;
        v765 = **a3;
        v704 = acos(v385);
        v726 = -v379;
        v386 = (float32x2_t)v375[7];
        v691 = vcvtq_f64_f32(vsub_f32(v386, v376));
        v387 = (int64x2_t)vmulq_f64(v691, v691);
        v388 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v740, v387), (float64x2_t)vzip2q_s64(v740, v387)));
        v389 = vaddvq_f64(vmulq_f64(v765, v691)) / fmax(vmulq_laneq_f64(v388, v388, 1).f64[0], 2.22507386e-308);
        v390 = v389 <= 1.0 ? v389 : 1.0;
        v391 = v389 >= -1.0 ? v390 : -1.0;
        v392 = acos(v391);
        v377 = v765;
        v393.f64[0] = v704;
        v393.f64[1] = v392;
        v394 = vdivq_f64(vmulq_f64(v393, v681), v675);
        v395 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v717, (int64x2_t)v691), v726), (float64x2_t)vzip2q_s64((int64x2_t)v717, (int64x2_t)v691), v765.f64[0])), (int8x16_t)v394, (int8x16_t)vsubq_f64(v669, v394));
        v396 = vdup_n_s32(v378 == 0);
        v397.i64[0] = v396.u32[0];
        v397.i64[1] = v396.u32[1];
        v398 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v397, 0x3FuLL)), (int8x16_t)vsubq_f64(v669, v395), (int8x16_t)v395);
        v399 = vbslq_s8((int8x16_t)vcgtq_f64(v749, v398), (int8x16_t)vaddq_f64(v398, v669), (int8x16_t)v398);
        if (vabdd_f64(*(double *)v399.i64, *(double *)&v399.i64[1]) < 0.100000001) {
          break;
        }
        if (*(double *)v399.i64 < *(double *)&v399.i64[1]) {
          goto LABEL_350;
        }
LABEL_351:
        v406 = v740;
LABEL_352:
        v766 = v377;
        v407 = (float32x2_t)v375[1];
        v718 = vcvtq_f64_f32(vsub_f32(v407, v376));
        v408 = (int64x2_t)vmulq_f64(v718, v718);
        v741 = v406;
        v409 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v406, v408), (float64x2_t)vzip2q_s64(v406, v408)));
        v410 = vaddvq_f64(vmulq_f64(v377, v718)) / fmax(vmulq_laneq_f64(v409, v409, 1).f64[0], 2.22507386e-308);
        if (v410 <= 1.0) {
          v411 = v410;
        }
        else {
          v411 = 1.0;
        }
        if (v410 >= -1.0) {
          v412 = v411;
        }
        else {
          v412 = -1.0;
        }
        v705 = acos(v412);
        v413 = v378 == 0;
        v414 = (float32x2_t *)&v372[6 * v373];
        v416 = v414[1];
        v415 = (uint64_t)&v414[1];
        v417 = v416;
        v692 = vcvtq_f64_f32(vsub_f32(v416, v376));
        v418 = (int64x2_t)vmulq_f64(v692, v692);
        v419 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v741, v418), (float64x2_t)vzip2q_s64(v741, v418)));
        v420 = vaddvq_f64(vmulq_f64(v766, v692)) / fmax(vmulq_laneq_f64(v419, v419, 1).f64[0], 2.22507386e-308);
        if (v420 <= 1.0) {
          v421 = v420;
        }
        else {
          v421 = 1.0;
        }
        if (v420 >= -1.0) {
          v422 = v421;
        }
        else {
          v422 = -1.0;
        }
        v423 = acos(v422);
        v424.f64[0] = v705;
        v424.f64[1] = v423;
        v425 = vdivq_f64(vmulq_f64(v424, v681), v675);
        v426 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v718, (int64x2_t)v692), v726), (float64x2_t)vzip2q_s64((int64x2_t)v718, (int64x2_t)v692), v766.f64[0])), (int8x16_t)v425, (int8x16_t)vsubq_f64(v669, v425));
        v427 = vdup_n_s32(v413);
        v428.i64[0] = v427.u32[0];
        v428.i64[1] = v427.u32[1];
        v429 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v428, 0x3FuLL)), (int8x16_t)vsubq_f64(v669, v426), (int8x16_t)v426);
        v430 = vbslq_s8((int8x16_t)vcgtq_f64(v749, v429), (int8x16_t)vaddq_f64(v429, v669), (int8x16_t)v429);
        if (vabdd_f64(*(double *)v430.i64, *(double *)&v430.i64[1]) >= 0.100000001)
        {
          if (*(double *)v430.i64 < *(double *)&v430.i64[1]) {
            goto LABEL_407;
          }
LABEL_368:
          v437 = &v372[6 * v373];
          v780 = *v437;
          sub_25B4C9CE4((uint64_t)&v781, v415);
          while (2)
          {
            v438 = v375;
            v439 = (uint64_t)(v375 + 1);
            *v437 = *v375;
            sub_25B576A98((uint64_t)&v774, (uint64_t)(v437 + 1), (uint64_t)(v375 + 1));
            sub_25B400248(v776);
            if (v662 < v374)
            {
LABEL_406:
              *v438 = v780;
              sub_25B576A98((uint64_t)&v774, v439, (uint64_t)&v781);
              sub_25B400248(v776);
              sub_25B400248(v783);
              v372 = a1;
              v373 = v660;
              goto LABEL_407;
            }
            v440 = (2 * v374) | 1;
            v375 = &a1[6 * v440];
            v374 = 2 * v374 + 2;
            v441 = *(float32x2_t *)&a3[1]->f64[0];
            v442 = **a3;
            v443 = *((unsigned __int8 *)a3 + 24);
            v444 = (*a3)->f64[1];
            if (v374 >= (uint64_t)v11)
            {
              v471 = (int64x2_t)vmulq_f64(v442, v442);
              v727 = -v444;
              v374 = v440;
              goto LABEL_390;
            }
            v445 = (float32x2_t)a1[6 * v440 + 1];
            v719 = vcvtq_f64_f32(vsub_f32(v445, v441));
            v742 = (int64x2_t)vmulq_f64(v442, v442);
            v446 = (int64x2_t)vmulq_f64(v719, v719);
            v447 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v742, v446), (float64x2_t)vzip2q_s64(v742, v446)));
            v448 = vaddvq_f64(vmulq_f64(v442, v719)) / fmax(vmulq_laneq_f64(v447, v447, 1).f64[0], 2.22507386e-308);
            if (v448 <= 1.0) {
              v449 = v448;
            }
            else {
              v449 = 1.0;
            }
            if (v448 >= -1.0) {
              v450 = v449;
            }
            else {
              v450 = -1.0;
            }
            v767 = **a3;
            v706 = acos(v450);
            v727 = -v444;
            v451 = (float32x2_t)v375[7];
            v693 = vcvtq_f64_f32(vsub_f32(v451, v441));
            v452 = (int64x2_t)vmulq_f64(v693, v693);
            v453 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v742, v452), (float64x2_t)vzip2q_s64(v742, v452)));
            v454 = vaddvq_f64(vmulq_f64(v767, v693)) / fmax(vmulq_laneq_f64(v453, v453, 1).f64[0], 2.22507386e-308);
            if (v454 <= 1.0) {
              v455 = v454;
            }
            else {
              v455 = 1.0;
            }
            if (v454 >= -1.0) {
              v456 = v455;
            }
            else {
              v456 = -1.0;
            }
            v457 = acos(v456);
            v442 = v767;
            v458.f64[0] = v706;
            v458.f64[1] = v457;
            v459 = vdivq_f64(vmulq_f64(v458, v681), v675);
            v460 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v719, (int64x2_t)v693), v727), (float64x2_t)vzip2q_s64((int64x2_t)v719, (int64x2_t)v693), v767.f64[0])), (int8x16_t)v459, (int8x16_t)vsubq_f64(v669, v459));
            v461 = vdup_n_s32(v443 == 0);
            v462.i64[0] = v461.u32[0];
            v462.i64[1] = v461.u32[1];
            v463 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v462, 0x3FuLL)), (int8x16_t)vsubq_f64(v669, v460), (int8x16_t)v460);
            v464 = vbslq_s8((int8x16_t)vcgtq_f64(v749, v463), (int8x16_t)vaddq_f64(v463, v669), (int8x16_t)v463);
            if (vabdd_f64(*(double *)v464.i64, *(double *)&v464.i64[1]) >= 0.100000001)
            {
              if (*(double *)v464.i64 < *(double *)&v464.i64[1]) {
                goto LABEL_388;
              }
LABEL_386:
              v374 = v440;
            }
            else
            {
              v465 = *(float32x2_t *)&a3[2]->f64[0];
              v466 = vsub_f32(v465, v445);
              v467 = (int32x2_t)vmul_f32(v466, v466);
              v468 = vsub_f32(v465, v451);
              v469 = (int32x2_t)vmul_f32(v468, v468);
              v470 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v467, v469), (float32x2_t)vzip2_s32(v467, v469)));
              if ((vcgt_f32((float32x2_t)vdup_lane_s32(v470, 1), (float32x2_t)v470).u8[0] & 1) == 0) {
                goto LABEL_386;
              }
LABEL_388:
              v375 += 6;
            }
            v471 = v742;
LABEL_390:
            v768 = v442;
            v472 = (float32x2_t)v375[1];
            v720 = vcvtq_f64_f32(vsub_f32(v472, v441));
            v473 = (int64x2_t)vmulq_f64(v720, v720);
            v743 = v471;
            v474 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v471, v473), (float64x2_t)vzip2q_s64(v471, v473)));
            v475 = vaddvq_f64(vmulq_f64(v442, v720)) / fmax(vmulq_laneq_f64(v474, v474, 1).f64[0], 2.22507386e-308);
            if (v475 <= 1.0) {
              v476 = v475;
            }
            else {
              v476 = 1.0;
            }
            if (v475 >= -1.0) {
              v477 = v476;
            }
            else {
              v477 = -1.0;
            }
            v707 = acos(v477);
            v478 = v781;
            v694 = vcvtq_f64_f32(vsub_f32(v781, v441));
            v479 = (int64x2_t)vmulq_f64(v694, v694);
            v480 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v743, v479), (float64x2_t)vzip2q_s64(v743, v479)));
            v481 = vaddvq_f64(vmulq_f64(v768, v694)) / fmax(vmulq_laneq_f64(v480, v480, 1).f64[0], 2.22507386e-308);
            if (v481 <= 1.0) {
              v482 = v481;
            }
            else {
              v482 = 1.0;
            }
            if (v481 >= -1.0) {
              v483 = v482;
            }
            else {
              v483 = -1.0;
            }
            v484 = acos(v483);
            v485.f64[0] = v707;
            v485.f64[1] = v484;
            v486 = vdivq_f64(vmulq_f64(v485, v681), v675);
            v487 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v720, (int64x2_t)v694), v727), (float64x2_t)vzip2q_s64((int64x2_t)v720, (int64x2_t)v694), v768.f64[0])), (int8x16_t)v486, (int8x16_t)vsubq_f64(v669, v486));
            v488 = vdup_n_s32(v443 == 0);
            v489.i64[0] = v488.u32[0];
            v489.i64[1] = v488.u32[1];
            v490 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v489, 0x3FuLL)), (int8x16_t)vsubq_f64(v669, v487), (int8x16_t)v487);
            v491 = vbslq_s8((int8x16_t)vcgtq_f64(v749, v490), (int8x16_t)vaddq_f64(v490, v669), (int8x16_t)v490);
            if (vabdd_f64(*(double *)v491.i64, *(double *)&v491.i64[1]) >= 0.100000001)
            {
              v437 = v438;
              if (*(double *)v491.i64 < *(double *)&v491.i64[1]) {
                goto LABEL_406;
              }
            }
            else
            {
              v492 = *(float32x2_t *)&a3[2]->f64[0];
              v493 = vsub_f32(v492, v472);
              v494 = (int32x2_t)vmul_f32(v493, v493);
              v495 = vsub_f32(v492, v478);
              v496 = (int32x2_t)vmul_f32(v495, v495);
              v497 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v494, v496), (float32x2_t)vzip2_s32(v494, v496)));
              v437 = v438;
              if (vcgt_f32((float32x2_t)vdup_lane_s32(v497, 1), (float32x2_t)v497).u8[0]) {
                goto LABEL_406;
              }
            }
            continue;
          }
        }
        v431 = *(float32x2_t *)&a3[2]->f64[0];
        v432 = vsub_f32(v431, v407);
        v433 = (int32x2_t)vmul_f32(v432, v432);
        v434 = vsub_f32(v431, v417);
        v435 = (int32x2_t)vmul_f32(v434, v434);
        v436 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v433, v435), (float32x2_t)vzip2_s32(v433, v435)));
        if ((vcgt_f32((float32x2_t)vdup_lane_s32(v436, 1), (float32x2_t)v436).u8[0] & 1) == 0) {
          goto LABEL_368;
        }
LABEL_407:
        v371 = v373 - 1;
        if (!v373)
        {
          v498 = v10 / 0x30uLL;
          v661 = (uint64_t)(v372 + 1);
          v676 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
          v682 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
          v670 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
          while (1)
          {
            v499 = a1;
            v663 = a2;
            v774 = *a1;
            sub_25B4C9CE4((uint64_t)&v775, v661);
            v500 = 0;
            do
            {
              v501 = v500 + 1;
              v502 = (float32x2_t *)&v499[6 * v500 + 6];
              v503 = 2 * v500;
              v500 = (2 * v500) | 1;
              v504 = v503 + 2;
              if (v503 + 2 >= v498) {
                goto LABEL_428;
              }
              v505 = (float32x2_t)v499[6 * v501 + 1];
              v506 = *(float32x2_t *)&a3[1]->f64[0];
              v744 = vcvtq_f64_f32(vsub_f32(v505, v506));
              v769 = **a3;
              v708 = (int64x2_t)vmulq_f64(v769, v769);
              v507 = (int64x2_t)vmulq_f64(v744, v744);
              v508 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v708, v507), (float64x2_t)vzip2q_s64(v708, v507)));
              v509 = vaddvq_f64(vmulq_f64(v769, v744)) / fmax(vmulq_laneq_f64(v508, v508, 1).f64[0], 2.22507386e-308);
              if (v509 <= 1.0) {
                v510 = v509;
              }
              else {
                v510 = 1.0;
              }
              if (v509 >= -1.0) {
                v511 = v510;
              }
              else {
                v511 = -1.0;
              }
              v721 = acos(v511);
              v512 = *((unsigned char *)a3 + 24) == 0;
              v513 = v502[7];
              v695 = vcvtq_f64_f32(vsub_f32(v513, v506));
              v514 = (int64x2_t)vmulq_f64(v695, v695);
              v515 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v708, v514), (float64x2_t)vzip2q_s64(v708, v514)));
              v516 = vaddvq_f64(vmulq_f64(v769, v695)) / fmax(vmulq_laneq_f64(v515, v515, 1).f64[0], 2.22507386e-308);
              if (v516 <= 1.0) {
                v517 = v516;
              }
              else {
                v517 = 1.0;
              }
              if (v516 >= -1.0) {
                v518 = v517;
              }
              else {
                v518 = -1.0;
              }
              v519 = acos(v518);
              v520.f64[0] = v721;
              v520.f64[1] = v519;
              v521 = vdivq_f64(vmulq_f64(v520, v682), v676);
              v522 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v744, (int64x2_t)v695), -v769.f64[1]), (float64x2_t)vzip2q_s64((int64x2_t)v744, (int64x2_t)v695), v769.f64[0])), (int8x16_t)v521, (int8x16_t)vsubq_f64(v670, v521));
              v523 = vdup_n_s32(v512);
              v524.i64[0] = v523.u32[0];
              v524.i64[1] = v523.u32[1];
              v525 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v524, 0x3FuLL)), (int8x16_t)vsubq_f64(v670, v522), (int8x16_t)v522);
              v526 = vbslq_s8((int8x16_t)vcgtq_f64(v749, v525), (int8x16_t)vaddq_f64(v525, v670), (int8x16_t)v525);
              if (vabdd_f64(*(double *)v526.i64, *(double *)&v526.i64[1]) >= 0.100000001)
              {
                if (*(double *)v526.i64 >= *(double *)&v526.i64[1]) {
                  goto LABEL_428;
                }
LABEL_427:
                v502 += 6;
                v500 = v504;
                goto LABEL_428;
              }
              v527 = *(float32x2_t *)&a3[2]->f64[0];
              v528 = vsub_f32(v527, v505);
              v529 = (int32x2_t)vmul_f32(v528, v528);
              v530 = vsub_f32(v527, v513);
              v531 = (int32x2_t)vmul_f32(v530, v530);
              v532 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v529, v531), (float32x2_t)vzip2_s32(v529, v531)));
              if (vcgt_f32((float32x2_t)vdup_lane_s32(v532, 1), (float32x2_t)v532).u8[0]) {
                goto LABEL_427;
              }
LABEL_428:
              v533 = v502 + 1;
              *v499 = (uint64_t)*v502;
              sub_25B576A98((uint64_t)&v780, (uint64_t)(v499 + 1), (uint64_t)&v502[1]);
              sub_25B400248(v782);
              v499 = (uint64_t *)v502;
            }
            while (v500 <= (uint64_t)((unint64_t)(v498 - 2) >> 1));
            a2 -= 6;
            if (v502 == (float32x2_t *)(v663 - 6))
            {
              *v502 = (float32x2_t)v774;
              sub_25B576A98((uint64_t)&v780, (uint64_t)&v502[1], (uint64_t)&v775);
              v564 = v782;
              goto LABEL_467;
            }
            *v502 = (float32x2_t)*(v663 - 6);
            sub_25B576A98((uint64_t)&v780, (uint64_t)&v502[1], (uint64_t)(v663 - 5));
            sub_25B400248(v782);
            *a2 = v774;
            sub_25B576A98((uint64_t)&v780, (uint64_t)(v663 - 5), (uint64_t)&v775);
            sub_25B400248(v782);
            v534 = (char *)v502 - (char *)a1 + 48;
            if (v534 < 49) {
              goto LABEL_468;
            }
            v535 = (v534 / 0x30uLL - 2) >> 1;
            v536 = (float32x2_t)a1[6 * v535 + 1];
            v537 = *(float32x2_t *)&a3[1]->f64[0];
            v745 = vcvtq_f64_f32(vsub_f32(v536, v537));
            v770 = **a3;
            v709 = (int64x2_t)vmulq_f64(v770, v770);
            v538 = (int64x2_t)vmulq_f64(v745, v745);
            v539 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v709, v538), (float64x2_t)vzip2q_s64(v709, v538)));
            v540 = vaddvq_f64(vmulq_f64(v770, v745)) / fmax(vmulq_laneq_f64(v539, v539, 1).f64[0], 2.22507386e-308);
            if (v540 <= 1.0) {
              v541 = v540;
            }
            else {
              v541 = 1.0;
            }
            if (v540 >= -1.0) {
              v542 = v541;
            }
            else {
              v542 = -1.0;
            }
            v722 = acos(v542);
            v543 = *((unsigned char *)a3 + 24) == 0;
            v544 = *v533;
            v696 = vcvtq_f64_f32(vsub_f32(*v533, v537));
            v545 = (int64x2_t)vmulq_f64(v696, v696);
            v546 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v709, v545), (float64x2_t)vzip2q_s64(v709, v545)));
            v547 = vaddvq_f64(vmulq_f64(v770, v696)) / fmax(vmulq_laneq_f64(v546, v546, 1).f64[0], 2.22507386e-308);
            if (v547 <= 1.0) {
              v548 = v547;
            }
            else {
              v548 = 1.0;
            }
            if (v547 >= -1.0) {
              v549 = v548;
            }
            else {
              v549 = -1.0;
            }
            v550 = acos(v549);
            v551.f64[0] = v722;
            v551.f64[1] = v550;
            v552 = vdivq_f64(vmulq_f64(v551, v682), v676);
            v553 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v745, (int64x2_t)v696), -v770.f64[1]), (float64x2_t)vzip2q_s64((int64x2_t)v745, (int64x2_t)v696), v770.f64[0])), (int8x16_t)v552, (int8x16_t)vsubq_f64(v670, v552));
            v554 = vdup_n_s32(v543);
            v555.i64[0] = v554.u32[0];
            v555.i64[1] = v554.u32[1];
            v556 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v555, 0x3FuLL)), (int8x16_t)vsubq_f64(v670, v553), (int8x16_t)v553);
            v557 = vbslq_s8((int8x16_t)vcgtq_f64(v749, v556), (int8x16_t)vaddq_f64(v556, v670), (int8x16_t)v556);
            if (vabdd_f64(*(double *)v557.i64, *(double *)&v557.i64[1]) >= 0.100000001)
            {
              if (*(double *)v557.i64 >= *(double *)&v557.i64[1]) {
                goto LABEL_468;
              }
LABEL_448:
              v780 = (uint64_t)*v502;
              sub_25B4C9CE4((uint64_t)&v781, (uint64_t)&v502[1]);
              while (1)
              {
                v565 = v502;
                v502 = (float32x2_t *)&a1[6 * v535];
                *v565 = *v502;
                sub_25B576A98((uint64_t)v778, (uint64_t)&v565[1], (uint64_t)&v502[1]);
                sub_25B400248(v779);
                if (!v535) {
                  break;
                }
                v535 = (v535 - 1) >> 1;
                v566 = (float32x2_t)a1[6 * v535 + 1];
                v567 = *(float32x2_t *)&a3[1]->f64[0];
                v746 = vcvtq_f64_f32(vsub_f32(v566, v567));
                v771 = **a3;
                v710 = (int64x2_t)vmulq_f64(v771, v771);
                v568 = (int64x2_t)vmulq_f64(v746, v746);
                v569 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v710, v568), (float64x2_t)vzip2q_s64(v710, v568)));
                v570 = vaddvq_f64(vmulq_f64(v771, v746)) / fmax(vmulq_laneq_f64(v569, v569, 1).f64[0], 2.22507386e-308);
                if (v570 <= 1.0) {
                  v571 = v570;
                }
                else {
                  v571 = 1.0;
                }
                if (v570 >= -1.0) {
                  v572 = v571;
                }
                else {
                  v572 = -1.0;
                }
                v723 = acos(v572);
                v573 = *((unsigned char *)a3 + 24) == 0;
                v574 = v781;
                v697 = vcvtq_f64_f32(vsub_f32(v781, v567));
                v575 = (int64x2_t)vmulq_f64(v697, v697);
                v576 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v710, v575), (float64x2_t)vzip2q_s64(v710, v575)));
                v577 = vaddvq_f64(vmulq_f64(v771, v697)) / fmax(vmulq_laneq_f64(v576, v576, 1).f64[0], 2.22507386e-308);
                if (v577 <= 1.0) {
                  v578 = v577;
                }
                else {
                  v578 = 1.0;
                }
                if (v577 >= -1.0) {
                  v579 = v578;
                }
                else {
                  v579 = -1.0;
                }
                v580 = acos(v579);
                v581.f64[0] = v723;
                v581.f64[1] = v580;
                v582 = vdivq_f64(vmulq_f64(v581, v682), v676);
                v583 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v746, (int64x2_t)v697), -v771.f64[1]), (float64x2_t)vzip2q_s64((int64x2_t)v746, (int64x2_t)v697), v771.f64[0])), (int8x16_t)v582, (int8x16_t)vsubq_f64(v670, v582));
                v584 = vdup_n_s32(v573);
                v585.i64[0] = v584.u32[0];
                v585.i64[1] = v584.u32[1];
                v586 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v585, 0x3FuLL)), (int8x16_t)vsubq_f64(v670, v583), (int8x16_t)v583);
                v587 = vbslq_s8((int8x16_t)vcgtq_f64(v749, v586), (int8x16_t)vaddq_f64(v586, v670), (int8x16_t)v586);
                if (vabdd_f64(*(double *)v587.i64, *(double *)&v587.i64[1]) >= 0.100000001)
                {
                  if (*(double *)v587.i64 >= *(double *)&v587.i64[1]) {
                    break;
                  }
                }
                else
                {
                  v588 = *(float32x2_t *)&a3[2]->f64[0];
                  v589 = vsub_f32(v588, v566);
                  v590 = (int32x2_t)vmul_f32(v589, v589);
                  v591 = vsub_f32(v588, v574);
                  v592 = (int32x2_t)vmul_f32(v591, v591);
                  v593 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v590, v592), (float32x2_t)vzip2_s32(v590, v592)));
                  if ((vcgt_f32((float32x2_t)vdup_lane_s32(v593, 1), (float32x2_t)v593).u8[0] & 1) == 0) {
                    break;
                  }
                }
              }
              *v502 = (float32x2_t)v780;
              sub_25B576A98((uint64_t)v778, (uint64_t)&v502[1], (uint64_t)&v781);
              sub_25B400248(v779);
              v564 = v783;
LABEL_467:
              sub_25B400248(v564);
              goto LABEL_468;
            }
            v558 = *(float32x2_t *)&a3[2]->f64[0];
            v559 = vsub_f32(v558, v536);
            v560 = (int32x2_t)vmul_f32(v559, v559);
            v561 = vsub_f32(v558, v544);
            v562 = (int32x2_t)vmul_f32(v561, v561);
            v563 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v560, v562), (float32x2_t)vzip2_s32(v560, v562)));
            if (vcgt_f32((float32x2_t)vdup_lane_s32(v563, 1), (float32x2_t)v563).u8[0]) {
              goto LABEL_448;
            }
LABEL_468:
            sub_25B400248(v777);
            if (v498-- <= 2) {
              return;
            }
          }
        }
      }
      v400 = *(float32x2_t *)&a3[2]->f64[0];
      v401 = vsub_f32(v400, v380);
      v402 = (int32x2_t)vmul_f32(v401, v401);
      v403 = vsub_f32(v400, v386);
      v404 = (int32x2_t)vmul_f32(v403, v403);
      v405 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v402, v404), (float32x2_t)vzip2_s32(v402, v404)));
      if ((vcgt_f32((float32x2_t)vdup_lane_s32(v405, 1), (float32x2_t)v405).u8[0] & 1) == 0) {
        goto LABEL_351;
      }
LABEL_350:
      v375 += 6;
      v374 = 2 * v373 + 2;
      goto LABEL_351;
    }
    uint64_t v16 = &v9[6 * (v11 >> 1)];
    if ((unint64_t)v10 >= 0x1801)
    {
      sub_25B5EA360(v9, &v9[6 * (v11 >> 1)], i, (uint64_t)a3);
      uint64_t v17 = 3 * (v11 >> 1);
      unint64_t v18 = &v9[6 * (v11 >> 1) - 6];
      sub_25B5EA360(v9 + 6, v18, a2 - 12, (uint64_t)a3);
      sub_25B5EA360(v9 + 12, &v9[2 * v17 + 6], a2 - 18, (uint64_t)a3);
      sub_25B5EA360(v18, v16, &v9[2 * v17 + 6], (uint64_t)a3);
      sub_25B5EA2CC(v9, v16);
    }
    else
    {
      sub_25B5EA360(&v9[6 * (v11 >> 1)], v9, i, (uint64_t)a3);
    }
    --a4;
    if (a5) {
      goto LABEL_40;
    }
    uint64_t v19 = *(float32x2_t *)&a3[1]->f64[0];
    v658 = (float32x2_t)*(v9 - 5);
    v728 = vcvtq_f64_f32(vsub_f32(v658, v19));
    v757 = **a3;
    v672 = (int64x2_t)vmulq_f64(v757, v757);
    int v20 = (int64x2_t)vmulq_f64(v728, v728);
    int v21 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v672, v20), (float64x2_t)vzip2q_s64(v672, v20)));
    int v22 = vaddvq_f64(vmulq_f64(v757, v728)) / fmax(vmulq_laneq_f64(v21, v21, 1).f64[0], 2.22507386e-308);
    if (v22 <= 1.0) {
      int v23 = v22;
    }
    else {
      int v23 = 1.0;
    }
    if (v22 >= -1.0) {
      int v24 = v23;
    }
    else {
      int v24 = -1.0;
    }
    v678 = acos(v24);
    int v25 = *((unsigned char *)a3 + 24) == 0;
    int v26 = (float32x2_t)v9[1];
    v666 = vcvtq_f64_f32(vsub_f32(v26, v19));
    uint64_t v27 = (int64x2_t)vmulq_f64(v666, v666);
    uint64_t v28 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v672, v27), (float64x2_t)vzip2q_s64(v672, v27)));
    BOOL v29 = vaddvq_f64(vmulq_f64(v757, v666)) / fmax(vmulq_laneq_f64(v28, v28, 1).f64[0], 2.22507386e-308);
    if (v29 <= 1.0) {
      int v30 = v29;
    }
    else {
      int v30 = 1.0;
    }
    if (v29 >= -1.0) {
      int v31 = v30;
    }
    else {
      int v31 = -1.0;
    }
    BOOL v32 = acos(v31);
    v33.f64[0] = v678;
    v33.f64[1] = v32;
    int v34 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
    uint64_t v35 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
    int v36 = vdivq_f64(vmulq_f64(v33, v34), v35);
    long long v37 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    int v38 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v728, (int64x2_t)v666), -v757.f64[1]), (float64x2_t)vzip2q_s64((int64x2_t)v728, (int64x2_t)v666), v757.f64[0])), (int8x16_t)v36, (int8x16_t)vsubq_f64(v37, v36));
    BOOL v39 = vdup_n_s32(v25);
    v40.i64[0] = v39.u32[0];
    v40.i64[1] = v39.u32[1];
    int v41 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v40, 0x3FuLL)), (int8x16_t)vsubq_f64(v37, v38), (int8x16_t)v38);
    BOOL v42 = vbslq_s8((int8x16_t)vcgtq_f64(v749, v41), (int8x16_t)vaddq_f64(v41, v37), (int8x16_t)v41);
    if (vabdd_f64(*(double *)v42.i64, *(double *)&v42.i64[1]) >= 0.100000001)
    {
      if (*(double *)v42.i64 >= *(double *)&v42.i64[1]) {
        goto LABEL_24;
      }
      goto LABEL_40;
    }
    int v43 = *(float32x2_t *)&a3[2]->f64[0];
    long long v44 = vsub_f32(v43, v658);
    BOOL v45 = (int32x2_t)vmul_f32(v44, v44);
    int v46 = vsub_f32(v43, v26);
    int v47 = (int32x2_t)vmul_f32(v46, v46);
    BOOL v48 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v45, v47), (float32x2_t)vzip2_s32(v45, v47)));
    if (vcgt_f32((float32x2_t)vdup_lane_s32(v48, 1), (float32x2_t)v48).u8[0])
    {
LABEL_40:
      int v80 = v9 + 6;
      v780 = *v9;
      BOOL v81 = (uint64_t)(v9 + 1);
      sub_25B4C9CE4((uint64_t)&v781, (uint64_t)(v9 + 1));
      int v82 = *(float32x2_t *)&a3[1]->f64[0];
      v759 = **a3;
      int v83 = *((unsigned __int8 *)a3 + 24);
      uint64_t v84 = v781;
      v730 = (int64x2_t)vmulq_f64(v759, v759);
      v751 = vcvtq_f64_f32(vsub_f32(v781, v82));
      unint64_t v85 = (int64x2_t)vmulq_f64(v751, v751);
      uint64_t v86 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v730, v85), (float64x2_t)vzip2q_s64(v730, v85)));
      uint64_t v87 = vaddvq_f64(vmulq_f64(v759, v751)) / fmax(vmulq_laneq_f64(v86, v86, 1).f64[0], 2.22507386e-308);
      int v88 = 1.0;
      if (v87 <= 1.0) {
        int v88 = v87;
      }
      if (v87 >= -1.0) {
        BOOL v89 = v88;
      }
      else {
        BOOL v89 = -1.0;
      }
      int v90 = acos(v89) * 180.0 / 3.14159265;
      if (vmlad_n_f64(-v759.f64[1] * v751.f64[0], v751.f64[1], v759.f64[0]) > 0.0) {
        int v90 = 360.0 - v90;
      }
      if (!v83) {
        int v90 = 360.0 - v90;
      }
      if (v90 >= 15.0) {
        int64_t v91 = v90;
      }
      else {
        int64_t v91 = v90 + 360.0;
      }
      int64_t v92 = (float32x2_t *)a3[2];
      v713 = a4;
      while (1)
      {
        int64_t v93 = (float32x2_t)v80[1];
        v752 = vcvtq_f64_f32(vsub_f32(v93, v82));
        uint64_t v94 = (int64x2_t)vmulq_f64(v752, v752);
        unint64_t v95 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v730, v94), (float64x2_t)vzip2q_s64(v730, v94)));
        int v96 = vaddvq_f64(vmulq_f64(v759, v752)) / fmax(vmulq_laneq_f64(v95, v95, 1).f64[0], 2.22507386e-308);
        BOOL v97 = 1.0;
        if (v96 <= 1.0) {
          BOOL v97 = v96;
        }
        if (v96 >= -1.0) {
          int v98 = v97;
        }
        else {
          int v98 = -1.0;
        }
        int v99 = acos(v98) * 180.0 / 3.14159265;
        _V3.D[1] = v752.f64[1];
        _D2 = v759.f64[0];
        __asm { FMLA            D1, D2, V3.D[1] }
        if (_D1 > 0.0) {
          int v99 = 360.0 - v99;
        }
        if (!v83) {
          int v99 = 360.0 - v99;
        }
        if (v99 < 15.0) {
          int v99 = v99 + 360.0;
        }
        if (vabdd_f64(v99, v91) >= 0.100000001) {
          break;
        }
        int v103 = vsub_f32(*v92, v93);
        BOOL v104 = (int32x2_t)vmul_f32(v103, v103);
        int v105 = vsub_f32(*v92, v84);
        int v106 = (int32x2_t)vmul_f32(v105, v105);
        uint64_t v107 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v104, v106), (float32x2_t)vzip2_s32(v104, v106)));
        if ((vcgt_f32((float32x2_t)vdup_lane_s32(v107, 1), (float32x2_t)v107).u8[0] & 1) == 0) {
          goto LABEL_69;
        }
LABEL_68:
        v80 += 6;
      }
      if (v99 < v91) {
        goto LABEL_68;
      }
LABEL_69:
      uint64_t v108 = i;
      if (v80 - 6 != v9)
      {
        while (1)
        {
          unint64_t v109 = (float32x2_t)i[1];
          v753 = vcvtq_f64_f32(vsub_f32(v109, v82));
          uint64_t v110 = (int64x2_t)vmulq_f64(v753, v753);
          uint64_t v111 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v730, v110), (float64x2_t)vzip2q_s64(v730, v110)));
          int v112 = vaddvq_f64(vmulq_f64(v759, v753)) / fmax(vmulq_laneq_f64(v111, v111, 1).f64[0], 2.22507386e-308);
          BOOL v113 = 1.0;
          if (v112 <= 1.0) {
            BOOL v113 = v112;
          }
          if (v112 >= -1.0) {
            int v114 = v113;
          }
          else {
            int v114 = -1.0;
          }
          int v115 = acos(v114) * 180.0 / 3.14159265;
          _V3.D[1] = v753.f64[1];
          _D2 = v759.f64[0];
          __asm { FMLA            D1, D2, V3.D[1] }
          if (_D1 > 0.0) {
            int v115 = 360.0 - v115;
          }
          if (!v83) {
            int v115 = 360.0 - v115;
          }
          if (v115 < 15.0) {
            int v115 = v115 + 360.0;
          }
          if (vabdd_f64(v115, v91) >= 0.100000001)
          {
            if (v115 < v91) {
              goto LABEL_108;
            }
          }
          else
          {
            int64_t v119 = vsub_f32(*v92, v109);
            uint64_t v120 = (int32x2_t)vmul_f32(v119, v119);
            unint64_t v121 = vsub_f32(*v92, v84);
            unint64_t v122 = (int32x2_t)vmul_f32(v121, v121);
            uint64_t v123 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v120, v122), (float32x2_t)vzip2_s32(v120, v122)));
            if (vcgt_f32((float32x2_t)vdup_lane_s32(v123, 1), (float32x2_t)v123).u8[0]) {
              goto LABEL_108;
            }
          }
          i -= 6;
        }
      }
      unint64_t i = a2;
      if (v80 < a2)
      {
        for (unint64_t i = v108; ; i -= 6)
        {
          uint64_t v124 = (float32x2_t)i[1];
          v754 = vcvtq_f64_f32(vsub_f32(v124, v82));
          int64_t v125 = (int64x2_t)vmulq_f64(v754, v754);
          int v126 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v730, v125), (float64x2_t)vzip2q_s64(v730, v125)));
          BOOL v127 = vaddvq_f64(vmulq_f64(v759, v754)) / fmax(vmulq_laneq_f64(v126, v126, 1).f64[0], 2.22507386e-308);
          int v128 = 1.0;
          if (v127 <= 1.0) {
            int v128 = v127;
          }
          if (v127 >= -1.0) {
            int v129 = v128;
          }
          else {
            int v129 = -1.0;
          }
          long long v130 = acos(v129) * 180.0 / 3.14159265;
          _V3.D[1] = v754.f64[1];
          _D2 = v759.f64[0];
          __asm { FMLA            D1, D2, V3.D[1] }
          if (_D1 > 0.0) {
            long long v130 = 360.0 - v130;
          }
          if (!v83) {
            long long v130 = 360.0 - v130;
          }
          if (v130 < 15.0) {
            long long v130 = v130 + 360.0;
          }
          if (vabdd_f64(v130, v91) >= 0.100000001)
          {
            _CF = v130 < v91 || v80 >= i;
            if (_CF) {
              break;
            }
          }
          else
          {
            unint64_t v134 = vsub_f32(*v92, v124);
            unint64_t v135 = (int32x2_t)vmul_f32(v134, v134);
            int v136 = vsub_f32(*v92, v84);
            int v137 = (int32x2_t)vmul_f32(v136, v136);
            int v138 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v135, v137), (float32x2_t)vzip2_s32(v135, v137)));
            if ((vmvn_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_lane_s32(v138, 1), (float32x2_t)v138)).u8[0] & 1) == 0
              || v80 >= i)
            {
              break;
            }
          }
        }
      }
LABEL_108:
      uint64_t j = v80;
      if (v80 < i)
      {
        uint64_t j = v80;
        int v140 = i;
        do
        {
          sub_25B5EA2CC(j, v140);
          int v141 = *(float32x2_t *)&a3[1]->f64[0];
          v760 = **a3;
          uint64_t v142 = *((unsigned __int8 *)a3 + 24);
          uint64_t v143 = v781;
          v731 = vcvtq_f64_f32(vsub_f32(v781, v141));
          v755 = (int64x2_t)vmulq_f64(v760, v760);
          unint64_t v144 = (int64x2_t)vmulq_f64(v731, v731);
          unint64_t v145 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v755, v144), (float64x2_t)vzip2q_s64(v755, v144)));
          BOOL v146 = vaddvq_f64(vmulq_f64(v760, v731)) / fmax(vmulq_laneq_f64(v145, v145, 1).f64[0], 2.22507386e-308);
          int v147 = 1.0;
          if (v146 <= 1.0) {
            int v147 = v146;
          }
          if (v146 >= -1.0) {
            long long v148 = v147;
          }
          else {
            long long v148 = -1.0;
          }
          unint64_t v149 = acos(v148) * 180.0 / 3.14159265;
          if (vmlad_n_f64(-v760.f64[1] * v731.f64[0], v731.f64[1], v760.f64[0]) > 0.0) {
            unint64_t v149 = 360.0 - v149;
          }
          if (!v142) {
            unint64_t v149 = 360.0 - v149;
          }
          if (v149 >= 15.0) {
            int v150 = v149;
          }
          else {
            int v150 = v149 + 360.0;
          }
          int v151 = (float32x2_t *)a3[2];
          do
          {
            while (1)
            {
              j += 6;
              int v152 = (float32x2_t)j[1];
              v732 = vcvtq_f64_f32(vsub_f32(v152, v141));
              BOOL v153 = (int64x2_t)vmulq_f64(v732, v732);
              int v154 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v755, v153), (float64x2_t)vzip2q_s64(v755, v153)));
              int v155 = vaddvq_f64(vmulq_f64(v760, v732)) / fmax(vmulq_laneq_f64(v154, v154, 1).f64[0], 2.22507386e-308);
              uint64_t v156 = 1.0;
              if (v155 <= 1.0) {
                uint64_t v156 = v155;
              }
              if (v155 >= -1.0) {
                unint64_t v157 = v156;
              }
              else {
                unint64_t v157 = -1.0;
              }
              int v158 = acos(v157) * 180.0 / 3.14159265;
              _V3.D[1] = v732.f64[1];
              _D2 = v760.f64[0];
              __asm { FMLA            D1, D2, V3.D[1] }
              if (_D1 > 0.0) {
                int v158 = 360.0 - v158;
              }
              if (!v142) {
                int v158 = 360.0 - v158;
              }
              if (v158 < 15.0) {
                int v158 = v158 + 360.0;
              }
              if (vabdd_f64(v158, v150) >= 0.100000001) {
                break;
              }
              long long v162 = vsub_f32(*v151, v152);
              long long v163 = (int32x2_t)vmul_f32(v162, v162);
              long long v164 = vsub_f32(*v151, v143);
              long long v165 = (int32x2_t)vmul_f32(v164, v164);
              uint64_t v166 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v163, v165), (float32x2_t)vzip2_s32(v163, v165)));
              if ((vcgt_f32((float32x2_t)vdup_lane_s32(v166, 1), (float32x2_t)v166).u8[0] & 1) == 0) {
                goto LABEL_140;
              }
            }
          }
          while (v158 < v150);
          do
          {
            while (1)
            {
LABEL_140:
              v140 -= 6;
              uint64_t v167 = (float32x2_t)v140[1];
              v733 = vcvtq_f64_f32(vsub_f32(v167, v141));
              uint64_t v168 = (int64x2_t)vmulq_f64(v733, v733);
              uint64_t v169 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v755, v168), (float64x2_t)vzip2q_s64(v755, v168)));
              uint64_t v170 = vaddvq_f64(vmulq_f64(v760, v733)) / fmax(vmulq_laneq_f64(v169, v169, 1).f64[0], 2.22507386e-308);
              v171 = 1.0;
              if (v170 <= 1.0) {
                v171 = v170;
              }
              if (v170 >= -1.0) {
                v172 = v171;
              }
              else {
                v172 = -1.0;
              }
              BOOL v173 = acos(v172) * 180.0 / 3.14159265;
              _V3.D[1] = v733.f64[1];
              _D2 = v760.f64[0];
              __asm { FMLA            D1, D2, V3.D[1] }
              if (_D1 > 0.0) {
                BOOL v173 = 360.0 - v173;
              }
              if (!v142) {
                BOOL v173 = 360.0 - v173;
              }
              if (v173 < 15.0) {
                BOOL v173 = v173 + 360.0;
              }
              if (vabdd_f64(v173, v150) < 0.100000001) {
                break;
              }
              if (v173 < v150) {
                goto LABEL_153;
              }
            }
            float32x2_t v177 = vsub_f32(*v151, v167);
            float v178 = (int32x2_t)vmul_f32(v177, v177);
            float v179 = vsub_f32(*v151, v143);
            float32x2_t v180 = (int32x2_t)vmul_f32(v179, v179);
            float32x2_t v181 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v178, v180), (float32x2_t)vzip2_s32(v178, v180)));
          }
          while ((vcgt_f32((float32x2_t)vdup_lane_s32(v181, 1), (float32x2_t)v181).u8[0] & 1) == 0);
LABEL_153:
          ;
        }
        while (j < v140);
      }
      if (j - 6 != a1)
      {
        *a1 = *(j - 6);
        sub_25B576A98((uint64_t)&v774, v81, (uint64_t)(j - 5));
        sub_25B400248(v776);
      }
      *(j - 6) = v780;
      sub_25B576A98((uint64_t)&v774, (uint64_t)(j - 5), (uint64_t)&v781);
      sub_25B400248(v776);
      sub_25B400248(v783);
      _CF = v80 >= i;
      unint64_t i = v108;
      a4 = v713;
      if (_CF)
      {
        v182 = sub_25B5EB994(a1, j - 6, (uint64_t)a3);
        if (sub_25B5EB994(j, a2, (uint64_t)a3))
        {
          a2 = j - 6;
          if (v182) {
            return;
          }
          goto LABEL_1;
        }
        if ((v182 & 1) == 0) {
          goto LABEL_160;
        }
      }
      else
      {
LABEL_160:
        sub_25B5E7378(a1, j - 6, a3, v713, a5 & 1);
        a5 = 0;
      }
    }
    else
    {
LABEL_24:
      BOOL v50 = *v9;
      int v49 = (uint64_t)(v9 + 1);
      v780 = v50;
      v679 = v35;
      v684 = v37;
      v673 = v34;
      sub_25B4C9CE4((uint64_t)&v781, v49);
      int v51 = *(float32x2_t *)&a3[1]->f64[0];
      v656 = v781;
      v667 = vcvtq_f64_f32(vsub_f32(v781, v51));
      v758 = **a3;
      v729 = (int64x2_t)vmulq_f64(v758, v758);
      BOOL v52 = (int64x2_t)vmulq_f64(v667, v667);
      int v53 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v729, v52), (float64x2_t)vzip2q_s64(v729, v52)));
      int v54 = vaddvq_f64(vmulq_f64(v758, v667)) / fmax(vmulq_laneq_f64(v53, v53, 1).f64[0], 2.22507386e-308);
      if (v54 <= 1.0) {
        uint64_t v55 = v54;
      }
      else {
        uint64_t v55 = 1.0;
      }
      if (v54 >= -1.0) {
        unsigned __int32 v56 = v55;
      }
      else {
        unsigned __int32 v56 = -1.0;
      }
      v659 = acos(v56);
      BOOL v57 = *((unsigned __int8 *)a3 + 24);
      int v58 = *((unsigned char *)a3 + 24) == 0;
      int v59 = (float32x2_t)*(a2 - 5);
      v657 = vcvtq_f64_f32(vsub_f32(v59, v51));
      long long v60 = (int64x2_t)vmulq_f64(v657, v657);
      int v61 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v729, v60), (float64x2_t)vzip2q_s64(v729, v60)));
      BOOL v62 = vaddvq_f64(vmulq_f64(v758, v657)) / fmax(vmulq_laneq_f64(v61, v61, 1).f64[0], 2.22507386e-308);
      if (v62 <= 1.0) {
        int v63 = v62;
      }
      else {
        int v63 = 1.0;
      }
      if (v62 >= -1.0) {
        int v64 = v63;
      }
      else {
        int v64 = -1.0;
      }
      BOOL v65 = acos(v64);
      v66.f64[0] = v659;
      v66.f64[1] = v65;
      long long v67 = vdivq_f64(vmulq_f64(v66, v673), v679);
      BOOL v68 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v667, (int64x2_t)v657), -v758.f64[1]), (float64x2_t)vzip2q_s64((int64x2_t)v667, (int64x2_t)v657), v758.f64[0])), (int8x16_t)v67, (int8x16_t)vsubq_f64(v684, v67));
      int v69 = vdup_n_s32(v58);
      v70.i64[0] = v69.u32[0];
      v70.i64[1] = v69.u32[1];
      long long v71 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v70, 0x3FuLL)), (int8x16_t)vsubq_f64(v684, v68), (int8x16_t)v68);
      unint64_t v72 = vbslq_s8((int8x16_t)vcgtq_f64(v749, v71), (int8x16_t)vaddq_f64(v71, v684), (int8x16_t)v71);
      v750 = *(double *)v72.i64;
      if (vabdd_f64(*(double *)v72.i64, *(double *)&v72.i64[1]) >= 0.100000001)
      {
        BOOL v74 = v656;
        if (*(double *)v72.i64 < *(double *)&v72.i64[1])
        {
          unint64_t v73 = (float32x2_t *)a3[2];
LABEL_163:
          for (uint64_t j = a1 + 6; ; j += 6)
          {
            v183 = (float32x2_t)j[1];
            v685 = vcvtq_f64_f32(vsub_f32(v183, v51));
            v184 = (int64x2_t)vmulq_f64(v685, v685);
            v185 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v729, v184), (float64x2_t)vzip2q_s64(v729, v184)));
            v186 = vaddvq_f64(vmulq_f64(v758, v685)) / fmax(vmulq_laneq_f64(v185, v185, 1).f64[0], 2.22507386e-308);
            v187 = 1.0;
            if (v186 <= 1.0) {
              v187 = v186;
            }
            if (v186 >= -1.0) {
              uint64_t v188 = v187;
            }
            else {
              uint64_t v188 = -1.0;
            }
            v189 = acos(v188) * 180.0 / 3.14159265;
            _V3.D[1] = v685.f64[1];
            _D2 = v758.f64[0];
            __asm { FMLA            D1, D2, V3.D[1] }
            if (_D1 > 0.0) {
              v189 = 360.0 - v189;
            }
            if (!v57) {
              v189 = 360.0 - v189;
            }
            if (v189 < 15.0) {
              v189 = v189 + 360.0;
            }
            if (vabdd_f64(v750, v189) >= 0.100000001)
            {
              if (v750 < v189) {
                goto LABEL_198;
              }
            }
            else
            {
              v193 = vsub_f32(*v73, v74);
              uint64_t v194 = (int32x2_t)vmul_f32(v193, v193);
              v195 = vsub_f32(*v73, v183);
              v196 = (int32x2_t)vmul_f32(v195, v195);
              v197 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v194, v196), (float32x2_t)vzip2_s32(v194, v196)));
              if (vcgt_f32((float32x2_t)vdup_lane_s32(v197, 1), (float32x2_t)v197).u8[0]) {
                goto LABEL_198;
              }
            }
          }
        }
      }
      else
      {
        unint64_t v73 = (float32x2_t *)a3[2];
        BOOL v74 = v656;
        uint64_t v75 = vsub_f32(*v73, v656);
        unint64_t v76 = (int32x2_t)vmul_f32(v75, v75);
        unint64_t v77 = vsub_f32(*v73, v59);
        int v78 = (int32x2_t)vmul_f32(v77, v77);
        int v79 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v76, v78), (float32x2_t)vzip2_s32(v76, v78)));
        if (vcgt_f32((float32x2_t)vdup_lane_s32(v79, 1), (float32x2_t)v79).u8[0]) {
          goto LABEL_163;
        }
      }
      uint64_t j = a1 + 6;
      if (a1 + 6 < a2)
      {
        v198 = (float32x2_t *)a3[2];
        do
        {
          uint64_t v199 = (float32x2_t)j[1];
          v686 = vcvtq_f64_f32(vsub_f32(v199, v51));
          unint64_t v200 = (int64x2_t)vmulq_f64(v686, v686);
          unint64_t v201 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v729, v200), (float64x2_t)vzip2q_s64(v729, v200)));
          v202 = vaddvq_f64(vmulq_f64(v758, v686)) / fmax(vmulq_laneq_f64(v201, v201, 1).f64[0], 2.22507386e-308);
          v203 = 1.0;
          if (v202 <= 1.0) {
            v203 = v202;
          }
          if (v202 >= -1.0) {
            v204 = v203;
          }
          else {
            v204 = -1.0;
          }
          v205 = acos(v204) * 180.0 / 3.14159265;
          _V3.D[1] = v686.f64[1];
          _D2 = v758.f64[0];
          __asm { FMLA            D1, D2, V3.D[1] }
          if (_D1 > 0.0) {
            v205 = 360.0 - v205;
          }
          if (!v57) {
            v205 = 360.0 - v205;
          }
          if (v205 < 15.0) {
            v205 = v205 + 360.0;
          }
          if (vabdd_f64(v750, v205) >= 0.100000001)
          {
            if (v750 < v205) {
              break;
            }
          }
          else
          {
            v209 = vsub_f32(*v198, v74);
            v210 = (int32x2_t)vmul_f32(v209, v209);
            v211 = vsub_f32(*v198, v199);
            uint64_t v212 = (int32x2_t)vmul_f32(v211, v211);
            uint64_t v213 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v210, v212), (float32x2_t)vzip2_s32(v210, v212)));
            if (vcgt_f32((float32x2_t)vdup_lane_s32(v213, 1), (float32x2_t)v213).u8[0]) {
              break;
            }
          }
          j += 6;
        }
        while (j < a2);
      }
LABEL_198:
      int v214 = a2;
      if (j >= a2) {
        goto LABEL_260;
      }
      uint64_t v215 = a4;
      uint64_t v216 = i;
      v217 = (float32x2_t *)a3[2];
      for (uint64_t k = a2 - 11; ; k -= 6)
      {
        v687 = vcvtq_f64_f32(vsub_f32(v59, v51));
        v219 = (int64x2_t)vmulq_f64(v687, v687);
        v220 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v729, v219), (float64x2_t)vzip2q_s64(v729, v219)));
        v221 = vaddvq_f64(vmulq_f64(v758, v687)) / fmax(vmulq_laneq_f64(v220, v220, 1).f64[0], 2.22507386e-308);
        v222 = 1.0;
        if (v221 <= 1.0) {
          v222 = v221;
        }
        if (v221 >= -1.0) {
          uint64_t v223 = v222;
        }
        else {
          uint64_t v223 = -1.0;
        }
        int v224 = acos(v223) * 180.0 / 3.14159265;
        _V3.D[1] = v687.f64[1];
        _D2 = v758.f64[0];
        __asm { FMLA            D1, D2, V3.D[1] }
        if (_D1 > 0.0) {
          int v224 = 360.0 - v224;
        }
        if (!v57) {
          int v224 = 360.0 - v224;
        }
        if (v224 < 15.0) {
          int v224 = v224 + 360.0;
        }
        if (vabdd_f64(v750, v224) >= 0.100000001) {
          break;
        }
        float32x2_t v228 = vsub_f32(*v217, v74);
        float32x2_t v229 = (int32x2_t)vmul_f32(v228, v228);
        float v230 = vsub_f32(*v217, v59);
        float v231 = (int32x2_t)vmul_f32(v230, v230);
        float v232 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v229, v231), (float32x2_t)vzip2_s32(v229, v231)));
        if ((vcgt_f32((float32x2_t)vdup_lane_s32(v232, 1), (float32x2_t)v232).u8[0] & 1) == 0) {
          goto LABEL_216;
        }
LABEL_215:
        BOOL v233 = (float32x2_t)*k;
        int v59 = v233;
      }
      if (v750 < v224) {
        goto LABEL_215;
      }
LABEL_216:
      int v214 = k + 5;
      unint64_t i = v216;
      a4 = v215;
LABEL_260:
      while (j < v214)
      {
        sub_25B5EA2CC(j, v214);
        BOOL v234 = (float32x2_t *)a3[1];
        int v235 = *v234;
        uint64_t v236 = v781;
        v734 = vcvtq_f64_f32(vsub_f32(v781, *v234));
        v761 = **a3;
        int v237 = (int64x2_t)vmulq_f64(v734, v734);
        v756 = (int64x2_t)vmulq_f64(v761, v761);
        float32x4_t v238 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v756, v237), (float64x2_t)vzip2q_s64(v756, v237)));
        float32x4_t v239 = vaddvq_f64(vmulq_f64(v761, v734)) / fmax(vmulq_laneq_f64(v238, v238, 1).f64[0], 2.22507386e-308);
        float32x4_t v240 = 1.0;
        if (v239 <= 1.0) {
          float32x4_t v240 = v239;
        }
        if (v239 >= -1.0) {
          unint64_t v241 = v240;
        }
        else {
          unint64_t v241 = -1.0;
        }
        unint64_t v242 = acos(v241) * 180.0 / 3.14159265;
        if (vmlad_n_f64(-v761.f64[1] * v734.f64[0], v734.f64[1], v761.f64[0]) > 0.0) {
          unint64_t v242 = 360.0 - v242;
        }
        uint64_t v243 = *((unsigned __int8 *)a3 + 24);
        if (!*((unsigned char *)a3 + 24)) {
          unint64_t v242 = 360.0 - v242;
        }
        if (v242 >= 15.0) {
          v244 = v242;
        }
        else {
          v244 = v242 + 360.0;
        }
        unint64_t v245 = (float32x2_t *)a3[2];
        do
        {
          while (1)
          {
            j += 6;
            v246 = (float32x2_t)j[1];
            v735 = vcvtq_f64_f32(vsub_f32(v246, v235));
            v247 = (int64x2_t)vmulq_f64(v735, v735);
            v248 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v756, v247), (float64x2_t)vzip2q_s64(v756, v247)));
            v249 = vaddvq_f64(vmulq_f64(v761, v735)) / fmax(vmulq_laneq_f64(v248, v248, 1).f64[0], 2.22507386e-308);
            int v250 = 1.0;
            if (v249 <= 1.0) {
              int v250 = v249;
            }
            if (v249 >= -1.0) {
              uint64_t v251 = v250;
            }
            else {
              uint64_t v251 = -1.0;
            }
            int v252 = acos(v251) * 180.0 / 3.14159265;
            _V3.D[1] = v735.f64[1];
            _D2 = v761.f64[0];
            __asm { FMLA            D1, D2, V3.D[1] }
            if (_D1 > 0.0) {
              int v252 = 360.0 - v252;
            }
            if (!v243) {
              int v252 = 360.0 - v252;
            }
            if (v252 < 15.0) {
              int v252 = v252 + 360.0;
            }
            if (vabdd_f64(v244, v252) >= 0.100000001) {
              break;
            }
            v256 = vsub_f32(*v245, v236);
            v257 = (int32x2_t)vmul_f32(v256, v256);
            v258 = vsub_f32(*v245, v246);
            uint64_t v259 = (int32x2_t)vmul_f32(v258, v258);
            v260 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v257, v259), (float32x2_t)vzip2_s32(v257, v259)));
            if (vcgt_f32((float32x2_t)vdup_lane_s32(v260, 1), (float32x2_t)v260).u8[0]) {
              goto LABEL_247;
            }
          }
        }
        while (v244 >= v252);
        do
        {
          while (1)
          {
LABEL_247:
            v214 -= 6;
            int32x2_t v261 = (float32x2_t)v214[1];
            v736 = vcvtq_f64_f32(vsub_f32(v261, v235));
            float32x2_t v262 = (int64x2_t)vmulq_f64(v736, v736);
            float32x2_t v263 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v756, v262), (float64x2_t)vzip2q_s64(v756, v262)));
            float32x2_t v264 = vaddvq_f64(vmulq_f64(v761, v736)) / fmax(vmulq_laneq_f64(v263, v263, 1).f64[0], 2.22507386e-308);
            float32x2_t v265 = 1.0;
            if (v264 <= 1.0) {
              float32x2_t v265 = v264;
            }
            if (v264 >= -1.0) {
              int32x2_t v266 = v265;
            }
            else {
              int32x2_t v266 = -1.0;
            }
            float32x2_t v267 = acos(v266) * 180.0 / 3.14159265;
            _V3.D[1] = v736.f64[1];
            _D2 = v761.f64[0];
            __asm { FMLA            D1, D2, V3.D[1] }
            if (_D1 > 0.0) {
              float32x2_t v267 = 360.0 - v267;
            }
            if (!v243) {
              float32x2_t v267 = 360.0 - v267;
            }
            if (v267 < 15.0) {
              float32x2_t v267 = v267 + 360.0;
            }
            if (vabdd_f64(v244, v267) < 0.100000001) {
              break;
            }
            if (v244 >= v267) {
              goto LABEL_260;
            }
          }
          unint64_t v271 = vsub_f32(*v245, v236);
          unint64_t v272 = (int32x2_t)vmul_f32(v271, v271);
          v273 = vsub_f32(*v245, v261);
          v274 = (int32x2_t)vmul_f32(v273, v273);
          v275 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v272, v274), (float32x2_t)vzip2_s32(v272, v274)));
        }
        while ((vcgt_f32((float32x2_t)vdup_lane_s32(v275, 1), (float32x2_t)v275).u8[0] & 1) != 0);
      }
      if (j - 6 != a1)
      {
        *a1 = *(j - 6);
        sub_25B576A98((uint64_t)&v774, v49, (uint64_t)(j - 5));
        sub_25B400248(v776);
      }
      *(j - 6) = v780;
      sub_25B576A98((uint64_t)&v774, (uint64_t)(j - 5), (uint64_t)&v781);
      sub_25B400248(v776);
      sub_25B400248(v783);
      a5 = 0;
    }
  }
  if ((a5 & 1) == 0)
  {
    if (v9 == a2) {
      return;
    }
    v595 = v9 + 6;
    if (v9 + 6 == a2) {
      return;
    }
    v677 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
    v683 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
    v671 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    while (1)
    {
      v596 = a1;
      v597 = v595;
      v598 = *(float32x2_t *)&a3[1]->f64[0];
      v599 = (float32x2_t)a1[7];
      v747 = vcvtq_f64_f32(vsub_f32(v599, v598));
      v772 = **a3;
      v711 = (int64x2_t)vmulq_f64(v772, v772);
      v600 = (int64x2_t)vmulq_f64(v747, v747);
      v601 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v711, v600), (float64x2_t)vzip2q_s64(v711, v600)));
      v602 = vaddvq_f64(vmulq_f64(v772, v747)) / fmax(vmulq_laneq_f64(v601, v601, 1).f64[0], 2.22507386e-308);
      if (v602 <= 1.0) {
        v603 = v602;
      }
      else {
        v603 = 1.0;
      }
      if (v602 >= -1.0) {
        v604 = v603;
      }
      else {
        v604 = -1.0;
      }
      v724 = acos(v604);
      v605 = *((unsigned char *)a3 + 24) == 0;
      v606 = (float32x2_t)a1[1];
      v698 = vcvtq_f64_f32(vsub_f32(v606, v598));
      v607 = (int64x2_t)vmulq_f64(v698, v698);
      v608 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v711, v607), (float64x2_t)vzip2q_s64(v711, v607)));
      v609 = vaddvq_f64(vmulq_f64(v772, v698)) / fmax(vmulq_laneq_f64(v608, v608, 1).f64[0], 2.22507386e-308);
      if (v609 <= 1.0) {
        v610 = v609;
      }
      else {
        v610 = 1.0;
      }
      if (v609 >= -1.0) {
        v611 = v610;
      }
      else {
        v611 = -1.0;
      }
      v612 = acos(v611);
      v613.f64[0] = v724;
      v613.f64[1] = v612;
      v614 = vdivq_f64(vmulq_f64(v613, v683), v677);
      v615 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v747, (int64x2_t)v698), -v772.f64[1]), (float64x2_t)vzip2q_s64((int64x2_t)v747, (int64x2_t)v698), v772.f64[0])), (int8x16_t)v614, (int8x16_t)vsubq_f64(v671, v614));
      v616 = vdup_n_s32(v605);
      v617.i64[0] = v616.u32[0];
      v617.i64[1] = v616.u32[1];
      v618 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v617, 0x3FuLL)), (int8x16_t)vsubq_f64(v671, v615), (int8x16_t)v615);
      v619 = vbslq_s8((int8x16_t)vcgtq_f64(v749, v618), (int8x16_t)vaddq_f64(v618, v671), (int8x16_t)v618);
      if (vabdd_f64(*(double *)v619.i64, *(double *)&v619.i64[1]) >= 0.100000001)
      {
        if (*(double *)v619.i64 >= *(double *)&v619.i64[1]) {
          goto LABEL_510;
        }
      }
      else
      {
        v620 = *(float32x2_t *)&a3[2]->f64[0];
        v621 = vsub_f32(v620, v599);
        v622 = (int32x2_t)vmul_f32(v621, v621);
        v623 = vsub_f32(v620, v606);
        v624 = (int32x2_t)vmul_f32(v623, v623);
        v625 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v622, v624), (float32x2_t)vzip2_s32(v622, v624)));
        if ((vcgt_f32((float32x2_t)vdup_lane_s32(v625, 1), (float32x2_t)v625).u32[0] & 1) == 0) {
          goto LABEL_510;
        }
      }
      v780 = *v597;
      sub_25B4C9CE4((uint64_t)&v781, (uint64_t)(a1 + 7));
      do
      {
        while (1)
        {
          v626 = v596;
          v596[6] = *v596;
          sub_25B576A98((uint64_t)&v774, (uint64_t)(v596 + 7), (uint64_t)(v596 + 1));
          sub_25B400248(v776);
          v627 = (float32x2_t *)a3[1];
          v628 = *v627;
          v596 -= 6;
          v629 = v781;
          v748 = vcvtq_f64_f32(vsub_f32(v781, *v627));
          v773 = **a3;
          v712 = (int64x2_t)vmulq_f64(v773, v773);
          v630 = (int64x2_t)vmulq_f64(v748, v748);
          v631 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v712, v630), (float64x2_t)vzip2q_s64(v712, v630)));
          v632 = vaddvq_f64(vmulq_f64(v773, v748)) / fmax(vmulq_laneq_f64(v631, v631, 1).f64[0], 2.22507386e-308);
          v633 = v632 <= 1.0 ? v632 : 1.0;
          v634 = v632 >= -1.0 ? v633 : -1.0;
          v725 = acos(v634);
          v635 = *((unsigned char *)a3 + 24) == 0;
          v636 = (float32x2_t)*(v626 - 5);
          v699 = vcvtq_f64_f32(vsub_f32(v636, v628));
          v637 = (int64x2_t)vmulq_f64(v699, v699);
          v638 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v712, v637), (float64x2_t)vzip2q_s64(v712, v637)));
          v639 = vaddvq_f64(vmulq_f64(v773, v699)) / fmax(vmulq_laneq_f64(v638, v638, 1).f64[0], 2.22507386e-308);
          v640 = v639 <= 1.0 ? v639 : 1.0;
          v641 = v639 >= -1.0 ? v640 : -1.0;
          v642 = acos(v641);
          v643.f64[0] = v725;
          v643.f64[1] = v642;
          v644 = vdivq_f64(vmulq_f64(v643, v683), v677);
          v645 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v748, (int64x2_t)v699), -v773.f64[1]), (float64x2_t)vzip2q_s64((int64x2_t)v748, (int64x2_t)v699), v773.f64[0])), (int8x16_t)v644, (int8x16_t)vsubq_f64(v671, v644));
          v646 = vdup_n_s32(v635);
          v647.i64[0] = v646.u32[0];
          v647.i64[1] = v646.u32[1];
          v648 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v647, 0x3FuLL)), (int8x16_t)vsubq_f64(v671, v645), (int8x16_t)v645);
          v649 = vbslq_s8((int8x16_t)vcgtq_f64(v749, v648), (int8x16_t)vaddq_f64(v648, v671), (int8x16_t)v648);
          if (vabdd_f64(*(double *)v649.i64, *(double *)&v649.i64[1]) >= 0.100000001) {
            break;
          }
          v650 = *(float32x2_t *)&a3[2]->f64[0];
          v651 = vsub_f32(v650, v629);
          v652 = (int32x2_t)vmul_f32(v651, v651);
          v653 = vsub_f32(v650, v636);
          v654 = (int32x2_t)vmul_f32(v653, v653);
          v655 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v652, v654), (float32x2_t)vzip2_s32(v652, v654)));
          if ((vcgt_f32((float32x2_t)vdup_lane_s32(v655, 1), (float32x2_t)v655).u8[0] & 1) == 0) {
            goto LABEL_509;
          }
        }
      }
      while (*(double *)v649.i64 < *(double *)&v649.i64[1]);
LABEL_509:
      *v626 = v780;
      sub_25B576A98((uint64_t)&v774, (uint64_t)(v626 + 1), (uint64_t)&v781);
      sub_25B400248(v776);
      sub_25B400248(v783);
LABEL_510:
      a1 = v597;
      v595 = v597 + 6;
      if (v597 + 6 == a2) {
        return;
      }
    }
  }
  if (v9 == a2) {
    return;
  }
  unint64_t v305 = v9 + 6;
  if (v9 + 6 == a2) {
    return;
  }
  unint64_t v306 = 0;
  v674 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  v680 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
  v668 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  unint64_t v307 = v9;
  while (2)
  {
    uint64_t v308 = *(float32x2_t *)&a3[1]->f64[0];
    long long v309 = (float32x2_t *)v307;
    unint64_t v307 = v305;
    unint64_t v311 = v309[7];
    v310 = (uint64_t)&v309[7];
    v312 = v311;
    v738 = vcvtq_f64_f32(vsub_f32(v311, v308));
    v763 = **a3;
    v702 = (int64x2_t)vmulq_f64(v763, v763);
    long long v313 = (int64x2_t)vmulq_f64(v738, v738);
    unint64_t v314 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v702, v313), (float64x2_t)vzip2q_s64(v702, v313)));
    v315 = vaddvq_f64(vmulq_f64(v763, v738)) / fmax(vmulq_laneq_f64(v314, v314, 1).f64[0], 2.22507386e-308);
    if (v315 <= 1.0) {
      v316 = v315;
    }
    else {
      v316 = 1.0;
    }
    if (v315 >= -1.0) {
      BOOL v317 = v316;
    }
    else {
      BOOL v317 = -1.0;
    }
    v715 = acos(v317);
    int v318 = *((unsigned char *)a3 + 24) == 0;
    uint64_t v319 = *(float32x2_t *)(v310 - 48);
    v689 = vcvtq_f64_f32(vsub_f32(v319, v308));
    uint64_t v320 = (int64x2_t)vmulq_f64(v689, v689);
    v321 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v702, v320), (float64x2_t)vzip2q_s64(v702, v320)));
    BOOL v322 = vaddvq_f64(vmulq_f64(v763, v689)) / fmax(vmulq_laneq_f64(v321, v321, 1).f64[0], 2.22507386e-308);
    if (v322 <= 1.0) {
      v323 = v322;
    }
    else {
      v323 = 1.0;
    }
    if (v322 >= -1.0) {
      float32x2_t v324 = v323;
    }
    else {
      float32x2_t v324 = -1.0;
    }
    v325 = acos(v324);
    v326.f64[0] = v715;
    v326.f64[1] = v325;
    v327 = vdivq_f64(vmulq_f64(v326, v680), v674);
    int v328 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v738, (int64x2_t)v689), -v763.f64[1]), (float64x2_t)vzip2q_s64((int64x2_t)v738, (int64x2_t)v689), v763.f64[0])), (int8x16_t)v327, (int8x16_t)vsubq_f64(v668, v327));
    v329 = vdup_n_s32(v318);
    v330.i64[0] = v329.u32[0];
    v330.i64[1] = v329.u32[1];
    v331 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v330, 0x3FuLL)), (int8x16_t)vsubq_f64(v668, v328), (int8x16_t)v328);
    v332 = vbslq_s8((int8x16_t)vcgtq_f64(v749, v331), (int8x16_t)vaddq_f64(v331, v668), (int8x16_t)v331);
    if (vabdd_f64(*(double *)v332.i64, *(double *)&v332.i64[1]) >= 0.100000001)
    {
      if (*(double *)v332.i64 >= *(double *)&v332.i64[1]) {
        goto LABEL_327;
      }
    }
    else
    {
      v333 = *(float32x2_t *)&a3[2]->f64[0];
      v334 = vsub_f32(v333, v312);
      v335 = (int32x2_t)vmul_f32(v334, v334);
      v336 = vsub_f32(v333, v319);
      BOOL v337 = (int32x2_t)vmul_f32(v336, v336);
      v338 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v335, v337), (float32x2_t)vzip2_s32(v335, v337)));
      if ((vcgt_f32((float32x2_t)vdup_lane_s32(v338, 1), (float32x2_t)v338).u32[0] & 1) == 0) {
        goto LABEL_327;
      }
    }
    v780 = *v307;
    sub_25B4C9CE4((uint64_t)&v781, v310);
    v339 = v306;
    while (2)
    {
      *(uint64_t *)((char *)v9 + v339 + 48) = *(uint64_t *)((char *)v9 + v339);
      sub_25B576A98((uint64_t)&v774, (uint64_t)v9 + v339 + 56, (uint64_t)v9 + v339 + 8);
      sub_25B400248(v776);
      if (!v339)
      {
        v369 = (uint64_t)(v9 + 1);
        v370 = v9;
        goto LABEL_326;
      }
      unint64_t v340 = (float32x2_t *)a3[1];
      unint64_t v341 = *v340;
      float32x4_t v342 = v781;
      v739 = vcvtq_f64_f32(vsub_f32(v781, *v340));
      v764 = **a3;
      v703 = (int64x2_t)vmulq_f64(v764, v764);
      unint64_t v343 = (int64x2_t)vmulq_f64(v739, v739);
      uint64_t v344 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v703, v343), (float64x2_t)vzip2q_s64(v703, v343)));
      simd_float4 v345 = vaddvq_f64(vmulq_f64(v764, v739)) / fmax(vmulq_laneq_f64(v344, v344, 1).f64[0], 2.22507386e-308);
      if (v345 <= 1.0) {
        long long v346 = v345;
      }
      else {
        long long v346 = 1.0;
      }
      if (v345 >= -1.0) {
        v347 = v346;
      }
      else {
        v347 = -1.0;
      }
      v716 = acos(v347);
      v348 = *((unsigned char *)a3 + 24) == 0;
      v349 = *(float32x2_t *)((char *)v9 + v339 - 40);
      v690 = vcvtq_f64_f32(vsub_f32(v349, v341));
      v350 = (int64x2_t)vmulq_f64(v690, v690);
      __int32 v351 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v703, v350), (float64x2_t)vzip2q_s64(v703, v350)));
      unsigned __int32 v352 = vaddvq_f64(vmulq_f64(v764, v690)) / fmax(vmulq_laneq_f64(v351, v351, 1).f64[0], 2.22507386e-308);
      if (v352 <= 1.0) {
        __int32 v353 = v352;
      }
      else {
        __int32 v353 = 1.0;
      }
      if (v352 >= -1.0) {
        __int32 v354 = v353;
      }
      else {
        __int32 v354 = -1.0;
      }
      v355 = acos(v354);
      v356.f64[0] = v716;
      v356.f64[1] = v355;
      v357 = vdivq_f64(vmulq_f64(v356, v680), v674);
      long long v358 = (float64x2_t)vbslq_s8((int8x16_t)vclezq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v739, (int64x2_t)v690), -v764.f64[1]), (float64x2_t)vzip2q_s64((int64x2_t)v739, (int64x2_t)v690), v764.f64[0])), (int8x16_t)v357, (int8x16_t)vsubq_f64(v668, v357));
      long long v359 = vdup_n_s32(v348);
      v360.i64[0] = v359.u32[0];
      v360.i64[1] = v359.u32[1];
      long long v361 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v360, 0x3FuLL)), (int8x16_t)vsubq_f64(v668, v358), (int8x16_t)v358);
      v362 = vbslq_s8((int8x16_t)vcgtq_f64(v749, v361), (int8x16_t)vaddq_f64(v361, v668), (int8x16_t)v361);
      if (vabdd_f64(*(double *)v362.i64, *(double *)&v362.i64[1]) < 0.100000001)
      {
        long long v363 = *(float32x2_t *)&a3[2]->f64[0];
        uint64_t v364 = vsub_f32(v363, v342);
        simd_float4x4 v365 = (int32x2_t)vmul_f32(v364, v364);
        v366 = vsub_f32(v363, v349);
        v367 = (int32x2_t)vmul_f32(v366, v366);
        v368 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v365, v367), (float32x2_t)vzip2_s32(v365, v367)));
        if ((vcgt_f32((float32x2_t)vdup_lane_s32(v368, 1), (float32x2_t)v368).u8[0] & 1) == 0) {
          break;
        }
        goto LABEL_323;
      }
      if (*(double *)v362.i64 < *(double *)&v362.i64[1])
      {
LABEL_323:
        v339 -= 48;
        continue;
      }
      break;
    }
    v370 = (uint64_t *)((char *)v9 + v339);
    v369 = (uint64_t)v9 + v339 + 8;
LABEL_326:
    *v370 = v780;
    sub_25B576A98((uint64_t)&v774, v369, (uint64_t)&v781);
    sub_25B400248(v776);
    sub_25B400248(v783);
LABEL_327:
    unint64_t v305 = v307 + 6;
    v306 += 48;
    if (v307 + 6 != a2) {
      continue;
    }
    break;
  }
}

  std::string::size_type v9 = a2;
  size_t v10 = a2 - 5;
  unint64_t v11 = a1;
  while (1)
  {
    a1 = v11;
    uint64_t v12 = (char *)v9 - (char *)v11;
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (v9 - v11);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return;
        case 2:
          int v63 = a2[-5];
          BOOL v159 = a2 - 5;
          LODWORD(v64) = HIDWORD(*(unint64_t *)a1);
          BOOL v65 = v63.f32[1] < v64;
          int v66 = vcgt_f32(*a1, v63).u8[0];
          if (v63.f32[1] == v64) {
            BOOL v65 = v66;
          }
          if (!v65) {
            return;
          }
          long long v67 = (uint64_t)a1;
          BOOL v68 = (uint64_t)v159;
          break;
        case 3:
          sub_25B5ED258(a1, a1 + 5, v10);
          return;
        case 4:
          sub_25B5ED370(a1, a1 + 5, a1 + 10, v10);
          return;
        case 5:
          int v69 = a1 + 5;
          int v70 = a1 + 10;
          long long v71 = a1 + 15;
          sub_25B5ED370(a1, a1 + 5, a1 + 10, a1 + 15);
          unint64_t v72 = a2[-5];
          int v160 = (uint64_t)&a2[-5];
          LODWORD(v73) = HIDWORD(*(void *)&a1[15]);
          BOOL v74 = v72.f32[1] < v73;
          uint64_t v75 = vcgt_f32(a1[15], v72).u8[0];
          if (v72.f32[1] == v73) {
            BOOL v74 = v75;
          }
          if (!v74) {
            return;
          }
          sub_25B5ED1D4((uint64_t)&a1[15], v160);
          LODWORD(v76) = HIDWORD(*(unint64_t *)v71);
          LODWORD(v77) = HIDWORD(*(unint64_t *)v70);
          int v78 = v76 < v77;
          int v79 = vcgt_f32(*v70, *v71).u8[0];
          if (v76 == v77) {
            int v78 = v79;
          }
          if (!v78) {
            return;
          }
          sub_25B5ED1D4((uint64_t)&a1[10], (uint64_t)&a1[15]);
          LODWORD(v80) = HIDWORD(*(unint64_t *)v70);
          LODWORD(v81) = HIDWORD(*(unint64_t *)v69);
          int v82 = v80 < v81;
          int v83 = vcgt_f32(*v69, *v70).u8[0];
          if (v80 == v81) {
            int v82 = v83;
          }
          if (!v82) {
            return;
          }
          sub_25B5ED1D4((uint64_t)&a1[5], (uint64_t)&a1[10]);
          LODWORD(v84) = HIDWORD(*(void *)&a1[5]);
          LODWORD(v85) = HIDWORD(*(unint64_t *)a1);
          uint64_t v86 = v84 < v85;
          uint64_t v87 = vcgt_f32(*a1, a1[5]).u8[0];
          if (v84 == v85) {
            uint64_t v86 = v87;
          }
          if (!v86) {
            return;
          }
          long long v67 = (uint64_t)a1;
          BOOL v68 = (uint64_t)&a1[5];
          break;
        default:
          JUMPOUT(0);
      }
      sub_25B5ED1D4(v67, v68);
      return;
    }
    if (v12 <= 959) {
      break;
    }
    if (!a3)
    {
      if (a1 == v9) {
        return;
      }
      unint64_t v100 = (unint64_t)(v13 - 2) >> 1;
      int v101 = v100;
      do
      {
        int v102 = v101;
        if (v100 >= v101)
        {
          int v103 = (2 * v101) | 1;
          BOOL v104 = &a1[5 * v103];
          if (2 * v101 + 2 < v13)
          {
            LODWORD(v105) = HIDWORD(*(unint64_t *)v104);
            int v106 = v104[5];
            uint64_t v107 = v105 < v106.f32[1];
            uint64_t v108 = vcgt_f32(v106, *v104).u8[0];
            if (v105 == v106.f32[1]) {
              uint64_t v107 = v108;
            }
            unint64_t v109 = !v107;
            if (v107) {
              uint64_t v110 = -1;
            }
            else {
              uint64_t v110 = 0;
            }
            uint64_t v111 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v110), (int8x8_t)v106, (int8x8_t)*v104);
            if (!v109)
            {
              v104 += 5;
              int v103 = 2 * v101 + 2;
            }
          }
          else
          {
            uint64_t v111 = *v104;
          }
          int v112 = &a1[5 * v101];
          LODWORD(v113) = HIDWORD(*(unint64_t *)v112);
          int v114 = v111.f32[1] < v113;
          int v115 = vcgt_f32(*v112, v111).u8[0];
          if (v111.f32[1] == v113) {
            int v114 = v115;
          }
          if (!v114)
          {
            sub_25B4C9CE4((uint64_t)&v171, (uint64_t)&a1[5 * v102]);
            do
            {
              BOOL v116 = (uint64_t)v104;
              sub_25B576A98((uint64_t)v169, (uint64_t)v112, (uint64_t)v104);
              sub_25B400248(v170);
              if (v100 < v103) {
                break;
              }
              BOOL v104 = &a1[5 * ((2 * v103) | 1)];
              if (2 * v103 + 2 < v13)
              {
                LODWORD(v117) = HIDWORD(*(unint64_t *)v104);
                long long v118 = v104[5];
                int64_t v119 = v117 < v118.f32[1];
                uint64_t v120 = vcgt_f32(v118, *v104).u8[0];
                if (v117 == v118.f32[1]) {
                  int64_t v119 = v120;
                }
                unint64_t v121 = !v119;
                unint64_t v122 = v119 ? -1 : 0;
                uint64_t v123 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v122), (int8x8_t)v118, (int8x8_t)*v104);
                if (v121)
                {
                  int v103 = (2 * v103) | 1;
                }
                else
                {
                  v104 += 5;
                  int v103 = 2 * v103 + 2;
                }
              }
              else
              {
                uint64_t v123 = *v104;
                int v103 = (2 * v103) | 1;
              }
              uint64_t v124 = v123.f32[1] < v171.f32[1];
              int64_t v125 = vcgt_f32(v171, v123).u8[0];
              if (v123.f32[1] == v171.f32[1]) {
                uint64_t v124 = v125;
              }
              int v112 = (float32x2_t *)v116;
            }
            while (!v124);
            sub_25B576A98((uint64_t)v167, v116, (uint64_t)&v171);
            sub_25B400248(v168);
            sub_25B400248(v172);
          }
        }
        int v101 = v102 - 1;
      }
      while (v102);
      int v126 = v12 / 0x28uLL;
      while (2)
      {
        sub_25B4C9CE4((uint64_t)v165, (uint64_t)a1);
        BOOL v127 = 0;
        int v128 = (uint64_t)a1;
        do
        {
          int v129 = (float32x2_t *)(v128 + 40 * v127 + 40);
          long long v130 = 2 * v127;
          BOOL v127 = (2 * v127) | 1;
          if (v130 + 2 < v126)
          {
            LODWORD(v131) = HIDWORD(*(unint64_t *)v129);
            LODWORD(v132) = HIDWORD(*(void *)&v129[5]);
            unint64_t v133 = v131 < v132;
            unint64_t v134 = vcgt_f32(v129[5], *v129).u8[0];
            if (v131 == v132) {
              unint64_t v133 = v134;
            }
            if (v133)
            {
              v129 += 5;
              BOOL v127 = v130 + 2;
            }
          }
          sub_25B576A98((uint64_t)&v171, v128, (uint64_t)v129);
          sub_25B400248(v172);
          int v128 = (uint64_t)v129;
        }
        while (v127 <= (uint64_t)((unint64_t)(v126 - 2) >> 1));
        unint64_t v135 = (uint64_t)&a2[-5];
        BOOL v5 = v129 == &a2[-5];
        a2 -= 5;
        if (v5)
        {
          sub_25B576A98((uint64_t)&v171, (uint64_t)v129, (uint64_t)v165);
          goto LABEL_169;
        }
        sub_25B576A98((uint64_t)v163, (uint64_t)v129, v135);
        sub_25B400248(v164);
        sub_25B576A98((uint64_t)v161, (uint64_t)a2, (uint64_t)v165);
        sub_25B400248(v162);
        int v136 = (char *)v129 - (char *)a1 + 40;
        if (v136 >= 41)
        {
          int v137 = (v136 / 0x28uLL - 2) >> 1;
          int v138 = &a1[5 * v137];
          LODWORD(v139) = HIDWORD(*(unint64_t *)v138);
          LODWORD(v140) = HIDWORD(*(unint64_t *)v129);
          int v141 = v139 < v140;
          uint64_t v142 = vcgt_f32(*v129, *v138).u8[0];
          if (v139 == v140) {
            int v141 = v142;
          }
          if (v141)
          {
            sub_25B4C9CE4((uint64_t)&v171, (uint64_t)v129);
            do
            {
              uint64_t v143 = (uint64_t)v138;
              sub_25B576A98((uint64_t)v169, (uint64_t)v129, (uint64_t)v138);
              sub_25B400248(v170);
              if (!v137) {
                break;
              }
              int v137 = (v137 - 1) >> 1;
              int v138 = &a1[5 * v137];
              LODWORD(v144) = HIDWORD(*(unint64_t *)v138);
              unint64_t v145 = v144 < v171.f32[1];
              BOOL v146 = vcgt_f32(v171, *v138).u8[0];
              if (v144 == v171.f32[1]) {
                unint64_t v145 = v146;
              }
              int v129 = (float32x2_t *)v143;
            }
            while (v145);
            sub_25B576A98((uint64_t)v167, v143, (uint64_t)&v171);
            sub_25B400248(v168);
LABEL_169:
            sub_25B400248(v172);
          }
        }
        sub_25B400248(v166);
        if (v126-- <= 2) {
          return;
        }
        continue;
      }
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    unint64_t v15 = &a1[5 * ((unint64_t)v13 >> 1)];
    if ((unint64_t)v12 < 0x1401)
    {
      sub_25B5ED258(v15, a1, v10);
    }
    else
    {
      sub_25B5ED258(a1, v15, v10);
      uint64_t v16 = 5 * v14;
      sub_25B5ED258(a1 + 5, &a1[v16 - 5], a2 - 10);
      sub_25B5ED258(a1 + 10, &a1[v16 + 5], a2 - 15);
      sub_25B5ED258(&a1[v16 - 5], v15, &a1[v16 + 5]);
      sub_25B4C9CE4((uint64_t)&v171, (uint64_t)a1);
      sub_25B576A98((uint64_t)v169, (uint64_t)a1, (uint64_t)v15);
      sub_25B400248(v170);
      sub_25B576A98((uint64_t)v167, (uint64_t)v15, (uint64_t)&v171);
      sub_25B400248(v168);
      sub_25B400248(v172);
    }
    --a3;
    if (a4) {
      goto LABEL_13;
    }
    LODWORD(v17) = HIDWORD(*(void *)&a1[-5]);
    LODWORD(v18) = HIDWORD(*(unint64_t *)a1);
    uint64_t v19 = v17 < v18;
    int v20 = vcgt_f32(*a1, a1[-5]).u8[0];
    if (v17 == v18) {
      uint64_t v19 = v20;
    }
    if (v19)
    {
LABEL_13:
      sub_25B4C9CE4((uint64_t)&v171, (uint64_t)a1);
      int v21 = a1;
      do
      {
        int v22 = v21;
        int v23 = v21[5];
        v21 += 5;
        int v24 = v23.f32[1] < v171.f32[1];
        int v25 = vcgt_f32(v171, v23).u8[0];
        if (v23.f32[1] == v171.f32[1]) {
          int v24 = v25;
        }
      }
      while (v24);
      if (v22 == a1)
      {
        std::string::size_type v9 = a2;
        if (v21 < a2)
        {
          BOOL v29 = a2 - 5;
          int v30 = a2 - 5;
          do
          {
            int v31 = *v30;
            v30 -= 5;
            BOOL v32 = v31.f32[1] >= v171.f32[1];
            int v33 = vmvn_s8((int8x8_t)vcgt_f32(v171, v31)).u8[0];
            if (v31.f32[1] == v171.f32[1]) {
              BOOL v32 = v33;
            }
            if (!v32) {
              break;
            }
            BOOL v4 = v21 >= v29;
            BOOL v29 = v30;
          }
          while (!v4);
          std::string::size_type v9 = v30 + 5;
        }
      }
      else
      {
        do
        {
          int v26 = v9[-5];
          v9 -= 5;
          uint64_t v27 = v26.f32[1] < v171.f32[1];
          uint64_t v28 = vcgt_f32(v171, v26).u8[0];
          if (v26.f32[1] == v171.f32[1]) {
            uint64_t v27 = v28;
          }
        }
        while (!v27);
      }
      if (v21 < v9)
      {
        int v34 = (unint64_t)v9;
        uint64_t v35 = (unint64_t)v21;
        do
        {
          sub_25B5ED1D4(v35, v34);
          do
          {
            int v22 = (float32x2_t *)v35;
            int v36 = *(float32x2_t *)(v35 + 40);
            v35 += 40;
            long long v37 = v36.f32[1] < v171.f32[1];
            int v38 = vcgt_f32(v171, v36).u8[0];
            if (v36.f32[1] == v171.f32[1]) {
              long long v37 = v38;
            }
          }
          while (v37);
          do
          {
            BOOL v39 = *(float32x2_t *)(v34 - 40);
            v34 -= 40;
            int v40 = v39.f32[1] < v171.f32[1];
            int v41 = vcgt_f32(v171, v39).u8[0];
            if (v39.f32[1] == v171.f32[1]) {
              int v40 = v41;
            }
          }
          while (!v40);
        }
        while (v35 < v34);
      }
      if (v22 != a1)
      {
        sub_25B576A98((uint64_t)v169, (uint64_t)a1, (uint64_t)v22);
        sub_25B400248(v170);
      }
      sub_25B576A98((uint64_t)v167, (uint64_t)v22, (uint64_t)&v171);
      sub_25B400248(v168);
      sub_25B400248(v172);
      BOOL v4 = v21 >= v9;
      std::string::size_type v9 = a2;
      if (!v4) {
        goto LABEL_46;
      }
      BOOL v42 = sub_25B5ED460(a1, v22);
      unint64_t v11 = v22 + 5;
      if (sub_25B5ED460(v22 + 5, a2))
      {
        a2 = v22;
        if (v42) {
          return;
        }
        goto LABEL_1;
      }
      if ((v42 & 1) == 0)
      {
LABEL_46:
        sub_25B5EC5F4(a1, v22, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = v22 + 5;
      }
    }
    else
    {
      sub_25B4C9CE4((uint64_t)&v171, (uint64_t)a1);
      LODWORD(v43) = HIDWORD(*(unint64_t *)v10);
      long long v44 = v171.f32[1] < v43;
      BOOL v45 = vcgt_f32(*v10, v171).u8[0];
      if (v171.f32[1] == v43) {
        long long v44 = v45;
      }
      if (v44)
      {
        unint64_t v11 = a1;
        do
        {
          int v46 = v11[5];
          v11 += 5;
          int v47 = v171.f32[1] < v46.f32[1];
          BOOL v48 = vcgt_f32(v46, v171).u8[0];
          if (v171.f32[1] == v46.f32[1]) {
            int v47 = v48;
          }
        }
        while (!v47);
      }
      else
      {
        int v49 = a1 + 5;
        do
        {
          unint64_t v11 = v49;
          if (v49 >= v9) {
            break;
          }
          v49 += 5;
          LODWORD(v50) = HIDWORD(*(unint64_t *)v11);
          int v51 = v171.f32[1] < v50;
          BOOL v52 = vcgt_f32(*v11, v171).u8[0];
          if (v171.f32[1] == v50) {
            int v51 = v52;
          }
        }
        while (!v51);
      }
      int v53 = (unint64_t)v9;
      if (v11 < v9)
      {
        int v53 = (unint64_t)v9;
        do
        {
          int v54 = *(float32x2_t *)(v53 - 40);
          v53 -= 40;
          uint64_t v55 = v171.f32[1] < v54.f32[1];
          unsigned __int32 v56 = vcgt_f32(v54, v171).u8[0];
          if (v171.f32[1] == v54.f32[1]) {
            uint64_t v55 = v56;
          }
        }
        while (v55);
      }
      while ((unint64_t)v11 < v53)
      {
        sub_25B5ED1D4((uint64_t)v11, v53);
        do
        {
          BOOL v57 = v11[5];
          v11 += 5;
          int v58 = v171.f32[1] < v57.f32[1];
          int v59 = vcgt_f32(v57, v171).u8[0];
          if (v171.f32[1] == v57.f32[1]) {
            int v58 = v59;
          }
        }
        while (!v58);
        do
        {
          long long v60 = *(float32x2_t *)(v53 - 40);
          v53 -= 40;
          int v61 = v171.f32[1] < v60.f32[1];
          BOOL v62 = vcgt_f32(v60, v171).u8[0];
          if (v171.f32[1] == v60.f32[1]) {
            int v61 = v62;
          }
        }
        while (v61);
      }
      if (&v11[-5] != a1)
      {
        sub_25B576A98((uint64_t)v169, (uint64_t)a1, (uint64_t)&v11[-5]);
        sub_25B400248(v170);
      }
      sub_25B576A98((uint64_t)v167, (uint64_t)&v11[-5], (uint64_t)&v171);
      sub_25B400248(v168);
      sub_25B400248(v172);
      a4 = 0;
    }
  }
  if (a4)
  {
    if (a1 != v9)
    {
      int v88 = a1 + 5;
      if (&a1[5] != v9)
      {
        BOOL v89 = 0;
        int v90 = a1;
        do
        {
          int64_t v91 = v90[5];
          int64_t v92 = *v90;
          int v90 = v88;
          int64_t v93 = v91.f32[1] < v92.f32[1];
          uint64_t v94 = vcgt_f32(v92, v91).u8[0];
          if (v91.f32[1] == v92.f32[1]) {
            int64_t v93 = v94;
          }
          if (v93)
          {
            sub_25B4C9CE4((uint64_t)&v171, (uint64_t)v90);
            unint64_t v95 = v89;
            while (1)
            {
              sub_25B576A98((uint64_t)v169, (uint64_t)&a1[5] + v95, (uint64_t)a1 + v95);
              sub_25B400248(v170);
              if (!v95) {
                break;
              }
              LODWORD(v96) = HIDWORD(*(unint64_t *)((char *)&a1[-5] + v95));
              BOOL v97 = v171.f32[1] < v96;
              int v98 = vcgt_f32(*(float32x2_t *)((char *)a1 + v95 - 40), v171).u8[0];
              if (v171.f32[1] == v96) {
                BOOL v97 = v98;
              }
              v95 -= 40;
              if (!v97)
              {
                int v99 = (uint64_t)&a1[5] + v95;
                goto LABEL_114;
              }
            }
            int v99 = (uint64_t)a1;
LABEL_114:
            sub_25B576A98((uint64_t)v167, v99, (uint64_t)&v171);
            sub_25B400248(v168);
            sub_25B400248(v172);
          }
          int v88 = v90 + 5;
          v89 += 40;
        }
        while (&v90[5] != v9);
      }
    }
  }
  else if (a1 != v9)
  {
    long long v148 = a1 + 5;
    while (v148 != v9)
    {
      unint64_t v149 = (uint64_t)v148;
      LODWORD(v150) = HIDWORD(*(void *)&a1[5]);
      LODWORD(v151) = HIDWORD(*(unint64_t *)a1);
      int v152 = v150 < v151;
      BOOL v153 = vcgt_f32(*a1, a1[5]).u8[0];
      if (v150 == v151) {
        int v152 = v153;
      }
      if (v152)
      {
        sub_25B4C9CE4((uint64_t)&v171, v149);
        do
        {
          int v154 = (uint64_t)a1;
          sub_25B576A98((uint64_t)v169, (uint64_t)&a1[5], (uint64_t)a1);
          sub_25B400248(v170);
          a1 -= 5;
          LODWORD(v155) = HIDWORD(*(void *)(v154 - 40));
          uint64_t v156 = v171.f32[1] < v155;
          unint64_t v157 = vcgt_f32(*(float32x2_t *)(v154 - 40), v171).u8[0];
          if (v171.f32[1] == v155) {
            uint64_t v156 = v157;
          }
        }
        while (v156);
        sub_25B576A98((uint64_t)v167, v154, (uint64_t)&v171);
        sub_25B400248(v168);
        sub_25B400248(v172);
      }
      long long v148 = (float32x2_t *)(v149 + 40);
      a1 = (float32x2_t *)v149;
    }
  }
}

long long *sub_25B40CCF8(long long *result, int *a2, long long *a3)
{
  int v3 = *a2;
  BOOL v4 = *a2 < *(_DWORD *)result;
  if (*a2 == *(_DWORD *)result)
  {
    int v5 = a2[2];
    int v6 = *((_DWORD *)result + 2);
    BOOL v4 = v5 < v6;
    if (v5 == v6) {
      BOOL v4 = a2[3] < *((_DWORD *)result + 3);
    }
  }
  if (!v4)
  {
    BOOL v13 = *(_DWORD *)a3 < v3;
    if (*(_DWORD *)a3 == v3)
    {
      int v14 = *((_DWORD *)a3 + 2);
      int v15 = a2[2];
      BOOL v13 = v14 < v15;
      if (v14 == v15) {
        BOOL v13 = *((_DWORD *)a3 + 3) < a2[3];
      }
    }
    if (v13)
    {
      uint64_t v16 = *((void *)a2 + 2);
      long long v17 = *(_OWORD *)a2;
      uint64_t v18 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *a3;
      *((void *)a2 + 2) = v18;
      *a3 = v17;
      *((void *)a3 + 2) = v16;
      BOOL v19 = *a2 < *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
      {
        int v20 = a2[2];
        int v21 = *((_DWORD *)result + 2);
        BOOL v19 = v20 < v21;
        if (v20 == v21) {
          BOOL v19 = a2[3] < *((_DWORD *)result + 3);
        }
      }
      if (v19)
      {
        uint64_t v22 = *((void *)result + 2);
        long long v23 = *result;
        uint64_t v24 = *((void *)a2 + 2);
        *os_log_t result = *(_OWORD *)a2;
        *((void *)result + 2) = v24;
        *(_OWORD *)a2 = v23;
        *((void *)a2 + 2) = v22;
      }
    }
    return result;
  }
  BOOL v7 = *(_DWORD *)a3 < v3;
  if (*(_DWORD *)a3 == v3)
  {
    int v8 = *((_DWORD *)a3 + 2);
    int v9 = a2[2];
    BOOL v7 = v8 < v9;
    if (v8 == v9) {
      BOOL v7 = *((_DWORD *)a3 + 3) < a2[3];
    }
  }
  if (v7)
  {
    uint64_t v10 = *((void *)result + 2);
    long long v11 = *result;
    uint64_t v12 = *((void *)a3 + 2);
    *os_log_t result = *a3;
    *((void *)result + 2) = v12;
LABEL_29:
    *a3 = v11;
    *((void *)a3 + 2) = v10;
    return result;
  }
  uint64_t v25 = *((void *)result + 2);
  long long v26 = *result;
  uint64_t v27 = *((void *)a2 + 2);
  *os_log_t result = *(_OWORD *)a2;
  *((void *)result + 2) = v27;
  *(_OWORD *)a2 = v26;
  *((void *)a2 + 2) = v25;
  BOOL v28 = *(_DWORD *)a3 < *a2;
  if (*(_DWORD *)a3 == *a2)
  {
    int v29 = *((_DWORD *)a3 + 2);
    int v30 = a2[2];
    BOOL v28 = v29 < v30;
    if (v29 == v30) {
      BOOL v28 = *((_DWORD *)a3 + 3) < a2[3];
    }
  }
  if (v28)
  {
    uint64_t v10 = *((void *)a2 + 2);
    long long v11 = *(_OWORD *)a2;
    uint64_t v31 = *((void *)a3 + 2);
    *(_OWORD *)a2 = *a3;
    *((void *)a2 + 2) = v31;
    goto LABEL_29;
  }
  return result;
}

__n128 sub_25B40CE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_25B40CCF8((long long *)a1, (int *)a2, (long long *)a3);
  BOOL v9 = *(_DWORD *)a4 < *(_DWORD *)a3;
  if (*(_DWORD *)a4 == *(_DWORD *)a3)
  {
    int v10 = *(_DWORD *)(a4 + 8);
    int v11 = *(_DWORD *)(a3 + 8);
    BOOL v9 = v10 < v11;
    if (v10 == v11) {
      BOOL v9 = *(_DWORD *)(a4 + 12) < *(_DWORD *)(a3 + 12);
    }
  }
  if (v9)
  {
    uint64_t v12 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v13 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v13;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v12;
    BOOL v14 = *(_DWORD *)a3 < *(_DWORD *)a2;
    if (*(_DWORD *)a3 == *(_DWORD *)a2)
    {
      int v15 = *(_DWORD *)(a3 + 8);
      int v16 = *(_DWORD *)(a2 + 8);
      BOOL v14 = v15 < v16;
      if (v15 == v16) {
        BOOL v14 = *(_DWORD *)(a3 + 12) < *(_DWORD *)(a2 + 12);
      }
    }
    if (v14)
    {
      uint64_t v17 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v18 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v18;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v17;
      BOOL v19 = *(_DWORD *)a2 < *(_DWORD *)a1;
      if (*(_DWORD *)a2 == *(_DWORD *)a1)
      {
        int v20 = *(_DWORD *)(a2 + 8);
        int v21 = *(_DWORD *)(a1 + 8);
        BOOL v19 = v20 < v21;
        if (v20 == v21) {
          BOOL v19 = *(_DWORD *)(a2 + 12) < *(_DWORD *)(a1 + 12);
        }
      }
      if (v19)
      {
        uint64_t v22 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v23 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v23;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v22;
      }
    }
  }
  return result;
}

__n128 sub_25B40CFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_25B40CE8C(a1, a2, a3, a4).n128_u64[0];
  BOOL v11 = *(_DWORD *)a5 < *(_DWORD *)a4;
  if (*(_DWORD *)a5 == *(_DWORD *)a4)
  {
    int v12 = *(_DWORD *)(a5 + 8);
    int v13 = *(_DWORD *)(a4 + 8);
    BOOL v11 = v12 < v13;
    if (v12 == v13) {
      BOOL v11 = *(_DWORD *)(a5 + 12) < *(_DWORD *)(a4 + 12);
    }
  }
  if (v11)
  {
    uint64_t v14 = *(void *)(a4 + 16);
    __n128 result = *(__n128 *)a4;
    uint64_t v15 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v15;
    *(__n128 *)a5 = result;
    *(void *)(a5 + 16) = v14;
    BOOL v16 = *(_DWORD *)a4 < *(_DWORD *)a3;
    if (*(_DWORD *)a4 == *(_DWORD *)a3)
    {
      int v17 = *(_DWORD *)(a4 + 8);
      int v18 = *(_DWORD *)(a3 + 8);
      BOOL v16 = v17 < v18;
      if (v17 == v18) {
        BOOL v16 = *(_DWORD *)(a4 + 12) < *(_DWORD *)(a3 + 12);
      }
    }
    if (v16)
    {
      uint64_t v19 = *(void *)(a3 + 16);
      __n128 result = *(__n128 *)a3;
      uint64_t v20 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v20;
      *(__n128 *)a4 = result;
      *(void *)(a4 + 16) = v19;
      BOOL v21 = *(_DWORD *)a3 < *(_DWORD *)a2;
      if (*(_DWORD *)a3 == *(_DWORD *)a2)
      {
        int v22 = *(_DWORD *)(a3 + 8);
        int v23 = *(_DWORD *)(a2 + 8);
        BOOL v21 = v22 < v23;
        if (v22 == v23) {
          BOOL v21 = *(_DWORD *)(a3 + 12) < *(_DWORD *)(a2 + 12);
        }
      }
      if (v21)
      {
        uint64_t v24 = *(void *)(a2 + 16);
        __n128 result = *(__n128 *)a2;
        uint64_t v25 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v25;
        *(__n128 *)a3 = result;
        *(void *)(a3 + 16) = v24;
        BOOL v26 = *(_DWORD *)a2 < *(_DWORD *)a1;
        if (*(_DWORD *)a2 == *(_DWORD *)a1)
        {
          int v27 = *(_DWORD *)(a2 + 8);
          int v28 = *(_DWORD *)(a1 + 8);
          BOOL v26 = v27 < v28;
          if (v27 == v28) {
            BOOL v26 = *(_DWORD *)(a2 + 12) < *(_DWORD *)(a1 + 12);
          }
        }
        if (v26)
        {
          uint64_t v29 = *(void *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v30 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v30;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v29;
        }
      }
    }
  }
  return result;
}

BOOL sub_25B40D148(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = (_OWORD *)(a2 - 24);
      int v7 = *(_DWORD *)(a2 - 24);
      BOOL v8 = v7 < *(_DWORD *)a1;
      if (v7 == *(_DWORD *)a1)
      {
        int v9 = *(_DWORD *)(a2 - 16);
        int v10 = *(_DWORD *)(a1 + 8);
        BOOL v8 = v9 < v10;
        if (v9 == v10) {
          BOOL v8 = *(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 12);
        }
      }
      if (v8)
      {
        uint64_t v11 = *(void *)(a1 + 16);
        long long v12 = *(_OWORD *)a1;
        uint64_t v13 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v13;
        _OWORD *v6 = v12;
        *(void *)(a2 - 8) = v11;
      }
      return result;
    case 3uLL:
      sub_25B40CCF8((long long *)a1, (int *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_25B40CE8C(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_25B40CFBC(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      uint64_t v14 = a1 + 48;
      sub_25B40CCF8((long long *)a1, (int *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v15 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    int v18 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 != *(_DWORD *)v14) {
      break;
    }
    int v19 = *(_DWORD *)(v15 + 8);
    int v20 = *(_DWORD *)(v14 + 8);
    if (v19 == v20)
    {
      if (*(_DWORD *)(v15 + 12) < *(_DWORD *)(v14 + 12)) {
        goto LABEL_17;
      }
    }
    else if (v19 < v20)
    {
      goto LABEL_17;
    }
LABEL_28:
    uint64_t v14 = v15;
    v16 += 24;
    v15 += 24;
    if (v15 == a2) {
      return 1;
    }
  }
  if (v18 >= *(_DWORD *)v14) {
    goto LABEL_28;
  }
  int v19 = *(_DWORD *)(v15 + 8);
LABEL_17:
  int v21 = *(_DWORD *)(v15 + 4);
  int v22 = *(_DWORD *)(v15 + 12);
  uint64_t v23 = *(void *)(v15 + 16);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v14;
  *(void *)(v15 + 16) = *(void *)(v14 + 16);
  uint64_t v24 = a1;
  if (v14 != a1)
  {
    uint64_t v25 = v16;
    do
    {
      int v26 = *(_DWORD *)(a1 + v25 + 24);
      BOOL v27 = v18 < v26;
      if (v18 == v26 && (v28 = *(_DWORD *)(a1 + v25 + 32), BOOL v27 = v19 < v28, v19 == v28))
      {
        if (v22 >= *(_DWORD *)(a1 + v25 + 36))
        {
          uint64_t v24 = a1 + v25 + 48;
          goto LABEL_27;
        }
      }
      else if (!v27)
      {
        uint64_t v24 = v14;
        goto LABEL_27;
      }
      v14 -= 24;
      *(_OWORD *)(a1 + v25 + 48) = *(_OWORD *)(a1 + v25 + 24);
      *(void *)(a1 + v25 + 64) = *(void *)(a1 + v25 + 40);
      v25 -= 24;
    }
    while (v25 != -48);
    uint64_t v24 = a1;
  }
LABEL_27:
  *(_DWORD *)uint64_t v24 = v18;
  *(_DWORD *)(v24 + 4) = v21;
  *(_DWORD *)(v24 + 8) = v19;
  *(_DWORD *)(v24 + 12) = v22;
  ++v17;
  *(void *)(v24 + 16) = v23;
  if (v17 != 8) {
    goto LABEL_28;
  }
  return v15 + 24 == a2;
}

double sub_25B40D3C8(double a1, double a2, double a3, double a4)
{
  BOOL v8 = (double *)operator new(0x40uLL);
  uint64_t v9 = 0;
  double *v8 = a1;
  v8[1] = a3;
  v8[2] = a1;
  v8[3] = a4;
  v8[4] = a2;
  v8[5] = a3;
  int v10 = (float32x2_t *)v8;
  v8[6] = a2;
  v8[7] = a4;
  do
  {
    float32x2_t v11 = vsub_f32(*(float32x2_t *)&a1, v10[1]);
    int32x2_t v12 = (int32x2_t)vmul_f32(v11, v11);
    float32x2_t v13 = *(float32x2_t *)&v8[v9 + 2];
    float32x2_t v14 = vsub_f32(v13, *(float32x2_t *)&v8[v9 + 3]);
    int32x2_t v15 = (int32x2_t)vmul_f32(v14, v14);
    int32x2_t v16 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v12, v15), (float32x2_t)vzip2_s32(v12, v15)));
    unsigned __int8 v17 = vcgt_f32((float32x2_t)vdup_lane_s32(v16, 1), (float32x2_t)v16).u8[0];
    if (v17) {
      unsigned int v18 = -1;
    }
    else {
      unsigned int v18 = 0;
    }
    a1 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vdup_n_s32(v18), (int8x8_t)v13, *(int8x8_t *)&a1));
    if (v17) {
      int v10 = (float32x2_t *)&v8[v9 + 2];
    }
    v9 += 2;
  }
  while (v9 != 6);
  double v19 = *(double *)v10;
  operator delete(v8);
  return v19;
}

double sub_25B40D484(float32x2_t *a1, float32x2_t *a2, int a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (a3 == 2)
  {
    uint64_t v22 = 0;
    float32x2_t v23 = a1[1];
    uint64_t v24 = &v32;
    float32x2_t v31 = *a1;
    float32x2_t v32 = v23;
    float32x2_t v25 = a2[1];
    float32x2_t v33 = *a2;
    float32x2_t v34 = v25;
    float32x2_t v35 = v31;
    float32x2_t v36 = v33;
    float32x2_t v37 = v31;
    float32x2_t v38 = v25;
    float32x2_t v39 = v23;
    float32x2_t v40 = v33;
    float32x2_t v41 = v23;
    float32x2_t v42 = v25;
    do
    {
      float32x2_t v26 = vsub_f32(v24[-1], *v24);
      *(float *)&v30[v22++] = sqrtf(vaddv_f32(vmul_f32(v26, v26)));
      v24 += 2;
    }
    while (v22 != 6);
    float v27 = *(float *)v30;
    uint64_t v28 = 1;
    uint64_t v29 = (char *)v30;
    do
    {
      if (v27 < *(float *)&v30[v28])
      {
        float v27 = *(float *)&v30[v28];
        uint64_t v29 = (char *)&v30[v28];
      }
      ++v28;
    }
    while (v28 != 6);
    return *(double *)((char *)&v31 + 4 * (v29 - (char *)v30));
  }
  else
  {
    double result = 0.0;
    if (a3 == 1)
    {
      int8x8_t v4 = (int8x8_t)*a1;
      float32x2_t v5 = vsub_f32(*a1, a1[1]);
      int32x2_t v6 = (int32x2_t)vmul_f32(v5, v5);
      int8x8_t v7 = (int8x8_t)*a2;
      float32x2_t v8 = vsub_f32(*a2, a2[1]);
      int32x2_t v9 = (int32x2_t)vmul_f32(v8, v8);
      float32x2_t v10 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v6, v9), (float32x2_t)vzip2_s32(v6, v9)));
      v10.i8[0] = vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v10, 1), v10).u8[0];
      BOOL v11 = (v10.i8[0] & 1) == 0;
      if (v10.i8[0]) {
        unsigned int v12 = -1;
      }
      else {
        unsigned int v12 = 0;
      }
      int8x8_t v13 = (int8x8_t)vdup_n_s32(v12);
      float32x2_t v14 = (float32x2_t)vbsl_s8(v13, v4, v7);
      if (v11) {
        int32x2_t v15 = a2;
      }
      else {
        int32x2_t v15 = a1;
      }
      float32x2_t v16 = (float32x2_t)vbsl_s8(v13, v7, v4);
      if (!v11) {
        a1 = a2;
      }
      float32x2_t v17 = vsub_f32(a1[1], v16);
      float v18 = vaddv_f32(vmul_f32(vsub_f32(v14, v16), v17));
      float v19 = vaddv_f32(vmul_f32(v17, v17));
      if (v19 < 0.000001) {
        float v19 = 0.000001;
      }
      float32x2_t v20 = vmla_n_f32(v16, v17, v18 / v19);
      float32x2_t v21 = vmla_n_f32(v16, v17, vaddv_f32(vmul_f32(v17, vsub_f32(v15[1], v16))) / v19);
      float32x2_t v31 = v20;
      float32x2_t v32 = v21;
      sub_25B40D484();
    }
  }
  return result;
}

float sub_25B40D718(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  sub_25B40D638();
  float32x2_t v10 = vsub_f32(a4, a3);
  float v11 = vaddv_f32(vmul_f32(vsub_f32(a1, a3), v10));
  float v12 = vaddv_f32(vmul_f32(v10, v10));
  if (v12 < 0.000001) {
    float v12 = 0.000001;
  }
  float32x2_t v13 = vsub_f32(v8, v9);
  float32x2_t v14 = vsub_f32(vmla_n_f32(a3, v10, v11 / v12), vmla_n_f32(a3, v10, vaddv_f32(vmul_f32(v10, vsub_f32(a2, a3))) / v12));
  return sqrtf(vaddv_f32(vmul_f32(v13, v13))) / fmaxf(sqrtf(vaddv_f32(vmul_f32(v14, v14))), 0.000001);
}

void sub_25B40D7C0(float **a1, float32x2_t *a2, float32x2_t *a3, double a4, double a5, double a6)
{
  float32x2_t v8 = *a2;
  float32x2_t v7 = a2[1];
  int32x2_t v9 = (int32x2_t)vsub_f32(v7, *a2);
  float32x2_t v10 = *a3;
  float32x2_t v11 = vsub_f32(a3[1], *a3);
  *(float *)&a6 = -*(float *)&v9.i32[1];
  float32x2_t v12 = (float32x2_t)vzip1_s32(*(int32x2_t *)&a6, v9);
  int32x2_t v13 = (int32x2_t)vmul_f32(v11, v12);
  if (vaddv_f32((float32x2_t)v13) == 0.0)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    int32x2_t v15 = (int32x2_t)vmul_f32(vsub_f32(v8, v10), v12);
    float32x2_t v16 = vmla_n_f32(v10, v11, vdiv_f32(vadd_f32((float32x2_t)v15, (float32x2_t)vdup_lane_s32(v15, 1)), vadd_f32((float32x2_t)v13, (float32x2_t)vdup_lane_s32(v13, 1))).f32[0]);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    float32x2_t v17 = (float *)operator new(4uLL);
    float32x2_t v18 = vsub_f32(v8, v16);
    *float32x2_t v17 = sqrtf(vaddv_f32(vmul_f32(v18, v18)));
    *a1 = v17;
    a1[1] = v17 + 1;
    a1[2] = v17 + 1;
    float v19 = (float *)sub_25B3FBC64(2uLL);
    uint64_t v21 = v20;
    float32x2_t v22 = vsub_f32(v7, v16);
    v19[1] = sqrtf(vaddv_f32(vmul_f32(v22, v22)));
    float32x2_t v23 = &v19[v20];
    *float v19 = *v17;
    *a1 = v19;
    a1[1] = v19 + 2;
    a1[2] = v23;
    operator delete(v17);
    a1[1] = v19 + 2;
    float32x2_t v24 = vsub_f32(*a3, v16);
    float v25 = sqrtf(vaddv_f32(vmul_f32(v24, v24)));
    if (v21 < 3)
    {
      uint64_t v27 = 3;
      if ((unint64_t)(((char *)v23 - (char *)v19) >> 1) > 3) {
        uint64_t v27 = ((char *)v23 - (char *)v19) >> 1;
      }
      if ((unint64_t)((char *)v23 - (char *)v19) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28) {
        unint64_t v28 = (unint64_t)sub_25B3FBC64(v28);
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v30 = 0;
      *(float *)(v28 + 8) = v25;
      float32x2_t v26 = (float *)(v28 + 12);
      do
      {
        *(float *)(v28 + 8 + v30 * 4 - 4) = v19[v30 + 1];
        --v30;
      }
      while (v30 != -2);
      *a1 = (float *)v28;
      a1[1] = v26;
      a1[2] = (float *)(v28 + 4 * v29);
      operator delete(v19);
      float32x2_t v23 = a1[2];
    }
    else
    {
      v19[2] = v25;
      float32x2_t v26 = v19 + 3;
    }
    a1[1] = v26;
    float32x2_t v31 = vsub_f32(a3[1], v16);
    float v32 = sqrtf(vaddv_f32(vmul_f32(v31, v31)));
    if (v26 >= v23)
    {
      float32x2_t v34 = *a1;
      uint64_t v35 = v26 - *a1;
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      if (((char *)v23 - (char *)v34) >> 1 > v36) {
        unint64_t v36 = ((char *)v23 - (char *)v34) >> 1;
      }
      if ((unint64_t)((char *)v23 - (char *)v34) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37) {
        unint64_t v37 = (unint64_t)sub_25B3FBC64(v37);
      }
      else {
        uint64_t v38 = 0;
      }
      float32x2_t v39 = (float *)(v37 + 4 * v35);
      float *v39 = v32;
      float32x2_t v33 = v39 + 1;
      while (v26 != v34)
      {
        int v40 = *((_DWORD *)v26-- - 1);
        *((_DWORD *)v39-- - 1) = v40;
      }
      *a1 = v39;
      a1[1] = v33;
      a1[2] = (float *)(v37 + 4 * v38);
      if (v34) {
        operator delete(v34);
      }
    }
    else
    {
      *float32x2_t v26 = v32;
      float32x2_t v33 = v26 + 1;
    }
    a1[1] = v33;
  }
}

void sub_25B40DA54(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B40DA84(uint64_t *a1, float32x2_t *a2, float32x2_t a3, float32x2_t a4, double a5, double a6, double a7)
{
  int32x2_t v10 = (int32x2_t)vsub_f32(a4, a3);
  float32x2_t v11 = *a2;
  float32x2_t v12 = vsub_f32(a2[1], *a2);
  *(float *)&a7 = -*(float *)&v10.i32[1];
  float32x2_t v13 = (float32x2_t)vzip1_s32(*(int32x2_t *)&a7, v10);
  int32x2_t v14 = (int32x2_t)vmul_f32(v12, v13);
  if (vaddv_f32((float32x2_t)v14) == 0.0)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    int32x2_t v16 = (int32x2_t)vmul_f32(vsub_f32(a3, v11), v13);
    float32x2_t v17 = vmla_n_f32(v11, v12, vdiv_f32(vadd_f32((float32x2_t)v16, (float32x2_t)vdup_lane_s32(v16, 1)), vadd_f32((float32x2_t)v14, (float32x2_t)vdup_lane_s32(v14, 1))).f32[0]);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    BOOL v19 = sub_25B40DB9C(v17, a3, a4, 0.00001) < 0.01;
    sub_25B40DC2C(a1, &v19);
    BOOL v18 = sub_25B40DB9C(v17, *a2, a2[1], 0.00001) < 0.01;
    sub_25B40DC2C(a1, &v18);
  }
}

void sub_25B40DB80(_Unwind_Exception *exception_object)
{
  if (*v1) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

float32_t sub_25B40DB9C(float32x2_t a1, float32x2_t a2, float32x2_t a3, float a4)
{
  float32x2_t v4 = vsub_f32(a3, a2);
  float v5 = vaddv_f32(vmul_f32(vsub_f32(a1, a2), v4));
  float v6 = vaddv_f32(vmul_f32(v4, v4));
  if (v6 < 0.000001) {
    float v6 = 0.000001;
  }
  float32x2_t v7 = vmla_n_f32(a2, v4, v5 / v6);
  if (vaddv_f32(vmul_f32(vsub_f32(v7, a2), vsub_f32(v7, a3))) <= a4)
  {
    float32x2_t v12 = vsub_f32(v7, a1);
    v12.f32[0] = sqrtf(vaddv_f32(vmul_f32(v12, v12)));
  }
  else
  {
    float32x2_t v8 = vsub_f32(a2, a1);
    int32x2_t v9 = (int32x2_t)vmul_f32(v8, v8);
    float32x2_t v10 = vsub_f32(a3, a1);
    int32x2_t v11 = (int32x2_t)vmul_f32(v10, v10);
    float32x2_t v12 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v11, v9), (float32x2_t)vzip2_s32(v11, v9)));
    if (v12.f32[0] >= v12.f32[1]) {
      v12.f32[0] = v12.f32[1];
    }
  }
  return v12.f32[0];
}

void sub_25B40DC2C(uint64_t *a1, unsigned char *a2)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      sub_25B3FBC4C();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_25B40DCD0((uint64_t)a1, v7);
    unint64_t v4 = a1[1];
  }
  a1[1] = v4 + 1;
  uint64_t v8 = *a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)(v8 + 8 * v9) | v10;
  }
  else {
    uint64_t v11 = *(void *)(v8 + 8 * v9) & ~v10;
  }
  *(void *)(v8 + 8 * v9) = v11;
}

void sub_25B40DCD0(uint64_t a1, unint64_t a2)
{
  if (a2 <= *(void *)(a1 + 16) << 6) {
    return;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    sub_25B3FBC4C();
  }
  uint64_t v19 = 0;
  long long v20 = 0uLL;
  sub_25B40DE18(&v19, a2);
  int v3 = *(void **)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = v20;
  unint64_t v6 = v20 + v4;
  *(void *)&long long v20 = v20 + v4;
  if (!v5)
  {
    unint64_t v7 = v6 - 1;
    goto LABEL_7;
  }
  unint64_t v7 = v6 - 1;
  if (((v6 - 1) ^ (v5 - 1)) > 0x3F)
  {
LABEL_7:
    uint64_t v8 = v19;
    unint64_t v9 = v7 >> 6;
    if (v6 >= 0x41) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = 0;
    }
    *(void *)(v19 + 8 * v10) = 0;
    goto LABEL_11;
  }
  uint64_t v8 = v19;
LABEL_11:
  int v11 = v4 & 0x3F;
  if (v4 > 0x3F || (v4 & 0x3F) != 0)
  {
    int v12 = 0;
    float32x2_t v13 = &v3[v4 >> 6];
    int v14 = v5 & 0x3F;
    int32x2_t v15 = (uint64_t *)(v8 + 8 * (v5 >> 6));
    do
    {
      uint64_t v16 = 1 << v14;
      if ((*v3 >> v12)) {
        uint64_t v17 = *v15 | v16;
      }
      else {
        uint64_t v17 = *v15 & ~v16;
      }
      *int32x2_t v15 = v17;
      v3 += v12 == 63;
      if (v12 == 63) {
        int v12 = 0;
      }
      else {
        ++v12;
      }
      v15 += v14 == 63;
      if (v14 == 63) {
        int v14 = 0;
      }
      else {
        ++v14;
      }
    }
    while (v3 != v13 || v12 != v11);
  }
  BOOL v18 = *(void **)a1;
  *(void *)a1 = v8;
  *(_OWORD *)(a1 + 8) = v20;
  if (v18) {
    operator delete(v18);
  }
}

void sub_25B40DE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_25B40DE18(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_25B3FBC4C();
  }
  double result = sub_25B3FCAD4(((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

float32x2_t sub_25B40DE58(float32x2_t a1, float32x2_t a2, float32x2_t a3)
{
  float32x2_t v3 = vsub_f32(a3, a2);
  float v4 = vaddv_f32(vmul_f32(vsub_f32(a1, a2), v3));
  float v5 = vaddv_f32(vmul_f32(v3, v3));
  if (v5 < 0.000001) {
    float v5 = 0.000001;
  }
  float32x2_t result = vmla_n_f32(a2, v3, v4 / v5);
  float32x2_t v7 = vsub_f32(result, a2);
  float32x2_t v8 = vsub_f32(result, a3);
  if (vaddv_f32(vmul_f32(v7, v8)) > 0.00001)
  {
    int32x2_t v9 = (int32x2_t)vmul_f32(v7, v7);
    int32x2_t v10 = (int32x2_t)vmul_f32(v8, v8);
    float32x2_t v11 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v9, v10), (float32x2_t)vzip2_s32(v9, v10)));
    return (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v11, 1), v11), 0), (int8x8_t)a2, (int8x8_t)a3);
  }
  return result;
}

float32x2_t sub_25B40DED8(float32x2_t a1, float32x2_t a2, float32x2_t a3)
{
  float32x2_t v3 = vsub_f32(a3, a2);
  float v4 = vaddv_f32(vmul_f32(vsub_f32(a1, a2), v3));
  float v5 = vaddv_f32(vmul_f32(v3, v3));
  if (v5 < 0.000001) {
    float v5 = 0.000001;
  }
  float32x2_t result = vmla_n_f32(a2, v3, v4 / v5);
  float32x2_t v7 = vsub_f32(result, a2);
  float32x2_t v8 = vsub_f32(result, a3);
  if (vaddv_f32(vmul_f32(v7, v8)) > 0.00001)
  {
    int32x2_t v9 = (int32x2_t)vmul_f32(v7, v7);
    int32x2_t v10 = (int32x2_t)vmul_f32(v8, v8);
    float32x2_t v11 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v9, v10), (float32x2_t)vzip2_s32(v9, v10)));
    return (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_lane_s32((int32x2_t)v11, 1), v11)), 0), (int8x8_t)a3, (int8x8_t)a2);
  }
  return result;
}

float32x2_t sub_25B40DF5C(float32x2_t a1, double a2, float32x2_t a3, float32x2_t a4)
{
  float32x2_t v4 = vsub_f32(a4, a3);
  float v5 = vaddv_f32(vmul_f32(vsub_f32(a1, a3), v4));
  float v6 = vaddv_f32(vmul_f32(v4, v4));
  if (v6 < 0.000001) {
    float v6 = 0.000001;
  }
  float32x2_t result = vmla_n_f32(a3, v4, v5 / v6);
  float32x2_t v8 = vsub_f32(result, a3);
  float32x2_t v9 = vsub_f32(result, a4);
  if (vaddv_f32(vmul_f32(v8, v9)) > 0.00001)
  {
    int32x2_t v10 = (int32x2_t)vmul_f32(v8, v8);
    int32x2_t v11 = (int32x2_t)vmul_f32(v9, v9);
    float32x2_t v12 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v10, v11), (float32x2_t)vzip2_s32(v10, v11)));
    return (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_lane_s32((int32x2_t)v12, 1), v12)), 0), (int8x8_t)a4, (int8x8_t)a3);
  }
  return result;
}

void sub_25B40E03C(float **a1, float32x2_t *a2, float32x2_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  float32x2_t v6 = *a2;
  float32x2_t v7 = *a3;
  float32x2_t v8 = (float *)operator new(4uLL);
  float32x2_t v9 = vsub_f32(v6, v7);
  float *v8 = sqrtf(vaddv_f32(vmul_f32(v9, v9)));
  *a1 = v8;
  a1[1] = v8 + 1;
  a1[2] = v8 + 1;
  float32x2_t v10 = a3[1];
  int32x2_t v11 = (float *)sub_25B3FBC64(2uLL);
  uint64_t v13 = v12;
  float32x2_t v14 = vsub_f32(v6, v10);
  v11[1] = sqrtf(vaddv_f32(vmul_f32(v14, v14)));
  int32x2_t v15 = &v11[v12];
  *int32x2_t v11 = *v8;
  *a1 = v11;
  a1[1] = v11 + 2;
  a1[2] = v15;
  operator delete(v8);
  a1[1] = v11 + 2;
  float32x2_t v16 = vsub_f32(a2[1], *a3);
  float v17 = sqrtf(vaddv_f32(vmul_f32(v16, v16)));
  if (v13 < 3)
  {
    uint64_t v19 = 3;
    if ((unint64_t)(((char *)v15 - (char *)v11) >> 1) > 3) {
      uint64_t v19 = ((char *)v15 - (char *)v11) >> 1;
    }
    if ((unint64_t)((char *)v15 - (char *)v11) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20) {
      unint64_t v20 = (unint64_t)sub_25B3FBC64(v20);
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = 0;
    *(float *)(v20 + 8) = v17;
    BOOL v18 = (float *)(v20 + 12);
    do
    {
      *(float *)(v20 + 8 + v22 * 4 - 4) = v11[v22 + 1];
      --v22;
    }
    while (v22 != -2);
    *a1 = (float *)v20;
    a1[1] = v18;
    a1[2] = (float *)(v20 + 4 * v21);
    operator delete(v11);
    int32x2_t v15 = a1[2];
  }
  else
  {
    v11[2] = v17;
    BOOL v18 = v11 + 3;
  }
  a1[1] = v18;
  float32x2_t v23 = vsub_f32(a2[1], a3[1]);
  float v24 = sqrtf(vaddv_f32(vmul_f32(v23, v23)));
  if (v18 >= v15)
  {
    float32x2_t v26 = *a1;
    uint64_t v27 = v18 - *a1;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 62) {
      sub_25B3FBC4C();
    }
    if (((char *)v15 - (char *)v26) >> 1 > v28) {
      unint64_t v28 = ((char *)v15 - (char *)v26) >> 1;
    }
    if ((unint64_t)((char *)v15 - (char *)v26) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v28;
    }
    if (v29) {
      unint64_t v29 = (unint64_t)sub_25B3FBC64(v29);
    }
    else {
      uint64_t v30 = 0;
    }
    float32x2_t v31 = (float *)(v29 + 4 * v27);
    float *v31 = v24;
    float v25 = v31 + 1;
    while (v18 != v26)
    {
      int v32 = *((_DWORD *)v18-- - 1);
      *((_DWORD *)v31-- - 1) = v32;
    }
    *a1 = v31;
    a1[1] = v25;
    a1[2] = (float *)(v29 + 4 * v30);
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *BOOL v18 = v24;
    float v25 = v18 + 1;
  }
  a1[1] = v25;
}

void sub_25B40E288(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_25B40E2B8(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  float32x2_t v4 = vsub_f32(a2, a1);
  float32x2_t v5 = vsub_f32(a4, a3);
  float v6 = vmlas_n_f32((float)-v4.f32[1] * v5.f32[0], v5.f32[1], v4.f32[0]);
  BOOL result = 0;
  if (fabsf(v6) >= 0.000001)
  {
    float32x2_t v8 = vsub_f32(a3, a1);
    float v9 = vmlas_n_f32(-(float)(v8.f32[1] * v5.f32[0]), v5.f32[1], v8.f32[0]) / v6;
    if (v9 >= -0.00001 && v9 <= 1.0)
    {
      float v10 = (float)((float)(v4.f32[0] * (float)-v8.f32[1]) + (float)(v8.f32[0] * v4.f32[1])) / v6;
      return v10 <= 1.0 && v10 >= -0.00001;
    }
  }
  return result;
}

unint64_t sub_25B40E348(float32x2_t *a1, float32x2_t *a2)
{
  sub_25B3FD008(&v11, a1, a2);
  uint64_t v2 = v11;
  float32x2_t v3 = v11 + 1;
  BOOL v4 = v11 == v12 || v3 == v12;
  float32x2_t v5 = v11;
  if (!v4)
  {
    float v6 = *v11;
    float32x2_t v5 = v11;
    float32x2_t v7 = v11 + 1;
    do
    {
      float v8 = *v7++;
      float v9 = v8;
      if (v8 < v6)
      {
        float v6 = v9;
        float32x2_t v5 = v3;
      }
      float32x2_t v3 = v7;
    }
    while (v7 != v12);
  }
  if (v11) {
    operator delete(v11);
  }
  return (unint64_t)(v5 - v2) >> 1;
}

unint64_t sub_25B40E3D8(float32x2_t *a1, float32x2_t *a2)
{
  sub_25B3FD008(&v11, a1, a2);
  uint64_t v2 = v11;
  float32x2_t v3 = v11 + 1;
  BOOL v4 = v11 == v12 || v3 == v12;
  float32x2_t v5 = v11;
  if (!v4)
  {
    float v6 = *v11;
    float32x2_t v5 = v11;
    float32x2_t v7 = v11 + 1;
    do
    {
      float v8 = *v7++;
      float v9 = v8;
      if (v6 < v8)
      {
        float v6 = v9;
        float32x2_t v5 = v3;
      }
      float32x2_t v3 = v7;
    }
    while (v7 != v12);
  }
  if (v11) {
    operator delete(v11);
  }
  return (unint64_t)(v5 - v2) >> 1;
}

float sub_25B40E468(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  float32x2_t v8 = sub_25B40DE58(a3, a1, a2);
  float32x2_t v9 = sub_25B40DE58(a4, a1, a2);
  float32x2_t v10 = vsub_f32(a2, a1);
  float v11 = vaddv_f32(vmul_f32(vsub_f32(a3, a1), v10));
  float v12 = vaddv_f32(vmul_f32(v10, v10));
  if (v12 < 0.000001) {
    float v12 = 0.000001;
  }
  float32x2_t v13 = vsub_f32(v8, v9);
  float32x2_t v14 = vsub_f32(vmla_n_f32(a1, v10, v11 / v12), vmla_n_f32(a1, v10, vaddv_f32(vmul_f32(v10, vsub_f32(a4, a1))) / v12));
  return fminf(sqrtf(vaddv_f32(vmul_f32(v13, v13))) / fmaxf(sqrtf(vaddv_f32(vmul_f32(v14, v14))), 0.000001), 1.0);
}

BOOL sub_25B40E540(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x2_t a4)
{
  _D4 = vsub_f32(*(float32x2_t *)a2.f32, *(float32x2_t *)a1.f32);
  _S5 = vsub_f32(*(float32x2_t *)a3.f32, *(float32x2_t *)a2.f32).u32[0];
  __asm { FMLA            S7, S5, V4.S[1] }
  float v11 = fabsf(_S7);
  BOOL v12 = _S7 > 0.0;
  _S5 = vsub_f32(a4, *(float32x2_t *)a2.f32).u32[0];
  __asm { FMLA            S6, S5, V4.S[1] }
  float v15 = fabsf(_S6);
  BOOL v16 = _S6 <= 0.0;
  _D4 = vsub_f32(a4, *(float32x2_t *)a3.f32);
  _S5 = vsub_f32(*(float32x2_t *)a1.f32, a4).u32[0];
  __asm { FMLA            S17, S5, V4.S[1] }
  _S5 = vsub_f32(*(float32x2_t *)a2.f32, a4).u32[0];
  __asm { FMLA            S18, S5, V4.S[1] }
  float v22 = fabsf(_S17);
  float v23 = fabsf(_S18);
  BOOL v24 = v12 ^ v16;
  if (v15 < 0.00001) {
    BOOL v24 = 0;
  }
  if (v11 >= 0.00001) {
    BOOL v25 = v24;
  }
  else {
    BOOL v25 = v15 < 0.00001;
  }
  BOOL v26 = v23 < 0.00001;
  int v27 = (_S17 > 0.0) ^ (_S18 <= 0.0);
  if (v23 < 0.00001) {
    int v27 = 0;
  }
  if (v22 >= 0.00001) {
    BOOL v26 = v27;
  }
  if (!v25 && !v26) {
    return 1;
  }
  if (v11 < 0.00001)
  {
    v29.i64[0] = a3.i64[0];
    v29.i64[1] = a3.i64[0];
    v30.i64[0] = a1.i64[0];
    v30.i64[1] = a1.i64[0];
    v31.i64[0] = a2.i64[0];
    v31.i64[1] = a2.i64[0];
    v32.i64[0] = a2.i64[0];
    v32.i64[1] = a1.i64[0];
    v33.i64[0] = a1.i64[0];
    v33.i64[1] = a2.i64[0];
    float32x4_t v34 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v33, v32), v31, v30);
    v31.i32[0] = vmovn_s32(vcgeq_f32(v29, v34)).u32[0];
    v31.i32[1] = vmovn_s32(vcgeq_f32(v34, v29)).i32[1];
    if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v31.i8, 0xFuLL)))) {
      return 1;
    }
  }
  if (v15 < 0.00001)
  {
    *(float32x2_t *)v35.f32 = a4;
    *(float32x2_t *)&v35.u32[2] = a4;
    v36.i64[0] = a1.i64[0];
    v36.i64[1] = a1.i64[0];
    v37.i64[0] = a2.i64[0];
    v37.i64[1] = a2.i64[0];
    v38.i64[0] = a2.i64[0];
    v38.i64[1] = a1.i64[0];
    v39.i64[0] = a1.i64[0];
    v39.i64[1] = a2.i64[0];
    float32x4_t v40 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v39, v38), v37, v36);
    v37.i32[0] = vmovn_s32(vcgeq_f32(v35, v40)).u32[0];
    v37.i32[1] = vmovn_s32(vcgeq_f32(v40, v35)).i32[1];
    if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v37.i8, 0xFuLL)))) {
      return 1;
    }
  }
  if (v22 < 0.00001)
  {
    a1.i64[1] = a1.i64[0];
    v41.i64[0] = a3.i64[0];
    v41.i64[1] = a3.i64[0];
    *(float32x2_t *)v42.i8 = a4;
    v42.u64[1] = (unint64_t)a4;
    *(float32x2_t *)v43.f32 = a4;
    v43.i64[1] = a3.i64[0];
    v44.i64[0] = a3.i64[0];
    *(float32x2_t *)&v44.u32[2] = a4;
    float32x4_t v45 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v44, v43), v42, v41);
    v42.i32[0] = vmovn_s32(vcgeq_f32(a1, v45)).u32[0];
    v42.i32[1] = vmovn_s32(vcgeq_f32(v45, a1)).i32[1];
    if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v42.i8, 0xFuLL)))) {
      return 1;
    }
  }
  if (v23 >= 0.00001) {
    return 0;
  }
  a2.i64[1] = a2.i64[0];
  v46.i64[0] = a3.i64[0];
  v46.i64[1] = a3.i64[0];
  *(float32x2_t *)v47.i8 = a4;
  v47.u64[1] = (unint64_t)a4;
  *(float32x2_t *)v48.f32 = a4;
  v48.i64[1] = a3.i64[0];
  *(float32x2_t *)&a3.u32[2] = a4;
  float32x4_t v49 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(a3, v48), v47, v46);
  v50.i32[0] = vmovn_s32(vcgeq_f32(a2, v49)).u32[0];
  v50.i32[1] = vmovn_s32(vcgeq_f32(v49, a2)).i32[1];
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v50, 0xFuLL))) & 1) != 0;
}

uint64_t sub_25B40E774(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x2_t a4)
{
  float32x2_t v5 = *(float32x2_t *)a3.f32;
  float32x2_t v6 = *(float32x2_t *)a2.f32;
  float32x2_t v7 = *(float32x2_t *)a1.f32;
  if (!sub_25B40E540(a1, a2, a3, a4)) {
    return 0;
  }
  int32x2_t v9 = (int32x2_t)vsub_f32(v6, v7);
  float32x2_t v10 = vsub_f32(a4, v5);
  *(float *)v8.i32 = -*(float *)&v9.i32[1];
  float32x2_t v11 = (float32x2_t)vzip1_s32(v8, v9);
  int32x2_t v12 = (int32x2_t)vmul_f32(v10, v11);
  if (vaddv_f32((float32x2_t)v12) == 0.0) {
    return 0;
  }
  int32x2_t v14 = (int32x2_t)vmul_f32(vsub_f32(v7, v5), v11);
  return (uint64_t)vmla_n_f32(v5, v10, vdiv_f32(vadd_f32((float32x2_t)v14, (float32x2_t)vdup_lane_s32(v14, 1)), vadd_f32((float32x2_t)v12, (float32x2_t)vdup_lane_s32(v12, 1))).f32[0]);
}

uint64_t sub_25B40E808(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v6 = a1;
  float32x2_t v7 = *(float32x2_t *)a4.f32;
  unint64_t v8 = a3.i64[0];
  float32x2_t v9 = vsub_f32(*(float32x2_t *)a3.f32, *(float32x2_t *)a4.f32);
  float v10 = sqrtf(vaddv_f32(vmul_f32(v9, v9)));
  while (1)
  {
    a5.i64[0] = *(void *)v6;
    a3.i64[0] = v8;
    *(float32x2_t *)a4.f32 = v7;
    uint64_t v11 = sub_25B40E774(a3, a4, a5, *(float32x2_t *)(v6 + 8));
    if (v12)
    {
      float32x2_t v13 = vsub_f32((float32x2_t)v11, v7);
      if ((float)(v10 - sqrtf(vaddv_f32(vmul_f32(v13, v13)))) > 0.1) {
        break;
      }
    }
    v6 += 16;
    if (v6 == a2) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_25B40E8C0(float32x2_t *a1, float32x2_t *a2, float a3, float a4)
{
  float32x2_t v8 = *a1;
  float32x2_t v9 = a1[1];
  float32x2_t v10 = *a2;
  float32x2_t v11 = a2[1];
  float v12 = sub_25B40E468(*a1, v9, *a2, v11);
  float v13 = sub_25B40E468(v10, v11, v8, v9);
  if (v12 >= v13) {
    float v14 = v12;
  }
  else {
    float v14 = v13;
  }
  float v15 = sub_25B3FCCE0(a1, a2, 0);
  float32x2_t v16 = *a1;
  float32x2_t v17 = vsub_f32(a1[1], *a1);
  float v18 = vaddv_f32(vmul_f32(vsub_f32(*a2, *a1), v17));
  float v19 = vaddv_f32(vmul_f32(v17, v17));
  if (v19 < 0.000001) {
    float v19 = 0.000001;
  }
  float32x2_t v20 = vsub_f32(vmla_n_f32(v16, v17, v18 / v19), *a2);
  int32x2_t v21 = (int32x2_t)vmul_f32(v20, v20);
  float32x2_t v22 = vsub_f32(vmla_n_f32(v16, v17, vaddv_f32(vmul_f32(v17, vsub_f32(a2[1], v16))) / v19), a2[1]);
  int32x2_t v23 = (int32x2_t)vmul_f32(v22, v22);
  float v24 = vaddv_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v21, v23), (float32x2_t)vzip2_s32(v21, v23)))) * 0.5;
  BOOL v25 = v15 <= a3;
  if (v14 < 0.5) {
    BOOL v25 = 0;
  }
  return v24 <= a4 && v25;
}

void sub_25B40E9EC(void *a1, float32x2_t **a2, float32x2_t *a3, float32x2_t *a4, float a5)
{
  float32x2_t v7 = a2[1];
  float32x2_t v8 = 0;
  if (v7)
  {
    float32x2_t v9 = 0;
    unint64_t v10 = 0;
    float32x2_t v11 = *a2;
    uint64_t v12 = (uint64_t)&(*a2)[2 * (void)v7];
    do
    {
      float32x2_t v13 = *v11;
      if ((unint64_t)v9 >= v10)
      {
        uint64_t v15 = (v9 - (char *)v8) >> 3;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v10 - (void)v8) >> 2 > v16) {
          unint64_t v16 = (uint64_t)(v10 - (void)v8) >> 2;
        }
        if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)sub_25B3FCAD4(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        float v19 = (float32x2_t *)(v17 + 8 * v15);
        *float v19 = v13;
        float v14 = v19 + 1;
        while (v9 != (char *)v8)
        {
          float32x2_t v20 = *(float32x2_t *)(v9 - 8);
          v9 -= 8;
          v19[-1] = v20;
          --v19;
        }
        unint64_t v10 = v17 + 8 * v18;
        if (v8) {
          operator delete(v8);
        }
        float32x2_t v8 = v19;
      }
      else
      {
        *(float32x2_t *)float32x2_t v9 = v13;
        float v14 = (float32x2_t *)(v9 + 8);
      }
      v11 += 2;
      float32x2_t v9 = (char *)v14;
    }
    while (v11 != (float32x2_t *)v12);
  }
  else
  {
    float v14 = 0;
  }
  float32x2_t v21 = *a3;
  float32x2_t v22 = *a4;
  int32x2_t v23 = v14;
  float32x2_t v24 = *a3;
  float32x2_t v25 = *a4;
  if (v8 != v14)
  {
    float32x2_t v26 = vmul_f32(vadd_f32(v21, v22), (float32x2_t)0x3F0000003F000000);
    int v27 = v8;
    do
    {
      *int v27 = vsub_f32(*v27, v26);
      ++v27;
    }
    while (v27 != v14);
    float32x2_t v25 = *a4;
    float32x2_t v24 = *a3;
    int32x2_t v23 = v8;
  }
  memset(__p, 0, sizeof(__p));
  sub_25B40DCD0((uint64_t)__p, v14 - v23);
  if (v8 != v14)
  {
    float32x2_t v29 = vsub_f32(v21, v22);
    int32x2_t v30 = (int32x2_t)vsub_f32(v25, v24);
    *(float *)v28.i32 = -*(float *)&v30.i32[1];
    float32x2_t v31 = (float32x2_t)vzip1_s32(v28, v30);
    int32x2_t v32 = (int32x2_t)vmul_f32((float32x2_t)v30, (float32x2_t)v30);
    v32.i32[0] = vadd_f32((float32x2_t)v32, (float32x2_t)vdup_lane_s32(v32, 1)).u32[0];
    float32x2_t v33 = vrsqrte_f32((float32x2_t)v32.u32[0]);
    float32x2_t v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v33, v33)));
    v32.i32[0] = vmul_f32(v34, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v34, v34))).u32[0];
    int32x2_t v35 = (int32x2_t)vmul_f32(v31, v31);
    v35.i32[0] = vadd_f32((float32x2_t)v35, (float32x2_t)vdup_lane_s32(v35, 1)).u32[0];
    float32x2_t v36 = vmul_n_f32((float32x2_t)v30, *(float *)v32.i32);
    float32x2_t v37 = vrsqrte_f32((float32x2_t)v35.u32[0]);
    float32x2_t v38 = vmul_f32(v37, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v37, v37)));
    float32x2_t v39 = vmul_n_f32(v31, vmul_f32(v38, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v38, v38))).f32[0]);
    float v40 = sqrtf(vaddv_f32(vmul_f32(v29, v29))) * 0.5;
    int8x16_t v41 = v8;
    do
    {
      BOOL v42 = fabsf(vaddv_f32(vmul_f32(v36, *v41))) < v40 && fabsf(vaddv_f32(vmul_f32(v39, *v41))) < a5;
      BOOL v61 = v42;
      sub_25B40DC2C((uint64_t *)__p, &v61);
      ++v41;
    }
    while (v41 != v14);
  }
  float32x4_t v43 = (uint64_t *)a2;
  float32x4_t v44 = a2[1];
  if (v44)
  {
    float32x4_t v45 = 0;
    int8x16_t v46 = 0;
    unint64_t v47 = 0;
    float32x4_t v48 = 0;
    for (unint64_t i = 0; (float32x2_t *)i != v44; ++i)
    {
      if ((*(void *)((char *)__p[0] + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i))
      {
        uint64_t v50 = *v43;
        if ((unint64_t)v48 >= v47)
        {
          uint64_t v52 = (v48 - v45) >> 4;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v47 - (void)v45) >> 3 > v53) {
            unint64_t v53 = (uint64_t)(v47 - (void)v45) >> 3;
          }
          if (v47 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v54 = v53;
          }
          if (v54) {
            unint64_t v54 = (unint64_t)sub_25B3FFAEC(v54);
          }
          else {
            uint64_t v55 = 0;
          }
          unsigned __int32 v56 = (char *)(v54 + 16 * v52);
          *(_OWORD *)unsigned __int32 v56 = *(_OWORD *)(v50 + 16 * i);
          uint64_t v51 = (uint64_t)(v56 + 16);
          while (v46 != v45)
          {
            long long v57 = *((_OWORD *)v46 - 1);
            v46 -= 16;
            *((_OWORD *)v56 - 1) = v57;
            v56 -= 16;
          }
          unint64_t v47 = v54 + 16 * v55;
          if (v45) {
            operator delete(v45);
          }
          float32x4_t v45 = v56;
          float32x4_t v48 = (char *)v51;
          float32x4_t v43 = (uint64_t *)a2;
        }
        else
        {
          *(_OWORD *)float32x4_t v48 = *(_OWORD *)(v50 + 16 * i);
          v48 += 16;
          uint64_t v51 = (uint64_t)v48;
        }
      }
      else
      {
        uint64_t v51 = (uint64_t)v46;
      }
      int8x16_t v46 = (char *)v51;
    }
  }
  else
  {
    float32x4_t v45 = 0;
    uint64_t v51 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_25B40EE6C(a1, v45, v51, (v51 - (uint64_t)v45) >> 4);
  sub_25B40EEE8(a1 + 3, (uint64_t)__p);
  if (v45) {
    operator delete(v45);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_25B40EE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  uint64_t v18 = *v14;
  if (*v14)
  {
    *(void *)(a10 + 8) = v18;
    operator delete(v18);
  }
  if (v16) {
    operator delete(v16);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v15) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_25B40EE6C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = sub_25B40F000(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25B40EECC(_Unwind_Exception *exception_object)
{
  float32x2_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_25B40EEE8(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    return a1;
  }
  sub_25B40DE18(a1, v4);
  float32x2_t v5 = *(void **)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = a1[1];
  unint64_t v8 = v7 + v6;
  a1[1] = v7 + v6;
  if (v7)
  {
    unint64_t v9 = v8 - 1;
    if (((v8 - 1) ^ (v7 - 1)) < 0x40) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v9 = v8 - 1;
  }
  unint64_t v10 = v9 >> 6;
  if (v8 >= 0x41) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = 0;
  }
  *(void *)(*a1 + 8 * v11) = 0;
LABEL_10:
  int v12 = v6 & 0x3F;
  if (v6 > 0x3F || (v6 & 0x3F) != 0)
  {
    int v13 = 0;
    int v14 = 0;
    uint64_t v15 = &v5[v6 >> 6];
    int v16 = v7 & 0x3F;
    unint64_t v17 = (uint64_t *)(*a1 + 8 * (v7 >> 6));
    do
    {
      uint64_t v18 = 1 << v16;
      if ((*v5 >> v14)) {
        uint64_t v19 = *v17 | v18;
      }
      else {
        uint64_t v19 = *v17 & ~v18;
      }
      *unint64_t v17 = v19;
      ++v14;
      v5 += v13 == 63;
      if (v13 == 63) {
        int v14 = 0;
      }
      v17 += v16 == 63;
      if (v16 == 63) {
        int v16 = 0;
      }
      else {
        ++v16;
      }
      int v13 = v14;
    }
    while (v5 != v15 || v12 != v14);
  }
  return a1;
}

char *sub_25B40F000(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_25B3FBC4C();
  }
  BOOL result = (char *)sub_25B3FFAEC(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_25B40F040(void *a1, unint64_t *a2, int a3, int a4, float32x4_t a5, double a6, float32x4_t a7)
{
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  a5.f32[0] = (float)a3;
  float32x4_t v13 = a5;
  v85[8] = *MEMORY[0x263EF8340];
  a5.f32[1] = (float)a4;
  LODWORD(v14) = 0;
  *((float *)&v14 + 1) = (float)a4;
  v85[0] = 0;
  v85[1] = v13.u32[0];
  v85[2] = v13.u32[0];
  v85[3] = a5.i64[0];
  v85[4] = a5.i64[0];
  v85[5] = v14;
  v85[6] = v14;
  v85[7] = 0;
  do
  {
    uint64_t v15 = &v85[2 * v12];
    a5.i64[0] = *a2;
    v13.i64[0] = a2[1];
    a7.i64[0] = *v15;
    uint64_t v16 = sub_25B40E774(a5, v13, a7, (float32x2_t)v15[1]);
    if (v17)
    {
      uint64_t v18 = v16;
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v19 = ((char *)v11 - (char *)v8) >> 3;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v10 - (void)v8) >> 2 > v20) {
          unint64_t v20 = (uint64_t)(v10 - (void)v8) >> 2;
        }
        if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          unint64_t v21 = (unint64_t)sub_25B3FCAD4(v21);
        }
        else {
          uint64_t v22 = 0;
        }
        int32x2_t v23 = (uint64_t *)(v21 + 8 * v19);
        uint64_t *v23 = v18;
        unint64_t v11 = v23 + 1;
        while (v9 != v8)
        {
          float32x2_t v24 = v9[-1];
          --v9;
          *--int32x2_t v23 = (uint64_t)v24;
        }
        unint64_t v10 = v21 + 8 * v22;
        if (v8) {
          operator delete(v8);
        }
        unint64_t v8 = (float32x2_t *)v23;
      }
      else
      {
        *v11++ = v16;
      }
      unint64_t v9 = (float32x2_t *)v11;
    }
    ++v12;
  }
  while (v12 != 4);
  if (v8 == (float32x2_t *)v11)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    if (v8 != v9)
    {
      float32x2_t v25 = 0;
      float32x2_t v26 = 0;
      unint64_t v77 = 0;
      unint64_t v78 = 0;
      int v27 = 0;
      int32x2_t v28 = 0;
      unint64_t v79 = 0;
      int v80 = v8;
      float32x2_t v29 = 0;
      int32x2_t v30 = 0;
      while (1)
      {
        unint64_t v31 = v26 - v25;
        if (v26 == v25)
        {
LABEL_31:
          if ((unint64_t)v26 >= v77)
          {
            unint64_t v36 = v31 + 1;
            if ((v31 + 1) >> 61) {
              goto LABEL_136;
            }
            if ((uint64_t)(v77 - (void)v25) >> 2 > v36) {
              unint64_t v36 = (uint64_t)(v77 - (void)v25) >> 2;
            }
            if (v77 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v37 = v36;
            }
            if (v37) {
              unint64_t v37 = (unint64_t)sub_25B3FCAD4(v37);
            }
            else {
              uint64_t v38 = 0;
            }
            float32x4_t v44 = (float32x2_t *)(v37 + 8 * v31);
            *float32x4_t v44 = *v80;
            float32x4_t v45 = v44 + 1;
            while (v26 != v25)
            {
              float32x2_t v46 = v26[-1];
              --v26;
              v44[-1] = v46;
              --v44;
            }
            unint64_t v77 = v37 + 8 * v38;
            if (v25) {
              operator delete(v25);
            }
            float32x2_t v25 = v44;
            float32x2_t v26 = v45;
          }
          else
          {
            *v26++ = *v80;
          }
          if ((unint64_t)v28 >= v79)
          {
            uint64_t v47 = (v28 - v27) >> 3;
            unint64_t v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 61) {
LABEL_136:
            }
              sub_25B3FBC4C();
            if ((uint64_t)(v79 - (void)v27) >> 2 > v48) {
              unint64_t v48 = (uint64_t)(v79 - (void)v27) >> 2;
            }
            if (v79 - (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v49 = v48;
            }
            if (v49) {
              unint64_t v49 = (unint64_t)sub_25B3FCAD4(v49);
            }
            else {
              uint64_t v50 = 0;
            }
            uint64_t v51 = (float32x2_t *)(v49 + 8 * v47);
            float32x2_t *v51 = *v80;
            uint64_t v39 = (uint64_t)&v51[1];
            while (v28 != v27)
            {
              float32x2_t v52 = *(float32x2_t *)(v28 - 8);
              v28 -= 8;
              v51[-1] = v52;
              --v51;
            }
            unint64_t v79 = v49 + 8 * v50;
            if (v27) {
              operator delete(v27);
            }
            int v27 = (char *)v51;
          }
          else
          {
            *(float32x2_t *)int32x2_t v28 = *v80;
            uint64_t v39 = (uint64_t)(v28 + 8);
          }
          int v53 = ((unint64_t)((char *)v26 - (char *)v25) >> 3) - 1;
          if ((unint64_t)v30 < v78)
          {
            *(_DWORD *)int32x2_t v30 = v53;
            unint64_t v54 = v30 + 4;
LABEL_101:
            BOOL v61 = v54;
            goto LABEL_102;
          }
          uint64_t v75 = v39;
          uint64_t v55 = v26;
          uint64_t v56 = (v30 - v29) >> 2;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v78 - (void)v29) >> 1 > v57) {
            unint64_t v57 = (uint64_t)(v78 - (void)v29) >> 1;
          }
          if (v78 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v58 = v57;
          }
          if (v58) {
            unint64_t v58 = (unint64_t)sub_25B3FBC64(v58);
          }
          else {
            uint64_t v59 = 0;
          }
          long long v60 = (char *)(v58 + 4 * v56);
          *(_DWORD *)long long v60 = v53;
          BOOL v61 = v60 + 4;
          float32x2_t v26 = v55;
          while (v30 != v29)
          {
            int v62 = *((_DWORD *)v30 - 1);
            v30 -= 4;
            *((_DWORD *)v60 - 1) = v62;
            v60 -= 4;
          }
          unint64_t v78 = v58 + 4 * v59;
          uint64_t v39 = v75;
          if (v29)
          {
LABEL_90:
            int v63 = v29;
            int v64 = v61;
            operator delete(v63);
            BOOL v61 = v64;
          }
        }
        else
        {
          uint64_t v32 = 0;
          if (v31 <= 1) {
            uint64_t v33 = 1;
          }
          else {
            uint64_t v33 = v26 - v25;
          }
          while (1)
          {
            float32x2_t v34 = v25[v32];
            float32x2_t v35 = vsub_f32(*v80, v34);
            if (sqrtf(vaddv_f32(vmul_f32(v35, v35))) < 2.0) {
              break;
            }
            if (v33 == ++v32) {
              goto LABEL_31;
            }
          }
          if ((unint64_t)v28 >= v79)
          {
            uint64_t v40 = (v28 - v27) >> 3;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v79 - (void)v27) >> 2 > v41) {
              unint64_t v41 = (uint64_t)(v79 - (void)v27) >> 2;
            }
            if (v79 - (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v41;
            }
            if (v42)
            {
              unint64_t v42 = (unint64_t)sub_25B3FCAD4(v42);
              float32x2_t v34 = v25[v32];
            }
            else
            {
              uint64_t v43 = 0;
            }
            BOOL v65 = (float32x2_t *)(v42 + 8 * v40);
            float32x2_t *v65 = v34;
            unint64_t v76 = v65 + 1;
            while (v28 != v27)
            {
              float32x2_t v66 = *(float32x2_t *)(v28 - 8);
              v28 -= 8;
              v65[-1] = v66;
              --v65;
            }
            unint64_t v79 = v42 + 8 * v43;
            if (v27) {
              operator delete(v27);
            }
            int v27 = (char *)v65;
            uint64_t v39 = (uint64_t)v76;
          }
          else
          {
            *(float32x2_t *)int32x2_t v28 = v34;
            uint64_t v39 = (uint64_t)(v28 + 8);
          }
          if ((unint64_t)v30 < v78)
          {
            *(_DWORD *)int32x2_t v30 = v32;
            unint64_t v54 = v30 + 4;
            goto LABEL_101;
          }
          uint64_t v67 = (v30 - v29) >> 2;
          unint64_t v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v78 - (void)v29) >> 1 > v68) {
            unint64_t v68 = (uint64_t)(v78 - (void)v29) >> 1;
          }
          if (v78 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v69 = v68;
          }
          if (v69) {
            unint64_t v69 = (unint64_t)sub_25B3FBC64(v69);
          }
          else {
            uint64_t v70 = 0;
          }
          long long v60 = (char *)(v69 + 4 * v67);
          *(_DWORD *)long long v60 = v32;
          BOOL v61 = v60 + 4;
          while (v30 != v29)
          {
            int v71 = *((_DWORD *)v30 - 1);
            v30 -= 4;
            *((_DWORD *)v60 - 1) = v71;
            v60 -= 4;
          }
          unint64_t v78 = v69 + 4 * v70;
          if (v29) {
            goto LABEL_90;
          }
        }
        float32x2_t v29 = v60;
LABEL_102:
        int32x2_t v28 = (char *)v39;
        int32x2_t v30 = v61;
        if (++v80 == v9) {
          goto LABEL_120;
        }
      }
    }
    float32x2_t v25 = 0;
    float32x2_t v26 = 0;
    int v27 = 0;
    uint64_t v39 = 0;
    float32x2_t v29 = 0;
    BOOL v61 = 0;
LABEL_120:
    uint64_t v72 = (uint64_t)v61;
    long long v81 = 0uLL;
    uint64_t v82 = 0;
    sub_25B400390(&v81, v25, (uint64_t)v26, v26 - v25);
    memset(v83, 0, sizeof(v83));
    sub_25B400390(v83, v27, v39, (v39 - (uint64_t)v27) >> 3);
    memset(__p, 0, 24);
    sub_25B3FC724(__p, v29, v72, (v72 - (uint64_t)v29) >> 2);
    if (v29) {
      operator delete(v29);
    }
    if (v27) {
      operator delete(v27);
    }
    if (v25) {
      operator delete(v25);
    }
    *(_OWORD *)a1 = v81;
    unint64_t v73 = __p[0];
    a1[2] = v82;
    if (v73) {
      operator delete(v73);
    }
    if (v83[0]) {
      operator delete(v83[0]);
    }
  }
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_25B40F6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15)
  {
    operator delete(a15);
    if (!v18)
    {
LABEL_5:
      if (!v20) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  else if (!v18)
  {
    goto LABEL_5;
  }
  operator delete(v18);
  if (!v20)
  {
LABEL_6:
    if (!v19) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v20);
  if (!v19)
  {
LABEL_7:
    if (!v21) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_13:
  operator delete(v19);
  if (!v21) {
LABEL_9:
  }
    _Unwind_Resume(exception_object);
LABEL_8:
  operator delete(v21);
  goto LABEL_9;
}

void *sub_25B40F7EC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    BOOL result = sub_25B40F000(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25B40F84C(_Unwind_Exception *exception_object)
{
  float32x2_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id sub_25B40F868(void *a1, uint64_t *a2, void *a3, int a4, float a5, float a6, float a7)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  id v77 = a1;
  objc_msgSend_array(MEMORY[0x263EFF980], v9, v10);
  id v76 = (id)objc_claimAutoreleasedReturnValue();
  if (a4)
  {
    float32x4_t v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    obuint64_t j = v77;
    float32x4_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v15, (uint64_t)&v91, v96, 16);
    if (v18)
    {
      unint64_t v19 = 0;
      uint64_t v84 = *(void *)v92;
      do
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          if (*(void *)v92 != v84) {
            objc_enumerationMutation(obj);
          }
          unint64_t v21 = *(void **)(*((void *)&v91 + 1) + 8 * i);
          objc_msgSend_quad(v21, v16, v17);
          float32x2_t v86 = v24;
          if ((unint64_t)v14 >= v19)
          {
            uint64_t v26 = v14 - v13;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v19 - (void)v13) >> 2 > v27) {
              unint64_t v27 = (uint64_t)(v19 - (void)v13) >> 2;
            }
            if (v19 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v27;
            }
            if (v28) {
              unint64_t v28 = (unint64_t)sub_25B3FCAD4(v28);
            }
            else {
              uint64_t v22 = 0;
            }
            float32x2_t v29 = (float32x2_t *)(v28 + 8 * v26);
            float32x2_t *v29 = v86;
            float32x2_t v25 = v29 + 1;
            while (v14 != v13)
            {
              float32x2_t v30 = v14[-1];
              --v14;
              v29[-1] = v30;
              --v29;
            }
            unint64_t v19 = v28 + 8 * (void)v22;
            if (v13) {
              operator delete(v13);
            }
            float32x4_t v13 = v29;
          }
          else
          {
            *uint64_t v14 = v24;
            float32x2_t v25 = v14 + 1;
          }
          objc_msgSend_quad(v21, v22, v23);
          float32x2_t v87 = v31;
          if ((unint64_t)v25 >= v19)
          {
            uint64_t v32 = v25 - v13;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v19 - (void)v13) >> 2 > v33) {
              unint64_t v33 = (uint64_t)(v19 - (void)v13) >> 2;
            }
            if (v19 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v33;
            }
            if (v34) {
              unint64_t v34 = (unint64_t)sub_25B3FCAD4(v34);
            }
            else {
              uint64_t v16 = 0;
            }
            float32x2_t v35 = (float32x2_t *)(v34 + 8 * v32);
            *float32x2_t v35 = v87;
            uint64_t v14 = v35 + 1;
            while (v25 != v13)
            {
              float32x2_t v36 = v25[-1];
              --v25;
              v35[-1] = v36;
              --v35;
            }
            unint64_t v19 = v34 + 8 * (void)v16;
            if (v13) {
              operator delete(v13);
            }
            float32x4_t v13 = v35;
          }
          else
          {
            float32x2_t *v25 = v31;
            uint64_t v14 = v25 + 1;
          }
        }
        uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v16, (uint64_t)&v91, v96, 16);
      }
      while (v18);
    }
  }
  unint64_t v37 = 0;
  float v78 = 180.0 - a6;
  while (objc_msgSend_count(v77, v11, v12) > v37)
  {
    uint64_t v39 = objc_msgSend_objectAtIndexedSubscript_(v77, v38, v37);
    float32x2_t v40 = (float32x2_t)sub_25B477C40(v39).n128_u64[0];
    float32x2_t v42 = v41;
    v90[0] = v40;
    v90[1] = v41;

    uint64_t v43 = *a2;
    if (a2[1] == *a2) {
      goto LABEL_77;
    }
    unint64_t v44 = 0;
    float32x2_t v45 = vsub_f32(v40, v42);
    float v85 = fmaxf(sqrtf(vaddv_f32(vmul_f32(v45, v45))), 0.000001);
    float32x2_t v46 = vsub_f32(v42, v40);
    float v47 = vaddv_f32(vmul_f32(v46, v46));
    if (v47 < 0.000001) {
      float v47 = 0.000001;
    }
    float obja = v47;
    char v48 = 1;
    do
    {
      if (*(_DWORD *)(*a3 + 4 * v44) == a4)
      {
        unint64_t v49 = (float32x2_t *)(v43 + 16 * v44);
        float v50 = sub_25B3FCCE0(v90, v49, 0);
        float32x2_t v51 = *v49;
        float32x2_t v52 = v49[1];
        sub_25B40D638();
        float32x2_t v55 = vsub_f32(v53, v54);
        float v56 = sqrtf(vaddv_f32(vmul_f32(v55, v55))) / v85;
        sub_25B40D638();
        float32x2_t v59 = vsub_f32(v57, v58);
        float32x2_t v60 = vsub_f32(v51, v52);
        float v61 = sqrtf(vaddv_f32(vmul_f32(v59, v59))) / fmaxf(sqrtf(vaddv_f32(vmul_f32(v60, v60))), 0.000001);
        if (v56 >= v61) {
          float v61 = v56;
        }
        if (v61 > a5)
        {
          float32x2_t v62 = vsub_f32(vmla_n_f32(v40, v46, vaddv_f32(vmul_f32(vsub_f32(v52, v40), v46)) / obja), v52);
          float32x2_t v63 = vsub_f32(vmla_n_f32(v40, v46, vaddv_f32(vmul_f32(vsub_f32(v51, v40), v46)) / obja), v51);
          float v64 = (float)(sqrtf(vaddv_f32(vmul_f32(v63, v63))) + sqrtf(vaddv_f32(vmul_f32(v62, v62)))) * 0.5;
          if (a4 || v64 >= a7)
          {
            if (a4 == 1 && v64 < a7 && (v50 <= a6 || v50 >= v78)) {
              goto LABEL_78;
            }
            goto LABEL_75;
          }
          if (v50 <= a6 || v50 >= v78)
          {
            BOOL v65 = operator new(0x10uLL);
            void *v65 = v40;
            v65[1] = v42;
            int v95 = 0;
            sub_25B40FF0C(__p, 2uLL, &v95);
            if (v13 != v14)
            {
              float32x2_t v66 = v13;
              do
              {
                char v67 = 0;
                uint64_t v68 = 0;
                unint64_t v69 = __p[0];
                do
                {
                  char v70 = v67;
                  float32x2_t v71 = vsub_f32((float32x2_t)v65[v68], *v66);
                  if (sqrtf(vaddv_f32(vmul_f32(v71, v71))) < 0.2) {
                    ++v69[v68];
                  }
                  char v67 = 1;
                  uint64_t v68 = 1;
                }
                while ((v70 & 1) == 0);
                ++v66;
              }
              while (v66 != v14);
            }
            if (*(_DWORD *)__p[0] == 1)
            {
              BOOL v72 = 0;
              char v48 = 0;
            }
            else
            {
              BOOL v72 = *((_DWORD *)__p[0] + 1) != 1;
              v48 &= v72;
            }
            __p[1] = __p[0];
            operator delete(__p[0]);
            operator delete(v65);
            if (!v72) {
              break;
            }
          }
        }
      }
LABEL_75:
      ++v44;
      uint64_t v43 = *a2;
    }
    while (v44 < (a2[1] - *a2) >> 4);
    if (v48)
    {
LABEL_77:
      unint64_t v73 = objc_msgSend_objectAtIndexedSubscript_(v77, v11, v37);
      objc_msgSend_addObject_(v76, v74, (uint64_t)v73);
    }
LABEL_78:
    ++v37;
  }
  if (v13) {
    operator delete(v13);
  }

  return v76;
}

void sub_25B40FE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void *sub_25B40FF0C(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_25B3FCA18(a1, a2);
    unint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_25B40FF74(_Unwind_Exception *exception_object)
{
  float32x2_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B410220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  *(void *)(v14 + 224) = v15;
  sub_25B400248(*(char **)(v14 + 248));
  a14 = (void **)(v14 + 200);
  sub_25B41026C(&a14);
  a14 = (void **)(v14 + 176);
  sub_25B41032C(&a14);
  sub_25B41032C(&a14);

  _Unwind_Resume(a1);
}

void sub_25B41026C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    float32x2_t v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = v4 - 96;
      uint64_t v7 = v4 - 96;
      uint64_t v8 = v4 - 96;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 96;
        (*v9)(v7);
        v6 -= 96;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      float32x2_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B41032C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_25B410380((uint64_t *)v2);
    float32x2_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_25B410380(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_25B4103D0(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1C98;
  sub_25B400248(*(char **)(a1 + 24));

  JUMPOUT(0x261163EE0);
}

uint64_t sub_25B410438(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1C98;
  sub_25B400248(*(char **)(a1 + 24));
  return a1;
}

void sub_25B410488()
{
}

void sub_25B4104A0()
{
}

void sub_25B4104B8()
{
}

void sub_25B4104D0()
{
}

uint64_t sub_25B4104F0(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1B58;
  uint64_t v2 = *(void **)(a1 + 344);
  float32x2_t v3 = (void *)(a1 + 352);
  if (v2 != (void *)(a1 + 352))
  {
    do
    {
      CVPixelBufferRelease((CVPixelBufferRef)v2[7]);
      uint64_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          float32x2_t v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          float32x2_t v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  sub_25B41068C(*(void **)(a1 + 376));
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  sub_25B400248(*(char **)(a1 + 352));
  sub_25B4D7170(a1 + 272);
  *(void *)a1 = &unk_2708F1C68;
  uint64_t v7 = *(void *)(a1 + 256);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 264);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *(void *)(a1 + 216) = &unk_2708F1C98;
  sub_25B400248(*(char **)(a1 + 240));
  BOOL v10 = (void **)(a1 + 192);
  sub_25B41026C(&v10);
  BOOL v10 = (void **)(a1 + 168);
  sub_25B41032C(&v10);
  BOOL v10 = (void **)(a1 + 144);
  sub_25B41032C(&v10);

  return a1;
}

void sub_25B41068C(void *a1)
{
  if (a1)
  {
    sub_25B41068C(*a1);
    sub_25B41068C(a1[1]);
    sub_25B4106E0((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_25B4106E0(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_2708F2218;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (v2) {
    sub_25B404120(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    float32x2_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_25B410754(void *a1)
{
  *a1 = &unk_2708F2218;
  uint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B4107C0(void *a1)
{
  *a1 = &unk_2708F2218;
  uint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

void sub_25B410A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v28 = 0;
  while (1)
  {
    if (*(char *)(v26 + v28 + 47) < 0) {
      operator delete(*(void **)(v26 + v28 + 24));
    }
    v28 -= 24;
    if (v28 == -48)
    {
      if (a14 < 0) {
        operator delete(__p);
      }

      _Unwind_Resume(a1);
    }
  }
}

id sub_25B410ACC(uint64_t a1, void *a2, void *a3, void *a4, int a5)
{
  uint64_t v670 = *MEMORY[0x263EF8340];
  id v578 = a2;
  id v576 = a3;
  id v577 = a4;
  if (a1)
  {
    if (*(unsigned char *)(a1 + 400))
    {
      id v579 = (id)objc_msgSend_copy(v578, v8, v9);
      v610 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v10, v11);
      uint64_t v14 = objc_msgSend_curvedWalls(v579, v12, v13);
      uint64_t v17 = objc_msgSend_count(v14, v15, v16);

      unint64_t v20 = 0x263EFF000uLL;
      uint64_t v580 = a1;
      if (v17)
      {
        v596 = objc_msgSend_array(MEMORY[0x263EFF980], v18, v19);
        uint64_t v23 = objc_msgSend_walls(v579, v21, v22);
        objc_msgSend_addObjectsFromArray_(v596, v24, (uint64_t)v23);

        long long v657 = 0u;
        long long v658 = 0u;
        long long v655 = 0u;
        long long v656 = 0u;
        objc_msgSend_curvedWalls(v579, v25, v26);
        obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v27, (uint64_t)&v655, v669, 16);
        if (!v30) {
          goto LABEL_100;
        }
        uint64_t v593 = *(void *)v656;
        while (1)
        {
          uint64_t v31 = 0;
          uint64_t v600 = v30;
          do
          {
            if (*(void *)v656 != v593) {
              objc_enumerationMutation(obj);
            }
            uint64_t v32 = *(float32x2_t **)(*((void *)&v655 + 1) + 8 * v31);
            float32x2_t v35 = objc_msgSend_array(*(void **)(v20 + 2432), v28, v29);
            uint64_t v604 = v31;
            int __p = v35;
            if (v32)
            {
              unint64_t v37 = objc_msgSend_array(MEMORY[0x263EFF980], v33, v34);
              float v39 = v32[42].f32[1];
              float v40 = v32[43].f32[0];
              if (v40 >= v39)
              {
                v38.i32[0] = v32[42].i32[0];
                int32x2_t v620 = v38;
                float32x2_t v41 = v32[45];
                int v42 = (int)(float)(v39 * 10.0);
                int v43 = (int)(float)((float)(v40 + -2.5) * 10.0);
                if (v42 >= v43)
                {
                  float32x2_t v55 = 0;
                  float32x2_t v45 = 0;
                  unint64_t v46 = 0;
                }
                else
                {
                  unint64_t v44 = 0;
                  float32x2_t v45 = 0;
                  unint64_t v46 = 0;
                  do
                  {
                    float v47 = (float)v42 / 10.0;
                    if ((unint64_t)v45 >= v46)
                    {
                      uint64_t v48 = v45 - v44;
                      unint64_t v49 = v48 + 1;
                      if ((unint64_t)(v48 + 1) >> 62) {
                        sub_25B3FBC4C();
                      }
                      if ((uint64_t)(v46 - (void)v44) >> 1 > v49) {
                        unint64_t v49 = (uint64_t)(v46 - (void)v44) >> 1;
                      }
                      if (v46 - (unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v50 = v49;
                      }
                      if (v50) {
                        unint64_t v50 = (unint64_t)sub_25B3FBC64(v50);
                      }
                      else {
                        float32x2_t v36 = 0;
                      }
                      float32x2_t v51 = (float *)(v50 + 4 * v48);
                      float *v51 = v47;
                      float32x2_t v52 = v51 + 1;
                      while (v45 != v44)
                      {
                        int v53 = *((_DWORD *)v45-- - 1);
                        *((_DWORD *)v51-- - 1) = v53;
                      }
                      unint64_t v46 = v50 + 4 * (void)v36;
                      if (v44) {
                        operator delete(v44);
                      }
                      unint64_t v44 = v51;
                      float32x2_t v45 = v52;
                    }
                    else
                    {
                      *v45++ = v47;
                    }
                    v42 += 50;
                  }
                  while (v42 < v43);
                  if ((unint64_t)v45 < v46)
                  {
                    float *v45 = v40;
                    float32x2_t v54 = v45 + 1;
                    goto LABEL_48;
                  }
                  float32x2_t v55 = v44;
                }
                uint64_t v56 = v45 - v55;
                unint64_t v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v46 - (void)v55) >> 1 > v57) {
                  unint64_t v57 = (uint64_t)(v46 - (void)v55) >> 1;
                }
                if (v46 - (unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v58 = v57;
                }
                if (v58) {
                  unint64_t v58 = (unint64_t)sub_25B3FBC64(v58);
                }
                unint64_t v44 = (float *)(v58 + 4 * v56);
                *unint64_t v44 = v40;
                float32x2_t v54 = v44 + 1;
                while (v45 != v55)
                {
                  int v59 = *((_DWORD *)v45-- - 1);
                  *((_DWORD *)v44-- - 1) = v59;
                }
                if (v55) {
                  operator delete(v55);
                }
LABEL_48:
                if (v44 != v54)
                {
                  float32x2_t v60 = 0;
                  float v61 = 0;
                  unint64_t v62 = 0;
                  float32x2_t v63 = (float32x2_t)vdup_lane_s32(v620, 0);
                  float v64 = v44;
                  do
                  {
                    __float2 v66 = __sincosf_stret(*v64 * 0.017453);
                    float32x2_t v67 = vmla_f32(v41, (float32x2_t)__PAIR64__(LODWORD(v66.__sinval), LODWORD(v66.__cosval)), v63);
                    if ((unint64_t)v61 >= v62)
                    {
                      uint64_t v68 = v61 - v60;
                      unint64_t v69 = v68 + 1;
                      if ((unint64_t)(v68 + 1) >> 61) {
                        sub_25B3FBC4C();
                      }
                      if ((uint64_t)(v62 - (void)v60) >> 2 > v69) {
                        unint64_t v69 = (uint64_t)(v62 - (void)v60) >> 2;
                      }
                      if (v62 - (unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v70 = v69;
                      }
                      if (v70) {
                        unint64_t v70 = (unint64_t)sub_25B3FCAD4(v70);
                      }
                      else {
                        float32x2_t v36 = 0;
                      }
                      float32x2_t v71 = (float32x2_t *)(v70 + 8 * v68);
                      float32x2_t *v71 = v67;
                      BOOL v72 = v71 + 1;
                      while (v61 != v60)
                      {
                        float32x2_t v73 = v61[-1];
                        --v61;
                        v71[-1] = v73;
                        --v71;
                      }
                      unint64_t v62 = v70 + 8 * (void)v36;
                      if (v60) {
                        operator delete(v60);
                      }
                      float32x2_t v60 = v71;
                      float v61 = v72;
                    }
                    else
                    {
                      *v61++ = v67;
                    }
                    ++v64;
                  }
                  while (v64 != v54);
                  uint64_t v74 = (char *)v61 - (char *)v60;
                  if ((unint64_t)((char *)v61 - (char *)v60) >= 0x10)
                  {
                    objc_msgSend_quad(v32, v36, *(void *)&v65);
                    float v625 = v75;
                    objc_msgSend_quad(v32, v76, v77);
                    float v618 = v78;
                    objc_msgSend_quad(v32, v79, v80);
                    float v589 = v81;
                    objc_msgSend_quad(v32, v82, v83);
                    float v87 = v625;
                    if (v618 < v625) {
                      float v87 = v618;
                    }
                    if (v589 < v87) {
                      float v87 = v589;
                    }
                    if (v86 < v87) {
                      float v87 = v86;
                    }
                    float v621 = v87;
                    objc_msgSend_quad(v32, v84, v85);
                    float v619 = v88;
                    objc_msgSend_quad(v32, v89, v90);
                    float v590 = v91;
                    objc_msgSend_quad(v32, v92, v93);
                    float v583 = v94;
                    objc_msgSend_quad(v32, v95, v96);
                    uint64_t v98 = 0;
                    float v99 = v619;
                    if (v619 < v590) {
                      float v99 = v590;
                    }
                    if (v99 < v583) {
                      float v99 = v583;
                    }
                    if (v99 < v97) {
                      float v99 = v97;
                    }
                    float v612 = v99;
                    uint64_t v100 = v74 >> 3;
                    if ((unint64_t)(v74 >> 3) <= 2) {
                      uint64_t v100 = 2;
                    }
                    uint64_t v101 = v100 - 1;
                    do
                    {
                      int v102 = objc_alloc_init(RS3DCurvedSurface);
                      uint64_t v105 = (uint64_t)v102;
                      int v106 = &v60[v98];
                      *(float32x2_t *)&long long v108 = *v106;
                      *(float32x2_t *)&long long v107 = v106[1];
                      long long v109 = v107;
                      *((float *)&v109 + 2) = v612;
                      long long v110 = v108;
                      *((float *)&v110 + 2) = v612;
                      *((float *)&v108 + 2) = v621;
                      *((float *)&v107 + 2) = v621;
                      src[0] = v109;
                      src[1] = v110;
                      long long v664 = v108;
                      long long v665 = v107;
                      if (v102) {
                        objc_copyStruct(v102->_anon_110, src, 64, 1, 0);
                      }
                      uint64_t v111 = objc_msgSend_identifier(v32, v103, v104);
                      sub_25B4FD504(v105, v111);

                      if (v105)
                      {
                        *(_WORD *)(v105 + 104) = 0;
                        *(_DWORD *)(v105 + 116) = -1;
                        *(_DWORD *)(v105 + 120) = v32[14].i32[1];
                        *(_DWORD *)(v105 + 336) = v32[42].i32[0];
                        *(float32x2_t *)(v105 + 360) = v32[45];
                        *(_DWORD *)(v105 + 340) = v32[42].i32[1];
                        *(_DWORD *)(v105 + 344) = v32[43].i32[0];
                      }
                      objc_msgSend_addObject_(v37, v112, v105);

                      ++v98;
                    }
                    while (v101 != v98);
                  }
                  else if (!v60)
                  {
                    goto LABEL_92;
                  }
                  operator delete(v60);
                }
LABEL_92:
                if (v44) {
                  operator delete(v44);
                }
                float32x2_t v35 = __p;
              }
              objc_msgSend_addObjectsFromArray_(v35, v36, (uint64_t)v37);
              goto LABEL_96;
            }
            unint64_t v37 = 0;
            objc_msgSend_addObjectsFromArray_(v35, v33, 0);
LABEL_96:

            int v115 = objc_msgSend_identifier(v32, v113, v114);
            objc_msgSend_setObject_forKeyedSubscript_(v610, v116, (uint64_t)__p, v115);

            objc_msgSend_addObjectsFromArray_(v596, v117, (uint64_t)__p);
            uint64_t v31 = v604 + 1;
            unint64_t v20 = 0x263EFF000;
          }
          while (v604 + 1 != v600);
          uint64_t v118 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v28, (uint64_t)&v655, v669, 16);
          uint64_t v30 = v118;
          if (!v118)
          {
LABEL_100:

            int64_t v119 = v596;
            sub_25B4E664C((uint64_t)v579, v596);
            goto LABEL_113;
          }
        }
      }
      long long v664 = 0u;
      long long v665 = 0u;
      memset(src, 0, sizeof(src));
      int64_t v119 = objc_msgSend_walls(v579, v18, v19);
      uint64_t v122 = objc_msgSend_countByEnumeratingWithState_objects_count_(v119, v121, (uint64_t)src, v669, 16);
      if (v122)
      {
        uint64_t v123 = **(void **)&src[1];
        do
        {
          for (uint64_t i = 0; i != v122; ++i)
          {
            if (**(void **)&src[1] != v123) {
              objc_enumerationMutation(v119);
            }
            int64_t v125 = *(void **)(*((void *)&src[0] + 1) + 8 * i);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              int v128 = objc_msgSend_parentIdentifier(v125, v126, v127);
              long long v130 = objc_msgSend_objectForKey_(v610, v129, (uint64_t)v128);
              BOOL v131 = v130 == 0;

              if (v131)
              {
                unint64_t v134 = objc_msgSend_array(MEMORY[0x263EFF980], v132, v133);
                int v137 = objc_msgSend_parentIdentifier(v125, v135, v136);
                objc_msgSend_setObject_forKeyedSubscript_(v610, v138, (uint64_t)v134, v137);
              }
              BOOL v139 = objc_msgSend_parentIdentifier(v125, v132, v133);
              int v141 = objc_msgSend_objectForKeyedSubscript_(v610, v140, (uint64_t)v139);
              objc_msgSend_addObject_(v141, v142, (uint64_t)v125);
            }
          }
          uint64_t v122 = objc_msgSend_countByEnumeratingWithState_objects_count_(v119, v126, (uint64_t)src, v669, 16);
        }
        while (v122);
      }
LABEL_113:

      if (a5)
      {
        int v627 = 7729;
        uint64_t v628 = 0;
        kdebug_trace();
        id v574 = v576;
        id obja = v579;
        id v573 = v577;
        long long v639 = 0uLL;
        *(void *)&long long v640 = 0;
        kdebug_trace();
        long long v649 = 0u;
        long long v650 = 0u;
        long long v647 = 0u;
        long long v648 = 0u;
        unint64_t v145 = objc_msgSend_walls(obja, v143, v144);
        unint64_t v149 = objc_msgSend_countByEnumeratingWithState_objects_count_(v145, v146, (uint64_t)&v647, v669, 16);
        if (!v149)
        {
          __pa = 0;
          int v150 = 0;
          goto LABEL_305;
        }
        __pa = 0;
        int v150 = 0;
        unint64_t v605 = 0;
        int v151 = 0;
        unint64_t v152 = 0;
        float32x4_t v572 = (float32x4_t)xmmword_25B5F10A0;
        v594 = v145;
        uint64_t v597 = *(void *)v648;
        for (uint64_t j = *(void *)v648; ; uint64_t j = *(void *)v648)
        {
          if (j != v597) {
            objc_enumerationMutation(v145);
          }
          int v154 = *(void **)(*((void *)&v647 + 1) + 8 * v152);
          objc_msgSend_quad(v154, v147, v148, *(_OWORD *)&v572);
          int v156 = v155;
          if ((unint64_t)v150 >= v605)
          {
            uint64_t v157 = v150 - __pa;
            unint64_t v158 = v157 + 1;
            if ((unint64_t)(v157 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v605 - (void)__pa) >> 1 > v158) {
              unint64_t v158 = (uint64_t)(v605 - (void)__pa) >> 1;
            }
            if (v605 - (unint64_t)__pa >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v159 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v159 = v158;
            }
            if (v159) {
              unint64_t v159 = (unint64_t)sub_25B3FBC64(v159);
            }
            else {
              uint64_t v160 = 0;
            }
            long long v161 = (float *)(v159 + 4 * v157);
            *(_DWORD *)long long v161 = v156;
            long long v162 = v161 + 1;
            if (v150 == __pa)
            {
              long long v163 = __pa;
            }
            else
            {
              long long v163 = __pa;
              do
              {
                int v164 = *((_DWORD *)v150-- - 1);
                *((_DWORD *)v161-- - 1) = v164;
              }
              while (v150 != __pa);
            }
            unint64_t v605 = v159 + 4 * v160;
            if (v163) {
              operator delete(v163);
            }
            __pa = v161;
            int v150 = v162;
          }
          else
          {
            *(_DWORD *)v150++ = v155;
          }
          long long v165 = v154;
          uint64_t v168 = objc_msgSend_identifier(v165, v166, v167);
          objc_msgSend_UUIDString(v168, v169, v170);
          id v171 = objc_claimAutoreleasedReturnValue();
          float32x2_t v174 = (char *)objc_msgSend_UTF8String(v171, v172, v173);
          sub_25B403500(src, v174);

          unint64_t v613 = v152;
          unint64_t v622 = v149;
          uint64_t v176 = *(void *)(v580 + 200);
          uint64_t v177 = *(void *)(v580 + 208);
          if (v176 == v177)
          {
            int v206 = -1;
            goto LABEL_184;
          }
          int v601 = v151;
          float v178 = 0;
          float v179 = 0;
          unint64_t v180 = 0;
          float32x2_t v181 = 0;
          int v182 = 0;
          do
          {
            uint64_t v183 = *(unsigned __int8 *)(v176 + 31);
            size_t v184 = *(void *)(v176 + 16);
            if ((v183 & 0x80u) == 0) {
              uint64_t v185 = *(unsigned __int8 *)(v176 + 31);
            }
            else {
              uint64_t v185 = *(void *)(v176 + 16);
            }
            uint64_t v186 = BYTE7(src[1]);
            if (SBYTE7(src[1]) < 0) {
              uint64_t v186 = *((void *)&src[0] + 1);
            }
            if (v185 == v186)
            {
              if ((SBYTE7(src[1]) & 0x80u) == 0) {
                float32x2_t v175 = src;
              }
              else {
                float32x2_t v175 = *(_OWORD **)&src[0];
              }
              if ((v183 & 0x80) != 0)
              {
                if (memcmp(*(const void **)(v176 + 8), v175, v184)) {
                  goto LABEL_172;
                }
LABEL_155:
                if ((unint64_t)v181 >= v180)
                {
                  uint64_t v188 = v181 - v178;
                  unint64_t v189 = v188 + 1;
                  if ((unint64_t)(v188 + 1) >> 62) {
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v180 - (void)v178) >> 1 > v189) {
                    unint64_t v189 = (uint64_t)(v180 - (void)v178) >> 1;
                  }
                  if (v180 - (unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v190 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v190 = v189;
                  }
                  if (v190)
                  {
                    unint64_t v190 = (unint64_t)sub_25B3FBC64(v190);
                    float32x2_t v181 = v179;
                  }
                  else
                  {
                    float32x2_t v175 = 0;
                  }
                  unint64_t v191 = (int *)(v190 + 4 * v188);
                  *unint64_t v191 = v182;
                  float v179 = v191 + 1;
                  while (v181 != v178)
                  {
                    int v192 = *--v181;
                    *--unint64_t v191 = v192;
                  }
                  unint64_t v180 = v190 + 4 * (void)v175;
                  if (v178) {
                    operator delete(v178);
                  }
                  float v178 = v191;
                  float32x2_t v181 = v179;
                }
                else
                {
                  *v181++ = v182;
                  float v179 = v181;
                }
                goto LABEL_172;
              }
              if (!*(unsigned char *)(v176 + 31)) {
                goto LABEL_155;
              }
              uint64_t v187 = 0;
              while (*(unsigned __int8 *)(v176 + v187 + 8) == *((unsigned __int8 *)v175 + v187))
              {
                if (v183 == ++v187) {
                  goto LABEL_155;
                }
              }
            }
LABEL_172:
            ++v182;
            v176 += 96;
          }
          while (v176 != v177);
          BOOL v193 = v181 == v178;
          unint64_t v145 = v594;
          int v151 = v601;
          if (!v193 && v165 && v165[29])
          {
            int v194 = *v178;
            uint64_t v195 = *(void *)(v580 + 200);
            objc_msgSend_quad(v165, (const char *)v175, v184);
            float32x4_t v584 = v196;
            float32x4_t v581 = *(float32x4_t *)(*(void *)(*(void *)(v195 + 96 * v194 + 40) + 40) + 16);
            objc_msgSend_quad(v165, v197, v198);
            float32x4_t v201 = vsubq_f32(v584, v581);
            float v202 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v201, v201)));
            float32x4_t v204 = vsubq_f32(v203, *(float32x4_t *)(*(void *)(*(void *)(v195 + 96 * v194 + 48) - 80) + 64));
            float v205 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v204, v204)));
            if (v202 < v205) {
              float v202 = v205;
            }
            if (v202 <= 0.15)
            {
              objc_msgSend_quad(v165, v199, v200);
              uint64_t v585 = v207;
              objc_msgSend_quad(v165, v208, v209);
              *(void *)&long long v210 = v585;
              *((void *)&v210 + 1) = v211;
              long long v655 = v210;
              sub_25B5618F8((void *)(v195 + 96 * v194), (float32x2_t *)&v655);
              int v206 = *v178;
LABEL_183:
              operator delete(v178);
              goto LABEL_184;
            }
          }
          int v206 = -1;
          if (v178) {
            goto LABEL_183;
          }
LABEL_184:
          if (SBYTE7(src[1]) < 0) {
            operator delete(*(void **)&src[0]);
          }

          unint64_t v149 = v622;
          unint64_t v212 = v613;
          if (v206 != -1)
          {
            uint64_t v213 = *(void *)(v580 + 200) + 96 * v206;
            *(_DWORD *)(v213 + 92) = v151;
            *(unsigned char *)(v213 + 32) = 1;
            uint64_t v214 = *((void *)&v639 + 1);
            if (*((void *)&v639 + 1) >= (unint64_t)v640) {
              goto LABEL_263;
            }
LABEL_259:
            sub_25B561A08(*((uint64_t *)&v639 + 1), v213);
            uint64_t v289 = v214 + 96;
            goto LABEL_264;
          }
          uint64_t v215 = v165;
          v218 = objc_msgSend_identifier(v215, v216, v217);
          objc_msgSend_UUIDString(v218, v219, v220);
          id v221 = objc_claimAutoreleasedReturnValue();
          int v224 = (char *)objc_msgSend_UTF8String(v221, v222, v223);
          sub_25B403500(&v655, v224);

          uint64_t v226 = *(void *)(v580 + 200);
          uint64_t v227 = *(void *)(v580 + 208);
          if (v226 == v227)
          {
            int v288 = -1;
            goto LABEL_255;
          }
          int v602 = v151;
          float32x2_t v228 = 0;
          unint64_t v229 = 0;
          float v230 = 0;
          int v231 = 0;
          while (2)
          {
            uint64_t v232 = *(unsigned __int8 *)(v226 + 31);
            size_t v233 = *(void *)(v226 + 16);
            if ((v232 & 0x80u) == 0) {
              uint64_t v234 = *(unsigned __int8 *)(v226 + 31);
            }
            else {
              uint64_t v234 = *(void *)(v226 + 16);
            }
            uint64_t v235 = BYTE7(v656);
            if (SBYTE7(v656) < 0) {
              uint64_t v235 = *((void *)&v655 + 1);
            }
            if (v234 == v235)
            {
              if ((SBYTE7(v656) & 0x80u) == 0) {
                v225 = &v655;
              }
              else {
                v225 = (long long *)v655;
              }
              if ((v232 & 0x80) != 0)
              {
                if (memcmp(*(const void **)(v226 + 8), v225, v233)) {
                  goto LABEL_224;
                }
              }
              else if (*(unsigned char *)(v226 + 31))
              {
                uint64_t v236 = 0;
                while (*(unsigned __int8 *)(v226 + v236 + 8) == *((unsigned __int8 *)v225 + v236))
                {
                  if (v232 == ++v236) {
                    goto LABEL_207;
                  }
                }
                goto LABEL_224;
              }
LABEL_207:
              if ((unint64_t)v230 >= v229)
              {
                uint64_t v237 = v230 - v228;
                unint64_t v238 = v237 + 1;
                if ((unint64_t)(v237 + 1) >> 62) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v229 - (void)v228) >> 1 > v238) {
                  unint64_t v238 = (uint64_t)(v229 - (void)v228) >> 1;
                }
                if (v229 - (unint64_t)v228 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v239 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v239 = v238;
                }
                if (v239) {
                  unint64_t v239 = (unint64_t)sub_25B3FBC64(v239);
                }
                else {
                  v225 = 0;
                }
                float32x4_t v240 = (int *)(v239 + 4 * v237);
                *float32x4_t v240 = v231;
                unint64_t v241 = v240 + 1;
                while (v230 != v228)
                {
                  int v242 = *--v230;
                  *--float32x4_t v240 = v242;
                }
                unint64_t v229 = v239 + 4 * (void)v225;
                if (v228) {
                  operator delete(v228);
                }
                float32x2_t v228 = v240;
                float v230 = v241;
              }
              else
              {
                *v230++ = v231;
              }
            }
LABEL_224:
            ++v231;
            v226 += 96;
            if (v226 != v227) {
              continue;
            }
            break;
          }
          BOOL v193 = v230 == v228;
          unint64_t v145 = v594;
          int v151 = v602;
          if (!v193 && (!v215 || !v215[29]))
          {
            objc_msgSend_quad(v215, (const char *)v225, v233);
            float32x4_t v586 = v243;
            objc_msgSend_quad(v215, v244, v245);
            float32x4_t v247 = vsubq_f32(v586, v246);
            __n128 v248 = (__n128)vmulq_f32(v247, v247);
            v248.n128_f32[0] = sqrtf(vaddv_f32((float32x2_t)v248.n128_u64[0]));
            if (v248.n128_f32[0] >= 0.5)
            {
              int v249 = *v228;
              uint64_t v250 = *(void *)(v580 + 200);
              uint64_t v251 = (void *)(v250 + 96 * *v228);
              BOOL v252 = sub_25B521148(v251[5], v251[6], v248);
              uint64_t v254 = v250 + 96 * v249;
              int v256 = *(_DWORD *)(v254 + 36);
              v255 = (int *)(v254 + 36);
              BOOL v257 = v256 > 3 && v252;
              if (v257
                || ((BOOL v258 = sub_25B521148(v251[5], v251[6], v253), *v255 < 2) ? (v260 = 1) : (v260 = v258),
                    (v260 & 1) == 0))
              {
                int *v255 = 0;
              }
              else
              {
                *(void *)&long long v651 = &unk_2708F2160;
                DWORD2(v651) = 0;
                *(_DWORD *)((char *)&v651 + 11) = 0;
                memset(src, 0, 24);
                uint64_t v261 = v250 + 96 * v249;
                uint64_t v264 = *(void *)(v261 + 40);
                float32x2_t v263 = (void *)(v261 + 40);
                uint64_t v262 = v264;
                uint64_t v265 = v263[1];
                if (v264 != v265)
                {
                  int v266 = 0;
                  int v267 = 0;
                  int32x4_t v268 = 0uLL;
                  do
                  {
                    for (uint64_t k = *(void *)(v262 + 96); k != *(void *)(v262 + 104); k += 16)
                    {
                      ++v267;
                      v266 += *(unsigned __int8 *)(k + 12);
                      v259.i32[0] = *(_DWORD *)(k + 8);
                      int32x2_t v259 = (int32x2_t)vmovl_u8((uint8x8_t)v259).u64[0];
                      int32x4_t v268 = (int32x4_t)vaddw_u16((uint32x4_t)v268, (uint16x4_t)v259);
                    }
                    v262 += 120;
                  }
                  while (v262 != v265);
                  if (v267)
                  {
                    *(float *)v259.i32 = (float)v267;
                    int16x8_t v270 = (int16x8_t)vcgtq_f32(vdivq_f32(vcvtq_f32_s32(v268), (float32x4_t)vdupq_lane_s32(v259, 0)), v572);
                    *(int8x8_t *)v270.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v270), (int8x8_t)0x1000100010001);
                    DWORD2(v651) = vmovn_s16(v270).u32[0];
                    BYTE12(v651) = (float)((float)v266 / (float)v267) > 0.5;
                  }
                }
                *(void *)&long long v643 = src;
                sub_25B43925C((void ***)&v643);
                if (BYTE8(v651))
                {
                  objc_msgSend_quad(v215, v271, v272);
                  float32x4_t v587 = v273;
                  float32x4_t v582 = *(float32x4_t *)(*(void *)(*v263 + 40) + 16);
                  objc_msgSend_quad(v215, v274, v275);
                  float32x4_t v278 = vsubq_f32(v587, v582);
                  float v279 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v278, v278)));
                  float32x4_t v281 = vsubq_f32(v280, *(float32x4_t *)(*(void *)(v263[1] - 80) + 64));
                  float v282 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v281, v281)));
                  if (v279 < v282) {
                    float v279 = v282;
                  }
                  if (v279 <= 0.15)
                  {
                    objc_msgSend_quad(v215, v276, v277);
                    uint64_t v588 = v283;
                    objc_msgSend_quad(v215, v284, v285);
                    *(void *)&long long v286 = v588;
                    *((void *)&v286 + 1) = v287;
                    src[0] = v286;
                    sub_25B5618F8(v251, (float32x2_t *)src);
                    ++*v255;
                    int v288 = *v228;
                    goto LABEL_254;
                  }
                }
              }
            }
          }
          int v288 = -1;
          if (v228) {
LABEL_254:
          }
            operator delete(v228);
LABEL_255:
          if (SBYTE7(v656) < 0) {
            operator delete((void *)v655);
          }

          unint64_t v149 = v622;
          unint64_t v212 = v613;
          if (v288 == -1)
          {
            sub_25B561CD0((uint64_t)src, v580 + 8, v574, v215);
            HIDWORD(v668) = v151;
            uint64_t v292 = objc_msgSend_identifier(v215, v290, v291);
            objc_msgSend_UUIDString(v292, v293, v294);
            id v295 = objc_claimAutoreleasedReturnValue();
            unint64_t v298 = (char *)objc_msgSend_UTF8String(v295, v296, v297);
            sub_25B40B504((std::string *)((char *)src + 8), v298);

            LOBYTE(v664) = 0;
            DWORD1(v664) = 0;
            uint64_t v299 = *((void *)&v639 + 1);
            if (*((void *)&v639 + 1) >= (unint64_t)v640)
            {
              uint64_t v301 = sub_25B561B20(&v639, (uint64_t)src);
            }
            else
            {
              **((void **)&v639 + 1) = &unk_2708F1B88;
              if (SHIBYTE(src[1]) < 0)
              {
                sub_25B4002F4((unsigned char *)(v299 + 8), *((void **)&src[0] + 1), *(unint64_t *)&src[1]);
              }
              else
              {
                long long v300 = *(_OWORD *)((char *)src + 8);
                *(void *)(v299 + 24) = *((void *)&src[1] + 1);
                *(_OWORD *)(v299 + 8) = v300;
              }
              uint64_t v302 = v664;
              *(void *)(v299 + 40) = 0;
              *(void *)(v299 + 32) = v302;
              *(void *)(v299 + 48) = 0;
              *(void *)(v299 + 56) = 0;
              sub_25B563B2C(v299 + 40, *((uint64_t *)&v664 + 1), v665, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v665 - *((void *)&v664 + 1)) >> 3));
              *(void *)(v299 + 64) = 0;
              *(void *)(v299 + 72) = 0;
              *(void *)(v299 + 80) = 0;
              sub_25B563B2C(v299 + 64, v666, v667, 0xEEEEEEEEEEEEEEEFLL * ((v667 - v666) >> 3));
              *(void *)(v299 + 88) = v668;
              uint64_t v301 = v299 + 96;
            }
            *((void *)&v639 + 1) = v301;
            sub_25B55E274((uint64_t)src);
          }
          else
          {
            uint64_t v213 = *(void *)(v580 + 200) + 96 * v288;
            *(_DWORD *)(v213 + 92) = v151;
            *(unsigned char *)(v213 + 32) = 1;
            uint64_t v214 = *((void *)&v639 + 1);
            if (*((void *)&v639 + 1) < (unint64_t)v640) {
              goto LABEL_259;
            }
LABEL_263:
            uint64_t v289 = sub_25B561B20(&v639, v213);
LABEL_264:
            *((void *)&v639 + 1) = v289;
          }
          unint64_t v152 = v212 + 1;
          if (v152 >= v149)
          {
            unint64_t v149 = objc_msgSend_countByEnumeratingWithState_objects_count_(v145, v147, (uint64_t)&v647, v669, 16);
            if (v149)
            {
              unint64_t v152 = 0;
              goto LABEL_268;
            }
LABEL_305:

            kdebug_trace();
            kdebug_trace();
            v329 = __pa;
            if (v150 == __pa)
            {
              unsigned __int32 v335 = 1076677837;
            }
            else
            {
              v330 = __pa + 1;
              if (__pa + 1 != v150)
              {
                v329 = __pa;
                float v331 = *__pa;
                v332 = __pa + 1;
                do
                {
                  float v333 = *v332++;
                  float v334 = v333;
                  if (v331 < v333)
                  {
                    float v331 = v334;
                    v329 = v330;
                  }
                  v330 = v332;
                }
                while (v332 != v150);
              }
              unsigned __int32 v335 = *(_DWORD *)v329;
            }
            v635[0] = 0;
            v635[1] = 0;
            *(void *)&long long v636 = 0;
            long long v643 = 0u;
            long long v644 = 0u;
            long long v645 = 0u;
            long long v646 = 0u;
            id v624 = v573;
            uint64_t v346 = objc_msgSend_countByEnumeratingWithState_objects_count_(v624, v343, (uint64_t)&v643, src, 16);
            if (v346)
            {
              v347 = 0;
              unint64_t v348 = 0;
              v349 = 0;
              uint64_t v350 = *(void *)v644;
              do
              {
                for (uint64_t m = 0; m != v346; ++m)
                {
                  if (*(void *)v644 != v350) {
                    objc_enumerationMutation(v624);
                  }
                  unsigned __int32 v352 = *(void **)(*((void *)&v643 + 1) + 8 * m);
                  __int32 v353 = objc_msgSend_boxesDict(v352, v344, v345);
                  v355 = objc_msgSend_objectForKeyedSubscript_(v353, v354, @"lshaped");
                  BOOL v356 = v355 == 0;

                  if (!v356)
                  {
                    v357 = objc_msgSend_boxesDict(v352, v344, v345);
                    long long v359 = objc_msgSend_objectForKeyedSubscript_(v357, v358, @"lshaped");
                    sub_25B445344((uint64_t)&v655, v359);
                    if ((unint64_t)v349 >= v348)
                    {
                      uint64_t v366 = (v349 - v347) >> 7;
                      unint64_t v367 = v366 + 1;
                      if ((unint64_t)(v366 + 1) >> 57)
                      {
                        v635[1] = v349;
                        *(void *)&long long v636 = v348;
                        v635[0] = v347;
                        sub_25B3FBC4C();
                      }
                      if ((uint64_t)(v348 - (void)v347) >> 6 > v367) {
                        unint64_t v367 = (uint64_t)(v348 - (void)v347) >> 6;
                      }
                      if (v348 - (unint64_t)v347 >= 0x7FFFFFFFFFFFFF80) {
                        unint64_t v368 = 0x1FFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v368 = v367;
                      }
                      if (v368) {
                        unint64_t v368 = (unint64_t)sub_25B563C40(v368);
                      }
                      else {
                        uint64_t v369 = 0;
                      }
                      v370 = (_OWORD *)(v368 + (v366 << 7));
                      v370[4] = v659;
                      v370[5] = v660;
                      v370[6] = v661;
                      v370[7] = v662;
                      _OWORD *v370 = v655;
                      v370[1] = v656;
                      v370[2] = v657;
                      v370[3] = v658;
                      if (v349 == v347)
                      {
                        v378 = (char *)(v368 + (v366 << 7));
                      }
                      else
                      {
                        unint64_t v371 = v368 + (v366 << 7);
                        do
                        {
                          long long v372 = *((_OWORD *)v349 - 8);
                          long long v373 = *((_OWORD *)v349 - 7);
                          long long v374 = *((_OWORD *)v349 - 5);
                          *(_OWORD *)(v371 - 96) = *((_OWORD *)v349 - 6);
                          *(_OWORD *)(v371 - 80) = v374;
                          *(_OWORD *)(v371 - 128) = v372;
                          *(_OWORD *)(v371 - 112) = v373;
                          long long v375 = *((_OWORD *)v349 - 4);
                          long long v376 = *((_OWORD *)v349 - 3);
                          long long v377 = *((_OWORD *)v349 - 1);
                          v378 = (char *)(v371 - 128);
                          *(_OWORD *)(v371 - 32) = *((_OWORD *)v349 - 2);
                          *(_OWORD *)(v371 - 16) = v377;
                          *(_OWORD *)(v371 - 64) = v375;
                          *(_OWORD *)(v371 - 48) = v376;
                          v349 -= 128;
                          v371 -= 128;
                        }
                        while (v349 != v347);
                      }
                      unint64_t v348 = v368 + (v369 << 7);
                      v349 = (char *)(v370 + 8);
                      if (v347) {
                        operator delete(v347);
                      }
                      v347 = v378;
                    }
                    else
                    {
                      long long v360 = v655;
                      long long v361 = v656;
                      long long v362 = v658;
                      *((_OWORD *)v349 + 2) = v657;
                      *((_OWORD *)v349 + 3) = v362;
                      *(_OWORD *)v349 = v360;
                      *((_OWORD *)v349 + 1) = v361;
                      long long v363 = v659;
                      long long v364 = v660;
                      long long v365 = v662;
                      *((_OWORD *)v349 + 6) = v661;
                      *((_OWORD *)v349 + 7) = v365;
                      *((_OWORD *)v349 + 4) = v363;
                      *((_OWORD *)v349 + 5) = v364;
                      v349 += 128;
                    }
                  }
                }
                v635[1] = v349;
                *(void *)&long long v636 = v348;
                v635[0] = v347;
                uint64_t v346 = objc_msgSend_countByEnumeratingWithState_objects_count_(v624, v344, (uint64_t)&v643, src, 16);
              }
              while (v346);
            }

            v379 = (void *)v580;
            v380.n128_u32[0] = v335;
            sub_25B5C0130((float *)(v580 + 64), (uint64_t *)&v639, (uint64_t *)v635, v380);
            sub_25B563C78(*(void *)(v580 + 264), (void *)v639, *((void **)&v639 + 1), v381, v382, v383, v384, v385, v386);
            uint64_t v389 = *((void *)&v639 + 1);
            if (*((void *)&v639 + 1) == (void)v639)
            {
              uint64_t v403 = *((void *)&v639 + 1);
              goto LABEL_451;
            }
            unint64_t v390 = 0;
            uint64_t v599 = v580 + 224;
            while (2)
            {
              v391 = objc_msgSend_walls(obja, v387, v388);
              v393 = objc_msgSend_objectAtIndexedSubscript_(v391, v392, v390);

              v396 = objc_msgSend_identifier(v393, v394, v395);
              objc_msgSend_UUIDString(v396, v397, v398);
              id v399 = objc_claimAutoreleasedReturnValue();
              v402 = (char *)objc_msgSend_UTF8String(v399, v400, v401);
              sub_25B403500(v633, v402);

              if (*(unsigned char *)(v639 + 96 * v390 + 32)) {
                goto LABEL_352;
              }
              uint64_t v405 = *(void *)(v580 + 200);
              uint64_t v404 = *(void *)(v580 + 208);
              if (v404 == v405) {
                goto LABEL_352;
              }
              v603 = v393;
              v406 = 0;
              v407 = 0;
              unint64_t v408 = 0;
              v409 = 0;
              unint64_t v410 = 0;
              uint64_t v411 = 8;
LABEL_358:
              unint64_t v412 = v405 + 96 * v410;
              uint64_t v413 = *(unsigned __int8 *)(v412 + 31);
              if ((v413 & 0x80u) == 0) {
                v414 = (void *)*(unsigned __int8 *)(v412 + 31);
              }
              else {
                v414 = *(void **)(v412 + 16);
              }
              unint64_t v415 = v634;
              if ((v634 & 0x80u) != 0) {
                unint64_t v415 = (unint64_t)v633[1];
              }
              if (v414 == (void *)v415)
              {
                if ((v634 & 0x80u) == 0) {
                  v416 = v633;
                }
                else {
                  v416 = (void **)v633[0];
                }
                if ((v413 & 0x80) != 0)
                {
                  if (memcmp(*(const void **)(v412 + 8), v416, *(void *)(v412 + 16))) {
                    goto LABEL_392;
                  }
                }
                else if (*(unsigned char *)(v412 + 31))
                {
                  uint64_t v417 = v411;
                  while (*(unsigned __int8 *)(v405 + v417) == *(unsigned __int8 *)v416)
                  {
                    v416 = (void **)((char *)v416 + 1);
                    ++v417;
                    if (!--v413) {
                      goto LABEL_374;
                    }
                  }
                  goto LABEL_392;
                }
LABEL_374:
                if ((unint64_t)v409 >= v408)
                {
                  uint64_t v418 = v409 - v406;
                  unint64_t v419 = v418 + 1;
                  if ((unint64_t)(v418 + 1) >> 62) {
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v408 - (void)v406) >> 1 > v419) {
                    unint64_t v419 = (uint64_t)(v408 - (void)v406) >> 1;
                  }
                  if (v408 - (unint64_t)v406 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v420 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v420 = v419;
                  }
                  if (v420)
                  {
                    unint64_t v420 = (unint64_t)sub_25B3FBC64(v420);
                    v409 = v407;
                  }
                  else
                  {
                    uint64_t v421 = 0;
                  }
                  v422 = (int *)(v420 + 4 * v418);
                  int *v422 = v410;
                  v407 = v422 + 1;
                  while (v409 != v406)
                  {
                    int v423 = *--v409;
                    *--v422 = v423;
                  }
                  unint64_t v408 = v420 + 4 * v421;
                  if (v406) {
                    operator delete(v406);
                  }
                  v406 = v422;
                }
                else
                {
                  _DWORD *v409 = v410;
                  v407 = v409 + 1;
                }
                uint64_t v405 = *(void *)(v580 + 200);
                uint64_t v404 = *(void *)(v580 + 208);
                v409 = v407;
              }
LABEL_392:
              ++v410;
              v411 += 96;
              if (0xAAAAAAAAAAAAAAABLL * ((v404 - v405) >> 5) <= v410)
              {
                v424 = (void *)(v639 + 96 * v390);
                if (v409 == v406)
                {
                  if (v405 != v404)
                  {
                    uint64_t v426 = v639 + 96 * v390;
                    v427 = (uint64_t *)(v426 + 40);
                    v428 = (uint64_t *)(v426 + 48);
                    do
                    {
                      uint64_t v429 = *v428;
                      uint64_t v430 = *v427;
                      if (*v428 == *v427)
                      {
                        char v432 = 0;
                        LOBYTE(v631) = 0;
                      }
                      else
                      {
                        long long v431 = *(_OWORD *)(*(void *)(v430 + 40) + 16);
                        *((void *)&v431 + 1) = *(void *)(*(void *)(v429 - 80) + 64);
                        long long v631 = v431;
                        char v432 = 1;
                      }
                      char v632 = v432;
                      uint64_t v434 = *(void *)(v405 + 40);
                      uint64_t v433 = *(void *)(v405 + 48);
                      if (v433 != v434)
                      {
                        *(_OWORD *)v615 = *(_OWORD *)(*(void *)(v434 + 40) + 16);
                        *(void *)&long long v435 = *(void *)(*(void *)(v434 + 40) + 16);
                        long long v606 = *(_OWORD *)(*(void *)(v433 - 80) + 64);
                        *((void *)&v435 + 1) = *(void *)(*(void *)(v433 - 80) + 64);
                        long long v629 = v435;
                        char v630 = 1;
                        if (v429 != v430)
                        {
                          sub_25B477E0C((uint64_t)&v651, (float32x2_t *)&v631, (float32x2_t *)&v629);
                          float32x2_t v436 = vsub_f32(*(float32x2_t *)&v631, *(float32x2_t *)((char *)&v631 + 8));
                          int32x2_t v437 = (int32x2_t)vmul_f32(v436, v436);
                          float32x2_t v438 = vsub_f32((float32x2_t)v615[0], *(float32x2_t *)&v606);
                          int32x2_t v439 = (int32x2_t)vmul_f32(v438, v438);
                          float32x2_t v440 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v439, v437), (float32x2_t)vzip2_s32(v439, v437)));
                          if (v440.f32[0] >= v440.f32[1]) {
                            v440.f32[0] = v440.f32[1];
                          }
                          if (v440.f32[0] >= 1.0) {
                            float v441 = 10.0;
                          }
                          else {
                            float v441 = 20.0;
                          }
                          if (*((float *)&v651 + 2) >= 0.3
                            && *((float *)&v652 + 2) < v441
                            && *((float *)&v652 + 1) < 0.2)
                          {
                            sub_25B561A08((uint64_t)&v655, v405);
                            LOBYTE(v661) = 1;
                            sub_25B564E44(v599, (uint64_t)&v655, v424, v442);
                            if ((_BYTE)v661) {
                              sub_25B55E274((uint64_t)&v655);
                            }
                          }
                        }
                      }
                      v405 += 96;
                    }
                    while (v405 != v404);
                  }
                }
                else
                {
                  sub_25B561A08((uint64_t)&v655, v405 + 96 * *v406);
                  LOBYTE(v661) = 1;
                  sub_25B564E44(v599, (uint64_t)&v655, v424, v425);
                  if ((_BYTE)v661) {
                    sub_25B55E274((uint64_t)&v655);
                  }
                }
                v393 = v603;
                if (v406) {
                  operator delete(v406);
                }
LABEL_352:
                if ((char)v634 < 0) {
                  operator delete(v633[0]);
                }

                ++v390;
                uint64_t v389 = *((void *)&v639 + 1);
                uint64_t v403 = v639;
                v379 = (void *)v580;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v639 + 1) - v639) >> 5) <= v390)
                {
LABEL_451:
                  unint64_t v488 = v379[25];
                  uint64_t v487 = v379[26];
                  if (v487 != v488)
                  {
                    uint64_t v489 = v487 - 96;
                    v490 = (void (***)(void))(v487 - 96);
                    v491 = (void (***)(void))(v487 - 96);
                    do
                    {
                      v492 = *v491;
                      v491 -= 12;
                      (*v492)(v490);
                      v489 -= 96;
                      BOOL v193 = v490 == (void (***)(void))v488;
                      v490 = v491;
                    }
                    while (!v193);
                    uint64_t v389 = *((void *)&v639 + 1);
                    uint64_t v403 = v639;
                  }
                  v379[26] = v488;
                  while (v403 != v389)
                  {
                    if (v488 >= v379[27])
                    {
                      unint64_t v488 = sub_25B561B20(v379 + 25, v403);
                    }
                    else
                    {
                      sub_25B561A08(v488, v403);
                      v488 += 96;
                      v379[26] = v488;
                    }
                    v379[26] = v488;
                    v403 += 96;
                  }
                  sub_25B5657EC(&v639, obja);
                  kdebug_trace();
                  if (v635[0]) {
                    operator delete(v635[0]);
                  }
                  if (__pa) {
                    operator delete(__pa);
                  }
                  *(void *)&long long v655 = &v639;
                  sub_25B41026C((void ***)&v655);

                  v486 = (void **)&v627;
                  goto LABEL_467;
                }
                continue;
              }
              goto LABEL_358;
            }
          }
LABEL_268:
          ++v151;
        }
      }
      LODWORD(v635[0]) = 13887;
      v635[1] = 0;
      kdebug_trace();
      id v623 = v576;
      id v598 = v579;
      id v595 = v577;
      long long v643 = 0uLL;
      *(void *)&long long v644 = 0;
      kdebug_trace();
      long long v653 = 0u;
      long long v654 = 0u;
      long long v651 = 0u;
      long long v652 = 0u;
      __pb = objc_msgSend_walls(v598, v303, v304);
      unint64_t v306 = 0;
      uint64_t v309 = objc_msgSend_countByEnumeratingWithState_objects_count_(__pb, v305, (uint64_t)&v651, v669, 16);
      if (v309)
      {
        unint64_t v310 = 0;
        unint64_t v311 = 0;
        int v312 = 0;
        uint64_t v313 = v580 + 8;
        uint64_t v614 = *(void *)v652;
        do
        {
          for (uint64_t n = 0; n != v309; ++n)
          {
            if (*(void *)v652 != v614) {
              objc_enumerationMutation(__pb);
            }
            v315 = *(void **)(*((void *)&v651 + 1) + 8 * n);
            objc_msgSend_quad(v315, v307, v308);
            int v317 = v316;
            if ((unint64_t)v306 >= v310)
            {
              uint64_t v318 = v306 - v311;
              unint64_t v319 = v318 + 1;
              if ((unint64_t)(v318 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v310 - (void)v311) >> 1 > v319) {
                unint64_t v319 = (uint64_t)(v310 - (void)v311) >> 1;
              }
              if (v310 - (unint64_t)v311 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v320 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v320 = v319;
              }
              if (v320) {
                unint64_t v320 = (unint64_t)sub_25B3FBC64(v320);
              }
              else {
                uint64_t v321 = 0;
              }
              BOOL v322 = (float *)(v320 + 4 * v318);
              *(_DWORD *)BOOL v322 = v317;
              v323 = v322 + 1;
              while (v306 != v311)
              {
                int v324 = *((_DWORD *)v306-- - 1);
                *((_DWORD *)v322-- - 1) = v324;
              }
              unint64_t v310 = v320 + 4 * v321;
              if (v311) {
                operator delete(v311);
              }
              unint64_t v311 = v322;
              unint64_t v306 = v323;
            }
            else
            {
              *(_DWORD *)v306++ = v316;
            }
            sub_25B561CD0((uint64_t)src, v313, v623, v315);
            HIDWORD(v668) = v312;
            uint64_t v325 = *((void *)&v643 + 1);
            if (*((void *)&v643 + 1) >= (unint64_t)v644)
            {
              uint64_t v327 = sub_25B561B20(&v643, (uint64_t)src);
            }
            else
            {
              **((void **)&v643 + 1) = &unk_2708F1B88;
              if (SHIBYTE(src[1]) < 0)
              {
                sub_25B4002F4((unsigned char *)(v325 + 8), *((void **)&src[0] + 1), *(unint64_t *)&src[1]);
              }
              else
              {
                long long v326 = *(_OWORD *)((char *)src + 8);
                *(void *)(v325 + 24) = *((void *)&src[1] + 1);
                *(_OWORD *)(v325 + 8) = v326;
              }
              uint64_t v328 = v664;
              *(void *)(v325 + 40) = 0;
              *(void *)(v325 + 32) = v328;
              *(void *)(v325 + 48) = 0;
              *(void *)(v325 + 56) = 0;
              sub_25B563B2C(v325 + 40, *((uint64_t *)&v664 + 1), v665, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v665 - *((void *)&v664 + 1)) >> 3));
              *(void *)(v325 + 64) = 0;
              *(void *)(v325 + 72) = 0;
              *(void *)(v325 + 80) = 0;
              sub_25B563B2C(v325 + 64, v666, v667, 0xEEEEEEEEEEEEEEEFLL * ((v667 - v666) >> 3));
              *(void *)(v325 + 88) = v668;
              uint64_t v327 = v325 + 96;
              uint64_t v313 = v580 + 8;
            }
            *((void *)&v643 + 1) = v327;
            ++v312;
            sub_25B55E274((uint64_t)src);
          }
          uint64_t v309 = objc_msgSend_countByEnumeratingWithState_objects_count_(__pb, v307, (uint64_t)&v651, v669, 16);
        }
        while (v309);
      }
      else
      {
        unint64_t v311 = 0;
      }

      kdebug_trace();
      kdebug_trace();
      if (v306 == v311)
      {
        unsigned __int32 v342 = 1076677837;
      }
      else
      {
        v336 = v311 + 1;
        BOOL v337 = v311;
        if (v311 + 1 != v306)
        {
          float v338 = *v311;
          BOOL v337 = v311;
          v339 = v311 + 1;
          do
          {
            float v340 = *v339++;
            float v341 = v340;
            if (v338 < v340)
            {
              float v338 = v341;
              BOOL v337 = v336;
            }
            v336 = v339;
          }
          while (v339 != v306);
        }
        unsigned __int32 v342 = *(_DWORD *)v337;
      }
      long long v639 = 0uLL;
      *(void *)&long long v640 = 0;
      long long v647 = 0u;
      long long v648 = 0u;
      long long v649 = 0u;
      long long v650 = 0u;
      id v616 = v595;
      v444 = 0;
      uint64_t v447 = objc_msgSend_countByEnumeratingWithState_objects_count_(v616, v443, (uint64_t)&v647, src, 16);
      if (v447)
      {
        unint64_t v448 = 0;
        v449 = 0;
        uint64_t v450 = *(void *)v648;
        do
        {
          for (iuint64_t i = 0; ii != v447; ++ii)
          {
            if (*(void *)v648 != v450) {
              objc_enumerationMutation(v616);
            }
            v452 = *(void **)(*((void *)&v647 + 1) + 8 * ii);
            v453 = objc_msgSend_boxesDict(v452, v445, v446);
            v455 = objc_msgSend_objectForKeyedSubscript_(v453, v454, @"lshaped");
            BOOL v456 = v455 == 0;

            if (!v456)
            {
              v457 = objc_msgSend_boxesDict(v452, v445, v446);
              v459 = objc_msgSend_objectForKeyedSubscript_(v457, v458, @"lshaped");
              sub_25B445344((uint64_t)&v655, v459);
              if ((unint64_t)v449 >= v448)
              {
                uint64_t v466 = (v449 - v444) >> 7;
                unint64_t v467 = v466 + 1;
                if ((unint64_t)(v466 + 1) >> 57)
                {
                  *((void *)&v639 + 1) = v449;
                  *(void *)&long long v640 = v448;
                  *(void *)&long long v639 = v444;
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v448 - (void)v444) >> 6 > v467) {
                  unint64_t v467 = (uint64_t)(v448 - (void)v444) >> 6;
                }
                if (v448 - (unint64_t)v444 >= 0x7FFFFFFFFFFFFF80) {
                  unint64_t v468 = 0x1FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v468 = v467;
                }
                if (v468) {
                  unint64_t v468 = (unint64_t)sub_25B563C40(v468);
                }
                else {
                  uint64_t v469 = 0;
                }
                v470 = (_OWORD *)(v468 + (v466 << 7));
                v470[4] = v659;
                v470[5] = v660;
                v470[6] = v661;
                v470[7] = v662;
                _OWORD *v470 = v655;
                v470[1] = v656;
                v470[2] = v657;
                v470[3] = v658;
                if (v449 == v444)
                {
                  v478 = (char *)(v468 + (v466 << 7));
                }
                else
                {
                  unint64_t v471 = v468 + (v466 << 7);
                  do
                  {
                    long long v472 = *((_OWORD *)v449 - 8);
                    long long v473 = *((_OWORD *)v449 - 7);
                    long long v474 = *((_OWORD *)v449 - 5);
                    *(_OWORD *)(v471 - 96) = *((_OWORD *)v449 - 6);
                    *(_OWORD *)(v471 - 80) = v474;
                    *(_OWORD *)(v471 - 128) = v472;
                    *(_OWORD *)(v471 - 112) = v473;
                    long long v475 = *((_OWORD *)v449 - 4);
                    long long v476 = *((_OWORD *)v449 - 3);
                    long long v477 = *((_OWORD *)v449 - 1);
                    v478 = (char *)(v471 - 128);
                    *(_OWORD *)(v471 - 32) = *((_OWORD *)v449 - 2);
                    *(_OWORD *)(v471 - 16) = v477;
                    *(_OWORD *)(v471 - 64) = v475;
                    *(_OWORD *)(v471 - 48) = v476;
                    v449 -= 128;
                    v471 -= 128;
                  }
                  while (v449 != v444);
                }
                unint64_t v448 = v468 + (v469 << 7);
                v449 = (char *)(v470 + 8);
                if (v444) {
                  operator delete(v444);
                }
                v444 = v478;
              }
              else
              {
                long long v460 = v655;
                long long v461 = v656;
                long long v462 = v658;
                *((_OWORD *)v449 + 2) = v657;
                *((_OWORD *)v449 + 3) = v462;
                *(_OWORD *)v449 = v460;
                *((_OWORD *)v449 + 1) = v461;
                long long v463 = v659;
                long long v464 = v660;
                long long v465 = v662;
                *((_OWORD *)v449 + 6) = v661;
                *((_OWORD *)v449 + 7) = v465;
                *((_OWORD *)v449 + 4) = v463;
                *((_OWORD *)v449 + 5) = v464;
                v449 += 128;
              }
            }
          }
          *((void *)&v639 + 1) = v449;
          *(void *)&long long v640 = v448;
          *(void *)&long long v639 = v444;
          uint64_t v447 = objc_msgSend_countByEnumeratingWithState_objects_count_(v616, v445, (uint64_t)&v647, src, 16);
        }
        while (v447);
      }

      v479.n128_u32[0] = v342;
      sub_25B5C0130((float *)(v580 + 64), (uint64_t *)&v643, (uint64_t *)&v639, v479);
      sub_25B563C78(*(void *)(v580 + 272), (void *)v643, *((void **)&v643 + 1), v480, v481, v482, v483, v484, v485);
      sub_25B5657EC(&v643, v598);
      kdebug_trace();
      if (v444)
      {
        *((void *)&v639 + 1) = v444;
        operator delete(v444);
      }
      if (v311) {
        operator delete(v311);
      }
      *(void *)&long long v655 = &v643;
      sub_25B41026C((void ***)&v655);

      v486 = v635;
LABEL_467:
      sub_25B400F2C((uint64_t)v486);
      id v617 = v579;
      id v493 = v610;
      long long v647 = 0u;
      long long v648 = 0u;
      long long v649 = 0u;
      long long v650 = 0u;
      id v611 = v493;
      v496 = objc_msgSend_allKeys(v493, v494, v495);
      uint64_t v499 = objc_msgSend_countByEnumeratingWithState_objects_count_(v496, v497, (uint64_t)&v647, v669, 16);
      if (v499)
      {
        uint64_t v500 = *(void *)v648;
        do
        {
          for (juint64_t j = 0; jj != v499; ++jj)
          {
            if (*(void *)v648 != v500) {
              objc_enumerationMutation(v496);
            }
            v502 = objc_msgSend_objectForKeyedSubscript_(v611, v498, *(void *)(*((void *)&v647 + 1) + 8 * jj));
            if (objc_msgSend_count(v502, v503, v504))
            {
              v506 = objc_msgSend_objectAtIndexedSubscript_(v502, v505, 0);
              objc_msgSend_quad(v506, v507, v508);
              float v626 = v509;

              float v512 = v626;
              for (kuint64_t k = 1; kk < objc_msgSend_count(v502, v510, v511); ++kk)
              {
                v515 = objc_msgSend_objectAtIndexedSubscript_(v502, v514, kk);
                objc_msgSend_quad(v515, v516, v517);
                if (v512 < v518) {
                  float v512 = v518;
                }
              }
              long long v645 = 0u;
              long long v646 = 0u;
              long long v643 = 0u;
              long long v644 = 0u;
              id v519 = v502;
              uint64_t v521 = objc_msgSend_countByEnumeratingWithState_objects_count_(v519, v520, (uint64_t)&v643, src, 16);
              if (v521)
              {
                uint64_t v522 = *(void *)v644;
                do
                {
                  uint64_t v523 = 0;
                  do
                  {
                    if (*(void *)v644 != v522) {
                      objc_enumerationMutation(v519);
                    }
                    uint64_t v524 = *(void *)(*((void *)&v643 + 1) + 8 * v523);
                    if (v524)
                    {
                      *(float *)(v524 + 280) = v512;
                      *(float *)(v524 + 296) = v512;
                      sub_25B4FD504(v524, 0);
                      *(void *)(v524 + 16) = *(void *)(v524 + 8);
                      *(void *)(v524 + 88) = *(void *)(v524 + 80);
                      *(void *)(v524 + 40) = *(void *)(v524 + 32);
                      *(void *)(v524 + 64) = *(void *)(v524 + 56);
                    }
                    else
                    {
                      sub_25B4FD504(0, 0);
                    }
                    ++v523;
                  }
                  while (v521 != v523);
                  uint64_t v526 = objc_msgSend_countByEnumeratingWithState_objects_count_(v519, v525, (uint64_t)&v643, src, 16);
                  uint64_t v521 = v526;
                }
                while (v526);
              }
            }
          }
          uint64_t v499 = objc_msgSend_countByEnumeratingWithState_objects_count_(v496, v498, (uint64_t)&v647, v669, 16);
        }
        while (v499);
      }

      v529 = objc_msgSend_curvedWalls(v617, v527, v528);
      BOOL v532 = objc_msgSend_count(v529, v530, v531) == 0;

      if (!v532)
      {
        v535 = objc_msgSend_array(MEMORY[0x263EFF980], v533, v534);
        long long v641 = 0u;
        long long v642 = 0u;
        long long v639 = 0u;
        long long v640 = 0u;
        v538 = objc_msgSend_walls(v617, v536, v537);
        uint64_t v540 = objc_msgSend_countByEnumeratingWithState_objects_count_(v538, v539, (uint64_t)&v639, &v655, 16);
        if (v540)
        {
          uint64_t v541 = *(void *)v640;
          do
          {
            for (muint64_t m = 0; mm != v540; ++mm)
            {
              if (*(void *)v640 != v541) {
                objc_enumerationMutation(v538);
              }
              uint64_t v543 = *(void *)(*((void *)&v639 + 1) + 8 * mm);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0) {
                objc_msgSend_addObject_(v535, v544, v543);
              }
            }
            uint64_t v540 = objc_msgSend_countByEnumeratingWithState_objects_count_(v538, v544, (uint64_t)&v639, &v655, 16);
          }
          while (v540);
        }

        sub_25B4E664C((uint64_t)v617, v535);
        long long v638 = 0u;
        long long v636 = 0u;
        long long v637 = 0u;
        *(_OWORD *)v635 = 0u;
        v547 = objc_msgSend_curvedWalls(v617, v545, v546);
        uint64_t v551 = objc_msgSend_countByEnumeratingWithState_objects_count_(v547, v548, (uint64_t)v635, &v651, 16);
        if (v551)
        {
          uint64_t v552 = *(void *)v636;
          do
          {
            uint64_t v553 = 0;
            do
            {
              if (*(void *)v636 != v552) {
                objc_enumerationMutation(v547);
              }
              uint64_t v554 = *((void *)v635[1] + v553);
              v555 = objc_msgSend_identifier((void *)v554, v549, v550);
              v557 = objc_msgSend_objectForKey_(v611, v556, (uint64_t)v555);
              BOOL v558 = v557 == 0;

              if (!v558)
              {
                v559 = objc_msgSend_identifier((void *)v554, v549, v550);
                v561 = objc_msgSend_objectForKeyedSubscript_(v611, v560, (uint64_t)v559);

                if (objc_msgSend_count(v561, v562, v563))
                {
                  v565 = objc_msgSend_objectAtIndexedSubscript_(v561, v564, 0);
                  objc_msgSend_quad(v565, v566, v567);
                  if (v554)
                  {
                    *(_DWORD *)(v554 + 352) = v568;

                    int v569 = *(_DWORD *)(v554 + 352);
                    *(_DWORD *)(v554 + 280) = v569;
                    *(_DWORD *)(v554 + 296) = v569;
                    *(void *)(v554 + 16) = *(void *)(v554 + 8);
                    *(void *)(v554 + 88) = *(void *)(v554 + 80);
                    *(void *)(v554 + 40) = *(void *)(v554 + 32);
                    *(void *)(v554 + 64) = *(void *)(v554 + 56);
                  }
                  else
                  {
                  }
                }
              }
              ++v553;
            }
            while (v551 != v553);
            uint64_t v570 = objc_msgSend_countByEnumeratingWithState_objects_count_(v547, v549, (uint64_t)v635, &v651, 16);
            uint64_t v551 = v570;
          }
          while (v570);
        }
      }
      uint64_t v120 = v578;
      id v578 = v617;
    }
    else
    {
      uint64_t v120 = 0;
    }
  }
  else
  {
    uint64_t v120 = v578;
    id v578 = 0;
  }

  return v578;
}

void sub_25B4130F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,_Unwind_Exception *exception_objecta,uint64_t a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (v58) {
    operator delete(v58);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }

  if (a31) {
    operator delete(a31);
  }
  STACK[0x2C0] = (unint64_t)&a57;
  sub_25B41026C((void ***)&STACK[0x2C0]);

  sub_25B400F2C((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_25B4137C0(uint64_t *a1)
{
  if (a1)
  {
    sub_25B4FDD60(a1[2]);
    uint64_t v3 = a1[25];
    uint64_t v2 = a1[26];
    if (v2 != v3)
    {
      uint64_t v4 = v2 - 96;
      float32x2_t v5 = (void (***)(void))(v2 - 96);
      BOOL v6 = (void (***)(void))(v2 - 96);
      do
      {
        uint64_t v7 = *v6;
        v6 -= 12;
        (*v7)(v5);
        v4 -= 96;
        BOOL v8 = v5 == (void (***)(void))v3;
        float32x2_t v5 = v6;
      }
      while (!v8);
    }
    BOOL v10 = (char *)a1[31];
    uint64_t v9 = a1 + 31;
    *(v9 - 5) = v3;
    sub_25B400248(v10);
    *(v9 - 1) = v9;
    *uint64_t v9 = 0;
    v9[1] = 0;
  }
}

int32x4_t sub_25B41389C(uint64_t a1, uint64_t a2, __n128 a3, double a4)
{
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  long long v7 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  id v12 = *(id *)(a2 + 192);
  *(void *)(a1 + 192) = v12;
  id v13 = *(id *)(a2 + 200);
  *(void *)(a1 + 200) = v13;
  long long v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(void *)(a1 + 48) = a3.n128_u64[0];
  *(void *)a1 = a3.n128_u64[0];
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 32) = a4;
  *(void *)(a1 + 64) = a3.n128_u64[0];
  float v16 = *(float *)(a1 + 40);
  *(double *)(a1 + 80) = a4;
  float32x4_t v17 = vsubq_f32(*(float32x4_t *)(a1 + 64), *(float32x4_t *)(a1 + 80));
  float v18 = v17.f32[1];
  int32x4_t v35 = (int32x4_t)v17;
  float v19 = atan2f(v17.f32[0], v17.f32[1]);
  *(float *)(a1 + 100) = v19;
  __float2 v22 = __sincosf_stret(v19);
  *(float *)&uint64_t v23 = -v22.__sinval;
  HIDWORD(v23) = LODWORD(v22.__cosval);
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = __PAIR64__(LODWORD(v22.__sinval), LODWORD(v22.__cosval));
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = v23;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(void *)(a1 + 144) = 0;
  float32x4_t v24 = vsubq_f32(*(float32x4_t *)a1, *(float32x4_t *)(a1 + 16));
  float32x4_t v25 = vmulq_f32(v24, v24);
  float v26 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
  float v27 = COERCE_FLOAT(*(void *)(a1 + 8));
  float v28 = COERCE_FLOAT(*(void *)(a1 + 24));
  if (v27 >= v28) {
    LODWORD(v29) = *(void *)(a1 + 8);
  }
  else {
    LODWORD(v29) = *(void *)(a1 + 24);
  }
  if (v29 < v16) {
    float v29 = v16;
  }
  if (v28 < v27) {
    LODWORD(v27) = *(void *)(a1 + 24);
  }
  if (v16 < v27) {
    float v27 = v16;
  }
  *(float *)(a1 + 160) = v26;
  *(float *)(a1 + 164) = v27;
  *(float *)(a1 + 168) = v29;
  *(void *)(a1 + 192) = objc_msgSend_copy(*(void **)(a2 + 192), v20, *(void *)&v21, *(_OWORD *)&a3);

  *(void *)(a1 + 200) = objc_msgSend_copy(*(void **)(a2 + 200), v30, v31);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  int32x4_t result = vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v18), v35);
  *(int32x4_t *)(a1 + 176) = result;
  return result;
}

void sub_25B413A40(_Unwind_Exception *a1)
{
  sub_25B413A54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25B413A54(uint64_t a1)
{
  return a1;
}

void *sub_25B413A88(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_25B413D24(a1, a2);
    long long v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    long long v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      void *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      sub_25B3FCA58(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_25B413B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_25B413B44(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_25B413D24(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_25B413BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_25B413BE8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      long long v6 = (char *)v1[1];
      do
      {
        long long v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B413C78(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_25B413CCC((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_25B413CCC(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      long long v6 = *(void **)(v4 - 24);
      v4 -= 24;
      size_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

char *sub_25B413D24(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_25B3FBC4C();
  }
  int32x4_t result = (char *)sub_25B413D74(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_25B413D74(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    sub_25B3FA70C();
  }
  return operator new(24 * a1);
}

void sub_25B413DBC(void *a1, uint64_t *a2, void *a3)
{
  id v5 = a1;
  id v8 = a3;
  unint64_t v9 = 0;
  memset(v72, 0, sizeof(v72));
  int v73 = 1065353216;
  while (v9 < objc_msgSend_count(v5, v6, v7))
  {
    long long v11 = objc_msgSend_objectAtIndexedSubscript_(v5, v10, v9);
    long long v14 = objc_msgSend_identifier(v11, v12, v13);
    objc_msgSend_UUIDString(v14, v15, v16);
    id v17 = objc_claimAutoreleasedReturnValue();
    unint64_t v20 = (char *)objc_msgSend_UTF8String(v17, v18, v19);
    sub_25B403500(__p, v20);
    sub_25B414308((uint64_t)v72, (unsigned __int8 *)__p, (uint64_t)__p);
    if (v71 < 0) {
      operator delete(__p[0]);
    }

    if (((objc_msgSend_isEqualToString_(v8, v21, @"conservative") & 1) != 0
       || (objc_msgSend_isEqualToString_(v8, v22, @"aggressive") & 1) != 0
       || (objc_msgSend_isEqualToString_(v8, v22, @"ultimate") & 1) != 0)
      && (objc_msgSend_type(v11, v22, v23),
          float32x4_t v24 = objc_claimAutoreleasedReturnValue(),
          int isEqualToString = objc_msgSend_isEqualToString_(v24, v25, @"Chair"),
          v24,
          isEqualToString))
    {
      uint64_t v27 = *a2;
      if (a2[1] != *a2)
      {
        uint64_t v28 = 0;
        unint64_t v29 = 0;
        do
        {
          uint64_t v30 = *(void **)(v27 + v28 + 144);
          uint64_t v31 = objc_msgSend_identifier(v11, v22, v23);
          LODWORD(v30) = objc_msgSend_isEqual_(v30, v32, (uint64_t)v31);

          if (v30)
          {
            sub_25B477B80((uint64_t)v11, (__n128 *)(*a2 + v28), v8);
            sub_25B477A04((uint64_t)v11, *(__int16 *)(*a2 + v28 + 184), *(void **)(*a2 + v28 + 176));
          }
          ++v29;
          uint64_t v27 = *a2;
          v28 += 192;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6) > v29);
      }
    }
    else
    {
      uint64_t v33 = *a2;
      if (a2[1] != *a2)
      {
        uint64_t v34 = 0;
        unint64_t v35 = 0;
        do
        {
          float32x2_t v36 = *(void **)(v33 + v34 + 144);
          unint64_t v37 = objc_msgSend_identifier(v11, v22, v23);
          LODWORD(v36) = objc_msgSend_isEqual_(v36, v38, (uint64_t)v37);

          if (v36)
          {
            sub_25B477B80((uint64_t)v11, (__n128 *)(*a2 + v34), v8);
            sub_25B477A04((uint64_t)v11, *(__int16 *)(*a2 + v34 + 184), *(void **)(*a2 + v34 + 176));
          }
          ++v35;
          uint64_t v33 = *a2;
          v34 += 192;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6) > v35);
      }
    }

    ++v9;
  }
  if (objc_msgSend_isEqualToString_(v8, v10, @"lshaped"))
  {
    uint64_t v41 = *a2;
    uint64_t v42 = a2[1];
    if (*a2 != v42)
    {
      id v66 = v5;
      do
      {
        objc_msgSend_UUIDString(*(void **)(v41 + 144), v39, v40);
        id v43 = objc_claimAutoreleasedReturnValue();
        unint64_t v46 = (char *)objc_msgSend_UTF8String(v43, v44, v45);
        sub_25B403500(__p, v46);
        float v47 = sub_25B414548(v72, (unsigned __int8 *)__p);
        if (v71 < 0) {
          operator delete(__p[0]);
        }

        if (v47) {
          goto LABEL_44;
        }
        uint64_t v48 = objc_alloc_init(RS3DObject);
        uint64_t v51 = (uint64_t)v48;
        if (v48) {
          objc_storeStrong((id *)&v48->type, *(id *)(v41 + 128));
        }
        float32x2_t v52 = objc_msgSend_copy(*(void **)(v41 + 144), v49, v50);
        sub_25B477C10(v51, v52);

        if (v51) {
          *(_DWORD *)(v51 + 44) = *(_DWORD *)(v41 + 136);
        }
        float32x2_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        sub_25B3FCA58(&v67, *(const void **)(v41 + 152), *(void *)(v41 + 160), (uint64_t)(*(void *)(v41 + 160) - *(void *)(v41 + 152)) >> 2);
        float32x2_t v54 = v67;
        int v53 = v68;
        if (v67 == v68)
        {
          float v64 = 0;
          if (!v51) {
            goto LABEL_39;
          }
        }
        else
        {
          uint64_t v55 = v42;
          unint64_t v58 = objc_opt_new();
          if ((unint64_t)(v53 - v54) <= 1) {
            uint64_t v60 = 1;
          }
          else {
            uint64_t v60 = v53 - v54;
          }
          float v61 = v54;
          do
          {
            LODWORD(v59) = *v61;
            unint64_t v62 = objc_msgSend_numberWithFloat_(NSNumber, v56, v57, v59);
            objc_msgSend_addObject_(v58, v63, (uint64_t)v62);

            ++v61;
            --v60;
          }
          while (v60);
          float v64 = objc_msgSend_copy(v58, v56, v57);

          uint64_t v42 = v55;
          id v5 = v66;
          if (!v51) {
            goto LABEL_39;
          }
        }
        objc_storeStrong((id *)(v51 + 72), v64);
LABEL_39:

        if (v54)
        {
          uint64_t v68 = v54;
          operator delete(v54);
        }
        if (v51)
        {
          *(unsigned char *)(v51 + 40) = 1;
          *(_OWORD *)(v51 + 128) = xmmword_25B5F11B0;
        }
        sub_25B477A04(v51, *(__int16 *)(v41 + 184), *(void **)(v41 + 176));
        sub_25B477B80(v51, (__n128 *)v41, v8);
        objc_msgSend_insertObject_atIndex_(v5, v65, v51, 0);

LABEL_44:
        v41 += 192;
      }
      while (v41 != v42);
    }
  }
  sub_25B414644((uint64_t)v72);
}

void sub_25B414238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  sub_25B414644((uint64_t)&a22);

  _Unwind_Resume(a1);
}

void sub_25B414308(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = sub_25B403AF4((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    id v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (sub_25B403F44(i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  long long v15 = operator new(0x28uLL);
  *long long v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  v15[4] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_25B3FA4B0(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *long long v15 = *v23;
LABEL_38:
    void *v23 = v15;
    goto LABEL_39;
  }
  *long long v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    unint64_t v24 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_25B414530(_Unwind_Exception *a1)
{
  sub_25B403FE8(1, v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_25B414548(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_25B403AF4((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint8x8_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v6 == v12)
    {
      if (sub_25B403F44(i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t sub_25B414644(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_25B4146AC(uint64_t a1, void *a2)
{
  unint64_t v35 = a2;
  objc_msgSend_quad(v35, v3, v4);
  float32x4_t v6 = v5;
  v6.i32[3] = 0;
  float32x4_t v8 = v7;
  v8.i32[3] = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 192) = 0;
  float v9 = v5.f32[2];
  float v10 = v7.f32[2];
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 40) = DWORD2(v11);
  *(float32x4_t *)a1 = v6;
  *(float32x4_t *)(a1 + 16) = v8;
  *(void *)(a1 + 32) = v11;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 56) = v12;
  *(void *)(a1 + 48) = v13;
  *(_DWORD *)(a1 + 60) = 0;
  *(float32x4_t *)(a1 + 64) = v5;
  *(float32x4_t *)(a1 + 80) = v7;
  long long v33 = v11;
  int32x4_t v34 = (int32x4_t)vsubq_f32(v5, v7);
  float v14 = atan2f(*(float *)v34.i32, *(float *)&v34.i32[1]);
  *(float *)(a1 + 100) = v14;
  __float2 v17 = __sincosf_stret(v14);
  *(float *)&uint64_t v18 = -v17.__sinval;
  HIDWORD(v18) = LODWORD(v17.__cosval);
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = __PAIR64__(LODWORD(v17.__sinval), LODWORD(v17.__cosval));
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = v18;
  *(_DWORD *)(a1 + 152) = 1065353216;
  float32x4_t v19 = vmulq_f32((float32x4_t)v34, (float32x4_t)v34);
  *(void *)(a1 + 144) = 0;
  float v20 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]);
  float v21 = *((float *)&v33 + 2);
  if (v9 >= v10) {
    float v22 = v9;
  }
  else {
    float v22 = v10;
  }
  if (v22 < *((float *)&v33 + 2)) {
    float v22 = *((float *)&v33 + 2);
  }
  if (v10 >= v9) {
    float v23 = v9;
  }
  else {
    float v23 = v10;
  }
  if (*((float *)&v33 + 2) >= v23) {
    float v21 = v23;
  }
  *(float *)(a1 + 160) = v20;
  *(float *)(a1 + 164) = v21;
  *(float *)(a1 + 168) = v22;
  unint64_t v24 = objc_msgSend_identifier(v35, v15, *(void *)&v16, (void)v33);
  *(void *)(a1 + 192) = objc_msgSend_copy(v24, v25, v26);

  unint64_t v29 = objc_msgSend_parentIdentifier(v35, v27, v28);
  *(void *)(a1 + 200) = objc_msgSend_copy(v29, v30, v31);

  if (v35) {
    int v32 = v35[33];
  }
  else {
    int v32 = 0;
  }
  *(_DWORD *)(a1 + 96) = v32;
  *(int32x4_t *)(a1 + 176) = vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-*(float *)&v34.i32[1]), v34);
}

void sub_25B41485C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  __float2 v16 = v15;

  sub_25B413A54(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_25B414894(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v19 = a4;
  uint64_t v20 = a4;
  v17[0] = a1;
  v17[1] = &v19;
  v17[2] = &v20;
  if (a2 != a3)
  {
    float32x4_t v6 = (id *)a2;
    do
    {
      long long v7 = *(_OWORD *)v6;
      long long v8 = *((_OWORD *)v6 + 1);
      long long v9 = *((_OWORD *)v6 + 3);
      *(_OWORD *)(v4 + 32) = *((_OWORD *)v6 + 2);
      *(_OWORD *)(v4 + 48) = v9;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v8;
      long long v10 = *((_OWORD *)v6 + 4);
      long long v11 = *((_OWORD *)v6 + 5);
      long long v12 = *((_OWORD *)v6 + 7);
      *(_OWORD *)(v4 + 96) = *((_OWORD *)v6 + 6);
      *(_OWORD *)(v4 + 112) = v12;
      *(_OWORD *)(v4 + 64) = v10;
      *(_OWORD *)(v4 + 80) = v11;
      long long v13 = *((_OWORD *)v6 + 8);
      long long v14 = *((_OWORD *)v6 + 9);
      long long v15 = *((_OWORD *)v6 + 11);
      *(_OWORD *)(v4 + 160) = *((_OWORD *)v6 + 10);
      *(_OWORD *)(v4 + 176) = v15;
      *(_OWORD *)(v4 + 128) = v13;
      *(_OWORD *)(v4 + 144) = v14;
      *(void *)(v4 + 192) = v6[24];
      *(void *)(v4 + 200) = v6[25];
      v4 += 208;
      v6 += 26;
    }
    while (v6 != (id *)a3);
    uint64_t v20 = v4;
  }
  char v18 = 1;
  sub_25B4157E0((uint64_t)v17);
  return v4;
}

void sub_25B414958(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    uint64_t v4 = (id *)v1[1];
    float32x4_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {

        v4 -= 26;
      }
      while (v4 != v2);
      float32x4_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

float32x2_t *sub_25B4149F4(float32x2_t *result, float32x2_t *a2, uint64_t a3, char a4)
{
  long long v9 = result;
  while (2)
  {
    long long v10 = a2 - 1;
    long long v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          long long v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = a2 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                float32x2_t v71 = *v11;
                if (vcgt_f32(*v11, *v10).u8[0])
                {
                  *long long v11 = *v10;
                  *long long v10 = v71;
                }
                return result;
              case 3uLL:
                float32x2_t v72 = *v11;
                float32x2_t v73 = v11[1];
                float32x2_t v74 = *v10;
                unsigned __int8 v75 = vcgt_f32(v73, *v10).u8[0];
                if (vcgt_f32(*v11, v73).u32[0])
                {
                  if (v75)
                  {
                    *long long v11 = v74;
                  }
                  else
                  {
                    *long long v11 = v73;
                    v11[1] = v72;
                    if ((vcgt_f32(v72, *v10).u8[0] & 1) == 0) {
                      return result;
                    }
                    v11[1] = *v10;
                  }
                  *long long v10 = v72;
                }
                else if (v75)
                {
                  v11[1] = v74;
                  *long long v10 = v73;
                  float32x2_t v80 = v11[1];
LABEL_158:
                  float32x2_t v118 = *v11;
                  if (vcgt_f32(*v11, v80).u8[0])
                  {
                    *long long v11 = v80;
                    v11[1] = v118;
                  }
                }
                break;
              case 4uLL:
                return sub_25B415444(v11, v11 + 1, v11 + 2, a2 - 1);
              case 5uLL:
                id v76 = v11 + 1;
                uint64_t v77 = v11 + 2;
                float v78 = v11 + 3;
                int32x4_t result = sub_25B415444(v11, v11 + 1, v11 + 2, v11 + 3);
                float32x2_t v79 = v11[3];
                if ((vcgt_f32(v79, *v10).u8[0] & 1) == 0) {
                  return result;
                }
                *float v78 = *v10;
                *long long v10 = v79;
                float32x2_t v80 = *v78;
                float32x2_t v81 = *v77;
                if ((vcgt_f32(*v77, *v78).u8[0] & 1) == 0) {
                  return result;
                }
                *uint64_t v77 = v80;
                *float v78 = v81;
                float32x2_t v82 = *v76;
                if ((vcgt_f32(*v76, v80).u8[0] & 1) == 0) {
                  return result;
                }
                v11[1] = v80;
                v11[2] = v82;
                goto LABEL_158;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            uint64_t v83 = v11 + 1;
            BOOL v85 = v11 == a2 || v83 == a2;
            if (a4)
            {
              if (!v85)
              {
                uint64_t v86 = 8;
                float v87 = v11;
                do
                {
                  float32x2_t v89 = *v87;
                  float32x2_t v88 = v87[1];
                  float v87 = v83;
                  if (vcgt_f32(v89, v88).u8[0])
                  {
                    uint64_t v90 = v86;
                    do
                    {
                      *(float32x2_t *)((char *)v11 + v90) = v89;
                      uint64_t v91 = v90 - 8;
                      if (v90 == 8)
                      {
                        long long v92 = v11;
                        goto LABEL_123;
                      }
                      float32x2_t v89 = *(float32x2_t *)((char *)v11 + v90 - 16);
                      v90 -= 8;
                    }
                    while ((vcgt_f32(v89, v88).u8[0] & 1) != 0);
                    long long v92 = (float32x2_t *)((char *)v11 + v91);
LABEL_123:
                    *long long v92 = v88;
                  }
                  uint64_t v83 = v87 + 1;
                  v86 += 8;
                }
                while (&v87[1] != a2);
              }
            }
            else if (!v85)
            {
              do
              {
                float32x2_t v120 = *v9;
                float32x2_t v119 = v9[1];
                long long v9 = v83;
                if (vcgt_f32(v120, v119).u8[0])
                {
                  unint64_t v121 = v83;
                  do
                  {
                    float32x2_t *v121 = v120;
                    float32x2_t v120 = v121[-2];
                    --v121;
                  }
                  while ((vcgt_f32(v120, v119).u8[0] & 1) != 0);
                  float32x2_t *v121 = v119;
                }
                ++v83;
              }
              while (&v9[1] != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v93 = (v13 - 2) >> 1;
              int64_t v94 = v93;
              do
              {
                int64_t v95 = v94;
                if (v93 >= v94)
                {
                  uint64_t v96 = (2 * v94) | 1;
                  float v97 = &v11[v96];
                  if (2 * v95 + 2 < (uint64_t)v13 && COERCE_FLOAT(*v97) < COERCE_FLOAT(*(void *)&v97[1]))
                  {
                    ++v97;
                    uint64_t v96 = 2 * v95 + 2;
                  }
                  uint64_t v98 = &v11[v95];
                  float32x2_t v99 = *v97;
                  float32x2_t v100 = *v98;
                  if ((vcgt_f32(*v98, *v97).u8[0] & 1) == 0)
                  {
                    do
                    {
                      uint64_t v101 = v97;
                      *uint64_t v98 = v99;
                      if (v93 < v96) {
                        break;
                      }
                      uint64_t v102 = 2 * v96;
                      uint64_t v96 = (2 * v96) | 1;
                      float v97 = &v11[v96];
                      uint64_t v103 = v102 + 2;
                      if (v103 < (uint64_t)v13 && COERCE_FLOAT(*v97) < COERCE_FLOAT(*(void *)&v97[1]))
                      {
                        ++v97;
                        uint64_t v96 = v103;
                      }
                      float32x2_t v99 = *v97;
                      uint64_t v98 = v101;
                    }
                    while ((vcgt_f32(v100, *v97).u8[0] & 1) == 0);
                    *uint64_t v101 = v100;
                  }
                }
                int64_t v94 = v95 - 1;
              }
              while (v95);
              uint64_t v104 = (unint64_t)v12 >> 3;
              do
              {
                uint64_t v105 = 0;
                float32x2_t v106 = *v11;
                long long v107 = v11;
                do
                {
                  long long v108 = v107;
                  v107 += v105 + 1;
                  uint64_t v109 = 2 * v105;
                  uint64_t v105 = (2 * v105) | 1;
                  uint64_t v110 = v109 + 2;
                  if (v110 < v104 && COERCE_FLOAT(*v107) < COERCE_FLOAT(*(void *)&v107[1]))
                  {
                    ++v107;
                    uint64_t v105 = v110;
                  }
                  *long long v108 = *v107;
                }
                while (v105 <= (uint64_t)((unint64_t)(v104 - 2) >> 1));
                if (v107 == --a2)
                {
                  float32x2_t *v107 = v106;
                }
                else
                {
                  float32x2_t *v107 = *a2;
                  *a2 = v106;
                  uint64_t v111 = (char *)v107 - (char *)v11 + 8;
                  if (v111 >= 9)
                  {
                    unint64_t v112 = (((unint64_t)v111 >> 3) - 2) >> 1;
                    BOOL v113 = &v11[v112];
                    float32x2_t v114 = *v113;
                    float32x2_t v115 = *v107;
                    if (vcgt_f32(*v107, *v113).u8[0])
                    {
                      do
                      {
                        BOOL v116 = v113;
                        float32x2_t *v107 = v114;
                        if (!v112) {
                          break;
                        }
                        unint64_t v112 = (v112 - 1) >> 1;
                        BOOL v113 = &v11[v112];
                        float32x2_t v114 = *v113;
                        long long v107 = v116;
                      }
                      while ((vcgt_f32(v115, *v113).u8[0] & 1) != 0);
                      *BOOL v116 = v115;
                    }
                  }
                }
              }
              while (v104-- > 2);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          long long v15 = &v11[v13 >> 1];
          float32x2_t v16 = *v10;
          if ((unint64_t)v12 >= 0x401)
          {
            float32x2_t v17 = *v15;
            float32x2_t v18 = *v11;
            unsigned __int8 v19 = vcgt_f32(*v15, v16).u8[0];
            if (vcgt_f32(*v11, *v15).u32[0])
            {
              if (v19)
              {
                *long long v11 = v16;
              }
              else
              {
                *long long v11 = v17;
                *long long v15 = v18;
                if ((vcgt_f32(v18, *v10).u8[0] & 1) == 0) {
                  goto LABEL_23;
                }
                *long long v15 = *v10;
              }
              *long long v10 = v18;
            }
            else if (v19)
            {
              *long long v15 = v16;
              *long long v10 = v17;
              float32x2_t v23 = *v11;
              if (vcgt_f32(*v11, *v15).u8[0])
              {
                *long long v11 = *v15;
                *long long v15 = v23;
              }
            }
LABEL_23:
            float32x4_t v25 = &v11[v14];
            float32x2_t v27 = v25[-1];
            uint64_t v26 = v25 - 1;
            float32x2_t v28 = v27;
            float32x2_t v29 = v11[1];
            float32x2_t v30 = a2[-2];
            unsigned __int8 v31 = vcgt_f32(v27, v30).u8[0];
            if (vcgt_f32(v29, v27).u32[0])
            {
              if (v31)
              {
                v11[1] = v30;
              }
              else
              {
                v11[1] = v28;
                *uint64_t v26 = v29;
                float32x2_t v33 = a2[-2];
                if ((vcgt_f32(v29, v33).u8[0] & 1) == 0) {
                  goto LABEL_35;
                }
                *uint64_t v26 = v33;
              }
              a2[-2] = v29;
            }
            else if (v31)
            {
              *uint64_t v26 = v30;
              a2[-2] = v28;
              float32x2_t v32 = v11[1];
              if (vcgt_f32(v32, *v26).u8[0])
              {
                v11[1] = *v26;
                *uint64_t v26 = v32;
              }
            }
LABEL_35:
            int32x4_t v34 = &v11[v14];
            float32x2_t v36 = v34[1];
            unint64_t v35 = v34 + 1;
            float32x2_t v37 = v36;
            float32x2_t v38 = v11[2];
            float32x2_t v39 = a2[-3];
            unsigned __int8 v40 = vcgt_f32(v36, v39).u8[0];
            if (vcgt_f32(v38, v36).u32[0])
            {
              if (v40)
              {
                v11[2] = v39;
              }
              else
              {
                v11[2] = v37;
                *unint64_t v35 = v38;
                float32x2_t v42 = a2[-3];
                if ((vcgt_f32(v38, v42).u8[0] & 1) == 0) {
                  goto LABEL_44;
                }
                *unint64_t v35 = v42;
              }
              a2[-3] = v38;
            }
            else if (v40)
            {
              *unint64_t v35 = v39;
              a2[-3] = v37;
              float32x2_t v41 = v11[2];
              if (vcgt_f32(v41, *v35).u8[0])
              {
                v11[2] = *v35;
                *unint64_t v35 = v41;
              }
            }
LABEL_44:
            float32x2_t v43 = *v15;
            float32x2_t v44 = *v26;
            float32x2_t v45 = *v35;
            unsigned __int8 v46 = vcgt_f32(*v15, *v35).u8[0];
            if (vcgt_f32(*v26, *v15).u32[0])
            {
              if ((v46 & 1) == 0)
              {
                *uint64_t v26 = v43;
                *long long v15 = v44;
                uint64_t v26 = &v11[v13 >> 1];
                float32x2_t v43 = v45;
                if ((vcgt_f32(v44, v45).u32[0] & 1) == 0)
                {
                  float32x2_t v43 = v44;
LABEL_51:
                  float32x2_t v47 = *v11;
                  *long long v11 = v43;
                  *long long v15 = v47;
                  goto LABEL_52;
                }
              }
            }
            else
            {
              if ((v46 & 1) == 0) {
                goto LABEL_51;
              }
              *long long v15 = v45;
              *unint64_t v35 = v43;
              unint64_t v35 = &v11[v13 >> 1];
              float32x2_t v43 = v44;
              if ((vcgt_f32(v44, v45).u32[0] & 1) == 0)
              {
                float32x2_t v43 = v45;
                goto LABEL_51;
              }
            }
            *uint64_t v26 = v45;
            *unint64_t v35 = v44;
            goto LABEL_51;
          }
          float32x2_t v20 = *v11;
          float32x2_t v21 = *v15;
          unsigned __int8 v22 = vcgt_f32(*v11, v16).u8[0];
          if (vcgt_f32(*v15, *v11).u32[0])
          {
            if (v22)
            {
              *long long v15 = v16;
LABEL_31:
              *long long v10 = v21;
              goto LABEL_52;
            }
            *long long v15 = v20;
            *long long v11 = v21;
            if (vcgt_f32(v21, *v10).u32[0])
            {
              *long long v11 = *v10;
              goto LABEL_31;
            }
          }
          else if (v22)
          {
            *long long v11 = v16;
            *long long v10 = v20;
            float32x2_t v24 = *v15;
            if (vcgt_f32(*v15, *v11).u32[0])
            {
              *long long v15 = *v11;
              *long long v11 = v24;
            }
          }
LABEL_52:
          --a3;
          float32x2_t v48 = *v11;
          if ((a4 & 1) != 0 || COERCE_FLOAT(*(void *)&v11[-1]) < v48.f32[0]) {
            break;
          }
          if (v48.f32[0] < COERCE_FLOAT(*v10))
          {
            do
            {
              float32x2_t v62 = v11[1];
              ++v11;
            }
            while (v48.f32[0] >= v62.f32[0]);
          }
          else
          {
            float32x2_t v63 = v11 + 1;
            do
            {
              long long v11 = v63;
              if (v63 >= a2) {
                break;
              }
              ++v63;
            }
            while (v48.f32[0] >= COERCE_FLOAT(*v11));
          }
          float v64 = a2;
          if (v11 < a2)
          {
            float v64 = a2;
            do
            {
              float32x2_t v65 = v64[-1];
              --v64;
            }
            while (v48.f32[0] < v65.f32[0]);
          }
          if (v11 < v64)
          {
            float32x2_t v66 = *v11;
            float32x2_t v67 = *v64;
            do
            {
              *long long v11 = v67;
              float32x2_t *v64 = v66;
              do
              {
                float32x2_t v68 = v11[1];
                ++v11;
                float32x2_t v66 = v68;
              }
              while ((vcgt_f32(v68, v48).u8[0] & 1) == 0);
              do
              {
                float32x2_t v69 = v64[-1];
                --v64;
                float32x2_t v67 = v69;
              }
              while ((vcgt_f32(v69, v48).u8[0] & 1) != 0);
            }
            while (v11 < v64);
          }
          unint64_t v70 = v11 - 1;
          BOOL v4 = &v11[-1] >= v9;
          BOOL v5 = &v11[-1] == v9;
          if (&v11[-1] != v9) {
            *long long v9 = *v70;
          }
          a4 = 0;
          *unint64_t v70 = v48;
        }
        unint64_t v49 = v11;
        do
        {
          uint64_t v50 = v49;
          float32x2_t v51 = v49[1];
          ++v49;
          float32x2_t v52 = v51;
        }
        while (v51.f32[0] < v48.f32[0]);
        int v53 = a2;
        if (v50 == v11)
        {
          int v53 = a2;
          do
          {
            if (v49 >= v53) {
              break;
            }
            float32x2_t v55 = v53[-1];
            --v53;
          }
          while (v55.f32[0] >= v48.f32[0]);
        }
        else
        {
          do
          {
            float32x2_t v54 = v53[-1];
            --v53;
          }
          while (v54.f32[0] >= v48.f32[0]);
        }
        if (v49 < v53)
        {
          float32x2_t v56 = *v53;
          uint64_t v57 = v49;
          unint64_t v58 = v53;
          do
          {
            *uint64_t v57 = v56;
            *unint64_t v58 = v52;
            do
            {
              uint64_t v50 = v57;
              float32x2_t v59 = v57[1];
              ++v57;
              float32x2_t v52 = v59;
            }
            while (v59.f32[0] < v48.f32[0]);
            do
            {
              float32x2_t v60 = v58[-1];
              --v58;
              float32x2_t v56 = v60;
            }
            while (v60.f32[0] >= v48.f32[0]);
          }
          while (v57 < v58);
        }
        if (v50 != v11) {
          *long long v11 = *v50;
        }
        *uint64_t v50 = v48;
        if (v49 >= v53) {
          break;
        }
LABEL_73:
        int32x4_t result = (float32x2_t *)sub_25B4149F4(v9, v50, a3, a4 & 1);
        a4 = 0;
        long long v11 = v50 + 1;
      }
      BOOL v61 = sub_25B415528(v11, v50);
      long long v11 = v50 + 1;
      int32x4_t result = (float32x2_t *)sub_25B415528(v50 + 1, a2);
      if (result) {
        break;
      }
      if (!v61) {
        goto LABEL_73;
      }
    }
    a2 = v50;
    if (!v61) {
      continue;
    }
    return result;
  }
}

void *sub_25B4152BC(unint64_t a1)
{
  if (a1 >= 0x13B13B13B13B13CLL) {
    sub_25B3FA70C();
  }
  return operator new(208 * a1);
}

uint64_t sub_25B415308(uint64_t *a1, void *a2)
{
  uint64_t result = sub_25B4153E4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t sub_25B415380(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 208;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_25B4153E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t result = a7; a3 != a5; a3 -= 208)
  {
    long long v8 = *(_OWORD *)(a3 - 208);
    long long v9 = *(_OWORD *)(a3 - 192);
    long long v10 = *(_OWORD *)(a3 - 160);
    *(_OWORD *)(result - 176) = *(_OWORD *)(a3 - 176);
    *(_OWORD *)(result - 160) = v10;
    *(_OWORD *)(result - 208) = v8;
    *(_OWORD *)(result - 192) = v9;
    long long v11 = *(_OWORD *)(a3 - 144);
    long long v12 = *(_OWORD *)(a3 - 128);
    long long v13 = *(_OWORD *)(a3 - 96);
    *(_OWORD *)(result - 112) = *(_OWORD *)(a3 - 112);
    *(_OWORD *)(result - 96) = v13;
    *(_OWORD *)(result - 144) = v11;
    *(_OWORD *)(result - 128) = v12;
    long long v14 = *(_OWORD *)(a3 - 80);
    long long v15 = *(_OWORD *)(a3 - 64);
    long long v16 = *(_OWORD *)(a3 - 32);
    *(_OWORD *)(result - 48) = *(_OWORD *)(a3 - 48);
    *(_OWORD *)(result - 32) = v16;
    *(_OWORD *)(result - 80) = v14;
    *(_OWORD *)(result - 64) = v15;
    long long v17 = *(_OWORD *)(a3 - 16);
    *(void *)(a3 - 16) = 0;
    *(void *)(a3 - 8) = 0;
    *(_OWORD *)(result - 16) = v17;
    result -= 208;
  }
  return result;
}

float32x2_t *sub_25B415444(float32x2_t *result, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  float32x2_t v4 = *a2;
  float32x2_t v5 = *result;
  float32x2_t v6 = *a3;
  unsigned __int8 v7 = vcgt_f32(*a2, *a3).u8[0];
  if ((vcgt_f32(*result, *a2).u32[0] & 1) == 0)
  {
    if (v7)
    {
      *a2 = v6;
      *a3 = v4;
      float32x2_t v8 = *result;
      if ((vcgt_f32(*result, *a2).u8[0] & 1) == 0)
      {
        v5.i32[0] = v4.i32[0];
        float32x2_t v6 = v4;
        goto LABEL_13;
      }
      *uint64_t result = *a2;
      *a2 = v8;
      float32x2_t v5 = *a3;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  if ((v7 & 1) == 0)
  {
    *uint64_t result = v4;
    *a2 = v5;
    float32x2_t v6 = *a3;
    if (vcgt_f32(v5, *a3).u8[0])
    {
      *a2 = v6;
      goto LABEL_9;
    }
LABEL_11:
    v5.i32[0] = v6.i32[0];
    goto LABEL_13;
  }
  *uint64_t result = v6;
LABEL_9:
  *a3 = v5;
LABEL_10:
  float32x2_t v6 = v5;
LABEL_13:
  if (COERCE_FLOAT(*a4) < v5.f32[0])
  {
    *a3 = *a4;
    *a4 = v6;
    float32x2_t v9 = *a2;
    if (vcgt_f32(*a2, *a3).u8[0])
    {
      *a2 = *a3;
      *a3 = v9;
      float32x2_t v10 = *result;
      if (vcgt_f32(*result, *a2).u8[0])
      {
        *uint64_t result = *a2;
        *a2 = v10;
      }
    }
  }
  return result;
}

BOOL sub_25B415528(float32x2_t *a1, float32x2_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float32x2_t v6 = a2[-1];
      float32x2_t v7 = *a1;
      if (vcgt_f32(*a1, v6).u8[0])
      {
        *a1 = v6;
        a2[-1] = v7;
      }
      return result;
    case 3:
      float32x2_t v8 = *a1;
      float32x2_t v9 = a1[1];
      float32x2_t v10 = a2[-1];
      unsigned __int8 v11 = vcgt_f32(v9, v10).u8[0];
      if (vcgt_f32(*a1, v9).u32[0])
      {
        if (v11)
        {
          *a1 = v10;
        }
        else
        {
          *a1 = v9;
          a1[1] = v8;
          float32x2_t v38 = a2[-1];
          if ((vcgt_f32(v8, v38).u8[0] & 1) == 0) {
            return result;
          }
          a1[1] = v38;
        }
        a2[-1] = v8;
      }
      else if (v11)
      {
        a1[1] = v10;
        a2[-1] = v9;
        float32x2_t v29 = *a1;
        float32x2_t v28 = a1[1];
        if (vcgt_f32(*a1, v28).u8[0])
        {
          *a1 = v28;
          a1[1] = v29;
        }
      }
      return result;
    case 4:
      sub_25B415444(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      unsigned __int8 v19 = a1 + 1;
      float32x2_t v20 = a1 + 2;
      float32x2_t v21 = a1 + 3;
      sub_25B415444(a1, a1 + 1, a1 + 2, a1 + 3);
      float32x2_t v22 = a2[-1];
      float32x2_t v23 = a1[3];
      if (vcgt_f32(v23, v22).u8[0])
      {
        *float32x2_t v21 = v22;
        a2[-1] = v23;
        float32x2_t v24 = *v21;
        float32x2_t v25 = *v20;
        if (vcgt_f32(*v20, *v21).u8[0])
        {
          *float32x2_t v20 = v24;
          *float32x2_t v21 = v25;
          float32x2_t v26 = *v19;
          if (vcgt_f32(*v19, v24).u8[0])
          {
            a1[1] = v24;
            a1[2] = v26;
            float32x2_t v27 = *a1;
            if (vcgt_f32(*a1, v24).u8[0])
            {
              *a1 = v24;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      long long v12 = a1 + 2;
      float32x2_t v13 = a1[2];
      float32x2_t v14 = a1[1];
      float32x2_t v15 = *a1;
      unsigned __int8 v16 = vcgt_f32(v14, v13).u8[0];
      if (vcgt_f32(*a1, v14).u32[0])
      {
        long long v17 = a1;
        float32x2_t v18 = a1 + 2;
        if ((v16 & 1) == 0)
        {
          *a1 = v14;
          a1[1] = v15;
          long long v17 = a1 + 1;
          float32x2_t v18 = a1 + 2;
          if ((vcgt_f32(v15, v13).u8[0] & 1) == 0) {
            goto LABEL_23;
          }
        }
LABEL_22:
        *long long v17 = v13;
        *float32x2_t v18 = v15;
        goto LABEL_23;
      }
      if (v16)
      {
        a1[1] = v13;
        *long long v12 = v14;
        long long v17 = a1;
        float32x2_t v18 = a1 + 1;
        if (vcgt_f32(v15, v13).u8[0]) {
          goto LABEL_22;
        }
      }
LABEL_23:
      float32x2_t v30 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      int v31 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        float32x2_t v33 = *v30;
        float32x2_t v34 = *v12;
        if (vcgt_f32(*v12, *v30).u8[0])
        {
          uint64_t v35 = i;
          while (1)
          {
            *(float32x2_t *)((char *)a1 + v35) = v34;
            uint64_t v36 = v35 - 8;
            if (v35 == 8) {
              break;
            }
            float32x2_t v34 = *(float32x2_t *)((char *)a1 + v35 - 16);
            v35 -= 8;
            if ((vcgt_f32(v34, v33).u8[0] & 1) == 0)
            {
              float32x2_t v37 = (float32x2_t *)((char *)a1 + v36);
              goto LABEL_31;
            }
          }
          float32x2_t v37 = a1;
LABEL_31:
          float32x2_t *v37 = v33;
          if (++v31 == 8) {
            break;
          }
        }
        long long v12 = v30++;
        if (v30 == a2) {
          return 1;
        }
      }
      return &v30[1] == a2;
  }
}

uint64_t sub_25B4157E0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    for (uint64_t i = *v3; v4 != i; v4 -= 208)
    {
    }
  }
  return a1;
}

id sub_25B415848(uint64_t a1, void *a2, void *a3, void *a4, int a5, int a6)
{
  uint64_t v1396 = *MEMORY[0x263EF8340];
  id v1208 = a2;
  id v1205 = a3;
  id v10 = a4;
  v1204 = v10;
  if (!a1)
  {
    id v527 = 0;
    goto LABEL_1040;
  }
  if (!v10)
  {
    id v524 = MEMORY[0x263EFF8C0];
    id v527 = (id)objc_msgSend_init(v524, v525, v526);
    goto LABEL_1040;
  }
  objc_msgSend_GetAllObjects(v10, v11, v12);
  id v1238 = (id)objc_claimAutoreleasedReturnValue();
  float32x2_t v13 = @"lshaped";
  unint64_t v16 = 0;
  v1289 = 0;
  v1290 = 0;
  v1288 = 0;
  while (objc_msgSend_count(v1238, v14, v15) > v16)
  {
    juint64_t j = 0;
    float32x2_t v18 = 0;
    unint64_t v19 = 0;
    unint64_t v20 = 0;
    v1388[1] = 0;
    v1388[0] = 0;
    v1389.i64[0] = 0;
    while (1)
    {
      float32x2_t v21 = objc_msgSend_objectAtIndexedSubscript_(v1238, v17, v16);
      float32x2_t v24 = objc_msgSend_logits(v21, v22, v23);
      BOOL v27 = objc_msgSend_count(v24, v25, v26) > v20;

      if (!v27) {
        break;
      }
      float32x2_t v29 = objc_msgSend_objectAtIndexedSubscript_(v1238, v28, v16);
      float32x2_t v32 = objc_msgSend_logits(v29, v30, v31);
      float32x2_t v34 = objc_msgSend_objectAtIndex_(v32, v33, v20);
      objc_msgSend_floatValue(v34, v35, v36);
      int v38 = v37;

      if (jj >= v19)
      {
        uint64_t v40 = (jj - (uint64_t)v18) >> 2;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
        {
          v1389.i64[0] = v19;
          v1388[0] = v18;
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v19 - (void)v18) >> 1 > v41) {
          unint64_t v41 = (uint64_t)(v19 - (void)v18) >> 1;
        }
        if (v19 - (unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42) {
          unint64_t v42 = (unint64_t)sub_25B3FBC64(v42);
        }
        else {
          long long v17 = 0;
        }
        float32x2_t v43 = (_DWORD *)(v42 + 4 * v40);
        *float32x2_t v43 = v38;
        float32x2_t v39 = v43 + 1;
        while ((void *)jj != v18)
        {
          int v44 = *(_DWORD *)(jj - 4);
          jj -= 4;
          *--float32x2_t v43 = v44;
        }
        unint64_t v19 = v42 + 4 * (void)v17;
        v1388[1] = v39;
        if (v18) {
          operator delete(v18);
        }
        float32x2_t v18 = v43;
      }
      else
      {
        *(_DWORD *)juint64_t j = v38;
        float32x2_t v39 = (void *)(jj + 4);
      }
      v1388[1] = v39;
      ++v20;
      juint64_t j = (uint64_t)v39;
    }
    v1389.i64[0] = v19;
    v1388[0] = v18;
    float32x2_t v45 = objc_msgSend_objectAtIndexedSubscript_(v1238, v28, v16);
    char hasBoxesDict = objc_msgSend_hasBoxesDict_(v45, v46, @"lshaped");

    if (hasBoxesDict)
    {
      float32x4_t v1329 = 0u;
      float32x4_t v1328 = 0u;
      float32x4_t v1327 = 0u;
      float32x4_t v1326 = 0u;
      float32x4_t v1325 = 0u;
      float32x4_t v1324 = 0u;
      memset(v1323, 0, sizeof(v1323));
      float32x2_t v48 = objc_msgSend_objectAtIndexedSubscript_(v1238, v14, v16);
      float32x2_t v51 = objc_msgSend_boxesDict(v48, v49, v50);
      int v53 = objc_msgSend_objectForKeyedSubscript_(v51, v52, @"lshaped");
      sub_25B445344((uint64_t)v1323, v53);

      float32x2_t v55 = objc_msgSend_objectAtIndexedSubscript_(v1238, v54, v16);
      objc_msgSend_type(v55, v56, v57);
      v1376.i64[0] = (uint64_t)(id)objc_claimAutoreleasedReturnValue();
      float32x2_t v59 = objc_msgSend_objectAtIndexedSubscript_(v1238, v58, v16);
      objc_msgSend_confidence(v59, v60, v61);
      float v63 = v62;
      float32x2_t v65 = objc_msgSend_objectAtIndexedSubscript_(v1238, v64, v16);
      float32x2_t v68 = objc_msgSend_identifier(v65, v66, v67);
      sub_25B44579C((uint64_t)buf, (long long *)v1323, (id *)&v1376, v68, (uint64_t)v1388, v63);
      float32x2_t v69 = v1289;
      if (v1289 >= v1290)
      {
        unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1289 - (char *)v1288) >> 6);
        unint64_t v81 = v80 + 1;
        if (v80 + 1 > 0x155555555555555) {
          sub_25B3FBC4C();
        }
        if (0x5555555555555556 * (((char *)v1290 - (char *)v1288) >> 6) > v81) {
          unint64_t v81 = 0x5555555555555556 * (((char *)v1290 - (char *)v1288) >> 6);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v1290 - (char *)v1288) >> 6) >= 0xAAAAAAAAAAAAAALL) {
          unint64_t v82 = 0x155555555555555;
        }
        else {
          unint64_t v82 = v81;
        }
        v1311.i64[0] = (uint64_t)&v1290;
        uint64_t v83 = (char *)sub_25B41D460(v82);
        uint64_t v84 = &v83[192 * v80];
        *(void *)v1309 = v83;
        *(void *)&v1309[8] = v84;
        v1310.i64[1] = (uint64_t)&v83[192 * v85];
        float32x4_t v86 = buf[0];
        float32x4_t v87 = buf[1];
        float32x4_t v88 = v1338;
        *((float32x4_t *)v84 + 2) = v1337;
        *((float32x4_t *)v84 + 3) = v88;
        float32x4_t v89 = v1342;
        float32x4_t v90 = v1340;
        float32x4_t v91 = v1339;
        *((float32x4_t *)v84 + 6) = v1341;
        *((float32x4_t *)v84 + 7) = v89;
        *((float32x4_t *)v84 + 4) = v91;
        *((float32x4_t *)v84 + 5) = v90;
        *(float32x4_t *)uint64_t v84 = v86;
        *((float32x4_t *)v84 + 1) = v87;
        uint64_t v92 = *(void *)&v1343[0];
        *(void *)&v1343[0] = 0;
        *((void *)v84 + 16) = v92;
        *((_DWORD *)v84 + 34) = DWORD2(v1343[0]);
        uint64_t v93 = *(void *)&v1343[1];
        *(void *)&v1343[1] = 0;
        *((void *)v84 + 18) = v93;
        *((void *)v84 + 19) = 0;
        *((void *)v84 + 20) = 0;
        *((void *)v84 + 21) = 0;
        *(_OWORD *)(v84 + 152) = *(_OWORD *)((char *)&v1343[1] + 8);
        *((void *)v84 + 21) = *((void *)&v1343[2] + 1);
        memset((char *)&v1343[1] + 8, 0, 24);
        uint64_t v94 = v1344.i64[0];
        v1344.i64[0] = 0;
        *((void *)v84 + 22) = v94;
        *((_WORD *)v84 + 92) = v1344.i16[4];
        v1310.i64[0] = (uint64_t)(v84 + 192);
        sub_25B4458D0((uint64_t *)&v1288, v1309);
        float32x2_t v79 = v1289;
        sub_25B4459A4((uint64_t)v1309);
      }
      else
      {
        float32x4_t v70 = buf[0];
        float32x4_t v71 = buf[1];
        float32x4_t v72 = v1338;
        v1289[2] = v1337;
        v69[3] = v72;
        *float32x2_t v69 = v70;
        v69[1] = v71;
        float32x4_t v73 = v1339;
        float32x4_t v74 = v1340;
        float32x4_t v75 = v1342;
        v69[6] = v1341;
        v69[7] = v75;
        v69[4] = v73;
        v69[5] = v74;
        uint64_t v76 = *(void *)&v1343[0];
        *(void *)&v1343[0] = 0;
        v69[8].i64[0] = v76;
        v69[8].i32[2] = DWORD2(v1343[0]);
        v69[9].i64[1] = 0;
        v69[10].i64[0] = 0;
        v69[10].i64[1] = 0;
        float32x4_t v77 = (float32x4_t)v1343[1];
        *(void *)&v1343[1] = 0;
        v69[9] = v77;
        v69[10] = (float32x4_t)v1343[2];
        memset((char *)&v1343[1] + 8, 0, 24);
        uint64_t v78 = v1344.i64[0];
        v1344.i64[0] = 0;
        v69[11].i64[0] = v78;
        v69[11].i16[4] = v1344.i16[4];
        float32x2_t v79 = v69 + 12;
      }
      v1289 = v79;

      if (*((void *)&v1343[1] + 1))
      {
        *(void *)&v1343[2] = *((void *)&v1343[1] + 1);
        operator delete(*((void **)&v1343[1] + 1));
      }
    }
    if (v18)
    {
      v1388[1] = v18;
      operator delete(v18);
    }
    ++v16;
  }

  float v97 = objc_msgSend_mutableCopy(v1238, v95, v96);
  id v1206 = v97;
  if (v1208)
  {
    id v1231 = v1208;
    id v1233 = v1205;
    self;
    long long v1301 = 0uLL;
    *(void *)&long long v1302 = 0;
    id v1246 = objc_alloc_init(MEMORY[0x263EFF9A0]);
    unint64_t v100 = 0;
    juint64_t j = 208;
    while (objc_msgSend_count(v1233, v98, v99) > v100)
    {
      uint64_t v103 = objc_msgSend_objectAtIndexedSubscript_(v1233, v101, v100);
      sub_25B4146AC((uint64_t)buf, v103);
      uint64_t v104 = (float32x4_t *)*((void *)&v1301 + 1);
      if (*((void *)&v1301 + 1) >= (unint64_t)v1302)
      {
        uint64_t v116 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)&v1301 + 1) - v1301) >> 4);
        unint64_t v117 = v116 + 1;
        if ((unint64_t)(v116 + 1) > 0x13B13B13B13B13BLL) {
          sub_25B3FBC4C();
        }
        if (0x9D89D89D89D89D8ALL * ((uint64_t)(v1302 - v1301) >> 4) > v117) {
          unint64_t v117 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v1302 - v1301) >> 4);
        }
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v1302 - v1301) >> 4)) >= 0x9D89D89D89D89DLL) {
          unint64_t v118 = 0x13B13B13B13B13BLL;
        }
        else {
          unint64_t v118 = v117;
        }
        v1324.i64[0] = (uint64_t)&v1302;
        float32x2_t v119 = (char *)sub_25B4152BC(v118);
        float32x2_t v120 = (float32x4_t *)&v119[208 * v116];
        v1323[0].i64[0] = (uint64_t)v119;
        v1323[0].i64[1] = (uint64_t)v120;
        v1323[1].i64[1] = (uint64_t)&v119[208 * v121];
        float32x4_t v122 = buf[0];
        float32x4_t v123 = buf[1];
        float32x4_t v124 = v1338;
        v120[2] = v1337;
        v120[3] = v124;
        float32x4_t v125 = v1342;
        float32x4_t v126 = v1340;
        float32x4_t v127 = v1339;
        v120[6] = v1341;
        v120[7] = v125;
        v120[4] = v127;
        v120[5] = v126;
        float32x4_t v128 = v1344;
        float32x4_t v129 = (float32x4_t)v1343[1];
        float32x4_t v130 = (float32x4_t)v1343[0];
        v120[10] = (float32x4_t)v1343[2];
        v120[11] = v128;
        v120[8] = v130;
        v120[9] = v129;
        *float32x2_t v120 = v122;
        v120[1] = v123;
        float32x4_t v131 = v1345;
        float32x4_t v1345 = 0uLL;
        v120[12] = v131;
        v1323[1].i64[0] = (uint64_t)&v120[13];
        sub_25B415308((uint64_t *)&v1301, v1323);
        f32 = (_OWORD *)*((void *)&v1301 + 1);
        sub_25B415380((uint64_t)v1323);
      }
      else
      {
        float32x4_t v105 = buf[0];
        float32x4_t v106 = buf[1];
        float32x4_t v107 = v1338;
        *(float32x4_t *)(*((void *)&v1301 + 1) + 32) = v1337;
        v104[3] = v107;
        *uint64_t v104 = v105;
        v104[1] = v106;
        float32x4_t v108 = v1339;
        float32x4_t v109 = v1340;
        float32x4_t v110 = v1342;
        v104[6] = v1341;
        v104[7] = v110;
        v104[4] = v108;
        v104[5] = v109;
        float32x4_t v111 = (float32x4_t)v1343[0];
        float32x4_t v112 = (float32x4_t)v1343[1];
        float32x4_t v113 = v1344;
        v104[10] = (float32x4_t)v1343[2];
        v104[11] = v113;
        v104[8] = v111;
        v104[9] = v112;
        float32x4_t v114 = v1345;
        float32x4_t v1345 = 0uLL;
        v104[12] = v114;
        f32 = (_OWORD *)v104[13].f32;
      }
      *((void *)&v1301 + 1) = f32;

      unint64_t v134 = objc_msgSend_parentIdentifier(v103, v132, v133);
      uint64_t v136 = objc_msgSend_objectForKey_(v1246, v135, (uint64_t)v134);
      BOOL v137 = v136 == 0;

      if (v137)
      {
        int v140 = objc_msgSend_numberWithInt_(NSNumber, v138, v100);
        *(void *)&long long v1369 = v140;
        uint64_t v142 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v146, (uint64_t)&v1369, 1);
        uint64_t v144 = objc_msgSend_mutableCopy(v142, v147, v148);
        int v151 = objc_msgSend_parentIdentifier(v103, v149, v150);
        objc_msgSend_setObject_forKey_(v1246, v152, (uint64_t)v144, v151);
      }
      else
      {
        int v140 = objc_msgSend_parentIdentifier(v103, v138, v139);
        uint64_t v142 = objc_msgSend_objectForKey_(v1246, v141, (uint64_t)v140);
        uint64_t v144 = objc_msgSend_numberWithInt_(NSNumber, v143, v100);
        objc_msgSend_addObject_(v142, v145, (uint64_t)v144);
      }

      ++v100;
    }
    unint64_t v1236 = 0;
    v1296[1] = 0;
    v1296[0] = 0;
    v1297 = 0;
    while (v1236 < objc_msgSend_count(v1231, v101, v102))
    {
      v1241 = objc_msgSend_objectAtIndexedSubscript_(v1231, v153, v1236);
      sub_25B4146AC((uint64_t)v1323, v1241);
      if (v1246)
      {
        int v156 = objc_msgSend_identifier(v1241, v154, v155);
        uint64_t v160 = objc_msgSend_objectForKey_(v1246, v157, (uint64_t)v156);
        if (v160)
        {
          long long v161 = objc_msgSend_identifier(v1241, v158, v159);
          long long v163 = objc_msgSend_objectForKey_(v1246, v162, (uint64_t)v161);
          BOOL v166 = objc_msgSend_count(v163, v164, v165) == 0;

          if (!v166)
          {
            juint64_t j = (uint64_t)RSObjectAlign;
            float32x4_t v1317 = v1330;
            long long v1318 = *(_OWORD *)v1331;
            long long v1319 = *(_OWORD *)&v1331[16];
            float32x4_t v1320 = v1332;
            float32x4_t v1313 = v1326;
            float32x4_t v1314 = v1327;
            float32x4_t v1315 = v1328;
            float32x4_t v1316 = v1329;
            *(float32x4_t *)v1309 = v1323[0];
            float32x4_t v1310 = v1323[1];
            float32x4_t v1311 = v1324;
            float32x4_t v1312 = v1325;
            id v167 = v1333;
            id v1321 = v167;
            id v170 = v1334[0];
            id v1322 = v170;
            *(void *)&v1385[0] = 0;
            float32x4_t v1384 = 0uLL;
            v172 = (long long *)*((void *)&v1301 + 1);
            id v171 = (id *)v1301;
            v1388[0] = &v1384;
            LOBYTE(v1388[1]) = 0;
            if (*((void *)&v1301 + 1) != (void)v1301)
            {
              unint64_t v173 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)&v1301 + 1) - v1301) >> 4);
              if (v173 > 0x13B13B13B13B13BLL) {
                sub_25B3FBC4C();
              }
              float32x2_t v174 = sub_25B4152BC(v173);
              v1384.i64[0] = (uint64_t)v174;
              v1384.i64[1] = (uint64_t)v174;
              *(void *)&v1385[0] = &v174[13 * v175];
              v1376.i64[0] = (uint64_t)v174;
              v1363 = v174;
              buf[0].i64[0] = (uint64_t)v1385;
              buf[0].i64[1] = (uint64_t)&v1363;
              buf[1].i64[0] = (uint64_t)&v1376;
              do
              {
                long long v176 = *(_OWORD *)v171;
                long long v177 = *((_OWORD *)v171 + 1);
                long long v178 = *((_OWORD *)v171 + 3);
                v174[2] = *((_OWORD *)v171 + 2);
                v174[3] = v178;
                *float32x2_t v174 = v176;
                v174[1] = v177;
                long long v179 = *((_OWORD *)v171 + 4);
                long long v180 = *((_OWORD *)v171 + 5);
                long long v181 = *((_OWORD *)v171 + 7);
                v174[6] = *((_OWORD *)v171 + 6);
                v174[7] = v181;
                v174[4] = v179;
                v174[5] = v180;
                long long v182 = *((_OWORD *)v171 + 8);
                long long v183 = *((_OWORD *)v171 + 9);
                long long v184 = *((_OWORD *)v171 + 11);
                v174[10] = *((_OWORD *)v171 + 10);
                v174[11] = v184;
                v174[8] = v182;
                v174[9] = v183;
                *((void *)v174 + 24) = v171[24];
                *((void *)v174 + 25) = v171[25];
                v174 += 13;
                v171 += 26;
              }
              while (v171 != (id *)v172);
              v1376.i64[0] = (uint64_t)v174;
              buf[1].i8[8] = 1;
              sub_25B4157E0((uint64_t)buf);
              v1384.i64[1] = (uint64_t)v174;
            }
            v1218 = objc_msgSend_identifier(v1241, v168, v169);
            v1226 = objc_msgSend_objectForKey_(v1246, v185, (uint64_t)v1218);
            if (RSObjectAlign)
            {
              id v186 = v1226;
              self;
              v1216 = v186;
              if (v186 && objc_msgSend_count(v186, v187, v188) && v1384.i64[0] != v1384.i64[1])
              {
                long long v1360 = 0uLL;
                v1361[0] = 0;
                __float2 v191 = __sincosf_stret(v1315.f32[1]);
                *(float *)v190.i32 = v191.__cosval;
                *(float *)v189.i32 = v191.__sinval;
                int32x4_t v192 = v190;
                *(float *)&v192.i32[1] = -v191.__sinval;
                float32x4_t v1259 = (float32x4_t)v190;
                int32x4_t v1266 = v189;
                int32x4_t v1251 = vzip1q_s32(v192, (int32x4_t)0);
                float32x4_t v193 = (float32x4_t)vzip1q_s32(v1251, v189);
                *(float *)v189.i32 = -v191.__sinval;
                v189.i32[1] = LODWORD(v191.__cosval);
                int32x4_t v1207 = (int32x4_t)v193;
                float32x4_t v1210 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v193, v1314.f32[0]), (float32x4_t)v189.u64[0], *(float32x2_t *)v1314.f32, 1), (float32x4_t)xmmword_25B5F10E0, v1314, 2);
                float32x4_t v1212 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v193, v1313.f32[0]), (float32x4_t)v189.u64[0], *(float32x2_t *)v1313.f32, 1), (float32x4_t)xmmword_25B5F10E0, v1313, 2);
                float32x4_t v1376 = 0u;
                float32x4_t v1377 = 0u;
                obuint64_t j = vmovn_s32(vcgtq_f32(v1210, v1212)).i8[2];
                if (obj) {
                  int v194 = -1;
                }
                else {
                  int v194 = 0;
                }
                float32x4_t v1378 = 0uLL;
                float32x4_t v1379 = 0uLL;
                juint64_t j = v1216;
                uint64_t v198 = objc_msgSend_countByEnumeratingWithState_objects_count_((void *)jj, v195, (uint64_t)&v1376, v1388, 16);
                unsigned int v1209 = v194;
                int32x4_t v199 = v1266;
                v201.i32[1] = v1259.i32[0];
                int32x4_t v200 = vzip1q_s32(v201, (int32x4_t)0);
                v201.i64[1] = 0;
                v201.i32[0] = v1259.i32[0];
                int32x4_t v1201 = v200;
                float32x4_t v1202 = (float32x4_t)v1259.u32[0];
                float v202 = 0;
                float32x4_t v203 = 0;
                if (v198)
                {
                  unint64_t v204 = 0;
                  v201.i32[1] = v1266.i32[0];
                  float32x4_t v1267 = (float32x4_t)v201;
                  float32x4_t v1259 = (float32x4_t)vzip2q_s32(v1251, v200);
                  uint64_t v205 = *(void *)v1377.i64[0];
                  do
                  {
                    for (uint64_t i = 0; i != v198; ++i)
                    {
                      if (*(void *)v1377.i64[0] != v205) {
                        objc_enumerationMutation((id)jj);
                      }
                      int v207 = objc_msgSend_intValue(*(void **)(v1376.i64[1] + 8 * i), v196, v197);
                      if (0x4EC4EC4EC4EC4EC5 * ((v1384.i64[1] - v1384.i64[0]) >> 4) <= (unint64_t)v207)
                      {
                        if (qword_26A5020B0 != -1) {
                          dispatch_once(&qword_26A5020B0, &unk_2708F1218);
                        }
                        uint64_t v211 = (id)qword_26A5020A8;
                        if (os_log_type_enabled(v211, OS_LOG_TYPE_ERROR))
                        {
                          buf[0].i16[0] = 0;
                          _os_log_error_impl(&dword_25B3F3000, v211, OS_LOG_TYPE_ERROR, "The index of wall opening is larger is out of range, skip.", (uint8_t *)buf, 2u);
                        }
                      }
                      else
                      {
                        v208 = (float32x2_t *)(v1384.i64[0] + 208 * v207);
                        float32x4_t v209 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1267, COERCE_FLOAT(*(_OWORD *)v208[8].f32)), v1259, v208[8], 1), (float32x4_t)xmmword_25B5F10E0, *(float32x4_t *)v208[8].f32, 2);
                        float32x4_t v210 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1267, COERCE_FLOAT(*(_OWORD *)v208[10].f32)), v1259, v208[10], 1), (float32x4_t)xmmword_25B5F10E0, *(float32x4_t *)v208[10].f32, 2);
                        v210.i32[0] = v210.i32[1];
                        if (v210.f32[1] >= v209.f32[1]) {
                          v209.f32[0] = v209.f32[1];
                        }
                        else {
                          v209.f32[0] = v210.f32[1];
                        }
                        if (v209.f32[1] >= v210.f32[1]) {
                          v210.f32[0] = v209.f32[1];
                        }
                        v209.i32[1] = v210.i32[0];
                        if ((unint64_t)v203 >= v204)
                        {
                          uint64_t v1252 = v209.i64[0];
                          uint64_t v212 = v203 - v202;
                          unint64_t v213 = v212 + 1;
                          if ((unint64_t)(v212 + 1) >> 61) {
                            sub_25B3FBC4C();
                          }
                          if ((uint64_t)(v204 - (void)v202) >> 2 > v213) {
                            unint64_t v213 = (uint64_t)(v204 - (void)v202) >> 2;
                          }
                          if (v204 - (unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v214 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v214 = v213;
                          }
                          if (v214) {
                            unint64_t v214 = (unint64_t)sub_25B3FCAD4(v214);
                          }
                          else {
                            float32x4_t v196 = 0;
                          }
                          uint64_t v215 = (float32x2_t *)(v214 + 8 * v212);
                          *uint64_t v215 = (float32x2_t)v1252;
                          uint64_t v216 = v215 + 1;
                          while (v203 != v202)
                          {
                            float32x2_t v217 = v203[-1];
                            --v203;
                            v215[-1] = v217;
                            --v215;
                          }
                          unint64_t v204 = v214 + 8 * (void)v196;
                          if (v202) {
                            operator delete(v202);
                          }
                          float v202 = v215;
                          float32x4_t v203 = v216;
                        }
                        else
                        {
                          *v203++ = *(float32x2_t *)v209.f32;
                        }
                      }
                    }
                    uint64_t v198 = objc_msgSend_countByEnumeratingWithState_objects_count_((void *)jj, v196, (uint64_t)&v1376, v1388, 16);
                  }
                  while (v198);
                }

                int32x2_t v218 = (int32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v1209), (int8x8_t)vzip2_s32(*(int32x2_t *)v1212.f32, *(int32x2_t *)v1210.f32), (int8x8_t)vzip2_s32(*(int32x2_t *)v1210.f32, *(int32x2_t *)v1212.f32));
                if (vcgt_f32((float32x2_t)v218, (float32x2_t)vdup_lane_s32(v218, 1)).u8[0])
                {
                  do
                  {
                    int32x2_t v219 = vrev64_s32(v218);
                    unsigned __int8 v220 = vcgt_f32((float32x2_t)vdup_lane_s32(v218, 1), (float32x2_t)v218).u8[0];
                    int32x2_t v218 = v219;
                  }
                  while ((v220 & 1) != 0);
                }
                else
                {
                  int32x2_t v219 = v218;
                }
                int32x2_t v1268 = v219;
                if (v202 == v203)
                {
                  int v249 = (int32x2_t *)operator new(8uLL);
                  int32x2_t *v249 = v1268;
                  float32x2_t v263 = v249 + 1;
                  *(void *)&v1387[0] = 0;
                  v1386[0] = 0;
                  v1386[1] = 0;
LABEL_159:
                  uint64_t v264 = 0;
                  float32x4_t v265 = v1202;
                  v265.f32[1] = -v191.__sinval;
                  float32x4_t v1259 = vmulq_n_f32(v265, v1212.f32[0]);
                  float32x4_t v1271 = (float32x4_t)vzip2q_s32(vzip1q_s32(v1207, (int32x4_t)0), v1201);
                  float32x4_t v1253 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1212, 2);
                  if ((unint64_t)(v263 - v249) <= 1) {
                    uint64_t v266 = 1;
                  }
                  else {
                    uint64_t v266 = v263 - v249;
                  }
                  while (2)
                  {
                    float32x2_t v267 = (float32x2_t)v249[v264];
                    __n128 v268 = (__n128)vmlaq_f32(vmlaq_n_f32(v1259, v1271, v267.f32[0]), v1253, (float32x4_t)xmmword_25B5F10E0);
                    __n128 v269 = (__n128)vmlaq_f32(vmlaq_lane_f32(v1259, v1271, v267, 1), v1253, (float32x4_t)xmmword_25B5F10E0);
                    if (obj)
                    {
                      sub_25B41389C((uint64_t)buf, (uint64_t)v1309, v268, v269.n128_f64[0]);
                      int16x8_t v270 = (float32x4_t *)v1386[1];
                      if (v1386[1] < (void *)*(void *)&v1387[0])
                      {
LABEL_166:
                        float32x4_t v271 = buf[0];
                        float32x4_t v272 = buf[1];
                        float32x4_t v273 = v1338;
                        *((float32x4_t *)v1386[1] + 2) = v1337;
                        v270[3] = v273;
                        *int16x8_t v270 = v271;
                        v270[1] = v272;
                        float32x4_t v274 = v1339;
                        float32x4_t v275 = v1340;
                        float32x4_t v276 = v1342;
                        v270[6] = v1341;
                        v270[7] = v276;
                        v270[4] = v274;
                        v270[5] = v275;
                        float32x4_t v277 = (float32x4_t)v1343[0];
                        float32x4_t v278 = (float32x4_t)v1343[1];
                        float32x4_t v279 = v1344;
                        v270[10] = (float32x4_t)v1343[2];
                        v270[11] = v279;
                        v270[8] = v277;
                        v270[9] = v278;
                        float32x4_t v280 = v1345;
                        float32x4_t v1345 = 0uLL;
                        v270[12] = v280;
                        float32x4_t v281 = v270 + 13;
                        goto LABEL_180;
                      }
                      uint64_t v282 = 0x4EC4EC4EC4EC4EC5 * (((char *)v1386[1] - (char *)v1386[0]) >> 4);
                      unint64_t v283 = v282 + 1;
                      if ((unint64_t)(v282 + 1) > 0x13B13B13B13B13BLL) {
                        sub_25B3FBC4C();
                      }
                      if (0x9D89D89D89D89D8ALL * ((uint64_t)(*(void *)&v1387[0] - (unint64_t)v1386[0]) >> 4) > v283) {
                        unint64_t v283 = 0x9D89D89D89D89D8ALL
                      }
                             * ((uint64_t)(*(void *)&v1387[0] - (unint64_t)v1386[0]) >> 4);
                      if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                                            * ((uint64_t)(*(void *)&v1387[0] - (unint64_t)v1386[0]) >> 4)) >= 0x9D89D89D89D89DLL)
                        unint64_t v284 = 0x13B13B13B13B13BLL;
                      else {
                        unint64_t v284 = v283;
                      }
                    }
                    else
                    {
                      sub_25B41389C((uint64_t)buf, (uint64_t)v1309, v269, v268.n128_f64[0]);
                      int16x8_t v270 = (float32x4_t *)v1386[1];
                      if (v1386[1] < (void *)*(void *)&v1387[0]) {
                        goto LABEL_166;
                      }
                      uint64_t v282 = 0x4EC4EC4EC4EC4EC5 * (((char *)v1386[1] - (char *)v1386[0]) >> 4);
                      unint64_t v285 = v282 + 1;
                      if ((unint64_t)(v282 + 1) > 0x13B13B13B13B13BLL) {
                        sub_25B3FBC4C();
                      }
                      if (0x9D89D89D89D89D8ALL * ((uint64_t)(*(void *)&v1387[0] - (unint64_t)v1386[0]) >> 4) > v285) {
                        unint64_t v285 = 0x9D89D89D89D89D8ALL
                      }
                             * ((uint64_t)(*(void *)&v1387[0] - (unint64_t)v1386[0]) >> 4);
                      if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                                            * ((uint64_t)(*(void *)&v1387[0] - (unint64_t)v1386[0]) >> 4)) >= 0x9D89D89D89D89DLL)
                        unint64_t v284 = 0x13B13B13B13B13BLL;
                      else {
                        unint64_t v284 = v285;
                      }
                    }
                    v1367 = (char *)v1387;
                    long long v286 = (char *)sub_25B4152BC(v284);
                    uint64_t v287 = (float32x4_t *)&v286[208 * v282];
                    v1363 = v286;
                    v1364 = v287;
                    v1366 = &v286[208 * v288];
                    float32x4_t v289 = buf[0];
                    float32x4_t v290 = buf[1];
                    float32x4_t v291 = v1338;
                    v287[2] = v1337;
                    v287[3] = v291;
                    float32x4_t v292 = v1342;
                    float32x4_t v293 = v1340;
                    float32x4_t v294 = v1339;
                    v287[6] = v1341;
                    v287[7] = v292;
                    v287[4] = v294;
                    v287[5] = v293;
                    float32x4_t v295 = v1344;
                    float32x4_t v296 = (float32x4_t)v1343[1];
                    float32x4_t v297 = (float32x4_t)v1343[0];
                    v287[10] = (float32x4_t)v1343[2];
                    v287[11] = v295;
                    v287[8] = v297;
                    v287[9] = v296;
                    *uint64_t v287 = v289;
                    v287[1] = v290;
                    float32x4_t v298 = v1345;
                    float32x4_t v1345 = 0uLL;
                    v287[12] = v298;
                    v1365 = (_OWORD *)v287[13].f32;
                    sub_25B415308((uint64_t *)v1386, &v1363);
                    float32x4_t v281 = (float32x4_t *)v1386[1];
                    sub_25B415380((uint64_t)&v1363);
LABEL_180:
                    v1386[1] = v281;

                    if (v266 == ++v264) {
                      goto LABEL_181;
                    }
                    continue;
                  }
                }
                sub_25B4149F4(v202, v203, 126 - 2 * __clz(v203 - v202), 1);
                int v249 = 0;
                uint64_t v250 = 0;
                unint64_t v251 = 0;
                BOOL v252 = 0;
                unint64_t v253 = 0;
                int32x2_t v254 = v1268;
                do
                {
                  *(int32x2_t *)&long long v248 = v254;
                  int32x2_t v255 = (int32x2_t)v202[v253];
                  if ((float)(*(float *)v254.i32 + 0.15) < *(float *)v255.i32)
                  {
                    long long v1269 = v248;
                    int32x2_t v256 = vzip1_s32(v254, v255);
                    if ((unint64_t)v252 >= v251)
                    {
                      uint64_t v257 = v252 - v249;
                      unint64_t v258 = v257 + 1;
                      if ((unint64_t)(v257 + 1) >> 61) {
                        sub_25B3FBC4C();
                      }
                      if ((uint64_t)(v251 - (void)v249) >> 2 > v258) {
                        unint64_t v258 = (uint64_t)(v251 - (void)v249) >> 2;
                      }
                      if (v251 - (unint64_t)v249 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v259 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v259 = v258;
                      }
                      if (v259) {
                        unint64_t v259 = (unint64_t)sub_25B3FCAD4(v259);
                      }
                      else {
                        uint64_t v260 = 0;
                      }
                      uint64_t v261 = (int32x2_t *)(v259 + 8 * v257);
                      *uint64_t v261 = v256;
                      BOOL v252 = v261 + 1;
                      while (v250 != v249)
                      {
                        int32x2_t v262 = v250[-1];
                        --v250;
                        v261[-1] = v262;
                        --v261;
                      }
                      unint64_t v251 = v259 + 8 * v260;
                      if (v249) {
                        operator delete(v249);
                      }
                      int v249 = v261;
                    }
                    else
                    {
                      *v252++ = v256;
                    }
                    int32x2_t v255 = (int32x2_t)v202[v253];
                    uint64_t v250 = v252;
                    long long v248 = v1269;
                  }
                  if ((vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)&v255, *(float32x2_t *)&v248)).i32[1] & 1) == 0) {
                    goto LABEL_155;
                  }
                  int32x2_t v254 = (int32x2_t)__PAIR64__(DWORD1(v248), v255.u32[1]);
                  ++v253;
                }
                while (v253 < v203 - v202);
                unint64_t v1270 = __PAIR64__(DWORD1(v248), v255.u32[1]);
                if (*(float *)&v255.i32[1] >= (float)(*((float *)&v248 + 1) + 0.15))
                {
LABEL_155:
                  float32x2_t v263 = v250;
                  goto LABEL_156;
                }
                if ((unint64_t)v252 >= v251)
                {
                  uint64_t v374 = v252 - v249;
                  unint64_t v375 = v374 + 1;
                  if ((unint64_t)(v374 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v251 - (void)v249) >> 2 > v375) {
                    unint64_t v375 = (uint64_t)(v251 - (void)v249) >> 2;
                  }
                  if (v251 - (unint64_t)v249 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v376 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v376 = v375;
                  }
                  if (v376) {
                    unint64_t v376 = (unint64_t)sub_25B3FCAD4(v376);
                  }
                  long long v377 = (unint64_t *)(v376 + 8 * v374);
                  *long long v377 = v1270;
                  float32x2_t v263 = (int32x2_t *)(v377 + 1);
                  while (v250 != v249)
                  {
                    unint64_t v378 = (unint64_t)v250[-1];
                    --v250;
                    *--long long v377 = v378;
                  }
                  if (v249) {
                    operator delete(v249);
                  }
                  int v249 = (int32x2_t *)v377;
                  BOOL v252 = v263;
                }
                else
                {
                  *v252++ = (int32x2_t)__PAIR64__(DWORD1(v248), v255.u32[1]);
                  float32x2_t v263 = v252;
                }
LABEL_156:
                v1386[1] = 0;
                v1386[0] = 0;
                *(void *)&v1387[0] = 0;
                if (v252 != v249) {
                  goto LABEL_159;
                }
LABEL_181:
                if (v249) {
                  operator delete(v249);
                }
                if (v202) {
                  operator delete(v202);
                }
                buf[0].i64[0] = (uint64_t)&v1360;
                sub_25B414958((void ***)buf);
                id v247 = v1322;
                id v246 = v1321;
              }
              else
              {
                v1343[0] = v1317;
                v1343[1] = v1318;
                v1343[2] = v1319;
                float32x4_t v1344 = v1320;
                float32x4_t v1339 = v1313;
                float32x4_t v1340 = v1314;
                float32x4_t v1341 = v1315;
                float32x4_t v1342 = v1316;
                buf[0] = *(float32x4_t *)v1309;
                buf[1] = v1310;
                float32x4_t v1337 = v1311;
                float32x4_t v1338 = v1312;
                id v246 = v167;
                v1345.i64[0] = (uint64_t)v246;
                id v247 = v170;
                v1345.i64[1] = (uint64_t)v247;
                *(void *)&v1387[0] = 0;
                v1386[0] = 0;
                v1386[1] = 0;
                v1388[0] = v1386;
                LOBYTE(v1388[1]) = 0;
                v1386[0] = operator new(0xD0uLL);
                v1386[1] = v1386[0];
                *(void *)&v1387[0] = (char *)v1386[0] + 208;
                v1386[1] = (void *)sub_25B414894((uint64_t)v1387, (long long *)buf, &v1346, (uint64_t)v1386[0]);
              }
            }
            else
            {

              v1386[1] = 0;
              v1386[0] = 0;
              *(void *)&v1387[0] = 0;
            }

            buf[0].i64[0] = (uint64_t)&v1384;
            sub_25B414958((void ***)buf);
            uint64_t v299 = (long long *)v1386[0];
            if ((char *)v1386[1] - (char *)v1386[0] < 1) {
              goto LABEL_218;
            }
            juint64_t j = 0x4EC4EC4EC4EC4EC5 * (((char *)v1386[1] - (char *)v1386[0]) >> 4);
            long long v300 = (char *)v1296[1];
            uint64_t v301 = v1296[0];
            int64_t v302 = ((char *)v1296[1] - (char *)v1296[0]) / 208;
            uint64_t v303 = (long long *)((char *)v1296[0] + 208 * v302);
            if (0x4EC4EC4EC4EC4EC5 * ((int64_t)((uint64_t)v1297 - (unint64_t)v1296[1]) >> 4) < jj)
            {
              unint64_t v304 = v302 + jj;
              if ((unint64_t)(v302 + jj) > 0x13B13B13B13B13BLL) {
                sub_25B3FBC4C();
              }
              if (0x9D89D89D89D89D8ALL * ((int64_t)((uint64_t)v1297 - (unint64_t)v1296[0]) >> 4) > v304) {
                unint64_t v304 = 0x9D89D89D89D89D8ALL * ((int64_t)((uint64_t)v1297 - (unint64_t)v1296[0]) >> 4);
              }
              if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                                    * ((int64_t)((uint64_t)v1297 - (unint64_t)v1296[0]) >> 4)) >= 0x9D89D89D89D89DLL)
                unint64_t v305 = 0x13B13B13B13B13BLL;
              else {
                unint64_t v305 = v304;
              }
              v1337.i64[0] = (uint64_t)&v1297;
              if (v305) {
                unint64_t v305 = (unint64_t)sub_25B4152BC(v305);
              }
              else {
                uint64_t v306 = 0;
              }
              uint64_t v349 = v305 + 208 * v302;
              buf[0].i64[0] = v305;
              buf[0].i64[1] = v349;
              buf[1].i64[0] = v349;
              buf[1].i64[1] = v305 + 208 * v306;
              uint64_t v350 = v349 + 208 * jj;
              do
              {
                long long v351 = *v299;
                long long v352 = v299[1];
                long long v353 = v299[3];
                *(_OWORD *)(v349 + 32) = v299[2];
                *(_OWORD *)(v349 + 48) = v353;
                *(_OWORD *)uint64_t v349 = v351;
                *(_OWORD *)(v349 + 16) = v352;
                long long v354 = v299[4];
                long long v355 = v299[5];
                long long v356 = v299[7];
                *(_OWORD *)(v349 + 96) = v299[6];
                *(_OWORD *)(v349 + 112) = v356;
                *(_OWORD *)(v349 + 64) = v354;
                *(_OWORD *)(v349 + 80) = v355;
                long long v357 = v299[8];
                long long v358 = v299[9];
                long long v359 = v299[11];
                *(_OWORD *)(v349 + 160) = v299[10];
                *(_OWORD *)(v349 + 176) = v359;
                *(_OWORD *)(v349 + 128) = v357;
                *(_OWORD *)(v349 + 144) = v358;
                *(void *)(v349 + 192) = *((id *)v299 + 24);
                *(void *)(v349 + 200) = *((id *)v299 + 25);
                v349 += 208;
                v299 += 13;
              }
              while (v349 != v350);
              buf[1].i64[0] = v350;
              buf[0].i64[1] = sub_25B4153E4((uint64_t)&v1297, (uint64_t)v303, (uint64_t)v303, (uint64_t)v1296[0], (uint64_t)v1296[0], buf[0].i64[1], buf[0].i64[1]);
              long long v360 = (long long *)v1296[1];
              long long v361 = (_OWORD *)buf[1].i64[0];
              v1376.i64[0] = buf[1].i64[0];
              v1363 = (unsigned char *)buf[1].i64[0];
              v1388[0] = &v1297;
              v1388[1] = &v1363;
              v1389.i64[0] = (uint64_t)&v1376;
              if (v303 != v1296[1])
              {
                do
                {
                  long long v362 = *v303;
                  long long v363 = v303[1];
                  long long v364 = v303[3];
                  v361[2] = v303[2];
                  v361[3] = v364;
                  *long long v361 = v362;
                  v361[1] = v363;
                  long long v365 = v303[4];
                  long long v366 = v303[5];
                  long long v367 = v303[7];
                  v361[6] = v303[6];
                  v361[7] = v367;
                  v361[4] = v365;
                  v361[5] = v366;
                  long long v368 = v303[8];
                  long long v369 = v303[9];
                  long long v370 = v303[11];
                  v361[10] = v303[10];
                  v361[11] = v370;
                  v361[8] = v368;
                  v361[9] = v369;
                  long long v371 = v303[12];
                  *((void *)v303 + 24) = 0;
                  *((void *)v303 + 25) = 0;
                  v361[12] = v371;
                  v361 += 13;
                  v303 += 13;
                }
                while (v303 != v360);
                v1376.i64[0] = (uint64_t)v361;
              }
              v1389.i8[8] = 1;
              sub_25B4157E0((uint64_t)v1388);
              float32x4_t v372 = *(float32x4_t *)v1296;
              v1296[0] = (void *)buf[0].i64[1];
              v1296[1] = v361;
              *(float32x4_t *)((char *)buf + 8) = v372;
              uint64_t v373 = (uint64_t)v1297;
              v1297 = (void *)buf[1].i64[1];
              buf[1].i64[1] = v373;
              buf[0].i64[0] = v372.i64[0];
              sub_25B415380((uint64_t)buf);
              goto LABEL_218;
            }
            uint64_t v307 = (char *)v1296[1] - (char *)v303;
            if (0x4EC4EC4EC4EC4EC5 * (((char *)v1296[1] - (char *)v303) >> 4) >= jj)
            {
              uint64_t v308 = (long long *)((char *)v1386[0] + 16 * (((char *)v1386[1] - (char *)v1386[0]) >> 4));
              uint64_t v309 = (char *)v1296[1];
            }
            else
            {
              uint64_t v308 = (long long *)((char *)v1386[0] + 16 * (((char *)v1296[1] - (char *)v303) >> 4));
              uint64_t v309 = (char *)sub_25B414894((uint64_t)&v1297, v308, (long long *)v1386[1], (uint64_t)v1296[1]);
              v1296[1] = v309;
              if (v307 < 1)
              {
LABEL_218:
                buf[0].i64[0] = (uint64_t)v1386;
                sub_25B414958((void ***)buf);
                goto LABEL_219;
              }
            }
            unint64_t v310 = &v309[-208 * jj];
            unint64_t v311 = v309;
            while (v310 < v300)
            {
              long long v312 = *(_OWORD *)v310;
              long long v313 = *((_OWORD *)v310 + 1);
              long long v314 = *((_OWORD *)v310 + 3);
              v311[2] = *((_OWORD *)v310 + 2);
              v311[3] = v314;
              *unint64_t v311 = v312;
              v311[1] = v313;
              long long v315 = *((_OWORD *)v310 + 4);
              long long v316 = *((_OWORD *)v310 + 5);
              long long v317 = *((_OWORD *)v310 + 7);
              v311[6] = *((_OWORD *)v310 + 6);
              v311[7] = v317;
              v311[4] = v315;
              v311[5] = v316;
              long long v318 = *((_OWORD *)v310 + 8);
              long long v319 = *((_OWORD *)v310 + 9);
              long long v320 = *((_OWORD *)v310 + 11);
              v311[10] = *((_OWORD *)v310 + 10);
              v311[11] = v320;
              v311[8] = v318;
              v311[9] = v319;
              long long v321 = *((_OWORD *)v310 + 12);
              *((void *)v310 + 24) = 0;
              *((void *)v310 + 25) = 0;
              v311[12] = v321;
              v311 += 13;
              v310 += 208;
            }
            BOOL v322 = (char *)&v303[13 * jj];
            v1296[1] = v311;
            if (v309 != v322)
            {
              uint64_t v323 = 16 * ((v309 - v322) >> 4);
              uint64_t v324 = (uint64_t)v301 + 208 * v302 - 16;
              uint64_t v325 = v309 - 16;
              do
              {
                juint64_t j = v324 + v323;
                long long v326 = *(_OWORD *)(v324 + v323 - 192);
                long long v327 = *(_OWORD *)(v324 + v323 - 176);
                long long v328 = *(_OWORD *)(v324 + v323 - 144);
                *((_OWORD *)v325 - 10) = *(_OWORD *)(v324 + v323 - 160);
                *((_OWORD *)v325 - 9) = v328;
                *((_OWORD *)v325 - 12) = v326;
                *((_OWORD *)v325 - 11) = v327;
                long long v329 = *(_OWORD *)(v324 + v323 - 128);
                long long v330 = *(_OWORD *)(v324 + v323 - 112);
                long long v331 = *(_OWORD *)(v324 + v323 - 80);
                *((_OWORD *)v325 - 6) = *(_OWORD *)(v324 + v323 - 96);
                *((_OWORD *)v325 - 5) = v331;
                *((_OWORD *)v325 - 8) = v329;
                *((_OWORD *)v325 - 7) = v330;
                long long v332 = *(_OWORD *)(v324 + v323 - 64);
                long long v333 = *(_OWORD *)(v324 + v323 - 48);
                long long v334 = *(_OWORD *)(v324 + v323 - 16);
                *((_OWORD *)v325 - 2) = *(_OWORD *)(v324 + v323 - 32);
                *((_OWORD *)v325 - 1) = v334;
                *((_OWORD *)v325 - 4) = v332;
                *((_OWORD *)v325 - 3) = v333;
                uint64_t v335 = *(void *)(v324 + v323);
                *(void *)(v324 + v323) = 0;
                v336 = *(void **)v325;
                *(void *)uint64_t v325 = v335;

                uint64_t v337 = *(void *)(v324 + v323 + 8);
                *(void *)(v324 + v323 + 8) = 0;
                float v338 = (void *)*((void *)v325 + 1);
                *((void *)v325 + 1) = v337;

                v325 -= 208;
                v323 -= 208;
              }
              while (v323);
            }
            while (v299 != v308)
            {
              long long v339 = *v299;
              long long v340 = v299[1];
              long long v341 = v299[3];
              v303[2] = v299[2];
              v303[3] = v341;
              *uint64_t v303 = v339;
              v303[1] = v340;
              long long v342 = v299[4];
              long long v343 = v299[5];
              long long v344 = v299[7];
              v303[6] = v299[6];
              v303[7] = v344;
              v303[4] = v342;
              v303[5] = v343;
              long long v345 = v299[8];
              long long v346 = v299[9];
              long long v347 = v299[11];
              v303[10] = v299[10];
              v303[11] = v347;
              v303[8] = v345;
              v303[9] = v346;
              unint64_t v348 = (id *)(v303 + 12);
              objc_storeStrong(v348++, *((id *)v299 + 24));
              objc_storeStrong(v348, *((id *)v299 + 25));
              v299 += 13;
              uint64_t v303 = (long long *)(v348 + 1);
            }
            goto LABEL_218;
          }
        }
        else
        {
        }
      }
      id v221 = (float32x4_t *)v1296[1];
      if (v1296[1] >= v1297)
      {
        uint64_t v232 = 0x4EC4EC4EC4EC4EC5 * (((char *)v1296[1] - (char *)v1296[0]) >> 4);
        unint64_t v233 = v232 + 1;
        if ((unint64_t)(v232 + 1) > 0x13B13B13B13B13BLL) {
          sub_25B3FBC4C();
        }
        if (0x9D89D89D89D89D8ALL * ((int64_t)((uint64_t)v1297 - (unint64_t)v1296[0]) >> 4) > v233) {
          unint64_t v233 = 0x9D89D89D89D89D8ALL * ((int64_t)((uint64_t)v1297 - (unint64_t)v1296[0]) >> 4);
        }
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                              * ((int64_t)((uint64_t)v1297 - (unint64_t)v1296[0]) >> 4)) >= 0x9D89D89D89D89DLL)
          unint64_t v234 = 0x13B13B13B13B13BLL;
        else {
          unint64_t v234 = v233;
        }
        v1337.i64[0] = (uint64_t)&v1297;
        if (v234) {
          unint64_t v234 = (unint64_t)sub_25B4152BC(v234);
        }
        else {
          uint64_t v235 = 0;
        }
        uint64_t v236 = v234 + 208 * v232;
        buf[0].i64[0] = v234;
        buf[0].i64[1] = v236;
        buf[1].i64[1] = v234 + 208 * v235;
        float32x4_t v237 = v1323[0];
        float32x4_t v238 = v1323[1];
        float32x4_t v239 = v1325;
        *(float32x4_t *)(v236 + 32) = v1324;
        *(float32x4_t *)(v236 + 48) = v239;
        float32x4_t v240 = v1329;
        float32x4_t v241 = v1327;
        float32x4_t v242 = v1326;
        *(float32x4_t *)(v236 + 96) = v1328;
        *(float32x4_t *)(v236 + 112) = v240;
        *(float32x4_t *)(v236 + 64) = v242;
        *(float32x4_t *)(v236 + 80) = v241;
        float32x4_t v243 = v1332;
        long long v244 = *(_OWORD *)v1331;
        float32x4_t v245 = v1330;
        *(_OWORD *)(v236 + 160) = *(_OWORD *)&v1331[16];
        *(float32x4_t *)(v236 + 176) = v243;
        *(float32x4_t *)(v236 + 128) = v245;
        *(_OWORD *)(v236 + 144) = v244;
        *(float32x4_t *)uint64_t v236 = v237;
        *(float32x4_t *)(v236 + 16) = v238;
        *(void *)(v236 + 192) = v1333;
        *(void *)(v236 + 200) = v1334[0];
        buf[1].i64[0] = v236 + 208;
        sub_25B415308((uint64_t *)v1296, buf);
        int v231 = (float32x4_t *)v1296[1];
        sub_25B415380((uint64_t)buf);
      }
      else
      {
        float32x4_t v222 = v1323[0];
        float32x4_t v223 = v1323[1];
        float32x4_t v224 = v1325;
        *((float32x4_t *)v1296[1] + 2) = v1324;
        v221[3] = v224;
        float32x4_t *v221 = v222;
        v221[1] = v223;
        float32x4_t v225 = v1326;
        float32x4_t v226 = v1327;
        float32x4_t v227 = v1329;
        v221[6] = v1328;
        v221[7] = v227;
        v221[4] = v225;
        v221[5] = v226;
        float32x4_t v228 = v1330;
        float32x4_t v229 = *(float32x4_t *)v1331;
        float32x4_t v230 = v1332;
        v221[10] = *(float32x4_t *)&v1331[16];
        v221[11] = v230;
        v221[8] = v228;
        v221[9] = v229;
        v221[12].i64[0] = (uint64_t)v1333;
        v221[12].i64[1] = (uint64_t)v1334[0];
        int v231 = v221 + 13;
      }
      v1296[1] = v231;
LABEL_219:

      ++v1236;
    }

    buf[0].i64[0] = (uint64_t)&v1301;
    sub_25B414958((void ***)buf);

    v1299 = 0;
    v1298 = 0;
    unint64_t v1300 = 0;
    __n128 v380 = v1288;
    double v381 = v1289;
    if (v1288 == v1289)
    {
      v529 = 0;
      uint64_t v528 = 0;
      double v382 = 0;
      double v383 = 0;
      goto LABEL_415;
    }
    double v382 = 0;
    double v383 = 0;
    unint64_t v1242 = 0;
    juint64_t j = (uint64_t)&v1331[8];
    v1211 = v1289;
    while (2)
    {
      long long v1301 = 0u;
      long long v1302 = 0u;
      LODWORD(v1303) = 1065353216;
      if (a5) {
        goto LABEL_1096;
      }
      double v384 = (char *)v1296[0];
      if (v1296[1] == v1296[0]) {
        goto LABEL_255;
      }
      uint64_t v385 = 0;
      unint64_t v386 = 0;
      do
      {
        if (sub_25B46EA2C((uint64_t)v380, *(float32x4_t *)&v384[v385 + 64], *(float32x4_t *)&v384[v385 + 80])) {
          sub_25B3FAF64((uint64_t)&v1301, v386, v386);
        }
        ++v386;
        double v384 = (char *)v1296[0];
        v385 += 208;
      }
      while (0x4EC4EC4EC4EC4EC5 * (((char *)v1296[1] - (char *)v1296[0]) >> 4) > v386);
      if (*((void *)&v1302 + 1))
      {
LABEL_1096:
        if (objc_msgSend_isEqualToString_((void *)v380[8].i64[0], v379, @"Fireplace")) {
          unint64_t v387 = sub_25B470D44((uint64_t *)v1296, v380, &v1301, 0.3);
        }
        else {
          unint64_t v387 = sub_25B471014((uint64_t *)v1296, (uint64_t)v380, &v1301, 0.3);
        }
        unint64_t v1237 = v387;
        int isEqualToString = objc_msgSend_isEqualToString_((void *)v380[8].i64[0], v388, @"Fireplace");
        v391 = sub_25B470018;
        if (isEqualToString) {
          v391 = sub_25B46FAD0;
        }
        *(void *)&long long v1369 = &unk_2708F14E8;
        *((void *)&v1369 + 1) = v391;
        *((void *)&v1370 + 1) = &v1369;
        v392 = (void *)MEMORY[0x263EFFA08];
        v1335 = @"Chair";
        v393 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v390, (uint64_t)&v1335, 1);
        v1234 = objc_msgSend_setWithArray_(v392, v394, (uint64_t)v393);

        uint64_t v395 = (void *)MEMORY[0x263EFFA08];
        v1357 = @"Toilet";
        v1358 = @"Sink";
        v397 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v396, (uint64_t)&v1357, 2);
        v1260 = objc_msgSend_setWithArray_(v395, v398, (uint64_t)v397);

        id v399 = v1296[1];
        v400 = v1296[0];
        float32x4_t v401 = v380[2];
        float32x4_t v403 = *v380;
        float32x4_t v402 = v380[1];
        float32x4_t v1325 = v380[3];
        float32x4_t v1324 = v401;
        v1323[0] = v403;
        v1323[1] = v402;
        float32x4_t v404 = v380[6];
        float32x4_t v406 = v380[4];
        float32x4_t v405 = v380[5];
        float32x4_t v1329 = v380[7];
        float32x4_t v1328 = v404;
        float32x4_t v1326 = v406;
        float32x4_t v1327 = v405;
        v1330.i64[0] = (uint64_t)(id)v380[8].i64[0];
        v1330.i32[2] = v380[8].i32[2];
        *(void *)v1331 = (id)v380[9].i64[0];
        v407 = (const void *)v380[9].i64[1];
        memset(&v1331[8], 0, 24);
        uint64_t v408 = v380[10].i64[0];
        unint64_t v409 = (v408 - (uint64_t)v407) >> 2;
        if (v399 == v400)
        {
          sub_25B3FCA58(&v1331[8], v407, v408, v409);
          v1332.i64[0] = (uint64_t)(id)v380[11].i64[0];
          v1332.i16[4] = v380[11].i16[4];
        }
        else
        {
          sub_25B3FCA58(&v1331[8], v407, v408, v409);
          v1332.i64[0] = (uint64_t)(id)v380[11].i64[0];
          v1332.i16[4] = v380[11].i16[4];
          id v1291 = (id)v380[8].i64[0];
          sub_25B443BC4((uint64_t *)&v1373, v380);
          unint64_t v410 = (float *)v1296[0];
          id v412 = v1291;
          if (a5)
          {
            if (qword_26A502150 != -1) {
              dispatch_once(&qword_26A502150, &unk_2708F1498);
            }
            float v413 = 0.55;
            if (qword_26A502148)
            {
              v414 = objc_msgSend_objectForKey_((void *)qword_26A502148, v411, (uint64_t)v412);
              BOOL v415 = v414 == 0;

              float v413 = 0.55;
              if (!v415)
              {
                uint64_t v417 = objc_msgSend_objectForKey_((void *)qword_26A502148, v416, (uint64_t)v412);
                objc_msgSend_floatValue(v417, v418, v419);
                goto LABEL_263;
              }
            }
          }
          else
          {
            if (qword_26A502140 != -1) {
              dispatch_once(&qword_26A502140, &unk_2708F1478);
            }
            float v413 = 0.55;
            if (qword_26A502138)
            {
              int v423 = objc_msgSend_objectForKey_((void *)qword_26A502138, v411, (uint64_t)v412);
              BOOL v424 = v423 == 0;

              float v413 = 0.55;
              if (!v424)
              {
                uint64_t v417 = objc_msgSend_objectForKey_((void *)qword_26A502138, v425, (uint64_t)v412);
                objc_msgSend_floatValue(v417, v426, v427);
LABEL_263:
                float v413 = v420;
              }
            }
          }

          float32x4_t v428 = *v380;
          float32x4_t v429 = v380[1];
          float32x4_t v430 = v380[2];
          float32x4_t v1379 = v380[3];
          float32x4_t v1378 = v430;
          float32x4_t v1377 = v429;
          float32x4_t v1376 = v428;
          float32x4_t v431 = v380[4];
          float32x4_t v432 = v380[5];
          float32x4_t v433 = v380[6];
          float32x4_t v1383 = v380[7];
          float32x4_t v1382 = v433;
          float32x4_t v1381 = v432;
          float32x4_t v1380 = v431;
          if ((objc_msgSend_containsObject_(v1234, v434, (uint64_t)v1291) & 1) == 0)
          {
            int32x2_t v439 = (float *)v1373;
            float v440 = *((float *)v1373 + 6);
            float v441 = fmodf(v410[52 * (int)v1237 + 25] - v440, 1.5708);
            if (v441 < 0.0) {
              float v441 = fmodf(v441 + 1.5708, 1.5708);
            }
            if (fabsf(v441) >= v413)
            {
              if (fabsf(v441 + -1.5708) >= v413) {
                goto LABEL_265;
              }
              float v446 = v440 + v441;
              if (v441 <= 0.0) {
                float v447 = 1.5708;
              }
              else {
                float v447 = -1.5708;
              }
              float v437 = v446 + v447;
            }
            else
            {
              float v437 = v440 + v441;
            }
            v439[6] = v437;
            sub_25B44444C((uint64_t)buf, (uint64_t)v439);
            float32x4_t v1380 = v1339;
            float32x4_t v1381 = v1340;
            float32x4_t v1382 = v1341;
            float32x4_t v1383 = v1342;
            float32x4_t v1376 = buf[0];
            float32x4_t v1377 = buf[1];
            float32x4_t v1378 = v1337;
            float32x4_t v1379 = v1338;
            *(_OWORD *)v1361 = 0u;
            long long v1360 = 0u;
            int v1362 = 1065353216;
            if (a5)
            {
              int v436 = 1;
              goto LABEL_319;
            }
            v455 = (char *)v1296[0];
            if (v1296[1] == v1296[0])
            {
              int v435 = 1;
LABEL_266:
              int v1362 = v1303;
              float32x2_t v438 = (uint64_t **)v1302;
              int v436 = v435;
            }
            else
            {
              uint64_t v456 = 0;
              unint64_t v457 = 0;
              do
              {
                if (sub_25B46EA2C((uint64_t)&v1376, *(float32x4_t *)&v455[v456 + 64], *(float32x4_t *)&v455[v456 + 80])) {
                  sub_25B3FAF64((uint64_t)&v1360, v457, v457);
                }
                ++v457;
                v455 = (char *)v1296[0];
                v456 += 208;
              }
              while (0x4EC4EC4EC4EC4EC5 * (((char *)v1296[1] - (char *)v1296[0]) >> 4) > v457);
              uint64_t v458 = *((void *)&v1360 + 1);
              int v1362 = v1303;
              float32x2_t v438 = (uint64_t **)v1302;
              if (*((void *)&v1360 + 1))
              {
                uint64_t v459 = 0;
                do
                  *(void *)(v1360 + 8 * v459++) = 0;
                while (v458 != v459);
                long long v460 = v1361[0];
                v1361[1] = 0;
                v1361[0] = 0;
                if (v460)
                {
                  while (v438)
                  {
                    unint64_t v461 = *((int *)v438 + 4);
                    v460[4] = v461;
                    long long v462 = *(_DWORD **)v460;
                    *((void *)v460 + 1) = v461;
                    long long v463 = sub_25B46F324((uint64_t)&v1360, v461, v460 + 4);
                    sub_25B46F674(&v1360, v460, v463);
                    float32x2_t v438 = (uint64_t **)*v438;
                    long long v460 = v462;
                    if (!v462) {
                      goto LABEL_316;
                    }
                  }
                  do
                  {
                    uint64_t v517 = *(_DWORD **)v460;
                    operator delete(v460);
                    int v436 = 1;
                    long long v460 = v517;
                  }
                  while (v517);
                  goto LABEL_319;
                }
              }
LABEL_316:
              int v436 = 1;
            }
            while (v438)
            {
              long long v464 = operator new(0x18uLL);
              *(void *)long long v464 = 0;
              unint64_t v465 = *((int *)v438 + 4);
              v464[4] = v465;
              *((void *)v464 + 1) = v465;
              uint64_t v466 = sub_25B46F324((uint64_t)&v1360, v465, v464 + 4);
              sub_25B46F674(&v1360, v464, v466);
              float32x2_t v438 = (uint64_t **)*v438;
            }
            goto LABEL_319;
          }
LABEL_265:
          int v435 = 0;
          int v436 = 0;
          *(_OWORD *)v1361 = 0u;
          long long v1360 = 0u;
          float v437 = 0.0;
          int v1362 = 1065353216;
          if ((a5 & 1) == 0) {
            goto LABEL_266;
          }
LABEL_319:
          id v468 = v1291;
          if (qword_26A502160 != -1) {
            dispatch_once(&qword_26A502160, &unk_2708F14B8);
          }
          float v469 = 0.0;
          if (qword_26A502158)
          {
            v470 = objc_msgSend_objectForKey_((void *)qword_26A502158, v467, (uint64_t)v468);
            BOOL v471 = v470 == 0;

            if (!v471)
            {
              long long v473 = objc_msgSend_objectForKey_((void *)qword_26A502158, v472, (uint64_t)v468);
              objc_msgSend_floatValue(v473, v474, v475);
              float v469 = v476;
            }
          }

          v1221 = v382;
          long long v477 = (char *)v1296[0];
          if (v1296[1] != v1296[0])
          {
            uint64_t v478 = 0;
            unint64_t v479 = 0;
            double v480 = v413;
            if (*((float *)&v1237 + 1) >= 0.0) {
              float v481 = *((float *)&v1237 + 1) * 0.05;
            }
            else {
              float v481 = v469;
            }
            do
            {
              if ((a5 & 1) == 0 && !sub_25B3FAE64(&v1360, v479)) {
                goto LABEL_365;
              }
              double v482 = (float32x4_t *)&v477[v478];
              float32x4_t v484 = *(float32x4_t *)&v477[v478 + 64];
              uint64_t v483 = (uint64_t)&v477[v478 + 64];
              float32x4_t v485 = vsubq_f32(v484, v482[5]);
              float v486 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v485, v485)));
              if (v486 > 0.02) {
                int v487 = v436;
              }
              else {
                int v487 = 0;
              }
              if (v487 == 1)
              {
                float v489 = fmodf((float)(v482[6].f32[1] + 6.2832) - v437, 6.2832);
                BOOL v490 = fabsf(v489) < v413
                    || fabsf(v489 + -6.2832) < v413
                    || fabs(v489 + -3.14159265) < v480
                    || fabs(v489 + 3.14159265) < v480;
                int v491 = objc_msgSend_containsObject_(v1260, v488, (uint64_t)v1291);
                float v492 = fmodf(v489, 1.5708);
                BOOL v493 = fabsf(v492) < v413;
                double v494 = fabs(v492 + -1.57079633);
                int v495 = v493 || v490;
                if (v494 < v480) {
                  int v495 = 1;
                }
                if ((v495 & (v491 ^ 1) & 1) != 0 || v1237 == v479)
                {
                  float v496 = 0.1;
                  if (v1237 == v479) {
                    float v496 = v481;
                  }
                  *(float *)v1309 = v496;
                  LOBYTE(v1388[0]) = v490;
                  LOBYTE(v1386[0]) = a5 ^ 1;
                  v1384.i8[0] = v1237 == v479;
                  buf[0].i64[0] = (uint64_t)&v1376;
                  if (!*((void *)&v1370 + 1)) {
                    sub_25B3FAF18();
                  }
                  (*(void (**)(void, float32x4_t *, uint8_t *, id *, void **, void **, float32x4_t *, float32x4_t *))(**((void **)&v1370 + 1) + 48))(*((void *)&v1370 + 1), v482, v1309, &v1291, v1388, v1386, &v1384, buf);
                }
              }
              char v497 = v486 <= 0.5 ? 1 : v436;
              if (v497) {
                goto LABEL_365;
              }
              float32x4_t v1272 = v482[5];
              *(float32x4_t *)v1277 = v482[4];
              sub_25B46EBA8((int8x16_t *)v1386, v1377, v1379, *(float32x4_t *)v1277, v1272);
              sub_25B46EBA8((int8x16_t *)&v1384, v1378, v1376, *(float32x4_t *)v1277, v1272);
              float32x4_t v1339 = v1380;
              float32x4_t v1340 = v1381;
              float32x4_t v1341 = v1382;
              float32x4_t v1342 = v1383;
              buf[0] = v1376;
              buf[1] = v1377;
              float32x4_t v1337 = v1378;
              float32x4_t v1338 = v1379;
              if (LOBYTE(v1387[0]))
              {
                if (LOBYTE(v1385[0]))
                {
                  float32x4_t v1315 = 0u;
                  float32x4_t v1316 = 0u;
                  float32x4_t v1313 = 0u;
                  float32x4_t v1314 = 0u;
                  float32x4_t v1311 = 0u;
                  float32x4_t v1312 = 0u;
                  *(_OWORD *)v1309 = 0u;
                  float32x4_t v1310 = 0u;
                  sub_25B46ED40(v1309, (uint64_t)&v1376, v483, *(float32x4_t *)v1386);
                  float32x4_t v1395 = 0u;
                  float32x4_t v1394 = 0u;
                  float32x4_t v1393 = 0u;
                  float32x4_t v1392 = 0u;
                  float32x4_t v1391 = 0u;
                  float32x4_t v1390 = 0u;
                  float32x4_t v1389 = 0u;
                  *(_OWORD *)v1388 = 0u;
                  sub_25B46ED40(v1388, (uint64_t)&v1376, v483, v1384);
                  sub_25B443BC4((uint64_t *)v1292, (float32x4_t *)v1309);
                  sub_25B443BC4((uint64_t *)&v1305, (float32x4_t *)v1388);
                  v498 = (float32x4_t *)v1309;
                  if ((float)(*((float *)v1292[0] + 3) * *((float *)v1292[0] + 4)) <= (float)(*((float *)v1305 + 3)
                                                                                             * *((float *)v1305 + 4)))
                    v498 = (float32x4_t *)v1388;
                  float32x4_t v499 = v498[5];
                  float32x4_t v1339 = v498[4];
                  float32x4_t v1340 = v499;
                  float32x4_t v500 = v498[7];
                  float32x4_t v1341 = v498[6];
                  float32x4_t v1342 = v500;
                  float32x4_t v501 = v498[1];
                  buf[0] = *v498;
                  buf[1] = v501;
                  float32x4_t v502 = v498[3];
                  float32x4_t v1337 = v498[2];
                  float32x4_t v1338 = v502;
                  v1306 = v1305;
                  operator delete(v1305);
                  if (v1292[0])
                  {
                    v1292[1] = v1292[0];
                    operator delete(v1292[0]);
                  }
                  goto LABEL_363;
                }
                v503 = (float32x4_t *)v1386;
              }
              else
              {
                if (!LOBYTE(v1385[0])) {
                  goto LABEL_363;
                }
                v503 = &v1384;
              }
              sub_25B46ED40(buf, (uint64_t)&v1376, v483, *v503);
LABEL_363:
              memset(v1309, 0, sizeof(v1309));
              v1310.i64[0] = 0;
              sub_25B443EE4((uint64_t)v1309, &v1376, buf);
              if (v1310.f32[0] >= 0.25)
              {
                float32x4_t v1380 = v1339;
                float32x4_t v1381 = v1340;
                float32x4_t v1382 = v1341;
                float32x4_t v1383 = v1342;
                float32x4_t v1376 = buf[0];
                float32x4_t v1377 = buf[1];
                float32x4_t v1378 = v1337;
                float32x4_t v1379 = v1338;
              }
LABEL_365:
              ++v479;
              long long v477 = (char *)v1296[0];
              v478 += 208;
            }
            while (0x4EC4EC4EC4EC4EC5 * (((char *)v1296[1] - (char *)v1296[0]) >> 4) > v479);
          }
          sub_25B44579C((uint64_t)buf, (long long *)&v1376, &v1291, (void *)v380[9].i64[0], (uint64_t)&v380[9].i64[1], v380[8].f32[2]);
          float32x4_t v1326 = v1339;
          float32x4_t v1327 = v1340;
          float32x4_t v1328 = v1341;
          float32x4_t v1329 = v1342;
          v1323[0] = buf[0];
          v1323[1] = buf[1];
          float32x4_t v1324 = v1337;
          float32x4_t v1325 = v1338;
          uint64_t v504 = *(void *)&v1343[0];
          *(void *)&v1343[0] = 0;
          v505 = (void *)v1330.i64[0];
          v1330.i64[0] = v504;

          double v382 = v1221;
          juint64_t j = (uint64_t)&v1331[8];
          double v381 = v1211;
          v1330.i32[2] = DWORD2(v1343[0]);
          uint64_t v506 = *(void *)&v1343[1];
          *(void *)&v1343[1] = 0;
          v507 = *(void **)v1331;
          *(void *)v1331 = v506;

          if (*(void *)&v1331[8])
          {
            *(void *)&v1331[16] = *(void *)&v1331[8];
            operator delete(*(void **)&v1331[8]);
          }
          *(_OWORD *)&v1331[8] = *(_OWORD *)((char *)&v1343[1] + 8);
          uint64_t v508 = *((void *)&v1343[2] + 1);
          uint64_t v509 = v1344.i64[0];
          memset((char *)&v1343[1] + 8, 0, 24);
          v1344.i64[0] = 0;
          v510 = (void *)v1332.i64[0];
          *(void *)&v1331[24] = v508;
          v1332.i64[0] = v509;

          v1332.i16[4] = v1344.i16[4];
          if (*((void *)&v1343[1] + 1))
          {
            *(void *)&v1343[2] = *((void *)&v1343[1] + 1);
            operator delete(*((void **)&v1343[1] + 1));
          }

          sub_25B3FB178((uint64_t)&v1360);
          if (v1373)
          {
            v1374 = (__CFString *)v1373;
            operator delete(v1373);
          }
        }
        sub_25B46EFF8(&v1369);
        uint64_t v511 = v1299;
        if ((unint64_t)v1299 >= v1300)
        {
          unint64_t v513 = 0xAAAAAAAAAAAAAAABLL * ((v1299 - (unsigned char *)v1298) >> 6);
          unint64_t v514 = v513 + 1;
          if (v513 + 1 > 0x155555555555555) {
            sub_25B3FBC4C();
          }
          if (0x5555555555555556 * ((uint64_t)(v1300 - (void)v1298) >> 6) > v514) {
            unint64_t v514 = 0x5555555555555556 * ((uint64_t)(v1300 - (void)v1298) >> 6);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1300 - (void)v1298) >> 6) >= 0xAAAAAAAAAAAAAALL) {
            unint64_t v515 = 0x155555555555555;
          }
          else {
            unint64_t v515 = v514;
          }
          v1337.i64[0] = (uint64_t)&v1300;
          if (v515) {
            unint64_t v515 = (unint64_t)sub_25B41D460(v515);
          }
          else {
            uint64_t v516 = 0;
          }
          buf[0].i64[0] = v515;
          buf[0].i64[1] = v515 + 192 * v513;
          buf[1].i64[0] = buf[0].i64[1];
          buf[1].i64[1] = v515 + 192 * v516;
          sub_25B46EAF0(buf[0].i64[1], (long long *)v1323);
          buf[1].i64[0] += 192;
          sub_25B4458D0((uint64_t *)&v1298, buf);
          float v512 = v1299;
          sub_25B4459A4((uint64_t)buf);
        }
        else
        {
          sub_25B46EAF0((uint64_t)v1299, (long long *)v1323);
          float v512 = v511 + 192;
        }
        v1299 = v512;
        if ((unint64_t)v383 >= v1242)
        {
          uint64_t v518 = (v383 - v382) >> 2;
          unint64_t v519 = v518 + 1;
          if ((unint64_t)(v518 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v1242 - (void)v382) >> 1 > v519) {
            unint64_t v519 = (uint64_t)(v1242 - (void)v382) >> 1;
          }
          if (v1242 - (unint64_t)v382 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v520 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v520 = v519;
          }
          if (v520) {
            unint64_t v520 = (unint64_t)sub_25B3FBC64(v520);
          }
          else {
            uint64_t v521 = 0;
          }
          uint64_t v522 = (char *)(v520 + 4 * v518);
          *(_DWORD *)uint64_t v522 = v1237;
          v453 = v522 + 4;
          while (v383 != v382)
          {
            int v523 = *((_DWORD *)v383 - 1);
            v383 -= 4;
            *((_DWORD *)v522 - 1) = v523;
            v522 -= 4;
          }
          unint64_t v1242 = v520 + 4 * v521;
          if (v382) {
            operator delete(v382);
          }
          double v382 = v522;
        }
        else
        {
          *(_DWORD *)double v383 = v1237;
          v453 = v383 + 4;
        }

        if (*(void *)&v1331[8])
        {
          *(void *)&v1331[16] = *(void *)&v1331[8];
          operator delete(*(void **)&v1331[8]);
        }
      }
      else
      {
LABEL_255:
        uint64_t v421 = v1299;
        if ((unint64_t)v1299 >= v1300)
        {
          unint64_t v442 = 0xAAAAAAAAAAAAAAABLL * ((v1299 - (unsigned char *)v1298) >> 6);
          unint64_t v443 = v442 + 1;
          if (v442 + 1 > 0x155555555555555) {
            sub_25B3FBC4C();
          }
          if (0x5555555555555556 * ((uint64_t)(v1300 - (void)v1298) >> 6) > v443) {
            unint64_t v443 = 0x5555555555555556 * ((uint64_t)(v1300 - (void)v1298) >> 6);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1300 - (void)v1298) >> 6) >= 0xAAAAAAAAAAAAAALL) {
            unint64_t v444 = 0x155555555555555;
          }
          else {
            unint64_t v444 = v443;
          }
          v1337.i64[0] = (uint64_t)&v1300;
          if (v444) {
            unint64_t v444 = (unint64_t)sub_25B41D460(v444);
          }
          else {
            uint64_t v445 = 0;
          }
          buf[0].i64[0] = v444;
          buf[0].i64[1] = v444 + 192 * v442;
          buf[1].i64[0] = buf[0].i64[1];
          buf[1].i64[1] = v444 + 192 * v445;
          sub_25B46EAF0(buf[0].i64[1], (long long *)v380);
          buf[1].i64[0] += 192;
          sub_25B4458D0((uint64_t *)&v1298, buf);
          v422 = v1299;
          sub_25B4459A4((uint64_t)buf);
        }
        else
        {
          sub_25B46EAF0((uint64_t)v1299, (long long *)v380);
          v422 = v421 + 192;
        }
        v1299 = v422;
        if ((unint64_t)v383 < v1242)
        {
          *(_DWORD *)double v383 = -1;
          v383 += 4;
LABEL_410:
          sub_25B3FB178((uint64_t)&v1301);
          v380 += 12;
          if (v380 != v381) {
            continue;
          }
          uint64_t v528 = v1298;
          v529 = v1299;
LABEL_415:
          v1364 = 0;
          v1363 = 0;
          v1365 = 0;
          sub_25B471374(&v1363, (uint64_t)v528, (uint64_t)v529, 0xAAAAAAAAAAAAAAABLL * ((v529 - v528) >> 6));
          v1367 = 0;
          v1366 = 0;
          uint64_t v1368 = 0;
          sub_25B3FC724(&v1366, v382, (uint64_t)v383, (v383 - v382) >> 2);
          if (v382) {
            operator delete(v382);
          }
          buf[0].i64[0] = (uint64_t)&v1298;
          sub_25B41D070((void ***)buf);
          uint64_t v530 = (uint64_t)v1363;
          uint64_t v531 = (uint64_t)v1364;
          unint64_t v532 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1364 - v1363) >> 6);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v1290 - (char *)v1288) >> 6) >= v532)
          {
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v1289 - (char *)v1288) >> 6) >= v532)
            {
              v538 = (float32x4_t *)sub_25B41D1D8((uint64_t)v1363, (uint64_t)v1364, (uint64_t)v1288);
              for (uint64_t j = v1289; j != v538; sub_25B41D184((uint64_t)j))
                j -= 12;
              goto LABEL_429;
            }
            uint64_t v537 = (uint64_t)&v1363[64 * (((char *)v1289 - (char *)v1288) >> 6)];
            sub_25B41D1D8((uint64_t)v1363, v537, (uint64_t)v1288);
            uint64_t v536 = sub_25B41D29C(v537, v531, (uint64_t)v1289);
          }
          else
          {
            sub_25B41D3A8((void **)&v1288);
            if (v532 > 0x155555555555555) {
              goto LABEL_1092;
            }
            unint64_t v533 = 0x5555555555555556 * (((char *)v1290 - (char *)v1288) >> 6);
            if (v533 <= v532) {
              unint64_t v533 = v532;
            }
            unint64_t v534 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1290 - (char *)v1288) >> 6) >= 0xAAAAAAAAAAAAAALL
                 ? 0x155555555555555
                 : v533;
            if (v534 > 0x155555555555555) {
LABEL_1092:
            }
              sub_25B3FBC4C();
            v1288 = (float32x4_t *)sub_25B41D460(v534);
            v1289 = v1288;
            v1290 = &v1288[12 * v535];
            uint64_t v536 = sub_25B41D29C(v530, v531, (uint64_t)v1288);
          }
          v538 = (float32x4_t *)v536;
LABEL_429:
          v1289 = v538;
          memset(buf, 0, 24);
          sub_25B3FC724(buf, v1366, (uint64_t)v1367, (v1367 - (unsigned char *)v1366) >> 2);
          id v540 = v1206;
          v542 = v1288;
          uint64_t v543 = v1289;
          unint64_t v544 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1289 - (char *)v1288) >> 6);
          v1278 = (unsigned int *)buf[0].i64[0];
          uint64_t v545 = buf[0].i64[1] - buf[0].i64[0];
          if (v544 != (buf[0].i64[1] - buf[0].i64[0]) >> 2)
          {
            if (qword_26A5020B0 != -1) {
              dispatch_once(&qword_26A5020B0, &unk_2708F1218);
            }
            uint64_t v546 = (id)qword_26A5020A8;
            if (os_log_type_enabled(v546, OS_LOG_TYPE_ERROR))
            {
              v1323[0].i32[0] = 134218240;
              *(uint64_t *)((char *)v1323[0].i64 + 4) = v544;
              v1323[0].i16[6] = 2048;
              *(uint64_t *)((char *)&v1323[0].i64[1] + 6) = v545 >> 2;
              _os_log_error_impl(&dword_25B3F3000, v546, OS_LOG_TYPE_ERROR, "The input wall and wall-ids should be of the same length (%zu vs %zu)", (uint8_t *)v1323, 0x16u);
            }

            v542 = v1288;
            uint64_t v543 = v1289;
          }
          if (v543 != v542)
          {
            unint64_t v547 = 0;
            v541.i64[0] = 67109120;
            float32x4_t v1259 = v541;
            do
            {
              if (objc_msgSend_isEqualToString_((void *)v542[12 * v547 + 8].i64[0], v539, @"Fireplace"))
              {
                unint64_t v549 = v1278[v547];
                if ((v549 & 0x80000000) != 0
                  || 0x4EC4EC4EC4EC4EC5 * (((char *)v1296[1] - (char *)v1296[0]) >> 4) <= v549)
                {
                  if (qword_26A5020B0 != -1) {
                    dispatch_once(&qword_26A5020B0, &unk_2708F1218);
                  }
                  id v576 = (id)qword_26A5020A8;
                  if (os_log_type_enabled(v576, OS_LOG_TYPE_ERROR))
                  {
                    v1323[0].i64[0] = __PAIR64__(v549, v1259.u32[0]);
                    _os_log_error_impl(&dword_25B3F3000, v576, OS_LOG_TYPE_ERROR, "Invalid wall_ids: %d", (uint8_t *)v1323, 8u);
                  }
                }
                else
                {
                  v550.i64[0] = 0x3F0000003F000000;
                  v550.i64[1] = 0x3F0000003F000000;
                  float32x4_t v551 = vmulq_f32(vaddq_f32(v1288[12 * v547 + 3], v1288[12 * v547]), v550);
                  uint64_t v552 = (float32x4_t *)((char *)v1296[0] + 208 * v549);
                  float32x4_t v553 = v552[4];
                  float32x4_t v554 = vsubq_f32(v553, v551);
                  float32x4_t v555 = vsubq_f32(v552[5], v553);
                  v554.f32[0] = (float)-(float)(COERCE_FLOAT(vmulq_f32(v554, v555).i32[1])
                                              + (float)(v554.f32[0] * v555.f32[0]))
                              / (v555.f32[0] * v555.f32[0] + v555.f32[1] * v555.f32[1]);
                  *(float32x2_t *)v553.f32 = vmla_n_f32(*(float32x2_t *)v553.f32, *(float32x2_t *)v555.f32, v554.f32[0]);
                  v553.i32[2] = 0;
                  float32x4_t v556 = vsubq_f32(v551, v553);
                  float32x4_t v557 = v552[11];
                  float32x4_t v558 = vmulq_f32(v556, v557);
                  float32x4_t v559 = vmulq_f32(v557, v557);
                  if ((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v558, 2), vaddq_f32(v558, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v558.f32, 1))).f32[0]/ sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v559, 2), vaddq_f32(v559, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v559.f32, 1))).f32[0])) < -0.01)
                  {
                    for (unint64_t k = 0; objc_msgSend_count(v540, v539, v548) > k; ++k)
                    {
                      juint64_t j = objc_msgSend_objectAtIndexedSubscript_(v540, v539, k);
                      uint64_t v563 = objc_msgSend_identifier((void *)jj, v561, v562);
                      char isEqual = objc_msgSend_isEqual_(v563, v564, v1288[12 * v547 + 9].i64[0]);

                      if (isEqual)
                      {
                        int v568 = objc_msgSend_copy(*((void **)v1296[0] + 26 * v549 + 24), v566, v567);
                        sub_25B477C20(jj, v568);

                        if (qword_26A5020B0 != -1) {
                          dispatch_once(&qword_26A5020B0, &unk_2708F1218);
                        }
                        int v569 = (id)qword_26A5020A8;
                        if (os_log_type_enabled(v569, OS_LOG_TYPE_DEBUG))
                        {
                          float32x4_t v572 = objc_msgSend_type((void *)jj, v570, v571);
                          v575 = objc_msgSend_parent_id((void *)jj, v573, v574);
                          v1323[0].i32[0] = 138412546;
                          *(uint64_t *)((char *)v1323[0].i64 + 4) = (uint64_t)v572;
                          v1323[0].i16[6] = 2112;
                          *(uint64_t *)((char *)&v1323[0].i64[1] + 6) = (uint64_t)v575;
                          _os_log_debug_impl(&dword_25B3F3000, v569, OS_LOG_TYPE_DEBUG, "The wall-parentID of fireplace %@ is: %@", (uint8_t *)v1323, 0x16u);
                        }
                      }
                    }
                  }
                }
              }
              ++v547;
              v542 = v1288;
            }
            while (0xAAAAAAAAAAAAAAABLL * (((char *)v1289 - (char *)v1288) >> 6) > v547);
          }

          sub_25B413DBC(v540, (uint64_t *)&v1288, @"wallaligned");
          if (v1278) {
            operator delete(v1278);
          }
          if (v1366)
          {
            v1367 = (char *)v1366;
            operator delete(v1366);
          }
          buf[0].i64[0] = (uint64_t)&v1363;
          sub_25B41D070((void ***)buf);
          buf[0].i64[0] = (uint64_t)v1296;
          sub_25B414958((void ***)buf);
          float v97 = v1206;
          goto LABEL_461;
        }
        uint64_t v448 = (v383 - v382) >> 2;
        unint64_t v449 = v448 + 1;
        if ((unint64_t)(v448 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v1242 - (void)v382) >> 1 > v449) {
          unint64_t v449 = (uint64_t)(v1242 - (void)v382) >> 1;
        }
        if (v1242 - (unint64_t)v382 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v450 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v450 = v449;
        }
        if (v450) {
          unint64_t v450 = (unint64_t)sub_25B3FBC64(v450);
        }
        else {
          uint64_t v451 = 0;
        }
        v452 = (char *)(v450 + 4 * v448);
        *(_DWORD *)v452 = -1;
        v453 = v452 + 4;
        while (v383 != v382)
        {
          int v454 = *((_DWORD *)v383 - 1);
          v383 -= 4;
          *((_DWORD *)v452 - 1) = v454;
          v452 -= 4;
        }
        unint64_t v1242 = v450 + 4 * v451;
        if (v382) {
          operator delete(v382);
        }
        double v382 = v452;
      }
      break;
    }
    double v383 = v453;
    goto LABEL_410;
  }
LABEL_461:
  if (!a5 || !a6)
  {
    id v629 = v97;
    for (unint64_t m = 0; ; ++m)
    {
      if (m >= objc_msgSend_count(v629, v627, v628))
      {

        goto LABEL_891;
      }
      long long v631 = objc_msgSend_objectAtIndexedSubscript_(v629, v630, m);
      unsigned __int8 v634 = objc_msgSend_type(v631, v632, v633);
      if (!objc_msgSend_isEqualToString_(v634, v635, @"Chair")) {
        goto LABEL_517;
      }
      long long v638 = objc_msgSend_boxesDict(v631, v636, v637);
      long long v640 = objc_msgSend_objectForKey_(v638, v639, @"rawdetection");
      BOOL v641 = v640 == 0;

      if (!v641) {
        break;
      }
LABEL_518:
    }
    unsigned __int8 v634 = objc_msgSend_setWithObjects_(MEMORY[0x263EFFA08], v642, @"Table", @"Storage", @"Cabinet", 0);
    unint64_t v645 = 0;
    unsigned int v646 = -1;
    float v647 = 1.1755e-38;
    while (1)
    {
      if (v645 >= objc_msgSend_count(v629, v643, v644))
      {
        if ((v646 & 0x80000000) == 0)
        {
          v682 = objc_msgSend_objectAtIndexedSubscript_(v629, v648, v646);
          v685 = objc_msgSend_identifier(v682, v683, v684);
          v688 = objc_msgSend_copy(v685, v686, v687);
          sub_25B477C20((uint64_t)v631, v688);

          if (qword_26A5020B0 != -1) {
            dispatch_once(&qword_26A5020B0, &unk_2708F1218);
          }
          v689 = (id)qword_26A5020A8;
          if (os_log_type_enabled(v689, OS_LOG_TYPE_DEBUG))
          {
            v692 = objc_msgSend_identifier(v631, v690, v691);
            v695 = objc_msgSend_parent_id(v631, v693, v694);
            buf[0].i32[0] = 138412546;
            *(uint64_t *)((char *)buf[0].i64 + 4) = (uint64_t)v692;
            buf[0].i16[6] = 2112;
            *(uint64_t *)((char *)&buf[0].i64[1] + 6) = (uint64_t)v695;
            _os_log_debug_impl(&dword_25B3F3000, v689, OS_LOG_TYPE_DEBUG, "Online Chair %@ is assigned parent-id as: %@", (uint8_t *)buf, 0x16u);
          }
        }
LABEL_517:

        goto LABEL_518;
      }
      long long v649 = objc_msgSend_objectAtIndexedSubscript_(v629, v648, v645);
      long long v652 = objc_msgSend_type(v649, v650, v651);
      if ((objc_msgSend_containsObject_(v634, v653, (uint64_t)v652) & 1) == 0)
      {

        goto LABEL_510;
      }
      long long v656 = objc_msgSend_boxesDict(v649, v654, v655);
      long long v658 = objc_msgSend_objectForKey_(v656, v657, @"rawdetection");
      BOOL v659 = v658 == 0;

      if (v659) {
        goto LABEL_510;
      }
      float32x4_t v1342 = 0u;
      float32x4_t v1341 = 0u;
      float32x4_t v1340 = 0u;
      float32x4_t v1339 = 0u;
      float32x4_t v1338 = 0u;
      float32x4_t v1337 = 0u;
      memset(buf, 0, sizeof(buf));
      long long v662 = objc_msgSend_boxesDict(v649, v660, v661);
      long long v664 = objc_msgSend_objectForKey_(v662, v663, @"rawdetection");
      sub_25B445344((uint64_t)buf, v664);

      float v665 = v1339.f32[2];
      float v666 = buf[0].f32[2];
      v669 = objc_msgSend_type(v649, v667, v668);
      float v673 = v665 - v666;
      if (objc_msgSend_isEqualToString_(v669, v670, @"Cabinet")) {
        break;
      }
      v677 = objc_msgSend_type(v649, v671, v672);
      if (objc_msgSend_isEqualToString_(v677, v678, @"Storage"))
      {
        BOOL v674 = v673 > 1.3;

LABEL_505:
        if (v674) {
          goto LABEL_510;
        }
        goto LABEL_508;
      }

LABEL_508:
      float32x4_t v1329 = 0u;
      float32x4_t v1328 = 0u;
      float32x4_t v1327 = 0u;
      float32x4_t v1326 = 0u;
      float32x4_t v1325 = 0u;
      float32x4_t v1324 = 0u;
      memset(v1323, 0, sizeof(v1323));
      v679 = objc_msgSend_boxesDict(v631, v675, v676);
      v681 = objc_msgSend_objectForKey_(v679, v680, @"rawdetection");
      sub_25B445344((uint64_t)v1323, v681);

      memset(v1309, 0, sizeof(v1309));
      v1310.i64[0] = 0;
      sub_25B443EE4((uint64_t)v1309, v1323, buf);
      if (*(float *)v1309 > v647)
      {
        float v647 = *(float *)v1309;
        unsigned int v646 = v645;
      }
LABEL_510:

      ++v645;
    }
    BOOL v674 = v673 > 1.3;

    goto LABEL_505;
  }
  long long v1286 = 0u;
  long long v1287 = 0u;
  long long v1284 = 0u;
  long long v1285 = 0u;
  id v577 = v1238;
  uint64_t v579 = objc_msgSend_countByEnumeratingWithState_objects_count_(v577, v578, (uint64_t)&v1284, v1308, 16);
  if (v579)
  {
    uint64_t v580 = *(void *)v1285;
    do
    {
      for (uint64_t n = 0; n != v579; ++n)
      {
        if (*(void *)v1285 != v580) {
          objc_enumerationMutation(v577);
        }
        uint64_t v582 = *(void *)(*((void *)&v1284 + 1) + 8 * n);
        float v583 = @"ChairGroup";
        if (v582 && sub_25B477AA8(@"ChairGroup")) {
          objc_msgSend_setObject_forKeyedSubscript_(*(void **)(v582 + 8), v584, 0, @"ChairGroup");
        }
      }
      uint64_t v579 = objc_msgSend_countByEnumeratingWithState_objects_count_(v577, v585, (uint64_t)&v1284, v1308, 16);
    }
    while (v579);
  }

  buf[0].i32[0] = 2;
  sub_25B56F23C((uint64_t)&v1301, (const char *)&v1288, buf);
  sub_25B413DBC(v1206, (uint64_t *)&v1301, @"ultimate");
  float32x4_t v586 = (void *)*((void *)&v1302 + 1);
  id v587 = v1206;
  id v1279 = v586;
  if (v1279)
  {
    for (iuint64_t i = 0; ii < objc_msgSend_count(v587, v588, v589); ++ii)
    {
      v592 = objc_msgSend_objectAtIndexedSubscript_(v587, v591, ii);
      id v595 = objc_msgSend_identifier(v592, v593, v594);
      uint64_t v597 = objc_msgSend_objectForKey_(v1279, v596, (uint64_t)v595);

      if (v597)
      {
        uint64_t v600 = objc_msgSend_type(v592, v598, v599);
        char v602 = objc_msgSend_isEqualToString_(v600, v601, @"Chair");

        if (v602)
        {
          sub_25B477C20((uint64_t)v592, 0);
          long long v606 = objc_msgSend_setWithObjects_(MEMORY[0x263EFFA08], v603, @"Table", @"Storage", 0);
          for (juint64_t j = 0; jj < (unint64_t)objc_msgSend_count(v587, v604, v605); ++jj)
          {
            v608 = objc_msgSend_objectAtIndexedSubscript_(v587, v607, jj);
            id v611 = objc_msgSend_identifier(v608, v609, v610);
            if (objc_msgSend_isEqual_(v611, v612, (uint64_t)v597))
            {
              v615 = objc_msgSend_type(v608, v613, v614);
              int v617 = objc_msgSend_containsObject_(v606, v616, (uint64_t)v615);

              if (v617)
              {
                int32x2_t v620 = objc_msgSend_copy(v597, v618, v619);
                sub_25B477C20((uint64_t)v592, v620);

                if (qword_26A5020B0 != -1) {
                  dispatch_once(&qword_26A5020B0, &unk_2708F1218);
                }
                juint64_t j = (uint64_t)(id)qword_26A5020A8;
                if (os_log_type_enabled((os_log_t)jj, OS_LOG_TYPE_DEBUG))
                {
                  id v623 = objc_msgSend_identifier(v592, v621, v622);
                  float v626 = objc_msgSend_parent_id(v592, v624, v625);
                  buf[0].i32[0] = 138412546;
                  *(uint64_t *)((char *)buf[0].i64 + 4) = (uint64_t)v623;
                  buf[0].i16[6] = 2112;
                  *(uint64_t *)((char *)&buf[0].i64[1] + 6) = (uint64_t)v626;
                  _os_log_debug_impl(&dword_25B3F3000, (os_log_t)jj, OS_LOG_TYPE_DEBUG, "Chair %@ is assigned parent-id as: %@", (uint8_t *)buf, 0x16u);
                }
                break;
              }
            }
            else
            {
            }
          }
        }
      }
    }
  }

  v696 = (void *)v1303;
  id v1227 = v587;
  id v1219 = v696;
  v697 = operator new(0x10uLL);
  buf[0].i64[0] = (uint64_t)v697;
  _OWORD *v697 = xmmword_25B5F11C0;
  buf[1] = (float32x4_t)(unint64_t)(v697 + 1);
  buf[0].i64[1] = (uint64_t)(v697 + 1);
  float32x4_t v1337 = 0uLL;
  v698 = operator new(0x10uLL);
  buf[1].i64[1] = (uint64_t)v698;
  _OWORD *v698 = xmmword_25B5F11D0;
  v1337.i64[1] = (uint64_t)(v698 + 1);
  v1337.i64[0] = (uint64_t)(v698 + 1);
  float32x4_t v1338 = 0uLL;
  v1339.i64[0] = 0;
  v699 = operator new(0x10uLL);
  v1338.i64[0] = (uint64_t)v699;
  _OWORD *v699 = xmmword_25B5F11E0;
  float32x4_t v1339 = (float32x4_t)(unint64_t)(v699 + 1);
  v1338.i64[1] = (uint64_t)(v699 + 1);
  float32x4_t v1340 = 0uLL;
  v700 = operator new(0x10uLL);
  v1339.i64[1] = (uint64_t)v700;
  _OWORD *v700 = xmmword_25B5F11F0;
  v1340.i64[1] = (uint64_t)(v700 + 1);
  v1340.i64[0] = (uint64_t)(v700 + 1);
  float32x4_t v1341 = 0uLL;
  v1342.i64[0] = 0;
  v701 = operator new(0x10uLL);
  v1341.i64[0] = (uint64_t)v701;
  _OWORD *v701 = xmmword_25B5F1200;
  float32x4_t v1342 = (float32x4_t)(unint64_t)(v701 + 1);
  v1341.i64[1] = (uint64_t)(v701 + 1);
  v1343[0] = 0uLL;
  v702 = operator new(0x10uLL);
  v1342.i64[1] = (uint64_t)v702;
  _OWORD *v702 = xmmword_25B5F1210;
  *((void *)&v1343[0] + 1) = v702 + 1;
  *(void *)&v1343[0] = v702 + 1;
  memset(&v1343[1], 0, 24);
  v703 = operator new(0x10uLL);
  *(void *)&v1343[1] = v703;
  _OWORD *v703 = xmmword_25B5F1220;
  v1343[2] = (unint64_t)(v703 + 1);
  *((void *)&v1343[1] + 1) = v703 + 1;
  float32x4_t v1344 = 0uLL;
  v704 = operator new(0x10uLL);
  *((void *)&v1343[2] + 1) = v704;
  _OWORD *v704 = xmmword_25B5F1230;
  v1344.i64[1] = (uint64_t)(v704 + 1);
  v1344.i64[0] = (uint64_t)(v704 + 1);
  float32x4_t v1345 = 0uLL;
  *(void *)&long long v1346 = 0;
  v705 = operator new(0x10uLL);
  v1345.i64[0] = (uint64_t)v705;
  _OWORD *v705 = xmmword_25B5F1240;
  long long v1346 = (unint64_t)(v705 + 1);
  v1345.i64[1] = (uint64_t)(v705 + 1);
  v1348 = 0;
  v1347 = 0;
  v706 = operator new(0x10uLL);
  *((void *)&v1346 + 1) = v706;
  _OWORD *v706 = xmmword_25B5F1250;
  v1348 = v706 + 1;
  v1347 = v706 + 1;
  v1349 = 0;
  v1351 = 0;
  v1350 = 0;
  v707 = operator new(0x10uLL);
  v1349 = v707;
  _OWORD *v707 = xmmword_25B5F1260;
  v1351 = v707 + 1;
  v1350 = v707 + 1;
  p_info = 0;
  v1357 = 0;
  v1358 = 0;
  *(void *)v1309 = &v1357;
  v1309[8] = 0;
  uint64_t v708 = 0;
  v1357 = (__CFString *)operator new(0x108uLL);
  v1358 = v1357;
  p_info = &v1357[8].info;
  v1388[0] = v1357;
  v1376.i64[0] = (uint64_t)v1357;
  v1323[0].i64[0] = (uint64_t)&p_info;
  v1323[0].i64[1] = (uint64_t)&v1376;
  v1323[1].i64[0] = (uint64_t)v1388;
  v709 = v1357;
  v1323[1].i8[8] = 0;
  do
  {
    v709->isa = 0;
    v709->info = 0;
    v709->data = 0;
    sub_25B3FC724(v709, (const void *)buf[0].i64[v708], buf[0].i64[v708 + 1], (buf[0].i64[v708 + 1] - buf[0].i64[v708]) >> 2);
    v709 = (__CFString *)((char *)v1388[0] + 24);
    v1388[0] = (char *)v1388[0] + 24;
    v708 += 3;
  }
  while (v708 != 33);
  v1323[1].i8[8] = 1;
  sub_25B43E9EC((uint64_t)v1323);
  v1358 = v709;
  uint64_t v710 = 33;
  do
  {
    id v711 = v1334[v710];
    if (v711)
    {
      v1334[v710 + 1] = v711;
      operator delete(v711);
    }
    v710 -= 3;
  }
  while (v710 * 8);
  buf[0].i32[0] = 0;
  sub_25B403500(&buf[0].i64[1], "Chair-chair_type-dining");
  v1337.i32[0] = 1;
  sub_25B403500(&v1337.i64[1], "Chair-chair_type-stool");
  v1339.i32[0] = 2;
  sub_25B403500(&v1339.i64[1], "Chair-chair_type-swivel");
  v1341.i32[0] = 3;
  sub_25B403500(&v1341.i64[1], "Chair-chair_type-other");
  LODWORD(v1343[0]) = 4;
  sub_25B403500((void *)v1343 + 1, "Chair-chair_leg_type-four");
  LODWORD(v1343[2]) = 5;
  sub_25B403500((void *)&v1343[2] + 1, "Chair-chair_leg_type-star");
  v1345.i32[0] = 6;
  sub_25B403500(&v1345.i64[1], "Chair-chair_leg_type-other");
  LODWORD(v1347) = 7;
  sub_25B403500(&v1348, "Chair-chair_arm_type-missing");
  LODWORD(v1351) = 8;
  sub_25B403500(v1352, "Chair-chair_arm_type-existing");
  int v1353 = 9;
  sub_25B403500(v1354, "Chair-chair_back_type-missing");
  int v1355 = 10;
  sub_25B403500(v1356, "Chair-chair_back_type-existing");
  uint64_t v712 = 0;
  uint64_t v713 = 0;
  float32x4_t v1389 = 0u;
  *(_OWORD *)v1388 = 0u;
  v1390.i32[0] = 1065353216;
  do
  {
    v714 = &buf[2 * v713];
    __int32 v715 = v714->i32[0];
    unint64_t v716 = (unint64_t)v1388[1];
    if (v1388[1])
    {
      uint8x8_t v717 = (uint8x8_t)vcnt_s8((int8x8_t)v1388[1]);
      v717.i16[0] = vaddlv_u8(v717);
      if (v717.u32[0] > 1uLL)
      {
        juint64_t j = v715;
        if (v1388[1] <= (void *)v715) {
          juint64_t j = v715 % (unint64_t)v1388[1];
        }
      }
      else
      {
        juint64_t j = ((unint64_t)v1388[1] - 1) & v715;
      }
      v718 = (uint64_t **)*((void *)v1388[0] + jj);
      if (v718)
      {
        for (kunint64_t k = *v718; kk; kunint64_t k = (uint64_t *)*kk)
        {
          unint64_t v720 = kk[1];
          if (v720 == v715)
          {
            if (*((_DWORD *)kk + 4) == v715) {
              goto LABEL_601;
            }
          }
          else
          {
            if (v717.u32[0] > 1uLL)
            {
              if ((void *)v720 >= v1388[1]) {
                v720 %= (unint64_t)v1388[1];
              }
            }
            else
            {
              v720 &= (unint64_t)v1388[1] - 1;
            }
            if (v720 != jj) {
              break;
            }
          }
        }
      }
    }
    v721 = (char *)operator new(0x30uLL);
    *(void *)v721 = 0;
    *((void *)v721 + 1) = v715;
    *((_DWORD *)v721 + 4) = v715;
    v722 = v721 + 24;
    v723 = &buf[2 * v713];
    v724 = (void **)&v723->i64[1];
    if (v714[1].i8[15] < 0)
    {
      sub_25B4002F4(v722, *v724, v723[1].u64[0]);
      uint64_t v712 = v1389.i64[1];
    }
    else
    {
      *(_OWORD *)v722 = *(_OWORD *)v724;
      *((void *)v721 + 5) = v723[1].i64[1];
    }
    float v725 = (float)(unint64_t)(v712 + 1);
    if (!v716 || (float)(v1390.f32[0] * (float)v716) < v725)
    {
      BOOL v726 = (v716 & (v716 - 1)) != 0;
      if (v716 < 3) {
        BOOL v726 = 1;
      }
      unint64_t v727 = v726 | (2 * v716);
      unint64_t v728 = vcvtps_u32_f32(v725 / v1390.f32[0]);
      if (v727 <= v728) {
        int8x8_t prime = (int8x8_t)v728;
      }
      else {
        int8x8_t prime = (int8x8_t)v727;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v716 = (unint64_t)v1388[1];
      if ((void *)*(void *)&prime > v1388[1]) {
        goto LABEL_557;
      }
      if ((void *)*(void *)&prime < v1388[1])
      {
        unint64_t v736 = vcvtps_u32_f32((float)v1389.u64[1] / v1390.f32[0]);
        if (v1388[1] < (void *)3
          || (uint8x8_t v737 = (uint8x8_t)vcnt_s8((int8x8_t)v1388[1]), v737.i16[0] = vaddlv_u8(v737), v737.u32[0] > 1uLL))
        {
          unint64_t v736 = std::__next_prime(v736);
        }
        else
        {
          uint64_t v738 = 1 << -(char)__clz(v736 - 1);
          if (v736 >= 2) {
            unint64_t v736 = v738;
          }
        }
        if (*(void *)&prime <= v736) {
          int8x8_t prime = (int8x8_t)v736;
        }
        if (*(void *)&prime >= v716)
        {
          unint64_t v716 = (unint64_t)v1388[1];
        }
        else
        {
          if (prime)
          {
LABEL_557:
            if (*(void *)&prime >> 61) {
              sub_25B3FA70C();
            }
            v730 = operator new(8 * *(void *)&prime);
            v731 = v1388[0];
            v1388[0] = v730;
            if (v731) {
              operator delete(v731);
            }
            uint64_t v732 = 0;
            v1388[1] = (void *)prime;
            do
              *((void *)v1388[0] + v732++) = 0;
            while (*(void *)&prime != v732);
            v733 = (void **)v1389.i64[0];
            if (v1389.i64[0])
            {
              unint64_t v734 = *(void *)(v1389.i64[0] + 8);
              uint8x8_t v735 = (uint8x8_t)vcnt_s8(prime);
              v735.i16[0] = vaddlv_u8(v735);
              if (v735.u32[0] > 1uLL)
              {
                if (v734 >= *(void *)&prime) {
                  v734 %= *(void *)&prime;
                }
              }
              else
              {
                v734 &= *(void *)&prime - 1;
              }
              *((void *)v1388[0] + v734) = &v1389;
              for (munint64_t m = *v733; mm; v734 = v740)
              {
                unint64_t v740 = mm[1];
                if (v735.u32[0] > 1uLL)
                {
                  if (v740 >= *(void *)&prime) {
                    v740 %= *(void *)&prime;
                  }
                }
                else
                {
                  v740 &= *(void *)&prime - 1;
                }
                if (v740 != v734)
                {
                  if (!*((void *)v1388[0] + v740))
                  {
                    *((void *)v1388[0] + v740) = v733;
                    goto LABEL_582;
                  }
                  *v733 = (void *)*mm;
                  *munint64_t m = **((void **)v1388[0] + v740);
                  **((void **)v1388[0] + v740) = mm;
                  munint64_t m = v733;
                }
                unint64_t v740 = v734;
LABEL_582:
                v733 = (void **)mm;
                munint64_t m = (void *)*mm;
              }
            }
            unint64_t v716 = (unint64_t)prime;
            goto LABEL_586;
          }
          v744 = v1388[0];
          v1388[0] = 0;
          if (v744) {
            operator delete(v744);
          }
          unint64_t v716 = 0;
          v1388[1] = 0;
        }
      }
LABEL_586:
      if ((v716 & (v716 - 1)) != 0)
      {
        if (v716 <= v715) {
          juint64_t j = v715 % v716;
        }
        else {
          juint64_t j = v715;
        }
      }
      else
      {
        juint64_t j = (v716 - 1) & v715;
      }
    }
    v741 = v1388[0];
    v742 = (void *)*((void *)v1388[0] + jj);
    if (v742)
    {
      *(void *)v721 = *v742;
LABEL_599:
      void *v742 = v721;
      goto LABEL_600;
    }
    *(void *)v721 = v1389.i64[0];
    v1389.i64[0] = (uint64_t)v721;
    v741[jj] = &v1389;
    if (*(void *)v721)
    {
      unint64_t v743 = *(void *)(*(void *)v721 + 8);
      if ((v716 & (v716 - 1)) != 0)
      {
        if (v743 >= v716) {
          v743 %= v716;
        }
      }
      else
      {
        v743 &= v716 - 1;
      }
      v742 = (char *)v1388[0] + 8 * v743;
      goto LABEL_599;
    }
LABEL_600:
    uint64_t v712 = ++v1389.i64[1];
LABEL_601:
    ++v713;
  }
  while (v713 != 11);
  unint64_t v745 = 352;
  do
  {
    if (buf[v745 / 0x10 - 1].i8[15] < 0) {
      operator delete(v1334[v745 / 8]);
    }
    v745 -= 32;
  }
  while (v745);
  memset(v1323, 0, sizeof(v1323));
  float32x4_t v1324 = 0u;
  float32x4_t v1325 = 0u;
  id obja = v1219;
  uint64_t v1224 = objc_msgSend_countByEnumeratingWithState_objects_count_(obja, v746, (uint64_t)v1323, buf, 16);
  if (v1224)
  {
    uint64_t v1222 = *(void *)v1323[1].i64[0];
    do
    {
      for (nuint64_t n = 0; nn != v1224; ++nn)
      {
        if (*(void *)v1323[1].i64[0] != v1222) {
          objc_enumerationMutation(obja);
        }
        v748 = objc_msgSend_objectForKey_(obja, v747, *(void *)(v1323[0].i64[1] + 8 * nn));
        id v1232 = v1227;
        id v1273 = v748;
        *(_OWORD *)v1309 = 0u;
        float32x4_t v1310 = 0u;
        v1311.i32[0] = 1065353216;
        uint64_t v749 = v1389.i64[0];
        if (v1389.i64[0])
        {
          uint64_t v750 = 0;
          while (1)
          {
            int v751 = *(_DWORD *)(v749 + 16);
            unint64_t v752 = sub_25B403AF4(v749 + 24);
            unint64_t v753 = v752;
            unint64_t v754 = *(void *)&v1309[8];
            if (*(void *)&v1309[8])
            {
              uint8x8_t v755 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v1309[8]);
              v755.i16[0] = vaddlv_u8(v755);
              unint64_t v756 = v755.u32[0];
              if (v755.u32[0] > 1uLL)
              {
                juint64_t j = v752;
                if (v752 >= *(void *)&v1309[8]) {
                  juint64_t j = v752 % *(void *)&v1309[8];
                }
              }
              else
              {
                juint64_t j = (*(void *)&v1309[8] - 1) & v752;
              }
              v757 = *(void ***)(*(void *)v1309 + 8 * jj);
              if (v757)
              {
                v758 = (char *)*v757;
                if (*v757)
                {
                  do
                  {
                    unint64_t v759 = *((void *)v758 + 1);
                    if (v759 == v753)
                    {
                      if (sub_25B403F44((unsigned __int8 *)v758 + 16, (unsigned __int8 *)(v749 + 24))) {
                        goto LABEL_697;
                      }
                    }
                    else
                    {
                      if (v756 > 1)
                      {
                        if (v759 >= v754) {
                          v759 %= v754;
                        }
                      }
                      else
                      {
                        v759 &= v754 - 1;
                      }
                      if (v759 != jj) {
                        break;
                      }
                    }
                    v758 = *(char **)v758;
                  }
                  while (v758);
                }
              }
            }
            v758 = (char *)operator new(0x30uLL);
            *(void *)v758 = 0;
            *((void *)v758 + 1) = v753;
            v760 = v758 + 16;
            if (*(char *)(v749 + 47) < 0)
            {
              sub_25B4002F4(v760, *(void **)(v749 + 24), *(void *)(v749 + 32));
              uint64_t v750 = v1310.i64[1];
            }
            else
            {
              long long v761 = *(_OWORD *)(v749 + 24);
              *((void *)v758 + 4) = *(void *)(v749 + 40);
              *(_OWORD *)v760 = v761;
            }
            *((_DWORD *)v758 + 10) = 0;
            float v762 = (float)(unint64_t)(v750 + 1);
            if (!v754 || (float)(v1311.f32[0] * (float)v754) < v762) {
              break;
            }
LABEL_687:
            uint64_t v778 = *(void *)v1309;
            v779 = *(void **)(*(void *)v1309 + 8 * jj);
            if (v779)
            {
              *(void *)v758 = *v779;
            }
            else
            {
              *(void *)v758 = v1310.i64[0];
              v1310.i64[0] = (uint64_t)v758;
              *(void *)(v778 + 8 * jj) = &v1310;
              if (!*(void *)v758) {
                goto LABEL_696;
              }
              unint64_t v780 = *(void *)(*(void *)v758 + 8);
              if ((v754 & (v754 - 1)) != 0)
              {
                if (v780 >= v754) {
                  v780 %= v754;
                }
              }
              else
              {
                v780 &= v754 - 1;
              }
              v779 = (void *)(*(void *)v1309 + 8 * v780);
            }
            void *v779 = v758;
LABEL_696:
            uint64_t v750 = ++v1310.i64[1];
LABEL_697:
            *((_DWORD *)v758 + 10) = v751;
            uint64_t v749 = *(void *)v749;
            if (!v749) {
              goto LABEL_708;
            }
          }
          BOOL v763 = (v754 & (v754 - 1)) != 0;
          if (v754 < 3) {
            BOOL v763 = 1;
          }
          unint64_t v764 = v763 | (2 * v754);
          unint64_t v765 = vcvtps_u32_f32(v762 / v1311.f32[0]);
          if (v764 <= v765) {
            int8x8_t v766 = (int8x8_t)v765;
          }
          else {
            int8x8_t v766 = (int8x8_t)v764;
          }
          if (*(void *)&v766 == 1)
          {
            int8x8_t v766 = (int8x8_t)2;
          }
          else if ((*(void *)&v766 & (*(void *)&v766 - 1)) != 0)
          {
            int8x8_t v766 = (int8x8_t)std::__next_prime(*(void *)&v766);
          }
          unint64_t v754 = *(void *)&v1309[8];
          if (*(void *)&v766 <= *(void *)&v1309[8])
          {
            if (*(void *)&v766 < *(void *)&v1309[8])
            {
              unint64_t v773 = vcvtps_u32_f32((float)v1310.u64[1] / v1311.f32[0]);
              if (*(void *)&v1309[8] < 3uLL
                || (uint8x8_t v774 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v1309[8]), v774.i16[0] = vaddlv_u8(v774), v774.u32[0] > 1uLL))
              {
                unint64_t v773 = std::__next_prime(v773);
              }
              else
              {
                uint64_t v775 = 1 << -(char)__clz(v773 - 1);
                if (v773 >= 2) {
                  unint64_t v773 = v775;
                }
              }
              if (*(void *)&v766 <= v773) {
                int8x8_t v766 = (int8x8_t)v773;
              }
              if (*(void *)&v766 >= v754)
              {
                unint64_t v754 = *(void *)&v1309[8];
              }
              else
              {
                if (v766) {
                  goto LABEL_653;
                }
                v781 = *(void **)v1309;
                *(void *)v1309 = 0;
                if (v781) {
                  operator delete(v781);
                }
                unint64_t v754 = 0;
                *(void *)&v1309[8] = 0;
              }
            }
          }
          else
          {
LABEL_653:
            if (*(void *)&v766 >> 61) {
              sub_25B3FA70C();
            }
            v767 = operator new(8 * *(void *)&v766);
            v768 = *(void **)v1309;
            *(void *)v1309 = v767;
            if (v768) {
              operator delete(v768);
            }
            uint64_t v769 = 0;
            *(int8x8_t *)&v1309[8] = v766;
            do
              *(void *)(*(void *)v1309 + 8 * v769++) = 0;
            while (*(void *)&v766 != v769);
            v770 = (void **)v1310.i64[0];
            if (v1310.i64[0])
            {
              unint64_t v771 = *(void *)(v1310.i64[0] + 8);
              uint8x8_t v772 = (uint8x8_t)vcnt_s8(v766);
              v772.i16[0] = vaddlv_u8(v772);
              if (v772.u32[0] > 1uLL)
              {
                if (v771 >= *(void *)&v766) {
                  v771 %= *(void *)&v766;
                }
              }
              else
              {
                v771 &= *(void *)&v766 - 1;
              }
              *(void *)(*(void *)v1309 + 8 * v771) = &v1310;
              for (i1 = *v770; i1; unint64_t v771 = v777)
              {
                unint64_t v777 = i1[1];
                if (v772.u32[0] > 1uLL)
                {
                  if (v777 >= *(void *)&v766) {
                    v777 %= *(void *)&v766;
                  }
                }
                else
                {
                  v777 &= *(void *)&v766 - 1;
                }
                if (v777 != v771)
                {
                  if (!*(void *)(*(void *)v1309 + 8 * v777))
                  {
                    *(void *)(*(void *)v1309 + 8 * v777) = v770;
                    goto LABEL_678;
                  }
                  *v770 = (void *)*i1;
                  void *i1 = **(void **)(*(void *)v1309 + 8 * v777);
                  **(void **)(*(void *)v1309 + 8 * v777) = i1;
                  i1 = v770;
                }
                unint64_t v777 = v771;
LABEL_678:
                v770 = (void **)i1;
                i1 = (void *)*i1;
              }
            }
            unint64_t v754 = (unint64_t)v766;
          }
          if ((v754 & (v754 - 1)) != 0)
          {
            if (v753 >= v754) {
              juint64_t j = v753 % v754;
            }
            else {
              juint64_t j = v753;
            }
          }
          else
          {
            juint64_t j = (v754 - 1) & v753;
          }
          goto LABEL_687;
        }
LABEL_708:
        unint64_t v1247 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1358 - (char *)v1357) >> 3);
        LODWORD(v1386[0]) = 0;
        sub_25B40FF0C(&v1298, (int)v1247, v1386);
        long long v1369 = 0u;
        long long v1370 = 0u;
        long long v1371 = 0u;
        long long v1372 = 0u;
        id v1254 = v1232;
        uint64_t v785 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1254, v782, (uint64_t)&v1369, &v1363, 16);
        if (v785)
        {
          uint64_t v786 = *(void *)v1370;
          do
          {
            for (juint64_t j = 0; jj != v785; ++jj)
            {
              if (*(void *)v1370 != v786) {
                objc_enumerationMutation(v1254);
              }
              v787 = *(void **)(*((void *)&v1369 + 1) + 8 * jj);
              v788 = objc_msgSend_type(v787, v783, v784);
              if (objc_msgSend_isEqualToString_(v788, v789, @"Chair"))
              {
                v792 = objc_msgSend_identifier(v787, v790, v791);
                char v794 = objc_msgSend_containsObject_(v1273, v793, (uint64_t)v792);

                if (v794)
                {
                  id v795 = v787;
                  v1386[1] = 0;
                  v1386[0] = 0;
                  *(void *)&v1387[0] = 0;
                  v1306 = 0;
                  uint64_t v1307 = 0;
                  v1305 = &v1306;
                  id v1261 = v795;
                  v798 = objc_msgSend_parts(v795, v796, v797);
                  BOOL v801 = objc_msgSend_count(v798, v799, v800) == 0;

                  if (v801)
                  {
                    v864 = v1296;
                  }
                  else
                  {
                    memset(v1385, 0, sizeof(v1385));
                    float32x4_t v1384 = 0u;
                    v804 = objc_msgSend_parts(v1261, v802, v803);
                    uint64_t v806 = objc_msgSend_countByEnumeratingWithState_objects_count_(v804, v805, (uint64_t)&v1384, &v1376, 16);
                    if (v806)
                    {
                      uint64_t v807 = **(void **)&v1385[0];
                      do
                      {
                        for (uint64_t i2 = 0; i2 != v806; ++i2)
                        {
                          if (**(void **)&v1385[0] != v807) {
                            objc_enumerationMutation(v804);
                          }
                          id v809 = *(id *)(v1384.i64[1] + 8 * i2);
                          v812 = (char *)objc_msgSend_UTF8String(v809, v810, v811);
                          sub_25B403500(&v1373, v812);
                          v813 = sub_25B414548(v1309, (unsigned __int8 *)&v1373);
                          if (!v813)
                          {
                            exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                            std::logic_error::logic_error(exception, "ou3dor input name not found.");
                            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
                            __cxa_throw(exception, (struct type_info *)&unk_2708F1CA8, MEMORY[0x263F8C080]);
                          }
                          sub_25B3FBE5C((uint64_t *)&v1305, *((_DWORD *)v813 + 10), *((_DWORD *)v813 + 10));
                          if (v1375 < 0) {
                            operator delete(v1373);
                          }
                        }
                        uint64_t v806 = objc_msgSend_countByEnumeratingWithState_objects_count_(v804, v814, (uint64_t)&v1384, &v1376, 16);
                      }
                      while (v806);
                    }

                    char v815 = 0;
                    int v816 = 0;
                    v817 = v1306;
                    do
                    {
                      if (!v1306) {
                        goto LABEL_737;
                      }
                      v818 = &v1306;
                      v819 = v1306;
                      do
                      {
                        v820 = v819;
                        v821 = v818;
                        int v822 = *((_DWORD *)v819 + 7);
                        if (v822 >= v816) {
                          v818 = (void **)v819;
                        }
                        else {
                          ++v819;
                        }
                        v819 = (void *)*v819;
                      }
                      while (v819);
                      if (v818 == &v1306) {
                        goto LABEL_737;
                      }
                      if (v822 < v816) {
                        v820 = v821;
                      }
                      if (v816 < *((_DWORD *)v820 + 7)) {
LABEL_737:
                      }
                        v818 = &v1306;
                      v815 |= v818 != &v1306;
                      ++v816;
                    }
                    while (v816 != 4);
                    if ((v815 & 1) == 0)
                    {
                      sub_25B3FBE5C((uint64_t *)&v1305, 3, 3);
                      v817 = v1306;
                    }
                    char v823 = 0;
                    for (int i3 = 4; i3 != 7; ++i3)
                    {
                      if (!v817) {
                        goto LABEL_752;
                      }
                      v825 = &v1306;
                      v826 = v817;
                      do
                      {
                        v827 = v826;
                        v828 = v825;
                        int v829 = *((_DWORD *)v826 + 7);
                        if (v829 >= i3) {
                          v825 = (void **)v826;
                        }
                        else {
                          ++v826;
                        }
                        v826 = (void *)*v826;
                      }
                      while (v826);
                      if (v825 == &v1306) {
                        goto LABEL_752;
                      }
                      if (v829 < i3) {
                        v827 = v828;
                      }
                      if (i3 < *((_DWORD *)v827 + 7)) {
LABEL_752:
                      }
                        v825 = &v1306;
                      v823 |= v825 != &v1306;
                    }
                    if ((v823 & 1) == 0)
                    {
                      sub_25B3FBE5C((uint64_t *)&v1305, 6, 6);
                      v817 = v1306;
                    }
                    char v830 = 0;
                    char v831 = 0;
                    int v832 = 7;
                    do
                    {
                      char v833 = v831;
                      if (!v817) {
                        goto LABEL_767;
                      }
                      v834 = &v1306;
                      v835 = v817;
                      do
                      {
                        v836 = v835;
                        v837 = v834;
                        int v838 = *((_DWORD *)v835 + 7);
                        if (v838 >= v832) {
                          v834 = (void **)v835;
                        }
                        else {
                          ++v835;
                        }
                        v835 = (void *)*v835;
                      }
                      while (v835);
                      if (v834 == &v1306) {
                        goto LABEL_767;
                      }
                      if (v838 < v832) {
                        v836 = v837;
                      }
                      if (v832 < *((_DWORD *)v836 + 7)) {
LABEL_767:
                      }
                        v834 = &v1306;
                      v830 |= v834 != &v1306;
                      int v832 = 8;
                      char v831 = 1;
                    }
                    while ((v833 & 1) == 0);
                    if ((v830 & 1) == 0)
                    {
                      sub_25B3FBE5C((uint64_t *)&v1305, 8, 8);
                      v817 = v1306;
                    }
                    char v839 = 0;
                    char v840 = 0;
                    int v841 = 9;
                    do
                    {
                      char v842 = v840;
                      if (!v817) {
                        goto LABEL_782;
                      }
                      v843 = &v1306;
                      v844 = v817;
                      do
                      {
                        v845 = v844;
                        v846 = v843;
                        int v847 = *((_DWORD *)v844 + 7);
                        if (v847 >= v841) {
                          v843 = (void **)v844;
                        }
                        else {
                          ++v844;
                        }
                        v844 = (void *)*v844;
                      }
                      while (v844);
                      if (v843 == &v1306) {
                        goto LABEL_782;
                      }
                      if (v847 < v841) {
                        v845 = v846;
                      }
                      if (v841 < *((_DWORD *)v845 + 7)) {
LABEL_782:
                      }
                        v843 = &v1306;
                      v839 |= v843 != &v1306;
                      int v841 = 10;
                      char v840 = 1;
                    }
                    while ((v842 & 1) == 0);
                    if ((v839 & 1) == 0) {
                      sub_25B3FBE5C((uint64_t *)&v1305, 10, 10);
                    }
                    if (v1307 != 4)
                    {
                      v917 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                      std::logic_error::logic_error(v917, "ou3dor dimension not matched.");
                      v917->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
                      __cxa_throw(v917, (struct type_info *)&unk_2708F1CA8, MEMORY[0x263F8C080]);
                    }
                    uint64_t v848 = v785;
                    v849 = v1305;
                    if (v1305 == &v1306)
                    {
                      v863 = 0;
                      v850 = 0;
                      v852 = 0;
                    }
                    else
                    {
                      v850 = 0;
                      unint64_t v851 = 0;
                      v852 = 0;
                      do
                      {
                        if ((unint64_t)v852 >= v851)
                        {
                          uint64_t v853 = (v852 - v850) >> 2;
                          unint64_t v854 = v853 + 1;
                          if ((unint64_t)(v853 + 1) >> 62)
                          {
                            v1386[0] = v850;
                            sub_25B3FBC4C();
                          }
                          if ((uint64_t)(v851 - (void)v850) >> 1 > v854) {
                            unint64_t v854 = (uint64_t)(v851 - (void)v850) >> 1;
                          }
                          if (v851 - (unint64_t)v850 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v855 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v855 = v854;
                          }
                          if (v855) {
                            unint64_t v855 = (unint64_t)sub_25B3FBC64(v855);
                          }
                          else {
                            uint64_t v856 = 0;
                          }
                          v857 = (char *)(v855 + 4 * v853);
                          *(_DWORD *)v857 = v849[7];
                          v858 = v857 + 4;
                          while (v852 != v850)
                          {
                            int v859 = *((_DWORD *)v852 - 1);
                            v852 -= 4;
                            *((_DWORD *)v857 - 1) = v859;
                            v857 -= 4;
                          }
                          unint64_t v851 = v855 + 4 * v856;
                          v1386[1] = v858;
                          *(void *)&v1387[0] = v851;
                          if (v850) {
                            operator delete(v850);
                          }
                          v850 = v857;
                          v852 = (char *)v858;
                        }
                        else
                        {
                          *(_DWORD *)v852 = v849[7];
                          v852 += 4;
                        }
                        v1386[1] = v852;
                        v860 = (void *)*((void *)v849 + 1);
                        if (v860)
                        {
                          do
                          {
                            v861 = (void **)v860;
                            v860 = (void *)*v860;
                          }
                          while (v860);
                        }
                        else
                        {
                          do
                          {
                            v861 = (void **)*((void *)v849 + 2);
                            BOOL v862 = *v861 == (void *)v849;
                            v849 = v861;
                          }
                          while (!v862);
                        }
                        v849 = v861;
                      }
                      while (v861 != &v1306);
                      v1386[0] = v850;
                      v863 = *(void **)&v1387[0];
                    }
                    v1296[0] = v850;
                    v1296[1] = v852;
                    v864 = v1386;
                    v1297 = v863;
                    uint64_t v785 = v848;
                  }
                  *v864 = 0;
                  v864[1] = 0;
                  v864[2] = 0;
                  sub_25B3FA930(v1306);
                  if (v1386[0]) {
                    operator delete(v1386[0]);
                  }

                  v865 = (int32x4_t *)v1296[0];
                  if ((int)v1247 > 0)
                  {
                    v866 = (int32x4_t *)v1296[1];
                    int64_t v867 = (char *)v1296[1] - (char *)v1296[0];
                    v868 = v1298;
                    v869 = &v1357->info;
                    uint64_t v870 = v1247;
                    do
                    {
                      if (v865 == v866)
                      {
                        __int32 v873 = 0;
                      }
                      else
                      {
                        if (v867 != 16 || (v871 = (int32x4_t *)*(v869 - 1), *v869 - (void)v871 != 16))
                        {
                          v916 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                          std::logic_error::logic_error(v916, "Invalid cad dimension");
                          v916->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
                          __cxa_throw(v916, (struct type_info *)&unk_2708F1CA8, MEMORY[0x263F8C080]);
                        }
                        int32x4_t v872 = (int32x4_t)vandq_s8((int8x16_t)vceqq_s32(*v871, *v865), (int8x16_t)xmmword_25B5F1270);
                        v872.i32[0] = vaddvq_s32(v872) & 0xF;
                        *(int8x8_t *)v872.uint64_t i8 = vcnt_s8(*(int8x8_t *)v872.i8);
                        v872.i16[0] = vaddlv_u8(*(uint8x8_t *)v872.i8);
                        __int32 v873 = v872.i32[0];
                      }
                      *v868++ += v873;
                      v869 += 3;
                      --v870;
                    }
                    while (v870);
                  }
                  if (v865) {
                    operator delete(v865);
                  }
                }
              }
              else
              {
              }
            }
            uint64_t v785 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1254, v783, (uint64_t)&v1369, &v1363, 16);
          }
          while (v785);
        }

        v874 = v1298;
        if (v1298 == v1299)
        {
          v876 = v1298;
        }
        else
        {
          v875 = (char *)v1298 + 4;
          v876 = v1298;
          if ((char *)v1298 + 4 != v1299)
          {
            int v877 = *(_DWORD *)v1298;
            v876 = v1298;
            v878 = (char *)v1298 + 4;
            do
            {
              int v880 = *(_DWORD *)v878;
              v878 += 4;
              int v879 = v880;
              BOOL v881 = v877 < v880;
              if (v877 <= v880) {
                int v877 = v879;
              }
              if (v881) {
                v876 = v875;
              }
              v875 = v878;
            }
            while (v878 != v1299);
          }
        }
        v882 = v1357;
        *(_OWORD *)v1292 = 0u;
        long long v1293 = 0u;
        long long v1294 = 0u;
        long long v1295 = 0u;
        id v1262 = v1254;
        uint64_t v886 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1262, v883, (uint64_t)v1292, &v1360, 16);
        if (v886)
        {
          v1248 = (int **)v882 + 3 * ((v876 - v874) >> 2);
          juint64_t j = *(void *)v1293;
          v1243 = v1248 + 1;
          do
          {
            for (uint64_t i4 = 0; i4 != v886; ++i4)
            {
              if (*(void *)v1293 != jj) {
                objc_enumerationMutation(v1262);
              }
              v888 = (void *)*((void *)v1292[1] + i4);
              v889 = objc_msgSend_type(v888, v884, v885);
              if (objc_msgSend_isEqualToString_(v889, v890, @"Chair"))
              {
                v893 = objc_msgSend_identifier(v888, v891, v892);
                if (objc_msgSend_containsObject_(v1273, v894, (uint64_t)v893))
                {
                  v897 = objc_msgSend_boxesDict(v888, v895, v896);
                  v899 = objc_msgSend_objectForKey_(v897, v898, @"rawdetection");
                  BOOL v900 = v899 == 0;

                  if (v900) {
                    continue;
                  }
                  if ((char *)*v1243 - (char *)*v1248 != 16)
                  {
                    v918 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    std::logic_error::logic_error(v918, "Invalid cad dimension");
                    v918->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
                    __cxa_throw(v918, (struct type_info *)&unk_2708F1CA8, MEMORY[0x263F8C080]);
                  }
                  v889 = objc_opt_new();
                  v901 = *v1248;
                  v902 = *v1243;
LABEL_851:
                  if (v901 != v902)
                  {
                    unint64_t v903 = *v901;
                    id v904 = [NSString alloc];
                    if (!v1388[1]) {
                      goto LABEL_880;
                    }
                    uint8x8_t v906 = (uint8x8_t)vcnt_s8((int8x8_t)v1388[1]);
                    v906.i16[0] = vaddlv_u8(v906);
                    if (v906.u32[0] > 1uLL)
                    {
                      unint64_t v907 = v903;
                      if (v1388[1] <= (void *)v903) {
                        unint64_t v907 = v903 % (unint64_t)v1388[1];
                      }
                    }
                    else
                    {
                      unint64_t v907 = ((unint64_t)v1388[1] - 1) & v903;
                    }
                    v908 = (uint64_t **)*((void *)v1388[0] + v907);
                    if (!v908 || (v909 = *v908) == 0) {
LABEL_880:
                    }
                      sub_25B3FC090("unordered_map::at: key not found");
                    while (1)
                    {
                      unint64_t v910 = v909[1];
                      if (v910 == v903)
                      {
                        if (*((_DWORD *)v909 + 4) == v903)
                        {
                          v911 = v909 + 3;
                          if (*((char *)v909 + 47) < 0) {
                            v911 = (void *)*v911;
                          }
                          v912 = objc_msgSend_initWithUTF8String_(v904, v905, (uint64_t)v911);
                          id v913 = objc_alloc_init(MEMORY[0x263EFF8C0]);
                          objc_msgSend_setObject_forKeyedSubscript_(v889, v914, (uint64_t)v913, v912);

                          ++v901;
                          goto LABEL_851;
                        }
                      }
                      else
                      {
                        if (v906.u32[0] > 1uLL)
                        {
                          if ((void *)v910 >= v1388[1]) {
                            v910 %= (unint64_t)v1388[1];
                          }
                        }
                        else
                        {
                          v910 &= (unint64_t)v1388[1] - 1;
                        }
                        if (v910 != v907) {
                          goto LABEL_880;
                        }
                      }
                      v909 = (uint64_t *)*v909;
                      if (!v909) {
                        goto LABEL_880;
                      }
                    }
                  }
                  sub_25B477C30((uint64_t)v888, v889);
                }
                else
                {
                }
              }
            }
            uint64_t v886 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1262, v884, (uint64_t)v1292, &v1360, 16);
          }
          while (v886);
        }

        if (v1298)
        {
          v1299 = (char *)v1298;
          operator delete(v1298);
        }
        sub_25B414644((uint64_t)v1309);
      }
      uint64_t v1224 = objc_msgSend_countByEnumeratingWithState_objects_count_(obja, v747, (uint64_t)v1323, buf, 16);
    }
    while (v1224);
  }

  sub_25B573404((uint64_t)v1388);
  *(void *)v1309 = &v1357;
  sub_25B413BE8((void ***)v1309);

  buf[0].i64[0] = (uint64_t)&v1301;
  sub_25B41D070((void ***)buf);
LABEL_891:
  id v919 = v1206;
  id v920 = v1238;
  id v921 = v919;
  id v1215 = v920;
  unint64_t v924 = objc_msgSend_count(v921, v922, v923);
  unint64_t v927 = objc_msgSend_count(v1215, v925, v926);
  v1323[0].i32[0] = -1082130432;
  sub_25B400C5C(buf, v927, v1323);
  sub_25B413A88(v1309, v924, (uint64_t)buf);
  if (buf[0].i64[0])
  {
    buf[0].i64[1] = buf[0].i64[0];
    operator delete((void *)buf[0].i64[0]);
  }
  if (v924)
  {
    for (uint64_t i5 = 0; i5 != v924; ++i5)
    {
      v930 = objc_msgSend_objectAtIndexedSubscript_(v921, v928, i5);
      v933 = objc_msgSend_boxesDict(v930, v931, v932);
      v935 = objc_msgSend_objectForKey_(v933, v934, @"rawdetection");
      BOOL v936 = v935 == 0;

      if (!v936)
      {
        float32x4_t v1342 = 0u;
        float32x4_t v1341 = 0u;
        float32x4_t v1340 = 0u;
        float32x4_t v1339 = 0u;
        float32x4_t v1338 = 0u;
        float32x4_t v1337 = 0u;
        memset(buf, 0, sizeof(buf));
        v937 = objc_msgSend_objectAtIndexedSubscript_(v921, v928, i5);
        v940 = objc_msgSend_boxesDict(v937, v938, v939);
        v942 = objc_msgSend_objectForKeyedSubscript_(v940, v941, @"rawdetection");
        sub_25B445344((uint64_t)buf, v942);

        if (v927)
        {
          for (uint64_t i6 = 0; i6 != v927; ++i6)
          {
            v944 = objc_msgSend_objectAtIndexedSubscript_(v921, v928, i5);
            v947 = objc_msgSend_type(v944, v945, v946);
            v949 = objc_msgSend_objectAtIndexedSubscript_(v1215, v948, i6);
            v952 = objc_msgSend_type(v949, v950, v951);
            BOOL v953 = v947 == v952;

            if (v953)
            {
              v954 = objc_msgSend_objectAtIndexedSubscript_(v1215, v928, i6);
              v957 = objc_msgSend_boxesDict(v954, v955, v956);
              v959 = objc_msgSend_objectForKey_(v957, v958, @"rawdetection");
              BOOL v960 = v959 == 0;

              if (!v960)
              {
                float32x4_t v1329 = 0u;
                float32x4_t v1328 = 0u;
                float32x4_t v1327 = 0u;
                float32x4_t v1326 = 0u;
                float32x4_t v1325 = 0u;
                float32x4_t v1324 = 0u;
                memset(v1323, 0, sizeof(v1323));
                v961 = objc_msgSend_objectAtIndexedSubscript_(v1215, v928, i6);
                v964 = objc_msgSend_boxesDict(v961, v962, v963);
                v966 = objc_msgSend_objectForKeyedSubscript_(v964, v965, @"rawdetection");
                sub_25B445344((uint64_t)v1323, v966);

                sub_25B443EE4((uint64_t)v1388, buf, v1323);
                *(_DWORD *)(*(void *)(*(void *)v1309 + 24 * i5) + 4 * i6) = v1388[0];
              }
            }
          }
        }
      }
    }
  }
  v1323[0].i32[0] = -1;
  sub_25B40FF0C(buf, v927, v1323);
  if (v927)
  {
    uint64_t v967 = 0;
    v968 = *(void **)v1309;
    do
    {
      if (v924)
      {
        uint64_t v969 = 0;
        float v970 = 0.0;
        uint64_t v971 = buf[0].i64[0];
        v972 = v968;
        do
        {
          float v973 = *(float *)(*v972 + 4 * v967);
          if (v973 > 0.3 && v973 > v970)
          {
            *(_DWORD *)(v971 + 4 * v967) = v969;
            float v970 = v973;
          }
          ++v969;
          v972 += 3;
        }
        while (v924 != v969);
      }
      ++v967;
    }
    while (v967 != v927);
  }
  sub_25B413B44(v1323, v924);
  if (v924)
  {
    for (uint64_t i7 = 0; i7 != v924; ++i7)
    {
      if (v927)
      {
        for (uint64_t i8 = 0; i8 != v927; ++i8)
        {
          if (*(float *)(*(void *)(*(void *)v1309 + 24 * i7) + 4 * i8) > 0.3
            && i7 == *(_DWORD *)(buf[0].i64[0] + 4 * i8))
          {
            uint64_t v978 = v1323[0].i64[0] + 24 * i7;
            v980 = (_DWORD **)(v978 + 8);
            v979 = *(_DWORD **)(v978 + 8);
            unint64_t v981 = *(void *)(v978 + 16);
            if ((unint64_t)v979 >= v981)
            {
              v983 = *(_DWORD **)v978;
              uint64_t v984 = ((uint64_t)v979 - *(void *)v978) >> 2;
              unint64_t v985 = v984 + 1;
              if ((unint64_t)(v984 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              uint64_t v986 = v981 - (void)v983;
              if (v986 >> 1 > v985) {
                unint64_t v985 = v986 >> 1;
              }
              BOOL v987 = (unint64_t)v986 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v988 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v987) {
                unint64_t v988 = v985;
              }
              if (v988)
              {
                unint64_t v988 = (unint64_t)sub_25B3FBC64(v988);
                v979 = *v980;
                v983 = *(_DWORD **)v978;
              }
              else
              {
                v975 = 0;
              }
              v989 = (_DWORD *)(v988 + 4 * v984);
              _DWORD *v989 = i8;
              v982 = v989 + 1;
              while (v979 != v983)
              {
                int v990 = *--v979;
                *--v989 = v990;
              }
              *(void *)uint64_t v978 = v989;
              *v980 = v982;
              *(void *)(v978 + 16) = v988 + 4 * (void)v975;
              if (v983) {
                operator delete(v983);
              }
            }
            else
            {
              _DWORD *v979 = i8;
              v982 = v979 + 1;
            }
            *v980 = v982;
          }
        }
      }
    }
    uint64_t v991 = 0;
    uint64_t v992 = 0;
    while (1)
    {
      v993 = objc_msgSend_objectAtIndexedSubscript_(v921, v975, v992);
      v1389.i64[0] = 0;
      v1388[0] = 0;
      v1388[1] = 0;
      sub_25B3FC724(v1388, *(const void **)(v1323[0].i64[0] + v991), *(void *)(v1323[0].i64[0] + v991 + 8), (uint64_t)(*(void *)(v1323[0].i64[0] + v991 + 8) - *(void *)(v1323[0].i64[0] + v991)) >> 2);
      v995 = v1388[0];
      if (v1388[1] != v1388[0]) {
        break;
      }
      v995 = v1388[1];
      if (v1388[1]) {
        goto LABEL_942;
      }
LABEL_943:

      ++v992;
      v991 += 24;
      if (v924 == v992) {
        goto LABEL_944;
      }
    }
    v996 = objc_msgSend_objectAtIndexedSubscript_(v1215, v994, *(int *)v1388[0]);
    v999 = objc_msgSend_identifier(v996, v997, v998);
    sub_25B477C10((uint64_t)v993, v999);

LABEL_942:
    operator delete(v995);
    goto LABEL_943;
  }
LABEL_944:
  v1388[0] = v1323;
  sub_25B413BE8((void ***)v1388);
  if (buf[0].i64[0])
  {
    buf[0].i64[1] = buf[0].i64[0];
    operator delete((void *)buf[0].i64[0]);
  }
  buf[0].i64[0] = (uint64_t)v1309;
  sub_25B413C78((void ***)buf);

  if ((a5 & 1) == 0)
  {
    id v1000 = v921;
    if (v1000)
    {
      long long v1303 = 0u;
      long long v1304 = 0u;
      long long v1301 = 0u;
      long long v1302 = 0u;
      id v1255 = v1000;
      id v1263 = v1000;
      uint64_t v1002 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1263, v1001, (uint64_t)&v1301, buf, 16);
      if (v1002)
      {
        uint64_t v1274 = *(void *)v1302;
        float32x2_t v1005 = (float32x2_t)vdup_n_s32(0xBCA3D70A);
        do
        {
          uint64_t v1281 = v1002;
          for (uint64_t i9 = 0; i9 != v1281; ++i9)
          {
            if (*(void *)v1302 != v1274) {
              objc_enumerationMutation(v1263);
            }
            v1007 = *(void **)(*((void *)&v1301 + 1) + 8 * i9);
            *(_OWORD *)v1386 = 0u;
            memset(v1387, 0, sizeof(v1387));
            v1008 = objc_msgSend_boxesDict(v1007, v1003, v1004);
            v1011 = objc_msgSend_allKeys(v1008, v1009, v1010);

            uint64_t v1015 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1011, v1012, (uint64_t)v1386, v1323, 16);
            if (v1015)
            {
              uint64_t v1016 = **(void **)&v1387[0];
              do
              {
                for (uint64_t i10 = 0; i10 != v1015; ++i10)
                {
                  if (**(void **)&v1387[0] != v1016) {
                    objc_enumerationMutation(v1011);
                  }
                  v1018 = (void *)*((void *)v1386[1] + i10);
                  float32x4_t v1315 = 0u;
                  float32x4_t v1316 = 0u;
                  float32x4_t v1313 = 0u;
                  float32x4_t v1314 = 0u;
                  float32x4_t v1311 = 0u;
                  float32x4_t v1312 = 0u;
                  *(_OWORD *)v1309 = 0u;
                  float32x4_t v1310 = 0u;
                  v1019 = objc_msgSend_boxesDict(v1007, v1013, v1014);
                  v1021 = objc_msgSend_objectForKeyedSubscript_(v1019, v1020, (uint64_t)v1018);
                  sub_25B445344((uint64_t)v1309, v1021);

                  sub_25B443BC4((uint64_t *)&v1305, (float32x4_t *)v1309);
                  v1022 = v1305;
                  *(float32x2_t *)((char *)v1305 + 12) = vadd_f32(*(float32x2_t *)((char *)v1305 + 12), v1005);
                  sub_25B44444C((uint64_t)v1388, (uint64_t)v1022);
                  float32x4_t v1313 = v1392;
                  float32x4_t v1314 = v1393;
                  float32x4_t v1315 = v1394;
                  float32x4_t v1316 = v1395;
                  *(_OWORD *)v1309 = *(_OWORD *)v1388;
                  float32x4_t v1310 = v1389;
                  float32x4_t v1311 = v1390;
                  float32x4_t v1312 = v1391;
                  sub_25B477B80((uint64_t)v1007, (__n128 *)v1309, v1018);
                  if (v1305)
                  {
                    v1306 = v1305;
                    operator delete(v1305);
                  }
                }
                uint64_t v1015 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1011, v1013, (uint64_t)v1386, v1323, 16);
              }
              while (v1015);
            }
          }
          uint64_t v1002 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1263, v1003, (uint64_t)&v1301, buf, 16);
        }
        while (v1002);
      }

      id v1000 = v1255;
    }
  }
  id v1256 = v1208;
  id v1023 = v921;
  v1026 = v1023;
  if (v1208)
  {
    if (v1023)
    {
      v1244 = v1023;
      uint64_t v1173 = objc_msgSend_count(v1256, v1024, v1025);
      v1026 = v1244;
      if (v1173)
      {
        unint64_t v1176 = 0;
        float v1177 = 3.4028e38;
        while (v1176 < objc_msgSend_count(v1256, v1174, v1175))
        {
          v1179 = objc_msgSend_objectAtIndexedSubscript_(v1256, v1178, v1176);
          sub_25B4146AC((uint64_t)buf, v1179);
          if (*((float *)&v1343[2] + 1) < v1177) {
            float v1177 = *((float *)&v1343[2] + 1);
          }

          ++v1176;
        }
        float32x4_t v1391 = 0u;
        float32x4_t v1390 = 0u;
        float32x4_t v1389 = 0u;
        *(_OWORD *)v1388 = 0u;
        id v1250 = v1244;
        uint64_t v1276 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1250, v1180, (uint64_t)v1388, buf, 16);
        if (v1276)
        {
          uint64_t v1265 = *(void *)v1389.i64[0];
          do
          {
            for (uint64_t i11 = 0; i11 != v1276; ++i11)
            {
              if (*(void *)v1389.i64[0] != v1265) {
                objc_enumerationMutation(v1250);
              }
              v1183 = (void *)*((void *)v1388[1] + i11);
              long long v1301 = 0u;
              long long v1302 = 0u;
              long long v1303 = 0u;
              long long v1304 = 0u;
              v1184 = objc_msgSend_boxesDict(v1183, v1181, v1182);
              v1187 = objc_msgSend_allKeys(v1184, v1185, v1186);

              uint64_t v1190 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1187, v1188, (uint64_t)&v1301, v1323, 16);
              if (v1190)
              {
                uint64_t v1191 = *(void *)v1302;
                do
                {
                  for (uint64_t i12 = 0; i12 != v1190; ++i12)
                  {
                    if (*(void *)v1302 != v1191) {
                      objc_enumerationMutation(v1187);
                    }
                    v1193 = *(void **)(*((void *)&v1301 + 1) + 8 * i12);
                    if ((objc_msgSend_isEqualToString_(v1193, v1189, @"wallaligned") & 1) != 0
                      || objc_msgSend_isEqualToString_(v1193, v1189, @"ultimate"))
                    {
                      float32x4_t v1315 = 0u;
                      float32x4_t v1316 = 0u;
                      float32x4_t v1313 = 0u;
                      float32x4_t v1314 = 0u;
                      float32x4_t v1311 = 0u;
                      float32x4_t v1312 = 0u;
                      *(_OWORD *)v1309 = 0u;
                      float32x4_t v1310 = 0u;
                      v1196 = objc_msgSend_boxesDict(v1183, v1189, v1194);
                      v1198 = objc_msgSend_objectForKeyedSubscript_(v1196, v1197, (uint64_t)v1193);
                      sub_25B445344((uint64_t)v1309, v1198);

                      LODWORD(v1195) = *(_DWORD *)&v1309[8];
                      if (*(float *)&v1309[8] <= (float)(v1177 + 0.3))
                      {
                        for (uint64_t i13 = 8; i13 != 72; i13 += 16)
                          *(float *)&v1309[i13] = v1177;
                        sub_25B477B80((uint64_t)v1183, (__n128 *)v1309, v1193);
                      }
                    }
                  }
                  uint64_t v1190 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1187, v1189, (uint64_t)&v1301, v1323, 16, v1195);
                }
                while (v1190);
              }
            }
            uint64_t v1276 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1250, v1181, (uint64_t)v1388, buf, 16);
          }
          while (v1276);
        }

        v1026 = v1244;
      }
    }
  }
  v1027 = v1026;

  id v1028 = v1027;
  long long v1301 = 0u;
  long long v1302 = 0u;
  long long v1303 = 0u;
  long long v1304 = 0u;
  id v1217 = v1028;
  exception_object = (_Unwind_Exception *)objc_msgSend_countByEnumeratingWithState_objects_count_(v1217, v1029, (uint64_t)&v1301, v1388, 16);
  if (exception_object)
  {
    uint64_t v1213 = *(void *)v1302;
    int32x4_t v1228 = vdupq_n_s32(0x7F7FFFFFu);
    do
    {
      v1223 = 0;
      do
      {
        if (*(void *)v1302 != v1213) {
          objc_enumerationMutation(v1217);
        }
        id v1225 = *(id *)(*((void *)&v1301 + 1) + 8 * (void)v1223);
        v1032 = objc_msgSend_type(v1225, v1030, v1031);
        char v1034 = objc_msgSend_isEqualToString_(v1032, v1033, @"Dishwasher");

        if ((v1034 & 1) != 0
          || (objc_msgSend_type(v1225, v1035, v1036),
              v1037 = objc_claimAutoreleasedReturnValue(),
              char v1039 = objc_msgSend_isEqualToString_(v1037, v1038, @"Oven"),
              v1037,
              (v1039 & 1) != 0))
        {
          int v1275 = 0;
          char v1249 = 1;
          float v1042 = 0.03;
        }
        else
        {
          v1151 = objc_msgSend_type(v1225, v1040, v1041);
          char v1153 = objc_msgSend_isEqualToString_(v1151, v1152, @"Sink");

          if ((v1153 & 1) == 0) {
            goto LABEL_1025;
          }
          char v1249 = 0;
          int v1275 = 1;
          float v1042 = 0.0;
        }
        id v1043 = v1225;
        id v1044 = v1217;
        v1282 = v1043;
        v1047 = objc_msgSend_parent_id(v1043, v1045, v1046);
        id v1048 = v1044;
        v1220 = v1048;
        id v1264 = v1047;
        if (v1264)
        {
          float32x4_t v1325 = 0u;
          float32x4_t v1324 = 0u;
          memset(v1323, 0, sizeof(v1323));
          id v1257 = v1048;
          uint64_t v1051 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1257, v1050, (uint64_t)v1323, buf, 16);
          if (v1051)
          {
            uint64_t v1052 = *(void *)v1323[1].i64[0];
LABEL_980:
            uint64_t v1053 = 0;
            while (1)
            {
              if (*(void *)v1323[1].i64[0] != v1052) {
                objc_enumerationMutation(v1257);
              }
              id v1049 = *(id *)(v1323[0].i64[1] + 8 * v1053);
              v1058 = objc_msgSend_identifier(v1049, v1054, v1055);
              if (v1058)
              {
                v1059 = objc_msgSend_identifier(v1049, v1056, v1057);
                v1062 = objc_msgSend_UUIDString(v1059, v1060, v1061);
                v1065 = objc_msgSend_UUIDString(v1264, v1063, v1064);
                char v1067 = objc_msgSend_isEqualToString_(v1062, v1066, (uint64_t)v1065);

                if (v1067) {
                  break;
                }
              }

              if (v1051 == ++v1053)
              {
                uint64_t v1051 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1257, v1068, (uint64_t)v1323, buf, 16);
                if (v1051) {
                  goto LABEL_980;
                }
                goto LABEL_987;
              }
            }
          }
          else
          {
LABEL_987:
            id v1049 = 0;
          }
        }
        else
        {
          id v1049 = 0;
        }

        if (v1049)
        {
          v1069 = @"wallaligned";
          v1373 = @"wallaligned";
          v1070 = @"ultimate";
          char v1071 = 0;
          uint64_t v1072 = 0;
          v1374 = @"ultimate";
          do
          {
            char v1073 = v1071;
            v1074 = *(&v1373 + v1072);
            v1077 = objc_msgSend_boxesDict(v1282, v1075, v1076);
            v1079 = objc_msgSend_objectForKey_(v1077, v1078, (uint64_t)v1074);

            v1082 = objc_msgSend_boxesDict(v1049, v1080, v1081);
            v1084 = objc_msgSend_objectForKey_(v1082, v1083, (uint64_t)v1074);

            if (v1079 && v1084)
            {
              float32x4_t v1342 = 0u;
              float32x4_t v1341 = 0u;
              float32x4_t v1340 = 0u;
              float32x4_t v1339 = 0u;
              float32x4_t v1338 = 0u;
              float32x4_t v1337 = 0u;
              memset(buf, 0, sizeof(buf));
              sub_25B445344((uint64_t)buf, v1084);
              sub_25B443BC4((uint64_t *)v1386, buf);
              float v1085 = *((float *)v1386[0] + 6);
              float32x4_t v1329 = 0u;
              float32x4_t v1328 = 0u;
              float32x4_t v1327 = 0u;
              float32x4_t v1326 = 0u;
              float32x4_t v1325 = 0u;
              float32x4_t v1324 = 0u;
              memset(v1323, 0, sizeof(v1323));
              sub_25B445344((uint64_t)v1323, v1079);
              sub_25B443BC4((uint64_t *)&v1305, v1323);
              v1086 = (float *)v1305;
              for (float i14 = (float)(*((float *)v1305 + 6) - v1085) + 0.785398163; i14 < 0.0; float i14 = i14 + 6.2832)
                ;
              float v1088 = v1085 + (double)(int)(i14 / 1.57079633) * 1.57079633;
              *((float *)v1305 + 6) = v1088;
              float v1089 = v1086[2];
              float v1090 = v1086[5];
              v1091 = (float *)v1386[0];
              float v1092 = *((float *)v1386[0] + 2) + (float)(*((float *)v1386[0] + 5) * 0.5);
              BOOL v1093 = (float)(v1089 - v1092) < 0.03;
              float v1094 = v1092 - (float)(v1089 + (float)(v1090 * 0.5));
              if (!v1275) {
                BOOL v1093 = v1094 < v1042;
              }
              float v1095 = v1094 - v1042;
              if (!v1093) {
                float v1095 = 0.0;
              }
              v1086[2] = v1089 + (float)(v1095 * 0.5);
              v1086[5] = v1090 + v1095;
              if (v1249)
              {
                for (float i15 = (float)(v1088 - v1091[6]) + 0.785398163; i15 < 0.0; float i15 = i15 + 6.2832)
                  ;
                float v1097 = *v1086;
                float v1098 = v1086[1];
                float v1099 = v1086[4];
                unsigned int v1100 = (int)(fmodf(i15, 6.2832) / 1.57079633);
                if (v1100 >= 4)
                {
                  v1200 = __cxa_allocate_exception(0x10uLL);
                  MEMORY[0x261163BE0](v1200, "");
                  __cxa_throw(v1200, (struct type_info *)&unk_2708F23B0, MEMORY[0x263F8C070]);
                }
                float v1101 = -1.57079633 - v1088;
                __float2 v1102 = __sincosf_stret(v1101);
                uint64_t v1103 = 3;
                if ((v1100 & 1) == 0) {
                  uint64_t v1103 = 4;
                }
                float v1104 = (float)((float)((float)(v1102.__sinval * v1091[1]) + (float)(v1102.__cosval * *v1091))
                              + (float)(v1091[v1103] * 0.5))
                      - (float)((float)(v1099 * 0.5)
                              + (float)((float)(v1098 * v1102.__sinval) + (float)(v1102.__cosval * v1097)));
                v1086[4] = v1099 + v1104;
                float *v1086 = v1097 + (float)((float)(v1102.__cosval * v1104) * 0.5);
                v1086[1] = v1098 + (float)((float)(v1102.__sinval * v1104) * 0.5);
              }
              sub_25B44444C((uint64_t)v1309, (uint64_t)v1086);
              float32x4_t v1326 = v1313;
              float32x4_t v1327 = v1314;
              float32x4_t v1328 = v1315;
              float32x4_t v1329 = v1316;
              v1323[0] = *(float32x4_t *)v1309;
              v1323[1] = v1310;
              float32x4_t v1324 = v1311;
              float32x4_t v1325 = v1312;
              v1107 = objc_msgSend_boxesDict(v1282, v1105, v1106);
              v1110 = sub_25B4454B4((__n128 *)v1323, v1108, v1109);
              objc_msgSend_setValue_forKey_(v1107, v1111, (uint64_t)v1110, v1074);

              if (v1275)
              {
                __float2 v1116 = __sincosf_stret(*((float *)v1386[0] + 6));
                *(float *)v1115.i32 = v1116.__cosval;
                *(float *)v1114.i32 = v1116.__sinval;
                uint64_t v1117 = 0;
                int32x4_t v1118 = vdupq_lane_s32(*(int32x2_t *)v1115.i8, 0);
                *(float *)&v1115.i32[1] = -v1116.__sinval;
                int32x4_t v1119 = vzip1q_s32(v1115, (int32x4_t)0);
                int32x4_t v1120 = vzip1q_s32(v1119, v1114);
                float32x4_t v1121 = (float32x4_t)vzip2q_s32(v1119, v1118);
                v1120.i32[3] = v1240;
                int32x4_t v1122 = (int32x4_t)v1121;
                v1122.i32[3] = v1245;
                int32x4_t v1123 = (int32x4_t)xmmword_25B5F10E0;
                v1123.i32[3] = v1259.i32[3];
                uint64_t v1258 = v1123.i64[1];
                v1259.i64[1] = v1120.i64[1];
                int32x4_t v1124 = vzip1q_s32(v1120, v1123);
                int32x4_t v1125 = vzip1q_s32(v1122, (int32x4_t)0);
                float32x4_t v1126 = (float32x4_t)vzip2q_s32(v1124, v1125);
                v1127.i64[0] = 0x80000000800000;
                v1127.i32[2] = 0x800000;
                float32x4_t v1128 = (float32x4_t)v1228;
                do
                {
                  float32x4_t v1129 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)__PAIR64__(LODWORD(v1116.__sinval), LODWORD(v1116.__cosval)), COERCE_FLOAT(*(_OWORD *)&buf[v1117])), v1121, *(float32x2_t *)buf[v1117].f32, 1), (float32x4_t)xmmword_25B5F10E0, buf[v1117], 2);
                  buf[v1117] = v1129;
                  v1128.i32[3] = 0;
                  v1129.i32[3] = 0;
                  float32x4_t v1128 = vminnmq_f32(v1128, v1129);
                  v1127.i32[3] = 0;
                  float32x4_t v1127 = vmaxnmq_f32(v1127, v1129);
                  ++v1117;
                }
                while (v1117 != 4);
                uint64_t v1130 = 0;
                int8x8_t v1131 = vmvn_s8((int8x8_t)vcgt_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*(float32x2_t *)v1127.f32, *(float32x2_t *)v1128.f32)), (float32x2_t)vdup_n_s32(0x3D75C28Fu)));
                char v1132 = v1131.i8[4] | v1131.i8[0];
                float32x4_t v1133 = (float32x4_t)vzip1q_s32(v1124, v1125);
                v1134.i64[1] = v1258;
                v1134.i64[0] = v1259.u32[2];
                int8x8_t v1135 = (int8x8_t)vadd_f32(*(float32x2_t *)v1128.f32, (float32x2_t)vdup_n_s32(0x3CF5C28Fu));
                int8x8_t v1136 = (int8x8_t)vadd_f32(*(float32x2_t *)v1127.f32, (float32x2_t)vdup_n_s32(0xBCF5C28F));
                if (v1132) {
                  unsigned int v1137 = -1;
                }
                else {
                  unsigned int v1137 = 0;
                }
                int8x8_t v1138 = (int8x8_t)vdup_n_s32(v1137);
                float32x2_t v1139 = (float32x2_t)vbsl_s8(v1138, *(int8x8_t *)v1128.f32, v1135);
                float32x2_t v1140 = (float32x2_t)vbsl_s8(v1138, *(int8x8_t *)v1127.f32, v1136);
                do
                {
                  v1141 = &v1323[v1130];
                  float32x4_t v1142 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)__PAIR64__(LODWORD(v1116.__sinval), LODWORD(v1116.__cosval)), COERCE_FLOAT(*(_OWORD *)&v1323[v1130])), v1121, *(float32x2_t *)v1323[v1130].f32, 1), (float32x4_t)xmmword_25B5F10E0, v1323[v1130], 2);
                  float32x4_t *v1141 = v1142;
                  v1323[v1130].i32[2] = v1142.i32[2];
                  *(float32x2_t *)v1141->f32 = vminnm_f32(vmaxnm_f32(*(float32x2_t *)v1142.f32, v1139), v1140);
                  float32x4_t v1143 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1133, COERCE_FLOAT(*(_OWORD *)&v1323[v1130])), v1126, *(float32x2_t *)v1323[v1130].f32, 1), v1134, v1323[v1130], 2);
                  float32x4_t *v1141 = v1143;
                  v1141[4].i64[0] = v1143.i64[0];
                  ++v1130;
                }
                while (v1130 != 4);
                v1144 = objc_msgSend_boxesDict(v1282, v1112, *(void *)&v1113);
                v1147 = sub_25B4454B4((__n128 *)v1323, v1145, v1146);
                objc_msgSend_setValue_forKey_(v1144, v1148, (uint64_t)v1147, v1074);

                __int32 v1240 = v1259.i32[3];
                v1259.i32[3] = HIDWORD(v1258);
              }
              if (v1305)
              {
                v1306 = v1305;
                operator delete(v1305);
              }
              if (v1386[0])
              {
                v1386[1] = v1386[0];
                operator delete(v1386[0]);
              }
            }

            char v1071 = 1;
            uint64_t v1072 = 1;
          }
          while ((v1073 & 1) == 0);
          for (uint64_t i16 = 8; i16 != -8; i16 -= 8)
        }
LABEL_1025:

        v1223 = (_Unwind_Exception *)((char *)v1223 + 1);
      }
      while (v1223 != exception_object);
      uint64_t v1154 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1217, v1150, (uint64_t)&v1301, v1388, 16);
      exception_object = (_Unwind_Exception *)v1154;
    }
    while (v1154);
  }

  id v1155 = v1217;
  memset(v1323, 0, sizeof(v1323));
  float32x4_t v1324 = 0u;
  float32x4_t v1325 = 0u;
  id v527 = v1155;
  uint64_t v1159 = objc_msgSend_countByEnumeratingWithState_objects_count_(v527, v1156, (uint64_t)v1323, buf, 16);
  if (v1159)
  {
    uint64_t v1160 = *(void *)v1323[1].i64[0];
    do
    {
      for (uint64_t i17 = 0; i17 != v1159; ++i17)
      {
        if (*(void *)v1323[1].i64[0] != v1160) {
          objc_enumerationMutation(v527);
        }
        v1162 = *(void **)(v1323[0].i64[1] + 8 * i17);
        v1163 = objc_msgSend_beautified_parts(v1162, v1157, v1158);
        BOOL v1166 = objc_msgSend_count(v1163, v1164, v1165) == 0;

        if (v1166)
        {
          v1167 = objc_msgSend_parts(v1162, v1157, v1158);
          v1170 = objc_msgSend_copy(v1167, v1168, v1169);
          sub_25B477C30((uint64_t)v1162, v1170);
        }
      }
      uint64_t v1159 = objc_msgSend_countByEnumeratingWithState_objects_count_(v527, v1157, (uint64_t)v1323, buf, 16);
    }
    while (v1159);
  }

  buf[0].i64[0] = (uint64_t)&v1288;
  sub_25B41D070((void ***)buf);

LABEL_1040:

  return v527;
}

void sub_25B41C15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54)
{
  if (!v56)
  {
    if (v54) {
      operator delete(v54);
    }
    STACK[0x510] = (unint64_t)&STACK[0x690];
    sub_25B414958((void ***)&STACK[0x510]);
    uint64_t v57 = (void *)STACK[0x428];
    unint64_t v58 = (void *)STACK[0x420];

    STACK[0x510] = (unint64_t)&STACK[0x870];
    sub_25B414958((void ***)&STACK[0x510]);

    STACK[0x430] = (unint64_t)&STACK[0x250];
    sub_25B414958((void ***)&STACK[0x430]);

    STACK[0x690] = (unint64_t)&STACK[0x280];
    sub_25B414958((void ***)&STACK[0x690]);

    float32x2_t v66 = (void **)&v65;
    sub_25B41D070(&v66);

    _Unwind_Resume(v63);
  }
  JUMPOUT(0x25B41C6ECLL);
}

void sub_25B41C378()
{
}

void sub_25B41C388()
{
  STACK[0x270] = v0;
  JUMPOUT(0x25B41CBC8);
}

void sub_25B41C3A8()
{
  sub_25B3FB178((uint64_t)&STACK[0x690]);
  JUMPOUT(0x25B41CB34);
}

void sub_25B41C3B4()
{
  JUMPOUT(0x25B41CCB4);
}

void sub_25B41C3F0()
{
  uint64_t v12 = (void **)&v11;
  sub_25B41D070(&v12);

  _Unwind_Resume(v9);
}

void sub_25B41C408()
{
  JUMPOUT(0x25B41D058);
}

void sub_25B41C418()
{
}

void sub_25B41C428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  float v62 = &v61;
  sub_25B41D070(&v62);

  _Unwind_Resume(v59);
}

void sub_25B41C430()
{
  JUMPOUT(0x25B41D008);
}

void sub_25B41C450()
{
  JUMPOUT(0x25B41CB54);
}

void sub_25B41C46C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_25B41C490()
{
}

void sub_25B41C49C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_25B3F61B8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_25B41C4AC()
{
}

void sub_25B41C4BC()
{
  STACK[0x270] = v0;
  JUMPOUT(0x25B41C540);
}

void sub_25B41C4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54)
{
  STACK[0x510] = (unint64_t)&STACK[0x8B0];
  sub_25B414958((void ***)&STACK[0x510]);
  if (v56) {
    operator delete(v56);
  }
  if (v54) {
    operator delete(v54);
  }
  STACK[0x510] = (unint64_t)&STACK[0x690];
  sub_25B414958((void ***)&STACK[0x510]);
  uint64_t v57 = (void *)STACK[0x428];
  unint64_t v58 = (void *)STACK[0x420];

  STACK[0x510] = (unint64_t)&STACK[0x870];
  sub_25B414958((void ***)&STACK[0x510]);

  STACK[0x430] = (unint64_t)&STACK[0x250];
  sub_25B414958((void ***)&STACK[0x430]);

  STACK[0x690] = (unint64_t)&STACK[0x280];
  sub_25B414958((void ***)&STACK[0x690]);

  float32x2_t v66 = (void **)&v65;
  sub_25B41D070(&v66);

  _Unwind_Resume(v63);
}

void sub_25B41C504()
{
}

void sub_25B41C510()
{
  STACK[0x510] = (unint64_t)&STACK[0x870];
  JUMPOUT(0x25B41C520);
}

void sub_25B41C528()
{
}

void sub_25B41C53C()
{
}

void sub_25B41C54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  uint64_t v57 = (void *)STACK[0x7D8];
  if (STACK[0x7D8])
  {
    STACK[0x7E0] = (unint64_t)v57;
    operator delete(v57);
  }

  sub_25B445884((uint64_t)&STACK[0x430]);
  sub_25B46EFF8(&STACK[0x790]);
  JUMPOUT(0x25B41CBC8);
}

void sub_25B41C554()
{
}

void sub_25B41C55C()
{
  JUMPOUT(0x25B41CB54);
}

void sub_25B41C580()
{
}

void sub_25B41C58C()
{
  JUMPOUT(0x25B41CAECLL);
}

void sub_25B41C598()
{
}

void sub_25B41C5BC()
{
  sub_25B54C81C(1, v0);
  sub_25B573404((uint64_t)&STACK[0x8F0]);
  uint64_t v1 = 352;
  while (1)
  {
    if (*((char *)&STACK[0x510] + v1 - 1) < 0) {
      operator delete(*(void **)((char *)&STACK[0x510] + v1 - 24));
    }
    v1 -= 32;
    if (!v1) {
      JUMPOUT(0x25B41C800);
    }
  }
}

void sub_25B41C5D0()
{
  JUMPOUT(0x25B41CD1CLL);
}

void sub_25B41C604()
{
  JUMPOUT(0x25B41CCF4);
}

void sub_25B41C628()
{
  JUMPOUT(0x25B41CC18);
}

void sub_25B41C634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_25B445884((uint64_t)&STACK[0x510]);

  if (v71)
  {
    STACK[0x8F8] = (unint64_t)v71;
    operator delete(v71);
  }
  STACK[0x510] = (unint64_t)&a71;
  sub_25B41D070((void ***)&STACK[0x510]);

  JUMPOUT(0x25B41D020);
}

void sub_25B41C64C()
{
  JUMPOUT(0x25B41CC2CLL);
}

void sub_25B41C674()
{
  operator delete(v1);

  STACK[0x8F0] = (unint64_t)&STACK[0x430];
  sub_25B413BE8((void ***)&STACK[0x8F0]);
  JUMPOUT(0x25B41C9D8);
}

void sub_25B41C690()
{
  JUMPOUT(0x25B41CB5CLL);
}

void sub_25B41C69C()
{
}

void sub_25B41C6A4()
{
}

void sub_25B41C6AC()
{
}

void sub_25B41C6FC()
{
}

void sub_25B41C704()
{
}

void sub_25B41C748()
{
  JUMPOUT(0x25B41CD1CLL);
}

void sub_25B41C76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  JUMPOUT(0x25B41D058);
}

void sub_25B41C77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  JUMPOUT(0x25B41D058);
}

void sub_25B41C788()
{
  JUMPOUT(0x25B41CC2CLL);
}

void sub_25B41C7B4()
{
  JUMPOUT(0x25B41CA30);
}

void sub_25B41C814()
{
}

void sub_25B41C83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v71)
  {
    STACK[0x8F8] = (unint64_t)v71;
    operator delete(v71);
  }
  STACK[0x510] = (unint64_t)&a71;
  sub_25B41D070((void ***)&STACK[0x510]);

  JUMPOUT(0x25B41D020);
}

void sub_25B41C864()
{
}

void sub_25B41C86C()
{
  sub_25B43E9EC((uint64_t)&STACK[0x430]);
  STACK[0x680] = v0;
  JUMPOUT(0x25B41C87CLL);
}

void sub_25B41C8BC()
{
}

void sub_25B41C8C4()
{
  unint64_t v0 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x25B41CB28);
}

void sub_25B41C8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  JUMPOUT(0x25B41D008);
}

void sub_25B41C8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  JUMPOUT(0x25B41D008);
}

void sub_25B41C8F8()
{
}

void sub_25B41C900()
{
}

void sub_25B41C940()
{
  JUMPOUT(0x25B41CC14);
}

void sub_25B41C950()
{
  JUMPOUT(0x25B41CC14);
}

void sub_25B41C96C()
{
  JUMPOUT(0x25B41CA30);
}

void sub_25B41C998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v71)
  {
    STACK[0x8F8] = (unint64_t)v71;
    operator delete(v71);
  }
  STACK[0x510] = (unint64_t)&a71;
  sub_25B41D070((void ***)&STACK[0x510]);

  JUMPOUT(0x25B41D020);
}

void sub_25B41C9A8()
{
  JUMPOUT(0x25B41CA34);
}

void sub_25B41C9B0()
{
  JUMPOUT(0x25B41CAE4);
}

void sub_25B41C9BC()
{
}

void sub_25B41C9FC()
{
  JUMPOUT(0x25B41CC2CLL);
}

void sub_25B41CA54()
{
  JUMPOUT(0x25B41CC14);
}

void sub_25B41CA70()
{
}

void sub_25B41CA78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  operator delete(v33);
  sub_25B3FB178((uint64_t)&STACK[0x690]);
  JUMPOUT(0x25B41CB34);
}

void sub_25B41CA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  JUMPOUT(0x25B41CF84);
}

void sub_25B41CAA0()
{
  JUMPOUT(0x25B41CC2CLL);
}

void sub_25B41CAB8()
{
}

void sub_25B41CAD0()
{
  JUMPOUT(0x25B41CC10);
}

void sub_25B41CB10()
{
  JUMPOUT(0x25B41CD6CLL);
}

void sub_25B41CB24()
{
}

void sub_25B41CB70()
{
  JUMPOUT(0x25B41CF80);
}

void sub_25B41CB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  unint64_t v42 = &v41;
  sub_25B41D070(&v42);

  _Unwind_Resume(v39);
}

void sub_25B41CB84()
{
  JUMPOUT(0x25B41CC14);
}

void sub_25B41CB90()
{
  JUMPOUT(0x25B41D008);
}

void sub_25B41CB98()
{
  float32x2_t v8 = &v7;
  sub_25B41D070(&v8);

  _Unwind_Resume(v5);
}

void sub_25B41CBA0()
{
  JUMPOUT(0x25B41CC2CLL);
}

void sub_25B41CBC4()
{
  sub_25B3FB178((uint64_t)&STACK[0x280]);
  if (v0) {
    operator delete(v0);
  }
  STACK[0x430] = (unint64_t)&STACK[0x268];
  sub_25B41D070((void ***)&STACK[0x430]);
  STACK[0x430] = (unint64_t)&STACK[0x250];
  sub_25B414958((void ***)&STACK[0x430]);

  float32x2_t v8 = (void **)&v7;
  sub_25B41D070(&v8);

  _Unwind_Resume(v5);
}

void sub_25B41CC00()
{
}

void sub_25B41CC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  STACK[0x510] = (unint64_t)&STACK[0x360];
  sub_25B413C78((void ***)&STACK[0x510]);

  unint64_t v42 = (void **)&v41;
  sub_25B41D070(&v42);

  _Unwind_Resume(v39);
}

void sub_25B41CC5C()
{
  JUMPOUT(0x25B41CF80);
}

void sub_25B41CC68()
{
  JUMPOUT(0x25B41CC70);
}

void sub_25B41CD48()
{
  JUMPOUT(0x25B41CD58);
}

void sub_25B41CD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v71)
  {
    STACK[0x8F8] = (unint64_t)v71;
    operator delete(v71);
  }
  STACK[0x510] = (unint64_t)&a71;
  sub_25B41D070(&STACK[0x510]);

  JUMPOUT(0x25B41D020);
}

void sub_25B41CD68()
{
  float32x2_t v8 = (void **)&v7;
  sub_25B41D070(&v8);

  _Unwind_Resume(v5);
}

void sub_25B41CD7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  __cxa_free_exception(v33);
  JUMPOUT(0x25B41CECCLL);
}

void sub_25B41CD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x900] = v72;
  STACK[0x8F0] = (unint64_t)v71;

  if (v71)
  {
    STACK[0x8F8] = (unint64_t)v71;
    operator delete(v71);
  }
  STACK[0x510] = (unint64_t)&a71;
  sub_25B41D070((void ***)&STACK[0x510]);

  JUMPOUT(0x25B41D020);
}

void sub_25B41CDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x900] = v72;
  STACK[0x8F0] = (unint64_t)v71;

  if (v71)
  {
    STACK[0x8F8] = (unint64_t)v71;
    operator delete(v71);
  }
  STACK[0x510] = (unint64_t)&a71;
  sub_25B41D070((void ***)&STACK[0x510]);

  JUMPOUT(0x25B41D020);
}

void sub_25B41CDF0()
{
  STACK[0x900] = v1;
  STACK[0x8F0] = v0;
  JUMPOUT(0x25B41CE20);
}

void sub_25B41CE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  JUMPOUT(0x25B41CF80);
}

void sub_25B41CF9C()
{
  JUMPOUT(0x25B41D04CLL);
}

void sub_25B41CFBC()
{
  unint64_t v0 = (void *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    STACK[0x2D0] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x25B41CFF4);
}

void sub_25B41CFD8()
{
  JUMPOUT(0x25B41CFF8);
}

void sub_25B41D048()
{
  JUMPOUT(0x25B41D050);
}

void sub_25B41D070(void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    float32x2_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 192;
        sub_25B41D184(v4);
      }
      while ((void *)v4 != v2);
      float32x2_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_25B41D0F4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)a1;
  sub_25B41D070(&v4);
  return a1;
}

void **sub_25B41D13C(void **a1)
{
  unint64_t v3 = a1;
  sub_25B41D070(&v3);
  return a1;
}

void sub_25B41D184(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 160) = v2;
    operator delete(v2);
  }

  unint64_t v3 = *(void **)(a1 + 128);
}

uint64_t sub_25B41D1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 160;
    do
    {
      uint64_t v6 = v5 - 160;
      long long v7 = *(_OWORD *)(v5 - 160);
      long long v8 = *(_OWORD *)(v5 - 144);
      long long v9 = *(_OWORD *)(v5 - 112);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v5 - 128);
      *(_OWORD *)(a3 + 48) = v9;
      *(_OWORD *)a3 = v7;
      *(_OWORD *)(a3 + 16) = v8;
      long long v10 = *(_OWORD *)(v5 - 96);
      long long v11 = *(_OWORD *)(v5 - 80);
      long long v12 = *(_OWORD *)(v5 - 48);
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(v5 - 64);
      *(_OWORD *)(a3 + 112) = v12;
      *(_OWORD *)(a3 + 64) = v10;
      *(_OWORD *)(a3 + 80) = v11;
      objc_storeStrong((id *)(a3 + 128), *(id *)(v5 - 32));
      *(_DWORD *)(a3 + 136) = *(_DWORD *)(v5 - 24);
      objc_storeStrong((id *)(a3 + 144), *(id *)(v5 - 16));
      if (a3 != v5 - 160) {
        sub_25B3FE7A8((char *)(a3 + 152), *(char **)(v5 - 8), *(void *)v5, (uint64_t)(*(void *)v5 - *(void *)(v5 - 8)) >> 2);
      }
      objc_storeStrong((id *)(a3 + 176), *(id *)(v5 + 16));
      *(_WORD *)(a3 + 184) = *(_WORD *)(v5 + 24);
      a3 += 192;
      v5 += 192;
    }
    while (v6 + 192 != a2);
  }
  return a3;
}

uint64_t sub_25B41D29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a1 + v6;
      uint64_t v8 = a3 + v6;
      long long v9 = *(_OWORD *)(a1 + v6);
      long long v10 = *(_OWORD *)(a1 + v6 + 16);
      long long v11 = *(_OWORD *)(a1 + v6 + 48);
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(a1 + v6 + 32);
      *(_OWORD *)(v8 + 48) = v11;
      *(_OWORD *)uint64_t v8 = v9;
      *(_OWORD *)(v8 + 16) = v10;
      long long v12 = *(_OWORD *)(a1 + v6 + 64);
      long long v13 = *(_OWORD *)(a1 + v6 + 80);
      long long v14 = *(_OWORD *)(a1 + v6 + 112);
      *(_OWORD *)(v8 + 96) = *(_OWORD *)(a1 + v6 + 96);
      *(_OWORD *)(v8 + 112) = v14;
      *(_OWORD *)(v8 + 64) = v12;
      *(_OWORD *)(v8 + 80) = v13;
      *(void *)(v8 + 128) = *(id *)(a1 + v6 + 128);
      *(_DWORD *)(v8 + 136) = *(_DWORD *)(a1 + v6 + 136);
      *(void *)(v8 + 144) = *(id *)(a1 + v6 + 144);
      *(void *)(v8 + 160) = 0;
      *(void *)(v8 + 168) = 0;
      *(void *)(v8 + 152) = 0;
      sub_25B3FCA58((void *)(a3 + v6 + 152), *(const void **)(v7 + 152), *(void *)(v7 + 160), (uint64_t)(*(void *)(v7 + 160) - *(void *)(v7 + 152)) >> 2);
      *(void *)(v8 + 176) = *(id *)(a1 + v6 + 176);
      *(_WORD *)(v8 + 184) = *(_WORD *)(a1 + v6 + 184);
      v6 += 192;
    }
    while (v7 + 192 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_25B41D370(_Unwind_Exception *a1)
{
  if (v3 != v1)
  {
    uint64_t v5 = v1 - 192;
    do
    {
      sub_25B41D184(v5 + v2);
      v2 -= 192;
    }
    while (v2);
  }
  _Unwind_Resume(a1);
}

void sub_25B41D3A8(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 192;
        sub_25B41D184(v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_25B41D410(void *a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556) {
    sub_25B3FBC4C();
  }
  BOOL result = (char *)sub_25B41D460(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[192 * v4];
  return result;
}

void *sub_25B41D460(unint64_t a1)
{
  if (a1 >= 0x155555555555556) {
    sub_25B3FA70C();
  }
  return operator new(192 * a1);
}

void sub_25B41D8F8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_25B41D9AC(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (a1)
  {
    char v14 = 0;
    uint64_t v6 = objc_msgSend_defaultManager(MEMORY[0x263F08850], v3, v4);
    char isDirectory = objc_msgSend_fileExistsAtPath_isDirectory_(v6, v7, (uint64_t)v5, &v14);

    if (v14) {
      char v11 = isDirectory;
    }
    else {
      char v11 = 0;
    }
    if ((v11 & 1) == 0)
    {
      long long v12 = objc_msgSend_defaultManager(MEMORY[0x263F08850], v9, v10);
      objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(v12, v13, (uint64_t)v5, 1, 0, 0);
    }
  }
}

void sub_25B41DA50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B41DA70(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  id v7 = a2;
  if (a1)
  {
    if (*(unsigned char *)(a1 + 177))
    {
      if (!a3
        || *(double *)(a1 + 96) != 0.0
        && (!*(void *)(a1 + 80)
         || (objc_msgSend_date(MEMORY[0x263EFF910], v5, v6),
             uint64_t v8 = objc_claimAutoreleasedReturnValue(),
             objc_msgSend_timeIntervalSinceDate_(v8, v9, *(void *)(a1 + 80)),
             double v11 = v10,
             double v12 = 1.0 / *(double *)(a1 + 96),
             v8,
             v11 >= v12)))
      {
        uint64_t v13 = objc_msgSend_date(MEMORY[0x263EFF910], v5, v6);
        char v14 = *(void **)(a1 + 80);
        *(void *)(a1 + 80) = v13;

        unint64_t v16 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 24), v15, @"Live");
        long long v17 = *(id *)(a1 + 16);
        unint64_t v20 = objc_msgSend_copy(v7, v18, v19);
        id v21 = *(id *)(a1 + 88);
        dispatch_group_enter(v17);
        float32x2_t v22 = *(NSObject **)(a1 + 8);
        block[0] = MEMORY[0x263EF8330];
        block[1] = 3221225472;
        block[2] = sub_25B41DF84;
        block[3] = &unk_265494FF0;
        id v66 = v20;
        id v68 = v66;
        id v23 = v21;
        id v69 = v23;
        id v24 = v16;
        id v70 = v24;
        uint64_t v71 = a1;
        float32x2_t v25 = v17;
        unint64_t v72 = v25;
        dispatch_async(v22, block);
        float32x2_t v28 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v26, v27);
        float32x2_t v30 = objc_msgSend_numberWithBool_(NSNumber, v29, a3);
        objc_msgSend_setObject_forKeyedSubscript_(v28, v31, (uint64_t)v30, @"skipped");

        float32x2_t v34 = *(void **)(a1 + 104);
        if (v34)
        {
          uint64_t v35 = NSNumber;
          objc_msgSend_timestamp(v34, v32, v33);
          int v38 = objc_msgSend_numberWithDouble_(v35, v36, v37);
          objc_msgSend_setObject_forKeyedSubscript_(v28, v39, (uint64_t)v38, @"timestamp");

          uint64_t v40 = NSNumber;
          objc_msgSend_timestamp(*(void **)(a1 + 104), v41, v42);
          unsigned __int8 v46 = objc_msgSend_numberWithDouble_(v40, v44, v45, v43 - *(double *)(a1 + 72));
          objc_msgSend_setObject_forKeyedSubscript_(v28, v47, (uint64_t)v46, @"video_timestamp");
        }
        else
        {
          objc_msgSend_setObject_forKeyedSubscript_(v28, v32, (uint64_t)&unk_2708FE2A0, @"timestamp");
          objc_msgSend_setObject_forKeyedSubscript_(v28, v49, (uint64_t)&unk_2708FE2A0, @"video_timestamp");
        }
        objc_msgSend_addObject_(*(void **)(a1 + 32), v48, (uint64_t)v28);
        if (*(unsigned char *)(a1 + 177) && (*(unsigned char *)(a1 + 178) || *(unsigned char *)(a1 + 179)))
        {
          float32x2_t v51 = *(void **)(a1 + 24);
          if (v51 && *(void *)(a1 + 104))
          {
            float v63 = objc_msgSend_stringByAppendingPathComponent_(v51, v50, @"Live");
            uint64_t v52 = *(void *)(a1 + 72);
            id v64 = *(id *)(a1 + 104);
            long long v53 = *(_OWORD *)(a1 + 128);
            long long v85 = *(_OWORD *)(a1 + 112);
            long long v86 = v53;
            long long v54 = *(_OWORD *)(a1 + 160);
            long long v87 = *(_OWORD *)(a1 + 144);
            long long v88 = v54;
            uint64_t v57 = objc_msgSend_count(*(void **)(a1 + 32), v55, v56);
            __int16 v58 = *(_WORD *)(a1 + 178);
            float32x2_t v59 = *(id *)(a1 + 16);
            dispatch_group_enter(v59);
            queue = *(NSObject **)(a1 + 8);
            v73[0] = MEMORY[0x263EF8330];
            v73[1] = 3221225472;
            v73[2] = sub_25B41E620;
            v73[3] = &unk_265495018;
            id v78 = v63;
            id v79 = v64;
            unint64_t v81 = v59;
            uint64_t v82 = v57;
            uint64_t v83 = v52;
            long long v74 = v85;
            long long v75 = v86;
            long long v76 = v87;
            long long v77 = v88;
            __int16 v84 = v58;
            uint64_t v80 = a1;
            float32x2_t v60 = v59;
            id v61 = v64;
            id v62 = v63;
            dispatch_async(queue, v73);
          }
        }
      }
    }
  }
}

void sub_25B41DEBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B41DF84(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  uint64_t v93 = objc_msgSend_array(MEMORY[0x263EFF980], a2, a3);
  long long v136 = 0u;
  long long v135 = 0u;
  long long v134 = 0u;
  long long v133 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v133, v140, 16);
  if (v6)
  {
    uint64_t v94 = *(void *)v134;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v134 != v94) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v133 + 1) + 8 * v7);
        long long v9 = *(void **)(a1 + 40);
        double v10 = objc_msgSend_identifier(v8, v4, v5);
        uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v9, v11, (uint64_t)v10);

        if (v12)
        {
          objc_copyStruct(&dest, (const void *)(v12 + 96), 480, 1, 0);
        }
        else
        {
          long long v131 = 0u;
          long long v130 = 0u;
          long long v129 = 0u;
          long long v128 = 0u;
          long long v127 = 0u;
          long long v126 = 0u;
          long long v124 = 0u;
          long long v125 = 0u;
          long long v122 = 0u;
          long long v123 = 0u;
          long long v120 = 0u;
          long long v121 = 0u;
          long long v118 = 0u;
          long long v119 = 0u;
          long long v116 = 0u;
          long long v117 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          long long v112 = 0u;
          long long v113 = 0u;
          long long v110 = 0u;
          long long v111 = 0u;
          long long v108 = 0u;
          long long v109 = 0u;
          long long v106 = 0u;
          long long v107 = 0u;
          long long v104 = 0u;
          long long v105 = 0u;
          float32x4_t dest = 0u;
          long long v103 = 0u;
        }
        id v13 = v8;
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        unint64_t v20 = (objc_msgSend_count(v13, v14, v15) + 29) / 0x1EuLL;
        char v21 = 1;
        while (v17 < objc_msgSend_count(v13, v18, v19))
        {
          float32x4_t v24 = *(float32x4_t *)(objc_msgSend_points(v13, v22, v23) + 16 * v17);
          *(float32x4_t *)&__src[v16] = v24;
          float32x4_t v25 = vabdq_f32(*(float32x4_t *)((char *)&dest + v16), v24);
          v21 &= fmaxf(fmaxf(v25.f32[0], v25.f32[2]), v25.f32[1]) <= 0.000001;
          v17 += v20;
          v16 += 16;
        }

        if (!v12) {
          goto LABEL_19;
        }
        uint64_t v28 = *(void *)(v12 + 16);
        if (v28 != objc_msgSend_count(v13, v26, v27)) {
          goto LABEL_19;
        }
        objc_msgSend_cameraPose(v13, v29, v30);
        float32x4_t dest = v31;
        long long v103 = v32;
        long long v104 = v33;
        long long v105 = v34;
        float32x4_t v35 = *(float32x4_t *)(v12 + 48);
        float32x4_t v36 = *(float32x4_t *)(v12 + 64);
        float32x4_t v37 = *(float32x4_t *)(v12 + 80);
        v101[0] = *(float32x4_t *)(v12 + 32);
        v101[1] = v35;
        v101[2] = v36;
        v101[3] = v37;
        if (vmaxvq_f32(vabdq_f32(v31, v101[0])) > 0.001) {
          goto LABEL_19;
        }
        uint64_t v38 = 1;
        while (v38 != 4)
        {
          uint64_t v39 = v38;
          float v40 = vmaxvq_f32(vabdq_f32(*(&dest + v38), v101[v38]));
          ++v38;
          if (v40 > 0.001)
          {
            if ((unint64_t)(v39 - 1) < 3) {
              goto LABEL_19;
            }
            break;
          }
        }
        if ((v21 & 1) == 0)
        {
LABEL_19:
          uint64_t v41 = objc_alloc_init(RSKeyframeMetaExtend);
          uint64_t v44 = objc_msgSend_count(v13, v42, v43);
          if (v41) {
            v41->super._std::string::size_type size = v44;
          }
          float32x2_t v47 = objc_msgSend_identifier(v13, v45, v46);
          sub_25B4E5180((uint64_t)v41, v47);

          objc_msgSend_cameraPose(v13, v48, v49);
          if (v41)
          {
            *(_OWORD *)v41->_anon_20 = v52;
            *(_OWORD *)&v41->_anon_20[16] = v53;
            *(_OWORD *)&v41->_anon_20[32] = v54;
            *(_OWORD *)&v41->_anon_20[48] = v55;
          }
          objc_msgSend_timestamp(v13, v50, v51);
          if (v41)
          {
            v41->super._timestamp = v56;
            memcpy(__dst, __src, sizeof(__dst));
            objc_copyStruct(&v41[1], __dst, 480, 1, 0);
          }
          else
          {
            memcpy(__dst, __src, sizeof(__dst));
          }
          float32x2_t v59 = *(void **)(a1 + 40);
          float32x2_t v60 = objc_msgSend_identifier(v13, v57, v58);
          objc_msgSend_setObject_forKeyedSubscript_(v59, v61, (uint64_t)v41, v60);

          objc_msgSend_addObject_(v93, v62, (uint64_t)v13);
        }

        ++v7;
      }
      while (v7 != v6);
      uint64_t v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v133, v140, 16);
      uint64_t v6 = v63;
    }
    while (v63);
  }

  id v64 = objc_alloc_init(MEMORY[0x263F08790]);
  objc_msgSend_setDateFormat_(v64, v65, @"MM_dd_yyyy_HH_mm_ss_SSS");
  id v66 = NSString;
  uint64_t v67 = *(void *)(a1 + 48);
  id v70 = objc_msgSend_date(MEMORY[0x263EFF910], v68, v69);
  unint64_t v72 = objc_msgSend_stringFromDate_(v64, v71, (uint64_t)v70);
  long long v74 = objc_msgSend_stringWithFormat_(v66, v73, @"%@/%@_fp_input.plist", v67, v72);

  long long v77 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v75, v76);
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  id v78 = v93;
  uint64_t v82 = objc_msgSend_countByEnumeratingWithState_objects_count_(v78, v79, (uint64_t)&v96, v139, 16);
  if (v82)
  {
    uint64_t v83 = *(void *)v97;
    do
    {
      for (uint64_t i = 0; i != v82; ++i)
      {
        if (*(void *)v97 != v83) {
          objc_enumerationMutation(v78);
        }
        long long v85 = *(void **)(*((void *)&v96 + 1) + 8 * i);
        long long v86 = objc_msgSend_identifier(v85, v80, v81);
        objc_msgSend_setObject_forKeyedSubscript_(v77, v87, (uint64_t)v85, v86);
      }
      uint64_t v82 = objc_msgSend_countByEnumeratingWithState_objects_count_(v78, v80, (uint64_t)&v96, v139, 16);
    }
    while (v82);
  }

  BOOL v137 = @"keyframes";
  long long v88 = RSKeyframeSequenceToDictionary(v77);
  int v138 = v88;
  float32x4_t v90 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v89, (uint64_t)&v138, &v137, 1);

  sub_25B41D9AC(*(void *)(a1 + 56), *(void **)(a1 + 48));
  objc_msgSend_writeToFile_atomically_(v90, v91, (uint64_t)v74, 0);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_25B41E524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_25B41E620(uint64_t a1)
{
  v93[1] = *(CVPixelBufferRef *)MEMORY[0x263EF8340];
  id v89 = objc_alloc_init(MEMORY[0x263F08790]);
  objc_msgSend_setDateFormat_(v89, v2, @"MM_dd_yyyy_HH_mm_ss_SSS");
  uint64_t v3 = NSString;
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v7 = objc_msgSend_date(MEMORY[0x263EFF910], v5, v6);
  long long v9 = objc_msgSend_stringFromDate_(v89, v8, (uint64_t)v7);
  uint64_t v11 = objc_msgSend_stringWithFormat_(v3, v10, @"%@/%@_Image.plist", v4, v9);

  long long v88 = (void *)v11;
  uint64_t v12 = sub_25B41ED7C((uint64_t)RSInternalInfoDumper, *(void **)(a1 + 104));
  char v14 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v13, *(void *)(a1 + 128));
  objc_msgSend_setObject_forKeyedSubscript_(v12, v15, (uint64_t)v14, @"keyframe_index");

  uint64_t v16 = NSNumber;
  objc_msgSend_timestamp(*(void **)(a1 + 104), v17, v18);
  float32x2_t v22 = objc_msgSend_numberWithDouble_(v16, v20, v21, v19 - *(double *)(a1 + 136));
  objc_msgSend_setObject_forKeyedSubscript_(v12, v23, (uint64_t)v22, @"video_timestamp");

  float32x4_t v25 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v24, a1 + 32, 64);
  objc_msgSend_setObject_forKeyedSubscript_(v12, v26, (uint64_t)v25, @"cameraPose");

  float32x2_t v29 = (__CVBuffer *)objc_msgSend_depthBuffer(*(void **)(a1 + 104), v27, v28);
  size_t Width = CVPixelBufferGetWidth(v29);
  size_t Height = CVPixelBufferGetHeight(v29);
  if (Height * Width) {
    BOOL v34 = v29 == 0;
  }
  else {
    BOOL v34 = 1;
  }
  int v35 = !v34;
  if (*(unsigned char *)(a1 + 144))
  {
    float32x4_t v36 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v31, v32);
    uint64_t v39 = v36;
    if (v35)
    {
      float v40 = (__CVBuffer *)objc_msgSend_colorBuffer(*(void **)(a1 + 104), v37, v38);
      uint64_t v41 = NSNumber;
      size_t v42 = CVPixelBufferGetWidth(v40);
      uint64_t v44 = objc_msgSend_numberWithUnsignedLong_(v41, v43, v42);
      objc_msgSend_setObject_forKeyedSubscript_(v39, v45, (uint64_t)v44, @"width");

      uint64_t v46 = NSNumber;
      size_t v47 = CVPixelBufferGetHeight(v40);
      uint64_t v49 = objc_msgSend_numberWithUnsignedLong_(v46, v48, v47);
      objc_msgSend_setObject_forKeyedSubscript_(v39, v50, (uint64_t)v49, @"height");

      if (!*(void *)(a1 + 112)
        || (pixelTransferSessionOut.data = 0,
            pixelBufferOut.data = 0,
            VTPixelTransferSessionCreate(0, (VTPixelTransferSessionRef *)&pixelTransferSessionOut))
        || (uint64_t v92 = *MEMORY[0x263F04130],
            v93[0] = (CVPixelBufferRef)MEMORY[0x263EFFA78],
            CFDictionaryRef v52 = (const __CFDictionary *)objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v51, (uint64_t)v93, &v92, 1), CVPixelBufferCreate(0, Width, Height, 0x20u, v52, (CVPixelBufferRef *)&pixelBufferOut))|| !pixelBufferOut.data)
      {
        long long v53 = 0;
      }
      else
      {
        VTPixelTransferSessionTransferImage((VTPixelTransferSessionRef)pixelTransferSessionOut.data, v40, (CVPixelBufferRef)pixelBufferOut.data);
        VTPixelTransferSessionInvalidate((VTPixelTransferSessionRef)pixelTransferSessionOut.data);
        CFRelease(pixelTransferSessionOut.data);
        long long v53 = sub_25B41F09C((__CVBuffer *)pixelBufferOut.data, v86, v87);
        CVPixelBufferRelease((CVPixelBufferRef)pixelBufferOut.data);
      }
      objc_msgSend_setObject_forKeyedSubscript_(v39, v51, (uint64_t)v53, @"data");

      objc_msgSend_setObject_forKeyedSubscript_(v39, v54, @"PNG", @"type");
    }
    else
    {
      objc_msgSend_setObject_forKeyedSubscript_(v36, v37, (uint64_t)&unk_2708FE2B0, @"width");
      objc_msgSend_setObject_forKeyedSubscript_(v39, v56, (uint64_t)&unk_2708FE2B0, @"height");
      id v57 = objc_alloc_init(MEMORY[0x263EFF8F8]);
      objc_msgSend_setObject_forKeyedSubscript_(v39, v58, (uint64_t)v57, @"data");

      objc_msgSend_setObject_forKeyedSubscript_(v39, v59, @"PNG", @"type");
    }
    objc_msgSend_setObject_forKeyedSubscript_(v12, v55, (uint64_t)v39, @"image");
  }
  if (*(unsigned char *)(a1 + 145))
  {
    float32x2_t v60 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v31, v32);
    uint64_t v63 = v60;
    if (!v35)
    {
      objc_msgSend_setObject_forKeyedSubscript_(v60, v61, (uint64_t)&unk_2708FE2B0, @"width");
      objc_msgSend_setObject_forKeyedSubscript_(v63, v78, (uint64_t)&unk_2708FE2B0, @"height");
      id v79 = objc_alloc_init(MEMORY[0x263EFF8F8]);
      objc_msgSend_setObject_forKeyedSubscript_(v63, v80, (uint64_t)v79, @"data");

      objc_msgSend_setObject_forKeyedSubscript_(v63, v81, @"PNG", @"type");
LABEL_25:
      objc_msgSend_setObject_forKeyedSubscript_(v12, v82, (uint64_t)v63, @"depth");

      goto LABEL_26;
    }
    id v64 = (__CVBuffer *)objc_msgSend_depthBuffer(*(void **)(a1 + 104), v61, v62);
    id v66 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v65, Width);
    objc_msgSend_setObject_forKeyedSubscript_(v63, v67, (uint64_t)v66, @"width");

    uint64_t v69 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v68, Height);
    objc_msgSend_setObject_forKeyedSubscript_(v63, v70, (uint64_t)v69, @"height");

    if (*(void *)(a1 + 112))
    {
      CVPixelBufferLockBaseAddress(v64, 1uLL);
      vImagePixelCount v72 = CVPixelBufferGetWidth(v64);
      vImagePixelCount v73 = CVPixelBufferGetHeight(v64);
      pixelTransferSessionOut.width = CVPixelBufferGetWidth(v64);
      pixelTransferSessionOut.height = CVPixelBufferGetHeight(v64);
      pixelTransferSessionOut.rowBytes = CVPixelBufferGetBytesPerRow(v64);
      BaseAddress = CVPixelBufferGetBaseAddress(v64);
      pixelBufferOut.height = v73;
      pixelBufferOut.width = v72;
      pixelBufferOut.rowBytes = 32 * v72;
      pixelTransferSessionOut.data = BaseAddress;
      pixelBufferOut.data = malloc_type_malloc(32 * v72 * v73, 0x1000040E0EAB150uLL);
      vImageConvert_FTo16U(&pixelTransferSessionOut, &pixelBufferOut, 0.0, 0.001, 0);
      CVPixelBufferUnlockBaseAddress(v64, 1uLL);
      v93[0] = 0;
      if (!CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], v72, v73, 0x62313667u, pixelBufferOut.data, pixelBufferOut.rowBytes, 0, 0, 0, v93))
      {
        long long v77 = sub_25B41F09C(v93[0], v75, v76);
        free(pixelBufferOut.data);
        CVPixelBufferRelease(v93[0]);
        objc_msgSend_setObject_forKeyedSubscript_(v63, v83, (uint64_t)v77, @"data");
        goto LABEL_24;
      }
      free(pixelBufferOut.data);
    }
    long long v77 = 0;
    objc_msgSend_setObject_forKeyedSubscript_(v63, v71, 0, @"data");
LABEL_24:

    objc_msgSend_setObject_forKeyedSubscript_(v63, v84, @"PNG", @"type");
    goto LABEL_25;
  }
LABEL_26:
  sub_25B41D9AC(*(void *)(a1 + 112), *(void **)(a1 + 96));
  objc_msgSend_writeToFile_atomically_(v12, v85, (uint64_t)v88, 0);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 120));
}

void sub_25B41EC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, id a13)
{
  _Unwind_Resume(a1);
}

id sub_25B41ED7C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v5 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v3, v4);
  uint64_t v6 = NSNumber;
  objc_msgSend_timestamp(v2, v7, v8);
  uint64_t v11 = objc_msgSend_numberWithDouble_(v6, v9, v10);
  objc_msgSend_setObject_forKeyedSubscript_(v5, v12, (uint64_t)v11, @"timestamp");

  id v13 = NSNumber;
  uint64_t v16 = objc_msgSend_vioTrackingState(v2, v14, v15);
  uint64_t v18 = objc_msgSend_numberWithInteger_(v13, v17, v16);
  objc_msgSend_setObject_forKeyedSubscript_(v5, v19, (uint64_t)v18, @"vioTrackingState");

  float32x2_t v22 = objc_msgSend_camera(v2, v20, v21);
  objc_msgSend_transform(v22, v23, v24);
  long long v79 = v25;
  long long v80 = v26;
  long long v81 = v27;
  long long v82 = v28;

  uint64_t v30 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v29, (uint64_t)&v79, 64);
  objc_msgSend_setObject_forKeyedSubscript_(v5, v31, (uint64_t)v30, @"cameraTransform");

  BOOL v34 = objc_msgSend_camera(v2, v32, v33, 0, 0, 0, 0, 0, 0, v79, v80, v81, v82);
  objc_msgSend_intrinsics(v34, v35, v36);
  DWORD2(v76) = v37;
  DWORD2(v77) = v38;
  *(void *)&long long v76 = v39;
  *(void *)&long long v77 = v40;
  DWORD2(v78) = v41;
  *(void *)&long long v78 = v42;

  uint64_t v44 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v43, (uint64_t)&v76, 48);
  objc_msgSend_setObject_forKeyedSubscript_(v5, v45, (uint64_t)v44, @"intrinsics", v76, v77, v78);

  uint64_t v46 = NSNumber;
  uint64_t v49 = objc_msgSend_camera(v2, v47, v48);
  uint64_t v52 = objc_msgSend_trackingState(v49, v50, v51);
  long long v54 = objc_msgSend_numberWithInteger_(v46, v53, v52);
  objc_msgSend_setObject_forKeyedSubscript_(v5, v55, (uint64_t)v54, @"cameraTrackingState");

  uint64_t v58 = objc_msgSend_rawFeaturePoints(v2, v56, v57);
  uint64_t v61 = objc_msgSend_count(v58, v59, v60);

  uint64_t v63 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v62, v61);
  objc_msgSend_setObject_forKeyedSubscript_(v5, v64, (uint64_t)v63, @"rawFeaturePointsCount");

  uint64_t v65 = (void *)MEMORY[0x263EFF8F8];
  id v68 = objc_msgSend_rawFeaturePoints(v2, v66, v67);
  uint64_t v71 = objc_msgSend_points(v68, v69, v70);
  vImagePixelCount v73 = objc_msgSend_dataWithBytes_length_(v65, v72, v71, 16 * v61);

  objc_msgSend_setObject_forKeyedSubscript_(v5, v74, (uint64_t)v73, @"rawFeaturePoints");

  return v5;
}

void sub_25B41F020(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

__CFData *sub_25B41F09C(__CVBuffer *a1, const char *a2, uint64_t a3)
{
  objc_msgSend_data(MEMORY[0x263EFF990], a2, a3);
  uint64_t v4 = (__CFData *)objc_claimAutoreleasedReturnValue();
  uint64_t v5 = CGImageDestinationCreateWithData(v4, @"public.png", 1uLL, 0);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(a1);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType == 1647392359)
  {
    DeviceGray = CGColorSpaceCreateDeviceGray();
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
    uint64_t v12 = CGBitmapContextCreate(BaseAddress, Width, Height, 0x10uLL, BytesPerRow, DeviceGray, 0x1000u);
    CGColorSpaceRelease(DeviceGray);
  }
  else if (PixelFormatType == 32)
  {
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    size_t v11 = CVPixelBufferGetBytesPerRow(a1);
    uint64_t v12 = CGBitmapContextCreate(BaseAddress, Width, Height, 8uLL, v11, DeviceRGB, 6u);
    CGColorSpaceRelease(DeviceRGB);
  }
  else
  {
    uint64_t v12 = 0;
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  if (v12) {
    Image = CGBitmapContextCreateImage(v12);
  }
  else {
    Image = 0;
  }
  CGContextRelease(v12);
  if (v5 && Image)
  {
    CGImageDestinationAddImage(v5, Image, 0);
    CGImageDestinationFinalize(v5);
  }
  else if (!v5)
  {
    goto LABEL_14;
  }
  CFRelease(v5);
LABEL_14:
  CGImageRelease(Image);

  return v4;
}

void sub_25B41F24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B41F278(uint64_t a1, void *a2)
{
  v13[1] = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v6 = v3;
  if (a1 && *(unsigned char *)(a1 + 177))
  {
    uint64_t v7 = *(void **)(a1 + 40);
    uint64_t v12 = @"final";
    uint64_t v8 = objc_msgSend_dictionaryRepresentation(v3, v4, v5);
    v13[0] = v8;
    uint64_t v10 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v9, (uint64_t)v13, &v12, 1);
    objc_msgSend_addObject_(v7, v11, (uint64_t)v10);
  }
}

void sub_25B41F344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B41F374(uint64_t a1)
{
  id v28 = objc_alloc_init(MEMORY[0x263F08790]);
  objc_msgSend_setDateFormat_(v28, v2, @"MM_dd_yyyy_HH_mm_ss_SSS");
  id v3 = NSString;
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v7 = objc_msgSend_date(MEMORY[0x263EFF910], v5, v6);
  long long v9 = objc_msgSend_stringFromDate_(v28, v8, (uint64_t)v7);
  size_t v11 = objc_msgSend_stringWithFormat_(v3, v10, @"%@/%@_ARFrame.plist", v4, v9);

  uint64_t v12 = sub_25B41ED7C((uint64_t)RSInternalInfoDumper, *(void **)(a1 + 104));
  char v14 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v13, *(void *)(a1 + 128));
  objc_msgSend_setObject_forKeyedSubscript_(v12, v15, (uint64_t)v14, @"keyframesCount");

  uint64_t v16 = NSNumber;
  objc_msgSend_timestamp(*(void **)(a1 + 104), v17, v18);
  float32x2_t v22 = objc_msgSend_numberWithDouble_(v16, v20, v21, v19 - *(double *)(a1 + 136));
  objc_msgSend_setObject_forKeyedSubscript_(v12, v23, (uint64_t)v22, @"video_timestamp");

  long long v25 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v24, a1 + 32, 64);
  objc_msgSend_setObject_forKeyedSubscript_(v12, v26, (uint64_t)v25, @"cameraPose");

  sub_25B41D9AC(*(void *)(a1 + 112), *(void **)(a1 + 96));
  objc_msgSend_writeToFile_atomically_(v12, v27, (uint64_t)v11, 0);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 120));
}

void sub_25B41F518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_25B41F574(uint64_t a1, const char *a2)
{
  id v2 = *(void **)(a1 + 32);
  objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 40), a2, @"fp_debug_log.plist");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_writeToFile_atomically_(v2, v3, (uint64_t)v4, 1);
}

void sub_25B41F5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B41FEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a33) {
    sub_25B3F5FE8((uint64_t)&a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B42080C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_25B4820B0((void **)&a27);
  sub_25B4820B0(&a72);
  sub_25B50158C((uint64_t)&a51);
  a27 = &a66;
  sub_25B41032C((void ***)&a27);
  a27 = &a69;
  sub_25B41032C((void ***)&a27);

  _Unwind_Resume(a1);
}

void sub_25B420E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

id sub_25B420FE4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    a1 = sub_25B4210FC((uint64_t)a1, v5, v6);
  }

  return a1;
}

void sub_25B421058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_25B42106C(void *a1, const char *a2)
{
  v5[1] = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v2 = a1[22];
    id v4 = @"floorPlanDebug";
    v5[0] = v2;
    a1 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, a2, (uint64_t)v5, &v4, 1);
  }

  return a1;
}

RSFloorPlan *sub_25B4210FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v1398 = *MEMORY[0x263EF8340];
  id v1232 = a2;
  id v1233 = a3;
  int v1314 = 14205;
  uint64_t v1315 = 0;
  kdebug_trace();
  unint64_t v1237 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v6, v7);
  if (*(unsigned char *)(a1 + 184)) {
    objc_msgSend_addObject_(*(void **)(a1 + 176), v8, (uint64_t)v1237);
  }
  std::chrono::steady_clock::now();
  v1224.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  kdebug_trace();
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v1240 = a1;
  id v1241 = v1232;
  if (v9)
  {
    objc_msgSend_removeAllObjects(*(void **)(v9 + 40), v10, v11);
    objc_msgSend_removeAllObjects(*(void **)(v9 + 48), v12, v13);
    id v1256 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v14, v15);
    long long v1364 = 0u;
    long long v1365 = 0u;
    long long v1362 = 0u;
    long long v1363 = 0u;
    uint64_t v18 = objc_msgSend_allValues(v1241, v16, v17);
    uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v1362, v1390, 16);
    if (v22)
    {
      uint64_t v23 = *(void *)v1363;
      do
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          if (*(void *)v1363 != v23) {
            objc_enumerationMutation(v18);
          }
          long long v25 = *(void **)(*((void *)&v1362 + 1) + 8 * i);
          long long v26 = objc_msgSend_identifier(v25, v20, v21);
          if (v26)
          {
            BOOL v27 = objc_msgSend_count(v25, v20, v21) == 0;

            if (!v27)
            {
              id v28 = objc_msgSend_identifier(v25, v20, v21);
              objc_msgSend_setObject_forKey_(v1256, v29, (uint64_t)v25, v28);
            }
          }
        }
        uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v20, (uint64_t)&v1362, v1390, 16);
      }
      while (v22);
    }

    id v1286 = v1256;
    uint64_t v32 = objc_msgSend_array(MEMORY[0x263EFF980], v30, v31);
    memset(v1366, 0, sizeof(v1366));
    int v35 = objc_msgSend_allValues(v1286, v33, v34);
    uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v35, v36, (uint64_t)v1366, buf, 16);
    if (v39)
    {
      uint64_t v40 = **(void **)&v1366[1];
      do
      {
        for (uint64_t j = 0; j != v39; ++j)
        {
          if (**(void **)&v1366[1] != v40) {
            objc_enumerationMutation(v35);
          }
          uint64_t v42 = *(void **)(*((void *)&v1366[0] + 1) + 8 * j);
          if (objc_msgSend_count(v42, v37, v38) >= 10)
          {
            uint64_t v43 = objc_alloc_init(RSKeyframeMeta);
            uint64_t v46 = objc_msgSend_identifier(v42, v44, v45);
            sub_25B4E5180((uint64_t)v43, v46);

            objc_msgSend_cameraPose(v42, v47, v48);
            if (v43)
            {
              *(_OWORD *)&v43[1].super.Class isa = v51;
              *(_OWORD *)&v43[1]._std::string::size_type size = v52;
              *(_OWORD *)&v43[2].super.Class isa = v53;
              *(_OWORD *)&v43[2]._std::string::size_type size = v54;
            }
            uint64_t v55 = objc_msgSend_count(v42, v49, v50);
            if (v43) {
              v43->_std::string::size_type size = v55;
            }
            objc_msgSend_timestamp(v42, v56, v57);
            if (v43) {
              v43->_timestamp = v59;
            }
            objc_msgSend_addObject_(v32, v58, (uint64_t)v43);
          }
        }
        uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v35, v37, (uint64_t)v1366, buf, 16);
      }
      while (v39);
    }

    id v60 = v32;
    uint64_t v62 = objc_msgSend_sortedArrayUsingComparator_(v60, v61, (uint64_t)&unk_2708F2028);

    long long v1340 = 0uLL;
    v1341[0] = 0;
    long long v1358 = 0u;
    long long v1359 = 0u;
    long long v1360 = 0u;
    long long v1361 = 0u;
    obuint64_t j = v62;
    uint64_t v64 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v63, (uint64_t)&v1358, buf, 16);
    if (v64)
    {
      uint64_t v1277 = *(void *)v1359;
      do
      {
        uint64_t v1297 = v64;
        for (uint64_t k = 0; k != v1297; ++k)
        {
          if (*(void *)v1359 != v1277) {
            objc_enumerationMutation(obj);
          }
          uint64_t v66 = *(void *)(*((void *)&v1358 + 1) + 8 * k);
          if (v66) {
            uint64_t v67 = *(void **)(v66 + 8);
          }
          else {
            uint64_t v67 = 0;
          }
          id v68 = *(void **)(v9 + 32);
          id v69 = v67;
          uint64_t v71 = objc_msgSend_objectForKeyedSubscript_(v68, v70, (uint64_t)v69);
          LODWORD(v68) = v71 == 0;

          if (v68)
          {
            long long v74 = *(void **)(v9 + 56);
            long long v75 = NSNumber;
            uint64_t v76 = objc_msgSend_count(v74, v72, v73);
            long long v78 = objc_msgSend_numberWithInt_(v75, v77, v76);
            if (v66) {
              long long v79 = *(void **)(v66 + 8);
            }
            else {
              long long v79 = 0;
            }
            id v80 = v79;
            objc_msgSend_setObject_forKey_(v74, v81, (uint64_t)v78, v80);

            if (v66) {
              long long v82 = *(void **)(v66 + 8);
            }
            else {
              long long v82 = 0;
            }
            uint64_t v83 = *(void **)(v9 + 40);
            id v84 = v82;
            long long v86 = objc_msgSend_objectForKeyedSubscript_(v1286, v85, (uint64_t)v84);
            objc_msgSend_addObject_(v83, v87, (uint64_t)v86);

            if (v66)
            {
              id v88 = *(id *)(v66 + 8);
              id v89 = *(void **)(v66 + 8);
            }
            else
            {
              id v88 = 0;
              id v89 = 0;
            }
            float32x4_t v90 = *(void **)(v9 + 56);
            id v91 = v89;
            uint64_t v93 = objc_msgSend_objectForKeyedSubscript_(v90, v92, (uint64_t)v91);
            int v96 = objc_msgSend_intValue(v93, v94, v95);
            int v97 = v96;
            uint64_t v98 = *((void *)&v1340 + 1);
            if (*((void *)&v1340 + 1) >= v1341[0])
            {
              uint64_t v100 = (uint64_t)(*((void *)&v1340 + 1) - v1340) >> 4;
              unint64_t v101 = v100 + 1;
              if ((unint64_t)(v100 + 1) >> 60) {
                sub_25B3FBC4C();
              }
              uint64_t v102 = v1341[0] - v1340;
              if ((uint64_t)(v1341[0] - v1340) >> 3 > v101) {
                unint64_t v101 = v102 >> 3;
              }
              if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v103 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v103 = v101;
              }
              *(void *)&v1366[2] = v1341;
              long long v104 = (char *)sub_25B3FFAEC(v103);
              long long v106 = &v104[16 * v100];
              *(void *)long long v106 = v88;
              *((_DWORD *)v106 + 2) = v97;
              long long v107 = v1340;
              long long v108 = v106;
              if (*((void *)&v1340 + 1) != (void)v1340)
              {
                uint64_t v109 = *((void *)&v1340 + 1);
                do
                {
                  uint64_t v110 = *(void *)(v109 - 16);
                  v109 -= 16;
                  *(void *)uint64_t v109 = 0;
                  *((void *)v108 - 2) = v110;
                  v108 -= 16;
                  *((_DWORD *)v108 + 2) = *(_DWORD *)(v109 + 8);
                }
                while (v109 != (void)v107);
              }
              long long v99 = v106 + 16;
              *(_OWORD *)((char *)v1366 + 8) = v107;
              *(void *)&long long v1340 = v108;
              *((void *)&v1340 + 1) = v106 + 16;
              uint64_t v111 = v1341[0];
              v1341[0] = &v104[16 * v105];
              *((void *)&v1366[1] + 1) = v111;
              *(void *)&v1366[0] = v107;
              sub_25B5A4DB0((uint64_t)v1366);
            }
            else
            {
              **((void **)&v1340 + 1) = v88;
              *(_DWORD *)(v98 + 8) = v96;
              long long v99 = (char *)(v98 + 16);
            }
            *((void *)&v1340 + 1) = v99;
          }
          if (v66) {
            long long v112 = *(void **)(v66 + 8);
          }
          else {
            long long v112 = 0;
          }
          long long v113 = *(void **)(v9 + 32);
          id v114 = v112;
          long long v116 = objc_msgSend_objectForKeyedSubscript_(v113, v115, (uint64_t)v114);
          if (!v116) {
            goto LABEL_71;
          }
          if (v66)
          {
            long long v117 = *(void **)(v66 + 8);
            uint64_t v118 = *(void *)(v66 + 16);
          }
          else
          {
            uint64_t v118 = 0;
            long long v117 = 0;
          }
          long long v119 = *(void **)(v9 + 32);
          id v120 = v117;
          long long v122 = objc_msgSend_objectForKeyedSubscript_(v119, v121, (uint64_t)v120);
          long long v123 = v122;
          if (v122) {
            uint64_t v124 = v122[2];
          }
          else {
            uint64_t v124 = 0;
          }
          if (v118 != v124)
          {

            goto LABEL_71;
          }
          if (v66)
          {
            long long v125 = *(_OWORD *)(v66 + 48);
            long long v126 = *(_OWORD *)(v66 + 64);
            long long v127 = *(_OWORD *)(v66 + 80);
            *(_OWORD *)int32x2_t v1268 = *(_OWORD *)(v66 + 32);
            v1366[0] = *(_OWORD *)v1268;
            v1366[1] = v125;
            v1366[2] = v126;
            v1366[3] = v127;
            long long v128 = *(void **)(v66 + 8);
          }
          else
          {
            long long v128 = 0;
            *(_OWORD *)int32x2_t v1268 = 0u;
            memset(v1366, 0, sizeof(v1366));
          }
          long long v129 = *(void **)(v9 + 32);
          id v130 = v128;
          objc_msgSend_objectForKeyedSubscript_(v129, v131, (uint64_t)v130);
          uint64_t v132 = (float32x4_t *)objc_claimAutoreleasedReturnValue();
          if (v132)
          {
            float32x4_t v133 = v132[2];
            float32x4_t v134 = v132[3];
            float32x4_t v135 = v132[4];
            float32x4_t v136 = v132[5];
          }
          else
          {
            float32x4_t v135 = 0uLL;
            float32x4_t v134 = 0uLL;
            float32x4_t v133 = 0uLL;
            float32x4_t v136 = 0uLL;
          }
          float32x4_t v1394 = v133;
          float32x4_t v1395 = v134;
          float32x4_t v1396 = v135;
          float32x4_t v1397 = v136;
          if (vmaxvq_f32(vabdq_f32(*(float32x4_t *)v1268, v133)) > 0.001)
          {

LABEL_71:
LABEL_72:
            if (v66) {
              BOOL v137 = *(void **)(v66 + 8);
            }
            else {
              BOOL v137 = 0;
            }
            int v138 = *(void **)(v9 + 48);
            id v139 = v137;
            uint64_t v141 = objc_msgSend_objectForKeyedSubscript_(v1286, v140, (uint64_t)v139);
            objc_msgSend_addObject_(v138, v142, (uint64_t)v141);

            continue;
          }
          uint64_t v144 = 1;
          while (v144 != 4)
          {
            float v145 = vmaxvq_f32(vabdq_f32((float32x4_t)v1366[v144], *(&v1394 + v144)));
            ++v144;
            if (v145 > 0.001)
            {
              unint64_t v146 = v144 - 2;
              goto LABEL_82;
            }
          }
          unint64_t v146 = 3;
LABEL_82:
          BOOL v147 = v146 > 2;

          if (!v147) {
            goto LABEL_72;
          }
        }
        uint64_t v64 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v143, (uint64_t)&v1358, buf, 16);
      }
      while (v64);
    }

    unint64_t v148 = 126 - 2 * __clz((uint64_t)(*((void *)&v1340 + 1) - v1340) >> 4);
    if (*((void *)&v1340 + 1) == (void)v1340) {
      uint64_t v149 = 0;
    }
    else {
      uint64_t v149 = v148;
    }
    sub_25B5A4E04(v1340, *((char **)&v1340 + 1), v149, 1);
    if (*((void *)&v1340 + 1) == (void)v1340)
    {
      if (*(void *)(v9 + 24) < 4uLL || !objc_msgSend_count(*(void **)(v9 + 48), v150, v151))
      {
        uint64_t v346 = *(void *)(v9 + 16);
        if (v346) {
          *(unsigned char *)(v346 + 104) = 0;
        }
        ++*(void *)(v9 + 24);
        goto LABEL_259;
      }
      uint64_t v299 = objc_msgSend_lastObject(*(void **)(v9 + 48), v297, v298);
      long long v300 = *(void **)(v9 + 40);
      uint64_t v303 = objc_msgSend_identifier(v299, v301, v302);
      unint64_t v305 = objc_msgSend_objectForKeyedSubscript_(v1286, v304, (uint64_t)v303);
      objc_msgSend_addObject_(v300, v306, (uint64_t)v305);

      uint64_t v309 = objc_msgSend_identifier(v299, v307, v308);
      unint64_t v310 = *(void **)(v9 + 56);
      long long v313 = objc_msgSend_identifier(v299, v311, v312);
      long long v315 = objc_msgSend_objectForKeyedSubscript_(v310, v314, (uint64_t)v313);
      int v318 = objc_msgSend_intValue(v315, v316, v317);
      int v319 = v318;
      uint64_t v320 = *((void *)&v1340 + 1);
      if (*((void *)&v1340 + 1) >= v1341[0])
      {
        uint64_t v508 = (uint64_t)(*((void *)&v1340 + 1) - v1340) >> 4;
        unint64_t v509 = v508 + 1;
        if ((unint64_t)(v508 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        uint64_t v510 = v1341[0] - v1340;
        if ((uint64_t)(v1341[0] - v1340) >> 3 > v509) {
          unint64_t v509 = v510 >> 3;
        }
        if ((unint64_t)v510 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v511 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v511 = v509;
        }
        *(void *)&v1366[2] = v1341;
        float v512 = (char *)sub_25B3FFAEC(v511);
        unint64_t v514 = &v512[16 * v508];
        *(void *)unint64_t v514 = v309;
        *((_DWORD *)v514 + 2) = v319;
        long long v515 = v1340;
        uint64_t v516 = v514;
        if (*((void *)&v1340 + 1) != (void)v1340)
        {
          uint64_t v517 = *((void *)&v1340 + 1);
          do
          {
            uint64_t v518 = *(void *)(v517 - 16);
            v517 -= 16;
            *(void *)uint64_t v517 = 0;
            *((void *)v516 - 2) = v518;
            v516 -= 16;
            *((_DWORD *)v516 + 2) = *(_DWORD *)(v517 + 8);
          }
          while (v517 != (void)v515);
        }
        long long v321 = v514 + 16;
        *(_OWORD *)((char *)v1366 + 8) = v515;
        *(void *)&long long v1340 = v516;
        *((void *)&v1340 + 1) = v514 + 16;
        uint64_t v519 = v1341[0];
        v1341[0] = &v512[16 * v513];
        *((void *)&v1366[1] + 1) = v519;
        *(void *)&v1366[0] = v515;
        sub_25B5A4DB0((uint64_t)v1366);
      }
      else
      {
        **((void **)&v1340 + 1) = v309;
        *(_DWORD *)(v320 + 8) = v318;
        long long v321 = (char *)(v320 + 16);
      }
      *((void *)&v1340 + 1) = v321;
    }
    uint64_t v152 = *(void *)(v9 + 16);
    if (v152)
    {
      *(unsigned char *)(v152 + 104) = 1;
      uint64_t v152 = *(void *)(v9 + 16);
      if (v152) {
        uint64_t v152 = *(void *)(v152 + 112);
      }
    }
    id v153 = (id)v152;
    objc_msgSend_removeAllObjects(v153, v154, v155);

    uint64_t v156 = *(void *)(v9 + 16);
    if (v156) {
      *(void *)(v156 + 88) = *(void *)(v156 + 80);
    }
    long long v1356 = 0u;
    long long v1357 = 0u;
    long long v1354 = 0u;
    long long v1355 = 0u;
    id v157 = obj;
    uint64_t v159 = objc_msgSend_countByEnumeratingWithState_objects_count_(v157, v158, (uint64_t)&v1354, v1366, 16);
    if (v159)
    {
      uint64_t v160 = *(void *)v1355;
      do
      {
        uint64_t v161 = 0;
        do
        {
          if (*(void *)v1355 != v160) {
            objc_enumerationMutation(v157);
          }
          uint64_t v162 = *(void *)(*((void *)&v1354 + 1) + 8 * v161);
          if (v162) {
            long long v163 = *(void **)(v162 + 8);
          }
          else {
            long long v163 = 0;
          }
          int v164 = *(void **)(v9 + 32);
          id v165 = v163;
          objc_msgSend_setObject_forKey_(v164, v166, v162, v165);

          ++v161;
        }
        while (v159 != v161);
        uint64_t v168 = objc_msgSend_countByEnumeratingWithState_objects_count_(v157, v167, (uint64_t)&v1354, v1366, 16);
        uint64_t v159 = v168;
      }
      while (v168);
    }

    v1278 = objc_msgSend_array(MEMORY[0x263EFF980], v169, v170);
    long long v1352 = 0u;
    long long v1353 = 0u;
    long long v1350 = 0u;
    long long v1351 = 0u;
    id v1269 = *(id *)(v9 + 48);
    uint64_t v172 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1269, v171, (uint64_t)&v1350, &v1394, 16);
    if (v172)
    {
      uint64_t v173 = *(void *)v1351;
      do
      {
        for (uint64_t m = 0; m != v172; ++m)
        {
          if (*(void *)v1351 != v173) {
            objc_enumerationMutation(v1269);
          }
          uint64_t v175 = *(void *)(*((void *)&v1350 + 1) + 8 * m);
          long long v176 = [RSKeyframeExtended alloc];
          long long v178 = objc_msgSend_initWithKeyframe_(v176, v177, v175);
          objc_msgSend_processWithVoxelize_asPythonApproach_resample_outlierRemove_(v178, v179, 1, 1, 1, 1);
          objc_msgSend_addObject_(v1278, v180, (uint64_t)v178);
        }
        uint64_t v172 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1269, v181, (uint64_t)&v1350, &v1394, 16);
      }
      while (v172);
    }

    id v182 = v1278;
    unint64_t v1270 = objc_msgSend_sortedArrayUsingComparator_(v182, v183, (uint64_t)&unk_2708F2048);
    unint64_t v1242 = v182;

    objc_msgSend_accumulateWithKeyframesInWorld_voxelize_(*(void **)(v9 + 8), v184, (uint64_t)v1270, 1);
    long long v1348 = 0u;
    long long v1349 = 0u;
    long long v1346 = 0u;
    long long v1347 = 0u;
    uint64_t v187 = objc_msgSend_allValues(*(void **)(v9 + 32), v185, v186);
    uint64_t v189 = objc_msgSend_countByEnumeratingWithState_objects_count_(v187, v188, (uint64_t)&v1346, v1393, 16);
    if (v189)
    {
      uint64_t v190 = *(void *)v1347;
      do
      {
        uint64_t v191 = 0;
        do
        {
          if (*(void *)v1347 != v190) {
            objc_enumerationMutation(v187);
          }
          uint64_t v192 = *(void *)(*((void *)&v1346 + 1) + 8 * v191);
          if (v192) {
            float32x4_t v193 = *(void **)(v192 + 8);
          }
          else {
            float32x4_t v193 = 0;
          }
          id v194 = v193;
          uint64_t v197 = objc_msgSend_UUIDString(v194, v195, v196);

          objc_msgSend_mappingIntervalOfKeyframe_(*(void **)(v9 + 8), v198, (uint64_t)v197);
          uint64_t v1298 = v199;
          int32x4_t v200 = objc_alloc_init(RSSubPointsLUT);
          int32x4_t v201 = v200;
          if (v200)
          {
            v200->_std::string::size_type size = HIDWORD(v1298);
            v200->_begiuint64_t n = v1298;
            v200->_end = HIDWORD(v1298) + (unint64_t)v1298;
          }
          if (v192)
          {
            unint64_t v202 = *(void *)(v192 + 16);
            if (!v200) {
              goto LABEL_134;
            }
LABEL_133:
            v200->_rawSize = v202;
            goto LABEL_134;
          }
          unint64_t v202 = 0;
          if (v200) {
            goto LABEL_133;
          }
LABEL_134:
          if (v192)
          {
            long long v204 = *(_OWORD *)(v192 + 32);
            long long v203 = *(_OWORD *)(v192 + 48);
            long long v205 = *(_OWORD *)(v192 + 64);
            long long v206 = *(_OWORD *)(v192 + 80);
            if (!v200) {
              goto LABEL_137;
            }
LABEL_136:
            *(_OWORD *)&v200[1].super.Class isa = v204;
            *(_OWORD *)&v200[1]._begiuint64_t n = v203;
            *(_OWORD *)&v200[1]._std::string::size_type size = v205;
            *(_OWORD *)v200[1]._anon_30 = v206;
            goto LABEL_137;
          }
          long long v205 = 0uLL;
          long long v203 = 0uLL;
          long long v204 = 0uLL;
          long long v206 = 0uLL;
          if (v200) {
            goto LABEL_136;
          }
LABEL_137:
          int v207 = *(void **)(v9 + 16);
          if (v207) {
            int v207 = (void *)v207[15];
          }
          v208 = v207;
          objc_msgSend_setObject_forKey_(v208, v209, (uint64_t)v201, v197);

          ++v191;
        }
        while (v189 != v191);
        uint64_t v211 = objc_msgSend_countByEnumeratingWithState_objects_count_(v187, v210, (uint64_t)&v1346, v1393, 16);
        uint64_t v189 = v211;
      }
      while (v211);
    }

    uint64_t v214 = objc_msgSend_rawPoints(*(void **)(v9 + 8), v212, v213);
    uint64_t updated = objc_msgSend_rawUpdateCursor(*(void **)(v9 + 8), v215, v216);
    uint64_t v220 = objc_msgSend_rawCount(*(void **)(v9 + 8), v218, v219);
    *(__n64 *)v224.int i8 = sub_25B5035AC(v214, updated, v220, v221, v222, v223);
    int64x2_t v1299 = v224;
    float32x4_t v225 = (int64x2_t *)operator new(0x20uLL);
    int64x2_t v226 = v1299;
    v226.i32[2] = 0;
    int64x2_t *v225 = v226;
    v225[1] = vzip2q_s64(v1299, (int64x2_t)0);
    uint64_t v227 = *(void *)(v9 + 16);
    if (v227) {
      sub_25B4D3D18((char *)(v227 + 56), v225->i8, (uint64_t)v225[2].i64, 2uLL);
    }
    id v1246 = v225;
    for (uint64_t n = (id *)v1340; n != *((id **)&v1340 + 1); n += 2)
    {
      id v229 = *n;
      float32x4_t v230 = *(void **)(v9 + 16);
      if (v230) {
        float32x4_t v230 = (void *)v230[14];
      }
      int v231 = v230;
      unint64_t v234 = objc_msgSend_UUIDString(v229, v232, v233);
      objc_msgSend_addObject_(v231, v235, (uint64_t)v234);

      uint64_t v236 = *(void **)(v9 + 16);
      objc_msgSend_objectForKeyedSubscript_(*(void **)(v9 + 32), v237, (uint64_t)v229);
      float32x4_t v238 = (__n128 *)objc_claimAutoreleasedReturnValue();
      float32x4_t v239 = v238;
      if (v238)
      {
        __n128 v240 = v238[2];
        __n128 v241 = v238[3];
        __n128 v242 = v238[4];
        __n128 v243 = v238[5];
      }
      else
      {
        __n128 v242 = 0uLL;
        __n128 v241 = 0uLL;
        __n128 v240 = 0uLL;
        __n128 v243 = 0uLL;
      }
      sub_25B4D3F3C(v236, v240, v241, v242, v243);
    }
    unint64_t v244 = 0;
    float32x4_t v245 = 0;
    id v246 = 0;
    unint64_t v247 = 0;
    long long v1336 = 0uLL;
    *(void *)&long long v1337 = 0;
    while (1)
    {
      long long v248 = *(void **)(v9 + 16);
      if (v248) {
        long long v248 = (void *)v248[14];
      }
      int v249 = v248;
      BOOL v252 = objc_msgSend_count(v249, v250, v251) > v247;

      if (!v252) {
        break;
      }
      unint64_t v253 = *(void **)(v9 + 16);
      if (v253) {
        unint64_t v253 = (void *)v253[14];
      }
      int32x2_t v254 = *(void **)(v9 + 8);
      int32x2_t v255 = v253;
      uint64_t v257 = objc_msgSend_objectAtIndexedSubscript_(v255, v256, v247);
      objc_msgSend_mappingIntervalOfKeyframe_(v254, v258, (uint64_t)v257);
      uint64_t v1300 = v259;

      uint64_t v264 = (long long *)(objc_msgSend_points(*(void **)(v9 + 8), v260, v261) + 16 * v1300);
      uint64_t v265 = objc_msgSend_points(*(void **)(v9 + 8), v262, v263) + 16 * v1300 + 16 * HIDWORD(v1300);
      if (v265 - (uint64_t)v264 >= 1)
      {
        uint64_t v266 = (v265 - (uint64_t)v264) >> 4;
        if (v266 <= (uint64_t)(v244 - (void)v246) >> 4)
        {
          if (v266 <= 0)
          {
            float32x4_t v274 = &v246[-v266];
            float32x4_t v275 = v246;
            while (v274 < v246)
            {
              long long v276 = *v274++;
              *v275++ = v276;
            }
            *((void *)&v1336 + 1) = v275;
            if (v246 != &v246[v266]) {
              memmove(&v246[-((-16 * v266) >> 4)], v246, -16 * v266);
            }
            if (&v264[v266] != v264) {
              memmove(v246, v264, 16 * v266);
            }
          }
          else
          {
            uint64_t v273 = v265 - (void)v264;
            if ((long long *)v265 != v264) {
              memmove(v246, v264, v265 - (void)v264);
            }
            *((void *)&v1336 + 1) = (char *)v246 + v273;
          }
        }
        else
        {
          uint64_t v267 = ((char *)v246 - v245) >> 4;
          unint64_t v268 = v267 + v266;
          if ((unint64_t)(v267 + v266) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v244 - (void)v245) >> 3 > v268) {
            unint64_t v268 = (uint64_t)(v244 - (void)v245) >> 3;
          }
          if (v244 - (unint64_t)v245 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v269 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v269 = v268;
          }
          if (v269)
          {
            int16x8_t v270 = (char *)sub_25B3FFAEC(v269);
            uint64_t v272 = v271;
          }
          else
          {
            int16x8_t v270 = 0;
            uint64_t v272 = 0;
          }
          float32x4_t v245 = &v270[16 * v267];
          float32x4_t v277 = &v245[16 * v266];
          uint64_t v278 = 16 * v266;
          float32x4_t v279 = v245;
          do
          {
            long long v280 = *v264++;
            *(_OWORD *)float32x4_t v279 = v280;
            v279 += 16;
            v278 -= 16;
          }
          while (v278);
          float32x4_t v281 = (long long *)v1336;
          if ((long long *)v1336 == v246)
          {
            unint64_t v284 = v246;
          }
          else
          {
            uint64_t v282 = v246;
            do
            {
              long long v283 = *--v282;
              *((_OWORD *)v245 - 1) = v283;
              v245 -= 16;
            }
            while (v282 != v281);
            unint64_t v284 = (long long *)*((void *)&v1336 + 1);
          }
          int64_t v285 = (char *)v284 - (char *)v246;
          if (v284 != v246) {
            memmove(v277, v246, (char *)v284 - (char *)v246);
          }
          long long v286 = (void *)v1336;
          *(void *)&long long v1336 = v245;
          *((void *)&v1336 + 1) = &v277[v285];
          *(void *)&long long v1337 = &v270[16 * v272];
          if (v286) {
            operator delete(v286);
          }
        }
      }
      uint64_t v287 = (char *)*((void *)&v1336 + 1);
      unint64_t v244 = v1337;
      if (*((void *)&v1336 + 1) >= (unint64_t)v1337)
      {
        long long v1301 = *(_OWORD *)(*(void *)(*(void *)(v9 + 16) + 80) + (v247 << 6) + 48);
        uint64_t v288 = (char *)v1336;
        uint64_t v289 = (uint64_t)(*((void *)&v1336 + 1) - v1336) >> 4;
        unint64_t v290 = v289 + 1;
        if ((unint64_t)(v289 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v1337 - v1336) >> 3 > v290) {
          unint64_t v290 = (uint64_t)(v1337 - v1336) >> 3;
        }
        if ((void)v1337 - (void)v1336 >= 0x7FFFFFFFFFFFFFF0uLL) {
          unint64_t v291 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v291 = v290;
        }
        if (v291) {
          unint64_t v291 = (unint64_t)sub_25B3FFAEC(v291);
        }
        else {
          uint64_t v292 = 0;
        }
        float32x4_t v245 = (char *)(v291 + 16 * v289);
        *(_OWORD *)float32x4_t v245 = v1301;
        id v246 = (long long *)(v245 + 16);
        if (v287 != v288)
        {
          do
          {
            long long v293 = *((_OWORD *)v287 - 1);
            v287 -= 16;
            *((_OWORD *)v245 - 1) = v293;
            v245 -= 16;
          }
          while (v287 != v288);
          uint64_t v287 = (char *)v1336;
        }
        unint64_t v244 = v291 + 16 * v292;
        *(void *)&long long v1336 = v245;
        *(void *)&long long v1337 = v244;
        if (v287) {
          operator delete(v287);
        }
      }
      else
      {
        **((_OWORD **)&v1336 + 1) = *(_OWORD *)(*(void *)(*(void *)(v9 + 16) + 80) + (v247 << 6) + 48);
        id v246 = (long long *)(v287 + 16);
      }
      *((void *)&v1336 + 1) = v246;
      ++v247;
    }
    sub_25B49C544((float32x4_t **)&v1342, (float32x4_t **)&v1336);
    float32x4_t v294 = (char *)*((void *)&v1342 + 1);
    uint64_t v295 = *((void *)&v1342 + 1) - v1342;
    float32x4_t v296 = v1246;
    if (*((void *)&v1342 + 1) - (void)v1342 >= 0x30uLL)
    {
      if (*((void *)&v1342 + 1) == (void)v1342)
      {
        long long v339 = 0;
        BOOL v322 = 0;
      }
      else
      {
        BOOL v322 = 0;
        uint64_t v323 = 0;
        unint64_t v324 = 0;
        unint64_t v325 = 0;
        unint64_t v326 = v295 >> 4;
        __asm { FMOV            V0.2D, #0.5 }
        float64x2_t v1302 = _Q0;
        float64x2_t v1251 = (float64x2_t)vdupq_n_s64(0xBFE3333340000000);
        float32x4_t v294 = (char *)v1342;
        do
        {
          uint64_t v331 = (int)v326;
          if (v325) {
            uint64_t v331 = 0;
          }
          uint64_t v332 = v325 + v331;
          uint64_t v333 = 16 * v325++;
          float64x2_t v334 = vcvtq_f64_f32(*(float32x2_t *)&v294[v333]);
          float64x2_t v335 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)&v294[16 * v332 - 16]), v334);
          float64x2_t v336 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)&v294[16 * (v325 % v326)]), v334);
          float64x2_t v337 = vmulq_f64(vaddq_f64(vmulq_n_f64(v335, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v335, v335)))), vmulq_n_f64(v336, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v336, v336))))), v1302);
          float64x2_t v338 = vmulq_n_f64(v337, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v337, v337))));
          *(float32x2_t *)&v338.f64[0] = vcvt_f32_f64(vmlaq_f64(v334, v1251, v338));
          LODWORD(v338.f64[1]) = 0;
          if ((unint64_t)v323 >= v324)
          {
            float64x2_t v1249 = v338;
            uint64_t v340 = (v323 - v322) >> 4;
            unint64_t v341 = v340 + 1;
            if ((unint64_t)(v340 + 1) >> 60) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v324 - (void)v322) >> 3 > v341) {
              unint64_t v341 = (uint64_t)(v324 - (void)v322) >> 3;
            }
            if (v324 - (unint64_t)v322 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v342 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v342 = v341;
            }
            if (v342) {
              unint64_t v342 = (unint64_t)sub_25B3FFAEC(v342);
            }
            else {
              uint64_t v343 = 0;
            }
            long long v344 = (float64x2_t *)(v342 + 16 * v340);
            *long long v344 = v1249;
            long long v339 = (char *)&v344[1];
            while (v323 != v322)
            {
              float64x2_t v345 = *((float64x2_t *)v323 - 1);
              v323 -= 16;
              v344[-1] = v345;
              --v344;
            }
            unint64_t v324 = v342 + 16 * v343;
            if (v322) {
              operator delete(v322);
            }
            BOOL v322 = (char *)v344;
          }
          else
          {
            *(float64x2_t *)uint64_t v323 = v338;
            long long v339 = v323 + 16;
          }
          float32x4_t v294 = (char *)v1342;
          unint64_t v326 = (uint64_t)(*((void *)&v1342 + 1) - v1342) >> 4;
          uint64_t v323 = v339;
        }
        while (v326 > v325);
      }
      *(void *)&long long v1332 = v322;
      *((void *)&v1332 + 1) = v339;
      float32x4_t v296 = v1246;
    }
    else
    {
      long long v1332 = 0uLL;
      *(void *)&long long v1333 = 0;
      sub_25B40EE6C(&v1332, (const void *)v1342, *((uint64_t *)&v1342 + 1), (unint64_t)v295 >> 4);
      float32x4_t v294 = (char *)v1342;
    }
    if (v294)
    {
      *((void *)&v1342 + 1) = v294;
      operator delete(v294);
    }
    uint64_t v347 = *(void *)(v9 + 16);
    unint64_t v348 = (void *)v1332;
    uint64_t v349 = *((void *)&v1332 + 1) - v1332;
    if (v347) {
      sub_25B4D3D18((char *)(v347 + 32), (char *)v1332, *((uint64_t *)&v1332 + 1), v349 >> 4);
    }
    if ((unint64_t)v349 > 0x2F)
    {
      *(void *)(v9 + 24) = 0;
      if (!v348) {
        goto LABEL_256;
      }
    }
    else
    {
      uint64_t v350 = *(void *)(v9 + 16);
      if (v350) {
        *(unsigned char *)(v350 + 104) = 0;
      }
      if (!v348) {
        goto LABEL_256;
      }
    }
    operator delete(v348);
LABEL_256:
    if ((void)v1336) {
      operator delete((void *)v1336);
    }
    operator delete(v296);

LABEL_259:
    *(void *)&long long v1342 = &v1340;
    sub_25B5A5674((void ***)&v1342);
  }
  uint64_t v351 = v1240;
  v1234 = sub_25B400D94(*(id **)(v1240 + 64));
  uint64_t v352 = *(void *)(v1240 + 64);
  if (!v352)
  {
    long long v353 = 0;
    goto LABEL_1229;
  }
  long long v353 = *(id *)(v352 + 16);
  uint64_t v354 = *(void *)(v1240 + 64);
  if (!v354)
  {
LABEL_1229:
    id v1231 = 0;
    goto LABEL_263;
  }
  id v1231 = *(id *)(v354 + 40);
LABEL_263:
  kdebug_trace();
  if (v353 && v353[104])
  {
    unint64_t v357 = 0x26A501000uLL;
    uint64_t v358 = *(void *)(v1240 + 72);
    id v359 = v1234;
    long long v362 = v353;
    id v1250 = v362;
    if (!v358 || !objc_msgSend_rawCount(v359, v360, v361)) {
      goto LABEL_525;
    }
    uint64_t v363 = *(void *)(v358 + 8);
    if (v363) {
      int v364 = *(_DWORD *)(v363 + 28);
    }
    else {
      int v364 = 0;
    }
    int v366 = *(_DWORD *)(v358 + 56);
    float v365 = *(float *)(v358 + 60);
    id v367 = v362[14];
    BOOL v370 = objc_msgSend_count(v367, v368, v369) == 0;

    if (v370) {
      float v371 = 0.0;
    }
    else {
      float v371 = *((float *)v1250[10] + 14);
    }
    id v442 = v359;
    if (objc_msgSend_rawCount(v442, v443, v444))
    {
      id v1243 = v359;
      int v447 = objc_msgSend_rawCount(v442, v445, v446);
      LODWORD(v1390[0].__locale_) = 0;
      sub_25B400C5C(buf, (v447 - 1) / 3 + 1, v1390);
      uint64_t v450 = 0;
      unint64_t v451 = 0;
      uint64_t v452 = 8;
      while (objc_msgSend_rawCount(v442, v448, v449) > v451)
      {
        uint64_t v455 = objc_msgSend_rawPoints(v442, v453, v454);
        *(_DWORD *)(*(void *)buf + v450) = *(_DWORD *)(v455 + v452);
        v451 += 3;
        v452 += 48;
        v450 += 4;
      }
      sub_25B400CE0((uint64_t *)buf);
      float v457 = v456;
      sub_25B400CE0((uint64_t *)buf);
      float v459 = v458;
      long long v462 = (float32x4_t *)objc_msgSend_rawPoints(v442, v460, v461);
      uint64_t v465 = objc_msgSend_rawCount(v442, v463, v464);
      float v1279 = v459 + 0.0;
      if (v465)
      {
        uint64_t v469 = 16 * v465;
        float32x4_t v470 = 0uLL;
        do
        {
          float32x4_t v471 = *v462++;
          v472.i32[1] = v471.i32[1];
          float32x4_t v470 = vaddq_f32(v470, v471);
          v469 -= 16;
        }
        while (v469);
        *(float *)v472.i32 = (float)(unint64_t)v465;
        float32x4_t v473 = vdivq_f32(v470, (float32x4_t)vdupq_lane_s32(v472, 0));
      }
      else
      {
        float32x4_t v473 = 0uLL;
      }
      float32x4_t v1257 = v473;
      long long v474 = 0;
      uint64_t v475 = 0;
      unint64_t v476 = 0;
      unint64_t v477 = 0;
      float v1271 = v457 + -0.1;
      v1390[0].__locale_ = 0;
      v1390[1].__locale_ = 0;
      *(void *)&long long v1391 = 0;
      *(void *)&long long v468 = 0;
      long long v1288 = v468;
      *(void *)&long long v468 = 0;
      long long v1303 = v468;
      while (objc_msgSend_count(v442, v466, v467) > v477)
      {
        v3.i32[0] = *(_DWORD *)(objc_msgSend_semanticLabels(v442, v478, v479) + 4 * v477);
        unsigned __int8 v484 = vmovl_u8(v3).u8[0];
        _ZF = *(float *)(objc_msgSend_points(v442, v480, v481) + 16 * v477 + 8) <= v371 && v484 == 1;
        if (_ZF && (unsigned __int16)*(void *)(objc_msgSend_semanticVotes(v442, v482, v483) + 8 * v477))
        {
          int v486 = *(_DWORD *)(objc_msgSend_points(v442, v482, v483) + 16 * v477 + 8);
          if ((unint64_t)v474 >= v476)
          {
            uint64_t v488 = (v474 - (char *)v475) >> 2;
            unint64_t v489 = v488 + 1;
            if ((unint64_t)(v488 + 1) >> 62)
            {
              *(void *)&long long v1391 = v476;
              v1390[0].__locale_ = v475;
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v476 - (void)v475) >> 1 > v489) {
              unint64_t v489 = (uint64_t)(v476 - (void)v475) >> 1;
            }
            if (v476 - (unint64_t)v475 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v490 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v490 = v489;
            }
            if (v490) {
              unint64_t v490 = (unint64_t)sub_25B3FBC64(v490);
            }
            else {
              double v482 = 0;
            }
            int v491 = (_DWORD *)(v490 + 4 * v488);
            *int v491 = v486;
            int v487 = (std::locale::__imp *)(v491 + 1);
            while (v474 != (char *)v475)
            {
              int v492 = *((_DWORD *)v474 - 1);
              v474 -= 4;
              *--int v491 = v492;
            }
            unint64_t v476 = v490 + 4 * (void)v482;
            v1390[1].__locale_ = v487;
            if (v475) {
              operator delete(v475);
            }
            uint64_t v475 = (std::locale::__imp *)v491;
          }
          else
          {
            *(_DWORD *)long long v474 = v486;
            int v487 = (std::locale::__imp *)(v474 + 4);
          }
          v1390[1].__locale_ = v487;
          long long v493 = v1288;
          *(float *)&long long v493 = *(float *)&v1288 + 1.0;
          long long v1288 = v493;
          long long v474 = (char *)v487;
        }
        if (*(float *)(objc_msgSend_points(v442, v482, v483) + 16 * v477 + 8) >= (float)(v1279 + -0.1) && v484 == 3)
        {
          uint64_t v495 = objc_msgSend_semanticVotes(v442, v466, v467);
          long long v496 = v1303;
          if ((unsigned __int16)*(void *)(v495 + 8 * v477)) {
            *(float *)&long long v496 = *(float *)&v1303 + 1.0;
          }
          long long v1303 = v496;
        }
        v477 += 3;
      }
      *(void *)&long long v1391 = v476;
      v1390[0].__locale_ = v475;
      if ((unint64_t)(v474 - (char *)v475) > 0x18C)
      {
        sub_25B400CE0((uint64_t *)v1390);
        float v457 = v497;
      }
      if (v475)
      {
        v1390[1].__locale_ = v475;
        operator delete(v475);
      }
      unint64_t v1287 = __PAIR64__(v1303, v1288);
      unint64_t v1252 = __PAIR64__(LODWORD(v1279), LODWORD(v1271));
      if (buf[0])
      {
        buf[1] = buf[0];
        operator delete(*(void **)buf);
      }
      id v359 = v1243;
      unint64_t v357 = 0x26A501000uLL;
    }
    else
    {
      unint64_t v1252 = 0;
      float32x4_t v1257 = 0u;
      float v457 = 0.0;
      float v459 = 0.0;
      float v1279 = 0.0;
      float v1271 = 0.0;
      unint64_t v1287 = 0;
    }

    uint64_t v500 = *(void *)(v358 + 8);
    if (v500) {
      *(void *)(v500 + 48) = v1287;
    }
    float v501 = v365 * (float)v366;
    __asm { FMOV            V0.2D, #1.0 }
    float64x2_t v1247 = _Q0;
    long long v362 = v1250;
    if (!*(unsigned char *)(v358 + 36) || *(int *)(v358 + 64) < 1) {
      goto LABEL_487;
    }
    uint64_t v503 = *(void *)(v358 + 8);
    if (v503)
    {
      float64x2_t v504 = *(float64x2_t *)(v503 + 96);
      v504.f64[1] = *(float64_t *)(v503 + 80);
      int32x2_t v1238 = (int32x2_t)vcvt_f32_f64(vmulq_f64(vdivq_f64(v1247, v504), (float64x2_t)xmmword_25B5F12A0));
      long long v505 = *(_OWORD *)(v503 + 64);
    }
    else
    {
      int32x2_t v1238 = vdup_n_s32(0x7F800000u);
      long long v505 = 0uLL;
    }
    *(_OWORD *)unint64_t v1236 = v505;
    if (*(int *)(v358 + 56) < 1)
    {
      BOOL v507 = 1;
    }
    else
    {
      if (v503) {
        float v506 = *(float *)(v503 + 16);
      }
      else {
        float v506 = 0.0;
      }
      BOOL v507 = vabds_f32(v506, v1271) <= *(float *)v1238.i32;
    }
    uint64_t v520 = objc_msgSend_rawPoints(v442, v498, v499);
    uint64_t v523 = objc_msgSend_rawCount(v442, v521, v522);
    *(__n64 *)v527.int i8 = sub_25B5035AC(v520, 0, v523, v524, v525, v526);
    int32x4_t v1304 = v527;
    uint64_t v528 = operator new(0x20uLL);
    v529 = v528;
    float v530 = v501 + v1271;
    if (v1279 < (float)(v501 + v1271)) {
      float v530 = v1279;
    }
    int32x4_t v531 = v1304;
    int32x4_t v532 = vdupq_laneq_s32(v1304, 2);
    v532.i32[1] = v1304.i32[3];
    *(float *)&v532.i32[2] = v530;
    *(float *)&v531.i32[2] = v1271;
    *uint64_t v528 = v531;
    v528[1] = v532;
    memset(buf, 0, 24);
    sub_25B40EE6C(buf, v528, (uint64_t)(v528 + 2), 2uLL);
    uint64_t v534 = *(void *)(v358 + 8);
    if (v534)
    {
      float64x2_t v1280 = *(float64x2_t *)(v534 + 128);
      *((void *)&v535 + 1) = *(void *)(v534 + 136);
      float64x2_t v1289 = *(float64x2_t *)(v534 + 112);
      *(void *)&long long v535 = *(void *)(v534 + 96);
      *(_OWORD *)float32x4_t v1272 = v535;
      int8x16_t v1305 = *(int8x16_t *)(v534 + 80);
      unint64_t v536 = vextq_s8(v1305, v1305, 8uLL).u64[0];
    }
    else
    {
      v1305.i64[0] = 0;
      float64x2_t v1280 = 0u;
      float64x2_t v1289 = 0u;
      unint64_t v536 = 0;
      *(void *)&long long v533 = 0;
      *(_OWORD *)float32x4_t v1272 = v533;
    }
    v538 = (float32x2_t *)buf[0];
    int8x8_t v537 = buf[1];
    if (*(void *)buf == *(void *)&buf[1])
    {
      v539 = 0;
    }
    else
    {
      BOOL v1227 = v507;
      v1229 = v529;
      id v1244 = v359;
      v539 = 0;
      id v540 = 0;
      unint64_t v541 = 0;
      *(void *)&v542.f64[0] = v1305.i64[0];
      *(void *)&v542.f64[1] = v536;
      float64x2_t v1306 = v542;
      do
      {
        v542.f64[0] = v538[1].f32[0];
        float64x2_t v542 = vmulq_f64(*(float64x2_t *)v1272, vaddq_f64(v1280, v542));
        int64x2_t v543 = vcvtq_s64_f64(vrndaq_f64(vmulq_f64(v1306, vaddq_f64(v1289, vcvtq_f64_f32(*v538)))));
        *(int32x2_t *)v543.int i8 = vmovn_s64(v543);
        v543.i32[2] = llround(v542.f64[0]);
        if ((unint64_t)v540 >= v541)
        {
          *(int64x2_t *)id obja = v543;
          uint64_t v545 = ((char *)v540 - (char *)v539) >> 4;
          unint64_t v546 = v545 + 1;
          if ((unint64_t)(v545 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v541 - (void)v539) >> 3 > v546) {
            unint64_t v546 = (uint64_t)(v541 - (void)v539) >> 3;
          }
          if (v541 - (unint64_t)v539 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v547 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v547 = v546;
          }
          if (v547) {
            unint64_t v547 = (unint64_t)sub_25B3FFAEC(v547);
          }
          else {
            uint64_t v548 = 0;
          }
          unint64_t v549 = (int32x2_t *)(v547 + 16 * v545);
          *(_OWORD *)v549->int i8 = *(_OWORD *)obja;
          unint64_t v544 = v549 + 2;
          while (v540 != v539)
          {
            long long v550 = *(_OWORD *)v540[-2].i8;
            v540 -= 2;
            *(_OWORD *)v549[-2].int i8 = v550;
            v549 -= 2;
          }
          unint64_t v541 = v547 + 16 * v548;
          if (v539) {
            operator delete(v539);
          }
          v539 = v549;
        }
        else
        {
          *(int64x2_t *)v540->int i8 = v543;
          unint64_t v544 = v540 + 2;
        }
        v538 += 2;
        id v540 = v544;
      }
      while (v538 != (float32x2_t *)v537);
      v538 = (float32x2_t *)buf[0];
      id v359 = v1244;
      unint64_t v357 = 0x26A501000;
      v529 = v1229;
      BOOL v507 = v1227;
    }
    long long v362 = v1250;
    if (v538)
    {
      buf[1] = (int8x8_t)v538;
      operator delete(v538);
    }
    BOOL v551 = 0;
    __int32 v552 = v539->i32[1];
    if ((v539->i32[0] & 0x80000000) == 0 && (v552 & 0x80000000) == 0)
    {
      BOOL v551 = (int)HIDWORD(*(void *)&v539[2]) < v364;
      if ((int)*(_OWORD *)v539[2].i8 >= v364) {
        BOOL v551 = 0;
      }
    }
    if (v552 - v539->i32[0] >= v364 || vsubq_s32(vdupq_lane_s32(v539[2], 1), *(int32x4_t *)v539[2].i8).i32[0] >= v364)
    {
      uint64_t v554 = *(void *)(v358 + 8);
      if (v554) {
        float v555 = *(float *)(v554 + 12);
      }
      else {
        float v555 = 0.0;
      }
      BOOL v553 = fabsf(v555 + -0.06) < 0.001;
    }
    else
    {
      BOOL v553 = 0;
    }
    int v556 = *(_DWORD *)(v358 + 56);
    if (v556)
    {
      if (v556 < 1)
      {
LABEL_486:
        operator delete(v539);
        operator delete(v529);
LABEL_487:
        uint64_t v563 = *(void *)(v358 + 8);
        double v564 = 0.0;
        if (v563)
        {
          *(unsigned char *)(v563 + 8) = 1;
          uint64_t v565 = *(void *)(v358 + 8);
          if (v565) {
            LODWORD(v564) = *(_DWORD *)(v565 + 12);
          }
        }
        float v566 = *(float *)(v358 + 60);
        if (*(unsigned char *)(v358 + 45))
        {
          uint64_t v567 = (float32x4_t *)objc_msgSend_rawPoints(v442, v498, v499, v564);
          unint64_t v570 = objc_msgSend_rawCount(v442, v568, v569);
          if (v570 > 1)
          {
            uint64_t v571 = v567 + 1;
            float32x4_t v572 = *v567;
            uint64_t v573 = 16 * v570 - 16;
            uint64_t v574 = v567 + 1;
            do
            {
              float32x4_t v575 = vsubq_f32(v572, v1257);
              float32x4_t v576 = vmulq_f32(v575, v575);
              float32x4_t v577 = *v574++;
              int8x16_t v578 = (int8x16_t)v577;
              float32x4_t v579 = vsubq_f32(v577, v1257);
              float32x4_t v580 = vmulq_f32(v579, v579);
              unsigned __int8 v581 = vmovn_s32(vcgtq_f32(vaddq_f32(v580, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v580.f32, 1)), vaddq_f32(v576, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v576.f32, 1)))).u8[0];
              if (v581) {
                unsigned int v582 = -1;
              }
              else {
                unsigned int v582 = 0;
              }
              float32x4_t v572 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v582), v578, (int8x16_t)v572);
              if (v581) {
                uint64_t v567 = v571;
              }
              uint64_t v571 = v574;
              v573 -= 16;
            }
            while (v573);
          }
          float32x4_t v583 = vsubq_f32(*v567, v1257);
          float v584 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v583, v583)));
          while (1)
          {
            int v585 = *(_DWORD *)(v358 + 20);
            float v586 = (float)(v584 + v584) / (float)v364;
            if (v364 >= v585 || v586 <= 0.03) {
              break;
            }
            if (*(_DWORD *)(v358 + 68) + v364 >= v585) {
              int v364 = *(_DWORD *)(v358 + 20);
            }
            else {
              v364 += *(_DWORD *)(v358 + 68);
            }
            uint64_t v587 = *(void *)(v358 + 8);
            if (v587) {
              *(_DWORD *)(v587 + 28) = v364;
            }
          }
          float v588 = v586 * 100.0;
          if (v586 > 0.06) {
            float v588 = 6.0;
          }
          float v589 = 3.0;
          if (v586 >= 0.03) {
            float v589 = v588;
          }
          *(float *)&double v564 = ceilf(v589) / 100.0;
        }
        int v590 = *(_DWORD *)(v358 + 56);
        if (v590 >= 1)
        {
          float32x4_t v591 = v1257;
          v591.f32[2] = (float)(v501 * 0.5) + *(float *)&v1252;
          float32x4_t v1257 = v591;
        }
        v592 = *(float32x4_t **)(v358 + 8);
        if (v592)
        {
          *(void *)&v593.f64[1] = v1257.i64[1];
          v592[4] = v1257;
          uint64_t v594 = *(void *)(v358 + 8);
          if (v594)
          {
            *(_DWORD *)(v594 + 12) = LODWORD(v564);
            id v595 = *(float64x2_t **)(v358 + 8);
            if (v595)
            {
              double v596 = *(float *)&v564;
              v597.f64[0] = v596;
              v597.f64[1] = v596;
              v593.f64[0] = v566;
              float64x2_t v598 = vdivq_f64(v1247, v593);
              v595[5] = vdivq_f64(v1247, v597);
              v595[6] = v598;
              uint64_t v599 = *(float64x2_t **)(v358 + 8);
              if (v599)
              {
                v598.f64[0] = (double)v590;
                __asm { FMOV            V2.2D, #0.5 }
                float64x2_t v601 = vmulq_f64(vmulq_f64(v598, v593), _Q2);
                float64x2_t v602 = vmulq_f64(vmulq_n_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v364), 0), v596), _Q2);
                float64x2_t v603 = (float64x2_t)vextq_s8((int8x16_t)v602, (int8x16_t)v602, 8uLL);
                v602.f64[1] = v603.f64[0];
                v603.f64[0] = v1257.f32[2];
                v599[7] = vsubq_f64(v602, vcvtq_f64_f32(*(float32x2_t *)v1257.f32));
                v599[8] = vsubq_f64(v601, v603);
                uint64_t v604 = *(void *)(v358 + 8);
                if (v604)
                {
                  *(_DWORD *)(v604 + 16) = v1252;
                  uint64_t v605 = *(void *)(v358 + 8);
                  if (v605)
                  {
                    *(_DWORD *)(v605 + 20) = HIDWORD(v1252);
                    uint64_t v606 = *(void *)(v358 + 8);
                    if (v606)
                    {
                      *(float *)(v606 + 24) = v501;
                      uint64_t v607 = *(void *)(v358 + 8);
                      if (v607)
                      {
                        *(float *)(v607 + 36) = v457;
                        uint64_t v608 = *(void *)(v358 + 8);
                        if (v608) {
                          *(float *)(v608 + 40) = v459;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++*(_DWORD *)(v358 + 64);
LABEL_525:

        int32x4_t v1228 = sub_25B400D94(*(id **)(v1240 + *(int *)(v357 + 1172)));
        id v611 = objc_msgSend_standardUserDefaults(MEMORY[0x263EFFA40], v609, v610);
        int v613 = objc_msgSend_BOOLForKey_(v611, v612, @"fp_earlyout_accumulation");

        if (v613)
        {
          if (qword_26A5020E0 != -1) {
            dispatch_once(&qword_26A5020E0, &unk_2708F1278);
          }
          v1226 = (id)qword_26A5020D8;
          if (os_log_type_enabled(v1226, OS_LOG_TYPE_DEBUG))
          {
            buf[0].i32[0] = 138412290;
            *(int8x8_t *)((char *)buf + 4) = (int8x8_t)@"fp_earlyout_accumulation";
            _os_log_debug_impl(&dword_25B3F3000, v1226, OS_LOG_TYPE_DEBUG, "pnp measurement: %@", (uint8_t *)buf, 0xCu);
          }
          v1235 = 0;
          goto LABEL_1214;
        }
        kdebug_trace();
        uint64_t v614 = *(void *)(v1240 + 88);
        id v1307 = v359;
        id v1250 = v1250;
        int v617 = v1228;
        if (!v614 || !objc_msgSend_count(v1307, v615, v616))
        {
LABEL_743:

          v1226 = sub_25B400D94(*(id **)(v1240 + 88));
          uint64_t v771 = *(void *)(v1240 + 88);
          if (v771) {
            id v1221 = *(id *)(v771 + 88);
          }
          else {
            id v1221 = 0;
          }
          kdebug_trace();
          uint8x8_t v774 = objc_msgSend_standardUserDefaults(MEMORY[0x263EFFA40], v772, v773);
          int v776 = objc_msgSend_BOOLForKey_(v774, v775, @"fp_earlyout_projection2DZ");

          if (v776)
          {
            if (qword_26A5020E0 != -1) {
              dispatch_once(&qword_26A5020E0, &unk_2708F1278);
            }
            log = (id)qword_26A5020D8;
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
            {
              buf[0].i32[0] = 138412290;
              *(int8x8_t *)((char *)buf + 4) = (int8x8_t)@"fp_earlyout_projection2DZ";
              _os_log_debug_impl(&dword_25B3F3000, log, OS_LOG_TYPE_DEBUG, "pnp measurement: %@", (uint8_t *)buf, 0xCu);
            }
            v1235 = 0;
            goto LABEL_1213;
          }
          uint64_t v777 = *(void *)(v1240 + 56);
          uint64_t v778 = v1226;
          v779 = v617;
          if (v777)
          {
            LODWORD(v1366[0]) = 15083;
            *((void *)&v1366[0] + 1) = 0;
            kdebug_trace();
            memset(buf, 0, 24);
            v1390[0].__locale_ = 0;
            v1390[1].__locale_ = 0;
            *(void *)&long long v1391 = 0;
            sub_25B45F504();
            if (v779)
            {
              float v780 = *((double *)v779 + 10);
              int8x16_t v781 = *((int8x16_t *)v779 + 7);
              *(void *)&double v782 = vextq_s8(v781, v781, 8uLL).u64[0];
            }
            else
            {
              v781.i64[0] = 0;
              float v780 = 0.0;
              double v782 = 0.0;
            }
            *(float *)&double v783 = *(double *)v781.i64;
            float v784 = v782;
            *((float *)&v783 + 1) = v784;
            double v1292 = v783;
            uint64_t v785 = sub_25B502A54((uint64_t *)buf, 0, v780, v783);
            uint64_t v786 = sub_25B502A54((uint64_t *)v1390, (const char *)3, v780, v1292);
            v787 = objc_alloc_init(RSFloorPlan);
            sub_25B4E664C((uint64_t)v787, v785);
            v1235 = v787;
            sub_25B4E666C((uint64_t)v787, v786);
            if (v779) {
              float v788 = *((float *)v779 + 9);
            }
            else {
              float v788 = 0.0;
            }
            if (v787) {
              v787->floorsize_t Height = v788;
            }
            if (v779) {
              float v789 = *((float *)v779 + 10);
            }
            else {
              float v789 = 0.0;
            }
            if (v787) {
              v787->ceilingsize_t Height = v789;
            }
            sub_25B4E937C((unint64_t)v787);

            if (v1390[0].__locale_) {
              operator delete(v1390[0].__locale_);
            }
            if (buf[0]) {
              operator delete(*(void **)buf);
            }
            sub_25B400F2C((uint64_t)v1366);
          }
          else
          {
            v1235 = 0;
          }

          if (*(unsigned char *)(v1240 + 184))
          {
            v792 = objc_msgSend_dictionaryRepresentation(v1235, v790, v791);
            objc_msgSend_setObject_forKeyedSubscript_(v1237, v793, (uint64_t)v792, @"lcnn");
          }
          char v794 = objc_msgSend_standardUserDefaults(MEMORY[0x263EFFA40], v790, v791);
          int v796 = objc_msgSend_BOOLForKey_(v794, v795, @"fp_earlyout_wallOpeningDetect");

          if (v796)
          {
            if (qword_26A5020E0 != -1) {
              dispatch_once(&qword_26A5020E0, &unk_2708F1278);
            }
            log = (id)qword_26A5020D8;
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
            {
              buf[0].i32[0] = 138412290;
              *(int8x8_t *)((char *)buf + 4) = (int8x8_t)@"fp_earlyout_wallOpeningDetect";
              _os_log_debug_impl(&dword_25B3F3000, log, OS_LOG_TYPE_DEBUG, "pnp measurement: %@", (uint8_t *)buf, 0xCu);
            }
            goto LABEL_1213;
          }
          uint64_t v797 = *(void *)(v1240 + 32);
          uint64_t v798 = *(void *)(v1240 + 88);
          if (v798) {
            float v799 = (float)*(int *)(v798 + 24);
          }
          else {
            float v799 = 0.0;
          }
          log = v1235;
          id v1217 = v1307;
          id v1250 = v1250;
          id v1219 = v779;
          v1220 = v778;
          v1218 = v1221;
          if (v797)
          {
            LODWORD(v1350) = 13555;
            *((void *)&v1350 + 1) = 0;
            kdebug_trace();
            uint64_t v1222 = (id *)objc_msgSend_copy(log, v800, v801);
            id v802 = v1250[14];
            BOOL v805 = objc_msgSend_count(v802, v803, v804) == 0;

            if (!v805)
            {
              if (!*(unsigned char *)(v797 + 1953))
              {
                v808 = v1220;
                if (v1220)
                {
                  if (*(Class *)(v797 + 1824) != v1220[5].isa) {
                    goto LABEL_786;
                  }
                  Class isa = v1220[6].isa;
                }
                else
                {
                  Class isa = *(Class *)(v797 + 1824);
                  if (isa)
                  {
LABEL_1275:
                    uint64_t v810 = 0;
                    v1394.i64[0] = 0;
                    goto LABEL_787;
                  }
                }
                if (*(Class *)(v797 + 1832) == isa) {
                  goto LABEL_805;
                }
              }
              v808 = v1220;
              if (!v1220) {
                goto LABEL_1275;
              }
LABEL_786:
              uint64_t v810 = (uint64_t)v808[6].isa;
              *v1394.f32 = v808[5];
LABEL_787:
              v1393[0] = v810;
              sub_25B4578D0(v1366, &v1394, v1393);
              sub_25B43765C((uint64_t)buf, v1366);
              if (BYTE1(v1382))
              {
                uint64_t v811 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
                v812 = sub_25B406B20(v811, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
                sub_25B406B20(v812, (uint64_t)" ", 1);
                v813 = (void *)MEMORY[0x263F8C0F8];
                v814 = (void *)std::ostream::operator<<();
                sub_25B406B20(v814, (uint64_t)" ", 1);
                sub_25B406B20(v814, (uint64_t)"operator=", 9);
                std::ios_base::getloc((const std::ios_base *)((char *)v814 + *(void *)(*v814 - 24)));
                char v815 = std::locale::use_facet(v1390, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v815->__vftable[2].~facet_0)(v815, 10);
                std::locale::~locale(v1390);
                std::ostream::put();
                std::ostream::flush();
                sub_25B4074D0("err", "scalar assign should create a storage first");
                std::ios_base::getloc((const std::ios_base *)((char *)v813 + *(void *)(*v813 - 24)));
                int v816 = std::locale::use_facet(v1390, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v816->__vftable[2].~facet_0)(v816, 10);
                std::locale::~locale(v1390);
                std::ostream::put();
                std::ostream::flush();
              }
              long long v1391 = 0u;
              long long v1392 = 0u;
              *(_OWORD *)&v1390[0].__locale_ = 0u;
              uint64_t v817 = v1380;
              v818 = (_WORD *)*((void *)&v1382 + 1);
              if ((_BYTE)v1382)
              {
                if ((void)v1380)
                {
                  do
                  {
                    *v818++ = 0;
                    --v817;
                  }
                  while (v817);
                }
              }
              else if ((void)v1380)
              {
                uint64_t v819 = 0;
                int8x8_t v820 = buf[7];
                int8x8_t v821 = buf[8];
                do
                {
                  uint64_t v822 = 0;
                  v818[*(void *)&v820 * (uint64_t)v1390[0].__locale_ + *(void *)&v821 * (uint64_t)v1390[1].__locale_] = 0;
                  do
                  {
                    char v823 = (std::locale::__imp *)((char *)v1390[v822 + 1].__locale_ + 1);
                    v1390[v822 + 1].__locale_ = v823;
                    if (v823 != (std::locale::__imp *)buf[v822 + 2]) {
                      break;
                    }
                    v1390[v822-- + 1].__locale_ = 0;
                  }
                  while (v822 != -2);
                  ++v819;
                }
                while (v819 != v817);
              }
              long long v824 = *(_OWORD *)buf[5].i8;
              *(_OWORD *)(v797 + 1872) = *(_OWORD *)buf[7].i8;
              long long v825 = v1379;
              *(_OWORD *)(v797 + 1888) = v1378;
              *(_OWORD *)(v797 + 1904) = v825;
              *(_OWORD *)(v797 + 1920) = v1380;
              long long v826 = *(_OWORD *)buf[3].i8;
              *(_OWORD *)(v797 + 1824) = *(_OWORD *)buf[1].i8;
              *(_OWORD *)(v797 + 1840) = v826;
              *(_OWORD *)(v797 + 1856) = v824;
              long long v827 = v1381;
              if (*((void *)&v1381 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1381 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              *(void *)(v797 + 1936) = v827;
              v828 = *(std::__shared_weak_count **)(v797 + 1944);
              *(void *)(v797 + 1944) = *((void *)&v827 + 1);
              if (v828) {
                sub_25B404120(v828);
              }
              *(void *)(v797 + 1960) = *((void *)&v1382 + 1);
              *(_WORD *)(v797 + 1952) = v1382;
              buf[0] = (int8x8_t)&unk_2708F18E0;
              if (*((void *)&v1381 + 1)) {
                sub_25B404120(*((std::__shared_weak_count **)&v1381 + 1));
              }
LABEL_805:
              if (v1220 && v1220[8].isa == (Class)1) {
                int v829 = v1220[1].isa;
              }
              else {
                int v829 = 0;
              }
              CVPixelBufferLockBaseAddress(v829, 1uLL);
              char v830 = v1220;
              char v831 = sub_25B4FD95C(v830, 0x1AuLL);
              if (v1220)
              {
                uint64_t v832 = (uint64_t)v830[6].isa * (uint64_t)v830[5].isa;
                if (v832)
                {
                  char v833 = *(_WORD **)(v797 + 1960);
                  do
                  {
                    __int16 v834 = *(_WORD *)v831;
                    char v831 = (void *)((char *)v831 + 2);
                    _H0 = v834;
                    __asm { FCVT            S0, H0 }
                    _S0 = v799 * _S0;
                    __asm { FCVT            H0, S0 }
                    *v833++ = LOWORD(_S0);
                    --v832;
                  }
                  while (v832);
                }
                uint64_t v838 = (uint64_t)v830[6].isa;
                uint64_t v839 = (uint64_t)v830[7].isa - 27;
                Class v840 = v830[5].isa;
              }
              else
              {
                Class v840 = 0;
                uint64_t v838 = 0;
                uint64_t v839 = -27;
              }
              *(void *)&long long v1346 = v839;
              *(void *)&v1366[0] = v840;
              v1394.i64[0] = v838;
              sub_25B4CB164(buf, &v1346, (uint64_t *)v1366, &v1394);
              int v841 = sub_25B4FD95C(v830, 0x1BuLL);
              sub_25B4CB400((uint64_t)v1390, (long long *)buf, (uint64_t)v841);
              id v1225 = v1217;
              char v842 = v1250;
              v1239 = v1250;
              LODWORD(v1366[0]) = 7601;
              *((void *)&v1366[0] + 1) = 0;
              kdebug_trace();
              unint64_t v843 = 0;
              v844 = (void *)(v797 + 1656);
              v845 = (void *)(v797 + 1672);
              while (1)
              {
                id v846 = v842[14];
                BOOL v849 = v843 < objc_msgSend_count(v846, v847, v848);

                if (!v849)
                {
                  sub_25B400F2C((uint64_t)v1366);

                  id v937 = v1239[4];
                  uint64_t v938 = (uint64_t)v1239[5];
                  memset(v1393, 0, 24);
                  sub_25B40EE6C(v1393, v937, v938, (v938 - (uint64_t)v937) >> 4);
                  uint64_t v939 = 0;
                  unint64_t v940 = 0;
                  v941 = 0;
                  for (iuint64_t i = 0; ; ++ii)
                  {
                    id v943 = v1250[14];
                    BOOL v946 = ii < objc_msgSend_count(v943, v944, v945);

                    if (!v946) {
                      break;
                    }
                    if ((unint64_t)v939 >= v940)
                    {
                      __n128 v1310 = *((__n128 *)v1239[10] + 4 * ii + 3);
                      uint64_t v948 = v939 - v941;
                      unint64_t v949 = v948 + 1;
                      if ((unint64_t)(v948 + 1) >> 60) {
                        sub_25B3FBC4C();
                      }
                      if ((uint64_t)(v940 - (void)v941) >> 3 > v949) {
                        unint64_t v949 = (uint64_t)(v940 - (void)v941) >> 3;
                      }
                      if (v940 - (unint64_t)v941 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v950 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v950 = v949;
                      }
                      if (v950) {
                        unint64_t v950 = (unint64_t)sub_25B3FFAEC(v950);
                      }
                      else {
                        uint64_t v951 = 0;
                      }
                      v952 = (__n128 *)(v950 + 16 * v948);
                      __n128 *v952 = v1310;
                      v947 = v952 + 1;
                      if (v939 != v941)
                      {
                        do
                        {
                          __n128 v953 = v939[-1];
                          --v939;
                          v952[-1] = v953;
                          --v952;
                        }
                        while (v939 != v941);
                        uint64_t v939 = v941;
                      }
                      v941 = v952;
                      unint64_t v940 = v950 + 16 * v951;
                      if (v939) {
                        operator delete(v939);
                      }
                    }
                    else
                    {
                      *uint64_t v939 = *((__n128 *)v1239[10] + 4 * ii + 3);
                      v947 = v939 + 1;
                    }
                    uint64_t v939 = v947;
                  }
                  long long v1362 = 0uLL;
                  *(void *)&long long v1363 = 0;
                  id v954 = v1239[15];
                  id v955 = v1250[14];
                  v957 = objc_msgSend_objectAtIndexedSubscript_(v955, v956, 0);
                  uint64_t v1311 = objc_msgSend_objectForKey_(v954, v958, (uint64_t)v957);

                  uint64_t v959 = (uint64_t)v1239[10];
                  id v960 = v1250[14];
                  uint64_t v963 = objc_msgSend_count(v960, v961, v962);
                  if (v1311)
                  {
                    long long v968 = *(_OWORD *)(v1311 + 48);
                    long long v967 = *(_OWORD *)(v1311 + 64);
                    long long v969 = *(_OWORD *)(v1311 + 80);
                    v964.n128_u32[0] = *(_DWORD *)(v1311 + 8);
                    LODWORD(v965) = *(_DWORD *)(v1311 + 12);
                  }
                  else
                  {
                    v964.n128_u64[0] = 0;
                    *(void *)&long long v968 = 0;
                    DWORD2(v968) = 0;
                    *(void *)&long long v967 = 0;
                    DWORD2(v967) = 0;
                    *(void *)&long long v969 = 0;
                    DWORD2(v969) = 0;
                    double v965 = 0.0;
                  }
                  buf[1].i32[0] = DWORD2(v968);
                  buf[0] = (int8x8_t)v968;
                  buf[3].i32[0] = DWORD2(v967);
                  buf[5].i32[0] = DWORD2(v969);
                  float32x4_t buf[2] = (int8x8_t)v967;
                  buf[4] = (int8x8_t)v969;
                  sub_25B478374(v959, v963, (uint64_t)buf, (int)v964.n128_f32[0], (int)*(float *)&v965, (__n128 **)&v1362, v964, *(double *)&v967, *(double *)&v969, v965, *(double *)&v968, v966);

                  sub_25B4D48A4();
                  __n128 v970 = sub_25B4D4D94(v1393, *v941, *(float32x2_t *)v1362);
                  long long v1283 = v971;
                  __n128 v1294 = v970;
                  v972 = operator new(0x10uLL);
                  _OWORD *v972 = v1294;
                  float v973 = (char *)sub_25B3FFAEC(2uLL);
                  *((_OWORD *)v973 + 1) = v1283;
                  *(_OWORD *)float v973 = *v972;
                  operator delete(v972);
                  float v974 = *(float *)(v797 + 1696);
                  sub_25B4D48A4();
                  v975 = (double *)v1362;
                  sub_25B4D4908((float32x4_t **)&v1358, v1393, *v941, *(double *)v1362, v974);
                  float v976 = *(float *)(v797 + 1700);
                  sub_25B4D48A4();
                  sub_25B4D4908((float32x4_t **)&v1354, v1393, *v941, *v975, v976);
                  v977 = objc_alloc_init(RSMajorViewInfo);
                  uint64_t v978 = (char *)v977;
                  if (v977)
                  {
                    sub_25B4D3D18((char *)&v977[1], (char *)v975, *((uint64_t *)&v1362 + 1), (uint64_t)(*((void *)&v1362 + 1) - (void)v975) >> 4);
                    sub_25B4D3D18(v978 + 56, v973, (uint64_t)(v973 + 32), 2uLL);
                    sub_25B4D3D18(v978 + 8, (char *)v1358, *((uint64_t *)&v1358 + 1), (uint64_t)(*((void *)&v1358 + 1) - v1358) >> 4);
                    sub_25B4D3D18(v978 + 32, (char *)v1354, *((uint64_t *)&v1354 + 1), (uint64_t)(*((void *)&v1354 + 1) - v1354) >> 4);
                  }
                  buf[0] = (int8x8_t)&unk_2708F1E98;
                  memset(&buf[1], 0, 64);
                  long long v1378 = 0u;
                  long long v1379 = 0u;
                  long long v1380 = 0u;
                  long long v1381 = 0u;
                  long long v1382 = 0u;
                  long long v1383 = 0u;
                  uint64_t v1384 = 0;
                  v1385 = &unk_2708F1F38;
                  uint64_t v1386 = 0;
                  uint64_t v1387 = 0;
                  uint64_t v1388 = 0;
                  sub_25B3F6148((uint64_t)v1389);
                  memset(&v1389[176], 0, 24);
                  sub_25B47BC48((uint64_t *)buf, log);
                  kdebug_trace();
                  if (v1218 && v1218[8] == 1) {
                    v979 = (__CVBuffer *)v1218[1];
                  }
                  else {
                    v979 = 0;
                  }
                  CVPixelBufferLockBaseAddress(v979, 1uLL);
                  if (v1218)
                  {
                    uint64_t v980 = v1218[5];
                    uint64_t v981 = v1218[6];
                  }
                  else
                  {
                    uint64_t v980 = 0;
                    uint64_t v981 = 0;
                  }
                  *(void *)&long long v1342 = v980;
                  *(void *)&long long v1340 = v981;
                  sub_25B4578D0(&v1394, &v1342, (uint64_t *)&v1340);
                  v982 = sub_25B4FD9B4((__CVBuffer *)v1218);
                  long long v1368 = 0u;
                  long long v1369 = 0u;
                  *(float32x4_t *)((char *)v1366 + 8) = v1394;
                  *(void *)&v1366[0] = &unk_2708F18E0;
                  v1373 = 0;
                  char v983 = 1;
                  char v1374 = 1;
                  *(float32x4_t *)((char *)&v1366[1] + 8) = v1395;
                  *(float32x4_t *)((char *)&v1366[2] + 8) = v1396;
                  *((void *)&v1366[3] + 1) = v1394.i64[1];
                  uint64_t v1367 = 1;
                  uint64_t v984 = v1394.i64[0] * v1394.i64[1];
                  uint64_t v1371 = 0;
                  long long v1372 = 0;
                  uint64_t v1370 = v1394.i64[0] * v1394.i64[1];
                  if (v1394.i64[0] * v1394.i64[1])
                  {
                    unint64_t v985 = v982;
                    uint64_t v986 = operator new(0x30uLL);
                    char v983 = 0;
                    v986[1] = 0;
                    v986[2] = 0;
                    v986[3] = v985;
                    *uint64_t v986 = &unk_2708F1ED8;
                    v986[4] = v984;
                    *((unsigned char *)v986 + 40) = 0;
                    long long v1372 = (char *)(v986 + 3);
                    v1373 = v986;
                    float32x4_t v1376 = v985;
                  }
                  char v1375 = v983;
                  sub_25B4A7108((float32x2_t *)(v797 + 16), buf, v797 + 736, v1219, v797 + 1816, (uint64_t)v1390, (uint64_t)v1366, v978);
                }
                id v850 = v1239[15];
                unint64_t v851 = (unint64_t)v1250[14];
                uint64_t v853 = objc_msgSend_objectAtIndexedSubscript_((void *)v851, v852, v843);
                __int32 v1245 = objc_msgSend_objectForKey_(v850, v854, (uint64_t)v853);

                if (!v1245) {
                  goto LABEL_1032;
                }
                unint64_t v1230 = v843;
                uint64_t v857 = objc_msgSend_points(v1225, v855, v856);
                unint64_t v859 = v1245[2];
                unint64_t v858 = v1245[3];
                v860.i32[0] = *(_DWORD *)(v797 + 1648);
                memset(buf, 0, 32);
                buf[4].i32[0] = 1065353216;
                unint64_t v1259 = v858;
                if (v859 < v858) {
                  break;
                }
                v893 = 0;
                objc = 0;
LABEL_936:
                sub_25B3FB178((uint64_t)buf);
                v901 = objc;
                if (objc != v893)
                {
                  float32x2_t v902 = (float32x2_t)v1245[18];
                  v1309 = v893;
                  while (1)
                  {
                    float32x2_t v903 = *v901;
                    float32x2_t v904 = vsub_f32(v902, *v901);
                    int32x2_t v905 = (int32x2_t)vmul_f32(v904, v904);
                    *(float *)v905.i32 = sqrtf(vaddv_f32((float32x2_t)v905));
                    float v906 = *(float *)(v797 + 1648);
                    if (*(float *)v905.i32 < v906) {
                      v905.i32[0] = *(_DWORD *)(v797 + 1648);
                    }
                    int v907 = (int)(float)(*(float *)v905.i32 / v906);
                    if ((v907 & 0x80000000) == 0) {
                      break;
                    }
LABEL_1028:
                    if (++v901 == v1309)
                    {
                      v893 = objc;
                      goto LABEL_1030;
                    }
                  }
                  int v908 = 0;
                  int32x2_t v909 = vdup_lane_s32(v905, 0);
                  float32x2_t v910 = vdiv_f32(v904, (float32x2_t)v909);
                  while (1)
                  {
                    v909.i32[0] = *(_DWORD *)(v797 + 1648);
                    unint64_t v911 = (unint64_t)vcvt_s32_f32(vrndm_f32(vdiv_f32(vmla_n_f32(v903, vmul_n_f32(v910, (float)v908), *(float *)v909.i32), (float32x2_t)vdup_lane_s32(v909, 0))));
                    if (!sub_25B4CC2F8((void *)(v797 + 1656), v911)) {
                      break;
                    }
LABEL_1016:
                    _ZF = v908++ == v907;
                    if (_ZF) {
                      goto LABEL_1028;
                    }
                  }
                  unint64_t v912 = *(void *)(v797 + 1664);
                  if (v912)
                  {
                    uint8x8_t v913 = (uint8x8_t)vcnt_s8((int8x8_t)v912);
                    v913.i16[0] = vaddlv_u8(v913);
                    if (v913.u32[0] > 1uLL)
                    {
                      unint64_t v843 = v911;
                      if (v912 <= v911) {
                        unint64_t v843 = v911 % v912;
                      }
                    }
                    else
                    {
                      unint64_t v843 = (v912 - 1) & v911;
                    }
                    v914 = *(void ***)(*v844 + 8 * v843);
                    if (v914)
                    {
                      v915 = *v914;
                      if (*v914)
                      {
                        do
                        {
                          unint64_t v916 = v915[1];
                          if (v916 == v911)
                          {
                            if (v915[2] == v911) {
                              goto LABEL_1015;
                            }
                          }
                          else
                          {
                            if (v913.u32[0] > 1uLL)
                            {
                              if (v916 >= v912) {
                                v916 %= v912;
                              }
                            }
                            else
                            {
                              v916 &= v912 - 1;
                            }
                            if (v916 != v843) {
                              break;
                            }
                          }
                          v915 = (void *)*v915;
                        }
                        while (v915);
                      }
                    }
                  }
                  v915 = operator new(0x20uLL);
                  void *v915 = 0;
                  v915[1] = v911;
                  v915[2] = v911;
                  *((unsigned char *)v915 + 24) = 0;
                  float v917 = (float)(unint64_t)(*(void *)(v797 + 1680) + 1);
                  v909.i32[0] = *(_DWORD *)(v797 + 1688);
                  if (v912 && (float)(*(float *)v909.i32 * (float)v912) >= v917)
                  {
LABEL_1005:
                    v933 = (void *)*v844;
                    v934 = *(void **)(*v844 + 8 * v843);
                    if (v934)
                    {
                      void *v915 = *v934;
                    }
                    else
                    {
                      void *v915 = *v845;
                      void *v845 = v915;
                      v933[v843] = v845;
                      if (!*v915) {
                        goto LABEL_1014;
                      }
                      unint64_t v935 = *(void *)(*v915 + 8);
                      if ((v912 & (v912 - 1)) != 0)
                      {
                        if (v935 >= v912) {
                          v935 %= v912;
                        }
                      }
                      else
                      {
                        v935 &= v912 - 1;
                      }
                      v934 = (void *)(*v844 + 8 * v935);
                    }
                    void *v934 = v915;
LABEL_1014:
                    ++*(void *)(v797 + 1680);
LABEL_1015:
                    *((unsigned char *)v915 + 24) = 1;
                    goto LABEL_1016;
                  }
                  BOOL v918 = (v912 & (v912 - 1)) != 0;
                  if (v912 < 3) {
                    BOOL v918 = 1;
                  }
                  unint64_t v919 = v918 | (2 * v912);
                  unint64_t v920 = vcvtps_u32_f32(v917 / *(float *)v909.i32);
                  if (v919 <= v920) {
                    int8x8_t prime = (int8x8_t)v920;
                  }
                  else {
                    int8x8_t prime = (int8x8_t)v919;
                  }
                  if (*(void *)&prime == 1)
                  {
                    int8x8_t prime = (int8x8_t)2;
                  }
                  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
                  {
                    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
                  }
                  unint64_t v912 = *(void *)(v797 + 1664);
                  if (*(void *)&prime > v912) {
                    goto LABEL_971;
                  }
                  if (*(void *)&prime < v912)
                  {
                    unint64_t v928 = vcvtps_u32_f32((float)*(unint64_t *)(v797 + 1680) / *(float *)(v797 + 1688));
                    if (v912 < 3
                      || (uint8x8_t v929 = (uint8x8_t)vcnt_s8((int8x8_t)v912), v929.i16[0] = vaddlv_u8(v929), v929.u32[0] > 1uLL))
                    {
                      unint64_t v928 = std::__next_prime(v928);
                    }
                    else
                    {
                      uint64_t v930 = 1 << -(char)__clz(v928 - 1);
                      if (v928 >= 2) {
                        unint64_t v928 = v930;
                      }
                    }
                    if (*(void *)&prime <= v928) {
                      int8x8_t prime = (int8x8_t)v928;
                    }
                    if (*(void *)&prime >= v912)
                    {
                      unint64_t v912 = *(void *)(v797 + 1664);
                    }
                    else
                    {
                      if (prime)
                      {
LABEL_971:
                        if (*(void *)&prime >> 61) {
                          sub_25B3FA70C();
                        }
                        v922 = operator new(8 * *(void *)&prime);
                        uint64_t v923 = (void *)*v844;
                        void *v844 = v922;
                        if (v923) {
                          operator delete(v923);
                        }
                        uint64_t v924 = 0;
                        *(int8x8_t *)(v797 + 1664) = prime;
                        do
                          *(void *)(*v844 + 8 * v924++) = 0;
                        while (*(void *)&prime != v924);
                        v925 = (void *)*v845;
                        if (*v845)
                        {
                          unint64_t v926 = v925[1];
                          uint8x8_t v927 = (uint8x8_t)vcnt_s8(prime);
                          v927.i16[0] = vaddlv_u8(v927);
                          if (v927.u32[0] > 1uLL)
                          {
                            if (v926 >= *(void *)&prime) {
                              v926 %= *(void *)&prime;
                            }
                          }
                          else
                          {
                            v926 &= *(void *)&prime - 1;
                          }
                          *(void *)(*v844 + 8 * v926) = v845;
                          v931 = (void *)*v925;
                          if (*v925)
                          {
                            do
                            {
                              unint64_t v932 = v931[1];
                              if (v927.u32[0] > 1uLL)
                              {
                                if (v932 >= *(void *)&prime) {
                                  v932 %= *(void *)&prime;
                                }
                              }
                              else
                              {
                                v932 &= *(void *)&prime - 1;
                              }
                              if (v932 != v926)
                              {
                                if (!*(void *)(*v844 + 8 * v932))
                                {
                                  *(void *)(*v844 + 8 * v932) = v925;
                                  goto LABEL_996;
                                }
                                void *v925 = *v931;
                                void *v931 = **(void **)(*v844 + 8 * v932);
                                **(void **)(*v844 + 8 * v932) = v931;
                                v931 = v925;
                              }
                              unint64_t v932 = v926;
LABEL_996:
                              v925 = v931;
                              v931 = (void *)*v931;
                              unint64_t v926 = v932;
                            }
                            while (v931);
                          }
                        }
                        unint64_t v912 = (unint64_t)prime;
                        goto LABEL_1000;
                      }
                      BOOL v936 = (void *)*v844;
                      void *v844 = 0;
                      if (v936) {
                        operator delete(v936);
                      }
                      unint64_t v912 = 0;
                      *(void *)(v797 + 1664) = 0;
                    }
                  }
LABEL_1000:
                  if ((v912 & (v912 - 1)) != 0)
                  {
                    if (v912 <= v911) {
                      unint64_t v843 = v911 % v912;
                    }
                    else {
                      unint64_t v843 = v911;
                    }
                  }
                  else
                  {
                    unint64_t v843 = (v912 - 1) & v911;
                  }
                  goto LABEL_1005;
                }
LABEL_1030:
                unint64_t v843 = v1230;
                if (v893) {
                  operator delete(v893);
                }
LABEL_1032:

                ++v843;
                char v842 = v1250;
              }
              unint64_t v843 = v857;
              unint64_t v1293 = 0;
              v861 = 0;
              objc = 0;
              *(float *)v860.i32 = *(float *)v860.i32 * 0.5;
              float32x2_t v1254 = (float32x2_t)vdupq_lane_s32(v860, 0).u64[0];
              while (1)
              {
                uint64_t v1274 = (float32x2_t *)(v843 + 16 * v859);
                long long v1308 = *(_OWORD *)v1274->f32;
                int32x2_t v1282 = vcvt_s32_f32(vrnda_f32(vdiv_f32(*v1274, v1254)));
                HIWORD(v1313) = v1282.i16[2];
                LOWORD(v1313) = v1282.i16[0];
                unint64_t v862 = v1313;
                unint64_t v863 = (unint64_t)buf[1];
                if (buf[1])
                {
                  uint8x8_t v864 = (uint8x8_t)vcnt_s8(buf[1]);
                  v864.i16[0] = vaddlv_u8(v864);
                  if (v864.u32[0] > 1uLL)
                  {
                    unint64_t v865 = v1313;
                    if (*(void *)&buf[1] <= (unint64_t)v1313) {
                      unint64_t v865 = (unint64_t)v1313 % *(void *)&buf[1];
                    }
                  }
                  else
                  {
                    unint64_t v865 = (buf[1].i32[0] - 1) & v1313;
                  }
                  v866 = *(uint64_t ***)(*(void *)buf + 8 * v865);
                  if (v866)
                  {
                    for (juint64_t j = *v866; jj; juint64_t j = (uint64_t *)*jj)
                    {
                      unint64_t v868 = jj[1];
                      if (v868 == v1313)
                      {
                        if (*((_DWORD *)jj + 4) == v1313) {
                          goto LABEL_909;
                        }
                      }
                      else
                      {
                        if (v864.u32[0] > 1uLL)
                        {
                          if (v868 >= *(void *)&buf[1]) {
                            v868 %= *(void *)&buf[1];
                          }
                        }
                        else
                        {
                          v868 &= *(void *)&buf[1] - 1;
                        }
                        if (v868 != v865) {
                          break;
                        }
                      }
                    }
                  }
                  if (v864.u32[0] > 1uLL)
                  {
                    unint64_t v851 = v1313;
                    if (*(void *)&buf[1] <= (unint64_t)v1313) {
                      unint64_t v851 = (unint64_t)v1313 % *(void *)&buf[1];
                    }
                  }
                  else
                  {
                    unint64_t v851 = (buf[1].i32[0] - 1) & v1313;
                  }
                  v869 = *(uint64_t ***)(*(void *)buf + 8 * v851);
                  if (v869)
                  {
                    for (kuint64_t k = *v869; kk; kuint64_t k = (uint64_t *)*kk)
                    {
                      unint64_t v871 = kk[1];
                      if (v871 == v1313)
                      {
                        if (*((_DWORD *)kk + 4) == v1313) {
                          goto LABEL_907;
                        }
                      }
                      else
                      {
                        if (v864.u32[0] > 1uLL)
                        {
                          if (v871 >= *(void *)&buf[1]) {
                            v871 %= *(void *)&buf[1];
                          }
                        }
                        else
                        {
                          v871 &= *(void *)&buf[1] - 1;
                        }
                        if (v871 != v851) {
                          break;
                        }
                      }
                    }
                  }
                }
                int32x4_t v872 = operator new(0x18uLL);
                *int32x4_t v872 = 0;
                v872[1] = v1313;
                *((_WORD *)v872 + 9) = v1282.i16[2];
                *((_WORD *)v872 + 8) = v1282.i16[0];
                float v873 = (float)(unint64_t)(*(void *)&buf[3] + 1);
                if (v863 && (float)(*(float *)buf[4].i32 * (float)v863) >= v873)
                {
                  unint64_t v862 = v851;
                  v874 = (float32x2_t *)(v843 + 16 * v859);
                  goto LABEL_897;
                }
                unint64_t v851 = v843;
                BOOL v875 = (v863 & (v863 - 1)) != 0;
                if (v863 < 3) {
                  BOOL v875 = 1;
                }
                unint64_t v876 = v875 | (2 * v863);
                unint64_t v877 = vcvtps_u32_f32(v873 / *(float *)buf[4].i32);
                if (v876 <= v877) {
                  int8x8_t v878 = (int8x8_t)v877;
                }
                else {
                  int8x8_t v878 = (int8x8_t)v876;
                }
                if (*(void *)&v878 == 1)
                {
                  int8x8_t v878 = (int8x8_t)2;
                }
                else if ((*(void *)&v878 & (*(void *)&v878 - 1)) != 0)
                {
                  int8x8_t v878 = (int8x8_t)std::__next_prime(*(void *)&v878);
                  unint64_t v863 = (unint64_t)buf[1];
                }
                if (*(void *)&v878 > v863) {
                  goto LABEL_863;
                }
                if (*(void *)&v878 < v863)
                {
                  unint64_t v885 = vcvtps_u32_f32((float)(unint64_t)buf[3] / *(float *)buf[4].i32);
                  if (v863 < 3
                    || (uint8x8_t v886 = (uint8x8_t)vcnt_s8((int8x8_t)v863), v886.i16[0] = vaddlv_u8(v886), v886.u32[0] > 1uLL))
                  {
                    unint64_t v885 = std::__next_prime(v885);
                  }
                  else
                  {
                    uint64_t v887 = 1 << -(char)__clz(v885 - 1);
                    if (v885 >= 2) {
                      unint64_t v885 = v887;
                    }
                  }
                  if (*(void *)&v878 <= v885) {
                    int8x8_t v878 = (int8x8_t)v885;
                  }
                  if (*(void *)&v878 < v863)
                  {
                    if (!*(void *)&v878)
                    {
                      BOOL v900 = (void *)buf[0];
                      buf[0] = 0;
                      unint64_t v843 = v851;
                      if (v900) {
                        operator delete(v900);
                      }
                      unint64_t v863 = 0;
                      buf[1] = 0;
                      goto LABEL_893;
                    }
LABEL_863:
                    if (*(void *)&v878 >> 61) {
                      sub_25B3FA70C();
                    }
                    int v879 = operator new(8 * *(void *)&v878);
                    int v880 = (void *)buf[0];
                    buf[0] = (int8x8_t)v879;
                    if (v880) {
                      operator delete(v880);
                    }
                    uint64_t v881 = 0;
                    buf[1] = v878;
                    do
                      *(void *)(*(void *)buf + 8 * v881++) = 0;
                    while (*(void *)&v878 != v881);
                    v882 = (void **)buf[2];
                    if (buf[2])
                    {
                      unint64_t v883 = *(void *)(*(void *)&buf[2] + 8);
                      uint8x8_t v884 = (uint8x8_t)vcnt_s8(v878);
                      v884.i16[0] = vaddlv_u8(v884);
                      if (v884.u32[0] > 1uLL)
                      {
                        if (v883 >= *(void *)&v878) {
                          v883 %= *(void *)&v878;
                        }
                      }
                      else
                      {
                        v883 &= *(void *)&v878 - 1;
                      }
                      *(void *)(*(void *)buf + 8 * v883) = &buf[2];
                      for (muint64_t m = *v882; mm; v883 = v889)
                      {
                        unint64_t v889 = mm[1];
                        if (v884.u32[0] > 1uLL)
                        {
                          if (v889 >= *(void *)&v878) {
                            v889 %= *(void *)&v878;
                          }
                        }
                        else
                        {
                          v889 &= *(void *)&v878 - 1;
                        }
                        if (v889 != v883)
                        {
                          if (!*(void *)(*(void *)buf + 8 * v889))
                          {
                            *(void *)(*(void *)buf + 8 * v889) = v882;
                            goto LABEL_888;
                          }
                          __CFString *v882 = (void *)*mm;
                          *muint64_t m = **(void **)(*(void *)buf + 8 * v889);
                          **(void **)(*(void *)buf + 8 * v889) = mm;
                          muint64_t m = v882;
                        }
                        unint64_t v889 = v883;
LABEL_888:
                        v882 = (void **)mm;
                        muint64_t m = (void *)*mm;
                      }
                    }
                    unint64_t v863 = (unint64_t)v878;
                    goto LABEL_892;
                  }
                  unint64_t v863 = (unint64_t)buf[1];
                }
LABEL_892:
                unint64_t v843 = v851;
LABEL_893:
                v874 = v1274;
                if ((v863 & (v863 - 1)) != 0)
                {
                  if (v863 <= v1313) {
                    unint64_t v862 = v1313 % v863;
                  }
                }
                else
                {
                  unint64_t v862 = (v863 - 1) & v1313;
                }
LABEL_897:
                int8x8_t v890 = buf[0];
                v891 = *(void **)(*(void *)buf + 8 * v862);
                if (v891)
                {
                  *int32x4_t v872 = *v891;
                }
                else
                {
                  *int32x4_t v872 = buf[2];
                  float32x4_t buf[2] = (int8x8_t)v872;
                  *(void *)(*(void *)&v890 + 8 * v862) = &buf[2];
                  if (!*v872) {
                    goto LABEL_906;
                  }
                  unint64_t v892 = *(void *)(*v872 + 8);
                  if ((v863 & (v863 - 1)) != 0)
                  {
                    if (v892 >= v863) {
                      v892 %= v863;
                    }
                  }
                  else
                  {
                    v892 &= v863 - 1;
                  }
                  v891 = (void *)(*(void *)buf + 8 * v892);
                }
                void *v891 = v872;
LABEL_906:
                ++*(void *)&buf[3];
                long long v1308 = *(_OWORD *)v874->f32;
LABEL_907:
                if ((unint64_t)v861 >= v1293)
                {
                  uint64_t v894 = v861 - objc;
                  unint64_t v895 = v894 + 1;
                  if ((unint64_t)(v894 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v1293 - (void)objc) >> 2 > v895) {
                    unint64_t v895 = (uint64_t)(v1293 - (void)objc) >> 2;
                  }
                  if (v1293 - (unint64_t)objc >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v896 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v896 = v895;
                  }
                  if (v896) {
                    unint64_t v896 = (unint64_t)sub_25B3FCAD4(v896);
                  }
                  else {
                    uint64_t v897 = 0;
                  }
                  v898 = (float32x2_t *)(v896 + 8 * v894);
                  float32x2_t *v898 = (float32x2_t)v1308;
                  v893 = v898 + 1;
                  if (v861 != objc)
                  {
                    do
                    {
                      float32x2_t v899 = v861[-1];
                      --v861;
                      v898[-1] = v899;
                      --v898;
                    }
                    while (v861 != objc);
                    v861 = objc;
                  }
                  objc = v898;
                  unint64_t v1293 = v896 + 8 * v897;
                  if (v861) {
                    operator delete(v861);
                  }
                }
                else
                {
                  *v861++ = (float32x2_t)v1308;
LABEL_909:
                  v893 = v861;
                }
                ++v859;
                v861 = v893;
                if (v859 == v1259) {
                  goto LABEL_936;
                }
              }
            }
            uint64_t v987 = objc_msgSend_copy(v1222, v806, v807);
            unint64_t v988 = *(void **)(v797 + 1632);
            *(void *)(v797 + 1632) = v987;

            sub_25B400F2C((uint64_t)&v1350);
          }
          else
          {
            uint64_t v1222 = 0;
          }

          uint64_t v991 = v1240;
          if (*(unsigned char *)(v1240 + 184))
          {
            uint64_t v992 = objc_msgSend_dictionaryRepresentation(v1222, v989, v990);
            objc_msgSend_setObject_forKeyedSubscript_(v1237, v993, (uint64_t)v992, @"consistency");

            uint64_t v991 = v1240;
          }
          v994 = objc_msgSend_standardUserDefaults(MEMORY[0x263EFFA40], v989, v990);
          int v996 = objc_msgSend_BOOLForKey_(v994, v995, @"fp_earlyout_consistency");

          if (v996)
          {
            if (qword_26A5020E0 != -1) {
              dispatch_once(&qword_26A5020E0, &unk_2708F1278);
            }
            v997 = (id)qword_26A5020D8;
            if (!os_log_type_enabled(v997, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_1212;
            }
            buf[0].i32[0] = 138412290;
            *(int8x8_t *)((char *)buf + 4) = (int8x8_t)@"fp_earlyout_consistency";
LABEL_1176:
            _os_log_debug_impl(&dword_25B3F3000, v997, OS_LOG_TYPE_DEBUG, "pnp measurement: %@", (uint8_t *)buf, 0xCu);
LABEL_1212:

            v1235 = (RSFloorPlan *)v1222;
LABEL_1213:

LABEL_1214:
            goto LABEL_1215;
          }
          uint64_t v998 = *(void *)(v991 + 80);
          v999 = v1222;
          float32x4_t v1312 = v1250;
          long long v1284 = v1219;
          uint64_t v1275 = v998;
          if (!v998)
          {
            uint64_t v1222 = 0;
LABEL_1113:

            uint64_t v1069 = v1240;
            v1070 = v1222;
            if (*(unsigned char *)(v1240 + 184))
            {
              char v1071 = objc_msgSend_dictionaryRepresentation(v1222, v1067, v1068);
              objc_msgSend_setObject_forKeyedSubscript_(v1237, v1072, (uint64_t)v1071, @"scanui_formatter");

              uint64_t v1069 = v1240;
            }
            if (*(unsigned char *)(v1069 + 136))
            {
              uint64_t v1073 = sub_25B592764(*(void *)(v1069 + 144), v1222, v1312);
              v1074 = *(void **)(v1240 + 152);
              *(void *)(v1240 + 152) = v1073;
            }
            uint64_t v1075 = objc_msgSend_copy(v1222, v1067, v1068);
            uint64_t v1076 = *(void **)(v1240 + 168);
            *(void *)(v1240 + 168) = v1075;

            if (v1222)
            {
              v1079 = objc_msgSend_array(MEMORY[0x263EFF980], v1077, v1078);
              long long v1364 = 0u;
              long long v1365 = 0u;
              long long v1362 = 0u;
              long long v1363 = 0u;
              id v1080 = v1222[3];
              uint64_t v1083 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1080, v1081, (uint64_t)&v1362, buf, 16);
              if (v1083)
              {
                uint64_t v1084 = *(void *)v1363;
                do
                {
                  for (nuint64_t n = 0; nn != v1083; ++nn)
                  {
                    if (*(void *)v1363 != v1084) {
                      objc_enumerationMutation(v1080);
                    }
                    uint64_t v1086 = *(void *)(*((void *)&v1362 + 1) + 8 * nn);
                    if (!v1086 || *(_DWORD *)(v1086 + 116) != 3) {
                      objc_msgSend_addObject_(v1079, v1082, v1086);
                    }
                  }
                  uint64_t v1083 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1080, v1082, (uint64_t)&v1362, buf, 16);
                }
                while (v1083);
              }

              objc_storeStrong(v1222 + 3, v1079);
              float v1089 = objc_msgSend_array(MEMORY[0x263EFF980], v1087, v1088);
              long long v1360 = 0u;
              long long v1361 = 0u;
              long long v1358 = 0u;
              long long v1359 = 0u;
              id v1090 = v1222[6];
              uint64_t v1093 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1090, v1091, (uint64_t)&v1358, v1390, 16);
              if (v1093)
              {
                uint64_t v1094 = *(void *)v1359;
                do
                {
                  for (uint64_t i1 = 0; i1 != v1093; ++i1)
                  {
                    if (*(void *)v1359 != v1094) {
                      objc_enumerationMutation(v1090);
                    }
                    uint64_t v1096 = *(void *)(*((void *)&v1358 + 1) + 8 * i1);
                    if (!v1096 || *(_DWORD *)(v1096 + 120) != 3) {
                      objc_msgSend_addObject_(v1089, v1092, v1096);
                    }
                  }
                  uint64_t v1093 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1090, v1092, (uint64_t)&v1358, v1390, 16);
                }
                while (v1093);
              }

              objc_storeStrong(v1222 + 6, v1089);
              float v1099 = objc_msgSend_array(MEMORY[0x263EFF980], v1097, v1098);
              long long v1356 = 0u;
              long long v1357 = 0u;
              long long v1354 = 0u;
              long long v1355 = 0u;
              id v1100 = v1222[5];
              uint64_t v1103 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1100, v1101, (uint64_t)&v1354, v1366, 16);
              if (v1103)
              {
                uint64_t v1104 = *(void *)v1355;
                do
                {
                  for (uint64_t i2 = 0; i2 != v1103; ++i2)
                  {
                    if (*(void *)v1355 != v1104) {
                      objc_enumerationMutation(v1100);
                    }
                    uint64_t v1106 = *(void *)(*((void *)&v1354 + 1) + 8 * i2);
                    if (!v1106 || *(_DWORD *)(v1106 + 120) != 3) {
                      objc_msgSend_addObject_(v1099, v1102, v1106);
                    }
                  }
                  uint64_t v1103 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1100, v1102, (uint64_t)&v1354, v1366, 16);
                }
                while (v1103);
              }

              objc_storeStrong(v1222 + 5, v1099);
              uint64_t v1109 = objc_msgSend_array(MEMORY[0x263EFF980], v1107, v1108);
              long long v1352 = 0u;
              long long v1353 = 0u;
              long long v1350 = 0u;
              long long v1351 = 0u;
              id v1110 = v1222[4];
              uint64_t v1113 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1110, v1111, (uint64_t)&v1350, &v1394, 16);
              if (v1113)
              {
                uint64_t v1114 = *(void *)v1351;
                do
                {
                  for (uint64_t i3 = 0; i3 != v1113; ++i3)
                  {
                    if (*(void *)v1351 != v1114) {
                      objc_enumerationMutation(v1110);
                    }
                    uint64_t v1116 = *(void *)(*((void *)&v1350 + 1) + 8 * i3);
                    if (!v1116 || *(_DWORD *)(v1116 + 120) != 3) {
                      objc_msgSend_addObject_(v1109, v1112, v1116);
                    }
                  }
                  uint64_t v1113 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1110, v1112, (uint64_t)&v1350, &v1394, 16);
                }
                while (v1113);
              }

              objc_storeStrong(v1222 + 4, v1109);
              int32x4_t v1119 = objc_msgSend_array(MEMORY[0x263EFF980], v1117, v1118);
              long long v1348 = 0u;
              long long v1349 = 0u;
              long long v1346 = 0u;
              long long v1347 = 0u;
              id v1120 = v1222[7];
              uint64_t v1123 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1120, v1121, (uint64_t)&v1346, v1393, 16);
              if (v1123)
              {
                uint64_t v1124 = *(void *)v1347;
                do
                {
                  for (uint64_t i4 = 0; i4 != v1123; ++i4)
                  {
                    if (*(void *)v1347 != v1124) {
                      objc_enumerationMutation(v1120);
                    }
                    uint64_t v1126 = *(void *)(*((void *)&v1346 + 1) + 8 * i4);
                    if (!v1126 || *(_DWORD *)(v1126 + 120) != 3) {
                      objc_msgSend_addObject_(v1119, v1122, v1126);
                    }
                  }
                  uint64_t v1123 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1120, v1122, (uint64_t)&v1346, v1393, 16);
                }
                while (v1123);
              }

              id v1127 = v1222[7];
              v1222[7] = v1119;

              v1070 = v1222;
            }
            uint64_t v1128 = v1240;
            if (*(unsigned char *)(v1240 + 184))
            {
              float32x4_t v1129 = objc_msgSend_dictionaryRepresentation(v1070, v1077, v1078);
              objc_msgSend_setObject_forKeyedSubscript_(v1237, v1130, (uint64_t)v1129, @"filter_other_type_wall");

              uint64_t v1128 = v1240;
            }
            int8x8_t v1131 = objc_msgSend_standardUserDefaults(MEMORY[0x263EFFA40], v1077, v1078);
            int v1133 = objc_msgSend_BOOLForKey_(v1131, v1132, @"fp_earlyout_curvedWall");

            if (v1133)
            {
              if (qword_26A5020E0 != -1) {
                dispatch_once(&qword_26A5020E0, &unk_2708F1278);
              }
              v997 = (id)qword_26A5020D8;
              if (!os_log_type_enabled(v997, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_1212;
              }
              buf[0].i32[0] = 138412290;
              *(int8x8_t *)((char *)buf + 4) = (int8x8_t)@"fp_earlyout_curvedWall";
              goto LABEL_1176;
            }
            float32x4_t v1134 = sub_25B410ACC(*(void *)(v1128 + 96), v1070, v1217, v1233, 1);

            if (*(unsigned char *)(v1240 + 184))
            {
              unsigned int v1137 = objc_msgSend_dictionaryRepresentation(v1134, v1135, v1136);
              objc_msgSend_setObject_forKeyedSubscript_(v1237, v1138, (uint64_t)v1137, @"height_estimator");
            }
            if (objc_msgSend_isDoorWindowEnabled((void *)v1240, v1135, v1136))
            {
              uint64_t v1141 = *(void *)(v1240 + 40);
              float32x4_t v1142 = objc_msgSend_firstObject(v1231, v1139, v1140);
              v1145 = objc_msgSend_openings(log, v1143, v1144);
              uint64_t v1146 = sub_25B4747AC(v1141, v1217, v1142, v1312, v1284, v1134, v1145);

              if (*(unsigned char *)(v1240 + 184))
              {
                v1149 = objc_msgSend_dictionaryRepresentation(v1146, v1147, v1148);
                objc_msgSend_setObject_forKeyedSubscript_(v1237, v1150, (uint64_t)v1149, @"door_window");
              }
              if (sub_25B427F94())
              {
                uint64_t v1222 = (id *)v1146;
                if (qword_26A5020E0 != -1) {
                  dispatch_once(&qword_26A5020E0, &unk_2708F1278);
                }
                v997 = (id)qword_26A5020D8;
                if (!os_log_type_enabled(v997, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_1212;
                }
                buf[0].i32[0] = 138412290;
                *(int8x8_t *)((char *)buf + 4) = (int8x8_t)@"fp_earlyout_windowDoorDetect";
                goto LABEL_1176;
              }
            }
            else
            {
              uint64_t v1146 = v1134;
            }
            kdebug_trace();
            v1151 = sub_25B5CB680(*(void *)(v1240 + 104), v1146, v1217, v1312);

            if (*(unsigned char *)(v1240 + 184))
            {
              uint64_t v1154 = objc_msgSend_dictionaryRepresentation(v1151, v1152, v1153);
              objc_msgSend_setObject_forKeyedSubscript_(v1237, v1155, (uint64_t)v1154, @"opening_height_alignment");
            }
            kdebug_trace();
            if (objc_msgSend_isDoorWindowEnabled((void *)v1240, v1156, v1157))
            {
              uint64_t v1158 = v1240;
              if (!*(unsigned char *)(v1240 + 164))
              {
                v1164 = v1151;
                goto LABEL_1198;
              }
              uint64_t v1159 = sub_25B4CCA28(*(void ***)(v1240 + 112), v1151);

              uint64_t v1158 = v1240;
              if (!*(unsigned char *)(v1240 + 184))
              {
                v1164 = v1159;
                goto LABEL_1198;
              }
              v1162 = objc_msgSend_dictionaryRepresentation(v1159, v1160, v1161);
              objc_msgSend_setObject_forKeyedSubscript_(v1237, v1163, (uint64_t)v1162, @"recessed_area_recon");

              v1164 = v1159;
            }
            else
            {
              v1164 = v1151;
            }
            uint64_t v1158 = v1240;
LABEL_1198:
            uint64_t v1165 = sub_25B3F51EC(*(void *)(v1158 + 120), v1164, *(unsigned __int8 *)(v1158 + 161), *(unsigned __int8 *)(v1158 + 162), *(unsigned __int8 *)(v1158 + 163));

            if (*(unsigned char *)(v1240 + 184))
            {
              v1168 = objc_msgSend_dictionaryRepresentation(v1165, v1166, v1167);
              objc_msgSend_setObject_forKeyedSubscript_(v1237, v1169, (uint64_t)v1168, @"parent_association");
            }
            v1170 = objc_msgSend_render((void *)v1240, v1166, v1167);
            v1171 = v1170;
            uint64_t v1172 = *(void *)(v1240 + 56);
            if (v1172) {
              uint64_t v1173 = v1172 + 1968;
            }
            else {
              uint64_t v1173 = 0;
            }
            v1174 = sub_25B4D453C(v1170, v1165, v1284, v1173);

            if (*(unsigned char *)(v1240 + 184))
            {
              float v1177 = objc_msgSend_dictionaryRepresentation(v1174, v1175, v1176);
              objc_msgSend_setObject_forKeyedSubscript_(v1237, v1178, (uint64_t)v1177, @"render");
            }
            kdebug_trace();
            v1179 = sub_25B5A14F4(*(float32x2_t **)(v1240 + 128), v1174, v1233, v1312, 0, 0);

            if (*(unsigned char *)(v1240 + 184))
            {
              uint64_t v1182 = objc_msgSend_dictionaryRepresentation(v1179, v1180, v1181);
              objc_msgSend_setObject_forKeyedSubscript_(v1237, v1183, (uint64_t)v1182, @"floor_estimation");
            }
            kdebug_trace();
            v1296.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            if (qword_26A5020E0 != -1) {
              dispatch_once(&qword_26A5020E0, &unk_2708F1278);
            }
            v997 = (id)qword_26A5020D8;
            if (os_log_type_enabled(v997, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v1186 = objc_msgSend_walls(v1179, v1184, v1185);
              uint64_t v1276 = objc_msgSend_count(v1186, v1187, v1188);
              long long v1285 = objc_msgSend_openings(v1179, v1189, v1190);
              uint64_t v1261 = objc_msgSend_count(v1285, v1191, v1192);
              obje = objc_msgSend_windows(v1179, v1193, v1194);
              uint64_t v1197 = objc_msgSend_count(obje, v1195, v1196);
              v1200 = objc_msgSend_doors(v1179, v1198, v1199);
              uint64_t v1203 = objc_msgSend_count(v1200, v1201, v1202);
              id v1206 = objc_msgSend_opendoors(v1179, v1204, v1205);
              uint64_t v1209 = objc_msgSend_count(v1206, v1207, v1208);
              float32x4_t v1212 = objc_msgSend_curvedWalls(v1179, v1210, v1211);
              uint64_t v1215 = objc_msgSend_count(v1212, v1213, v1214);
              buf[0].i32[0] = 134219520;
              *(int8x8_t *)((char *)buf + 4) = (int8x8_t)v1276;
              buf[1].i16[2] = 2048;
              *(int8x8_t *)((char *)&buf[1] + 6) = (int8x8_t)v1261;
              buf[2].i16[3] = 2048;
              buf[3] = (int8x8_t)v1197;
              buf[4].i16[0] = 2048;
              *(int8x8_t *)((char *)&buf[4] + 2) = (int8x8_t)v1203;
              buf[5].i16[1] = 2048;
              *(int8x8_t *)((char *)&buf[5] + 4) = (int8x8_t)v1209;
              buf[6].i16[2] = 2048;
              *(int8x8_t *)((char *)&buf[6] + 6) = (int8x8_t)v1215;
              buf[7].i16[3] = 2048;
              buf[8] = (int8x8_t)((v1296.__d_.__rep_ - v1224.__d_.__rep_) / 1000000);
              _os_log_impl(&dword_25B3F3000, v997, OS_LOG_TYPE_DEFAULT, "Overall walls: %lu, openings: %lu, windows: %lu, doors: %lu, opendoors: %lu, curvedWalls: %lu, consume: %lld", (uint8_t *)buf, 0x48u);
            }
            uint64_t v1222 = (id *)v1179;
            goto LABEL_1212;
          }
          sub_25B4E937C((unint64_t)v999);
          id v1000 = v1312[14];
          BOOL v1003 = objc_msgSend_count(v1000, v1001, v1002) == 0;

          if (v1003)
          {
            float v1042 = (_DWORD *)objc_msgSend_copy(v999, v1004, v1005);
          }
          else
          {
            v1260 = v999;
            v1006 = v1312;
            v1007 = v1284;
            v1390[0].__locale_ = 0;
            v1390[1].__locale_ = 0;
            *(void *)&long long v1391 = 0;
            id v1008 = v1006[15];
            id v1009 = v1312[14];
            id v1255 = v1007;
            v1011 = objc_msgSend_objectAtIndexedSubscript_(v1009, v1010, 0);
            uint64_t objd = objc_msgSend_objectForKey_(v1008, v1012, (uint64_t)v1011);

            uint64_t v1013 = (uint64_t)v1006[10];
            id v1014 = v1312[14];
            uint64_t v1017 = objc_msgSend_count(v1014, v1015, v1016);
            if (objd)
            {
              long long v1022 = *(_OWORD *)(objd + 48);
              long long v1021 = *(_OWORD *)(objd + 64);
              long long v1023 = *(_OWORD *)(objd + 80);
              v1018.n128_u32[0] = *(_DWORD *)(objd + 8);
              LODWORD(v1019) = *(_DWORD *)(objd + 12);
            }
            else
            {
              v1018.n128_u64[0] = 0;
              *(void *)&long long v1022 = 0;
              DWORD2(v1022) = 0;
              *(void *)&long long v1021 = 0;
              DWORD2(v1021) = 0;
              *(void *)&long long v1023 = 0;
              DWORD2(v1023) = 0;
              double v1019 = 0.0;
            }
            buf[1].i32[0] = DWORD2(v1022);
            buf[0] = (int8x8_t)v1022;
            buf[3].i32[0] = DWORD2(v1021);
            buf[5].i32[0] = DWORD2(v1023);
            float32x4_t buf[2] = (int8x8_t)v1021;
            buf[4] = (int8x8_t)v1023;
            sub_25B478374(v1013, v1017, (uint64_t)buf, (int)v1018.n128_f32[0], (int)*(float *)&v1019, (__n128 **)v1390, v1018, *(double *)&v1021, *(double *)&v1023, v1019, *(double *)&v1022, v1020);

            unint64_t v1024 = 0;
            uint64_t v1025 = 0;
            v1026 = 0;
            for (unint64_t i5 = 0; ; ++i5)
            {
              id v1028 = v1312[14];
              BOOL v1031 = i5 < objc_msgSend_count(v1028, v1029, v1030);

              if (!v1031) {
                break;
              }
              if ((unint64_t)v1025 >= v1024)
              {
                __n128 v1295 = *((__n128 *)v1006[10] + 4 * i5 + 3);
                uint64_t v1035 = v1025 - v1026;
                unint64_t v1036 = v1035 + 1;
                if ((unint64_t)(v1035 + 1) >> 60) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v1024 - (void)v1026) >> 3 > v1036) {
                  unint64_t v1036 = (uint64_t)(v1024 - (void)v1026) >> 3;
                }
                if (v1024 - (unint64_t)v1026 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v1037 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v1037 = v1036;
                }
                if (v1037) {
                  unint64_t v1037 = (unint64_t)sub_25B3FFAEC(v1037);
                }
                else {
                  uint64_t v1038 = 0;
                }
                char v1039 = (__n128 *)(v1037 + 16 * v1035);
                *char v1039 = v1295;
                char v1034 = v1039 + 1;
                if (v1025 != v1026)
                {
                  do
                  {
                    __n128 v1040 = v1025[-1];
                    --v1025;
                    v1039[-1] = v1040;
                    --v1039;
                  }
                  while (v1025 != v1026);
                  uint64_t v1025 = v1026;
                }
                v1026 = v1039;
                unint64_t v1024 = v1037 + 16 * v1038;
                if (v1025) {
                  operator delete(v1025);
                }
              }
              else
              {
                *uint64_t v1025 = *((__n128 *)v1006[10] + 4 * i5 + 3);
                char v1034 = v1025 + 1;
              }
              uint64_t v1025 = v1034;
            }
            if (v1025 == v1026 || (locale = v1390[0].__locale_, v1390[1].__locale_ == v1390[0].__locale_))
            {
              float v1042 = (_DWORD *)objc_msgSend_copy(v1260, v1032, v1033);
            }
            else
            {
              float v1042 = (_DWORD *)objc_msgSend_copy(v1260, v1032, v1033);
              v1045 = objc_msgSend_walls(v1042, v1043, v1044);
              id v1048 = objc_msgSend_mutableCopy(v1045, v1046, v1047);

              uint64_t v1051 = objc_msgSend_walls(*(void **)(v1275 + 8), v1049, v1050);
              sub_25B4EF460(v1051, v1048, 0, v1026, (__n128 *)locale, 0);

              sub_25B4E664C((uint64_t)v1042, v1048);
              v1054 = objc_msgSend_openings(v1042, v1052, v1053);
              uint64_t v1057 = objc_msgSend_mutableCopy(v1054, v1055, v1056);

              v1060 = objc_msgSend_openings(*(void **)(v1275 + 8), v1058, v1059);
              sub_25B4EF460(v1060, v1057, v1048, v1026, (__n128 *)locale, 3);

              sub_25B4E666C((uint64_t)v1042, v1057);
            }
            if (v1026) {
              operator delete(v1026);
            }

            if (v1390[0].__locale_) {
              operator delete(v1390[0].__locale_);
            }
          }
          if (v999)
          {
            int v1061 = *((_DWORD *)v999 + 3);
            if (!v1042) {
              goto LABEL_1109;
            }
          }
          else
          {
            int v1061 = 0;
            if (!v1042)
            {
LABEL_1109:
              if (v999)
              {
                int v1062 = *((_DWORD *)v999 + 4);
                if (!v1042)
                {
LABEL_1112:
                  sub_25B4E937C((unint64_t)v1042);
                  uint64_t v1065 = objc_msgSend_copy(v1042, v1063, v1064);
                  uint64_t v1222 = (id *)v1042;
                  v1066 = *(void **)(v1275 + 8);
                  *(void *)(v1275 + 8) = v1065;

                  goto LABEL_1113;
                }
              }
              else
              {
                int v1062 = 0;
                if (!v1042) {
                  goto LABEL_1112;
                }
              }
              v1042[4] = v1062;
              goto LABEL_1112;
            }
          }
          v1042[3] = v1061;
          goto LABEL_1109;
        }
        size_t v618 = *(void *)(v614 + 8);
        if (v618)
        {
          uint64_t v619 = *(void *)(v618 + 48);
          if (v617)
          {
            uint64_t v620 = SHIDWORD(v617[1].f64[1]);
            if (v619 == v620) {
              goto LABEL_538;
            }
            uint64_t v621 = SHIDWORD(v617[1].f64[1]);
            goto LABEL_537;
          }
          if (v619)
          {
            LODWORD(v620) = 0;
            uint64_t v621 = 0;
LABEL_537:
            *(void *)(v618 + 40) = v621;
            *(void *)(v618 + 48) = (int)v620;
            sub_25B4FDAAC(v618);
            sub_25B4FDBCC(v618, v622);
          }
        }
LABEL_538:
        size_t v623 = *(void *)(v614 + 16);
        if (!v623) {
          goto LABEL_543;
        }
        uint64_t v624 = *(void *)(v623 + 48);
        if (v617)
        {
          uint64_t v625 = SHIDWORD(v617[1].f64[1]);
          if (v624 == v625) {
            goto LABEL_543;
          }
          uint64_t v626 = SHIDWORD(v617[1].f64[1]);
        }
        else
        {
          if (!v624)
          {
LABEL_543:
            size_t v628 = *(void *)(v614 + 72);
            if (!v628) {
              goto LABEL_548;
            }
            uint64_t v629 = *(void *)(v628 + 48);
            if (v617)
            {
              uint64_t v630 = SHIDWORD(v617[1].f64[1]);
              if (v629 == v630) {
                goto LABEL_548;
              }
              uint64_t v631 = SHIDWORD(v617[1].f64[1]);
            }
            else
            {
              if (!v629)
              {
LABEL_548:
                size_t v633 = *(void *)(v614 + 80);
                if (!v633) {
                  goto LABEL_553;
                }
                uint64_t v634 = *(void *)(v633 + 48);
                if (v617)
                {
                  uint64_t v635 = SHIDWORD(v617[1].f64[1]);
                  if (v634 == v635) {
                    goto LABEL_553;
                  }
                  uint64_t v636 = SHIDWORD(v617[1].f64[1]);
                }
                else
                {
                  if (!v634)
                  {
LABEL_553:
                    long long v638 = *(void **)(v614 + 88);
                    if (!v638) {
                      goto LABEL_557;
                    }
                    uint64_t v639 = v638[6];
                    if (v617)
                    {
                      uint64_t v640 = SHIDWORD(v617[1].f64[1]);
                      if (v639 == v640) {
                        goto LABEL_557;
                      }
                    }
                    else
                    {
                      if (!v639)
                      {
LABEL_557:
                        long long v642 = *(void **)(v614 + 96);
                        if (v642)
                        {
                          uint64_t v643 = v642[6];
                          if (v617)
                          {
                            uint64_t v644 = SHIDWORD(v617[1].f64[1]);
                            if (v643 == v644)
                            {
LABEL_560:
                              memset(buf, 0, 24);
LABEL_561:
                              if (LOBYTE(v617->f64[1]))
                              {
                                sub_25B4FDD60(*(void *)(v614 + 8));
                                sub_25B4FDD60(*(void *)(v614 + 72));
                                sub_25B4FDD60(*(void *)(v614 + 88));
                                *(int32x2_t *)(v614 + 24) = vcvt_s32_f32(*(float32x2_t *)(v614 + 32));
                                unint64_t v647 = objc_msgSend_count(v1307, v645, v646);
                                v1390[0].__locale_ = 0;
                                sub_25B47DDC8((char **)buf, v647, v1390);
                                long long v649 = (void *)buf[0];
                                int8x8_t v648 = buf[1];
                                if (*(void *)buf != *(void *)&buf[1])
                                {
                                  uint64_t v650 = 0;
                                  uint64_t v651 = (void *)buf[0];
                                  do
                                    *v651++ = v650++;
                                  while (v651 != *(void **)&v648);
                                }
                                uint64_t v652 = *(void *)(v614 + 8);
                                if (v652 && *(void *)(v652 + 64) == 1) {
                                  long long v653 = *(__CVBuffer **)(v652 + 8);
                                }
                                else {
                                  long long v653 = 0;
                                }
                                CVPixelBufferLockBaseAddress(v653, 0);
                                uint64_t v759 = *(void *)(v614 + 72);
                                if (v759 && *(void *)(v759 + 64) == 1) {
                                  v760 = *(__CVBuffer **)(v759 + 8);
                                }
                                else {
                                  v760 = 0;
                                }
                                CVPixelBufferLockBaseAddress(v760, 0);
                                uint64_t v761 = *(void *)(v614 + 88);
                                if (v761 && *(void *)(v761 + 64) == 1) {
                                  float v762 = *(__CVBuffer **)(v761 + 8);
                                }
                                else {
                                  float v762 = 0;
                                }
                                CVPixelBufferLockBaseAddress(v762, 0);
                                unint64_t v757 = sub_25B4ECF80(v1307, buf, v617, *(void **)(v614 + 8), *(_DWORD *)(v614 + 24), *(_DWORD *)(v614 + 28), *(void **)(v614 + 72), *(void **)(v614 + 88), 0);
                                uint64_t v763 = *(void *)(v614 + 8);
                                if (v763 && *(void *)(v763 + 64) == 1) {
                                  unint64_t v764 = *(__CVBuffer **)(v763 + 8);
                                }
                                else {
                                  unint64_t v764 = 0;
                                }
                                CVPixelBufferUnlockBaseAddress(v764, 0);
                                uint64_t v765 = *(void *)(v614 + 72);
                                if (v765 && *(void *)(v765 + 64) == 1) {
                                  int8x8_t v766 = *(__CVBuffer **)(v765 + 8);
                                }
                                else {
                                  int8x8_t v766 = 0;
                                }
                                CVPixelBufferUnlockBaseAddress(v766, 0);
                                uint64_t v767 = *(void *)(v614 + 88);
                                if (v767 && *(void *)(v767 + 64) == 1) {
                                  v768 = *(__CVBuffer **)(v767 + 8);
                                }
                                else {
                                  v768 = 0;
                                }
                                CVPixelBufferUnlockBaseAddress(v768, 0);
                                unint64_t v758 = HIDWORD(v757);
LABEL_737:
                                int v769 = *(_DWORD *)(v614 + 24);
                                int v770 = *(_DWORD *)(v614 + 28);
                                if (v769 <= (int)v757) {
                                  int v769 = v757;
                                }
                                if (v770 <= (int)v758) {
                                  int v770 = v758;
                                }
                                *(_DWORD *)(v614 + 24) = v769;
                                *(_DWORD *)(v614 + 28) = v770;
                                if (v649) {
                                  operator delete(v649);
                                }
                                goto LABEL_743;
                              }
LABEL_569:
                              sub_25B4FDD60(*(void *)(v614 + 16));
                              sub_25B4FDD60(*(void *)(v614 + 80));
                              sub_25B4FDD60(*(void *)(v614 + 96));
                              id v655 = v1250[7];
                              uint64_t v656 = (uint64_t)v1250[8];
                              v1390[1].__locale_ = 0;
                              *(void *)&long long v1391 = 0;
                              v1390[0].__locale_ = 0;
                              sub_25B40EE6C(v1390, v655, v656, (v656 - (uint64_t)v655) >> 4);
                              unint64_t v659 = 0;
                              long long v660 = (float32x4_t *)v1390[0].__locale_;
                              int8x8_t v661 = buf[2];
                              long long v662 = (unint64_t *)buf[0];
                              while (objc_msgSend_count(v1307, v657, v658) > v659)
                              {
                                float32x4_t v665 = *(float32x4_t *)(objc_msgSend_points(v1307, v663, v664) + 16 * v659);
                                int16x4_t v666 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v665, *v660)));
                                if ((v666.i8[0] & 1) == 0)
                                {
                                  int16x4_t v667 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v660[1], v665)));
                                  if ((v667.i8[0] & 1) == 0 && (v666.i8[2] & 1) == 0 && (v667.i8[2] & 1) == 0)
                                  {
                                    int8x8_t v668 = buf[1];
                                    if (*(void *)&buf[1] >= *(void *)&v661)
                                    {
                                      uint64_t v670 = (uint64_t)(*(void *)&buf[1] - (void)v662) >> 3;
                                      unint64_t v671 = v670 + 1;
                                      if ((unint64_t)(v670 + 1) >> 61)
                                      {
                                        buf[0] = (int8x8_t)v662;
                                        sub_25B3FBC4C();
                                      }
                                      if ((uint64_t)(*(void *)&v661 - (void)v662) >> 2 > v671) {
                                        unint64_t v671 = (uint64_t)(*(void *)&v661 - (void)v662) >> 2;
                                      }
                                      if (*(void *)&v661 - (void)v662 >= 0x7FFFFFFFFFFFFFF8uLL) {
                                        unint64_t v672 = 0x1FFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v672 = v671;
                                      }
                                      if (v672) {
                                        unint64_t v672 = (unint64_t)sub_25B3FCAD4(v672);
                                      }
                                      else {
                                        long long v657 = 0;
                                      }
                                      float v673 = (unint64_t *)(v672 + 8 * v670);
                                      *float v673 = v659;
                                      int8x8_t v669 = (int8x8_t)(v673 + 1);
                                      while ((unint64_t *)v668 != v662)
                                      {
                                        unint64_t v674 = *(void *)(*(void *)&v668 - 8);
                                        *(void *)&v668 -= 8;
                                        *--float v673 = v674;
                                      }
                                      int8x8_t v661 = (int8x8_t)(v672 + 8 * (void)v657);
                                      buf[1] = v669;
                                      if (v662) {
                                        operator delete(v662);
                                      }
                                      long long v662 = v673;
                                    }
                                    else
                                    {
                                      **(void **)&buf[1] = v659;
                                      int8x8_t v669 = (int8x8_t)(*(void *)&v668 + 8);
                                    }
                                    buf[1] = v669;
                                  }
                                }
                                ++v659;
                              }
                              float32x4_t buf[2] = v661;
                              buf[0] = (int8x8_t)v662;
                              uint64_t v675 = *(void *)(v614 + 8);
                              if (v675 && *(void *)(v675 + 64) == 1) {
                                uint64_t v676 = *(__CVBuffer **)(v675 + 8);
                              }
                              else {
                                uint64_t v676 = 0;
                              }
                              CVPixelBufferLockBaseAddress(v676, 0);
                              uint64_t v677 = *(void *)(v614 + 16);
                              if (v677 && *(void *)(v677 + 64) == 1) {
                                v678 = *(__CVBuffer **)(v677 + 8);
                              }
                              else {
                                v678 = 0;
                              }
                              CVPixelBufferLockBaseAddress(v678, 0);
                              uint64_t v679 = *(void *)(v614 + 72);
                              if (v679 && *(void *)(v679 + 64) == 1) {
                                v680 = *(__CVBuffer **)(v679 + 8);
                              }
                              else {
                                v680 = 0;
                              }
                              CVPixelBufferLockBaseAddress(v680, 0);
                              uint64_t v681 = *(void *)(v614 + 80);
                              if (v681 && *(void *)(v681 + 64) == 1) {
                                v682 = *(__CVBuffer **)(v681 + 8);
                              }
                              else {
                                v682 = 0;
                              }
                              CVPixelBufferLockBaseAddress(v682, 0);
                              uint64_t v683 = *(void *)(v614 + 88);
                              if (v683 && *(void *)(v683 + 64) == 1) {
                                uint64_t v684 = *(__CVBuffer **)(v683 + 8);
                              }
                              else {
                                uint64_t v684 = 0;
                              }
                              CVPixelBufferLockBaseAddress(v684, 0);
                              uint64_t v685 = *(void *)(v614 + 96);
                              if (v685 && *(void *)(v685 + 64) == 1) {
                                v686 = *(__CVBuffer **)(v685 + 8);
                              }
                              else {
                                v686 = 0;
                              }
                              CVPixelBufferLockBaseAddress(v686, 0);
                              unint64_t i6 = sub_25B4ECF80(v1307, buf, v617, *(void **)(v614 + 16), *(_DWORD *)(v614 + 24), *(_DWORD *)(v614 + 28), *(void **)(v614 + 80), *(void **)(v614 + 96), 0);
                              v688 = *(void **)(v614 + 8);
                              if (v688) {
                                uint64_t v689 = v688[6] * v688[5];
                              }
                              else {
                                uint64_t v689 = 0;
                              }
                              int v690 = *(_DWORD *)(v614 + 24);
                              if (v690 < (int)i6)
                              {
                                unint64_t v691 = i6;
                                v692 = sub_25B4FD95C(v688, *(void *)(v614 + 48));
                                uint64_t v693 = *(void *)(v614 + 48);
                                for (unint64_t i6 = v691; v693; --v693)
                                {
                                  _H1 = *(_WORD *)v692;
                                  __asm { FCVT            S1, H1 }
                                  _S1 = (float)((float)v690 / (float)(int)v691) * _S1;
                                  __asm { FCVT            H1, S1 }
                                  *(_WORD *)v692 = LOWORD(_S1);
                                  v692 = (void *)((char *)v692 + 2);
                                }
                              }
                              int v1248 = i6;
                              int v697 = *(_DWORD *)(v614 + 28);
                              unint64_t v1253 = HIDWORD(i6);
                              if (v697 < SHIDWORD(i6))
                              {
                                v698 = sub_25B4FD95C(*(void **)(v614 + 8), *(void *)(v614 + 48) + 1);
                                for (uint64_t i7 = v689 * *(int *)(v614 + 44); i7; --i7)
                                {
                                  _H1 = *(_WORD *)v698;
                                  __asm { FCVT            S1, H1 }
                                  _S1 = (float)((float)v697 / (float)(int)v1253) * _S1;
                                  __asm { FCVT            H1, S1 }
                                  *(_WORD *)v698 = LOWORD(_S1);
                                  v698 = (void *)((char *)v698 + 2);
                                }
                              }
                              memset(v1366, 0, 24);
                              sub_25B40EE6C(v1366, v1390[0].__locale_, (uint64_t)v1390[1].__locale_, (v1390[1].__locale_ - v1390[0].__locale_) >> 4);
                              if (v617)
                              {
                                *(float64x2_t *)id v1273 = v617[8];
                                *((void *)&v704 + 1) = *(void *)&v617[8].f64[1];
                                float64x2_t v1281 = v617[7];
                                *(float64_t *)&long long v704 = v617[6].f64[0];
                                *(_OWORD *)objb = v704;
                                int8x16_t v1290 = (int8x16_t)v617[5];
                                unint64_t v705 = vextq_s8(v1290, v1290, 8uLL).u64[0];
                              }
                              else
                              {
                                v1290.i64[0] = 0;
                                *(_OWORD *)id v1273 = 0u;
                                float64x2_t v1281 = 0u;
                                unint64_t v705 = 0;
                                *(void *)&long long v703 = 0;
                                *(_OWORD *)objb = v703;
                              }
                              v706 = (float32x2_t *)*((void *)&v1366[0] + 1);
                              v707 = *(float32x2_t **)&v1366[0];
                              if (*(void *)&v1366[0] == *((void *)&v1366[0] + 1))
                              {
                                uint64_t v708 = 0;
                                if (!*(void *)&v1366[0]) {
                                  goto LABEL_650;
                                }
                              }
                              else
                              {
                                uint64_t v708 = 0;
                                v709 = 0;
                                unint64_t v710 = 0;
                                *(void *)&v711.f64[0] = v1290.i64[0];
                                *(void *)&v711.f64[1] = v705;
                                float64x2_t v1291 = v711;
                                do
                                {
                                  v711.f64[0] = v707[1].f32[0];
                                  float64x2_t v711 = vmulq_f64(*(float64x2_t *)objb, vaddq_f64(*(float64x2_t *)v1273, v711));
                                  int64x2_t v712 = vcvtq_s64_f64(vrndaq_f64(vmulq_f64(v1291, vaddq_f64(v1281, vcvtq_f64_f32(*v707)))));
                                  *(int32x2_t *)v712.int i8 = vmovn_s64(v712);
                                  v712.i32[2] = llround(v711.f64[0]);
                                  if ((unint64_t)v709 >= v710)
                                  {
                                    int64x2_t v1258 = v712;
                                    uint64_t v714 = v709 - v708;
                                    unint64_t v715 = v714 + 1;
                                    if ((unint64_t)(v714 + 1) >> 60) {
                                      sub_25B3FBC4C();
                                    }
                                    if ((uint64_t)(v710 - (void)v708) >> 3 > v715) {
                                      unint64_t v715 = (uint64_t)(v710 - (void)v708) >> 3;
                                    }
                                    if (v710 - (unint64_t)v708 >= 0x7FFFFFFFFFFFFFF0) {
                                      unint64_t v716 = 0xFFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v716 = v715;
                                    }
                                    if (v716) {
                                      unint64_t v716 = (unint64_t)sub_25B3FFAEC(v716);
                                    }
                                    else {
                                      uint64_t v717 = 0;
                                    }
                                    v718 = (int32x4_t *)(v716 + 16 * v714);
                                    int32x4_t *v718 = (int32x4_t)v1258;
                                    uint64_t v713 = v718 + 1;
                                    while (v709 != v708)
                                    {
                                      int32x4_t v719 = v709[-1];
                                      --v709;
                                      v718[-1] = v719;
                                      --v718;
                                    }
                                    unint64_t v710 = v716 + 16 * v717;
                                    if (v708) {
                                      operator delete(v708);
                                    }
                                    uint64_t v708 = v718;
                                  }
                                  else
                                  {
                                    int32x4_t *v709 = (int32x4_t)v712;
                                    uint64_t v713 = v709 + 1;
                                  }
                                  v707 += 2;
                                  v709 = v713;
                                }
                                while (v707 != v706);
                                v707 = *(float32x2_t **)&v1366[0];
                                if (!*(void *)&v1366[0]) {
                                  goto LABEL_650;
                                }
                              }
                              *((void *)&v1366[0] + 1) = v707;
                              operator delete(v707);
LABEL_650:
                              unint64_t v720 = vsubq_s32(v708[1], *v708).u64[0];
                              if (v617) {
                                int v721 = HIDWORD(v617[1].f64[1]);
                              }
                              else {
                                int v721 = 0;
                              }
                              int v722 = v720;
                              int v723 = HIDWORD(v708->i64[0]) + *(_OWORD *)v708 * v721;
                              if (*(void *)(v614 + 56))
                              {
                                unint64_t v724 = 0;
                                size_t v725 = 2 * SHIDWORD(v720);
                                do
                                {
                                  BOOL v726 = sub_25B4FD95C(*(void **)(v614 + 8), v724);
                                  unint64_t v727 = sub_25B4FD95C(*(void **)(v614 + 16), v724);
                                  if (v722 >= 1)
                                  {
                                    unint64_t v728 = v727;
                                    for (int i8 = 0; i8 != v722; ++i8)
                                    {
                                      if (v617) {
                                        int v730 = HIDWORD(v617[1].f64[1]);
                                      }
                                      else {
                                        int v730 = 0;
                                      }
                                      memcpy((char *)v726 + 2 * v723 + 2 * v730 * i8, (char *)v728 + 2 * v723 + 2 * v730 * i8, v725);
                                    }
                                  }
                                  ++v724;
                                }
                                while (*(void *)(v614 + 56) > v724);
                              }
                              else
                              {
                                size_t v725 = 2 * SHIDWORD(v720);
                              }
                              for (unint64_t i9 = 0; ; ++i9)
                              {
                                uint64_t v732 = *(void **)(v614 + 72);
                                if (!v732 || v732[7] <= i9) {
                                  break;
                                }
                                v733 = sub_25B4FD95C(v732, i9);
                                unint64_t v734 = sub_25B4FD95C(*(void **)(v614 + 80), i9);
                                if (v722 >= 1)
                                {
                                  uint8x8_t v735 = v734;
                                  for (int i10 = 0; i10 != v722; ++i10)
                                  {
                                    if (v617) {
                                      int v737 = HIDWORD(v617[1].f64[1]);
                                    }
                                    else {
                                      int v737 = 0;
                                    }
                                    memcpy((char *)v733 + 2 * v723 + 2 * v737 * i10, (char *)v735 + 2 * v723 + 2 * v737 * i10, v725);
                                  }
                                }
                              }
                              for (unint64_t i11 = 0; ; ++i11)
                              {
                                v739 = *(void **)(v614 + 88);
                                if (!v739 || v739[7] <= i11) {
                                  break;
                                }
                                unint64_t v740 = sub_25B4FD95C(v739, i11);
                                v741 = sub_25B4FD95C(*(void **)(v614 + 96), i11);
                                if (v722 >= 1)
                                {
                                  v742 = v741;
                                  for (int i12 = 0; i12 != v722; ++i12)
                                  {
                                    if (v617) {
                                      int v744 = HIDWORD(v617[1].f64[1]);
                                    }
                                    else {
                                      int v744 = 0;
                                    }
                                    memcpy((char *)v740 + 2 * v723 + 2 * v744 * i12, (char *)v742 + 2 * v723 + 2 * v744 * i12, v725);
                                  }
                                }
                              }
                              uint64_t v745 = *(void *)(v614 + 8);
                              if (v745 && *(void *)(v745 + 64) == 1) {
                                v746 = *(__CVBuffer **)(v745 + 8);
                              }
                              else {
                                v746 = 0;
                              }
                              CVPixelBufferUnlockBaseAddress(v746, 0);
                              uint64_t v747 = *(void *)(v614 + 16);
                              if (v747 && *(void *)(v747 + 64) == 1) {
                                v748 = *(__CVBuffer **)(v747 + 8);
                              }
                              else {
                                v748 = 0;
                              }
                              CVPixelBufferUnlockBaseAddress(v748, 0);
                              uint64_t v749 = *(void *)(v614 + 72);
                              if (v749 && *(void *)(v749 + 64) == 1) {
                                uint64_t v750 = *(__CVBuffer **)(v749 + 8);
                              }
                              else {
                                uint64_t v750 = 0;
                              }
                              CVPixelBufferUnlockBaseAddress(v750, 0);
                              uint64_t v751 = *(void *)(v614 + 80);
                              if (v751 && *(void *)(v751 + 64) == 1) {
                                unint64_t v752 = *(__CVBuffer **)(v751 + 8);
                              }
                              else {
                                unint64_t v752 = 0;
                              }
                              CVPixelBufferUnlockBaseAddress(v752, 0);
                              uint64_t v753 = *(void *)(v614 + 88);
                              if (v753 && *(void *)(v753 + 64) == 1) {
                                unint64_t v754 = *(__CVBuffer **)(v753 + 8);
                              }
                              else {
                                unint64_t v754 = 0;
                              }
                              CVPixelBufferUnlockBaseAddress(v754, 0);
                              uint64_t v755 = *(void *)(v614 + 96);
                              if (v755 && *(void *)(v755 + 64) == 1) {
                                unint64_t v756 = *(__CVBuffer **)(v755 + 8);
                              }
                              else {
                                unint64_t v756 = 0;
                              }
                              CVPixelBufferUnlockBaseAddress(v756, 0);
                              operator delete(v708);
                              if (v1390[0].__locale_) {
                                operator delete(v1390[0].__locale_);
                              }
                              long long v649 = (void *)buf[0];
                              LODWORD(v757) = v1248;
                              LODWORD(v758) = v1253;
                              goto LABEL_737;
                            }
LABEL_568:
                            v642[5] = (int)v644;
                            v642[6] = (int)v644;
                            v642[7] = 1;
                            sub_25B4FDAAC((uint64_t)v642);
                            sub_25B4FDBCC((size_t)v642, v654);
                            memset(buf, 0, 24);
                            if (!v617) {
                              goto LABEL_569;
                            }
                            goto LABEL_561;
                          }
                          if (v643)
                          {
                            LODWORD(v644) = 0;
                            goto LABEL_568;
                          }
                        }
                        else if (v617)
                        {
                          goto LABEL_560;
                        }
                        memset(buf, 0, 24);
                        goto LABEL_569;
                      }
                      LODWORD(v640) = 0;
                    }
                    v638[5] = (int)v640;
                    v638[6] = (int)v640;
                    v638[7] = 1;
                    sub_25B4FDAAC((uint64_t)v638);
                    sub_25B4FDBCC((size_t)v638, v641);
                    goto LABEL_557;
                  }
                  LODWORD(v635) = 0;
                  uint64_t v636 = 0;
                }
                *(void *)(v633 + 40) = v636;
                *(void *)(v633 + 48) = (int)v635;
                sub_25B4FDAAC(v633);
                sub_25B4FDBCC(v633, v637);
                goto LABEL_553;
              }
              LODWORD(v630) = 0;
              uint64_t v631 = 0;
            }
            *(void *)(v628 + 40) = v631;
            *(void *)(v628 + 48) = (int)v630;
            sub_25B4FDAAC(v628);
            sub_25B4FDBCC(v628, v632);
            goto LABEL_548;
          }
          LODWORD(v625) = 0;
          uint64_t v626 = 0;
        }
        *(void *)(v623 + 40) = v626;
        *(void *)(v623 + 48) = (int)v625;
        sub_25B4FDAAC(v623);
        sub_25B4FDBCC(v623, v627);
        goto LABEL_543;
      }
      BOOL v557 = v539[1].i32[0] >= 0;
    }
    else
    {
      BOOL v557 = 1;
    }
    float32x4_t v558 = vsubq_f32(*(float32x4_t *)v1236, v1257);
    BOOL v559 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v558, v558))) <= *(float *)&v1238.i32[1] && v507;
    if (v559 && (v551 || v553) && v557)
    {
      uint64_t v560 = *(void *)(v358 + 8);
      if (v560)
      {
        *(unsigned char *)(v560 + 8) = 0;
        uint64_t v561 = *(void *)(v358 + 8);
        ++*(_DWORD *)(v358 + 64);
        if (v561)
        {
          *(float *)(v561 + 36) = v457;
          uint64_t v562 = *(void *)(v358 + 8);
          if (v562) {
            *(float *)(v562 + 40) = v459;
          }
        }
      }
      else
      {
        ++*(_DWORD *)(v358 + 64);
      }
      operator delete(v539);
      operator delete(v529);
      goto LABEL_525;
    }
    goto LABEL_486;
  }
  id v1250 = (id *)v353;
  objc_msgSend_render((void *)v1240, v355, v356);
  float32x4_t v372 = (id *)objc_claimAutoreleasedReturnValue();
  sub_25B4D4874(v372);
  uint64_t v373 = (id *)objc_claimAutoreleasedReturnValue();

  if (v373)
  {
    long long v1348 = 0u;
    long long v1349 = 0u;
    long long v1346 = 0u;
    long long v1347 = 0u;
    id v374 = v373[3];
    uint64_t v377 = objc_msgSend_countByEnumeratingWithState_objects_count_(v374, v375, (uint64_t)&v1346, buf, 16);
    if (v377)
    {
      uint64_t v378 = *(void *)v1347;
      do
      {
        for (uint64_t i13 = 0; i13 != v377; ++i13)
        {
          if (*(void *)v1347 != v378) {
            objc_enumerationMutation(v374);
          }
          uint64_t v380 = *(void *)(*((void *)&v1346 + 1) + 8 * i13);
          if (v380) {
            *(unsigned char *)(v380 + 105) = 2;
          }
        }
        uint64_t v377 = objc_msgSend_countByEnumeratingWithState_objects_count_(v374, v376, (uint64_t)&v1346, buf, 16);
      }
      while (v377);
    }

    long long v1344 = 0u;
    long long v1345 = 0u;
    long long v1342 = 0u;
    long long v1343 = 0u;
    id v381 = v373[6];
    uint64_t v384 = objc_msgSend_countByEnumeratingWithState_objects_count_(v381, v382, (uint64_t)&v1342, v1390, 16);
    if (v384)
    {
      uint64_t v385 = *(void *)v1343;
      do
      {
        for (uint64_t i14 = 0; i14 != v384; ++i14)
        {
          if (*(void *)v1343 != v385) {
            objc_enumerationMutation(v381);
          }
          uint64_t v387 = *(void *)(*((void *)&v1342 + 1) + 8 * i14);
          if (v387) {
            *(unsigned char *)(v387 + 105) = 2;
          }
        }
        uint64_t v384 = objc_msgSend_countByEnumeratingWithState_objects_count_(v381, v383, (uint64_t)&v1342, v1390, 16);
      }
      while (v384);
    }

    long long v1340 = 0u;
    memset(v1341, 0, sizeof(v1341));
    id v388 = v373[5];
    uint64_t v391 = objc_msgSend_countByEnumeratingWithState_objects_count_(v388, v389, (uint64_t)&v1340, v1366, 16);
    if (v391)
    {
      uint64_t v392 = *(void *)v1341[0];
      do
      {
        for (uint64_t i15 = 0; i15 != v391; ++i15)
        {
          if (*(void *)v1341[0] != v392) {
            objc_enumerationMutation(v388);
          }
          uint64_t v394 = *(void *)(*((void *)&v1340 + 1) + 8 * i15);
          if (v394) {
            *(unsigned char *)(v394 + 105) = 2;
          }
        }
        uint64_t v391 = objc_msgSend_countByEnumeratingWithState_objects_count_(v388, v390, (uint64_t)&v1340, v1366, 16);
      }
      while (v391);
    }

    long long v1338 = 0u;
    long long v1339 = 0u;
    long long v1336 = 0u;
    long long v1337 = 0u;
    id v395 = v373[4];
    uint64_t v398 = objc_msgSend_countByEnumeratingWithState_objects_count_(v395, v396, (uint64_t)&v1336, &v1394, 16);
    if (v398)
    {
      uint64_t v399 = *(void *)v1337;
      do
      {
        for (uint64_t i16 = 0; i16 != v398; ++i16)
        {
          if (*(void *)v1337 != v399) {
            objc_enumerationMutation(v395);
          }
          uint64_t v401 = *(void *)(*((void *)&v1336 + 1) + 8 * i16);
          if (v401) {
            *(unsigned char *)(v401 + 105) = 2;
          }
        }
        uint64_t v398 = objc_msgSend_countByEnumeratingWithState_objects_count_(v395, v397, (uint64_t)&v1336, &v1394, 16);
      }
      while (v398);
    }

    long long v1334 = 0u;
    long long v1335 = 0u;
    long long v1332 = 0u;
    long long v1333 = 0u;
    id v402 = v373[7];
    uint64_t v405 = objc_msgSend_countByEnumeratingWithState_objects_count_(v402, v403, (uint64_t)&v1332, v1393, 16);
    if (v405)
    {
      uint64_t v406 = *(void *)v1333;
      do
      {
        for (uint64_t i17 = 0; i17 != v405; ++i17)
        {
          if (*(void *)v1333 != v406) {
            objc_enumerationMutation(v402);
          }
          uint64_t v408 = *(void *)(*((void *)&v1332 + 1) + 8 * i17);
          if (v408) {
            *(unsigned char *)(v408 + 105) = 2;
          }
        }
        uint64_t v405 = objc_msgSend_countByEnumeratingWithState_objects_count_(v402, v404, (uint64_t)&v1332, v1393, 16);
      }
      while (v405);
    }

    long long v1330 = 0u;
    long long v1331 = 0u;
    long long v1328 = 0u;
    long long v1329 = 0u;
    id v409 = v373[9];
    uint64_t v412 = objc_msgSend_countByEnumeratingWithState_objects_count_(v409, v410, (uint64_t)&v1328, &v1362, 16);
    if (v412)
    {
      uint64_t v413 = *(void *)v1329;
      do
      {
        for (uint64_t i18 = 0; i18 != v412; ++i18)
        {
          if (*(void *)v1329 != v413) {
            objc_enumerationMutation(v409);
          }
          uint64_t v415 = *(void *)(*((void *)&v1328 + 1) + 8 * i18);
          if (v415) {
            *(unsigned char *)(v415 + 105) = 2;
          }
        }
        uint64_t v412 = objc_msgSend_countByEnumeratingWithState_objects_count_(v409, v411, (uint64_t)&v1328, &v1362, 16);
      }
      while (v412);
    }

    long long v1326 = 0u;
    long long v1327 = 0u;
    long long v1324 = 0u;
    long long v1325 = 0u;
    id v416 = v373[11];
    uint64_t v419 = objc_msgSend_countByEnumeratingWithState_objects_count_(v416, v417, (uint64_t)&v1324, &v1358, 16);
    if (v419)
    {
      uint64_t v420 = *(void *)v1325;
      do
      {
        for (uint64_t i19 = 0; i19 != v419; ++i19)
        {
          if (*(void *)v1325 != v420) {
            objc_enumerationMutation(v416);
          }
          uint64_t v422 = *(void *)(*((void *)&v1324 + 1) + 8 * i19);
          if (v422) {
            *(unsigned char *)(v422 + 105) = 2;
          }
        }
        uint64_t v419 = objc_msgSend_countByEnumeratingWithState_objects_count_(v416, v418, (uint64_t)&v1324, &v1358, 16);
      }
      while (v419);
    }

    long long v1323 = 0u;
    long long v1321 = 0u;
    long long v1322 = 0u;
    long long v1320 = 0u;
    id v423 = v373[12];
    uint64_t v426 = objc_msgSend_countByEnumeratingWithState_objects_count_(v423, v424, (uint64_t)&v1320, &v1354, 16);
    if (v426)
    {
      uint64_t v427 = *(void *)v1321;
      do
      {
        for (uint64_t i20 = 0; i20 != v426; ++i20)
        {
          if (*(void *)v1321 != v427) {
            objc_enumerationMutation(v423);
          }
          uint64_t v429 = *(void *)(*((void *)&v1320 + 1) + 8 * i20);
          if (v429) {
            *(unsigned char *)(v429 + 105) = 2;
          }
        }
        uint64_t v426 = objc_msgSend_countByEnumeratingWithState_objects_count_(v423, v425, (uint64_t)&v1320, &v1354, 16);
      }
      while (v426);
    }

    long long v1318 = 0u;
    long long v1319 = 0u;
    long long v1316 = 0u;
    long long v1317 = 0u;
    id v430 = v373[13];
    uint64_t v433 = objc_msgSend_countByEnumeratingWithState_objects_count_(v430, v431, (uint64_t)&v1316, &v1350, 16);
    if (v433)
    {
      uint64_t v434 = *(void *)v1317;
      do
      {
        for (uint64_t i21 = 0; i21 != v433; ++i21)
        {
          if (*(void *)v1317 != v434) {
            objc_enumerationMutation(v430);
          }
          uint64_t v436 = *(void *)(*((void *)&v1316 + 1) + 8 * i21);
          if (v436) {
            *(unsigned char *)(v436 + 105) = 2;
          }
        }
        uint64_t v433 = objc_msgSend_countByEnumeratingWithState_objects_count_(v430, v432, (uint64_t)&v1316, &v1350, 16);
      }
      while (v433);
    }

    uint64_t v351 = v1240;
  }
  kdebug_trace();
  sub_25B5A14F4(*(float32x2_t **)(v351 + 128), v373, v1233, 0, 0, 0);
  float v437 = (RSFloorPlan *)objc_claimAutoreleasedReturnValue();

  kdebug_trace();
  v1235 = v437;
  if (*(unsigned char *)(v351 + 184))
  {
    float v440 = objc_msgSend_dictionaryRepresentation(v437, v438, v439);
    objc_msgSend_setObject_forKeyedSubscript_(v1237, v441, (uint64_t)v440, @"no_temporal_update");
  }
LABEL_1215:

  sub_25B400F2C((uint64_t)&v1314);

  return v1235;
}

void sub_25B42725C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *__p,void *a27,void *a28,void *a29,void *a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,_Unwind_Exception *exception_object,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_25B400F2C((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_25B427F94()
{
  unint64_t v0 = @"fp_earlyout_windowDoorDetect";
  uint8x8_t v3 = objc_msgSend_standardUserDefaults(MEMORY[0x263EFFA40], v1, v2);
  uint64_t v5 = objc_msgSend_BOOLForKey_(v3, v4, @"fp_earlyout_windowDoorDetect");

  return v5;
}

void sub_25B427FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B428018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270F9A6D0](a2, sel_compare_, a3);
}

void sub_25B428320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_25B42841C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    id v154 = v3;
    id v5 = v3;
    uint64_t v164 = v4;
    if (v4)
    {
      int v182 = 4992;
      uint64_t v183 = 0;
      kdebug_trace();
      long long v179 = 0;
      long long v180 = 0;
      unint64_t v181 = 0;
      uint64_t v8 = (__CVBuffer *)objc_msgSend_depthBuffer(v5, v6, v7);
      int64_t Width = CVPixelBufferGetWidth(v8);
      uint64_t v11 = (__CVBuffer *)objc_msgSend_depthBuffer(v5, v9, v10);
      size_t Height = CVPixelBufferGetHeight(v11);
      if (Height * Width)
      {
        size_t v147 = Height * Width;
        sub_25B559090((void **)&v179, Height * Width);
        long long v177 = (__CVBuffer *)objc_msgSend_depthBuffer(v5, v13, v14);
        CVPixelBufferLockBaseAddress(v177, 1uLL);
        int v15 = CVPixelBufferGetWidth(v177);
        int v178 = CVPixelBufferGetHeight(v177);
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(v177);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v177);
        uint64_t v155 = v5;
        size_t v162 = Height;
        if (Height)
        {
          size_t v165 = BytesPerRow;
          uint64_t v169 = BaseAddress;
          unint64_t v20 = 0;
          unint64_t v21 = v181;
          uint64_t v22 = v179;
          do
          {
            if (Width)
            {
              unint64_t v23 = 0;
              uint64_t v24 = (int)(float)v20;
              do
              {
                int v25 = (int)(float)v23;
                int v26 = 0;
                if ((v25 & 0x80000000) == 0 && v15 > v25 && (v24 & 0x80000000) == 0 && v178 > (int)v24) {
                  int v26 = *(_DWORD *)&v169[4 * v25 + v165 * v24];
                }
                BOOL v27 = (float *)v180;
                if ((unint64_t)v180 >= v21)
                {
                  uint64_t v29 = (v180 - (char *)v22) >> 2;
                  unint64_t v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62)
                  {
                    long long v179 = v22;
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v21 - (void)v22) >> 1 > v30) {
                    unint64_t v30 = (uint64_t)(v21 - (void)v22) >> 1;
                  }
                  if (v21 - (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v31 = v30;
                  }
                  if (v31) {
                    unint64_t v31 = (unint64_t)sub_25B3FBC64(v31);
                  }
                  else {
                    uint64_t v18 = 0;
                  }
                  uint64_t v32 = (_DWORD *)(v31 + 4 * v29);
                  _DWORD *v32 = v26;
                  id v28 = (char *)(v32 + 1);
                  while (v27 != v22)
                  {
                    int v33 = *((_DWORD *)v27-- - 1);
                    *--uint64_t v32 = v33;
                  }
                  unint64_t v21 = v31 + 4 * (void)v18;
                  if (v22) {
                    operator delete(v22);
                  }
                  uint64_t v22 = (float *)v32;
                }
                else
                {
                  *(_DWORD *)long long v180 = v26;
                  id v28 = (char *)(v27 + 1);
                }
                long long v180 = v28;
                ++v23;
              }
              while (v23 != Width);
            }
            ++v20;
          }
          while (v20 != v162);
          unint64_t v181 = v21;
          long long v179 = v22;
          id v5 = v155;
        }
        uint64_t v34 = (__CVBuffer *)objc_msgSend_semanticLabelBuffer(v5, v18, v19, v147);
        size_t v35 = CVPixelBufferGetWidth(v34);
        uint64_t v38 = (__CVBuffer *)objc_msgSend_semanticLabelBuffer(v5, v36, v37);
        size_t v166 = CVPixelBufferGetHeight(v38);
        pixelBuffer = (__CVBuffer *)objc_msgSend_semanticLabelBuffer(v5, v39, v40);
        CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
        int v175 = CVPixelBufferGetWidth(pixelBuffer);
        int v176 = CVPixelBufferGetHeight(pixelBuffer);
        int v41 = (unsigned __int8 *)CVPixelBufferGetBaseAddress(pixelBuffer);
        size_t v44 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        unint64_t v45 = v166 * v35;
        if (v166 * v35)
        {
          if (v45 >> 62) {
            sub_25B3FBC4C();
          }
          uint64_t v46 = (char *)sub_25B3FBC64(v45);
          size_t v47 = &v46[4 * (void)v42];
        }
        else
        {
          uint64_t v46 = 0;
          size_t v47 = 0;
        }
        if (v166)
        {
          size_t v156 = v44;
          uint64_t v159 = v41;
          unint64_t v48 = 0;
          uint64_t v49 = v46;
          do
          {
            unint64_t v170 = v48;
            if (v35)
            {
              unint64_t v50 = 0;
              uint64_t v51 = (int)(float)v48;
              do
              {
                int v52 = 0;
                int v53 = (int)(float)v50;
                if ((v53 & 0x80000000) == 0 && v175 > v53 && (v51 & 0x80000000) == 0 && v176 > (int)v51) {
                  int v52 = v159[v156 * v51 + v53];
                }
                if (v46 >= v47)
                {
                  uint64_t v55 = (v46 - v49) >> 2;
                  unint64_t v56 = v55 + 1;
                  if ((unint64_t)(v55 + 1) >> 62) {
                    sub_25B3FBC4C();
                  }
                  if ((v47 - v49) >> 1 > v56) {
                    unint64_t v56 = (v47 - v49) >> 1;
                  }
                  if ((unint64_t)(v47 - v49) >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v57 = v56;
                  }
                  if (v57) {
                    unint64_t v57 = (unint64_t)sub_25B3FBC64(v57);
                  }
                  else {
                    uint64_t v42 = 0;
                  }
                  uint64_t v58 = (char *)(v57 + 4 * v55);
                  *(_DWORD *)uint64_t v58 = v52;
                  long long v54 = v58 + 4;
                  while (v46 != v49)
                  {
                    int v59 = *((_DWORD *)v46 - 1);
                    v46 -= 4;
                    *((_DWORD *)v58 - 1) = v59;
                    v58 -= 4;
                  }
                  size_t v47 = (char *)(v57 + 4 * (void)v42);
                  if (v49) {
                    operator delete(v49);
                  }
                  uint64_t v49 = v58;
                }
                else
                {
                  *(_DWORD *)uint64_t v46 = v52;
                  long long v54 = v46 + 4;
                }
                ++v50;
                uint64_t v46 = v54;
              }
              while (v50 != v35);
            }
            else
            {
              long long v54 = v46;
            }
            unint64_t v48 = v170 + 1;
            uint64_t v46 = v54;
          }
          while (v170 + 1 != v166);
        }
        else
        {
          long long v54 = v46;
          uint64_t v49 = v46;
        }
        id v60 = objc_msgSend_camera(v155, v42, v43);
        objc_msgSend_imageResolution(v60, v61, v62);
        double v64 = v63;

        uint64_t v67 = objc_msgSend_camera(v155, v65, v66);
        objc_msgSend_intrinsics(v67, v68, v69);
        v70.i32[3] = 0;
        v71.i32[3] = 0;
        simd_float4 v157 = v70;
        simd_float4 v160 = v71;
        v72.i32[3] = 0;
        simd_float4 v167 = v72;

        v191.columns[0] = v157;
        v191.columns[1] = v160;
        v191.columns[2] = v167;
        v191.columns[3] = (simd_float4)xmmword_25B5F12B0;
        simd_float4x4 v192 = __invert_f4(v191);
        float32x4_t v168 = (float32x4_t)v192.columns[0];
        float32x4_t v158 = (float32x4_t)v192.columns[2];
        float32x4_t v161 = (float32x4_t)v192.columns[1];
        float32x4_t v153 = (float32x4_t)v192.columns[3];
        uint64_t v149 = objc_msgSend_camera(v155, v73, v74);
        objc_msgSend_pose(v149, v75, v76);
        float32x4_t v151 = v78;
        float32x4_t v152 = v77;
        float32x4_t v150 = v79;
        float32x4_t v171 = v80;
        if (v54 == v49)
        {
          uint64_t v83 = 0;
          unint64_t v82 = 0;
        }
        else
        {
          unint64_t v81 = 0;
          unint64_t v82 = 0;
          uint64_t v83 = 0;
          unint64_t v84 = 0;
          do
          {
            if (*(_DWORD *)&v49[4 * v84] == 10)
            {
              float v85 = (float)((int)v84 % (int)Width);
              float v86 = (float)((int)v84 / (int)Width);
              if (v82 >= v81)
              {
                unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - (void)v83) >> 2) + 1;
                if (v87 > 0x1555555555555555) {
                  sub_25B3FBC4C();
                }
                if (0x5555555555555556 * ((uint64_t)(v81 - (void)v83) >> 2) > v87) {
                  unint64_t v87 = 0x5555555555555556 * ((uint64_t)(v81 - (void)v83) >> 2);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (void)v83) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v88 = 0x1555555555555555;
                }
                else {
                  unint64_t v88 = v87;
                }
                if (v88) {
                  unint64_t v88 = (unint64_t)sub_25B478C4C(v88);
                }
                else {
                  uint64_t v89 = 0;
                }
                unint64_t v90 = v88 + 4 * ((uint64_t)(v82 - (void)v83) >> 2);
                *(float *)unint64_t v90 = v85;
                *(float *)(v90 + 4) = v86;
                *(_DWORD *)(v90 + 8) = -1;
                id v91 = (_DWORD *)v90;
                while ((void *)v82 != v83)
                {
                  uint64_t v92 = *(void *)(v82 - 12);
                  v82 -= 12;
                  int v93 = *(_DWORD *)(v82 + 8);
                  *(void *)(v91 - 3) = v92;
                  v91 -= 3;
                  v91[2] = v93;
                }
                unint64_t v81 = v88 + 12 * v89;
                unint64_t v82 = v90 + 12;
                if (v83) {
                  operator delete(v83);
                }
                uint64_t v83 = v91;
              }
              else
              {
                *(float *)unint64_t v82 = v85;
                *(float *)(v82 + 4) = v86;
                *(_DWORD *)(v82 + 8) = -1;
                v82 += 12;
              }
            }
            ++v84;
          }
          while (v84 < (v54 - v49) >> 2);
        }
        unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - (void)v83) >> 2);
        if (v94 >= 0x258)
        {
          uint64_t v185 = 0;
          uint64_t v186 = 0;
          long long v184 = 0;
          sub_25B58B28C(&v184, v83, v82, v94);
          sub_25B58B308((uint64_t)&v187, 600, (uint64_t)&v184, 20.0);
          if (v184)
          {
            uint64_t v185 = v184;
            operator delete(v184);
          }
          sub_25B573834((uint64_t)&v187);
          int v97 = v189;
          if (v189 < 1)
          {
            uint64_t v95 = 0;
            int v96 = 0;
          }
          else
          {
            uint64_t v95 = 0;
            int v96 = 0;
            uint64_t v98 = 0;
            float v99 = v64 / (double)Width;
            int v100 = Width - 1;
            int v101 = v162 - 1;
            uint64_t v102 = (int)Width;
            int v103 = 1;
            do
            {
              long long v104 = v187;
              if (v187 != v188)
              {
                int v105 = 0;
                float v106 = 0.0;
                float v107 = 0.0;
                do
                {
                  if (*((_DWORD *)v104 + 2) == v103)
                  {
                    ++v105;
                    float v107 = v107 + *v104;
                    float v106 = v106 + v104[1];
                  }
                  v104 += 3;
                }
                while (v104 != v188);
                if (v105)
                {
                  float v108 = v107 / (float)v105;
                  int v109 = vcvtms_s32_f32(v108);
                  uint64_t v110 = v109 <= 10 ? 10 : v109;
                  LODWORD(v111) = v109 + 10;
                  uint64_t v111 = (int)v111 >= v100 ? v100 : v111;
                  if ((int)v110 - 10 < (int)v111)
                  {
                    int v112 = 0;
                    float v113 = v106 / (float)v105;
                    int v114 = vcvtms_s32_f32(v113);
                    int v115 = v114 + 10;
                    if (v114 + 10 >= v101) {
                      int v115 = v101;
                    }
                    if (v114 <= 10) {
                      uint64_t v116 = 10;
                    }
                    else {
                      uint64_t v116 = v114;
                    }
                    int v117 = v116 - 10;
                    uint64_t v118 = v116 - 10;
                    uint64_t v119 = v110 - 10;
                    uint64_t v120 = v115 - v116 + 10;
                    uint64_t v121 = v119 + v102 * v118;
                    float v122 = 0.0;
                    do
                    {
                      uint64_t v123 = v121;
                      uint64_t v124 = v120;
                      if (v117 < v115)
                      {
                        do
                        {
                          if (v123 <= v148)
                          {
                            float v125 = v179[v123];
                            if (v125 > 0.0)
                            {
                              ++v112;
                              float v122 = v122 + v125;
                            }
                          }
                          v123 += v102;
                          --v124;
                        }
                        while (v124);
                      }
                      ++v119;
                      ++v121;
                    }
                    while (v119 != v111);
                    if (v112)
                    {
                      float32x4_t v126 = vaddq_f32(v153, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v168, (float)(v108 * v99) * (float)(v122 / (float)v112)), v161, (float)(v113 * v99) * (float)(v122 / (float)v112)), v158, v122 / (float)v112));
                      float32x4_t v127 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v152, v126.f32[0]), v151, *(float32x2_t *)v126.f32, 1), v150, v126, 2), v171, v126, 3);
                      if (fabsf(COERCE_FLOAT(vsubq_f32(v127, v171).i32[2])) <= 0.5)
                      {
                        if (v96 >= v98)
                        {
                          long long v128 = v95;
                          uint64_t v129 = ((char *)v96 - (char *)v95) >> 5;
                          unint64_t v130 = v129 + 1;
                          if ((unint64_t)(v129 + 1) >> 59) {
                            sub_25B3FBC4C();
                          }
                          float32x4_t v163 = v127;
                          int v173 = v101;
                          long long v131 = v128;
                          unint64_t v132 = (char *)v98 - (char *)v128;
                          unint64_t v133 = v98 - v128;
                          if (v133 > v130) {
                            unint64_t v130 = v133;
                          }
                          if (v132 >= 0x7FFFFFFFFFFFFFE0) {
                            unint64_t v134 = 0x7FFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v134 = v130;
                          }
                          if (v134 >> 59) {
                            sub_25B3FA70C();
                          }
                          float32x4_t v135 = (char *)operator new(32 * v134);
                          float32x4_t v136 = (float32x4_t *)&v135[32 * v129];
                          float32x4_t *v136 = v171;
                          v136[1] = v163;
                          if (v96 == v131)
                          {
                            uint64_t v95 = (float32x4_t *)&v135[32 * v129];
                          }
                          else
                          {
                            BOOL v137 = (float32x4_t *)&v135[32 * v129];
                            do
                            {
                              uint64_t v95 = v137 - 2;
                              float32x4_t v138 = v96[-1];
                              v137[-2] = v96[-2];
                              v137[-1] = v138;
                              v96 -= 2;
                              v137 -= 2;
                            }
                            while (v96 != v131);
                          }
                          uint64_t v98 = (float32x4_t *)&v135[32 * v134];
                          int v96 = v136 + 2;
                          if (v131) {
                            operator delete(v131);
                          }
                          int v101 = v173;
                        }
                        else
                        {
                          float32x4_t *v96 = v171;
                          v96[1] = v127;
                          v96 += 2;
                        }
                        int v97 = v189;
                      }
                    }
                  }
                }
              }
            }
            while (v103++ < v97);
          }
          if (v187)
          {
            uint64_t v188 = v187;
            operator delete(v187);
          }
        }
        else
        {
          uint64_t v95 = 0;
          int v96 = 0;
        }
        if (v83) {
          operator delete(v83);
        }

        if (v95 != v96)
        {
          int v140 = (double *)v95;
          do
          {
            uint64_t v141 = *(void **)(v164 + 8);
            uint64_t v142 = [RSMirrorPoint alloc];
            float v145 = objc_msgSend_initWithOrigin_reflect_(v142, v143, v144, *v140, v140[2]);
            objc_msgSend_addObject_(v141, v146, (uint64_t)v145);

            v140 += 4;
          }
          while (v140 != (double *)v96);
        }
        if (v95) {
          operator delete(v95);
        }
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
        id v5 = v155;
        if (v49) {
          operator delete(v49);
        }
        CVPixelBufferUnlockBaseAddress(v177, 1uLL);
        if (v179) {
          operator delete(v179);
        }
      }
      sub_25B400F2C((uint64_t)&v182);
    }

    id v3 = v154;
  }
}

void sub_25B428E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,CVPixelBufferRef a35,uint64_t a36,uint64_t a37,uint64_t a38,CVPixelBufferRef a39)
{
  size_t v44 = *(void **)(v42 - 160);
  if (v44)
  {
    *(void *)(v42 - 152) = v44;
    operator delete(v44);
  }
  if (v39) {
    operator delete(v39);
  }
  if (v41) {
    operator delete(v41);
  }

  sub_25B57A990(&a35);
  if (v40) {
    operator delete(v40);
  }
  sub_25B57A9C4(&a39);
  unint64_t v45 = *(void **)(v42 - 224);
  if (v45) {
    operator delete(v45);
  }
  sub_25B400F2C(v42 - 200);

  _Unwind_Resume(a1);
}

id **sub_25B428F7C(id **a1, void *a2, void *a3)
{
  id v5 = a2;
  id v8 = a3;
  if (a1)
  {
    uint64_t v9 = objc_msgSend_render(a1, v6, v7);
    uint64_t v10 = sub_25B400D94(a1[8]);
    sub_25B4D46DC((uint64_t)v9, v5, v8, v10);
    a1 = (id **)objc_claimAutoreleasedReturnValue();
  }

  return a1;
}

void sub_25B42902C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *sub_25B429050(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = objc_alloc_init(RSAsset);
    p_Class isa = (id *)&v2->super.isa;
    if (v2) {
      v2->_isCaptured = 1;
    }
    objc_msgSend_render((void *)a1, v3, v4);
    id v6 = (id *)objc_claimAutoreleasedReturnValue();
    uint64_t v7 = sub_25B4D4874(v6);
    uint64_t v10 = objc_msgSend_copy(v7, v8, v9);
    if (p_isa) {
      objc_storeStrong(p_isa + 2, v10);
    }

    uint64_t v13 = objc_msgSend_copy(*(void **)(a1 + 168), v11, v12);
    if (p_isa) {
      objc_storeStrong(p_isa + 5, v13);
    }

    uint64_t v16 = *(void *)(a1 + 48);
    if (v16)
    {
      id v17 = *(id *)(v16 + 8);
      unint64_t v20 = objc_msgSend_copy(v17, v18, v19);
    }
    else
    {
      id v17 = 0;
      unint64_t v20 = objc_msgSend_copy(0, v14, v15);
    }
    unint64_t v21 = v20;
    if (p_isa) {
      objc_storeStrong(p_isa + 3, v20);
    }
  }
  else
  {
    p_Class isa = 0;
  }

  return p_isa;
}

void sub_25B42916C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B429198(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a4;
  sub_25B42D2D0(a1, a2, a3, a4);
  uint64_t v516 = a1;
  uint64_t v7 = *(int64x2_t **)(a1 + 8);
  int32x4_t v526 = (uint64_t *)(a1 + 8);
  uint64_t v527 = v5;
  id v8 = *(int64x2_t **)(a1 + 16);
  if (v8 == v7) {
    goto LABEL_212;
  }
  unint64_t v9 = 0;
  uint64_t v10 = &v559;
  do
  {
    uint64_t i64 = (uint64_t)v7[7 * v9].i64;
    uint64_t v12 = (uint64_t *)(i64 + 32);
    uint64_t v11 = *(void *)(i64 + 32);
    int v507 = *(void *)(v11 + 8);
    int v506 = *(void *)(v11 + 40);
    int v13 = v507 - v506;
    if (v507 - v506 < 0) {
      int v13 = v506 - v507;
    }
    if ((float)((float)v13 * 0.03) <= 0.1) {
      goto LABEL_190;
    }
    float32x4_t v502 = (float *)&v7[7 * v9 + 3].i32[2];
    if (*v502 >= 0.3) {
      goto LABEL_190;
    }
    if (v9)
    {
      uint64_t v14 = &v7[7 * (v9 - 1)];
      uint64_t v16 = (int32x2_t *)v14[2].i64[0];
      uint64_t v15 = v14 + 2;
      int32x2_t v17 = (int32x2_t)vcvt_f32_s32(vzip1_s32(v16[1], v16[5]));
      BOOL v18 = fabsf(vsub_f32((float32x2_t)v17, (float32x2_t)vdup_lane_s32(v17, 1)).f32[0]) < 0.01
         || *(float *)&v15[1].i32[2] <= 0.5;
      uint64_t v19 = v7;
      if (!v18)
      {
        uint64_t v557 = (uint64_t)&unk_2708F1B38;
        v558[0] = 0;
        v558[4] = 0;
        v558[8] = 0;
        v558[12] = 0;
        v558[16] = 0;
        v558[20] = 0;
        v10[1] = 0;
        v10[2] = 0;
        *uint64_t v10 = 0;
        *((_DWORD *)v10 + 6) = 0;
        long long __src = 0u;
        long long v564 = 0u;
        long long v565 = 0u;
        uint64_t v567 = (uint64_t (***)())&unk_2708F21F8;
        memset(v568, 0, sizeof(v568));
        long long v569 = 0u;
        memset(v570, 0, 48);
        uint64_t v571 = 0;
        float32x4_t v572 = 0;
        __int16 v573 = 257;
        sub_25B55DAEC((int64x2_t *)&v557, v15->i64[0], *v12 + 32, (uint64_t)&v567);
        uint64_t v20 = *v12;
        int32x2_t v21 = v559[5];
        float v22 = (float)(int)*(void *)&v559[1];
        float32x2_t v23 = vcvt_f32_s32(vzip2_s32(v21, v559[1]));
        float v24 = (float)v21.i32[0];
        if (vabds_f32(v23.f32[0], v23.f32[1]) >= 0.000001) {
          float v25 = (float)((float)((float)((float)*(int *)(v20 + 12) - v23.f32[1]) * (float)(v24 - v22))
        }
                      / (float)(v23.f32[0] - v23.f32[1]))
              + v22;
        else {
          float v25 = (float)(v22 + v24) * 0.5;
        }
        uint64_t v26 = *(void *)(v20 + 8);
        uint64_t v567 = (uint64_t (***)())&unk_2708F21F8;
        if (v572)
        {
          int __pe = v26;
          sub_25B404120(v572);
          LODWORD(v26) = __pe;
        }
        float v27 = vabds_f32(v25, (float)(int)v26);
        sub_25B43AD88((uint64_t)&v557);
        if (v27 < 3.0) {
          goto LABEL_190;
        }
        uint64_t v19 = *(int64x2_t **)(v516 + 8);
        id v8 = *(int64x2_t **)(v516 + 16);
      }
    }
    else
    {
      uint64_t v19 = v7;
    }
    if ((uint64_t)v9 < (int)(-1 - 1227133513 * ((unint64_t)((char *)v8 - (char *)v19) >> 4)))
    {
      id v28 = &v19[7 * v9];
      unint64_t v30 = (int32x2_t *)v28[9].i64[0];
      uint64_t v29 = v28 + 9;
      int32x2_t v31 = (int32x2_t)vcvt_f32_s32(vzip1_s32(v30[1], v30[5]));
      if (fabsf(vsub_f32((float32x2_t)v31, (float32x2_t)vdup_lane_s32(v31, 1)).f32[0]) >= 0.01
        && *(float *)&v29[1].i32[2] > 0.5)
      {
        uint64_t v557 = (uint64_t)&unk_2708F1B38;
        v558[0] = 0;
        v558[4] = 0;
        v558[8] = 0;
        v558[12] = 0;
        v558[16] = 0;
        v558[20] = 0;
        v10[1] = 0;
        v10[2] = 0;
        *uint64_t v10 = 0;
        *((_DWORD *)v10 + 6) = 0;
        long long __src = 0u;
        long long v564 = 0u;
        long long v565 = 0u;
        uint64_t v567 = (uint64_t (***)())&unk_2708F21F8;
        memset(v568, 0, sizeof(v568));
        long long v569 = 0u;
        memset(v570, 0, 48);
        uint64_t v571 = 0;
        float32x4_t v572 = 0;
        __int16 v573 = 257;
        sub_25B55DAEC((int64x2_t *)&v557, *v12, v29->i64[0] + 32, (uint64_t)&v567);
        uint64_t v33 = *v12;
        int32x2_t v34 = v559[5];
        float v35 = (float)(int)*(void *)&v559[1];
        float32x2_t v36 = vcvt_f32_s32(vzip2_s32(v34, v559[1]));
        float v37 = (float)v34.i32[0];
        if (vabds_f32(v36.f32[0], v36.f32[1]) >= 0.000001) {
          float v38 = (float)((float)((float)((float)*(int *)(v33 + 44) - v36.f32[1]) * (float)(v37 - v35))
        }
                      / (float)(v36.f32[0] - v36.f32[1]))
              + v35;
        else {
          float v38 = (float)(v35 + v37) * 0.5;
        }
        uint64_t v39 = *(void *)(v33 + 40);
        uint64_t v567 = (uint64_t (***)())&unk_2708F21F8;
        if (v572)
        {
          int __pf = v39;
          sub_25B404120(v572);
          LODWORD(v39) = __pf;
        }
        float v40 = vabds_f32(v38, (float)(int)v39);
        sub_25B43AD88((uint64_t)&v557);
        if (v40 < 3.0) {
          goto LABEL_190;
        }
      }
    }
    uint64_t v567 = (uint64_t (***)())&unk_2708F1B38;
    LOBYTE(v568[0]) = 0;
    BYTE4(v568[0]) = 0;
    BYTE8(v568[0]) = 0;
    BYTE12(v568[0]) = 0;
    LOBYTE(v568[1]) = 0;
    BYTE4(v568[1]) = 0;
    long long v569 = 0uLL;
    *((void *)&v568[1] + 1) = 0;
    LODWORD(v570[0]) = 0;
    *((void *)&v41 + 1) = 0;
    memset(&v570[1], 0, 48);
    int v42 = *(_DWORD *)(v5 + 8);
    if (v42 < 1)
    {
      float v49 = 0.0;
    }
    else
    {
      unint64_t v43 = v9;
      int v44 = 0;
      float v45 = -3.4028e38;
      do
      {
        uint64_t i = (uint64_t)&off_2708F1B18;
        *(_DWORD *)&v548[8] = 0;
        *(void *)&v548[12] = -1;
        uint64_t v46 = *(void *)(*v12 + 8);
        LODWORD(v46) = v44;
        *(void *)uint64_t v548 = v46;
        int8x8_t v537 = &off_2708F1B18;
        *(_DWORD *)&v538[8] = 0;
        *(void *)&v538[12] = -1;
        uint64_t v47 = *(void *)(*v12 + 40);
        LODWORD(v47) = v44;
        *(void *)v538 = v47;
        uint64_t v557 = (uint64_t)&unk_2708F1B38;
        v558[0] = 0;
        v558[4] = 0;
        v558[8] = 0;
        v558[12] = 0;
        v558[16] = 0;
        v558[20] = 0;
        v10[1] = 0;
        v10[2] = 0;
        *uint64_t v10 = 0;
        *((_DWORD *)v10 + 6) = 0;
        long long __src = 0u;
        long long v564 = 0u;
        long long v565 = 0u;
        sub_25B55DAEC((int64x2_t *)&v557, (uint64_t)&i, (uint64_t)&v537, v5);
        float v48 = v562;
        if (v562 >= v45)
        {
          v568[0] = *(_OWORD *)v558;
          *(void *)((char *)v568 + 13) = *(void *)&v558[13];
          sub_25B43A898((char *)&v568[1] + 8, (uint64_t)v559, v560, (v560 - (uint64_t)v559) >> 5);
          *(float *)unint64_t v570 = v562;
          sub_25B3FE7A8((char *)&v570[1], (char *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((void *)&__src + 1) - __src) >> 2);
          sub_25B43AB10((char *)&v570[4], *((uint64_t *)&v564 + 1), v565, (uint64_t)(v565 - *((void *)&v564 + 1)) >> 4);
          float v45 = v48;
        }
        sub_25B43AD88((uint64_t)&v557);
        ++v44;
      }
      while (v42 != v44);
      float v49 = *(float *)v570;
      unint64_t v9 = v43;
    }
    if ((float)(v49 - *v502) > 0.1)
    {
      uint64_t v50 = *(void *)(*((void *)&v568[1] + 1) + 40);
      *(_DWORD *)(*v12 + 8) = *(void *)(*((void *)&v568[1] + 1) + 8);
      *(_DWORD *)(*v12 + 40) = v50;
      if (*(unsigned char *)(v5 + 137)) {
        goto LABEL_189;
      }
      goto LABEL_40;
    }
    uint64_t v51 = &v7[7 * v9];
    uint64_t v53 = v51[2].i64[1];
    int v52 = &v51[2].i64[1];
    uint64_t v54 = *v12;
    if ((unint64_t)(v53 - *v12) < 0x40) {
      goto LABEL_174;
    }
    uint64_t v56 = *(void *)(v516 + 8);
    uint64_t v55 = *(void *)(v516 + 16);
    if (v56 == v55) {
      goto LABEL_174;
    }
    unint64_t v57 = 0;
    unint64_t v58 = v9;
    int v59 = 0;
    unint64_t v60 = 0;
    int v61 = *(_DWORD *)(v54 + 12);
    int v503 = *(_DWORD *)(v54 + 44);
    unint64_t v492 = v58;
    uint64_t v62 = &v7[7 * v58];
    uint64_t v500 = &v62[4].i64[1];
    float v501 = (float **)&v62[4];
    uint64_t v496 = *(void *)(v516 + 16);
    float v497 = v52;
    int v498 = v61;
    uint64_t v499 = v10;
    do
    {
      double v63 = *(char **)(v56 + 32);
      double v64 = *(char **)(v56 + 40);
      unint64_t v65 = (v64 - v63) >> 5;
      if (v65 != (*v52 - *v12) >> 5) {
        goto LABEL_47;
      }
      uint64_t v66 = *(float **)(v56 + 64);
      uint64_t v67 = *(float **)(v56 + 72);
      unint64_t v68 = v67 - v66;
      uint64_t v69 = *v501;
      if (v68 != (*v500 - (uint64_t)*v501) >> 2 || vabds_f32(*(float *)(v56 + 56), *v502) > 0.000001) {
        goto LABEL_47;
      }
      if (v64 != v63)
      {
        if (v65 <= 1) {
          unint64_t v65 = 1;
        }
        unint64_t v88 = (float *)(*v12 + 24);
        uint64_t v89 = (float *)(v63 + 24);
        while (*((_DWORD *)v89 - 1) == *((_DWORD *)v88 - 1))
        {
          if (*(_DWORD *)v89 != *(_DWORD *)v88) {
            break;
          }
          if (vabds_f32(*(v89 - 2), *(v88 - 2)) > 0.000001) {
            break;
          }
          int32x2_t v90 = vceq_s32(*(int32x2_t *)(v89 - 4), *(int32x2_t *)(v88 - 4));
          if ((v90.i32[0] & v90.i32[1] & 1) == 0) {
            break;
          }
          v88 += 8;
          v89 += 8;
          if (!--v65) {
            goto LABEL_73;
          }
        }
LABEL_47:
        if (*(float *)(v56 + 56) > 0.3)
        {
          simd_float4 v70 = v12;
          unint64_t v71 = v60;
          int __p = v57;
          int v72 = *((_DWORD *)v63 + 3);
          int v73 = *((_DWORD *)v63 + 11);
          uint64_t v74 = operator new(4uLL);
          long long v75 = v74;
          int v76 = v61 - v72;
          if (v61 - v72 < 0) {
            int v76 = v72 - v61;
          }
          *uint64_t v74 = v76;
          float32x4_t v77 = (char *)sub_25B3FBC64(2uLL);
          float32x4_t v79 = v77;
          uint64_t v80 = v78;
          int v81 = v61 - v73;
          if (v61 - v73 < 0) {
            int v81 = v73 - v61;
          }
          unint64_t v82 = &v77[4 * v78];
          *((_DWORD *)v77 + 1) = v81;
          *(_DWORD *)float32x4_t v77 = *v75;
          operator delete(v75);
          if (v503 - v72 >= 0) {
            int v83 = v503 - v72;
          }
          else {
            int v83 = v72 - v503;
          }
          if (v80 < 3)
          {
            uint64_t v85 = 3;
            if ((unint64_t)((v82 - v79) >> 1) > 3) {
              uint64_t v85 = (v82 - v79) >> 1;
            }
            if ((unint64_t)(v82 - v79) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v86 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v86 = v85;
            }
            if (v86) {
              unint64_t v86 = (unint64_t)sub_25B3FBC64(v86);
            }
            else {
              uint64_t v87 = 0;
            }
            uint64_t v96 = 0;
            unint64_t v82 = (char *)(v86 + 4 * v87);
            *(_DWORD *)(v86 + 8) = v83;
            unint64_t v84 = (char *)(v86 + 12);
            do
            {
              *(_DWORD *)(v86 + 8 + v96 - 4) = *(_DWORD *)&v79[v96 + 4];
              v96 -= 4;
            }
            while (v96 != -8);
            int v97 = (char *)v86;
            operator delete(v79);
            float32x4_t v79 = v97;
          }
          else
          {
            *((_DWORD *)v79 + 2) = v83;
            unint64_t v84 = v79 + 12;
          }
          uint64_t v5 = v527;
          unint64_t v60 = v71;
          if (v503 - v73 >= 0) {
            int v98 = v503 - v73;
          }
          else {
            int v98 = v73 - v503;
          }
          uint64_t v12 = v70;
          if (v84 >= v82)
          {
            uint64_t v100 = (v84 - v79) >> 2;
            unint64_t v101 = v100 + 1;
            uint64_t v10 = v499;
            if ((unint64_t)(v100 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if ((v82 - v79) >> 1 > v101) {
              unint64_t v101 = (v82 - v79) >> 1;
            }
            if ((unint64_t)(v82 - v79) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v102 = v101;
            }
            if (v102) {
              unint64_t v102 = (unint64_t)sub_25B3FBC64(v102);
            }
            int v103 = (char *)(v102 + 4 * v100);
            *(_DWORD *)int v103 = v98;
            float v99 = v103 + 4;
            if (v84 == v79)
            {
              unint64_t v57 = __p;
            }
            else
            {
              unint64_t v57 = __p;
              do
              {
                int v104 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                *((_DWORD *)v103 - 1) = v104;
                v103 -= 4;
              }
              while (v84 != v79);
            }
            operator delete(v79);
            float32x4_t v79 = v103;
            uint64_t v5 = v527;
          }
          else
          {
            *(_DWORD *)unint64_t v84 = v98;
            float v99 = v84 + 4;
            unint64_t v57 = __p;
            uint64_t v10 = v499;
          }
          int v105 = v79 + 4;
          BOOL v106 = v79 == v99 || v105 == v99;
          float v107 = v79;
          if (!v106)
          {
            int v108 = *(_DWORD *)v79;
            float v107 = v79;
            int v109 = v79 + 4;
            do
            {
              int v111 = *(_DWORD *)v109;
              v109 += 4;
              int v110 = v111;
              if (v111 < v108)
              {
                int v108 = v110;
                float v107 = v105;
              }
              int v105 = v109;
            }
            while (v109 != v99);
          }
          unint64_t v112 = v107 - v79;
          if (((v112 >> 2) & 0x80000000) == 0) {
            int v113 = (v112 >> 2) & 1;
          }
          else {
            int v113 = -((v112 >> 2) & 1);
          }
          uint64_t v114 = *(void *)(*(void *)(v56 + 32) + 32 * v113 + 8);
          HIDWORD(v114) = *(_DWORD *)&v79[(uint64_t)(v112 << 30) >> 30];
          if ((unint64_t)v59 >= v60)
          {
            uint64_t v494 = v114;
            uint64_t v116 = (v59 - v57) >> 3;
            unint64_t v117 = v116 + 1;
            if ((unint64_t)(v116 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v60 - (void)v57) >> 2 > v117) {
              unint64_t v117 = (uint64_t)(v60 - (void)v57) >> 2;
            }
            if (v60 - (unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v118 = v117;
            }
            if (v118) {
              unint64_t v118 = (unint64_t)sub_25B3FCAD4(v118);
            }
            else {
              uint64_t v119 = 0;
            }
            uint64_t v120 = (char *)(v118 + 8 * v116);
            *(void *)uint64_t v120 = v494;
            int v115 = v120 + 8;
            while (v59 != v57)
            {
              uint64_t v121 = *((void *)v59 - 1);
              v59 -= 8;
              *((void *)v120 - 1) = v121;
              v120 -= 8;
            }
            unint64_t v60 = v118 + 8 * v119;
            if (v57) {
              operator delete(v57);
            }
            unint64_t v57 = v120;
          }
          else
          {
            *(void *)int v59 = v114;
            int v115 = v59 + 8;
          }
          int v61 = v498;
          operator delete(v79);
          int v59 = v115;
          uint64_t v55 = v496;
          int v52 = v497;
        }
        goto LABEL_134;
      }
LABEL_73:
      if (v67 != v66)
      {
        uint64_t v91 = v68 <= 1 ? 1 : v67 - v66;
        if (vabds_f32(*v66, *v69) > 0.000001) {
          goto LABEL_47;
        }
        unint64_t v92 = 0;
        int v93 = v69 + 1;
        unint64_t v94 = v66 + 1;
        while (v91 - 1 != v92)
        {
          double v95 = vabds_f32(v94[v92], v93[v92]);
          ++v92;
          if (v95 > 0.000001) {
            goto LABEL_137;
          }
        }
        unint64_t v92 = v91;
LABEL_137:
        if (v68 > v92) {
          goto LABEL_47;
        }
      }
LABEL_134:
      v56 += 112;
    }
    while (v56 != v55);
    if (v59 == v57)
    {
      unint64_t v9 = v492;
      if (v57) {
        operator delete(v57);
      }
LABEL_174:
      int v143 = v507;
      if (v506 < v507) {
        int v143 = v506;
      }
      *(_DWORD *)(*v12 + 8) = v143;
      *(_DWORD *)(*v12 + 40) = v143;
      if (*(unsigned char *)(v5 + 137)) {
        goto LABEL_189;
      }
LABEL_40:
      sub_25B55DE40(i64, v5);
      goto LABEL_189;
    }
    float v122 = 0;
    uint64_t v123 = 0;
    unint64_t v124 = 0;
    float v125 = 0;
    float32x4_t v126 = v57;
    do
    {
      *(void *)&long long v41 = *(void *)v126;
      long long v508 = v41;
      __pa = v57;
      if ((int)HIDWORD(*(void *)v126) > 2)
      {
        float32x4_t v127 = v123;
      }
      else if ((unint64_t)v125 >= v124)
      {
        uint64_t v128 = v125 - v122;
        unint64_t v129 = v128 + 1;
        if ((unint64_t)(v128 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v124 - (void)v122) >> 2 > v129) {
          unint64_t v129 = (uint64_t)(v124 - (void)v122) >> 2;
        }
        if (v124 - (unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v130 = v129;
        }
        if (v130) {
          unint64_t v130 = (unint64_t)sub_25B3FCAD4(v130);
        }
        else {
          uint64_t v131 = 0;
        }
        unint64_t v132 = (int32x2_t *)(v130 + 8 * v128);
        *((void *)&v41 + 1) = *((void *)&v508 + 1);
        *unint64_t v132 = (int32x2_t)v508;
        float32x4_t v127 = v132 + 1;
        while (v123 != v122)
        {
          int32x2_t v133 = v123[-1];
          --v123;
          v132[-1] = v133;
          --v132;
        }
        unint64_t v124 = v130 + 8 * v131;
        if (v122) {
          operator delete(v122);
        }
        float v122 = v132;
        float v125 = v127;
      }
      else
      {
        *v125++ = (int32x2_t)v41;
        float32x4_t v127 = v125;
      }
      v126 += 8;
      uint64_t v123 = v127;
      unint64_t v57 = __pa;
    }
    while (v126 != v59);
    if (v125 == v122)
    {
      uint64_t v144 = __pa + 8;
      float v145 = __pa;
      if (__pa + 8 != v59)
      {
        float v145 = __pa;
        do
        {
          if (*((_DWORD *)v144 + 1) < *((_DWORD *)v145 + 1)) {
            float v145 = v144;
          }
          v144 += 8;
        }
        while (v144 != v59);
      }
      uint64_t v146 = *(void *)v145;
      *(_DWORD *)(*v12 + 8) = *(void *)v145;
      *(_DWORD *)(*v12 + 40) = v146;
      unint64_t v9 = v492;
      if (!*(unsigned char *)(v5 + 137)) {
LABEL_184:
      }
        sub_25B55DE40(i64, v5);
    }
    else
    {
      unint64_t v134 = v122 + 1;
      float32x4_t v135 = v122;
      unint64_t v9 = v492;
      if (&v122[1] != v125)
      {
        int32x2_t v136 = *v122;
        float32x4_t v135 = v122;
        BOOL v137 = v122 + 1;
        do
        {
          int32x2_t v138 = *v137++;
          int8x8_t v139 = (int8x8_t)v138;
          unsigned __int8 v140 = vcgt_s32(v136, v138).u8[0];
          if (v140) {
            unsigned int v141 = -1;
          }
          else {
            unsigned int v141 = 0;
          }
          int32x2_t v136 = (int32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v141), v139, (int8x8_t)v136);
          if (v140) {
            float32x4_t v135 = v134;
          }
          unint64_t v134 = v137;
        }
        while (v137 != v125);
      }
      int32x2_t v142 = *v135;
      *(_DWORD *)(*v12 + 8) = *v135;
      *(_DWORD *)(*v12 + 40) = v142.i32[0];
      if (!*(unsigned char *)(v5 + 137)) {
        goto LABEL_184;
      }
    }
    if (v122) {
      operator delete(v122);
    }
    if (__pa) {
      operator delete(__pa);
    }
LABEL_189:
    sub_25B43AD88((uint64_t)&v567);
LABEL_190:
    ++v9;
    uint64_t v7 = *(int64x2_t **)(v516 + 8);
    id v8 = *(int64x2_t **)(v516 + 16);
  }
  while (0x6DB6DB6DB6DB6DB7 * (v8 - v7) > v9);
  int64_t v147 = (char *)v8 - (char *)v7;
  if (v8 == v7) {
    goto LABEL_212;
  }
  uint64_t v148 = 0;
  uint64_t v149 = (unsigned __int128)(v147 * (__int128)0x4924924924924925) >> 64;
  unint64_t v150 = (v149 >> 5) + ((unint64_t)v149 >> 63);
  if (v150 <= 1) {
    uint64_t v151 = 1;
  }
  else {
    uint64_t v151 = (v149 >> 5) + ((unint64_t)v149 >> 63);
  }
  float32x4_t v152 = (int32x2_t **)&v7[2];
  uint64_t v153 = (uint64_t)v7[7 * v150 - 12].i64;
  while (2)
  {
    int32x2_t v154 = (*v152)[1];
    int32x2_t v155 = (*v152)[5];
    int32x2_t v156 = vsub_s32(v154, v155);
    int v157 = v156.i32[0];
    if (v156.i32[0] < 0) {
      int v157 = -v156.i32[0];
    }
    if ((float)((float)v157 * 0.03) <= 0.1) {
      goto LABEL_211;
    }
    unsigned int v158 = v156.u32[1];
    if (v156.i32[1] < 0) {
      unsigned int v158 = -v156.i32[1];
    }
    if (v150 < 2 || v158 > 0xA)
    {
LABEL_211:
      ++v148;
      v152 += 14;
      if (v151 == v148) {
        goto LABEL_212;
      }
      continue;
    }
    break;
  }
  if (v148) {
    goto LABEL_210;
  }
  uint64_t v159 = v7[9].i64[0];
  uint64_t v160 = *(void *)(v159 + 8);
  int v161 = v160 - *(void *)(v159 + 40);
  if (v161 < 0) {
    int v161 = *(void *)(v159 + 40) - *(void *)(v159 + 8);
  }
  if (v161 > 3)
  {
LABEL_210:
    if (v150 - 1 == v148)
    {
      uint64_t v162 = *(void *)v153;
      uint64_t v163 = *(void *)(*(void *)v153 + 40);
      int v164 = *(void *)(*(void *)v153 + 8) - v163;
      if (v164 < 0) {
        int v164 = v163 - *(void *)(*(void *)v153 + 8);
      }
      if (v164 <= 3)
      {
        uint64_t v567 = (uint64_t (***)())&off_2708F1B18;
        DWORD2(v568[0]) = 0;
        *(void *)((char *)v568 + 12) = -1;
        HIDWORD(v163) = v155.i32[1];
        *(void *)&v568[0] = v163;
        sub_25B55DAEC(&v7[7 * v150 - 14], v162, (uint64_t)&v567, v5);
        *(void *)float32x4_t v558 = 0;
        uint64_t v557 = 0;
        *(void *)&v558[8] = 0;
        uint64_t v268 = *(void *)(v516 + 8);
        uint64_t v267 = *(void *)(v516 + 16);
        uint64_t i = (uint64_t)&v557;
        if (v268 != v267 - 112)
        {
          uint64_t v269 = 16 * ((v267 - v268) >> 4) - 112;
          do
          {
            sub_25B43B560((void **)&i, v268);
            v268 += 112;
            v269 -= 112;
          }
          while (v269);
          uint64_t v268 = *(void *)(v516 + 8);
          uint64_t v267 = *(void *)(v516 + 16);
        }
        if (v267 != v268)
        {
          uint64_t v270 = v267 - 112;
          uint64_t v271 = (void (***)(void))(v267 - 112);
          uint64_t v272 = (void (***)(void))(v267 - 112);
          do
          {
            uint64_t v273 = *v272;
            v272 -= 14;
            (*v273)(v271);
            v270 -= 112;
            BOOL v106 = v271 == (void (***)(void))v268;
            uint64_t v271 = v272;
          }
          while (!v106);
        }
        *(void *)(v516 + 16) = v268;
        uint64_t v274 = v557;
        uint64_t v275 = *(void *)v558;
        uint64_t v5 = v527;
        for (uint64_t i = (uint64_t)v526; v274 != v275; v274 += 112)
          sub_25B43B560((void **)&i, v274);
        goto LABEL_345;
      }
    }
    goto LABEL_211;
  }
  uint64_t v567 = (uint64_t (***)())&off_2708F1B18;
  DWORD2(v568[0]) = 0;
  *(void *)((char *)v568 + 12) = -1;
  HIDWORD(v160) = v154.i32[1];
  *(void *)&v568[0] = v160;
  sub_25B55DAEC(v7 + 7, (uint64_t)&v567, v159 + 32, v5);
  *(void *)float32x4_t v558 = 0;
  uint64_t v557 = 0;
  *(void *)&v558[8] = 0;
  long long v280 = *(void (****)(void))(v516 + 8);
  float32x4_t v281 = *(void (****)(void))(v516 + 16);
  uint64_t v282 = (uint64_t)(v280 + 14);
  uint64_t i = (uint64_t)&v557;
  if (v280 + 14 == v281) {
    goto LABEL_361;
  }
  do
  {
    sub_25B43B560((void **)&i, v282);
    v282 += 112;
  }
  while ((void (***)(void))v282 != v281);
  long long v280 = *(void (****)(void))(v516 + 8);
  uint64_t v282 = *(void *)(v516 + 16);
  if ((void (***)(void))v282 != v280)
  {
LABEL_361:
    uint64_t v283 = v282 - 112;
    unint64_t v284 = (void (***)(void))(v282 - 112);
    int64_t v285 = (void (***)(void))(v282 - 112);
    do
    {
      long long v286 = *v285;
      v285 -= 14;
      (*v286)(v284);
      v283 -= 112;
      BOOL v106 = v284 == v280;
      unint64_t v284 = v285;
    }
    while (!v106);
  }
  *(void *)(v516 + 16) = v280;
  uint64_t v287 = v557;
  uint64_t v288 = *(void *)v558;
  uint64_t i = (uint64_t)v526;
  while (v287 != v288)
  {
    sub_25B43B560((void **)&i, v287);
    v287 += 112;
  }
LABEL_345:
  uint64_t i = (uint64_t)&v557;
  sub_25B4331AC((void ***)&i);
LABEL_212:
  uint64_t v166 = *(void *)(v516 + 8);
  uint64_t v165 = *(void *)(v516 + 16);
  if (v166 != v165)
  {
    uint64_t __pb = *(void *)(v516 + 16);
    do
    {
      simd_float4 v167 = *(int32x2_t **)(v166 + 32);
      int32x2_t v168 = v167[1];
      int v169 = v168.i32[0];
      int32x2_t v170 = v167[5];
      int v171 = v170.i32[0];
      int v172 = v168.i32[0] - v170.i32[0];
      if (v168.i32[0] - v170.i32[0] < 0) {
        int v172 = v170.i32[0] - v168.i32[0];
      }
      int32x2_t v173 = vsub_s32(v168, v170);
      float v174 = (float)v172 * 0.03;
      int v175 = v173.i32[1];
      if (v173.i32[1] < 0) {
        int v175 = -v173.i32[1];
      }
      if ((float)(v174 / fmaxf((float)v175 * 0.03, 1.0)) <= 0.1)
      {
        int v176 = *(_DWORD *)(v5 + 8);
        uint64_t v567 = (uint64_t (***)())&unk_2708F1B38;
        if (v171 >= v169) {
          int v177 = v169;
        }
        else {
          int v177 = v171;
        }
        LOBYTE(v568[0]) = 0;
        if (v177 <= 2) {
          int v177 = 2;
        }
        BYTE4(v568[0]) = 0;
        if (v169 <= v171) {
          int v169 = v171;
        }
        int v178 = v169 + 2;
        BYTE8(v568[0]) = 0;
        BYTE12(v568[0]) = 0;
        if (v176 - 1 >= v178) {
          int v179 = v178;
        }
        else {
          int v179 = v176 - 1;
        }
        LOBYTE(v568[1]) = 0;
        BYTE4(v568[1]) = 0;
        long long v569 = 0uLL;
        *((void *)&v568[1] + 1) = 0;
        LODWORD(v570[0]) = 0;
        memset(&v570[1], 0, 48);
        int v180 = v177 - 3;
        float v181 = -3.4028e38;
        do
        {
          uint64_t i = (uint64_t)&off_2708F1B18;
          *(_DWORD *)&v548[8] = 0;
          *(void *)&v548[12] = -1;
          uint64_t v182 = *(void *)(v166 + 32);
          uint64_t v183 = *(void *)(v182 + 8);
          LODWORD(v183) = v180 + 1;
          *(void *)uint64_t v548 = v183;
          int8x8_t v537 = &off_2708F1B18;
          *(_DWORD *)&v538[8] = 0;
          *(void *)&v538[12] = -1;
          uint64_t v184 = *(void *)(v182 + 40);
          LODWORD(v184) = v180 + 1;
          *(void *)v538 = v184;
          uint64_t v557 = (uint64_t)&unk_2708F1B38;
          v558[0] = 0;
          v558[4] = 0;
          v558[8] = 0;
          v558[12] = 0;
          v558[16] = 0;
          v558[20] = 0;
          uint64_t v560 = 0;
          uint64_t v561 = 0;
          BOOL v559 = 0;
          float v562 = 0.0;
          long long __src = 0u;
          long long v564 = 0u;
          long long v565 = 0u;
          sub_25B55DAEC((int64x2_t *)&v557, (uint64_t)&i, (uint64_t)&v537, v527);
          float v185 = v562;
          if (v562 >= v181)
          {
            v568[0] = *(_OWORD *)v558;
            *(void *)((char *)v568 + 13) = *(void *)&v558[13];
            sub_25B43A898((char *)&v568[1] + 8, (uint64_t)v559, v560, (v560 - (uint64_t)v559) >> 5);
            *(float *)unint64_t v570 = v562;
            sub_25B3FE7A8((char *)&v570[1], (char *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((void *)&__src + 1) - __src) >> 2);
            sub_25B43AB10((char *)&v570[4], *((uint64_t *)&v564 + 1), v565, (uint64_t)(v565 - *((void *)&v564 + 1)) >> 4);
            float v181 = v185;
          }
          sub_25B43AD88((uint64_t)&v557);
          ++v180;
        }
        while (v179 != v180);
        uint64_t v186 = *(void *)(*((void *)&v568[1] + 1) + 40);
        *(_DWORD *)(*(void *)(v166 + 32) + 8) = *(void *)(*((void *)&v568[1] + 1) + 8);
        *(_DWORD *)(*(void *)(v166 + 32) + 40) = v186;
        uint64_t v5 = v527;
        if (!*(unsigned char *)(v527 + 137)) {
          sub_25B55DE40(v166, v527);
        }
        sub_25B43AD88((uint64_t)&v567);
        uint64_t v165 = __pb;
      }
      v166 += 112;
    }
    while (v166 != v165);
  }
LABEL_237:
  uint64_t v188 = *(void *)(v516 + 8);
  uint64_t v187 = *(void *)(v516 + 16);
  unint64_t v189 = 0x6DB6DB6DB6DB6DB7 * ((v187 - v188) >> 4);
  if (v189 >= 3 && v187 != v188)
  {
    uint64_t v191 = 0;
    uint64_t v192 = 112;
    do
    {
      uint64_t v193 = v188 + 112 * v191;
      uint64_t v195 = *(void *)(v193 + 32);
      uint64_t v194 = v193 + 32;
      int v196 = *(void *)(v195 + 8) - *(void *)(v195 + 40);
      if (v196 >= 0) {
        int v197 = v196;
      }
      else {
        int v197 = -v196;
      }
      unint64_t v198 = v191 + 1;
      if ((float)((float)v197 * 0.03) >= 0.1 && *(float *)(v194 + 24) >= 0.3)
      {
        uint64_t v521 = v192;
        int64_t v199 = (int)v189;
        while (1)
        {
          --v199;
          uint64_t v188 = *v526;
          if (v199 <= (uint64_t)v198) {
            break;
          }
          uint64_t v200 = v188 + 112 * v199;
          uint64_t v202 = *(void *)(v200 + 32);
          int32x4_t v201 = (float *)(v200 + 32);
          int v203 = *(void *)(v202 + 8) - *(void *)(v202 + 40);
          if (v203 >= 0) {
            int v204 = v203;
          }
          else {
            int v204 = -v203;
          }
          int v205 = 7;
          if ((float)((float)v204 * 0.03) >= 0.1)
          {
            int v206 = v203 * v196;
            if (v201[6] >= 0.3 && v206 >= 1)
            {
              uint64_t v567 = (uint64_t (***)())&unk_2708F1B38;
              LOBYTE(v568[0]) = 0;
              BYTE4(v568[0]) = 0;
              BYTE8(v568[0]) = 0;
              BYTE12(v568[0]) = 0;
              LOBYTE(v568[1]) = 0;
              BYTE4(v568[1]) = 0;
              long long v569 = 0uLL;
              *((void *)&v568[1] + 1) = 0;
              LODWORD(v570[0]) = 0;
              memset(&v570[1], 0, 48);
              sub_25B55DAEC((int64x2_t *)&v567, *(void *)v194, *(void *)v201 + 32, v527);
              if (*(float *)v570 >= 0.3)
              {
                int32x2_t v208 = *(int32x2_t *)(*((void *)&v568[1] + 1) + 40);
                float v209 = (float)(int)*(void *)(*((void *)&v568[1] + 1) + 8);
                float32x2_t v210 = vcvt_f32_s32(vzip2_s32(v208, *(int32x2_t *)(*((void *)&v568[1] + 1) + 8)));
                float v211 = (float)v208.i32[0];
                if (vabds_f32(v210.f32[0], v210.f32[1]) >= 0.000001)
                {
                  v210.f32[0] = v210.f32[0] - v210.f32[1];
                  float v214 = v211 - v209;
                  float v212 = (float)((float)((float)((float)*(int *)(*(void *)v194 + 44) - v210.f32[1])
                                       * (float)(v211 - v209))
                               / v210.f32[0])
                       + v209;
                  float v213 = (float)((float)((float)((float)*(int *)(*(void *)v201 + 12) - v210.f32[1]) * v214)
                               / v210.f32[0])
                       + v209;
                }
                else
                {
                  float v212 = (float)(v209 + v211) * 0.5;
                  float v213 = v212;
                }
                float v215 = *(float *)(*(void *)v194 + 48) <= 0.1 ? 5.0 : 3.0;
                if (vabds_f32(v212, (float)(int)*(void *)(*(void *)v194 + 40)) <= v215
                  && vabds_f32(v213, (float)(int)*(void *)(*(void *)v201 + 8)) <= 5.0)
                {
                  uint64_t v216 = *v526;
                  uint64_t v217 = *v526 + 112 * v191;
                  long long v218 = v568[0];
                  *(void *)(v217 + 21) = *(void *)((char *)v568 + 13);
                  *(_OWORD *)(v217 + 8) = v218;
                  if ((uint64_t (****)())v217 == &v567)
                  {
                    *(_DWORD *)(v216 + 112 * v191 + 56) = v570[0];
                  }
                  else
                  {
                    sub_25B43A898((char *)(v216 + 112 * v191 + 32), *((uint64_t *)&v568[1] + 1), v569, (uint64_t)(v569 - *((void *)&v568[1] + 1)) >> 5);
                    uint64_t v219 = v216 + 112 * v191;
                    *(_DWORD *)(v219 + 56) = v570[0];
                    sub_25B3FE7A8((char *)(v219 + 64), (char *)v570[1], (uint64_t)v570[2], ((char *)v570[2] - (char *)v570[1]) >> 2);
                    sub_25B43AB10((char *)(v216 + 112 * v191 + 88), (uint64_t)v570[4], (uint64_t)v570[5], ((char *)v570[5] - (char *)v570[4]) >> 4);
                  }
                  *(void *)float32x4_t v558 = 0;
                  uint64_t v557 = 0;
                  *(void *)&v558[8] = 0;
                  uint64_t v220 = *v526;
                  uint64_t v221 = *v526 + 112 * v191 + 112;
                  uint64_t i = (uint64_t)&v557;
                  if (v220 != v221)
                  {
                    uint64_t v222 = v521;
                    do
                    {
                      sub_25B43B560((void **)&i, v220);
                      v220 += 112;
                      v222 -= 112;
                    }
                    while (v222);
                    uint64_t v220 = *v526;
                  }
                  uint64_t v223 = v220 + 112 * v199 + 112;
                  uint64_t v224 = *(void *)(v516 + 16);
                  uint64_t i = (uint64_t)&v557;
                  while (v223 != v224)
                  {
                    sub_25B43B560((void **)&i, v223);
                    v223 += 112;
                  }
                  sub_25B55E4D4(v516, &v557);
                  uint64_t i = (uint64_t)&v557;
                  sub_25B4331AC((void ***)&i);
                  int v205 = 1;
                }
              }
              sub_25B43AD88((uint64_t)&v567);
            }
          }
          if (v205 != 7) {
            goto LABEL_237;
          }
        }
        uint64_t v187 = *(void *)(v516 + 16);
        uint64_t v192 = v521;
      }
      unint64_t v189 = 0x6DB6DB6DB6DB6DB7 * ((v187 - v188) >> 4);
      v192 += 112;
      ++v191;
    }
    while (v189 > v198);
  }
  uint64_t v225 = a5;
  uint64_t j = v527;
  if (v189 >= 3)
  {
    uint64_t v227 = *(void *)(v188 + 32);
    if (*(float *)(v227 + 16) >= 0.1)
    {
      uint64_t v228 = *(void *)(v187 - 80);
      if (*(float *)(v228 + 48) >= 0.1)
      {
        int32x2_t v229 = *(int32x2_t *)(v227 + 8);
        int32x2_t v230 = *(int32x2_t *)(v228 + 40);
        int v231 = vsub_s32(v229, v230).u32[0];
        if (v231 < 0) {
          int v231 = -v231;
        }
        float v232 = (float)v231;
        if ((float)((float)v231 * 0.03) >= 0.1 && v229.i32[1] != v230.i32[1])
        {
          int v276 = v229.i32[1] - v230.i32[1];
          if (v229.i32[1] - v230.i32[1] < 0) {
            int v276 = v230.i32[1] - v229.i32[1];
          }
          if ((float)(v232 / (float)v276) >= 0.2)
          {
            uint64_t v567 = (uint64_t (***)())&unk_2708F1B38;
            LOBYTE(v568[0]) = 0;
            BYTE4(v568[0]) = 0;
            BYTE8(v568[0]) = 0;
            BYTE12(v568[0]) = 0;
            LOBYTE(v568[1]) = 0;
            BYTE4(v568[1]) = 0;
            *((void *)&v568[1] + 1) = 0;
            long long v569 = 0uLL;
            LODWORD(v570[0]) = 0;
            memset(&v570[1], 0, 48);
            sub_25B55DAEC((int64x2_t *)&v567, v227, v228 + 32, v527);
            if (*(float *)v570 >= 0.3)
            {
              *(void *)float32x4_t v558 = 0;
              uint64_t v557 = 0;
              *(void *)&v558[8] = 0;
              *(void *)float32x4_t v558 = sub_25B43B014(&v557, (uint64_t)&v567);
              sub_25B55E4D4(v516, &v557);
              uint64_t i = (uint64_t)&v557;
              sub_25B4331AC((void ***)&i);
              uint64_t v225 = a5;
            }
            sub_25B43AD88((uint64_t)&v567);
            uint64_t v188 = *(void *)(v516 + 8);
            uint64_t v187 = *(void *)(v516 + 16);
            unint64_t v189 = 0x6DB6DB6DB6DB6DB7 * ((v187 - v188) >> 4);
          }
        }
      }
    }
    if (v189 >= 3 && v189 - 1 >= 2)
    {
      uint64_t v234 = 0;
      uint64_t v235 = *(int32x2_t **)(v188 + 32);
      int32x2_t v236 = v235[1];
      int32x2_t v237 = v235[5];
      float32x4_t v238 = *(int32x2_t **)(v188 + 144);
      int32x2_t v239 = v238[1];
      uint64_t v240 = 2;
      float32x2_t v241 = (float32x2_t)vdup_n_s32(0x3CF5C28Fu);
      while (1)
      {
        int32x2_t v242 = v237;
        __n128 v243 = v238;
        int v244 = vsub_s32(v236, v237).u32[0];
        int32x2_t v236 = v239;
        uint64_t v245 = v234 + 112;
        int v246 = v244;
        if (v244 < 0) {
          int v246 = -v244;
        }
        float v247 = (float)v246 * 0.03;
        int32x2_t v237 = v243[5];
        uint64_t v248 = v188 + v234;
        float32x4_t v238 = *(int32x2_t **)(v188 + v234 + 256);
        int32x2_t v239 = v238[1];
        if (v247 < 0.1)
        {
          int32x2_t v249 = vabd_s32(vzip1_s32(v236, v239), vzip1_s32(v237, v238[5]));
          float32x2_t v250 = vmul_f32(vcvt_f32_s32(v249), v241);
          if (v250.f32[0] >= 0.1
            && v250.f32[1] < 0.1
            && (*(float *)(v188 + v234 + 168) < 0.5 || *(float *)v243[2].i32 <= 0.1 || *(float *)v243[6].i32 <= 0.1))
          {
            int v251 = vsub_s32(v242, v236).u32[0];
            if (v251 < 0) {
              int v251 = -v251;
            }
            if (v251 <= 2)
            {
              int v252 = vsub_s32(v237, v239).u32[0];
              if (v252 < 0) {
                int v252 = -v252;
              }
              if (v252 <= 2)
              {
                int v253 = vsub_s32(v236, v237).i32[1];
                if (v253 < 0) {
                  int v253 = -v253;
                }
                if (v249.i32[0] < 0xBu || v253 <= 0xA) {
                  break;
                }
              }
            }
          }
        }
        ++v240;
        v234 += 112;
        if (v189 == v240)
        {
          uint64_t v225 = a5;
          goto LABEL_318;
        }
      }
      uint64_t v476 = v240 - 1;
      uint64_t v477 = v188 + 112 * (v240 - 1);
      uint64_t v567 = (uint64_t (***)())&unk_2708F1B38;
      LOBYTE(v568[0]) = 0;
      BYTE4(v568[0]) = 0;
      BYTE8(v568[0]) = 0;
      BYTE12(v568[0]) = 0;
      LOBYTE(v568[1]) = 0;
      BYTE4(v568[1]) = 0;
      *((void *)&v568[1] + 1) = 0;
      long long v569 = 0uLL;
      LODWORD(v570[0]) = 0;
      memset(&v570[1], 0, 48);
      uint64_t v479 = *(void *)(v477 + 32);
      uint64_t v478 = (int64x2_t *)(v477 + 32);
      uint64_t v480 = v478[-7].i64[0];
      uint64_t i = (uint64_t)&off_2708F1B18;
      *(_DWORD *)&v548[8] = 0;
      *(void *)&v548[12] = -1;
      uint64_t v481 = *(void *)(v480 + 40);
      HIDWORD(v481) = HIDWORD(*(void *)(v479 + 40));
      *(void *)uint64_t v548 = v481;
      sub_25B55DAEC((int64x2_t *)&v567, v479, (uint64_t)&i, v527);
      uint64_t v557 = (uint64_t)&unk_2708F1B38;
      v558[0] = 0;
      v558[4] = 0;
      v558[8] = 0;
      v558[12] = 0;
      v558[16] = 0;
      v558[20] = 0;
      uint64_t v561 = 0;
      BOOL v559 = 0;
      uint64_t v560 = 0;
      float v562 = 0.0;
      long long __src = 0u;
      long long v564 = 0u;
      long long v565 = 0u;
      int8x8_t v537 = &off_2708F1B18;
      *(_DWORD *)&v538[8] = 0;
      *(void *)&v538[12] = -1;
      uint64_t v482 = *(void *)(*(void *)(v248 + 256) + 8);
      uint64_t v483 = v478->i64[0];
      HIDWORD(v482) = HIDWORD(*(void *)(v478->i64[0] + 8));
      *(void *)v538 = v482;
      sub_25B55DAEC((int64x2_t *)&v557, (uint64_t)&v537, v483 + 32, v527);
      if (*(float *)v570 <= v562)
      {
        sub_25B55DAEC((int64x2_t *)(v188 + 112 * v240), (uint64_t)v559, *(void *)(v248 + 256) + 32, v527);
        uint64_t v488 = 0;
        long long v533 = 0;
        uint64_t v534 = 0;
        v535[0] = 0;
        uint64_t v489 = *v526;
        v529 = &v533;
        do
        {
          sub_25B43B560(&v529, v489 + v488);
          v488 += 112;
        }
        while (v245 != v488);
        uint64_t v490 = *(void *)(v516 + 16);
        uint64_t v491 = *(void *)(v516 + 8) + 112 * v476 + 112;
        v529 = &v533;
        uint64_t v225 = a5;
        for (uint64_t j = v527; v491 != v490; v491 += 112)
          sub_25B43B560(&v529, v491);
      }
      else
      {
        sub_25B55DAEC(v478 - 9, v478[-7].i64[0], *((void *)&v568[1] + 1) + 32, v527);
        uint64_t v484 = v234 + 112;
        long long v533 = 0;
        uint64_t v534 = 0;
        v535[0] = 0;
        uint64_t v485 = *v526;
        v529 = &v533;
        uint64_t v225 = a5;
        do
        {
          sub_25B43B560(&v529, v485);
          v485 += 112;
          v484 -= 112;
        }
        while (v484);
        uint64_t v486 = *(void *)(v516 + 16);
        uint64_t v487 = *(void *)(v516 + 8) + 112 * v476 + 112;
        v529 = &v533;
        for (uint64_t j = v527; v487 != v486; v487 += 112)
          sub_25B43B560(&v529, v487);
      }
      sub_25B55E4D4(v516, (uint64_t *)&v533);
      v529 = &v533;
      sub_25B4331AC((void ***)&v529);
      sub_25B43AD88((uint64_t)&v557);
      sub_25B43AD88((uint64_t)&v567);
      uint64_t v188 = *(void *)(v516 + 8);
      uint64_t v187 = *(void *)(v516 + 16);
    }
  }
LABEL_318:
  if (v187 - v188 == 224)
  {
    int32x2_t v255 = *(int32x2_t **)(v188 + 32);
    int32x2_t v256 = v255[1];
    int32x2_t v522 = v255[5];
    int v257 = vsub_s32(v256, v522).u32[0];
    if (v257 < 0) {
      int v257 = -v257;
    }
    if ((float)((float)v257 * 0.03) < 0.1)
    {
      unint64_t v258 = *(int32x2_t **)(v188 + 144);
      int32x2_t v259 = v258[1];
      int32x2_t v260 = v258[5];
      int v261 = vsub_s32(v259, v260).u32[0];
      if (v261 < 0) {
        int v261 = -v261;
      }
      if ((float)((float)v261 * 0.03) < 0.1)
      {
        int v262 = vsub_s32(v522, v259).u32[0];
        if (v262 < 0) {
          int v262 = -v262;
        }
        if (v262 <= 0xA)
        {
          int32x2_t v263 = vabd_s32(vzip2_s32(v256, v259), vzip2_s32(v522, v260));
          if (vcgt_u32((uint32x2_t)v263, (uint32x2_t)vdup_lane_s32(v263, 1)).u8[0])
          {
            uint64_t v557 = (uint64_t)&unk_2708F1B38;
            v558[0] = 0;
            v558[4] = 0;
            v558[8] = 0;
            v558[12] = 0;
            v558[16] = 0;
            v558[20] = 0;
            uint64_t v561 = 0;
            BOOL v559 = 0;
            uint64_t v560 = 0;
            float v562 = 0.0;
            long long __src = 0u;
            long long v564 = 0u;
            long long v565 = 0u;
            uint64_t i = (uint64_t)&off_2708F1B18;
            *(_DWORD *)&v548[8] = 0;
            *(void *)&v548[12] = -1;
            *(void *)uint64_t v548 = __PAIR64__(v259.u32[1], v522.u32[0]);
            int8x8_t v537 = &off_2708F1B18;
            *(_DWORD *)&v538[8] = 0;
            *(void *)&v538[12] = -1;
            *(void *)v538 = __PAIR64__(v260.u32[1], v522.u32[0]);
            memset(v568, 0, sizeof(v568));
            long long v569 = 0u;
            memset(v570, 0, 48);
            float32x4_t v572 = 0;
            uint64_t v567 = (uint64_t (***)())&unk_2708F21F8;
            uint64_t v571 = 0;
            __int16 v573 = 257;
            sub_25B55DAEC((int64x2_t *)&v557, (uint64_t)&i, (uint64_t)&v537, (uint64_t)&v567);
            uint64_t v567 = (uint64_t (***)())&unk_2708F21F8;
            if (v572) {
              sub_25B404120(v572);
            }
            sub_25B430E4C(&v557, v225);
            uint64_t v264 = *((void *)&v564 + 1);
            if ((void)v565 == *((void *)&v564 + 1))
            {
              float v266 = 0.0;
            }
            else
            {
              int v265 = 0;
              do
              {
                v265 += *(unsigned __int8 *)(v264 + 8);
                v264 += 16;
              }
              while (v264 != (void)v565);
              float v266 = (float)v265;
            }
            if ((float)(v266 / (float)(int)(((void)v565 - *((void *)&v564 + 1)) >> 4)) > 0.5)
            {
              long long v533 = (uint64_t (***)())&off_2708F1B18;
              LODWORD(v535[0]) = 0;
              *(void *)((char *)v535 + 4) = -1;
              LODWORD(v289) = v522.i32[0];
              HIDWORD(v289) = HIDWORD(*(void *)(*(void *)(v188 + 144) + 40));
              uint64_t v534 = v289;
              uint64_t v567 = (uint64_t (***)())&unk_2708F1B38;
              LOBYTE(v568[0]) = 0;
              BYTE4(v568[0]) = 0;
              BYTE8(v568[0]) = 0;
              BYTE12(v568[0]) = 0;
              LOBYTE(v568[1]) = 0;
              BYTE4(v568[1]) = 0;
              *((void *)&v568[1] + 1) = 0;
              long long v569 = 0uLL;
              LODWORD(v570[0]) = 0;
              memset(&v570[1], 0, 48);
              sub_25B55DAEC((int64x2_t *)&v567, *(void *)(v188 + 32), (uint64_t)&v533, j);
              v529 = 0;
              uint64_t v530 = 0;
              v531[0] = 0;
              uint64_t v530 = sub_25B43B014(&v529, (uint64_t)&v567);
              sub_25B55E4D4(v516, (uint64_t *)&v529);
              goto LABEL_373;
            }
          }
          else
          {
            uint64_t v557 = (uint64_t)&unk_2708F1B38;
            v558[0] = 0;
            v558[4] = 0;
            v558[8] = 0;
            v558[12] = 0;
            v558[16] = 0;
            v558[20] = 0;
            uint64_t v561 = 0;
            BOOL v559 = 0;
            uint64_t v560 = 0;
            float v562 = 0.0;
            long long __src = 0u;
            long long v564 = 0u;
            long long v565 = 0u;
            uint64_t i = (uint64_t)&off_2708F1B18;
            *(_DWORD *)&v548[8] = 0;
            *(void *)&v548[12] = -1;
            *(void *)uint64_t v548 = __PAIR64__(v256.u32[1], v259.u32[0]);
            int8x8_t v537 = &off_2708F1B18;
            *(_DWORD *)&v538[8] = 0;
            *(void *)&v538[12] = -1;
            __int32 v519 = v259.i32[0];
            *(void *)v538 = __PAIR64__(v522.u32[1], v259.u32[0]);
            memset(v568, 0, sizeof(v568));
            long long v569 = 0u;
            memset(v570, 0, 48);
            float32x4_t v572 = 0;
            uint64_t v567 = (uint64_t (***)())&unk_2708F21F8;
            uint64_t v571 = 0;
            __int16 v573 = 257;
            sub_25B55DAEC((int64x2_t *)&v557, (uint64_t)&i, (uint64_t)&v537, (uint64_t)&v567);
            uint64_t v567 = (uint64_t (***)())&unk_2708F21F8;
            if (v572) {
              sub_25B404120(v572);
            }
            sub_25B430E4C(&v557, v225);
            uint64_t v277 = *((void *)&v564 + 1);
            if ((void)v565 == *((void *)&v564 + 1))
            {
              float v279 = 0.0;
            }
            else
            {
              int v278 = 0;
              do
              {
                v278 += *(unsigned __int8 *)(v277 + 8);
                v277 += 16;
              }
              while (v277 != (void)v565);
              float v279 = (float)v278;
            }
            if ((float)(v279 / (float)(int)(((void)v565 - *((void *)&v564 + 1)) >> 4)) > 0.5)
            {
              long long v533 = (uint64_t (***)())&off_2708F1B18;
              LODWORD(v535[0]) = 0;
              *(void *)((char *)v535 + 4) = -1;
              LODWORD(v290) = v519;
              HIDWORD(v290) = HIDWORD(*(void *)(*(void *)(v188 + 32) + 8));
              uint64_t v534 = v290;
              uint64_t v567 = (uint64_t (***)())&unk_2708F1B38;
              LOBYTE(v568[0]) = 0;
              BYTE4(v568[0]) = 0;
              BYTE8(v568[0]) = 0;
              BYTE12(v568[0]) = 0;
              LOBYTE(v568[1]) = 0;
              BYTE4(v568[1]) = 0;
              *((void *)&v568[1] + 1) = 0;
              long long v569 = 0uLL;
              LODWORD(v570[0]) = 0;
              memset(&v570[1], 0, 48);
              sub_25B55DAEC((int64x2_t *)&v567, (uint64_t)&v533, *(void *)(v188 + 144) + 32, j);
              v529 = 0;
              uint64_t v530 = 0;
              v531[0] = 0;
              uint64_t v530 = sub_25B43B014(&v529, (uint64_t)&v567);
              sub_25B55E4D4(v516, (uint64_t *)&v529);
LABEL_373:
              uint64_t v528 = &v529;
              sub_25B4331AC((void ***)&v528);
              sub_25B43AD88((uint64_t)&v567);
              uint64_t v225 = a5;
            }
          }
          sub_25B43AD88((uint64_t)&v557);
        }
      }
    }
  }
  uint64_t v292 = *(void *)(v516 + 8);
  uint64_t v291 = *(void *)(v516 + 16);
  if (v291 == v292)
  {
    uint64_t v306 = *(void *)(v225 + 224);
    uint64_t v307 = (*(void *)(v225 + 232) - v306) >> 6;
    if ((int)v307 >= 2)
    {
      uint64_t v308 = v306 + ((unint64_t)(v307 - 2) << 6);
      long long v524 = *(_OWORD *)(v308 + 16);
      unint64_t v309 = sub_25B57A9F8(v225, *(float32x2_t *)(v308 + 32)) >> 32;
      unint64_t v310 = sub_25B57A9F8(v225, *(float32x2_t *)&v524) >> 32;
      if (v309 != -1 && v310 != -1)
      {
        int v312 = *(_DWORD *)(v225 + 112);
        float v313 = *(float *)(v225 + 712) / *(float *)(v225 + 108);
        float v314 = -v313;
        if (v313 >= 0.0) {
          float v314 = *(float *)(v225 + 712) / *(float *)(v225 + 108);
        }
        int v315 = (int)v314;
        float v316 = v314 - (float)(int)v314;
        if (v316 < 0.5) {
          int v317 = v315;
        }
        else {
          int v317 = v315 + 1;
        }
        int v318 = (v315 & 1) + v315;
        if (v316 != 0.5) {
          int v318 = v317;
        }
        if (v313 < 0.0) {
          int v318 = -v318;
        }
        int v319 = v312 + ~v318;
        BOOL v320 = v319 >= v312 || v319 <= -1;
        int v321 = v319 & ~(v319 >> 31);
        if (v320) {
          int v321 = 0;
        }
        uint64_t v557 = (uint64_t)&off_2708F1B18;
        *(_DWORD *)&v558[8] = 0;
        *(void *)&v558[12] = -1;
        *(void *)float32x4_t v558 = __PAIR64__(v309, v321);
        uint64_t i = (uint64_t)&off_2708F1B18;
        *(_DWORD *)&v548[8] = 0;
        *(void *)&v548[12] = -1;
        *(void *)uint64_t v548 = __PAIR64__(v310, v321);
        uint64_t v567 = (uint64_t (***)())&unk_2708F1B38;
        LOBYTE(v568[0]) = 0;
        BYTE4(v568[0]) = 0;
        BYTE8(v568[0]) = 0;
        BYTE12(v568[0]) = 0;
        LOBYTE(v568[1]) = 0;
        BYTE4(v568[1]) = 0;
        *((void *)&v568[1] + 1) = 0;
        long long v569 = 0uLL;
        LODWORD(v570[0]) = 0;
        memset(&v570[1], 0, 48);
        sub_25B55DAEC((int64x2_t *)&v567, (uint64_t)&v557, (uint64_t)&i, j);
        *(void *)v538 = 0;
        int8x8_t v537 = 0;
        *(void *)&v538[8] = 0;
        *(void *)v538 = sub_25B43B014(&v537, (uint64_t)&v567);
        sub_25B55E4D4(v516, (uint64_t *)&v537);
        long long v533 = &v537;
        sub_25B4331AC((void ***)&v533);
        sub_25B43AD88((uint64_t)&v567);
      }
    }
  }
  else
  {
    uint64_t v293 = *(void *)(v292 + 32);
    uint64_t v557 = (uint64_t)&off_2708F1B18;
    int v294 = *(_DWORD *)(v293 + 24);
    *(_OWORD *)float32x4_t v558 = *(_OWORD *)(v293 + 8);
    *(_DWORD *)&v558[16] = v294;
    uint64_t v295 = *(void *)(v291 - 80);
    uint64_t i = (uint64_t)&off_2708F1B18;
    *(_OWORD *)uint64_t v548 = *(_OWORD *)(v295 + 40);
    *(_DWORD *)&v548[16] = *(_DWORD *)(v295 + 56);
    float32x4_t v296 = *(float32x2_t **)(v225 + 224);
    uint64_t v297 = (uint64_t)(*(void *)(v225 + 232) - (void)v296) >> 6;
    if ((int)v297 >= 4)
    {
      long long v523 = *(_OWORD *)v296[8 * (unint64_t)(v297 - 4) + 4].f32;
      unint64_t v298 = sub_25B57A9F8(v225, v296[2]) >> 32;
      unint64_t v299 = sub_25B57A9F8(v225, *(float32x2_t *)&v523) >> 32;
      if (v298 != -1 && v299 != -1)
      {
        LODWORD(v301) = *(_DWORD *)v558;
        if (*(int *)&v558[4] > (int)v298)
        {
          int8x8_t v537 = &off_2708F1B18;
          *(void *)&v538[12] = -1;
          HIDWORD(v301) = v298;
          *(void *)v538 = v301;
          float v302 = *(float *)&v558[8];
          if ((*(_DWORD *)&v558[4] - v298) > 2) {
            float v302 = 0.0;
          }
          *(float *)&v538[8] = v302;
          uint64_t v567 = (uint64_t (***)())&unk_2708F1B38;
          LOBYTE(v568[0]) = 0;
          BYTE4(v568[0]) = 0;
          BYTE8(v568[0]) = 0;
          BYTE12(v568[0]) = 0;
          LOBYTE(v568[1]) = 0;
          BYTE4(v568[1]) = 0;
          *((void *)&v568[1] + 1) = 0;
          long long v569 = 0uLL;
          LODWORD(v570[0]) = 0;
          memset(&v570[1], 0, 48);
          sub_25B55DAEC((int64x2_t *)&v567, (uint64_t)&v537, (uint64_t)&v557, v527);
          long long v533 = 0;
          uint64_t v534 = 0;
          v535[0] = 0;
          uint64_t v303 = sub_25B43B014(&v533, (uint64_t)&v567);
          uint64_t v305 = *(void *)(v516 + 8);
          uint64_t v304 = *(void *)(v516 + 16);
          uint64_t v534 = (void *)v303;
          v529 = &v533;
          while (v305 != v304)
          {
            sub_25B43B560(&v529, v305);
            v305 += 112;
          }
          sub_25B55E4D4(v516, (uint64_t *)&v533);
          v529 = &v533;
          sub_25B4331AC((void ***)&v529);
          sub_25B43AD88((uint64_t)&v567);
        }
        LODWORD(v322) = *(_DWORD *)v548;
        if ((int)v299 > *(int *)&v548[4])
        {
          int8x8_t v537 = &off_2708F1B18;
          *(void *)&v538[12] = -1;
          HIDWORD(v322) = v299;
          *(void *)v538 = v322;
          float v323 = *(float *)&v548[8];
          if ((v299 - *(_DWORD *)&v548[4]) > 2) {
            float v323 = 0.0;
          }
          *(float *)&v538[8] = v323;
          uint64_t v567 = (uint64_t (***)())&unk_2708F1B38;
          LOBYTE(v568[0]) = 0;
          BYTE4(v568[0]) = 0;
          BYTE8(v568[0]) = 0;
          BYTE12(v568[0]) = 0;
          LOBYTE(v568[1]) = 0;
          BYTE4(v568[1]) = 0;
          *((void *)&v568[1] + 1) = 0;
          long long v569 = 0uLL;
          LODWORD(v570[0]) = 0;
          memset(&v570[1], 0, 48);
          sub_25B55DAEC((int64x2_t *)&v567, (uint64_t)&i, (uint64_t)&v537, v527);
          long long v533 = 0;
          uint64_t v534 = 0;
          v535[0] = 0;
          uint64_t v325 = *(void *)(v516 + 8);
          uint64_t v324 = *(void *)(v516 + 16);
          v529 = &v533;
          if (v325 == v324) {
            goto LABEL_416;
          }
          do
          {
            sub_25B43B560(&v529, v325);
            v325 += 112;
          }
          while (v325 != v324);
          unint64_t v326 = v534;
          if ((unint64_t)v534 >= v535[0])
          {
LABEL_416:
            uint64_t v329 = sub_25B43B014(&v533, (uint64_t)&v567);
          }
          else
          {
            *uint64_t v534 = &unk_2708F1B38;
            long long v327 = v568[0];
            *(void *)((char *)v326 + 21) = *(void *)((char *)v568 + 13);
            *(_OWORD *)(v326 + 1) = v327;
            v326[4] = 0;
            v326[5] = 0;
            v326[6] = 0;
            sub_25B43B3F8((char *)v326 + 32, *((uint64_t *)&v568[1] + 1), v569, (uint64_t)(v569 - *((void *)&v568[1] + 1)) >> 5);
            int v328 = (int)v570[0];
            v326[8] = 0;
            *((_DWORD *)v326 + 14) = v328;
            v326[9] = 0;
            v326[10] = 0;
            sub_25B3FCA58(v326 + 8, v570[1], (uint64_t)v570[2], ((char *)v570[2] - (char *)v570[1]) >> 2);
            v326[11] = 0;
            v326[12] = 0;
            v326[13] = 0;
            sub_25B43B4AC((char *)v326 + 88, (uint64_t)v570[4], (uint64_t)v570[5], ((char *)v570[5] - (char *)v570[4]) >> 4);
            uint64_t v329 = (uint64_t)(v326 + 14);
          }
          uint64_t v534 = (void *)v329;
          sub_25B55E4D4(v516, (uint64_t *)&v533);
          v529 = &v533;
          sub_25B4331AC((void ***)&v529);
          sub_25B43AD88((uint64_t)&v567);
        }
        if (*(int *)&v558[4] < (int)v298)
        {
          LODWORD(v529) = 0;
          LODWORD(v528) = 0;
          if (sub_25B43B2C4(*(void *)(v516 + 8), *(void *)(v516 + 16), v298, &v529, (int *)&v528))
          {
            *(void *)v538 = 0;
            int8x8_t v537 = 0;
            *(void *)&v538[8] = 0;
            long long v330 = *(void (****)(void))(v516 + 8);
            uint64_t v331 = *(void *)(v516 + 16);
            uint64_t v332 = (uint64_t)&v330[14 * (int)v529];
            uint64_t v567 = &v537;
            if (v332 != v331)
            {
              do
              {
                sub_25B43B560(&v567, v332);
                v332 += 112;
              }
              while (v332 != v331);
              long long v330 = *(void (****)(void))(v516 + 8);
              uint64_t v332 = *(void *)(v516 + 16);
            }
            if ((void (***)(void))v332 != v330)
            {
              uint64_t v333 = (void (***)(void))(v332 - 112);
              float64x2_t v334 = v333;
              float64x2_t v335 = v333;
              do
              {
                float64x2_t v336 = *v335;
                v335 -= 14;
                (*v336)(v334);
                v333 -= 14;
                BOOL v106 = v334 == v330;
                float64x2_t v334 = v335;
              }
              while (!v106);
            }
            *(void *)(v516 + 16) = v330;
            uint64_t v337 = (uint64_t)v537;
            uint64_t v338 = *(void *)v538;
            uint64_t v567 = (uint64_t (***)())v526;
            while (v337 != v338)
            {
              sub_25B43B560(&v567, v337);
              v337 += 112;
            }
            uint64_t v567 = (uint64_t (***)())&off_2708F1B18;
            DWORD2(v568[0]) = 0;
            *(void *)((char *)v568 + 12) = -1;
            *(void *)&v568[0] = __PAIR64__(v298, v528);
            long long v339 = (int64x2_t *)*v526;
            uint64_t v340 = *(void *)(*v526 + 32);
            int v341 = *(_DWORD *)(v340 + 12) - v298;
            if (v341 < 0) {
              int v341 = v298 - *(_DWORD *)(v340 + 12);
            }
            int v342 = 0;
            if (v341 <= 2) {
              int v342 = *(_DWORD *)(v340 + 16);
            }
            DWORD2(v568[0]) = v342;
            sub_25B55DAEC(v339, (uint64_t)&v567, v340 + 32, v527);
            uint64_t v567 = &v537;
            sub_25B4331AC((void ***)&v567);
          }
        }
        if (*(int *)&v548[4] > (int)v299)
        {
          LODWORD(v529) = 0;
          LODWORD(v528) = 0;
          if (sub_25B43B2C4(*(void *)(v516 + 8), *(void *)(v516 + 16), v299, &v529, (int *)&v528))
          {
            *(void *)v538 = 0;
            int8x8_t v537 = 0;
            *(void *)&v538[8] = 0;
            uint64_t v343 = *v526;
            uint64_t v344 = *v526 + 112 * (int)v529 + 112;
            uint64_t v567 = &v537;
            if (v343 != v344)
            {
              uint64_t v345 = 112 * (int)v529 + 112;
              do
              {
                sub_25B43B560(&v567, v343);
                v343 += 112;
                v345 -= 112;
              }
              while (v345);
              uint64_t v343 = *v526;
            }
            uint64_t v346 = *(void *)(v516 + 16);
            if (v346 != v343)
            {
              uint64_t v347 = v346 - 112;
              unint64_t v348 = (void (***)(void))(v346 - 112);
              uint64_t v349 = (void (***)(void))(v346 - 112);
              do
              {
                uint64_t v350 = *v349;
                v349 -= 14;
                (*v350)(v348);
                v347 -= 112;
                BOOL v106 = v348 == (void (***)(void))v343;
                unint64_t v348 = v349;
              }
              while (!v106);
            }
            *(void *)(v516 + 16) = v343;
            uint64_t v351 = (uint64_t)v537;
            uint64_t v352 = *(void *)v538;
            uint64_t v567 = (uint64_t (***)())v526;
            if (v537 != *(uint64_t (***)())v538)
            {
              do
              {
                sub_25B43B560(&v567, v351);
                v351 += 112;
              }
              while (v351 != v352);
              uint64_t v343 = *(void *)(v516 + 16);
            }
            uint64_t v567 = (uint64_t (***)())&off_2708F1B18;
            *(void *)((char *)v568 + 12) = -1;
            *(void *)&v568[0] = __PAIR64__(v299, v528);
            uint64_t v353 = *(void *)(v343 - 80);
            int v354 = *(_DWORD *)(v353 + 44) - v299;
            if (v354 < 0) {
              int v354 = v299 - *(_DWORD *)(v353 + 44);
            }
            int v355 = 0;
            if (v354 <= 2) {
              int v355 = *(_DWORD *)(v353 + 48);
            }
            DWORD2(v568[0]) = v355;
            sub_25B55DAEC((int64x2_t *)(v343 - 112), v353, (uint64_t)&v567, v527);
            uint64_t v567 = &v537;
            sub_25B4331AC((void ***)&v567);
          }
        }
        sub_25B55E8CC(v516);
      }
    }
    uint64_t j = v527;
  }
  while (1)
  {
    uint64_t v356 = *(void *)(v516 + 8);
    uint64_t v357 = *(void *)(v516 + 16);
    uint64_t v358 = 0x6DB6DB6DB6DB6DB7 * ((v357 - v356) >> 4);
    if ((int)v358 < 2) {
      break;
    }
    uint64_t v359 = 0;
    uint64_t v360 = (v358 - 1);
    uint64_t v361 = v356 + 144;
    while (1)
    {
      uint64_t v362 = v359 + 1;
      uint64_t v363 = *(void *)(v361 - 112);
      int v364 = *(void *)(v363 + 8);
      if (vabds_f32((float)v364, (float)(int)*(void *)(v363 + 40)) < 0.01)
      {
        int v365 = *(void *)(*(void *)v361 + 8);
        int v366 = v364 - v365;
        if (v366 < 0) {
          int v366 = -v366;
        }
        if (vabds_f32((float)v365, (float)(int)*(void *)(*(void *)v361 + 40)) < 0.01
          && (float)((float)v366 * 0.03) < 0.1)
        {
          break;
        }
      }
      v361 += 112;
      ++v359;
      if (v360 == v362) {
        goto LABEL_505;
      }
    }
    unint64_t v367 = 0;
    long long v368 = 0;
    uint64_t v369 = 0;
    uint64_t v517 = (int64x2_t *)(v356 + 112 * v359);
    uint64_t v520 = v517 + 2;
    int v370 = *(void *)(v517[2].i64[0] + 8);
    unsigned int __pc = v359 + 1;
    uint64_t v525 = v356 + 112 * v362 + 32;
    int v371 = *(void *)(*(void *)v525 + 8);
    if (v371 >= v370) {
      int v372 = *(void *)(v520->i64[0] + 8);
    }
    else {
      int v372 = *(void *)(*(void *)v525 + 8);
    }
    if (v370 <= v371) {
      int v373 = *(void *)(*(void *)v525 + 8);
    }
    else {
      int v373 = *(void *)(v520->i64[0] + 8);
    }
    do
    {
      if ((unint64_t)v368 >= v367)
      {
        uint64_t v374 = (v368 - v369) >> 2;
        unint64_t v375 = v374 + 1;
        if ((unint64_t)(v374 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v367 - (void)v369) >> 1 > v375) {
          unint64_t v375 = (uint64_t)(v367 - (void)v369) >> 1;
        }
        if (v367 - (unint64_t)v369 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v376 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v376 = v375;
        }
        if (v376) {
          unint64_t v376 = (unint64_t)sub_25B3FBC64(v376);
        }
        else {
          uint64_t v377 = 0;
        }
        uint64_t v378 = (char *)(v376 + 4 * v374);
        *(_DWORD *)uint64_t v378 = v372;
        v379 = v378 + 4;
        while (v368 != v369)
        {
          int v380 = *((_DWORD *)v368 - 1);
          v368 -= 4;
          *((_DWORD *)v378 - 1) = v380;
          v378 -= 4;
        }
        unint64_t v367 = v376 + 4 * v377;
        if (v369) {
          operator delete(v369);
        }
        uint64_t v369 = v378;
        long long v368 = v379;
        uint64_t j = v527;
      }
      else
      {
        *(_DWORD *)long long v368 = v372;
        v368 += 4;
      }
      BOOL v106 = v372++ == v373;
    }
    while (!v106);
    uint64_t v381 = v520->i64[0];
    if (v369 == v368)
    {
      float v385 = -1.0;
    }
    else
    {
      unsigned int v382 = *(_DWORD *)(v381 + 12);
      unsigned int v383 = *(_DWORD *)(*(void *)v525 + 44);
      int v384 = *(_DWORD *)(j + 8);
      float v385 = -1.0;
      float v386 = -3.4028e38;
      uint64_t v387 = v369;
      do
      {
        signed int v388 = *(_DWORD *)v387;
        if ((*(_DWORD *)v387 & 0x80000000) == 0 && v388 < v384)
        {
          uint64_t v557 = (uint64_t)&off_2708F1B18;
          *(_DWORD *)&v558[8] = 0;
          *(void *)&v558[12] = -1;
          *(void *)float32x4_t v558 = __PAIR64__(v382, v388);
          uint64_t i = (uint64_t)&off_2708F1B18;
          *(_DWORD *)&v548[8] = 0;
          *(void *)&v548[12] = -1;
          *(void *)uint64_t v548 = __PAIR64__(v383, v388);
          uint64_t v567 = (uint64_t (***)())&unk_2708F1B38;
          LOBYTE(v568[0]) = 0;
          BYTE4(v568[0]) = 0;
          BYTE8(v568[0]) = 0;
          BYTE12(v568[0]) = 0;
          LOBYTE(v568[1]) = 0;
          BYTE4(v568[1]) = 0;
          long long v569 = 0uLL;
          *((void *)&v568[1] + 1) = 0;
          LODWORD(v570[0]) = 0;
          memset(&v570[1], 0, 48);
          sub_25B55DAEC((int64x2_t *)&v567, (uint64_t)&v557, (uint64_t)&i, v527);
          if (*(float *)v570 >= v386)
          {
            float v385 = (float)(int)*(void *)(*((void *)&v568[1] + 1) + 8);
            float v386 = *(float *)v570;
          }
          sub_25B43AD88((uint64_t)&v567);
        }
        v387 += 4;
      }
      while (v387 != v368);
      uint64_t v381 = v520->i64[0];
      uint64_t j = v527;
    }
    DWORD2(v568[0]) = 0;
    *(void *)((char *)v568 + 12) = -1;
    uint64_t v389 = *(void *)(v381 + 8);
    LODWORD(v389) = (int)v385;
    uint64_t v567 = (uint64_t (***)())&off_2708F1B18;
    *(void *)&v568[0] = v389;
    uint64_t v557 = (uint64_t)&off_2708F1B18;
    *(_DWORD *)&v558[8] = 0;
    *(void *)&v558[12] = -1;
    uint64_t v390 = *(void *)(*(void *)v525 + 40);
    LODWORD(v390) = (int)v385;
    *(void *)float32x4_t v558 = v390;
    sub_25B55DAEC(v517, (uint64_t)&v567, (uint64_t)&v557, j);
    uint64_t v391 = *(void *)(v516 + 8) + 112 * __pc;
    uint64_t v392 = sub_25B43AE00(v391 + 112, *(void *)(v516 + 16), v391);
    uint64_t v393 = *(void *)(v516 + 16);
    if (v393 != v392)
    {
      uint64_t v394 = v393 - 112;
      id v395 = (void (***)(void))(v393 - 112);
      v396 = (void (***)(void))(v393 - 112);
      do
      {
        v397 = *v396;
        v396 -= 14;
        (*v397)(v395);
        v394 -= 112;
        BOOL v106 = v395 == (void (***)(void))v392;
        id v395 = v396;
      }
      while (!v106);
    }
    *(void *)(v516 + 16) = v392;
    sub_25B55E8CC(v516);
    uint64_t j = v527;
    if (v369) {
      operator delete(v369);
    }
  }
LABEL_505:
  uint64_t v398 = (uint64_t (***)())&unk_2708F1B38;
  uint64_t v399 = (char *)&v568[1] + 8;
  v400 = &v570[1];
  long long v401 = 0uLL;
  uint64_t v402 = a5;
LABEL_506:
  uint64_t v567 = v398;
  LOBYTE(v568[0]) = 0;
  BYTE4(v568[0]) = 0;
  BYTE8(v568[0]) = 0;
  BYTE12(v568[0]) = 0;
  LOBYTE(v568[1]) = 0;
  BYTE4(v568[1]) = 0;
  *((void *)v399 + 1) = 0;
  *((void *)v399 + 2) = 0;
  *(void *)uint64_t v399 = 0;
  *((_DWORD *)v399 + 6) = 0;
  *(_OWORD *)v400 = v401;
  *((_OWORD *)v400 + 1) = v401;
  *((_OWORD *)v400 + 2) = v401;
  uint64_t v403 = 0x6DB6DB6DB6DB6DB7 * ((v357 - v356) >> 4);
  if ((int)v403 > 1)
  {
    __pd = (char *)v400;
    uint64_t v518 = v399;
    uint64_t v495 = v398;
    uint64_t v404 = 0;
    uint64_t v405 = 0;
    unint64_t v406 = (v403 - 1);
    BOOL v407 = 1;
    while (1)
    {
      uint64_t v408 = *v526;
      unint64_t v409 = v405 + 1;
      uint64_t v410 = *v526 + v404;
      uint64_t v411 = *(void *)(v410 + 32);
      int v412 = *(void *)(v411 + 40);
      uint64_t v413 = *(void *)(v410 + 144);
      int v414 = *(void *)(v413 + 8);
      unsigned int v415 = v412 - v414;
      if (v412 - v414 < 0) {
        unsigned int v415 = v414 - v412;
      }
      if (v415 <= 2)
      {
        int v416 = *(void *)(v411 + 8);
        unsigned int v417 = v416 - v412;
        if (v416 - v412 < 0) {
          unsigned int v417 = v412 - v416;
        }
        if (v417 >= 3)
        {
          int v418 = *(void *)(v413 + 40);
          unsigned int v419 = v414 - v418;
          if (v414 - v418 < 0) {
            unsigned int v419 = v418 - v414;
          }
          if (v419 >= 3)
          {
            BOOL v420 = v416 < v412 && v412 < v418;
            if (v420 || (v416 > v412 ? (BOOL v421 = v412 <= v418) : (BOOL v421 = 1), !v421))
            {
              int v504 = v418;
              uint64_t v557 = (uint64_t)&unk_2708F1B38;
              v558[0] = 0;
              v558[4] = 0;
              v558[8] = 0;
              v558[12] = 0;
              v558[16] = 0;
              v558[20] = 0;
              uint64_t v560 = 0;
              uint64_t v561 = 0;
              BOOL v559 = 0;
              float v562 = 0.0;
              long long __src = v401;
              long long v564 = v401;
              long long v565 = v401;
              sub_25B55DAEC((int64x2_t *)&v557, *(void *)(v410 + 32), *(void *)(v410 + 144) + 32, v527);
              uint64_t v422 = *(int32x2_t **)(v410 + 32);
              int32x2_t v423 = v422[5];
              float v424 = (float)(int)*(void *)&v422[1];
              float32x2_t v425 = vcvt_f32_s32(vzip2_s32(v423, v422[1]));
              float v426 = (float)v423.i32[0];
              if (vabds_f32(v425.f32[0], v425.f32[1]) >= 0.000001) {
                float v427 = (float)((float)((float)((float)*(int *)(*(void *)(v410 + 144) + 44) - v425.f32[1])
              }
                                     * (float)(v426 - v424))
                             / (float)(v425.f32[0] - v425.f32[1]))
                     + v424;
              else {
                float v427 = (float)(v424 + v426) * 0.5;
              }
              int v428 = (int)v427;
              uint64_t i = (uint64_t)&unk_2708F1B38;
              v548[0] = 0;
              v548[4] = 0;
              v548[8] = 0;
              v548[12] = 0;
              v548[16] = 0;
              v548[20] = 0;
              uint64_t v550 = 0;
              uint64_t v551 = 0;
              uint64_t v549 = 0;
              float v552 = 0.0;
              long long v553 = 0u;
              long long v554 = 0u;
              long long v555 = 0u;
              long long v533 = (uint64_t (***)())&off_2708F1B18;
              LODWORD(v535[0]) = 0;
              *(void *)((char *)v535 + 4) = -1;
              uint64_t v429 = *(void **)(*(void *)(v410 + 144) + 40);
              LODWORD(v429) = v428;
              uint64_t v534 = v429;
              sub_25B55DAEC((int64x2_t *)&i, *(void *)(v410 + 32), (uint64_t)&v533, v527);
              id v430 = *(int32x2_t **)(v410 + 144);
              int32x2_t v431 = v430[5];
              float v432 = (float)(int)*(void *)&v430[1];
              float32x2_t v433 = vcvt_f32_s32(vzip2_s32(v431, v430[1]));
              float v434 = (float)v431.i32[0];
              if (vabds_f32(v433.f32[0], v433.f32[1]) >= 0.000001) {
                float v435 = (float)((float)((float)((float)*(int *)(*(void *)(v410 + 32) + 12) - v433.f32[1])
              }
                                     * (float)(v434 - v432))
                             / (float)(v433.f32[0] - v433.f32[1]))
                     + v432;
              else {
                float v435 = (float)(v432 + v434) * 0.5;
              }
              int v436 = (int)v435;
              int8x8_t v537 = (uint64_t (**)())&unk_2708F1B38;
              v538[0] = 0;
              v538[4] = 0;
              v538[8] = 0;
              v538[12] = 0;
              v538[16] = 0;
              v538[20] = 0;
              uint64_t v540 = 0;
              uint64_t v541 = 0;
              uint64_t v539 = 0;
              float v542 = 0.0;
              long long v543 = 0u;
              long long v544 = 0u;
              long long v545 = 0u;
              v529 = (uint64_t (****)())&off_2708F1B18;
              LODWORD(v531[0]) = 0;
              *(void *)((char *)v531 + 4) = -1;
              uint64_t v437 = *(void *)(*(void *)(v410 + 32) + 8);
              LODWORD(v437) = v436;
              uint64_t v530 = v437;
              sub_25B55DAEC((int64x2_t *)&v537, (uint64_t)&v529, *(void *)(v410 + 144) + 32, v527);
              if (v562 >= v552)
              {
                v568[0] = *(_OWORD *)v558;
                *(void *)((char *)v568 + 13) = *(void *)&v558[13];
                sub_25B43A898(v518, (uint64_t)v559, v560, (v560 - (uint64_t)v559) >> 5);
                *(float *)unint64_t v570 = v562;
                sub_25B3FE7A8(__pd, (char *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((void *)&__src + 1) - __src) >> 2);
                uint64_t v439 = (uint64_t *)&v565;
                float32x2_t v438 = (uint64_t *)&v564 + 1;
              }
              else
              {
                v568[0] = *(_OWORD *)v548;
                *(void *)((char *)v568 + 13) = *(void *)&v548[13];
                sub_25B43A898(v518, v549, v550, (v550 - v549) >> 5);
                *(float *)unint64_t v570 = v552;
                sub_25B3FE7A8(__pd, (char *)v553, *((uint64_t *)&v553 + 1), (uint64_t)(*((void *)&v553 + 1) - v553) >> 2);
                uint64_t v439 = (uint64_t *)&v555;
                float32x2_t v438 = (uint64_t *)&v554 + 1;
              }
              sub_25B43AB10((char *)&v570[4], *v438, *v439, (*v439 - *v438) >> 4);
              float v440 = *(float *)v570;
              if (v542 >= *(float *)v570)
              {
                v568[0] = *(_OWORD *)v538;
                *(void *)((char *)v568 + 13) = *(void *)&v538[13];
                sub_25B43A898(v518, v539, v540, (v540 - v539) >> 5);
                *(float *)unint64_t v570 = v542;
                sub_25B3FE7A8(__pd, (char *)v543, *((uint64_t *)&v543 + 1), (uint64_t)(*((void *)&v543 + 1) - v543) >> 2);
                sub_25B43AB10((char *)&v570[4], *((uint64_t *)&v544 + 1), v545, (uint64_t)(v545 - *((void *)&v544 + 1)) >> 4);
                float v440 = *(float *)v570;
              }
              float v441 = *(float *)(v408 + v404 + 168);
              if (v441 >= *(float *)(v408 + v404 + 56)) {
                float v441 = *(float *)(v408 + v404 + 56);
              }
              if (v440 >= 0.3 || (float)(v440 - v441) >= -0.1)
              {
                int32x2_t v442 = *(int32x2_t *)(*((void *)&v568[1] + 1) + 8);
                int32x2_t v443 = *(int32x2_t *)(*((void *)&v568[1] + 1) + 40);
                int32x2_t v444 = vzip2_s32(v443, v442);
                unsigned __int32 v445 = v442.i32[0];
                float v446 = (float)v442.i32[0];
                float32x2_t v447 = vcvt_f32_s32(v444);
                unint64_t v448 = v443.u32[0];
                float v449 = (float)v443.i32[0];
                if (vabds_f32(v447.f32[0], v447.f32[1]) >= 0.000001)
                {
                  float v452 = v447.f32[0] - v447.f32[1];
                  uint64_t v453 = *(void *)(v410 + 32);
                  float v454 = v449 - v446;
                  v447.f32[0] = (float)((float)((float)((float)*(int *)(v453 + 12) - v447.f32[1]) * (float)(v449 - v446))
                                      / (float)(v447.f32[0] - v447.f32[1]))
                              + v446;
                  float v450 = (float)((float)((float)((float)*(int *)(v453 + 44) - v447.f32[1]) * (float)(v449 - v446)) / v452)
                       + v446;
                  float v451 = (float)((float)((float)((float)*(int *)(*(void *)(v410 + 144) + 44) - v447.f32[1]) * v454)
                               / v452)
                       + v446;
                }
                else
                {
                  float v450 = (float)(v446 + v449) * 0.5;
                  v447.f32[0] = v450;
                  float v451 = v450;
                }
                if ((vabds_f32(v447.f32[0], (float)v416) <= 3.0 || *(float *)(*(void *)(v410 + 32) + 16) <= 0.1)
                  && (vabds_f32(v450, (float)v412) <= 3.0 || *(float *)(*(void *)(v410 + 32) + 48) <= 0.1)
                  && (vabds_f32(v450, (float)v414) <= 3.0 || *(float *)(*(void *)(v410 + 144) + 16) <= 0.1)
                  && (vabds_f32(v451, (float)v504) <= 3.0 || *(float *)(*(void *)(v410 + 144) + 48) <= 0.1)
                  && (v445 & 0x80000000) == 0
                  && (v448 & 0x80000000) == 0)
                {
                  unint64_t v455 = *(void *)(v527 + 8);
                  if (v455 > v445 && v455 > v448)
                  {
                    sub_25B43AD88((uint64_t)&v537);
                    sub_25B43AD88((uint64_t)&i);
                    sub_25B43AD88((uint64_t)&v557);
                    uint64_t v456 = *v526;
                    uint64_t v457 = *v526 + 112 * v405;
                    long long v458 = v568[0];
                    *(void *)(v457 + 21) = *(void *)((char *)v568 + 13);
                    *(_OWORD *)(v457 + 8) = v458;
                    if ((uint64_t (****)())v457 == &v567)
                    {
                      *(_DWORD *)(v456 + 112 * v405 + 56) = v570[0];
                    }
                    else
                    {
                      sub_25B43A898((char *)(v456 + 112 * v405 + 32), *((uint64_t *)&v568[1] + 1), v569, (uint64_t)(v569 - *((void *)&v568[1] + 1)) >> 5);
                      uint64_t v459 = v456 + 112 * v405;
                      *(_DWORD *)(v459 + 56) = v570[0];
                      sub_25B3FE7A8((char *)(v459 + 64), (char *)v570[1], (uint64_t)v570[2], ((char *)v570[2] - (char *)v570[1]) >> 2);
                      sub_25B43AB10((char *)(v456 + 112 * v405 + 88), (uint64_t)v570[4], (uint64_t)v570[5], ((char *)v570[5] - (char *)v570[4]) >> 4);
                    }
                    uint64_t v460 = *(void *)(v516 + 8) + 112 * v409;
                    uint64_t v461 = sub_25B43AE00(v460 + 112, *(void *)(v516 + 16), v460);
                    uint64_t v462 = *(void *)(v516 + 16);
                    if (v462 != v461)
                    {
                      uint64_t v463 = v462 - 112;
                      uint64_t v464 = (void (***)(void))(v462 - 112);
                      uint64_t v465 = (void (***)(void))(v462 - 112);
                      do
                      {
                        uint64_t v466 = *v465;
                        v465 -= 14;
                        (*v466)(v464);
                        v463 -= 112;
                        BOOL v106 = v464 == (void (***)(void))v461;
                        uint64_t v464 = v465;
                      }
                      while (!v106);
                    }
                    *(void *)(v516 + 16) = v461;
                    sub_25B55E8CC(v516);
                    sub_25B43AD88((uint64_t)&v567);
                    uint64_t v402 = a5;
                    if (!v407) {
                      goto LABEL_567;
                    }
                    uint64_t v399 = v518;
                    uint64_t v356 = *(void *)(v516 + 8);
                    uint64_t v357 = *(void *)(v516 + 16);
                    uint64_t v398 = v495;
                    v400 = (void **)__pd;
                    long long v401 = 0uLL;
                    goto LABEL_506;
                  }
                }
              }
              sub_25B43AD88((uint64_t)&v537);
              sub_25B43AD88((uint64_t)&i);
              sub_25B43AD88((uint64_t)&v557);
              long long v401 = 0uLL;
            }
          }
        }
      }
      BOOL v407 = v409 < v406;
      v404 += 112;
      ++v405;
      if (v406 == v409)
      {
        sub_25B43AD88((uint64_t)&v567);
        uint64_t v402 = a5;
        goto LABEL_567;
      }
    }
  }
  sub_25B43AD88((uint64_t)&v567);
LABEL_567:
  long long v468 = *(void **)(v516 + 8);
  uint64_t v467 = *(void **)(v516 + 16);
  if (v468 != v467)
  {
    do
    {
      sub_25B430E4C(v468, v402);
      v468 += 14;
    }
    while (v468 != v467);
    uint64_t v470 = *(void *)(v516 + 8);
    uint64_t v469 = *(void *)(v516 + 16);
    if (v470 != v469)
    {
      uint64_t v471 = v402 + 720;
      uint64_t v472 = v402 + 872;
      do
      {
        LODWORD(v528) = 2;
        uint64_t v557 = 0x1500000000;
        *(_DWORD *)float32x4_t v558 = 1;
        sub_25B43333C((uint64_t)&v567, v471, (uint64_t)&v557);
        uint64_t i = 0xD00000008;
        *(_DWORD *)uint64_t v548 = 1;
        sub_25B43333C((uint64_t)&v557, v471, (uint64_t)&i);
        LODWORD(v533) = 0;
        sub_25B4333E8((uint64_t)&v537, (uint64_t)&v567, (int *)&v533);
        sub_25B434554((uint64_t)&i, (uint64_t)&v537);
        int8x8_t v537 = (uint64_t (**)())&unk_2708F18E0;
        if (v546) {
          sub_25B404120(v546);
        }
        LODWORD(v529) = 0;
        sub_25B4333E8((uint64_t)&v533, (uint64_t)&v557, (int *)&v529);
        sub_25B434554((uint64_t)&v537, (uint64_t)&v533);
        long long v533 = (uint64_t (***)())&unk_2708F18E0;
        if (v536) {
          sub_25B404120(v536);
        }
        sub_25B4347A0((uint64_t)&v529, v472, (unsigned int *)&v528);
        sub_25B434554((uint64_t)&v533, (uint64_t)&v529);
        v529 = (uint64_t (****)())&unk_2708F18E0;
        if (v532) {
          sub_25B404120(v532);
        }
        uint64_t v473 = sub_25B434A74(v470, (uint64_t)&i);
        *(_DWORD *)(v470 + 8) = v473;
        *(unsigned char *)(v470 + 12) = BYTE4(v473);
        uint64_t v474 = sub_25B434A74(v470, (uint64_t)&v537);
        *(_DWORD *)(v470 + 16) = v474;
        *(unsigned char *)(v470 + 20) = BYTE4(v474);
        uint64_t v475 = sub_25B434A74(v470, (uint64_t)&v533);
        *(_DWORD *)(v470 + 24) = v475;
        *(unsigned char *)(v470 + 28) = BYTE4(v475);
        long long v533 = (uint64_t (***)())&unk_2708F18E0;
        if (v536) {
          sub_25B404120(v536);
        }
        int8x8_t v537 = (uint64_t (**)())&unk_2708F18E0;
        if (v546) {
          sub_25B404120(v546);
        }
        uint64_t i = (uint64_t)&unk_2708F18E0;
        if (v556) {
          sub_25B404120(v556);
        }
        uint64_t v557 = (uint64_t)&unk_2708F1EB8;
        if (v566) {
          sub_25B404120(v566);
        }
        uint64_t v567 = (uint64_t (***)())&unk_2708F1EB8;
        if (v572) {
          sub_25B404120(v572);
        }
        v470 += 112;
      }
      while (v470 != v469);
    }
  }
}

void sub_25B42CE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  a41 = (uint64_t)&a61;
  sub_25B4331AC((void ***)&a41);
  sub_25B43AD88((uint64_t)&STACK[0x368]);
  sub_25B43AD88((uint64_t)&STACK[0x400]);
  *a33 = &unk_2708F1C48;
  STACK[0x238] = a39;
  sub_25B4331AC((void ***)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_25B42D2D0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v504 = *MEMORY[0x263EF8340];
  long long v473 = 0uLL;
  unint64_t v474 = 0;
  uint64_t v4 = a3[1];
  int v448 = v4 - 1;
  if ((int)v4 < 1) {
    goto LABEL_44;
  }
  uint64_t v446 = a1;
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = a3[2];
  uint64_t v449 = a3[1];
  uint64_t v450 = a3[2];
  unint64_t v8 = (v450 - 1);
  uint64_t v9 = a3[18];
  int v10 = *(_DWORD *)(a2 + 32);
  unint64_t v11 = (v10 - 1);
  int v12 = 1 - v10;
  uint64_t v13 = 4 * (int)v7;
  int v447 = 1 - v10;
  do
  {
    uint64_t v452 = v6;
    int v451 = v12;
    if ((int)v450 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = v12 & ~(v12 >> 31);
      uint64_t v16 = v9 + v13 * v15;
      uint64_t v17 = v6 * (int)v7;
      unsigned int v467 = v6;
      int v18 = (v6 - v11) & ~(((int)v6 - (int)v11) >> 31);
      int v19 = v11 + v6;
      int v20 = v447;
      if ((int)v11 + (int)v6 >= v448) {
        int v19 = v448;
      }
      uint64_t v21 = v19;
      uint64_t __p = v6 * (int)v7;
      int v453 = (v6 - v11) & ~(((int)v6 - (int)v11) >> 31);
      do
      {
        float v22 = *(float *)(v9 + 4 * (v14 + v17));
        if (v22 >= 0.1)
        {
          if (v18 <= (int)v21)
          {
            if ((int)v11 + (int)v14 >= (int)v8) {
              signed int v24 = v450 - 1;
            }
            else {
              signed int v24 = v11 + v14;
            }
            float v23 = -3.4028e38;
            uint64_t v25 = v16;
            uint64_t v26 = v15;
            do
            {
              uint64_t v27 = v20 & ~(v20 >> 31);
              if (((v14 - v11) & ~(((int)v14 - (int)v11) >> 31)) <= v24)
              {
                do
                {
                  if (*(float *)(v25 + 4 * v27) > v23) {
                    float v23 = *(float *)(v25 + 4 * v27);
                  }
                  BOOL v100 = v27++ < v24;
                }
                while (v100);
              }
              v25 += v13;
              BOOL v100 = v26++ < v21;
            }
            while (v100);
          }
          else
          {
            float v23 = -3.4028e38;
          }
          if (vabds_f32(v22, v23) <= 1.0e-10)
          {
            uint64_t v483 = &off_2708F1B18;
            *(void *)((char *)v484 + 12) = -1;
            *((float *)v484 + 2) = v22;
            *(void *)&v484[0] = __PAIR64__(v14, v467);
            if (v5 >= v474)
            {
              uint64_t v29 = (uint64_t)(v5 - v473) >> 5;
              if ((unint64_t)(v29 + 1) >> 59) {
                sub_25B3FBC4C();
              }
              unint64_t v30 = (uint64_t)(v474 - v473) >> 4;
              if (v30 <= v29 + 1) {
                unint64_t v30 = v29 + 1;
              }
              if (v474 - (unint64_t)v473 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v31 = v30;
              }
              *((void *)&v497[1] + 1) = &v474;
              if (v31) {
                unint64_t v31 = (unint64_t)sub_25B3FBC9C(v31);
              }
              else {
                uint64_t v32 = 0;
              }
              unint64_t v33 = v31 + 32 * v29;
              *(void *)unint64_t v33 = &off_2708F1B18;
              long long v34 = v484[0];
              *(_DWORD *)(v33 + 24) = v484[1];
              *(_OWORD *)(v33 + 8) = v34;
              uint64_t v36 = *((void *)&v473 + 1);
              uint64_t v35 = v473;
              if (*((void *)&v473 + 1) == (void)v473)
              {
                int64x2_t v40 = vdupq_n_s64(*((unint64_t *)&v473 + 1));
                unint64_t v38 = v31 + 32 * v29;
              }
              else
              {
                unint64_t v37 = v33 - 32;
                unint64_t v38 = v31 + 32 * v29;
                do
                {
                  *(void *)(v38 - 32) = &off_2708F1B18;
                  v38 -= 32;
                  long long v39 = *(_OWORD *)(v36 - 24);
                  *(_DWORD *)(v38 + 24) = *(_DWORD *)(v36 - 8);
                  *(_OWORD *)(v38 + 8) = v39;
                  v37 -= 32;
                  v36 -= 32;
                }
                while (v36 != v35);
                int64x2_t v40 = (int64x2_t)v473;
              }
              unint64_t v5 = v33 + 32;
              *(void *)&long long v473 = v38;
              *((void *)&v473 + 1) = v33 + 32;
              v497[0] = v40;
              unint64_t v41 = v474;
              unint64_t v474 = v31 + 32 * v32;
              *(void *)&v497[1] = v41;
              uint64_t v496 = (void *)v40.i64[0];
              sub_25B43C884((uint64_t)&v496);
              uint64_t v16 = v9 + v13 * v15;
              uint64_t v17 = __p;
              int v18 = v453;
            }
            else
            {
              *(void *)unint64_t v5 = &off_2708F1B18;
              long long v28 = v484[0];
              *(_DWORD *)(v5 + 24) = v484[1];
              *(_OWORD *)(v5 + 8) = v28;
              v5 += 32;
            }
            *((void *)&v473 + 1) = v5;
          }
        }
        ++v14;
        ++v20;
      }
      while (v14 != v7);
    }
    uint64_t v6 = v452 + 1;
    int v12 = v451 + 1;
  }
  while (v452 + 1 != v449);
  a1 = v446;
  if (v5 == (void)v473)
  {
LABEL_44:
    *(void *)a1 = &unk_2708F1C48;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    goto LABEL_708;
  }
  uint64_t v475 = 0;
  uint64_t v476 = 0;
  unint64_t v477 = 0;
  float v42 = *(float *)(a2 + 16);
  int v454 = *(_DWORD *)(a2 + 20);
  v493[0] = (void *)1;
  sub_25B45DA18((uint64_t *)&v483, (uint64_t)v493);
  memset(v497, 0, sizeof(v497));
  long long v498 = 0u;
  memset(v499, 0, 48);
  float v501 = 0;
  uint64_t v496 = &unk_2708F21F8;
  uint64_t v500 = 0;
  __int16 v502 = 257;
  unint64_t v43 = *(void **)(a4 + 120);
  int v44 = *(std::__shared_weak_count **)(a4 + 128);
  if (v44)
  {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    float v45 = v501;
    uint64_t v500 = v43;
    float v501 = v44;
    if (v45) {
      sub_25B404120(v45);
    }
  }
  else
  {
    uint64_t v500 = *(void **)(a4 + 120);
    float v501 = 0;
  }
  uint64_t v46 = 0;
  long long v47 = *(_OWORD *)(a4 + 104);
  *(_OWORD *)&v499[48] = v47;
  uint64_t v48 = *(void *)(a4 + 8 + 8 * *(void *)&v484[0]);
  *(void *)&v497[0] = *(void *)(a4 + 8 + 8 * (void)v483);
  *((void *)&v497[0] + 1) = v48;
  uint64_t v49 = *(void *)(a4 + 56 + 8 * *(void *)&v484[0]);
  *(void *)uint64_t v499 = *(void *)(a4 + 56 + 8 * (void)v483);
  *(void *)&v499[8] = v49;
  HIBYTE(v502) = 0;
  uint64_t v50 = 1;
  while (1)
  {
    uint64_t v51 = *(void *)((char *)v497 + v46 + 8);
    if (v51 != 1) {
      break;
    }
LABEL_50:
    v46 -= 8;
    if (v46 == -16)
    {
      char v52 = 1;
      goto LABEL_53;
    }
  }
  if (*(void *)&v499[v46 + 8] == v50)
  {
    v50 *= v51;
    goto LABEL_50;
  }
  char v52 = 0;
LABEL_53:
  LOBYTE(v502) = v52;
  uint64_t v503 = *v500 + 4 * *((void *)&v47 + 1);
  sub_25B46649C((uint64_t)v480, (uint64_t)&v496);
  uint64_t v496 = &unk_2708F21F8;
  if (v501) {
    sub_25B404120(v501);
  }
  unsigned int v479 = 0;
  int v463 = *(_DWORD *)&v480[8];
  if (*(int *)&v480[8] < 1)
  {
    uint64_t v53 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
  }
  else
  {
    LODWORD(v11) = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    unint64_t v468 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    unint64_t v460 = 0;
    unint64_t v57 = (void *)MEMORY[0x263F8C0F8];
    do
    {
      sub_25B43C590((uint64_t)v493, (uint64_t)v480, &v479);
      unint64_t v478 = 0;
      sub_25B45E3AC((uint64_t)&v496, (uint64_t)v493);
      if (HIBYTE(v502))
      {
        sub_25B406B20(v57, (uint64_t)"runtime_err in ", 15);
        sub_25B406B20(v57, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v57, (uint64_t)" ", 1);
        unint64_t v58 = (void *)std::ostream::operator<<();
        sub_25B406B20(v58, (uint64_t)" ", 1);
        sub_25B406B20(v58, (uint64_t)"ascontiguous", 12);
        std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
        int v59 = std::locale::use_facet(&v492, MEMORY[0x263F8C108]);
        unint64_t v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
        std::locale::~locale(&v492);
        std::ostream::put();
        std::ostream::flush();
        sub_25B407E3C("err", "empty tensor");
        std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(void *)(*v57 - 24)));
        unint64_t v60 = std::locale::use_facet(&v492, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
        std::locale::~locale(&v492);
        std::ostream::put();
        std::ostream::flush();
      }
      if ((_BYTE)v502) {
        sub_25B45E3AC((uint64_t)&v483, (uint64_t)&v496);
      }
      else {
        sub_25B503BF8((uint64_t)&v483, (uint64_t)&v496);
      }
      *(_OWORD *)&v499[16] = v487[0];
      *(_OWORD *)&v499[32] = v487[1];
      *(_OWORD *)&v499[48] = v487[2];
      v497[0] = v484[0];
      v497[1] = v484[1];
      long long v498 = v485;
      *(_OWORD *)uint64_t v499 = v486;
      int v61 = v488;
      uint64_t v62 = v489;
      if (v489) {
        atomic_fetch_add_explicit(&v489->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v63 = v501;
      uint64_t v500 = v61;
      float v501 = v62;
      if (v63) {
        sub_25B404120(v63);
      }
      uint64_t v503 = v491;
      __int16 v502 = v490;
      uint64_t v483 = (uint64_t (**)())&unk_2708F27E8;
      if (v489) {
        sub_25B404120(v489);
      }
      if (*(void *)&v499[48])
      {
        unint64_t v64 = 0;
        float v65 = -3.4028e38;
        unint64_t v66 = *(void *)&v499[48];
        do
        {
          if (*(float *)(v503 + 4 * v64) > v65)
          {
            float v65 = *(float *)(v503 + 4 * v64);
            unint64_t v66 = v64;
          }
          ++v64;
        }
        while (*(void *)&v499[48] != v64);
      }
      else
      {
        unint64_t v66 = 0;
      }
      uint64_t v496 = &unk_2708F27E8;
      if (v501) {
        sub_25B404120(v501);
      }
      unint64_t v478 = v66;
      if (*(float *)sub_25B503824((uint64_t)v493, &v478) <= v42)
      {
        LODWORD(v67) = -1.0;
      }
      else
      {
        if ((unint64_t)v56 >= v460)
        {
          uint64_t v68 = (v56 - v55) >> 2;
          unint64_t v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v460 - (void)v55) >> 1 > v69) {
            unint64_t v69 = (uint64_t)(v460 - (void)v55) >> 1;
          }
          if (v460 - (unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v69;
          }
          if (v70) {
            unint64_t v70 = (unint64_t)sub_25B3FBC64(v70);
          }
          else {
            uint64_t v71 = 0;
          }
          int v72 = (char *)(v70 + 4 * v68);
          *(_DWORD *)int v72 = v11;
          unint64_t v8 = (unint64_t)(v72 + 4);
          while (v56 != v55)
          {
            int v73 = *((_DWORD *)v56 - 1);
            v56 -= 4;
            *((_DWORD *)v72 - 1) = v73;
            v72 -= 4;
          }
          unint64_t v460 = v70 + 4 * v71;
          if (v55) {
            operator delete(v55);
          }
          uint64_t v55 = v72;
          unint64_t v57 = (void *)MEMORY[0x263F8C0F8];
        }
        else
        {
          *(_DWORD *)uint64_t v56 = v11;
          unint64_t v8 = (unint64_t)(v56 + 4);
        }
        *(float *)&uint64_t v67 = (float)v66;
        LODWORD(v11) = v479;
        uint64_t v56 = (char *)v8;
      }
      *((float *)&v67 + 1) = (float)(int)v11;
      if ((unint64_t)v54 >= v468)
      {
        uint64_t __pa = v67;
        uint64_t v74 = (v54 - v53) >> 3;
        unint64_t v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v468 - (void)v53) >> 2 > v75) {
          unint64_t v75 = (uint64_t)(v468 - (void)v53) >> 2;
        }
        if (v468 - (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v76 = v75;
        }
        if (v76) {
          unint64_t v76 = (unint64_t)sub_25B3FCAD4(v76);
        }
        else {
          uint64_t v77 = 0;
        }
        uint64_t v78 = (char *)(v76 + 8 * v74);
        *(void *)uint64_t v78 = __pa;
        float32x4_t v79 = v78 + 8;
        while (v54 != v53)
        {
          uint64_t v80 = *((void *)v54 - 1);
          v54 -= 8;
          *((void *)v78 - 1) = v80;
          v78 -= 8;
        }
        unint64_t v468 = v76 + 8 * v77;
        if (v53) {
          operator delete(v53);
        }
        uint64_t v53 = v78;
        uint64_t v54 = v79;
        unint64_t v57 = (void *)MEMORY[0x263F8C0F8];
      }
      else
      {
        *(void *)uint64_t v54 = v67;
        v54 += 8;
      }
      v493[0] = &unk_2708F27E8;
      if (v495) {
        sub_25B404120(v495);
      }
      unint64_t v11 = v479 + 1;
      unsigned int v479 = v11;
    }
    while ((int)v11 < v463);
  }
  if ((unint64_t)(v56 - v55) >= 8)
  {
    uint64_t v81 = *(int *)v55;
    int v82 = *((_DWORD *)v56 - 1);
    if (v82 + 1 < v463) {
      int v83 = v82 + 1;
    }
    else {
      int v83 = v463;
    }
    if ((int)v81 >= v83)
    {
      unint64_t v8 = (unint64_t)v476;
    }
    else
    {
      unint64_t v84 = v476;
      do
      {
        if ((unint64_t)v84 >= v477)
        {
          uint64_t v85 = v475;
          uint64_t v86 = v84 - v475;
          unint64_t v87 = v86 + 1;
          if ((unint64_t)(v86 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          uint64_t v88 = v477 - (void)v475;
          if ((uint64_t)(v477 - (void)v475) >> 2 > v87) {
            unint64_t v87 = v88 >> 2;
          }
          if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v89 = v87;
          }
          if (v89) {
            unint64_t v89 = (unint64_t)sub_25B3FCAD4(v89);
          }
          else {
            uint64_t v90 = 0;
          }
          uint64_t v91 = (uint64_t (***)())(v89 + 8 * v86);
          _DWORD *v91 = *(uint64_t (***)())&v53[8 * v81];
          unint64_t v8 = (unint64_t)(v91 + 1);
          if (v84 != v85)
          {
            do
            {
              unint64_t v92 = *--v84;
              *--uint64_t v91 = v92;
            }
            while (v84 != v85);
            unint64_t v84 = v475;
          }
          uint64_t v475 = v91;
          uint64_t v476 = (uint64_t (***)())v8;
          unint64_t v477 = v89 + 8 * v90;
          if (v84) {
            operator delete(v84);
          }
        }
        else
        {
          *unint64_t v84 = *(uint64_t (***)())&v53[8 * v81];
          unint64_t v8 = (unint64_t)(v84 + 1);
        }
        uint64_t v476 = (uint64_t (***)())v8;
        ++v81;
        unint64_t v84 = (uint64_t (***)())v8;
      }
      while (v83 != v81);
    }
    unint64_t v93 = (v8 - (unint64_t)v475) >> 3;
    if ((int)v93 >= 3)
    {
      unint64_t v94 = (float32x2_t *)(v475 + 1);
      uint64_t v95 = (v93 - 1) - 1;
      do
      {
        float32x2_t v96 = v94[-1];
        if (v96.f32[0] >= 0.0)
        {
          float32x2_t v97 = v94[1];
          if (v97.f32[0] >= 0.0)
          {
            float32x2_t v98 = *v94;
            int v99 = (int)fabsf(vsub_f32(*v94, v97).f32[0]);
            BOOL v100 = v454 < (int)fabsf(vsub_f32(*v94, v96).f32[0]) && v454 < v99;
            if (v100)
            {
              v98.i32[0] = -1.0;
              *unint64_t v94 = v98;
            }
          }
        }
        ++v94;
        --v95;
      }
      while (v95);
    }
  }
  if (v55) {
    operator delete(v55);
  }
  if (v53) {
    operator delete(v53);
  }
  *(void *)uint64_t v480 = &unk_2708F21F8;
  if (v482) {
    sub_25B404120(v482);
  }
  unint64_t v101 = v475;
  if ((unint64_t)((char *)v476 - (char *)v475) < 0x18)
  {
    unint64_t v102 = 0;
    int v103 = 0;
    if (v475) {
      goto LABEL_163;
    }
    goto LABEL_164;
  }
  v497[0] = 0uLL;
  uint64_t v496 = 0;
  uint64_t v483 = *v475;
  *(void *)&v484[0] = *(v476 - 1);
  sub_25B503C60(a2 + 8, &v496, (float32x2_t *)&v483, &v475);
  int32x2_t v237 = (float *)v496;
  float32x4_t v238 = *(float **)&v497[0];
  if (v496 != *(void **)&v497[0])
  {
    unsigned int __pc = 0;
    int v103 = 0;
    unint64_t v239 = 0;
    while (1)
    {
      unint64_t v11 = (int)v237[1];
      int v240 = (int)(float)(v237[3] + 1.0);
      if ((int)v11 >= v240)
      {
        float32x2_t v241 = 0;
        __n128 v243 = 0;
      }
      else
      {
        float32x2_t v241 = 0;
        unint64_t v8 = 0;
        unint64_t v242 = 0;
        __n128 v243 = 0;
        do
        {
          int v244 = v475;
          if (v475 != v476)
          {
            while (vabds_f32(COERCE_FLOAT(HIDWORD(*v244)), (float)(int)v11) >= 0.0000001
                 || fabsf(COERCE_FLOAT(*v244) + 1.0) <= 0.0000001)
            {
              if (++v244 == v476) {
                goto LABEL_382;
              }
            }
            if ((unint64_t)v243 >= v242)
            {
              uint64_t v245 = (v243 - v241) >> 2;
              unint64_t v246 = v245 + 1;
              if ((unint64_t)(v245 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v242 - (void)v241) >> 1 > v246) {
                unint64_t v246 = (uint64_t)(v242 - (void)v241) >> 1;
              }
              if (v242 - (unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v247 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v247 = v246;
              }
              if (v247)
              {
                unint64_t v247 = (unint64_t)sub_25B3FBC64(v247);
                __n128 v243 = (char *)v8;
              }
              else
              {
                uint64_t v248 = 0;
              }
              int32x2_t v249 = (char *)(v247 + 4 * v245);
              *(_DWORD *)int32x2_t v249 = v11;
              unint64_t v8 = (unint64_t)(v249 + 4);
              while (v243 != v241)
              {
                int v250 = *((_DWORD *)v243 - 1);
                v243 -= 4;
                *((_DWORD *)v249 - 1) = v250;
                v249 -= 4;
              }
              unint64_t v242 = v247 + 4 * v248;
              if (v241) {
                operator delete(v241);
              }
              float32x2_t v241 = v249;
              __n128 v243 = (char *)v8;
            }
            else
            {
              *(_DWORD *)__n128 v243 = v11;
              v243 += 4;
              unint64_t v8 = (unint64_t)v243;
            }
          }
LABEL_382:
          unint64_t v11 = (v11 + 1);
        }
        while (v11 != v240);
      }
      if ((float)(*(float *)(a2 + 24) * (float)(unint64_t)((v243 - v241) >> 2)) >= *(float *)(a2 + 28))
      {
        if ((unint64_t)v103 >= v239)
        {
          uint64_t v251 = (v103 - __pc) >> 4;
          unint64_t v252 = v251 + 1;
          if ((unint64_t)(v251 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v239 - (void)__pc) >> 3 > v252) {
            unint64_t v252 = (uint64_t)(v239 - (void)__pc) >> 3;
          }
          if (v239 - (unint64_t)__pc >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v253 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v253 = v252;
          }
          if (v253) {
            unint64_t v253 = (unint64_t)sub_25B3FFAEC(v253);
          }
          else {
            uint64_t v254 = 0;
          }
          int32x2_t v255 = (_OWORD *)(v253 + 16 * v251);
          _OWORD *v255 = *(_OWORD *)v237;
          if (v103 == __pc)
          {
            unint64_t v258 = v253 + 16 * v251;
            int v257 = __pc;
          }
          else
          {
            unint64_t v256 = v253 + 16 * v251;
            int v257 = __pc;
            do
            {
              unint64_t v258 = v256 - 16;
              *(_OWORD *)(v256 - 16) = *((_OWORD *)v103 - 1);
              v103 -= 16;
              v256 -= 16;
            }
            while (v103 != __pc);
          }
          unint64_t v239 = v253 + 16 * v254;
          int v103 = (char *)(v255 + 1);
          if (v257) {
            operator delete(v257);
          }
          unsigned int __pc = (char *)v258;
          if (!v241) {
            goto LABEL_390;
          }
LABEL_389:
          operator delete(v241);
          goto LABEL_390;
        }
        *(_OWORD *)int v103 = *(_OWORD *)v237;
        v103 += 16;
      }
      if (v241) {
        goto LABEL_389;
      }
LABEL_390:
      v237 += 4;
      if (v237 == v238)
      {
        int32x2_t v237 = (float *)v496;
        if (v496) {
          goto LABEL_411;
        }
        goto LABEL_412;
      }
    }
  }
  unsigned int __pc = 0;
  int v103 = 0;
  if (v496)
  {
LABEL_411:
    *(void *)&v497[0] = v237;
    operator delete(v237);
  }
LABEL_412:
  unint64_t v101 = v475;
  unint64_t v102 = __pc;
  if (v475) {
LABEL_163:
  }
    operator delete(v101);
LABEL_164:
  v493[1] = 0;
  v493[0] = 0;
  v494[0] = 0;
  uint64_t __pb = v102;
  if (v102 == v103) {
    goto LABEL_244;
  }
  unint64_t v8 = (unint64_t)&v497[1] + 8;
  unint64_t v11 = (unint64_t)v102;
  do
  {
    uint64_t v483 = &off_2708F1B18;
    DWORD2(v484[0]) = 0;
    *(void *)((char *)v484 + 12) = -1;
    *(int32x2_t *)&v484[0] = vcvt_s32_f32(*(float32x2_t *)v11);
    *(void *)uint64_t v480 = &off_2708F1B18;
    *(_DWORD *)&v480[16] = 0;
    *(void *)&v480[20] = -1;
    *(int32x2_t *)&v480[8] = vcvt_s32_f32(*(float32x2_t *)(v11 + 8));
    uint64_t v496 = &unk_2708F1B38;
    LOBYTE(v497[0]) = 0;
    BYTE4(v497[0]) = 0;
    BYTE8(v497[0]) = 0;
    BYTE12(v497[0]) = 0;
    LOBYTE(v497[1]) = 0;
    BYTE4(v497[1]) = 0;
    long long v498 = 0uLL;
    *((void *)&v497[1] + 1) = 0;
    *(_DWORD *)uint64_t v499 = 0;
    memset(&v499[8], 0, 48);
    sub_25B55DAEC((int64x2_t *)&v496, (uint64_t)&v483, (uint64_t)v480, a4);
    int v104 = *(void *)(*((void *)&v497[1] + 1) + 8) - *(void *)(*((void *)&v497[1] + 1) + 40);
    if (v104 < 0) {
      int v104 = *(void *)(*((void *)&v497[1] + 1) + 40) - *(void *)(*((void *)&v497[1] + 1) + 8);
    }
    if (v104 >= 0xB && *(float *)v499 > 0.3)
    {
      int v105 = (char *)v493[1];
      if (v493[1] >= (void *)v494[0])
      {
        int v108 = (void *)sub_25B43B014(v493, (uint64_t)&v496);
      }
      else
      {
        *(void *)v493[1] = &unk_2708F1B38;
        long long v106 = v497[0];
        *(void *)(v105 + 21) = *(void *)((char *)v497 + 13);
        *(_OWORD *)(v105 + 8) = v106;
        *((void *)v105 + 4) = 0;
        *((void *)v105 + 5) = 0;
        *((void *)v105 + 6) = 0;
        sub_25B43B3F8(v105 + 32, *((uint64_t *)&v497[1] + 1), v498, (uint64_t)(v498 - *((void *)&v497[1] + 1)) >> 5);
        int v107 = *(_DWORD *)v499;
        *((void *)v105 + 8) = 0;
        *((_DWORD *)v105 + 14) = v107;
        *((void *)v105 + 9) = 0;
        *((void *)v105 + 10) = 0;
        sub_25B3FCA58((void *)v105 + 8, *(const void **)&v499[8], *(uint64_t *)&v499[16], (uint64_t)(*(void *)&v499[16] - *(void *)&v499[8]) >> 2);
        *((void *)v105 + 11) = 0;
        *((void *)v105 + 12) = 0;
        *((void *)v105 + 13) = 0;
        sub_25B43B4AC(v105 + 88, *(uint64_t *)&v499[32], *(uint64_t *)&v499[40], (uint64_t)(*(void *)&v499[40] - *(void *)&v499[32]) >> 4);
        int v108 = v105 + 112;
      }
      v493[1] = v108;
    }
    sub_25B43AD88((uint64_t)&v496);
    v11 += 16;
  }
  while ((char *)v11 != v103);
  int v109 = v493[0];
  unint64_t v455 = v493[1];
  if (v493[0] == v493[1]) {
    goto LABEL_244;
  }
  do
  {
    uint64_t v111 = v109[4];
    uint64_t v110 = v109[5];
    uint64_t v461 = v109;
    uint64_t v469 = v110;
    while (v111 != v110)
    {
      unint64_t v112 = (int32x2_t *)*((void *)&v473 + 1);
      int v113 = (int32x2_t *)v473;
      if ((void)v473 == *((void *)&v473 + 1))
      {
        uint64_t v114 = 0;
        goto LABEL_209;
      }
      uint64_t v114 = 0;
      int v115 = 0;
      unint64_t v116 = 0;
      unint64_t v11 = v111 + 8;
      do
      {
        float32x2_t v117 = vsub_f32(vcvt_f32_s32(*(int32x2_t *)v11), vcvt_f32_s32(v113[1]));
        float v118 = sqrtf(vaddv_f32(vmul_f32(v117, v117)));
        if ((unint64_t)v115 >= v116)
        {
          uint64_t v119 = v115 - v114;
          unint64_t v120 = v119 + 1;
          if ((unint64_t)(v119 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v116 - (void)v114) >> 1 > v120) {
            unint64_t v120 = (uint64_t)(v116 - (void)v114) >> 1;
          }
          if (v116 - (unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v121 = v120;
          }
          if (v121) {
            unint64_t v121 = (unint64_t)sub_25B3FBC64(v121);
          }
          else {
            uint64_t v122 = 0;
          }
          uint64_t v123 = (float *)(v121 + 4 * v119);
          *uint64_t v123 = v118;
          unint64_t v8 = (unint64_t)(v123 + 1);
          while (v115 != v114)
          {
            int v124 = *((_DWORD *)v115-- - 1);
            *((_DWORD *)v123-- - 1) = v124;
          }
          unint64_t v116 = v121 + 4 * v122;
          if (v114) {
            operator delete(v114);
          }
          uint64_t v114 = v123;
          int v115 = (float *)v8;
        }
        else
        {
          *v115++ = v118;
        }
        v113 += 4;
      }
      while (v113 != v112);
      if (v115 == v114)
      {
        int v113 = (int32x2_t *)*((void *)&v473 + 1);
LABEL_209:
        if ((unint64_t)v113 < v474)
        {
          *int v113 = (int32x2_t)&off_2708F1B18;
          long long v134 = *(_OWORD *)(v111 + 8);
          v113[3].i32[0] = *(_DWORD *)(v111 + 24);
          *(_OWORD *)v113[1].int i8 = v134;
          int32x2_t v133 = v113 + 4;
          goto LABEL_239;
        }
        uint64_t v135 = (uint64_t)((uint64_t)v113 - v473) >> 5;
        if ((unint64_t)(v135 + 1) >> 59) {
          sub_25B3FBC4C();
        }
        unint64_t v136 = (uint64_t)(v474 - v473) >> 4;
        if (v136 <= v135 + 1) {
          unint64_t v136 = v135 + 1;
        }
        if (v474 - (unint64_t)v473 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v137 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v137 = v136;
        }
        *((void *)&v497[1] + 1) = &v474;
        if (v137) {
          unint64_t v137 = (unint64_t)sub_25B3FBC9C(v137);
        }
        else {
          uint64_t v138 = 0;
        }
        unint64_t v139 = v137 + 32 * v135;
        *(void *)unint64_t v139 = &off_2708F1B18;
        long long v140 = *(_OWORD *)(v111 + 8);
        *(_DWORD *)(v139 + 24) = *(_DWORD *)(v111 + 24);
        *(_OWORD *)(v139 + 8) = v140;
        unint64_t v142 = *((void *)&v473 + 1);
        uint64_t v141 = v473;
        if (*((void *)&v473 + 1) != (void)v473)
        {
          unint64_t v143 = v139 - 32;
          unint64_t v144 = v137 + 32 * v135;
          do
          {
            *(void *)(v144 - 32) = &off_2708F1B18;
            v144 -= 32;
            long long v145 = *(_OWORD *)(v142 - 24);
            *(_DWORD *)(v144 + 24) = *(_DWORD *)(v142 - 8);
            *(_OWORD *)(v144 + 8) = v145;
            v143 -= 32;
            v142 -= 32;
          }
          while (v142 != v141);
LABEL_236:
          int64x2_t v153 = (int64x2_t)v473;
LABEL_238:
          int32x2_t v133 = (int32x2_t *)(v139 + 32);
          *(void *)&long long v473 = v144;
          *((void *)&v473 + 1) = v139 + 32;
          v497[0] = v153;
          unint64_t v154 = v474;
          unint64_t v474 = v137 + 32 * v138;
          *(void *)&v497[1] = v154;
          uint64_t v496 = (void *)v153.i64[0];
          sub_25B43C884((uint64_t)&v496);
          goto LABEL_239;
        }
LABEL_237:
        int64x2_t v153 = vdupq_n_s64(v142);
        unint64_t v144 = v139;
        goto LABEL_238;
      }
      float v125 = v114 + 1;
      float32x4_t v126 = v114;
      if (v114 + 1 != v115)
      {
        float v127 = *v114;
        float32x4_t v126 = v114;
        uint64_t v128 = v114 + 1;
        do
        {
          float v129 = *v128++;
          float v130 = v129;
          if (v129 < v127)
          {
            float v127 = v130;
            float32x4_t v126 = v125;
          }
          float v125 = v128;
        }
        while (v128 != v115);
      }
      if (*v126 > 5.0)
      {
        uint64_t v131 = *((void *)&v473 + 1);
        if (*((void *)&v473 + 1) < v474)
        {
          **((void **)&v473 + 1) = &off_2708F1B18;
          long long v132 = *(_OWORD *)v11;
          *(_DWORD *)(v131 + 24) = *(_DWORD *)(v111 + 24);
          *(_OWORD *)(v131 + 8) = v132;
          int32x2_t v133 = (int32x2_t *)(v131 + 32);
LABEL_239:
          *((void *)&v473 + 1) = v133;
          goto LABEL_240;
        }
        uint64_t v146 = (uint64_t)(*((void *)&v473 + 1) - v473) >> 5;
        unint64_t v147 = v146 + 1;
        if ((unint64_t)(v146 + 1) >> 59) {
          sub_25B3FBC4C();
        }
        uint64_t v148 = v474 - v473;
        if ((uint64_t)(v474 - v473) >> 4 > v147) {
          unint64_t v147 = v148 >> 4;
        }
        if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v137 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v137 = v147;
        }
        *((void *)&v497[1] + 1) = &v474;
        if (v137) {
          unint64_t v137 = (unint64_t)sub_25B3FBC9C(v137);
        }
        else {
          uint64_t v138 = 0;
        }
        unint64_t v139 = v137 + 32 * v146;
        *(void *)unint64_t v139 = &off_2708F1B18;
        long long v149 = *(_OWORD *)v11;
        *(_DWORD *)(v139 + 24) = *(_DWORD *)(v111 + 24);
        *(_OWORD *)(v139 + 8) = v149;
        unint64_t v142 = *((void *)&v473 + 1);
        uint64_t v150 = v473;
        if (*((void *)&v473 + 1) != (void)v473)
        {
          unint64_t v151 = v139 - 32;
          unint64_t v144 = v137 + 32 * v146;
          do
          {
            *(void *)(v144 - 32) = &off_2708F1B18;
            v144 -= 32;
            long long v152 = *(_OWORD *)(v142 - 24);
            *(_DWORD *)(v144 + 24) = *(_DWORD *)(v142 - 8);
            *(_OWORD *)(v144 + 8) = v152;
            v151 -= 32;
            v142 -= 32;
          }
          while (v142 != v150);
          goto LABEL_236;
        }
        goto LABEL_237;
      }
LABEL_240:
      if (v114) {
        operator delete(v114);
      }
      v111 += 32;
      uint64_t v110 = v469;
    }
    int v109 = v461 + 14;
  }
  while (v461 + 14 != v455);
LABEL_244:
  uint64_t v496 = v493;
  sub_25B4331AC((void ***)&v496);
  if (__pb) {
    operator delete(__pb);
  }
  uint64_t v155 = *((void *)&v473 + 1);
  uint64_t v156 = v473;
  if (*((void *)&v473 + 1) == (void)v473) {
    goto LABEL_355;
  }
  unint64_t v157 = 0;
  v493[1] = 0;
  v493[0] = 0;
  v494[0] = 0;
  do
  {
    uint64_t v158 = v156 + 32 * v157;
    if (v155 != v156)
    {
      for (unint64_t i = 0; i < (v155 - v156) >> 5; ++i)
      {
        if (v157 != i)
        {
          uint64_t v160 = v156 + 32 * i;
          int v161 = *(void *)(v160 + 8) - *(void *)(v158 + 8);
          if (v161 < 0) {
            int v161 = *(void *)(v158 + 8) - *(void *)(v160 + 8);
          }
          if (v161 <= 2)
          {
            uint64_t v496 = &unk_2708F1B38;
            LOBYTE(v497[0]) = 0;
            BYTE4(v497[0]) = 0;
            BYTE8(v497[0]) = 0;
            BYTE12(v497[0]) = 0;
            LOBYTE(v497[1]) = 0;
            BYTE4(v497[1]) = 0;
            long long v498 = 0uLL;
            *((void *)&v497[1] + 1) = 0;
            *(_DWORD *)uint64_t v499 = 0;
            memset(&v499[8], 0, 48);
            sub_25B55DAEC((int64x2_t *)&v496, v158, v160, a4);
            uint64_t v162 = *(float **)&v499[8];
            if (*(void *)&v499[16] != *(void *)&v499[8])
            {
              int v163 = 0;
              do
              {
                float v164 = *v162++;
                if (v164 > 0.1) {
                  ++v163;
                }
              }
              while (v162 != *(float **)&v499[16]);
              if ((float)((float)v163
                         / (float)(unint64_t)((uint64_t)(*(void *)&v499[16] - *(void *)&v499[8]) >> 2)) > 0.8)
              {
                sub_25B43AD88((uint64_t)&v496);
                goto LABEL_345;
              }
            }
            sub_25B43AD88((uint64_t)&v496);
            uint64_t v155 = *((void *)&v473 + 1);
            uint64_t v156 = v473;
          }
        }
      }
    }
    uint64_t v166 = *(void *)(v158 + 8);
    uint64_t v165 = (uint64_t *)(v158 + 8);
    int v167 = HIDWORD(v166);
    __int32 v168 = v166;
    if ((v166 & 0x80000000) == 0 && v168 < *(_DWORD *)(a4 + 8))
    {
      unint64_t v11 = v167;
      uint64_t v169 = *(void *)(a4 + 16);
      uint64_t v170 = *(void *)(a4 + 144);
      uint64_t v171 = v167;
      if (v167 + 1 > (int)v169) {
        unint64_t v8 = (v167 + 1);
      }
      else {
        unint64_t v8 = v169;
      }
      int v172 = v8 - 1;
      while (1)
      {
        unint64_t v173 = v171 + 1;
        if (v171 + 1 >= (int)v169) {
          break;
        }
        float v174 = *(float *)(v170 + 4 * v168 * (int)v169 + 4 + 4 * v171++);
        if (v174 < 0.3)
        {
          int v172 = v173 - 1;
          unint64_t v8 = v173;
          break;
        }
      }
      if (v172 - 2 <= v167) {
        int v175 = v167;
      }
      else {
        int v175 = v172 - 2;
      }
      if ((v175 & 0x80000000) == 0 && v172 < (int)v169 && v172 >= -1 && v175 < (int)v169)
      {
        LODWORD(v483) = v168;
        sub_25B43C590((uint64_t)&v496, a4, (unsigned int *)&v483);
        if (v8 == v175)
        {
          int v176 = -1;
        }
        else
        {
          uint64_t v177 = 0;
          int v176 = -1;
          float v179 = -3.4028e38;
          do
          {
            uint64_t v178 = v503 + 4 * v175;
            if (*(float *)(v178 + 4 * v177) > v179)
            {
              float v179 = *(float *)(v178 + 4 * v177);
              int v176 = v177;
            }
            ++v177;
          }
          while (v8 - v175 != v177);
        }
        if (v176 + v175 - (int)v11 > 9)
        {
          *(void *)uint64_t v480 = &off_2708F1B18;
          *(_DWORD *)&v480[16] = 0;
          *(void *)&v480[20] = -1;
          uint64_t v180 = *v165;
          HIDWORD(v180) = v176 + v175;
          *(void *)&v480[8] = v180;
          float v181 = (char *)v493[1];
          if (v493[1] >= (void *)v494[0])
          {
            unint64_t v8 = ((char *)v493[1] - (char *)v493[0]) >> 5;
            unint64_t v184 = v8 + 1;
            if ((v8 + 1) >> 59) {
              sub_25B3FBC4C();
            }
            int64_t v185 = v494[0] - (unint64_t)v493[0];
            if ((uint64_t)(v494[0] - (unint64_t)v493[0]) >> 4 > v184) {
              unint64_t v184 = v185 >> 4;
            }
            if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v186 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v186 = v184;
            }
            *((void *)&v484[1] + 1) = v494;
            if (v186) {
              unint64_t v186 = (unint64_t)sub_25B3FBC9C(v186);
            }
            else {
              uint64_t v187 = 0;
            }
            unint64_t v188 = v186 + 32 * v8;
            *(void *)unint64_t v188 = &off_2708F1B18;
            long long v189 = *(_OWORD *)&v480[8];
            *(_DWORD *)(v188 + 24) = *(_DWORD *)&v480[24];
            *(_OWORD *)(v188 + 8) = v189;
            uint64_t v190 = (char *)v493[1];
            uint64_t v191 = (char *)v493[0];
            if (v493[1] == v493[0])
            {
              int64x2_t v195 = vdupq_n_s64((unint64_t)v493[1]);
              unint64_t v193 = v186 + 32 * v8;
            }
            else
            {
              unint64_t v192 = v188 - 32;
              unint64_t v193 = v186 + 32 * v8;
              do
              {
                *(void *)(v193 - 32) = &off_2708F1B18;
                v193 -= 32;
                long long v194 = *(_OWORD *)(v190 - 24);
                *(_DWORD *)(v193 + 24) = *((_DWORD *)v190 - 2);
                *(_OWORD *)(v193 + 8) = v194;
                v192 -= 32;
                v190 -= 32;
              }
              while (v190 != v191);
              int64x2_t v195 = *(int64x2_t *)v493;
            }
            uint64_t v183 = (void *)(v188 + 32);
            v493[0] = (void *)v193;
            v493[1] = (void *)(v188 + 32);
            v484[0] = v195;
            uint64_t v196 = v494[0];
            v494[0] = v186 + 32 * v187;
            *(void *)&v484[1] = v196;
            uint64_t v483 = (uint64_t (**)())v195.i64[0];
            sub_25B43C884((uint64_t)&v483);
          }
          else
          {
            *(void *)v493[1] = &off_2708F1B18;
            long long v182 = *(_OWORD *)&v480[8];
            *((_DWORD *)v181 + 6) = *(_DWORD *)&v480[24];
            *(_OWORD *)(v181 + 8) = v182;
            uint64_t v183 = v181 + 32;
          }
          v493[1] = v183;
        }
        uint64_t v197 = (int)HIDWORD(*v165);
        uint64_t v198 = v197 & (v197 >> 63);
        uint64_t v199 = v197;
        while (1)
        {
          uint64_t v200 = v199;
          BOOL v100 = v199-- < 1;
          if (v100) {
            break;
          }
          if (*(float *)(v170 + 4 * (int)(*v165 * v169) - 4 + 4 * v200) < 0.3)
          {
            int v201 = v200 + 2;
            if ((int)v197 < (int)v200 + 2) {
              int v201 = v197;
            }
            goto LABEL_315;
          }
        }
        if ((int)v197 >= (int)v198 + 2) {
          int v201 = v198 + 2;
        }
        else {
          int v201 = v197;
        }
        if ((v198 & 0x80000000) != 0) {
          goto LABEL_343;
        }
        LODWORD(v200) = 0;
LABEL_315:
        if ((int)v200 < (int)v169 && v201 >= -1 && v201 < (int)v169)
        {
          int v202 = v201 - v200;
          uint64_t v203 = (v202 + 1);
          if (v202 == -1)
          {
            int v204 = -1;
          }
          else
          {
            uint64_t v205 = 0;
            int v204 = -1;
            float v207 = -3.4028e38;
            do
            {
              uint64_t v206 = v503 + 4 * v200;
              if (*(float *)(v206 + 4 * v205) > v207)
              {
                float v207 = *(float *)(v206 + 4 * v205);
                int v204 = v205;
              }
              ++v205;
            }
            while (v203 != v205);
          }
          int v208 = v204 + v200;
          if ((int)v197 - v208 > 9)
          {
            *(void *)uint64_t v480 = &off_2708F1B18;
            *(_DWORD *)&v480[16] = 0;
            *(void *)&v480[20] = -1;
            uint64_t v209 = *v165;
            HIDWORD(v209) = v208;
            *(void *)&v480[8] = v209;
            float32x2_t v210 = (char *)v493[1];
            if (v493[1] >= (void *)v494[0])
            {
              int64_t v213 = ((char *)v493[1] - (char *)v493[0]) >> 5;
              unint64_t v214 = v213 + 1;
              if ((unint64_t)(v213 + 1) >> 59) {
                sub_25B3FBC4C();
              }
              int64_t v215 = v494[0] - (unint64_t)v493[0];
              if ((uint64_t)(v494[0] - (unint64_t)v493[0]) >> 4 > v214) {
                unint64_t v214 = v215 >> 4;
              }
              if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v216 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v216 = v214;
              }
              *((void *)&v484[1] + 1) = v494;
              if (v216) {
                unint64_t v216 = (unint64_t)sub_25B3FBC9C(v216);
              }
              else {
                uint64_t v217 = 0;
              }
              unint64_t v218 = v216 + 32 * v213;
              *(void *)unint64_t v218 = &off_2708F1B18;
              long long v219 = *(_OWORD *)&v480[8];
              *(_DWORD *)(v218 + 24) = *(_DWORD *)&v480[24];
              *(_OWORD *)(v218 + 8) = v219;
              uint64_t v220 = (char *)v493[1];
              uint64_t v221 = (char *)v493[0];
              if (v493[1] == v493[0])
              {
                int64x2_t v225 = vdupq_n_s64((unint64_t)v493[1]);
                unint64_t v223 = v216 + 32 * v213;
              }
              else
              {
                unint64_t v222 = v218 - 32;
                unint64_t v223 = v216 + 32 * v213;
                do
                {
                  *(void *)(v223 - 32) = &off_2708F1B18;
                  v223 -= 32;
                  long long v224 = *(_OWORD *)(v220 - 24);
                  *(_DWORD *)(v223 + 24) = *((_DWORD *)v220 - 2);
                  *(_OWORD *)(v223 + 8) = v224;
                  v222 -= 32;
                  v220 -= 32;
                }
                while (v220 != v221);
                int64x2_t v225 = *(int64x2_t *)v493;
              }
              float v212 = (void *)(v218 + 32);
              v493[0] = (void *)v223;
              v493[1] = (void *)(v218 + 32);
              v484[0] = v225;
              uint64_t v226 = v494[0];
              v494[0] = v216 + 32 * v217;
              *(void *)&v484[1] = v226;
              uint64_t v483 = (uint64_t (**)())v225.i64[0];
              sub_25B43C884((uint64_t)&v483);
            }
            else
            {
              *(void *)v493[1] = &off_2708F1B18;
              long long v211 = *(_OWORD *)&v480[8];
              *((_DWORD *)v210 + 6) = *(_DWORD *)&v480[24];
              *(_OWORD *)(v210 + 8) = v211;
              float v212 = v210 + 32;
            }
            v493[1] = v212;
          }
        }
LABEL_343:
        uint64_t v496 = &unk_2708F27E8;
        if (v501) {
          sub_25B404120(v501);
        }
      }
    }
LABEL_345:
    ++v157;
    uint64_t v155 = *((void *)&v473 + 1);
    uint64_t v156 = v473;
  }
  while (v157 < (uint64_t)(*((void *)&v473 + 1) - v473) >> 5);
  uint64_t v227 = (char *)v493[0];
  uint64_t v228 = (char *)v493[1];
  uint64_t v496 = &v473;
  while (v227 != v228)
  {
    sub_25B43C8F0((unint64_t **)&v496, (uint64_t)v227);
    v227 += 32;
  }
  uint64_t v496 = v493;
  sub_25B43AEC0((void ***)&v496);
  long long v230 = v473;
  uint64_t v231 = *((void *)&v473 + 1) - v473;
  if (*((void *)&v473 + 1) == (void)v473)
  {
LABEL_355:
    *(void *)uint64_t v446 = &unk_2708F1C48;
    *(void *)(v446 + 8) = 0;
    *(void *)(v446 + 16) = 0;
    *(void *)(v446 + 24) = 0;
    *(_DWORD *)(v446 + 32) = 0;
  }
  else
  {
    unint64_t v232 = v231 >> 5;
    if (v231 < 1)
    {
LABEL_354:
      int32x2_t v236 = 0;
      unint64_t v234 = 0;
    }
    else
    {
      uint64_t v233 = (const std::nothrow_t *)MEMORY[0x263F8C180];
      unint64_t v234 = v231 >> 5;
      while (1)
      {
        uint64_t v235 = operator new(32 * v234, v233);
        if (v235) {
          break;
        }
        BOOL v100 = v234 > 1;
        v234 >>= 1;
        if (!v100) {
          goto LABEL_354;
        }
      }
      int32x2_t v236 = v235;
    }
    sub_25B43B734(v230, *((uint64_t *)&v230 + 1), v232, (uint64_t)v236, v234, v229);
    if (v236) {
      operator delete(v236);
    }
    uint64_t v475 = 0;
    uint64_t v476 = 0;
    unint64_t v477 = 0;
    uint64_t v260 = *((void *)&v473 + 1);
    uint64_t v259 = v473;
    if (*((void *)&v473 + 1) == (void)v473)
    {
      uint64_t v259 = *((void *)&v473 + 1);
    }
    else
    {
      unint64_t v11 = 0;
      unint64_t v8 = 1;
      uint64_t v261 = 32;
      do
      {
        unint64_t v262 = v11 + 1;
        unint64_t v263 = (v260 - v259) >> 5;
        if (v263 > v11 + 1)
        {
          *(void *)uint64_t v464 = v261;
          unint64_t v470 = v8;
          do
          {
            uint64_t v496 = &unk_2708F1B38;
            LOBYTE(v497[0]) = 0;
            BYTE4(v497[0]) = 0;
            BYTE8(v497[0]) = 0;
            BYTE12(v497[0]) = 0;
            LOBYTE(v497[1]) = 0;
            BYTE4(v497[1]) = 0;
            long long v498 = 0uLL;
            *((void *)&v497[1] + 1) = 0;
            *(_DWORD *)uint64_t v499 = 0;
            memset(&v499[8], 0, 48);
            sub_25B55DAEC((int64x2_t *)&v496, v259 + 32 * v11, v259 + v261, a4);
            uint64_t v264 = v476;
            if ((unint64_t)v476 >= v477)
            {
              uint64_t v267 = sub_25B43B014(&v475, (uint64_t)&v496);
            }
            else
            {
              *uint64_t v476 = (uint64_t (**)())&unk_2708F1B38;
              long long v265 = v497[0];
              *(uint64_t (***)())((char *)v264 + 21) = *(uint64_t (***)())((char *)v497 + 13);
              *(_OWORD *)(v264 + 1) = v265;
              v264[4] = 0;
              v264[5] = 0;
              v264[6] = 0;
              sub_25B43B3F8((char *)v264 + 32, *((uint64_t *)&v497[1] + 1), v498, (uint64_t)(v498 - *((void *)&v497[1] + 1)) >> 5);
              int v266 = *(_DWORD *)v499;
              v264[8] = 0;
              *((_DWORD *)v264 + 14) = v266;
              v264[9] = 0;
              v264[10] = 0;
              sub_25B3FCA58(v264 + 8, *(const void **)&v499[8], *(uint64_t *)&v499[16], (uint64_t)(*(void *)&v499[16] - *(void *)&v499[8]) >> 2);
              v264[11] = 0;
              v264[12] = 0;
              v264[13] = 0;
              sub_25B43B4AC((char *)v264 + 88, *(uint64_t *)&v499[32], *(uint64_t *)&v499[40], (uint64_t)(*(void *)&v499[40] - *(void *)&v499[32]) >> 4);
              uint64_t v267 = (uint64_t)(v264 + 14);
            }
            uint64_t v476 = (uint64_t (***)())v267;
            sub_25B43AD88((uint64_t)&v496);
            ++v8;
            uint64_t v260 = *((void *)&v473 + 1);
            uint64_t v259 = v473;
            unint64_t v263 = (uint64_t)(*((void *)&v473 + 1) - v473) >> 5;
            v261 += 32;
          }
          while (v263 > v8);
          unint64_t v8 = v470;
          unint64_t v262 = v11 + 1;
          uint64_t v261 = *(void *)v464;
        }
        ++v8;
        v261 += 32;
        unint64_t v11 = v262;
      }
      while (v263 > v262);
    }
    memset(v484, 0, sizeof(v484));
    long long v485 = 0u;
    uint64_t v483 = (uint64_t (**)())&unk_2708F13E8;
    *(void *)&long long v486 = 0;
    memset((char *)v487 + 8, 0, 24);
    DWORD2(v486) = 1065353216;
    LODWORD(v487[0]) = 2;
    uint64_t v496 = v484;
    while (v259 != v260)
    {
      sub_25B43C8F0((unint64_t **)&v496, v259);
      v259 += 32;
    }
    uint64_t v268 = v475;
    uint64_t v269 = v476;
    if (v475 != v476)
    {
      while (2)
      {
        snprintf((char *)&v496, 0x100uLL, "%d_%d_%d_%d", v268[4][1], (unint64_t)v268[4][1] >> 32, v268[4][5], (unint64_t)v268[4][5] >> 32);
        sub_25B403500(v480, (char *)&v496);
        unint64_t v270 = sub_25B403AF4((uint64_t)v480);
        unint64_t v271 = v270;
        unint64_t v272 = v485;
        if ((void)v485)
        {
          uint8x8_t v273 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v485);
          v273.i16[0] = vaddlv_u8(v273);
          unint64_t v8 = v273.u32[0];
          if (v273.u32[0] > 1uLL)
          {
            unint64_t v11 = v270;
            if (v270 >= (unint64_t)v485) {
              unint64_t v11 = v270 % (unint64_t)v485;
            }
          }
          else
          {
            unint64_t v11 = (v485 - 1) & v270;
          }
          uint64_t v274 = *(void ***)(*((void *)&v484[1] + 1) + 8 * v11);
          if (v274)
          {
            uint64_t v275 = (char *)*v274;
            if (*v274)
            {
              do
              {
                unint64_t v276 = *((void *)v275 + 1);
                if (v276 == v271)
                {
                  if (sub_25B403F44((unsigned __int8 *)v275 + 16, v480)) {
                    goto LABEL_477;
                  }
                }
                else
                {
                  if (v8 > 1)
                  {
                    if (v276 >= v272) {
                      v276 %= v272;
                    }
                  }
                  else
                  {
                    v276 &= v272 - 1;
                  }
                  if (v276 != v11) {
                    break;
                  }
                }
                uint64_t v275 = *(char **)v275;
              }
              while (v275);
            }
          }
        }
        uint64_t v275 = (char *)operator new(0x98uLL);
        uint64_t v496 = v275;
        *(void *)&v497[0] = (char *)&v485 + 8;
        BYTE8(v497[0]) = 0;
        *(void *)uint64_t v275 = 0;
        *((void *)v275 + 1) = v271;
        uint64_t v277 = v275 + 16;
        if ((v480[23] & 0x80000000) != 0)
        {
          sub_25B4002F4(v277, *(void **)v480, *(unint64_t *)&v480[8]);
        }
        else
        {
          *(_OWORD *)uint64_t v277 = *(_OWORD *)v480;
          *((void *)v275 + 4) = *(void *)&v480[16];
        }
        *((void *)v275 + 5) = &unk_2708F1B38;
        v275[48] = 0;
        v275[52] = 0;
        v275[56] = 0;
        v275[60] = 0;
        v275[64] = 0;
        v275[68] = 0;
        *((void *)v275 + 10) = 0;
        *((void *)v275 + 11) = 0;
        *((void *)v275 + 9) = 0;
        *((_DWORD *)v275 + 24) = 0;
        *(_OWORD *)(v275 + 104) = 0u;
        *(_OWORD *)(v275 + 120) = 0u;
        *(_OWORD *)(v275 + 136) = 0u;
        BYTE8(v497[0]) = 1;
        float v278 = (float)(unint64_t)(v486 + 1);
        if (!v272 || (float)(*((float *)&v486 + 2) * (float)v272) < v278)
        {
          BOOL v279 = v272 < 3 || (v272 & (v272 - 1)) != 0;
          unint64_t v280 = v279 | (2 * v272);
          unint64_t v281 = vcvtps_u32_f32(v278 / *((float *)&v486 + 2));
          if (v280 <= v281) {
            size_t v282 = v281;
          }
          else {
            size_t v282 = v280;
          }
          sub_25B3FA4B0((uint64_t)&v484[1] + 8, v282);
          unint64_t v272 = v485;
          if (((unint64_t)v485 & ((void)v485 - 1)) != 0)
          {
            if (v271 >= (unint64_t)v485) {
              unint64_t v11 = v271 % (unint64_t)v485;
            }
            else {
              unint64_t v11 = v271;
            }
          }
          else
          {
            unint64_t v11 = (v485 - 1) & v271;
          }
        }
        uint64_t v283 = *((void *)&v484[1] + 1);
        unint64_t v284 = *(void **)(*((void *)&v484[1] + 1) + 8 * v11);
        if (v284)
        {
          *(void *)uint64_t v275 = *v284;
          goto LABEL_475;
        }
        *(void *)uint64_t v275 = *((void *)&v485 + 1);
        *((void *)&v485 + 1) = v275;
        *(void *)(v283 + 8 * v11) = (char *)&v485 + 8;
        if (*(void *)v275)
        {
          unint64_t v285 = *(void *)(*(void *)v275 + 8);
          if ((v272 & (v272 - 1)) != 0)
          {
            if (v285 >= v272) {
              v285 %= v272;
            }
          }
          else
          {
            v285 &= v272 - 1;
          }
          unint64_t v284 = (void *)(*((void *)&v484[1] + 1) + 8 * v285);
LABEL_475:
          *unint64_t v284 = v275;
        }
        uint64_t v496 = 0;
        *(void *)&long long v486 = v486 + 1;
        sub_25B55E3E8((uint64_t)&v496);
LABEL_477:
        long long v286 = *(_OWORD *)(v268 + 1);
        *(void *)(v275 + 61) = *(uint64_t (***)())((char *)v268 + 21);
        *((_OWORD *)v275 + 3) = v286;
        if (v275 + 40 == (char *)v268)
        {
          *((_DWORD *)v275 + 24) = *((_DWORD *)v268 + 14);
        }
        else
        {
          sub_25B43A898(v275 + 72, (uint64_t)v268[4], (uint64_t)v268[5], ((char *)v268[5] - (char *)v268[4]) >> 5);
          *((_DWORD *)v275 + 24) = *((_DWORD *)v268 + 14);
          sub_25B3FE7A8(v275 + 104, (char *)v268[8], (uint64_t)v268[9], ((char *)v268[9] - (char *)v268[8]) >> 2);
          sub_25B43AB10(v275 + 128, (uint64_t)v268[11], (uint64_t)v268[12], ((char *)v268[12] - (char *)v268[11]) >> 4);
        }
        if ((v480[23] & 0x80000000) != 0) {
          operator delete(*(void **)v480);
        }
        v268 += 14;
        if (v268 == v269) {
          break;
        }
        continue;
      }
    }
    int v287 = v487[0];
    memset(v480, 0, 24);
    uint64_t v471 = *((void *)&v484[0] + 1);
    uint64_t v288 = *(void *)&v484[0];
    if (*(void *)&v484[0] == *((void *)&v484[0] + 1))
    {
      unint64_t v337 = 0;
    }
    else
    {
      unint64_t v8 = 0;
      do
      {
        uint64_t v289 = *(void *)v480;
        if (*(void *)&v480[8] == *(void *)v480)
        {
          unint64_t v300 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v480[8] - *(void *)v480) >> 3);
LABEL_516:
          *(_DWORD *)(v288 + 20) = v8;
          *(_DWORD *)(v288 + 24) = v300;
          v493[1] = 0;
          v493[0] = 0;
          v494[0] = 0;
          *((void *)&v497[1] + 1) = v494;
          int v321 = (char *)operator new(0x20uLL);
          *(void *)int v321 = &off_2708F1B18;
          long long v322 = *(_OWORD *)(v288 + 8);
          *((_DWORD *)v321 + 6) = *(_DWORD *)(v288 + 24);
          *(_OWORD *)(v321 + 8) = v322;
          float v323 = v321 + 32;
          v493[0] = v321;
          v493[1] = v321 + 32;
          v494[0] = v321 + 32;
          memset(v497, 0, 24);
          uint64_t v496 = 0;
          sub_25B43C884((uint64_t)&v496);
          v493[1] = v323;
          uint64_t v324 = *(void *)&v480[8];
          if (*(void *)&v480[8] >= *(void *)&v480[16])
          {
            unint64_t v326 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v480[8] - *(void *)v480) >> 3);
            unint64_t v327 = v326 + 1;
            if (v326 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_25B3FBC4C();
            }
            if (0x5555555555555556 * ((uint64_t)(*(void *)&v480[16] - *(void *)v480) >> 3) > v327) {
              unint64_t v327 = 0x5555555555555556 * ((uint64_t)(*(void *)&v480[16] - *(void *)v480) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v480[16] - *(void *)v480) >> 3) >= 0x555555555555555) {
              unint64_t v328 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v328 = v327;
            }
            *((void *)&v497[1] + 1) = &v480[16];
            if (v328)
            {
              if (v328 > 0xAAAAAAAAAAAAAAALL) {
                sub_25B3FA70C();
              }
              uint64_t v329 = (char *)operator new(24 * v328);
            }
            else
            {
              uint64_t v329 = 0;
            }
            long long v330 = &v329[24 * v326];
            uint64_t v496 = v329;
            *(void *)&v497[0] = v330;
            *((void *)&v497[0] + 1) = v330;
            *(void *)&v497[1] = &v329[24 * v328];
            *((void *)v330 + 1) = 0;
            *((void *)v330 + 2) = 0;
            *(void *)long long v330 = 0;
            sub_25B43B3F8(v330, (uint64_t)v493[0], (uint64_t)v323, (int64_t)((uint64_t)v323 - (unint64_t)v493[0]) >> 5);
            uint64_t v331 = *(void *)&v497[0];
            uint64_t v325 = *((void *)&v497[0] + 1) + 24;
            *((void *)&v497[0] + 1) += 24;
            uint64_t v333 = *(void **)v480;
            uint64_t v332 = *(void **)&v480[8];
            if (*(void *)&v480[8] == *(void *)v480)
            {
              int64x2_t v335 = vdupq_n_s64(*(unint64_t *)&v480[8]);
            }
            else
            {
              do
              {
                *(void *)(v331 - 24) = 0;
                *(void *)(v331 - 16) = 0;
                v331 -= 24;
                *(void *)(v331 + 16) = 0;
                long long v334 = *(_OWORD *)(v332 - 3);
                v332 -= 3;
                *(_OWORD *)uint64_t v331 = v334;
                *(void *)(v331 + 16) = v332[2];
                void *v332 = 0;
                v332[1] = 0;
                v332[2] = 0;
              }
              while (v332 != v333);
              int64x2_t v335 = *(int64x2_t *)v480;
              uint64_t v325 = *((void *)&v497[0] + 1);
            }
            *(void *)uint64_t v480 = v331;
            *(void *)&v480[8] = v325;
            v497[0] = v335;
            uint64_t v336 = *(void *)&v480[16];
            *(void *)&v480[16] = *(void *)&v497[1];
            *(void *)&v497[1] = v336;
            uint64_t v496 = (void *)v335.i64[0];
            sub_25B55ED4C((uint64_t)&v496);
          }
          else
          {
            **(void **)&v480[8] = 0;
            *(void *)(v324 + 8) = 0;
            *(void *)(v324 + 16) = 0;
            sub_25B43B3F8((char *)v324, (uint64_t)v493[0], (uint64_t)v493[1], ((char *)v493[1] - (char *)v493[0]) >> 5);
            uint64_t v325 = v324 + 24;
          }
          unint64_t v8 = (v8 + 1);
          *(void *)&v480[8] = v325;
          uint64_t v496 = v493;
          sub_25B43AEC0((void ***)&v496);
        }
        else
        {
          unint64_t v290 = 0;
          char v291 = 0;
          uint64_t v292 = (long long *)(v288 + 8);
          while ((v291 & 1) == 0)
          {
            uint64_t v293 = (unint64_t *)(v289 + 24 * v290);
            int64_t v294 = *v293;
            float32x4_t v296 = v293 + 1;
            uint64_t v295 = (void *)v293[1];
            if ((void *)*v293 == v295)
            {
LABEL_494:
              char v291 = 0;
            }
            else
            {
              unint64_t v298 = (_DWORD *)*v293;
              while (1)
              {
                int v297 = *(_DWORD *)(v288 + 12);
                int v299 = v298[3] - v297;
                if (v299 < 0) {
                  int v299 = v297 - v298[3];
                }
                if (v299 <= v287) {
                  break;
                }
                v298 += 8;
                if (v298 == (_DWORD *)v295) {
                  goto LABEL_494;
                }
              }
              *(_DWORD *)(v288 + 20) = v8;
              *(_DWORD *)(v288 + 24) = v290;
              uint64_t v301 = v289 + 24 * v290;
              unint64_t v304 = *(void *)(v301 + 16);
              uint64_t v303 = (uint64_t *)(v301 + 16);
              unint64_t v302 = v304;
              if ((unint64_t)v295 >= v304)
              {
                uint64_t v306 = ((uint64_t)v295 - v294) >> 5;
                unint64_t v307 = v306 + 1;
                if ((unint64_t)(v306 + 1) >> 59) {
                  sub_25B3FBC4C();
                }
                uint64_t v308 = v302 - v294;
                if (v308 >> 4 > v307) {
                  unint64_t v307 = v308 >> 4;
                }
                if ((unint64_t)v308 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v309 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v309 = v307;
                }
                *((void *)&v497[1] + 1) = v303;
                if (v309) {
                  unint64_t v309 = (unint64_t)sub_25B3FBC9C(v309);
                }
                else {
                  uint64_t v310 = 0;
                }
                unint64_t v311 = v309 + 32 * v306;
                *(void *)unint64_t v311 = &off_2708F1B18;
                long long v312 = *v292;
                *(_DWORD *)(v311 + 24) = *(_DWORD *)(v288 + 24);
                *(_OWORD *)(v311 + 8) = v312;
                float v313 = (char *)*v296;
                float v314 = (char *)*v293;
                if (*v296 == *v293)
                {
                  int v318 = (void *)*v296;
                  unint64_t v316 = v309 + 32 * v306;
                }
                else
                {
                  unint64_t v315 = v311 - 32;
                  unint64_t v316 = v309 + 32 * v306;
                  do
                  {
                    *(void *)(v316 - 32) = &off_2708F1B18;
                    v316 -= 32;
                    long long v317 = *(_OWORD *)(v313 - 24);
                    *(_DWORD *)(v316 + 24) = *((_DWORD *)v313 - 2);
                    *(_OWORD *)(v316 + 8) = v317;
                    v315 -= 32;
                    v313 -= 32;
                  }
                  while (v313 != v314);
                  int v318 = (void *)*v293;
                  float v313 = (char *)*v296;
                }
                unint64_t v319 = v311 + 32;
                unint64_t *v293 = v316;
                *(void *)&v497[0] = v318;
                unint64_t *v296 = v311 + 32;
                *((void *)&v497[0] + 1) = v313;
                uint64_t v320 = *v303;
                *uint64_t v303 = v309 + 32 * v310;
                *(void *)&v497[1] = v320;
                uint64_t v496 = v318;
                sub_25B43C884((uint64_t)&v496);
                unint64_t *v296 = v319;
                unint64_t v8 = (v8 + 1);
                char v291 = 1;
                uint64_t v289 = *(void *)v480;
              }
              else
              {
                void *v295 = &off_2708F1B18;
                long long v305 = *v292;
                *((_DWORD *)v295 + 6) = *(_DWORD *)(v288 + 24);
                *(_OWORD *)(v295 + 1) = v305;
                unint64_t *v296 = (unint64_t)(v295 + 4);
                unint64_t v8 = (v8 + 1);
                char v291 = 1;
              }
            }
            ++v290;
            unint64_t v300 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)&v480[8] - v289) >> 3);
            if (v300 <= v290)
            {
              if (v291) {
                break;
              }
              goto LABEL_516;
            }
          }
        }
        v288 += 32;
      }
      while (v288 != v471);
      unint64_t v337 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v480[8] - *(void *)v480) >> 3);
    }
    long long v339 = *(char **)&v487[1];
    uint64_t v338 = (char *)*((void *)&v487[0] + 1);
    while (v339 != v338)
    {
      v339 -= 24;
      uint64_t v496 = v339;
      sub_25B43BBC8((void ***)&v496);
    }
    *(void *)&v487[1] = v338;
    if ((int)v337 >= 1)
    {
      int v340 = 0;
      unint64_t v341 = v337 << 32;
      unint64_t v8 = (unint64_t)v494;
      do
      {
        v493[1] = 0;
        v493[0] = 0;
        v494[0] = 0;
        if (v341)
        {
          if ((v341 & 0x8000000000000000) != 0) {
            sub_25B3FBC4C();
          }
          *((void *)&v497[1] + 1) = v494;
          int v342 = (char *)sub_25B460930((int)v337);
          uint64_t v496 = v342;
          *(void *)&v497[0] = v342;
          *(void *)&v497[1] = &v342[40 * v343];
          uint64_t v344 = &v342[40 * (int)v337];
          uint64_t v345 = v342;
          do
          {
            *(void *)uint64_t v345 = &unk_2708F1C48;
            *((void *)v345 + 1) = 0;
            *((void *)v345 + 2) = 0;
            *((void *)v345 + 3) = 0;
            *((_DWORD *)v345 + 8) = 0;
            v342 += 40;
            v345 += 40;
          }
          while (v345 != v344);
          *((void *)&v497[0] + 1) = v344;
          sub_25B55EB94((uint64_t *)v493, &v496);
          sub_25B55ECE0((uint64_t)&v496);
        }
        uint64_t v346 = *(void **)&v487[1];
        if (*(void *)&v487[1] >= *((void *)&v487[1] + 1))
        {
          unint64_t v348 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v487[1] - *((void *)&v487[0] + 1)) >> 3);
          unint64_t v349 = v348 + 1;
          if (v348 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_25B3FBC4C();
          }
          if (0x5555555555555556 * ((uint64_t)(*((void *)&v487[1] + 1) - *((void *)&v487[0] + 1)) >> 3) > v349) {
            unint64_t v349 = 0x5555555555555556 * ((uint64_t)(*((void *)&v487[1] + 1) - *((void *)&v487[0] + 1)) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v487[1] + 1) - *((void *)&v487[0] + 1)) >> 3) >= 0x555555555555555) {
            unint64_t v350 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v350 = v349;
          }
          *((void *)&v497[1] + 1) = (char *)&v487[1] + 8;
          if (v350)
          {
            if (v350 > 0xAAAAAAAAAAAAAAALL) {
              sub_25B3FA70C();
            }
            uint64_t v351 = (char *)operator new(24 * v350);
          }
          else
          {
            uint64_t v351 = 0;
          }
          uint64_t v352 = &v351[24 * v348];
          uint64_t v496 = v351;
          *(void *)&v497[0] = v352;
          *((void *)&v497[0] + 1) = v352;
          *(void *)&v497[1] = &v351[24 * v350];
          *((void *)v352 + 1) = 0;
          *((void *)v352 + 2) = 0;
          *(void *)uint64_t v352 = 0;
          sub_25B55E948(v352, (uint64_t)v493[0], (uint64_t)v493[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v493[1] - (char *)v493[0]) >> 3));
          uint64_t v353 = *(void *)&v497[0];
          uint64_t v347 = *((void *)&v497[0] + 1) + 24;
          *((void *)&v497[0] + 1) += 24;
          int v354 = *(void **)&v487[1];
          int v355 = (void *)*((void *)&v487[0] + 1);
          if (*(void *)&v487[1] == *((void *)&v487[0] + 1))
          {
            int64x2_t v357 = vdupq_n_s64(*(unint64_t *)&v487[1]);
          }
          else
          {
            do
            {
              *(void *)(v353 - 24) = 0;
              *(void *)(v353 - 16) = 0;
              v353 -= 24;
              *(void *)(v353 + 16) = 0;
              long long v356 = *(_OWORD *)(v354 - 3);
              v354 -= 3;
              *(_OWORD *)uint64_t v353 = v356;
              *(void *)(v353 + 16) = v354[2];
              *int v354 = 0;
              v354[1] = 0;
              v354[2] = 0;
            }
            while (v354 != v355);
            int64x2_t v357 = *(int64x2_t *)((char *)v487 + 8);
            uint64_t v347 = *((void *)&v497[0] + 1);
          }
          *((void *)&v487[0] + 1) = v353;
          *(void *)&v487[1] = v347;
          v497[0] = v357;
          uint64_t v358 = *((void *)&v487[1] + 1);
          *((void *)&v487[1] + 1) = *(void *)&v497[1];
          *(void *)&v497[1] = v358;
          uint64_t v496 = (void *)v357.i64[0];
          sub_25B55EAB0((uint64_t)&v496);
        }
        else
        {
          **(void **)&v487[1] = 0;
          v346[1] = 0;
          v346[2] = 0;
          sub_25B55E948(v346, (uint64_t)v493[0], (uint64_t)v493[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v493[1] - (char *)v493[0]) >> 3));
          uint64_t v347 = (uint64_t)(v346 + 3);
        }
        *(void *)&v487[1] = v347;
        uint64_t v496 = v493;
        sub_25B43BBC8((void ***)&v496);
        ++v340;
      }
      while (v340 != v337);
    }
    uint64_t v462 = *((void *)&v484[0] + 1);
    uint64_t v359 = *(void *)&v484[0];
    if (*(void *)&v484[0] != *((void *)&v484[0] + 1))
    {
      uint64_t v360 = (char *)&v485 + 8;
      while (1)
      {
        uint64_t v361 = *((void *)&v484[0] + 1);
        uint64_t v472 = *((void *)&v484[0] + 1);
        uint64_t v362 = *(void *)&v484[0];
        if (*(void *)&v484[0] != *((void *)&v484[0] + 1)) {
          break;
        }
LABEL_617:
        v359 += 32;
        if (v359 == v462) {
          goto LABEL_618;
        }
      }
      while (2)
      {
        if (*(_DWORD *)(v359 + 24) < *(_DWORD *)(v362 + 24))
        {
          snprintf((char *)&v496, 0x100uLL, "%d_%d_%d_%d", *(void *)(v359 + 8), HIDWORD(*(void *)(v359 + 8)), *(void *)(v362 + 8), HIDWORD(*(void *)(v362 + 8)));
          sub_25B403500(v493, (char *)&v496);
          unint64_t v363 = sub_25B403AF4((uint64_t)v493);
          unint64_t v364 = v363;
          unint64_t v365 = v485;
          if ((void)v485)
          {
            int v366 = v360;
            uint8x8_t v367 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v485);
            v367.i16[0] = vaddlv_u8(v367);
            unint64_t v368 = v367.u32[0];
            if (v367.u32[0] > 1uLL)
            {
              unint64_t v8 = v363;
              if (v363 >= (unint64_t)v485) {
                unint64_t v8 = v363 % (unint64_t)v485;
              }
            }
            else
            {
              unint64_t v8 = (v485 - 1) & v363;
            }
            uint64_t v369 = *(void ***)(*((void *)&v484[1] + 1) + 8 * v8);
            if (v369)
            {
              int v370 = (char *)*v369;
              if (*v369)
              {
                do
                {
                  unint64_t v371 = *((void *)v370 + 1);
                  if (v371 == v364)
                  {
                    if (sub_25B403F44((unsigned __int8 *)v370 + 16, (unsigned __int8 *)v493))
                    {
                      uint64_t v360 = v366;
                      unint64_t v8 = 40;
                      goto LABEL_608;
                    }
                  }
                  else
                  {
                    if (v368 > 1)
                    {
                      if (v371 >= v365) {
                        v371 %= v365;
                      }
                    }
                    else
                    {
                      v371 &= v365 - 1;
                    }
                    if (v371 != v8) {
                      break;
                    }
                  }
                  int v370 = *(char **)v370;
                }
                while (v370);
              }
            }
            uint64_t v360 = v366;
          }
          int v370 = (char *)operator new(0x98uLL);
          uint64_t v496 = v370;
          *(void *)&v497[0] = v360;
          *(void *)int v370 = 0;
          *((void *)v370 + 1) = v364;
          *((_OWORD *)v370 + 1) = *(_OWORD *)v493;
          uint64_t v372 = v494[0];
          v493[1] = 0;
          v493[0] = 0;
          v494[0] = 0;
          *((void *)v370 + 4) = v372;
          *((void *)v370 + 5) = &unk_2708F1B38;
          v370[48] = 0;
          v370[52] = 0;
          v370[56] = 0;
          v370[60] = 0;
          v370[64] = 0;
          v370[68] = 0;
          *((void *)v370 + 9) = 0;
          *((void *)v370 + 10) = 0;
          *((_DWORD *)v370 + 24) = 0;
          *((void *)v370 + 11) = 0;
          *(_OWORD *)(v370 + 136) = 0u;
          *(_OWORD *)(v370 + 120) = 0u;
          *(_OWORD *)(v370 + 104) = 0u;
          BYTE8(v497[0]) = 1;
          float v373 = (float)(unint64_t)(v486 + 1);
          if (!v365 || (float)(*((float *)&v486 + 2) * (float)v365) < v373)
          {
            BOOL v374 = (v365 & (v365 - 1)) != 0;
            if (v365 < 3) {
              BOOL v374 = 1;
            }
            unint64_t v375 = v374 | (2 * v365);
            unint64_t v376 = vcvtps_u32_f32(v373 / *((float *)&v486 + 2));
            if (v375 <= v376) {
              size_t v377 = v376;
            }
            else {
              size_t v377 = v375;
            }
            sub_25B3FA4B0((uint64_t)&v484[1] + 8, v377);
            unint64_t v365 = v485;
            if (((unint64_t)v485 & ((void)v485 - 1)) != 0)
            {
              if (v364 >= (unint64_t)v485) {
                unint64_t v8 = v364 % (unint64_t)v485;
              }
              else {
                unint64_t v8 = v364;
              }
            }
            else
            {
              unint64_t v8 = (v485 - 1) & v364;
            }
          }
          uint64_t v378 = *((void *)&v484[1] + 1);
          v379 = *(void **)(*((void *)&v484[1] + 1) + 8 * v8);
          if (v379)
          {
            *(void *)int v370 = *v379;
            unint64_t v8 = 40;
            goto LABEL_606;
          }
          *(void *)int v370 = *((void *)&v485 + 1);
          *((void *)&v485 + 1) = v370;
          *(void *)(v378 + 8 * v8) = v360;
          unint64_t v8 = 40;
          if (*(void *)v370)
          {
            unint64_t v380 = *(void *)(*(void *)v370 + 8);
            if ((v365 & (v365 - 1)) != 0)
            {
              if (v380 >= v365) {
                v380 %= v365;
              }
            }
            else
            {
              v380 &= v365 - 1;
            }
            v379 = (void *)(*((void *)&v484[1] + 1) + 8 * v380);
LABEL_606:
            void *v379 = v370;
          }
          uint64_t v496 = 0;
          *(void *)&long long v486 = v486 + 1;
          sub_25B55E3E8((uint64_t)&v496);
LABEL_608:
          if (SHIBYTE(v494[0]) < 0) {
            operator delete(v493[0]);
          }
          uint64_t v496 = &unk_2708F1C48;
          memset(v497, 0, 28);
          v493[1] = 0;
          v493[0] = 0;
          v494[0] = 0;
          v493[1] = (void *)sub_25B43B014(v493, (uint64_t)(v370 + 40));
          sub_25B55E4D4((uint64_t)&v496, (uint64_t *)v493);
          int v381 = *(_DWORD *)(v362 + 24);
          uint64_t v382 = *(void *)(*((void *)&v487[0] + 1) + 24 * *(int *)(v359 + 24));
          uint64_t v383 = v382 + 40 * v381;
          if (*(void *)(v383 + 16) == *(void *)(v383 + 8)
            || *(float *)(v382 + 40 * v381 + 32) < *((float *)&v497[1] + 2))
          {
            if ((void **)v383 != &v496) {
              sub_25B55E5A8((uint64_t *)(v383 + 8), *(uint64_t *)&v497[0], *((uint64_t *)&v497[0] + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v497[0] + 1) - *(void *)&v497[0]) >> 4));
            }
            *(_DWORD *)(v382 + 40 * v381 + 32) = DWORD2(v497[1]);
          }
          v492.__locale_ = (std::locale::__imp *)v493;
          sub_25B4331AC((void ***)&v492);
          uint64_t v496 = &unk_2708F1C48;
          v493[0] = v497;
          sub_25B4331AC((void ***)v493);
          uint64_t v361 = v472;
        }
        v362 += 32;
        if (v362 == v361) {
          goto LABEL_617;
        }
        continue;
      }
    }
LABEL_618:
    uint64_t v496 = v480;
    sub_25B55E440((void ***)&v496);
    uint64_t v385 = *((void *)&v484[0] + 1);
    uint64_t v384 = *(void *)&v484[0];
    if (*((void *)&v484[0] + 1) == *(void *)&v484[0])
    {
      uint64_t v413 = 0;
      uint64_t v412 = 0;
      *(void *)uint64_t v446 = &unk_2708F1C48;
      *(void *)(v446 + 8) = 0;
      *(void *)(v446 + 16) = 0;
      *(void *)(v446 + 24) = 0;
      *(_DWORD *)(v446 + 32) = 0;
    }
    else
    {
      int v386 = *(_DWORD *)(*(void *)&v484[0] + 24);
      int v387 = *(_DWORD *)(*((void *)&v484[0] + 1) - 8);
      do
      {
        uint64_t v389 = *((void *)&v484[0] + 1);
        for (uint64_t j = *(void *)&v484[0]; j != v389; j += 32)
        {
          BOOL v390 = *(_DWORD *)(v384 + 24) == v386 && *(_DWORD *)(j + 24) == v387;
          if (v390) {
            sub_25B55EDAC(&v483, v384, j);
          }
        }
        v384 += 32;
      }
      while (v384 != v385);
      memset(v480, 0, 24);
      *(void *)uint64_t v465 = *((void *)&v484[0] + 1);
      uint64_t v391 = *(void *)&v484[0];
      if (*(void *)&v484[0] == *((void *)&v484[0] + 1)) {
        goto LABEL_659;
      }
      unint64_t v392 = 0;
      unint64_t v393 = 0;
      do
      {
        uint64_t v395 = *((void *)&v484[0] + 1);
        for (uint64_t k = *(void *)&v484[0]; k != v395; k += 32)
        {
          if (*(_DWORD *)(v391 + 24) == v386 && *(_DWORD *)(k + 24) == v387)
          {
            uint64_t v396 = *(void *)(*((void *)&v487[0] + 1) + 24 * v386);
            if (v393 >= *(void *)&v480[16])
            {
              unint64_t v397 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v392 - *(void *)v480) >> 3);
              unint64_t v398 = v397 + 1;
              if (v397 + 1 > 0x666666666666666) {
                sub_25B3FBC4C();
              }
              if (0x999999999999999ALL * ((uint64_t)(*(void *)&v480[16] - *(void *)v480) >> 3) > v398) {
                unint64_t v398 = 0x999999999999999ALL * ((uint64_t)(*(void *)&v480[16] - *(void *)v480) >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v480[16] - *(void *)v480) >> 3) >= 0x333333333333333) {
                unint64_t v399 = 0x666666666666666;
              }
              else {
                unint64_t v399 = v398;
              }
              *((void *)&v497[1] + 1) = &v480[16];
              if (v399)
              {
                long long v401 = (char *)sub_25B460930(v399);
              }
              else
              {
                long long v401 = 0;
                uint64_t v400 = 0;
              }
              uint64_t v402 = &v401[40 * v397];
              uint64_t v496 = v401;
              *(void *)&v497[0] = v402;
              *((void *)&v497[0] + 1) = v402;
              *(void *)&v497[1] = &v401[40 * v400];
              *(void *)uint64_t v402 = &unk_2708F1C48;
              *((void *)v402 + 2) = 0;
              *((void *)v402 + 3) = 0;
              *((void *)v402 + 1) = 0;
              sub_25B55EB10((void *)v402 + 1, *(void *)(v396 + 40 * v387 + 8), *(void *)(v396 + 40 * v387 + 16), 0x6DB6DB6DB6DB6DB7* ((uint64_t)(*(void *)(v396 + 40 * v387 + 16) - *(void *)(v396 + 40 * v387 + 8)) >> 4));
              *(_DWORD *)&v401[40 * v397 + 32] = *(_DWORD *)(v396 + 40 * v387 + 32);
              *((void *)&v497[0] + 1) += 40;
              sub_25B55EB94((uint64_t *)v480, &v496);
              unint64_t v392 = *(void *)&v480[8];
              sub_25B55ECE0((uint64_t)&v496);
            }
            else
            {
              *(void *)unint64_t v392 = &unk_2708F1C48;
              *(void *)(v392 + 8) = 0;
              *(void *)(v392 + 16) = 0;
              *(void *)(v392 + 24) = 0;
              sub_25B55EB10((void *)(v392 + 8), *(void *)(v396 + 40 * v387 + 8), *(void *)(v396 + 40 * v387 + 16), 0x6DB6DB6DB6DB6DB7* ((uint64_t)(*(void *)(v396 + 40 * v387 + 16) - *(void *)(v396 + 40 * v387 + 8)) >> 4));
              *(_DWORD *)(v392 + 32) = *(_DWORD *)(v396 + 40 * v387 + 32);
              unint64_t v392 = v393 + 40;
            }
            *(void *)&v480[8] = v392;
            unint64_t v393 = v392;
          }
        }
        v391 += 32;
      }
      while (v391 != *(void *)v465);
      uint64_t v403 = *(void *)v480;
      if (v393 == *(void *)v480)
      {
LABEL_659:
        uint64_t v411 = v446;
        *(void *)uint64_t v446 = &unk_2708F1C48;
        *(void *)(v446 + 8) = 0;
        *(void *)(v446 + 16) = 0;
        *(void *)(v446 + 24) = 0;
        *(_DWORD *)(v446 + 32) = 0;
      }
      else
      {
        uint64_t v404 = 0;
        unint64_t v405 = (uint64_t)(v393 - *(void *)v480) / 40;
        if (v405 <= 1) {
          unint64_t v405 = 1;
        }
        unint64_t v406 = (float *)(*(void *)v480 + 32);
        int v407 = -1;
        float v408 = -3.4028e38;
        do
        {
          float v409 = *v406;
          v406 += 10;
          float v410 = v409;
          if (v409 >= v408)
          {
            float v408 = v410;
            int v407 = v404;
          }
          ++v404;
        }
        while (v405 != v404);
        uint64_t v411 = v446;
        *(void *)uint64_t v446 = &unk_2708F1C48;
        *(void *)(v446 + 16) = 0;
        *(void *)(v446 + 24) = 0;
        *(void *)(v446 + 8) = 0;
        sub_25B55EB10((void *)(v446 + 8), *(void *)(v403 + 40 * v407 + 8), *(void *)(v403 + 40 * v407 + 16), 0x6DB6DB6DB6DB6DB7* ((uint64_t)(*(void *)(v403 + 40 * v407 + 16) - *(void *)(v403 + 40 * v407 + 8)) >> 4));
        *(_DWORD *)(v446 + 32) = *(_DWORD *)(v403 + 40 * v407 + 32);
      }
      uint64_t v496 = v480;
      sub_25B43BBC8((void ***)&v496);
      uint64_t v413 = *(void *)(v411 + 8);
      uint64_t v412 = *(void *)(v411 + 16);
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v412 - v413) >> 4)) >= 2)
    {
      uint64_t v414 = 0;
      unint64_t v415 = 1;
      do
      {
        uint64_t v416 = *(void *)(v413 + v414 + 32);
        uint64_t v417 = *(void *)(v413 + v414 + 144);
        if (*(_DWORD *)(v416 + 52) != *(_DWORD *)(v417 + 20)
          || *(_DWORD *)(v416 + 56) != *(_DWORD *)(v417 + 24)
          || vabds_f32(*(float *)(v416 + 48), *(float *)(v417 + 16)) > 0.000001
          || (int32x2_t v418 = vceq_s32(*(int32x2_t *)(v416 + 40), *(int32x2_t *)(v417 + 8)), (v418.i32[0] & v418.i32[1] & 1) == 0))
        {
          uint64_t v419 = *(void *)(v416 + 40);
          int v420 = *(_DWORD *)(v417 + 12);
          float v421 = *(float *)(v416 + 48);
          float v422 = *(float *)(v417 + 16);
          if (v421 >= 0.1 || (int v423 = *(_DWORD *)(v417 + 12), v422 < 0.1))
          {
            int v423 = HIDWORD(*(void *)(v416 + 40));
            if (v421 < 0.1 || v422 >= 0.1)
            {
              BOOL v424 = __OFADD__(v420, HIDWORD(v419));
              int v425 = v420 + HIDWORD(v419);
              if (v425 < 0 != v424) {
                ++v425;
              }
              int v423 = v425 >> 1;
            }
          }
          HIDWORD(v419) = v423;
          *(void *)(v416 + 40) = v419;
          *(_DWORD *)(v417 + 12) = v423;
          uint64_t v413 = *(void *)(v446 + 8);
          uint64_t v412 = *(void *)(v446 + 16);
        }
        ++v415;
        v414 += 112;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((v412 - v413) >> 4) > v415);
    }
LABEL_677:
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v412 - v413) >> 4)) >= 2 && v412 - v413 != 112)
    {
      uint64_t v426 = 0;
      unint64_t v427 = 0;
      char v428 = 0;
      uint64_t v429 = 0xFFFFFFFFLL;
      while (1)
      {
        uint64_t v430 = v413 + v426;
        uint64_t v431 = *(void *)(v413 + v426 + 32);
        if (*(float *)(v431 + 48) <= 0.001)
        {
          uint64_t v432 = *(void *)(v430 + 144);
          if (*(float *)(v432 + 16) <= 0.001)
          {
            int v433 = *(void *)(v431 + 40);
            if (v433 == *(void *)(v432 + 8)
              && *(float *)(v431 + 16) > 0.001
              && *(float *)(v432 + 48) > 0.001
              && (vabds_f32((float)(int)*(void *)(v431 + 8), (float)v433) >= 0.01
               || vabds_f32((float)v433, (float)(int)*(void *)(v432 + 40)) >= 0.01))
            {
              uint64_t v496 = &unk_2708F1B38;
              LOBYTE(v497[0]) = 0;
              BYTE4(v497[0]) = 0;
              BYTE8(v497[0]) = 0;
              BYTE12(v497[0]) = 0;
              LOBYTE(v497[1]) = 0;
              BYTE4(v497[1]) = 0;
              long long v498 = 0uLL;
              *((void *)&v497[1] + 1) = 0;
              *(_DWORD *)uint64_t v499 = 0;
              memset(&v499[8], 0, 48);
              sub_25B55DAEC((int64x2_t *)&v496, *(void *)(v430 + 32), *(void *)(v430 + 144) + 32, a4);
              *(void *)uint64_t v480 = &unk_2708F1C48;
              memset(&v480[8], 0, 24);
              float v481 = 0.0;
              v493[1] = 0;
              v493[0] = 0;
              v494[0] = 0;
              float v434 = (char *)sub_25B43B014(v493, v430);
              float v435 = v434;
              uint64_t v436 = v430 + 112;
              v493[1] = v434;
              if ((unint64_t)v434 >= v494[0])
              {
                uint64_t v437 = (void *)sub_25B43B014(v493, v436);
              }
              else
              {
                sub_25B43B1C8((uint64_t)v434, v436);
                uint64_t v437 = v435 + 112;
              }
              v493[1] = v437;
              sub_25B55E4D4((uint64_t)v480, (uint64_t *)v493);
              if (*(float *)v499 <= 0.3 || (float)(v481 - *(float *)v499) >= 0.1)
              {
                int v438 = 1;
              }
              else
              {
                int v438 = 0;
                uint64_t v429 = v427;
                char v428 = 1;
              }
              v492.__locale_ = (std::locale::__imp *)v493;
              sub_25B4331AC((void ***)&v492);
              *(void *)uint64_t v480 = &unk_2708F1C48;
              v493[0] = &v480[8];
              sub_25B4331AC((void ***)v493);
              sub_25B43AD88((uint64_t)&v496);
              if (!v438)
              {
LABEL_697:
                if (v428)
                {
                  uint64_t v413 = *(void *)(v446 + 8);
                  uint64_t v412 = *(void *)(v446 + 16);
                  if ((v429 & 0x80000000) == 0
                    && (int)v429 < (int)(-1 - 1227133513 * ((unint64_t)(v412 - v413) >> 4)))
                  {
                    uint64_t v496 = &unk_2708F21F8;
                    memset(v497, 0, sizeof(v497));
                    long long v498 = 0u;
                    memset(v499, 0, 48);
                    uint64_t v500 = 0;
                    float v501 = 0;
                    __int16 v502 = 257;
                    sub_25B55DAEC((int64x2_t *)(v413 + 112 * v429), *(void *)(v413 + 112 * v429 + 32), *(void *)(v413 + 112 * v429 + 144) + 32, (uint64_t)&v496);
                    uint64_t v439 = sub_25B43AE00(*(void *)(v446 + 8) + 112 * v429 + 224, *(void *)(v446 + 16), *(void *)(v446 + 8) + 112 * v429 + 112);
                    uint64_t v440 = *(void *)(v446 + 16);
                    if (v440 != v439)
                    {
                      uint64_t v441 = v440 - 112;
                      int32x2_t v442 = (void (***)(void))(v440 - 112);
                      int32x2_t v443 = (void (***)(void))(v440 - 112);
                      do
                      {
                        int32x2_t v444 = *v443;
                        v443 -= 14;
                        (*v444)(v442);
                        v441 -= 112;
                        BOOL v390 = v442 == (void (***)(void))v439;
                        int32x2_t v442 = v443;
                      }
                      while (!v390);
                    }
                    *(void *)(v446 + 16) = v439;
                    sub_25B55E8CC(v446);
                    uint64_t v496 = &unk_2708F21F8;
                    if (v501) {
                      sub_25B404120(v501);
                    }
                    uint64_t v413 = *(void *)(v446 + 8);
                    uint64_t v412 = *(void *)(v446 + 16);
                  }
                  goto LABEL_677;
                }
                break;
              }
              uint64_t v413 = *(void *)(v446 + 8);
              uint64_t v412 = *(void *)(v446 + 16);
            }
          }
        }
        ++v427;
        v426 += 112;
        if (0x6DB6DB6DB6DB6DB7 * ((v412 - v413) >> 4) - 1 <= v427) {
          goto LABEL_697;
        }
      }
    }
    sub_25B43BAA8((uint64_t)&v483);
    uint64_t v496 = &v475;
    sub_25B4331AC((void ***)&v496);
  }
LABEL_708:
  uint64_t v496 = &v473;
  sub_25B43AEC0((void ***)&v496);
}

void sub_25B430960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  STACK[0x230] = (unint64_t)&a39;
  sub_25B43BBC8((void ***)&STACK[0x230]);
  sub_25B43BAA8((uint64_t)&a59);
  a59 = (uint64_t)&a34;
  sub_25B4331AC((void ***)&a59);
  a34 = (uint64_t)&a31;
  sub_25B43AEC0((void ***)&a34);
  _Unwind_Resume(a1);
}

void sub_25B430E4C(void *a1, uint64_t a2)
{
  uint64_t v253 = *MEMORY[0x263EF8340];
  unsigned int v227 = 2;
  v235[0].__locale_ = (std::locale::__imp *)0x1000000005;
  LODWORD(v235[1].__locale_) = 1;
  sub_25B43333C((uint64_t)&v222, a2 + 720, (uint64_t)v235);
  LODWORD(v235[0].__locale_) = 0;
  sub_25B4333E8((uint64_t)&v219, (uint64_t)&v222, (int *)v235);
  sub_25B4347A0((uint64_t)v235, a2 + 872, &v227);
  sub_25B434554((uint64_t)v217, (uint64_t)v235);
  v235[0].__locale_ = (std::locale::__imp *)&unk_2708F18E0;
  if ((void)v243) {
    sub_25B404120((std::__shared_weak_count *)v243);
  }
  sub_25B404048((uint64_t)&v213, a2 + 256);
  sub_25B404048((uint64_t)v211, a2 + 408);
  sub_25B404048((uint64_t)v209, a2 + 560);
  long long v207 = 0uLL;
  unint64_t v208 = 0;
  uint64_t v3 = a1[4];
  int v4 = *(_DWORD *)(v3 + 12);
  int v206 = v4;
  if (v4 <= *(_DWORD *)(v3 + 44))
  {
    uint64_t v14 = (int32x2_t *)a1[4];
    do
    {
      int v204 = &unk_2708F2160;
      memset(v205, 0, 7);
      int32x2_t v15 = v14[5];
      float v16 = (float)(int)*(void *)&v14[1];
      float32x2_t v17 = vcvt_f32_s32(vzip2_s32(v15, v14[1]));
      *(float *)v15.i32 = (float)v15.i32[0];
      _NF = vabds_f32(v17.f32[0], v17.f32[1]) < 0.000001;
      float v19 = (float)((float)((float)((float)v4 - v17.f32[1]) * (float)(*(float *)v15.i32 - v16))
                  / (float)(v17.f32[0] - v17.f32[1]))
          + v16;
      float v20 = (float)(v16 + *(float *)v15.i32) * 0.5;
      if (!_NF) {
        float v20 = v19;
      }
      float v21 = -v20;
      if (v20 >= 0.0) {
        float v21 = v20;
      }
      int v22 = (int)v21;
      float v23 = v21 - (float)(int)v21;
      if (v23 < 0.5) {
        int v24 = v22;
      }
      else {
        int v24 = v22 + 1;
      }
      int v25 = (v22 & 1) + v22;
      if (v23 != 0.5) {
        int v25 = v24;
      }
      if (v20 >= 0.0) {
        int v26 = v25;
      }
      else {
        int v26 = -v25;
      }
      int v186 = v26 - 2;
      int v187 = v26;
      if (v26 <= 2) {
        signed int v27 = 0;
      }
      else {
        signed int v27 = v26 - 2;
      }
      signed int v28 = v26 + 2;
      if (v28 >= v220 - 1) {
        signed int v29 = v220 - 1;
      }
      else {
        signed int v29 = v28;
      }
      if (v206 <= 1) {
        int v30 = 1;
      }
      else {
        int v30 = v206;
      }
      if (v206 + 1 < v225 - 1) {
        int v31 = v206 + 1;
      }
      else {
        int v31 = v225 - 1;
      }
      int v32 = v29 + 1;
      if (v27 <= v29)
      {
        BOOL v33 = v27 < v224 && v29 < v224;
        int v34 = v31 + 1;
        if (v33 && v30 <= v34)
        {
          signed int v178 = v29;
          LODWORD(v180) = v30 - 1;
          HIDWORD(v180) = v34;
          uint64_t v36 = &v236;
          for (uint64_t i = 8; i != 32; i += 8)
          {
            uint64_t v38 = *(uint64_t *)((char *)&v222 + i);
            *((void *)v36 - 2) = 0;
            *((void *)v36 - 1) = v38;
            *(void *)uint64_t v36 = 1;
            uint64_t v36 = (long long *)((char *)v36 + 24);
          }
          int v181 = v29 + 1;
          signed int v183 = v27;
          sub_25B436AEC((uint64_t)&v223, (uint64_t)v235, 1u, v27, v32, 1);
          sub_25B436AEC((uint64_t)&v223, (uint64_t)v235, 2u, v180, SHIDWORD(v180), 1);
          sub_25B4360E0((uint64_t)&v189, (uint64_t)&v222, (uint64_t)v235);
          if (v196)
          {
            long long v39 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
            int64x2_t v40 = sub_25B406B20(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
            sub_25B406B20(v40, (uint64_t)" ", 1);
            unint64_t v41 = (void *)std::ostream::operator<<();
            sub_25B406B20(v41, (uint64_t)" ", 1);
            sub_25B406B20(v41, (uint64_t)"ascontiguous", 12);
            std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
            float v42 = std::locale::use_facet(v235, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
            std::locale::~locale(v235);
            std::ostream::put();
            std::ostream::flush();
            sub_25B407E3C("err", "empty tensor");
            std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8] + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
            unint64_t v43 = std::locale::use_facet(v235, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
            std::locale::~locale(v235);
            std::ostream::put();
            std::ostream::flush();
          }
          if (v195)
          {
            sub_25B43A318((uint64_t)&v198, (uint64_t)&v189);
          }
          else
          {
            sub_25B438688((uint64_t)&v198, (long long *)&v190);
            if (*(std::locale::__imp **)&v199[0] == v190 && *(_OWORD *)((char *)v199 + 8) == v191)
            {
              if (v195)
              {
                long long v236 = 0u;
                long long v237 = 0u;
                *(_OWORD *)&v235[0].__locale_ = 0u;
                uint64_t v44 = v200;
                float v45 = v203;
                if (v202)
                {
                  if (v200)
                  {
                    uint64_t v46 = v197;
                    do
                    {
                      __int16 v47 = *v46++;
                      *v45++ = v47;
                      --v44;
                    }
                    while (v44);
                  }
                }
                else if (v200)
                {
                  uint64_t v164 = 0;
                  uint64_t v165 = v197;
                  do
                  {
                    uint64_t v166 = 0;
                    uint64_t v167 = 0;
                    do
                    {
                      v167 += *(void *)((char *)&v199[3] + v166 * 8) * (uint64_t)v235[v166].__locale_;
                      ++v166;
                    }
                    while (v166 != 3);
                    uint64_t v168 = 0;
                    v45[v167] = v165[v164];
                    do
                    {
                      uint64_t v169 = *(void *)((char *)&v236 + v168) + 1;
                      *(void *)((char *)&v236 + v168) = v169;
                      if (v169 != *(void *)((char *)&v199[1] + v168)) {
                        break;
                      }
                      *(void *)((char *)&v236 + v168) = 0;
                      v168 -= 8;
                    }
                    while (v168 != -24);
                    ++v164;
                  }
                  while (v164 != v44);
                }
              }
              else
              {
                long long v236 = 0u;
                long long v237 = 0u;
                *(_OWORD *)&v235[0].__locale_ = 0u;
                uint64_t v156 = v200;
                unint64_t v157 = v203;
                if (v202)
                {
                  if (v200)
                  {
                    uint64_t v158 = 0;
                    uint64_t v159 = v197;
                    do
                    {
                      uint64_t v160 = 0;
                      uint64_t v161 = 0;
                      do
                      {
                        v161 += *(void *)&v192[v160 * 8] * (uint64_t)v235[v160].__locale_;
                        ++v160;
                      }
                      while (v160 != 3);
                      uint64_t v162 = 0;
                      v157[v158] = v159[v161];
                      do
                      {
                        uint64_t v163 = *(void *)((char *)&v236 + v162) + 1;
                        *(void *)((char *)&v236 + v162) = v163;
                        if (v163 != *(void *)((char *)&v199[1] + v162)) {
                          break;
                        }
                        *(void *)((char *)&v236 + v162) = 0;
                        v162 -= 8;
                      }
                      while (v162 != -24);
                      ++v158;
                    }
                    while (v158 != v156);
                  }
                }
                else if (v200)
                {
                  uint64_t v170 = 0;
                  uint64_t v171 = v197;
                  do
                  {
                    uint64_t v172 = 0;
                    uint64_t v173 = 0;
                    do
                    {
                      v173 += *(void *)((char *)&v199[3] + v172 * 8) * (uint64_t)v235[v172].__locale_;
                      ++v172;
                    }
                    while (v172 != 3);
                    uint64_t v174 = 0;
                    uint64_t v175 = 0;
                    do
                    {
                      v175 += *(void *)&v192[v174 * 8] * (uint64_t)v235[v174].__locale_;
                      ++v174;
                    }
                    while (v174 != 3);
                    uint64_t v176 = 0;
                    v157[v173] = v171[v175];
                    do
                    {
                      uint64_t v177 = *(void *)((char *)&v236 + v176) + 1;
                      *(void *)((char *)&v236 + v176) = v177;
                      if (v177 != *(void *)((char *)&v199[1] + v176)) {
                        break;
                      }
                      *(void *)((char *)&v236 + v176) = 0;
                      v176 -= 8;
                    }
                    while (v176 != -24);
                    ++v170;
                  }
                  while (v170 != v156);
                }
              }
            }
            else
            {
              if (v195)
              {
                long long v248 = 0u;
                long long v249 = 0u;
                long long v246 = 0u;
                long long v247 = 0u;
                long long v244 = 0u;
                long long v245 = 0u;
                long long v242 = 0u;
                long long v243 = 0u;
                long long v240 = 0u;
                long long v241 = 0u;
                long long v238 = 0u;
                long long v239 = 0u;
                long long v236 = 0u;
                long long v237 = 0u;
                *(_OWORD *)&v235[0].__locale_ = 0u;
                long long v230 = 0u;
                memset(v229, 0, sizeof(v229));
                sub_25B43A3F0((uint64_t)v235, v199, &v190, (uint64_t)v229);
                if (*(void *)&v229[0] != *(void *)&v199[0]
                  || *(_OWORD *)((char *)v229 + 8) != *(_OWORD *)((char *)v199 + 8))
                {
                  uint64_t v48 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
                  uint64_t v49 = sub_25B406B20(v48, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
                  sub_25B406B20(v49, (uint64_t)" ", 1);
                  uint64_t v50 = (void *)std::ostream::operator<<();
                  sub_25B406B20(v50, (uint64_t)" ", 1);
                  sub_25B406B20(v50, (uint64_t)"broadcast_assign_continue", 25);
                  std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(void *)(*v50 - 24)));
                  uint64_t v51 = std::locale::use_facet(v250, MEMORY[0x263F8C108]);
                  ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
                  std::locale::~locale(v250);
                  std::ostream::put();
                  std::ostream::flush();
                  sub_25B406ED4("err", "broadcast assign issue");
                  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8]
                                                              + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
                  char v52 = std::locale::use_facet(v250, MEMORY[0x263F8C108]);
                  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
                  std::locale::~locale(v250);
                  std::ostream::put();
                  std::ostream::flush();
                }
                long long v251 = 0u;
                long long v252 = 0u;
                *(_OWORD *)&v250[0].__locale_ = 0u;
                long long v233 = 0u;
                long long v234 = 0u;
                *(_OWORD *)&v232[0].__locale_ = 0u;
                uint64_t v53 = v200;
                uint64_t v54 = v203;
                if (v202)
                {
                  if (v200)
                  {
                    uint64_t v55 = 0;
                    uint64_t v56 = v197;
                    do
                    {
                      v228.__locale_ = 0;
                      sub_25B43A810((uint64_t)v235, (uint64_t)v250, (uint64_t *)&v228, (uint64_t)v232);
                      v54[v55] = v56[(uint64_t)v228.__locale_];
                      for (uint64_t j = 2; j != -1; --j)
                      {
                        unint64_t v58 = (std::locale::__imp *)((char *)v250[j].__locale_ + 1);
                        v250[j].__locale_ = v58;
                        if (v58 != *(std::locale::__imp **)((char *)v229 + j * 8)) {
                          break;
                        }
                        v250[j].__locale_ = 0;
                      }
                      ++v55;
                    }
                    while (v55 != v53);
                  }
                }
                else if (v200)
                {
                  uint64_t v72 = 0;
                  int v73 = v197;
                  do
                  {
                    v228.__locale_ = 0;
                    sub_25B43A810((uint64_t)v235, (uint64_t)v250, (uint64_t *)&v228, (uint64_t)v232);
                    uint64_t v74 = 0;
                    uint64_t v75 = 0;
                    do
                    {
                      v75 += *(void *)((char *)&v199[3] + v74 * 8) * (uint64_t)v250[v74].__locale_;
                      ++v74;
                    }
                    while (v74 != 3);
                    v54[v75] = v73[(uint64_t)v228.__locale_];
                    for (uint64_t k = 2; k != -1; --k)
                    {
                      uint64_t v77 = (std::locale::__imp *)((char *)v250[k].__locale_ + 1);
                      v250[k].__locale_ = v77;
                      if (v77 != *(std::locale::__imp **)((char *)v229 + k * 8)) {
                        break;
                      }
                      v250[k].__locale_ = 0;
                    }
                    ++v72;
                  }
                  while (v72 != v53);
                }
              }
              else
              {
                long long v248 = 0u;
                long long v249 = 0u;
                long long v246 = 0u;
                long long v247 = 0u;
                long long v244 = 0u;
                long long v245 = 0u;
                long long v242 = 0u;
                long long v243 = 0u;
                long long v240 = 0u;
                long long v241 = 0u;
                long long v238 = 0u;
                long long v239 = 0u;
                long long v236 = 0u;
                long long v237 = 0u;
                *(_OWORD *)&v235[0].__locale_ = 0u;
                long long v230 = 0u;
                memset(v229, 0, sizeof(v229));
                sub_25B43A3F0((uint64_t)v235, v199, &v190, (uint64_t)v229);
                if (*(void *)&v229[0] != *(void *)&v199[0]
                  || *(_OWORD *)((char *)v229 + 8) != *(_OWORD *)((char *)v199 + 8))
                {
                  int v59 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
                  unint64_t v60 = sub_25B406B20(v59, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
                  sub_25B406B20(v60, (uint64_t)" ", 1);
                  int v61 = (void *)std::ostream::operator<<();
                  sub_25B406B20(v61, (uint64_t)" ", 1);
                  sub_25B406B20(v61, (uint64_t)"broadcast_assign_stride", 23);
                  std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(void *)(*v61 - 24)));
                  uint64_t v62 = std::locale::use_facet(v250, MEMORY[0x263F8C108]);
                  ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
                  std::locale::~locale(v250);
                  std::ostream::put();
                  std::ostream::flush();
                  sub_25B406ED4("err", "broadcast assign issue");
                  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8]
                                                              + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
                  double v63 = std::locale::use_facet(v250, MEMORY[0x263F8C108]);
                  ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
                  std::locale::~locale(v250);
                  std::ostream::put();
                  std::ostream::flush();
                }
                long long v251 = 0u;
                long long v252 = 0u;
                *(_OWORD *)&v250[0].__locale_ = 0u;
                long long v233 = 0u;
                long long v234 = 0u;
                *(_OWORD *)&v232[0].__locale_ = 0u;
                uint64_t v64 = v200;
                float v179 = v203;
                if (v202)
                {
                  if (v200)
                  {
                    uint64_t v65 = 0;
                    int v66 = v195;
                    uint64_t v67 = v197;
                    do
                    {
                      v228.__locale_ = 0;
                      sub_25B43A810((uint64_t)v235, (uint64_t)v250, (uint64_t *)&v228, (uint64_t)v232);
                      if (v66)
                      {
                        locale = v228.__locale_;
                      }
                      else
                      {
                        uint64_t v69 = 0;
                        locale = 0;
                        do
                        {
                          locale = (std::locale::__imp *)((char *)locale
                                                        + *(void *)&v192[v69 * 8] * (uint64_t)v232[v69].__locale_);
                          ++v69;
                        }
                        while (v69 != 3);
                      }
                      v179[v65] = v67[(void)locale];
                      for (uint64_t m = 2; m != -1; --m)
                      {
                        uint64_t v71 = (std::locale::__imp *)((char *)v250[m].__locale_ + 1);
                        v250[m].__locale_ = v71;
                        if (v71 != *(std::locale::__imp **)((char *)v229 + m * 8)) {
                          break;
                        }
                        v250[m].__locale_ = 0;
                      }
                      ++v65;
                    }
                    while (v65 != v64);
                  }
                }
                else if (v200)
                {
                  uint64_t v78 = 0;
                  int v79 = v195;
                  uint64_t v80 = v197;
                  do
                  {
                    v228.__locale_ = 0;
                    sub_25B43A810((uint64_t)v235, (uint64_t)v250, (uint64_t *)&v228, (uint64_t)v232);
                    uint64_t v81 = 0;
                    uint64_t v82 = 0;
                    do
                    {
                      v82 += *(void *)((char *)&v199[3] + v81 * 8) * (uint64_t)v250[v81].__locale_;
                      ++v81;
                    }
                    while (v81 != 3);
                    if (v79)
                    {
                      int v83 = v228.__locale_;
                    }
                    else
                    {
                      uint64_t v84 = 0;
                      int v83 = 0;
                      do
                      {
                        int v83 = (std::locale::__imp *)((char *)v83
                                                   + *(void *)&v192[v84 * 8] * (uint64_t)v232[v84].__locale_);
                        ++v84;
                      }
                      while (v84 != 3);
                    }
                    v179[v82] = v80[(void)v83];
                    for (uint64_t n = 2; n != -1; --n)
                    {
                      uint64_t v86 = (std::locale::__imp *)((char *)v250[n].__locale_ + 1);
                      v250[n].__locale_ = v86;
                      if (v86 != *(std::locale::__imp **)((char *)v229 + n * 8)) {
                        break;
                      }
                      v250[n].__locale_ = 0;
                    }
                    ++v78;
                  }
                  while (v78 != v64);
                }
              }
              sub_25B3F9500((uint64_t)v235);
            }
          }
          long long v189 = &unk_2708F1EB8;
          if (v194) {
            sub_25B404120(v194);
          }
          LODWORD(v235[0].__locale_) = 2;
          sub_25B4333E8((uint64_t)&v189, (uint64_t)&v198, (int *)v235);
          unsigned int v188 = 0;
          unint64_t v87 = v190;
          if (v190)
          {
            unint64_t v88 = 0;
            unsigned int v89 = 0;
            do
            {
              v232[0].__locale_ = 0;
              v232[1].__locale_ = 0;
              *(void *)&long long v233 = 0;
              v250[0].__locale_ = 0;
              v250[1].__locale_ = v87;
              long long v251 = xmmword_25B5F1140;
              *(void *)&long long v252 = v191;
              *((void *)&v252 + 1) = 1;
              sub_25B4394B4(0, (uint64_t)&v190, (uint64_t)v250, (uint64_t)v232, &v188);
              sub_25B435CA0((uint64_t)v235, (uint64_t)&v189, (uint64_t)v250);
              uint64_t v90 = (int *)v232[0].__locale_;
              if ((std::locale::__imp *)(v232[1].__locale_ - v232[0].__locale_) != (std::locale::__imp *)8)
              {
                uint64_t v91 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
                unint64_t v92 = sub_25B406B20(v91, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
                sub_25B406B20(v92, (uint64_t)" ", 1);
                unint64_t v93 = (void *)std::ostream::operator<<();
                sub_25B406B20(v93, (uint64_t)" ", 1);
                sub_25B406B20(v93, (uint64_t)"slice", 5);
                std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(*v93 - 24)));
                unint64_t v94 = std::locale::use_facet(&v228, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
                std::locale::~locale(&v228);
                std::ostream::put();
                std::ostream::flush();
                LODWORD(v228.__locale_) = 0;
                sub_25B435E20("err");
                std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8]
                                                            + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
                uint64_t v95 = std::locale::use_facet(&v228, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10);
                std::locale::~locale(&v228);
                std::ostream::put();
                std::ostream::flush();
              }
              sub_25B435E80((uint64_t)v229, (uint64_t)v235, *v90);
              v235[0].__locale_ = (std::locale::__imp *)&unk_2708F18E0;
              if ((void)v243) {
                sub_25B404120((std::__shared_weak_count *)v243);
              }
              operator delete(v90);
              sub_25B435294((uint64_t)v229);
              __asm { FCVT            D0, H0 }
              if (_D0 > 0.000001) {
                ++v89;
              }
              *(void *)&v229[0] = &unk_2708F18A0;
              if (v231) {
                sub_25B404120(v231);
              }
              unsigned int v188 = ++v88;
              unint64_t v87 = v190;
            }
            while ((unint64_t)v190 > v88);
          }
          else
          {
            unsigned int v89 = 0;
          }
          v250[0].__locale_ = (std::locale::__imp *)__PAIR64__(v181, v183);
          LODWORD(v250[1].__locale_) = 1;
          v232[0].__locale_ = v180;
          LODWORD(v232[1].__locale_) = 1;
          sub_25B4387DC((uint64_t)v229, (uint64_t)v217, (uint64_t)v250, (unsigned int *)v232);
          sub_25B434554((uint64_t)v235, (uint64_t)v229);
          *(void *)&v229[0] = &unk_2708F18E0;
          if (v231) {
            sub_25B404120(v231);
          }
          sub_25B438874((uint64_t)v235);
          BOOL v102 = v100 >= COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(0.5)) || v89 > 2;
          LOBYTE(v205[0]) = v102;
          v235[0].__locale_ = (std::locale::__imp *)&unk_2708F18E0;
          if ((void)v243) {
            sub_25B404120((std::__shared_weak_count *)v243);
          }
          long long v189 = &unk_2708F18E0;
          if (v194) {
            sub_25B404120(v194);
          }
          uint64_t v198 = &unk_2708F1EB8;
          if (v201) {
            sub_25B404120(v201);
          }
          signed int v29 = v178;
          int v32 = v181;
          signed int v27 = v183;
        }
      }
      if (v187 < 3 || v220 < 1 || v186 > v220)
      {
        BYTE1(v205[0]) = 0;
        HIBYTE(v205[0]) = 0;
      }
      else
      {
        int v182 = v32;
        signed int v184 = v27;
        signed int v103 = v29;
        LODWORD(v235[0].__locale_) = 0;
        HIDWORD(v235[0].__locale_) = v186;
        LODWORD(v235[1].__locale_) = 1;
        sub_25B4389B8((uint64_t)&v198, (uint64_t)&v219, (uint64_t)v235, (unsigned int *)&v206);
        sub_25B435294((uint64_t)&v198);
        __asm { FCVT            D0, H0 }
        BYTE1(v205[0]) = _D0 > 0.000001;
        v250[0].__locale_ = 0;
        v250[1].__locale_ = v214;
        v232[0].__locale_ = 0;
        v232[1].__locale_ = 0;
        *(void *)&long long v233 = 0;
        long long v251 = xmmword_25B5F1140;
        *(void *)&long long v252 = v215;
        *((void *)&v252 + 1) = 1;
        sub_25B408C3C((uint64_t)&v214, (uint64_t)v250, 0, 0, v186, 1);
        sub_25B4394B4(1u, (uint64_t)&v214, (uint64_t)v250, (uint64_t)v232, (unsigned int *)&v206);
        sub_25B408ABC((uint64_t)v235, (uint64_t)&v213, (uint64_t)v250);
        long long v106 = (int *)v232[0].__locale_;
        if ((std::locale::__imp *)(v232[1].__locale_ - v232[0].__locale_) != (std::locale::__imp *)8)
        {
          int v107 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
          int v108 = sub_25B406B20(v107, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
          sub_25B406B20(v108, (uint64_t)" ", 1);
          int v109 = (void *)std::ostream::operator<<();
          sub_25B406B20(v109, (uint64_t)" ", 1);
          sub_25B406B20(v109, (uint64_t)"slice", 5);
          std::ios_base::getloc((const std::ios_base *)((char *)v109 + *(void *)(*v109 - 24)));
          uint64_t v110 = std::locale::use_facet(&v228, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v110->__vftable[2].~facet_0)(v110, 10);
          std::locale::~locale(&v228);
          std::ostream::put();
          std::ostream::flush();
          LODWORD(v228.__locale_) = 0;
          sub_25B435E20("err");
          std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8] + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
          uint64_t v111 = std::locale::use_facet(&v228, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v111->__vftable[2].~facet_0)(v111, 10);
          std::locale::~locale(&v228);
          std::ostream::put();
          std::ostream::flush();
        }
        sub_25B4075DC((uint64_t)v229, (uint64_t)v235, *v106);
        v235[0].__locale_ = (std::locale::__imp *)&unk_2708F1C28;
        if ((void)v243) {
          sub_25B404120((std::__shared_weak_count *)v243);
        }
        operator delete(v106);
        sub_25B438CB0((uint64_t)&v189, (uint64_t)v229);
        *(void *)&v229[0] = &unk_2708F1A28;
        if (v231) {
          sub_25B404120(v231);
        }
        uint64_t v112 = v193;
        if (v193)
        {
          unsigned int v113 = 0;
          uint64_t v114 = (int *)v197;
          do
          {
            int v115 = *v114++;
            if (v115 > 0) {
              ++v113;
            }
            --v112;
          }
          while (v112);
        }
        else
        {
          unsigned int v113 = 0;
        }
        HIBYTE(v205[0]) = v113 > 4;
        long long v189 = &unk_2708F1A28;
        if (v194) {
          sub_25B404120(v194);
        }
        uint64_t v198 = &unk_2708F18A0;
        if (v201) {
          sub_25B404120(v201);
        }
        signed int v29 = v103;
        int v32 = v182;
        signed int v27 = v184;
      }
      if (v27 <= v29)
      {
        char v116 = 0;
        if (v27 < v220 && v29 < v220)
        {
          signed int v117 = v29;
          uint64_t v198 = (void *)__PAIR64__(v32, v27);
          LODWORD(v199[0]) = 1;
          sub_25B4389B8((uint64_t)v235, (uint64_t)&v219, (uint64_t)&v198, (unsigned int *)&v206);
          sub_25B435294((uint64_t)v235);
          __asm { FCVT            D0, H0 }
          char v116 = _D0 > 0.000001;
          v235[0].__locale_ = (std::locale::__imp *)&unk_2708F18A0;
          if ((void)v243) {
            sub_25B404120((std::__shared_weak_count *)v243);
          }
          signed int v29 = v117;
        }
      }
      else
      {
        char v116 = 0;
      }
      BYTE2(v205[0]) = (BYTE1(v205[0]) == 0) & ~v116;
      v250[0].__locale_ = 0;
      v250[1].__locale_ = 0;
      *(void *)&long long v251 = 0;
      *(void *)&v229[0] = 0;
      *((void *)&v229[0] + 1) = v214;
      v229[1] = xmmword_25B5F1140;
      *(void *)&long long v230 = v215;
      *((void *)&v230 + 1) = 1;
      sub_25B408C3C((uint64_t)&v214, (uint64_t)v229, 0, v29, (int)v214, 1);
      sub_25B4394B4(1u, (uint64_t)&v214, (uint64_t)v229, (uint64_t)v250, (unsigned int *)&v206);
      sub_25B408ABC((uint64_t)v235, (uint64_t)&v213, (uint64_t)v229);
      unint64_t v120 = (int *)v250[0].__locale_;
      if ((std::locale::__imp *)(v250[1].__locale_ - v250[0].__locale_) != (std::locale::__imp *)8)
      {
        unint64_t v121 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v122 = sub_25B406B20(v121, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v122, (uint64_t)" ", 1);
        uint64_t v123 = (void *)std::ostream::operator<<();
        sub_25B406B20(v123, (uint64_t)" ", 1);
        sub_25B406B20(v123, (uint64_t)"slice", 5);
        std::ios_base::getloc((const std::ios_base *)((char *)v123 + *(void *)(*v123 - 24)));
        int v124 = std::locale::use_facet(v232, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v124->__vftable[2].~facet_0)(v124, 10);
        std::locale::~locale(v232);
        std::ostream::put();
        std::ostream::flush();
        LODWORD(v232[0].__locale_) = 0;
        sub_25B435E20("err");
        std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8] + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
        float v125 = std::locale::use_facet(v232, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v125->__vftable[2].~facet_0)(v125, 10);
        std::locale::~locale(v232);
        std::ostream::put();
        std::ostream::flush();
      }
      sub_25B4075DC((uint64_t)&v189, (uint64_t)v235, *v120);
      v235[0].__locale_ = (std::locale::__imp *)&unk_2708F1C28;
      if ((void)v243) {
        sub_25B404120((std::__shared_weak_count *)v243);
      }
      operator delete(v120);
      sub_25B438CB0((uint64_t)&v198, (uint64_t)&v189);
      long long v189 = &unk_2708F1A28;
      if (v194) {
        sub_25B404120(v194);
      }
      uint64_t v126 = v200;
      if (v200)
      {
        unsigned int v127 = 0;
        uint64_t v128 = (int *)v203;
        do
        {
          int v129 = *v128++;
          if (v129 > 0) {
            ++v127;
          }
          --v126;
        }
        while (v126);
      }
      else
      {
        unsigned int v127 = 0;
      }
      LOBYTE(v205[1]) = v127 > 4;
      sub_25B438EFC((uint64_t)&v189, (uint64_t)v211, (unsigned int *)&v206);
      sub_25B438CB0((uint64_t)v235, (uint64_t)&v189);
      long long v189 = &unk_2708F1A28;
      if (v194) {
        sub_25B404120(v194);
      }
      uint64_t v130 = *((void *)&v241 + 1);
      if (*((void *)&v241 + 1))
      {
        int v131 = 0;
        long long v132 = (int *)v244;
        do
        {
          int v133 = *v132++;
          if (v133 > 0) {
            ++v131;
          }
          --v130;
        }
        while (v130);
      }
      else
      {
        int v131 = 0;
      }
      BYTE1(v205[1]) = v131 != 0;
      sub_25B438EFC((uint64_t)v229, (uint64_t)v209, (unsigned int *)&v206);
      sub_25B438CB0((uint64_t)&v189, (uint64_t)v229);
      *(void *)&v229[0] = &unk_2708F1A28;
      if (v231) {
        sub_25B404120(v231);
      }
      uint64_t v134 = v193;
      if (v193)
      {
        int v135 = 0;
        unint64_t v136 = (int *)v197;
        do
        {
          int v137 = *v136++;
          if (v137 > 0) {
            ++v135;
          }
          --v134;
        }
        while (v134);
      }
      else
      {
        int v135 = 0;
      }
      BYTE2(v205[1]) = v135 != 0;
      uint64_t v138 = *((void *)&v207 + 1);
      if (*((void *)&v207 + 1) >= v208)
      {
        uint64_t v141 = (uint64_t)(*((void *)&v207 + 1) - v207) >> 4;
        unint64_t v142 = v141 + 1;
        if ((unint64_t)(v141 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        uint64_t v143 = v208 - v207;
        if ((uint64_t)(v208 - v207) >> 3 > v142) {
          unint64_t v142 = v143 >> 3;
        }
        if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v144 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v144 = v142;
        }
        *(void *)&long long v230 = &v208;
        if (v144) {
          unint64_t v144 = (unint64_t)sub_25B3FFAEC(v144);
        }
        else {
          uint64_t v145 = 0;
        }
        unint64_t v146 = v144 + 16 * v141;
        *(void *)unint64_t v146 = &unk_2708F2160;
        int v147 = v205[0];
        *(_DWORD *)(v146 + 11) = *(_DWORD *)((char *)v205 + 3);
        *(_DWORD *)(v146 + 8) = v147;
        uint64_t v149 = *((void *)&v207 + 1);
        uint64_t v148 = v207;
        if (*((void *)&v207 + 1) == (void)v207)
        {
          int64x2_t v153 = vdupq_n_s64(*((unint64_t *)&v207 + 1));
          unint64_t v151 = v144 + 16 * v141;
        }
        else
        {
          unint64_t v150 = v146 - 16;
          unint64_t v151 = v144 + 16 * v141;
          do
          {
            *(void *)(v151 - 16) = &unk_2708F2160;
            v151 -= 16;
            int v152 = *(_DWORD *)(v149 - 8);
            *(_DWORD *)(v151 + 11) = *(_DWORD *)(v149 - 5);
            *(_DWORD *)(v151 + 8) = v152;
            v150 -= 16;
            v149 -= 16;
          }
          while (v149 != v148);
          int64x2_t v153 = (int64x2_t)v207;
        }
        unint64_t v140 = v146 + 16;
        *(void *)&long long v207 = v151;
        *((void *)&v207 + 1) = v146 + 16;
        *(int64x2_t *)((char *)v229 + 8) = v153;
        unint64_t v154 = v208;
        unint64_t v208 = v144 + 16 * v145;
        *((void *)&v229[1] + 1) = v154;
        *(void *)&v229[0] = v153.i64[0];
        sub_25B4391F0((uint64_t)v229);
      }
      else
      {
        **((void **)&v207 + 1) = &unk_2708F2160;
        int v139 = v205[0];
        *(_DWORD *)(v138 + 11) = *(_DWORD *)((char *)v205 + 3);
        *(_DWORD *)(v138 + 8) = v139;
        unint64_t v140 = v138 + 16;
      }
      *((void *)&v207 + 1) = v140;
      long long v189 = &unk_2708F1A28;
      if (v194) {
        sub_25B404120(v194);
      }
      v235[0].__locale_ = (std::locale::__imp *)&unk_2708F1A28;
      if ((void)v243) {
        sub_25B404120((std::__shared_weak_count *)v243);
      }
      uint64_t v198 = &unk_2708F1A28;
      if (v201) {
        sub_25B404120(v201);
      }
      int v155 = v206;
      int v4 = ++v206;
      uint64_t v14 = (int32x2_t *)a1[4];
    }
    while (v155 < v14[5].i32[1]);
  }
  uint64_t v6 = (void (***)(void))a1[11];
  unint64_t v5 = (void (***)(void))a1[12];
  if (v5 != v6)
  {
    uint64_t v7 = v5 - 2;
    unint64_t v8 = v5 - 2;
    uint64_t v9 = v5 - 2;
    do
    {
      int v10 = *v9;
      v9 -= 2;
      (*v10)(v8);
      v7 -= 2;
      _ZF = v8 == v6;
      unint64_t v8 = v9;
    }
    while (!_ZF);
  }
  a1[12] = v6;
  uint64_t v13 = *((void *)&v207 + 1);
  uint64_t v12 = v207;
  v235[0].__locale_ = (std::locale::__imp *)(a1 + 11);
  while (v12 != v13)
  {
    sub_25B43931C((unint64_t **)v235, v12);
    v12 += 16;
  }
  v235[0].__locale_ = (std::locale::__imp *)&v207;
  sub_25B43925C((void ***)v235);
  v209[0] = &unk_2708F1C28;
  if (v210) {
    sub_25B404120(v210);
  }
  v211[0] = &unk_2708F1C28;
  if (v212) {
    sub_25B404120(v212);
  }
  int64_t v213 = &unk_2708F1C28;
  if (v216) {
    sub_25B404120(v216);
  }
  v217[0] = &unk_2708F18E0;
  if (v218) {
    sub_25B404120(v218);
  }
  long long v219 = &unk_2708F18E0;
  if (v221) {
    sub_25B404120(v221);
  }
  unint64_t v222 = &unk_2708F1EB8;
  if (v226) {
    sub_25B404120(v226);
  }
}

void sub_25B432C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::__shared_weak_count *a63)
{
  std::locale::~locale((std::locale *)(v69 - 192));
  sub_25B3F9500((uint64_t)&STACK[0x670]);
  a47 = (void **)&unk_2708F1EB8;
  if (a63) {
    sub_25B404120(a63);
  }
  if (a44) {
    sub_25B404120(a44);
  }
  a47 = (void **)&a69;
  sub_25B43925C(&a47);
  STACK[0x200] = (unint64_t)&unk_2708F1C28;
  if (STACK[0x280]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x280]);
  }
  STACK[0x298] = (unint64_t)&unk_2708F1C28;
  if (STACK[0x318]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x318]);
  }
  STACK[0x330] = (unint64_t)&unk_2708F1C28;
  if (STACK[0x3B0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x3B0]);
  }
  STACK[0x3C8] = (unint64_t)&unk_2708F18E0;
  if (STACK[0x448]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x448]);
  }
  STACK[0x460] = (unint64_t)&unk_2708F18E0;
  if (STACK[0x4E0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x4E0]);
  }
  STACK[0x4F8] = (unint64_t)&unk_2708F1EB8;
  if (STACK[0x578]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x578]);
  }
  _Unwind_Resume(a1);
}

void sub_25B4331AC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 112;
      uint64_t v7 = v4 - 112;
      unint64_t v8 = v4 - 112;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 112;
        (*v9)(v7);
        v6 -= 112;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B43326C(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1C48;
  uint64_t v1 = (void **)(a1 + 8);
  sub_25B4331AC(&v1);

  JUMPOUT(0x261163EE0);
}

uint64_t sub_25B4332E4(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1C48;
  uint64_t v3 = (void **)(a1 + 8);
  sub_25B4331AC(&v3);
  return a1;
}

void sub_25B43333C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[7] = *MEMORY[0x263EF8340];
  unint64_t v5 = v9;
  for (uint64_t i = 8; i != 32; i += 8)
  {
    uint64_t v7 = *(void *)(a2 + i);
    *(v5 - 2) = 0;
    *(v5 - 1) = v7;
    void *v5 = 1;
    v5 += 3;
  }
  sub_25B436AEC(a2 + 8, (uint64_t)v8, 0, *(_DWORD *)a3, *(_DWORD *)(a3 + 4), *(_DWORD *)(a3 + 8));
  sub_25B4360E0(a1, a2, (uint64_t)v8);
}

void sub_25B4333E8(uint64_t a1, uint64_t a2, int *a3)
{
  v229[7] = *MEMORY[0x263EF8340];
  uint64_t v5 = *a3;
  uint64_t v6 = (uint64_t *)operator new(8uLL);
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  if ((int)v5 >= 0) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = (int)v5 + 3;
  }
  uint64_t *v6 = v9;
  uint64_t v209 = a2;
  uint64_t v215 = a2 + 8;
  BOOL v10 = (void *)MEMORY[0x263F8C0F8];
  unint64_t v11 = (std::locale::id *)MEMORY[0x263F8C108];
  unint64_t v218 = v6;
  do
  {
    if ((unint64_t)v7[v8] >= 3)
    {
      sub_25B406B20(v10, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/../common/reduce_helper.hpp", 118);
      sub_25B406B20(v10, (uint64_t)" ", 1);
      uint64_t v12 = (void *)std::ostream::operator<<();
      sub_25B406B20(v12, (uint64_t)" ", 1);
      sub_25B406B20(v12, (uint64_t)"format_reduce_axes", 18);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
      uint64_t v13 = std::locale::use_facet(__b, v11);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(__b);
      uint64_t v7 = v218;
      std::ostream::put();
      std::ostream::flush();
      sub_25B408160("err", "reduce axis larger than dim-1");
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
      uint64_t v14 = std::locale::use_facet(__b, v11);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale(__b);
      std::ostream::put();
      std::ostream::flush();
    }
    ++v8;
  }
  while (!v8);
  uint64_t v207 = a1;
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  int32x2_t v15 = 0;
  unint64_t v16 = 0;
  float32x2_t v17 = 0;
  uint64_t v18 = 0;
  signed int v224 = 0;
  int v225 = 0;
  unint64_t v226 = 0;
  do
  {
    if (*v7 == v18)
    {
      if ((unint64_t)v17 < v16)
      {
        *(void *)float32x2_t v17 = 1;
        float v19 = v17 + 8;
LABEL_14:
        float v20 = v19;
        goto LABEL_42;
      }
      uint64_t v21 = (v17 - v15) >> 3;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61)
      {
        unint64_t v226 = v16;
        signed int v224 = v15;
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v16 - (void)v15) >> 2 > v22) {
        unint64_t v22 = (uint64_t)(v16 - (void)v15) >> 2;
      }
      if (v16 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v23) {
        unint64_t v23 = (unint64_t)sub_25B3FCAD4(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      signed int v27 = (char *)(v23 + 8 * v21);
      *(void *)signed int v27 = 1;
      float v20 = v27 + 8;
      while (v17 != v15)
      {
        uint64_t v28 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v27 - 1) = v28;
        v27 -= 8;
      }
    }
    else
    {
      if ((unint64_t)v17 < v16)
      {
        *(void *)float32x2_t v17 = *(void *)(v215 + 8 * v18);
        float v19 = v17 + 8;
        goto LABEL_14;
      }
      uint64_t v25 = (v17 - v15) >> 3;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61)
      {
        unint64_t v226 = v16;
        signed int v224 = v15;
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v16 - (void)v15) >> 2 > v26) {
        unint64_t v26 = (uint64_t)(v16 - (void)v15) >> 2;
      }
      if (v16 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v26;
      }
      if (v23) {
        unint64_t v23 = (unint64_t)sub_25B3FCAD4(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      signed int v27 = (char *)(v23 + 8 * v25);
      *(void *)signed int v27 = *(void *)(v215 + 8 * v18);
      float v20 = v27 + 8;
      while (v17 != v15)
      {
        uint64_t v29 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v27 - 1) = v29;
        v27 -= 8;
      }
    }
    unint64_t v16 = v23 + 8 * v24;
    int v225 = v20;
    if (v15) {
      operator delete(v15);
    }
    int32x2_t v15 = v27;
    uint64_t v7 = v218;
LABEL_42:
    int v225 = v20;
    ++v18;
    float32x2_t v17 = v20;
  }
  while (v18 != 3);
  unint64_t v226 = v16;
  signed int v224 = v15;
  sub_25B4382B4(__b, &v224);
  unint64_t v30 = 0;
  memset(v222, 0, 48);
  do
  {
    v222[v30].__locale_ = (std::locale::__imp *)1;
    if (v30 <= 1)
    {
      unint64_t v31 = v30;
      uint64_t v32 = 1;
      do
        v32 *= (uint64_t)__b[++v31].__locale_;
      while (v31 != 2);
      v222[v30].__locale_ = (std::locale::__imp *)v32;
    }
    ++v30;
  }
  while (v30 != 3);
  sub_25B438688((uint64_t)v219, (long long *)__b);
  uint64_t v33 = *v7;
  uint64_t v210 = *v7;
  if (*v7 == 2)
  {
    uint64_t v34 = 2;
  }
  else
  {
    uint64_t v34 = *v7;
    if (!v33)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t __p = 0;
      uint64_t v66 = 1;
      uint64_t v41 = 1;
      char v212 = 1;
      uint64_t v67 = a2;
      goto LABEL_111;
    }
  }
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  uint64_t __p = 0;
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 1;
  uint64_t v213 = v34;
  while (2)
  {
    uint64_t v42 = *(void *)(v215 + 8 * v40);
    if ((unint64_t)v36 >= v37)
    {
      uint64_t v43 = (v36 - v35) >> 3;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 61) {
        goto LABEL_312;
      }
      uint64_t v45 = v41;
      if ((uint64_t)(v37 - (void)v35) >> 2 > v44) {
        unint64_t v44 = (uint64_t)(v37 - (void)v35) >> 2;
      }
      if (v37 - (unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46)
      {
        unint64_t v46 = (unint64_t)sub_25B3FCAD4(v46);
        uint64_t v48 = v35;
      }
      else
      {
        uint64_t v48 = v35;
        uint64_t v47 = 0;
      }
      uint64_t v35 = (char *)(v46 + 8 * v43);
      *(void *)uint64_t v35 = *(void *)(v215 + 8 * v40);
      uint64_t v49 = v35 + 8;
      while (v36 != v48)
      {
        uint64_t v50 = *((void *)v36 - 1);
        v36 -= 8;
        *((void *)v35 - 1) = v50;
        v35 -= 8;
      }
      unint64_t v37 = v46 + 8 * v47;
      if (v48)
      {
        unint64_t v51 = v46 + 8 * v47;
        operator delete(v48);
        unint64_t v37 = v51;
      }
      uint64_t v36 = v49;
      uint64_t v34 = v213;
      uint64_t v41 = v45;
    }
    else
    {
      *(void *)uint64_t v36 = v42;
      v36 += 8;
    }
    if (*v218 == v40)
    {
      if ((unint64_t)v38 < v39)
      {
        char v52 = v35;
        *(void *)uint64_t v38 = 0;
        uint64_t v53 = v38 + 8;
        goto LABEL_75;
      }
      uint64_t v211 = v41;
      uint64_t v55 = (v38 - __p) >> 3;
      unint64_t v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      unint64_t v57 = v37;
      if ((uint64_t)(v39 - (void)__p) >> 2 > v56) {
        unint64_t v56 = (uint64_t)(v39 - (void)__p) >> 2;
      }
      if (v39 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v58 = v56;
      }
      if (v58)
      {
        unint64_t v58 = (unint64_t)sub_25B3FCAD4(v58);
        char v52 = v35;
      }
      else
      {
        char v52 = v35;
        uint64_t v59 = 0;
      }
      uint64_t v62 = (std::locale::__imp **)(v58 + 8 * v55);
      const std::locale::facet *v62 = 0;
      uint64_t v54 = (char *)(v62 + 1);
      if (v38 != __p)
      {
        double v63 = __p;
        do
        {
          uint64_t v64 = (std::locale::__imp *)*((void *)v38 - 1);
          v38 -= 8;
          *--uint64_t v62 = v64;
        }
        while (v38 != __p);
        goto LABEL_103;
      }
LABEL_102:
      double v63 = __p;
      goto LABEL_103;
    }
    if ((unint64_t)v38 >= v39)
    {
      uint64_t v211 = v41;
      uint64_t v60 = (v38 - __p) >> 3;
      unint64_t v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 61) {
LABEL_312:
      }
        sub_25B3FBC4C();
      unint64_t v57 = v37;
      if ((uint64_t)(v39 - (void)__p) >> 2 > v61) {
        unint64_t v61 = (uint64_t)(v39 - (void)__p) >> 2;
      }
      if (v39 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v58 = v61;
      }
      if (v58)
      {
        unint64_t v58 = (unint64_t)sub_25B3FCAD4(v58);
        char v52 = v35;
      }
      else
      {
        char v52 = v35;
        uint64_t v59 = 0;
      }
      uint64_t v62 = (std::locale::__imp **)(v58 + 8 * v60);
      const std::locale::facet *v62 = v222[v40].__locale_;
      uint64_t v54 = (char *)(v62 + 1);
      if (v38 == __p) {
        goto LABEL_102;
      }
      double v63 = __p;
      do
      {
        uint64_t v65 = (std::locale::__imp *)*((void *)v38 - 1);
        v38 -= 8;
        *--uint64_t v62 = v65;
      }
      while (v38 != __p);
LABEL_103:
      unint64_t v39 = v58 + 8 * v59;
      if (v63) {
        operator delete(v63);
      }
      uint64_t __p = (char *)v62;
      uint64_t v41 = v211;
      uint64_t v34 = v213;
      unint64_t v37 = v57;
    }
    else
    {
      char v52 = v35;
      *(std::locale *)uint64_t v38 = v222[v40];
      uint64_t v53 = v38 + 8;
LABEL_75:
      uint64_t v54 = v53;
    }
    v41 *= v42;
    ++v40;
    uint64_t v38 = v54;
    uint64_t v35 = v52;
    if (v40 != v34) {
      continue;
    }
    break;
  }
  uint64_t v66 = v34 + 1;
  uint64_t v67 = v209;
  char v212 = 0;
  if ((unint64_t)(v34 + 1) > 2)
  {
    uint64_t v68 = 1;
    uint64_t v33 = v210;
  }
  else
  {
    uint64_t v33 = v210;
LABEL_111:
    uint64_t v69 = 8 * v66 + 8;
    uint64_t v68 = 1;
    do
    {
      v68 *= *(void *)(v67 + v69);
      v69 += 8;
    }
    while (v69 != 32);
    char v52 = v35;
  }
  unint64_t v70 = *(void *)(v215 + 8 * v34);
  if (v33 == 2) {
    uint64_t v71 = *(void *)(v215 + 8 * v34);
  }
  else {
    uint64_t v71 = 1;
  }
  uint64_t v214 = v34;
  unint64_t v216 = v221;
  if (v33 == 2) {
    unint64_t v72 = v41;
  }
  else {
    unint64_t v72 = v70;
  }
  if (v33 == 2) {
    uint64_t v73 = 1;
  }
  else {
    uint64_t v73 = v41;
  }
  uint64_t v205 = v73;
  memset(v229, 0, 48);
  long long v227 = 0u;
  memset(v228, 0, sizeof(v228));
  if (v212)
  {
    uint64_t v74 = v207;
    if ((unint64_t)v36 >= v37)
    {
      uint64_t v87 = (v36 - v52) >> 3;
      unint64_t v88 = v87 + 1;
      if ((unint64_t)(v87 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v37 - (void)v52) >> 2 > v88) {
        unint64_t v88 = (uint64_t)(v37 - (void)v52) >> 2;
      }
      if (v37 - (unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v89 = v88;
      }
      if (v89) {
        unint64_t v89 = (unint64_t)sub_25B3FCAD4(v89);
      }
      uint64_t v90 = (char *)(v89 + 8 * v87);
      *(void *)uint64_t v90 = 0;
      while (v36 != v52)
      {
        uint64_t v91 = *((void *)v36 - 1);
        v36 -= 8;
        *((void *)v90 - 1) = v91;
        v90 -= 8;
      }
      if (v52) {
        operator delete(v52);
      }
      uint64_t v75 = 0;
      int v206 = 0;
      char v52 = v90;
    }
    else
    {
      uint64_t v75 = 0;
      int v206 = 0;
      *(void *)uint64_t v36 = 0;
    }
    uint64_t v86 = a3;
  }
  else
  {
    uint64_t v75 = 0;
    unint64_t v76 = 0;
    unint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    int v206 = v34 - 1;
    do
    {
      if (*v218 != v79)
      {
        if ((unint64_t)v78 >= v77)
        {
          uint64_t v80 = (v78 - v75) >> 3;
          unint64_t v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v77 - (void)v75) >> 2 > v81) {
            unint64_t v81 = (uint64_t)(v77 - (void)v75) >> 2;
          }
          if (v77 - (unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v82 = v81;
          }
          if (v82)
          {
            unint64_t v82 = (unint64_t)sub_25B3FCAD4(v82);
            uint64_t v78 = v76;
          }
          else
          {
            uint64_t v83 = 0;
          }
          uint64_t v84 = (char *)(v82 + 8 * v80);
          *(void *)uint64_t v84 = v79;
          unint64_t v76 = v84 + 8;
          while (v78 != v75)
          {
            uint64_t v85 = *((void *)v78 - 1);
            v78 -= 8;
            *((void *)v84 - 1) = v85;
            v84 -= 8;
          }
          unint64_t v77 = v82 + 8 * v83;
          if (v75) {
            operator delete(v75);
          }
          uint64_t v75 = v84;
          uint64_t v78 = v76;
          uint64_t v34 = v214;
        }
        else
        {
          *(void *)uint64_t v78 = v79;
          v78 += 8;
          unint64_t v76 = v78;
        }
      }
      ++v79;
    }
    while (v79 != v34);
    uint64_t v74 = v207;
    uint64_t v86 = a3;
    uint64_t v67 = v209;
  }
  unint64_t v92 = v68 * v71;
  if (v210 == 2)
  {
    if (*(unsigned char *)(v67 + 136))
    {
      if (v72)
      {
        uint64_t v93 = 0;
        uint64_t v94 = 0;
        unint64_t v95 = 0;
        uint64_t v96 = *(void *)(v67 + 144);
        float32x2_t v97 = (short float *)(v96 + 2);
        if (v92 <= 1) {
          uint64_t v98 = 1;
        }
        else {
          uint64_t v98 = v68 * v71;
        }
        uint64_t v99 = 2 * v98;
        BOOL v100 = 1;
        unint64_t v101 = v216;
        while (1)
        {
          short float v102 = *(short float *)(v96 + 2 * v94);
          if (v92 >= 2) {
            break;
          }
          ++v94;
          if (!v100) {
            goto LABEL_177;
          }
LABEL_179:
          *unint64_t v101 = v102;
          uint64_t v107 = v206;
          do
          {
            uint64_t v108 = v229[v107] + 1;
            v229[v107] = v108;
            if (v108 != *(void *)&v52[8 * v107]) {
              break;
            }
            v229[v107] = 0;
            BOOL v109 = v107-- <= 0;
          }
          while (!v109);
          if (v212)
          {
            BOOL v100 = 0;
            unint64_t v110 = 0;
          }
          else
          {
            unint64_t v110 = 0;
            uint64_t v111 = v229;
            uint64_t v112 = __p;
            uint64_t v113 = v214;
            do
            {
              uint64_t v115 = *v111++;
              uint64_t v114 = v115;
              uint64_t v116 = *(void *)v112;
              v112 += 8;
              v110 += v116 * v114;
              --v113;
            }
            while (v113);
            BOOL v100 = v110 > v95;
            if (v110 > v95) {
              unint64_t v95 = v110;
            }
          }
          unint64_t v101 = &v216[v110];
          ++v93;
          float32x2_t v97 = (short float *)((char *)v97 + v99);
          if (v93 == v72) {
            goto LABEL_301;
          }
        }
        unint64_t v103 = v92 - 1;
        int v104 = v97;
        do
        {
          short float v105 = *v104++;
          short float v106 = v105;
          if (v102 < v105) {
            short float v102 = v106;
          }
          --v103;
        }
        while (v103);
        v94 += v92;
        if (v100) {
          goto LABEL_179;
        }
LABEL_177:
        if (*v101 >= v102) {
          short float v102 = *v101;
        }
        goto LABEL_179;
      }
    }
    else if (v72)
    {
      uint64_t v143 = 0;
      unint64_t v144 = 0;
      uint64_t v145 = v67 + 56;
      uint64_t v146 = *(void *)(v67 + 144);
      uint64_t v147 = v67 + 24;
      BOOL v148 = 1;
      uint64_t v149 = v216;
      do
      {
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        do
        {
          v151 += *(void *)(v145 + v150) * *(void *)&v228[v150 - 16];
          v150 += 8;
        }
        while (v150 != 24);
        uint64_t v152 = 0;
        short float v153 = *(short float *)(v146 + 2 * v151);
        do
        {
          uint64_t v154 = *(void *)&v228[v152] + 1;
          *(void *)&v228[v152] = v154;
          if (v154 != *(void *)(v147 + v152)) {
            break;
          }
          *(void *)&v228[v152] = 0;
          v152 -= 8;
        }
        while (v152 != -24);
        if (v92 >= 2)
        {
          for (uint64_t i = 1; i != v92; ++i)
          {
            uint64_t v156 = 0;
            uint64_t v157 = 0;
            do
            {
              v157 += *(void *)(v145 + v156) * *(void *)&v228[v156 - 16];
              v156 += 8;
            }
            while (v156 != 24);
            uint64_t v158 = 0;
            if (v153 < *(short float *)(v146 + 2 * v157)) {
              short float v153 = *(short float *)(v146 + 2 * v157);
            }
            do
            {
              uint64_t v159 = *(void *)&v228[v158] + 1;
              *(void *)&v228[v158] = v159;
              if (v159 != *(void *)(v147 + v158)) {
                break;
              }
              *(void *)&v228[v158] = 0;
              v158 -= 8;
            }
            while (v158 != -24);
          }
        }
        if (!v148 && *v149 >= v153) {
          short float v153 = *v149;
        }
        *uint64_t v149 = v153;
        uint64_t v160 = v206;
        do
        {
          uint64_t v161 = v229[v160] + 1;
          v229[v160] = v161;
          if (v161 != *(void *)&v52[8 * v160]) {
            break;
          }
          v229[v160] = 0;
          BOOL v109 = v160-- <= 0;
        }
        while (!v109);
        if (v212)
        {
          BOOL v148 = 0;
          unint64_t v162 = 0;
        }
        else
        {
          unint64_t v162 = 0;
          uint64_t v163 = v229;
          uint64_t v164 = __p;
          uint64_t v165 = v214;
          do
          {
            uint64_t v167 = *v163++;
            uint64_t v166 = v167;
            uint64_t v168 = *(void *)v164;
            v164 += 8;
            v162 += v168 * v166;
            --v165;
          }
          while (v165);
          BOOL v148 = v162 > v144;
          if (v162 > v144) {
            unint64_t v144 = v162;
          }
        }
        uint64_t v149 = &v216[v162];
        ++v143;
      }
      while (v143 != v72);
    }
  }
  else if (*(unsigned char *)(v67 + 136))
  {
    if (v205)
    {
      uint64_t v117 = 0;
      uint64_t v118 = 0;
      unint64_t v119 = 0;
      BOOL v120 = 1;
      unint64_t v121 = v216;
      do
      {
        if (v120)
        {
          if (v92)
          {
            uint64_t v122 = *(void *)(v67 + 144);
            uint64_t v123 = v121;
            uint64_t v124 = v68 * v71;
            do
            {
              *v123++ = *(short float *)(v122 + 2 * v118++);
              --v124;
            }
            while (v124);
          }
        }
        else if (v92)
        {
          uint64_t v125 = *(void *)(v67 + 144);
          uint64_t v126 = v121;
          uint64_t v127 = v68 * v71;
          do
          {
            short float v128 = *(short float *)(v125 + 2 * v118);
            if (*v126 >= v128) {
              short float v128 = *v126;
            }
            *v126++ = v128;
            ++v118;
            --v127;
          }
          while (v127);
        }
        if (v72 >= 2)
        {
          for (uint64_t j = 1; j != v72; ++j)
          {
            if (v92)
            {
              uint64_t v130 = *(void *)(v67 + 144);
              int v131 = v121;
              uint64_t v132 = v68 * v71;
              do
              {
                short float v133 = *(short float *)(v130 + 2 * v118);
                if (*v131 >= v133) {
                  short float v133 = *v131;
                }
                *v131++ = v133;
                ++v118;
                --v132;
              }
              while (v132);
            }
          }
        }
        uint64_t v134 = v206;
        do
        {
          uint64_t v135 = v229[v134] + 1;
          v229[v134] = v135;
          if (v135 != *(void *)&v52[8 * v134]) {
            break;
          }
          v229[v134] = 0;
          BOOL v109 = v134-- <= 0;
        }
        while (!v109);
        if (v212)
        {
          BOOL v120 = 0;
          unint64_t v136 = 0;
        }
        else
        {
          unint64_t v136 = 0;
          int v137 = v229;
          uint64_t v138 = __p;
          uint64_t v139 = v214;
          do
          {
            uint64_t v141 = *v137++;
            uint64_t v140 = v141;
            uint64_t v142 = *(void *)v138;
            v138 += 8;
            v136 += v142 * v140;
            --v139;
          }
          while (v139);
          BOOL v120 = v136 > v119;
          if (v136 > v119) {
            unint64_t v119 = v136;
          }
        }
        unint64_t v121 = &v216[v136];
        ++v117;
      }
      while (v117 != v205);
    }
  }
  else if (v205)
  {
    uint64_t v169 = 0;
    unint64_t v170 = 0;
    uint64_t v171 = v67 + 56;
    uint64_t v172 = v67 + 24;
    BOOL v173 = 1;
    uint64_t v174 = v216;
    do
    {
      if (v173)
      {
        if (v92)
        {
          uint64_t v175 = 0;
          uint64_t v176 = *(void *)(v67 + 144);
          do
          {
            uint64_t v177 = 0;
            uint64_t v178 = 0;
            do
            {
              v178 += *(void *)(v171 + v177) * *(void *)&v228[v177 - 16];
              v177 += 8;
            }
            while (v177 != 24);
            uint64_t v179 = 0;
            v174[v175] = *(short float *)(v176 + 2 * v178);
            do
            {
              uint64_t v180 = *(void *)&v228[v179] + 1;
              *(void *)&v228[v179] = v180;
              if (v180 != *(void *)(v172 + v179)) {
                break;
              }
              *(void *)&v228[v179] = 0;
              v179 -= 8;
            }
            while (v179 != -24);
            ++v175;
          }
          while (v175 != v92);
        }
      }
      else if (v92)
      {
        uint64_t v181 = 0;
        uint64_t v182 = *(void *)(v67 + 144);
        do
        {
          uint64_t v183 = 0;
          uint64_t v184 = 0;
          do
          {
            v184 += *(void *)(v171 + v183) * *(void *)&v228[v183 - 16];
            v183 += 8;
          }
          while (v183 != 24);
          uint64_t v185 = 0;
          short float v186 = *(short float *)(v182 + 2 * v184);
          if (v174[v181] >= v186) {
            short float v186 = v174[v181];
          }
          v174[v181] = v186;
          do
          {
            uint64_t v187 = *(void *)&v228[v185] + 1;
            *(void *)&v228[v185] = v187;
            if (v187 != *(void *)(v172 + v185)) {
              break;
            }
            *(void *)&v228[v185] = 0;
            v185 -= 8;
          }
          while (v185 != -24);
          ++v181;
        }
        while (v181 != v92);
      }
      uint64_t v188 = v206;
      if (v72 >= 2)
      {
        for (uint64_t k = 1; k != v72; ++k)
        {
          if (v92)
          {
            uint64_t v190 = 0;
            uint64_t v191 = *(void *)(v67 + 144);
            do
            {
              uint64_t v192 = 0;
              uint64_t v193 = 0;
              do
              {
                v193 += *(void *)(v171 + v192) * *(void *)&v228[v192 - 16];
                v192 += 8;
              }
              while (v192 != 24);
              uint64_t v194 = 0;
              short float v195 = *(short float *)(v191 + 2 * v193);
              if (v174[v190] >= v195) {
                short float v195 = v174[v190];
              }
              v174[v190] = v195;
              do
              {
                uint64_t v196 = *(void *)&v228[v194] + 1;
                *(void *)&v228[v194] = v196;
                if (v196 != *(void *)(v172 + v194)) {
                  break;
                }
                *(void *)&v228[v194] = 0;
                v194 -= 8;
              }
              while (v194 != -24);
              ++v190;
            }
            while (v190 != v92);
          }
        }
        uint64_t v188 = v206;
      }
      do
      {
        uint64_t v197 = v229[v188] + 1;
        v229[v188] = v197;
        if (v197 != *(void *)&v52[8 * v188]) {
          break;
        }
        v229[v188] = 0;
        BOOL v109 = v188-- <= 0;
      }
      while (!v109);
      if (v212)
      {
        BOOL v173 = 0;
        unint64_t v198 = 0;
      }
      else
      {
        unint64_t v198 = 0;
        uint64_t v199 = v229;
        uint64_t v200 = __p;
        uint64_t v201 = v214;
        do
        {
          uint64_t v203 = *v199++;
          uint64_t v202 = v203;
          uint64_t v204 = *(void *)v200;
          v200 += 8;
          v198 += v204 * v202;
          --v201;
        }
        while (v201);
        BOOL v173 = v198 > v170;
        if (v198 > v170) {
          unint64_t v170 = v198;
        }
      }
      uint64_t v174 = &v216[v198];
      ++v169;
    }
    while (v169 != v205);
  }
LABEL_301:
  if (v75) {
    operator delete(v75);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v52) {
    operator delete(v52);
  }
  if (v224) {
    operator delete(v224);
  }
  operator delete(v218);
  sub_25B436260(v74, (uint64_t)v219, *v86);
  v219[0] = &unk_2708F1EB8;
  if (v220) {
    sub_25B404120(v220);
  }
}

void sub_25B434424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::locale a46)
{
  if (__p) {
    operator delete(__p);
  }
  if (v46) {
    operator delete(v46);
  }
  if (a36) {
    sub_25B404120(a36);
  }
  uint64_t v49 = *(void **)(v47 - 248);
  if (v49)
  {
    *(void *)(v47 - 240) = v49;
    operator delete(v49);
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t sub_25B434554(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 137))
  {
    int v4 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"ascontiguous", 12);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    BOOL v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v14);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    unint64_t v11 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v14);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(unsigned char *)(a2 + 136))
  {
    return sub_25B437584(a1, a2);
  }
  else
  {
    uint64_t v13 = sub_25B43765C(a1, (_OWORD *)(a2 + 8));
    return sub_25B437754(v13, a2);
  }
}

void sub_25B434758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  *BOOL v10 = &unk_2708F18E0;
  uint64_t v12 = (std::__shared_weak_count *)v10[16];
  if (v12) {
    sub_25B404120(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4347A0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  std::locale v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  sub_25B435FAC(a2 + 8, (uint64_t)v18, (uint64_t)&v14, a3);
  sub_25B4360E0((uint64_t)v12, a2, (uint64_t)v18);
  uint64_t v5 = v14;
  if (v15 - (void)v14 != 8)
  {
    uint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v7 = sub_25B406B20(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v7, (uint64_t)" ", 1);
    uint64_t v8 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v9 = (void *)std::ostream::operator<<();
    sub_25B406B20(v9, (uint64_t)" ", 1);
    sub_25B406B20(v9, (uint64_t)"slice", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    BOOL v10 = std::locale::use_facet(&v17, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v17);
    std::ostream::put();
    std::ostream::flush();
    LODWORD(v17.__locale_) = 0;
    sub_25B435E20("err");
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
    unint64_t v11 = std::locale::use_facet(&v17, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v17);
    std::ostream::put();
    std::ostream::flush();
  }
  sub_25B436260(a1, (uint64_t)v12, *v5);
  v12[0] = &unk_2708F1EB8;
  if (v13) {
    sub_25B404120(v13);
  }
  operator delete(v5);
}

void sub_25B434A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a26) {
    sub_25B404120(a26);
  }
  if (v29) {
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B434A74(uint64_t a1, uint64_t a2)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(_DWORD *)(v3 + 12);
  if (v4 > *(_DWORD *)(v3 + 44))
  {
    LOBYTE(v5) = 0;
    uint64_t v6 = 0;
    return v5 | ((v2 & 0xFFFFFF) << 8) | (v6 << 32);
  }
  uint64_t v2 = a2;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  BOOL v10 = (unint64_t *)(a2 + 8);
  do
  {
    if (v4 <= 1) {
      int v11 = 1;
    }
    else {
      int v11 = v4;
    }
    unint64_t v12 = *v10;
    uint64_t __p = v7;
    if (*v10)
    {
      unint64_t v63 = v9;
      uint64_t v13 = 0;
      unsigned int v65 = v11 - 1;
      int v14 = *(_DWORD *)(v2 + 16) - 1;
      int v64 = v4;
      if (v4 + 1 < v14) {
        int v14 = v4 + 1;
      }
      int v15 = v14 + 1;
      while (1)
      {
        v73[0] = 0;
        v73[1] = v12;
        long long v74 = xmmword_25B5F1140;
        uint64_t v75 = *(void *)(v2 + 16);
        uint64_t v76 = 1;
        uint64_t v16 = (int *)sub_25B3FCAD4(1uLL);
        *(void *)uint64_t v16 = 0;
        unint64_t v17 = v13 + 1;
        sub_25B408C3C((uint64_t)v10, (uint64_t)v73, 0, v13, v13 + 1, 1);
        sub_25B408C3C((uint64_t)v10, (uint64_t)v73, 1u, v65, v15, 1);
        sub_25B435CA0((uint64_t)v71, v2, (uint64_t)v73);
        sub_25B435E80((uint64_t)v69, (uint64_t)v71, *v16);
        v71[0] = &unk_2708F18E0;
        if (v72) {
          sub_25B404120(v72);
        }
        operator delete(v16);
        sub_25B435294((uint64_t)v69);
        v69[0] = &unk_2708F18A0;
        if (v70) {
          sub_25B404120(v70);
        }
        __asm { FCMP            H8, #0 }
        uint64_t v7 = __p;
        if (!(_NF ^ _VF | _ZF)) {
          break;
        }
        unint64_t v12 = *v10;
        ++v13;
        if (*v10 <= v17)
        {
          LODWORD(v13) = -1;
          break;
        }
      }
      int v4 = v64;
      unint64_t v9 = v63;
    }
    else
    {
      LODWORD(v13) = -1;
    }
    if ((unint64_t)v8 >= v9)
    {
      uint64_t v23 = (v8 - v7) >> 2;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      unint64_t v25 = v9 - (void)v7;
      unint64_t v26 = (uint64_t)(v9 - (void)v7) >> 1;
      if (v26 > v24) {
        unint64_t v24 = v26;
      }
      if (v25 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v24;
      }
      if (v27)
      {
        unint64_t v27 = (unint64_t)sub_25B3FBC64(v27);
        int v29 = v4;
      }
      else
      {
        int v29 = v4;
        uint64_t v28 = 0;
      }
      unint64_t v30 = (char *)(v27 + 4 * v23);
      *(_DWORD *)unint64_t v30 = v13;
      unint64_t v31 = v30 + 4;
      while (v8 != v7)
      {
        int v32 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *((_DWORD *)v30 - 1) = v32;
        v30 -= 4;
      }
      unint64_t v9 = v27 + 4 * v28;
      if (v7)
      {
        uint64_t v33 = v7;
        unint64_t v34 = v9;
        operator delete(v33);
        unint64_t v9 = v34;
      }
      uint64_t v7 = v30;
      uint64_t v8 = v31;
      int v4 = v29;
    }
    else
    {
      *(_DWORD *)uint64_t v8 = v13;
      v8 += 4;
    }
    BOOL v35 = v4++ < *(_DWORD *)(*(void *)(a1 + 32) + 44);
  }
  while (v35);
  uint64_t v36 = v8 - v7;
  if (v8 == v7)
  {
    uint64_t v6 = 0;
    LOBYTE(v5) = 0;
    goto LABEL_91;
  }
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v39 = v7;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v66 = v36;
  uint64_t __pa = v39;
  do
  {
    uint64_t v42 = *(unsigned int *)v39;
    if (v37 == v41)
    {
LABEL_45:
      if (v41 >= v40)
      {
        uint64_t v44 = (v41 - v37) >> 3;
        unint64_t v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((v40 - v37) >> 2 > v45) {
          unint64_t v45 = (v40 - v37) >> 2;
        }
        if ((unint64_t)(v40 - v37) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          if (v46 >> 61) {
            sub_25B3FA70C();
          }
          uint64_t v47 = (char *)operator new(8 * v46);
        }
        else
        {
          uint64_t v47 = 0;
        }
        uint64_t v48 = (uint64_t *)&v47[8 * v44];
        *uint64_t v48 = v42 | 0x100000000;
        uint64_t v41 = (char *)(v48 + 1);
        while (v38 != v37)
        {
          uint64_t v49 = *((void *)v38 - 1);
          v38 -= 8;
          *--uint64_t v48 = v49;
        }
        uint64_t v40 = &v47[8 * v46];
        if (v37) {
          operator delete(v37);
        }
        unint64_t v37 = (char *)v48;
      }
      else
      {
        *(void *)uint64_t v41 = v42 | 0x100000000;
        v41 += 8;
      }
      uint64_t v38 = v41;
    }
    else
    {
      uint64_t v43 = v37;
      while (*(_DWORD *)v43 != v42)
      {
        v43 += 8;
        if (v43 == v41) {
          goto LABEL_45;
        }
      }
      ++*((_DWORD *)v43 + 1);
    }
    v39 += 4;
  }
  while (v39 != v8);
  uint64_t v2 = (v41 - v37) >> 3;
  if (v41 - v37 < 1025)
  {
LABEL_70:
    sub_25B435318(v37, v41, (v41 - v37) >> 3, 0, 0);
  }
  else
  {
    uint64_t v50 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v51 = (v41 - v37) >> 3;
    while (1)
    {
      char v52 = operator new(8 * v51, v50);
      if (v52) {
        break;
      }
      BOOL v35 = v51 > 1;
      v51 >>= 1;
      if (!v35) {
        goto LABEL_70;
      }
    }
    uint64_t v53 = v52;
    sub_25B435318(v37, v41, (v41 - v37) >> 3, v52, v51);
    operator delete(v53);
  }
  uint64_t v54 = (v38 - v37) >> 3;
  uint64_t v7 = __pa;
  if (!v54) {
    goto LABEL_89;
  }
  if (v54 == 1)
  {
    unsigned int v5 = *(_DWORD *)v37;
    if (*(_DWORD *)v37 == -1)
    {
      LOBYTE(v5) = 0;
      uint64_t v6 = 0;
LABEL_90:
      operator delete(v37);
      goto LABEL_91;
    }
  }
  else
  {
    unsigned int v5 = *(_DWORD *)v37;
    if (*(_DWORD *)v37 == -1) {
      unsigned int v5 = *((_DWORD *)v37 + 2);
    }
  }
  int v55 = 0;
  unint64_t v56 = __pa;
  do
  {
    int v58 = *(_DWORD *)v56;
    v56 += 4;
    int v57 = v58;
    unsigned int v59 = v58 - v5;
    if ((int)(v58 - v5) < 0) {
      unsigned int v59 = -v59;
    }
    if (v59 >= 6) {
      int v60 = v55;
    }
    else {
      int v60 = v55 + 1;
    }
    if (v57 != -1) {
      int v55 = v60;
    }
  }
  while (v56 != v8);
  if ((float)((float)v55 / (float)(unint64_t)(v66 >> 2)) < 0.5)
  {
LABEL_89:
    uint64_t v6 = 0;
    LOBYTE(v5) = 0;
    if (!v37) {
      goto LABEL_91;
    }
    goto LABEL_90;
  }
  LODWORD(v2) = v5 >> 8;
  uint64_t v6 = 1;
  if (v37) {
    goto LABEL_90;
  }
LABEL_91:
  if (v7) {
    operator delete(v7);
  }
  return v5 | ((v2 & 0xFFFFFF) << 8) | (v6 << 32);
}

void sub_25B435144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (v53) {
    operator delete(v53);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4351DC(void *a1)
{
  *a1 = &unk_2708F1EB8;
  uint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B435248(void *a1)
{
  *a1 = &unk_2708F1EB8;
  uint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

uint64_t sub_25B435294(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  if (*(unsigned char *)(result + 136))
  {
    uint64_t v2 = *(short float **)(result + 144);
    short float v3 = *v2;
    if (v1 >= 2)
    {
      unint64_t v4 = v1 - 1;
      unsigned int v5 = v2 + 1;
      do
      {
        short float v6 = *v5++;
        short float v7 = v6;
        if (v3 < v6) {
          short float v3 = v7;
        }
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    uint64_t v8 = *(short float **)(result + 144);
    short float v9 = *v8;
    if (v1 >= 2)
    {
      uint64_t v10 = *(void *)(result + 56);
      uint64_t v11 = 1;
      for (uint64_t i = 1; i != v1; ++i)
      {
        if (v9 < v8[v10 * v11]) {
          short float v9 = v8[v10 * v11];
        }
        if (v11 + 1 == v1) {
          uint64_t v11 = 0;
        }
        else {
          ++v11;
        }
      }
    }
  }
  return result;
}

char *sub_25B435318(char *result, char *a2, unint64_t a3, void *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    short float v6 = result;
    if (a3 == 2)
    {
      if (*((_DWORD *)a2 - 1) > *((_DWORD *)result + 1))
      {
        uint64_t v7 = *(void *)result;
        *(void *)BOOL result = *((void *)a2 - 1);
        *((void *)a2 - 1) = v7;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      float v20 = a4;
      unint64_t v21 = a3 >> 1;
      uint64_t v22 = (uint64_t)&result[8 * (a3 >> 1)];
      unint64_t v23 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_25B435548((uint64_t)result, v22, v23, a4);
        unint64_t v24 = &v20[v21];
        BOOL result = (char *)sub_25B435548((uint64_t)&v6[8 * (a3 >> 1)], (uint64_t)a2, a3 - (a3 >> 1), v24);
        unint64_t v25 = &v20[a3];
        unint64_t v26 = v24;
        while (v26 != v25)
        {
          int v27 = *((_DWORD *)v26 + 1);
          int v28 = *((_DWORD *)v20 + 1);
          BOOL v29 = v27 <= v28;
          BOOL v30 = v27 > v28;
          unsigned int v31 = v29;
          if (v29) {
            int v32 = v20;
          }
          else {
            int v32 = v26;
          }
          v20 += v31;
          v26 += v30;
          *(void *)short float v6 = *v32;
          v6 += 8;
          if (v20 == v24)
          {
            if (v26 != v25)
            {
              uint64_t v33 = 0;
              do
              {
                *(void *)&v6[v33 * 8] = v26[v33];
                ++v33;
              }
              while (&v26[v33] != v25);
            }
            return result;
          }
        }
        if (v20 != v24)
        {
          uint64_t v34 = 0;
          do
          {
            *(void *)&v6[v34 * 8] = v20[v34];
            ++v34;
          }
          while (&v20[v34] != v24);
        }
      }
      else
      {
        sub_25B435318(result, v22, v23, a4, a5);
        sub_25B435318(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v20, a5);
        return sub_25B435734(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), (char *)v20, a5);
      }
    }
    else if (result != a2)
    {
      short float v9 = result + 8;
      if (result + 8 != a2)
      {
        uint64_t v10 = 0;
        uint64_t v11 = result;
        do
        {
          int v12 = *((_DWORD *)v11 + 3);
          int v13 = *((_DWORD *)v11 + 1);
          uint64_t v11 = v9;
          if (v12 > v13)
          {
            uint64_t v14 = *(void *)v9;
            uint64_t v15 = HIDWORD(*(void *)v11);
            uint64_t v16 = v10;
            while (1)
            {
              *(void *)&result[v16 + 8] = *(void *)&result[v16];
              if (!v16) {
                break;
              }
              int v17 = *(_DWORD *)&result[v16 - 4];
              v16 -= 8;
              if (v17 >= (int)v15)
              {
                uint64_t v18 = &result[v16 + 8];
                goto LABEL_15;
              }
            }
            uint64_t v18 = result;
LABEL_15:
            *(void *)uint64_t v18 = v14;
          }
          short float v9 = v11 + 8;
          v10 += 8;
        }
        while (v11 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_25B435548(uint64_t result, uint64_t a2, unint64_t a3, void *a4)
{
  if (a3)
  {
    unint64_t v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_10:
      void *v4 = *(void *)v6;
      return result;
    }
    if (a3 == 2)
    {
      int v8 = *(_DWORD *)(a2 - 4);
      int v9 = *(_DWORD *)(result + 4);
      BOOL v10 = v8 <= v9;
      if (v8 <= v9) {
        uint64_t v11 = (void *)result;
      }
      else {
        uint64_t v11 = (void *)(a2 - 8);
      }
      *a4 = *v11;
      unint64_t v4 = a4 + 1;
      if (v10) {
        uint64_t v6 = a2 - 8;
      }
      goto LABEL_10;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v19 = result + 8 * (a3 >> 1);
      sub_25B435318(result, v19, a3 >> 1, a4, a3 >> 1);
      BOOL result = sub_25B435318(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v20 = v6 + 8 * (a3 >> 1);
      while (v20 != a2)
      {
        BOOL v21 = *(_DWORD *)(v20 + 4) <= *(_DWORD *)(v6 + 4);
        if (*(_DWORD *)(v20 + 4) <= *(_DWORD *)(v6 + 4)) {
          uint64_t v22 = (void *)v6;
        }
        else {
          uint64_t v22 = (void *)v20;
        }
        v20 += 8 * (*(_DWORD *)(v20 + 4) > *(_DWORD *)(v6 + 4));
        v6 += 8 * v21;
        *v4++ = *v22;
        if (v6 == v19)
        {
          if (v20 != a2)
          {
            uint64_t v23 = 0;
            do
            {
              v4[v23] = *(void *)(v20 + v23 * 8);
              ++v23;
            }
            while (v20 + v23 * 8 != a2);
          }
          return result;
        }
      }
      if (v6 != v19)
      {
        uint64_t v24 = 0;
        do
        {
          v4[v24] = *(void *)(v6 + v24 * 8);
          ++v24;
        }
        while (v6 + v24 * 8 != v19);
      }
    }
    else if (result != a2)
    {
      uint64_t v12 = result + 8;
      *a4 = *(void *)result;
      if (result + 8 != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = a4;
        do
        {
          uint64_t v15 = v6;
          uint64_t v16 = v14;
          uint64_t v6 = v12;
          int v17 = ++v14;
          if (*(_DWORD *)(v15 + 12) > *((_DWORD *)v16 + 1))
          {
            v16[1] = *v16;
            int v17 = a4;
            if (v16 != a4)
            {
              uint64_t v18 = v13;
              while (1)
              {
                int v17 = (void *)((char *)a4 + v18);
                if (*(_DWORD *)(v15 + 12) <= *(_DWORD *)((char *)a4 + v18 - 4)) {
                  break;
                }
                *int v17 = *(v17 - 1);
                v18 -= 8;
                if (!v18)
                {
                  int v17 = a4;
                  break;
                }
              }
            }
          }
          uint64_t v12 = v6 + 8;
          *int v17 = *(void *)v6;
          v13 += 8;
        }
        while (v6 + 8 != a2);
      }
    }
  }
  return result;
}

char *sub_25B435734(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    uint64_t v12 = result;
    while (v8 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      while (*((_DWORD *)a2 + 1) <= *((_DWORD *)v12 + 1))
      {
        v12 += 8;
        if (!--a4) {
          return result;
        }
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          uint64_t v72 = *(void *)v12;
          *(void *)uint64_t v12 = *(void *)a2;
          *(void *)a2 = v72;
          return result;
        }
        if (a4 >= 0) {
          uint64_t v23 = a4;
        }
        else {
          uint64_t v23 = a4 + 1;
        }
        uint64_t v22 = v23 >> 1;
        uint64_t v16 = &v12[8 * (v23 >> 1)];
        uint64_t v15 = a2;
        if (a2 != a3)
        {
          unint64_t v24 = (a3 - a2) >> 3;
          uint64_t v15 = a2;
          do
          {
            unint64_t v25 = v24 >> 1;
            unint64_t v26 = &v15[8 * (v24 >> 1)];
            int v27 = *((_DWORD *)v26 + 1);
            int v28 = v26 + 8;
            v24 += ~(v24 >> 1);
            if (v27 > *((_DWORD *)v16 + 1)) {
              uint64_t v15 = v28;
            }
            else {
              unint64_t v24 = v25;
            }
          }
          while (v24);
        }
        uint64_t v14 = (v15 - a2) >> 3;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v13 = v8;
        }
        else {
          uint64_t v13 = v8 + 1;
        }
        uint64_t v14 = v13 >> 1;
        uint64_t v15 = &a2[8 * (v13 >> 1)];
        uint64_t v16 = a2;
        if (a2 != v12)
        {
          unint64_t v17 = (a2 - v12) >> 3;
          uint64_t v16 = v12;
          do
          {
            unint64_t v18 = v17 >> 1;
            unint64_t v19 = &v16[8 * (v17 >> 1)];
            int v20 = *((_DWORD *)v19 + 1);
            BOOL v21 = v19 + 8;
            v17 += ~(v17 >> 1);
            if (*((_DWORD *)v15 + 1) > v20) {
              unint64_t v17 = v18;
            }
            else {
              uint64_t v16 = v21;
            }
          }
          while (v17);
        }
        uint64_t v22 = (v16 - v12) >> 3;
      }
      if (v16 == a2)
      {
        a2 = v15;
      }
      else
      {
        uint64_t v29 = v15 - a2;
        if (v15 == a2)
        {
          a2 = v16;
        }
        else
        {
          BOOL v30 = v16 + 8;
          if (v16 + 8 == a2)
          {
            uint64_t v74 = *(void *)v16;
            uint64_t v76 = a6;
            BOOL v35 = a2;
            size_t v36 = v15 - a2;
            unint64_t v37 = a3;
            uint64_t v78 = v22;
            uint64_t v38 = v14;
            memmove(v16, v35, v36);
            uint64_t v14 = v38;
            a6 = v76;
            uint64_t v22 = v78;
            a3 = v37;
            a2 = &v16[v29];
            *(void *)&v16[v29] = v74;
          }
          else
          {
            unsigned int v31 = a2 + 8;
            if (a2 + 8 == v15)
            {
              uint64_t v39 = *((void *)v15 - 1);
              a2 = v16 + 8;
              if (v15 - 8 != v16)
              {
                uint64_t v77 = a6;
                uint64_t v79 = v22;
                uint64_t v40 = a3;
                uint64_t v41 = v14;
                uint64_t v75 = *((void *)v15 - 1);
                memmove(v16 + 8, v16, v15 - 8 - v16);
                uint64_t v39 = v75;
                a6 = v77;
                uint64_t v14 = v41;
                uint64_t v22 = v79;
                a3 = v40;
              }
              *(void *)uint64_t v16 = v39;
            }
            else
            {
              uint64_t v32 = (a2 - v16) >> 3;
              if (v32 == v29 >> 3)
              {
                do
                {
                  uint64_t v33 = *((void *)v30 - 1);
                  *((void *)v30 - 1) = *((void *)v31 - 1);
                  *((void *)v31 - 1) = v33;
                  if (v30 == a2) {
                    break;
                  }
                  v30 += 8;
                  BOOL v34 = v31 == v15;
                  v31 += 8;
                }
                while (!v34);
              }
              else
              {
                uint64_t v42 = v29 >> 3;
                uint64_t v43 = (a2 - v16) >> 3;
                do
                {
                  uint64_t v44 = v43;
                  uint64_t v43 = v42;
                  uint64_t v42 = v44 % v42;
                }
                while (v42);
                if (v43)
                {
                  unint64_t v45 = &v16[8 * v43];
                  do
                  {
                    uint64_t v47 = *((void *)v45 - 1);
                    v45 -= 8;
                    uint64_t v46 = v47;
                    uint64_t v48 = &v45[8 * v32];
                    uint64_t v49 = v45;
                    do
                    {
                      uint64_t v50 = v48;
                      *(void *)uint64_t v49 = *(void *)v48;
                      unint64_t v51 = &v48[8 * v32];
                      BOOL v52 = __OFSUB__(v32, (v15 - v48) >> 3);
                      uint64_t v53 = v32 - ((v15 - v48) >> 3);
                      char v66 = (v53 < 0) ^ v52;
                      uint64_t v48 = &v16[8 * v53];
                      if (v66) {
                        uint64_t v48 = v51;
                      }
                      uint64_t v49 = v50;
                    }
                    while (v48 != v45);
                    *(void *)uint64_t v50 = v46;
                  }
                  while (v45 != v16);
                }
                a2 = &v16[8 * (v29 >> 3)];
              }
            }
          }
        }
      }
      a4 -= v22;
      v8 -= v14;
      if (v22 + v14 >= a4 + v8)
      {
        unint64_t v56 = a2;
        int v57 = v15;
        uint64_t v58 = v22;
        uint64_t v59 = a4;
        uint64_t v60 = v14;
        uint64_t v54 = a6;
        BOOL result = (char *)sub_25B435734(a2, v57, a3, v59, v8, a6, a7);
        a2 = v16;
        uint64_t v8 = v60;
        a4 = v58;
        a3 = v56;
      }
      else
      {
        uint64_t v54 = a6;
        int v55 = a3;
        BOOL result = (char *)sub_25B435734(v12, v16, a2, v22, v14, a6, a7);
        a3 = v55;
        uint64_t v12 = a2;
        a2 = v15;
      }
      a6 = v54;
      if (!v8) {
        return result;
      }
    }
    if (a4 <= v8)
    {
      if (v12 != a2)
      {
        uint64_t v68 = 0;
        do
        {
          *(void *)&a6[v68] = *(void *)&v12[v68];
          v68 += 8;
        }
        while (&v12[v68] != a2);
        uint64_t v69 = &a6[v68];
        if (v69 != a6)
        {
          while (a2 != a3)
          {
            BOOL v70 = *((_DWORD *)a2 + 1) <= *((_DWORD *)a6 + 1);
            if (*((_DWORD *)a2 + 1) <= *((_DWORD *)a6 + 1)) {
              uint64_t v71 = a6;
            }
            else {
              uint64_t v71 = a2;
            }
            a2 += 8 * (*((_DWORD *)a2 + 1) > *((_DWORD *)a6 + 1));
            a6 += 8 * v70;
            *(void *)uint64_t v12 = *(void *)v71;
            v12 += 8;
            if (a6 == v69) {
              return result;
            }
          }
          return (char *)memmove(v12, a6, v69 - a6);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v61 = 0;
      do
      {
        *(void *)&a6[v61] = *(void *)&a2[v61];
        v61 += 8;
      }
      while (&a2[v61] != a3);
      uint64_t v62 = &a6[v61];
      if (v62 != a6)
      {
        unint64_t v63 = a3 - 8;
        while (a2 != v12)
        {
          int v64 = *((_DWORD *)v62 - 1);
          int v65 = *((_DWORD *)a2 - 1);
          char v66 = v64 <= v65;
          if (v64 <= v65) {
            uint64_t v67 = v62;
          }
          else {
            uint64_t v67 = a2;
          }
          if (v66) {
            v62 -= 8;
          }
          else {
            a2 -= 8;
          }
          *(void *)unint64_t v63 = *((void *)v67 - 1);
          v63 -= 8;
          if (v62 == a6) {
            return result;
          }
        }
        unint64_t v73 = 0;
        do
        {
          *(void *)&v63[v73] = *(void *)&v62[v73 - 8];
          v73 -= 8;
        }
        while (&v62[v73] != a6);
      }
    }
  }
  return result;
}

void sub_25B435BE8(void *a1)
{
  *a1 = &unk_2708F18A0;
  unint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B435C54(void *a1)
{
  *a1 = &unk_2708F18A0;
  uint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

void sub_25B435CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  *(void *)a1 = &unk_2708F18E0;
  *(void *)(a1 + 120) = 0;
  unsigned int v5 = (void **)(a1 + 120);
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 257;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  char v6 = 1;
  uint64_t v7 = *(void *)(a1 + 112);
  do
  {
    uint64_t v8 = (uint64_t *)(a3 + 24 * v4);
    uint64_t v9 = *v8;
    float v10 = (float)(unint64_t)(v8[1] - *v8);
    unint64_t v11 = v8[2];
    *(void *)(a1 + 8 + 8 * v4) = vcvtps_u32_f32(v10 / (float)v11);
    *(void *)(a1 + 56 + 8 * v4) *= v11;
    LOBYTE(v11) = v6;
    v7 += *(void *)(a2 + 56 + 8 * v4) * v9;
    uint64_t v4 = 1;
    char v6 = 0;
  }
  while ((v11 & 1) != 0);
  *(void *)(a1 + 104) = *(void *)(a1 + 16) * *(void *)(a1 + 8);
  *(void *)(a1 + 112) = v7;
  uint64_t v13 = *(void **)(a2 + 120);
  uint64_t v12 = *(void *)(a2 + 128);
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v13;
    *(void *)(a1 + 128) = v12;
    if (v14)
    {
      sub_25B404120(v14);
      uint64_t v13 = *v5;
    }
  }
  else
  {
    *(void *)(a1 + 120) = v13;
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v15 = 0;
  *(void *)(a1 + 144) = *v13 + 2 * *(void *)(a1 + 112);
  *(unsigned char *)(a1 + 137) = 0;
  uint64_t v16 = 1;
  while (1)
  {
    uint64_t v17 = *(void *)(a1 + v15 + 16);
    if (v17 != 1) {
      break;
    }
LABEL_11:
    v15 -= 8;
    if (v15 == -16)
    {
      char v18 = 1;
      goto LABEL_14;
    }
  }
  if (*(void *)(a1 + v15 + 64) == v16)
  {
    v16 *= v17;
    goto LABEL_11;
  }
  char v18 = 0;
LABEL_14:
  *(unsigned char *)(a1 + 136) = v18;
}

uint64_t sub_25B435E20(const char *a1)
{
  size_t v2 = strlen(a1);
  short float v3 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v2);
  sub_25B406B20(v3, (uint64_t)" ", 1);

  return sub_25B407290();
}

void sub_25B435E80(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_2708F18A0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  unsigned int v5 = (void **)(a1 + 120);
  *(_WORD *)(a1 + 136) = 257;
  uint64_t v6 = a2 + 8;
  *(void *)(a1 + 128) = 0;
  sub_25B407708((uint64_t)&v13, a2 + 8, a3);
  uint64_t v7 = v13;
  *(void *)(a1 + 8) = *(void *)(v6 + 8 * v13);
  *(void *)(a1 + 56) = *(void *)(a2 + 8 * v7 + 56);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v8 = *(void **)(a2 + 120);
  uint64_t v9 = *(void *)(a2 + 128);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  float v10 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = v8;
  *(void *)(a1 + 128) = v9;
  if (v10)
  {
    sub_25B404120(v10);
    uint64_t v8 = *v5;
  }
  *(void *)(a1 + 144) = *v8 + 2 * *(void *)(a1 + 112);
  *(unsigned char *)(a1 + 137) = 0;
  BOOL v12 = *(void *)(a1 + 8) == 1 || *(void *)(a1 + 56) == 1;
  *(unsigned char *)(a1 + 136) = v12;
}

void sub_25B435F90(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[16];
  if (v4) {
    sub_25B404120(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B435FAC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8 = 0;
  uint64_t v9 = (void *)(a2 + 16);
  do
  {
    *(v9 - 2) = 0;
    *(v9 - 1) = *(void *)(a1 + v8);
    *uint64_t v9 = 1;
    v8 += 8;
    v9 += 3;
  }
  while (v8 != 24);
  unint64_t v11 = *(void **)(a3 + 8);
  unint64_t v10 = *(void *)(a3 + 16);
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = *(void **)a3;
    uint64_t v14 = ((uint64_t)v11 - *(void *)a3) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      sub_25B3FBC4C();
    }
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    BOOL v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v17) {
      unint64_t v18 = v15;
    }
    if (v18)
    {
      unint64_t v18 = (unint64_t)sub_25B3FCAD4(v18);
      uint64_t v13 = *(void **)a3;
      unint64_t v11 = *(void **)(a3 + 8);
    }
    else
    {
      uint64_t v19 = 0;
    }
    int v20 = (void *)(v18 + 8 * v14);
    unint64_t v21 = v18 + 8 * v19;
    *int v20 = 0;
    BOOL v12 = v20 + 1;
    while (v11 != v13)
    {
      uint64_t v22 = *--v11;
      *--int v20 = v22;
    }
    *(void *)a3 = v20;
    *(void *)(a3 + 8) = v12;
    *(void *)(a3 + 16) = v21;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *unint64_t v11 = 0;
    BOOL v12 = v11 + 1;
  }
  *(void *)(a3 + 8) = v12;
  unsigned int v23 = *a4;
  int v24 = *a4 + 1;

  return sub_25B436AEC(a1, a2, 0, v23, v24, 1);
}

void sub_25B4360E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  *(void *)a1 = &unk_2708F1EB8;
  *(void *)(a1 + 120) = 0;
  unsigned int v5 = (void **)(a1 + 120);
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 257;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = a1 + 56;
  uint64_t v7 = (unint64_t *)(a3 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  do
  {
    uint64_t v8 = *(v7 - 2);
    unint64_t v9 = *(v7 - 1) - v8;
    unint64_t v10 = *v7;
    v7 += 3;
    float v11 = (float)v9 / (float)v10;
    BOOL v12 = (void *)(v6 + v4);
    *BOOL v12 = *(void *)(v6 + v4) * v10;
    uint64_t v13 = *(void *)(a2 + 56 + v4);
    *(v12 - 6) = vcvtps_u32_f32(v11);
    *(void *)(a1 + 112) += v13 * v8;
    v4 += 8;
  }
  while (v4 != 24);
  *(void *)(a1 + 104) = *(void *)(a1 + 16) * *(void *)(a1 + 8) * *(void *)(a1 + 24);
  unint64_t v15 = *(void **)(a2 + 120);
  uint64_t v14 = *(void *)(a2 + 128);
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v15;
    *(void *)(a1 + 128) = v14;
    if (v16)
    {
      sub_25B404120(v16);
      unint64_t v15 = *v5;
    }
  }
  else
  {
    *(void *)(a1 + 120) = v15;
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v17 = 0;
  *(void *)(a1 + 144) = *v15 + 2 * *(void *)(a1 + 112);
  *(unsigned char *)(a1 + 137) = 0;
  uint64_t v18 = 1;
  while (1)
  {
    uint64_t v19 = *(void *)(a1 + v17 + 24);
    if (v19 != 1) {
      break;
    }
LABEL_11:
    v17 -= 8;
    if (v17 == -24)
    {
      char v20 = 1;
      goto LABEL_14;
    }
  }
  if (*(void *)(a1 + v17 + 72) == v18)
  {
    v18 *= v19;
    goto LABEL_11;
  }
  char v20 = 0;
LABEL_14:
  *(unsigned char *)(a1 + 136) = v20;
}

void sub_25B436260(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_2708F18E0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  unsigned int v5 = (void **)(a1 + 120);
  *(_WORD *)(a1 + 136) = 257;
  uint64_t v6 = a2 + 8;
  *(void *)(a1 + 128) = 0;
  sub_25B4363C0((uint64_t)&v18, a2 + 8, a3);
  uint64_t v7 = v19;
  uint64_t v8 = *(void *)(a2 + 56 + 8 * v18);
  uint64_t v9 = *(void *)(v6 + 8 * v19);
  *(void *)(a1 + 8) = *(void *)(v6 + 8 * v18);
  *(void *)(a1 + 16) = v9;
  uint64_t v10 = *(void *)(a2 + 56 + 8 * v7);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  BOOL v12 = *(void **)(a2 + 120);
  uint64_t v11 = *(void *)(a2 + 128);
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = v12;
  *(void *)(a1 + 128) = v11;
  if (v13)
  {
    sub_25B404120(v13);
    BOOL v12 = *v5;
  }
  uint64_t v14 = 0;
  *(void *)(a1 + 144) = *v12 + 2 * *(void *)(a1 + 112);
  *(unsigned char *)(a1 + 137) = 0;
  uint64_t v15 = 1;
  while (1)
  {
    uint64_t v16 = *(void *)(a1 + v14 + 16);
    if (v16 != 1) {
      break;
    }
LABEL_9:
    v14 -= 8;
    if (v14 == -16)
    {
      char v17 = 1;
      goto LABEL_12;
    }
  }
  if (*(void *)(a1 + v14 + 64) == v15)
  {
    v15 *= v16;
    goto LABEL_9;
  }
  char v17 = 0;
LABEL_12:
  *(unsigned char *)(a1 + 136) = v17;
}

void sub_25B4363A4(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[16];
  if (v4) {
    sub_25B404120(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4363C0(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5 = a3 + 3;
  if (a3 >= 0) {
    unsigned int v5 = a3;
  }
  uint64_t v6 = (int)v5;
  if (v5 >= 3)
  {
    uint64_t v7 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v8 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/squeeze_helper.hpp", 117);
    sub_25B406B20(v9, (uint64_t)" ", 1);
    uint64_t v10 = (void *)std::ostream::operator<<();
    uint64_t v11 = sub_25B406B20(v10, (uint64_t)" ", 1);
    BOOL v12 = sub_25B406B20(v11, (uint64_t)"init", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
    uint64_t v13 = std::locale::use_facet(&v49, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v49);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407184("err", "which_dim<dim");
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    uint64_t v14 = std::locale::use_facet(&v49, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v49);
    std::ostream::put();
    std::ostream::flush();
    if ((v6 & 0x80000000) != 0)
    {
      uint64_t v15 = (void *)MEMORY[0x263F8C0F8];
      uint64_t v16 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
      char v17 = sub_25B406B20(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/squeeze_helper.hpp", 117);
      sub_25B406B20(v17, (uint64_t)" ", 1);
      uint64_t v18 = (void *)std::ostream::operator<<();
      uint64_t v19 = sub_25B406B20(v18, (uint64_t)" ", 1);
      char v20 = sub_25B406B20(v19, (uint64_t)"init", 4);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
      unint64_t v21 = std::locale::use_facet(&v49, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v49);
      std::ostream::put();
      std::ostream::flush();
      sub_25B407E3C("err", "which_dim>=0");
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
      uint64_t v22 = std::locale::use_facet(&v49, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v49);
      std::ostream::put();
      std::ostream::flush();
    }
  }
  if (*(void *)(a2 + 8 * v6) != 1)
  {
    unsigned int v23 = (void *)MEMORY[0x263F8C0F8];
    int v24 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    unint64_t v25 = sub_25B406B20(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/squeeze_helper.hpp", 117);
    sub_25B406B20(v25, (uint64_t)" ", 1);
    unint64_t v26 = (void *)std::ostream::operator<<();
    int v27 = sub_25B406B20(v26, (uint64_t)" ", 1);
    int v28 = sub_25B406B20(v27, (uint64_t)"init", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
    uint64_t v29 = std::locale::use_facet(&v49, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
    std::locale::~locale(&v49);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407F48("err", "shape[which_dim]==1");
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
    BOOL v30 = std::locale::use_facet(&v49, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v49);
    std::ostream::put();
    std::ostream::flush();
  }
  unsigned int v31 = sub_25B3FCAD4(1uLL);
  uint64_t v32 = v31;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  char v35 = 0;
  void *v31 = v6;
  size_t v36 = v31 + 1;
  do
  {
    uint64_t v37 = v34 + 1;
    if (v34 == -1)
    {
      uint64_t v38 = v36;
      uint64_t v39 = v33;
      do
      {
        uint64_t v40 = *v38++;
        v35 |= *(v31 - 1) == v40;
        --v39;
      }
      while (v39);
    }
    --v33;
    ++v36;
    ++v34;
  }
  while (v37 != 1);
  if (v35)
  {
    uint64_t v41 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v42 = sub_25B406B20(v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/squeeze_helper.hpp", 117);
    sub_25B406B20(v42, (uint64_t)" ", 1);
    uint64_t v43 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v44 = (void *)std::ostream::operator<<();
    sub_25B406B20(v44, (uint64_t)" ", 1);
    sub_25B406B20(v44, (uint64_t)"init", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24)));
    unint64_t v45 = std::locale::use_facet(&v49, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
    std::locale::~locale(&v49);
    std::ostream::put();
    std::ostream::flush();
    sub_25B408054("err", "duplicate dim idx");
    std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
    uint64_t v46 = std::locale::use_facet(&v49, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
    std::locale::~locale(&v49);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  do
  {
    if (v47 != *v32) {
      *(void *)(a1 + 8 * v48++) = v47;
    }
    ++v47;
  }
  while (v47 != 3);
  operator delete(v32);
}

void sub_25B436A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B436AEC(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  unsigned int v8 = a4;
  uint64_t v11 = (unint64_t *)(result + 8 * a3);
  unint64_t v12 = *v11;
  if ((a4 & 0x80000000) != 0 && (unsigned int v8 = v12 + a4, (int)(v12 + a4) < 0) || v12 < v8)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v14 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v15 = sub_25B406B20(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v15, (uint64_t)" ", 1);
    uint64_t v16 = (void *)std::ostream::operator<<();
    char v17 = sub_25B406B20(v16, (uint64_t)" ", 1);
    uint64_t v18 = sub_25B406B20(v17, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    uint64_t v19 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    std::ostream::flush();
    sub_25B406E3C("err", "view shape should large equal 0 and less ");
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    char v20 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    BOOL result = std::ostream::flush();
  }
  if (a5)
  {
    if (a5 < 0) {
      a5 += *(_DWORD *)v11;
    }
  }
  else
  {
    unint64_t v21 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v22 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    unsigned int v23 = sub_25B406B20(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v23, (uint64_t)" ", 1);
    int v24 = (void *)std::ostream::operator<<();
    unint64_t v25 = sub_25B406B20(v24, (uint64_t)" ", 1);
    unint64_t v26 = sub_25B406B20(v25, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
    int v27 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    std::ostream::flush();
    sub_25B406ED4("err", "end should not be zero");
    std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
    int v28 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    BOOL result = std::ostream::flush();
    a5 = 0;
  }
  if (a6 <= 0)
  {
    uint64_t v29 = (void *)MEMORY[0x263F8C0F8];
    BOOL v30 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    unsigned int v31 = sub_25B406B20(v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v31, (uint64_t)" ", 1);
    uint64_t v32 = (void *)std::ostream::operator<<();
    uint64_t v33 = sub_25B406B20(v32, (uint64_t)" ", 1);
    uint64_t v34 = sub_25B406B20(v33, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
    char v35 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    std::ostream::flush();
    sub_25B406FE0("err", "at least step > 0");
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    size_t v36 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    BOOL result = std::ostream::flush();
  }
  if (a5 <= (int)v8)
  {
    uint64_t v37 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v38 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v39 = sub_25B406B20(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v39, (uint64_t)" ", 1);
    uint64_t v40 = (void *)std::ostream::operator<<();
    uint64_t v41 = sub_25B406B20(v40, (uint64_t)" ", 1);
    uint64_t v42 = sub_25B406B20(v41, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(*v42 - 24)));
    uint64_t v43 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407078("err", "end >start");
    std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24)));
    uint64_t v44 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    BOOL result = std::ostream::flush();
  }
  if (*v11 < a5)
  {
    unint64_t v45 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v46 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v47 = sub_25B406B20(v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v47, (uint64_t)" ", 1);
    uint64_t v48 = (void *)std::ostream::operator<<();
    std::locale v49 = sub_25B406B20(v48, (uint64_t)" ", 1);
    uint64_t v50 = sub_25B406B20(v49, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(void *)(*v50 - 24)));
    unint64_t v51 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407184("err", "out ouf range");
    std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
    BOOL v52 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    BOOL result = std::ostream::flush();
  }
  if ((int)(a5 - v8) / a6 <= 0)
  {
    uint64_t v53 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v54 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    int v55 = sub_25B406B20(v54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/range_helper.hpp", 115);
    sub_25B406B20(v55, (uint64_t)" ", 1);
    unint64_t v56 = (void *)std::ostream::operator<<();
    int v57 = sub_25B406B20(v56, (uint64_t)" ", 1);
    uint64_t v58 = sub_25B406B20(v57, (uint64_t)"compute_range_inner", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
    uint64_t v59 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    std::ostream::flush();
    sub_25B406FE0("err", "length > 0");
    std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
    uint64_t v60 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    BOOL result = std::ostream::flush();
  }
  uint64_t v61 = (void *)(a2 + 24 * a3);
  void *v61 = (int)v8;
  v61[1] = a5;
  v61[2] = a6;
  return result;
}

void sub_25B43748C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_25B4374CC(void *a1)
{
  *a1 = &unk_2708F18E0;
  unint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B437538(void *a1)
{
  *a1 = &unk_2708F18E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

uint64_t sub_25B437584(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F18E0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

uint64_t sub_25B43765C(uint64_t result, _OWORD *a2)
{
  *(void *)BOOL result = &unk_2708F18E0;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 1;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(result + 8) = *a2;
  *(_OWORD *)(result + 40) = v2;
  *(_OWORD *)(result + 24) = v3;
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  *(void *)(result + 56) = v4;
  *(void *)(result + 64) = 1;
  *(void *)(result + 104) = v5 * v4;
  *(void *)(result + 112) = 0;
  if (v5 * v4) {
    sub_25B43814C((uint64_t)&v6, v5 * v4);
  }
  *(unsigned char *)(result + 137) = 1;
  return result;
}

void sub_25B43773C(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B437754(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v153 = *MEMORY[0x263EF8340];
  uint64_t v5 = (_OWORD *)(result + 8);
  long long v6 = (_OWORD *)(a2 + 8);
  char v7 = 1;
  do
  {
    uint64_t v8 = *((void *)v5 + v4);
    uint64_t v9 = *((void *)v6 + v4);
    if ((v7 & 1) == 0) {
      break;
    }
    char v7 = 0;
    uint64_t v4 = 1;
  }
  while (v8 == v9);
  if (v8 == v9)
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      uint64_t v10 = *(void *)(result + 104);
      uint64_t v11 = *(_WORD **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v10)
        {
          unint64_t v12 = *(__int16 **)(a2 + 144);
          do
          {
            __int16 v13 = *v12++;
            *v11++ = v13;
            --v10;
          }
          while (v10);
        }
      }
      else if (v10)
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(result + 56);
        uint64_t v79 = *(void *)(result + 64);
        uint64_t v80 = *(void *)(a2 + 144);
        do
        {
          uint64_t v81 = 0;
          v11[v78 * (void)v138 + v79 * *((void *)&v138 + 1)] = *(_WORD *)(v80 + 2 * v77);
          do
          {
            uint64_t v82 = *(void *)((char *)&v138 + v81 + 8) + 1;
            *(void *)((char *)&v138 + v81 + 8) = v82;
            BOOL result = *(void *)(v3 + 16 + v81);
            if (v82 != result) {
              break;
            }
            *(void *)((char *)&v138 + v81 + 8) = 0;
            v81 -= 8;
          }
          while (v81 != -16);
          ++v77;
        }
        while (v77 != v10);
      }
    }
    else
    {
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      uint64_t v40 = *(void *)(result + 104);
      uint64_t v41 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v40)
        {
          uint64_t v42 = 0;
          uint64_t v43 = *(void *)(a2 + 56);
          uint64_t v44 = *(void *)(a2 + 64);
          uint64_t v45 = *(void *)(a2 + 144);
          do
          {
            uint64_t v46 = 0;
            *(_WORD *)(v41 + 2 * v42) = *(_WORD *)(v45 + 2 * (v43 * v138 + v44 * *((void *)&v138 + 1)));
            do
            {
              uint64_t v47 = *(void *)((char *)&v138 + v46 + 8) + 1;
              *(void *)((char *)&v138 + v46 + 8) = v47;
              BOOL result = *(void *)(v3 + 16 + v46);
              if (v47 != result) {
                break;
              }
              *(void *)((char *)&v138 + v46 + 8) = 0;
              v46 -= 8;
            }
            while (v46 != -16);
            ++v42;
          }
          while (v42 != v40);
        }
      }
      else if (v40)
      {
        uint64_t v101 = 0;
        uint64_t v102 = *(void *)(result + 56);
        uint64_t v103 = *(void *)(result + 64);
        uint64_t v104 = *(void *)(a2 + 56);
        uint64_t v105 = *(void *)(a2 + 64);
        uint64_t v106 = *(void *)(a2 + 144);
        do
        {
          BOOL result = 0;
          *(_WORD *)(v41 + 2 * (v102 * v138 + v103 * *((void *)&v138 + 1))) = *(_WORD *)(v106
                                                                                         + 2
                                                                                         * (v104 * v138
                                                                                          + v105
                                                                                          * *((void *)&v138 + 1)));
          do
          {
            uint64_t v107 = *(void *)((char *)&v138 + result + 8) + 1;
            *(void *)((char *)&v138 + result + 8) = v107;
            if (v107 != *(void *)(v3 + 16 + result)) {
              break;
            }
            *(void *)((char *)&v138 + result + 8) = 0;
            result -= 8;
          }
          while (result != -16);
          ++v101;
        }
        while (v101 != v40);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v151 = 0uLL;
      long long v152 = 0uLL;
      long long v149 = 0uLL;
      long long v150 = 0uLL;
      long long v147 = 0uLL;
      long long v148 = 0uLL;
      long long v145 = 0uLL;
      long long v146 = 0uLL;
      long long v143 = 0uLL;
      long long v144 = 0uLL;
      long long v141 = 0uLL;
      long long v142 = 0uLL;
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      long long v130 = 0uLL;
      long long v131 = 0uLL;
      long long v129 = 0uLL;
      sub_25B40AB84((uint64_t)&v138, v5, v6, (uint64_t)&v129);
      uint64_t v14 = 0;
      char v15 = 1;
      do
      {
        uint64_t v16 = *((void *)&v129 + v14);
        uint64_t v17 = *((void *)v5 + v14);
        if ((v15 & 1) == 0) {
          break;
        }
        char v15 = 0;
        uint64_t v14 = 1;
      }
      while (v16 == v17);
      if (v16 != v17)
      {
        uint64_t v18 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v19 = sub_25B406B20(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v19, (uint64_t)" ", 1);
        char v20 = (void *)MEMORY[0x263F8C0F8];
        unint64_t v21 = (void *)std::ostream::operator<<();
        sub_25B406B20(v21, (uint64_t)" ", 1);
        sub_25B406B20(v21, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
        uint64_t v22 = std::locale::use_facet(v135, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(v135);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
        unsigned int v23 = std::locale::use_facet(v135, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(v135);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v136 = 0u;
      long long v137 = 0u;
      long long v134 = 0u;
      *(_OWORD *)&v135[0].__locale_ = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      uint64_t v24 = *(void *)(v3 + 104);
      uint64_t v25 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v24)
        {
          uint64_t v26 = 0;
          int v28 = (uint64_t *)*((void *)&v139 + 1);
          int v27 = (uint64_t *)v140;
          unint64_t v29 = (uint64_t)(v140 - *((void *)&v139 + 1)) >> 3;
          if (v29 <= 1) {
            unint64_t v29 = 1;
          }
          uint64_t v30 = *(void *)(a2 + 144);
          do
          {
            long long v132 = *(_OWORD *)&v135[0].__locale_;
            if (v27 != v28)
            {
              unsigned int v31 = v28;
              unint64_t v32 = v29;
              do
              {
                uint64_t v33 = *v31++;
                *((void *)&v132 + v33) = 0;
                --v32;
              }
              while (v32);
            }
            uint64_t v34 = 0;
            uint64_t v35 = 0;
            char v36 = 1;
            do
            {
              char v37 = v36;
              v35 += *((void *)&v150 + v34) * *((void *)&v132 + v34);
              uint64_t v34 = 1;
              char v36 = 0;
            }
            while ((v37 & 1) != 0);
            *(_WORD *)(v25 + 2 * v26) = *(_WORD *)(v30 + 2 * v35);
            for (uint64_t i = 1; i != -1; --i)
            {
              uint64_t v39 = (std::locale::__imp *)((char *)v135[i].__locale_ + 1);
              v135[i].__locale_ = v39;
              if (v39 != *(std::locale::__imp **)((char *)&v129 + i * 8)) {
                break;
              }
              v135[i].__locale_ = 0;
            }
            ++v26;
          }
          while (v26 != v24);
        }
      }
      else if (v24)
      {
        uint64_t v83 = 0;
        uint64_t v85 = (uint64_t *)*((void *)&v139 + 1);
        uint64_t v84 = (uint64_t *)v140;
        unint64_t v86 = (uint64_t)(v140 - *((void *)&v139 + 1)) >> 3;
        if (v86 <= 1) {
          unint64_t v86 = 1;
        }
        uint64_t v87 = *(void *)(v3 + 56);
        uint64_t v88 = *(void *)(v3 + 64);
        uint64_t v89 = *(void *)(a2 + 144);
        do
        {
          locale = v135[0].__locale_;
          uint64_t v91 = v135[1].__locale_;
          long long v132 = *(_OWORD *)&v135[0].__locale_;
          if (v84 != v85)
          {
            unint64_t v92 = v85;
            unint64_t v93 = v86;
            do
            {
              uint64_t v94 = *v92++;
              *((void *)&v132 + v94) = 0;
              --v93;
            }
            while (v93);
          }
          uint64_t v95 = 0;
          uint64_t v96 = 0;
          char v97 = 1;
          do
          {
            char v98 = v97;
            v96 += *((void *)&v150 + v95) * *((void *)&v132 + v95);
            uint64_t v95 = 1;
            char v97 = 0;
          }
          while ((v98 & 1) != 0);
          *(_WORD *)(v25 + 2 * ((void)locale * v87 + (void)v91 * v88)) = *(_WORD *)(v89 + 2 * v96);
          for (uint64_t j = 1; j != -1; --j)
          {
            BOOL v100 = (std::locale::__imp *)((char *)v135[j].__locale_ + 1);
            v135[j].__locale_ = v100;
            if (v100 != *(std::locale::__imp **)((char *)&v129 + j * 8)) {
              break;
            }
            v135[j].__locale_ = 0;
          }
          ++v83;
        }
        while (v83 != v24);
      }
    }
    else
    {
      long long v151 = 0uLL;
      long long v152 = 0uLL;
      long long v149 = 0uLL;
      long long v150 = 0uLL;
      long long v147 = 0uLL;
      long long v148 = 0uLL;
      long long v145 = 0uLL;
      long long v146 = 0uLL;
      long long v143 = 0uLL;
      long long v144 = 0uLL;
      long long v141 = 0uLL;
      long long v142 = 0uLL;
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      long long v130 = 0uLL;
      long long v131 = 0uLL;
      long long v129 = 0uLL;
      sub_25B40AB84((uint64_t)&v138, v5, v6, (uint64_t)&v129);
      uint64_t v48 = 0;
      char v49 = 1;
      do
      {
        uint64_t v50 = *((void *)&v129 + v48);
        uint64_t v51 = *((void *)v5 + v48);
        if ((v49 & 1) == 0) {
          break;
        }
        char v49 = 0;
        uint64_t v48 = 1;
      }
      while (v50 == v51);
      if (v50 != v51)
      {
        BOOL v52 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v53 = sub_25B406B20(v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v53, (uint64_t)" ", 1);
        uint64_t v54 = (void *)MEMORY[0x263F8C0F8];
        int v55 = (void *)std::ostream::operator<<();
        sub_25B406B20(v55, (uint64_t)" ", 1);
        sub_25B406B20(v55, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(*v55 - 24)));
        unint64_t v56 = std::locale::use_facet(v135, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(v135);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
        int v57 = std::locale::use_facet(v135, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
        std::locale::~locale(v135);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v136 = 0u;
      long long v137 = 0u;
      long long v134 = 0u;
      *(_OWORD *)&v135[0].__locale_ = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      uint64_t v58 = *(void *)(v3 + 104);
      uint64_t v59 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v58)
        {
          uint64_t v60 = 0;
          std::locale v62 = (uint64_t *)*((void *)&v139 + 1);
          uint64_t v61 = (uint64_t *)v140;
          unint64_t v63 = (uint64_t)(v140 - *((void *)&v139 + 1)) >> 3;
          if (v63 <= 1) {
            unint64_t v63 = 1;
          }
          int v64 = *(unsigned __int8 *)(a2 + 136);
          uint64_t v65 = *(void *)(a2 + 56);
          uint64_t v66 = *(void *)(a2 + 64);
          uint64_t v67 = *(void *)(a2 + 144);
          do
          {
            long long v132 = *(_OWORD *)&v135[0].__locale_;
            if (v61 != v62)
            {
              uint64_t v68 = v62;
              unint64_t v69 = v63;
              do
              {
                uint64_t v70 = *v68++;
                *((void *)&v132 + v70) = 0;
                --v69;
              }
              while (v69);
            }
            uint64_t v71 = 0;
            uint64_t v72 = 0;
            char v73 = 1;
            do
            {
              char v74 = v73;
              v72 += *((void *)&v150 + v71) * *((void *)&v132 + v71);
              uint64_t v71 = 1;
              char v73 = 0;
            }
            while ((v74 & 1) != 0);
            if (!v64) {
              uint64_t v72 = v132 * v65 + *((void *)&v132 + 1) * v66;
            }
            *(_WORD *)(v59 + 2 * v60) = *(_WORD *)(v67 + 2 * v72);
            for (uint64_t k = 1; k != -1; --k)
            {
              uint64_t v76 = (std::locale::__imp *)((char *)v135[k].__locale_ + 1);
              v135[k].__locale_ = v76;
              if (v76 != *(std::locale::__imp **)((char *)&v129 + k * 8)) {
                break;
              }
              v135[k].__locale_ = 0;
            }
            ++v60;
          }
          while (v60 != v58);
        }
      }
      else if (v58)
      {
        uint64_t v108 = 0;
        unint64_t v110 = (uint64_t *)*((void *)&v139 + 1);
        BOOL v109 = (uint64_t *)v140;
        unint64_t v111 = (uint64_t)(v140 - *((void *)&v139 + 1)) >> 3;
        if (v111 <= 1) {
          unint64_t v111 = 1;
        }
        uint64_t v112 = *(void *)(v3 + 56);
        uint64_t v113 = *(void *)(v3 + 64);
        int v114 = *(unsigned __int8 *)(a2 + 136);
        uint64_t v115 = *(void *)(a2 + 56);
        uint64_t v116 = *(void *)(a2 + 64);
        uint64_t v117 = *(void *)(a2 + 144);
        do
        {
          uint64_t v118 = v135[0].__locale_;
          unint64_t v119 = v135[1].__locale_;
          long long v132 = *(_OWORD *)&v135[0].__locale_;
          if (v109 != v110)
          {
            BOOL v120 = v110;
            unint64_t v121 = v111;
            do
            {
              uint64_t v122 = *v120++;
              *((void *)&v132 + v122) = 0;
              --v121;
            }
            while (v121);
          }
          uint64_t v123 = 0;
          uint64_t v124 = 0;
          char v125 = 1;
          do
          {
            char v126 = v125;
            v124 += *((void *)&v150 + v123) * *((void *)&v132 + v123);
            uint64_t v123 = 1;
            char v125 = 0;
          }
          while ((v126 & 1) != 0);
          if (!v114) {
            uint64_t v124 = v132 * v115 + *((void *)&v132 + 1) * v116;
          }
          *(_WORD *)(v59 + 2 * ((void)v118 * v112 + (void)v119 * v113)) = *(_WORD *)(v117 + 2 * v124);
          for (uint64_t m = 1; m != -1; --m)
          {
            short float v128 = (std::locale::__imp *)((char *)v135[m].__locale_ + 1);
            v135[m].__locale_ = v128;
            if (v128 != *(std::locale::__imp **)((char *)&v129 + m * 8)) {
              break;
            }
            v135[m].__locale_ = 0;
          }
          ++v108;
        }
        while (v108 != v58);
      }
    }
    return sub_25B3F9500((uint64_t)&v138);
  }
  return result;
}

void sub_25B438118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_25B43814C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = operator new(0x30uLL);
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = &unk_2708F1ED8;
  v3[4] = a2;
  *((unsigned char *)v3 + 40) = 1;
  operator new[]();
}

void sub_25B4381DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4381F8(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    uint64_t v1 = result;
    BOOL result = *(void *)(result + 24);
    if (result)
    {
      BOOL result = MEMORY[0x261163EC0](result, 0x1000C80BDFB0063);
      *(void *)(v1 + 24) = 0;
    }
  }
  return result;
}

void sub_25B438240(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2708F1ED8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x261163EE0);
}

void sub_25B438294(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2708F1ED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

_OWORD *sub_25B4382B4(_OWORD *__b, char **a2)
{
  __b[1] = 0u;
  __b[2] = 0u;
  void *__b = 0u;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    long long v6 = (void *)MEMORY[0x263F8C0F8];
    char v7 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v8 = sub_25B406B20(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/../tensor/shape.hpp", 118);
    sub_25B406B20(v8, (uint64_t)" ", 1);
    uint64_t v9 = (void *)std::ostream::operator<<();
    uint64_t v10 = sub_25B406B20(v9, (uint64_t)" ", 1);
    uint64_t v11 = sub_25B406B20(v10, (uint64_t)"Shape", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    unint64_t v12 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4088A4("err", "size of input shape vector is 0");
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
    __int16 v13 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
  }
  uint64_t v14 = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x20)
  {
    char v15 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v16 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v17 = sub_25B406B20(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/../tensor/shape.hpp", 118);
    sub_25B406B20(v17, (uint64_t)" ", 1);
    uint64_t v18 = (void *)std::ostream::operator<<();
    uint64_t v19 = sub_25B406B20(v18, (uint64_t)" ", 1);
    char v20 = sub_25B406B20(v19, (uint64_t)"Shape", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
    unint64_t v21 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4089B0("err", "size of input shape vector > current dim");
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    uint64_t v22 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    uint64_t v14 = v5 - *a2;
  }
  unint64_t v23 = v14 >> 3;
  if (v14 == 24)
  {
    uint64_t v24 = 0;
  }
  else
  {
    if (v23 != 2 && v23 != 3) {
      uint64_t v24 = 3 - v23;
    }
    else {
      uint64_t v24 = 1;
    }
    memset_pattern16(__b, &unk_25B5F18C0, 8 * v24);
  }
  if (v5 != v4)
  {
    if (v23 <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = v23;
    }
    uint64_t v26 = (void *)__b + v24;
    do
    {
      uint64_t v27 = *(void *)v4;
      v4 += 8;
      *v26++ = v27;
      --v25;
    }
    while (v25);
  }
  return __b;
}

void sub_25B438668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B438688(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_2708F1EB8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 1;
  sub_25B43876C(a1 + 8, a2);
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3) {
    sub_25B43814C((uint64_t)&v5, v3);
  }
  *(unsigned char *)(a1 + 137) = 1;
  return a1;
}

void sub_25B438754(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B43876C(uint64_t result, long long *a2)
{
  unint64_t v2 = 0;
  long long v3 = *a2;
  long long v4 = a2[2];
  *(_OWORD *)(result + 16) = a2[1];
  *(_OWORD *)(result + 32) = v4;
  *(_OWORD *)BOOL result = v3;
  uint64_t v5 = result + 48;
  do
  {
    *(void *)(v5 + 8 * v2) = 1;
    if (v2 <= 1)
    {
      unint64_t v6 = v2;
      uint64_t v7 = 1;
      do
      {
        v7 *= *(void *)(result + 8 + 8 * v6);
        *(void *)(v5 + 8 * v2) = v7;
        ++v6;
      }
      while (v6 != 2);
    }
    ++v2;
  }
  while (v2 != 3);
  *(void *)(result + 96) = *(void *)(result + 8) * *(void *)result * *(void *)(result + 16);
  *(void *)(result + 104) = 0;
  return result;
}

void sub_25B4387DC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a2 + 8);
  v7[0] = 0;
  v7[1] = v6;
  long long v8 = xmmword_25B5F1140;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = 1;
  sub_25B40B1A0(a2 + 8, (uint64_t)v7, a3, a4);
  sub_25B435CA0(a1, a2, (uint64_t)v7);
}

uint64_t sub_25B438874(uint64_t result)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unint64_t v1 = *(void *)(result + 16) * *(void *)(result + 8);
  memset(v18, 0, sizeof(v18));
  if (*(unsigned char *)(result + 136))
  {
    unint64_t v2 = *(short float **)(result + 144);
    short float v3 = *v2;
    if (v1 >= 2)
    {
      unint64_t v4 = v1 - 1;
      uint64_t v5 = v2 + 1;
      do
      {
        short float v6 = *v5++;
        short float v7 = v6;
        if (v3 < v6) {
          short float v3 = v7;
        }
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(result + 56);
    uint64_t v10 = *(void *)(result + 64);
    uint64_t v11 = *(short float **)(result + 144);
    short float v12 = *v11;
    do
    {
      uint64_t v13 = *(void *)((char *)v18 + v8 + 8) + 1;
      *(void *)((char *)v18 + v8 + 8) = v13;
      if (v13 != *(void *)(result + 16 + v8)) {
        break;
      }
      *(void *)((char *)v18 + v8 + 8) = 0;
      v8 -= 8;
    }
    while (v8 != -16);
    if (v1 >= 2)
    {
      for (uint64_t i = 1; i != v1; ++i)
      {
        uint64_t v15 = 0;
        uint64_t v16 = v9 * *(void *)&v18[0] + v10 * *((void *)&v18[0] + 1);
        if (v12 < v11[v16]) {
          short float v12 = v11[v16];
        }
        do
        {
          uint64_t v17 = *(void *)((char *)v18 + v15 + 8) + 1;
          *(void *)((char *)v18 + v15 + 8) = v17;
          if (v17 != *(void *)(result + 16 + v15)) {
            break;
          }
          *(void *)((char *)v18 + v15 + 8) = 0;
          v15 -= 8;
        }
        while (v15 != -16);
      }
    }
  }
  return result;
}

void sub_25B4389B8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  v20[0] = 0;
  v20[1] = v6;
  long long v21 = xmmword_25B5F1140;
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v23 = 1;
  sub_25B43A2AC(a2 + 8, (uint64_t)v20, (uint64_t)&v16, a3, a4);
  sub_25B435CA0((uint64_t)v14, a2, (uint64_t)v20);
  short float v7 = v16;
  if (v17 - (void)v16 != 8)
  {
    uint64_t v8 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v9, (uint64_t)" ", 1);
    uint64_t v10 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v11 = (void *)std::ostream::operator<<();
    sub_25B406B20(v11, (uint64_t)" ", 1);
    sub_25B406B20(v11, (uint64_t)"slice", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    short float v12 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
    LODWORD(v19.__locale_) = 0;
    sub_25B435E20("err");
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    uint64_t v13 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
  }
  sub_25B435E80(a1, (uint64_t)v14, *v7);
  v14[0] = &unk_2708F18E0;
  if (v15) {
    sub_25B404120(v15);
  }
  operator delete(v7);
}

void sub_25B438C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  if (v25) {
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B438CB0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 137))
  {
    unint64_t v4 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    short float v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"ascontiguous", 12);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v14);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    uint64_t v11 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v14);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(unsigned char *)(a2 + 136))
  {
    return sub_25B4395D0(a1, a2);
  }
  else
  {
    uint64_t v13 = sub_25B4396A8(a1, (_OWORD *)(a2 + 8));
    return sub_25B43979C(v13, a2);
  }
}

void sub_25B438EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  *uint64_t v10 = &unk_2708F1A28;
  short float v12 = (std::__shared_weak_count *)v10[16];
  if (v12) {
    sub_25B404120(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B438EFC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = a2 + 8;
  v20[0] = 0;
  v20[1] = v6;
  long long v21 = xmmword_25B5F1140;
  uint64_t v22 = *(void *)(v5 + 8);
  uint64_t v23 = 1;
  sub_25B4394B4(1u, v5, (uint64_t)v20, (uint64_t)&v16, a3);
  sub_25B408ABC((uint64_t)v14, a2, (uint64_t)v20);
  short float v7 = v16;
  if (v17 - (void)v16 != 8)
  {
    uint64_t v8 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v9, (uint64_t)" ", 1);
    uint64_t v10 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v11 = (void *)std::ostream::operator<<();
    sub_25B406B20(v11, (uint64_t)" ", 1);
    sub_25B406B20(v11, (uint64_t)"slice", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    short float v12 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
    LODWORD(v19.__locale_) = 0;
    sub_25B435E20("err");
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    uint64_t v13 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
  }
  sub_25B4075DC(a1, (uint64_t)v14, *v7);
  v14[0] = &unk_2708F1C28;
  if (v15) {
    sub_25B404120(v15);
  }
  operator delete(v7);
}

void sub_25B439184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  if (v25) {
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B4391F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 16);
    *(void *)(a1 + 16) = i - 16;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_25B43925C(void ***a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 16;
      short float v7 = v4 - 16;
      uint64_t v8 = v4 - 16;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 16;
        (*v9)(v7);
        v6 -= 16;
        BOOL v10 = v7 == v2;
        short float v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t **sub_25B43931C(unint64_t **a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  uint64_t v6 = *a1 + 2;
  if (v5 >= *v6)
  {
    uint64_t v9 = (uint64_t)(v5 - *v4) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_25B3FBC4C();
    }
    uint64_t v11 = *v6 - *v4;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    v24[4] = v6;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_25B3FFAEC(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12 + 16 * v9;
    *(void *)unint64_t v14 = &unk_2708F2160;
    int v15 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(v14 + 11) = *(_DWORD *)(a2 + 11);
    *(_DWORD *)(v14 + 8) = v15;
    unint64_t v17 = *v4;
    unint64_t v16 = v4[1];
    if (v16 == *v4)
    {
      unint64_t v21 = v4[1];
      unint64_t v19 = v12 + 16 * v9;
    }
    else
    {
      unint64_t v18 = v14 - 16;
      unint64_t v19 = v12 + 16 * v9;
      do
      {
        *(void *)(v19 - 16) = &unk_2708F2160;
        v19 -= 16;
        int v20 = *(_DWORD *)(v16 - 8);
        *(_DWORD *)(v19 + 11) = *(_DWORD *)(v16 - 5);
        *(_DWORD *)(v19 + 8) = v20;
        v18 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      unint64_t v21 = *v4;
      unint64_t v16 = v4[1];
    }
    unint64_t v8 = v14 + 16;
    unint64_t *v4 = v19;
    v24[0] = v21;
    v24[1] = v21;
    v4[1] = v14 + 16;
    v24[2] = v16;
    unint64_t v22 = v4[2];
    v4[2] = v12 + 16 * v13;
    v24[3] = v22;
    sub_25B4391F0((uint64_t)v24);
  }
  else
  {
    *(void *)unint64_t v5 = &unk_2708F2160;
    int v7 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(v5 + 11) = *(_DWORD *)(a2 + 11);
    *(_DWORD *)(v5 + 8) = v7;
    unint64_t v8 = v5 + 16;
  }
  v4[1] = v8;
  return a1;
}

uint64_t sub_25B4394B4(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v10 = a1;
  unint64_t v12 = *(void **)(a4 + 8);
  unint64_t v11 = *(void *)(a4 + 16);
  if ((unint64_t)v12 >= v11)
  {
    unint64_t v14 = *(void **)a4;
    uint64_t v15 = ((uint64_t)v12 - *(void *)a4) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      sub_25B3FBC4C();
    }
    uint64_t v17 = v11 - (void)v14;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    BOOL v18 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v18) {
      unint64_t v19 = v16;
    }
    if (v19)
    {
      unint64_t v19 = (unint64_t)sub_25B3FCAD4(v19);
      unint64_t v14 = *(void **)a4;
      unint64_t v12 = *(void **)(a4 + 8);
    }
    else
    {
      uint64_t v20 = 0;
    }
    unint64_t v21 = (void *)(v19 + 8 * v15);
    unint64_t v22 = v19 + 8 * v20;
    *unint64_t v21 = v10;
    uint64_t v13 = v21 + 1;
    while (v12 != v14)
    {
      uint64_t v23 = *--v12;
      *--unint64_t v21 = v23;
    }
    *(void *)a4 = v21;
    *(void *)(a4 + 8) = v13;
    *(void *)(a4 + 16) = v22;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *unint64_t v12 = a1;
    uint64_t v13 = v12 + 1;
  }
  *(void *)(a4 + 8) = v13;
  unsigned int v24 = *a5;
  int v25 = *a5 + 1;

  return sub_25B408C3C(a2, a3, a1, v24, v25, 1);
}

uint64_t sub_25B4395D0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F1A28;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    unint64_t v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

uint64_t sub_25B4396A8(uint64_t result, _OWORD *a2)
{
  *(void *)BOOL result = &unk_2708F1A28;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 1;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(result + 8) = *a2;
  *(_OWORD *)(result + 40) = v2;
  *(_OWORD *)(result + 24) = v3;
  *(void *)(result + 56) = 1;
  uint64_t v4 = *(void *)(result + 8);
  *(void *)(result + 104) = v4;
  *(void *)(result + 112) = 0;
  if (v4) {
    sub_25B408738((uint64_t)&v5, v4);
  }
  *(unsigned char *)(result + 137) = 1;
  return result;
}

void sub_25B439784(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B43979C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v109 = *MEMORY[0x263EF8340];
  long long v5 = (long long *)(result + 8);
  uint64_t v4 = *(void *)(result + 8);
  long long v6 = (long long *)(a2 + 8);
  if (v4 == *(void *)(a2 + 8))
  {
    uint64_t v7 = *(void *)(result + 104);
    long long v8 = *(_DWORD **)(result + 144);
    if (*(unsigned char *)(a2 + 136))
    {
      if (*(unsigned char *)(result + 136))
      {
        if (v7)
        {
          uint64_t v9 = *(int **)(a2 + 144);
          do
          {
            int v10 = *v9++;
            *v8++ = v10;
            --v7;
          }
          while (v7);
        }
      }
      else if (v7)
      {
        uint64_t v55 = 0;
        uint64_t v56 = *(void *)(result + 56);
        int v57 = *(int **)(a2 + 144);
        do
        {
          int v58 = *v57++;
          v8[v56 * v55] = v58;
          if (v55 + 1 == v4) {
            uint64_t v55 = 0;
          }
          else {
            ++v55;
          }
          --v7;
        }
        while (v7);
      }
    }
    else if (*(unsigned char *)(result + 136))
    {
      if (v7)
      {
        uint64_t v31 = 0;
        uint64_t v32 = *(void *)(a2 + 144);
        do
        {
          *v8++ = *(_DWORD *)(v32 + 4 * *(void *)(a2 + 56) * v31);
          if (v31 + 1 == v4) {
            uint64_t v31 = 0;
          }
          else {
            ++v31;
          }
          --v7;
        }
        while (v7);
      }
    }
    else if (v7)
    {
      uint64_t v71 = 0;
      uint64_t v72 = *(void *)(result + 56);
      uint64_t v73 = *(void *)(a2 + 144);
      do
      {
        v8[v72 * v71] = *(_DWORD *)(v73 + 4 * *(void *)(a2 + 56) * v71);
        if (v71 + 1 == v4) {
          uint64_t v71 = 0;
        }
        else {
          ++v71;
        }
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v104 = 0uLL;
      long long v105 = 0uLL;
      long long v102 = 0uLL;
      long long v103 = 0uLL;
      long long v100 = 0uLL;
      long long v101 = 0uLL;
      long long v98 = 0uLL;
      long long v99 = 0uLL;
      long long v96 = 0uLL;
      long long v97 = 0uLL;
      long long v94 = 0uLL;
      long long v95 = 0uLL;
      long long v92 = 0uLL;
      long long v93 = 0uLL;
      long long v90 = 0uLL;
      long long v91 = 0uLL;
      long long v88 = 0uLL;
      long long v89 = 0uLL;
      sub_25B439F30((uint64_t)&v91, v5, v6, &v88);
      unint64_t v11 = (std::locale::__imp *)v88;
      if ((void)v88 != *(void *)v5)
      {
        unint64_t v12 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v13 = sub_25B406B20(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v13, (uint64_t)" ", 1);
        unint64_t v14 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v15 = (void *)std::ostream::operator<<();
        sub_25B406B20(v15, (uint64_t)" ", 1);
        sub_25B406B20(v15, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
        unint64_t v16 = std::locale::use_facet(v106, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(v106);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
        uint64_t v17 = std::locale::use_facet(v106, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(v106);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v107 = 0u;
      long long v108 = 0u;
      *(_OWORD *)&v106[0].__locale_ = 0u;
      uint64_t v18 = *(void *)(v3 + 104);
      uint64_t v19 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v18)
        {
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          uint64_t v23 = (uint64_t *)*((void *)&v92 + 1);
          unint64_t v22 = (uint64_t *)v93;
          unint64_t v24 = (uint64_t)(v93 - *((void *)&v92 + 1)) >> 3;
          if (v24 <= 1) {
            unint64_t v24 = 1;
          }
          uint64_t v25 = v103;
          uint64_t v26 = *(void *)(a2 + 144);
          do
          {
            v106[0].__locale_ = v20;
            locale = v20;
            if (v22 != v23)
            {
              int v28 = v23;
              unint64_t v29 = v24;
              do
              {
                uint64_t v30 = *v28++;
                v106[v30].__locale_ = 0;
                --v29;
              }
              while (v29);
              locale = v106[0].__locale_;
            }
            *(_DWORD *)(v19 + 4 * v21) = *(_DWORD *)(v26 + 4 * (void)locale * v25);
            if ((std::locale::__imp *)((char *)v20 + 1) == v11) {
              uint64_t v20 = 0;
            }
            else {
              uint64_t v20 = (std::locale::__imp *)((char *)v20 + 1);
            }
            ++v21;
          }
          while (v21 != v18);
        }
      }
      else if (v18)
      {
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        std::locale v62 = (uint64_t *)*((void *)&v92 + 1);
        uint64_t v61 = (uint64_t *)v93;
        unint64_t v63 = (uint64_t)(v93 - *((void *)&v92 + 1)) >> 3;
        if (v63 <= 1) {
          unint64_t v63 = 1;
        }
        uint64_t v64 = v103;
        uint64_t v65 = *(void *)(v3 + 56);
        uint64_t v66 = *(void *)(a2 + 144);
        do
        {
          v106[0].__locale_ = v59;
          uint64_t v67 = v59;
          if (v61 != v62)
          {
            uint64_t v68 = v62;
            unint64_t v69 = v63;
            do
            {
              uint64_t v70 = *v68++;
              v106[v70].__locale_ = 0;
              --v69;
            }
            while (v69);
            uint64_t v67 = v106[0].__locale_;
          }
          *(_DWORD *)(v19 + 4 * (void)v59 * v65) = *(_DWORD *)(v66 + 4 * (void)v67 * v64);
          if ((std::locale::__imp *)((char *)v59 + 1) == v11) {
            uint64_t v59 = 0;
          }
          else {
            uint64_t v59 = (std::locale::__imp *)((char *)v59 + 1);
          }
          ++v60;
        }
        while (v60 != v18);
      }
    }
    else
    {
      long long v104 = 0uLL;
      long long v105 = 0uLL;
      long long v102 = 0uLL;
      long long v103 = 0uLL;
      long long v100 = 0uLL;
      long long v101 = 0uLL;
      long long v98 = 0uLL;
      long long v99 = 0uLL;
      long long v96 = 0uLL;
      long long v97 = 0uLL;
      long long v94 = 0uLL;
      long long v95 = 0uLL;
      long long v92 = 0uLL;
      long long v93 = 0uLL;
      long long v90 = 0uLL;
      long long v91 = 0uLL;
      long long v88 = 0uLL;
      long long v89 = 0uLL;
      sub_25B439F30((uint64_t)&v91, v5, v6, &v88);
      uint64_t v33 = (std::locale::__imp *)v88;
      if ((void)v88 != *(void *)v5)
      {
        uint64_t v34 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v35 = sub_25B406B20(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v35, (uint64_t)" ", 1);
        char v36 = (void *)MEMORY[0x263F8C0F8];
        char v37 = (void *)std::ostream::operator<<();
        sub_25B406B20(v37, (uint64_t)" ", 1);
        sub_25B406B20(v37, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24)));
        uint64_t v38 = std::locale::use_facet(v106, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
        std::locale::~locale(v106);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
        uint64_t v39 = std::locale::use_facet(v106, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
        std::locale::~locale(v106);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v107 = 0u;
      long long v108 = 0u;
      *(_OWORD *)&v106[0].__locale_ = 0u;
      uint64_t v40 = *(void *)(v3 + 104);
      uint64_t v41 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v40)
        {
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          uint64_t v45 = (uint64_t *)*((void *)&v92 + 1);
          uint64_t v44 = (uint64_t *)v93;
          unint64_t v46 = (uint64_t)(v93 - *((void *)&v92 + 1)) >> 3;
          if (v46 <= 1) {
            unint64_t v46 = 1;
          }
          uint64_t v47 = v103;
          int v48 = *(unsigned __int8 *)(a2 + 136);
          uint64_t v49 = *(void *)(a2 + 144);
          do
          {
            v106[0].__locale_ = v42;
            uint64_t v50 = v42;
            if (v44 != v45)
            {
              uint64_t v51 = v45;
              unint64_t v52 = v46;
              do
              {
                uint64_t v53 = *v51++;
                v106[v53].__locale_ = 0;
                --v52;
              }
              while (v52);
              uint64_t v50 = v106[0].__locale_;
            }
            uint64_t v54 = *(void *)(a2 + 56);
            if (v48) {
              uint64_t v54 = v47;
            }
            *(_DWORD *)(v41 + 4 * v43) = *(_DWORD *)(v49 + 4 * v54 * (void)v50);
            if ((std::locale::__imp *)((char *)v42 + 1) == v33) {
              uint64_t v42 = 0;
            }
            else {
              uint64_t v42 = (std::locale::__imp *)((char *)v42 + 1);
            }
            ++v43;
          }
          while (v43 != v40);
        }
      }
      else if (v40)
      {
        char v74 = 0;
        uint64_t v75 = 0;
        uint64_t v77 = (uint64_t *)*((void *)&v92 + 1);
        uint64_t v76 = (uint64_t *)v93;
        unint64_t v78 = (uint64_t)(v93 - *((void *)&v92 + 1)) >> 3;
        if (v78 <= 1) {
          unint64_t v78 = 1;
        }
        uint64_t v79 = v103;
        uint64_t v80 = *(void *)(v3 + 56);
        int v81 = *(unsigned __int8 *)(a2 + 136);
        uint64_t v82 = *(void *)(a2 + 144);
        do
        {
          v106[0].__locale_ = v74;
          uint64_t v83 = v74;
          if (v76 != v77)
          {
            uint64_t v84 = v77;
            unint64_t v85 = v78;
            do
            {
              uint64_t v86 = *v84++;
              v106[v86].__locale_ = 0;
              --v85;
            }
            while (v85);
            uint64_t v83 = v106[0].__locale_;
          }
          uint64_t v87 = *(void *)(a2 + 56);
          if (v81) {
            uint64_t v87 = v79;
          }
          *(_DWORD *)(v41 + 4 * (void)v74 * v80) = *(_DWORD *)(v82 + 4 * v87 * (void)v83);
          if ((std::locale::__imp *)((char *)v74 + 1) == v33) {
            char v74 = 0;
          }
          else {
            char v74 = (std::locale::__imp *)((char *)v74 + 1);
          }
          ++v75;
        }
        while (v75 != v40);
      }
    }
    return sub_25B3F9500((uint64_t)&v91);
  }
  return result;
}

void sub_25B439EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::locale::~locale((std::locale *)(v7 - 128));
  sub_25B3F9500((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25B439F30(uint64_t a1, long long *a2, long long *a3, void *a4)
{
  long long v6 = *a2;
  long long v7 = a2[2];
  *(_OWORD *)(a1 + 64) = a2[1];
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 48) = v6;
  long long v8 = *a3;
  long long v9 = a3[2];
  *(_OWORD *)(a1 + 112) = a3[1];
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 96) = v8;
  uint64_t v10 = *(void *)a2;
  if (*(void *)a2 != *(void *)a3)
  {
    if (v10 == 1)
    {
      uint64_t v13 = *(void **)(a1 + 8);
      unint64_t v12 = *(void *)(a1 + 16);
      if ((unint64_t)v13 < v12)
      {
        *uint64_t v13 = 0;
        unint64_t v14 = v13 + 1;
LABEL_30:
        *(void *)(a1 + 8) = v14;
        uint64_t v43 = *(void *)a3;
LABEL_38:
        *a4 = v43;
        goto LABEL_39;
      }
      uint64_t v19 = *(void **)a1;
      uint64_t v20 = ((uint64_t)v13 - *(void *)a1) >> 3;
      unint64_t v21 = v20 + 1;
      if (!((unint64_t)(v20 + 1) >> 61))
      {
        uint64_t v22 = v12 - (void)v19;
        if (v22 >> 2 > v21) {
          unint64_t v21 = v22 >> 2;
        }
        BOOL v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v23) {
          unint64_t v24 = v21;
        }
        if (v24)
        {
          unint64_t v24 = (unint64_t)sub_25B3FCAD4(v24);
          uint64_t v19 = *(void **)a1;
          uint64_t v13 = *(void **)(a1 + 8);
        }
        else
        {
          uint64_t v25 = 0;
        }
        uint64_t v40 = (void *)(v24 + 8 * v20);
        unint64_t v41 = v24 + 8 * v25;
        void *v40 = 0;
        unint64_t v14 = v40 + 1;
        while (v13 != v19)
        {
          uint64_t v42 = *--v13;
          *--uint64_t v40 = v42;
        }
        *(void *)a1 = v40;
        *(void *)(a1 + 8) = v14;
        *(void *)(a1 + 16) = v41;
        if (v19) {
          operator delete(v19);
        }
        goto LABEL_30;
      }
LABEL_40:
      sub_25B3FBC4C();
    }
    if (*(void *)a3 != 1)
    {
      uint64_t v26 = (void *)MEMORY[0x263F8C0F8];
      uint64_t v27 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
      int v28 = sub_25B406B20(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/broadcast_helper.hpp", 119);
      sub_25B406B20(v28, (uint64_t)" ", 1);
      unint64_t v29 = (void *)std::ostream::operator<<();
      uint64_t v30 = sub_25B406B20(v29, (uint64_t)" ", 1);
      uint64_t v31 = sub_25B406B20(v30, (uint64_t)"init_internal", 13);
      std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
      uint64_t v32 = std::locale::use_facet(&v47, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
      std::locale::~locale(&v47);
      std::ostream::put();
      std::ostream::flush();
      sub_25B40AF28("err", "cannot broadcast");
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
      uint64_t v33 = std::locale::use_facet(&v47, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
      std::locale::~locale(&v47);
      std::ostream::put();
      std::ostream::flush();
      goto LABEL_39;
    }
    uint64_t v17 = *(char **)(a1 + 32);
    unint64_t v16 = *(void *)(a1 + 40);
    if ((unint64_t)v17 >= v16)
    {
      uint64_t v34 = *(char **)(a1 + 24);
      uint64_t v35 = (v17 - v34) >> 3;
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61) {
        goto LABEL_40;
      }
      uint64_t v37 = v16 - (void)v34;
      if (v37 >> 2 > v36) {
        unint64_t v36 = v37 >> 2;
      }
      BOOL v23 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v23) {
        unint64_t v38 = v36;
      }
      if (v38)
      {
        unint64_t v38 = (unint64_t)sub_25B3FCAD4(v38);
        uint64_t v34 = *(char **)(a1 + 24);
        uint64_t v17 = *(char **)(a1 + 32);
      }
      else
      {
        uint64_t v39 = 0;
      }
      uint64_t v44 = (void *)(v38 + 8 * v35);
      unint64_t v45 = v38 + 8 * v39;
      *uint64_t v44 = 0;
      uint64_t v18 = v44 + 1;
      while (v17 != v34)
      {
        uint64_t v46 = *((void *)v17 - 1);
        v17 -= 8;
        *--uint64_t v44 = v46;
      }
      *(void *)(a1 + 24) = v44;
      *(void *)(a1 + 32) = v18;
      *(void *)(a1 + 40) = v45;
      if (v34) {
        operator delete(v34);
      }
    }
    else
    {
      *(void *)uint64_t v17 = 0;
      uint64_t v18 = v17 + 8;
    }
    *(void *)(a1 + 32) = v18;
    uint64_t v43 = *(void *)a2;
    goto LABEL_38;
  }
  *a4 = v10;
LABEL_39:
  *(void *)(a1 + 144) = 1;
  *(void *)(a1 + 192) = 1;
}

void sub_25B43A294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B43A2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  sub_25B408C3C(a1, a2, 0, *(_DWORD *)a4, *(_DWORD *)(a4 + 4), *(_DWORD *)(a4 + 8));

  return sub_25B4394B4(1u, a1, a2, a3, a5);
}

uint64_t sub_25B43A318(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F1EB8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    unint64_t v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

void sub_25B43A3F0(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  long long v8 = *a2;
  long long v9 = a2[2];
  *(_OWORD *)(a1 + 64) = a2[1];
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v8;
  long long v10 = *a3;
  long long v11 = a3[2];
  *(_OWORD *)(a1 + 112) = a3[1];
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 96) = v10;
  uint64_t v12 = 2;
  uint64_t v13 = (void *)MEMORY[0x263F8C0F8];
  unint64_t v14 = (std::locale::id *)MEMORY[0x263F8C108];
  do
  {
    uint64_t v15 = v12;
    uint64_t v16 = *((void *)a2 + v12);
    uint64_t v17 = *((void *)a3 + v12);
    if (v16 == v17)
    {
      *(void *)(a4 + 8 * v15) = v16;
      goto LABEL_40;
    }
    if (v16 == 1)
    {
      uint64_t v19 = *(uint64_t **)(a1 + 8);
      unint64_t v18 = *(void *)(a1 + 16);
      if ((unint64_t)v19 >= v18)
      {
        unint64_t v24 = *(uint64_t **)a1;
        uint64_t v25 = ((uint64_t)v19 - *(void *)a1) >> 3;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61) {
          goto LABEL_52;
        }
        uint64_t v27 = v18 - (void)v24;
        if (v27 >> 2 > v26) {
          unint64_t v26 = v27 >> 2;
        }
        BOOL v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v28) {
          unint64_t v29 = v26;
        }
        if (v29)
        {
          unint64_t v29 = (unint64_t)sub_25B3FCAD4(v29);
          unint64_t v24 = *(uint64_t **)a1;
          uint64_t v19 = *(uint64_t **)(a1 + 8);
        }
        else
        {
          uint64_t v30 = 0;
        }
        uint64_t v44 = (uint64_t *)(v29 + 8 * v25);
        *uint64_t v44 = v15;
        uint64_t v20 = v44 + 1;
        while (v19 != v24)
        {
          uint64_t v45 = *--v19;
          *--uint64_t v44 = v45;
        }
        *(void *)a1 = v44;
        *(void *)(a1 + 8) = v20;
        *(void *)(a1 + 16) = v29 + 8 * v30;
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *uint64_t v19 = v15;
        uint64_t v20 = v19 + 1;
      }
      *(void *)(a1 + 8) = v20;
      uint64_t v46 = *((void *)a3 + v15);
    }
    else
    {
      if (v17 != 1)
      {
        uint64_t v31 = sub_25B406B20(v13, (uint64_t)"runtime_err in ", 15);
        uint64_t v32 = sub_25B406B20(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/broadcast_helper.hpp", 119);
        sub_25B406B20(v32, (uint64_t)" ", 1);
        uint64_t v33 = (void *)std::ostream::operator<<();
        uint64_t v34 = sub_25B406B20(v33, (uint64_t)" ", 1);
        uint64_t v35 = sub_25B406B20(v34, (uint64_t)"init_internal", 13);
        std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24)));
        unint64_t v36 = std::locale::use_facet(&v57, v14);
        ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
        std::locale::~locale(&v57);
        std::ostream::put();
        std::ostream::flush();
        sub_25B40AF28("err", "cannot broadcast");
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
        uint64_t v37 = std::locale::use_facet(&v57, v14);
        ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
        std::locale::~locale(&v57);
        std::ostream::put();
        std::ostream::flush();
        goto LABEL_40;
      }
      uint64_t v22 = *(char **)(a1 + 32);
      unint64_t v21 = *(void *)(a1 + 40);
      if ((unint64_t)v22 >= v21)
      {
        unint64_t v38 = *(char **)(a1 + 24);
        uint64_t v39 = (v22 - v38) >> 3;
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61) {
LABEL_52:
        }
          sub_25B3FBC4C();
        uint64_t v41 = v21 - (void)v38;
        if (v41 >> 2 > v40) {
          unint64_t v40 = v41 >> 2;
        }
        BOOL v28 = (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v28) {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          unint64_t v42 = (unint64_t)sub_25B3FCAD4(v42);
          unint64_t v38 = *(char **)(a1 + 24);
          uint64_t v22 = *(char **)(a1 + 32);
        }
        else
        {
          uint64_t v43 = 0;
        }
        std::locale v47 = (uint64_t *)(v42 + 8 * v39);
        *std::locale v47 = v15;
        BOOL v23 = v47 + 1;
        while (v22 != v38)
        {
          uint64_t v48 = *((void *)v22 - 1);
          v22 -= 8;
          *--std::locale v47 = v48;
        }
        *(void *)(a1 + 24) = v47;
        *(void *)(a1 + 32) = v23;
        *(void *)(a1 + 40) = v42 + 8 * v43;
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        *(void *)uint64_t v22 = v15;
        BOOL v23 = v22 + 8;
      }
      *(void *)(a1 + 32) = v23;
      uint64_t v46 = *((void *)a2 + v15);
    }
    *(void *)(a4 + 8 * v15) = v46;
LABEL_40:
    uint64_t v12 = v15 - 1;
  }
  while (v15);
  unint64_t v49 = 0;
  uint64_t v50 = a1 + 144;
  do
  {
    *(void *)(v50 + 8 * v49) = 1;
    if (v49 <= 1)
    {
      unint64_t v51 = v49;
      uint64_t v52 = 1;
      do
      {
        v52 *= *(void *)(a1 + 56 + 8 * v51);
        *(void *)(v50 + 8 * v49) = v52;
        ++v51;
      }
      while (v51 != 2);
    }
    ++v49;
  }
  while (v49 != 3);
  unint64_t v53 = 0;
  uint64_t v54 = a1 + 192;
  do
  {
    *(void *)(v54 + 8 * v53) = 1;
    if (v53 <= 1)
    {
      unint64_t v55 = v53;
      uint64_t v56 = 1;
      do
      {
        v56 *= *(void *)(a1 + 104 + 8 * v55);
        *(void *)(v54 + 8 * v53) = v56;
        ++v55;
      }
      while (v55 != 2);
    }
    ++v53;
  }
  while (v53 != 3);
}

void sub_25B43A7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B43A810(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = 0;
  *a3 = 0;
  long long v5 = *(uint64_t **)(result + 24);
  long long v6 = *(void **)(result + 32);
  do
  {
    *(void *)(a4 + v4) = *(void *)(a2 + v4);
    v4 += 8;
  }
  while (v4 != 24);
  if (v6 != v5)
  {
    unint64_t v7 = v6 - v5;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    do
    {
      uint64_t v8 = *v5++;
      *(void *)(a4 + 8 * v8) = 0;
      --v7;
    }
    while (v7);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a3;
  do
  {
    v10 += *(void *)(result + 192 + v9) * *(void *)(a4 + v9);
    *a3 = v10;
    v9 += 8;
  }
  while (v9 != 24);
  return result;
}

void sub_25B43A880()
{
}

char *sub_25B43A898(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      uint64_t v10 = (char *)*((void *)result + 1);
      long long v11 = *(char **)result;
      if (v10 != v9)
      {
        uint64_t v12 = v10 - 32;
        uint64_t v13 = v10 - 32;
        unint64_t v14 = v10 - 32;
        do
        {
          uint64_t v15 = *(void (***)(char *))v14;
          v14 -= 32;
          (*v15)(v13);
          v12 -= 32;
          BOOL v16 = v13 == v9;
          uint64_t v13 = v14;
        }
        while (!v16);
        long long v11 = *(char **)v7;
      }
      *((void *)v7 + 1) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)unint64_t v7 = 0;
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = 0;
    }
    if (a4 >> 59) {
      sub_25B3FBC4C();
    }
    uint64_t v17 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v17 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    BOOL result = sub_25B43AF80(v7, v18);
    uint64_t v19 = (char *)*((void *)v7 + 1);
    if (v6 != a3)
    {
      uint64_t v20 = *((void *)v7 + 1);
      do
      {
        *(void *)uint64_t v19 = &off_2708F1B18;
        long long v21 = *(_OWORD *)(v6 + 8);
        *((_DWORD *)v19 + 6) = *(_DWORD *)(v6 + 24);
        *(_OWORD *)(v19 + 8) = v21;
        v6 += 32;
        v19 += 32;
        v20 += 32;
      }
      while (v6 != a3);
    }
LABEL_28:
    *((void *)v7 + 1) = v19;
    return result;
  }
  uint64_t v22 = (unsigned char *)*((void *)result + 1);
  unint64_t v23 = (v22 - v9) >> 5;
  if (v23 < a4)
  {
    uint64_t v24 = a2 + 32 * v23;
    if (v22 != v9)
    {
      uint64_t v25 = v9 + 8;
      uint64_t v26 = 32 * v23;
      uint64_t v27 = (long long *)(a2 + 8);
      do
      {
        long long v28 = *v27;
        *((_DWORD *)v25 + 4) = *((_DWORD *)v27 + 4);
        *(_OWORD *)uint64_t v25 = v28;
        v25 += 32;
        v27 += 2;
        v26 -= 32;
      }
      while (v26);
      uint64_t v9 = (char *)*((void *)result + 1);
    }
    unint64_t v29 = v9;
    if (v24 != a3)
    {
      uint64_t v30 = v9;
      unint64_t v29 = v9;
      do
      {
        *(void *)unint64_t v29 = &off_2708F1B18;
        long long v31 = *(_OWORD *)(v24 + 8);
        *((_DWORD *)v29 + 6) = *(_DWORD *)(v24 + 24);
        *(_OWORD *)(v29 + 8) = v31;
        v24 += 32;
        v29 += 32;
        v30 += 32;
      }
      while (v24 != a3);
    }
    uint64_t v19 = v29;
    goto LABEL_28;
  }
  if (a2 != a3)
  {
    do
    {
      long long v32 = *(_OWORD *)(v6 + 8);
      *((_DWORD *)v9 + 6) = *(_DWORD *)(v6 + 24);
      *(_OWORD *)(v9 + 8) = v32;
      v6 += 32;
      v9 += 32;
    }
    while (v6 != a3);
    uint64_t v22 = (unsigned char *)*((void *)result + 1);
  }
  if (v22 != v9)
  {
    uint64_t v33 = v22 - 32;
    uint64_t v34 = v22 - 32;
    uint64_t v35 = v22 - 32;
    do
    {
      unint64_t v36 = *(uint64_t (***)(char *))v35;
      v35 -= 32;
      BOOL result = (char *)(*v36)(v34);
      v33 -= 32;
      BOOL v16 = v34 == v9;
      uint64_t v34 = v35;
    }
    while (!v16);
  }
  *((void *)v7 + 1) = v9;
  return result;
}

char *sub_25B43AB10(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      uint64_t v10 = (char *)*((void *)result + 1);
      long long v11 = *(char **)result;
      if (v10 != v9)
      {
        uint64_t v12 = v10 - 16;
        uint64_t v13 = v10 - 16;
        unint64_t v14 = v10 - 16;
        do
        {
          uint64_t v15 = *(void (***)(char *))v14;
          v14 -= 16;
          (*v15)(v13);
          v12 -= 16;
          BOOL v16 = v13 == v9;
          uint64_t v13 = v14;
        }
        while (!v16);
        long long v11 = *(char **)v7;
      }
      *((void *)v7 + 1) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)unint64_t v7 = 0;
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = 0;
    }
    if (a4 >> 60) {
      sub_25B3FBC4C();
    }
    uint64_t v17 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v17 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    BOOL result = sub_25B40F000(v7, v18);
    uint64_t v19 = (_DWORD *)*((void *)v7 + 1);
    if (v6 != a3)
    {
      uint64_t v20 = *((void *)v7 + 1);
      do
      {
        *(void *)uint64_t v19 = &unk_2708F2160;
        int v21 = *(_DWORD *)(v6 + 8);
        *(_DWORD *)((char *)v19 + 11) = *(_DWORD *)(v6 + 11);
        v19[2] = v21;
        v6 += 16;
        v19 += 4;
        v20 += 16;
      }
      while (v6 != a3);
    }
LABEL_28:
    *((void *)v7 + 1) = v19;
    return result;
  }
  uint64_t v22 = (char *)*((void *)result + 1);
  unint64_t v23 = (v22 - v9) >> 4;
  if (v23 < a4)
  {
    uint64_t v24 = a2 + 16 * v23;
    if (v22 != v9)
    {
      uint64_t v25 = v9 + 8;
      uint64_t v26 = 16 * v23;
      uint64_t v27 = (int *)(a2 + 8);
      do
      {
        int v28 = *v27;
        *(_DWORD *)((char *)v25 + 3) = *(int *)((char *)v27 + 3);
        _DWORD *v25 = v28;
        v25 += 4;
        v27 += 4;
        v26 -= 16;
      }
      while (v26);
      uint64_t v9 = (char *)*((void *)result + 1);
    }
    unint64_t v29 = v9;
    if (v24 != a3)
    {
      uint64_t v30 = v9;
      unint64_t v29 = v9;
      do
      {
        *(void *)unint64_t v29 = &unk_2708F2160;
        int v31 = *(_DWORD *)(v24 + 8);
        *(_DWORD *)((char *)v29 + 11) = *(_DWORD *)(v24 + 11);
        v29[2] = v31;
        v24 += 16;
        v29 += 4;
        v30 += 16;
      }
      while (v24 != a3);
    }
    uint64_t v19 = v29;
    goto LABEL_28;
  }
  if (a2 != a3)
  {
    do
    {
      int v32 = *(_DWORD *)(v6 + 8);
      *(_DWORD *)(v9 + 11) = *(_DWORD *)(v6 + 11);
      *((_DWORD *)v9 + 2) = v32;
      v6 += 16;
      v9 += 16;
    }
    while (v6 != a3);
    uint64_t v22 = (char *)*((void *)result + 1);
  }
  if (v22 != v9)
  {
    uint64_t v33 = v22 - 16;
    uint64_t v34 = v22 - 16;
    uint64_t v35 = v22 - 16;
    do
    {
      unint64_t v36 = *(uint64_t (***)(char *))v35;
      v35 -= 16;
      BOOL result = (char *)(*v36)(v34);
      v33 -= 16;
      BOOL v16 = v34 == v9;
      uint64_t v34 = v35;
    }
    while (!v16);
  }
  *((void *)v7 + 1) = v9;
  return result;
}

uint64_t sub_25B43AD88(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1B38;
  uint64_t v4 = (void **)(a1 + 88);
  sub_25B43925C(&v4);
  long long v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 32);
  sub_25B43AEC0(&v4);
  return a1;
}

uint64_t sub_25B43AE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      uint64_t v8 = a1 + v6;
      long long v9 = *(_OWORD *)(a1 + v6 + 8);
      *(void *)(v7 + 21) = *(void *)(a1 + v6 + 21);
      *(_OWORD *)(v7 + 8) = v9;
      if (a1 != a3)
      {
        sub_25B43A898((char *)(v7 + 32), *(void *)(v8 + 32), *(void *)(v8 + 40), (uint64_t)(*(void *)(v8 + 40) - *(void *)(v8 + 32)) >> 5);
        *(_DWORD *)(v7 + 56) = *(_DWORD *)(v8 + 56);
        sub_25B3FE7A8((char *)(v7 + 64), *(char **)(v8 + 64), *(void *)(v8 + 72), (uint64_t)(*(void *)(v8 + 72) - *(void *)(v8 + 64)) >> 2);
        sub_25B43AB10((char *)(v7 + 88), *(void *)(v8 + 88), *(void *)(v8 + 96), (uint64_t)(*(void *)(v8 + 96) - *(void *)(v8 + 88)) >> 4);
      }
      v6 += 112;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_25B43AEC0(void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 32;
      uint64_t v7 = v4 - 32;
      uint64_t v8 = v4 - 32;
      do
      {
        long long v9 = *(void (***)(char *))v8;
        v8 -= 32;
        (*v9)(v7);
        v6 -= 32;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_25B43AF80(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_25B3FBC4C();
  }
  BOOL result = (char *)sub_25B3FBC9C(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void sub_25B43AFC0()
{
}

void sub_25B43AFD8(uint64_t a1)
{
  sub_25B43AD88(a1);

  JUMPOUT(0x261163EE0);
}

uint64_t sub_25B43B014(void *a1, uint64_t a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x249249249249249) {
    sub_25B3FBC4C();
  }
  uint64_t v6 = a1 + 2;
  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - *a1) >> 4)) >= 0x124924924924924) {
    unint64_t v7 = 0x249249249249249;
  }
  else {
    unint64_t v7 = v3;
  }
  int v21 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)sub_25B43B5C4(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v19 = v7;
  *(void *)uint64_t v20 = v7 + 112 * v2;
  *(void *)&v20[16] = v7 + 112 * v8;
  sub_25B43B1C8(*(uint64_t *)v20, a2);
  *(void *)&v20[8] = *(void *)v20 + 112;
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  for (uint64_t i = 112; ; i -= 112)
  {
    uint64_t v12 = *(void *)v20 + i;
    if (v9 + i - 112 == v10) {
      break;
    }
    uint64_t v13 = v9 + i - 224;
    sub_25B43B1C8(v12 - 224, v13);
  }
  uint64_t v14 = a1[2];
  long long v15 = *(_OWORD *)&v20[8];
  uint64_t v18 = *(void *)&v20[8];
  long long v16 = *(_OWORD *)a1;
  *a1 = v12 - 112;
  *(_OWORD *)uint64_t v20 = v16;
  *(_OWORD *)(a1 + 1) = v15;
  *(void *)&v20[16] = v14;
  unint64_t v19 = v16;
  sub_25B43B610((uint64_t)&v19);
  return v18;
}

void sub_25B43B174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_25B43B610((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B43B1C8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F1B38;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 21) = *(void *)(a2 + 21);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_25B43B3F8((char *)(a1 + 32), *(void *)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 5);
  int v5 = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  sub_25B3FCA58((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 2);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_25B43B4AC((char *)(a1 + 88), *(void *)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 4);
  return a1;
}

void sub_25B43B294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 72) = v5;
    operator delete(v5);
  }
  sub_25B43AEC0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B43B2C4(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int *a5)
{
  uint64_t v5 = a2 - a1;
  if (a2 != a1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (unsigned __int128)(v5 * (__int128)0x4924924924924925) >> 64;
    unint64_t v8 = (v7 >> 5) + ((unint64_t)v7 >> 63);
    if (v8 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = (v7 >> 5) + ((unint64_t)v7 >> 63);
    }
    LOBYTE(v5) = 1;
    while (1)
    {
      uint64_t v10 = *(int32x2_t **)(a1 + 112 * v6 + 32);
      __int32 v11 = v10[1].i32[1];
      __int32 v12 = v10[5].i32[1];
      if (v11 <= v12) {
        break;
      }
LABEL_10:
      LOBYTE(v5) = v8 > ++v6;
      if (v6 == v9)
      {
        LOBYTE(v5) = 0;
        return v5 & 1;
      }
    }
    __int32 v13 = v12 + 1;
    while (a3 != v11)
    {
      if (v13 == ++v11) {
        goto LABEL_10;
      }
    }
    float v14 = (float)(int)*(void *)&v10[1];
    float32x2_t v15 = vcvt_f32_s32(vzip2_s32(v10[5], v10[1]));
    float v16 = (float)(int)*(void *)&v10[5];
    BOOL v17 = vabds_f32(v15.f32[0], v15.f32[1]) < 0.000001;
    float v18 = (float)((float)((float)((float)a3 - v15.f32[1]) * (float)(v16 - v14)) / (float)(v15.f32[0] - v15.f32[1]))
        + v14;
    float v19 = (float)(v14 + v16) * 0.5;
    if (!v17) {
      float v19 = v18;
    }
    float v20 = -v19;
    if (v19 >= 0.0) {
      float v20 = v19;
    }
    int v21 = (int)v20;
    float v22 = v20 - (float)(int)v20;
    if (v22 < 0.5) {
      int v23 = v21;
    }
    else {
      int v23 = v21 + 1;
    }
    int v24 = (v21 & 1) + v21;
    if (v22 != 0.5) {
      int v24 = v23;
    }
    if (v19 < 0.0) {
      int v24 = -v24;
    }
    *a5 = v24;
    *a4 = v6;
  }
  return v5 & 1;
}

char *sub_25B43B3F8(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = sub_25B43AF80(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    if (a2 != a3)
    {
      uint64_t v8 = *((void *)v6 + 1);
      do
      {
        *(void *)uint64_t v7 = &off_2708F1B18;
        long long v9 = *(_OWORD *)(a2 + 8);
        *(_DWORD *)(v7 + 24) = *(_DWORD *)(a2 + 24);
        *(_OWORD *)(v7 + 8) = v9;
        a2 += 32;
        v7 += 32;
        v8 += 32;
      }
      while (a2 != a3);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_25B43B498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_25B43B4AC(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = sub_25B40F000(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    if (a2 != a3)
    {
      uint64_t v8 = *((void *)v6 + 1);
      do
      {
        *(void *)uint64_t v7 = &unk_2708F2160;
        int v9 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(v7 + 11) = *(_DWORD *)(a2 + 11);
        *(_DWORD *)(v7 + 8) = v9;
        a2 += 16;
        v7 += 16;
        v8 += 16;
      }
      while (a2 != a3);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_25B43B54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void **sub_25B43B560(void **a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t)*a1;
  unint64_t v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    uint64_t v5 = sub_25B43B014(*a1, a2);
  }
  else
  {
    sub_25B43B1C8((*a1)[1], a2);
    uint64_t v5 = v4 + 112;
    *(void *)(v3 + 8) = v4 + 112;
  }
  *(void *)(v3 + 8) = v5;
  return a1;
}

void sub_25B43B5BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_25B43B5C4(unint64_t a1)
{
  if (a1 >= 0x24924924924924ALL) {
    sub_25B3FA70C();
  }
  return operator new(112 * a1);
}

uint64_t sub_25B43B610(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 112);
    *(void *)(a1 + 16) = i - 112;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_25B43B67C(void *a1)
{
  *a1 = &unk_2708F21F8;
  uint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B43B6E8(void *a1)
{
  *a1 = &unk_2708F21F8;
  uint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

void sub_25B43B734(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  if (a3 >= 2)
  {
    uint64_t v7 = a1;
    if (a3 == 2)
    {
      if (*(_DWORD *)(a2 - 20) < *(_DWORD *)(a1 + 12))
      {
        int v8 = *(_DWORD *)(a1 + 24);
        long long v9 = *(_OWORD *)(a1 + 8);
        int v10 = *(_DWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(a1 + 24) = v10;
        *(_OWORD *)(a2 - 24) = v9;
        *(_DWORD *)(a2 - 8) = v8;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        uint64_t v17 = a1 + 32;
        if (a1 + 32 != a2)
        {
          uint64_t v18 = 0;
          do
          {
            if (*(_DWORD *)(v7 + 44) < *(_DWORD *)(v7 + 12))
            {
              uint64_t v19 = 0;
              long long v42 = *(_OWORD *)(v7 + 40);
              int v43 = *(_DWORD *)(v7 + 56);
              while (1)
              {
                uint64_t v20 = v19;
                uint64_t v21 = v7 + v19;
                *(_OWORD *)(v21 + 40) = *(_OWORD *)(v21 + 8);
                *(_DWORD *)(v21 + 56) = *(_DWORD *)(v21 + 24);
                if (v18 == v20) {
                  break;
                }
                int v22 = *(_DWORD *)(v21 - 20);
                uint64_t v19 = v20 - 32;
                if (SDWORD1(v42) >= v22)
                {
                  uint64_t v23 = v7 + v20 + 8;
                  goto LABEL_20;
                }
              }
              uint64_t v23 = v21 + 8;
LABEL_20:
              *(_DWORD *)(v23 + 16) = v43;
              *(_OWORD *)uint64_t v23 = v42;
            }
            v17 += 32;
            v7 += 32;
            v18 -= 32;
          }
          while (v17 != a2);
        }
      }
    }
    else
    {
      __int32 v13 = (_DWORD *)a4;
      unint64_t v14 = a3 >> 1;
      uint64_t v15 = a1 + 32 * (a3 >> 1);
      unint64_t v16 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v24 = sub_25B43BCC4(a1, v15, v16, a4, a6);
        uint64_t v25 = (uint64_t)&v13[8 * v14];
        sub_25B43BCC4(v7 + 32 * (a3 >> 1), a2, a3 - (a3 >> 1), v25, v24);
        uint64_t v26 = v7 + 8;
        uint64_t v27 = v25;
        int v28 = v13;
        unint64_t v29 = &v13[8 * a3];
        while ((_DWORD *)v27 != v29)
        {
          if (*(_DWORD *)(v27 + 12) >= v28[3])
          {
            long long v31 = *(_OWORD *)(v28 + 2);
            *(_DWORD *)(v26 + 16) = v28[6];
            *(_OWORD *)uint64_t v26 = v31;
            v28 += 8;
          }
          else
          {
            long long v30 = *(_OWORD *)(v27 + 8);
            *(_DWORD *)(v26 + 16) = *(_DWORD *)(v27 + 24);
            *(_OWORD *)uint64_t v26 = v30;
            v27 += 32;
          }
          v26 += 32;
          if (v28 == (_DWORD *)v25)
          {
            if ((_DWORD *)v27 != v29)
            {
              uint64_t v32 = 0;
              do
              {
                uint64_t v33 = v26 + v32;
                long long v34 = *(_OWORD *)(v27 + v32 + 8);
                *(_DWORD *)(v33 + 16) = *(_DWORD *)(v27 + v32 + 24);
                *(_OWORD *)uint64_t v33 = v34;
                v32 += 32;
              }
              while ((_DWORD *)(v27 + v32) != v29);
            }
            goto LABEL_36;
          }
        }
        if (v28 != (_DWORD *)v25)
        {
          uint64_t v35 = 0;
          do
          {
            uint64_t v36 = v26 + v35 * 4;
            long long v37 = *(_OWORD *)&v28[v35 + 2];
            *(_DWORD *)(v36 + 16) = v28[v35 + 6];
            *(_OWORD *)uint64_t v36 = v37;
            v35 += 8;
          }
          while (&v28[v35] != (_DWORD *)v25);
        }
LABEL_36:
        if (v13)
        {
          unint64_t v38 = a3;
          uint64_t v39 = v13;
          unint64_t v40 = (void (***)(void))v13;
          do
          {
            uint64_t v41 = (void (**)(_DWORD *))*v40;
            v40 += 4;
            (*v41)(v13);
            v39 += 8;
            __int32 v13 = v40;
            --v38;
          }
          while (v38);
        }
      }
      else
      {
        sub_25B43B734(a1, v15, v16, a4, a5);
        sub_25B43B734(v7 + 32 * (a3 >> 1), a2, a3 - (a3 >> 1), v13, a5);
        sub_25B43C044(v7, v7 + 32 * (a3 >> 1), a2, a3 >> 1, a3 - (a3 >> 1), v13, a5);
      }
    }
  }
}

void sub_25B43BA58(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    unint64_t v4 = v1;
    uint64_t v5 = v1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 4;
      (*v6)(v1);
      v4 += 4;
      uint64_t v1 = v5;
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B43BAA8(uint64_t a1)
{
  *(void *)a1 = &unk_2708F13E8;
  uint64_t v2 = *(void ***)(a1 + 80);
  if (v2)
  {
    uint64_t v3 = *(void ***)(a1 + 88);
    unint64_t v4 = *(void **)(a1 + 80);
    if (v3 != v2)
    {
      do
      {
        v3 -= 3;
        long long v9 = v3;
        sub_25B43BBC8(&v9);
      }
      while (v3 != v2);
      unint64_t v4 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 88) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 48);
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      sub_25B43BB78((uint64_t)(v5 + 2));
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v7) {
    operator delete(v7);
  }
  long long v9 = (void **)(a1 + 8);
  sub_25B43AEC0(&v9);
  return a1;
}

void sub_25B43BB78(uint64_t a1)
{
  sub_25B43AD88(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_25B43BBC8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 40;
      uint64_t v7 = v4 - 40;
      int v8 = v4 - 40;
      do
      {
        long long v9 = *(void (***)(char *))v8;
        v8 -= 40;
        (*v9)(v7);
        v6 -= 40;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B43BC88(uint64_t a1)
{
  sub_25B43BAA8(a1);

  JUMPOUT(0x261163EE0);
}

__n128 sub_25B43BCC4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, __n128 result)
{
  if (a3)
  {
    uint64_t v5 = a4;
    uint64_t v8 = a1;
    if (a3 == 2)
    {
      int v9 = *(_DWORD *)(a2 - 20);
      int v10 = *(_DWORD *)(a1 + 12);
      *(void *)a4 = &off_2708F1B18;
      __int32 v11 = (_OWORD *)(a4 + 8);
      __int32 v12 = (void *)(a4 + 32);
      if (v9 >= v10)
      {
        long long v25 = *(_OWORD *)(a1 + 8);
        *(_DWORD *)(a4 + 24) = *(_DWORD *)(a1 + 24);
        *__int32 v11 = v25;
        *__int32 v12 = &off_2708F1B18;
        BOOL result = *(__n128 *)(a2 - 24);
        int v14 = *(_DWORD *)(a2 - 8);
      }
      else
      {
        long long v13 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(a4 + 24) = *(_DWORD *)(a2 - 8);
        *__int32 v11 = v13;
        *__int32 v12 = &off_2708F1B18;
        BOOL result = *(__n128 *)(a1 + 8);
        int v14 = *(_DWORD *)(a1 + 24);
      }
      *(_DWORD *)(a4 + 56) = v14;
      *(__n128 *)(a4 + 40) = result;
    }
    else if (a3 == 1)
    {
      *(void *)a4 = &off_2708F1B18;
      BOOL result = *(__n128 *)(a1 + 8);
      *(_DWORD *)(a4 + 24) = *(_DWORD *)(a1 + 24);
      *(__n128 *)(a4 + 8) = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      uint64_t v26 = a1 + 32 * (a3 >> 1);
      sub_25B43B734(a1, v26, a3 >> 1, a4, a3 >> 1);
      sub_25B43B734(v8 + 32 * (a3 >> 1), a2, a3 - (a3 >> 1), v5 + 32 * (a3 >> 1), a3 - (a3 >> 1));
      uint64_t v27 = v5;
      uint64_t v28 = v8 + 32 * (a3 >> 1);
      while (v28 != a2)
      {
        int v29 = *(_DWORD *)(v28 + 12);
        int v30 = *(_DWORD *)(v8 + 12);
        *(void *)uint64_t v5 = &off_2708F1B18;
        long long v31 = (__n128 *)(v5 + 8);
        if (v29 >= v30)
        {
          BOOL result = *(__n128 *)(v8 + 8);
          *(_DWORD *)(v5 + 24) = *(_DWORD *)(v8 + 24);
          __n128 *v31 = result;
          v8 += 32;
        }
        else
        {
          BOOL result = *(__n128 *)(v28 + 8);
          *(_DWORD *)(v5 + 24) = *(_DWORD *)(v28 + 24);
          __n128 *v31 = result;
          v28 += 32;
        }
        v5 += 32;
        v27 += 32;
        if (v8 == v26)
        {
          if (v28 != a2)
          {
            uint64_t v32 = 0;
            do
            {
              uint64_t v33 = v5 + v32;
              *(void *)uint64_t v33 = &off_2708F1B18;
              BOOL result = *(__n128 *)(v28 + v32 + 8);
              *(_DWORD *)(v33 + 24) = *(_DWORD *)(v28 + v32 + 24);
              *(__n128 *)(v33 + 8) = result;
              v32 += 32;
            }
            while (v28 + v32 != a2);
          }
          return result;
        }
      }
      if (v8 != v26)
      {
        uint64_t v34 = 0;
        do
        {
          uint64_t v35 = v5 + v34;
          *(void *)uint64_t v35 = &off_2708F1B18;
          BOOL result = *(__n128 *)(v8 + v34 + 8);
          *(_DWORD *)(v35 + 24) = *(_DWORD *)(v8 + v34 + 24);
          *(__n128 *)(v35 + 8) = result;
          v34 += 32;
          v27 += 32;
        }
        while (v8 + v34 != v26);
      }
    }
    else if (a1 != a2)
    {
      *(void *)a4 = &off_2708F1B18;
      BOOL result = *(__n128 *)(a1 + 8);
      *(_DWORD *)(a4 + 24) = *(_DWORD *)(a1 + 24);
      *(__n128 *)(a4 + 8) = result;
      uint64_t v15 = a1 + 32;
      if (a1 + 32 != a2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = a4;
        do
        {
          uint64_t v18 = v15;
          uint64_t v19 = v17 + 32;
          int v20 = *(_DWORD *)(v8 + 44);
          int v21 = *(_DWORD *)(v17 + 12);
          *(void *)(v17 + 32) = &off_2708F1B18;
          uint64_t v22 = v17 + 40;
          if (v20 < v21)
          {
            *(_OWORD *)uint64_t v22 = *(_OWORD *)(v17 + 8);
            *(_DWORD *)(v17 + 56) = *(_DWORD *)(v17 + 24);
            uint64_t v23 = a4;
            if (v17 != a4)
            {
              uint64_t v24 = v16;
              while (1)
              {
                uint64_t v23 = a4 + v24;
                if (*(_DWORD *)(v8 + 44) >= *(_DWORD *)(a4 + v24 - 20)) {
                  break;
                }
                *(_OWORD *)(v23 + 8) = *(_OWORD *)(v23 - 24);
                *(_DWORD *)(v23 + 24) = *(_DWORD *)(v23 - 8);
                v24 -= 32;
                if (!v24)
                {
                  uint64_t v23 = a4;
                  break;
                }
              }
            }
            uint64_t v22 = v23 + 8;
          }
          BOOL result = *(__n128 *)(v8 + 40);
          uint64_t v15 = v18 + 32;
          *(_DWORD *)(v22 + 16) = *(_DWORD *)(v8 + 56);
          *(__n128 *)uint64_t v22 = result;
          v16 += 32;
          uint64_t v17 = v19;
          uint64_t v8 = v18;
        }
        while (v18 + 32 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_25B43C044(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    uint64_t v10 = result;
    while (v8 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      while (*(_DWORD *)(a2 + 12) >= *(_DWORD *)(v10 + 12))
      {
        v10 += 32;
        if (!--a4) {
          return result;
        }
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          int v81 = *(_DWORD *)(v10 + 24);
          long long v77 = *(_OWORD *)(v10 + 8);
          long long v64 = *(_OWORD *)(a2 + 8);
          *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 + 24);
          *(_OWORD *)(v10 + 8) = v64;
          *(_OWORD *)(a2 + 8) = v77;
          *(_DWORD *)(a2 + 24) = v81;
          return result;
        }
        if (a4 >= 0) {
          uint64_t v21 = a4;
        }
        else {
          uint64_t v21 = a4 + 1;
        }
        uint64_t v20 = v21 >> 1;
        uint64_t v14 = v10 + 32 * (v21 >> 1);
        uint64_t v13 = a2;
        if (a2 != a3)
        {
          unint64_t v22 = (a3 - a2) >> 5;
          uint64_t v13 = a2;
          do
          {
            unint64_t v23 = v22 >> 1;
            unint64_t v24 = v13 + 32 * (v22 >> 1);
            int v25 = *(_DWORD *)(v24 + 12);
            uint64_t v26 = v24 + 32;
            v22 += ~(v22 >> 1);
            if (v25 < *(_DWORD *)(v14 + 12)) {
              uint64_t v13 = v26;
            }
            else {
              unint64_t v22 = v23;
            }
          }
          while (v22);
        }
        uint64_t v12 = (v13 - a2) >> 5;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v11 = v8;
        }
        else {
          uint64_t v11 = v8 + 1;
        }
        uint64_t v12 = v11 >> 1;
        uint64_t v13 = a2 + 32 * (v11 >> 1);
        uint64_t v14 = a2;
        if (a2 != v10)
        {
          unint64_t v15 = (a2 - v10) >> 5;
          uint64_t v14 = v10;
          do
          {
            unint64_t v16 = v15 >> 1;
            unint64_t v17 = v14 + 32 * (v15 >> 1);
            int v18 = *(_DWORD *)(v17 + 12);
            uint64_t v19 = v17 + 32;
            v15 += ~(v15 >> 1);
            if (*(_DWORD *)(v13 + 12) < v18) {
              unint64_t v15 = v16;
            }
            else {
              uint64_t v14 = v19;
            }
          }
          while (v15);
        }
        uint64_t v20 = (v14 - v10) >> 5;
      }
      if (v14 == a2)
      {
        uint64_t v28 = v13;
      }
      else if (v13 == a2)
      {
        uint64_t v28 = v14;
      }
      else
      {
        int v78 = *(_DWORD *)(v14 + 24);
        long long v74 = *(_OWORD *)(v14 + 8);
        long long v27 = *(_OWORD *)(a2 + 8);
        *(_DWORD *)(v14 + 24) = *(_DWORD *)(a2 + 24);
        *(_OWORD *)(v14 + 8) = v27;
        *(_OWORD *)(a2 + 8) = v74;
        *(_DWORD *)(a2 + 24) = v78;
        uint64_t v28 = v14 + 32;
        for (uint64_t i = a2 + 32; i != v13; i += 32)
        {
          if (v28 == a2) {
            a2 = i;
          }
          int v79 = *(_DWORD *)(v28 + 24);
          long long v75 = *(_OWORD *)(v28 + 8);
          long long v30 = *(_OWORD *)(i + 8);
          *(_DWORD *)(v28 + 24) = *(_DWORD *)(i + 24);
          *(_OWORD *)(v28 + 8) = v30;
          *(_OWORD *)(i + 8) = v75;
          *(_DWORD *)(i + 24) = v79;
          v28 += 32;
        }
        if (v28 != a2)
        {
          uint64_t v31 = v28;
          uint64_t v32 = a2;
          do
          {
            while (1)
            {
              int v80 = *(_DWORD *)(v31 + 24);
              long long v76 = *(_OWORD *)(v31 + 8);
              long long v33 = *(_OWORD *)(v32 + 8);
              *(_DWORD *)(v31 + 24) = *(_DWORD *)(v32 + 24);
              *(_OWORD *)(v31 + 8) = v33;
              *(_DWORD *)(v32 + 24) = v80;
              *(_OWORD *)(v32 + 8) = v76;
              v31 += 32;
              v32 += 32;
              if (v32 == v13) {
                break;
              }
              if (v31 == a2) {
                a2 = v32;
              }
            }
            uint64_t v32 = a2;
          }
          while (v31 != a2);
        }
      }
      a4 -= v20;
      v8 -= v12;
      if (v20 + v12 >= a4 + v8)
      {
        uint64_t v38 = v13;
        uint64_t v39 = v20;
        uint64_t v40 = v8;
        uint64_t v41 = a6;
        BOOL result = sub_25B43C044(v28, v38, a3, a4, v40, a6, a7);
        a6 = v41;
        a2 = v14;
        uint64_t v8 = v12;
        a4 = v39;
        a3 = v28;
        if (!v12) {
          return result;
        }
      }
      else
      {
        uint64_t v34 = v10;
        uint64_t v35 = v14;
        uint64_t v36 = a3;
        long long v37 = a6;
        BOOL result = sub_25B43C044(v34, v35, v28, v20, v12, a6, a7);
        a3 = v36;
        a6 = v37;
        uint64_t v10 = v28;
        a2 = v13;
        if (!v8) {
          return result;
        }
      }
    }
    if (a4 <= v8)
    {
      if (v10 == a2) {
        return result;
      }
      uint64_t v55 = 0;
      uint64_t v43 = 0;
      do
      {
        uint64_t v56 = &a6[v55];
        *(void *)uint64_t v56 = &off_2708F1B18;
        long long v57 = *(_OWORD *)(v10 + v55 * 4 + 8);
        v56[6] = *(_DWORD *)(v10 + v55 * 4 + 24);
        *(_OWORD *)(v56 + 2) = v57;
        ++v43;
        v55 += 8;
      }
      while (v10 + v55 * 4 != a2);
      int v58 = &a6[v55];
      if (&a6[v55] != a6)
      {
        uint64_t v59 = v58 - 8;
        uint64_t v60 = v10 + 8;
        uint64_t v61 = a6;
        while (a2 != a3)
        {
          if (*(_DWORD *)(a2 + 12) >= v61[3])
          {
            long long v63 = *(_OWORD *)(v61 + 2);
            *(_DWORD *)(v60 + 16) = v61[6];
            *(_OWORD *)uint64_t v60 = v63;
            v61 += 8;
          }
          else
          {
            long long v62 = *(_OWORD *)(a2 + 8);
            *(_DWORD *)(v60 + 16) = *(_DWORD *)(a2 + 24);
            *(_OWORD *)uint64_t v60 = v62;
            a2 += 32;
          }
          v60 += 32;
          if (v61 == v58) {
            goto LABEL_88;
          }
        }
        uint64_t v68 = 0;
        do
        {
          uint64_t v69 = v60 + v68 * 4;
          long long v70 = *(_OWORD *)&v61[v68 + 2];
          *(_DWORD *)(v69 + 16) = v61[v68 + 6];
          *(_OWORD *)uint64_t v69 = v70;
          v68 += 8;
        }
        while (&v61[v68 - 8] != v59);
      }
    }
    else
    {
      if (a3 == a2) {
        return result;
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      do
      {
        uint64_t v44 = &a6[v42];
        *(void *)uint64_t v44 = &off_2708F1B18;
        long long v45 = *(_OWORD *)(a2 + v42 * 4 + 8);
        v44[6] = *(_DWORD *)(a2 + v42 * 4 + 24);
        *(_OWORD *)(v44 + 2) = v45;
        ++v43;
        v42 += 8;
      }
      while (a2 + v42 * 4 != a3);
      uint64_t v46 = &a6[v42];
      if (v46 != a6)
      {
        uint64_t v47 = a3 - 24;
        while (a2 != v10)
        {
          int v48 = *(v46 - 5);
          int v49 = *(_DWORD *)(a2 - 20);
          BOOL v50 = v48 < v49;
          if (v48 >= v49) {
            unint64_t v51 = v46;
          }
          else {
            unint64_t v51 = (_DWORD *)a2;
          }
          if (v50) {
            uint64_t v52 = -1;
          }
          else {
            uint64_t v52 = 0;
          }
          a2 += 32 * v52;
          if (v50) {
            uint64_t v53 = 0;
          }
          else {
            uint64_t v53 = -1;
          }
          long long v54 = *(_OWORD *)(v51 - 6);
          v46 += 8 * v53;
          *(_DWORD *)(v47 + 16) = *(v51 - 2);
          *(_OWORD *)uint64_t v47 = v54;
          v47 -= 32;
          if (v46 == a6) {
            goto LABEL_88;
          }
        }
        uint64_t v65 = 0;
        do
        {
          uint64_t v66 = v47 + v65 * 4;
          long long v67 = *(_OWORD *)&v46[v65 - 6];
          *(_DWORD *)(v66 + 16) = v46[v65 - 2];
          *(_OWORD *)uint64_t v66 = v67;
          v65 -= 8;
        }
        while (&v46[v65] != a6);
      }
    }
LABEL_88:
    if (a6)
    {
      uint64_t v71 = (uint64_t (***)(void, void))a6;
      uint64_t v72 = a6;
      do
      {
        uint64_t v73 = *(uint64_t (***)(_DWORD *, uint64_t))v72;
        v72 += 8;
        BOOL result = (*v73)(a6, a2);
        v71 += 4;
        a6 = v72;
        --v43;
      }
      while (v43);
    }
  }
  return result;
}

void sub_25B43C590(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = a2 + 8;
  v20[0] = 0;
  v20[1] = v6;
  long long v21 = xmmword_25B5F1140;
  uint64_t v22 = *(void *)(v5 + 8);
  uint64_t v23 = 1;
  sub_25B4394B4(0, v5, (uint64_t)v20, (uint64_t)&v16, a3);
  sub_25B43CB40((uint64_t)v14, a2, (uint64_t)v20);
  uint64_t v7 = v16;
  if (v17 - (void)v16 != 8)
  {
    uint64_t v8 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    int v9 = sub_25B406B20(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v9, (uint64_t)" ", 1);
    uint64_t v10 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v11 = (void *)std::ostream::operator<<();
    sub_25B406B20(v11, (uint64_t)" ", 1);
    sub_25B406B20(v11, (uint64_t)"slice", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    uint64_t v12 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
    LODWORD(v19.__locale_) = 0;
    sub_25B435E20("err");
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    uint64_t v13 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
  }
  sub_25B43CCC0(a1, (uint64_t)v14, *v7);
  v14[0] = &unk_2708F21F8;
  if (v15) {
    sub_25B404120(v15);
  }
  operator delete(v7);
}

void sub_25B43C818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  if (v25) {
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B43C884(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 32);
    *(void *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unint64_t **sub_25B43C8F0(unint64_t **a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  uint64_t v6 = *a1 + 2;
  if (v5 >= *v6)
  {
    uint64_t v9 = (uint64_t)(v5 - *v4) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      sub_25B3FBC4C();
    }
    uint64_t v11 = *v6 - *v4;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    v24[4] = v6;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_25B3FBC9C(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12 + 32 * v9;
    *(void *)unint64_t v14 = &off_2708F1B18;
    long long v15 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(v14 + 24) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)(v14 + 8) = v15;
    unint64_t v17 = *v4;
    unint64_t v16 = v4[1];
    if (v16 == *v4)
    {
      unint64_t v21 = v4[1];
      unint64_t v19 = v12 + 32 * v9;
    }
    else
    {
      unint64_t v18 = v14 - 32;
      unint64_t v19 = v12 + 32 * v9;
      do
      {
        *(void *)(v19 - 32) = &off_2708F1B18;
        v19 -= 32;
        long long v20 = *(_OWORD *)(v16 - 24);
        *(_DWORD *)(v19 + 24) = *(_DWORD *)(v16 - 8);
        *(_OWORD *)(v19 + 8) = v20;
        v18 -= 32;
        v16 -= 32;
      }
      while (v16 != v17);
      unint64_t v21 = *v4;
      unint64_t v16 = v4[1];
    }
    unint64_t v8 = v14 + 32;
    unint64_t *v4 = v19;
    v24[0] = v21;
    v24[1] = v21;
    v4[1] = v14 + 32;
    v24[2] = v16;
    unint64_t v22 = v4[2];
    v4[2] = v12 + 32 * v13;
    v24[3] = v22;
    sub_25B43C884((uint64_t)v24);
  }
  else
  {
    *(void *)unint64_t v5 = &off_2708F1B18;
    long long v7 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(v5 + 24) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)(v5 + 8) = v7;
    unint64_t v8 = v5 + 32;
  }
  v4[1] = v8;
  return a1;
}

void sub_25B43CA88(void *a1)
{
  *a1 = &unk_2708F27E8;
  uint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B43CAF4(void *a1)
{
  *a1 = &unk_2708F27E8;
  uint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

void sub_25B43CB40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  *(void *)a1 = &unk_2708F21F8;
  *(void *)(a1 + 120) = 0;
  unint64_t v5 = (void **)(a1 + 120);
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 257;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  char v6 = 1;
  uint64_t v7 = *(void *)(a1 + 112);
  do
  {
    unint64_t v8 = (uint64_t *)(a3 + 24 * v4);
    uint64_t v9 = *v8;
    float v10 = (float)(unint64_t)(v8[1] - *v8);
    unint64_t v11 = v8[2];
    *(void *)(a1 + 8 + 8 * v4) = vcvtps_u32_f32(v10 / (float)v11);
    *(void *)(a1 + 56 + 8 * v4) *= v11;
    LOBYTE(v11) = v6;
    v7 += *(void *)(a2 + 56 + 8 * v4) * v9;
    uint64_t v4 = 1;
    char v6 = 0;
  }
  while ((v11 & 1) != 0);
  *(void *)(a1 + 104) = *(void *)(a1 + 16) * *(void *)(a1 + 8);
  *(void *)(a1 + 112) = v7;
  uint64_t v13 = *(void **)(a2 + 120);
  uint64_t v12 = *(void *)(a2 + 128);
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    unint64_t v14 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v13;
    *(void *)(a1 + 128) = v12;
    if (v14)
    {
      sub_25B404120(v14);
      uint64_t v13 = *v5;
    }
  }
  else
  {
    *(void *)(a1 + 120) = v13;
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v15 = 0;
  *(void *)(a1 + 144) = *v13 + 4 * *(void *)(a1 + 112);
  *(unsigned char *)(a1 + 137) = 0;
  uint64_t v16 = 1;
  while (1)
  {
    uint64_t v17 = *(void *)(a1 + v15 + 16);
    if (v17 != 1) {
      break;
    }
LABEL_11:
    v15 -= 8;
    if (v15 == -16)
    {
      char v18 = 1;
      goto LABEL_14;
    }
  }
  if (*(void *)(a1 + v15 + 64) == v16)
  {
    v16 *= v17;
    goto LABEL_11;
  }
  char v18 = 0;
LABEL_14:
  *(unsigned char *)(a1 + 136) = v18;
}

void sub_25B43CCC0(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_2708F27E8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  unint64_t v5 = (void **)(a1 + 120);
  *(_WORD *)(a1 + 136) = 257;
  uint64_t v6 = a2 + 8;
  *(void *)(a1 + 128) = 0;
  sub_25B407708((uint64_t)&v13, a2 + 8, a3);
  uint64_t v7 = v13;
  *(void *)(a1 + 8) = *(void *)(v6 + 8 * v13);
  *(void *)(a1 + 56) = *(void *)(a2 + 8 * v7 + 56);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  unint64_t v8 = *(void **)(a2 + 120);
  uint64_t v9 = *(void *)(a2 + 128);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  float v10 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = v8;
  *(void *)(a1 + 128) = v9;
  if (v10)
  {
    sub_25B404120(v10);
    unint64_t v8 = *v5;
  }
  *(void *)(a1 + 144) = *v8 + 4 * *(void *)(a1 + 112);
  *(unsigned char *)(a1 + 137) = 0;
  BOOL v12 = *(void *)(a1 + 8) == 1 || *(void *)(a1 + 56) == 1;
  *(unsigned char *)(a1 + 136) = v12;
}

void sub_25B43CDD0(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[16];
  if (v4) {
    sub_25B404120(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B43CFF4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_25B43D088(&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B43D088(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_25B413C78(&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B43D1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)RSOrthographicDetector;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_25B43E1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43)
{
  _Unwind_Resume(a1);
}

void sub_25B43E334(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = v3 - *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
  if (v5 > 5)
  {
    if (v4 != 144)
    {
      uint64_t v14 = v2 + 144;
      if (v3 != v2 + 144)
      {
        uint64_t v15 = a1[1];
        do
        {
          uint64_t v17 = *(void **)(v15 - 24);
          v15 -= 24;
          uint64_t v16 = v17;
          if (v17)
          {
            *(void *)(v3 - 16) = v16;
            operator delete(v16);
          }
          uint64_t v3 = v15;
        }
        while (v15 != v14);
      }
      a1[1] = v14;
    }
  }
  else
  {
    uint64_t v6 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v6 - v3) >> 3) >= 6 - v5)
    {
      size_t v18 = 24 * ((120 - v4) / 0x18uLL) + 24;
      bzero((void *)a1[1], v18);
      a1[1] = v3 + v18;
    }
    else
    {
      v19[4] = a1 + 2;
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v2) >> 3);
      uint64_t v8 = 2 * v7;
      if (2 * v7 <= 6) {
        uint64_t v8 = 6;
      }
      if (v7 >= 0x555555555555555) {
        unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v9 = v8;
      }
      float v10 = (char *)sub_25B413D74(v9);
      unint64_t v11 = &v10[8 * (v4 >> 3)];
      v19[0] = v10;
      v19[1] = v11;
      v19[3] = &v10[24 * v12];
      size_t v13 = 24 * ((120 - v4) / 0x18uLL) + 24;
      bzero(&v10[24 * v5], v13);
      v19[2] = &v11[v13];
      sub_25B43EA54(a1, v19);
      sub_25B43EAC4((uint64_t)v19);
    }
  }
}

void sub_25B43E4C0(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[4 * a2];
    }
  }
  else
  {
    unint64_t v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 2)
    {
      uint64_t v23 = &v5[4 * (a2 - v7)];
      uint64_t v24 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)unint64_t v5 = *a3;
        v5 += 4;
        v24 -= 4;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 62) {
        sub_25B3FBC4C();
      }
      unint64_t v10 = v9 - v6;
      unint64_t v11 = (v9 - v6) >> 1;
      if (v11 <= a2) {
        unint64_t v11 = a2;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      size_t v13 = (char *)sub_25B3FBC64(v12);
      uint64_t v15 = &v13[4 * v7];
      uint64_t v16 = &v13[4 * a2];
      uint64_t v17 = 4 * a2 - 4 * v7;
      size_t v18 = v15;
      do
      {
        *(_DWORD *)size_t v18 = *a3;
        v18 += 4;
        v17 -= 4;
      }
      while (v17);
      unint64_t v19 = &v13[4 * v14];
      long long v20 = *a1;
      for (uint64_t i = a1[1]; i != v20; i -= 4)
      {
        int v22 = *((_DWORD *)i - 1);
        *((_DWORD *)v15 - 1) = v22;
        v15 -= 4;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

void sub_25B43E5EC(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    unint64_t v19 = &v3[4 * a2];
    goto LABEL_15;
  }
  unint64_t v6 = a2 - v5;
  unint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    unint64_t v19 = &v4[4 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62) {
    sub_25B3FBC4C();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 1;
  if (v8 >> 1 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)sub_25B3FBC64(v10);
  unint64_t v12 = *a1;
  size_t v13 = a1[1];
  uint64_t v14 = &v11[4 * v5];
  uint64_t v16 = &v11[4 * v15];
  bzero(v14, 4 * v6);
  uint64_t v17 = &v14[4 * v6];
  while (v13 != v12)
  {
    int v18 = *((_DWORD *)v13 - 1);
    v13 -= 4;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

char *sub_25B43E700(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = sub_25B3FCA18(v7, v11);
    size_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  unint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    unint64_t v19 = v16;
LABEL_17:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *unint64_t v12 = &v9[v17];
  return result;
}

char *sub_25B43E7FC(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_25B3FBC4C();
  }
  uint64_t v3 = 3 * a2;
  BOOL result = (char *)operator new(24 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

void *sub_25B43E84C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_25B413D24(result, a4);
    BOOL result = sub_25B43E938((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_25B43E8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_25B413C78(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_25B43E8D4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void ****)(a1 + 16);
    uint64_t v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 3;
      unint64_t v5 = v3;
      sub_25B413C78(&v5);
    }
  }
  return a1;
}

void *sub_25B43E938(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_25B3FCA58(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_25B43E9EC((uint64_t)v8);
  return v4;
}

void sub_25B43E9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_25B43E9EC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 24);
        v4 -= 24;
        unint64_t v5 = v6;
        if (v6)
        {
          *(void *)(v2 - 16) = v5;
          operator delete(v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void *sub_25B43EA54(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 24) = 0;
    *(void *)(v4 - 16) = 0;
    v4 -= 24;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = v2[2];
    void *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  *BOOL result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_25B43EAC4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

id sub_25B43EB28(uint64_t a1, void *a2, void *a3, void *a4, void *a5, char a6)
{
  uint64_t v231 = *MEMORY[0x263EF8340];
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  if (a1)
  {
    *(unsigned char *)(a1 + 1432) = a6;
    id v190 = v11;
    id v192 = v12;
    id v193 = v13;
    id v191 = v14;
    objc_msgSend_removeAllObjects(*(void **)(a1 + 1376), v15, v16);
    objc_msgSend_removeAllObjects(*(void **)(a1 + 1384), v17, v18);
    objc_msgSend_removeAllObjects(*(void **)(a1 + 1392), v19, v20);
    objc_msgSend_removeAllObjects(*(void **)(a1 + 1400), v21, v22);
    *(void *)&src[0] = 0x200000001;
    DWORD2(src[0]) = 4;
    sub_25B43E700((char *)(a1 + 1320), (char *)src, (uint64_t)src + 12, 3uLL);
    unsigned int v25 = 0;
    uint64_t v195 = a1;
    *(void *)(a1 + 1424) = &unk_25B5F2004;
    while (objc_msgSend_count(v192, v23, v24) > (unint64_t)v25)
    {
      long long v27 = objc_msgSend_objectAtIndexedSubscript_(v192, v26, v25);
      sub_25B43F68C(a1, v27, v190, v191);

      ++v25;
    }
    *(void *)&src[0] = 0x400000001;
    sub_25B43E700((char *)(a1 + 1320), (char *)src, (uint64_t)src + 8, 2uLL);
    unsigned int v30 = 0;
    *(void *)(a1 + 1424) = &unk_25B5F2014;
    while (objc_msgSend_count(v193, v28, v29) > (unint64_t)v30)
    {
      objc_msgSend_objectAtIndexedSubscript_(v193, v31, v30);
      id v32 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_quad(v32, v33, v34);
      float32x4_t v214 = v35;
      objc_msgSend_quad(v32, v36, v37);
      float32x4_t v39 = vsubq_f32(v214, v38);
      float32x4_t v40 = vmulq_f32(v39, v39);
      float v41 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]);
      BOOL v42 = v41 <= 1.2 && v41 >= 0.6;

      if (v42)
      {
        objc_msgSend_objectAtIndexedSubscript_(v193, v28, v30);
        id v43 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend_quad(v43, v44, v45);
        long long v215 = v46;
        objc_msgSend_quad(v43, v47, v48);
        long long v212 = v49;
        objc_msgSend_quad(v43, v50, v51);
        int8x16_t v210 = v52;
        objc_msgSend_quad(v43, v53, v54);
        int8x16_t v208 = v55;
        objc_msgSend_quad(v43, v56, v57);
        unsigned int v207 = v58;
        objc_msgSend_quad(v43, v59, v60);
        unsigned int v205 = v61;
        uint64_t v64 = objc_msgSend_copy(v43, v62, v63);
        uint64_t v65 = (void *)v64;
        float32x2_t v66 = vsub_f32(*(float32x2_t *)&v212, *(float32x2_t *)&v215);
        int32x2_t v67 = (int32x2_t)vmul_f32(v66, v66);
        v67.i32[0] = vadd_f32((float32x2_t)v67, (float32x2_t)vdup_lane_s32(v67, 1)).u32[0];
        float32x2_t v68 = vrsqrte_f32((float32x2_t)v67.u32[0]);
        float32x2_t v69 = vmul_f32(v68, vrsqrts_f32((float32x2_t)v67.u32[0], vmul_f32(v68, v68)));
        float32x2_t v70 = vmul_n_f32(v66, vmul_f32(v69, vrsqrts_f32((float32x2_t)v67.u32[0], vmul_f32(v69, v69))).f32[0]);
        *(float32x2_t *)&long long v71 = vmla_f32(*(float32x2_t *)&v212, (float32x2_t)0x3F0000003F000000, v70);
        *(float32x2_t *)&long long v72 = vmla_f32(*(float32x2_t *)&v215, (float32x2_t)0xBF000000BF000000, v70);
        *(void *)&long long v73 = v72;
        *((void *)&v73 + 1) = vextq_s8(v210, v210, 8uLL).u64[0];
        *(void *)&long long v74 = v71;
        *((void *)&v74 + 1) = vextq_s8(v208, v208, 8uLL).u64[0];
        *((void *)&v71 + 1) = __PAIR64__(HIDWORD(v212), v207);
        *((void *)&v72 + 1) = __PAIR64__(HIDWORD(v215), v205);
        src[0] = v73;
        src[1] = v74;
        _OWORD src[2] = v71;
        src[3] = v72;
        if (v64) {
          objc_copyStruct((void *)(v64 + 272), src, 64, 1, 0);
        }

        sub_25B43F68C(v195, v65, v190, v191);
      }
      ++v30;
    }
    if (*(unsigned char *)(v195 + 1433))
    {
      long long v75 = operator new(0x10uLL);
      uint64_t v76 = 0;
      *long long v75 = xmmword_25B5F12D0;
      while (v76 != 12)
      {
        float v77 = *(float *)((char *)v75 + v76);
        float v78 = *(float *)((char *)v75 + v76 + 4);
        v76 += 4;
        sub_25B440BA8(*(void **)(v195 + 1384), v77, v78);
      }
      int v79 = operator new(0xCuLL);
      uint64_t v80 = 0;
      *(void *)int v79 = 0x3F19999A00000000;
      v79[2] = 1066192077;
      while (v80 != 3)
      {
        float v81 = *(float *)&v79[v80];
        float v82 = *(float *)&v79[++v80];
        sub_25B440BA8(*(void **)(v195 + 1400), v81, v82);
      }
      operator delete(v79);
      operator delete(v75);
    }
    short float v186 = objc_opt_new();
    long long v219 = 0u;
    long long v220 = 0u;
    long long v217 = 0u;
    long long v218 = 0u;
    obuint64_t j = *(id *)(v195 + 1384);
    uint64_t v189 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v83, (uint64_t)&v217, v229, 16);
    if (v189)
    {
      uint64_t v188 = *(void *)v218;
      id v197 = v14;
      do
      {
        for (uint64_t i = 0; i != v189; ++i)
        {
          if (*(void *)v218 != v188) {
            objc_enumerationMutation(obj);
          }
          uint64_t v84 = *(void **)(v195 + 1400);
          id v200 = *(id *)(*((void *)&v217 + 1) + 8 * i);
          id v85 = v84;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v223 = 0u;
          long long v224 = 0u;
          id v196 = v85;
          uint64_t v87 = objc_msgSend_countByEnumeratingWithState_objects_count_(v196, v86, (uint64_t)&v221, src, 16);
          if (v87)
          {
            uint64_t v199 = *(void *)v222;
            while (2)
            {
              uint64_t v88 = 0;
              uint64_t v198 = v87;
              do
              {
                if (*(void *)v222 != v199) {
                  objc_enumerationMutation(v196);
                }
                long long v89 = *(void **)(*((void *)&v221 + 1) + 8 * v88);
                id v90 = v200;
                id v91 = v89;
                objc_msgSend_quad(v90, v92, v93);
                float32x4_t v213 = v94;
                objc_msgSend_quad(v90, v95, v96);
                float32x4_t v211 = v97;
                objc_msgSend_quad(v90, v98, v99);
                float32x4_t v209 = v100;
                objc_msgSend_quad(v90, v101, v102);
                float32x4_t v206 = v103;
                objc_msgSend_quad(v91, v104, v105);
                float32x4_t v204 = v106;
                objc_msgSend_quad(v91, v107, v108);
                float32x4_t v203 = v109;
                objc_msgSend_quad(v91, v110, v111);
                float32x4_t v202 = v112;
                objc_msgSend_quad(v91, v113, v114);
                float32x4_t v201 = v117;
                id v118 = v13;
                id v119 = v12;
                id v120 = v11;
                uint64_t v121 = 0;
                char v122 = 1;
                float v123 = 3.4028e38;
                do
                {
                  char v124 = v122;
                  objc_msgSend_quad(v90, v115, v116);
                  uint64_t v125 = 0;
                  int v226 = v126;
                  int v228 = v127;
                  uint64_t v225 = v128;
                  uint64_t v227 = v129;
                  float32x4_t v216 = *((float32x4_t *)&v225 + v121);
                  char v130 = 1;
                  do
                  {
                    char v131 = v130;
                    objc_msgSend_quad(v91, v115, v116);
                    char v130 = 0;
                    int v226 = v132;
                    int v228 = v133;
                    uint64_t v225 = v134;
                    uint64_t v227 = v135;
                    float32x4_t v136 = vsubq_f32(v216, *((float32x4_t *)&v225 + v125));
                    float v137 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v136, v136)));
                    if (v123 > v137) {
                      float v123 = v137;
                    }
                    uint64_t v125 = 1;
                  }
                  while ((v131 & 1) != 0);
                  char v122 = 0;
                  uint64_t v121 = 1;
                }
                while ((v124 & 1) != 0);
                float32x4_t v138 = vsubq_f32(v213, v211);
                int32x4_t v139 = (int32x4_t)vmulq_f32(v138, v138);
                v139.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v139, 2), vadd_f32(*(float32x2_t *)v139.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v139.i8, 1))).u32[0];
                float32x2_t v140 = vrsqrte_f32((float32x2_t)v139.u32[0]);
                float32x2_t v141 = vmul_f32(v140, vrsqrts_f32((float32x2_t)v139.u32[0], vmul_f32(v140, v140)));
                float32x4_t v142 = vmulq_n_f32(v138, vmul_f32(v141, vrsqrts_f32((float32x2_t)v139.u32[0], vmul_f32(v141, v141))).f32[0]);
                float32x4_t v143 = vsubq_f32(v209, v206);
                int32x4_t v144 = (int32x4_t)vmulq_f32(v143, v143);
                v144.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v144, 2), vadd_f32(*(float32x2_t *)v144.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v144.i8, 1))).u32[0];
                float32x2_t v145 = vrsqrte_f32((float32x2_t)v144.u32[0]);
                float32x2_t v146 = vmul_f32(v145, vrsqrts_f32((float32x2_t)v144.u32[0], vmul_f32(v145, v145)));
                float32x4_t v147 = vmulq_n_f32(v143, vmul_f32(v146, vrsqrts_f32((float32x2_t)v144.u32[0], vmul_f32(v146, v146))).f32[0]);
                float32x4_t v148 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v147, (int32x4_t)v147), (int8x16_t)v147, 0xCuLL), vnegq_f32(v142)), v147, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v142, (int32x4_t)v142), (int8x16_t)v142, 0xCuLL));
                float32x4_t v149 = vsubq_f32(v204, v203);
                int32x4_t v150 = (int32x4_t)vmulq_f32(v149, v149);
                v150.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v150, 2), vadd_f32(*(float32x2_t *)v150.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v150.i8, 1))).u32[0];
                *(float32x2_t *)v144.int i8 = vrsqrte_f32((float32x2_t)v150.u32[0]);
                *(float32x2_t *)v144.int i8 = vmul_f32(*(float32x2_t *)v144.i8, vrsqrts_f32((float32x2_t)v150.u32[0], vmul_f32(*(float32x2_t *)v144.i8, *(float32x2_t *)v144.i8)));
                float32x4_t v151 = vmulq_n_f32(v149, vmul_f32(*(float32x2_t *)v144.i8, vrsqrts_f32((float32x2_t)v150.u32[0], vmul_f32(*(float32x2_t *)v144.i8, *(float32x2_t *)v144.i8))).f32[0]);
                float32x4_t v152 = vsubq_f32(v202, v201);
                int32x4_t v153 = (int32x4_t)vmulq_f32(v152, v152);
                v153.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v153, 2), vadd_f32(*(float32x2_t *)v153.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v153.i8, 1))).u32[0];
                float32x2_t v154 = vrsqrte_f32((float32x2_t)v153.u32[0]);
                float32x2_t v155 = vmul_f32(v154, vrsqrts_f32((float32x2_t)v153.u32[0], vmul_f32(v154, v154)));
                float32x4_t v156 = vmulq_n_f32(v152, vmul_f32(v155, vrsqrts_f32((float32x2_t)v153.u32[0], vmul_f32(v155, v155))).f32[0]);
                float32x4_t v157 = vmulq_f32(v148, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v156, (int32x4_t)v156), (int8x16_t)v156, 0xCuLL), vnegq_f32(v151)), v156, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v151, (int32x4_t)v151), (int8x16_t)v151, 0xCuLL)));
                float v158 = acosf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v157.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v157, 2), v157)).f32[0]);

                id v11 = v120;
                id v14 = v197;
                id v12 = v119;
                id v13 = v118;

                float v160 = v158 / 3.14159265 * 180.0;
                float v161 = fminf(v160, 180.0 - v160);
                BOOL v162 = v161 > 75.0 && v161 < 105.0;
                if (v162 && v123 < 0.2)
                {

                  goto LABEL_49;
                }
                ++v88;
              }
              while (v88 != v198);
              uint64_t v87 = objc_msgSend_countByEnumeratingWithState_objects_count_(v196, v159, (uint64_t)&v221, src, 16);
              if (v87) {
                continue;
              }
              break;
            }
          }

          objc_msgSend_addObject_(v186, v163, (uint64_t)v200);
LABEL_49:
          ;
        }
        uint64_t v189 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v164, (uint64_t)&v217, v229, 16);
      }
      while (v189);
    }

    uint64_t v165 = *(void **)(v195 + 1384);
    *(void *)(v195 + 1384) = v186;

    uint64_t v166 = objc_opt_new();
    uint64_t v169 = objc_msgSend_copy(*(void **)(v195 + 1376), v167, v168);
    objc_msgSend_setObject_forKeyedSubscript_(v166, v170, (uint64_t)v169, @"windows");

    BOOL v173 = objc_msgSend_copy(*(void **)(v195 + 1384), v171, v172);
    objc_msgSend_setObject_forKeyedSubscript_(v166, v174, (uint64_t)v173, @"doors");

    uint64_t v177 = objc_msgSend_copy(*(void **)(v195 + 1392), v175, v176);
    objc_msgSend_setObject_forKeyedSubscript_(v166, v178, (uint64_t)v177, @"openings");

    uint64_t v181 = objc_msgSend_copy(*(void **)(v195 + 1400), v179, v180);
    objc_msgSend_setObject_forKeyedSubscript_(v166, v182, (uint64_t)v181, @"opendoors");

    a1 = objc_msgSend_copy(v166, v183, v184);
  }

  return (id)a1;
}

void sub_25B43F4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_25B43F68C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v307 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v239 = a3;
  id v240 = a4;
  id v238 = v7;
  objc_msgSend_quad(v238, v8, v9);
  float32x4_t v265 = v10;
  objc_msgSend_quad(v238, v11, v12);
  float32x4_t v259 = v13;

  float32x4_t v16 = vsubq_f32(v265, v259);
  float32x4_t v17 = vmulq_f32(v16, v16);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]) < 0.5)goto LABEL_230; {
  unint64_t v237 = objc_msgSend_count(*(void **)(a1 + 1376), v14, v15);
  }
  kdebug_trace();
  id v18 = v238;
  id v19 = v239;
  uint64_t v20 = (float *)v240;
  size_t DataSize = CVPixelBufferGetDataSize(*(CVPixelBufferRef *)(a1 + 8));
  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), 0);
  BaseAddress = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 8));
  *(void *)(a1 + 16) = BaseAddress;
  bzero(BaseAddress, DataSize);
  float32x4_t v303 = 0u;
  long long v304 = 0u;
  float32x4_t v301 = 0u;
  long long v302 = 0u;
  float32x4_t v299 = 0u;
  float32x4_t v300 = 0u;
  float32x4_t src = 0u;
  float32x4_t v298 = 0u;
  if (v20) {
    float v23 = v20[4];
  }
  else {
    float v23 = 0.0;
  }
  sub_25B502C00((uint64_t)&src, v18, v23 + 0.1);
  float32x4_t v251 = v300;
  float32x4_t v254 = src;
  float32x4_t v248 = v301;
  int64_t v294 = 0;
  uint64_t v295 = 0;
  uint64_t v296 = 0;
  char v291 = 0;
  uint64_t v292 = 0;
  uint64_t v293 = 0;
  uint64_t v288 = 0;
  uint64_t v289 = 0;
  uint64_t v290 = 0;
  unint64_t v285 = 0;
  uint64_t v286 = 0;
  uint64_t v287 = 0;
  sub_25B502D74(&src, v19, (float32x4_t **)&v294, (char **)&v291, (char **)&v288, (char **)&v285);
  uint64_t v24 = (float32x4_t *)v294;
  unsigned int v25 = v295;
  uint64_t v244 = a1;
  if (v294 == v295)
  {
    uint64_t v26 = 0;
    long long v27 = 0;
    BOOL v42 = (float32x4_t *)v294;
  }
  else
  {
    id v242 = v19;
    id v245 = v18;
    uint64_t v26 = 0;
    long long v27 = 0;
    unint64_t v28 = 0;
    v29.i64[0] = 0x3F0000003F000000;
    v29.i64[1] = 0x3F0000003F000000;
    float32x4_t v30 = vmulq_f32(vaddq_f32(v254, v303), v29);
    float32x4_t v31 = vsubq_f32(v251, v254);
    float32x2_t v32 = (float32x2_t)COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v31, v31)));
    *(float32x2_t *)v29.f32 = vrsqrte_f32(v32);
    *(float32x2_t *)v29.f32 = vmul_f32(*(float32x2_t *)v29.f32, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32)));
    *(float32x2_t *)v31.f32 = vmul_n_f32(*(float32x2_t *)v31.f32, vmul_f32(*(float32x2_t *)v29.f32, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32))).f32[0]);
    float32x2_t v260 = (float32x2_t)v31.u32[1];
    float32x4_t v266 = v30;
    v31.i32[1] = 0;
    float32x2_t v256 = *(float32x2_t *)v31.f32;
    do
    {
      float32x4_t v33 = vsubq_f32(*v24, v266);
      float32x2_t v34 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v256, v33.f32[0]), v260, *(float32x2_t *)v33.f32, 1), (float32x2_t)0x3F80000000000000, v33, 2);
      if ((unint64_t)v27 >= v28)
      {
        uint64_t v35 = v27 - v26;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v28 - (void)v26) >> 2 > v36) {
          unint64_t v36 = (uint64_t)(v28 - (void)v26) >> 2;
        }
        if (v28 - (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v36;
        }
        if (v37) {
          unint64_t v37 = (unint64_t)sub_25B3FCAD4(v37);
        }
        else {
          uint64_t v38 = 0;
        }
        float32x4_t v39 = (float32x2_t *)(v37 + 8 * v35);
        float32x2_t *v39 = v34;
        float32x4_t v40 = v39 + 1;
        while (v27 != v26)
        {
          float32x2_t v41 = v27[-1];
          --v27;
          v39[-1] = v41;
          --v39;
        }
        unint64_t v28 = v37 + 8 * v38;
        if (v26) {
          operator delete(v26);
        }
        uint64_t v26 = v39;
        long long v27 = v40;
      }
      else
      {
        *v27++ = v34;
      }
      ++v24;
    }
    while (v24 != v25);
    BOOL v42 = (float32x4_t *)v294;
    uint64_t v24 = v295;
    id v18 = v245;
    id v19 = v242;
  }
  size_t v282 = 0;
  uint64_t v283 = 0;
  uint64_t v284 = 0;
  sub_25B5BF284(v42, v24, &src, &v282);
  id v43 = (float32x4_t *)v282;
  uint64_t v44 = v283;
  sub_25B443228(&__p, ((char *)v283 - (unsigned char *)v282) >> 4);
  float32x4_t v45 = vsubq_f32(v254, v251);
  float32x4_t v46 = vmulq_f32(v45, v45);
  float32x4_t v47 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1)));
  v47.f32[0] = sqrtf(v47.f32[0]);
  float32x4_t v48 = vsubq_f32(v254, v248);
  float32x4_t v49 = vmulq_f32(v48, v48);
  int32x2_t v50 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).u64[0];
  *(float *)v50.i32 = sqrtf(*(float *)v50.i32);
  if (v43 != v44)
  {
    uint64_t v51 = (float *)__p;
    int8x16_t v52 = v43;
    do
    {
      *v51++ = (float)(fabsf(v52->f32[2]) / -0.8) + 1.0;
      ++v52;
    }
    while (v52 != v44);
  }
  if (v47.f32[0] < *(float *)v50.i32) {
    v47.f32[0] = *(float *)v50.i32;
  }
  float v53 = v47.f32[0] / 448.0;
  v47.f32[0] = 1.0 / (float)(v47.f32[0] / 448.0);
  *(_DWORD *)(a1 + 304) = v47.i32[0];
  *(float *)v50.i32 = (float)(v53 * 448.0) * 0.5;
  *(_DWORD *)(a1 + 308) = v50.i32[0];
  sub_25B5BF450(v26, v27, &v291, &v288, &v285, (uint64_t *)&__p, *(void *)(a1 + 16), v47, v50);
  CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), 0);
  if (__p)
  {
    unint64_t v281 = __p;
    operator delete(__p);
  }
  if (v43) {
    operator delete(v43);
  }
  if (v26) {
    operator delete(v26);
  }
  if (v285) {
    operator delete(v285);
  }
  if (v288) {
    operator delete(v288);
  }
  if (v291) {
    operator delete(v291);
  }
  if (v294) {
    operator delete(v294);
  }

  kdebug_trace();
  kdebug_trace();
  sub_25B441498();
  kdebug_trace();
  kdebug_trace();
  sub_25B441760(a1);
  id v54 = v18;
  id v255 = v19;
  objc_msgSend_quad(v54, v55, v56);
  float32x4_t v249 = v57;
  objc_msgSend_quad(v54, v58, v59);
  float32x4_t v246 = v60;
  objc_msgSend_quad(v54, v61, v62);
  float32x4_t v267 = v63;
  objc_msgSend_quad(v54, v64, v65);
  float32x4_t v261 = v66;
  long long v71 = objc_msgSend_identifier(v54, v67, v68);
  unint64_t v72 = 0;
  long long v241 = (void **)(a1 + 1376);
  float32x4_t v243 = vsubq_f32(v267, v261);
  float32x2_t v73 = (float32x2_t)vdup_n_s32(0x43E00000u);
  while (v72 < objc_msgSend_count(*(void **)(a1 + 1368), v69, v70, v237))
  {
    uint64_t v75 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 1368), v74, v72);
    float v77 = (void *)v75;
    if (v75) {
      double v78 = *(double *)(v75 + 24);
    }
    else {
      double v78 = 0.0;
    }
    objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 1368), v76, v72);
    int v79 = (double *)objc_claimAutoreleasedReturnValue();
    if (v79) {
      double v80 = v79[4];
    }
    else {
      double v80 = 0.0;
    }

    uint64_t v82 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v244 + 1368), v81, v72);
    uint64_t v84 = (void *)v82;
    if (v82) {
      double v85 = *(double *)(v82 + 24);
    }
    else {
      double v85 = 0.0;
    }
    uint64_t v86 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v244 + 1368), v83, v72);
    uint64_t v88 = (void *)v86;
    if (v86) {
      double v89 = *(double *)(v86 + 40);
    }
    else {
      double v89 = 0.0;
    }
    uint64_t v90 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v244 + 1368), v87, v72);
    long long v92 = (void *)v90;
    if (v90) {
      double v93 = *(double *)(v90 + 32);
    }
    else {
      double v93 = 0.0;
    }
    objc_msgSend_objectAtIndexedSubscript_(*(void **)(v244 + 1368), v91, v72);
    float32x4_t v94 = (double *)objc_claimAutoreleasedReturnValue();
    if (v94) {
      double v95 = v94[6];
    }
    else {
      double v95 = 0.0;
    }

    a1 = v244;
    v96.i32[0] = *(_DWORD *)(v244 + 304);
    int32x2_t v262 = v96;
    v96.i32[0] = *(_DWORD *)(v244 + 308);
    int32x2_t v268 = v96;
    float32x4_t v97 = operator new(0x10uLL);
    v98.f32[0] = v78;
    float32_t v99 = v80;
    v98.f32[1] = v99;
    v100.f32[0] = v85 + v89;
    float32_t v101 = v93 + v95;
    v100.f32[1] = v101;
    float32x2_t v102 = vmul_f32(v100, v73);
    v103.f32[0] = floorf(v102.f32[0]);
    v103.f32[1] = 448.0 - floorf(v102.f32[1]);
    float32x2_t v104 = (float32x2_t)vdup_lane_s32(v262, 0);
    float32x2_t v105 = (float32x2_t)vdup_lane_s32(v268, 0);
    float32x2_t v106 = vmul_f32(v98, v73);
    v107.f32[0] = floorf(v106.f32[0]);
    v107.f32[1] = 448.0 - floorf(v106.f32[1]);
    *(float32x2_t *)float32x4_t v97 = vsub_f32(vdiv_f32(v107, v104), v105);
    *((float32x2_t *)v97 + 1) = vsub_f32(vdiv_f32(v103, v104), v105);
    sub_25B5BFAA4((float32x4_t **)&v294, (int32x2_t *)v97, (int32x2_t *)v97 + 2, v249, v246);
    uint64_t v108 = (float32x4_t *)v294;
    float32x4_t v257 = *((float32x4_t *)v294 + 1);
    float32x4_t v252 = *(float32x4_t *)v294;
    objc_msgSend_quad(v54, v109, v110);
    float32x4_t v269 = v111;
    objc_msgSend_quad(v54, v112, v113);
    float32x4_t v263 = v115;
    float32x4_t v116 = vsubq_f32(v257, v252);
    v115.f32[0] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v116, v116)));
    float32x4_t v117 = *v108;
    float32x4_t v118 = v108[1];
    v119.i64[0] = 0x3F0000003F000000;
    v119.i64[1] = 0x3F0000003F000000;
    float32x4_t v120 = vmulq_f32(vaddq_f32(*v108, v118), v119);
    float v121 = v115.f32[0] * 0.5;
    float32x4_t v122 = vsubq_f32(v269, v120);
    if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v122, v122))) < v121)
    {
      float32x4_t v123 = v269;
      v123.i32[2] = v108->i64[1];
      v108->i32[2] = v117.i32[2];
      v108->i64[0] = v269.i64[0];
      float32x4_t v117 = v123;
    }
    float32x4_t v124 = vsubq_f32(v263, v120);
    if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v124, v124))) < v121)
    {
      v108[1].i32[2] = v118.i32[2];
      v108[1].i64[0] = v263.i64[0];
    }
    if (v269.f32[2] > v263.f32[2] && v117.f32[2] > v118.f32[2])
    {
      if (v117.f32[2] > v269.f32[2])
      {
        v108->i32[2] = v269.i32[2];
        v108->i64[0] = v117.i64[0];
      }
      if (vabds_f32(v118.f32[2], v263.f32[2]) < 0.03) {
        goto LABEL_73;
      }
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(v244 + 1368), v114, v72);
      uint64_t v125 = (_DWORD *)objc_claimAutoreleasedReturnValue();
      int v127 = v125;
      if (v125 && v125[5] == 1)
      {

        a1 = v244;
LABEL_73:
        v108[1].i32[2] = v263.i32[2];
        goto LABEL_74;
      }
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(v244 + 1368), v126, v72);
      uint64_t v128 = (_DWORD *)objc_claimAutoreleasedReturnValue();
      if (v128)
      {
        BOOL v129 = v128[5] == 4;

        a1 = v244;
        if (!v129) {
          goto LABEL_74;
        }
        goto LABEL_73;
      }

      a1 = v244;
    }
LABEL_74:
    float32x4_t v130 = vsubq_f32(v108[1], *v108);
    float v131 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v130, v130)));
    float v132 = fabsf(v130.f32[2]);
    if (v131 >= 0.3 || v132 >= 0.3)
    {
      if (v132 > 1.5
        || (objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 1368), v114, v72),
            (int v133 = (_DWORD *)objc_claimAutoreleasedReturnValue()) == 0)
        || (BOOL v134 = v133[5] == 1, v133, a1 = v244, !v134))
      {
        if (v131 > 0.55
          || (objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 1368), v114, v72),
              (uint64_t v135 = (_DWORD *)objc_claimAutoreleasedReturnValue()) == 0)
          || (BOOL v136 = v135[5] == 4, v135, a1 = v244, !v136))
        {
          float32x4_t v137 = *v108;
          float32x4_t v138 = v108[1];
          if (vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v243, vsubq_f32(v138, *v108))) < 0.0)
          {
            v108->i32[2] = v137.i32[2];
            v108->i64[0] = v138.i64[0];
            v108[1].i32[2] = v138.i32[2];
            v108[1].i64[0] = v137.i64[0];
          }
          int32x4_t v139 = objc_alloc_init(RS3DSurface);
          uint64_t v141 = (uint64_t)v139;
          float32x4_t v143 = v108[1];
          float32x4_t v144 = v143;
          v144.i32[2] = v108->i64[1];
          float32x4_t src = *v108;
          float32x4_t v142 = src;
          float32x4_t v298 = v144;
          v142.i32[2] = v143.i32[2];
          float32x4_t v299 = v143;
          float32x4_t v300 = v142;
          if (v139) {
            objc_copyStruct(&v139[1], &src, 64, 1, 0);
          }
          objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 1368), v140, v72);
          float32x2_t v145 = (_DWORD *)objc_claimAutoreleasedReturnValue();
          if (v145)
          {
            int v146 = v145[3];
            if (v141) {
              goto LABEL_88;
            }
          }
          else
          {
            int v146 = 0;
            if (v141) {
LABEL_88:
            }
              *(_DWORD *)(v141 + 108) = v146;
          }

          sub_25B4FD504(v141, v71);
          float32x4_t v147 = objc_opt_new();
          sub_25B4FD4F4(v141, v147);

          if (v141) {
            *(unsigned char *)(v141 + 105) = 0;
          }
          objc_msgSend_objectAtIndexedSubscript_(*(void **)(v244 + 1368), v148, v72);
          float32x4_t v149 = (_DWORD *)objc_claimAutoreleasedReturnValue();
          if (v149)
          {
            BOOL v151 = v149[5] == 1;

            if (v151)
            {
              float32x4_t v152 = (void **)(v244 + 1384);
              if (v141)
              {
                char v153 = 2;
                float32x4_t v152 = (void **)(v244 + 1384);
                goto LABEL_105;
              }
LABEL_106:
              objc_msgSend_addObject_(*v152, v150, v141);

              a1 = v244;
              goto LABEL_107;
            }
          }
          objc_msgSend_objectAtIndexedSubscript_(*(void **)(v244 + 1368), v150, v72);
          float32x2_t v154 = (_DWORD *)objc_claimAutoreleasedReturnValue();
          if (v154 && (BOOL v155 = v154[5] == 2, v154, v155))
          {
            float32x4_t v152 = (void **)(v244 + 1376);
            if (!v141) {
              goto LABEL_106;
            }
            char v153 = 1;
            float32x4_t v152 = (void **)(v244 + 1376);
          }
          else
          {
            objc_msgSend_objectAtIndexedSubscript_(*(void **)(v244 + 1368), v150, v72);
            float32x4_t v156 = (_DWORD *)objc_claimAutoreleasedReturnValue();
            if (v156 && (BOOL v157 = v156[5] == 3, v156, v157))
            {
              float32x4_t v152 = (void **)(v244 + 1392);
              if (!v141) {
                goto LABEL_106;
              }
              char v153 = 3;
              float32x4_t v152 = (void **)(v244 + 1392);
            }
            else
            {
              float32x4_t v152 = (void **)(v244 + 1400);
              if (!v141) {
                goto LABEL_106;
              }
              char v153 = 4;
              float32x4_t v152 = (void **)(v244 + 1400);
            }
          }
LABEL_105:
          *(unsigned char *)(v141 + 104) = v153;
          goto LABEL_106;
        }
      }
    }
LABEL_107:
    operator delete(v108);
    operator delete(v97);
    ++v72;
  }

  kdebug_trace();
  unint64_t v160 = objc_msgSend_count(*v241, v158, v159);
  if (v160 <= v237) {
    goto LABEL_230;
  }
  objc_msgSend_subarrayWithRange_(*v241, v161, v237, v160 - v237);
  long long v275 = 0u;
  long long v276 = 0u;
  long long v273 = 0u;
  long long v274 = 0u;
  id v162 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v164 = objc_msgSend_countByEnumeratingWithState_objects_count_(v162, v163, (uint64_t)&v273, v306, 16);
  if (!v164) {
    goto LABEL_227;
  }
  uint64_t v165 = *(void *)v274;
  uint64_t v247 = *(void *)v274;
  uint64_t v253 = v162;
  while (2)
  {
    uint64_t v166 = 0;
    uint64_t v250 = v164;
    while (2)
    {
      if (*(void *)v274 != v165) {
        objc_enumerationMutation(v162);
      }
      id v167 = *(id *)(*((void *)&v273 + 1) + 8 * v166);
      id v168 = v255;
      float32x4_t v303 = 0u;
      long long v304 = 0u;
      float32x4_t v301 = 0u;
      long long v302 = 0u;
      float32x4_t v299 = 0u;
      float32x4_t v300 = 0u;
      float32x4_t src = 0u;
      float32x4_t v298 = 0u;
      id v169 = v167;
      objc_msgSend_quad(v169, v170, v171);
      sub_25B502C00((uint64_t)&src, v169, v172);

      int64_t v294 = 0;
      uint64_t v295 = 0;
      uint64_t v296 = 0;
      char v291 = 0;
      uint64_t v292 = 0;
      uint64_t v293 = 0;
      uint64_t v288 = 0;
      uint64_t v289 = 0;
      uint64_t v290 = 0;
      unint64_t v285 = 0;
      uint64_t v286 = 0;
      uint64_t v287 = 0;
      sub_25B502D74(&src, v168, (float32x4_t **)&v294, (char **)&v291, (char **)&v288, (char **)&v285);
      uint64_t v258 = v166;
      uint64_t v264 = v168;
      unint64_t v270 = (float *)v169;
      uint64_t v174 = (char *)v294;
      BOOL v173 = v295;
      if (v295 == v294)
      {
        uint64_t v175 = 0;
        uint64_t v176 = 0;
      }
      else
      {
        uint64_t v175 = 0;
        uint64_t v176 = 0;
        unint64_t v177 = 0;
        uint64_t v178 = 0;
        unint64_t v179 = 0;
        do
        {
          int v180 = 0;
          int32x2_t v181 = *(int32x2_t *)((char *)v288 + 8 * v179);
          uint8x8_t v182 = (uint8x8_t)vmax_u16((uint16x4_t)v181.u32[0], (uint16x4_t)vzip2_s32(v181, 0));
          unsigned __int16 v183 = v182.i16[0];
          if (HIWORD(v182.i32[0]) > v182.u16[0]) {
            unsigned __int16 v183 = v182.u16[1];
          }
          while (1)
          {
            int32x2_t v272 = v181;
            if (*(unsigned __int16 *)((unint64_t)&v272 & 0xFFFFFFFFFFFFFFF9 | (2 * (v180 & 3))) == v183)
            {
              v182.i32[0] = *((_DWORD *)v291 + v179);
              uint8x8_t v182 = (uint8x8_t)vmovl_u8(v182).u64[0];
              uint8x8_t v271 = v182;
              if (*(unsigned char *)((unint64_t)&v271 & 0xFFFFFFFFFFFFFFF9 | (2 * (v180 & 3))) == 7) {
                break;
              }
            }
            if (++v180 == 4) {
              goto LABEL_149;
            }
          }
          if ((unint64_t)v178 >= v177)
          {
            uint64_t v184 = v178 - v175;
            unint64_t v185 = v184 + 1;
            if ((unint64_t)(v184 + 1) >> 60) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v177 - (void)v175) >> 3 > v185) {
              unint64_t v185 = (uint64_t)(v177 - (void)v175) >> 3;
            }
            if (v177 - (unint64_t)v175 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v186 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v186 = v185;
            }
            if (v186) {
              unint64_t v186 = (unint64_t)sub_25B3FFAEC(v186);
            }
            else {
              uint64_t v187 = 0;
            }
            uint64_t v188 = (float32x4_t *)(v186 + 16 * v184);
            *uint64_t v188 = *(float32x4_t *)&v174[16 * v179];
            uint64_t v178 = v188 + 1;
            while (v176 != v175)
            {
              float32x4_t v189 = v176[-1];
              --v176;
              v188[-1] = v189;
              --v188;
            }
            unint64_t v177 = v186 + 16 * v187;
            if (v175) {
              operator delete(v175);
            }
            uint64_t v175 = v188;
          }
          else
          {
            *v178++ = *(float32x4_t *)&v174[16 * v179];
          }
          uint64_t v174 = (char *)v294;
          BOOL v173 = v295;
          uint64_t v176 = v178;
LABEL_149:
          ++v179;
        }
        while (v179 < ((char *)v173 - v174) >> 4);
      }
      size_t v282 = 0;
      uint64_t v283 = 0;
      uint64_t v284 = 0;
      sub_25B5BF284(v175, v176, &src, &v282);
      id v190 = (float32x4_t *)v282;
      id v191 = v283;
      unint64_t v192 = ((char *)v283 - (unsigned char *)v282) >> 4;
      unint64_t v193 = 126 - 2 * __clz(v192);
      if (v283 == v282) {
        uint64_t v194 = 0;
      }
      else {
        uint64_t v194 = v193;
      }
      sub_25B4428B8((float *)v282, v283, v194, 1);
      sub_25B443228(&__p, v192);
      uint64_t v195 = __p;
      if (v191 != v190)
      {
        id v196 = (float *)__p;
        do
        {
          *v196++ = fabsf(v190->f32[2]);
          ++v190;
        }
        while (v190 != v191);
      }
      uint64_t v197 = v281 - v195;
      float v198 = 0.0;
      if ((unint64_t)(v281 - v195) >= 0x4B1)
      {
        unint64_t v199 = v197 >> 2;
        unint64_t v201 = v197 >> 2;
        uint64_t v200 = ((unint64_t)(v197 >> 2) * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64;
        unint64_t v202 = v201 / 0x14;
        if (v199 < (int)(v201 / 0x14))
        {
          float32x4_t v203 = 0;
          float32x4_t v204 = 0;
          goto LABEL_191;
        }
        uint64_t v205 = v202 << 32;
        unint64_t v206 = (int)(v200 >> 4);
        double v207 = 0.0;
        if (v202 << 32)
        {
          if (v205 < 0) {
            sub_25B3FBC4C();
          }
          int8x16_t v208 = (char *)sub_25B3FBC64((int)(v200 >> 4));
          memmove(v208, v195, v205 >> 30);
          if (4 * v206)
          {
            uint64_t v209 = 0;
            do
            {
              double v207 = v207 + *(float *)&v208[v209];
              v209 += 4;
            }
            while (4 * v206 != v209);
          }
        }
        else
        {
          int8x16_t v208 = 0;
        }
        int8x16_t v210 = (float *)sub_25B3FBC64(1uLL);
        float32x4_t v203 = v210;
        float v212 = v207;
        float *v210 = v212 / (float)v206;
        float32x4_t v204 = v210 + 1;
        float32x4_t v213 = (float *)__p;
        if (v206 >= (v281 - (unsigned char *)__p) >> 2)
        {
          if (v208) {
            goto LABEL_190;
          }
        }
        else
        {
          float32x4_t v214 = &v210[v211];
          long long v215 = v210 + 1;
          unint64_t v216 = v206;
          do
          {
            float v217 = v213[v216];
            float v212 = v212 + (float)(v217 - *(float *)&v208[4 * (v216 % v206)]);
            float v218 = v212 / (float)v206;
            if (v215 >= v214)
            {
              uint64_t v219 = v215 - v203;
              unint64_t v220 = v219 + 1;
              if ((unint64_t)(v219 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if (((char *)v214 - (char *)v203) >> 1 > v220) {
                unint64_t v220 = ((char *)v214 - (char *)v203) >> 1;
              }
              if ((unint64_t)((char *)v214 - (char *)v203) >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v221 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v221 = v220;
              }
              if (v221) {
                unint64_t v221 = (unint64_t)sub_25B3FBC64(v221);
              }
              else {
                uint64_t v222 = 0;
              }
              long long v223 = (float *)(v221 + 4 * v219);
              *long long v223 = v218;
              float32x4_t v204 = v223 + 1;
              while (v215 != v203)
              {
                int v224 = *((_DWORD *)v215-- - 1);
                *((_DWORD *)v223-- - 1) = v224;
              }
              float32x4_t v214 = (float *)(v221 + 4 * v222);
              if (v203) {
                operator delete(v203);
              }
              float32x4_t v203 = v223;
            }
            else
            {
              *long long v215 = v218;
              float32x4_t v204 = v215 + 1;
            }
            *(float *)&v208[4 * (v216 % v206)] = v217;
            ++v216;
            float32x4_t v213 = (float *)__p;
            long long v215 = v204;
          }
          while (v216 < (v281 - (unsigned char *)__p) >> 2);
LABEL_190:
          operator delete(v208);
        }
LABEL_191:
        unint64_t v225 = v204 - v203;
        unint64_t v226 = v225 >> 2;
        unint64_t v227 = (((char *)v204 - (char *)v203) >> 1) + v225;
        uint64_t v277 = 0;
        float v278 = 0;
        uint64_t v279 = 0;
        long long v305 = (void **)&v277;
        if (v225 >> 2 == v227 >> 2)
        {
          int v228 = 0;
          __n128 v229 = 0;
        }
        else
        {
          long long v230 = &v203[v226];
          uint64_t v231 = 4 * (v227 >> 2) - 4 * v226;
          do
          {
            if (*v230 >= 0.25) {
              sub_25B4432A0((uint64_t *)&v305, v230);
            }
            ++v230;
            v231 -= 4;
          }
          while (v231);
          int v228 = v277;
          __n128 v229 = v278;
        }
        float v198 = 0.0;
        uint64_t v165 = v247;
        if ((unint64_t)(v229 - v228) >= 0x4B1)
        {
          double v232 = 0.0;
          if (v203 != v204)
          {
            long long v233 = v203;
            do
            {
              float v234 = *v233++;
              double v232 = v232 + v234;
            }
            while (v233 != v204);
          }
          double v235 = v232 / (double)v225;
          if (v235 <= 0.25) {
            float v198 = 0.0;
          }
          else {
            float v198 = v235;
          }
        }
        if (v228)
        {
          float v278 = v228;
          operator delete(v228);
        }
        uint64_t v164 = v250;
        if (v203) {
          operator delete(v203);
        }
      }
      if (__p)
      {
        unint64_t v281 = __p;
        operator delete(__p);
      }
      if (v282) {
        operator delete(v282);
      }
      if (v175) {
        operator delete(v175);
      }
      if (v285) {
        operator delete(v285);
      }
      id v162 = v253;
      if (v288) {
        operator delete(v288);
      }
      if (v291) {
        operator delete(v291);
      }
      if (v294) {
        operator delete(v294);
      }

      if (v270) {
        v270[32] = v198;
      }
      uint64_t v166 = v258 + 1;
      if (v258 + 1 != v164) {
        continue;
      }
      break;
    }
    uint64_t v164 = objc_msgSend_countByEnumeratingWithState_objects_count_(v253, v236, (uint64_t)&v273, v306, 16);
    if (v164) {
      continue;
    }
    break;
  }
LABEL_227:

  if (*(unsigned char *)(v244 + 1433)) {
    sub_25B440BA8(v162, 0.0, 1.7);
  }

LABEL_230:
}

void sub_25B4408C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_25B440BA8(void *a1, float a2, float a3)
{
  id v143 = a1;
  id v7 = 0;
  uint64_t v8 = 0;
  unint64_t v120 = 0;
  unint64_t v121 = 0;
  uint64_t v125 = 0;
  uint64_t __p = 0;
  uint64_t v9 = 0;
  float32x4_t v10 = 0;
  unint64_t v118 = 0;
  unint64_t v119 = 0;
  float32x4_t v123 = 0;
  float32x4_t v124 = 0;
  id v11 = 0;
  uint64_t v12 = 0;
  unint64_t v116 = 0;
  unint64_t v117 = 0;
  float32x4_t v122 = 0;
  float32x4_t v13 = 0;
  unint64_t v141 = 0;
  float v14 = 0.0;
  float v15 = 0.0;
  float v16 = 0.0;
  while (v141 < objc_msgSend_count(v143, v5, v6))
  {
    id v18 = objc_msgSend_objectAtIndexedSubscript_(v143, v17, v141);
    objc_msgSend_quad(v18, v19, v20);
    float32x4_t v134 = v22;
    float32x4_t v139 = v21;
    float32x4_t v127 = v23;
    float32x4_t v131 = v24;

    float32x4_t v135 = vsubq_f32(v134, v139);
    float32x4_t v25 = vmulq_f32(v135, v135);
    LODWORD(v129) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).u32[0];
    float v26 = sqrtf(v129);
    if (v26 <= a2 || v26 > a3)
    {
      unint64_t v28 = v7;
      float32x4_t v29 = v10;
      float32x4_t v30 = v11;
      float32x4_t v31 = v12;
LABEL_103:
      uint64_t v76 = v13;
      goto LABEL_121;
    }
    if ((unint64_t)v8 >= v121)
    {
      uint64_t v32 = v8 - v7;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v121 - (void)v7) >> 2 > v33) {
        unint64_t v33 = (uint64_t)(v121 - (void)v7) >> 2;
      }
      if (v121 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v33;
      }
      if (v34) {
        unint64_t v34 = (unint64_t)sub_25B3FCAD4(v34);
      }
      else {
        long long v5 = 0;
      }
      uint64_t v35 = (unint64_t *)(v34 + 8 * v32);
      *uint64_t v35 = v141;
      unint64_t v36 = v35 + 1;
      while (v8 != v7)
      {
        unint64_t v37 = *--v8;
        *--uint64_t v35 = v37;
      }
      unint64_t v121 = v34 + 8 * (void)v5;
      if (v7) {
        operator delete(v7);
      }
      id v7 = v35;
      uint64_t v8 = v36;
    }
    else
    {
      *v8++ = v141;
    }
    float32x2_t v38 = vrsqrte_f32((float32x2_t)LODWORD(v129));
    float32x2_t v39 = vmul_f32(v38, vrsqrts_f32((float32x2_t)LODWORD(v129), vmul_f32(v38, v38)));
    float32x4_t v40 = vmulq_n_f32(v135, vmul_f32(v39, vrsqrts_f32((float32x2_t)LODWORD(v129), vmul_f32(v39, v39))).f32[0]);
    if ((unint64_t)v9 >= v120)
    {
      float32x4_t v136 = v40;
      uint64_t v41 = v9 - __p;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v120 - (void)__p) >> 3 > v42) {
        unint64_t v42 = (uint64_t)(v120 - (void)__p) >> 3;
      }
      if (v120 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v42;
      }
      if (v43) {
        unint64_t v43 = (unint64_t)sub_25B3FFAEC(v43);
      }
      else {
        long long v5 = 0;
      }
      uint64_t v44 = (float32x4_t *)(v43 + 16 * v41);
      *uint64_t v44 = v136;
      float32x4_t v45 = v44 + 1;
      if (v9 == __p)
      {
        float32x4_t v46 = __p;
      }
      else
      {
        float32x4_t v46 = __p;
        do
        {
          float32x4_t v47 = v9[-1];
          --v9;
          v44[-1] = v47;
          --v44;
        }
        while (v9 != __p);
      }
      unint64_t v120 = v43 + 16 * (void)v5;
      if (v46) {
        operator delete(v46);
      }
      uint64_t __p = v44;
      uint64_t v9 = v45;
    }
    else
    {
      *v9++ = v40;
    }
    float32x4_t v48 = vsubq_f32(v131, v139);
    float32x4_t v49 = vmulq_f32(v48, v48);
    LODWORD(v137) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).u32[0];
    float32x2_t v50 = vrsqrte_f32((float32x2_t)LODWORD(v137));
    float32x2_t v51 = vmul_f32(v50, vrsqrts_f32((float32x2_t)LODWORD(v137), vmul_f32(v50, v50)));
    float32x4_t v52 = vmulq_n_f32(v48, vmul_f32(v51, vrsqrts_f32((float32x2_t)LODWORD(v137), vmul_f32(v51, v51))).f32[0]);
    if ((unint64_t)v10 >= v119)
    {
      float32x4_t v132 = v52;
      uint64_t v53 = v10 - v125;
      unint64_t v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v119 - (void)v125) >> 3 > v54) {
        unint64_t v54 = (uint64_t)(v119 - (void)v125) >> 3;
      }
      if (v119 - (unint64_t)v125 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v55 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v54;
      }
      if (v55) {
        unint64_t v55 = (unint64_t)sub_25B3FFAEC(v55);
      }
      else {
        long long v5 = 0;
      }
      uint64_t v56 = (float32x4_t *)(v55 + 16 * v53);
      *uint64_t v56 = v132;
      float32x4_t v29 = v56 + 1;
      if (v10 == v125)
      {
        float32x4_t v57 = v125;
      }
      else
      {
        float32x4_t v57 = v125;
        do
        {
          float32x4_t v58 = v10[-1];
          --v10;
          v56[-1] = v58;
          --v56;
        }
        while (v10 != v125);
      }
      unint64_t v119 = v55 + 16 * (void)v5;
      if (v57)
      {
        uint64_t v59 = v29;
        operator delete(v57);
        float32x4_t v29 = v59;
      }
      uint64_t v125 = v56;
    }
    else
    {
      *float32x4_t v10 = v52;
      float32x4_t v29 = v10 + 1;
    }
    if ((unint64_t)v11 >= v118)
    {
      float32x4_t v60 = v29;
      uint64_t v61 = v11 - v124;
      unint64_t v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 62) {
        goto LABEL_143;
      }
      if ((uint64_t)(v118 - (void)v124) >> 1 > v62) {
        unint64_t v62 = (uint64_t)(v118 - (void)v124) >> 1;
      }
      if (v118 - (unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v63 = v62;
      }
      if (v63) {
        unint64_t v63 = (unint64_t)sub_25B3FBC64(v63);
      }
      else {
        long long v5 = 0;
      }
      uint64_t v64 = (float *)(v63 + 4 * v61);
      float *v64 = v26;
      float32x4_t v30 = v64 + 1;
      if (v11 == v124)
      {
        uint64_t v65 = v124;
      }
      else
      {
        uint64_t v65 = v124;
        do
        {
          int v66 = *((_DWORD *)v11-- - 1);
          *((_DWORD *)v64-- - 1) = v66;
        }
        while (v11 != v124);
      }
      unint64_t v118 = v63 + 4 * (void)v5;
      if (v65) {
        operator delete(v65);
      }
      float32x4_t v124 = v64;
      float32x4_t v29 = v60;
    }
    else
    {
      *id v11 = v26;
      float32x4_t v30 = v11 + 1;
    }
    float v67 = sqrtf(v137);
    if ((unint64_t)v12 >= v117)
    {
      uint64_t v68 = v29;
      uint64_t v69 = v12 - v123;
      unint64_t v70 = v69 + 1;
      if ((unint64_t)(v69 + 1) >> 62) {
LABEL_143:
      }
        sub_25B3FBC4C();
      if ((uint64_t)(v117 - (void)v123) >> 1 > v70) {
        unint64_t v70 = (uint64_t)(v117 - (void)v123) >> 1;
      }
      if (v117 - (unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v71 = v70;
      }
      if (v71)
      {
        unint64_t v71 = (unint64_t)sub_25B3FBC64(v71);
        unint64_t v28 = v7;
      }
      else
      {
        unint64_t v28 = v7;
        long long v5 = 0;
      }
      unint64_t v72 = (float *)(v71 + 4 * v69);
      float *v72 = v67;
      float32x4_t v31 = v72 + 1;
      if (v12 == v123)
      {
        float32x2_t v73 = v123;
      }
      else
      {
        float32x2_t v73 = v123;
        do
        {
          int v74 = *((_DWORD *)v12-- - 1);
          *((_DWORD *)v72-- - 1) = v74;
        }
        while (v12 != v123);
      }
      unint64_t v117 = v71 + 4 * (void)v5;
      if (v73) {
        operator delete(v73);
      }
      float32x4_t v123 = v72;
      float32x4_t v29 = v68;
    }
    else
    {
      unint64_t v28 = v7;
      *uint64_t v12 = v67;
      float32x4_t v31 = v12 + 1;
    }
    float v16 = v16 + v26;
    float v15 = v15 + v67;
    float v75 = vmuls_lane_f32(0.5, vaddq_f32(v139, v127), 2);
    float v14 = v14 + v75;
    if ((unint64_t)v13 < v116)
    {
      *v13++ = v75;
      goto LABEL_103;
    }
    float v77 = v29;
    uint64_t v78 = v13 - v122;
    unint64_t v79 = v78 + 1;
    if ((unint64_t)(v78 + 1) >> 62) {
      sub_25B3FBC4C();
    }
    if ((uint64_t)(v116 - (void)v122) >> 1 > v79) {
      unint64_t v79 = (uint64_t)(v116 - (void)v122) >> 1;
    }
    if (v116 - (unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v80 = v79;
    }
    if (v80) {
      unint64_t v80 = (unint64_t)sub_25B3FBC64(v80);
    }
    else {
      long long v5 = 0;
    }
    float v81 = (float *)(v80 + 4 * v78);
    float *v81 = v75;
    uint64_t v76 = v81 + 1;
    if (v13 == v122)
    {
      uint64_t v82 = v122;
    }
    else
    {
      uint64_t v82 = v122;
      do
      {
        int v83 = *((_DWORD *)v13-- - 1);
        *((_DWORD *)v81-- - 1) = v83;
      }
      while (v13 != v122);
    }
    unint64_t v116 = v80 + 4 * (void)v5;
    if (v82) {
      operator delete(v82);
    }
    float32x4_t v122 = v81;
    float32x4_t v29 = v77;
LABEL_121:
    ++v141;
    float32x4_t v10 = v29;
    id v11 = v30;
    uint64_t v12 = v31;
    float32x4_t v13 = v76;
    id v7 = v28;
  }
  uint64_t v84 = v7;
  if (v8 != v7)
  {
    unint64_t v85 = v8 - v7;
    float v86 = v16 / (float)v85;
    float v87 = v15 / (float)v85;
    if (v85 <= 1) {
      uint64_t v88 = 1;
    }
    else {
      uint64_t v88 = v8 - v7;
    }
    double v89 = (uint64_t *)v7;
    id v91 = v123;
    uint64_t v90 = v124;
    long long v92 = v122;
    float32x4_t v94 = v125;
    double v93 = __p;
    float v95 = v14 / (float)v85;
    do
    {
      uint64_t v96 = *v89++;
      float v97 = *v90;
      float v98 = *v91;
      float v99 = *v92;
      float32x2_t v100 = objc_msgSend_objectAtIndexedSubscript_(v143, v17, v96);
      objc_msgSend_quad(v100, v101, v102);
      float32x4_t v138 = v104;
      float32x4_t v140 = v103;
      float32x4_t v142 = v105;
      float32x4_t v133 = v106;

      float32x4_t v128 = *v94;
      float32x4_t v130 = *v93;
      uint64_t v108 = objc_msgSend_objectAtIndexedSubscript_(v143, v107, v96);
      float32x4_t v109 = (void *)v108;
      v110.f32[0] = (float)(v86 - v97) * 0.5;
      v111.i64[0] = 0;
      v111.i32[3] = 0;
      v111.f32[2] = v95 - v99;
      *(float *)v112.i32 = (float)(v87 - v98) * 0.5;
      float32x4_t v113 = (float32x4_t)vdupq_lane_s32(v112, 0);
      float32x4_t v114 = vmulq_n_f32(v128, *(float *)v112.i32);
      float32x4_t v115 = vmulq_f32(v128, vnegq_f32(v113));
      src[0] = vaddq_f32(v140, vaddq_f32(v111, vmlsq_lane_f32(v115, v130, v110, 0)));
      src[1] = vaddq_f32(v138, vaddq_f32(v111, vmlaq_n_f32(v115, v130, v110.f32[0])));
      _OWORD src[2] = vaddq_f32(v142, vaddq_f32(v111, vmlaq_n_f32(v114, v130, v110.f32[0])));
      src[3] = vaddq_f32(v133, vaddq_f32(v111, vmlsq_lane_f32(v114, v130, v110, 0)));
      if (v108) {
        objc_copyStruct((void *)(v108 + 272), src, 64, 1, 0);
      }

      ++v94;
      ++v93;
      ++v92;
      ++v91;
      ++v90;
      --v88;
    }
    while (v88);
  }
  if (v122) {
    operator delete(v122);
  }
  if (v123) {
    operator delete(v123);
  }
  if (v124) {
    operator delete(v124);
  }
  if (v125) {
    operator delete(v125);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v84) {
    operator delete(v84);
  }
}

void sub_25B4413C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17)
  {
    operator delete(a17);
    if (!a18)
    {
LABEL_5:
      if (!a19) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  else if (!a18)
  {
    goto LABEL_5;
  }
  operator delete(a18);
  if (!a19)
  {
LABEL_6:
    if (!a20) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a19);
  if (!a20)
  {
LABEL_7:
    if (!v34) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_13:
  operator delete(a20);
  if (!v34)
  {
LABEL_9:

    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(v34);
  goto LABEL_9;
}

uint64_t sub_25B441498()
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v0 = espresso_network_bind_cvpixelbuffer();
  if (v0)
  {
    int v1 = v0;
    if (qword_26A5020B0 != -1) {
      dispatch_once(&qword_26A5020B0, &unk_2708F1218);
    }
    uint64_t v2 = (id)qword_26A5020A8;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__str = 67109120;
      int v15 = v1;
      _os_log_debug_impl(&dword_25B3F3000, v2, OS_LOG_TYPE_DEBUG, "espresso_network_bind_cvpixelbuffer input failure (%d)", (uint8_t *)__str, 8u);
    }
  }
  for (uint64_t i = 0; i != 6; ++i)
  {
    snprintf(__str, 0x64uLL, "%s%u", "logits_", i);
    int v4 = espresso_network_bind_cvpixelbuffer();
    if (v4)
    {
      int v5 = v4;
      if (qword_26A5020B0 != -1) {
        dispatch_once(&qword_26A5020B0, &unk_2708F1218);
      }
      uint64_t v6 = (id)qword_26A5020A8;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        int v13 = v5;
        _os_log_debug_impl(&dword_25B3F3000, v6, OS_LOG_TYPE_DEBUG, "espresso_network_bind_cvpixelbuffer output logits failure (%d)", buf, 8u);
      }
    }
  }
  for (uint64_t j = 0; j != 6; ++j)
  {
    snprintf(__str, 0x64uLL, "%s%u", "offsets_box_", j);
    int v8 = espresso_network_bind_cvpixelbuffer();
    if (v8)
    {
      int v9 = v8;
      if (qword_26A5020B0 != -1) {
        dispatch_once(&qword_26A5020B0, &unk_2708F1218);
      }
      float32x4_t v10 = (id)qword_26A5020A8;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        int v13 = v9;
        _os_log_debug_impl(&dword_25B3F3000, v10, OS_LOG_TYPE_DEBUG, "espresso_network_bind_cvpixelbuffer output offsets failure (%d)", buf, 8u);
      }
    }
  }
  return espresso_plan_execute_sync();
}

void sub_25B441760(uint64_t a1)
{
  uint64_t v244 = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x261164650]();
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 32;
  uint64_t v231 = a1;
  uint64_t v4 = a1 + 80;
  id v214 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v202 = v4;
  uint64_t v203 = v3;
  do
  {
    CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(v3 + 8 * v2), 1uLL);
    CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(v4 + 8 * v2), 1uLL);
    BaseAddress = (__int16 *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(v3 + 8 * v2));
    int v5 = (__int16 *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(v4 + 8 * v2));
    unsigned int v6 = dword_25B5F1FBC[v2];
    uint64_t v7 = 10;
    if (v2 == 5) {
      uint64_t v7 = 5;
    }
    uint64_t v204 = v7;
    LODWORD(v7) = dword_25B5F1FD4[v2];
    uint64_t v8 = 2 * v7 * v6;
    uint64_t v216 = 3 * v7 * v6;
    uint64_t v218 = 0;
    unint64_t v207 = dword_25B5F1FBC[v2];
    int8x16_t v208 = &BaseAddress[(unint64_t)v8 / 2];
    uint64_t v212 = v7 * v6;
    if (v7 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v7;
    }
    uint64_t v206 = v7;
    if (v6 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v6;
    }
    uint64_t v205 = v9;
    do
    {
      for (uint64_t i = 0; i != v205; ++i)
      {
        for (unint64_t j = 0; j != v206; ++j)
        {
          if (j < v207)
          {
            uint64_t v11 = 0;
            uint64_t v12 = v208;
            _H0 = *BaseAddress;
            __asm { FCVT            S8, H0 }
            id v19 = *(float **)(v231 + 1296);
            *id v19 = _S8;
            do
            {
              _H0 = *v12;
              __asm { FCVT            S0, H0 }
              _S8 = fmaxf(_S8, _S0);
              v19[++v11] = _S0;
              uint64_t v12 = (__int16 *)((char *)v12 + v8);
            }
            while (v11 != 4);
            uint64_t v22 = 0;
            float v23 = 0.0;
            do
            {
              float v24 = expf(v19[v22] - _S8);
              v19[v22] = v24;
              float v23 = v23 + v24;
              ++v22;
            }
            while (v22 != 5);
            float32x4_t v25 = *(int **)(v231 + 1320);
            for (uint64_t k = *(int **)(v231 + 1328); v25 != k; ++v25)
            {
              uint64_t v27 = *v25;
              float v28 = *(float *)(*(void *)(v231 + 1296) + 4 * v27) / v23;
              if (v28 > 0.4)
              {
                uint64_t v29 = *(void *)(*(void *)(*(void *)(*(void *)(v231 + 1272) + 24 * v2) + 24 * v218) + 24 * i)
                    + 24 * j;
                uint64_t v239 = 0;
                id v240 = 0;
                uint64_t __p = 0;
                sub_25B3FCA58(&__p, *(const void **)v29, *(void *)(v29 + 8), (uint64_t)(*(void *)(v29 + 8) - *(void *)v29) >> 2);
                float v228 = v28;
                uint64_t v30 = v2;
                float32x4_t v31 = __p;
                _H15 = *v5;
                float v33 = *((float *)__p + 1);
                float v225 = *(float *)__p;
                _H8 = v5[v212];
                float v36 = *((float *)__p + 2);
                float v35 = *((float *)__p + 3);
                _H13 = v5[v8];
                _H14 = v5[v216];
                float32x2_t v39 = [_RSOrthographicDetector_DetectBox alloc];
                __asm { FCVT            S0, H14; float }
                _S14 = expf(_S0);
                __asm { FCVT            S0, H13; float }
                float v44 = expf(_S0);
                if (v39
                  && (_S13 = v44,
                      v233.receiver = v39,
                      v233.super_class = (Class)_RSOrthographicDetector_DetectBox,
                      (float32x4_t v46 = (double *)objc_msgSendSuper2(&v233, sel_init)) != 0))
                {
                  __asm
                  {
                    FCVT            H0, S14
                    FCVT            S0, H0
                  }
                  float v49 = v35 * _S0;
                  __asm
                  {
                    FCVT            S2, H8
                    FCVT            H3, S13
                    FCVT            S3, H3
                  }
                  float v53 = v36 * _S3;
                  __asm { FCVT            S5, H15 }
                  v46[3] = (float)(v225 + (float)(_S5 * v36)) + v53 * -0.5;
                  v46[4] = (float)(v33 + (float)(_S2 * v35)) + v49 * -0.5;
                  v46[5] = v53;
                  v46[6] = v49;
                  *((_DWORD *)v46 + 4) = v30;
                  *((_DWORD *)v46 + 5) = v27;
                  *((float *)v46 + 2) = v53 * v49;
                  *((float *)v46 + 3) = v228;
                  unint64_t v55 = v46;
                  objc_msgSend_addObject_(v214, v43, (uint64_t)v46, context);
                }
                else
                {
                  unint64_t v55 = 0;
                  objc_msgSend_addObject_(v214, v43, 0, context);
                }

                operator delete(v31);
                uint64_t v2 = v30;
              }
            }
          }
          ++v208;
          ++BaseAddress;
          ++v5;
        }
      }
      v208 += 4 * v212;
      BaseAddress += 4 * v212;
      v5 += v216;
      ++v218;
    }
    while (v218 != v204);
    uint64_t v3 = v203;
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(v203 + 8 * v2), 1uLL);
    uint64_t v4 = v202;
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(v202 + 8 * v2++), 1uLL);
  }
  while (v2 != 6);
  uint64_t v58 = objc_msgSend_copy(v214, v56, v57);

  uint64_t v59 = *(void **)(v231 + 1368);
  *(void *)(v231 + 1368) = v58;

  id v60 = *(id *)(v231 + 1368);
  id v219 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v62 = 0;
  int8x16_t v210 = (void *)MEMORY[0x263EF8330];
  long long v215 = v60;
  do
  {
    uint64_t __p = v210;
    uint64_t v239 = 3221225472;
    id v240 = sub_25B443AF8;
    long long v241 = &unk_2654950A8;
    uint64_t v211 = v62;
    uint64_t v242 = v62;
    float32x4_t v213 = objc_msgSend_predicateWithBlock_(MEMORY[0x263F08A98], v61, (uint64_t)&__p, context);
    float v217 = objc_msgSend_filteredArrayUsingPredicate_(v60, v63, (uint64_t)v213);
    uint64_t v65 = objc_msgSend_sortDescriptorWithKey_ascending_(MEMORY[0x263F08B30], v64, @"confidence", 0);
    unint64_t v237 = v65;
    float v67 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v66, (uint64_t)&v237, 1);
    unint64_t v221 = objc_msgSend_sortedArrayUsingDescriptors_(v217, v68, (uint64_t)v67);

    unint64_t v71 = objc_msgSend_count(v221, v69, v70);
    unsigned __int8 v232 = 0;
    sub_25B443750(&v233, v71, &v232);
    if (v71)
    {
      unint64_t v73 = 0;
      do
      {
        unint64_t v74 = v73 >> 6;
        uint64_t v75 = 1 << v73;
        if ((*((void *)v233.receiver + (v73 >> 6)) & (1 << v73)) != 0)
        {
          ++v73;
        }
        else
        {
          uint64_t v77 = objc_msgSend_objectAtIndexedSubscript_(v221, v72, v73);
          unint64_t v78 = ++v73;
          if (v73 < v71)
          {
            do
            {
              if ((*((void *)v233.receiver + (v78 >> 6)) & (1 << v78)) == 0)
              {
                objc_msgSend_objectAtIndexedSubscript_(v221, v76, v78);
                unint64_t v79 = (float64x2_t *)(id)objc_claimAutoreleasedReturnValue();
                unint64_t v80 = v79;
                if (v77)
                {
                  if (v79)
                  {
                    v81.f64[0] = v79[1].f64[1];
                    v81.f64[1] = v79[3].f64[0];
                    int32x2_t v229 = (int32x2_t)vcvt_f32_f64(v81);
                    int32x2_t v82 = (int32x2_t)vcvt_f32_f64(v79[2]);
                  }
                  else
                  {
                    int32x2_t v82 = 0;
                    int32x2_t v229 = 0;
                  }
                  *(_OWORD *)long long v223 = *(_OWORD *)(v77 + 40);
                  float64x2_t v226 = *(float64x2_t *)(v77 + 24);
                  float v83 = *(float *)(v77 + 8);

                  int32x2_t v84 = vrev64_s32(v82);
                  float32x2_t v85 = vadd_f32((float32x2_t)v84, (float32x2_t)v229);
                  float32x2_t v86 = vcvt_f32_f64(vaddq_f64(v226, *(float64x2_t *)v223));
                  float32x2_t v87 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v86, v85), (int8x8_t)v85, (int8x8_t)v86);
                  float32x2_t v88 = vcvt_f32_f64(v226);
                  int32x2_t v89 = (int32x2_t)vmaxnm_f32(vsub_f32(v87, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v88, (float32x2_t)__PAIR64__(v84.u32[1], v229.u32[0])), (int8x8_t)v88, (int8x8_t)__PAIR64__(v84.u32[1], v229.u32[0]))), 0);
                  float32x2_t v90 = vmul_f32((float32x2_t)vzip1_s32(v84, v89), (float32x2_t)vzip2_s32(v229, v89));
                  if ((float)(v90.f32[1] / (float)((float)(v90.f32[0] + v83) - v90.f32[1])) > 0.1) {
                    *((void *)v233.receiver + (v78 >> 6)) |= 1 << v78;
                  }
                }
                else
                {
                }
              }
              ++v78;
            }
            while (v71 != v78);
          }
          *((void *)v233.receiver + v74) |= v75;
          objc_msgSend_addObject_(v219, v76, v77);
        }
      }
      while (v73 != v71);
    }
    if (v233.receiver) {
      operator delete(v233.receiver);
    }

    uint64_t v62 = v211 + 1;
    id v60 = v215;
  }
  while (v211 != 3);

  id v91 = *(void **)(v231 + 1368);
  *(void *)(v231 + 1368) = v219;

  id v92 = *(id *)(v231 + 1368);
  id v94 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v95 = 0;
  uint64_t v96 = (void *)MEMORY[0x263EF8330];
  do
  {
    int v97 = *(_DWORD *)(*(void *)(v231 + 1424) + 4 * v95);
    uint64_t __p = v96;
    uint64_t v239 = 3221225472;
    id v240 = sub_25B443A88;
    long long v241 = &unk_2654950C8;
    int v243 = v97;
    uint64_t v242 = v95;
    float v98 = objc_msgSend_predicateWithBlock_(MEMORY[0x263F08A98], v93, (uint64_t)&__p);
    float32x2_t v100 = objc_msgSend_filteredArrayUsingPredicate_(v92, v99, (uint64_t)v98);

    for (unint64_t m = 0; m < objc_msgSend_count(v100, v101, v102); ++m)
    {
      float32x4_t v105 = objc_msgSend_objectAtIndexedSubscript_(v100, v104, m);
      objc_msgSend_addObject_(v94, v106, (uint64_t)v105);
    }
    ++v95;
  }
  while (v95 != 4);

  float32x2_t v107 = *(void **)(v231 + 1368);
  *(void *)(v231 + 1368) = v94;

  id v108 = *(id *)(v231 + 1368);
  objc_super v233 = (objc_super)0;
  long long v234 = 0u;
  long long v235 = 0u;
  long long v236 = 0u;
  id v109 = v108;
  uint64_t v112 = objc_msgSend_countByEnumeratingWithState_objects_count_(v109, v110, (uint64_t)&v233, &__p, 16);
  if (v112)
  {
    uint64_t v113 = *(void *)v234;
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      for (uint64_t n = 0; n != v112; ++n)
      {
        if (*(void *)v234 != v113) {
          objc_enumerationMutation(v109);
        }
        uint64_t v116 = *((void *)v233.super_class + n);
        if (v116)
        {
          float64x2_t v117 = *(float64x2_t *)(v116 + 24);
          float32x2_t v118 = vcvt_f32_f64(vaddq_f64(v117, *(float64x2_t *)(v116 + 40)));
          *(float32x2_t *)&v117.f64[0] = vcvt_f32_f64((float64x2_t)vbicq_s8((int8x16_t)v117, (int8x16_t)vcltzq_f64(v117)));
          *(float64x2_t *)(v116 + 24) = vcvtq_f64_f32(*(float32x2_t *)&v117.f64[0]);
          *(float64x2_t *)(v116 + 40) = vcvtq_f64_f32(vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v118, _D8), (int8x8_t)_D8, (int8x8_t)v118), *(float32x2_t *)&v117.f64[0]));
        }
      }
      uint64_t v112 = objc_msgSend_countByEnumeratingWithState_objects_count_(v109, v111, (uint64_t)&v233, &__p, 16);
    }
    while (v112);
  }

  unint64_t v119 = *(void **)(v231 + 1368);
  *(void *)(v231 + 1368) = v109;

  int v120 = *(unsigned __int8 *)(v231 + 1432);
  id v121 = *(id *)(v231 + 1368);
  if (v120)
  {
    float32x4_t v123 = v121;
    float32x4_t v124 = objc_msgSend_sortedArrayUsingComparator_(v121, v122, (uint64_t)&unk_2708F13F8);
    id v125 = objc_alloc_init(MEMORY[0x263EFF980]);
    unint64_t v128 = objc_msgSend_count(v124, v126, v127);
    LOBYTE(v233.receiver) = 1;
    sub_25B443750(&__p, v128, (unsigned __int8 *)&v233);
    unint64_t v131 = 0;
    uint64_t v132 = 1;
    while (v131 < objc_msgSend_count(v124, v129, v130))
    {
      if ((*(void *)((char *)__p + ((v131 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v131))
      {
        objc_msgSend_objectAtIndexedSubscript_(v124, v129, v131);
        float32x4_t v133 = (double *)objc_claimAutoreleasedReturnValue();
        if (v133)
        {
          CGFloat v135 = v133[3];
          CGFloat v134 = v133[4];
          CGFloat v136 = v133[5];
          CGFloat v137 = v133[6];
        }
        else
        {
          CGFloat v134 = 0.0;
          CGFloat v136 = 0.0;
          CGFloat v137 = 0.0;
          CGFloat v135 = 0.0;
        }

        for (iuint64_t i = v132; ii < objc_msgSend_count(v124, v129, v130); ++ii)
        {
          if ((*((void *)__p + (ii >> 6)) & (1 << ii)) != 0)
          {
            objc_msgSend_objectAtIndexedSubscript_(v124, v129, ii);
            float32x4_t v139 = (double *)objc_claimAutoreleasedReturnValue();
            if (v139)
            {
              CGFloat v141 = v139[3];
              CGFloat v140 = v139[4];
              CGFloat v142 = v139[5];
              CGFloat v143 = v139[6];
            }
            else
            {
              CGFloat v140 = 0.0;
              CGFloat v142 = 0.0;
              CGFloat v143 = 0.0;
              CGFloat v141 = 0.0;
            }

            v246.origin.double x = v135;
            v246.origin.y = v134;
            v246.size.double width = v136;
            v246.size.double height = v137;
            v252.origin.double x = v141;
            v252.origin.y = v140;
            v252.size.double width = v142;
            v252.size.double height = v143;
            CGRect v247 = CGRectIntersection(v246, v252);
            v247.origin.y = v134;
            v247.origin.double x = v135;
            v253.origin.y = v140;
            double width = v247.size.width;
            v247.size.double width = v136;
            v253.size.double width = v142;
            double height = v247.size.height;
            v247.size.double height = v137;
            v253.origin.double x = v141;
            v253.size.double height = v143;
            CGRect v248 = CGRectUnion(v247, v253);
            *(float *)&v248.origin.double x = height * width / (v248.size.height * v248.size.width);
            if (*(float *)&v248.origin.x >= 0.5) {
              *((void *)__p + (ii >> 6)) &= ~(1 << ii);
            }
          }
        }
      }
      ++v131;
      ++v132;
    }
    for (junint64_t j = 0; ; ++jj)
    {
      unint64_t v147 = objc_msgSend_count(v124, v129, v130);
      float32x4_t v148 = __p;
      if (jj >= v147) {
        break;
      }
      if ((*(void *)((char *)__p + ((jj >> 3) & 0x1FFFFFFFFFFFFFF8)) >> jj))
      {
        float32x4_t v149 = objc_msgSend_objectAtIndexedSubscript_(v124, v129, jj);
        objc_msgSend_addObject_(v125, v150, (uint64_t)v149);
      }
    }
  }
  else
  {
    float32x4_t v123 = v121;
    float32x4_t v124 = objc_msgSend_sortedArrayUsingComparator_(v121, v122, (uint64_t)&unk_2708F1418);
    id v125 = objc_alloc_init(MEMORY[0x263EFF980]);
    unint64_t v153 = objc_msgSend_count(v124, v151, v152);
    LOBYTE(v233.receiver) = 1;
    sub_25B443750(&__p, v153, (unsigned __int8 *)&v233);
    for (kuint64_t k = 0; kk < objc_msgSend_count(v124, v154, v155); ++kk)
    {
      if ((*(void *)((char *)__p + ((kk >> 3) & 0x1FFFFFFFFFFFFFF8)) >> kk))
      {
        uint64_t v157 = objc_msgSend_objectAtIndexedSubscript_(v124, v154, kk);
        if (v157)
        {
          double v158 = *(double *)(v157 + 24);
          double v159 = *(double *)(v157 + 32);
          double v160 = *(double *)(v157 + 40);
          double v230 = *(double *)(v157 + 48);
        }
        else
        {
          double v160 = 0.0;
          double v230 = 0.0;
          double v159 = 0.0;
          double v158 = 0.0;
        }
        double v224 = v160;
        unint64_t v161 = kk;
        while (2)
        {

          double v227 = v158;
          do
          {
            while (1)
            {
              do
              {
                if (++v161 >= objc_msgSend_count(v124, v154, v155)) {
                  goto LABEL_128;
                }
              }
              while ((*((void *)__p + (v161 >> 6)) & (1 << v161)) == 0);
              uint64_t v162 = objc_msgSend_objectAtIndexedSubscript_(v124, v154, v161);
              if (v162)
              {
                CGFloat v163 = *(double *)(v162 + 24);
                double v164 = *(double *)(v162 + 32);
                CGFloat v165 = *(double *)(v162 + 40);
                double v166 = *(double *)(v162 + 48);
              }
              else
              {
                double v164 = 0.0;
                CGFloat v165 = 0.0;
                double v166 = 0.0;
                CGFloat v163 = 0.0;
              }

              v249.origin.double x = v227;
              v249.origin.y = v159;
              v249.size.double width = v224;
              v249.size.double height = v230;
              v254.origin.double x = v163;
              v254.origin.y = v164;
              v254.size.double width = v165;
              v254.size.double height = v166;
              CGRect v250 = CGRectIntersection(v249, v254);
              v250.origin.double x = v227;
              v255.size.double width = v165;
              double v167 = v250.size.width;
              double v168 = v250.size.height;
              v255.origin.double x = v163;
              double v169 = v159;
              v250.origin.y = v159;
              v250.size.double width = v224;
              v250.size.double height = v230;
              double x = v255.origin.x;
              v255.origin.y = v164;
              double v171 = v255.size.width;
              v255.size.double height = v166;
              CGRect v251 = CGRectUnion(v250, v255);
              float v172 = v168 * v167 / (v251.size.height * v251.size.width);
              if (v172 < 0.5) {
                break;
              }
              *((void *)__p + (v161 >> 6)) &= ~(1 << v161);
            }
          }
          while (v172 <= 0.0);
          float v173 = v159;
          float v174 = v173;
          float v175 = v169 + v230;
          float v176 = v164;
          float v177 = v164 + v166;
          float v178 = v227;
          float v179 = v227 + v224;
          float v180 = x;
          double v181 = x + v171;
          float v182 = v179;
          float v183 = v176;
          float v184 = v181;
          float v185 = vabds_f32(v176, v175);
          float v186 = v177;
          float v187 = vabds_f32(v177, v174);
          if (v174 >= v183) {
            float v185 = v187;
          }
          float v188 = vabds_f32(v180, v179);
          float v189 = vabds_f32(v184, v178);
          if (v178 >= v180) {
            float v188 = v189;
          }
          float v222 = v186;
          if (v185 <= 0.04464 || v188 <= 0.04464)
          {
            float v190 = v167 / v251.size.width;
            float v191 = v168 / v251.size.height;
            if ((float)(v190 - v191) > 0.3 && v185 <= 0.04464) {
              goto LABEL_112;
            }
            if ((float)(v191 - v190) <= 0.3 || v188 > 0.04464)
            {
              if (v185 <= 0.04464)
              {
LABEL_112:
                if (v174 >= v183)
                {
                  if (v183 < v174)
                  {
                    float v174 = (float)(v174 + v186) * 0.5;
                    float v222 = v174;
                  }
                }
                else
                {
                  float v183 = (float)(v183 + v175) * 0.5;
                  float v175 = v183;
                }
              }
            }
            else if (v178 >= v180)
            {
              if (v180 < v178)
              {
                float v184 = (float)(v178 + v184) * 0.5;
                float v178 = v184;
              }
            }
            else
            {
              float v180 = (float)(v180 + v179) * 0.5;
              float v182 = v180;
            }
          }
          float v192 = v175;
          objc_msgSend_objectAtIndexedSubscript_(v124, v154, kk);
          unint64_t v193 = (double *)objc_claimAutoreleasedReturnValue();
          double v158 = v178;
          float v194 = v174;
          double v159 = v174;
          double v230 = (float)(v192 - v194);
          if (v193)
          {
            v193[3] = v158;
            v193[4] = v159;
            v193[5] = (float)(v182 - v178);
            v193[6] = v230;
          }
          double v224 = (float)(v182 - v178);

          uint64_t v157 = objc_msgSend_objectAtIndexedSubscript_(v124, v195, v161);
          if (v157)
          {
            *(double *)(v157 + 24) = v180;
            *(double *)(v157 + 32) = v183;
            *(double *)(v157 + 40) = (float)(v184 - v180);
            *(double *)(v157 + 48) = (float)(v222 - v183);
          }
          continue;
        }
      }
LABEL_128:
      ;
    }
    for (munint64_t m = 0; ; ++mm)
    {
      unint64_t v197 = objc_msgSend_count(v124, v154, v155);
      float32x4_t v148 = __p;
      if (mm >= v197) {
        break;
      }
      if ((*(void *)((char *)__p + ((mm >> 3) & 0x1FFFFFFFFFFFFFF8)) >> mm))
      {
        float v198 = objc_msgSend_objectAtIndexedSubscript_(v124, v154, mm);
        objc_msgSend_addObject_(v125, v199, (uint64_t)v198);
      }
    }
  }
  if (v148) {
    operator delete(v148);
  }

  uint64_t v200 = *(void **)(v231 + 1368);
  *(void *)(v231 + 1368) = v125;
}

void sub_25B4426E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  _Unwind_Resume(a1);
}

void sub_25B4428B8(float *a1, float32x4_t *a2, uint64_t a3, char a4)
{
void *sub_25B443228(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_25B3FCA18(a1, a2);
    BOOL v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_25B443284(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_25B4432A0(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  unsigned int v6 = *(_DWORD **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v6 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_25B3FBC4C();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    BOOL v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v13 = (unint64_t)sub_25B3FBC64(v13);
      uint64_t v8 = *(_DWORD **)v4;
      unsigned int v6 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      uint64_t v14 = 0;
    }
    int v15 = (_DWORD *)(v13 + 4 * v9);
    unint64_t v16 = v13 + 4 * v14;
    *int v15 = *a2;
    uint64_t v7 = v15 + 1;
    while (v6 != v8)
    {
      int v17 = *--v6;
      *--int v15 = v17;
    }
    *(void *)uint64_t v4 = v15;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

float32x4_t sub_25B443384(__n128 *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t result = *a3;
  unsigned __int8 v5 = vmovn_s32(vcgtq_f32(*a2, *a3)).u8[0];
  if (COERCE_FLOAT(*a2) >= a1->n128_f32[0])
  {
    if (v5)
    {
      float32x4_t result = *a2;
      *a2 = *a3;
      *a3 = result;
      if (a2->f32[0] < a1->n128_f32[0])
      {
        __n128 v7 = *a1;
        *a1 = *(__n128 *)a2;
        *a2 = (float32x4_t)v7;
        float32x4_t result = *a3;
      }
    }
  }
  else
  {
    float32x4_t v6 = *(float32x4_t *)a1;
    if (v5)
    {
      *a1 = *(__n128 *)a3;
LABEL_9:
      *a3 = v6;
      result.i64[0] = v6.i64[0];
      goto LABEL_10;
    }
    *a1 = *(__n128 *)a2;
    *a2 = v6;
    float32x4_t result = *a3;
    if (COERCE_FLOAT(*a3) < v6.f32[0])
    {
      *a2 = *a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (a4->f32[0] < result.f32[0])
  {
    float32x4_t result = *a3;
    *a3 = *a4;
    *a4 = result;
    result.i32[0] = a3->i32[0];
    if (a3->f32[0] < a2->f32[0])
    {
      float32x4_t result = *a2;
      *a2 = *a3;
      *a3 = result;
      result.i32[0] = a2->i32[0];
      if (a2->f32[0] < a1->n128_f32[0])
      {
        float32x4_t result = *(float32x4_t *)a1;
        *a1 = *(__n128 *)a2;
        *a2 = result;
      }
    }
  }
  return result;
}

BOOL sub_25B44347C(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].f32[0] < *(float *)a1)
      {
        __n128 v6 = *(__n128 *)a1;
        goto LABEL_6;
      }
      return result;
    case 3:
      float v7 = *(float *)(a1 + 16);
      float v8 = a2[-1].f32[0];
      if (v7 >= *(float *)a1)
      {
        if (v8 < v7)
        {
          float32x4_t v22 = *(float32x4_t *)(a1 + 16);
          *(float32x4_t *)(a1 + 16) = a2[-1];
          a2[-1] = v22;
          if (*(float *)(a1 + 16) < *(float *)a1)
          {
            __n128 v23 = *(__n128 *)a1;
            *(_OWORD *)a1 = *(_OWORD *)(a1 + 16);
            *(__n128 *)(a1 + 16) = v23;
          }
        }
      }
      else
      {
        __n128 v6 = *(__n128 *)a1;
        if (v8 < v7)
        {
LABEL_6:
          *(float32x4_t *)a1 = a2[-1];
LABEL_7:
          a2[-1] = (float32x4_t)v6;
          return result;
        }
        *(_OWORD *)a1 = *(_OWORD *)(a1 + 16);
        *(__n128 *)(a1 + 16) = v6;
        if (a2[-1].f32[0] < v6.n128_f32[0])
        {
          *(float32x4_t *)(a1 + 16) = a2[-1];
          goto LABEL_7;
        }
      }
      return result;
    case 4:
      sub_25B443384((__n128 *)a1, (float32x4_t *)(a1 + 16), (float32x4_t *)(a1 + 32), a2 - 1);
      return 1;
    case 5:
      int v15 = (float *)(a1 + 32);
      unint64_t v16 = (float32x4_t *)(a1 + 48);
      sub_25B443384((__n128 *)a1, (float32x4_t *)(a1 + 16), (float32x4_t *)(a1 + 32), (float32x4_t *)(a1 + 48));
      if (a2[-1].f32[0] < *(float *)(a1 + 48))
      {
        float32x4_t v17 = *v16;
        *unint64_t v16 = a2[-1];
        a2[-1] = v17;
        if (v16->f32[0] < *v15)
        {
          float32x4_t v18 = *(float32x4_t *)v15;
          float32x4_t v19 = *v16;
          *(float32x4_t *)int v15 = *v16;
          *unint64_t v16 = v18;
          if (v19.f32[0] < *(float *)(a1 + 16))
          {
            long long v20 = *(_OWORD *)(a1 + 16);
            *(float32x4_t *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 32) = v20;
            if (v19.f32[0] < *(float *)a1)
            {
              __n128 v21 = *(__n128 *)a1;
              *(float32x4_t *)a1 = v19;
              *(__n128 *)(a1 + 16) = v21;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = (float *)(a1 + 32);
      float32x4_t v10 = *(float32x4_t *)(a1 + 32);
      __n128 v11 = *(__n128 *)a1;
      float32x4_t v12 = *(float32x4_t *)(a1 + 16);
      unsigned __int8 v13 = vmovn_s32(vcgtq_f32(v12, v10)).u8[0];
      if (vmovn_s32(vcgtq_f32(*(float32x4_t *)a1, v12)).u8[0])
      {
        __n128 v14 = *(__n128 *)a1;
        if (v13)
        {
          *(_OWORD *)a1 = *(_OWORD *)(a1 + 32);
        }
        else
        {
          *(_OWORD *)a1 = *(_OWORD *)(a1 + 16);
          *(__n128 *)(a1 + 16) = v14;
          if (v10.f32[0] >= v14.n128_f32[0]) {
            goto LABEL_28;
          }
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a1 + 32);
        }
        *(__n128 *)(a1 + 32) = v14;
      }
      else if (v13)
      {
        long long v25 = *(_OWORD *)(a1 + 16);
        long long v24 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(a1 + 16) = v24;
        *(_OWORD *)(a1 + 32) = v25;
        if (*(float *)&v24 < v11.n128_f32[0])
        {
          __n128 v26 = *(__n128 *)a1;
          *(_OWORD *)a1 = v24;
          *(__n128 *)(a1 + 16) = v26;
        }
      }
LABEL_28:
      float32x4_t v27 = (float *)(a1 + 48);
      if ((float32x4_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v28 = 0;
      int v29 = 0;
      while (1)
      {
        if (*v27 < *v9)
        {
          long long v30 = *(_OWORD *)v27;
          uint64_t v31 = v28;
          while (1)
          {
            *(_OWORD *)(a1 + v31 + 48) = *(_OWORD *)(a1 + v31 + 32);
            if (v31 == -32) {
              break;
            }
            float v32 = *(float *)(a1 + v31 + 16);
            v31 -= 16;
            if (*(float *)&v30 >= v32)
            {
              float v33 = (_OWORD *)(a1 + v31 + 48);
              goto LABEL_36;
            }
          }
          float v33 = (_OWORD *)a1;
LABEL_36:
          _OWORD *v33 = v30;
          if (++v29 == 8) {
            return v27 + 4 == (float *)a2;
          }
        }
        uint64_t v9 = v27;
        v28 += 16;
        v27 += 4;
        if (v27 == (float *)a2) {
          return 1;
        }
      }
  }
}

void *sub_25B443750(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_25B40DE18(a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          sub_25B443824(&v13, a2);
        }
        else {
          sub_25B4438D8((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *sub_25B443824(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  unsigned __int8 v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *BOOL result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    BOOL result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_25B4438D8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unsigned __int8 v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t sub_25B443988(uint64_t a1, void *a2, void *a3)
{
  int v4 = a2;
  unsigned __int8 v5 = a3;
  float v6 = 0.0;
  float v7 = 0.0;
  if (v4) {
    float v7 = v4[3];
  }
  if (v5) {
    float v6 = v5[3];
  }
  if (v7 <= v6)
  {
    float v9 = 0.0;
    float v10 = 0.0;
    if (v4) {
      float v10 = v4[3];
    }
    if (v5) {
      float v9 = v5[3];
    }
    uint64_t v8 = v10 < v9;
  }
  else
  {
    uint64_t v8 = -1;
  }

  return v8;
}

uint64_t sub_25B443A08(uint64_t a1, void *a2, void *a3)
{
  int v4 = a2;
  unsigned __int8 v5 = a3;
  float v6 = 0.0;
  float v7 = 0.0;
  if (v4) {
    float v7 = v4[3];
  }
  if (v5) {
    float v6 = v5[3];
  }
  if (v7 <= v6)
  {
    float v9 = 0.0;
    float v10 = 0.0;
    if (v4) {
      float v10 = v4[3];
    }
    if (v5) {
      float v9 = v5[3];
    }
    uint64_t v8 = v10 < v9;
  }
  else
  {
    uint64_t v8 = -1;
  }

  return v8;
}

BOOL sub_25B443A88(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  if (!v3)
  {
    if (*(float *)(a1 + 40) > 0.0) {
      goto LABEL_3;
    }
    uint64_t v5 = 0;
LABEL_5:
    BOOL v4 = *(void *)(a1 + 32) + 1 == v5;
    goto LABEL_6;
  }
  if (v3[3] >= *(float *)(a1 + 40))
  {
    uint64_t v5 = *((int *)v3 + 5);
    goto LABEL_5;
  }
LABEL_3:
  BOOL v4 = 0;
LABEL_6:

  return v4;
}

BOOL sub_25B443AF8(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = *(int *)(a2 + 20);
  }
  else {
    uint64_t v2 = 0;
  }
  return *(void *)(a1 + 32) + 1 == v2;
}

void sub_25B443B1C(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_25B3FBC4C();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    BOOL v4 = (char *)sub_25B3FCAD4(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    float v7 = &v4[8 * v6];
    float v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    float v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

__n128 sub_25B443BC4(uint64_t *a1, float32x4_t *a2)
{
  float32x4_t v3 = vsubq_f32(*a2, a2[3]);
  float32x4_t v4 = vmulq_f32(v3, v3);
  float v5 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0]);
  float32x4_t v6 = vsubq_f32(*a2, a2[1]);
  float32x4_t v7 = vmulq_f32(v6, v6);
  float v8 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]);
  float32x4_t v9 = vsubq_f32(*a2, a2[4]);
  float32x4_t v10 = vmulq_f32(v9, v9);
  float v11 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  float32x4_t v15 = vmulq_f32(vaddq_f32(*a2, a2[6]), v10);
  float v12 = atan2f(v6.f32[0], v6.f32[1]);
  int v16 = 0;
  sub_25B400C5C(a1, 7uLL, &v16);
  uint64_t v13 = *a1;
  __n128 result = (__n128)v15;
  *(void *)uint64_t v13 = v15.i64[0];
  *(_DWORD *)(v13 + 8) = v15.i32[2];
  *(float *)(v13 + 12) = v5;
  *(float *)(v13 + 16) = v8;
  *(float *)(v13 + 20) = v11;
  *(float *)(v13 + 24) = v12;
  return result;
}

float sub_25B443CA8(_OWORD *a1)
{
  uint64_t v2 = operator new(0x80uLL);
  long long v3 = a1[5];
  v2[4] = a1[4];
  v2[5] = v3;
  long long v4 = a1[7];
  v2[6] = a1[6];
  v2[7] = v4;
  long long v5 = a1[1];
  _OWORD *v2 = *a1;
  v2[1] = v5;
  long long v6 = a1[3];
  v2[2] = a1[2];
  v2[3] = v6;
  sub_25B443228(__p, 0x18uLL);
  float32x4_t v7 = __p[0];
  uint64_t v8 = *(void *)v2;
  *((_DWORD *)__p[0] + 2) = *((_DWORD *)v2 + 2);
  void *v7 = v8;
  float32x4_t v9 = (char *)__p[0];
  LODWORD(v8) = *((_DWORD *)v2 + 6);
  *(void *)((char *)__p[0] + 12) = *((void *)v2 + 2);
  *((_DWORD *)v9 + 5) = v8;
  LODWORD(v8) = *((_DWORD *)v2 + 10);
  *((void *)v9 + 3) = *((void *)v2 + 4);
  *((_DWORD *)v9 + 8) = v8;
  LODWORD(v8) = *((_DWORD *)v2 + 14);
  *(void *)(v9 + 36) = *((void *)v2 + 6);
  *((_DWORD *)v9 + 11) = v8;
  LODWORD(v8) = *((_DWORD *)v2 + 18);
  *((void *)v9 + 6) = *((void *)v2 + 8);
  *((_DWORD *)v9 + 14) = v8;
  LODWORD(v8) = *((_DWORD *)v2 + 22);
  *(void *)(v9 + 60) = *((void *)v2 + 10);
  *((_DWORD *)v9 + 17) = v8;
  LODWORD(v8) = *((_DWORD *)v2 + 26);
  *((void *)v9 + 9) = *((void *)v2 + 12);
  *((_DWORD *)v9 + 20) = v8;
  LODWORD(v8) = *((_DWORD *)v2 + 30);
  *(void *)(v9 + 84) = *((void *)v2 + 14);
  *((_DWORD *)v9 + 23) = v8;
  operator delete(v2);
  float32x4_t v10 = (const float *)__p[0];
  sub_25B443228(__C, 3uLL);
  float v16 = 0.0;
  vDSP_vsub(v10 + 3, 1, v10, 1, __C[0], 1, 3uLL);
  vDSP_svesq(__C[0], 1, &v16, 3uLL);
  float v11 = v16;
  vDSP_vsub(v10 + 6, 1, v10 + 3, 1, __C[0], 1, 3uLL);
  vDSP_svesq(__C[0], 1, &v16, 3uLL);
  float v12 = v16;
  vDSP_vsub(v10 + 12, 1, v10, 1, __C[0], 1, 3uLL);
  vDSP_svesq(__C[0], 1, &v16, 3uLL);
  float v13 = v16;
  if (__C[0])
  {
    __C[1] = __C[0];
    operator delete(__C[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return (float)(sqrtf(v11) * sqrtf(v12)) * sqrtf(v13);
}

void sub_25B443E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B443EE4(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  float32x4_t v6 = *a2;
  float32x4_t v7 = *a3;
  float32x4_t v8 = vsubq_f32(*a2, *a3);
  float32x4_t v9 = vmulq_f32(v8, v8);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]) <= 0.00001)
  {
    uint64_t v74 = 1;
    while (v74 != 8)
    {
      uint64_t v75 = v74;
      float32x4_t v76 = vsubq_f32(a2[v74], a3[v74]);
      float32x4_t v77 = vmulq_f32(v76, v76);
      ++v74;
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 2), vaddq_f32(v77, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 1))).f32[0]) > 0.00001)
      {
        if ((unint64_t)(v75 - 1) < 7) {
          goto LABEL_2;
        }
        break;
      }
    }
    __asm { FMOV            V8.2S, #1.0 }
    *(void *)a1 = _D8;
    *(float *)(a1 + 8) = sub_25B443CA8(a2);
    *(void *)(a1 + 12) = _D8;
    *(_DWORD *)(a1 + 20) = 1065353216;
  }
  else
  {
LABEL_2:
    float32x4_t v10 = a2[2];
    v6.i64[1] = a2[1].i64[0];
    v10.i64[1] = a2[3].i64[0];
    float32x4_t v11 = a3[2];
    v7.i64[1] = a3[1].i64[0];
    v102[0] = v6;
    v102[1] = v10;
    v11.i64[1] = a3[3].i64[0];
    v101[0] = v7;
    v101[1] = v11;
    sub_25B53760C(&v86, v102, 4uLL);
    sub_25B53760C(&v84, v101, 4uLL);
    uint64_t v92 = 0;
    uint64_t v93 = &v92;
    uint64_t v94 = 0x4812000000;
    uint64_t v95 = sub_25B5376A0;
    float32x4_t v96 = sub_25B5376C4;
    int v97 = &unk_25B6196B3;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    uint64_t __p = 0;
    sub_25B400390(&__p, v86, (uint64_t)v87, (v87 - (unsigned char *)v86) >> 3);
    v88[0] = MEMORY[0x263EF8330];
    v88[1] = 3221225472;
    int32x2_t v89 = sub_25B5376DC;
    int64_t v90 = &unk_265495338;
    int64_t v91 = &v92;
    uint64_t v12 = v85 - (unsigned char *)v84;
    if (v85 != v84)
    {
      uint64_t v13 = 0;
      unint64_t v14 = v12 >> 3;
      if ((unint64_t)(v12 >> 3) <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = v12 >> 3;
      }
      unint64_t v16 = 1;
      do
      {
        v89((uint64_t)v88, *((double *)v84 + v13++), *((double *)v84 + v16));
        unint64_t v16 = (v16 + 1) % v14;
      }
      while (v15 != v13);
    }
    sub_25B53760C(&v82, (const void *)v93[6], (v93[7] - v93[6]) >> 3);
    _Block_object_dispose(&v92, 8);
    if (__p)
    {
      uint64_t v99 = __p;
      operator delete(__p);
    }
    _S0 = 0.0;
    _S1 = 0.0;
    unint64_t v19 = (v87 - (unsigned char *)v86) >> 3;
    if (v87 != v86)
    {
      if (v19 <= 1) {
        uint64_t v20 = 1;
      }
      else {
        uint64_t v20 = (v87 - (unsigned char *)v86) >> 3;
      }
      unint64_t v21 = 1;
      float32x4_t v22 = (uint64_t *)v86;
      do
      {
        uint64_t v23 = *v22++;
        _V2.S[1] = HIDWORD(v23);
        _D3 = *((void *)v86 + v21);
        __asm { FMLS            S1, S3, V2.S[1] }
        unint64_t v21 = (v21 + 1) % v19;
        --v20;
      }
      while (v20);
    }
    float v30 = fabsf(_S1);
    uint64_t v31 = v84;
    unint64_t v32 = (v85 - (unsigned char *)v84) >> 3;
    if (v85 != v84)
    {
      if (v32 <= 1) {
        uint64_t v33 = 1;
      }
      else {
        uint64_t v33 = (v85 - (unsigned char *)v84) >> 3;
      }
      unint64_t v34 = 1;
      float32x4_t v35 = (uint64_t *)v84;
      do
      {
        uint64_t v36 = *v35++;
        _V3.S[1] = HIDWORD(v36);
        _D4 = *((void *)v84 + v34);
        __asm { FMLS            S0, S4, V3.S[1] }
        unint64_t v34 = (v34 + 1) % v32;
        --v33;
      }
      while (v33);
    }
    float v39 = v30 * 0.5;
    float v40 = fabsf(_S0) * 0.5;
    float32x4_t v41 = v82;
    _S2 = 0.0;
    _S3 = 0.0;
    if (v83 != v82)
    {
      unint64_t v44 = (v83 - v82) >> 3;
      if (v44 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = (v83 - v82) >> 3;
      }
      unint64_t v46 = 1;
      float32x4_t v47 = (uint64_t *)v82;
      do
      {
        uint64_t v48 = *v47++;
        _V4.S[1] = HIDWORD(v48);
        _D5 = *(void *)&v82[8 * v46];
        __asm { FMLS            S3, S5, V4.S[1] }
        unint64_t v46 = (v46 + 1) % v44;
        --v45;
      }
      while (v45);
    }
    float v51 = fabsf(_S3) * 0.5;
    float v52 = (float)(v39 + v40) - v51;
    float v53 = fminf(v39, v40);
    float v54 = a3->f32[2];
    float v55 = a3[4].f32[2];
    float v56 = fmax((float)(fminf(a2[4].f32[2], v55) - fmaxf(a2->f32[2], v54)), 0.0);
    if (v87 != v86)
    {
      if (v19 <= 1) {
        uint64_t v57 = 1;
      }
      else {
        uint64_t v57 = (v87 - (unsigned char *)v86) >> 3;
      }
      unint64_t v58 = 1;
      float32x4_t v59 = (uint64_t *)v86;
      do
      {
        uint64_t v60 = *v59++;
        _V16.S[1] = HIDWORD(v60);
        _D17 = *((void *)v86 + v58);
        __asm { FMLS            S2, S17, V16.S[1] }
        unint64_t v58 = (v58 + 1) % v19;
        --v57;
      }
      while (v57);
    }
    float v63 = v51 / v52;
    float v64 = v51 * v56;
    float v65 = fabsf(_S2) * 0.5;
    float v66 = v51 / v53;
    if (v85 == v84)
    {
      _S6 = 0.0;
    }
    else
    {
      if (v32 <= 1) {
        uint64_t v67 = 1;
      }
      else {
        uint64_t v67 = (v85 - (unsigned char *)v84) >> 3;
      }
      unint64_t v68 = 1;
      float32x4_t v69 = (uint64_t *)v84;
      do
      {
        uint64_t v70 = *v69++;
        _V7.S[1] = HIDWORD(v70);
        _D16 = *((void *)v84 + v68);
        __asm { FMLS            S6, S16, V7.S[1] }
        unint64_t v68 = (v68 + 1) % v32;
        --v67;
      }
      while (v67);
    }
    float v79 = v65 * vabds_f32(a2[4].f32[2], a2->f32[2]);
    float v80 = (float)(fabsf(_S6) * 0.5) * vabds_f32(v55, v54);
    float v81 = (float)(v79 + v80) - v64;
    *(float *)a1 = v64 / v81;
    *(float *)(a1 + 4) = v64;
    *(float *)(a1 + 8) = v81;
    *(float *)(a1 + 12) = v64 / fminf(v79, v80);
    *(float *)(a1 + 16) = v63;
    *(float *)(a1 + 20) = v66;
    if (v41)
    {
      float v83 = v41;
      operator delete(v41);
      uint64_t v31 = v84;
    }
    if (v31)
    {
      float v85 = v31;
      operator delete(v31);
    }
    if (v86)
    {
      uint64_t v87 = v86;
      operator delete(v86);
    }
  }
}

void sub_25B4443E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void sub_25B44444C(uint64_t a1, uint64_t a2)
{
  float v4 = *(float *)(a2 + 20) * 0.5;
  float32x2_t v12 = vmul_f32(*(float32x2_t *)(a2 + 12), (float32x2_t)0x3F0000003F000000);
  long long v5 = (char *)operator new(0x60uLL);
  *(float32x2_t *)long long v5 = v12;
  *((float *)v5 + 2) = -v4;
  *((_DWORD *)v5 + 3) = v12.i32[0];
  *((float *)v5 + 4) = -v12.f32[1];
  *((float *)v5 + 5) = -v4;
  *((float *)v5 + 6) = -v12.f32[0];
  *((float *)v5 + 7) = -v12.f32[1];
  *((float *)v5 + 8) = -v4;
  *((float *)v5 + 9) = -v12.f32[0];
  *((_DWORD *)v5 + 10) = v12.i32[1];
  *((float *)v5 + 11) = -v4;
  *((float32x2_t *)v5 + 6) = v12;
  *((float *)v5 + 14) = v4;
  *((_DWORD *)v5 + 15) = v12.i32[0];
  *((float *)v5 + 16) = -v12.f32[1];
  *((float *)v5 + 17) = v4;
  *((float *)v5 + 18) = -v12.f32[0];
  *((float *)v5 + 19) = -v12.f32[1];
  *((float *)v5 + 20) = v4;
  *((float *)v5 + 21) = -v12.f32[0];
  *((_DWORD *)v5 + 22) = v12.i32[1];
  *((float *)v5 + 23) = v4;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(void *)a1 = *(void *)v5;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)v5 + 2);
  *(void *)(a1 + 16) = *(void *)(v5 + 12);
  *(_DWORD *)(a1 + 24) = *((_DWORD *)v5 + 5);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)v5 + 8);
  *(void *)(a1 + 32) = *((void *)v5 + 3);
  *(_DWORD *)(a1 + 56) = *((_DWORD *)v5 + 11);
  *(void *)(a1 + 48) = *(void *)(v5 + 36);
  *(_DWORD *)(a1 + 72) = *((_DWORD *)v5 + 14);
  *(void *)(a1 + 64) = *((void *)v5 + 6);
  *(_DWORD *)(a1 + 88) = *((_DWORD *)v5 + 17);
  *(void *)(a1 + 80) = *(void *)(v5 + 60);
  *(_DWORD *)(a1 + 104) = *((_DWORD *)v5 + 20);
  *(void *)(a1 + 96) = *((void *)v5 + 9);
  uint64_t v6 = *(void *)(v5 + 84);
  *(void *)(a1 + 120) = *((unsigned int *)v5 + 23);
  *(void *)(a1 + 112) = v6;
  unint64_t v7 = (unint64_t)__sincosf_stret(*(float *)(a2 + 24));
  uint64_t v8 = 0;
  v9.i64[1] = 0;
  v9.i32[0] = HIDWORD(v7);
  v10.i32[3] = 0;
  do
  {
    v9.f32[1] = -*(float *)&v7;
    *(float32x4_t *)(a1 + v8) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(*(_OWORD *)(a1 + v8))), (float32x4_t)v7, *(float32x2_t *)(a1 + v8), 1), (float32x4_t)xmmword_25B5F10E0, *(float32x4_t *)(a1 + v8), 2);
    v8 += 16;
  }
  while (v8 != 128);
  uint64_t v11 = 0;
  v10.i64[0] = *(void *)a2;
  v10.i32[2] = *(_DWORD *)(a2 + 8);
  do
  {
    *(float32x4_t *)(a1 + v11) = vaddq_f32(v10, *(float32x4_t *)(a1 + v11));
    v11 += 16;
  }
  while (v11 != 128);

  operator delete(v5);
}

void *sub_25B444638(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_25B3FCA18(a1, a2);
    float v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_25B444694(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_25B4446B0(int *result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
  while (2)
  {
    float32x2_t v12 = a2 - 1;
    uint64_t v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          unint64_t v15 = a2 - v13;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v46 = *v12;
                uint64_t v47 = *v13;
                if (*(float *)(**a3 + 4 * v46) < *(float *)(**a3 + 4 * v47))
                {
                  *uint64_t v13 = v46;
                  *float32x2_t v12 = v47;
                }
                break;
              case 3uLL:
                uint64_t v48 = **a3;
                __n128 result = sub_25B444E78(v13, v13 + 1, a2 - 1, v48);
                break;
              case 4uLL:
                __n128 result = sub_25B444F00(v13, v13 + 1, v13 + 2, a2 - 1, a3);
                break;
              case 5uLL:
                float v49 = v13 + 2;
                float32x2_t v50 = v13 + 3;
                __n128 result = sub_25B444F00(v13, v13 + 1, v13 + 2, v13 + 3, a3);
                uint64_t v51 = *v12;
                uint64_t v52 = v13[3];
                uint64_t v53 = **a3;
                if (*(float *)(v53 + 4 * v51) < *(float *)(v53 + 4 * v52))
                {
                  *float32x2_t v50 = v51;
                  *float32x2_t v12 = v52;
                  uint64_t v54 = *v50;
                  uint64_t v55 = *v49;
                  float v56 = *(float *)(v53 + 4 * v54);
                  if (v56 < *(float *)(v53 + 4 * v55))
                  {
                    int *v49 = v54;
                    *float32x2_t v50 = v55;
                    uint64_t v57 = v13[1];
                    if (v56 < *(float *)(v53 + 4 * v57))
                    {
                      v13[1] = v54;
                      void v13[2] = v57;
                      uint64_t v58 = *v13;
                      if (v56 < *(float *)(v53 + 4 * v58))
                      {
                        *uint64_t v13 = v54;
                        v13[1] = v58;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 95)
          {
            if (a5)
            {
              if (v13 != a2)
              {
                float32x4_t v59 = v13 + 1;
                if (v13 + 1 != a2)
                {
                  uint64_t v60 = **a3;
                  uint64_t v61 = 4;
                  uint64_t v62 = v13;
                  do
                  {
                    uint64_t v64 = *v62;
                    uint64_t v63 = v62[1];
                    uint64_t v62 = v59;
                    float v65 = *(float *)(v60 + 4 * v63);
                    if (v65 < *(float *)(v60 + 4 * v64))
                    {
                      uint64_t v66 = v61;
                      do
                      {
                        *(int *)((char *)v13 + v66) = v64;
                        uint64_t v67 = v66 - 4;
                        if (v66 == 4)
                        {
                          unint64_t v68 = v13;
                          goto LABEL_78;
                        }
                        uint64_t v64 = *(int *)((char *)v13 + v66 - 8);
                        v66 -= 4;
                      }
                      while (v65 < *(float *)(v60 + 4 * v64));
                      unint64_t v68 = (int *)((char *)v13 + v67);
LABEL_78:
                      *unint64_t v68 = v63;
                    }
                    float32x4_t v59 = v62 + 1;
                    v61 += 4;
                  }
                  while (v62 + 1 != a2);
                }
              }
            }
            else if (v13 != a2)
            {
              uint64_t v100 = v13 + 1;
              if (v13 + 1 != a2)
              {
                uint64_t v101 = **a3;
                do
                {
                  uint64_t v103 = *v11;
                  uint64_t v102 = v11[1];
                  uint64_t v11 = v100;
                  float v104 = *(float *)(v101 + 4 * v102);
                  if (v104 < *(float *)(v101 + 4 * v103))
                  {
                    do
                    {
                      *uint64_t v100 = v103;
                      uint64_t v103 = *(v100 - 2);
                      --v100;
                    }
                    while (v104 < *(float *)(v101 + 4 * v103));
                    *uint64_t v100 = v102;
                  }
                  uint64_t v100 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v13 != a2)
            {
              int64_t v69 = (v15 - 2) >> 1;
              uint64_t v70 = *a3;
              int64_t v71 = v69;
              do
              {
                int64_t v72 = v71;
                if (v69 >= v71)
                {
                  uint64_t v73 = (2 * v71) | 1;
                  uint64_t v74 = &v13[v73];
                  uint64_t v75 = 2 * v71 + 2;
                  uint64_t v76 = *v70;
                  if (v75 < (uint64_t)v15 && *(float *)(v76 + 4 * *v74) < *(float *)(v76 + 4 * v74[1]))
                  {
                    ++v74;
                    uint64_t v73 = 2 * v72 + 2;
                  }
                  __n128 result = &v13[v72];
                  uint64_t v77 = *v74;
                  uint64_t v78 = *result;
                  float v79 = *(float *)(v76 + 4 * v78);
                  if (*(float *)(v76 + 4 * v77) >= v79)
                  {
                    do
                    {
                      float v80 = v74;
                      *__n128 result = v77;
                      if (v69 < v73) {
                        break;
                      }
                      uint64_t v81 = 2 * v73;
                      uint64_t v73 = (2 * v73) | 1;
                      uint64_t v74 = &v13[v73];
                      uint64_t v82 = v81 + 2;
                      if (v82 < (uint64_t)v15 && *(float *)(v76 + 4 * *v74) < *(float *)(v76 + 4 * v74[1]))
                      {
                        ++v74;
                        uint64_t v73 = v82;
                      }
                      uint64_t v77 = *v74;
                      __n128 result = v80;
                    }
                    while (*(float *)(v76 + 4 * v77) >= v79);
                    *float v80 = v78;
                  }
                }
                int64_t v71 = v72 - 1;
              }
              while (v72);
              uint64_t v83 = (unint64_t)v14 >> 2;
              do
              {
                uint64_t v84 = 0;
                int v85 = *v13;
                float32x4_t v86 = *a3;
                uint64_t v87 = v13;
                do
                {
                  float v88 = v87;
                  v87 += v84 + 1;
                  uint64_t v89 = 2 * v84;
                  uint64_t v84 = (2 * v84) | 1;
                  uint64_t v90 = v89 + 2;
                  if (v90 < v83)
                  {
                    __n128 result = (int *)v87[1];
                    if (*(float *)(*v86 + 4 * *v87) < *(float *)(*v86 + 4 * (void)result))
                    {
                      ++v87;
                      uint64_t v84 = v90;
                    }
                  }
                  *float v88 = *v87;
                }
                while (v84 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
                if (v87 == --a2)
                {
                  *uint64_t v87 = v85;
                }
                else
                {
                  *uint64_t v87 = *a2;
                  *a2 = v85;
                  uint64_t v91 = (char *)v87 - (char *)v13 + 4;
                  if (v91 >= 5)
                  {
                    unint64_t v92 = (((unint64_t)v91 >> 2) - 2) >> 1;
                    uint64_t v93 = &v13[v92];
                    uint64_t v94 = *v93;
                    uint64_t v95 = *v87;
                    uint64_t v96 = *v86;
                    float v97 = *(float *)(v96 + 4 * v95);
                    if (*(float *)(v96 + 4 * v94) < v97)
                    {
                      do
                      {
                        uint64_t v98 = v93;
                        *uint64_t v87 = v94;
                        if (!v92) {
                          break;
                        }
                        unint64_t v92 = (v92 - 1) >> 1;
                        uint64_t v93 = &v13[v92];
                        uint64_t v94 = *v93;
                        uint64_t v87 = v98;
                      }
                      while (*(float *)(v96 + 4 * v94) < v97);
                      *uint64_t v98 = v95;
                    }
                  }
                }
              }
              while (v83-- > 2);
            }
            return result;
          }
          unint64_t v16 = v15 >> 1;
          float32x4_t v17 = &v13[v15 >> 1];
          uint64_t v18 = **a3;
          if ((unint64_t)v14 >= 0x201)
          {
            sub_25B444E78(v11, &v11[v15 >> 1], a2 - 1, v18);
            sub_25B444E78(v11 + 1, v17 - 1, a2 - 2, **a3);
            sub_25B444E78(v11 + 2, &v11[v16 + 1], a2 - 3, **a3);
            __n128 result = sub_25B444E78(v17 - 1, v17, &v11[v16 + 1], **a3);
            int v19 = *v11;
            *uint64_t v11 = *v17;
            *float32x4_t v17 = v19;
          }
          else
          {
            __n128 result = sub_25B444E78(&v11[v15 >> 1], v11, a2 - 1, v18);
          }
          --a4;
          int v20 = *v11;
          uint64_t v21 = **a3;
          if (a5) {
            break;
          }
          float v22 = *(float *)(v21 + 4 * v20);
          if (*(float *)(v21 + 4 * *(v11 - 1)) < v22) {
            goto LABEL_13;
          }
          if (v22 >= *(float *)(v21 + 4 * *v12))
          {
            float32x4_t v38 = v11 + 1;
            do
            {
              uint64_t v13 = v38;
              if (v38 >= a2) {
                break;
              }
              ++v38;
            }
            while (v22 >= *(float *)(v21 + 4 * *v13));
          }
          else
          {
            uint64_t v13 = v11;
            do
            {
              uint64_t v37 = v13[1];
              ++v13;
            }
            while (v22 >= *(float *)(v21 + 4 * v37));
          }
          float v39 = a2;
          if (v13 < a2)
          {
            float v39 = a2;
            do
              uint64_t v40 = *--v39;
            while (v22 < *(float *)(v21 + 4 * v40));
          }
          if (v13 < v39)
          {
            int v41 = *v13;
            int v42 = *v39;
            do
            {
              *uint64_t v13 = v42;
              int *v39 = v41;
              do
              {
                uint64_t v43 = v13[1];
                ++v13;
                int v41 = v43;
              }
              while (v22 >= *(float *)(v21 + 4 * v43));
              do
              {
                uint64_t v44 = *--v39;
                int v42 = v44;
              }
              while (v22 < *(float *)(v21 + 4 * v44));
            }
            while (v13 < v39);
          }
          uint64_t v45 = v13 - 1;
          BOOL v5 = v13 - 1 >= v11;
          BOOL v6 = v13 - 1 == v11;
          if (v13 - 1 != v11) {
            *uint64_t v11 = *v45;
          }
          a5 = 0;
          int *v45 = v20;
        }
        float v22 = *(float *)(v21 + 4 * v20);
LABEL_13:
        uint64_t v23 = v11;
        do
        {
          long long v24 = v23;
          uint64_t v26 = v23[1];
          ++v23;
          int v25 = v26;
        }
        while (*(float *)(v21 + 4 * v26) < v22);
        float32x4_t v27 = a2;
        if (v24 == v11)
        {
          float32x4_t v27 = a2;
          do
          {
            if (v23 >= v27) {
              break;
            }
            uint64_t v29 = *--v27;
          }
          while (*(float *)(v21 + 4 * v29) >= v22);
        }
        else
        {
          do
            uint64_t v28 = *--v27;
          while (*(float *)(v21 + 4 * v28) >= v22);
        }
        if (v23 < v27)
        {
          int v30 = *v27;
          int v31 = v25;
          unint64_t v32 = v23;
          uint64_t v33 = v27;
          do
          {
            int *v32 = v30;
            int *v33 = v31;
            do
            {
              long long v24 = v32;
              uint64_t v34 = v32[1];
              ++v32;
              int v31 = v34;
            }
            while (*(float *)(v21 + 4 * v34) < v22);
            do
            {
              uint64_t v35 = *--v33;
              int v30 = v35;
            }
            while (*(float *)(v21 + 4 * v35) >= v22);
          }
          while (v32 < v33);
        }
        if (v24 != v11) {
          *uint64_t v11 = *v24;
        }
        int *v24 = v20;
        if (v23 >= v27) {
          break;
        }
LABEL_32:
        __n128 result = (int *)sub_25B4446B0(v11, v24, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v13 = v24 + 1;
      }
      BOOL v36 = sub_25B444FB4(v11, v24, a3);
      uint64_t v13 = v24 + 1;
      __n128 result = (int *)sub_25B444FB4(v24 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v36) {
        goto LABEL_32;
      }
    }
    a2 = v24;
    if (!v36) {
      continue;
    }
    return result;
  }
}

int *sub_25B444E78(int *result, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  float v6 = *(float *)(a4 + 4 * v4);
  float v7 = *(float *)(a4 + 4 * v5);
  uint64_t v8 = *a3;
  float v9 = *(float *)(a4 + 4 * v8);
  if (v6 >= v7)
  {
    if (v9 < v6)
    {
      *a2 = v8;
      *a3 = v4;
      uint64_t v10 = *a2;
      uint64_t v11 = *result;
      if (*(float *)(a4 + 4 * v10) < *(float *)(a4 + 4 * v11))
      {
        *__n128 result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 >= v6)
    {
      *__n128 result = v4;
      *a2 = v5;
      uint64_t v12 = *a3;
      if (*(float *)(a4 + 4 * v12) >= v7) {
        return result;
      }
      *a2 = v12;
    }
    else
    {
      *__n128 result = v8;
    }
    *a3 = v5;
  }
  return result;
}

int *sub_25B444F00(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  __n128 result = sub_25B444E78(a1, a2, a3, **a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = **a5;
  if (*(float *)(v13 + 4 * v11) < *(float *)(v13 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(float *)(v13 + 4 * v14) < *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      if (*(float *)(v13 + 4 * v16) < *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

BOOL sub_25B444FB4(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(**a3 + 4 * v8) < *(float *)(**a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_25B444E78(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_25B444F00(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v21 = a1 + 2;
      float v22 = a1 + 3;
      sub_25B444F00(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v23 = *(a2 - 1);
      uint64_t v24 = a1[3];
      uint64_t v25 = **a3;
      if (*(float *)(v25 + 4 * v23) < *(float *)(v25 + 4 * v24))
      {
        *float v22 = v23;
        *(a2 - 1) = v24;
        uint64_t v26 = *v22;
        uint64_t v27 = *v21;
        float v28 = *(float *)(v25 + 4 * v26);
        if (v28 < *(float *)(v25 + 4 * v27))
        {
          *uint64_t v21 = v26;
          *float v22 = v27;
          uint64_t v29 = a1[1];
          if (v28 < *(float *)(v25 + 4 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            uint64_t v30 = *a1;
            if (v28 < *(float *)(v25 + 4 * v30))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      sub_25B444E78(a1, a1 + 1, a1 + 2, **a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    float v17 = *(float *)(v13 + 4 * v15);
    if (v17 < *(float *)(v13 + 4 * v16))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          int v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      int v20 = a1;
LABEL_13:
      *int v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

void sub_25B4451F4(_OWORD *a1, float32x4_t *a2, float a3)
{
  float32x4_t v17 = *a2;
  float32x4_t v5 = vsubq_f32(*a2, a2[3]);
  float32x4_t v6 = vmulq_f32(v5, v5);
  float v7 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]);
  float32x4_t v8 = vsubq_f32(*a2, a2[1]);
  float32x4_t v9 = vmulq_f32(v8, v8);
  float32x4_t v10 = vsubq_f32(*a2, a2[4]);
  float32x4_t v11 = vmulq_f32(v10, v10);
  v9.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
  v9.f32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0])+ a3;
  float v19 = fmaxf(v7, 0.1);
  float32x2_t v12 = vmaxnm_f32(*(float32x2_t *)v9.f32, (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  float v13 = atan2f(v8.f32[0], v8.f32[1]);
  v14.i64[0] = 0x3F0000003F000000;
  v14.i64[1] = 0x3F0000003F000000;
  float32x4_t v18 = vmulq_f32(vaddq_f32(v17, a2[6]), v14);
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  sub_25B443228(__p, 7uLL);
  uint64_t v15 = (float32x2_t *)__p[0];
  float32x4_t v16 = v18;
  v16.f32[3] = v19;
  *(float32x4_t *)__p[0] = v16;
  v15[2] = v12;
  v15[3].f32[0] = v13;
  sub_25B44444C((uint64_t)a1, (uint64_t)v15);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_25B445328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B445344(uint64_t a1, void *a2)
{
  id v28 = a2;
  for (uint64_t i = 0; i != 8; ++i)
  {
    float32x4_t v5 = objc_msgSend_objectAtIndexedSubscript_(v28, v3, i);
    float v7 = objc_msgSend_objectAtIndexedSubscript_(v5, v6, 0);
    objc_msgSend_floatValue(v7, v8, v9);
    *(void *)&long long v27 = v10;
    float32x2_t v12 = objc_msgSend_objectAtIndexedSubscript_(v28, v11, i);
    float32x4_t v14 = objc_msgSend_objectAtIndexedSubscript_(v12, v13, 1);
    objc_msgSend_floatValue(v14, v15, v16);
    int v26 = v17;
    float v19 = objc_msgSend_objectAtIndexedSubscript_(v28, v18, i);
    uint64_t v21 = objc_msgSend_objectAtIndexedSubscript_(v19, v20, 2);
    objc_msgSend_floatValue(v21, v22, v23);
    long long v24 = v27;
    DWORD1(v24) = v26;
    DWORD2(v24) = v25;
    *(_OWORD *)(a1 + 16 * i) = v24;
  }
}

void sub_25B445458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

id sub_25B4454B4(__n128 *a1, const char *a2, uint64_t a3)
{
  v29[8] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_25B445684(*a1, (uint64_t)a1, a2, a3);
  v29[0] = v4;
  float v7 = sub_25B445684(a1[1], (uint64_t)v4, v5, v6);
  v29[1] = v7;
  uint64_t v10 = sub_25B445684(a1[2], (uint64_t)v7, v8, v9);
  v29[2] = v10;
  float v13 = sub_25B445684(a1[3], (uint64_t)v10, v11, v12);
  v29[3] = v13;
  uint64_t v16 = sub_25B445684(a1[4], (uint64_t)v13, v14, v15);
  v29[4] = v16;
  float v19 = sub_25B445684(a1[5], (uint64_t)v16, v17, v18);
  v29[5] = v19;
  float v22 = sub_25B445684(a1[6], (uint64_t)v19, v20, v21);
  v29[6] = v22;
  int v25 = sub_25B445684(a1[7], (uint64_t)v22, v23, v24);
  v29[7] = v25;
  long long v27 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v26, (uint64_t)v29, 8);

  return v27;
}

void sub_25B445618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_25B445684(__n128 a1, uint64_t a2, const char *a3, uint64_t a4)
{
  v16[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = objc_msgSend_numberWithFloat_(NSNumber, a3, a4);
  v16[0] = v4;
  HIDWORD(v5) = a1.n128_u32[1];
  LODWORD(v5) = a1.n128_u32[1];
  float32x4_t v8 = objc_msgSend_numberWithFloat_(NSNumber, v6, v7, v5);
  v16[1] = v8;
  float32x4_t v11 = objc_msgSend_numberWithFloat_(NSNumber, v9, v10, COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v16[2] = v11;
  float v13 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v12, (uint64_t)v16, 3);

  return v13;
}

void sub_25B44576C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B44579C(uint64_t a1, long long *a2, id *a3, void *a4, uint64_t a5, float a6)
{
  id v11 = a4;
  long long v12 = a2[3];
  long long v14 = *a2;
  long long v13 = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v12;
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v13;
  long long v15 = a2[7];
  long long v17 = a2[4];
  long long v16 = a2[5];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v15;
  *(_OWORD *)(a1 + 64) = v17;
  *(_OWORD *)(a1 + 80) = v16;
  *(void *)(a1 + 128) = *a3;
  *(float *)(a1 + 136) = a6;
  uint64_t v20 = objc_msgSend_copy(v11, v18, v19);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = v20;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  sub_25B3FCA58((void *)(a1 + 152), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  *(void *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 184) = -1;

  return a1;
}

void sub_25B44585C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B445884(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 160) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t *sub_25B4458D0(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      long long v8 = *(_OWORD *)(v2 + v5 - 192);
      long long v9 = *(_OWORD *)(v2 + v5 - 176);
      long long v10 = *(_OWORD *)(v2 + v5 - 144);
      *(_OWORD *)(v6 - 160) = *(_OWORD *)(v2 + v5 - 160);
      *(_OWORD *)(v6 - 144) = v10;
      *(_OWORD *)(v6 - 192) = v8;
      *(_OWORD *)(v6 - 176) = v9;
      long long v11 = *(_OWORD *)(v2 + v5 - 128);
      long long v12 = *(_OWORD *)(v2 + v5 - 112);
      long long v13 = *(_OWORD *)(v2 + v5 - 80);
      *(_OWORD *)(v6 - 96) = *(_OWORD *)(v2 + v5 - 96);
      *(_OWORD *)(v6 - 80) = v13;
      *(_OWORD *)(v6 - 128) = v11;
      *(_OWORD *)(v6 - 112) = v12;
      uint64_t v14 = *(void *)(v2 + v5 - 64);
      *(void *)(v7 - 64) = 0;
      *(void *)(v6 - 64) = v14;
      LODWORD(v11) = *(_DWORD *)(v2 + v5 - 56);
      uint64_t v15 = *(void *)(v2 + v5 - 48);
      *(void *)(v7 - 48) = 0;
      *(void *)(v6 - 48) = v15;
      *(void *)(v6 - 40) = 0;
      *(void *)(v6 - 32) = 0;
      *(void *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 40) = *(_OWORD *)(v2 + v5 - 40);
      uint64_t v16 = *(void *)(v2 + v5 - 16);
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      *(_DWORD *)(v6 - 56) = v11;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v6 - 16) = v16;
      *(_WORD *)(v6 - 8) = *(_WORD *)(v2 + v5 - 8);
      v5 -= 192;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v17 = *result;
  *BOOL result = v4;
  a2[1] = v17;
  uint64_t v18 = result[1];
  result[1] = a2[2];
  a2[2] = v18;
  uint64_t v19 = result[2];
  result[2] = a2[3];
  a2[3] = v19;
  *a2 = a2[1];
  return result;
}

uint64_t sub_25B4459A4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 192;
    sub_25B41D184(i - 192);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_25B4459F4(uint64_t a1)
{
  int v3 = 13679;
  uint64_t v4 = 0;
  kdebug_trace();
  sub_25B543088((uint64_t)v2, a1, 1, 0);
}

void sub_25B44658C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57)
{
  uint64_t v62 = *(void **)(v60 - 176);
  if (v62)
  {
    *(void *)(v60 - 168) = v62;
    operator delete(v62);
    if (!v57)
    {
LABEL_3:
      if (!v58)
      {
LABEL_8:
        if (a38) {
          sub_25B404120(a38);
        }
        if (v59) {
          operator delete(v59);
        }
        if (a57) {
          sub_25B404120(a57);
        }
        if (STACK[0x218]) {
          sub_25B404120((std::__shared_weak_count *)STACK[0x218]);
        }
        STACK[0x230] = (unint64_t)&unk_2708F1C28;
        if (STACK[0x2B0]) {
          sub_25B404120((std::__shared_weak_count *)STACK[0x2B0]);
        }
        sub_25B400F2C(v60 - 216);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v58);
      goto LABEL_8;
    }
  }
  else if (!v57)
  {
    goto LABEL_3;
  }
  operator delete(v57);
  if (!v58) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_25B4466F4(uint64_t a1, _OWORD *a2)
{
  int v4 = 0;
  uint64_t v2 = sub_25B408640(a1, a2);
  return sub_25B40B204(v2, &v4);
}

void sub_25B44672C(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_2708F1C28;
  int v3 = (std::__shared_weak_count *)v1[16];
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B446760(uint64_t a1, int *a2, int *a3)
{
  v31[2] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v5 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v7 = sub_25B406B20(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v7, (uint64_t)" ", 1);
    long long v8 = (void *)std::ostream::operator<<();
    long long v9 = sub_25B406B20(v8, (uint64_t)" ", 1);
    long long v10 = sub_25B406B20(v9, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    long long v11 = std::locale::use_facet(v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(v28);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
    long long v12 = std::locale::use_facet(v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(v28);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v13 = 0;
  uint64_t v14 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v15 = (void *)(a1 + 8);
  uint64_t v16 = *a3;
  v31[0] = *a2;
  v31[1] = v16;
  uint64_t v26 = 0;
  uint64_t v17 = 1;
  uint64_t v18 = (std::locale::id *)MEMORY[0x263F8C108];
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)&v28[0].__locale_ = 0u;
  uint64_t v19 = (std::locale::__imp **)v31;
  do
  {
    uint64_t v20 = *v19;
    if ((unint64_t)*v19 >= *v15)
    {
      sub_25B406B20(v14, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
      sub_25B406B20(v14, (uint64_t)" ", 1);
      uint64_t v21 = (void *)std::ostream::operator<<();
      sub_25B406B20(v21, (uint64_t)" ", 1);
      sub_25B406B20(v21, (uint64_t)"at", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
      float v22 = std::locale::use_facet(&v27, v18);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      sub_25B40B60C("err", "shape", (uint64_t)&v26, "=", (uint64_t)v19, "should smaller then");
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
      uint64_t v23 = std::locale::use_facet(&v27, v18);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v20 = *v19;
    }
    v28[v13].__locale_ = v20;
    uint64_t v19 = (std::locale::__imp **)&v31[v17];
    ++v15;
    uint64_t v26 = ++v13;
    uint64_t v17 = 2;
  }
  while (v13 != 2);
  return *(void *)(a1 + 144)
       + 4 * (*(void *)(a1 + 56) * (uint64_t)v28[0].__locale_ + *(void *)(a1 + 64) * (uint64_t)v28[1].__locale_);
}

void sub_25B446B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, std::locale a13)
{
}

uint64_t sub_25B446BB0(uint64_t a1, int *a2, int *a3)
{
  v31[2] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v5 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v7 = sub_25B406B20(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v7, (uint64_t)" ", 1);
    long long v8 = (void *)std::ostream::operator<<();
    long long v9 = sub_25B406B20(v8, (uint64_t)" ", 1);
    long long v10 = sub_25B406B20(v9, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    long long v11 = std::locale::use_facet(v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(v28);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
    long long v12 = std::locale::use_facet(v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(v28);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v13 = 0;
  uint64_t v14 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v15 = (void *)(a1 + 8);
  uint64_t v16 = *a3;
  v31[0] = *a2;
  v31[1] = v16;
  uint64_t v26 = 0;
  uint64_t v17 = 1;
  uint64_t v18 = (std::locale::id *)MEMORY[0x263F8C108];
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)&v28[0].__locale_ = 0u;
  uint64_t v19 = (std::locale::__imp **)v31;
  do
  {
    uint64_t v20 = *v19;
    if ((unint64_t)*v19 >= *v15)
    {
      sub_25B406B20(v14, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
      sub_25B406B20(v14, (uint64_t)" ", 1);
      uint64_t v21 = (void *)std::ostream::operator<<();
      sub_25B406B20(v21, (uint64_t)" ", 1);
      sub_25B406B20(v21, (uint64_t)"at", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
      float v22 = std::locale::use_facet(&v27, v18);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      sub_25B40B60C("err", "shape", (uint64_t)&v26, "=", (uint64_t)v19, "should smaller then");
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
      uint64_t v23 = std::locale::use_facet(&v27, v18);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v20 = *v19;
    }
    v28[v13].__locale_ = v20;
    uint64_t v19 = (std::locale::__imp **)&v31[v17];
    ++v15;
    uint64_t v26 = ++v13;
    uint64_t v17 = 2;
  }
  while (v13 != 2);
  return *(void *)(a1 + 144)
       + 4 * (*(void *)(a1 + 56) * (uint64_t)v28[0].__locale_ + *(void *)(a1 + 64) * (uint64_t)v28[1].__locale_);
}

void sub_25B446FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, std::locale a13)
{
}

void sub_25B447000(int32x2_t *a1, int32x2_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
double sub_25B448820(float32x2_t *a1, float32x2_t *a2, uint64_t a3, char a4, __n128 a5)
{
double sub_25B44986C(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, __n128 a4)
{
  __int32 v4 = a2[1].i32[1];
  __int32 v5 = a1[1].i32[1];
  if (v4 > v5
    || v4 >= v5
    && ((a4.n128_u32[0] = a2[1].u32[0], float v10 = a1[1].f32[0], a4.n128_f32[0] > v10)
     || a4.n128_f32[0] >= v10
     && ((a4.n128_u64[0] = (unint64_t)vcgt_f32(*a1, *a2), (a4.n128_u8[0] & 1) != 0)
      || (vmvn_s8((int8x8_t)vcgt_f32(*a2, *a1)).u8[0] & 1) != 0 && (a4.n128_u8[4] & 1) != 0)))
  {
    __int32 v11 = a3[1].i32[1];
    if (v11 > v4
      || v11 >= v4
      && ((float v14 = a3[1].f32[0], v15 = a2[1].f32[0], v14 > v15)
       || v14 >= v15
       && ((int32x2_t v16 = vcgt_f32(*a2, *a3), (v16.i8[0] & 1) != 0)
        || (vmvn_s8((int8x8_t)vcgt_f32(*a3, *a2)).u8[0] & 1) != 0 && (v16.i8[4] & 1) != 0)))
    {
      a4 = *(__n128 *)a1->f32;
      *(_OWORD *)a1->f32 = *(_OWORD *)a3->f32;
    }
    else
    {
      a4 = *(__n128 *)a1->f32;
      *(_OWORD *)a1->f32 = *(_OWORD *)a2->f32;
      *(__n128 *)a2->f32 = a4;
      __int32 v12 = a3[1].i32[1];
      __int32 v13 = a2[1].i32[1];
      if (v12 <= v13)
      {
        if (v12 < v13) {
          return a4.n128_f64[0];
        }
        a4.n128_u32[0] = a3[1].u32[0];
        float v18 = a2[1].f32[0];
        if (a4.n128_f32[0] <= v18)
        {
          if (a4.n128_f32[0] < v18) {
            return a4.n128_f64[0];
          }
          a4.n128_u64[0] = (unint64_t)vcgt_f32(*a2, *a3);
          if ((a4.n128_u8[0] & 1) == 0
            && ((vmvn_s8((int8x8_t)vcgt_f32(*a3, *a2)).u8[0] & 1) == 0 || (a4.n128_u8[4] & 1) == 0))
          {
            return a4.n128_f64[0];
          }
        }
      }
      a4 = *(__n128 *)a2->f32;
      *(_OWORD *)a2->f32 = *(_OWORD *)a3->f32;
    }
    *(__n128 *)a3->f32 = a4;
    return a4.n128_f64[0];
  }
  __int32 v6 = a3[1].i32[1];
  if (v6 > v4
    || v6 >= v4
    && ((a4.n128_u32[0] = a3[1].u32[0], float v7 = a2[1].f32[0], a4.n128_f32[0] > v7)
     || a4.n128_f32[0] >= v7
     && ((a4.n128_u64[0] = (unint64_t)vcgt_f32(*a2, *a3), (a4.n128_u8[0] & 1) != 0)
      || (vmvn_s8((int8x8_t)vcgt_f32(*a3, *a2)).u8[0] & 1) != 0 && (a4.n128_u8[4] & 1) != 0)))
  {
    a4 = *(__n128 *)a2->f32;
    *(_OWORD *)a2->f32 = *(_OWORD *)a3->f32;
    *(__n128 *)a3->f32 = a4;
    __int32 v8 = a2[1].i32[1];
    __int32 v9 = a1[1].i32[1];
    if (v8 > v9
      || v8 >= v9
      && ((a4.n128_u32[0] = a2[1].u32[0], float v17 = a1[1].f32[0], a4.n128_f32[0] > v17)
       || a4.n128_f32[0] >= v17
       && ((a4.n128_u64[0] = (unint64_t)vcgt_f32(*a1, *a2), (a4.n128_u8[0] & 1) != 0)
        || (vmvn_s8((int8x8_t)vcgt_f32(*a2, *a1)).u8[0] & 1) != 0 && (a4.n128_u8[4] & 1) != 0)))
    {
      a4 = *(__n128 *)a1->f32;
      *(_OWORD *)a1->f32 = *(_OWORD *)a2->f32;
      *(__n128 *)a2->f32 = a4;
    }
  }
  return a4.n128_f64[0];
}

double sub_25B449A78(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, __n128 a5)
{
  *(double *)&long long v9 = sub_25B44986C(a1, a2, a3, a5);
  __int32 v10 = a4[1].i32[1];
  __int32 v11 = a3[1].i32[1];
  if (v10 > v11
    || v10 >= v11
    && ((LODWORD(v9) = a4[1].i32[0], float v12 = a3[1].f32[0], *(float *)&v9 > v12)
     || *(float *)&v9 >= v12
     && ((*(int32x2_t *)&long long v9 = vcgt_f32(*a3, *a4), (v9 & 1) != 0)
      || (vmvn_s8((int8x8_t)vcgt_f32(*a4, *a3)).u8[0] & 1) != 0 && (BYTE4(v9) & 1) != 0)))
  {
    long long v9 = *(_OWORD *)a3->f32;
    *(_OWORD *)a3->f32 = *(_OWORD *)a4->f32;
    *(_OWORD *)a4->f32 = v9;
    __int32 v13 = a3[1].i32[1];
    __int32 v14 = a2[1].i32[1];
    if (v13 > v14
      || v13 >= v14
      && ((LODWORD(v9) = a3[1].i32[0], float v15 = a2[1].f32[0], *(float *)&v9 > v15)
       || *(float *)&v9 >= v15
       && ((*(int32x2_t *)&long long v9 = vcgt_f32(*a2, *a3), (v9 & 1) != 0)
        || (vmvn_s8((int8x8_t)vcgt_f32(*a3, *a2)).u8[0] & 1) != 0 && (BYTE4(v9) & 1) != 0)))
    {
      long long v9 = *(_OWORD *)a2->f32;
      *(_OWORD *)a2->f32 = *(_OWORD *)a3->f32;
      *(_OWORD *)a3->f32 = v9;
      __int32 v16 = a2[1].i32[1];
      __int32 v17 = a1[1].i32[1];
      if (v16 > v17
        || v16 >= v17
        && ((LODWORD(v9) = a2[1].i32[0], float v18 = a1[1].f32[0], *(float *)&v9 > v18)
         || *(float *)&v9 >= v18
         && ((*(int32x2_t *)&long long v9 = vcgt_f32(*a1, *a2), (v9 & 1) != 0)
          || (vmvn_s8((int8x8_t)vcgt_f32(*a2, *a1)).u8[0] & 1) != 0 && (BYTE4(v9) & 1) != 0)))
      {
        long long v9 = *(_OWORD *)a1->f32;
        *(_OWORD *)a1->f32 = *(_OWORD *)a2->f32;
        *(_OWORD *)a2->f32 = v9;
      }
    }
  }
  return *(double *)&v9;
}

BOOL sub_25B449BF0(float32x2_t *a1, float32x2_t *a2, __n128 a3)
{
  uint64_t v5 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v7 = a2 - 2;
      __int32 v8 = a2[-1].i32[1];
      __int32 v9 = a1[1].i32[1];
      if (v8 > v9
        || v8 >= v9
        && ((float v48 = a2[-1].f32[0], v49 = a1[1].f32[0], v48 > v49)
         || v48 >= v49
         && ((int32x2_t v50 = vcgt_f32(*a1, *v7), (v50.i8[0] & 1) != 0)
          || (vmvn_s8((int8x8_t)vcgt_f32(*v7, *a1)).u8[0] & 1) != 0 && (v50.i8[4] & 1) != 0)))
      {
        long long v10 = *(_OWORD *)a1->f32;
        *(_OWORD *)a1->f32 = *(_OWORD *)v7->f32;
        *(_OWORD *)v7->f32 = v10;
      }
      return result;
    case 3:
      sub_25B44986C(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_25B449A78(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      float v27 = a1 + 2;
      int32x2_t v28 = a1 + 4;
      __int32 v29 = a1 + 6;
      float v30 = a2 - 2;
      sub_25B449A78(a1, a1 + 2, a1 + 4, a1 + 6, a3);
      __int32 v31 = a2[-1].i32[1];
      __int32 v32 = a1[7].i32[1];
      if (v31 > v32) {
        goto LABEL_35;
      }
      if (v31 < v32) {
        return 1;
      }
      float v51 = a2[-1].f32[0];
      float v52 = a1[7].f32[0];
      if (v51 > v52) {
        goto LABEL_35;
      }
      if (v51 < v52) {
        return 1;
      }
      int32x2_t v53 = vcgt_f32(*v29, *v30);
      if ((v53.i8[0] & 1) == 0)
      {
        BOOL result = 1;
        if ((vmvn_s8((int8x8_t)vcgt_f32(*v30, *v29)).u8[0] & 1) == 0 || (v53.i8[4] & 1) == 0) {
          return result;
        }
      }
LABEL_35:
      long long v33 = *(_OWORD *)v29->f32;
      *(_OWORD *)v29->f32 = *(_OWORD *)v30->f32;
      *(_OWORD *)v30->f32 = v33;
      __int32 v34 = a1[7].i32[1];
      __int32 v35 = a1[5].i32[1];
      if (v34 > v35) {
        goto LABEL_42;
      }
      if (v34 < v35) {
        return 1;
      }
      float v36 = a1[7].f32[0];
      float v37 = a1[5].f32[0];
      if (v36 > v37) {
        goto LABEL_42;
      }
      if (v36 < v37) {
        return 1;
      }
      int32x2_t v38 = vcgt_f32(*v28, *v29);
      if ((v38.i8[0] & 1) == 0)
      {
        BOOL result = 1;
        if ((vmvn_s8((int8x8_t)vcgt_f32(*v29, *v28)).u8[0] & 1) == 0 || (v38.i8[4] & 1) == 0) {
          return result;
        }
      }
LABEL_42:
      long long v39 = *(_OWORD *)v28->f32;
      *(_OWORD *)v28->f32 = *(_OWORD *)v29->f32;
      *(_OWORD *)v29->f32 = v39;
      __int32 v40 = a1[5].i32[1];
      __int32 v41 = a1[3].i32[1];
      if (v40 > v41) {
        goto LABEL_45;
      }
      if (v40 < v41) {
        return 1;
      }
      float v42 = a1[5].f32[0];
      float v43 = a1[3].f32[0];
      if (v42 > v43) {
        goto LABEL_45;
      }
      if (v42 < v43) {
        return 1;
      }
      int32x2_t v58 = vcgt_f32(*v27, *v28);
      if ((v58.i8[0] & 1) == 0)
      {
        BOOL result = 1;
        if ((vmvn_s8((int8x8_t)vcgt_f32(*v28, *v27)).u8[0] & 1) == 0 || (v58.i8[4] & 1) == 0) {
          return result;
        }
      }
LABEL_45:
      long long v44 = *(_OWORD *)v27->f32;
      *(_OWORD *)v27->f32 = *(_OWORD *)v28->f32;
      *(_OWORD *)v28->f32 = v44;
      __int32 v45 = a1[3].i32[1];
      __int32 v46 = a1[1].i32[1];
      if (v45 > v46) {
        goto LABEL_46;
      }
      if (v45 < v46) {
        return 1;
      }
      float v54 = a1[3].f32[0];
      float v55 = a1[1].f32[0];
      if (v54 > v55) {
        goto LABEL_46;
      }
      if (v54 < v55) {
        return 1;
      }
      float32x2_t v56 = a1[2];
      int32x2_t v57 = vcgt_f32(*a1, v56);
      if ((v57.i8[0] & 1) == 0)
      {
        BOOL result = 1;
        if ((vmvn_s8((int8x8_t)vcgt_f32(v56, *a1)).u8[0] & 1) == 0 || (v57.i8[4] & 1) == 0) {
          return result;
        }
      }
LABEL_46:
      long long v47 = *(_OWORD *)a1->f32;
      *(_OWORD *)a1->f32 = *(_OWORD *)v27->f32;
      *(_OWORD *)v27->f32 = v47;
      return 1;
    default:
      __int32 v11 = a1 + 4;
      sub_25B44986C(a1, a1 + 2, a1 + 4, a3);
      float v12 = a1 + 6;
      if (&a1[6] == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    __int32 v15 = v12[1].i32[1];
    __int32 v16 = v11[1].i32[1];
    if (v15 > v16) {
      break;
    }
    if (v15 >= v16)
    {
      float v17 = v12[1].f32[0];
      float v18 = v11[1].f32[0];
      if (v17 > v18) {
        goto LABEL_14;
      }
      if (v17 >= v18)
      {
        int32x2_t v19 = vcgt_f32(*v11, *v12);
        if (v19.i8[0] & 1) != 0 || (vmvn_s8((int8x8_t)vcgt_f32(*v12, *v11)).u8[0] & 1) != 0 && (v19.i8[4]) {
          goto LABEL_14;
        }
      }
    }
LABEL_28:
    __int32 v11 = v12;
    v13 += 16;
    v12 += 2;
    if (v12 == a2) {
      return 1;
    }
  }
  float v17 = v12[1].f32[0];
LABEL_14:
  float32x2_t v20 = *v12;
  *(_OWORD *)v12->f32 = *(_OWORD *)v11->f32;
  uint64_t v21 = (uint64_t)a1;
  if (v11 != a1)
  {
    uint64_t v22 = v13;
    while (1)
    {
      BOOL v23 = (float32x2_t *)((char *)a1 + v22 + 16);
      __int32 v24 = *(__int32 *)((char *)&a1[3].i32[1] + v22);
      if (v15 <= v24)
      {
        if (v15 < v24)
        {
          uint64_t v21 = (uint64_t)&a1[4] + v22;
          goto LABEL_27;
        }
        float v25 = *(float *)((char *)a1[3].f32 + v22);
        if (v17 <= v25)
        {
          if (v17 < v25) {
            break;
          }
          int32x2_t v26 = vcgt_f32(*v23, v20);
          if ((v26.i8[0] & 1) == 0 && ((vmvn_s8((int8x8_t)vcgt_f32(v20, *v23)).u8[0] & 1) == 0 || (v26.i8[4] & 1) == 0)) {
            break;
          }
        }
      }
      v11 -= 2;
      *(_OWORD *)((char *)a1[4].f32 + v22) = *(_OWORD *)v23->f32;
      v22 -= 16;
      if (v22 == -32)
      {
        uint64_t v21 = (uint64_t)a1;
        goto LABEL_27;
      }
    }
    uint64_t v21 = (uint64_t)v11;
  }
LABEL_27:
  *(float32x2_t *)uint64_t v21 = v20;
  *(float *)(v21 + 8) = v17;
  *(_DWORD *)(v21 + 12) = v15;
  if (++v14 != 8) {
    goto LABEL_28;
  }
  return &v12[2] == a2;
}

double sub_25B44A050(int32x2_t *a1, int32x2_t *a2, int32x2_t *a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  double v67 = *(double *)a2;
  int v9 = *(_DWORD *)sub_25B446760(v8, (int *)&v67 + 1, (int *)&v67);
  uint64_t v10 = *a4;
  int32x2_t v66 = *a1;
  if (v9 <= *(_DWORD *)sub_25B446760(v10, (int *)&v66 + 1, (int *)&v66))
  {
    uint64_t v11 = *a4;
    int32x2_t v12 = *a2;
    HIDWORD(v67) = HIDWORD(*(unint64_t *)a2);
    LODWORD(v67) = v12.i32[0];
    int v13 = *(_DWORD *)sub_25B446760(v11, (int *)&v67 + 1, (int *)&v67);
    uint64_t v14 = *a4;
    int32x2_t v15 = *a1;
    v66.i32[1] = HIDWORD(*(unint64_t *)a1);
    v66.i32[0] = v15.i32[0];
    if (v13 != *(_DWORD *)sub_25B446760(v14, (int *)&v66 + 1, (int *)&v66)
      || (int v16 = HIDWORD(*(unint64_t *)a2), v17 = HIDWORD(*(unint64_t *)a1), v16 >= v17)
      && (v16 != v17 || (vcgt_s32(*a1, *a2).u8[0] & 1) == 0))
    {
      uint64_t v32 = *a4;
      double v67 = *(double *)a3;
      int v33 = *(_DWORD *)sub_25B446760(v32, (int *)&v67 + 1, (int *)&v67);
      uint64_t v34 = *a4;
      int32x2_t v66 = *a2;
      if (v33 <= *(_DWORD *)sub_25B446760(v34, (int *)&v66 + 1, (int *)&v66))
      {
        uint64_t v47 = *a4;
        double v48 = *(double *)a3;
        HIDWORD(v67) = HIDWORD(*(unint64_t *)a3);
        LODWORD(v67) = LODWORD(v48);
        int v49 = *(_DWORD *)sub_25B446760(v47, (int *)&v67 + 1, (int *)&v67);
        uint64_t v50 = *a4;
        int32x2_t v51 = *a2;
        v66.i32[1] = HIDWORD(*(unint64_t *)a2);
        v66.i32[0] = v51.i32[0];
        if (v49 != *(_DWORD *)sub_25B446760(v50, (int *)&v66 + 1, (int *)&v66)) {
          return result;
        }
        double result = *(double *)a3;
        int v52 = HIDWORD(*(unint64_t *)a3);
        int32x2_t v35 = *a2;
        int v53 = HIDWORD(*(unint64_t *)a2);
        if (v52 >= v53 && (v52 != v53 || (vcgt_s32(v35, *(int32x2_t *)&result).u8[0] & 1) == 0)) {
          return result;
        }
      }
      else
      {
        int32x2_t v35 = *a2;
        double result = *(double *)a3;
      }
      *(double *)a2 = result;
      *a3 = v35;
      uint64_t v36 = *a4;
      double v67 = *(double *)a2;
      int v37 = *(_DWORD *)sub_25B446760(v36, (int *)&v67 + 1, (int *)&v67);
      uint64_t v38 = *a4;
      int32x2_t v66 = *a1;
      if (v37 <= *(_DWORD *)sub_25B446760(v38, (int *)&v66 + 1, (int *)&v66))
      {
        uint64_t v54 = *a4;
        int32x2_t v55 = *a2;
        HIDWORD(v67) = HIDWORD(*(unint64_t *)a2);
        LODWORD(v67) = v55.i32[0];
        int v56 = *(_DWORD *)sub_25B446760(v54, (int *)&v67 + 1, (int *)&v67);
        uint64_t v57 = *a4;
        int32x2_t v58 = *a1;
        v66.i32[1] = HIDWORD(*(unint64_t *)a1);
        v66.i32[0] = v58.i32[0];
        if (v56 != *(_DWORD *)sub_25B446760(v57, (int *)&v66 + 1, (int *)&v66)) {
          return result;
        }
        double result = *(double *)a2;
        int v59 = HIDWORD(*(unint64_t *)a2);
        int32x2_t v39 = *a1;
        int v60 = HIDWORD(*(unint64_t *)a1);
        if (v59 >= v60 && (v59 != v60 || (vcgt_s32(v39, *(int32x2_t *)&result).u8[0] & 1) == 0)) {
          return result;
        }
      }
      else
      {
        int32x2_t v39 = *a1;
        double result = *(double *)a2;
      }
      *(double *)a1 = result;
      *a2 = v39;
      return result;
    }
  }
  uint64_t v18 = *a4;
  double v19 = *(double *)a3;
  HIDWORD(v67) = HIDWORD(*(unint64_t *)a3);
  LODWORD(v67) = LODWORD(v19);
  int v20 = *(_DWORD *)sub_25B446760(v18, (int *)&v67 + 1, (int *)&v67);
  uint64_t v21 = *a4;
  int32x2_t v22 = *a2;
  v66.i32[1] = HIDWORD(*(unint64_t *)a2);
  v66.i32[0] = v22.i32[0];
  BOOL v23 = (_DWORD *)sub_25B446760(v21, (int *)&v66 + 1, (int *)&v66);
  double result = *(double *)a3;
  if (v20 > *v23) {
    goto LABEL_11;
  }
  uint64_t v25 = *a4;
  double v67 = *(double *)a3;
  int v26 = *(_DWORD *)sub_25B446760(v25, (int *)&v67 + 1, (int *)&v67);
  uint64_t v27 = *a4;
  int32x2_t v66 = *a2;
  int32x2_t v28 = (_DWORD *)sub_25B446760(v27, (int *)&v66 + 1, (int *)&v66);
  int32x2_t v29 = *a2;
  if (v26 == *v28)
  {
    double result = *(double *)a3;
    int v30 = HIDWORD(*(unint64_t *)a3);
    if (v30 < v29.i32[1] || v30 == v29.i32[1] && (vcgt_s32(v29, *(int32x2_t *)&result).u8[0] & 1) != 0)
    {
LABEL_11:
      int32x2_t v31 = *a1;
      *(double *)a1 = result;
      *a3 = v31;
      return result;
    }
  }
  int32x2_t v40 = *a1;
  *a1 = v29;
  *a2 = v40;
  uint64_t v41 = *a4;
  double v42 = *(double *)a3;
  HIDWORD(v67) = HIDWORD(*(unint64_t *)a3);
  LODWORD(v67) = LODWORD(v42);
  int v43 = *(_DWORD *)sub_25B446760(v41, (int *)&v67 + 1, (int *)&v67);
  uint64_t v44 = *a4;
  int32x2_t v45 = *a2;
  v66.i32[1] = HIDWORD(*(unint64_t *)a2);
  v66.i32[0] = v45.i32[0];
  if (v43 > *(_DWORD *)sub_25B446760(v44, (int *)&v66 + 1, (int *)&v66))
  {
    int32x2_t v46 = *a2;
    double result = *(double *)a3;
LABEL_19:
    *(double *)a2 = result;
    *a3 = v46;
    return result;
  }
  uint64_t v61 = *a4;
  double v67 = *(double *)a3;
  int v62 = *(_DWORD *)sub_25B446760(v61, (int *)&v67 + 1, (int *)&v67);
  uint64_t v63 = *a4;
  int32x2_t v66 = *a2;
  if (v62 == *(_DWORD *)sub_25B446760(v63, (int *)&v66 + 1, (int *)&v66))
  {
    double result = *(double *)a3;
    int v64 = HIDWORD(*(unint64_t *)a3);
    int32x2_t v46 = *a2;
    int v65 = HIDWORD(*(unint64_t *)a2);
    if (v64 < v65 || v64 == v65 && (vcgt_s32(v46, *(int32x2_t *)&result).u8[0] & 1) != 0) {
      goto LABEL_19;
    }
  }
  return result;
}

double sub_25B44A4CC(int32x2_t *a1, int32x2_t *a2, int32x2_t *a3, int32x2_t *a4, uint64_t *a5)
{
  sub_25B44A050(a1, a2, a3, a5);
  uint64_t v10 = *a5;
  double v45 = *(double *)a4;
  int v11 = *(_DWORD *)sub_25B446760(v10, (int *)&v45 + 1, (int *)&v45);
  uint64_t v12 = *a5;
  int32x2_t v44 = *a3;
  if (v11 <= *(_DWORD *)sub_25B446760(v12, (int *)&v44 + 1, (int *)&v44))
  {
    uint64_t v23 = *a5;
    double v24 = *(double *)a4;
    HIDWORD(v45) = HIDWORD(*(unint64_t *)a4);
    LODWORD(v45) = LODWORD(v24);
    int v25 = *(_DWORD *)sub_25B446760(v23, (int *)&v45 + 1, (int *)&v45);
    uint64_t v26 = *a5;
    int32x2_t v27 = *a3;
    v44.i32[1] = HIDWORD(*(unint64_t *)a3);
    v44.i32[0] = v27.i32[0];
    if (v25 != *(_DWORD *)sub_25B446760(v26, (int *)&v44 + 1, (int *)&v44)) {
      return result;
    }
    double result = *(double *)a4;
    int v28 = HIDWORD(*(unint64_t *)a4);
    int32x2_t v13 = *a3;
    int v29 = HIDWORD(*(unint64_t *)a3);
    if (v28 >= v29 && (v28 != v29 || (vcgt_s32(v13, *(int32x2_t *)&result).u8[0] & 1) == 0)) {
      return result;
    }
  }
  else
  {
    int32x2_t v13 = *a3;
    double result = *(double *)a4;
  }
  *(double *)a3 = result;
  *a4 = v13;
  uint64_t v15 = *a5;
  double v45 = *(double *)a3;
  int v16 = *(_DWORD *)sub_25B446760(v15, (int *)&v45 + 1, (int *)&v45);
  uint64_t v17 = *a5;
  int32x2_t v44 = *a2;
  if (v16 <= *(_DWORD *)sub_25B446760(v17, (int *)&v44 + 1, (int *)&v44))
  {
    uint64_t v30 = *a5;
    int32x2_t v31 = *a3;
    HIDWORD(v45) = HIDWORD(*(unint64_t *)a3);
    LODWORD(v45) = v31.i32[0];
    int v32 = *(_DWORD *)sub_25B446760(v30, (int *)&v45 + 1, (int *)&v45);
    uint64_t v33 = *a5;
    int32x2_t v34 = *a2;
    v44.i32[1] = HIDWORD(*(unint64_t *)a2);
    v44.i32[0] = v34.i32[0];
    if (v32 != *(_DWORD *)sub_25B446760(v33, (int *)&v44 + 1, (int *)&v44)) {
      return result;
    }
    double result = *(double *)a3;
    int v35 = HIDWORD(*(unint64_t *)a3);
    int32x2_t v18 = *a2;
    int v36 = HIDWORD(*(unint64_t *)a2);
    if (v35 >= v36 && (v35 != v36 || (vcgt_s32(v18, *(int32x2_t *)&result).u8[0] & 1) == 0)) {
      return result;
    }
  }
  else
  {
    int32x2_t v18 = *a2;
    double result = *(double *)a3;
  }
  *(double *)a2 = result;
  *a3 = v18;
  uint64_t v19 = *a5;
  double v45 = *(double *)a2;
  int v20 = *(_DWORD *)sub_25B446760(v19, (int *)&v45 + 1, (int *)&v45);
  uint64_t v21 = *a5;
  int32x2_t v44 = *a1;
  if (v20 > *(_DWORD *)sub_25B446760(v21, (int *)&v44 + 1, (int *)&v44))
  {
    int32x2_t v22 = *a1;
    double result = *(double *)a2;
LABEL_7:
    *(double *)a1 = result;
    *a2 = v22;
    return result;
  }
  uint64_t v37 = *a5;
  int32x2_t v38 = *a2;
  HIDWORD(v45) = HIDWORD(*(unint64_t *)a2);
  LODWORD(v45) = v38.i32[0];
  int v39 = *(_DWORD *)sub_25B446760(v37, (int *)&v45 + 1, (int *)&v45);
  uint64_t v40 = *a5;
  int32x2_t v41 = *a1;
  v44.i32[1] = HIDWORD(*(unint64_t *)a1);
  v44.i32[0] = v41.i32[0];
  if (v39 == *(_DWORD *)sub_25B446760(v40, (int *)&v44 + 1, (int *)&v44))
  {
    double result = *(double *)a2;
    int v42 = HIDWORD(*(unint64_t *)a2);
    int32x2_t v22 = *a1;
    int v43 = HIDWORD(*(unint64_t *)a1);
    if (v42 < v43 || v42 == v43 && (vcgt_s32(v22, *(int32x2_t *)&result).u8[0] & 1) != 0) {
      goto LABEL_7;
    }
  }
  return result;
}

double sub_25B44A7AC(int32x2_t *a1, int32x2_t *a2, int32x2_t *a3, int32x2_t *a4, int32x2_t *a5, uint64_t *a6)
{
  sub_25B44A4CC(a1, a2, a3, a4, a6);
  uint64_t v12 = *a6;
  double v58 = *(double *)a5;
  int v13 = *(_DWORD *)sub_25B446760(v12, (int *)&v58 + 1, (int *)&v58);
  uint64_t v14 = *a6;
  int32x2_t v57 = *a4;
  if (v13 <= *(_DWORD *)sub_25B446760(v14, (int *)&v57 + 1, (int *)&v57))
  {
    uint64_t v29 = *a6;
    double v30 = *(double *)a5;
    HIDWORD(v58) = HIDWORD(*(unint64_t *)a5);
    LODWORD(v58) = LODWORD(v30);
    int v31 = *(_DWORD *)sub_25B446760(v29, (int *)&v58 + 1, (int *)&v58);
    uint64_t v32 = *a6;
    int32x2_t v33 = *a4;
    v57.i32[1] = HIDWORD(*(unint64_t *)a4);
    v57.i32[0] = v33.i32[0];
    if (v31 != *(_DWORD *)sub_25B446760(v32, (int *)&v57 + 1, (int *)&v57)) {
      return result;
    }
    double result = *(double *)a5;
    int v34 = HIDWORD(*(unint64_t *)a5);
    int32x2_t v15 = *a4;
    int v35 = HIDWORD(*(unint64_t *)a4);
    if (v34 >= v35 && (v34 != v35 || (vcgt_s32(v15, *(int32x2_t *)&result).u8[0] & 1) == 0)) {
      return result;
    }
  }
  else
  {
    int32x2_t v15 = *a4;
    double result = *(double *)a5;
  }
  *(double *)a4 = result;
  *a5 = v15;
  uint64_t v17 = *a6;
  double v58 = *(double *)a4;
  int v18 = *(_DWORD *)sub_25B446760(v17, (int *)&v58 + 1, (int *)&v58);
  uint64_t v19 = *a6;
  int32x2_t v57 = *a3;
  if (v18 <= *(_DWORD *)sub_25B446760(v19, (int *)&v57 + 1, (int *)&v57))
  {
    uint64_t v36 = *a6;
    int32x2_t v37 = *a4;
    HIDWORD(v58) = HIDWORD(*(unint64_t *)a4);
    LODWORD(v58) = v37.i32[0];
    int v38 = *(_DWORD *)sub_25B446760(v36, (int *)&v58 + 1, (int *)&v58);
    uint64_t v39 = *a6;
    int32x2_t v40 = *a3;
    v57.i32[1] = HIDWORD(*(unint64_t *)a3);
    v57.i32[0] = v40.i32[0];
    if (v38 != *(_DWORD *)sub_25B446760(v39, (int *)&v57 + 1, (int *)&v57)) {
      return result;
    }
    double result = *(double *)a4;
    int v41 = HIDWORD(*(unint64_t *)a4);
    int32x2_t v20 = *a3;
    int v42 = HIDWORD(*(unint64_t *)a3);
    if (v41 >= v42 && (v41 != v42 || (vcgt_s32(v20, *(int32x2_t *)&result).u8[0] & 1) == 0)) {
      return result;
    }
  }
  else
  {
    int32x2_t v20 = *a3;
    double result = *(double *)a4;
  }
  *(double *)a3 = result;
  *a4 = v20;
  uint64_t v21 = *a6;
  double v58 = *(double *)a3;
  int v22 = *(_DWORD *)sub_25B446760(v21, (int *)&v58 + 1, (int *)&v58);
  uint64_t v23 = *a6;
  int32x2_t v57 = *a2;
  if (v22 <= *(_DWORD *)sub_25B446760(v23, (int *)&v57 + 1, (int *)&v57))
  {
    uint64_t v43 = *a6;
    int32x2_t v44 = *a3;
    HIDWORD(v58) = HIDWORD(*(unint64_t *)a3);
    LODWORD(v58) = v44.i32[0];
    int v45 = *(_DWORD *)sub_25B446760(v43, (int *)&v58 + 1, (int *)&v58);
    uint64_t v46 = *a6;
    int32x2_t v47 = *a2;
    v57.i32[1] = HIDWORD(*(unint64_t *)a2);
    v57.i32[0] = v47.i32[0];
    if (v45 != *(_DWORD *)sub_25B446760(v46, (int *)&v57 + 1, (int *)&v57)) {
      return result;
    }
    double result = *(double *)a3;
    int v48 = HIDWORD(*(unint64_t *)a3);
    int32x2_t v24 = *a2;
    int v49 = HIDWORD(*(unint64_t *)a2);
    if (v48 >= v49 && (v48 != v49 || (vcgt_s32(v24, *(int32x2_t *)&result).u8[0] & 1) == 0)) {
      return result;
    }
  }
  else
  {
    int32x2_t v24 = *a2;
    double result = *(double *)a3;
  }
  *(double *)a2 = result;
  *a3 = v24;
  uint64_t v25 = *a6;
  double v58 = *(double *)a2;
  int v26 = *(_DWORD *)sub_25B446760(v25, (int *)&v58 + 1, (int *)&v58);
  uint64_t v27 = *a6;
  int32x2_t v57 = *a1;
  if (v26 > *(_DWORD *)sub_25B446760(v27, (int *)&v57 + 1, (int *)&v57))
  {
    int32x2_t v28 = *a1;
    double result = *(double *)a2;
LABEL_9:
    *(double *)a1 = result;
    *a2 = v28;
    return result;
  }
  uint64_t v50 = *a6;
  int32x2_t v51 = *a2;
  HIDWORD(v58) = HIDWORD(*(unint64_t *)a2);
  LODWORD(v58) = v51.i32[0];
  int v52 = *(_DWORD *)sub_25B446760(v50, (int *)&v58 + 1, (int *)&v58);
  uint64_t v53 = *a6;
  int32x2_t v54 = *a1;
  v57.i32[1] = HIDWORD(*(unint64_t *)a1);
  v57.i32[0] = v54.i32[0];
  if (v52 == *(_DWORD *)sub_25B446760(v53, (int *)&v57 + 1, (int *)&v57))
  {
    double result = *(double *)a2;
    int v55 = HIDWORD(*(unint64_t *)a2);
    int32x2_t v28 = *a1;
    int v56 = HIDWORD(*(unint64_t *)a1);
    if (v55 < v56 || v55 == v56 && (vcgt_s32(v28, *(int32x2_t *)&result).u8[0] & 1) != 0) {
      goto LABEL_9;
    }
  }
  return result;
}

BOOL sub_25B44AB70(int32x2_t *a1, int32x2_t *a2, uint64_t *a3)
{
  __int32 v4 = a2;
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *a3;
      int32x2_t v49 = a2[-1];
      int v9 = *(_DWORD *)sub_25B446760(v8, (int *)&v49 + 1, (int *)&v49);
      uint64_t v10 = *a3;
      int32x2_t v48 = *a1;
      if (v9 > *(_DWORD *)sub_25B446760(v10, (int *)&v48 + 1, (int *)&v48))
      {
        int32x2_t v11 = *a1;
        int32x2_t v12 = v4[-1];
        goto LABEL_4;
      }
      uint64_t v39 = *a3;
      int32x2_t v49 = v4[-1];
      int v40 = *(_DWORD *)sub_25B446760(v39, (int *)&v49 + 1, (int *)&v49);
      uint64_t v41 = *a3;
      int32x2_t v42 = *a1;
      v48.i32[1] = HIDWORD(*(unint64_t *)a1);
      v48.i32[0] = v42.i32[0];
      if (v40 != *(_DWORD *)sub_25B446760(v41, (int *)&v48 + 1, (int *)&v48)) {
        return 1;
      }
      int32x2_t v12 = v4[-1];
      int32x2_t v11 = *a1;
      int v43 = HIDWORD(*(unint64_t *)a1);
      if (v12.i32[1] < v43 || (BOOL result = 1, v12.i32[1] == v43) && (vcgt_s32(v11, v12).u8[0] & 1) != 0)
      {
LABEL_4:
        *a1 = v12;
        v4[-1] = v11;
        return 1;
      }
      return result;
    case 3:
      sub_25B44A050(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_25B44A4CC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_25B44A7AC(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      int v13 = a1 + 2;
      sub_25B44A050(a1, a1 + 1, a1 + 2, a3);
      uint64_t v14 = a1 + 3;
      if (&a1[3] == v4) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      int32x2_t v44 = v4;
      break;
  }
LABEL_7:
  uint64_t v17 = *a3;
  int32x2_t v18 = *v14;
  v49.i32[1] = HIDWORD(*(unint64_t *)v14);
  v49.i32[0] = v18.i32[0];
  int v19 = *(_DWORD *)sub_25B446760(v17, (int *)&v49 + 1, (int *)&v49);
  uint64_t v20 = *a3;
  int32x2_t v21 = *v13;
  v48.i32[1] = HIDWORD(*(unint64_t *)v13);
  v48.i32[0] = v21.i32[0];
  if (v19 <= *(_DWORD *)sub_25B446760(v20, (int *)&v48 + 1, (int *)&v48))
  {
    uint64_t v23 = *a3;
    int32x2_t v49 = *v14;
    int v24 = *(_DWORD *)sub_25B446760(v23, (int *)&v49 + 1, (int *)&v49);
    uint64_t v25 = *a3;
    int32x2_t v26 = *v13;
    v48.i32[1] = HIDWORD(*(unint64_t *)v13);
    v48.i32[0] = v26.i32[0];
    if (v24 != *(_DWORD *)sub_25B446760(v25, (int *)&v48 + 1, (int *)&v48)) {
      goto LABEL_27;
    }
    int32x2_t v47 = *v14;
    int v27 = HIDWORD(*(unint64_t *)v14);
    int32x2_t v22 = *v13;
    int v28 = HIDWORD(*(unint64_t *)v13);
    if (v27 >= v28 && (v27 != v28 || (vcgt_s32(v22, v47).u8[0] & 1) == 0)) {
      goto LABEL_27;
    }
  }
  else
  {
    int32x2_t v47 = *v14;
    int32x2_t v22 = *v13;
  }
  *uint64_t v14 = v22;
  uint64_t v29 = a1;
  if (v13 == a1) {
    goto LABEL_26;
  }
  int v45 = v16;
  uint64_t v46 = v15;
  uint64_t v30 = v15;
  while (1)
  {
    int v31 = (int32x2_t *)((char *)a1 + v30);
    uint64_t v32 = *a3;
    int32x2_t v49 = v47;
    int v33 = *(_DWORD *)sub_25B446760(v32, (int *)&v49 + 1, (int *)&v49);
    uint64_t v34 = *a3;
    int32x2_t v48 = *(int32x2_t *)((char *)&a1[1] + v30);
    if (v33 <= *(_DWORD *)sub_25B446760(v34, (int *)&v48 + 1, (int *)&v48))
    {
      uint64_t v36 = *a3;
      int32x2_t v49 = v47;
      int v37 = *(_DWORD *)sub_25B446760(v36, (int *)&v49 + 1, (int *)&v49);
      uint64_t v38 = *a3;
      int32x2_t v48 = v31[1];
      if (v37 != *(_DWORD *)sub_25B446760(v38, (int *)&v48 + 1, (int *)&v48))
      {
        uint64_t v29 = v13;
        goto LABEL_25;
      }
      int32x2_t v35 = v31[1];
      if (v47.i32[1] >= v35.i32[1] && (v47.i32[1] != v35.i32[1] || (vcgt_s32(v35, v47).u8[0] & 1) == 0))
      {
        uint64_t v29 = (int32x2_t *)((char *)a1 + v30 + 16);
LABEL_25:
        __int32 v4 = v44;
        uint64_t v15 = v46;
        int v16 = v45;
LABEL_26:
        int32x2_t *v29 = v47;
        if (++v16 == 8) {
          return &v14[1] == v4;
        }
LABEL_27:
        int v13 = v14;
        v15 += 8;
        if (++v14 == v4) {
          return 1;
        }
        goto LABEL_7;
      }
    }
    else
    {
      int32x2_t v35 = v31[1];
    }
    --v13;
    v31[2] = v35;
    v30 -= 8;
    if (v30 == -16)
    {
      uint64_t v29 = a1;
      goto LABEL_25;
    }
  }
}

void sub_25B44AFA0(void *a1)
{
  sub_25B44AFD8(a1);

  JUMPOUT(0x261163EE0);
}

void *sub_25B44AFD8(void *a1)
{
  *a1 = &unk_2708F1448;
  a1[264] = &unk_2708F2218;
  uint64_t v2 = (std::__shared_weak_count *)a1[280];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[245] = &unk_2708F21F8;
  int v3 = (std::__shared_weak_count *)a1[261];
  if (v3) {
    sub_25B404120(v3);
  }
  sub_25B44B088((uint64_t)(a1 + 206));
  sub_25B44B088((uint64_t)(a1 + 167));
  sub_25B523B84((uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_25B44B088(uint64_t a1)
{
  sub_25B44B10C(*(void **)(a1 + 288));
  sub_25B44B168(*(void **)(a1 + 248));
  sub_25B44B168(*(void **)(a1 + 216));
  sub_25B44B10C(*(void **)(a1 + 168));
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(void *)(a1 + 72) = v3;
    operator delete(v3);
  }
  __int32 v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(void *)(a1 + 40) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(void *)(a1 + 16) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_25B44B10C(void *a1)
{
  if (a1)
  {
    sub_25B44B10C(*a1);
    sub_25B44B10C(a1[1]);
    uint64_t v2 = (void *)a1[4];
    if (v2)
    {
      a1[5] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void sub_25B44B168(void *a1)
{
  if (a1)
  {
    sub_25B44B168(*a1);
    sub_25B44B168(a1[1]);
    sub_25B44B1BC((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_25B44B1BC(uint64_t a1)
{
  int v3 = (void **)(a1 + 24);
  sub_25B413C78(&v3);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t sub_25B44B224(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_25B44B288(a1 + 120);
  return a1;
}

void sub_25B44B268(_Unwind_Exception *a1)
{
  sub_25B3F9500(v1 + 64);
  sub_25B3F9500(v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t sub_25B44B288(uint64_t a1)
{
  v79[0] = *MEMORY[0x263EF8340];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  uint64_t v2 = (uint64_t *)(a1 + 40);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  int v3 = (uint64_t *)(a1 + 88);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  __int32 v4 = (uint64_t *)(a1 + 120);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0x4270000041F00000;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  uint64_t v5 = (uint64_t *)(a1 + 160);
  *(void *)(a1 + 176) = 0;
  *(void *)a1 = 512;
  *(void *)(a1 + 8) = -3272228209;
  *(void *)(a1 + 16) = 1065353216;
  *(void *)(a1 + 24) = 3;
  *(_DWORD *)(a1 + 32) = 1062323445;
  uint64_t v6 = operator new(8uLL);
  void *v6 = 0x3F80000000000000;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v46 = 0;
  sub_25B3FCA58(&v46, v6, (uint64_t)(v6 + 1), 2uLL);
  *(void *)&long long v49 = 1;
  float v7 = operator new(8uLL);
  void *v7 = 0x42C800003F800000;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  *((void *)&v49 + 1) = 0;
  sub_25B3FCA58((void *)&v49 + 1, v7, (uint64_t)(v7 + 1), 2uLL);
  uint64_t v52 = 2;
  sub_25B44BF28(v2, (uint64_t)&v46, (uint64_t)&v53);
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    int v9 = *(void **)((char *)&v49 + i * 8 + 8);
    if (v9)
    {
      (&v50)[i] = v9;
      operator delete(v9);
    }
  }
  operator delete(v7);
  operator delete(v6);
  *(_OWORD *)(a1 + 64) = xmmword_25B5F12E0;
  *(_DWORD *)(a1 + 80) = 1046085416;
  *(_DWORD *)(a1 + 152) = 1028982744;
  uint64_t v10 = operator new(8uLL);
  *uint64_t v10 = 0x4000000000000000;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v46 = 0;
  sub_25B3FCA58(&v46, v10, (uint64_t)(v10 + 1), 2uLL);
  *(void *)&long long v49 = 1;
  int32x2_t v11 = operator new(8uLL);
  *int32x2_t v11 = 0x42C8000040000000;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  *((void *)&v49 + 1) = 0;
  sub_25B3FCA58((void *)&v49 + 1, v11, (uint64_t)(v11 + 1), 2uLL);
  uint64_t v52 = 2;
  sub_25B44BF28(v5, (uint64_t)&v46, (uint64_t)&v53);
  for (uint64_t j = 0; j != -8; j -= 4)
  {
    int v13 = *(void **)((char *)&v49 + j * 8 + 8);
    if (v13)
    {
      (&v50)[j] = v13;
      operator delete(v13);
    }
  }
  operator delete(v11);
  operator delete(v10);
  *(_DWORD *)(a1 + 184) = 1036831949;
  uint64_t v14 = operator new(8uLL);
  *uint64_t v14 = 0x3F80000000000000;
  uint64_t v15 = operator new(8uLL);
  *uint64_t v15 = 0x3F0000003F000000;
  int v73 = v15;
  __int32 v74 = v15 + 1;
  unint64_t v75 = v15 + 1;
  float32x2_t v76 = 0;
  int32x2_t v77 = 0;
  __int32 v78 = 0;
  int v16 = operator new(8uLL);
  float32x2_t v76 = v16;
  *int v16 = 0x3ECCCCCD3F733333;
  int32x2_t v77 = v16 + 1;
  __int32 v78 = v16 + 1;
  int v40 = 0;
  long long v39 = 0uLL;
  *(void *)&long long v60 = &v39;
  BYTE8(v60) = 0;
  *(void *)&long long v39 = operator new(0x30uLL);
  *((void *)&v39 + 1) = v39;
  int v40 = (void *)(v39 + 48);
  *((void *)&v39 + 1) = sub_25B44C094((uint64_t)&v40, (uint64_t)&v73, (uint64_t)v79, (void *)v39);
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v46 = 0;
  sub_25B3FCA58(&v46, v14, (uint64_t)(v14 + 1), 2uLL);
  long long v49 = v39;
  uint64_t v50 = v40;
  int v40 = 0;
  long long v39 = 0uLL;
  uint64_t v17 = operator new(8uLL);
  *uint64_t v17 = 0x42C800003F800000;
  int32x2_t v18 = operator new(8uLL);
  *(void *)&long long v60 = v18;
  *int32x2_t v18 = 0x3F00000000000000;
  *((void *)&v60 + 1) = v18 + 1;
  uint64_t v61 = v18 + 1;
  int v62 = 0;
  uint64_t v63 = 0;
  int v64 = 0;
  int v19 = operator new(8uLL);
  int v62 = v19;
  *int v19 = 0x3ECCCCCD3E4CCCCDLL;
  uint64_t v63 = v19 + 1;
  int v64 = v19 + 1;
  int v65 = 0;
  int32x2_t v66 = 0;
  double v67 = 0;
  uint64_t v20 = operator new(8uLL);
  int v65 = v20;
  *uint64_t v20 = 0x3E99999A3F000000;
  int32x2_t v66 = v20 + 1;
  double v67 = v20 + 1;
  uint64_t v68 = 0;
  float v69 = 0;
  float32x2_t v70 = 0;
  int32x2_t v21 = operator new(8uLL);
  uint64_t v68 = v21;
  *int32x2_t v21 = 0x3E4CCCCD3F733333;
  float v69 = v21 + 1;
  float32x2_t v70 = v21 + 1;
  __int32 v72 = 0;
  long long v71 = 0uLL;
  *(void *)&long long v37 = &v71;
  BYTE8(v37) = 0;
  *(void *)&long long v71 = operator new(0x60uLL);
  *((void *)&v71 + 1) = v71;
  __int32 v72 = (_DWORD *)(v71 + 96);
  *((void *)&v71 + 1) = sub_25B44C094((uint64_t)&v72, (uint64_t)&v60, (uint64_t)&v71, (void *)v71);
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  sub_25B3FCA58(&v51, v17, (uint64_t)(v17 + 1), 2uLL);
  long long v54 = v71;
  int v55 = v72;
  __int32 v72 = 0;
  long long v71 = 0uLL;
  sub_25B44C148(v3, (uint64_t)&v46, (uint64_t)&v56);
  for (uint64_t k = 0; k != -96; k -= 48)
  {
    *(void *)&long long v37 = (char *)&v54 + k;
    sub_25B413C78((void ***)&v37);
    uint64_t v23 = *(void **)((char *)&v51 + k);
    if (v23)
    {
      *(uint64_t *)((char *)&v52 + k) = (uint64_t)v23;
      operator delete(v23);
    }
  }
  *(void *)&long long v37 = &v71;
  sub_25B413C78((void ***)&v37);
  for (uint64_t m = 0; m != -12; m -= 3)
  {
    uint64_t v25 = (&v68)[m];
    if (v25)
    {
      (&v69)[m] = v25;
      operator delete(v25);
    }
  }
  operator delete(v17);
  *(void *)&long long v60 = &v39;
  sub_25B413C78((void ***)&v60);
  for (uint64_t n = 0; n != -6; n -= 3)
  {
    int v27 = (&v76)[n];
    if (v27)
    {
      (&v77)[n] = v27;
      operator delete(v27);
    }
  }
  operator delete(v14);
  *(void *)(a1 + 112) = 0x3D883522B922CAB5;
  int v28 = operator new(8uLL);
  *int v28 = 0x3F80000000000000;
  uint64_t v29 = operator new(4uLL);
  int v73 = v29;
  _DWORD *v29 = 1050253722;
  __int32 v74 = v29 + 1;
  unint64_t v75 = v29 + 1;
  uint64_t v61 = 0;
  long long v60 = 0uLL;
  *(void *)&long long v39 = &v60;
  BYTE8(v39) = 0;
  *(void *)&long long v60 = operator new(0x18uLL);
  *((void *)&v60 + 1) = v60;
  uint64_t v61 = (void *)(v60 + 24);
  *((void *)&v60 + 1) = sub_25B44C094((uint64_t)&v61, (uint64_t)&v73, (uint64_t)&v76, (void *)v60);
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v46 = 0;
  sub_25B3FCA58(&v46, v28, (uint64_t)(v28 + 1), 2uLL);
  long long v49 = v60;
  uint64_t v50 = v61;
  uint64_t v61 = 0;
  long long v60 = 0uLL;
  uint64_t v30 = operator new(8uLL);
  void *v30 = 0x400000003F800000;
  int v31 = operator new(4uLL);
  *(void *)&long long v71 = v31;
  _DWORD *v31 = 1045220557;
  *((void *)&v71 + 1) = v31 + 1;
  __int32 v72 = v31 + 1;
  int v40 = 0;
  long long v39 = 0uLL;
  *(void *)&long long v37 = &v39;
  BYTE8(v37) = 0;
  *(void *)&long long v39 = operator new(0x18uLL);
  *((void *)&v39 + 1) = v39;
  int v40 = (void *)(v39 + 24);
  *((void *)&v39 + 1) = sub_25B44C094((uint64_t)&v40, (uint64_t)&v71, (uint64_t)&v73, (void *)v39);
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  sub_25B3FCA58(&v51, v30, (uint64_t)(v30 + 1), 2uLL);
  long long v54 = v39;
  int v55 = v40;
  int v40 = 0;
  long long v39 = 0uLL;
  uint64_t v32 = operator new(8uLL);
  void *v32 = 0x42C8000040000000;
  int v33 = operator new(4uLL);
  uint64_t __p = v33;
  _DWORD *v33 = 1045220557;
  int32x2_t v44 = v33 + 1;
  int v45 = v33 + 1;
  uint64_t v38 = 0;
  long long v37 = 0uLL;
  uint64_t v41 = (void **)&v37;
  char v42 = 0;
  *(void *)&long long v37 = operator new(0x18uLL);
  *((void *)&v37 + 1) = v37;
  uint64_t v38 = v37 + 24;
  *((void *)&v37 + 1) = sub_25B44C094((uint64_t)&v38, (uint64_t)&__p, (uint64_t)&v46, (void *)v37);
  uint64_t v56 = 0;
  v57[0] = 0;
  v57[1] = 0;
  sub_25B3FCA58(&v56, v32, (uint64_t)(v32 + 1), 2uLL);
  long long v58 = v37;
  uint64_t v59 = v38;
  uint64_t v38 = 0;
  long long v37 = 0uLL;
  sub_25B44C148(v4, (uint64_t)&v46, (uint64_t)&v60);
  for (iuint64_t i = 0; ii != -18; ii -= 6)
  {
    uint64_t v41 = (void **)((char *)&v58 + ii * 8);
    sub_25B413C78(&v41);
    int32x2_t v35 = (void *)v57[ii - 1];
    if (v35)
    {
      v57[ii] = v35;
      operator delete(v35);
    }
  }
  uint64_t v41 = (void **)&v37;
  sub_25B413C78(&v41);
  if (__p)
  {
    int32x2_t v44 = __p;
    operator delete(__p);
  }
  operator delete(v32);
  *(void *)&long long v37 = &v39;
  sub_25B413C78((void ***)&v37);
  if ((void)v71)
  {
    *((void *)&v71 + 1) = v71;
    operator delete((void *)v71);
  }
  operator delete(v30);
  *(void *)&long long v39 = &v60;
  sub_25B413C78((void ***)&v39);
  if (v73)
  {
    __int32 v74 = v73;
    operator delete(v73);
  }
  operator delete(v28);
  return a1;
}

void sub_25B44BB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, uint64_t **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  for (uint64_t i = 96; i != -48; i -= 48)
    sub_25B44C2C0(v47 + i);
  a20 = (uint64_t *)&a13;
  sub_25B413C78((void ***)&a20);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  operator delete(v46);
  a13 = &a17;
  sub_25B413C78((void ***)&a13);
  uint64_t v51 = *(void **)(v48 - 208);
  if (v51)
  {
    *(void *)(v48 - 200) = v51;
    operator delete(v51);
  }
  operator delete(v45);
  a17 = &a43;
  sub_25B413C78((void ***)&a17);
  uint64_t v52 = *(void **)(v48 - 184);
  if (v52)
  {
    *(void *)(v48 - 176) = v52;
    operator delete(v52);
  }
  operator delete(v44);
  sub_25B44B10C(*a9);
  sub_25B44B168(*a10);
  sub_25B44B168(*a11);
  sub_25B44B10C(*a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_25B44BF28(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *BOOL result = (uint64_t)(result + 1);
    *(void *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(void *)(v6 + 8)) {
      uint64_t v8 = *(uint64_t **)(v6 + 8);
    }
    else {
      uint64_t v8 = (uint64_t *)v6;
    }
    uint64_t v14 = result;
    uint64_t v15 = v8;
    int v16 = v8;
    if (v8)
    {
      uint64_t v15 = sub_25B3FFA98((uint64_t)v8);
      while (a2 != a3)
      {
        int v9 = (uint64_t **)sub_25B44C35C((uint64_t)v5, &v12, *(float **)a2, *(void *)(a2 + 8));
        if (!*v9)
        {
          uint64_t v10 = v9;
          v13[0] = (uint64_t)(v8 + 4);
          v13[1] = (uint64_t)(v8 + 7);
          sub_25B44C908((uint64_t)v13, a2);
          sub_25B3FA740(v5, v12, v10, v8);
          uint64_t v8 = v15;
          int v16 = v15;
          if (!v15)
          {
            a2 += 32;
            break;
          }
          uint64_t v15 = sub_25B3FFA98((uint64_t)v15);
        }
        a2 += 32;
        if (!v8) {
          break;
        }
      }
    }
    BOOL result = (uint64_t *)sub_25B44C7D0((uint64_t)&v14);
  }
  while (a2 != a3)
  {
    BOOL result = sub_25B44C35C((uint64_t)v5, v13, *(float **)a2, *(void *)(a2 + 8));
    if (!*result)
    {
      int32x2_t v11 = (uint64_t **)result;
      sub_25B44C820((uint64_t)&v14, (uint64_t)v5, a2);
      BOOL result = sub_25B3FA740(v5, v13[0], v11, v14);
    }
    a2 += 32;
  }
  return result;
}

void sub_25B44C080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_25B44C7D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_25B44C094(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  __int32 v4 = a4;
  uint64_t v10 = a4;
  int32x2_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_25B3FCA58(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      __int32 v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_25B43E9EC((uint64_t)v8);
  return v4;
}

void sub_25B44C134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_25B44C148(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a1[2])
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(void *)(v7 + 16) = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (*(void *)(v6 + 8)) {
      uint64_t v8 = *(uint64_t **)(v6 + 8);
    }
    else {
      uint64_t v8 = (uint64_t *)v6;
    }
    uint64_t v15 = a1;
    int v16 = v8;
    uint64_t v17 = v8;
    if (v8)
    {
      int v16 = sub_25B3FFA98((uint64_t)v8);
      while (a2 != a3)
      {
        char v9 = (uint64_t **)sub_25B44C35C((uint64_t)a1, &v13, *(float **)a2, *(void *)(a2 + 8));
        if (!*v9)
        {
          uint64_t v10 = v9;
          v14[0] = (uint64_t)(v8 + 4);
          v14[1] = (uint64_t)(v8 + 7);
          sub_25B44C5AC((uint64_t)v14, a2);
          sub_25B3FA740((uint64_t **)a1, v13, v10, v8);
          uint64_t v8 = v16;
          uint64_t v17 = v16;
          if (!v16)
          {
            a2 += 48;
            break;
          }
          int v16 = sub_25B3FFA98((uint64_t)v16);
        }
        a2 += 48;
        if (!v8) {
          break;
        }
      }
    }
    sub_25B44C30C((uint64_t)&v15);
  }
  while (a2 != a3)
  {
    int32x2_t v11 = (uint64_t **)sub_25B44C35C((uint64_t)a1, v14, *(float **)a2, *(void *)(a2 + 8));
    if (!*v11)
    {
      uint64_t v12 = v11;
      sub_25B44C42C((uint64_t)&v15, (uint64_t)a1, a2);
      sub_25B3FA740((uint64_t **)a1, v14[0], v12, v15);
      uint64_t v15 = 0;
      sub_25B44C4EC((uint64_t)&v15);
    }
    a2 += 48;
  }
}

void sub_25B44C2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_25B44C30C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B44C2C0(uint64_t a1)
{
  __int32 v4 = (void **)(a1 + 24);
  sub_25B413C78(&v4);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_25B44C30C(uint64_t a1)
{
  sub_25B44B168(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        int v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_25B44B168(v2);
  }
  return a1;
}

void *sub_25B44C35C(uint64_t a1, void *a2, float *a3, uint64_t a4)
{
  uint64_t v6 = (void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    do
    {
      while (1)
      {
        char v9 = (void *)v5;
        uint64_t v10 = *(float **)(v5 + 32);
        uint64_t v11 = *(void *)(v5 + 40);
        unsigned __int8 v12 = sub_25B44C544(a3, a4, v10, v11);
        if (v12 == 129 || ((char)v12 & 0x80000000) == 0) {
          break;
        }
        uint64_t v5 = *v9;
        uint64_t v6 = v9;
        if (!*v9) {
          goto LABEL_11;
        }
      }
      unsigned __int8 v13 = sub_25B44C544(v10, v11, a3, a4);
      if (v13 == 129) {
        break;
      }
      if (((char)v13 & 0x80000000) == 0) {
        break;
      }
      uint64_t v6 = v9 + 1;
      uint64_t v5 = v9[1];
    }
    while (v5);
  }
  else
  {
    char v9 = (void *)(a1 + 8);
  }
LABEL_11:
  *a2 = v9;
  return v6;
}

void *sub_25B44C42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v6[4] = 0;
  v6[5] = 0;
  v6[6] = 0;
  sub_25B3FCA58(v6 + 4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  BOOL result = sub_25B43E84C(v6 + 7, *(void *)(a3 + 24), *(void *)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3));
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_25B44C4C0(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 40) = v5;
    operator delete(v5);
  }
  sub_25B44C4EC(v1);
  _Unwind_Resume(a1);
}

void sub_25B44C4EC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B44B1BC((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t sub_25B44C544(float *a1, uint64_t a2, float *a3, uint64_t a4)
{
  uint64_t v4 = (a2 - (uint64_t)a1) >> 2;
  uint64_t v5 = (a4 - (uint64_t)a3) >> 2;
  if (v5 >= v4) {
    uint64_t v6 = (a2 - (uint64_t)a1) >> 2;
  }
  else {
    uint64_t v6 = (a4 - (uint64_t)a3) >> 2;
  }
  if (v6 < 1)
  {
LABEL_15:
    if (v4 < v5) {
      LODWORD(v7) = -1;
    }
    else {
      LODWORD(v7) = 1;
    }
    if (v4 == v5) {
      return 0;
    }
    else {
      return v7;
    }
  }
  else
  {
    while (1)
    {
      if (*a1 == *a3) {
        LODWORD(v7) = 0;
      }
      else {
        LODWORD(v7) = -127;
      }
      if (*a1 > *a3) {
        LODWORD(v7) = 1;
      }
      uint64_t v7 = *a1 < *a3 ? 0xFFFFFFFFLL : v7;
      if (v7) {
        break;
      }
      ++a1;
      ++a3;
      if (!--v6) {
        goto LABEL_15;
      }
    }
  }
  return v7;
}

uint64_t sub_25B44C5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)a1;
  if (v4 != (char *)a2) {
    sub_25B3FE7A8(v4, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5 != a2 + 24)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v8 = *(void *)(v5 + 16);
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
    uint64_t v10 = *(char **)v5;
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)v5) >> 3) < v9)
    {
      if (v10)
      {
        sub_25B413CCC(*(uint64_t **)(a1 + 8));
        operator delete(*(void **)v5);
        uint64_t v8 = 0;
        *(void *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
      }
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        sub_25B3FBC4C();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= v9) {
        uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      sub_25B413D24((void *)v5, v13);
      uint64_t v14 = sub_25B43E938(v5 + 16, v7, v6, *(void **)(v5 + 8));
      goto LABEL_16;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 8) - (void)v10) >> 3) < v9)
    {
      uint64_t v15 = v7 + 8 * ((uint64_t)(*(void *)(v5 + 8) - (void)v10) >> 3);
      sub_25B44C768(v7, v15, v10);
      uint64_t v14 = sub_25B43E938(v5 + 16, v15, v6, *(void **)(v5 + 8));
LABEL_16:
      *(void *)(v5 + 8) = v14;
      return a1;
    }
    int v16 = sub_25B44C768(v7, v6, v10);
    uint64_t v17 = *(char **)(v5 + 8);
    if (v17 != v16)
    {
      int32x2_t v18 = *(char **)(v5 + 8);
      do
      {
        uint64_t v20 = (void *)*((void *)v18 - 3);
        v18 -= 24;
        int v19 = v20;
        if (v20)
        {
          *((void *)v17 - 2) = v19;
          operator delete(v19);
        }
        uint64_t v17 = v18;
      }
      while (v18 != v16);
    }
    *(void *)(v5 + 8) = v16;
  }
  return a1;
}

void sub_25B44C758(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_25B44C760(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_25B44C768(uint64_t a1, uint64_t a2, char *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if ((char *)v5 != a3) {
        sub_25B3FE7A8(a3, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
      }
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_25B44C7D0(uint64_t a1)
{
  sub_25B44B10C(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        int v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_25B44B10C(v2);
  }
  return a1;
}

void *sub_25B44C820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  v6[5] = 0;
  v6[6] = 0;
  uint64_t v6[4] = 0;
  BOOL result = sub_25B3FCA58(v6 + 4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  v6[7] = *(void *)(a3 + 24);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_25B44C88C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_25B44C8A8(0, v2);
  _Unwind_Resume(a1);
}

void sub_25B44C8A8(char a1, void *__p)
{
  if (a1)
  {
    int v3 = (void *)__p[4];
    if (v3)
    {
      __p[5] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_25B44C908(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)a1;
  if (v4 != (char *)a2) {
    sub_25B3FE7A8(v4, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  **(void **)(a1 + 8) = *(void *)(a2 + 24);
  return a1;
}

uint64_t sub_25B44C958(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1448;
  *(void *)(a1 + 8) = &unk_2708F1860;
  *(void *)(a1 + 16) = &unk_2708F16D8;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = &unk_2708F21C0;
  *(void *)(a1 + 96) = &unk_2708F21F8;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 232) = 257;
  *(void *)(a1 + 248) = &unk_2708F21F8;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(_WORD *)(a1 + 384) = 257;
  *(void *)(a1 + 400) = &unk_2708F21F8;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 536) = 257;
  *(void *)(a1 + 552) = &unk_2708F27E8;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 672) = 0;
  *(_WORD *)(a1 + 688) = 257;
  *(void *)(a1 + 704) = &unk_2708F27E8;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 824) = 0;
  *(_WORD *)(a1 + 840) = 257;
  *(void *)(a1 + 856) = &unk_2708F27E8;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(void *)(a1 + 984) = 0;
  *(void *)(a1 + 976) = 0;
  *(_WORD *)(a1 + 992) = 257;
  *(void *)(a1 + 1016) = &unk_2708F21F8;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(void *)(a1 + 1144) = 0;
  *(void *)(a1 + 1136) = 0;
  *(_WORD *)(a1 + 1152) = 257;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1192) = 0;
  *(void *)(a1 + 1216) = 0;
  *(void *)(a1 + 1208) = 0;
  *(void *)(a1 + 1200) = a1 + 1208;
  *(void *)(a1 + 1224) = 70;
  *(_DWORD *)(a1 + 1240) = 0;
  *(void *)(a1 + 1232) = 0x42C800003C23D70ALL;
  *(void *)(a1 + 1248) = 64;
  *(void *)(a1 + 1272) = 64;
  *(_OWORD *)(a1 + 1256) = xmmword_25B5F12F0;
  *(_DWORD *)(a1 + 1280) = 1008981770;
  *(unsigned char *)(a1 + 1284) = 1;
  *(void *)(a1 + 1304) = 0;
  *(void *)(a1 + 1296) = 0;
  *(void *)(a1 + 1288) = a1 + 1296;
  *(void *)(a1 + 1328) = 0;
  *(void *)(a1 + 1320) = 0;
  *(void *)(a1 + 1312) = a1 + 1320;
  sub_25B44B224(a1 + 1336);
  sub_25B44B224(a1 + 1648);
  *(void *)(a1 + 1960) = &unk_2708F21F8;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(void *)(a1 + 2088) = 0;
  *(void *)(a1 + 2080) = 0;
  *(_WORD *)(a1 + 2096) = 257;
  *(void *)(a1 + 2112) = &unk_2708F2218;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(void *)(a1 + 2232) = 0;
  *(void *)(a1 + 2240) = 0;
  *(_WORD *)(a1 + 2248) = 257;
  return a1;
}

void sub_25B44CCDC(_Unwind_Exception *a1)
{
  sub_25B44B088(v2);
  sub_25B523B84(v1);
  _Unwind_Resume(a1);
}

void sub_25B44CD00(uint64_t a1, const void **a2, char **a3, __CVBuffer *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v73 = a6;
  uint64_t v111 = *MEMORY[0x263EF8340];
  sub_25B403500(&v103, "loi_input_2");
  sub_25B403500(v105, "jmap");
  sub_25B403500(v106, "jmap_peaks");
  sub_25B403500(v107, "lmap");
  BOOL v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t __p = &v98;
  LOBYTE(v86) = 0;
  uint64_t v72 = a7;
  BOOL v98 = (char *)operator new(0x60uLL);
  uint64_t v99 = v98;
  uint64_t v100 = v98 + 96;
  uint64_t v11 = 0;
  uint64_t v99 = sub_25B4FF578((uint64_t)&v100, &v103, &v108, v98);
  do
  {
    if (SHIBYTE(v107[v11 + 2]) < 0) {
      operator delete((void *)v107[v11]);
    }
    v11 -= 3;
  }
  while (v11 != -12);
  *(unsigned char *)(a1 + 1168) = *(unsigned char *)a5;
  if (a1 + 1168 != a5)
  {
    sub_25B469194((char *)(a1 + 1176), *(char **)(a5 + 8), *(void *)(a5 + 16), (uint64_t)(*(void *)(a5 + 16) - *(void *)(a5 + 8)) >> 3);
    uint64_t v12 = *(void **)(a5 + 32);
    unint64_t v13 = (void *)(a5 + 40);
    if (*(void *)(a1 + 1216))
    {
      uint64_t v14 = *(void *)(a1 + 1200);
      *(void *)(a1 + 1200) = a1 + 1208;
      *(void *)(*(void *)(a1 + 1208) + 16) = 0;
      *(void *)(a1 + 1208) = 0;
      *(void *)(a1 + 1216) = 0;
      if (*(void *)(v14 + 8)) {
        uint64_t v15 = *(void *)(v14 + 8);
      }
      else {
        uint64_t v15 = v14;
      }
      *(void *)&long long v103 = a1 + 1200;
      *((void *)&v103 + 1) = v15;
      uint64_t v104 = v15;
      if (!v15 || (*((void *)&v103 + 1) = sub_25B3FFA98(v15), v12 == v13))
      {
        int v19 = v12;
      }
      else
      {
        do
        {
          if ((void *)v15 != v12) {
            sub_25B469194((char *)(v15 + 32), (char *)v12[4], v12[5], (uint64_t)(v12[5] - v12[4]) >> 3);
          }
          std::string::operator=((std::string *)(v15 + 56), (const std::string *)(v12 + 7));
          int v16 = (uint64_t *)v104;
          uint64_t v17 = (uint64_t **)sub_25B523EA8(a1 + 1200, &__p, *(void **)(v104 + 32), *(void *)(v104 + 40));
          sub_25B3FA740((uint64_t **)(a1 + 1200), (uint64_t)__p, v17, v16);
          uint64_t v104 = *((void *)&v103 + 1);
          if (*((void *)&v103 + 1)) {
            *((void *)&v103 + 1) = sub_25B3FFA98(*((uint64_t *)&v103 + 1));
          }
          int32x2_t v18 = (void *)v12[1];
          if (v18)
          {
            do
            {
              int v19 = v18;
              int32x2_t v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              int v19 = (void *)v12[2];
              BOOL v20 = *v19 == (void)v12;
              uint64_t v12 = v19;
            }
            while (!v20);
          }
          uint64_t v15 = v104;
          if (v104) {
            BOOL v20 = v19 == v13;
          }
          else {
            BOOL v20 = 1;
          }
          uint64_t v12 = v19;
        }
        while (!v20);
      }
      sub_25B50294C((uint64_t)&v103);
      uint64_t v12 = v19;
    }
    if (v12 != v13)
    {
      do
      {
        int32x2_t v21 = (uint64_t *)operator new(0x50uLL);
        *(void *)&long long v103 = v21;
        *((void *)&v103 + 1) = a1 + 1208;
        LOBYTE(v104) = 0;
        v21[4] = 0;
        v21[5] = 0;
        v21[6] = 0;
        sub_25B46BD74(v21 + 4, (const void *)v12[4], v12[5], (uint64_t)(v12[5] - v12[4]) >> 3);
        int32x2_t v22 = v21 + 7;
        if (*((char *)v12 + 79) < 0)
        {
          sub_25B4002F4(v22, (void *)v12[7], v12[8]);
        }
        else
        {
          long long v23 = *(_OWORD *)(v12 + 7);
          v21[9] = v12[9];
          *(_OWORD *)int32x2_t v22 = v23;
        }
        LOBYTE(v104) = 1;
        int v24 = (uint64_t **)sub_25B523EA8(a1 + 1200, &__p, (void *)v21[4], v21[5]);
        sub_25B3FA740((uint64_t **)(a1 + 1200), (uint64_t)__p, v24, v21);
        *(void *)&long long v103 = 0;
        sub_25B50299C((uint64_t)&v103);
        uint64_t v25 = (void *)v12[1];
        if (v25)
        {
          do
          {
            int32x2_t v26 = v25;
            uint64_t v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            int32x2_t v26 = (void *)v12[2];
            BOOL v20 = *v26 == (void)v12;
            uint64_t v12 = v26;
          }
          while (!v20);
        }
        uint64_t v12 = v26;
      }
      while (v26 != v13);
    }
  }
  long long v27 = *(_OWORD *)(a5 + 56);
  long long v28 = *(_OWORD *)(a5 + 72);
  long long v29 = *(_OWORD *)(a5 + 88);
  *(_OWORD *)(a1 + 1269) = *(_OWORD *)(a5 + 101);
  *(_OWORD *)(a1 + 1256) = v29;
  *(_OWORD *)(a1 + 1240) = v28;
  *(_OWORD *)(a1 + 1224) = v27;
  uint64_t v78 = a1 + 16;
  sub_25B4D744C(a1 + 16, a2);
  sub_25B403500(&v103, "input_image");
  sub_25B4D7BC0(*(void *)(a1 + 24), (uint64_t)&v103, a4);
  if (SHIBYTE(v104) < 0) {
    operator delete((void *)v103);
  }
  int v31 = v98;
  uint64_t v30 = v99;
  if (v98 != v99)
  {
    uint64_t v77 = *MEMORY[0x263F04130];
    CFAllocatorRef v32 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    int v33 = (uint64_t **)(a1 + 1288);
    __int32 v74 = (uint64_t **)(a1 + 1312);
    do
    {
      uint64_t v34 = a1;
      int32x2_t v35 = sub_25B4D7D08(v78, (uint64_t)v31);
      uint64_t v36 = *(void *)v35;
      uint64_t v37 = *(void *)(*(void *)v35 + 8);
      uint64_t v38 = *(void *)(*(void *)v35 + 16);
      v80[0] = v37;
      *(void *)&v79[0] = v38;
      size_t v39 = *(void *)(v36 + 24);
      CVPixelBufferRef pixelBufferOut = 0;
      size_t v97 = v39;
      int v40 = *((_DWORD *)v35 + 7);
      uint64_t v101 = v77;
      uint64_t v102 = MEMORY[0x263EFFA78];
      objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v41, (uint64_t)&v102, &v101, 1, v72, v73);
      CFDictionaryRef v42 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      if (v40 == 3) {
        OSType v43 = 1278226536;
      }
      else {
        OSType v43 = 1278226534;
      }
      CVPixelBufferCreate(v32, v39, v38 * v37, v43, v42, &pixelBufferOut);
      a1 = v34;
      CVPixelBufferRef v44 = pixelBufferOut;
      *(void *)&long long v103 = v31;
      sub_25B523C88(v33, v31, (long long **)&v103)[7] = (uint64_t)v44;
      sub_25B4D7C64(*(void *)(v34 + 24), (uint64_t)v31, pixelBufferOut);
      uint64_t v45 = v31[23];
      int v46 = (char)v45;
      if ((v45 & 0x80u) != 0) {
        uint64_t v45 = *((void *)v31 + 1);
      }
      if (v45 == 4)
      {
        uint64_t v47 = v46 >= 0 ? v31 : *(char **)v31;
        if (*(_DWORD *)v47 == 1885433196)
        {
          sub_25B4CB164(&__p, v80, (uint64_t *)v79, &v97);
          sub_25B45A630((uint64_t)&v103, (long long *)&__p);
          uint64_t __p = v31;
          uint64_t v48 = sub_25B523D3C(v74, v31, (long long **)&__p);
          sub_25B453C28((uint64_t)(v48 + 56), (uint64_t)&v103);
          *(void *)&long long v103 = &unk_2708F2218;
          if (v110) {
            sub_25B404120(v110);
          }
        }
      }

      v31 += 24;
    }
    while (v31 != v30);
  }
  sub_25B4D7B34();
  sub_25B49DB70((uint64_t)v80, *(void *)(a1 + 1248), 0.0, 1.0);
  LODWORD(v97) = 1;
  sub_25B46E42C(v79, (void *)(a1 + 1248), (int *)&v97);
  if (v84)
  {
    long long v49 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v50 = sub_25B406B20(v49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v50, (uint64_t)" ", 1);
    uint64_t v51 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v52 = (void *)std::ostream::operator<<();
    sub_25B406B20(v52, (uint64_t)" ", 1);
    sub_25B406B20(v52, (uint64_t)"reshape", 7);
    std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(*v52 - 24)));
    uint64_t v53 = std::locale::use_facet((const std::locale *)&v103, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
    std::locale::~locale((std::locale *)&v103);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(void *)(*v51 - 24)));
    long long v54 = std::locale::use_facet((const std::locale *)&v103, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
    std::locale::~locale((std::locale *)&v103);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*((void *)&v79[0] + 1) * *(void *)&v79[0] != v80[1])
  {
    int v55 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v56 = sub_25B406B20(v55, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v56, (uint64_t)" ", 1);
    int32x2_t v57 = (void *)MEMORY[0x263F8C0F8];
    long long v58 = (void *)std::ostream::operator<<();
    sub_25B406B20(v58, (uint64_t)" ", 1);
    sub_25B406B20(v58, (uint64_t)"reshape", 7);
    std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
    uint64_t v59 = std::locale::use_facet((const std::locale *)&v103, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
    std::locale::~locale((std::locale *)&v103);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4A6D98("err", "length not match, cannot reshape");
    std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(void *)(*v57 - 24)));
    long long v60 = std::locale::use_facet((const std::locale *)&v103, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
    std::locale::~locale((std::locale *)&v103);
    std::ostream::put();
    std::ostream::flush();
  }
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  memset(v89, 0, sizeof(v89));
  __int32 v92 = 0;
  float v93 = 0;
  uint64_t __p = &unk_2708F21F8;
  __int16 v94 = 257;
  if (v83)
  {
    uint64_t v61 = v81;
    int v62 = v82;
    if (!v82)
    {
      __int32 v92 = v81;
      float v93 = 0;
      goto LABEL_71;
    }
    atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v63 = v93;
    __int32 v92 = v61;
    float v93 = v62;
    if (!v63) {
      goto LABEL_71;
    }
  }
  else
  {
    sub_25B503BF8((uint64_t)&v103, (uint64_t)v80);
    int v65 = v109;
    int v64 = v110;
    if (v110) {
      atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int32x2_t v66 = v93;
    __int32 v92 = v65;
    float v93 = v64;
    if (v66) {
      sub_25B404120(v66);
    }
    *(void *)&long long v103 = &unk_2708F27E8;
    uint64_t v63 = v110;
    if (!v110) {
      goto LABEL_71;
    }
  }
  sub_25B404120(v63);
LABEL_71:
  uint64_t v67 = 0;
  long long v86 = v79[0];
  long long v87 = v79[1];
  long long v88 = v79[2];
  uint64_t v68 = 1;
  *(void *)&v89[0] = *((void *)&v79[0] + 1);
  *((void *)&v89[0] + 1) = 1;
  uint64_t v90 = *(void *)&v79[0] * *((void *)&v79[0] + 1);
  uint64_t v91 = 0;
  HIBYTE(v94) = 0;
  while (1)
  {
    uint64_t v69 = *(void *)((char *)&v86 + v67 + 8);
    if (v69 != 1)
    {
      if (*(void *)((char *)v89 + v67 + 8) != v68)
      {
        char v70 = 0;
LABEL_78:
        LOBYTE(v94) = v70;
        uint64_t v95 = *v92;
        sub_25B453C28(a1 + 1016, (uint64_t)&__p);
        uint64_t __p = &unk_2708F21F8;
        if (v93) {
          sub_25B404120(v93);
        }
        v80[0] = &unk_2708F27E8;
        if (v82) {
          sub_25B404120(v82);
        }
        long long v71 = *a3;
        if ((*a3)[23] < 0) {
          long long v71 = *(char **)v71;
        }
        sub_25B403500(&__p, v71);
        sub_25B5CDA90((uint64_t)&v103, (uint64_t)&__p);
      }
      v68 *= v69;
    }
    v67 -= 8;
    if (v67 == -16)
    {
      char v70 = 1;
      goto LABEL_78;
    }
  }
}

void sub_25B44DA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a56) {
    sub_25B404120((std::__shared_weak_count *)a56);
  }
  a21 = (uint64_t)&unk_2708F27E8;
  if (a37) {
    sub_25B404120((std::__shared_weak_count *)a37);
  }
  a21 = (uint64_t)&a61;
  sub_25B41032C((void ***)&a21);
  _Unwind_Resume(a1);
}

float sub_25B44DC28(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(a1 + 136) = v5;
  *(_OWORD *)(a1 + 120) = v4;
  if ((long long *)(a1 + 120) == a2)
  {
    long long v8 = a2[4];
    *(_DWORD *)(a1 + 200) = *((_DWORD *)a2 + 20);
    *(_OWORD *)(a1 + 184) = v8;
    *(void *)(a1 + 232) = *((void *)a2 + 14);
    uint64_t v9 = *((void *)a2 + 18);
    *(_DWORD *)(a1 + 272) = *((_DWORD *)a2 + 38);
    *(void *)(a1 + 264) = v9;
  }
  else
  {
    sub_25B44DD08((uint64_t **)(a1 + 160), *((void **)a2 + 5), (void *)a2 + 6);
    long long v6 = a2[4];
    *(_DWORD *)(a1 + 200) = *((_DWORD *)a2 + 20);
    *(_OWORD *)(a1 + 184) = v6;
    sub_25B44DEC4(a1 + 208, *((void **)a2 + 11), (void *)a2 + 12);
    *(void *)(a1 + 232) = *((void *)a2 + 14);
    sub_25B44DEC4(a1 + 240, *((void **)a2 + 15), (void *)a2 + 16);
    uint64_t v7 = *((void *)a2 + 18);
    *(_DWORD *)(a1 + 272) = *((_DWORD *)a2 + 38);
    *(void *)(a1 + 264) = v7;
    sub_25B44DD08((uint64_t **)(a1 + 280), *((void **)a2 + 20), (void *)a2 + 21);
  }
  float result = *((float *)a2 + 46);
  *(float *)(a1 + 304) = result;
  return result;
}

uint64_t **sub_25B44DD08(uint64_t **result, void *a2, void *a3)
{
  long long v5 = result;
  if (result[2])
  {
    long long v6 = *result;
    uint64_t v7 = result[1];
    *float result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      long long v8 = (uint64_t *)v6[1];
    }
    else {
      long long v8 = v6;
    }
    int v19 = (uint64_t *)result;
    BOOL v20 = v8;
    int32x2_t v21 = v8;
    if (v8)
    {
      BOOL v20 = sub_25B3FFA98((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          sub_25B44C908((uint64_t)v18, (uint64_t)(v9 + 4));
          uint64_t v10 = v21;
          uint64_t v11 = (uint64_t **)sub_25B44E08C((uint64_t)v5, v18, (float *)v21[4], v21[5]);
          sub_25B3FA740(v5, v18[0], v11, v10);
          int32x2_t v21 = v20;
          if (v20) {
            BOOL v20 = sub_25B3FFA98((uint64_t)v20);
          }
          uint64_t v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              uint64_t v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v13 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v13);
          }
          long long v8 = v21;
          if (v21) {
            BOOL v13 = a2 == a3;
          }
          else {
            BOOL v13 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v13);
      }
    }
    float result = (uint64_t **)sub_25B44C7D0((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      sub_25B44C820((uint64_t)&v19, (uint64_t)v5, (uint64_t)(a2 + 4));
      uint64_t v14 = v19;
      uint64_t v15 = (uint64_t **)sub_25B44E08C((uint64_t)v5, v18, (float *)v19[4], v19[5]);
      float result = (uint64_t **)sub_25B3FA740(v5, v18[0], v15, v14);
      int v16 = (void *)a2[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          int v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)a2[2];
          BOOL v13 = *v17 == (void)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void sub_25B44DEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_25B44C7D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25B44DEC4(uint64_t a1, void *a2, void *a3)
{
  if (*(void *)(a1 + 16))
  {
    long long v6 = *(uint64_t **)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v6[1]) {
      long long v8 = (uint64_t *)v6[1];
    }
    else {
      long long v8 = v6;
    }
    uint64_t v19 = a1;
    BOOL v20 = v8;
    int32x2_t v21 = v8;
    if (v8)
    {
      BOOL v20 = sub_25B3FFA98((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          sub_25B44C5AC((uint64_t)v18, (uint64_t)(v9 + 4));
          uint64_t v10 = v21;
          uint64_t v11 = (uint64_t **)sub_25B44E08C(a1, v18, (float *)v21[4], v21[5]);
          sub_25B3FA740((uint64_t **)a1, v18[0], v11, v10);
          int32x2_t v21 = v20;
          if (v20) {
            BOOL v20 = sub_25B3FFA98((uint64_t)v20);
          }
          uint64_t v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              uint64_t v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v13 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v13);
          }
          long long v8 = v21;
          if (v21) {
            BOOL v13 = a2 == a3;
          }
          else {
            BOOL v13 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v13);
      }
    }
    sub_25B44C30C((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      sub_25B44C42C((uint64_t)&v19, a1, (uint64_t)(a2 + 4));
      uint64_t v14 = (uint64_t *)v19;
      uint64_t v15 = (uint64_t **)sub_25B44E08C(a1, v18, *(float **)(v19 + 32), *(void *)(v19 + 40));
      sub_25B3FA740((uint64_t **)a1, v18[0], v15, v14);
      uint64_t v19 = 0;
      sub_25B44C4EC((uint64_t)&v19);
      int v16 = (void *)a2[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          int v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)a2[2];
          BOOL v13 = *v17 == (void)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
}

void sub_25B44E078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_25B44C30C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_25B44E08C(uint64_t a1, void *a2, float *a3, uint64_t a4)
{
  long long v6 = (void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    do
    {
      while (1)
      {
        long long v6 = (void *)v5;
        unsigned __int8 v9 = sub_25B44C544(a3, a4, *(float **)(v5 + 32), *(void *)(v5 + 40));
        if (v9 == 129 || ((char)v9 & 0x80000000) == 0) {
          break;
        }
        uint64_t v5 = *v6;
        float result = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      uint64_t v5 = v6[1];
    }
    while (v5);
    float result = v6 + 1;
  }
  else
  {
    float result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v6;
  return result;
}

void sub_25B44E118()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  uint64_t v121 = v3;
  uint64_t v162 = *MEMORY[0x263EF8340];
  sub_25B453C28(v0 + 2112, v4);
  uint64_t v5 = (unint64_t *)operator new(8uLL);
  long long v6 = v5;
  unint64_t *v5 = 0;
  uint64_t v7 = v5 + 1;
  __int32 v156 = v5;
  float v158 = v5 + 1;
  unint64_t v8 = *(void *)(v2 + 8);
  float v157 = v5 + 1;
  *(void *)uint64_t v152 = 1;
  unint64_t v117 = v8;
  uint64_t v122 = v2;
  if (v8 >= 2)
  {
    unint64_t v9 = 1;
    uint64_t v10 = (std::locale::id *)MEMORY[0x263F8C108];
    uint64_t v11 = v5;
    uint64_t v12 = v5;
    __int32 v119 = v5 + 1;
    while (1)
    {
      sub_25B453CBC((uint64_t)v127, v122, v152);
      *(void *)int64_t v151 = 0;
      BOOL v13 = v7 == v12;
      uint64_t v12 = v7;
      if (v13) {
        goto LABEL_47;
      }
      unint64_t v118 = v9;
      uint64_t v14 = 0;
      if ((unint64_t)(v7 - v11) <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = v7 - v11;
      }
      while (1)
      {
        sub_25B453CBC((uint64_t)v124, v122, v151);
        if (v130)
        {
          int v16 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
          uint64_t v17 = sub_25B406B20(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/tensor_equal.hpp", 107);
          sub_25B406B20(v17, (uint64_t)" ", 1);
          int32x2_t v18 = (void *)std::ostream::operator<<();
          sub_25B406B20(v18, (uint64_t)" ", 1);
          sub_25B406B20(v18, (uint64_t)"operator==", 10);
          std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
          uint64_t v19 = std::locale::use_facet(__b, v10);
          ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
          std::locale::~locale(__b);
          std::ostream::put();
          std::ostream::flush();
          sub_25B40961C("err", "empty tensor in");
          std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8] + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
          BOOL v20 = std::locale::use_facet(__b, v10);
          ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
          std::locale::~locale(__b);
          std::ostream::put();
          std::ostream::flush();
        }
        if (v126)
        {
          int32x2_t v21 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
          int32x2_t v22 = sub_25B406B20(v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/tensor_equal.hpp", 107);
          sub_25B406B20(v22, (uint64_t)" ", 1);
          long long v23 = (void *)std::ostream::operator<<();
          sub_25B406B20(v23, (uint64_t)" ", 1);
          sub_25B406B20(v23, (uint64_t)"operator==", 10);
          std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
          int v24 = std::locale::use_facet(__b, v10);
          ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
          std::locale::~locale(__b);
          std::ostream::put();
          std::ostream::flush();
          sub_25B40961C("err", "empty tensor in");
          std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8] + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
          uint64_t v25 = std::locale::use_facet(__b, v10);
          ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
          std::locale::~locale(__b);
          std::ostream::put();
          std::ostream::flush();
        }
        if (v127[1].__locale_ != v124[1].__locale_)
        {
          BOOL v40 = 0;
          goto LABEL_41;
        }
        long long v132 = 0u;
        long long v133 = 0u;
        *(_OWORD *)&__b[0].__locale_ = 0u;
        sub_25B45E3AC((uint64_t)&v134, (uint64_t)v127);
        sub_25B45E3AC((uint64_t)&v143, (uint64_t)v124);
        if ((void)v135 != v144[0])
        {
          int32x2_t v26 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
          long long v27 = sub_25B406B20(v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/../expression/exp_element_binary.hpp", 127);
          sub_25B406B20(v27, (uint64_t)" ", 1);
          long long v28 = (void *)std::ostream::operator<<();
          sub_25B406B20(v28, (uint64_t)" ", 1);
          sub_25B406B20(v28, (uint64_t)"TensorBinaryExp", 15);
          std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
          long long v29 = std::locale::use_facet((const std::locale *)__p, v10);
          ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          sub_25B408160("err", "Binary Exp shape should equal");
          std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8] + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
          uint64_t v30 = std::locale::use_facet((const std::locale *)__p, v10);
          ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
        }
        *(_OWORD *)&__b[0].__locale_ = v135;
        long long v132 = v136;
        long long v133 = v137;
        if (v141 && (_BYTE)v148)
        {
          if (v127[1].__locale_)
          {
            int v31 = v142;
            CFAllocatorRef v32 = v149;
            int v33 = (char *)v127[1].__locale_ - 1;
            do
            {
              float v34 = *v31++;
              float v35 = v34;
              float v36 = *v32++;
              float v37 = v35 - v36;
              BOOL v38 = v33-- != 0;
              char v39 = v38;
              BOOL v40 = v37 == 0.0;
            }
            while (v37 == 0.0 && (v39 & 1) != 0);
            goto LABEL_37;
          }
        }
        else if (v127[1].__locale_)
        {
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          do
          {
            uint64_t v43 = v41 * v138;
            if (v141) {
              uint64_t v43 = v42;
            }
            float v44 = v142[v43];
            uint64_t v45 = v41 * v145;
            if ((_BYTE)v148) {
              uint64_t v45 = v42;
            }
            float v46 = v44 - v149[v45];
            BOOL v40 = v46 == 0.0;
            if (v46 != 0.0) {
              goto LABEL_37;
            }
            if ((std::locale::__imp *)(v41 + 1) == v127[1].__locale_) {
              uint64_t v41 = 0;
            }
            else {
              ++v41;
            }
          }
          while (v127[1].__locale_ != (std::locale::__imp *)++v42);
        }
        BOOL v40 = 1;
LABEL_37:
        float v143 = &unk_2708F27E8;
        if (v147) {
          sub_25B404120(v147);
        }
        float v134 = &unk_2708F27E8;
        if (v140) {
          sub_25B404120(v140);
        }
LABEL_41:
        v124[0].__locale_ = (std::locale::__imp *)&unk_2708F27E8;
        if (v125) {
          sub_25B404120(v125);
        }
        if (v40) {
          break;
        }
        *(void *)int64_t v151 = ++v14;
        if (v14 == v15)
        {
          uint64_t v12 = v11;
          unint64_t v9 = v118;
          goto LABEL_47;
        }
      }
      uint64_t v12 = v11;
      unint64_t v9 = v118;
      if (v14 == -1)
      {
LABEL_47:
        if (v7 >= v119)
        {
          uint64_t v48 = v7 - v6;
          unint64_t v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if (((char *)v119 - (char *)v6) >> 2 > v49) {
            unint64_t v49 = ((char *)v119 - (char *)v6) >> 2;
          }
          if ((unint64_t)((char *)v119 - (char *)v6) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v49;
          }
          if (v50) {
            unint64_t v50 = (unint64_t)sub_25B3FCAD4(v50);
          }
          else {
            uint64_t v51 = 0;
          }
          uint64_t v11 = (unint64_t *)(v50 + 8 * v48);
          *uint64_t v11 = v9;
          uint64_t v47 = v11 + 1;
          while (v7 != v6)
          {
            unint64_t v52 = *--v7;
            *--uint64_t v11 = v52;
          }
          __int32 v119 = (unint64_t *)(v50 + 8 * v51);
          __int32 v156 = v11;
          float v157 = v47;
          if (v6) {
            operator delete(v6);
          }
          long long v6 = v11;
          uint64_t v12 = v11;
        }
        else
        {
          unint64_t *v7 = v9;
          uint64_t v47 = v7 + 1;
        }
        float v157 = v47;
        uint64_t v7 = v47;
      }
      else
      {
        v6[(int)v14] = v118;
        uint64_t v11 = v6;
        uint64_t v12 = v6;
      }
      v127[0].__locale_ = (std::locale::__imp *)&unk_2708F27E8;
      if (v129) {
        sub_25B404120(v129);
      }
      unint64_t v9 = *(void *)v152 + 1;
      *(void *)uint64_t v152 = v9;
      if (v9 >= v117)
      {
        float v158 = v119;
        break;
      }
    }
  }
  uint64_t v53 = (char *)operator new(8uLL);
  long long v54 = v53;
  *(void *)uint64_t v53 = 0;
  int v55 = v53 + 8;
  __int32 v155 = v53 + 8;
  unint64_t v56 = *(void *)(v121 + 8);
  uint64_t v153 = v53;
  uint64_t v154 = v53 + 8;
  *(void *)uint64_t v152 = 1;
  unint64_t v113 = v56;
  if (v56 <= 1) {
    goto LABEL_144;
  }
  unint64_t v57 = 1;
  long long v58 = v53;
  __int32 v123 = v53 + 8;
  int64_t v115 = v53 + 8;
LABEL_72:
  sub_25B454044((uint64_t)v127, v121, v152);
  unint64_t v116 = v57;
  *(void *)int64_t v151 = 0;
  int64_t v114 = v58;
  if (v123 == v58) {
    goto LABEL_121;
  }
  unint64_t v59 = 0;
  unint64_t v120 = (v55 - v58) >> 3;
  while (1)
  {
    sub_25B454044((uint64_t)v124, v121, v151);
    if (v130)
    {
      long long v60 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
      uint64_t v61 = sub_25B406B20(v60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/tensor_equal.hpp", 107);
      sub_25B406B20(v61, (uint64_t)" ", 1);
      int v62 = (void *)std::ostream::operator<<();
      sub_25B406B20(v62, (uint64_t)" ", 1);
      sub_25B406B20(v62, (uint64_t)"operator==", 10);
      std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
      uint64_t v63 = std::locale::use_facet(__b, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
      std::locale::~locale(__b);
      std::ostream::put();
      std::ostream::flush();
      sub_25B40961C("err", "empty tensor in");
      std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8] + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
      int v64 = std::locale::use_facet(__b, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
      std::locale::~locale(__b);
      std::ostream::put();
      std::ostream::flush();
    }
    if (v126)
    {
      int v65 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
      int32x2_t v66 = sub_25B406B20(v65, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/tensor_equal.hpp", 107);
      sub_25B406B20(v66, (uint64_t)" ", 1);
      uint64_t v67 = (void *)std::ostream::operator<<();
      sub_25B406B20(v67, (uint64_t)" ", 1);
      sub_25B406B20(v67, (uint64_t)"operator==", 10);
      std::ios_base::getloc((const std::ios_base *)((char *)v67 + *(void *)(*v67 - 24)));
      uint64_t v68 = std::locale::use_facet(__b, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 10);
      std::locale::~locale(__b);
      std::ostream::put();
      std::ostream::flush();
      sub_25B40961C("err", "empty tensor in");
      std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8] + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
      uint64_t v69 = std::locale::use_facet(__b, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
      std::locale::~locale(__b);
      std::ostream::put();
      std::ostream::flush();
    }
    uint64_t v70 = 0;
    char v71 = 1;
    do
    {
      locale = v127[v70 + 1].__locale_;
      uint64_t v73 = v124[v70 + 1].__locale_;
      if ((v71 & 1) == 0) {
        break;
      }
      char v71 = 0;
      uint64_t v70 = 1;
    }
    while (locale == v73);
    if (locale != v73)
    {
      BOOL v94 = 0;
      goto LABEL_115;
    }
    long long v132 = 0u;
    long long v133 = 0u;
    *(_OWORD *)&__b[0].__locale_ = 0u;
    sub_25B4582F4((uint64_t)&v134, (uint64_t)v127);
    sub_25B4582F4((uint64_t)&v143, (uint64_t)v124);
    uint64_t v74 = 0;
    char v75 = 1;
    do
    {
      uint64_t v76 = *((void *)&v135 + v74);
      uint64_t v77 = v144[v74];
      if ((v75 & 1) == 0) {
        break;
      }
      char v75 = 0;
      uint64_t v74 = 1;
    }
    while (v76 == v77);
    if (v76 != v77)
    {
      uint64_t v78 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
      float v79 = sub_25B406B20(v78, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/../expression/exp_element_binary.hpp", 127);
      sub_25B406B20(v79, (uint64_t)" ", 1);
      int32x2_t v80 = (void *)std::ostream::operator<<();
      sub_25B406B20(v80, (uint64_t)" ", 1);
      sub_25B406B20(v80, (uint64_t)"TensorBinaryExp", 15);
      std::ios_base::getloc((const std::ios_base *)((char *)v80 + *(void *)(*v80 - 24)));
      __int32 v81 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v81->__vftable[2].~facet_0)(v81, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      sub_25B408160("err", "Binary Exp shape should equal");
      std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8] + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
      __int32 v82 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
    }
    *(_OWORD *)&__b[0].__locale_ = v135;
    long long v132 = v136;
    long long v133 = v137;
    uint64_t v83 = v128 * (__int128)v127[1].__locale_;
    long long v161 = 0u;
    long long v160 = 0u;
    *(_OWORD *)uint64_t __p = 0u;
    int v84 = v141;
    int v85 = v148;
    if (v141 && (_BYTE)v148)
    {
      if (v83)
      {
        long long v86 = v142;
        long long v87 = v149;
        uint64_t v88 = v83 - 1;
        do
        {
          float v89 = *v86++;
          float v90 = v89;
          float v91 = *v87++;
          float v92 = v90 - v91;
          BOOL v38 = v88-- != 0;
          char v93 = v38;
          BOOL v94 = v92 == 0.0;
        }
        while (v92 == 0.0 && (v93 & 1) != 0);
        goto LABEL_111;
      }
    }
    else if (v83)
    {
      uint64_t v95 = 0;
      uint64_t v96 = v138;
      uint64_t v97 = v139;
      BOOL v98 = v142;
      uint64_t v99 = v145;
      uint64_t v100 = v146;
      uint64_t v101 = v149;
      do
      {
        uint64_t v102 = v95;
        if (!v84) {
          uint64_t v102 = (uint64_t)__p[0] * v96 + (uint64_t)__p[1] * v97;
        }
        uint64_t v103 = v95;
        if (!v85) {
          uint64_t v103 = (uint64_t)__p[0] * v99 + (uint64_t)__p[1] * v100;
        }
        float v104 = v98[v102] - v101[v103];
        BOOL v94 = v104 == 0.0;
        if (v104 != 0.0) {
          break;
        }
        for (uint64_t i = 0; i != -2; --i)
        {
          uint64_t v106 = (char *)__p[i + 1] + 1;
          __p[i + 1] = v106;
          if (v106 != *(char **)((char *)&v128 + i * 8)) {
            break;
          }
          __p[i + 1] = 0;
        }
        ++v95;
      }
      while (v95 != v83);
      goto LABEL_111;
    }
    BOOL v94 = 1;
LABEL_111:
    float v143 = &unk_2708F21F8;
    if (v147) {
      sub_25B404120(v147);
    }
    float v134 = &unk_2708F21F8;
    if (v140) {
      sub_25B404120(v140);
    }
LABEL_115:
    v124[0].__locale_ = (std::locale::__imp *)&unk_2708F21F8;
    if (v125) {
      sub_25B404120(v125);
    }
    if (v94)
    {
      if (v59 == -1)
      {
LABEL_121:
        if (v55 >= v115)
        {
          uint64_t v108 = (v55 - v54) >> 3;
          unint64_t v109 = v108 + 1;
          if ((unint64_t)(v108 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((v115 - v54) >> 2 > v109) {
            unint64_t v109 = (v115 - v54) >> 2;
          }
          if ((unint64_t)(v115 - v54) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v110 = v109;
          }
          if (v110) {
            unint64_t v110 = (unint64_t)sub_25B3FCAD4(v110);
          }
          else {
            uint64_t v111 = 0;
          }
          long long v58 = (char *)(v110 + 8 * v108);
          *(void *)long long v58 = v116;
          int32x2_t v107 = v58 + 8;
          while (v55 != v54)
          {
            uint64_t v112 = *((void *)v55 - 1);
            v55 -= 8;
            *((void *)v58 - 1) = v112;
            v58 -= 8;
          }
          int64_t v115 = (char *)(v110 + 8 * v111);
          uint64_t v153 = v58;
          uint64_t v154 = v107;
          if (v54) {
            operator delete(v54);
          }
          long long v54 = v58;
        }
        else
        {
          *(void *)int v55 = v116;
          int32x2_t v107 = v55 + 8;
          long long v58 = v114;
        }
        uint64_t v154 = v107;
        int v55 = v107;
      }
      else
      {
        *(void *)&v54[8 * (int)v59] = v116;
        long long v58 = v54;
        int32x2_t v107 = v123;
      }
      __int32 v123 = v107;
      v127[0].__locale_ = (std::locale::__imp *)&unk_2708F21F8;
      if (v129) {
        sub_25B404120(v129);
      }
      unint64_t v57 = *(void *)v152 + 1;
      *(void *)uint64_t v152 = v57;
      if (v57 >= v113)
      {
        __int32 v155 = v115;
LABEL_144:
        sub_25B453FC4((uint64_t)v152, (uint64_t **)&v153);
        sub_25B453FC4((uint64_t)v151, (uint64_t **)&v156);
        LODWORD(v127[0].__locale_) = 0;
        sub_25B454354((uint64_t)__b, v121, (int *)v127, (uint64_t)v152);
        sub_25B454B10((uint64_t)v150, (long long *)__b);
      }
      goto LABEL_72;
    }
    *(void *)int64_t v151 = ++v59;
    __int32 v123 = v55;
    if (v59 >= v120) {
      goto LABEL_121;
    }
  }
}

void sub_25B453270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unint64_t a30,uint64_t a31,unint64_t a32,std::locale a33)
{
  STACK[0x1280] = (unint64_t)&unk_2708F1920;
  if (STACK[0x1300]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x1300]);
  }
  if (STACK[0xC48]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0xC48]);
  }
  STACK[0x418] = (unint64_t)&unk_2708F1920;
  if (STACK[0x498]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x498]);
  }
  STACK[0x288] = (unint64_t)&unk_2708F1920;
  if (STACK[0x308]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x308]);
  }
  STACK[0xC60] = a30;
  if (STACK[0xCE0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0xCE0]);
  }
  STACK[0xCF8] = (unint64_t)&unk_2708F1900;
  if (STACK[0xD78]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0xD78]);
  }
  STACK[0xD90] = a32;
  if (STACK[0xE10]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0xE10]);
  }
  STACK[0xE28] = (unint64_t)&unk_2708F21F8;
  if (STACK[0xEA8]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0xEA8]);
  }
  STACK[0xEC0] = (unint64_t)&unk_2708F21F8;
  if (STACK[0xF40]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0xF40]);
  }
  STACK[0xF58] = (unint64_t)&unk_2708F2218;
  if (STACK[0xFD8]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0xFD8]);
  }
  STACK[0xFF0] = (unint64_t)&unk_2708F1900;
  if (STACK[0x1070]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x1070]);
  }
  STACK[0x1088] = (unint64_t)&unk_2708F1900;
  if (STACK[0x1108]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x1108]);
  }
  if (STACK[0x1120]) {
    operator delete((void *)STACK[0x1120]);
  }
  if (STACK[0x1138]) {
    operator delete((void *)STACK[0x1138]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_25B453C28(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v10 = *(void *)(a2 + 120);
  uint64_t v9 = *(void *)(a2 + 128);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = v10;
  *(void *)(a1 + 128) = v9;
  if (v11) {
    sub_25B404120(v11);
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

void sub_25B453CBC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2 + 8;
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = 0;
  v11[1] = v6;
  long long v12 = xmmword_25B5F1140;
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v14 = 1;
  long long v8 = (int *)sub_25B3FCAD4(1uLL);
  *(void *)long long v8 = 0;
  sub_25B408C3C(v7, (uint64_t)v11, 0, *a3, *a3 + 1, 1);
  sub_25B43CB40((uint64_t)v9, a2, (uint64_t)v11);
  sub_25B43CCC0(a1, (uint64_t)v9, *v8);
  v9[0] = &unk_2708F21F8;
  if (v10) {
    sub_25B404120(v10);
  }
  operator delete(v8);
}

void sub_25B453F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    sub_25B404120(a26);
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

uint64_t sub_25B453FC4(uint64_t a1, uint64_t **a2)
{
  uint64_t v11 = a2[1] - *a2;
  sub_25B45F2BC(v12, (unint64_t *)&v11);
  uint64_t result = sub_25B45CE3C(a1, v12);
  long long v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = (char *)v6 - (char *)*a2;
  if (v6 != *a2)
  {
    long long v8 = *(void **)(a1 + 144);
    unint64_t v9 = v7 >> 3;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    do
    {
      uint64_t v10 = *v5++;
      *v8++ = v10;
      --v9;
    }
    while (v9);
  }
  return result;
}

void sub_25B454044(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  v14[7] = *MEMORY[0x263EF8340];
  uint64_t v6 = v14;
  uint64_t v7 = a2 + 8;
  for (uint64_t i = 8; i != 32; i += 8)
  {
    uint64_t v9 = *(void *)(a2 + i);
    *(v6 - 2) = 0;
    *(v6 - 1) = v9;
    void *v6 = 1;
    v6 += 3;
  }
  uint64_t v10 = (int *)sub_25B3FCAD4(1uLL);
  *(void *)uint64_t v10 = 0;
  sub_25B436AEC(v7, (uint64_t)v13, 0, *a3, *a3 + 1, 1);
  sub_25B459028((uint64_t)v11, a2, (uint64_t)v13);
  sub_25B4591A8(a1, (uint64_t)v11, *v10);
  v11[0] = &unk_2708F2218;
  if (v12) {
    sub_25B404120(v12);
  }
  operator delete(v10);
}

void sub_25B4542E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  operator delete(v25);
  _Unwind_Resume(a1);
}

uint64_t sub_25B454354(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v7 = (uint64_t *)(a1 + 48);
  *(void *)(a1 + 104) = 0;
  long long v8 = (void **)(a1 + 104);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_25B45F1E4(a1 + 208, a2);
  int v9 = *a3;
  if (*a3 >= 0) {
    unsigned int v10 = *a3;
  }
  else {
    unsigned int v10 = -v9;
  }
  if (v10 >= 3)
  {
    uint64_t v11 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    long long v12 = sub_25B406B20(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/expression/../common/gather_scatter_dim_helper.hpp", 132);
    sub_25B406B20(v12, (uint64_t)" ", 1);
    uint64_t v13 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v14 = (void *)std::ostream::operator<<();
    sub_25B406B20(v14, (uint64_t)" ", 1);
    sub_25B406B20(v14, (uint64_t)"init", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
    uint64_t v15 = std::locale::use_facet(&v63, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v63);
    std::ostream::put();
    std::ostream::flush();
    sub_25B45E1E0("err", "the absolute value of axis should be less than dim");
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    int v16 = std::locale::use_facet(&v63, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v63);
    std::ostream::put();
    std::ostream::flush();
  }
  if (v9 < 0) {
    v9 += 3;
  }
  if (v9 >= 3)
  {
    uint64_t v17 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    int32x2_t v18 = sub_25B406B20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/expression/../common/gather_scatter_dim_helper.hpp", 132);
    sub_25B406B20(v18, (uint64_t)" ", 1);
    uint64_t v19 = (void *)MEMORY[0x263F8C0F8];
    BOOL v20 = (void *)std::ostream::operator<<();
    sub_25B406B20(v20, (uint64_t)" ", 1);
    sub_25B406B20(v20, (uint64_t)"init", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
    int32x2_t v21 = std::locale::use_facet(&v63, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale(&v63);
    std::ostream::put();
    std::ostream::flush();
    sub_25B435E20("err");
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
    int32x2_t v22 = std::locale::use_facet(&v63, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
    std::locale::~locale(&v63);
    std::ostream::put();
    std::ostream::flush();
    if (v9 < 0)
    {
      long long v23 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
      int v24 = sub_25B406B20(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/expression/../common/gather_scatter_dim_helper.hpp", 132);
      sub_25B406B20(v24, (uint64_t)" ", 1);
      uint64_t v25 = (void *)MEMORY[0x263F8C0F8];
      int32x2_t v26 = (void *)std::ostream::operator<<();
      sub_25B406B20(v26, (uint64_t)" ", 1);
      sub_25B406B20(v26, (uint64_t)"init", 4);
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
      long long v27 = std::locale::use_facet(&v63, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
      std::locale::~locale(&v63);
      std::ostream::put();
      std::ostream::flush();
      sub_25B435E20("err");
      std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
      long long v28 = std::locale::use_facet(&v63, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
      std::locale::~locale(&v63);
      std::ostream::put();
      std::ostream::flush();
    }
  }
  *(void *)(a1 + 96) = v9;
  unint64_t v29 = *(void *)(a1 + 56);
  if (v29 >= *(void *)(a1 + 64))
  {
    uint64_t v30 = sub_25B45E484(v7, a4);
  }
  else
  {
    uint64_t v30 = sub_25B455F0C(v29, a4) + 152;
    *(void *)(a1 + 56) = v30;
  }
  *(void *)(a1 + 56) = v30;
  long long v31 = *(_OWORD *)(a1 + 232);
  *(_OWORD *)a1 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(a1 + 16) = v31;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 248);
  uint64_t v32 = *(void *)(a1 + 48);
  *(void *)(a1 + 8 * *(void *)(a1 + 96)) = *(void *)(v32 + 8);
  float v34 = *(char **)(a1 + 80);
  unint64_t v33 = *(void *)(a1 + 88);
  if ((unint64_t)v34 >= v33)
  {
    float v36 = *(char **)(a1 + 72);
    uint64_t v37 = (v34 - v36) >> 3;
    unint64_t v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61) {
LABEL_55:
    }
      sub_25B3FBC4C();
    uint64_t v39 = v33 - (void)v36;
    if (v39 >> 2 > v38) {
      unint64_t v38 = v39 >> 2;
    }
    BOOL v40 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v40) {
      unint64_t v41 = v38;
    }
    if (v41)
    {
      unint64_t v41 = (unint64_t)sub_25B3FCAD4(v41);
      float v36 = *(char **)(a1 + 72);
      float v34 = *(char **)(a1 + 80);
    }
    else
    {
      uint64_t v42 = 0;
    }
    uint64_t v43 = (void *)(v41 + 8 * v37);
    unint64_t v44 = v41 + 8 * v42;
    *uint64_t v43 = *(void *)(v32 + 56);
    float v35 = v43 + 1;
    while (v34 != v36)
    {
      uint64_t v45 = *((void *)v34 - 1);
      v34 -= 8;
      *--uint64_t v43 = v45;
    }
    *(void *)(a1 + 72) = v43;
    *(void *)(a1 + 80) = v35;
    *(void *)(a1 + 88) = v44;
    if (v36) {
      operator delete(v36);
    }
  }
  else
  {
    *(void *)float v34 = *(void *)(v32 + 56);
    float v35 = v34 + 8;
  }
  uint64_t v46 = 0;
  *(void *)(a1 + 80) = v35;
  do
  {
    if (*(void *)(a1 + 96) != v46)
    {
      uint64_t v48 = *(char **)(a1 + 112);
      unint64_t v47 = *(void *)(a1 + 120);
      if ((unint64_t)v48 >= v47)
      {
        unint64_t v50 = (char *)*v8;
        uint64_t v51 = (v48 - (unsigned char *)*v8) >> 3;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 61) {
          goto LABEL_55;
        }
        uint64_t v53 = v47 - (void)v50;
        if (v53 >> 2 > v52) {
          unint64_t v52 = v53 >> 2;
        }
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v54 = v52;
        }
        if (v54)
        {
          unint64_t v54 = (unint64_t)sub_25B3FCAD4(v54);
          unint64_t v50 = *(char **)(a1 + 104);
          uint64_t v48 = *(char **)(a1 + 112);
        }
        else
        {
          uint64_t v55 = 0;
        }
        unint64_t v56 = (void *)(v54 + 8 * v51);
        *unint64_t v56 = v46;
        unint64_t v49 = v56 + 1;
        while (v48 != v50)
        {
          uint64_t v57 = *((void *)v48 - 1);
          v48 -= 8;
          *--unint64_t v56 = v57;
        }
        *(void *)(a1 + 104) = v56;
        *(void *)(a1 + 112) = v49;
        *(void *)(a1 + 120) = v54 + 8 * v55;
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *(void *)uint64_t v48 = v46;
        unint64_t v49 = v48 + 8;
      }
      *(void *)(a1 + 112) = v49;
    }
    ++v46;
  }
  while (v46 != 3);
  unint64_t v58 = 0;
  uint64_t v59 = a1 + 160;
  do
  {
    *(void *)(v59 + 8 * v58) = 1;
    if (v58 <= 1)
    {
      unint64_t v60 = v58;
      uint64_t v61 = 1;
      do
      {
        v61 *= *(void *)(a1 + 224 + 8 * v60);
        *(void *)(v59 + 8 * v58) = v61;
        ++v60;
      }
      while (v60 != 2);
    }
    ++v58;
  }
  while (v58 != 3);
  return a1;
}

void sub_25B454AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  *(void *)(v10 + 208) = &unk_2708F2218;
  uint64_t v13 = *(std::__shared_weak_count **)(v10 + 336);
  if (v13) {
    sub_25B404120(v13);
  }
  sub_25B454BFC(v11);
  _Unwind_Resume(a1);
}

void sub_25B454B10(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_2708F2218;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  sub_25B43876C(a1 + 8, a2);
  sub_25B458EBC((uint64_t)&v3, *(void *)(a1 + 104));
}

void sub_25B454BE0(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B454BFC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(void *)(a1 + 64) = v3;
    operator delete(v3);
  }
  long long v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v6 = (void **)a1;
  sub_25B45E2EC(&v6);
  return a1;
}

uint64_t sub_25B454C64(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v7 = (uint64_t *)(a1 + 48);
  *(void *)(a1 + 104) = 0;
  long long v8 = (void **)(a1 + 104);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_25B4582F4(a1 + 208, a2);
  int v9 = *a3;
  if (*a3 >= 0) {
    unsigned int v10 = *a3;
  }
  else {
    unsigned int v10 = -v9;
  }
  if (v10 >= 2)
  {
    uint64_t v11 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    long long v12 = sub_25B406B20(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/expression/../common/gather_scatter_dim_helper.hpp", 132);
    sub_25B406B20(v12, (uint64_t)" ", 1);
    uint64_t v13 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v14 = (void *)std::ostream::operator<<();
    sub_25B406B20(v14, (uint64_t)" ", 1);
    sub_25B406B20(v14, (uint64_t)"init", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
    uint64_t v15 = std::locale::use_facet(&v61, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v61);
    std::ostream::put();
    std::ostream::flush();
    sub_25B45E1E0("err", "the absolute value of axis should be less than dim");
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    int v16 = std::locale::use_facet(&v61, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v61);
    std::ostream::put();
    std::ostream::flush();
  }
  if (v9 < 0) {
    v9 += 2;
  }
  if (v9 >= 2)
  {
    uint64_t v17 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    int32x2_t v18 = sub_25B406B20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/expression/../common/gather_scatter_dim_helper.hpp", 132);
    sub_25B406B20(v18, (uint64_t)" ", 1);
    uint64_t v19 = (void *)MEMORY[0x263F8C0F8];
    BOOL v20 = (void *)std::ostream::operator<<();
    sub_25B406B20(v20, (uint64_t)" ", 1);
    sub_25B406B20(v20, (uint64_t)"init", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
    int32x2_t v21 = std::locale::use_facet(&v61, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale(&v61);
    std::ostream::put();
    std::ostream::flush();
    sub_25B435E20("err");
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
    int32x2_t v22 = std::locale::use_facet(&v61, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
    std::locale::~locale(&v61);
    std::ostream::put();
    std::ostream::flush();
    if (v9 < 0)
    {
      long long v23 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
      int v24 = sub_25B406B20(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/expression/../common/gather_scatter_dim_helper.hpp", 132);
      sub_25B406B20(v24, (uint64_t)" ", 1);
      uint64_t v25 = (void *)MEMORY[0x263F8C0F8];
      int32x2_t v26 = (void *)std::ostream::operator<<();
      sub_25B406B20(v26, (uint64_t)" ", 1);
      sub_25B406B20(v26, (uint64_t)"init", 4);
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
      long long v27 = std::locale::use_facet(&v61, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
      std::locale::~locale(&v61);
      std::ostream::put();
      std::ostream::flush();
      sub_25B435E20("err");
      std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
      long long v28 = std::locale::use_facet(&v61, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
      std::locale::~locale(&v61);
      std::ostream::put();
      std::ostream::flush();
    }
  }
  *(void *)(a1 + 96) = v9;
  unint64_t v29 = *(void *)(a1 + 56);
  if (v29 >= *(void *)(a1 + 64))
  {
    uint64_t v30 = sub_25B45E484(v7, a4);
  }
  else
  {
    uint64_t v30 = sub_25B455F0C(v29, a4) + 152;
    *(void *)(a1 + 56) = v30;
  }
  *(void *)(a1 + 56) = v30;
  long long v31 = *(_OWORD *)(a1 + 232);
  *(_OWORD *)a1 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(a1 + 16) = v31;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 248);
  uint64_t v32 = *(void *)(a1 + 48);
  *(void *)(a1 + 8 * *(void *)(a1 + 96)) = *(void *)(v32 + 8);
  float v34 = *(char **)(a1 + 80);
  unint64_t v33 = *(void *)(a1 + 88);
  if ((unint64_t)v34 >= v33)
  {
    float v36 = *(char **)(a1 + 72);
    uint64_t v37 = (v34 - v36) >> 3;
    unint64_t v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61) {
LABEL_50:
    }
      sub_25B3FBC4C();
    uint64_t v39 = v33 - (void)v36;
    if (v39 >> 2 > v38) {
      unint64_t v38 = v39 >> 2;
    }
    BOOL v40 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v40) {
      unint64_t v41 = v38;
    }
    if (v41)
    {
      unint64_t v41 = (unint64_t)sub_25B3FCAD4(v41);
      float v36 = *(char **)(a1 + 72);
      float v34 = *(char **)(a1 + 80);
    }
    else
    {
      uint64_t v42 = 0;
    }
    uint64_t v43 = (void *)(v41 + 8 * v37);
    unint64_t v44 = v41 + 8 * v42;
    *uint64_t v43 = *(void *)(v32 + 56);
    float v35 = v43 + 1;
    while (v34 != v36)
    {
      uint64_t v45 = *((void *)v34 - 1);
      v34 -= 8;
      *--uint64_t v43 = v45;
    }
    *(void *)(a1 + 72) = v43;
    *(void *)(a1 + 80) = v35;
    *(void *)(a1 + 88) = v44;
    if (v36) {
      operator delete(v36);
    }
  }
  else
  {
    *(void *)float v34 = *(void *)(v32 + 56);
    float v35 = v34 + 8;
  }
  char v46 = 0;
  uint64_t v47 = 0;
  *(void *)(a1 + 80) = v35;
  do
  {
    char v48 = v46;
    if (*(void *)(a1 + 96) != v47)
    {
      unint64_t v50 = *(uint64_t **)(a1 + 112);
      unint64_t v49 = *(void *)(a1 + 120);
      if ((unint64_t)v50 >= v49)
      {
        unint64_t v52 = (uint64_t *)*v8;
        uint64_t v53 = ((char *)v50 - (unsigned char *)*v8) >> 3;
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61) {
          goto LABEL_50;
        }
        uint64_t v55 = v49 - (void)v52;
        if (v55 >> 2 > v54) {
          unint64_t v54 = v55 >> 2;
        }
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v54;
        }
        if (v56)
        {
          unint64_t v56 = (unint64_t)sub_25B3FCAD4(v56);
          unint64_t v52 = *(uint64_t **)(a1 + 104);
          unint64_t v50 = *(uint64_t **)(a1 + 112);
        }
        else
        {
          uint64_t v57 = 0;
        }
        unint64_t v58 = (uint64_t *)(v56 + 8 * v53);
        *unint64_t v58 = v47;
        uint64_t v51 = v58 + 1;
        while (v50 != v52)
        {
          uint64_t v59 = *--v50;
          *--unint64_t v58 = v59;
        }
        *(void *)(a1 + 104) = v58;
        *(void *)(a1 + 112) = v51;
        *(void *)(a1 + 120) = v56 + 8 * v57;
        if (v52) {
          operator delete(v52);
        }
      }
      else
      {
        *unint64_t v50 = v47;
        uint64_t v51 = v50 + 1;
      }
      *(void *)(a1 + 112) = v51;
    }
    char v46 = 1;
    uint64_t v47 = 1;
  }
  while ((v48 & 1) == 0);
  *(void *)(a1 + 160) = *(void *)(a1 + 224);
  *(void *)(a1 + 168) = 1;
  return a1;
}

void sub_25B455388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  *(void *)(v11 + 208) = &unk_2708F21F8;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 336);
  if (v13) {
    sub_25B404120(v13);
  }
  sub_25B454BFC(v10);
  _Unwind_Resume(a1);
}

void sub_25B4553EC(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_2708F21F8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = 1;
  uint64_t v5 = *(void *)(a1 + 8) * v4;
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = 0;
  sub_25B458EBC((uint64_t)v6, v5);
}

void sub_25B455750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  long long v27 = *(std::__shared_weak_count **)(v25 + 128);
  if (v27) {
    sub_25B404120(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B4557B0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v7 = (uint64_t *)(a1 + 48);
  *(void *)(a1 + 104) = 0;
  long long v8 = (void **)(a1 + 104);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_25B45E3AC(a1 + 208, a2);
  int v9 = *a3;
  if (*a3)
  {
    uint64_t v10 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v11 = sub_25B406B20(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/expression/../common/gather_scatter_dim_helper.hpp", 132);
    sub_25B406B20(v11, (uint64_t)" ", 1);
    long long v12 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v13 = (void *)std::ostream::operator<<();
    sub_25B406B20(v13, (uint64_t)" ", 1);
    sub_25B406B20(v13, (uint64_t)"init", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    uint64_t v14 = std::locale::use_facet(&v58, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v58);
    std::ostream::put();
    std::ostream::flush();
    sub_25B45E1E0("err", "the absolute value of axis should be less than dim");
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
    uint64_t v15 = std::locale::use_facet(&v58, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v58);
    std::ostream::put();
    std::ostream::flush();
    if (v9 < 0 && (BOOL v16 = __CFADD__(v9, 1), ++v9, v16))
    {
      int v9 = 0;
    }
    else
    {
      uint64_t v17 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
      int32x2_t v18 = sub_25B406B20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/expression/../common/gather_scatter_dim_helper.hpp", 132);
      sub_25B406B20(v18, (uint64_t)" ", 1);
      uint64_t v19 = (void *)MEMORY[0x263F8C0F8];
      BOOL v20 = (void *)std::ostream::operator<<();
      sub_25B406B20(v20, (uint64_t)" ", 1);
      sub_25B406B20(v20, (uint64_t)"init", 4);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
      int32x2_t v21 = std::locale::use_facet(&v58, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v58);
      std::ostream::put();
      std::ostream::flush();
      sub_25B435E20("err");
      std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
      int32x2_t v22 = std::locale::use_facet(&v58, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v58);
      std::ostream::put();
      std::ostream::flush();
      if (v9 < 0)
      {
        long long v23 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        int v24 = sub_25B406B20(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/expression/../common/gather_scatter_dim_helper.hpp", 132);
        sub_25B406B20(v24, (uint64_t)" ", 1);
        uint64_t v25 = (void *)MEMORY[0x263F8C0F8];
        int32x2_t v26 = (void *)std::ostream::operator<<();
        sub_25B406B20(v26, (uint64_t)" ", 1);
        sub_25B406B20(v26, (uint64_t)"init", 4);
        std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
        long long v27 = std::locale::use_facet(&v58, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
        std::locale::~locale(&v58);
        std::ostream::put();
        std::ostream::flush();
        sub_25B435E20("err");
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
        long long v28 = std::locale::use_facet(&v58, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
        std::locale::~locale(&v58);
        std::ostream::put();
        std::ostream::flush();
      }
    }
  }
  *(void *)(a1 + 96) = v9;
  unint64_t v29 = *(void *)(a1 + 56);
  if (v29 >= *(void *)(a1 + 64))
  {
    uint64_t v30 = sub_25B45E484(v7, a4);
  }
  else
  {
    uint64_t v30 = sub_25B455F0C(v29, a4) + 152;
    *(void *)(a1 + 56) = v30;
  }
  *(void *)(a1 + 56) = v30;
  long long v31 = *(_OWORD *)(a1 + 232);
  *(_OWORD *)a1 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(a1 + 16) = v31;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 248);
  uint64_t v32 = *(void *)(a1 + 48);
  *(void *)(a1 + 8 * *(void *)(a1 + 96)) = *(void *)(v32 + 8);
  float v34 = *(char **)(a1 + 80);
  unint64_t v33 = *(void *)(a1 + 88);
  if ((unint64_t)v34 >= v33)
  {
    float v36 = *(char **)(a1 + 72);
    uint64_t v37 = (v34 - v36) >> 3;
    unint64_t v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61) {
      goto LABEL_44;
    }
    uint64_t v39 = v33 - (void)v36;
    if (v39 >> 2 > v38) {
      unint64_t v38 = v39 >> 2;
    }
    BOOL v16 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v16) {
      unint64_t v40 = v38;
    }
    if (v40)
    {
      unint64_t v40 = (unint64_t)sub_25B3FCAD4(v40);
      float v36 = *(char **)(a1 + 72);
      float v34 = *(char **)(a1 + 80);
    }
    else
    {
      uint64_t v41 = 0;
    }
    uint64_t v42 = (void *)(v40 + 8 * v37);
    unint64_t v43 = v40 + 8 * v41;
    *uint64_t v42 = *(void *)(v32 + 56);
    float v35 = v42 + 1;
    while (v34 != v36)
    {
      uint64_t v44 = *((void *)v34 - 1);
      v34 -= 8;
      *--uint64_t v42 = v44;
    }
    *(void *)(a1 + 72) = v42;
    *(void *)(a1 + 80) = v35;
    *(void *)(a1 + 88) = v43;
    if (v36) {
      operator delete(v36);
    }
  }
  else
  {
    *(void *)float v34 = *(void *)(v32 + 56);
    float v35 = v34 + 8;
  }
  *(void *)(a1 + 80) = v35;
  if (*(void *)(a1 + 96))
  {
    char v46 = *(char **)(a1 + 112);
    unint64_t v45 = *(void *)(a1 + 120);
    if ((unint64_t)v46 < v45)
    {
      *(void *)char v46 = 0;
      uint64_t v47 = v46 + 8;
LABEL_42:
      *(void *)(a1 + 112) = v47;
      goto LABEL_43;
    }
    char v48 = (char *)*v8;
    uint64_t v49 = (v46 - (unsigned char *)*v8) >> 3;
    unint64_t v50 = v49 + 1;
    if (!((unint64_t)(v49 + 1) >> 61))
    {
      uint64_t v51 = v45 - (void)v48;
      if (v51 >> 2 > v50) {
        unint64_t v50 = v51 >> 2;
      }
      BOOL v16 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v16) {
        unint64_t v52 = v50;
      }
      if (v52)
      {
        unint64_t v52 = (unint64_t)sub_25B3FCAD4(v52);
        char v48 = *(char **)(a1 + 104);
        char v46 = *(char **)(a1 + 112);
      }
      else
      {
        uint64_t v53 = 0;
      }
      unint64_t v54 = (void *)(v52 + 8 * v49);
      unint64_t v55 = v52 + 8 * v53;
      *unint64_t v54 = 0;
      uint64_t v47 = v54 + 1;
      while (v46 != v48)
      {
        uint64_t v56 = *((void *)v46 - 1);
        v46 -= 8;
        *--unint64_t v54 = v56;
      }
      *(void *)(a1 + 104) = v54;
      *(void *)(a1 + 112) = v47;
      *(void *)(a1 + 120) = v55;
      if (v48) {
        operator delete(v48);
      }
      goto LABEL_42;
    }
LABEL_44:
    sub_25B3FBC4C();
  }
LABEL_43:
  *(void *)(a1 + 160) = 1;
  return a1;
}

void sub_25B455EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  *(void *)(v10 + 208) = &unk_2708F27E8;
  uint64_t v13 = *(std::__shared_weak_count **)(v10 + 336);
  if (v13) {
    sub_25B404120(v13);
  }
  sub_25B454BFC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_25B455F0C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F1900;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

uint64_t sub_25B455FE4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F1920;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

void sub_25B4560BC(uint64_t a1, uint64_t a2)
{
  sub_25B455FE4((uint64_t)&v16, a2);
  *(void *)&v12[0] = 0;
  sub_25B45784C(&__p, 1uLL, v12);
  if (!v19) {
    goto LABEL_18;
  }
  unint64_t v3 = 0;
  unint64_t v4 = 0;
  long long v5 = __p;
  uint64_t v6 = v21;
  uint64_t v7 = *(void *)__p;
  do
  {
    v3 += *(unsigned __int8 *)(v6 + v18 * v7);
    void *v5 = v7 + 1;
    if (v7 + 1 == v17) {
      uint64_t v7 = 0;
    }
    else {
      ++v7;
    }
    void *v5 = v7;
    ++v4;
  }
  while (v4 < v19);
  unint64_t v13 = v3;
  if (v3)
  {
    if (v15 - (unsigned char *)__p >= 1) {
      bzero(__p, 8 * (((unint64_t)(v15 - (unsigned char *)__p) >> 3) - ((unint64_t)(v15 - (unsigned char *)__p) > 7)) + 8);
    }
    uint64_t v11 = 1;
    sub_25B4578D0(v12, &v13, &v11);
    sub_25B457B6C(a1, v12);
    uint64_t v11 = 0;
    sub_25B457C64(a1, &v11);
    unint64_t v8 = 0;
    uint64_t v9 = __p;
    uint64_t v10 = *(void *)__p;
    do
    {
      if (*(unsigned char *)(v21 + v18 * v10))
      {
        *(void *)(*(void *)(a1 + 144) + 8 * v8++) = v10;
        uint64_t v9 = __p;
        uint64_t v10 = *(void *)__p;
      }
      *uint64_t v9 = v10 + 1;
      if (v10 + 1 == v17) {
        uint64_t v10 = 0;
      }
      else {
        ++v10;
      }
      *uint64_t v9 = v10;
    }
    while (v8 < v13);
  }
  else
  {
LABEL_18:
    *(void *)a1 = &unk_2708F1DA8;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(_WORD *)(a1 + 136) = 257;
  }
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  BOOL v16 = &unk_2708F1920;
  if (v20) {
    sub_25B404120(v20);
  }
}

void sub_25B4562A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  *float v36 = &unk_2708F1DA8;
  unint64_t v38 = (std::__shared_weak_count *)v36[16];
  if (v38) {
    sub_25B404120(v38);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a36) {
    sub_25B404120(a36);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B456324(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_2708F1900;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  long long v5 = (void **)(a1 + 120);
  *(_WORD *)(a1 + 136) = 257;
  uint64_t v6 = a2 + 8;
  *(void *)(a1 + 128) = 0;
  sub_25B407708((uint64_t)&v13, a2 + 8, a3);
  uint64_t v7 = v13;
  *(void *)(a1 + 8) = *(void *)(v6 + 8 * v13);
  *(void *)(a1 + 56) = *(void *)(a2 + 8 * v7 + 56);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  unint64_t v8 = *(void **)(a2 + 120);
  uint64_t v9 = *(void *)(a2 + 128);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = v8;
  *(void *)(a1 + 128) = v9;
  if (v10)
  {
    sub_25B404120(v10);
    unint64_t v8 = *v5;
  }
  *(void *)(a1 + 144) = *v8 + 8 * *(void *)(a1 + 112);
  *(unsigned char *)(a1 + 137) = 0;
  BOOL v12 = *(void *)(a1 + 8) == 1 || *(void *)(a1 + 56) == 1;
  *(unsigned char *)(a1 + 136) = v12;
}

void sub_25B456434(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  unint64_t v4 = (std::__shared_weak_count *)v1[16];
  if (v4) {
    sub_25B404120(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B456450(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 345))
  {
    unint64_t v4 = (void *)MEMORY[0x263F8C0F8];
    long long v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    unint64_t v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"operator=", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet((const std::locale *)v13, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)v13);
    std::ostream::put();
    std::ostream::flush();
    sub_25B40961C("err", "empty tensor in");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    uint64_t v11 = std::locale::use_facet((const std::locale *)v13, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)v13);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(unsigned char *)(a1 + 137))
  {
    sub_25B43876C(a1 + 8, (long long *)a2);
    sub_25B458EBC((uint64_t)v13, *(void *)(a1 + 104));
  }
  if (*(void *)(a2 + 328) == *(void *)(a1 + 120))
  {
    sub_25B45A630((uint64_t)v13, (long long *)a2);
    sub_25B45A714((uint64_t)v13, a2);
    sub_25B45B04C(a1, (uint64_t)v13);
    *(void *)&v13[0] = &unk_2708F2218;
    if (v14) {
      sub_25B404120(v14);
    }
  }
  else
  {
    sub_25B45A714(a1, a2);
  }
  return a1;
}

void sub_25B4566D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B456720(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  BOOL v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = a2 + 8;
  v20[0] = 0;
  v20[1] = v6;
  long long v21 = xmmword_25B5F1140;
  uint64_t v22 = *(void *)(v5 + 8);
  uint64_t v23 = 1;
  sub_25B4394B4(1u, v5, (uint64_t)v20, (uint64_t)&v16, a3);
  sub_25B43CB40((uint64_t)v14, a2, (uint64_t)v20);
  uint64_t v7 = v16;
  if (v17 - (void)v16 != 8)
  {
    unint64_t v8 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v9, (uint64_t)" ", 1);
    uint64_t v10 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v11 = (void *)std::ostream::operator<<();
    sub_25B406B20(v11, (uint64_t)" ", 1);
    sub_25B406B20(v11, (uint64_t)"slice", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    BOOL v12 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
    LODWORD(v19.__locale_) = 0;
    sub_25B435E20("err");
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    uint64_t v13 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
  }
  sub_25B43CCC0(a1, (uint64_t)v14, *v7);
  v14[0] = &unk_2708F21F8;
  if (v15) {
    sub_25B404120(v15);
  }
  operator delete(v7);
}

void sub_25B4569A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  if (v25) {
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B456A14(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 345))
  {
    unint64_t v4 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    unint64_t v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"operator=", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet((const std::locale *)v16, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)v16);
    std::ostream::put();
    std::ostream::flush();
    sub_25B40961C("err", "empty tensor in");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    uint64_t v11 = std::locale::use_facet((const std::locale *)v16, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)v16);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(unsigned char *)(a1 + 137))
  {
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v12 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 40) = v12;
    *(_OWORD *)(a1 + 24) = v13;
    *(void *)(a1 + 56) = 1;
    uint64_t v14 = *(void *)(a1 + 8);
    *(void *)(a1 + 104) = v14;
    *(void *)(a1 + 112) = 0;
    sub_25B458EBC((uint64_t)v16, v14);
  }
  if (sub_25B459308((void *)(a2 + 208), (void *)a1))
  {
    sub_25B459378((uint64_t)v16, (_OWORD *)a2);
    sub_25B45946C((uint64_t)v16, a2);
    sub_25B459DBC(a1, (uint64_t)v16);
    *(void *)&v16[0] = &unk_2708F27E8;
    if (v17) {
      sub_25B404120(v17);
    }
  }
  else
  {
    sub_25B45946C(a1, a2);
  }
  return a1;
}

void sub_25B456CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B456CF4(uint64_t a1)
{
  *(void *)(a1 + 208) = &unk_2708F2218;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 336);
  if (v2) {
    sub_25B404120(v2);
  }
  sub_25B454BFC(a1 + 48);
  return a1;
}

uint64_t sub_25B456D4C(uint64_t a1)
{
  *(void *)(a1 + 208) = &unk_2708F21F8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 336);
  if (v2) {
    sub_25B404120(v2);
  }
  sub_25B454BFC(a1 + 48);
  return a1;
}

uint64_t sub_25B456DA4(uint64_t a1)
{
  *(void *)(a1 + 208) = &unk_2708F27E8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 336);
  if (v2) {
    sub_25B404120(v2);
  }
  sub_25B454BFC(a1 + 48);
  return a1;
}

void sub_25B456DFC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  sub_25B435FAC(a2 + 8, (uint64_t)v18, (uint64_t)&v14, a3);
  sub_25B459028((uint64_t)v12, a2, (uint64_t)v18);
  uint64_t v5 = v14;
  if (v15 - (void)v14 != 8)
  {
    uint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v7 = sub_25B406B20(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v7, (uint64_t)" ", 1);
    unint64_t v8 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v9 = (void *)std::ostream::operator<<();
    sub_25B406B20(v9, (uint64_t)" ", 1);
    sub_25B406B20(v9, (uint64_t)"slice", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet(&v17, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v17);
    std::ostream::put();
    std::ostream::flush();
    LODWORD(v17.__locale_) = 0;
    sub_25B435E20("err");
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
    uint64_t v11 = std::locale::use_facet(&v17, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v17);
    std::ostream::put();
    std::ostream::flush();
  }
  sub_25B4591A8(a1, (uint64_t)v12, *v5);
  v12[0] = &unk_2708F2218;
  if (v13) {
    sub_25B404120(v13);
  }
  operator delete(v5);
}

void sub_25B457064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a26) {
    sub_25B404120(a26);
  }
  if (v29) {
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B4570D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_25B4583CC(a1, (_OWORD *)(a2 + 8));
  return sub_25B4584C4(v3, a2);
}

void sub_25B457104(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_2708F21F8;
  uint64_t v3 = (std::__shared_weak_count *)v1[16];
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_25B457138(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  sub_25B4582F4((uint64_t)(a1 + 3), a2);
  sub_25B4582F4((uint64_t)a1 + 200, a3);
  uint64_t v5 = 0;
  uint64_t v6 = (_OWORD *)((char *)a1 + 56);
  char v7 = 1;
  do
  {
    uint64_t v8 = *((void *)v6 + v5);
    uint64_t v9 = *((void *)a1 + v5 + 26);
    if ((v7 & 1) == 0) {
      break;
    }
    char v7 = 0;
    uint64_t v5 = 1;
  }
  while (v8 == v9);
  if (v8 != v9)
  {
    uint64_t v10 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v11 = sub_25B406B20(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/../expression/exp_element_binary.hpp", 127);
    sub_25B406B20(v11, (uint64_t)" ", 1);
    long long v12 = (void *)MEMORY[0x263F8C0F8];
    long long v13 = (void *)std::ostream::operator<<();
    sub_25B406B20(v13, (uint64_t)" ", 1);
    sub_25B406B20(v13, (uint64_t)"TensorBinaryExp", 15);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    uint64_t v14 = std::locale::use_facet(&v18, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v18);
    std::ostream::put();
    std::ostream::flush();
    sub_25B408160("err", "Binary Exp shape should equal");
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
    uint64_t v15 = std::locale::use_facet(&v18, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v18);
    std::ostream::put();
    std::ostream::flush();
  }
  long long v16 = *(_OWORD *)((char *)a1 + 72);
  *a1 = *v6;
  a1[1] = v16;
  a1[2] = *(_OWORD *)((char *)a1 + 88);
  return a1;
}

void sub_25B45736C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  v10[25] = &unk_2708F21F8;
  long long v12 = (std::__shared_weak_count *)v10[41];
  if (v12) {
    sub_25B404120(v12);
  }
  v10[6] = &unk_2708F21F8;
  long long v13 = (std::__shared_weak_count *)v10[22];
  if (v13) {
    sub_25B404120(v13);
  }
  _Unwind_Resume(a1);
}

void *sub_25B4573DC(void *a1)
{
  a1[75] = &unk_2708F21F8;
  uint64_t v2 = (std::__shared_weak_count *)a1[91];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[56] = &unk_2708F21F8;
  uint64_t v3 = (std::__shared_weak_count *)a1[72];
  if (v3) {
    sub_25B404120(v3);
  }
  a1[31] = &unk_2708F21F8;
  unint64_t v4 = (std::__shared_weak_count *)a1[47];
  if (v4) {
    sub_25B404120(v4);
  }
  a1[12] = &unk_2708F21F8;
  uint64_t v5 = (std::__shared_weak_count *)a1[28];
  if (v5) {
    sub_25B404120(v5);
  }
  return a1;
}

void *sub_25B4574B0(void *a1)
{
  a1[25] = &unk_2708F21F8;
  uint64_t v2 = (std::__shared_weak_count *)a1[41];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[6] = &unk_2708F21F8;
  uint64_t v3 = (std::__shared_weak_count *)a1[22];
  if (v3) {
    sub_25B404120(v3);
  }
  return a1;
}

void sub_25B45752C(void *a1)
{
  *a1 = &unk_2708F1E00;
  uint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B457598(void *a1)
{
  *a1 = &unk_2708F1E00;
  uint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

void sub_25B4575E4(void *a1)
{
  *a1 = &unk_2708F1DA8;
  uint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B457650(void *a1)
{
  *a1 = &unk_2708F1DA8;
  uint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

uint64_t sub_25B45769C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F1DA8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

uint64_t sub_25B457774(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F1E00;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

void *sub_25B45784C(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_25B40040C(a1, a2);
    long long v6 = (void *)a1[1];
    long long v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_25B4578B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_25B4578D0(_OWORD *a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = 0;
  v17[2] = *MEMORY[0x263EF8340];
  a1[2] = 0u;
  long long v5 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v6 = 1;
  *a1 = 0u;
  a1[1] = 0u;
  long long v7 = (std::locale::id *)MEMORY[0x263F8C108];
  uint64_t v8 = *a3;
  v17[0] = *a2;
  v17[1] = v8;
  uint64_t v15 = 0;
  uint64_t v9 = v17;
  do
  {
    uint64_t v10 = *v9;
    if ((unint64_t)*v9 >= 0xBEBC200)
    {
      sub_25B406B20(v5, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/../tensor/shape.hpp", 118);
      sub_25B406B20(v5, (uint64_t)" ", 1);
      uint64_t v11 = (void *)std::ostream::operator<<();
      sub_25B406B20(v11, (uint64_t)" ", 1);
      sub_25B406B20(v11, (uint64_t)"Shape", 5);
      std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
      long long v12 = std::locale::use_facet(&v16, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
      std::locale::~locale(&v16);
      std::ostream::put();
      std::ostream::flush();
      sub_25B45806C("err", "shape[", (uint64_t)&v15, "]", " is ", (uint64_t)v9, " ,it should <= 6");
      std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
      long long v13 = std::locale::use_facet(&v16, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v16);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v10 = *v9;
    }
    *((void *)a1 + v4) = v10;
    uint64_t v9 = &v17[v6];
    uint64_t v15 = ++v4;
    uint64_t v6 = 2;
  }
  while (v4 != 2);
  return a1;
}

void sub_25B457B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
}

uint64_t sub_25B457B6C(uint64_t result, _OWORD *a2)
{
  *(void *)uint64_t result = &unk_2708F1DA8;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 1;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(result + 8) = *a2;
  *(_OWORD *)(result + 40) = v2;
  *(_OWORD *)(result + 24) = v3;
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  *(void *)(result + 56) = v4;
  *(void *)(result + 64) = 1;
  *(void *)(result + 104) = v5 * v4;
  *(void *)(result + 112) = 0;
  if (v5 * v4) {
    sub_25B457F00((uint64_t)&v6, v5 * v4);
  }
  *(unsigned char *)(result + 137) = 1;
  return result;
}

void sub_25B457C4C(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B457C64(uint64_t a1, uint64_t *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v4 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    long long v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    long long v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"operator=", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet((const std::locale *)v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)v19);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4074D0("err", "scalar assign should create a storage first");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    uint64_t v11 = std::locale::use_facet((const std::locale *)v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)v19);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v12 = *a2;
  memset(v19, 0, sizeof(v19));
  uint64_t v13 = *(void *)(a1 + 104);
  uint64_t v14 = *(void **)(a1 + 144);
  if (*(unsigned char *)(a1 + 136))
  {
    for (; v13; --v13)
      *v14++ = v12;
  }
  else if (v13)
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      uint64_t v16 = 0;
      v14[*(void *)(a1 + 56) * *(void *)&v19[0] + *(void *)(a1 + 64) * *((void *)&v19[0] + 1)] = v12;
      do
      {
        uint64_t v17 = *(void *)((char *)v19 + v16 + 8) + 1;
        *(void *)((char *)v19 + v16 + 8) = v17;
        if (v17 != *(void *)(a1 + 16 + v16)) {
          break;
        }
        *(void *)((char *)v19 + v16 + 8) = 0;
        v16 -= 8;
      }
      while (v16 != -16);
    }
  }
  return a1;
}

void sub_25B457EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_25B457F00(uint64_t a1, uint64_t a2)
{
  long long v3 = operator new(0x30uLL);
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = &unk_2708F1DC8;
  v3[4] = a2;
  *((unsigned char *)v3 + 40) = 1;
  operator new[]();
}

void sub_25B457F94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_25B457FB0(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    uint64_t v1 = result;
    uint64_t result = *(void *)(result + 24);
    if (result)
    {
      uint64_t result = MEMORY[0x261163EC0](result, 0x1000C8000313F17);
      *(void *)(v1 + 24) = 0;
    }
  }
  return result;
}

void sub_25B457FF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2708F1DC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x261163EE0);
}

void sub_25B45804C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2708F1DC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_25B45806C(const char *a1, const char *a2, uint64_t a3, const char *a4, const char *a5, uint64_t a6, const char *a7)
{
  size_t v12 = strlen(a1);
  uint64_t v13 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v14 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v12);
  sub_25B406B20(v14, (uint64_t)" ", 1);
  size_t v15 = strlen(a2);
  uint64_t v16 = sub_25B406B20(v13, (uint64_t)a2, v15);
  sub_25B406B20(v16, (uint64_t)" ", 1);
  uint64_t v17 = (void *)std::ostream::operator<<();
  sub_25B406B20(v17, (uint64_t)" ", 1);
  size_t v18 = strlen(a4);
  uint64_t v19 = sub_25B406B20(v13, (uint64_t)a4, v18);
  sub_25B406B20(v19, (uint64_t)" ", 1);
  size_t v20 = strlen(a5);
  long long v21 = sub_25B406B20(v13, (uint64_t)a5, v20);
  sub_25B406B20(v21, (uint64_t)" ", 1);
  uint64_t v22 = (void *)std::ostream::operator<<();
  sub_25B406B20(v22, (uint64_t)" ", 1);

  return sub_25B40AF88(a7);
}

void sub_25B458194(uint64_t a1, uint64_t a2)
{
  long long v3 = operator new(0x30uLL);
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = &unk_2708F1E20;
  v3[4] = a2;
  *((unsigned char *)v3 + 40) = 1;
  operator new[]();
}

void sub_25B45821C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_25B458238(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    uint64_t v1 = result;
    uint64_t result = *(void *)(result + 24);
    if (result)
    {
      uint64_t result = MEMORY[0x261163EC0](result, 0x1000C8077774924);
      *(void *)(v1 + 24) = 0;
    }
  }
  return result;
}

void sub_25B458280(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2708F1E20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x261163EE0);
}

void sub_25B4582D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2708F1E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_25B4582F4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F21F8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

uint64_t sub_25B4583CC(uint64_t result, _OWORD *a2)
{
  *(void *)uint64_t result = &unk_2708F21F8;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 1;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(result + 8) = *a2;
  *(_OWORD *)(result + 40) = v2;
  *(_OWORD *)(result + 24) = v3;
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  *(void *)(result + 56) = v4;
  *(void *)(result + 64) = 1;
  *(void *)(result + 104) = v5 * v4;
  *(void *)(result + 112) = 0;
  if (v5 * v4) {
    sub_25B458EBC((uint64_t)&v6, v5 * v4);
  }
  *(unsigned char *)(result + 137) = 1;
  return result;
}

void sub_25B4584AC(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B4584C4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v153 = *MEMORY[0x263EF8340];
  uint64_t v5 = (_OWORD *)(result + 8);
  long long v6 = (_OWORD *)(a2 + 8);
  char v7 = 1;
  do
  {
    uint64_t v8 = *((void *)v5 + v4);
    uint64_t v9 = *((void *)v6 + v4);
    if ((v7 & 1) == 0) {
      break;
    }
    char v7 = 0;
    uint64_t v4 = 1;
  }
  while (v8 == v9);
  if (v8 == v9)
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      uint64_t v10 = *(void *)(result + 104);
      uint64_t v11 = *(_DWORD **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v10)
        {
          size_t v12 = *(int **)(a2 + 144);
          do
          {
            int v13 = *v12++;
            *v11++ = v13;
            --v10;
          }
          while (v10);
        }
      }
      else if (v10)
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(result + 56);
        uint64_t v79 = *(void *)(result + 64);
        uint64_t v80 = *(void *)(a2 + 144);
        do
        {
          uint64_t v81 = 0;
          v11[v78 * (void)v138 + v79 * *((void *)&v138 + 1)] = *(_DWORD *)(v80 + 4 * v77);
          do
          {
            uint64_t v82 = *(void *)((char *)&v138 + v81 + 8) + 1;
            *(void *)((char *)&v138 + v81 + 8) = v82;
            uint64_t result = *(void *)(v3 + 16 + v81);
            if (v82 != result) {
              break;
            }
            *(void *)((char *)&v138 + v81 + 8) = 0;
            v81 -= 8;
          }
          while (v81 != -16);
          ++v77;
        }
        while (v77 != v10);
      }
    }
    else
    {
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      uint64_t v40 = *(void *)(result + 104);
      uint64_t v41 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v40)
        {
          uint64_t v42 = 0;
          uint64_t v43 = *(void *)(a2 + 56);
          uint64_t v44 = *(void *)(a2 + 64);
          uint64_t v45 = *(void *)(a2 + 144);
          do
          {
            uint64_t v46 = 0;
            *(_DWORD *)(v41 + 4 * v42) = *(_DWORD *)(v45 + 4 * (v43 * v138 + v44 * *((void *)&v138 + 1)));
            do
            {
              uint64_t v47 = *(void *)((char *)&v138 + v46 + 8) + 1;
              *(void *)((char *)&v138 + v46 + 8) = v47;
              uint64_t result = *(void *)(v3 + 16 + v46);
              if (v47 != result) {
                break;
              }
              *(void *)((char *)&v138 + v46 + 8) = 0;
              v46 -= 8;
            }
            while (v46 != -16);
            ++v42;
          }
          while (v42 != v40);
        }
      }
      else if (v40)
      {
        uint64_t v101 = 0;
        uint64_t v102 = *(void *)(result + 56);
        uint64_t v103 = *(void *)(result + 64);
        uint64_t v104 = *(void *)(a2 + 56);
        uint64_t v105 = *(void *)(a2 + 64);
        uint64_t v106 = *(void *)(a2 + 144);
        do
        {
          uint64_t result = 0;
          *(_DWORD *)(v41 + 4 * (v102 * v138 + v103 * *((void *)&v138 + 1))) = *(_DWORD *)(v106
                                                                                           + 4
                                                                                           * (v104 * v138
                                                                                            + v105
                                                                                            * *((void *)&v138 + 1)));
          do
          {
            uint64_t v107 = *(void *)((char *)&v138 + result + 8) + 1;
            *(void *)((char *)&v138 + result + 8) = v107;
            if (v107 != *(void *)(v3 + 16 + result)) {
              break;
            }
            *(void *)((char *)&v138 + result + 8) = 0;
            result -= 8;
          }
          while (result != -16);
          ++v101;
        }
        while (v101 != v40);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v151 = 0uLL;
      long long v152 = 0uLL;
      long long v149 = 0uLL;
      long long v150 = 0uLL;
      long long v147 = 0uLL;
      long long v148 = 0uLL;
      long long v145 = 0uLL;
      long long v146 = 0uLL;
      long long v143 = 0uLL;
      long long v144 = 0uLL;
      long long v141 = 0uLL;
      long long v142 = 0uLL;
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      long long v130 = 0uLL;
      long long v131 = 0uLL;
      long long v129 = 0uLL;
      sub_25B40AB84((uint64_t)&v138, v5, v6, (uint64_t)&v129);
      uint64_t v14 = 0;
      char v15 = 1;
      do
      {
        uint64_t v16 = *((void *)&v129 + v14);
        uint64_t v17 = *((void *)v5 + v14);
        if ((v15 & 1) == 0) {
          break;
        }
        char v15 = 0;
        uint64_t v14 = 1;
      }
      while (v16 == v17);
      if (v16 != v17)
      {
        size_t v18 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v19 = sub_25B406B20(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v19, (uint64_t)" ", 1);
        size_t v20 = (void *)MEMORY[0x263F8C0F8];
        long long v21 = (void *)std::ostream::operator<<();
        sub_25B406B20(v21, (uint64_t)" ", 1);
        sub_25B406B20(v21, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
        uint64_t v22 = std::locale::use_facet(v135, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(v135);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
        uint64_t v23 = std::locale::use_facet(v135, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(v135);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v136 = 0u;
      long long v137 = 0u;
      long long v134 = 0u;
      *(_OWORD *)&v135[0].__locale_ = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      uint64_t v24 = *(void *)(v3 + 104);
      uint64_t v25 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v24)
        {
          uint64_t v26 = 0;
          long long v28 = (uint64_t *)*((void *)&v139 + 1);
          long long v27 = (uint64_t *)v140;
          unint64_t v29 = (uint64_t)(v140 - *((void *)&v139 + 1)) >> 3;
          if (v29 <= 1) {
            unint64_t v29 = 1;
          }
          uint64_t v30 = *(void *)(a2 + 144);
          do
          {
            long long v132 = *(_OWORD *)&v135[0].__locale_;
            if (v27 != v28)
            {
              long long v31 = v28;
              unint64_t v32 = v29;
              do
              {
                uint64_t v33 = *v31++;
                *((void *)&v132 + v33) = 0;
                --v32;
              }
              while (v32);
            }
            uint64_t v34 = 0;
            uint64_t v35 = 0;
            char v36 = 1;
            do
            {
              char v37 = v36;
              v35 += *((void *)&v150 + v34) * *((void *)&v132 + v34);
              uint64_t v34 = 1;
              char v36 = 0;
            }
            while ((v37 & 1) != 0);
            *(_DWORD *)(v25 + 4 * v26) = *(_DWORD *)(v30 + 4 * v35);
            for (uint64_t i = 1; i != -1; --i)
            {
              uint64_t v39 = (std::locale::__imp *)((char *)v135[i].__locale_ + 1);
              v135[i].__locale_ = v39;
              if (v39 != *(std::locale::__imp **)((char *)&v129 + i * 8)) {
                break;
              }
              v135[i].__locale_ = 0;
            }
            ++v26;
          }
          while (v26 != v24);
        }
      }
      else if (v24)
      {
        uint64_t v83 = 0;
        int v85 = (uint64_t *)*((void *)&v139 + 1);
        int v84 = (uint64_t *)v140;
        unint64_t v86 = (uint64_t)(v140 - *((void *)&v139 + 1)) >> 3;
        if (v86 <= 1) {
          unint64_t v86 = 1;
        }
        uint64_t v87 = *(void *)(v3 + 56);
        uint64_t v88 = *(void *)(v3 + 64);
        uint64_t v89 = *(void *)(a2 + 144);
        do
        {
          locale = v135[0].__locale_;
          float v91 = v135[1].__locale_;
          long long v132 = *(_OWORD *)&v135[0].__locale_;
          if (v84 != v85)
          {
            float v92 = v85;
            unint64_t v93 = v86;
            do
            {
              uint64_t v94 = *v92++;
              *((void *)&v132 + v94) = 0;
              --v93;
            }
            while (v93);
          }
          uint64_t v95 = 0;
          uint64_t v96 = 0;
          char v97 = 1;
          do
          {
            char v98 = v97;
            v96 += *((void *)&v150 + v95) * *((void *)&v132 + v95);
            uint64_t v95 = 1;
            char v97 = 0;
          }
          while ((v98 & 1) != 0);
          *(_DWORD *)(v25 + 4 * ((void)locale * v87 + (void)v91 * v88)) = *(_DWORD *)(v89 + 4 * v96);
          for (uint64_t j = 1; j != -1; --j)
          {
            uint64_t v100 = (std::locale::__imp *)((char *)v135[j].__locale_ + 1);
            v135[j].__locale_ = v100;
            if (v100 != *(std::locale::__imp **)((char *)&v129 + j * 8)) {
              break;
            }
            v135[j].__locale_ = 0;
          }
          ++v83;
        }
        while (v83 != v24);
      }
    }
    else
    {
      long long v151 = 0uLL;
      long long v152 = 0uLL;
      long long v149 = 0uLL;
      long long v150 = 0uLL;
      long long v147 = 0uLL;
      long long v148 = 0uLL;
      long long v145 = 0uLL;
      long long v146 = 0uLL;
      long long v143 = 0uLL;
      long long v144 = 0uLL;
      long long v141 = 0uLL;
      long long v142 = 0uLL;
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      long long v130 = 0uLL;
      long long v131 = 0uLL;
      long long v129 = 0uLL;
      sub_25B40AB84((uint64_t)&v138, v5, v6, (uint64_t)&v129);
      uint64_t v48 = 0;
      char v49 = 1;
      do
      {
        uint64_t v50 = *((void *)&v129 + v48);
        uint64_t v51 = *((void *)v5 + v48);
        if ((v49 & 1) == 0) {
          break;
        }
        char v49 = 0;
        uint64_t v48 = 1;
      }
      while (v50 == v51);
      if (v50 != v51)
      {
        unint64_t v52 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v53 = sub_25B406B20(v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v53, (uint64_t)" ", 1);
        unint64_t v54 = (void *)MEMORY[0x263F8C0F8];
        unint64_t v55 = (void *)std::ostream::operator<<();
        sub_25B406B20(v55, (uint64_t)" ", 1);
        sub_25B406B20(v55, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(*v55 - 24)));
        uint64_t v56 = std::locale::use_facet(v135, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(v135);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
        uint64_t v57 = std::locale::use_facet(v135, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
        std::locale::~locale(v135);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v136 = 0u;
      long long v137 = 0u;
      long long v134 = 0u;
      *(_OWORD *)&v135[0].__locale_ = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      uint64_t v58 = *(void *)(v3 + 104);
      uint64_t v59 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v58)
        {
          uint64_t v60 = 0;
          int v62 = (uint64_t *)*((void *)&v139 + 1);
          std::locale v61 = (uint64_t *)v140;
          unint64_t v63 = (uint64_t)(v140 - *((void *)&v139 + 1)) >> 3;
          if (v63 <= 1) {
            unint64_t v63 = 1;
          }
          int v64 = *(unsigned __int8 *)(a2 + 136);
          uint64_t v65 = *(void *)(a2 + 56);
          uint64_t v66 = *(void *)(a2 + 64);
          uint64_t v67 = *(void *)(a2 + 144);
          do
          {
            long long v132 = *(_OWORD *)&v135[0].__locale_;
            if (v61 != v62)
            {
              uint64_t v68 = v62;
              unint64_t v69 = v63;
              do
              {
                uint64_t v70 = *v68++;
                *((void *)&v132 + v70) = 0;
                --v69;
              }
              while (v69);
            }
            uint64_t v71 = 0;
            uint64_t v72 = 0;
            char v73 = 1;
            do
            {
              char v74 = v73;
              v72 += *((void *)&v150 + v71) * *((void *)&v132 + v71);
              uint64_t v71 = 1;
              char v73 = 0;
            }
            while ((v74 & 1) != 0);
            if (!v64) {
              uint64_t v72 = v132 * v65 + *((void *)&v132 + 1) * v66;
            }
            *(_DWORD *)(v59 + 4 * v60) = *(_DWORD *)(v67 + 4 * v72);
            for (uint64_t k = 1; k != -1; --k)
            {
              uint64_t v76 = (std::locale::__imp *)((char *)v135[k].__locale_ + 1);
              v135[k].__locale_ = v76;
              if (v76 != *(std::locale::__imp **)((char *)&v129 + k * 8)) {
                break;
              }
              v135[k].__locale_ = 0;
            }
            ++v60;
          }
          while (v60 != v58);
        }
      }
      else if (v58)
      {
        uint64_t v108 = 0;
        unint64_t v110 = (uint64_t *)*((void *)&v139 + 1);
        unint64_t v109 = (uint64_t *)v140;
        unint64_t v111 = (uint64_t)(v140 - *((void *)&v139 + 1)) >> 3;
        if (v111 <= 1) {
          unint64_t v111 = 1;
        }
        uint64_t v112 = *(void *)(v3 + 56);
        uint64_t v113 = *(void *)(v3 + 64);
        int v114 = *(unsigned __int8 *)(a2 + 136);
        uint64_t v115 = *(void *)(a2 + 56);
        uint64_t v116 = *(void *)(a2 + 64);
        uint64_t v117 = *(void *)(a2 + 144);
        do
        {
          unint64_t v118 = v135[0].__locale_;
          __int32 v119 = v135[1].__locale_;
          long long v132 = *(_OWORD *)&v135[0].__locale_;
          if (v109 != v110)
          {
            unint64_t v120 = v110;
            unint64_t v121 = v111;
            do
            {
              uint64_t v122 = *v120++;
              *((void *)&v132 + v122) = 0;
              --v121;
            }
            while (v121);
          }
          uint64_t v123 = 0;
          uint64_t v124 = 0;
          char v125 = 1;
          do
          {
            char v126 = v125;
            v124 += *((void *)&v150 + v123) * *((void *)&v132 + v123);
            uint64_t v123 = 1;
            char v125 = 0;
          }
          while ((v126 & 1) != 0);
          if (!v114) {
            uint64_t v124 = v132 * v115 + *((void *)&v132 + 1) * v116;
          }
          *(_DWORD *)(v59 + 4 * ((void)v118 * v112 + (void)v119 * v113)) = *(_DWORD *)(v117 + 4 * v124);
          for (uint64_t m = 1; m != -1; --m)
          {
            long long v128 = (std::locale::__imp *)((char *)v135[m].__locale_ + 1);
            v135[m].__locale_ = v128;
            if (v128 != *(std::locale::__imp **)((char *)&v129 + m * 8)) {
              break;
            }
            v135[m].__locale_ = 0;
          }
          ++v108;
        }
        while (v108 != v58);
      }
    }
    return sub_25B3F9500((uint64_t)&v138);
  }
  return result;
}

void sub_25B458E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_25B458EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = operator new(0x30uLL);
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = &unk_2708F2808;
  v3[4] = a2;
  *((unsigned char *)v3 + 40) = 1;
  operator new[]();
}

void sub_25B458F50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_25B458F6C(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    uint64_t v1 = result;
    uint64_t result = *(void *)(result + 24);
    if (result)
    {
      uint64_t result = MEMORY[0x261163EC0](result, 0x1000C8052888210);
      *(void *)(v1 + 24) = 0;
    }
  }
  return result;
}

void sub_25B458FB4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2708F2808;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x261163EE0);
}

void sub_25B459008(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2708F2808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_25B459028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  *(void *)a1 = &unk_2708F2218;
  *(void *)(a1 + 120) = 0;
  uint64_t v5 = (void **)(a1 + 120);
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 257;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = a1 + 56;
  char v7 = (unint64_t *)(a3 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  do
  {
    uint64_t v8 = *(v7 - 2);
    unint64_t v9 = *(v7 - 1) - v8;
    unint64_t v10 = *v7;
    v7 += 3;
    float v11 = (float)v9 / (float)v10;
    size_t v12 = (void *)(v6 + v4);
    *size_t v12 = *(void *)(v6 + v4) * v10;
    uint64_t v13 = *(void *)(a2 + 56 + v4);
    *(v12 - 6) = vcvtps_u32_f32(v11);
    *(void *)(a1 + 112) += v13 * v8;
    v4 += 8;
  }
  while (v4 != 24);
  *(void *)(a1 + 104) = *(void *)(a1 + 16) * *(void *)(a1 + 8) * *(void *)(a1 + 24);
  char v15 = *(void **)(a2 + 120);
  uint64_t v14 = *(void *)(a2 + 128);
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v15;
    *(void *)(a1 + 128) = v14;
    if (v16)
    {
      sub_25B404120(v16);
      char v15 = *v5;
    }
  }
  else
  {
    *(void *)(a1 + 120) = v15;
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v17 = 0;
  *(void *)(a1 + 144) = *v15 + 4 * *(void *)(a1 + 112);
  *(unsigned char *)(a1 + 137) = 0;
  uint64_t v18 = 1;
  while (1)
  {
    uint64_t v19 = *(void *)(a1 + v17 + 24);
    if (v19 != 1) {
      break;
    }
LABEL_11:
    v17 -= 8;
    if (v17 == -24)
    {
      char v20 = 1;
      goto LABEL_14;
    }
  }
  if (*(void *)(a1 + v17 + 72) == v18)
  {
    v18 *= v19;
    goto LABEL_11;
  }
  char v20 = 0;
LABEL_14:
  *(unsigned char *)(a1 + 136) = v20;
}

void sub_25B4591A8(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_2708F21F8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  uint64_t v5 = (void **)(a1 + 120);
  *(_WORD *)(a1 + 136) = 257;
  uint64_t v6 = a2 + 8;
  *(void *)(a1 + 128) = 0;
  sub_25B4363C0((uint64_t)&v18, a2 + 8, a3);
  uint64_t v7 = v19;
  uint64_t v8 = *(void *)(a2 + 56 + 8 * v18);
  uint64_t v9 = *(void *)(v6 + 8 * v19);
  *(void *)(a1 + 8) = *(void *)(v6 + 8 * v18);
  *(void *)(a1 + 16) = v9;
  uint64_t v10 = *(void *)(a2 + 56 + 8 * v7);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  size_t v12 = *(void **)(a2 + 120);
  uint64_t v11 = *(void *)(a2 + 128);
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = v12;
  *(void *)(a1 + 128) = v11;
  if (v13)
  {
    sub_25B404120(v13);
    size_t v12 = *v5;
  }
  uint64_t v14 = 0;
  *(void *)(a1 + 144) = *v12 + 4 * *(void *)(a1 + 112);
  *(unsigned char *)(a1 + 137) = 0;
  uint64_t v15 = 1;
  while (1)
  {
    uint64_t v16 = *(void *)(a1 + v14 + 16);
    if (v16 != 1) {
      break;
    }
LABEL_9:
    v14 -= 8;
    if (v14 == -16)
    {
      char v17 = 1;
      goto LABEL_12;
    }
  }
  if (*(void *)(a1 + v14 + 64) == v15)
  {
    v15 *= v16;
    goto LABEL_9;
  }
  char v17 = 0;
LABEL_12:
  *(unsigned char *)(a1 + 136) = v17;
}

void sub_25B4592EC(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[16];
  if (v4) {
    sub_25B404120(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B459308(void *a1, void *a2)
{
  if (a1[15] != a2[15]) {
    return 0;
  }
  if (a1[1] != a2[1] || a1[7] != a2[7] || a1[14] != a2[14]) {
    return 2;
  }
  if (a1[13] == a2[13]) {
    return 1;
  }
  return 2;
}

uint64_t sub_25B459378(uint64_t result, _OWORD *a2)
{
  *(void *)uint64_t result = &unk_2708F27E8;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 1;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(result + 8) = *a2;
  *(_OWORD *)(result + 40) = v2;
  *(_OWORD *)(result + 24) = v3;
  *(void *)(result + 56) = 1;
  uint64_t v4 = *(void *)(result + 8);
  *(void *)(result + 104) = v4;
  *(void *)(result + 112) = 0;
  if (v4) {
    sub_25B458EBC((uint64_t)&v5, v4);
  }
  *(unsigned char *)(result + 137) = 1;
  return result;
}

void sub_25B459454(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B45946C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v116 = *MEMORY[0x263EF8340];
  uint64_t v4 = (long long *)(result + 8);
  long long v5 = *(std::locale::__imp **)(result + 8);
  if (v5 == *(std::locale::__imp **)a2)
  {
    if (*(unsigned char *)(a2 + 344))
    {
      long long v114 = 0uLL;
      long long v115 = 0uLL;
      *(_OWORD *)&v113[0].__locale_ = 0uLL;
      uint64_t v6 = *(void *)(result + 104);
      uint64_t v7 = *(_DWORD **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v6)
        {
          uint64_t v8 = 0;
          uint64_t v9 = *(void *)(a2 + 160);
          uint64_t v10 = *(void *)(a2 + 352);
          do
          {
            long long v99 = 0u;
            long long v100 = 0u;
            long long v98 = 0u;
            uint64_t result = sub_25B45A550(a2 + 48, (uint64_t)v113, (uint64_t)&v98);
            *v7++ = *(_DWORD *)(v10 + 4 * v9 * v98);
            if ((std::locale::__imp *)((char *)v8 + 1) == v5) {
              uint64_t v8 = 0;
            }
            else {
              uint64_t v8 = (std::locale::__imp *)((char *)v8 + 1);
            }
            v113[0].__locale_ = v8;
            --v6;
          }
          while (v6);
        }
      }
      else if (v6)
      {
        unint64_t v52 = 0;
        uint64_t v53 = *(void *)(result + 56);
        uint64_t v54 = *(void *)(a2 + 160);
        uint64_t v55 = *(void *)(a2 + 352);
        do
        {
          long long v99 = 0u;
          long long v100 = 0u;
          long long v98 = 0u;
          uint64_t result = sub_25B45A550(a2 + 48, (uint64_t)v113, (uint64_t)&v98);
          v7[v53 * (void)v52] = *(_DWORD *)(v55 + 4 * v54 * v98);
          if ((std::locale::__imp *)((char *)v52 + 1) == v5) {
            unint64_t v52 = 0;
          }
          else {
            unint64_t v52 = (std::locale::__imp *)((char *)v52 + 1);
          }
          v113[0].__locale_ = v52;
          --v6;
        }
        while (v6);
      }
    }
    else
    {
      long long v114 = 0uLL;
      long long v115 = 0uLL;
      *(_OWORD *)&v113[0].__locale_ = 0uLL;
      uint64_t v29 = *(void *)(result + 104);
      uint64_t v30 = *(_DWORD **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v29)
        {
          long long v31 = 0;
          uint64_t v32 = *(void *)(a2 + 352);
          do
          {
            long long v99 = 0u;
            long long v100 = 0u;
            long long v98 = 0u;
            uint64_t result = sub_25B45A550(a2 + 48, (uint64_t)v113, (uint64_t)&v98);
            *v30++ = *(_DWORD *)(v32 + 4 * *(void *)(a2 + 264) * v98);
            if ((std::locale::__imp *)((char *)v31 + 1) == v5) {
              long long v31 = 0;
            }
            else {
              long long v31 = (std::locale::__imp *)((char *)v31 + 1);
            }
            v113[0].__locale_ = v31;
            --v29;
          }
          while (v29);
        }
      }
      else if (v29)
      {
        uint64_t v68 = 0;
        uint64_t v69 = *(void *)(result + 56);
        uint64_t v70 = *(void *)(a2 + 352);
        do
        {
          long long v99 = 0u;
          long long v100 = 0u;
          long long v98 = 0u;
          uint64_t result = sub_25B45A550(a2 + 48, (uint64_t)v113, (uint64_t)&v98);
          v30[v69 * (void)v68] = *(_DWORD *)(v70 + 4 * *(void *)(a2 + 264) * v98);
          if ((std::locale::__imp *)((char *)v68 + 1) == v5) {
            uint64_t v68 = 0;
          }
          else {
            uint64_t v68 = (std::locale::__imp *)((char *)v68 + 1);
          }
          v113[0].__locale_ = v68;
          --v29;
        }
        while (v29);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 344))
    {
      long long v111 = 0uLL;
      long long v112 = 0uLL;
      long long v109 = 0uLL;
      long long v110 = 0uLL;
      long long v107 = 0uLL;
      long long v108 = 0uLL;
      long long v105 = 0uLL;
      long long v106 = 0uLL;
      long long v103 = 0uLL;
      long long v104 = 0uLL;
      long long v101 = 0uLL;
      long long v102 = 0uLL;
      long long v99 = 0uLL;
      long long v100 = 0uLL;
      long long v98 = 0uLL;
      long long v93 = 0uLL;
      long long v94 = 0uLL;
      long long v92 = 0uLL;
      sub_25B439F30((uint64_t)&v98, v4, (long long *)a2, &v92);
      uint64_t v90 = v92;
      if ((void)v92 != *(void *)v4)
      {
        uint64_t v11 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        size_t v12 = sub_25B406B20(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v12, (uint64_t)" ", 1);
        uint64_t v13 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v14 = (void *)std::ostream::operator<<();
        sub_25B406B20(v14, (uint64_t)" ", 1);
        sub_25B406B20(v14, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
        uint64_t v15 = std::locale::use_facet(v113, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale(v113);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
        uint64_t v16 = std::locale::use_facet(v113, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(v113);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v96 = 0u;
      long long v97 = 0u;
      long long v95 = 0u;
      uint64_t v17 = *(void *)(v3 + 104);
      uint64_t v18 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v17)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v22 = (uint64_t *)*((void *)&v99 + 1);
          long long v21 = (uint64_t *)v100;
          unint64_t v23 = (uint64_t)(v100 - *((void *)&v99 + 1)) >> 3;
          if (v23 <= 1) {
            unint64_t v23 = 1;
          }
          unint64_t v87 = v23;
          uint64_t v24 = *(void *)(a2 + 160);
          uint64_t v25 = *(void *)(a2 + 352);
          do
          {
            *(void *)&long long v95 = v19;
            if (v21 != v22)
            {
              uint64_t v26 = v22;
              unint64_t v27 = v87;
              do
              {
                uint64_t v28 = *v26++;
                *((void *)&v95 + v28) = 0;
                --v27;
              }
              while (v27);
            }
            long long v114 = 0u;
            long long v115 = 0u;
            *(_OWORD *)&v113[0].__locale_ = 0u;
            sub_25B45A550(a2 + 48, (uint64_t)&v95, (uint64_t)v113);
            *(_DWORD *)(v18 + 4 * v20) = *(_DWORD *)(v25 + 4 * v24 * (uint64_t)v113[0].__locale_);
            if (v19 + 1 == v90) {
              uint64_t v19 = 0;
            }
            else {
              ++v19;
            }
            ++v20;
          }
          while (v20 != v17);
        }
      }
      else if (v17)
      {
        uint64_t v56 = 0;
        uint64_t v57 = 0;
        uint64_t v58 = a2 + 48;
        uint64_t v59 = a2;
        uint64_t v60 = (uint64_t *)*((void *)&v99 + 1);
        unint64_t v86 = (uint64_t *)v100;
        uint64_t v89 = v58;
        unint64_t v61 = (uint64_t)(v100 - *((void *)&v99 + 1)) >> 3;
        if (v61 <= 1) {
          unint64_t v61 = 1;
        }
        unint64_t v83 = v61;
        uint64_t v62 = *(void *)(v3 + 56);
        uint64_t v63 = *(void *)(v59 + 160);
        uint64_t v64 = *(void *)(v59 + 352);
        do
        {
          *(void *)&long long v95 = v56;
          if (v86 != v60)
          {
            uint64_t v65 = v60;
            unint64_t v66 = v83;
            do
            {
              uint64_t v67 = *v65++;
              *((void *)&v95 + v67) = 0;
              --v66;
            }
            while (v66);
          }
          long long v114 = 0u;
          long long v115 = 0u;
          *(_OWORD *)&v113[0].__locale_ = 0u;
          sub_25B45A550(v89, (uint64_t)&v95, (uint64_t)v113);
          *(_DWORD *)(v18 + 4 * v62 * v56) = *(_DWORD *)(v64 + 4 * v63 * (uint64_t)v113[0].__locale_);
          if (v56 + 1 == v90) {
            uint64_t v56 = 0;
          }
          else {
            ++v56;
          }
          ++v57;
        }
        while (v57 != v17);
      }
    }
    else
    {
      long long v111 = 0uLL;
      long long v112 = 0uLL;
      long long v109 = 0uLL;
      long long v110 = 0uLL;
      long long v107 = 0uLL;
      long long v108 = 0uLL;
      long long v105 = 0uLL;
      long long v106 = 0uLL;
      long long v103 = 0uLL;
      long long v104 = 0uLL;
      long long v101 = 0uLL;
      long long v102 = 0uLL;
      long long v99 = 0uLL;
      long long v100 = 0uLL;
      long long v98 = 0uLL;
      long long v93 = 0uLL;
      long long v94 = 0uLL;
      long long v92 = 0uLL;
      sub_25B439F30((uint64_t)&v98, v4, (long long *)a2, &v92);
      uint64_t v91 = v92;
      if ((void)v92 != *(void *)v4)
      {
        uint64_t v33 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v34 = sub_25B406B20(v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v34, (uint64_t)" ", 1);
        uint64_t v35 = (void *)MEMORY[0x263F8C0F8];
        char v36 = (void *)std::ostream::operator<<();
        sub_25B406B20(v36, (uint64_t)" ", 1);
        sub_25B406B20(v36, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
        char v37 = std::locale::use_facet(v113, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
        std::locale::~locale(v113);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24)));
        unint64_t v38 = std::locale::use_facet(v113, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
        std::locale::~locale(v113);
        std::ostream::put();
        std::ostream::flush();
      }
      uint64_t v39 = a2;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v95 = 0u;
      uint64_t v40 = *(void *)(v3 + 104);
      uint64_t v88 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v40)
        {
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          uint64_t v44 = (uint64_t *)*((void *)&v99 + 1);
          uint64_t v43 = (uint64_t *)v100;
          unint64_t v45 = (uint64_t)(v100 - *((void *)&v99 + 1)) >> 3;
          if (v45 <= 1) {
            unint64_t v45 = 1;
          }
          unint64_t v85 = v45;
          int v46 = *(unsigned __int8 *)(a2 + 344);
          uint64_t v47 = *(void *)(a2 + 352);
          do
          {
            *(void *)&long long v95 = v41;
            if (v43 != v44)
            {
              uint64_t v48 = v44;
              unint64_t v49 = v85;
              do
              {
                uint64_t v50 = *v48++;
                *((void *)&v95 + v50) = 0;
                --v49;
              }
              while (v49);
            }
            long long v114 = 0u;
            long long v115 = 0u;
            *(_OWORD *)&v113[0].__locale_ = 0u;
            sub_25B45A550(v39 + 48, (uint64_t)&v95, (uint64_t)v113);
            uint64_t v51 = (void *)(v39 + 264);
            if (v46) {
              uint64_t v51 = (void *)(v39 + 160);
            }
            *(_DWORD *)(v88 + 4 * v42) = *(_DWORD *)(v47 + 4 * *v51 * (uint64_t)v113[0].__locale_);
            if (v41 + 1 == v91) {
              uint64_t v41 = 0;
            }
            else {
              ++v41;
            }
            ++v42;
          }
          while (v42 != v40);
        }
      }
      else if (v40)
      {
        uint64_t v71 = 0;
        uint64_t v72 = 0;
        char v73 = (uint64_t *)*((void *)&v99 + 1);
        int v84 = (uint64_t *)v100;
        unint64_t v74 = (uint64_t)(v100 - *((void *)&v99 + 1)) >> 3;
        if (v74 <= 1) {
          unint64_t v74 = 1;
        }
        unint64_t v82 = v74;
        uint64_t v75 = *(void *)(v3 + 56);
        int v76 = *(unsigned __int8 *)(v39 + 344);
        uint64_t v77 = *(void *)(v39 + 352);
        do
        {
          *(void *)&long long v95 = v71;
          if (v84 != v73)
          {
            uint64_t v78 = v73;
            unint64_t v79 = v82;
            do
            {
              uint64_t v80 = *v78++;
              *((void *)&v95 + v80) = 0;
              --v79;
            }
            while (v79);
          }
          long long v114 = 0u;
          long long v115 = 0u;
          *(_OWORD *)&v113[0].__locale_ = 0u;
          sub_25B45A550(v39 + 48, (uint64_t)&v95, (uint64_t)v113);
          uint64_t v81 = (void *)(v39 + 264);
          if (v76) {
            uint64_t v81 = (void *)(v39 + 160);
          }
          *(_DWORD *)(v88 + 4 * v75 * v71) = *(_DWORD *)(v77 + 4 * *v81 * (uint64_t)v113[0].__locale_);
          if (v71 + 1 == v91) {
            uint64_t v71 = 0;
          }
          else {
            ++v71;
          }
          ++v72;
        }
        while (v72 != v40);
      }
    }
    return sub_25B3F9500((uint64_t)&v98);
  }
  return result;
}

void sub_25B459D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::locale::~locale((std::locale *)(v27 - 144));
  sub_25B3F9500((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_25B459DBC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v109 = *MEMORY[0x263EF8340];
  long long v5 = (long long *)(result + 8);
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v6 = (long long *)(a2 + 8);
  if (v4 == *(void *)(a2 + 8))
  {
    uint64_t v7 = *(void *)(result + 104);
    uint64_t v8 = *(_DWORD **)(result + 144);
    if (*(unsigned char *)(a2 + 136))
    {
      if (*(unsigned char *)(result + 136))
      {
        if (v7)
        {
          uint64_t v9 = *(int **)(a2 + 144);
          do
          {
            int v10 = *v9++;
            *v8++ = v10;
            --v7;
          }
          while (v7);
        }
      }
      else if (v7)
      {
        uint64_t v55 = 0;
        uint64_t v56 = *(void *)(result + 56);
        uint64_t v57 = *(int **)(a2 + 144);
        do
        {
          int v58 = *v57++;
          v8[v56 * v55] = v58;
          if (v55 + 1 == v4) {
            uint64_t v55 = 0;
          }
          else {
            ++v55;
          }
          --v7;
        }
        while (v7);
      }
    }
    else if (*(unsigned char *)(result + 136))
    {
      if (v7)
      {
        uint64_t v31 = 0;
        uint64_t v32 = *(void *)(a2 + 144);
        do
        {
          *v8++ = *(_DWORD *)(v32 + 4 * *(void *)(a2 + 56) * v31);
          if (v31 + 1 == v4) {
            uint64_t v31 = 0;
          }
          else {
            ++v31;
          }
          --v7;
        }
        while (v7);
      }
    }
    else if (v7)
    {
      uint64_t v71 = 0;
      uint64_t v72 = *(void *)(result + 56);
      uint64_t v73 = *(void *)(a2 + 144);
      do
      {
        v8[v72 * v71] = *(_DWORD *)(v73 + 4 * *(void *)(a2 + 56) * v71);
        if (v71 + 1 == v4) {
          uint64_t v71 = 0;
        }
        else {
          ++v71;
        }
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v104 = 0uLL;
      long long v105 = 0uLL;
      long long v102 = 0uLL;
      long long v103 = 0uLL;
      long long v100 = 0uLL;
      long long v101 = 0uLL;
      long long v98 = 0uLL;
      long long v99 = 0uLL;
      long long v96 = 0uLL;
      long long v97 = 0uLL;
      long long v94 = 0uLL;
      long long v95 = 0uLL;
      long long v92 = 0uLL;
      long long v93 = 0uLL;
      long long v90 = 0uLL;
      long long v91 = 0uLL;
      long long v88 = 0uLL;
      long long v89 = 0uLL;
      sub_25B439F30((uint64_t)&v91, v5, v6, &v88);
      uint64_t v11 = (std::locale::__imp *)v88;
      if ((void)v88 != *(void *)v5)
      {
        size_t v12 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v13 = sub_25B406B20(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v13, (uint64_t)" ", 1);
        uint64_t v14 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v15 = (void *)std::ostream::operator<<();
        sub_25B406B20(v15, (uint64_t)" ", 1);
        sub_25B406B20(v15, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
        uint64_t v16 = std::locale::use_facet(v106, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(v106);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
        uint64_t v17 = std::locale::use_facet(v106, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(v106);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v107 = 0u;
      long long v108 = 0u;
      *(_OWORD *)&v106[0].__locale_ = 0u;
      uint64_t v18 = *(void *)(v3 + 104);
      uint64_t v19 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v18)
        {
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          unint64_t v23 = (uint64_t *)*((void *)&v92 + 1);
          uint64_t v22 = (uint64_t *)v93;
          unint64_t v24 = (uint64_t)(v93 - *((void *)&v92 + 1)) >> 3;
          if (v24 <= 1) {
            unint64_t v24 = 1;
          }
          uint64_t v25 = v103;
          uint64_t v26 = *(void *)(a2 + 144);
          do
          {
            v106[0].__locale_ = v20;
            locale = v20;
            if (v22 != v23)
            {
              uint64_t v28 = v23;
              unint64_t v29 = v24;
              do
              {
                uint64_t v30 = *v28++;
                v106[v30].__locale_ = 0;
                --v29;
              }
              while (v29);
              locale = v106[0].__locale_;
            }
            *(_DWORD *)(v19 + 4 * v21) = *(_DWORD *)(v26 + 4 * (void)locale * v25);
            if ((std::locale::__imp *)((char *)v20 + 1) == v11) {
              uint64_t v20 = 0;
            }
            else {
              uint64_t v20 = (std::locale::__imp *)((char *)v20 + 1);
            }
            ++v21;
          }
          while (v21 != v18);
        }
      }
      else if (v18)
      {
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        uint64_t v62 = (uint64_t *)*((void *)&v92 + 1);
        unint64_t v61 = (uint64_t *)v93;
        unint64_t v63 = (uint64_t)(v93 - *((void *)&v92 + 1)) >> 3;
        if (v63 <= 1) {
          unint64_t v63 = 1;
        }
        uint64_t v64 = v103;
        uint64_t v65 = *(void *)(v3 + 56);
        uint64_t v66 = *(void *)(a2 + 144);
        do
        {
          v106[0].__locale_ = v59;
          uint64_t v67 = v59;
          if (v61 != v62)
          {
            uint64_t v68 = v62;
            unint64_t v69 = v63;
            do
            {
              uint64_t v70 = *v68++;
              v106[v70].__locale_ = 0;
              --v69;
            }
            while (v69);
            uint64_t v67 = v106[0].__locale_;
          }
          *(_DWORD *)(v19 + 4 * (void)v59 * v65) = *(_DWORD *)(v66 + 4 * (void)v67 * v64);
          if ((std::locale::__imp *)((char *)v59 + 1) == v11) {
            uint64_t v59 = 0;
          }
          else {
            uint64_t v59 = (std::locale::__imp *)((char *)v59 + 1);
          }
          ++v60;
        }
        while (v60 != v18);
      }
    }
    else
    {
      long long v104 = 0uLL;
      long long v105 = 0uLL;
      long long v102 = 0uLL;
      long long v103 = 0uLL;
      long long v100 = 0uLL;
      long long v101 = 0uLL;
      long long v98 = 0uLL;
      long long v99 = 0uLL;
      long long v96 = 0uLL;
      long long v97 = 0uLL;
      long long v94 = 0uLL;
      long long v95 = 0uLL;
      long long v92 = 0uLL;
      long long v93 = 0uLL;
      long long v90 = 0uLL;
      long long v91 = 0uLL;
      long long v88 = 0uLL;
      long long v89 = 0uLL;
      sub_25B439F30((uint64_t)&v91, v5, v6, &v88);
      uint64_t v33 = (std::locale::__imp *)v88;
      if ((void)v88 != *(void *)v5)
      {
        uint64_t v34 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v35 = sub_25B406B20(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v35, (uint64_t)" ", 1);
        char v36 = (void *)MEMORY[0x263F8C0F8];
        char v37 = (void *)std::ostream::operator<<();
        sub_25B406B20(v37, (uint64_t)" ", 1);
        sub_25B406B20(v37, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24)));
        unint64_t v38 = std::locale::use_facet(v106, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
        std::locale::~locale(v106);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
        uint64_t v39 = std::locale::use_facet(v106, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
        std::locale::~locale(v106);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v107 = 0u;
      long long v108 = 0u;
      *(_OWORD *)&v106[0].__locale_ = 0u;
      uint64_t v40 = *(void *)(v3 + 104);
      uint64_t v41 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v40)
        {
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          unint64_t v45 = (uint64_t *)*((void *)&v92 + 1);
          uint64_t v44 = (uint64_t *)v93;
          unint64_t v46 = (uint64_t)(v93 - *((void *)&v92 + 1)) >> 3;
          if (v46 <= 1) {
            unint64_t v46 = 1;
          }
          uint64_t v47 = v103;
          int v48 = *(unsigned __int8 *)(a2 + 136);
          uint64_t v49 = *(void *)(a2 + 144);
          do
          {
            v106[0].__locale_ = v42;
            uint64_t v50 = v42;
            if (v44 != v45)
            {
              uint64_t v51 = v45;
              unint64_t v52 = v46;
              do
              {
                uint64_t v53 = *v51++;
                v106[v53].__locale_ = 0;
                --v52;
              }
              while (v52);
              uint64_t v50 = v106[0].__locale_;
            }
            uint64_t v54 = *(void *)(a2 + 56);
            if (v48) {
              uint64_t v54 = v47;
            }
            *(_DWORD *)(v41 + 4 * v43) = *(_DWORD *)(v49 + 4 * v54 * (void)v50);
            if ((std::locale::__imp *)((char *)v42 + 1) == v33) {
              uint64_t v42 = 0;
            }
            else {
              uint64_t v42 = (std::locale::__imp *)((char *)v42 + 1);
            }
            ++v43;
          }
          while (v43 != v40);
        }
      }
      else if (v40)
      {
        unint64_t v74 = 0;
        uint64_t v75 = 0;
        uint64_t v77 = (uint64_t *)*((void *)&v92 + 1);
        int v76 = (uint64_t *)v93;
        unint64_t v78 = (uint64_t)(v93 - *((void *)&v92 + 1)) >> 3;
        if (v78 <= 1) {
          unint64_t v78 = 1;
        }
        uint64_t v79 = v103;
        uint64_t v80 = *(void *)(v3 + 56);
        int v81 = *(unsigned __int8 *)(a2 + 136);
        uint64_t v82 = *(void *)(a2 + 144);
        do
        {
          v106[0].__locale_ = v74;
          unint64_t v83 = v74;
          if (v76 != v77)
          {
            int v84 = v77;
            unint64_t v85 = v78;
            do
            {
              uint64_t v86 = *v84++;
              v106[v86].__locale_ = 0;
              --v85;
            }
            while (v85);
            unint64_t v83 = v106[0].__locale_;
          }
          uint64_t v87 = *(void *)(a2 + 56);
          if (v81) {
            uint64_t v87 = v79;
          }
          *(_DWORD *)(v41 + 4 * (void)v74 * v80) = *(_DWORD *)(v82 + 4 * v87 * (void)v83);
          if ((std::locale::__imp *)((char *)v74 + 1) == v33) {
            unint64_t v74 = 0;
          }
          else {
            unint64_t v74 = (std::locale::__imp *)((char *)v74 + 1);
          }
          ++v75;
        }
        while (v75 != v40);
      }
    }
    return sub_25B3F9500((uint64_t)&v91);
  }
  return result;
}

void sub_25B45A51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::locale::~locale((std::locale *)(v7 - 128));
  sub_25B3F9500((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B45A550(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(result + 56);
  *(void *)(a3 + 8 * *(void *)(result + 48)) = *(void *)(*(void *)(*(void *)result + 144)
                                                               + 8
                                                               * **(void **)(result + 24)
                                                               * *(void *)(a2 + 8 * *(void *)(result + 48)));
  uint64_t v4 = *(void *)(result + 64) - (void)v3;
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    do
    {
      uint64_t v6 = *v3++;
      *(void *)(a3 + 8 * v6) = *(void *)(a2 + 8 * v6);
      --v5;
    }
    while (v5);
  }
  return result;
}

BOOL sub_25B45A5A4(void *a1, void *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[13] == a2[13]
      && a1[12] == a2[12];
}

uint64_t sub_25B45A630(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_2708F2218;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 1;
  sub_25B43876C(a1 + 8, a2);
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3) {
    sub_25B458EBC((uint64_t)&v5, v3);
  }
  *(unsigned char *)(a1 + 137) = 1;
  return a1;
}

void sub_25B45A6FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B45A714(uint64_t a1, uint64_t a2)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  uint64_t v4 = (_OWORD *)(a1 + 8);
  if (*(void *)(a1 + 8) == *(void *)a2
    && *(void *)(a1 + 16) == *(void *)(a2 + 8)
    && *(void *)(a1 + 24) == *(void *)(a2 + 16))
  {
    if (*(unsigned char *)(a2 + 344))
    {
      long long v79 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
      uint64_t v5 = *(void *)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v5)
        {
          uint64_t v7 = 0;
          uint64_t v8 = a1 + 24;
          do
          {
            float v9 = sub_25B45BAAC(a2, (uint64_t)&v78);
            uint64_t v10 = 0;
            *(float *)(v6 + 4 * v7) = v9;
            do
            {
              uint64_t v11 = *(void *)((char *)&v79 + v10) + 1;
              *(void *)((char *)&v79 + v10) = v11;
              if (v11 != *(void *)(v8 + v10)) {
                break;
              }
              *(void *)((char *)&v79 + v10) = 0;
              v10 -= 8;
            }
            while (v10 != -24);
            ++v7;
          }
          while (v7 != v5);
        }
      }
      else if (v5)
      {
        uint64_t v53 = 0;
        uint64_t v54 = a1 + 56;
        uint64_t v55 = a1 + 24;
        do
        {
          uint64_t v56 = 0;
          uint64_t v57 = 0;
          do
          {
            v57 += *(void *)(v54 + v56) * *(void *)((char *)&v78 + v56);
            v56 += 8;
          }
          while (v56 != 24);
          float v58 = sub_25B45BAAC(a2, (uint64_t)&v78);
          uint64_t v59 = 0;
          *(float *)(v6 + 4 * v57) = v58;
          do
          {
            uint64_t v60 = *(void *)((char *)&v79 + v59) + 1;
            *(void *)((char *)&v79 + v59) = v60;
            if (v60 != *(void *)(v55 + v59)) {
              break;
            }
            *(void *)((char *)&v79 + v59) = 0;
            v59 -= 8;
          }
          while (v59 != -24);
          ++v53;
        }
        while (v53 != v5);
      }
    }
    else
    {
      long long v79 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
      uint64_t v46 = *(void *)(a1 + 104);
      uint64_t v47 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v46)
        {
          uint64_t v48 = 0;
          uint64_t v49 = a1 + 24;
          do
          {
            float v50 = sub_25B45B9E0(a2, (uint64_t)&v78);
            uint64_t v51 = 0;
            *(float *)(v47 + 4 * v48) = v50;
            do
            {
              uint64_t v52 = *(void *)((char *)&v79 + v51) + 1;
              *(void *)((char *)&v79 + v51) = v52;
              if (v52 != *(void *)(v49 + v51)) {
                break;
              }
              *(void *)((char *)&v79 + v51) = 0;
              v51 -= 8;
            }
            while (v51 != -24);
            ++v48;
          }
          while (v48 != v46);
        }
      }
      else if (v46)
      {
        uint64_t v61 = 0;
        uint64_t v62 = a1 + 56;
        uint64_t v63 = a1 + 24;
        do
        {
          uint64_t v64 = 0;
          uint64_t v65 = 0;
          do
          {
            v65 += *(void *)(v62 + v64) * *(void *)((char *)&v78 + v64);
            v64 += 8;
          }
          while (v64 != 24);
          float v66 = sub_25B45B9E0(a2, (uint64_t)&v78);
          uint64_t v67 = 0;
          *(float *)(v47 + 4 * v65) = v66;
          do
          {
            uint64_t v68 = *(void *)((char *)&v79 + v67) + 1;
            *(void *)((char *)&v79 + v67) = v68;
            if (v68 != *(void *)(v63 + v67)) {
              break;
            }
            *(void *)((char *)&v79 + v67) = 0;
            v67 -= 8;
          }
          while (v67 != -24);
          ++v61;
        }
        while (v61 != v46);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 344))
    {
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
      long long v71 = 0u;
      memset(v70, 0, sizeof(v70));
      sub_25B43A3F0((uint64_t)&v78, v4, (_OWORD *)a2, (uint64_t)v70);
      if (*(void *)&v70[0] != *(void *)v4 || *(_OWORD *)((char *)v70 + 8) != *(_OWORD *)(a1 + 16))
      {
        size_t v12 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v13 = sub_25B406B20(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v13, (uint64_t)" ", 1);
        uint64_t v14 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v15 = (void *)std::ostream::operator<<();
        sub_25B406B20(v15, (uint64_t)" ", 1);
        sub_25B406B20(v15, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
        uint64_t v16 = std::locale::use_facet(v75, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(v75);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
        uint64_t v17 = std::locale::use_facet(v75, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(v75);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v77 = 0u;
      *(_OWORD *)&v75[0].__locale_ = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v72 = 0u;
      uint64_t v18 = *(void *)(a1 + 104);
      uint64_t v19 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v18)
        {
          for (uint64_t i = 0; i != v18; ++i)
          {
            uint64_t v69 = 0;
            sub_25B43A810((uint64_t)&v78, (uint64_t)v75, &v69, (uint64_t)&v72);
            *(float *)(v19 + 4 * i) = sub_25B45BAAC(a2, (uint64_t)&v72);
            for (uint64_t j = 2; j != -1; --j)
            {
              uint64_t v22 = (std::locale::__imp *)((char *)v75[j].__locale_ + 1);
              v75[j].__locale_ = v22;
              if (v22 != *(std::locale::__imp **)((char *)v70 + j * 8)) {
                break;
              }
              v75[j].__locale_ = 0;
            }
          }
        }
      }
      else if (v18)
      {
        uint64_t v34 = 0;
        uint64_t v35 = a1 + 56;
        do
        {
          uint64_t v69 = 0;
          sub_25B43A810((uint64_t)&v78, (uint64_t)v75, &v69, (uint64_t)&v72);
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          do
          {
            v37 += *(void *)(v35 + v36 * 8) * (uint64_t)v75[v36].__locale_;
            ++v36;
          }
          while (v36 != 3);
          *(float *)(v19 + 4 * v37) = sub_25B45BAAC(a2, (uint64_t)&v72);
          for (uint64_t k = 2; k != -1; --k)
          {
            uint64_t v39 = (std::locale::__imp *)((char *)v75[k].__locale_ + 1);
            v75[k].__locale_ = v39;
            if (v39 != *(std::locale::__imp **)((char *)v70 + k * 8)) {
              break;
            }
            v75[k].__locale_ = 0;
          }
          ++v34;
        }
        while (v34 != v18);
      }
    }
    else
    {
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
      long long v71 = 0u;
      memset(v70, 0, sizeof(v70));
      sub_25B43A3F0((uint64_t)&v78, v4, (_OWORD *)a2, (uint64_t)v70);
      if (*(void *)&v70[0] != *(void *)v4 || *(_OWORD *)((char *)v70 + 8) != *(_OWORD *)(a1 + 16))
      {
        unint64_t v23 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        unint64_t v24 = sub_25B406B20(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v24, (uint64_t)" ", 1);
        uint64_t v25 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v26 = (void *)std::ostream::operator<<();
        sub_25B406B20(v26, (uint64_t)" ", 1);
        sub_25B406B20(v26, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
        uint64_t v27 = std::locale::use_facet(v75, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
        std::locale::~locale(v75);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
        uint64_t v28 = std::locale::use_facet(v75, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
        std::locale::~locale(v75);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v77 = 0u;
      *(_OWORD *)&v75[0].__locale_ = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v72 = 0u;
      uint64_t v29 = *(void *)(a1 + 104);
      uint64_t v30 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v29)
        {
          for (uint64_t m = 0; m != v29; ++m)
          {
            uint64_t v69 = 0;
            sub_25B43A810((uint64_t)&v78, (uint64_t)v75, &v69, (uint64_t)&v72);
            *(float *)(v30 + 4 * m) = sub_25B45B9E0(a2, (uint64_t)&v72);
            for (uint64_t n = 2; n != -1; --n)
            {
              uint64_t v33 = (std::locale::__imp *)((char *)v75[n].__locale_ + 1);
              v75[n].__locale_ = v33;
              if (v33 != *(std::locale::__imp **)((char *)v70 + n * 8)) {
                break;
              }
              v75[n].__locale_ = 0;
            }
          }
        }
      }
      else if (v29)
      {
        uint64_t v40 = 0;
        uint64_t v41 = a1 + 56;
        do
        {
          uint64_t v69 = 0;
          sub_25B43A810((uint64_t)&v78, (uint64_t)v75, &v69, (uint64_t)&v72);
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          do
          {
            v43 += *(void *)(v41 + v42 * 8) * (uint64_t)v75[v42].__locale_;
            ++v42;
          }
          while (v42 != 3);
          *(float *)(v30 + 4 * v43) = sub_25B45B9E0(a2, (uint64_t)&v72);
          for (iuint64_t i = 2; ii != -1; --ii)
          {
            unint64_t v45 = (std::locale::__imp *)((char *)v75[ii].__locale_ + 1);
            v75[ii].__locale_ = v45;
            if (v45 != *(std::locale::__imp **)((char *)v70 + ii * 8)) {
              break;
            }
            v75[ii].__locale_ = 0;
          }
          ++v40;
        }
        while (v40 != v29);
      }
    }
    sub_25B3F9500((uint64_t)&v78);
  }
}

void sub_25B45B018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_25B45B04C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v4 = (_OWORD *)(result + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  if (*(void *)(result + 8) == *(void *)(a2 + 8)
    && *(void *)(result + 16) == *(void *)(a2 + 16)
    && *(void *)(result + 24) == *(void *)(a2 + 24))
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v87 = 0u;
      long long v88 = 0u;
      long long v86 = 0u;
      uint64_t v6 = *(void *)(result + 104);
      uint64_t v7 = *(_DWORD **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v6)
        {
          uint64_t v8 = *(int **)(a2 + 144);
          do
          {
            int v9 = *v8++;
            *v7++ = v9;
            --v6;
          }
          while (v6);
        }
      }
      else if (v6)
      {
        uint64_t v64 = 0;
        uint64_t v65 = *(void *)(a2 + 144);
        do
        {
          uint64_t v66 = 0;
          uint64_t v67 = 0;
          do
          {
            v67 += *(void *)(v3 + 56 + v66) * *(void *)((char *)&v86 + v66);
            v66 += 8;
          }
          while (v66 != 24);
          uint64_t v68 = 0;
          v7[v67] = *(_DWORD *)(v65 + 4 * v64);
          do
          {
            uint64_t v69 = *(void *)((char *)&v87 + v68) + 1;
            *(void *)((char *)&v87 + v68) = v69;
            uint64_t result = *(void *)(v3 + 24 + v68);
            if (v69 != result) {
              break;
            }
            *(void *)((char *)&v87 + v68) = 0;
            v68 -= 8;
          }
          while (v68 != -24);
          ++v64;
        }
        while (v64 != v6);
      }
    }
    else
    {
      long long v87 = 0u;
      long long v88 = 0u;
      long long v86 = 0u;
      uint64_t v56 = *(void *)(result + 104);
      uint64_t v57 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v56)
        {
          uint64_t v58 = 0;
          uint64_t v59 = *(void *)(a2 + 144);
          do
          {
            uint64_t v60 = 0;
            uint64_t v61 = 0;
            do
            {
              v61 += *(void *)(a2 + 56 + v60) * *(void *)((char *)&v86 + v60);
              v60 += 8;
            }
            while (v60 != 24);
            uint64_t v62 = 0;
            *(_DWORD *)(v57 + 4 * v58) = *(_DWORD *)(v59 + 4 * v61);
            do
            {
              uint64_t v63 = *(void *)((char *)&v87 + v62) + 1;
              *(void *)((char *)&v87 + v62) = v63;
              uint64_t result = *(void *)(v3 + 24 + v62);
              if (v63 != result) {
                break;
              }
              *(void *)((char *)&v87 + v62) = 0;
              v62 -= 8;
            }
            while (v62 != -24);
            ++v58;
          }
          while (v58 != v56);
        }
      }
      else if (v56)
      {
        uint64_t v70 = 0;
        uint64_t v71 = *(void *)(a2 + 144);
        do
        {
          uint64_t v72 = 0;
          uint64_t v73 = 0;
          do
          {
            v73 += *(void *)(v3 + 56 + v72) * *(void *)((char *)&v86 + v72);
            v72 += 8;
          }
          while (v72 != 24);
          uint64_t v74 = 0;
          uint64_t v75 = 0;
          do
          {
            v75 += *(void *)(a2 + 56 + v74) * *(void *)((char *)&v86 + v74);
            v74 += 8;
          }
          while (v74 != 24);
          uint64_t result = 0;
          *(_DWORD *)(v57 + 4 * v73) = *(_DWORD *)(v71 + 4 * v75);
          do
          {
            uint64_t v76 = *(void *)((char *)&v87 + result) + 1;
            *(void *)((char *)&v87 + result) = v76;
            if (v76 != *(void *)(v3 + 24 + result)) {
              break;
            }
            *(void *)((char *)&v87 + result) = 0;
            result -= 8;
          }
          while (result != -24);
          ++v70;
        }
        while (v70 != v56);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v86 = 0u;
      long long v79 = 0u;
      memset(v78, 0, sizeof(v78));
      sub_25B43A3F0((uint64_t)&v86, v4, v5, (uint64_t)v78);
      if (*(void *)&v78[0] != *(void *)v4 || *(_OWORD *)((char *)v78 + 8) != *(_OWORD *)(v3 + 16))
      {
        uint64_t v10 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v11 = sub_25B406B20(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v11, (uint64_t)" ", 1);
        size_t v12 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v13 = (void *)std::ostream::operator<<();
        sub_25B406B20(v13, (uint64_t)" ", 1);
        sub_25B406B20(v13, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
        uint64_t v14 = std::locale::use_facet(v83, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale(v83);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
        uint64_t v15 = std::locale::use_facet(v83, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale(v83);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v85 = 0u;
      *(_OWORD *)&v83[0].__locale_ = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v80 = 0u;
      uint64_t v16 = *(void *)(v3 + 104);
      uint64_t v17 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v16)
        {
          uint64_t v18 = 0;
          uint64_t v19 = *(void *)(a2 + 144);
          do
          {
            uint64_t v77 = 0;
            sub_25B43A810((uint64_t)&v86, (uint64_t)v83, &v77, (uint64_t)&v80);
            *(_DWORD *)(v17 + 4 * v18) = *(_DWORD *)(v19 + 4 * v77);
            for (uint64_t i = 2; i != -1; --i)
            {
              uint64_t v21 = (std::locale::__imp *)((char *)v83[i].__locale_ + 1);
              v83[i].__locale_ = v21;
              if (v21 != *(std::locale::__imp **)((char *)v78 + i * 8)) {
                break;
              }
              v83[i].__locale_ = 0;
            }
            ++v18;
          }
          while (v18 != v16);
        }
      }
      else if (v16)
      {
        uint64_t v38 = 0;
        uint64_t v39 = v3 + 56;
        uint64_t v40 = *(void *)(a2 + 144);
        do
        {
          uint64_t v77 = 0;
          sub_25B43A810((uint64_t)&v86, (uint64_t)v83, &v77, (uint64_t)&v80);
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          do
          {
            v42 += *(void *)(v39 + v41 * 8) * (uint64_t)v83[v41].__locale_;
            ++v41;
          }
          while (v41 != 3);
          *(_DWORD *)(v17 + 4 * v42) = *(_DWORD *)(v40 + 4 * v77);
          for (uint64_t j = 2; j != -1; --j)
          {
            uint64_t v44 = (std::locale::__imp *)((char *)v83[j].__locale_ + 1);
            v83[j].__locale_ = v44;
            if (v44 != *(std::locale::__imp **)((char *)v78 + j * 8)) {
              break;
            }
            v83[j].__locale_ = 0;
          }
          ++v38;
        }
        while (v38 != v16);
      }
    }
    else
    {
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v86 = 0u;
      long long v79 = 0u;
      memset(v78, 0, sizeof(v78));
      sub_25B43A3F0((uint64_t)&v86, v4, v5, (uint64_t)v78);
      if (*(void *)&v78[0] != *(void *)v4 || *(_OWORD *)((char *)v78 + 8) != *(_OWORD *)(v3 + 16))
      {
        uint64_t v22 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        unint64_t v23 = sub_25B406B20(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v23, (uint64_t)" ", 1);
        unint64_t v24 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v25 = (void *)std::ostream::operator<<();
        sub_25B406B20(v25, (uint64_t)" ", 1);
        sub_25B406B20(v25, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
        uint64_t v26 = std::locale::use_facet(v83, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
        std::locale::~locale(v83);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
        uint64_t v27 = std::locale::use_facet(v83, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
        std::locale::~locale(v83);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v85 = 0u;
      *(_OWORD *)&v83[0].__locale_ = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v80 = 0u;
      uint64_t v28 = *(void *)(v3 + 104);
      uint64_t v29 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v28)
        {
          uint64_t v30 = 0;
          uint64_t v31 = a2 + 56;
          int v32 = *(unsigned __int8 *)(a2 + 136);
          uint64_t v33 = *(void *)(a2 + 144);
          do
          {
            uint64_t v77 = 0;
            sub_25B43A810((uint64_t)&v86, (uint64_t)v83, &v77, (uint64_t)&v80);
            if (v32)
            {
              uint64_t v34 = v77;
            }
            else
            {
              uint64_t v35 = 0;
              uint64_t v34 = 0;
              do
              {
                v34 += *(void *)(v31 + v35) * *(void *)((char *)&v80 + v35);
                v35 += 8;
              }
              while (v35 != 24);
            }
            *(_DWORD *)(v29 + 4 * v30) = *(_DWORD *)(v33 + 4 * v34);
            for (uint64_t k = 2; k != -1; --k)
            {
              uint64_t v37 = (std::locale::__imp *)((char *)v83[k].__locale_ + 1);
              v83[k].__locale_ = v37;
              if (v37 != *(std::locale::__imp **)((char *)v78 + k * 8)) {
                break;
              }
              v83[k].__locale_ = 0;
            }
            ++v30;
          }
          while (v30 != v28);
        }
      }
      else if (v28)
      {
        uint64_t v45 = 0;
        uint64_t v46 = v3 + 56;
        uint64_t v47 = a2 + 56;
        int v48 = *(unsigned __int8 *)(a2 + 136);
        uint64_t v49 = *(void *)(a2 + 144);
        do
        {
          uint64_t v77 = 0;
          sub_25B43A810((uint64_t)&v86, (uint64_t)v83, &v77, (uint64_t)&v80);
          uint64_t v50 = 0;
          uint64_t v51 = 0;
          do
          {
            v51 += *(void *)(v46 + v50 * 8) * (uint64_t)v83[v50].__locale_;
            ++v50;
          }
          while (v50 != 3);
          if (v48)
          {
            uint64_t v52 = v77;
          }
          else
          {
            uint64_t v53 = 0;
            uint64_t v52 = 0;
            do
            {
              v52 += *(void *)(v47 + v53) * *(void *)((char *)&v80 + v53);
              v53 += 8;
            }
            while (v53 != 24);
          }
          *(_DWORD *)(v29 + 4 * v51) = *(_DWORD *)(v49 + 4 * v52);
          for (uint64_t m = 2; m != -1; --m)
          {
            uint64_t v55 = (std::locale::__imp *)((char *)v83[m].__locale_ + 1);
            v83[m].__locale_ = v55;
            if (v55 != *(std::locale::__imp **)((char *)v78 + m * 8)) {
              break;
            }
            v83[m].__locale_ = 0;
          }
          ++v45;
        }
        while (v45 != v28);
      }
    }
    return sub_25B3F9500((uint64_t)&v86);
  }
  return result;
}

void sub_25B45B9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

float sub_25B45B9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  memset(v7, 0, sizeof(v7));
  sub_25B45A550(a1 + 48, a2, (uint64_t)v7);
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  do
  {
    v4 += *(void *)(a1 + 160 + v3) * *(void *)((char *)v7 + v3);
    v3 += 8;
  }
  while (v3 != 24);
  if (!*(unsigned char *)(a1 + 344))
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    do
    {
      v4 += *(void *)(a1 + 264 + v5) * *(void *)((char *)v7 + v5);
      v5 += 8;
    }
    while (v5 != 24);
  }
  return *(float *)(*(void *)(a1 + 352) + 4 * v4);
}

float sub_25B45BAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  sub_25B45A550(a1 + 48, a2, (uint64_t)v6);
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  do
  {
    v4 += *(void *)(a1 + 160 + v3) * *(void *)((char *)v6 + v3);
    v3 += 8;
  }
  while (v3 != 24);
  return *(float *)(*(void *)(a1 + 352) + 4 * v4);
}

void sub_25B45BB48(void *a1)
{
  *a1 = &unk_2708F1920;
  uint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B45BBB4(void *a1)
{
  *a1 = &unk_2708F1920;
  long long v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

uint64_t sub_25B45BC00(uint64_t result, _OWORD *a2)
{
  *(void *)uint64_t result = &unk_2708F1920;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 1;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(result + 8) = *a2;
  *(_OWORD *)(result + 40) = v2;
  *(_OWORD *)(result + 24) = v3;
  *(void *)(result + 56) = 1;
  uint64_t v4 = *(void *)(result + 8);
  *(void *)(result + 104) = v4;
  *(void *)(result + 112) = 0;
  if (v4) {
    sub_25B458194((uint64_t)&v5, v4);
  }
  *(unsigned char *)(result + 137) = 1;
  return result;
}

void sub_25B45BCDC(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B45BCF4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v118 = *MEMORY[0x263EF8340];
  long long v5 = (long long *)(result + 8);
  uint64_t v4 = *(void *)(result + 8);
  if (v4 == *(void *)a2)
  {
    uint64_t v6 = *(void *)(result + 104);
    uint64_t v7 = *(BOOL **)(result + 144);
    if (*(unsigned char *)(a2 + 288))
    {
      if (*(unsigned char *)(result + 136))
      {
        if (v6)
        {
          int v8 = *(_DWORD *)(a2 + 144);
          int v9 = *(unsigned __int8 **)(a2 + 296);
          do
          {
            int v10 = *v9++;
            *v7++ = v8 != v10;
            --v6;
          }
          while (v6);
        }
      }
      else if (v6)
      {
        uint64_t v59 = 0;
        uint64_t v60 = *(void *)(result + 56);
        int v61 = *(_DWORD *)(a2 + 144);
        uint64_t v62 = *(unsigned __int8 **)(a2 + 296);
        do
        {
          int v63 = *v62++;
          v7[v60 * v59] = v61 != v63;
          if (v59 + 1 == v4) {
            uint64_t v59 = 0;
          }
          else {
            ++v59;
          }
          --v6;
        }
        while (v6);
      }
    }
    else if (*(unsigned char *)(result + 136))
    {
      if (v6)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        int v34 = *(_DWORD *)(a2 + 144);
        uint64_t v35 = *(void *)(a2 + 296);
        do
        {
          if (*(unsigned char *)(a2 + 288)) {
            uint64_t v36 = v33;
          }
          else {
            uint64_t v36 = *(void *)(a2 + 208) * v32;
          }
          v7[v33] = v34 != *(unsigned __int8 *)(v35 + v36);
          if (v32 + 1 == v4) {
            uint64_t v32 = 0;
          }
          else {
            ++v32;
          }
          ++v33;
        }
        while (v6 != v33);
      }
    }
    else if (v6)
    {
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = *(void *)(result + 56);
      int v80 = *(_DWORD *)(a2 + 144);
      uint64_t v81 = *(void *)(a2 + 296);
      do
      {
        uint64_t result = *(void *)(a2 + 208) * v77;
        if (*(unsigned char *)(a2 + 288)) {
          uint64_t v82 = v78;
        }
        else {
          uint64_t v82 = *(void *)(a2 + 208) * v77;
        }
        v7[v79 * v77] = v80 != *(unsigned __int8 *)(v81 + v82);
        if (v77 + 1 == v4) {
          uint64_t v77 = 0;
        }
        else {
          ++v77;
        }
        ++v78;
      }
      while (v6 != v78);
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 288))
    {
      long long v113 = 0uLL;
      long long v114 = 0uLL;
      long long v111 = 0uLL;
      long long v112 = 0uLL;
      long long v109 = 0uLL;
      long long v110 = 0uLL;
      long long v107 = 0uLL;
      long long v108 = 0uLL;
      long long v105 = 0uLL;
      long long v106 = 0uLL;
      long long v103 = 0uLL;
      long long v104 = 0uLL;
      long long v101 = 0uLL;
      long long v102 = 0uLL;
      long long v99 = 0uLL;
      long long v100 = 0uLL;
      long long v97 = 0uLL;
      long long v98 = 0uLL;
      sub_25B439F30((uint64_t)&v100, v5, (long long *)a2, &v97);
      uint64_t v11 = (std::locale::__imp *)v97;
      if ((void)v97 != *(void *)v5)
      {
        size_t v12 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v13 = sub_25B406B20(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v13, (uint64_t)" ", 1);
        uint64_t v14 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v15 = (void *)std::ostream::operator<<();
        sub_25B406B20(v15, (uint64_t)" ", 1);
        sub_25B406B20(v15, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
        uint64_t v16 = std::locale::use_facet(v115, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(v115);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
        uint64_t v17 = std::locale::use_facet(v115, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(v115);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v116 = 0u;
      long long v117 = 0u;
      *(_OWORD *)&v115[0].__locale_ = 0u;
      uint64_t v18 = *(void *)(v3 + 104);
      uint64_t v19 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v18)
        {
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          unint64_t v23 = (uint64_t *)*((void *)&v101 + 1);
          uint64_t v22 = (uint64_t *)v102;
          unint64_t v24 = (uint64_t)(v102 - *((void *)&v101 + 1)) >> 3;
          if (v24 <= 1) {
            unint64_t v24 = 1;
          }
          uint64_t v25 = v112;
          int v26 = *(_DWORD *)(a2 + 144);
          uint64_t v27 = *(void *)(a2 + 296);
          do
          {
            v115[0].__locale_ = v20;
            locale = v20;
            if (v22 != v23)
            {
              uint64_t v29 = v23;
              unint64_t v30 = v24;
              do
              {
                uint64_t v31 = *v29++;
                v115[v31].__locale_ = 0;
                --v30;
              }
              while (v30);
              locale = v115[0].__locale_;
            }
            *(unsigned char *)(v19 + v21) = v26 != *(unsigned __int8 *)(v27 + (void)locale * v25);
            if ((std::locale::__imp *)((char *)v20 + 1) == v11) {
              uint64_t v20 = 0;
            }
            else {
              uint64_t v20 = (std::locale::__imp *)((char *)v20 + 1);
            }
            ++v21;
          }
          while (v21 != v18);
        }
      }
      else if (v18)
      {
        uint64_t v64 = 0;
        uint64_t v65 = 0;
        uint64_t v67 = (uint64_t *)*((void *)&v101 + 1);
        uint64_t v66 = (uint64_t *)v102;
        unint64_t v68 = (uint64_t)(v102 - *((void *)&v101 + 1)) >> 3;
        if (v68 <= 1) {
          unint64_t v68 = 1;
        }
        uint64_t v69 = v112;
        uint64_t v70 = *(void *)(v3 + 56);
        int v71 = *(_DWORD *)(a2 + 144);
        uint64_t v72 = *(void *)(a2 + 296);
        do
        {
          v115[0].__locale_ = v64;
          uint64_t v73 = v64;
          if (v66 != v67)
          {
            uint64_t v74 = v67;
            unint64_t v75 = v68;
            do
            {
              uint64_t v76 = *v74++;
              v115[v76].__locale_ = 0;
              --v75;
            }
            while (v75);
            uint64_t v73 = v115[0].__locale_;
          }
          *(unsigned char *)(v19 + (void)v64 * v70) = v71 != *(unsigned __int8 *)(v72 + (void)v73 * v69);
          if ((std::locale::__imp *)((char *)v64 + 1) == v11) {
            uint64_t v64 = 0;
          }
          else {
            uint64_t v64 = (std::locale::__imp *)((char *)v64 + 1);
          }
          ++v65;
        }
        while (v65 != v18);
      }
    }
    else
    {
      long long v113 = 0uLL;
      long long v114 = 0uLL;
      long long v111 = 0uLL;
      long long v112 = 0uLL;
      long long v109 = 0uLL;
      long long v110 = 0uLL;
      long long v107 = 0uLL;
      long long v108 = 0uLL;
      long long v105 = 0uLL;
      long long v106 = 0uLL;
      long long v103 = 0uLL;
      long long v104 = 0uLL;
      long long v101 = 0uLL;
      long long v102 = 0uLL;
      long long v99 = 0uLL;
      long long v100 = 0uLL;
      long long v97 = 0uLL;
      long long v98 = 0uLL;
      sub_25B439F30((uint64_t)&v100, v5, (long long *)a2, &v97);
      uint64_t v37 = (std::locale::__imp *)v97;
      if ((void)v97 != *(void *)v5)
      {
        uint64_t v38 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v39 = sub_25B406B20(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v39, (uint64_t)" ", 1);
        uint64_t v40 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v41 = (void *)std::ostream::operator<<();
        sub_25B406B20(v41, (uint64_t)" ", 1);
        sub_25B406B20(v41, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
        uint64_t v42 = std::locale::use_facet(v115, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
        std::locale::~locale(v115);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(*v40 - 24)));
        uint64_t v43 = std::locale::use_facet(v115, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
        std::locale::~locale(v115);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v116 = 0u;
      long long v117 = 0u;
      *(_OWORD *)&v115[0].__locale_ = 0u;
      uint64_t v44 = *(void *)(v3 + 104);
      uint64_t v45 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v44)
        {
          uint64_t v46 = 0;
          uint64_t v47 = 0;
          uint64_t v49 = (uint64_t *)*((void *)&v101 + 1);
          int v48 = (uint64_t *)v102;
          unint64_t v50 = (uint64_t)(v102 - *((void *)&v101 + 1)) >> 3;
          if (v50 <= 1) {
            unint64_t v50 = 1;
          }
          uint64_t v51 = v112;
          int v52 = *(_DWORD *)(a2 + 144);
          uint64_t v53 = *(void *)(a2 + 296);
          do
          {
            v115[0].__locale_ = v46;
            uint64_t v54 = v46;
            if (v48 != v49)
            {
              uint64_t v55 = v49;
              unint64_t v56 = v50;
              do
              {
                uint64_t v57 = *v55++;
                v115[v57].__locale_ = 0;
                --v56;
              }
              while (v56);
              uint64_t v54 = v115[0].__locale_;
            }
            if (*(unsigned char *)(a2 + 288)) {
              uint64_t v58 = v51;
            }
            else {
              uint64_t v58 = *(void *)(a2 + 208);
            }
            *(unsigned char *)(v45 + v47) = v52 != *(unsigned __int8 *)(v53 + v58 * (void)v54);
            if ((std::locale::__imp *)((char *)v46 + 1) == v37) {
              uint64_t v46 = 0;
            }
            else {
              uint64_t v46 = (std::locale::__imp *)((char *)v46 + 1);
            }
            ++v47;
          }
          while (v47 != v44);
        }
      }
      else if (v44)
      {
        long long v83 = 0;
        uint64_t v84 = 0;
        long long v86 = (uint64_t *)*((void *)&v101 + 1);
        long long v85 = (uint64_t *)v102;
        unint64_t v87 = (uint64_t)(v102 - *((void *)&v101 + 1)) >> 3;
        if (v87 <= 1) {
          unint64_t v87 = 1;
        }
        uint64_t v88 = v112;
        uint64_t v89 = *(void *)(v3 + 56);
        int v90 = *(_DWORD *)(a2 + 144);
        uint64_t v91 = *(void *)(a2 + 296);
        do
        {
          v115[0].__locale_ = v83;
          long long v92 = v83;
          if (v85 != v86)
          {
            long long v93 = v86;
            unint64_t v94 = v87;
            do
            {
              uint64_t v95 = *v93++;
              v115[v95].__locale_ = 0;
              --v94;
            }
            while (v94);
            long long v92 = v115[0].__locale_;
          }
          if (*(unsigned char *)(a2 + 288)) {
            uint64_t v96 = v88;
          }
          else {
            uint64_t v96 = *(void *)(a2 + 208);
          }
          *(unsigned char *)(v45 + (void)v83 * v89) = v90 != *(unsigned __int8 *)(v91 + v96 * (void)v92);
          if ((std::locale::__imp *)((char *)v83 + 1) == v37) {
            long long v83 = 0;
          }
          else {
            long long v83 = (std::locale::__imp *)((char *)v83 + 1);
          }
          ++v84;
        }
        while (v84 != v44);
      }
    }
    return sub_25B3F9500((uint64_t)&v100);
  }
  return result;
}

void sub_25B45C4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::locale::~locale((std::locale *)(v7 - 128));
  sub_25B3F9500((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25B45C514(void *a1)
{
  *a1 = &unk_2708F1900;
  uint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B45C580(void *a1)
{
  *a1 = &unk_2708F1900;
  long long v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

uint64_t sub_25B45C5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v6 = (uint64_t *)(a1 + 48);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_25B4582F4(a1 + 128, a2);
  sub_25B45DA18(v6, a3);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)a1 = *(void *)(a2 + 8 + 8 * v7);
  *(void *)(a1 + 8) = *(void *)(a2 + 8 + 8 * v8);
  *(void *)(a1 + 64 + 8 * v7) = 0;
  *(void *)(a1 + 64 + 8 * *(void *)(a1 + 56)) = 1;
  *(void *)(a1 + 80) = 1;
  *(void *)(a1 + 80) = *(void *)(a2 + 16);
  *(void *)(a1 + 88) = 1;
  return a1;
}

void sub_25B45C670(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 128) = &unk_2708F21F8;
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 256);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B45C6A4(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_2708F21F8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = 1;
  uint64_t v5 = *(void *)(a1 + 8) * v4;
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = 0;
  sub_25B458EBC((uint64_t)v6, v5);
}

void sub_25B45CA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v25 + 128);
  if (v27) {
    sub_25B404120(v27);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_25B45CA68(_OWORD *__b, char **a2)
{
  __b[1] = 0u;
  std::locale __b[2] = 0u;
  void *__b = 0u;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    uint64_t v6 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v7 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v8 = sub_25B406B20(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/../tensor/shape.hpp", 118);
    sub_25B406B20(v8, (uint64_t)" ", 1);
    int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_25B406B20(v9, (uint64_t)" ", 1);
    uint64_t v11 = sub_25B406B20(v10, (uint64_t)"Shape", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    size_t v12 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4088A4("err", "size of input shape vector is 0");
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
    uint64_t v13 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
  }
  uint64_t v14 = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x10)
  {
    uint64_t v15 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v16 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v17 = sub_25B406B20(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/../tensor/shape.hpp", 118);
    sub_25B406B20(v17, (uint64_t)" ", 1);
    uint64_t v18 = (void *)std::ostream::operator<<();
    uint64_t v19 = sub_25B406B20(v18, (uint64_t)" ", 1);
    uint64_t v20 = sub_25B406B20(v19, (uint64_t)"Shape", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
    uint64_t v21 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4089B0("err", "size of input shape vector > current dim");
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    uint64_t v22 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    uint64_t v14 = v5 - *a2;
  }
  unint64_t v23 = v14 >> 3;
  if (v14 == 8)
  {
    uint64_t v24 = 0;
  }
  else
  {
    if (v23 != 0 && v23 != 1) {
      uint64_t v24 = 1 - v23;
    }
    else {
      uint64_t v24 = 1;
    }
    memset_pattern16(__b, &unk_25B5F18C0, 8 * v24);
  }
  if (v5 != v4)
  {
    if (v23 <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = v23;
    }
    int v26 = (void *)__b + v24;
    do
    {
      uint64_t v27 = *(void *)v4;
      v4 += 8;
      *v26++ = v27;
      --v25;
    }
    while (v25);
  }
  return __b;
}

void sub_25B45CE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B45CE3C(uint64_t result, _OWORD *a2)
{
  *(void *)uint64_t result = &unk_2708F1900;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 1;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(result + 8) = *a2;
  *(_OWORD *)(result + 40) = v2;
  *(_OWORD *)(result + 24) = v3;
  *(void *)(result + 56) = 1;
  uint64_t v4 = *(void *)(result + 8);
  *(void *)(result + 104) = v4;
  *(void *)(result + 112) = 0;
  if (v4) {
    sub_25B457F00((uint64_t)&v5, v4);
  }
  *(unsigned char *)(result + 137) = 1;
  return result;
}

void sub_25B45CF18(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B45CF30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v147 = *MEMORY[0x263EF8340];
  long long v5 = (_OWORD *)(a1 + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (v7 == v8)
  {
    if (*(unsigned char *)(a2 + 264))
    {
      long long v133 = 0uLL;
      long long v134 = 0uLL;
      long long v132 = 0uLL;
      uint64_t v9 = *(void *)(a1 + 104);
      uint64_t v10 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v9)
        {
          uint64_t v11 = 0;
          uint64_t v12 = *(void *)(a2 + 272);
          do
          {
            uint64_t v13 = 0;
            uint64_t v14 = 0;
            char v15 = 1;
            do
            {
              char v16 = v15;
              v13 += *(void *)(a2 + 80 + 8 * v14) * *((void *)&v132 + *(void *)(a2 + 8 * v14 + 64));
              uint64_t v14 = 1;
              char v15 = 0;
            }
            while ((v16 & 1) != 0);
            uint64_t v17 = 0;
            *(_DWORD *)(v10 + 4 * v11) = *(_DWORD *)(v12 + 4 * v13);
            do
            {
              uint64_t v18 = *(void *)((char *)&v132 + v17 + 8) + 1;
              *(void *)((char *)&v132 + v17 + 8) = v18;
              if (v18 != *(void *)(a1 + 16 + v17)) {
                break;
              }
              *(void *)((char *)&v132 + v17 + 8) = 0;
              v17 -= 8;
            }
            while (v17 != -16);
            ++v11;
          }
          while (v11 != v9);
        }
      }
      else if (v9)
      {
        uint64_t v73 = 0;
        uint64_t v74 = *(void *)(a1 + 56);
        uint64_t v75 = *(void *)(a1 + 64);
        uint64_t v76 = *(void *)(a2 + 272);
        do
        {
          uint64_t v77 = 0;
          uint64_t v78 = 0;
          char v79 = 1;
          do
          {
            char v80 = v79;
            v77 += *(void *)(a2 + 80 + 8 * v78) * *((void *)&v132 + *(void *)(a2 + 8 * v78 + 64));
            uint64_t v78 = 1;
            char v79 = 0;
          }
          while ((v80 & 1) != 0);
          uint64_t v81 = 0;
          *(_DWORD *)(v10 + 4 * (v75 * *((void *)&v132 + 1) + v74 * v132)) = *(_DWORD *)(v76 + 4 * v77);
          do
          {
            uint64_t v82 = *(void *)((char *)&v132 + v81 + 8) + 1;
            *(void *)((char *)&v132 + v81 + 8) = v82;
            if (v82 != *(void *)(a1 + 16 + v81)) {
              break;
            }
            *(void *)((char *)&v132 + v81 + 8) = 0;
            v81 -= 8;
          }
          while (v81 != -16);
          ++v73;
        }
        while (v73 != v9);
      }
    }
    else
    {
      long long v133 = 0uLL;
      long long v134 = 0uLL;
      long long v132 = 0uLL;
      uint64_t v45 = *(void *)(a1 + 104);
      uint64_t v46 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v45)
        {
          uint64_t v47 = 0;
          uint64_t v48 = a1 + 16;
          do
          {
            float v49 = sub_25B45D968(a2, (uint64_t)&v132);
            uint64_t v50 = 0;
            *(float *)(v46 + 4 * v47) = v49;
            do
            {
              uint64_t v51 = *(void *)((char *)&v132 + v50 + 8) + 1;
              *(void *)((char *)&v132 + v50 + 8) = v51;
              if (v51 != *(void *)(v48 + v50)) {
                break;
              }
              *(void *)((char *)&v132 + v50 + 8) = 0;
              v50 -= 8;
            }
            while (v50 != -16);
            ++v47;
          }
          while (v47 != v45);
        }
      }
      else if (v45)
      {
        uint64_t v101 = 0;
        uint64_t v102 = *(void *)(a1 + 56);
        uint64_t v103 = *(void *)(a1 + 64);
        uint64_t v104 = a1 + 16;
        do
        {
          uint64_t v105 = v102 * v132 + v103 * *((void *)&v132 + 1);
          float v106 = sub_25B45D968(a2, (uint64_t)&v132);
          uint64_t v107 = 0;
          *(float *)(v46 + 4 * v105) = v106;
          do
          {
            uint64_t v108 = *(void *)((char *)&v132 + v107 + 8) + 1;
            *(void *)((char *)&v132 + v107 + 8) = v108;
            if (v108 != *(void *)(v104 + v107)) {
              break;
            }
            *(void *)((char *)&v132 + v107 + 8) = 0;
            v107 -= 8;
          }
          while (v107 != -16);
          ++v101;
        }
        while (v101 != v45);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 264))
    {
      long long v145 = 0uLL;
      long long v146 = 0uLL;
      long long v143 = 0uLL;
      long long v144 = 0uLL;
      long long v141 = 0uLL;
      long long v142 = 0uLL;
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v137 = 0uLL;
      long long v138 = 0uLL;
      long long v135 = 0uLL;
      long long v136 = 0uLL;
      long long v133 = 0uLL;
      long long v134 = 0uLL;
      long long v132 = 0uLL;
      long long v124 = 0uLL;
      long long v125 = 0uLL;
      long long v123 = 0uLL;
      sub_25B40AB84((uint64_t)&v132, v5, (_OWORD *)a2, (uint64_t)&v123);
      uint64_t v19 = 0;
      char v20 = 1;
      do
      {
        uint64_t v21 = *((void *)&v123 + v19);
        uint64_t v22 = *((void *)v5 + v19);
        if ((v20 & 1) == 0) {
          break;
        }
        char v20 = 0;
        uint64_t v19 = 1;
      }
      while (v21 == v22);
      if (v21 != v22)
      {
        unint64_t v23 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v24 = sub_25B406B20(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v24, (uint64_t)" ", 1);
        uint64_t v25 = (void *)MEMORY[0x263F8C0F8];
        int v26 = (void *)std::ostream::operator<<();
        sub_25B406B20(v26, (uint64_t)" ", 1);
        sub_25B406B20(v26, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
        uint64_t v27 = std::locale::use_facet(v129, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
        std::locale::~locale(v129);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
        uint64_t v28 = std::locale::use_facet(v129, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
        std::locale::~locale(v129);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      *(_OWORD *)&v129[0].__locale_ = 0u;
      long long v126 = 0u;
      long long v127 = 0u;
      uint64_t v29 = *(void *)(a1 + 104);
      uint64_t v30 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v29)
        {
          uint64_t v31 = 0;
          uint64_t v33 = (uint64_t *)*((void *)&v133 + 1);
          uint64_t v32 = (uint64_t *)v134;
          unint64_t v34 = (uint64_t)(v134 - *((void *)&v133 + 1)) >> 3;
          if (v34 <= 1) {
            unint64_t v34 = 1;
          }
          uint64_t v35 = *(void *)(a2 + 272);
          do
          {
            long long v126 = *(_OWORD *)&v129[0].__locale_;
            if (v32 != v33)
            {
              uint64_t v36 = v33;
              unint64_t v37 = v34;
              do
              {
                uint64_t v38 = *v36++;
                *((void *)&v126 + v38) = 0;
                --v37;
              }
              while (v37);
            }
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            char v41 = 1;
            do
            {
              char v42 = v41;
              v39 += *(void *)(a2 + 80 + 8 * v40) * *((void *)&v126 + *(void *)(a2 + 8 * v40 + 64));
              uint64_t v40 = 1;
              char v41 = 0;
            }
            while ((v42 & 1) != 0);
            *(_DWORD *)(v30 + 4 * v31) = *(_DWORD *)(v35 + 4 * v39);
            for (uint64_t i = 1; i != -1; --i)
            {
              uint64_t v44 = (std::locale::__imp *)((char *)v129[i].__locale_ + 1);
              v129[i].__locale_ = v44;
              if (v44 != *(std::locale::__imp **)((char *)&v123 + i * 8)) {
                break;
              }
              v129[i].__locale_ = 0;
            }
            ++v31;
          }
          while (v31 != v29);
        }
      }
      else if (v29)
      {
        uint64_t v83 = 0;
        long long v85 = (uint64_t *)*((void *)&v133 + 1);
        uint64_t v84 = (uint64_t *)v134;
        unint64_t v86 = (uint64_t)(v134 - *((void *)&v133 + 1)) >> 3;
        if (v86 <= 1) {
          unint64_t v86 = 1;
        }
        uint64_t v87 = *(void *)(a1 + 56);
        uint64_t v88 = *(void *)(a1 + 64);
        uint64_t v89 = *(void *)(a2 + 272);
        do
        {
          locale = v129[0].__locale_;
          uint64_t v91 = v129[1].__locale_;
          long long v126 = *(_OWORD *)&v129[0].__locale_;
          if (v84 != v85)
          {
            long long v92 = v85;
            unint64_t v93 = v86;
            do
            {
              uint64_t v94 = *v92++;
              *((void *)&v126 + v94) = 0;
              --v93;
            }
            while (v93);
          }
          uint64_t v95 = 0;
          uint64_t v96 = 0;
          char v97 = 1;
          do
          {
            char v98 = v97;
            v95 += *(void *)(a2 + 80 + 8 * v96) * *((void *)&v126 + *(void *)(a2 + 8 * v96 + 64));
            uint64_t v96 = 1;
            char v97 = 0;
          }
          while ((v98 & 1) != 0);
          *(_DWORD *)(v30 + 4 * ((void)locale * v87 + (void)v91 * v88)) = *(_DWORD *)(v89 + 4 * v95);
          for (uint64_t j = 1; j != -1; --j)
          {
            long long v100 = (std::locale::__imp *)((char *)v129[j].__locale_ + 1);
            v129[j].__locale_ = v100;
            if (v100 != *(std::locale::__imp **)((char *)&v123 + j * 8)) {
              break;
            }
            v129[j].__locale_ = 0;
          }
          ++v83;
        }
        while (v83 != v29);
      }
    }
    else
    {
      long long v145 = 0uLL;
      long long v146 = 0uLL;
      long long v143 = 0uLL;
      long long v144 = 0uLL;
      long long v141 = 0uLL;
      long long v142 = 0uLL;
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v137 = 0uLL;
      long long v138 = 0uLL;
      long long v135 = 0uLL;
      long long v136 = 0uLL;
      long long v133 = 0uLL;
      long long v134 = 0uLL;
      long long v132 = 0uLL;
      long long v124 = 0uLL;
      long long v125 = 0uLL;
      long long v123 = 0uLL;
      sub_25B40AB84((uint64_t)&v132, v5, (_OWORD *)a2, (uint64_t)&v123);
      uint64_t v52 = 0;
      char v53 = 1;
      do
      {
        uint64_t v54 = *((void *)&v123 + v52);
        uint64_t v55 = *((void *)v5 + v52);
        if ((v53 & 1) == 0) {
          break;
        }
        char v53 = 0;
        uint64_t v52 = 1;
      }
      while (v54 == v55);
      if (v54 != v55)
      {
        unint64_t v56 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v57 = sub_25B406B20(v56, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v57, (uint64_t)" ", 1);
        uint64_t v58 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v59 = (void *)std::ostream::operator<<();
        sub_25B406B20(v59, (uint64_t)" ", 1);
        sub_25B406B20(v59, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(void *)(*v59 - 24)));
        uint64_t v60 = std::locale::use_facet(v129, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
        std::locale::~locale(v129);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
        int v61 = std::locale::use_facet(v129, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
        std::locale::~locale(v129);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      *(_OWORD *)&v129[0].__locale_ = 0u;
      long long v126 = 0u;
      long long v127 = 0u;
      uint64_t v62 = *(void *)(a1 + 104);
      uint64_t v63 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v62)
        {
          uint64_t v64 = 0;
          uint64_t v66 = (uint64_t *)*((void *)&v133 + 1);
          uint64_t v65 = (uint64_t *)v134;
          if ((unint64_t)((uint64_t)(v134 - *((void *)&v133 + 1)) >> 3) <= 1) {
            uint64_t v67 = 1;
          }
          else {
            uint64_t v67 = (uint64_t)(v134 - *((void *)&v133 + 1)) >> 3;
          }
          do
          {
            long long v126 = *(_OWORD *)&v129[0].__locale_;
            if (v65 != v66)
            {
              unint64_t v68 = v66;
              uint64_t v69 = v67;
              do
              {
                uint64_t v70 = *v68++;
                *((void *)&v126 + v70) = 0;
                --v69;
              }
              while (v69);
            }
            *(float *)(v63 + 4 * v64) = sub_25B45D968(a2, (uint64_t)&v126);
            for (uint64_t k = 1; k != -1; --k)
            {
              uint64_t v72 = (std::locale::__imp *)((char *)v129[k].__locale_ + 1);
              v129[k].__locale_ = v72;
              if (v72 != *(std::locale::__imp **)((char *)&v123 + k * 8)) {
                break;
              }
              v129[k].__locale_ = 0;
            }
            ++v64;
          }
          while (v64 != v62);
        }
      }
      else if (v62)
      {
        uint64_t v109 = 0;
        long long v110 = (uint64_t *)*((void *)&v133 + 1);
        uint64_t v122 = (uint64_t *)v134;
        if ((unint64_t)((uint64_t)(v134 - *((void *)&v133 + 1)) >> 3) <= 1) {
          uint64_t v111 = 1;
        }
        else {
          uint64_t v111 = (uint64_t)(v134 - *((void *)&v133 + 1)) >> 3;
        }
        uint64_t v121 = *(void *)(a1 + 64);
        uint64_t v119 = v111;
        uint64_t v120 = *(void *)(a1 + 56);
        do
        {
          long long v113 = v129[0].__locale_;
          long long v112 = v129[1].__locale_;
          long long v126 = *(_OWORD *)&v129[0].__locale_;
          if (v122 != v110)
          {
            long long v114 = v110;
            uint64_t v115 = v119;
            do
            {
              uint64_t v116 = *v114++;
              *((void *)&v126 + v116) = 0;
              --v115;
            }
            while (v115);
          }
          *(float *)(v63 + 4 * (v120 * (void)v113 + v121 * (void)v112)) = sub_25B45D968(a2, (uint64_t)&v126);
          for (uint64_t m = 1; m != -1; --m)
          {
            uint64_t v118 = (std::locale::__imp *)((char *)v129[m].__locale_ + 1);
            v129[m].__locale_ = v118;
            if (v118 != *(std::locale::__imp **)((char *)&v123 + m * 8)) {
              break;
            }
            v129[m].__locale_ = 0;
          }
          ++v109;
        }
        while (v109 != v62);
      }
    }
    sub_25B3F9500((uint64_t)&v132);
  }
}

void sub_25B45D934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

float sub_25B45D968(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v9 = *MEMORY[0x263EF8340];
  memset(v8, 0, sizeof(v8));
  char v4 = 1;
  do
  {
    uint64_t v5 = *(void *)(a2 + 8 * *(void *)(a1 + 8 * v3 + 64));
    *((void *)v8 + v3) = v5;
    char v6 = v4;
    v2 += *(void *)(a1 + 80 + 8 * v3) * v5;
    uint64_t v3 = 1;
    char v4 = 0;
  }
  while ((v6 & 1) != 0);
  if (!*(unsigned char *)(a1 + 264)) {
    uint64_t v2 = *(void *)(a1 + 184) * *(void *)&v8[0] + *(void *)(a1 + 192) * *((void *)&v8[0] + 1);
  }
  return *(float *)(*(void *)(a1 + 272) + 4 * v2);
}

void sub_25B45DA18(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  char v6 = 1;
  uint64_t v7 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v8 = (std::locale::id *)MEMORY[0x263F8C108];
  do
  {
    char v9 = v6;
    int v10 = *(_DWORD *)(a2 + 4 * v5);
    if (v10 >= 0) {
      unsigned int v11 = *(_DWORD *)(a2 + 4 * v5);
    }
    else {
      unsigned int v11 = -v10;
    }
    if (v11 >= 2)
    {
      sub_25B406B20(v7, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/transpose_helper.hpp", 119);
      sub_25B406B20(v7, (uint64_t)" ", 1);
      uint64_t v12 = (void *)std::ostream::operator<<();
      sub_25B406B20(v12, (uint64_t)" ", 1);
      sub_25B406B20(v12, (uint64_t)"init", 4);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
      uint64_t v13 = std::locale::use_facet(&v48, v8);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v48);
      std::ostream::put();
      std::ostream::flush();
      sub_25B45E1E0("err", "the absolute value of axis should be less than dim");
      std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
      uint64_t v14 = std::locale::use_facet(&v48, v8);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale(&v48);
      std::ostream::put();
      std::ostream::flush();
    }
    if (v10 < 0) {
      v10 += 2;
    }
    if (v10 >= 2)
    {
      sub_25B406B20(v7, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/transpose_helper.hpp", 119);
      sub_25B406B20(v7, (uint64_t)" ", 1);
      char v15 = (void *)std::ostream::operator<<();
      sub_25B406B20(v15, (uint64_t)" ", 1);
      sub_25B406B20(v15, (uint64_t)"init", 4);
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
      char v16 = std::locale::use_facet(&v48, v8);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v48);
      std::ostream::put();
      std::ostream::flush();
      sub_25B435E20("err");
      std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
      uint64_t v17 = std::locale::use_facet(&v48, v8);
      ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
      std::locale::~locale(&v48);
      std::ostream::put();
      std::ostream::flush();
      if (v10 < 0)
      {
        sub_25B406B20(v7, (uint64_t)"runtime_err in ", 15);
        sub_25B406B20(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/transpose_helper.hpp", 119);
        sub_25B406B20(v7, (uint64_t)" ", 1);
        uint64_t v18 = (void *)std::ostream::operator<<();
        sub_25B406B20(v18, (uint64_t)" ", 1);
        sub_25B406B20(v18, (uint64_t)"init", 4);
        std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
        uint64_t v19 = std::locale::use_facet(&v48, v8);
        ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
        std::locale::~locale(&v48);
        std::ostream::put();
        std::ostream::flush();
        sub_25B435E20("err");
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
        char v20 = std::locale::use_facet(&v48, v8);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(&v48);
        std::ostream::put();
        std::ostream::flush();
      }
    }
    uint64_t v21 = v10;
    if ((unint64_t)v3 >= v4)
    {
      uint64_t v22 = v3 - v2;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v4 - (void)v2) >> 2 > v23) {
        unint64_t v23 = (uint64_t)(v4 - (void)v2) >> 2;
      }
      if (v4 - (unint64_t)v2 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v23;
      }
      if (v24) {
        unint64_t v24 = (unint64_t)sub_25B3FCAD4(v24);
      }
      else {
        uint64_t v25 = 0;
      }
      int v26 = (uint64_t *)(v24 + 8 * v22);
      *int v26 = v21;
      uint64_t v27 = v26 + 1;
      while (v3 != v2)
      {
        uint64_t v28 = *--v3;
        *--int v26 = v28;
      }
      unint64_t v4 = v24 + 8 * v25;
      if (v2) {
        operator delete(v2);
      }
      uint64_t v2 = v26;
      uint64_t v3 = v27;
    }
    else
    {
      *v3++ = v10;
    }
    char v6 = 0;
    uint64_t v5 = 1;
  }
  while ((v9 & 1) != 0);
  if (v3 != v2)
  {
    uint64_t v29 = 0;
    char v30 = 0;
    unint64_t v31 = v3 - v2;
    unint64_t v32 = v31 - 1;
    if (v31 <= 1) {
      uint64_t v33 = 1;
    }
    else {
      uint64_t v33 = v3 - v2;
    }
    unint64_t v34 = v2 + 1;
    do
    {
      uint64_t v35 = v29 + 1;
      if (v29 + 1 < v31)
      {
        uint64_t v36 = v2[v29];
        unint64_t v37 = v34;
        unint64_t v38 = v32;
        do
        {
          uint64_t v39 = *v37++;
          v30 |= v36 == v39;
          --v38;
        }
        while (v38);
      }
      --v32;
      ++v34;
      uint64_t v29 = v35;
    }
    while (v35 != v33);
    if (v30)
    {
      uint64_t v40 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
      char v41 = sub_25B406B20(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/transpose_helper.hpp", 119);
      sub_25B406B20(v41, (uint64_t)" ", 1);
      char v42 = (void *)MEMORY[0x263F8C0F8];
      uint64_t v43 = (void *)std::ostream::operator<<();
      sub_25B406B20(v43, (uint64_t)" ", 1);
      sub_25B406B20(v43, (uint64_t)"init", 4);
      std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
      uint64_t v44 = std::locale::use_facet(&v48, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
      std::locale::~locale(&v48);
      std::ostream::put();
      std::ostream::flush();
      sub_25B408054("err", "duplicate dim idx");
      std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(*v42 - 24)));
      uint64_t v45 = std::locale::use_facet(&v48, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
      std::locale::~locale(&v48);
      std::ostream::put();
      std::ostream::flush();
    }
  }
  *a1 = *v2;
  a1[1] = v2[1];
  operator delete(v2);
}

void sub_25B45E190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  if (v12) {
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}